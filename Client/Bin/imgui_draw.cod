; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24245.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_BSS	SEGMENT
?full_ranges@?1??GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ@4PAGA DW 01395H DUP (?) ; `ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon'::`2'::full_ranges
	ALIGN	4

?full_ranges@?1??GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ@4PAGA DW 01779H DUP (?) ; `ImFontAtlas::GetGlyphRangesJapanese'::`2'::full_ranges
_BSS	ENDS
_DATA	SEGMENT
?base_ranges@?1??GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ@4PAGA DW 020H ; `ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon'::`2'::base_ranges
	DW	0ffH
	DW	02000H
	DW	0206fH
	DW	03000H
	DW	030ffH
	DW	031f0H
	DW	031ffH
	DW	0ff00H
	DW	0ffefH
	DW	0fffdH
	DW	0fffdH
?base_ranges@?1??GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ@4PAGA DW 020H ; `ImFontAtlas::GetGlyphRangesJapanese'::`2'::base_ranges
	DW	0ffH
	DW	03000H
	DW	030ffH
	DW	031f0H
	DW	031ffH
	DW	0ff00H
	DW	0ffefH
	DW	0fffdH
	DW	0fffdH
_DATA	ENDS
CONST	SEGMENT
?ranges@?1??GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ@4QBGB DW 020H ; `ImFontAtlas::GetGlyphRangesDefault'::`2'::ranges
	DW	0ffH
	DW	00H
	ORG $+2
?ranges@?1??GetGlyphRangesGreek@ImFontAtlas@@QEAAPEBGXZ@4QBGB DW 020H ; `ImFontAtlas::GetGlyphRangesGreek'::`2'::ranges
	DW	0ffH
	DW	0370H
	DW	03ffH
	DW	00H
	ORG $+6
?ranges@?1??GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ@4QBGB DW 020H ; `ImFontAtlas::GetGlyphRangesKorean'::`2'::ranges
	DW	0ffH
	DW	03131H
	DW	03163H
	DW	0ac00H
	DW	0d7a3H
	DW	0fffdH
	DW	0fffdH
	DW	00H
	ORG $+6
?ranges@?1??GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ@4QBGB DW 020H ; `ImFontAtlas::GetGlyphRangesChineseFull'::`2'::ranges
	DW	0ffH
	DW	02000H
	DW	0206fH
	DW	03000H
	DW	030ffH
	DW	031f0H
	DW	031ffH
	DW	0ff00H
	DW	0ffefH
	DW	0fffdH
	DW	0fffdH
	DW	04e00H
	DW	09fafH
	DW	00H
	ORG $+2
?accumulative_offsets_from_0x4E00@?1??GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ@4QBFB DW 00H ; `ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon'::`2'::accumulative_offsets_from_0x4E00
	DW	01H
	DW	02H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	02H
	DW	01H
	DW	02H
	DW	03H
	DW	03H
	DW	03H
	DW	02H
	DW	02H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	05H
	DW	02H
	DW	03H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	01H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	0aH
	DW	01H
	DW	02H
	DW	013H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	05H
	DW	01H
	DW	06H
	DW	03H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	08H
	DW	05H
	DW	01H
	DW	01H
	DW	04H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	02H
	DW	01H
	DW	05H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	0aH
	DW	01H
	DW	01H
	DW	05H
	DW	02H
	DW	04H
	DW	06H
	DW	01H
	DW	04H
	DW	02H
	DW	02H
	DW	02H
	DW	0cH
	DW	02H
	DW	01H
	DW	01H
	DW	06H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	01H
	DW	01H
	DW	04H
	DW	06H
	DW	05H
	DW	01H
	DW	04H
	DW	02H
	DW	02H
	DW	04H
	DW	0aH
	DW	07H
	DW	01H
	DW	01H
	DW	04H
	DW	02H
	DW	04H
	DW	02H
	DW	01H
	DW	04H
	DW	03H
	DW	06H
	DW	0aH
	DW	0cH
	DW	05H
	DW	07H
	DW	02H
	DW	0eH
	DW	02H
	DW	09H
	DW	01H
	DW	01H
	DW	06H
	DW	07H
	DW	0aH
	DW	04H
	DW	07H
	DW	0dH
	DW	01H
	DW	05H
	DW	04H
	DW	08H
	DW	04H
	DW	01H
	DW	01H
	DW	02H
	DW	01cH
	DW	05H
	DW	06H
	DW	01H
	DW	01H
	DW	05H
	DW	02H
	DW	05H
	DW	014H
	DW	02H
	DW	02H
	DW	09H
	DW	08H
	DW	0bH
	DW	02H
	DW	09H
	DW	011H
	DW	01H
	DW	08H
	DW	06H
	DW	08H
	DW	01bH
	DW	04H
	DW	06H
	DW	09H
	DW	014H
	DW	0bH
	DW	01bH
	DW	06H
	DW	044H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	07H
	DW	06H
	DW	0bH
	DW	03H
	DW	03H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	08H
	DW	03H
	DW	04H
	DW	01H
	DW	05H
	DW	07H
	DW	02H
	DW	01H
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	04H
	DW	05H
	DW	06H
	DW	03H
	DW	06H
	DW	02H
	DW	0cH
	DW	03H
	DW	01H
	DW	03H
	DW	09H
	DW	02H
	DW	04H
	DW	03H
	DW	04H
	DW	01H
	DW	05H
	DW	03H
	DW	03H
	DW	01H
	DW	03H
	DW	07H
	DW	01H
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	02H
	DW	03H
	DW	02H
	DW	06H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	07H
	DW	01H
	DW	07H
	DW	03H
	DW	04H
	DW	05H
	DW	0fH
	DW	02H
	DW	02H
	DW	01H
	DW	05H
	DW	03H
	DW	016H
	DW	013H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	06H
	DW	01H
	DW	01H
	DW	0cH
	DW	08H
	DW	02H
	DW	09H
	DW	012H
	DW	016H
	DW	04H
	DW	01H
	DW	01H
	DW	05H
	DW	01H
	DW	010H
	DW	01H
	DW	02H
	DW	07H
	DW	0aH
	DW	0fH
	DW	01H
	DW	01H
	DW	06H
	DW	02H
	DW	04H
	DW	01H
	DW	02H
	DW	04H
	DW	01H
	DW	06H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	04H
	DW	01H
	DW	06H
	DW	04H
	DW	05H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	0aH
	DW	03H
	DW	01H
	DW	03H
	DW	02H
	DW	01H
	DW	09H
	DW	03H
	DW	02H
	DW	05H
	DW	07H
	DW	02H
	DW	013H
	DW	04H
	DW	03H
	DW	06H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	03H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	05H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	07H
	DW	01H
	DW	04H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	04H
	DW	04H
	DW	03H
	DW	08H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	05H
	DW	01H
	DW	03H
	DW	01H
	DW	03H
	DW	04H
	DW	06H
	DW	02H
	DW	02H
	DW	0eH
	DW	04H
	DW	06H
	DW	06H
	DW	0bH
	DW	09H
	DW	01H
	DW	0fH
	DW	03H
	DW	01H
	DW	01cH
	DW	05H
	DW	02H
	DW	05H
	DW	05H
	DW	03H
	DW	01H
	DW	03H
	DW	04H
	DW	05H
	DW	04H
	DW	06H
	DW	0eH
	DW	03H
	DW	02H
	DW	03H
	DW	05H
	DW	015H
	DW	02H
	DW	07H
	DW	014H
	DW	0aH
	DW	01H
	DW	02H
	DW	013H
	DW	02H
	DW	04H
	DW	01cH
	DW	01cH
	DW	02H
	DW	03H
	DW	02H
	DW	01H
	DW	0eH
	DW	04H
	DW	01H
	DW	01aH
	DW	01cH
	DW	02aH
	DW	0cH
	DW	028H
	DW	03H
	DW	034H
	DW	04fH
	DW	05H
	DW	0eH
	DW	011H
	DW	03H
	DW	02H
	DW	02H
	DW	0bH
	DW	03H
	DW	04H
	DW	06H
	DW	03H
	DW	01H
	DW	08H
	DW	02H
	DW	017H
	DW	04H
	DW	05H
	DW	08H
	DW	0aH
	DW	04H
	DW	02H
	DW	07H
	DW	03H
	DW	05H
	DW	01H
	DW	01H
	DW	06H
	DW	03H
	DW	01H
	DW	02H
	DW	02H
	DW	02H
	DW	05H
	DW	01cH
	DW	01H
	DW	01H
	DW	07H
	DW	07H
	DW	014H
	DW	05H
	DW	03H
	DW	01dH
	DW	03H
	DW	011H
	DW	01aH
	DW	01H
	DW	08H
	DW	04H
	DW	01bH
	DW	03H
	DW	06H
	DW	0bH
	DW	017H
	DW	05H
	DW	03H
	DW	04H
	DW	06H
	DW	0dH
	DW	018H
	DW	010H
	DW	06H
	DW	05H
	DW	0aH
	DW	019H
	DW	023H
	DW	07H
	DW	03H
	DW	02H
	DW	03H
	DW	03H
	DW	0eH
	DW	03H
	DW	06H
	DW	02H
	DW	06H
	DW	01H
	DW	04H
	DW	02H
	DW	03H
	DW	08H
	DW	02H
	DW	01H
	DW	01H
	DW	03H
	DW	03H
	DW	03H
	DW	04H
	DW	01H
	DW	01H
	DW	0dH
	DW	02H
	DW	02H
	DW	04H
	DW	05H
	DW	02H
	DW	01H
	DW	0eH
	DW	0eH
	DW	01H
	DW	02H
	DW	02H
	DW	01H
	DW	04H
	DW	05H
	DW	02H
	DW	03H
	DW	01H
	DW	0eH
	DW	03H
	DW	0cH
	DW	03H
	DW	011H
	DW	02H
	DW	010H
	DW	05H
	DW	01H
	DW	02H
	DW	01H
	DW	08H
	DW	09H
	DW	03H
	DW	013H
	DW	04H
	DW	02H
	DW	02H
	DW	04H
	DW	011H
	DW	019H
	DW	015H
	DW	014H
	DW	01cH
	DW	04bH
	DW	01H
	DW	0aH
	DW	01dH
	DW	067H
	DW	04H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	04H
	DW	02H
	DW	04H
	DW	01H
	DW	02H
	DW	03H
	DW	018H
	DW	02H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	08H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	06H
	DW	01H
	DW	05H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	04H
	DW	01H
	DW	01H
	DW	05H
	DW	02H
	DW	01H
	DW	05H
	DW	06H
	DW	0dH
	DW	09H
	DW	010H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	03H
	DW	02H
	DW	04H
	DW	05H
	DW	02H
	DW	05H
	DW	02H
	DW	02H
	DW	03H
	DW	07H
	DW	0dH
	DW	07H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	03H
	DW	02H
	DW	01H
	DW	06H
	DW	04H
	DW	09H
	DW	02H
	DW	01H
	DW	0eH
	DW	02H
	DW	0eH
	DW	02H
	DW	01H
	DW	012H
	DW	03H
	DW	04H
	DW	0eH
	DW	04H
	DW	0bH
	DW	029H
	DW	0fH
	DW	017H
	DW	0fH
	DW	017H
	DW	0b0H
	DW	01H
	DW	03H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	03H
	DW	01H
	DW	02H
	DW	03H
	DW	07H
	DW	03H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	04H
	DW	04H
	DW	06H
	DW	02H
	DW	04H
	DW	01H
	DW	09H
	DW	07H
	DW	01H
	DW	0aH
	DW	05H
	DW	08H
	DW	010H
	DW	01dH
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	03H
	DW	01H
	DW	03H
	DW	05H
	DW	02H
	DW	04H
	DW	05H
	DW	04H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	03H
	DW	03H
	DW	07H
	DW	01H
	DW	06H
	DW	0aH
	DW	01H
	DW	011H
	DW	01H
	DW	02cH
	DW	04H
	DW	06H
	DW	02H
	DW	01H
	DW	01H
	DW	06H
	DW	05H
	DW	04H
	DW	02H
	DW	0aH
	DW	01H
	DW	06H
	DW	09H
	DW	02H
	DW	08H
	DW	01H
	DW	018H
	DW	01H
	DW	02H
	DW	0dH
	DW	07H
	DW	08H
	DW	08H
	DW	02H
	DW	01H
	DW	04H
	DW	01H
	DW	03H
	DW	01H
	DW	03H
	DW	03H
	DW	05H
	DW	02H
	DW	05H
	DW	0aH
	DW	09H
	DW	04H
	DW	09H
	DW	0cH
	DW	02H
	DW	01H
	DW	06H
	DW	01H
	DW	0aH
	DW	01H
	DW	01H
	DW	07H
	DW	07H
	DW	04H
	DW	0aH
	DW	08H
	DW	03H
	DW	01H
	DW	0dH
	DW	04H
	DW	03H
	DW	01H
	DW	06H
	DW	01H
	DW	03H
	DW	05H
	DW	02H
	DW	01H
	DW	02H
	DW	011H
	DW	010H
	DW	05H
	DW	02H
	DW	010H
	DW	06H
	DW	01H
	DW	04H
	DW	02H
	DW	01H
	DW	03H
	DW	03H
	DW	06H
	DW	08H
	DW	05H
	DW	0bH
	DW	0bH
	DW	01H
	DW	03H
	DW	03H
	DW	02H
	DW	04H
	DW	06H
	DW	0aH
	DW	09H
	DW	05H
	DW	07H
	DW	04H
	DW	07H
	DW	04H
	DW	07H
	DW	01H
	DW	01H
	DW	04H
	DW	02H
	DW	01H
	DW	03H
	DW	06H
	DW	08H
	DW	07H
	DW	01H
	DW	06H
	DW	0bH
	DW	05H
	DW	05H
	DW	03H
	DW	018H
	DW	09H
	DW	04H
	DW	02H
	DW	07H
	DW	0dH
	DW	05H
	DW	01H
	DW	08H
	DW	052H
	DW	010H
	DW	03dH
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	02H
	DW	02H
	DW	010H
	DW	0aH
	DW	03H
	DW	08H
	DW	01H
	DW	01H
	DW	06H
	DW	04H
	DW	02H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	03H
	DW	08H
	DW	04H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	06H
	DW	03H
	DW	05H
	DW	01H
	DW	01H
	DW	04H
	DW	06H
	DW	09H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	07H
	DW	02H
	DW	01H
	DW	06H
	DW	01H
	DW	05H
	DW	04H
	DW	04H
	DW	03H
	DW	01H
	DW	08H
	DW	01H
	DW	03H
	DW	03H
	DW	01H
	DW	03H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	03H
	DW	01H
	DW	06H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	07H
	DW	01H
	DW	08H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	05H
	DW	02H
	DW	05H
	DW	03H
	DW	05H
	DW	0aH
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	05H
	DW	0bH
	DW	03H
	DW	09H
	DW	03H
	DW	05H
	DW	01H
	DW	01H
	DW	05H
	DW	09H
	DW	01H
	DW	02H
	DW	01H
	DW	05H
	DW	07H
	DW	09H
	DW	09H
	DW	08H
	DW	01H
	DW	03H
	DW	03H
	DW	03H
	DW	06H
	DW	08H
	DW	02H
	DW	03H
	DW	02H
	DW	01H
	DW	01H
	DW	020H
	DW	06H
	DW	01H
	DW	02H
	DW	0fH
	DW	09H
	DW	03H
	DW	07H
	DW	0dH
	DW	01H
	DW	03H
	DW	0aH
	DW	0dH
	DW	02H
	DW	0eH
	DW	01H
	DW	0dH
	DW	0aH
	DW	02H
	DW	01H
	DW	03H
	DW	0aH
	DW	04H
	DW	0fH
	DW	02H
	DW	0fH
	DW	0fH
	DW	0aH
	DW	01H
	DW	03H
	DW	09H
	DW	06H
	DW	09H
	DW	020H
	DW	019H
	DW	01aH
	DW	02fH
	DW	07H
	DW	03H
	DW	02H
	DW	03H
	DW	01H
	DW	06H
	DW	03H
	DW	04H
	DW	03H
	DW	02H
	DW	08H
	DW	05H
	DW	04H
	DW	01H
	DW	09H
	DW	04H
	DW	02H
	DW	02H
	DW	013H
	DW	0aH
	DW	06H
	DW	02H
	DW	03H
	DW	08H
	DW	01H
	DW	02H
	DW	02H
	DW	04H
	DW	02H
	DW	01H
	DW	09H
	DW	04H
	DW	04H
	DW	04H
	DW	06H
	DW	04H
	DW	08H
	DW	09H
	DW	02H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	05H
	DW	05H
	DW	01H
	DW	03H
	DW	08H
	DW	04H
	DW	06H
	DW	02H
	DW	01H
	DW	04H
	DW	0cH
	DW	01H
	DW	05H
	DW	03H
	DW	07H
	DW	0dH
	DW	02H
	DW	05H
	DW	08H
	DW	01H
	DW	06H
	DW	01H
	DW	02H
	DW	05H
	DW	0eH
	DW	06H
	DW	01H
	DW	05H
	DW	02H
	DW	04H
	DW	08H
	DW	0fH
	DW	05H
	DW	01H
	DW	017H
	DW	06H
	DW	03eH
	DW	02H
	DW	0aH
	DW	01H
	DW	01H
	DW	08H
	DW	01H
	DW	02H
	DW	02H
	DW	0aH
	DW	04H
	DW	02H
	DW	02H
	DW	09H
	DW	02H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	03H
	DW	01H
	DW	05H
	DW	03H
	DW	03H
	DW	02H
	DW	01H
	DW	03H
	DW	08H
	DW	01H
	DW	01H
	DW	01H
	DW	0bH
	DW	03H
	DW	01H
	DW	01H
	DW	04H
	DW	03H
	DW	07H
	DW	01H
	DW	0eH
	DW	01H
	DW	02H
	DW	03H
	DW	0cH
	DW	05H
	DW	02H
	DW	05H
	DW	01H
	DW	06H
	DW	07H
	DW	05H
	DW	07H
	DW	0eH
	DW	0bH
	DW	01H
	DW	03H
	DW	01H
	DW	08H
	DW	09H
	DW	0cH
	DW	02H
	DW	01H
	DW	0bH
	DW	08H
	DW	04H
	DW	04H
	DW	02H
	DW	06H
	DW	0aH
	DW	09H
	DW	0dH
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	05H
	DW	01H
	DW	03H
	DW	02H
	DW	04H
	DW	04H
	DW	01H
	DW	012H
	DW	02H
	DW	03H
	DW	0eH
	DW	0bH
	DW	04H
	DW	01dH
	DW	04H
	DW	02H
	DW	07H
	DW	01H
	DW	03H
	DW	0dH
	DW	09H
	DW	02H
	DW	02H
	DW	05H
	DW	03H
	DW	05H
	DW	014H
	DW	07H
	DW	010H
	DW	08H
	DW	05H
	DW	048H
	DW	022H
	DW	06H
	DW	04H
	DW	016H
	DW	0cH
	DW	0cH
	DW	01cH
	DW	02dH
	DW	024H
	DW	09H
	DW	07H
	DW	027H
	DW	09H
	DW	0bfH
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	0bH
	DW	08H
	DW	04H
	DW	09H
	DW	02H
	DW	03H
	DW	016H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	011H
	DW	01H
	DW	07H
	DW	07H
	DW	01H
	DW	0bH
	DW	01fH
	DW	0aH
	DW	02H
	DW	04H
	DW	08H
	DW	02H
	DW	03H
	DW	02H
	DW	01H
	DW	04H
	DW	02H
	DW	010H
	DW	04H
	DW	020H
	DW	02H
	DW	03H
	DW	013H
	DW	0dH
	DW	04H
	DW	09H
	DW	01H
	DW	05H
	DW	02H
	DW	0eH
	DW	08H
	DW	01H
	DW	01H
	DW	03H
	DW	06H
	DW	013H
	DW	06H
	DW	05H
	DW	01H
	DW	010H
	DW	06H
	DW	02H
	DW	0aH
	DW	08H
	DW	05H
	DW	01H
	DW	02H
	DW	03H
	DW	01H
	DW	05H
	DW	05H
	DW	01H
	DW	0bH
	DW	06H
	DW	06H
	DW	01H
	DW	03H
	DW	03H
	DW	02H
	DW	06H
	DW	03H
	DW	08H
	DW	01H
	DW	01H
	DW	04H
	DW	0aH
	DW	07H
	DW	05H
	DW	07H
	DW	07H
	DW	05H
	DW	08H
	DW	09H
	DW	02H
	DW	01H
	DW	03H
	DW	04H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	03H
	DW	03H
	DW	02H
	DW	06H
	DW	010H
	DW	01H
	DW	04H
	DW	06H
	DW	03H
	DW	01H
	DW	0aH
	DW	06H
	DW	01H
	DW	03H
	DW	0fH
	DW	02H
	DW	09H
	DW	02H
	DW	0aH
	DW	019H
	DW	0dH
	DW	09H
	DW	010H
	DW	06H
	DW	02H
	DW	02H
	DW	0aH
	DW	0bH
	DW	04H
	DW	03H
	DW	09H
	DW	01H
	DW	02H
	DW	06H
	DW	06H
	DW	05H
	DW	04H
	DW	01eH
	DW	028H
	DW	01H
	DW	0aH
	DW	07H
	DW	0cH
	DW	0eH
	DW	021H
	DW	06H
	DW	03H
	DW	06H
	DW	07H
	DW	03H
	DW	01H
	DW	03H
	DW	01H
	DW	0bH
	DW	0eH
	DW	04H
	DW	09H
	DW	05H
	DW	0cH
	DW	0bH
	DW	031H
	DW	012H
	DW	033H
	DW	01fH
	DW	08cH
	DW	01fH
	DW	02H
	DW	02H
	DW	01H
	DW	05H
	DW	01H
	DW	08H
	DW	01H
	DW	0aH
	DW	01H
	DW	04H
	DW	04H
	DW	03H
	DW	018H
	DW	01H
	DW	0aH
	DW	01H
	DW	03H
	DW	06H
	DW	06H
	DW	010H
	DW	03H
	DW	04H
	DW	05H
	DW	02H
	DW	01H
	DW	04H
	DW	02H
	DW	039H
	DW	0aH
	DW	06H
	DW	016H
	DW	02H
	DW	016H
	DW	03H
	DW	07H
	DW	016H
	DW	06H
	DW	0aH
	DW	0bH
	DW	024H
	DW	012H
	DW	010H
	DW	021H
	DW	024H
	DW	02H
	DW	05H
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	0aH
	DW	01H
	DW	04H
	DW	0dH
	DW	02H
	DW	07H
	DW	05H
	DW	02H
	DW	09H
	DW	03H
	DW	04H
	DW	01H
	DW	07H
	DW	02bH
	DW	03H
	DW	07H
	DW	03H
	DW	09H
	DW	0eH
	DW	07H
	DW	09H
	DW	01H
	DW	0bH
	DW	01H
	DW	01H
	DW	03H
	DW	07H
	DW	04H
	DW	012H
	DW	0dH
	DW	01H
	DW	0eH
	DW	01H
	DW	03H
	DW	06H
	DW	0aH
	DW	049H
	DW	02H
	DW	02H
	DW	01eH
	DW	06H
	DW	01H
	DW	0bH
	DW	012H
	DW	013H
	DW	0dH
	DW	016H
	DW	03H
	DW	02eH
	DW	02aH
	DW	025H
	DW	059H
	DW	07H
	DW	03H
	DW	010H
	DW	022H
	DW	02H
	DW	02H
	DW	03H
	DW	09H
	DW	01H
	DW	07H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	04H
	DW	0aH
	DW	07H
	DW	03H
	DW	0aH
	DW	03H
	DW	09H
	DW	05H
	DW	01cH
	DW	09H
	DW	02H
	DW	06H
	DW	0dH
	DW	07H
	DW	03H
	DW	01H
	DW	03H
	DW	0aH
	DW	02H
	DW	07H
	DW	02H
	DW	0bH
	DW	03H
	DW	06H
	DW	015H
	DW	036H
	DW	055H
	DW	02H
	DW	01H
	DW	04H
	DW	02H
	DW	02H
	DW	01H
	DW	027H
	DW	03H
	DW	015H
	DW	02H
	DW	02H
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	01H
	DW	01H
	DW	03H
	DW	04H
	DW	0fH
	DW	01H
	DW	03H
	DW	02H
	DW	04H
	DW	04H
	DW	02H
	DW	03H
	DW	08H
	DW	02H
	DW	014H
	DW	01H
	DW	08H
	DW	07H
	DW	0dH
	DW	04H
	DW	01H
	DW	01aH
	DW	06H
	DW	02H
	DW	09H
	DW	022H
	DW	04H
	DW	015H
	DW	034H
	DW	0aH
	DW	04H
	DW	04H
	DW	01H
	DW	05H
	DW	0cH
	DW	02H
	DW	0bH
	DW	01H
	DW	07H
	DW	02H
	DW	01eH
	DW	0cH
	DW	02cH
	DW	02H
	DW	01eH
	DW	01H
	DW	01H
	DW	03H
	DW	06H
	DW	010H
	DW	09H
	DW	011H
	DW	027H
	DW	052H
	DW	02H
	DW	02H
	DW	018H
	DW	07H
	DW	01H
	DW	07H
	DW	03H
	DW	010H
	DW	09H
	DW	0eH
	DW	02cH
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	03H
	DW	05H
	DW	02H
	DW	04H
	DW	01H
	DW	06H
	DW	07H
	DW	05H
	DW	03H
	DW	02H
	DW	06H
	DW	01H
	DW	0bH
	DW	05H
	DW	0bH
	DW	02H
	DW	01H
	DW	012H
	DW	013H
	DW	08H
	DW	01H
	DW	03H
	DW	018H
	DW	01dH
	DW	02H
	DW	01H
	DW	03H
	DW	05H
	DW	02H
	DW	02H
	DW	01H
	DW	0dH
	DW	06H
	DW	05H
	DW	01H
	DW	02eH
	DW	0bH
	DW	03H
	DW	05H
	DW	01H
	DW	01H
	DW	05H
	DW	08H
	DW	02H
	DW	0aH
	DW	06H
	DW	0cH
	DW	06H
	DW	03H
	DW	07H
	DW	0bH
	DW	02H
	DW	04H
	DW	010H
	DW	0dH
	DW	02H
	DW	05H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	05H
	DW	02H
	DW	01cH
	DW	05H
	DW	02H
	DW	017H
	DW	0aH
	DW	08H
	DW	04H
	DW	04H
	DW	016H
	DW	027H
	DW	05fH
	DW	026H
	DW	08H
	DW	0eH
	DW	09H
	DW	05H
	DW	01H
	DW	0dH
	DW	05H
	DW	04H
	DW	03H
	DW	0dH
	DW	0cH
	DW	0bH
	DW	01H
	DW	09H
	DW	01H
	DW	01bH
	DW	025H
	DW	02H
	DW	05H
	DW	04H
	DW	04H
	DW	03fH
	DW	0d3H
	DW	05fH
	DW	02H
	DW	02H
	DW	02H
	DW	01H
	DW	03H
	DW	05H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	04H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	05H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	04H
	DW	02H
	DW	01H
	DW	03H
	DW	06H
	DW	01H
	DW	01H
	DW	03H
	DW	07H
	DW	0fH
	DW	05H
	DW	03H
	DW	02H
	DW	05H
	DW	03H
	DW	09H
	DW	0bH
	DW	04H
	DW	02H
	DW	016H
	DW	01H
	DW	06H
	DW	03H
	DW	08H
	DW	07H
	DW	01H
	DW	04H
	DW	01cH
	DW	04H
	DW	010H
	DW	03H
	DW	03H
	DW	019H
	DW	04H
	DW	04H
	DW	01bH
	DW	01bH
	DW	01H
	DW	04H
	DW	01H
	DW	02H
	DW	02H
	DW	07H
	DW	01H
	DW	03H
	DW	05H
	DW	02H
	DW	01cH
	DW	08H
	DW	02H
	DW	0eH
	DW	01H
	DW	08H
	DW	06H
	DW	010H
	DW	019H
	DW	03H
	DW	03H
	DW	03H
	DW	0eH
	DW	03H
	DW	03H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	04H
	DW	06H
	DW	03H
	DW	08H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	06H
	DW	0aH
	DW	06H
	DW	02H
	DW	03H
	DW	012H
	DW	03H
	DW	02H
	DW	05H
	DW	05H
	DW	04H
	DW	03H
	DW	01H
	DW	05H
	DW	02H
	DW	05H
	DW	04H
	DW	017H
	DW	07H
	DW	06H
	DW	0cH
	DW	06H
	DW	04H
	DW	011H
	DW	0bH
	DW	09H
	DW	05H
	DW	01H
	DW	01H
	DW	0aH
	DW	05H
	DW	0cH
	DW	01H
	DW	01H
	DW	0bH
	DW	01aH
	DW	021H
	DW	07H
	DW	03H
	DW	06H
	DW	01H
	DW	011H
	DW	07H
	DW	01H
	DW	05H
	DW	0cH
	DW	01H
	DW	0bH
	DW	02H
	DW	04H
	DW	01H
	DW	08H
	DW	0eH
	DW	011H
	DW	017H
	DW	01H
	DW	02H
	DW	01H
	DW	07H
	DW	08H
	DW	010H
	DW	0bH
	DW	09H
	DW	06H
	DW	05H
	DW	02H
	DW	06H
	DW	04H
	DW	010H
	DW	02H
	DW	08H
	DW	0eH
	DW	01H
	DW	0bH
	DW	08H
	DW	09H
	DW	01H
	DW	01H
	DW	01H
	DW	09H
	DW	019H
	DW	04H
	DW	0bH
	DW	013H
	DW	07H
	DW	02H
	DW	0fH
	DW	02H
	DW	0cH
	DW	08H
	DW	034H
	DW	07H
	DW	05H
	DW	013H
	DW	02H
	DW	010H
	DW	04H
	DW	024H
	DW	08H
	DW	01H
	DW	010H
	DW	08H
	DW	018H
	DW	01aH
	DW	04H
	DW	06H
	DW	02H
	DW	09H
	DW	05H
	DW	04H
	DW	024H
	DW	03H
	DW	01cH
	DW	0cH
	DW	019H
	DW	0fH
	DW	025H
	DW	01bH
	DW	011H
	DW	0cH
	DW	03bH
	DW	026H
	DW	05H
	DW	020H
	DW	07fH
	DW	01H
	DW	02H
	DW	09H
	DW	011H
	DW	0eH
	DW	04H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	08H
	DW	0bH
	DW	032H
	DW	04H
	DW	0eH
	DW	02H
	DW	013H
	DW	010H
	DW	04H
	DW	011H
	DW	05H
	DW	04H
	DW	05H
	DW	01aH
	DW	0cH
	DW	02dH
	DW	02H
	DW	017H
	DW	02dH
	DW	068H
	DW	01eH
	DW	0cH
	DW	08H
	DW	03H
	DW	0aH
	DW	02H
	DW	02H
	DW	03H
	DW	03H
	DW	01H
	DW	04H
	DW	014H
	DW	07H
	DW	02H
	DW	09H
	DW	06H
	DW	0fH
	DW	02H
	DW	014H
	DW	01H
	DW	03H
	DW	010H
	DW	04H
	DW	0bH
	DW	0fH
	DW	06H
	DW	086H
	DW	02H
	DW	05H
	DW	03bH
	DW	01H
	DW	02H
	DW	02H
	DW	02H
	DW	01H
	DW	09H
	DW	011H
	DW	03H
	DW	01aH
	DW	089H
	DW	0aH
	DW	0d3H
	DW	03bH
	DW	01H
	DW	02H
	DW	04H
	DW	01H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	06H
	DW	02H
	DW	03H
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	02H
	DW	03H
	DW	01H
	DW	03H
	DW	04H
	DW	04H
	DW	02H
	DW	03H
	DW	03H
	DW	01H
	DW	04H
	DW	03H
	DW	01H
	DW	07H
	DW	02H
	DW	02H
	DW	03H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	03H
	DW	03H
	DW	02H
	DW	02H
	DW	03H
	DW	02H
	DW	01H
	DW	03H
	DW	0eH
	DW	06H
	DW	01H
	DW	03H
	DW	02H
	DW	09H
	DW	06H
	DW	0fH
	DW	01bH
	DW	09H
	DW	022H
	DW	091H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	02H
	DW	03H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	05H
	DW	08H
	DW	03H
	DW	05H
	DW	02H
	DW	04H
	DW	01H
	DW	03H
	DW	02H
	DW	02H
	DW	02H
	DW	0cH
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	0aH
	DW	04H
	DW	05H
	DW	01H
	DW	014H
	DW	04H
	DW	010H
	DW	01H
	DW	0fH
	DW	09H
	DW	05H
	DW	0cH
	DW	02H
	DW	09H
	DW	02H
	DW	05H
	DW	04H
	DW	02H
	DW	01aH
	DW	013H
	DW	07H
	DW	01H
	DW	01aH
	DW	04H
	DW	01eH
	DW	0cH
	DW	0fH
	DW	02aH
	DW	01H
	DW	06H
	DW	08H
	DW	0acH
	DW	01H
	DW	01H
	DW	04H
	DW	02H
	DW	01H
	DW	01H
	DW	0bH
	DW	02H
	DW	02H
	DW	04H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	0aH
	DW	08H
	DW	01H
	DW	02H
	DW	01H
	DW	04H
	DW	05H
	DW	01H
	DW	02H
	DW	05H
	DW	01H
	DW	08H
	DW	04H
	DW	01H
	DW	03H
	DW	04H
	DW	02H
	DW	01H
	DW	06H
	DW	02H
	DW	01H
	DW	03H
	DW	04H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0cH
	DW	05H
	DW	07H
	DW	02H
	DW	04H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	03H
	DW	06H
	DW	01H
	DW	02H
	DW	02H
	DW	03H
	DW	03H
	DW	03H
	DW	02H
	DW	01H
	DW	02H
	DW	0cH
	DW	0eH
	DW	0bH
	DW	06H
	DW	06H
	DW	04H
	DW	0cH
	DW	02H
	DW	08H
	DW	01H
	DW	07H
	DW	0aH
	DW	01H
	DW	023H
	DW	07H
	DW	04H
	DW	0dH
	DW	0fH
	DW	04H
	DW	03H
	DW	017H
	DW	015H
	DW	01cH
	DW	034H
	DW	05H
	DW	01aH
	DW	05H
	DW	06H
	DW	01H
	DW	07H
	DW	0aH
	DW	02H
	DW	07H
	DW	035H
	DW	03H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	0a3H
	DW	0214H
	DW	01H
	DW	0aH
	DW	0bH
	DW	01H
	DW	03H
	DW	03H
	DW	04H
	DW	08H
	DW	02H
	DW	08H
	DW	06H
	DW	02H
	DW	02H
	DW	017H
	DW	016H
	DW	04H
	DW	02H
	DW	02H
	DW	04H
	DW	02H
	DW	01H
	DW	03H
	DW	01H
	DW	03H
	DW	03H
	DW	05H
	DW	09H
	DW	08H
	DW	02H
	DW	01H
	DW	02H
	DW	08H
	DW	01H
	DW	0aH
	DW	02H
	DW	0cH
	DW	015H
	DW	014H
	DW	0fH
	DW	069H
	DW	02H
	DW	03H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	03H
	DW	01H
	DW	01H
	DW	02H
	DW	05H
	DW	01H
	DW	04H
	DW	0fH
	DW	0bH
	DW	013H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	04H
	DW	05H
	DW	01H
	DW	01H
	DW	02H
	DW	05H
	DW	03H
	DW	05H
	DW	0cH
	DW	01H
	DW	02H
	DW	05H
	DW	01H
	DW	0bH
	DW	01H
	DW	01H
	DW	0fH
	DW	09H
	DW	01H
	DW	04H
	DW	05H
	DW	03H
	DW	01aH
	DW	08H
	DW	02H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	0fH
	DW	013H
	DW	02H
	DW	0cH
	DW	01H
	DW	02H
	DW	05H
	DW	02H
	DW	07H
	DW	02H
	DW	013H
	DW	02H
	DW	014H
	DW	06H
	DW	01aH
	DW	07H
	DW	05H
	DW	02H
	DW	02H
	DW	07H
	DW	022H
	DW	015H
	DW	0dH
	DW	046H
	DW	02H
	DW	080H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	02H
	DW	02H
	DW	0fH
	DW	01H
	DW	04H
	DW	01H
	DW	03H
	DW	04H
	DW	02aH
	DW	0aH
	DW	06H
	DW	01H
	DW	031H
	DW	055H
	DW	08H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	04H
	DW	04H
	DW	02H
	DW	03H
	DW	06H
	DW	01H
	DW	05H
	DW	07H
	DW	04H
	DW	03H
	DW	0d3H
	DW	04H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	05H
	DW	01H
	DW	02H
	DW	04H
	DW	02H
	DW	02H
	DW	06H
	DW	05H
	DW	06H
	DW	0aH
	DW	03H
	DW	04H
	DW	030H
	DW	064H
	DW	06H
	DW	02H
	DW	010H
	DW	0128H
	DW	05H
	DW	01bH
	DW	0183H
	DW	02H
	DW	02H
	DW	03H
	DW	07H
	DW	010H
	DW	08H
	DW	05H
	DW	026H
	DW	0fH
	DW	027H
	DW	015H
	DW	09H
	DW	0aH
	DW	03H
	DW	07H
	DW	03bH
	DW	0dH
	DW	01bH
	DW	015H
	DW	02fH
	DW	05H
	DW	015H
	DW	06H
	ORG $+8
?accumulative_offsets_from_0x4E00@?1??GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ@4QBFB DW 00H ; `ImFontAtlas::GetGlyphRangesJapanese'::`2'::accumulative_offsets_from_0x4E00
	DW	01H
	DW	02H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	03H
	DW	02H
	DW	02H
	DW	01H
	DW	05H
	DW	03H
	DW	05H
	DW	07H
	DW	05H
	DW	06H
	DW	01H
	DW	02H
	DW	01H
	DW	07H
	DW	02H
	DW	06H
	DW	03H
	DW	01H
	DW	08H
	DW	01H
	DW	01H
	DW	04H
	DW	01H
	DW	01H
	DW	012H
	DW	02H
	DW	0bH
	DW	02H
	DW	06H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	05H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	03H
	DW	03H
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	0cH
	DW	07H
	DW	09H
	DW	01H
	DW	04H
	DW	05H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	0aH
	DW	01H
	DW	01H
	DW	09H
	DW	02H
	DW	02H
	DW	04H
	DW	05H
	DW	06H
	DW	09H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	09H
	DW	03H
	DW	012H
	DW	05H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	01H
	DW	06H
	DW	03H
	DW	07H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	04H
	DW	02H
	DW	01H
	DW	017H
	DW	02H
	DW	0aH
	DW	04H
	DW	03H
	DW	05H
	DW	02H
	DW	04H
	DW	0aH
	DW	02H
	DW	04H
	DW	0dH
	DW	01H
	DW	06H
	DW	01H
	DW	09H
	DW	03H
	DW	01H
	DW	01H
	DW	06H
	DW	06H
	DW	07H
	DW	06H
	DW	03H
	DW	01H
	DW	02H
	DW	0bH
	DW	03H
	DW	02H
	DW	02H
	DW	03H
	DW	02H
	DW	0fH
	DW	02H
	DW	02H
	DW	05H
	DW	04H
	DW	03H
	DW	06H
	DW	04H
	DW	01H
	DW	02H
	DW	05H
	DW	02H
	DW	0cH
	DW	010H
	DW	06H
	DW	0dH
	DW	09H
	DW	0dH
	DW	02H
	DW	01H
	DW	01H
	DW	07H
	DW	010H
	DW	04H
	DW	07H
	DW	01H
	DW	013H
	DW	01H
	DW	05H
	DW	01H
	DW	02H
	DW	02H
	DW	07H
	DW	07H
	DW	08H
	DW	02H
	DW	06H
	DW	05H
	DW	04H
	DW	09H
	DW	012H
	DW	07H
	DW	04H
	DW	05H
	DW	09H
	DW	0dH
	DW	0bH
	DW	08H
	DW	0fH
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	08H
	DW	02H
	DW	09H
	DW	03H
	DW	03H
	DW	01H
	DW	01H
	DW	04H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	09H
	DW	01H
	DW	04H
	DW	03H
	DW	05H
	DW	05H
	DW	02H
	DW	07H
	DW	05H
	DW	03H
	DW	04H
	DW	08H
	DW	02H
	DW	01H
	DW	0dH
	DW	02H
	DW	03H
	DW	03H
	DW	01H
	DW	0eH
	DW	01H
	DW	01H
	DW	04H
	DW	05H
	DW	01H
	DW	03H
	DW	06H
	DW	01H
	DW	05H
	DW	02H
	DW	01H
	DW	01H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	01H
	DW	01H
	DW	02H
	DW	07H
	DW	06H
	DW	06H
	DW	07H
	DW	01H
	DW	04H
	DW	07H
	DW	06H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0cH
	DW	03H
	DW	03H
	DW	09H
	DW	05H
	DW	02H
	DW	06H
	DW	01H
	DW	05H
	DW	06H
	DW	01H
	DW	02H
	DW	03H
	DW	012H
	DW	02H
	DW	04H
	DW	0eH
	DW	04H
	DW	01H
	DW	03H
	DW	06H
	DW	01H
	DW	01H
	DW	06H
	DW	03H
	DW	05H
	DW	05H
	DW	03H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	0cH
	DW	03H
	DW	01H
	DW	04H
	DW	02H
	DW	03H
	DW	02H
	DW	03H
	DW	0bH
	DW	01H
	DW	07H
	DW	04H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	011H
	DW	01H
	DW	09H
	DW	01H
	DW	018H
	DW	01H
	DW	01H
	DW	04H
	DW	02H
	DW	02H
	DW	04H
	DW	01H
	DW	02H
	DW	07H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	02H
	DW	02H
	DW	04H
	DW	0fH
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	05H
	DW	02H
	DW	05H
	DW	014H
	DW	02H
	DW	05H
	DW	09H
	DW	01H
	DW	0aH
	DW	08H
	DW	07H
	DW	06H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	06H
	DW	02H
	DW	01H
	DW	02H
	DW	08H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	0cH
	DW	04H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0aH
	DW	03H
	DW	01H
	DW	07H
	DW	05H
	DW	0dH
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	06H
	DW	01H
	DW	01H
	DW	01eH
	DW	02H
	DW	09H
	DW	09H
	DW	01H
	DW	0fH
	DW	026H
	DW	0bH
	DW	03H
	DW	01H
	DW	08H
	DW	018H
	DW	07H
	DW	01H
	DW	09H
	DW	08H
	DW	0aH
	DW	02H
	DW	01H
	DW	09H
	DW	01fH
	DW	02H
	DW	0dH
	DW	06H
	DW	02H
	DW	09H
	DW	04H
	DW	031H
	DW	05H
	DW	02H
	DW	0fH
	DW	02H
	DW	01H
	DW	0aH
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	06H
	DW	0fH
	DW	01eH
	DW	023H
	DW	03H
	DW	0eH
	DW	012H
	DW	08H
	DW	01H
	DW	010H
	DW	0aH
	DW	01cH
	DW	0cH
	DW	013H
	DW	02dH
	DW	026H
	DW	01H
	DW	03H
	DW	02H
	DW	03H
	DW	0dH
	DW	02H
	DW	01H
	DW	07H
	DW	03H
	DW	06H
	DW	05H
	DW	03H
	DW	04H
	DW	03H
	DW	01H
	DW	05H
	DW	07H
	DW	08H
	DW	01H
	DW	05H
	DW	03H
	DW	012H
	DW	05H
	DW	03H
	DW	06H
	DW	01H
	DW	015H
	DW	04H
	DW	018H
	DW	09H
	DW	018H
	DW	028H
	DW	03H
	DW	0eH
	DW	03H
	DW	015H
	DW	03H
	DW	02H
	DW	01H
	DW	02H
	DW	04H
	DW	02H
	DW	03H
	DW	01H
	DW	0fH
	DW	0fH
	DW	06H
	DW	05H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	05H
	DW	06H
	DW	01H
	DW	09H
	DW	07H
	DW	03H
	DW	03H
	DW	02H
	DW	01H
	DW	04H
	DW	03H
	DW	08H
	DW	015H
	DW	05H
	DW	010H
	DW	04H
	DW	05H
	DW	02H
	DW	0aH
	DW	0bH
	DW	0bH
	DW	03H
	DW	06H
	DW	03H
	DW	02H
	DW	09H
	DW	03H
	DW	06H
	DW	0dH
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0bH
	DW	0cH
	DW	06H
	DW	06H
	DW	01H
	DW	04H
	DW	02H
	DW	06H
	DW	05H
	DW	02H
	DW	01H
	DW	01H
	DW	03H
	DW	03H
	DW	06H
	DW	0dH
	DW	03H
	DW	01H
	DW	01H
	DW	05H
	DW	01H
	DW	02H
	DW	03H
	DW	03H
	DW	0eH
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	02H
	DW	05H
	DW	01H
	DW	09H
	DW	05H
	DW	01H
	DW	01H
	DW	06H
	DW	0cH
	DW	03H
	DW	0cH
	DW	03H
	DW	04H
	DW	0dH
	DW	02H
	DW	0eH
	DW	02H
	DW	08H
	DW	01H
	DW	011H
	DW	05H
	DW	01H
	DW	010H
	DW	04H
	DW	02H
	DW	02H
	DW	015H
	DW	08H
	DW	09H
	DW	06H
	DW	017H
	DW	014H
	DW	0cH
	DW	019H
	DW	013H
	DW	09H
	DW	026H
	DW	08H
	DW	03H
	DW	015H
	DW	028H
	DW	019H
	DW	021H
	DW	0dH
	DW	04H
	DW	03H
	DW	01H
	DW	04H
	DW	01H
	DW	02H
	DW	04H
	DW	01H
	DW	02H
	DW	05H
	DW	01aH
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	06H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	09H
	DW	02H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	06H
	DW	03H
	DW	02H
	DW	01H
	DW	01H
	DW	06H
	DW	06H
	DW	01H
	DW	08H
	DW	02H
	DW	02H
	DW	02H
	DW	01H
	DW	04H
	DW	01H
	DW	02H
	DW	03H
	DW	02H
	DW	07H
	DW	03H
	DW	02H
	DW	04H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	02H
	DW	05H
	DW	04H
	DW	0aH
	DW	09H
	DW	04H
	DW	09H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	03H
	DW	02H
	DW	01H
	DW	06H
	DW	04H
	DW	09H
	DW	06H
	DW	01H
	DW	0aH
	DW	02H
	DW	01fH
	DW	011H
	DW	08H
	DW	03H
	DW	07H
	DW	05H
	DW	028H
	DW	01H
	DW	07H
	DW	07H
	DW	01H
	DW	06H
	DW	05H
	DW	02H
	DW	0aH
	DW	07H
	DW	08H
	DW	04H
	DW	0fH
	DW	027H
	DW	019H
	DW	06H
	DW	01cH
	DW	02fH
	DW	012H
	DW	0aH
	DW	07H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	03H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	04H
	DW	02H
	DW	01H
	DW	04H
	DW	01H
	DW	03H
	DW	06H
	DW	0aH
	DW	07H
	DW	08H
	DW	06H
	DW	02H
	DW	02H
	DW	01H
	DW	03H
	DW	03H
	DW	02H
	DW	05H
	DW	08H
	DW	07H
	DW	09H
	DW	0cH
	DW	02H
	DW	0fH
	DW	01H
	DW	01H
	DW	04H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	01H
	DW	03H
	DW	03H
	DW	05H
	DW	06H
	DW	02H
	DW	03H
	DW	02H
	DW	0aH
	DW	01H
	DW	04H
	DW	02H
	DW	08H
	DW	01H
	DW	01H
	DW	01H
	DW	0bH
	DW	06H
	DW	01H
	DW	015H
	DW	04H
	DW	010H
	DW	03H
	DW	01H
	DW	03H
	DW	01H
	DW	04H
	DW	02H
	DW	03H
	DW	06H
	DW	05H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	03H
	DW	03H
	DW	04H
	DW	06H
	DW	01H
	DW	01H
	DW	0aH
	DW	04H
	DW	02H
	DW	07H
	DW	0aH
	DW	04H
	DW	07H
	DW	04H
	DW	02H
	DW	09H
	DW	04H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	01H
	DW	08H
	DW	03H
	DW	04H
	DW	01H
	DW	03H
	DW	01H
	DW	06H
	DW	01H
	DW	04H
	DW	02H
	DW	01H
	DW	04H
	DW	07H
	DW	02H
	DW	01H
	DW	08H
	DW	01H
	DW	04H
	DW	05H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	04H
	DW	06H
	DW	02H
	DW	07H
	DW	01H
	DW	0aH
	DW	01H
	DW	01H
	DW	03H
	DW	04H
	DW	0bH
	DW	0aH
	DW	08H
	DW	015H
	DW	04H
	DW	06H
	DW	01H
	DW	03H
	DW	05H
	DW	02H
	DW	01H
	DW	02H
	DW	01cH
	DW	05H
	DW	05H
	DW	02H
	DW	03H
	DW	0dH
	DW	01H
	DW	02H
	DW	03H
	DW	01H
	DW	04H
	DW	02H
	DW	01H
	DW	05H
	DW	014H
	DW	03H
	DW	08H
	DW	0bH
	DW	01H
	DW	03H
	DW	03H
	DW	03H
	DW	01H
	DW	08H
	DW	0aH
	DW	09H
	DW	02H
	DW	0aH
	DW	09H
	DW	02H
	DW	03H
	DW	01H
	DW	01H
	DW	02H
	DW	04H
	DW	01H
	DW	08H
	DW	03H
	DW	06H
	DW	01H
	DW	07H
	DW	08H
	DW	06H
	DW	0bH
	DW	01H
	DW	04H
	DW	01dH
	DW	08H
	DW	04H
	DW	03H
	DW	01H
	DW	02H
	DW	07H
	DW	0dH
	DW	01H
	DW	04H
	DW	01H
	DW	06H
	DW	02H
	DW	06H
	DW	0cH
	DW	0cH
	DW	02H
	DW	014H
	DW	03H
	DW	02H
	DW	03H
	DW	06H
	DW	04H
	DW	08H
	DW	09H
	DW	02H
	DW	07H
	DW	022H
	DW	05H
	DW	01H
	DW	012H
	DW	06H
	DW	01H
	DW	01H
	DW	04H
	DW	04H
	DW	05H
	DW	07H
	DW	09H
	DW	01H
	DW	02H
	DW	02H
	DW	04H
	DW	03H
	DW	04H
	DW	01H
	DW	07H
	DW	02H
	DW	02H
	DW	02H
	DW	06H
	DW	02H
	DW	03H
	DW	019H
	DW	05H
	DW	03H
	DW	06H
	DW	01H
	DW	04H
	DW	06H
	DW	07H
	DW	04H
	DW	02H
	DW	01H
	DW	04H
	DW	02H
	DW	0dH
	DW	06H
	DW	04H
	DW	04H
	DW	03H
	DW	01H
	DW	05H
	DW	03H
	DW	04H
	DW	04H
	DW	03H
	DW	02H
	DW	01H
	DW	01H
	DW	04H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	0bH
	DW	01H
	DW	06H
	DW	03H
	DW	01H
	DW	07H
	DW	03H
	DW	06H
	DW	02H
	DW	08H
	DW	08H
	DW	06H
	DW	09H
	DW	03H
	DW	04H
	DW	0bH
	DW	03H
	DW	02H
	DW	0aH
	DW	0cH
	DW	02H
	DW	05H
	DW	0bH
	DW	01H
	DW	06H
	DW	04H
	DW	05H
	DW	03H
	DW	01H
	DW	08H
	DW	05H
	DW	04H
	DW	06H
	DW	06H
	DW	03H
	DW	05H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	06H
	DW	011H
	DW	0cH
	DW	01H
	DW	0aH
	DW	01H
	DW	06H
	DW	0cH
	DW	01H
	DW	06H
	DW	06H
	DW	013H
	DW	09H
	DW	06H
	DW	010H
	DW	01H
	DW	0dH
	DW	04H
	DW	04H
	DW	0fH
	DW	07H
	DW	011H
	DW	06H
	DW	0bH
	DW	09H
	DW	0fH
	DW	0cH
	DW	06H
	DW	07H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	0fH
	DW	09H
	DW	03H
	DW	015H
	DW	04H
	DW	06H
	DW	031H
	DW	012H
	DW	07H
	DW	03H
	DW	02H
	DW	03H
	DW	01H
	DW	06H
	DW	08H
	DW	02H
	DW	02H
	DW	06H
	DW	02H
	DW	09H
	DW	01H
	DW	03H
	DW	06H
	DW	04H
	DW	04H
	DW	01H
	DW	02H
	DW	010H
	DW	02H
	DW	05H
	DW	02H
	DW	01H
	DW	06H
	DW	02H
	DW	03H
	DW	05H
	DW	03H
	DW	01H
	DW	02H
	DW	05H
	DW	01H
	DW	02H
	DW	01H
	DW	09H
	DW	03H
	DW	01H
	DW	08H
	DW	06H
	DW	04H
	DW	08H
	DW	0bH
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	0dH
	DW	08H
	DW	04H
	DW	01H
	DW	03H
	DW	02H
	DW	02H
	DW	01H
	DW	04H
	DW	01H
	DW	0bH
	DW	01H
	DW	05H
	DW	02H
	DW	01H
	DW	05H
	DW	02H
	DW	05H
	DW	08H
	DW	06H
	DW	01H
	DW	01H
	DW	07H
	DW	04H
	DW	03H
	DW	08H
	DW	03H
	DW	02H
	DW	07H
	DW	02H
	DW	01H
	DW	05H
	DW	01H
	DW	05H
	DW	02H
	DW	04H
	DW	07H
	DW	06H
	DW	02H
	DW	08H
	DW	05H
	DW	01H
	DW	0bH
	DW	04H
	DW	05H
	DW	03H
	DW	06H
	DW	012H
	DW	01H
	DW	02H
	DW	0dH
	DW	03H
	DW	03H
	DW	01H
	DW	015H
	DW	01H
	DW	01H
	DW	04H
	DW	01H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	08H
	DW	01H
	DW	02H
	DW	02H
	DW	07H
	DW	01H
	DW	02H
	DW	04H
	DW	02H
	DW	02H
	DW	09H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	03H
	DW	06H
	DW	03H
	DW	0cH
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	06H
	DW	03H
	DW	02H
	DW	04H
	DW	08H
	DW	02H
	DW	02H
	DW	04H
	DW	02H
	DW	07H
	DW	01H
	DW	08H
	DW	09H
	DW	05H
	DW	02H
	DW	03H
	DW	02H
	DW	01H
	DW	03H
	DW	02H
	DW	0dH
	DW	07H
	DW	0eH
	DW	06H
	DW	05H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	04H
	DW	02H
	DW	017H
	DW	02H
	DW	01H
	DW	01H
	DW	06H
	DW	03H
	DW	01H
	DW	04H
	DW	01H
	DW	0fH
	DW	03H
	DW	01H
	DW	07H
	DW	03H
	DW	09H
	DW	0eH
	DW	01H
	DW	03H
	DW	01H
	DW	04H
	DW	01H
	DW	01H
	DW	05H
	DW	08H
	DW	01H
	DW	03H
	DW	08H
	DW	03H
	DW	08H
	DW	0fH
	DW	0bH
	DW	04H
	DW	0eH
	DW	04H
	DW	04H
	DW	02H
	DW	05H
	DW	05H
	DW	01H
	DW	07H
	DW	01H
	DW	06H
	DW	0eH
	DW	07H
	DW	07H
	DW	08H
	DW	05H
	DW	0fH
	DW	04H
	DW	08H
	DW	06H
	DW	05H
	DW	06H
	DW	02H
	DW	01H
	DW	0dH
	DW	01H
	DW	014H
	DW	0fH
	DW	0bH
	DW	09H
	DW	02H
	DW	05H
	DW	06H
	DW	02H
	DW	0bH
	DW	02H
	DW	06H
	DW	02H
	DW	05H
	DW	01H
	DW	05H
	DW	08H
	DW	04H
	DW	0dH
	DW	013H
	DW	019H
	DW	04H
	DW	01H
	DW	01H
	DW	0bH
	DW	01H
	DW	022H
	DW	02H
	DW	05H
	DW	09H
	DW	0eH
	DW	06H
	DW	02H
	DW	02H
	DW	06H
	DW	01H
	DW	01H
	DW	0eH
	DW	01H
	DW	03H
	DW	0eH
	DW	0dH
	DW	01H
	DW	06H
	DW	0cH
	DW	015H
	DW	0eH
	DW	0eH
	DW	06H
	DW	020H
	DW	011H
	DW	08H
	DW	020H
	DW	09H
	DW	01cH
	DW	01H
	DW	02H
	DW	04H
	DW	0bH
	DW	08H
	DW	03H
	DW	01H
	DW	0eH
	DW	02H
	DW	05H
	DW	0fH
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	06H
	DW	04H
	DW	01H
	DW	03H
	DW	04H
	DW	0bH
	DW	03H
	DW	01H
	DW	01H
	DW	0bH
	DW	01eH
	DW	01H
	DW	05H
	DW	01H
	DW	04H
	DW	01H
	DW	05H
	DW	08H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	04H
	DW	03H
	DW	011H
	DW	023H
	DW	02H
	DW	06H
	DW	0cH
	DW	011H
	DW	03H
	DW	01H
	DW	06H
	DW	02H
	DW	01H
	DW	01H
	DW	0cH
	DW	02H
	DW	07H
	DW	03H
	DW	03H
	DW	02H
	DW	01H
	DW	010H
	DW	02H
	DW	08H
	DW	03H
	DW	06H
	DW	05H
	DW	04H
	DW	07H
	DW	03H
	DW	03H
	DW	08H
	DW	01H
	DW	09H
	DW	08H
	DW	05H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	02H
	DW	08H
	DW	01H
	DW	02H
	DW	09H
	DW	0cH
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	08H
	DW	03H
	DW	018H
	DW	0cH
	DW	04H
	DW	03H
	DW	07H
	DW	05H
	DW	08H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	01H
	DW	017H
	DW	0aH
	DW	03H
	DW	01H
	DW	02H
	DW	02H
	DW	06H
	DW	03H
	DW	01H
	DW	010H
	DW	01H
	DW	010H
	DW	016H
	DW	03H
	DW	0aH
	DW	04H
	DW	0bH
	DW	06H
	DW	09H
	DW	07H
	DW	07H
	DW	03H
	DW	06H
	DW	02H
	DW	02H
	DW	02H
	DW	04H
	DW	0aH
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	08H
	DW	07H
	DW	01H
	DW	06H
	DW	04H
	DW	01H
	DW	03H
	DW	03H
	DW	03H
	DW	05H
	DW	0aH
	DW	0cH
	DW	0cH
	DW	02H
	DW	03H
	DW	0cH
	DW	08H
	DW	0fH
	DW	01H
	DW	01H
	DW	010H
	DW	06H
	DW	06H
	DW	01H
	DW	05H
	DW	09H
	DW	0bH
	DW	04H
	DW	0bH
	DW	04H
	DW	02H
	DW	06H
	DW	0cH
	DW	01H
	DW	011H
	DW	05H
	DW	0dH
	DW	01H
	DW	04H
	DW	09H
	DW	05H
	DW	01H
	DW	0bH
	DW	02H
	DW	01H
	DW	08H
	DW	01H
	DW	05H
	DW	07H
	DW	01cH
	DW	08H
	DW	03H
	DW	05H
	DW	0aH
	DW	02H
	DW	011H
	DW	03H
	DW	026H
	DW	016H
	DW	01H
	DW	02H
	DW	012H
	DW	0cH
	DW	0aH
	DW	04H
	DW	026H
	DW	012H
	DW	01H
	DW	04H
	DW	02cH
	DW	013H
	DW	04H
	DW	01H
	DW	08H
	DW	04H
	DW	01H
	DW	0cH
	DW	01H
	DW	04H
	DW	01fH
	DW	0cH
	DW	01H
	DW	0eH
	DW	07H
	DW	04bH
	DW	07H
	DW	05H
	DW	0aH
	DW	06H
	DW	06H
	DW	0dH
	DW	03H
	DW	02H
	DW	0bH
	DW	0bH
	DW	03H
	DW	02H
	DW	05H
	DW	01cH
	DW	0fH
	DW	06H
	DW	012H
	DW	012H
	DW	05H
	DW	06H
	DW	04H
	DW	03H
	DW	010H
	DW	01H
	DW	07H
	DW	012H
	DW	07H
	DW	024H
	DW	03H
	DW	05H
	DW	03H
	DW	01H
	DW	07H
	DW	01H
	DW	09H
	DW	01H
	DW	0aH
	DW	07H
	DW	02H
	DW	04H
	DW	02H
	DW	06H
	DW	02H
	DW	09H
	DW	07H
	DW	04H
	DW	03H
	DW	020H
	DW	0cH
	DW	03H
	DW	07H
	DW	0aH
	DW	02H
	DW	017H
	DW	010H
	DW	03H
	DW	01H
	DW	0cH
	DW	03H
	DW	01fH
	DW	04H
	DW	0bH
	DW	01H
	DW	03H
	DW	08H
	DW	09H
	DW	05H
	DW	01H
	DW	01eH
	DW	0fH
	DW	06H
	DW	0cH
	DW	03H
	DW	02H
	DW	02H
	DW	0bH
	DW	013H
	DW	09H
	DW	0eH
	DW	02H
	DW	06H
	DW	02H
	DW	03H
	DW	013H
	DW	0dH
	DW	011H
	DW	05H
	DW	03H
	DW	03H
	DW	019H
	DW	03H
	DW	0eH
	DW	01H
	DW	01H
	DW	01H
	DW	024H
	DW	01H
	DW	03H
	DW	02H
	DW	013H
	DW	03H
	DW	0dH
	DW	024H
	DW	09H
	DW	0dH
	DW	01fH
	DW	06H
	DW	04H
	DW	010H
	DW	022H
	DW	02H
	DW	05H
	DW	04H
	DW	02H
	DW	03H
	DW	03H
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	03H
	DW	01H
	DW	011H
	DW	03H
	DW	02H
	DW	03H
	DW	05H
	DW	03H
	DW	01H
	DW	03H
	DW	02H
	DW	03H
	DW	05H
	DW	06H
	DW	03H
	DW	0cH
	DW	0bH
	DW	01H
	DW	03H
	DW	01H
	DW	02H
	DW	01aH
	DW	07H
	DW	0cH
	DW	07H
	DW	02H
	DW	0eH
	DW	03H
	DW	03H
	DW	07H
	DW	07H
	DW	0bH
	DW	019H
	DW	019H
	DW	01cH
	DW	010H
	DW	04H
	DW	024H
	DW	01H
	DW	02H
	DW	01H
	DW	06H
	DW	02H
	DW	01H
	DW	09H
	DW	03H
	DW	01bH
	DW	011H
	DW	04H
	DW	03H
	DW	04H
	DW	0dH
	DW	04H
	DW	01H
	DW	03H
	DW	02H
	DW	02H
	DW	01H
	DW	0aH
	DW	04H
	DW	02H
	DW	04H
	DW	06H
	DW	03H
	DW	08H
	DW	02H
	DW	01H
	DW	012H
	DW	01H
	DW	01H
	DW	018H
	DW	02H
	DW	02H
	DW	04H
	DW	021H
	DW	02H
	DW	03H
	DW	03fH
	DW	07H
	DW	01H
	DW	06H
	DW	028H
	DW	07H
	DW	03H
	DW	04H
	DW	04H
	DW	02H
	DW	04H
	DW	0fH
	DW	012H
	DW	01H
	DW	010H
	DW	01H
	DW	01H
	DW	0bH
	DW	02H
	DW	029H
	DW	0eH
	DW	01H
	DW	03H
	DW	012H
	DW	0dH
	DW	03H
	DW	02H
	DW	04H
	DW	010H
	DW	02H
	DW	011H
	DW	07H
	DW	0fH
	DW	018H
	DW	07H
	DW	012H
	DW	0dH
	DW	02cH
	DW	02H
	DW	02H
	DW	03H
	DW	06H
	DW	01H
	DW	01H
	DW	07H
	DW	05H
	DW	01H
	DW	07H
	DW	01H
	DW	04H
	DW	03H
	DW	03H
	DW	05H
	DW	0aH
	DW	08H
	DW	02H
	DW	03H
	DW	01H
	DW	08H
	DW	01H
	DW	01H
	DW	01bH
	DW	04H
	DW	02H
	DW	01H
	DW	0cH
	DW	01H
	DW	02H
	DW	01H
	DW	0aH
	DW	06H
	DW	01H
	DW	06H
	DW	07H
	DW	05H
	DW	02H
	DW	03H
	DW	07H
	DW	0bH
	DW	05H
	DW	0bH
	DW	03H
	DW	06H
	DW	06H
	DW	02H
	DW	03H
	DW	0fH
	DW	04H
	DW	09H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	0bH
	DW	02H
	DW	08H
	DW	0cH
	DW	08H
	DW	05H
	DW	04H
	DW	02H
	DW	03H
	DW	01H
	DW	05H
	DW	02H
	DW	02H
	DW	01H
	DW	0eH
	DW	01H
	DW	0cH
	DW	0bH
	DW	04H
	DW	01H
	DW	0bH
	DW	011H
	DW	011H
	DW	04H
	DW	03H
	DW	02H
	DW	05H
	DW	05H
	DW	07H
	DW	03H
	DW	01H
	DW	05H
	DW	09H
	DW	09H
	DW	08H
	DW	02H
	DW	05H
	DW	06H
	DW	06H
	DW	0dH
	DW	0dH
	DW	02H
	DW	01H
	DW	02H
	DW	06H
	DW	01H
	DW	02H
	DW	02H
	DW	031H
	DW	04H
	DW	09H
	DW	01H
	DW	02H
	DW	0aH
	DW	010H
	DW	07H
	DW	08H
	DW	04H
	DW	03H
	DW	02H
	DW	017H
	DW	04H
	DW	03aH
	DW	03H
	DW	01dH
	DW	01H
	DW	0eH
	DW	013H
	DW	013H
	DW	0bH
	DW	0bH
	DW	02H
	DW	07H
	DW	05H
	DW	01H
	DW	03H
	DW	04H
	DW	06H
	DW	02H
	DW	012H
	DW	05H
	DW	0cH
	DW	0cH
	DW	011H
	DW	011H
	DW	03H
	DW	03H
	DW	02H
	DW	04H
	DW	01H
	DW	06H
	DW	02H
	DW	03H
	DW	04H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	01H
	DW	01H
	DW	09H
	DW	01H
	DW	03H
	DW	01H
	DW	03H
	DW	06H
	DW	01H
	DW	08H
	DW	01H
	DW	01H
	DW	02H
	DW	06H
	DW	04H
	DW	0eH
	DW	03H
	DW	01H
	DW	04H
	DW	0bH
	DW	04H
	DW	01H
	DW	03H
	DW	020H
	DW	01H
	DW	02H
	DW	04H
	DW	0dH
	DW	04H
	DW	01H
	DW	02H
	DW	04H
	DW	02H
	DW	01H
	DW	03H
	DW	01H
	DW	0bH
	DW	01H
	DW	04H
	DW	02H
	DW	01H
	DW	04H
	DW	04H
	DW	06H
	DW	03H
	DW	05H
	DW	01H
	DW	06H
	DW	05H
	DW	07H
	DW	06H
	DW	03H
	DW	017H
	DW	03H
	DW	05H
	DW	03H
	DW	05H
	DW	03H
	DW	03H
	DW	0dH
	DW	03H
	DW	09H
	DW	0aH
	DW	01H
	DW	0cH
	DW	0aH
	DW	02H
	DW	03H
	DW	012H
	DW	0dH
	DW	07H
	DW	0a0H
	DW	034H
	DW	04H
	DW	02H
	DW	02H
	DW	03H
	DW	02H
	DW	0eH
	DW	05H
	DW	04H
	DW	0cH
	DW	04H
	DW	06H
	DW	04H
	DW	01H
	DW	014H
	DW	04H
	DW	0bH
	DW	06H
	DW	02H
	DW	0cH
	DW	01bH
	DW	01H
	DW	04H
	DW	01H
	DW	02H
	DW	02H
	DW	07H
	DW	04H
	DW	05H
	DW	02H
	DW	01cH
	DW	03H
	DW	07H
	DW	019H
	DW	08H
	DW	03H
	DW	013H
	DW	03H
	DW	06H
	DW	0aH
	DW	02H
	DW	02H
	DW	01H
	DW	0aH
	DW	02H
	DW	05H
	DW	04H
	DW	01H
	DW	03H
	DW	04H
	DW	01H
	DW	05H
	DW	03H
	DW	02H
	DW	06H
	DW	09H
	DW	03H
	DW	06H
	DW	02H
	DW	010H
	DW	03H
	DW	03H
	DW	010H
	DW	04H
	DW	05H
	DW	05H
	DW	03H
	DW	02H
	DW	01H
	DW	02H
	DW	010H
	DW	0fH
	DW	08H
	DW	02H
	DW	06H
	DW	015H
	DW	02H
	DW	04H
	DW	01H
	DW	016H
	DW	05H
	DW	08H
	DW	01H
	DW	01H
	DW	015H
	DW	0bH
	DW	02H
	DW	01H
	DW	0bH
	DW	0bH
	DW	013H
	DW	0dH
	DW	0cH
	DW	04H
	DW	02H
	DW	03H
	DW	02H
	DW	03H
	DW	06H
	DW	01H
	DW	08H
	DW	0bH
	DW	01H
	DW	04H
	DW	02H
	DW	09H
	DW	05H
	DW	02H
	DW	01H
	DW	0bH
	DW	02H
	DW	09H
	DW	01H
	DW	01H
	DW	02H
	DW	0eH
	DW	01fH
	DW	09H
	DW	03H
	DW	04H
	DW	015H
	DW	0eH
	DW	04H
	DW	08H
	DW	01H
	DW	07H
	DW	02H
	DW	02H
	DW	02H
	DW	05H
	DW	01H
	DW	04H
	DW	014H
	DW	03H
	DW	03H
	DW	04H
	DW	0aH
	DW	01H
	DW	0bH
	DW	09H
	DW	08H
	DW	02H
	DW	01H
	DW	04H
	DW	05H
	DW	0eH
	DW	0cH
	DW	0eH
	DW	02H
	DW	011H
	DW	09H
	DW	06H
	DW	01fH
	DW	04H
	DW	0eH
	DW	01H
	DW	014H
	DW	0dH
	DW	01aH
	DW	05H
	DW	02H
	DW	07H
	DW	03H
	DW	06H
	DW	0dH
	DW	02H
	DW	04H
	DW	02H
	DW	013H
	DW	06H
	DW	02H
	DW	02H
	DW	012H
	DW	09H
	DW	03H
	DW	05H
	DW	0cH
	DW	0cH
	DW	0eH
	DW	04H
	DW	06H
	DW	02H
	DW	03H
	DW	06H
	DW	09H
	DW	05H
	DW	016H
	DW	04H
	DW	05H
	DW	019H
	DW	06H
	DW	04H
	DW	08H
	DW	05H
	DW	02H
	DW	06H
	DW	01bH
	DW	02H
	DW	023H
	DW	02H
	DW	010H
	DW	03H
	DW	07H
	DW	08H
	DW	08H
	DW	06H
	DW	06H
	DW	05H
	DW	09H
	DW	011H
	DW	02H
	DW	014H
	DW	06H
	DW	013H
	DW	02H
	DW	0dH
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	011H
	DW	0cH
	DW	02H
	DW	0eH
	DW	07H
	DW	01H
	DW	04H
	DW	012H
	DW	0cH
	DW	026H
	DW	021H
	DW	02H
	DW	0aH
	DW	01H
	DW	01H
	DW	02H
	DW	0dH
	DW	0eH
	DW	011H
	DW	0bH
	DW	032H
	DW	06H
	DW	021H
	DW	014H
	DW	01aH
	DW	04aH
	DW	010H
	DW	017H
	DW	02dH
	DW	032H
	DW	0dH
	DW	026H
	DW	021H
	DW	06H
	DW	06H
	DW	07H
	DW	04H
	DW	04H
	DW	02H
	DW	01H
	DW	03H
	DW	02H
	DW	05H
	DW	08H
	DW	07H
	DW	08H
	DW	09H
	DW	03H
	DW	0bH
	DW	015H
	DW	09H
	DW	0dH
	DW	01H
	DW	03H
	DW	0aH
	DW	06H
	DW	07H
	DW	01H
	DW	02H
	DW	02H
	DW	012H
	DW	05H
	DW	05H
	DW	01H
	DW	09H
	DW	09H
	DW	02H
	DW	044H
	DW	09H
	DW	013H
	DW	0dH
	DW	02H
	DW	05H
	DW	01H
	DW	04H
	DW	04H
	DW	07H
	DW	04H
	DW	0dH
	DW	03H
	DW	09H
	DW	0aH
	DW	015H
	DW	011H
	DW	03H
	DW	01aH
	DW	02H
	DW	01H
	DW	05H
	DW	02H
	DW	04H
	DW	05H
	DW	04H
	DW	01H
	DW	07H
	DW	04H
	DW	07H
	DW	03H
	DW	04H
	DW	02H
	DW	01H
	DW	06H
	DW	01H
	DW	01H
	DW	014H
	DW	04H
	DW	01H
	DW	09H
	DW	02H
	DW	02H
	DW	01H
	DW	03H
	DW	03H
	DW	02H
	DW	03H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	014H
	DW	02H
	DW	03H
	DW	01H
	DW	06H
	DW	02H
	DW	03H
	DW	06H
	DW	02H
	DW	04H
	DW	08H
	DW	01H
	DW	03H
	DW	02H
	DW	0aH
	DW	03H
	DW	05H
	DW	03H
	DW	04H
	DW	04H
	DW	03H
	DW	04H
	DW	010H
	DW	01H
	DW	06H
	DW	01H
	DW	0aH
	DW	02H
	DW	04H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	0aH
	DW	0bH
	DW	02H
	DW	02H
	DW	03H
	DW	01H
	DW	018H
	DW	01fH
	DW	04H
	DW	0aH
	DW	0aH
	DW	02H
	DW	05H
	DW	0cH
	DW	010H
	DW	0a4H
	DW	0fH
	DW	04H
	DW	010H
	DW	07H
	DW	09H
	DW	0fH
	DW	013H
	DW	011H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	04H
	DW	03H
	DW	01H
	DW	03H
	DW	01H
	DW	03H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	03H
	DW	03H
	DW	07H
	DW	02H
	DW	08H
	DW	01H
	DW	02H
	DW	02H
	DW	02H
	DW	01H
	DW	03H
	DW	04H
	DW	03H
	DW	07H
	DW	08H
	DW	0cH
	DW	05cH
	DW	02H
	DW	0aH
	DW	03H
	DW	01H
	DW	03H
	DW	0eH
	DW	05H
	DW	019H
	DW	010H
	DW	02aH
	DW	04H
	DW	07H
	DW	07H
	DW	04H
	DW	02H
	DW	015H
	DW	05H
	DW	01bH
	DW	01aH
	DW	01bH
	DW	015H
	DW	019H
	DW	01eH
	DW	01fH
	DW	02H
	DW	01H
	DW	05H
	DW	0dH
	DW	03H
	DW	016H
	DW	05H
	DW	06H
	DW	06H
	DW	0bH
	DW	09H
	DW	0cH
	DW	01H
	DW	05H
	DW	09H
	DW	07H
	DW	05H
	DW	05H
	DW	016H
	DW	03cH
	DW	03H
	DW	05H
	DW	0dH
	DW	01H
	DW	01H
	DW	08H
	DW	01H
	DW	01H
	DW	03H
	DW	03H
	DW	02H
	DW	01H
	DW	09H
	DW	03H
	DW	03H
	DW	012H
	DW	04H
	DW	01H
	DW	02H
	DW	03H
	DW	07H
	DW	06H
	DW	03H
	DW	01H
	DW	02H
	DW	03H
	DW	09H
	DW	01H
	DW	03H
	DW	01H
	DW	03H
	DW	02H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	0bH
	DW	03H
	DW	01H
	DW	06H
	DW	09H
	DW	01H
	DW	03H
	DW	02H
	DW	03H
	DW	01H
	DW	02H
	DW	01H
	DW	05H
	DW	01H
	DW	01H
	DW	04H
	DW	03H
	DW	04H
	DW	01H
	DW	02H
	DW	02H
	DW	04H
	DW	04H
	DW	01H
	DW	07H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	03H
	DW	05H
	DW	0dH
	DW	012H
	DW	03H
	DW	04H
	DW	0eH
	DW	09H
	DW	09H
	DW	04H
	DW	010H
	DW	03H
	DW	07H
	DW	05H
	DW	08H
	DW	02H
	DW	06H
	DW	030H
	DW	01cH
	DW	03H
	DW	01H
	DW	01H
	DW	04H
	DW	02H
	DW	0eH
	DW	08H
	DW	02H
	DW	09H
	DW	02H
	DW	01H
	DW	0fH
	DW	02H
	DW	04H
	DW	03H
	DW	02H
	DW	0aH
	DW	010H
	DW	0cH
	DW	08H
	DW	07H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	07H
	DW	04H
	DW	01H
	DW	06H
	DW	04H
	DW	026H
	DW	027H
	DW	010H
	DW	017H
	DW	07H
	DW	0fH
	DW	0fH
	DW	03H
	DW	02H
	DW	0cH
	DW	07H
	DW	015H
	DW	025H
	DW	01bH
	DW	06H
	DW	05H
	DW	04H
	DW	08H
	DW	02H
	DW	0aH
	DW	08H
	DW	08H
	DW	06H
	DW	05H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	018H
	DW	01H
	DW	010H
	DW	011H
	DW	09H
	DW	017H
	DW	0aH
	DW	011H
	DW	06H
	DW	01H
	DW	033H
	DW	037H
	DW	02cH
	DW	0dH
	DW	0126H
	DW	09H
	DW	03H
	DW	06H
	DW	02H
	DW	04H
	DW	02H
	DW	02H
	DW	0fH
	DW	01H
	DW	01H
	DW	01H
	DW	0dH
	DW	015H
	DW	011H
	DW	044H
	DW	0eH
	DW	08H
	DW	09H
	DW	04H
	DW	01H
	DW	04H
	DW	09H
	DW	03H
	DW	0bH
	DW	07H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	06H
	DW	03H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	08H
	DW	01H
	DW	02H
	DW	02H
	DW	04H
	DW	01H
	DW	05H
	DW	05H
	DW	02H
	DW	01H
	DW	04H
	DW	03H
	DW	07H
	DW	0dH
	DW	04H
	DW	01H
	DW	04H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	05H
	DW	0aH
	DW	01H
	DW	06H
	DW	01H
	DW	05H
	DW	02H
	DW	01H
	DW	05H
	DW	02H
	DW	04H
	DW	01H
	DW	04H
	DW	05H
	DW	07H
	DW	03H
	DW	012H
	DW	02H
	DW	09H
	DW	0bH
	DW	020H
	DW	04H
	DW	03H
	DW	03H
	DW	02H
	DW	04H
	DW	07H
	DW	0bH
	DW	010H
	DW	09H
	DW	0bH
	DW	08H
	DW	0dH
	DW	026H
	DW	020H
	DW	08H
	DW	04H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	04H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	01H
	DW	015H
	DW	03H
	DW	0bH
	DW	01H
	DW	010H
	DW	01H
	DW	01H
	DW	06H
	DW	01H
	DW	03H
	DW	02H
	DW	04H
	DW	09H
	DW	08H
	DW	039H
	DW	07H
	DW	02cH
	DW	01H
	DW	03H
	DW	03H
	DW	0dH
	DW	03H
	DW	0aH
	DW	01H
	DW	01H
	DW	07H
	DW	05H
	DW	02H
	DW	07H
	DW	015H
	DW	02fH
	DW	03fH
	DW	03H
	DW	0fH
	DW	04H
	DW	07H
	DW	01H
	DW	010H
	DW	01H
	DW	01H
	DW	02H
	DW	08H
	DW	02H
	DW	03H
	DW	02aH
	DW	0fH
	DW	04H
	DW	01H
	DW	01dH
	DW	07H
	DW	016H
	DW	0aH
	DW	03H
	DW	04eH
	DW	010H
	DW	0cH
	DW	014H
	DW	012H
	DW	04H
	DW	043H
	DW	0bH
	DW	05H
	DW	01H
	DW	03H
	DW	0fH
	DW	06H
	DW	015H
	DW	01fH
	DW	020H
	DW	01bH
	DW	012H
	DW	0dH
	DW	047H
	DW	023H
	DW	05H
	DW	08eH
	DW	04H
	DW	0aH
	DW	01H
	DW	02H
	DW	032H
	DW	013H
	DW	021H
	DW	010H
	DW	023H
	DW	025H
	DW	010H
	DW	013H
	DW	01bH
	DW	07H
	DW	01H
	DW	085H
	DW	013H
	DW	01H
	DW	04H
	DW	08H
	DW	07H
	DW	014H
	DW	01H
	DW	04H
	DW	04H
	DW	01H
	DW	0aH
	DW	03H
	DW	01H
	DW	06H
	DW	01H
	DW	02H
	DW	033H
	DW	05H
	DW	028H
	DW	0fH
	DW	018H
	DW	02bH
	DW	05990H
	DW	0bH
	DW	01H
	DW	0dH
	DW	09aH
	DW	046H
	DW	03H
	DW	01H
	DW	01H
	DW	07H
	DW	04H
	DW	0aH
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	ORG $+2
?ranges@?1??GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ@4QBGB DW 020H ; `ImFontAtlas::GetGlyphRangesCyrillic'::`2'::ranges
	DW	0ffH
	DW	0400H
	DW	052fH
	DW	02de0H
	DW	02dffH
	DW	0a640H
	DW	0a69fH
	DW	00H
	ORG $+6
?ranges@?1??GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ@4QBGB DW 020H ; `ImFontAtlas::GetGlyphRangesThai'::`2'::ranges
	DW	0ffH
	DW	02010H
	DW	0205eH
	DW	0e00H
	DW	0e7fH
	DW	00H
	ORG $+2
?ranges@?1??GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ@4QBGB DW 020H ; `ImFontAtlas::GetGlyphRangesVietnamese'::`2'::ranges
	DW	0ffH
	DW	0102H
	DW	0103H
	DW	0110H
	DW	0111H
	DW	0128H
	DW	0129H
	DW	0168H
	DW	0169H
	DW	01a0H
	DW	01a1H
	DW	01afH
	DW	01b0H
	DW	01ea0H
	DW	01ef9H
	DW	00H
	ORG $+6
?FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS@@3QBDB DB '..-         -XXXXXXX-    X'
	DB	'    -           X           -XXXXXXX          -          XXXX'
	DB	'XXX-     XX          - XX       XX ..-         -X.....X-   X.'
	DB	'X   -          X.X          -X.....X          -          X...'
	DB	'..X-    X..X         -X..X     X..X---         -XXX.XXX-  X..'
	DB	'.X  -         X...X         -X....X           -           X..'
	DB	'..X-    X..X         -X...X   X...XX           -  X.X  - X...'
	DB	'..X -        X.....X        -X...X            -            X.'
	DB	'..X-    X..X         - X...X X...X XX          -  X.X  -X....'
	DB	'...X-       X.......X       -X..X.X           -           X.X'
	DB	'..X-    X..X         -  X...X...X  X.X         -  X.X  -XXXX.'
	DB	'XXXX-       XXXX.XXXX       -X.X X.X          -          X.X '
	DB	'X.X-    X..XXX       -   X.....X   X..X        -  X.X  -   X.'
	DB	'X   -          X.X          -XX   X.X         -         X.X  '
	DB	' XX-    X..X..XXX    -    X...X    X...X       -  X.X  -   X.'
	DB	'X   -    XX    X.X    XX    -      X.X        -        X.X   '
	DB	'   -    X..X..X..XX  -     X.X     X....X      -  X.X  -   X.'
	DB	'X   -   X.X    X.X    X.X   -       X.X       -       X.X    '
	DB	'   -    X..X..X..X.X -    X...X    X.....X     -  X.X  -   X.'
	DB	'X   -  X..X    X.X    X..X  -        X.X      -      X.X     '
	DB	'   -XXX X..X..X..X..X-   X.....X   X......X    -  X.X  -   X.'
	DB	'X   - X...XXXXXX.XXXXXX...X -         X.X   XX-XX   X.X      '
	DB	'   -X..XX........X..X-  X...X...X  X.......X   -  X.X  -   X.'
	DB	'X   -X.....................X-          X.X X.X-X.X X.X       '
	DB	'   -X...X...........X- X...X X...X X........X  -  X.X  -   X.'
	DB	'X   - X...XXXXXX.XXXXXX...X -           X.X..X-X..X.X        '
	DB	'   - X..............X-X...X   X...XX.........X -XXX.XXX-   X.'
	DB	'X   -  X..X    X.X    X..X  -            X...X-X...X         '
	DB	'   -  X.............X-X..X     X..XX..........X-X.....X-   X.'
	DB	'X   -   X.X    X.X    X.X   -           X....X-X....X        '
	DB	'   -  X.............X- XX       XX X......XXXXX-XXXXXXX-   X.'
	DB	'X   -    XX    X.X    XX    -          X.....X-X.....X       '
	DB	'   -   X............X--------------X...X..X    ---------   X.'
	DB	'X   -          X.X          -          XXXXXXX-XXXXXXX       '
	DB	'   -   X...........X -             X..X X..X   -       -XXXX.'
	DB	'XXXX-       XXXX.XXXX       ---------------------------------'
	DB	'----    X..........X -             X.X  X..X   -       -X....'
	DB	'...X-       X.......X       -    XX           XX    -        '
	DB	'   -    X..........X -             XX    X..X  -       - X...'
	DB	'..X -        X.....X        -   X.X           X.X   -        '
	DB	'   -     X........X  -                   X..X  -       -  X..'
	DB	'.X  -         X...X         -  X..X           X..X  -        '
	DB	'   -     X........X  -                    XX   -       -   X.'
	DB	'X   -          X.X          - X...XXXXXXXXXXXXX...X -        '
	DB	'   -     XXXXXXXXXX  -             -------------       -    X'
	DB	'    -           X           -X.....................X-        '
	DB	'   -------------------                                 ------'
	DB	'----------------------------- X...XXXXXXXXXXXXX...X -        '
	DB	'                                                             '
	DB	'                            -  X..X           X..X  -        '
	DB	'                                                             '
	DB	'                            -   X.X           X.X   -        '
	DB	'                                                             '
	DB	'                            -    XX           XX    -        '
	DB	'                                   ', 00H	; FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS
	ORG $+1
?proggy_clean_ttf_compressed_data_base85@@3QBDB DB '7])#######hV0qs''/###'
	DB	'[),##/l:$#Q6>##5[n42>c-TH`->>#/e>11NNV=Bv(*:.F?uu#(gRU.o0XGH`'
	DB	'$vhLG1hxt9?W`#,5LsCp#-i>.r$<$6pD>Lb'';9Crc6tgXmKVeU2cD4Eo3R/2'
	DB	'*>]b(MC;$jPfY.;h^`IWM9<Lh2TlS+f-s$o6Q<BWH`YiU.xfLq$N;$0iR/GX:'
	DB	'U(jcW2p/W*q?-qmnUCI;jHSAiFWM.R*kU@C=GH?a9wp8f$e.-4^Qg1)Q-GL(l'
	DB	'f(r/7GrRgwV%MS=C#`8ND>Qo#t''X#(v#Y9w0#1D$CIf;W''#pWUPXOuxXuU('
	DB	'H9M(1<q-UE31#^-V''8IRUo7Qf./L>=Ke$$''5F%)]0^#0X@U.a<r:QLtFsLc'
	DB	'L6##lOj)#.Y5<-R&KgLwqJfLgN&;Q?gI^#DY2uLi@^rMl9t=cWq6##weg>$FB'
	DB	'jVQTSDgEKnIS7EM9>ZY9w0#L;>>#Mx&4Mvt//L[MkA#W@lK.N''[0#7RL_&#w'
	DB	'+F%HtG9M#XL`N&.,GM4Pg;-<nLENhvx>-VsM.M0rJfLH2eTM`*oJMHRC`Nkfi'
	DB	'mM2J,W-jXS:)r0wK#@Fge$U>`w''N7G#$#fB#$E^$#:9:hk+eOe--6x)F7*E%'
	DB	'?76%^GMHePW-Z5l''&GiF#$956:rS?dA#fiK:)Yr+`&#0j@''DbG&#^$PG.Ll'
	DB	'+DNa<XCMKEV*N)LN/N*b=%Q6pia-Xg8I$<MR&,VdJe$<(7G;Ckl''&hF;;$<_'
	DB	'=X(b.RS%%)###MPBuuE1V:v&cX&#2m#(&cV]`k9OhLMbn%s$G2,B$BfD3X*sp'
	DB	'5#l,$R#]x_X1xKX%b5U*[r5iMfUo9U`N99hG)tm+/Us9pG)XPu`<0s-)WTt(g'
	DB	'CRxIg(%6sfh=ktMKn3j)<6<b5Sk_/0(^]AaN#(p/L>&VZ>1i%h1S9u5o@YaaW'
	DB	'$e+b<TWFn/Z:Oh(Cx2$lNEoN^e)#CFY@@I;BOQ*sRwZtZxRcU7uW6CXow0i(?'
	DB	'$Q[cjOd[P4d)]>ROPOpxTO7Stwi1::iB1q)C_=dV26J;2,]7op$]uQr@_V7$q'
	DB	'^%lQwtuHY]=DX,n3L#0PHDO4f9>dC@O>HBuKPpP*E,N+b3L#lpR/MrTEH.IAQ'
	DB	'k.a>D[.e;mc.x]Ip.PH^''/aqUO/$1WxLoW0[iLA<QT;5HKD+@qQ''NQ(3_PL'
	DB	'hE48R.qAPSwQ0/WK?Z,[x?-J;jQTWA0X@KJ(_Y8N-:/M74:/-ZpKrUss?d#dZ'
	DB	'q]DAbkU*JqkL+nwX@@47`5>w=4h(9.`GCRUxHPeR`5Mjol(dUWxZa(>STrPkr'
	DB	'JiWx`5U7F#.g*jrohGg`cg:lSTvEY/EV_7H4Q9[Z%cnv;JQYZ5q.l7Zeas:HO'
	DB	'IZOB?G<Nald$qs]@]L<J7bR*>gv:[7MI2k).''2($5FNP&EQ(,)U]W]+fh18.'
	DB	'vsai00);D3@4ku5P?DP8aJt+;qUM]=+b''8@;mViBKx0DE[-auGl8:PJ&Dj+M'
	DB	'6OC]O^((##]`0i)drT;-7X`=-H3[igUnPG-NZlo.#k@h#=Ork$m>a>$-?Tm$U'
	DB	'V(?#P6YY#''/###xe7q.73rI3*pP/$1>s9)W,JrM7SN]''/4C#v$U`0#V.[0>'
	DB	'xQsH$fEmPMgY2u7Kh(G%siIfLSoS+MK2eTM$=5,M8p`A.;_R%#u[K#$x4AG8.'
	DB	'kK/HSB==-''Ie/QTtG?-.*^N-4B/ZM_3YlQC7(p7q)&](`6_c)$/*JL(L-^(]'
	DB	'$wIM`dPtOdGA,U3:w2M-0<q-]L_?^)1vw''.,MRsqVr.L;aN&#/EgJ)PBc[-f'
	DB	'>+WomX2u7lqM2iEumMTcsF?-aT=Z-97UEnXglEn1K-bnEO`guFt(c%=;Am_Qs'
	DB	'@jLooI&NX;]0#j4#F14;gl8-GQpgwhrq8''=l_f-b49''UOqkLu7-##oDY2L('
	DB	'te+Mch&gLYtJ,MEtJfLh''x''M=$CS-ZZ%P]8bZ>#S?YY#%Q&q''3^Fw&?D)U'
	DB	'DNrocM3A76//oL?#h7gl85[qW/NDOk%16ij;+:1a''iNIdb-ou8.P*w,v5#EI'
	DB	'$TWS>Pot-R*H''-SEpA:g)f+O$%%`kA#G=8RMmG1&O`>to8bC]T&$,n.LoO>2'
	DB	'9sp3dt-52U%VM#q7''DHpg+#Z9%H[K<L%a2E-grWVM3@2=-k22tL]4$##6We'''
	DB	'8UJCKE[d_=%wI;''6X-GsLX4j^SgJ$##R*w,vP3wK#iiW&#*h^D&R?jp7+/u&'
	DB	'#(AP##XU8c$fSYW-J95_-Dp[g9wcO&#M-h1OcJlc-*vpw0xUX&#OQFKNX@QI'''
	DB	'IoPp7nb,QU//MQ&ZDkKP)X<WSVL(68uVl&#c''[0#(s1X&xm$Y%B7*K:eDA32'
	DB	'3j998GXbA#pwMs-jgD$9QISB-A_(aN4xoFM^@C58D0+Q+q3n0#3U1InDjF682'
	DB	'-SjMXJK)(h$hxua_K]ul92%''BOU&#BRRh-slg8KDlr:%L71Ka:.A;%YULjDP'
	DB	'mL<LYs8i#XwJOYaKPKc1h:''9Ke,g)b),78=I39B;xiY$bgGw-&.Zi9InXDuY'
	DB	'a%G*f2Bq7mn9^#p1vv%#(Wi-;/Z5ho;#2:;%d&#x9v68C5g?ntX0X)pT`;%pB'
	DB	'3q7mgGN)3%(P8nTd5L7GeA-GL@+%J3u2:(Yf>et`e;)f#Km8&+DC$I46>#Kr]'
	DB	']u-[=99tts1.qb#q72g1WJO81q+eN''03''eM>&1XxY-caEnOj%2n8)),?ILR'
	DB	'5^.Ibn<-X-Mq7[a82Lq:F&#ce+S9wsCK*x`569E8ew''He]h:sI[2LM$[guka'
	DB	'3ZRd6:t%IG:;$%YiJ:Nq=?eAw;/:nnDq0(CYcMpG)qLN4$##&J<j$UpK<Q4a1'
	DB	']MupW^-sj_$%[HK%''F####QRZJ::Y3EGl4''@%FkiAOg#p[##O`gukTfBHag'
	DB	'L<LHw%q&OV0##F=6/:chIm0@eCP8X]:kFI%hl8hgO@RcBhS-@Qb$%+m=hPDLg'
	DB	'*%K8ln(wcf3/''DW-$.lR?n[nCH-eXOONTJlh:.RYF%3''p6sq:UIMA945&^H'
	DB	'FS87@$EP2iG<-lCO$%c`uKGD3rC$x0BL8aFn--`ke%#HMP''vh1/R&O_J9''u'
	DB	'm,.<tx[@%wsJk&bUT2`0uMv7gg#qp/ij.L56''hl;.s5CUrxjOM7-##.l+Au'''
	DB	'A&O:-T72L]P`&=;ctp''XScX*rU.>-XTt,%OVU4)S1+R-#dg0/Nn?Ku1^0f$B'
	DB	'*P:Rowwm-`0PKjYDDM''3]d39VZHEl4,.j'']Pk-M.h^&:0FACm$maq-&sgw0'
	DB	't7/6(^xtk%LuH88Fj-ekm>GA#_>568x6(OFRl-IZp`&b,_P''$M<Jnq79VsJW'
	DB	'/mWS*PUiq76;]/NM_>hLbxfc$mj`,O;&%W2m`Zh:/)Uetw:aJ%]K9h:TcF]u_'
	DB	'-Sj9,VK3M.*''&0D[Ca]J9gp8,kAW]%(?A%R$f<->Zts''^kn=-^@c4%-pY6q'
	DB	'I%J%1IGxfLU9CP8cbPlXv);C=b),<2mOvP8up,UVf3839acAWAW-W?#ao/^#%'
	DB	'KYo8fRULNd2.>%m]UK:n%r$''sw]J;5pAoO_#2mO3n,''=H5(etHg*`+RLgv>'
	DB	'=4U8guD$I%D:W>-r5V*%j*W:Kvej.Lp$<M-SGZ'':+Q_k+uvOSLiEo(<aD/K<'
	DB	'CCc`''Lx>''?;++O''>()jLR-^u68PHm8ZFWe+ej8h:9r6L*0//c&iH&R8pRb'
	DB	'A#Kjm%upV1g:a_#Ur7FuA#(tRh#.Y5K+@?3<-8m0$PEn;J:rh6?I6uG<-`wMU'
	DB	'''ircp0LaE_OtlMb&1#6T.#FDKu#1Lw%u%+GM+X''e?YLfjM[VO0MbuFp7;>Q'
	DB	'&#WIo)0@F%q7c#4XAXN-U&VB<HFF*qL($/V,;(kXZejWO`<[5??ewY(*9=%wD'
	DB	'c;,u<''9t3W-(H1th3+G]ucQ]kLs7df($/*JL]@*t7Bu_G3_7mp7<iaQjO@.k'
	DB	'Lg;x3B0lqp7Hf,^Ze7-##@/c58Mo(3;knp0%)A7?-W+eI''o8)b<nKnw''Ho8'
	DB	'C=Y>pqB>0ie&jhZ[?iLR@@_AvA-iQC(=ksRZRVp7`.=+NpBC%rh&3]R:8XDmE'
	DB	'5^V8O(x<<aG/1N$#FX$0V5Y6x''aErI3I$7x%E`v<-BY,)%-?Psf*l?%C3.mM'
	DB	'(=/M0:JxG''?7WhH%o''a<-80g0NBxoO(GH<dM]n.+%q@jH?f.UsJ2Ggs&4<-'
	DB	'e47&Kl+f//9@`b+?.TeN_&B8Ss?v;^Trk;f#YvJkl&w$]>-+k?''(<S:68tq*'
	DB	'WoDfZu'';mM?8X[ma8W%*`-=;D.(nc7/;)g:T1=^J$&BRV(-lTmNB6xqB[@0*'
	DB	'o.erM*<SWF]u2=st-*(6v>^](H.aREZSi,#1:[IXaZFOm<-ui#qUq2$##Ri;u'
	DB	'75OK#(RtaW-K-F`S+cF]uN`-KMQ%rP/Xri.LRcB##=YL3BgM/3MD?@f&1''BW'
	DB	'-)Ju<L25gl8uhVm1hL$##*8###''A3/LkKW+(^rWX?5W_8g)a(m&K8P>#bmmW'
	DB	'CMkk&#TR`C,5d>g)F;t,4:@_l8G/5h4vUd%&%950:VXD''QdWoY-F$BtUwmfe'
	DB	'$YqL''8(PWX(P?^@Po3$##`MSs?DWBZ/S>+4%>fX,VWv/w''KD`LP5IbH;rTV'
	DB	'>n3cEK8U#bX]l-/V+^lj3;vlMb&[5YQ8#pekX9JP3XUC72L,,?+Ni&co7ApnO'
	DB	'*5NK,((W-i:$,kp''UDAO(G0Sq7MVjJsbIu)''Z,*[>br5fX^:FPAWr-m2KgL'
	DB	'<LUN098kTF&#lvo58=/vjDo;.;)Ka*hLR#/k=rKbxuV`>Q_nN6''8uTG&#1T5'
	DB	'g)uLv:873UpTLgH+#FgpH''_o1780Ph8KmxQJ8#H72L4@768@Tm&Qh4CB/5Ov'
	DB	'mA&,Q&QbUoi$a_%3M01H)4x7I^&KQVgtFnV+;[Pc>[m4k//,]1?#`VY[Jr*3&'
	DB	'&slRfLiVZJ:]?=K3Sw=[$=uRB?3xk48@aeg<Z''<$#4H)6,>e0jT6''N#(q%.'
	DB	'O=?2S]u*(m<-V8J''(1)G][68hW$5''q[GC&5j`TE?m''esFGNRM)j,ffZ?-q'
	DB	'x8;->g4t*:CIP/[Qap7/9''#(1sao7w-.qNUdkJ)tCF&#B^;xGvn2r9FEPFFF'
	DB	'cL@.iFNkTve$m%#QvQS8U@)2Z+3K:AKM5isZ88+dKQ)W6>J%CL<KE>`.d*(B`'
	DB	'-n8D9oK<Up]c$X$(,)M8Zt7/[rdkqTgl-0cuGMv''?>-XV1q[''-5k''cAZ69'
	DB	'e;D_?$ZPP&s^+7])$*$#@QYi9,5P&#9r+$%CE=68>K8r0=dSC%%(@p7.m7jil'
	DB	'Q02''0-VWAg<a/''''3u.=4L$Y)6k/K:_[3=&jvL<L0C/2''v:^;-DIBW,B4E'
	DB	'68:kZ;%?8(Q8BH=kO65BW?xSG&#@uU,DS*,?.+(o(#1vCS8#CHF>TlGW''b)T'
	DB	'q7VT9q^*^$$.:&N@@$&)WHtPm*5_rO0&e%K&#-30j(E4#''Zb.o/(Tpm$>K'''
	DB	'f@[PvFl,hfINTNU6u''0pao7%XUp9]5.>%h`8_=VYbxuel.NTSsJfLacFu3B'''
	DB	'lQSu/m6-Oqem8T+oE--$0a/k]uj9EwsG>%veR*hv^BFpQj:K''#SJ,sB-''#]'
	DB	'(j.Lg92rTw-*n%@/;39rrJF,l#qV%OrtBeC6/,;qB3ebNW[?,Hqj2L.1NP&Gj'
	DB	'UR=1D8QaS3Up&@*9wP?+lo7b?@%''k4`p0Z$22%K3+iCZj?XJN4Nm&+YF]u@-'
	DB	'W$U%VEQ/,,>>#)D<h#`)h0:<Q6909ua+&VU%n2:cG3FJ-%@Bj-DgLr`Hw&HAK'
	DB	'jKjseK</xKT*)B,N9X3]krc12t''pgTV(Lv-tL[xg_%=M_q7a^x?7Ubd>#%8c'
	DB	'Y#YZ?=,`Wdxu/ae&#w6)R89tI#6@s''(6Bf7a&?S=^ZI_kS&ai`&=tE72L_D,'
	DB	';^R)7[$s<Eh#c&)q.MXI%#v9ROa5FZO%sF7q7Nwb&#ptUJ:aqJe$Sl68%.D##'
	DB	'#EC><?-aF&#RNQv>o8lKN%5/$(vdfq7+ebA#u1p]ovUKW&Y%q]''>$1@-[xfn'
	DB	'$7ZTp7mM,G,Ko7a&Gu%G[RMxJs[0MM%wci.LFDK)(<c`Q8N)jEIF*+?P2a8g%'
	DB	')$q]o2aH8C&<SibC/q,(e:v;-b#6[$NtDZ84Je2KNvB#$P5?tQ3nt(0d=j.LQ'
	DB	'f./Ll33+(;q3L-w=8dX$#WF&uIJ@-bfI>%:_i2B5CsR8&9Z&#=mPEnm0f`<&c'
	DB	')QL5uJ#%u%lJj+D-r;BoF&#4DoS97h5g)E#o:&S4weDF,9^Hoe`h*L+_a*NrL'
	DB	'W-1pG_&2UdB86e%B/:=>)N4xeW.*wft-;$''58-ESqr<b?UI(_%@[P46>#U`'''
	DB	'6AQ]m&6/`Z>#S?YY#Vc;r7U2&326d=w&H####?TZ`*4?&.MK?LP8Vxg>$[QXc'
	DB	'%QJv92.(Db*B)gb*BM9dM*hJMAo*c&#b0v=Pjer]$gG&JXDf->''StvU7505l'
	DB	'9$AFvgYRI^&<^b68?j#q9QX4SM''RO#&sL1IM.rJfLUAj221]d##DW=m83u5;'
	DB	'''bYx,*Sl0hL(W;;$doB&O/TQ:(Z^xBdLjL<Lni;''''X.`$#8+1GD:k$YUWs'
	DB	'bn8ogh6rxZ2Z9]%nd+>V#*8U_72Lh+2Q8Cj0i:6hp&$C/:p(HK>T8Y[gHQ4`4'
	DB	')''$Ab(Nof%V''8hL&#<NEdtg(n''=S1A(Q1/I&4([%dM`,Iu''1:_hL>SfD0'
	DB	'7&6D<fp8dHM7/g+tlPN9J*rKaPct&?''uBCem^jn%9_K)<,C5K3s=5g&GmJb*'
	DB	'[SYq7K;TRLGCsM-$$;S%:Y@r7AK0pprpL<Lrh,q7e/%KWK:50I^+m''vi`3?%'
	DB	'Zp+<-d+$L-Sv:@.o19n$s0&39;kn;S%BSq*$3WoJSCLweV[aZ''MQIjO<7;X-'
	DB	'X;&+dMLvu#^UsGEC9WEc[X(wI7#2.(F0jV*eZf<-Qv3J-c+J5AlrB#$p(H68L'
	DB	'vEA''q3n0#m,[`*8Ft)FcYgEud]CWfm68,(aLA$@EFTgLXoBq/UPlp7:d[/;r'
	DB	'_ix=:TF`S5H-b<LI&HY(K=h#)]Lk$K14lVfm:x$H<3^Ql<M`$OhapBnkup''D'
	DB	'#L$Pb_`N*g]2e;X/Dtg,bsj&K#2[-:iYr''_wgH)NUIR8a1n#S?Yej''h8^58'
	DB	'UbZd+^FKD*T@;6A7aQC[K8d-(v6GI$x:T<&''Gp5Uf>@M.*J:;$-rv29''M]8'
	DB	'qMv-tLp,''886iaC=Hb*YJoKJ,(j%K=H`K.v9HggqBIiZu''QvBT.#=)0ukru'
	DB	'V&.)3=(^1`o*Pj4<-<aN((^7(''#Z0wK#5GX@7u][`*S^43933A4rl][`*O4C'
	DB	'gLEl]v$1Q3AeF37dbXk,.)vj#x''d`;qgbQR%FW,2(?LO=s%Sc68%NP''##Ao'
	DB	'tl8x=BE#j1UD([3$M(]UI2LX3RpKN@;/#f''f/&_mt&F)XdF<9t4)Qa.*kTLw'
	DB	'Q''(TTB9.xH''>#MJ+gLq9-##@HuZPN0]u:h7.T..G:;$/Usj(T7`Q8tT72Ln'
	DB	'Yl<-qx8;-HV7Q-&Xdx%1a,hC=0u+HlsV>nuIQL-5<N?)NBS)QN*_I,?&)2''I'
	DB	'M%L3I)X((e/dl2&8''<M:^#M*Q+[T.Xri.LYS3v%fF`68h;b-X[/En''CR.q7'
	DB	'E)p''/kle2HM,u;^%OKC-N+Ll%F9CF<Nf''^#t2L,;27W:0O@6##U6W7:$rJf'
	DB	'LWHj$#)woqBefIZ.PK<b*t7ed;p*_m;4ExK#h@&]>_>@kXQtMacfD.m-VAb8;'
	DB	'IReM3$wf0''''hra*so568''Ip&vRs849''MRYSp%:t:h5qSgwpEr$B>Q,;s('
	DB	'C#$)`svQuF$##-D,##,g68@2[T;.XSdN9Qe)rpt._K-#5wF)sP''##p#C0c%-'
	DB	'Gb%hd+<-j''Ai*x&&HMkT]C''OSl##5RG[JXaHN;d''uA#x._U;.`PU@(Z3dt'
	DB	'4r152@:v,''R.Sj''w#0<-;kPI)FfJ&#AYJ&#//)>-k=m=*XnK$>=)72L]0I%'
	DB	'>.G690a:$##<,);?;72#?x9+d;^V''9;jY@;)br#q^YQpx:X#Te$Z^''=-=bG'
	DB	'hLf:D6&bNwZ9-ZD#n^9HhLMr5G;'']d&6''wYmTFmL<LD)F^%[tC''8;+9E#C'
	DB	'$g%#5Y>q9wI>P(9mI[>kC-ekLC/R&CH+s''B;K-M6$EB%is00:+A4[7xks.Lr'
	DB	'Nk0&E)wILYF@2L''0Nb$+pv<(2.768/FrY&h$^3i&@+G%JT''<-,v`3;_)I9M'
	DB	'^AE]CN?Cl2AZg+%4iTpT3<n-&%H%b<FDj2M<hH=&Eh<2Len$b*aTX=-8QxN)k'
	DB	'11IM1c^j%9s<L<NFSo)B?+<-(GxsF,^-Eh@$4dXhN$+#rxK8''je''D7k`e;)'
	DB	'2pYwPA''_p9&@^18ml1^[@g4t*[JOa*[=Qp7(qJ_oOL^(''7fB&Hq-:sf,sNj'
	DB	'8xq^>$U4O]GKx''m9)b@p7YsvK3w^YR-CdQ*:Ir<($u&)#(&?L9Rg3H)4fiEp'
	DB	'^iI9O8KnTj,]H?D*r7''M;PwZ9K0E^k&-cpI;.p/6_vwoFMV<->#%Xi.LxVnr'
	DB	'U(4&8/P+:hLSKj$#U%]49t''I:rgMi''FL@a:0Y-uA[39'',(vbma*hU%<-SR'
	DB	'F`Tt:542R_VV$p@[p8DV[A,?1839FWdF<TddF<9Ah-6&9tWoDlh]&1SpGMq>T'
	DB	'i1O*H&#(AL8[_P%.M>v^-))qOT*F5Cq0`Ye%+$B6i:7@0IX<N+T+0MlMBPQ*V'
	DB	'j>SsD<U4JHY8kD2)2fU/M#$e.)T4,_=8hLim[&);?UkK''-x?''(:siIfL<$p'
	DB	'FM`i<?%W(mGDHM%>iWP,##P`%/L<eXi:@Z9C.7o=@(pXdAO/NLQ8lPl+HPOQa'
	DB	'8wD8=^GlPa8TKI1CjhsCTSLJM''/Wl>-S(qw%sf/@%#B6;/U7K]uZbi^Oc^2n'
	DB	'<bhPmUkMw>%t<)''mEVE''''n`WnJra$^TKvX5B>;_aSEK'',(hwa0:i4G?.B'
	DB	'ci.(X[?b*($,=-n<.Q%`(X=?+@Am*Js0&=3bh8K]mL<LoNs''6,''85`0?t/'''
	DB	'_U59@]ddF<#LdF<eWdF<OuN/45rY<-L@&#+fm>69=Lb,OcZV/);TTm8VI;?%O'
	DB	'tJ<(b4mq7M6:u?KRdF<gR@2L=FNU-<b[(9c/ML3m;Z[$oF3g)GAWqpARc=<RO'
	DB	'u7cL5l;-[A]%/+fsd;l#SafT/f*W]0=O''$(Tb<[)*@e775R-:Yob%g*>l*:x'
	DB	'P?Yb.5)%w_I?7uk5JC+FS(m#i''k.''a0i)9<7b''fs''59hq$*5Uhv##pi^8'
	DB	'+hIEBF`nvo`;''l0.^S1<-wUK2/Coh58KKhLjM=SO*rfO`+qC`W-On.=AJ56>'
	DB	'>i2@2LH6A:&5q`?9I3@@''04&p2/LVa*T-4<-i3;M9UvZd+N7>b*eIwg:CC)c'
	DB	'<>nO&#<IGe;__.thjZl<%w(Wk2xmp4Q@I#I9,DF]u7-P=.-_:YJ]aS@V?6*C('
	DB	')dOp7:WL,b&3Rg/.cmM9&r^>$(>.Z-I&J(Q0Hd5Q%7Co-b`-c<N(6r@ip+Aur'
	DB	'K<m86QIth*#v;-OBqi+L7wDE-Ir8K[''m+DDSLwK&/.?-V%U_%3:qKNu$_b*B'
	DB	'-kp7NaD''QdWQPKYq[@>P)hI;*_F]u`Rb[.j8_Q/<&>uu+VsH$sM9TA%?)(vm'
	DB	'J80),P7E>)tjD%2L=-t#fK[%`v=Q8<FfNkgg^oIbah*#8/Qt$F&:K*-(N/''+'
	DB	'1vMB,u()-a.VUU*#[e%gAAO(S>WlA2);Sa>gXm8YB`1d@K#n]76-a$U,mF<fX'
	DB	']idqd)<3,]J7JmW4`6]uks=4-72L(jEk+:bJ0M^q-8Dm_Z?0olP1C9Sa&H[d&'
	DB	'c$ooQUj]Exd*3ZM@-WGW2%s'',B-_M%>%Ul:#/''xoFM9QX-$.QN''>[%$Z$u'
	DB	'F6pA6Ki2O5:8w*vP1<-1`[G,)-m#>0`P&#eb#.3i)rtB61(o''$?X3B</R90;'
	DB	'eZ]%Ncq;-Tl]#F>2Qft^ae_5tKL9MUe9b*sLEQ95C&`=G?@Mj=wh*''3E>=-<'
	DB	')Gt*Iw)''QG:`@IwOf7&]1i''S01B+Ev/Nac#9S;=;YQpg_6U`*kVY39xK,[/'
	DB	'6Aj7:''1Bm-_1EYfa1+o&o4hp7KN_Q(OlIo@S%;jVdn0''1<Vc52=u`3^o-n1'
	DB	'''g4v58Hj&6_t7$##?M)c<$bgQ_''SY((-xkA#Y(,p''H9rIVY-b,''%bCPF7'
	DB	'.J<Up^,(dU1VY*5#WkTU>h19w,WQhLI)3S#f$2(eb,jr*b;3Vw]*7NH%$c4Vs'
	DB	',eD9>XW8?N]o+(*pgC%/72LV-u<Hp,3@e^9UB1J+ak9-TN/mhKPg+AJYd$Mlv'
	DB	'AF_jCK*.O-^(63adMT->W%iewS8W6m2rtCpo''RS1R84=@paTKt)>=%&1[)*v'
	DB	'p''u+x,VrwN;&]kuO9JDbg=pO$J*.jVe;u''m0dr9l,<*wMK*Oe=g8lV_KEBF'
	DB	'kO''oU]^=[-792#ok,)i]lR8qQ2oA8wcRCZ^7w/Njh;?.stX?Q1>S1q4Bn$)K'
	DB	'1<-rGdO''$Wr.Lc.CG)$/*JL4tNR/,SVO3,aUw''DJN:)Ss;wGn9A32ijw%FL'
	DB	'+Z0Fn.U9;reSq)bmI32U==5ALuG&#Vf1398/pVo1*c-(aY168o<`JsSbk-,1N'
	DB	';$>0:OUas(3:8Z972LSfF8eb=c-;>SPw7.6hn3m`9^Xkn(r.qS[0;T%&Qc=+S'
	DB	'TRxX''q1BNk3&*eu2;&8q$&x>Q#Q7^Tf+6<(d%ZVmj2bDi%.3L2n+4W''$PiD'
	DB	'DG)g,r%+?,$@?uou5tSe2aN_AQU*<h`e-GI7)?OK2A.d7_c)?wQ5AS@DL3r#7'
	DB	'fSkgl6-++D:''A,uq7SvlB$pcpH''q3n0#_%dY#xCpr-l<F0NR@-##FEV6NTF'
	DB	'6##$l84N1w?AO>''IAOURQ##V^Fv-XFbGM7Fl(N<3DhLGF%q.1rC$#:T__&Pi'
	DB	'68%0xi_&[qFJ(77j_&JWoF.V735&T,[R*:xFR*K5>>#`bW-?4Ne_&6Ne_&6Ne'
	DB	'_&n`kr-#GJcM6X;uM6X;uM(.a..^2TkL%oR(#;u.T%fAr%4tJ8&><1=GHZ_+m'
	DB	'9/#H1F^R#SC#*N=BA9(D?v[UiFY>>^8p,KKF.W]L29uLkLlu/+4T<XoIB&hx='
	DB	'T1PcDaB&;HH+-AFr?(m9HZV)FKS8JCw;SD=6[^/DZUL`EUDf]GGlG&>w$)F./'
	DB	'^n3+rlo+DB;5sIYGNk+i1t-69Jg--0pao7Sm#K)pdHW&;LuDNH@H>#/X-TI(;'
	DB	'P>#,Gc>#0Su>#4`1?#8lC?#<xU?#@.i?#D:%@#HF7@#LRI@#P_[@#Tkn@#Xw*'
	DB	'A#]-=A#a9OA#d<F&#*;G##.GY##2Sl##6`($#:l:$#>xL$#B.`$#F:r$#JF.%'
	DB	'#NR@%#R_R%#Vke%#Zww%#_-4&#3^Rh%Sflr-k''MS.o?.5/sWel/wpEM0%3'''
	DB	'/1)K^f1-d>G21&v(35>V`39V7A4=onx4A1OY5EI0;6Ibgr6M$HS7Q<)58C5w,'
	DB	';WoA*#[%T*#`1g*#d=#+#hI5+#lUG+#pbY+#tnl+#x$),#&1;,#*=M,#.I`,#'
	DB	'2Ur,#6b.-#;w[H#iQtA#m^0B#qjBB#uvTB##-hB#''9$C#+E6C#/QHC#3^ZC#'
	DB	'7jmC#;v)D#?,<D#C8ND#GDaD#KPsD#O]/E#g1A5#KA*1#gC17#MGd;#8(02#L'
	DB	'-d3#rWM4#Hga1#,<w0#T.j<#O#''2#CYN1#qa^:#_4m3#o@/=#eG8=#t8J5#`'
	DB	'+78#4uI-#m3B2#SB[8#Q0@8#i[*9#iOn8#1Nm;#^sN9#qh<9#:=x-#P;K2#$%'
	DB	'X9#bC+.#Rg;<#mN=.#MTF.#RZO.#2?)4#Y#(/#[)1/#b;L/#dAU/#0Sv;#lY$'
	DB	'0#n`-0#sf60#(F24#wrH0#%/e0#TmD<#%JSMFove:CTBEXI:<eh2g)B,3h2^G'
	DB	'3i;#d3jD>)4kMYD4lVu`4m`:&5niUA5@(A5BA1]PBB:xlBCC=2CDLXMCEUtiC'
	DB	'f&0g2''tN?PGT4CPGT4CPGT4CPGT4CPGT4CPGT4CPGT4CPGT4CPGT4CPGT4CP'
	DB	'GT4CPGT4CPGT4CP-qekC`.9kEg^+F$kwViFJTB&5KTB&5KTB&5KTB&5KTB&5K'
	DB	'TB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5o,^<-28ZI''O'
	DB	'?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?'
	DB	';xpO?;xp;7q-#lLYI:xvD=#', 00H		; proggy_clean_ttf_compressed_data_base85
CONST	ENDS
PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0ImVec2@@QEAA@XZ				; ImVec2::ImVec2
PUBLIC	??0ImVec2@@QEAA@MM@Z				; ImVec2::ImVec2
PUBLIC	??0ImVec4@@QEAA@XZ				; ImVec4::ImVec4
PUBLIC	??0ImVec4@@QEAA@MMMM@Z				; ImVec4::ImVec4
PUBLIC	?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z	; ImGui::StyleColorsDark
PUBLIC	?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z	; ImGui::StyleColorsLight
PUBLIC	?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z ; ImGui::StyleColorsClassic
PUBLIC	??2@YAPEAX_KUImNewWrapper@@PEAX@Z		; operator new
PUBLIC	??3@YAXPEAXUImNewWrapper@@0@Z			; operator delete
PUBLIC	??0?$ImVector@G@@QEAA@XZ			; ImVector<unsigned short>::ImVector<unsigned short>
PUBLIC	??4?$ImVector@G@@QEAAAEAU0@AEBU0@@Z		; ImVector<unsigned short>::operator=
PUBLIC	??1?$ImVector@G@@QEAA@XZ			; ImVector<unsigned short>::~ImVector<unsigned short>
PUBLIC	?clear@?$ImVector@G@@QEAAXXZ			; ImVector<unsigned short>::clear
PUBLIC	?empty@?$ImVector@G@@QEBA_NXZ			; ImVector<unsigned short>::empty
PUBLIC	??A?$ImVector@G@@QEAAAEAGH@Z			; ImVector<unsigned short>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@G@@QEBAHH@Z		; ImVector<unsigned short>::_grow_capacity
PUBLIC	?resize@?$ImVector@G@@QEAAXH@Z			; ImVector<unsigned short>::resize
PUBLIC	?resize@?$ImVector@G@@QEAAXHAEBG@Z		; ImVector<unsigned short>::resize
PUBLIC	?shrink@?$ImVector@G@@QEAAXH@Z			; ImVector<unsigned short>::shrink
PUBLIC	?reserve@?$ImVector@G@@QEAAXH@Z			; ImVector<unsigned short>::reserve
PUBLIC	?push_back@?$ImVector@G@@QEAAXAEBG@Z		; ImVector<unsigned short>::push_back
PUBLIC	??0ImDrawCmd@@QEAA@XZ				; ImDrawCmd::ImDrawCmd
PUBLIC	??0ImDrawCmdHeader@@QEAA@XZ			; ImDrawCmdHeader::ImDrawCmdHeader
PUBLIC	??0?$ImVector@UImDrawCmd@@@@QEAA@XZ		; ImVector<ImDrawCmd>::ImVector<ImDrawCmd>
PUBLIC	??4?$ImVector@UImDrawCmd@@@@QEAAAEAU0@AEBU0@@Z	; ImVector<ImDrawCmd>::operator=
PUBLIC	??1?$ImVector@UImDrawCmd@@@@QEAA@XZ		; ImVector<ImDrawCmd>::~ImVector<ImDrawCmd>
PUBLIC	?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ		; ImVector<ImDrawCmd>::clear
PUBLIC	??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z ; ImVector<ImDrawCmd>::operator[]
PUBLIC	?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ ; ImVector<ImDrawCmd>::back
PUBLIC	?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEBAHH@Z ; ImVector<ImDrawCmd>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z	; ImVector<ImDrawCmd>::resize
PUBLIC	?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z	; ImVector<ImDrawCmd>::reserve
PUBLIC	?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z ; ImVector<ImDrawCmd>::push_back
PUBLIC	?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ	; ImVector<ImDrawCmd>::pop_back
PUBLIC	?erase@?$ImVector@UImDrawCmd@@@@QEAAPEAUImDrawCmd@@PEBU2@@Z ; ImVector<ImDrawCmd>::erase
PUBLIC	??0ImDrawChannel@@QEAA@XZ			; ImDrawChannel::ImDrawChannel
PUBLIC	??0?$ImVector@UImDrawChannel@@@@QEAA@XZ		; ImVector<ImDrawChannel>::ImVector<ImDrawChannel>
PUBLIC	?clear@?$ImVector@UImDrawChannel@@@@QEAAXXZ	; ImVector<ImDrawChannel>::clear
PUBLIC	??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z ; ImVector<ImDrawChannel>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z	; ImVector<ImDrawChannel>::resize
PUBLIC	?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z	; ImVector<ImDrawChannel>::reserve
PUBLIC	??0ImDrawListSplitter@@QEAA@XZ			; ImDrawListSplitter::ImDrawListSplitter
PUBLIC	?Clear@ImDrawListSplitter@@QEAAXXZ		; ImDrawListSplitter::Clear
PUBLIC	?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ	; ImDrawListSplitter::ClearFreeMemory
PUBLIC	?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::Split
PUBLIC	?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z ; ImDrawListSplitter::Merge
PUBLIC	?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::SetCurrentChannel
PUBLIC	??0?$ImVector@UImDrawVert@@@@QEAA@XZ		; ImVector<ImDrawVert>::ImVector<ImDrawVert>
PUBLIC	??4?$ImVector@UImDrawVert@@@@QEAAAEAU0@AEBU0@@Z	; ImVector<ImDrawVert>::operator=
PUBLIC	??1?$ImVector@UImDrawVert@@@@QEAA@XZ		; ImVector<ImDrawVert>::~ImVector<ImDrawVert>
PUBLIC	?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ	; ImVector<ImDrawVert>::clear
PUBLIC	??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z ; ImVector<ImDrawVert>::operator[]
PUBLIC	?swap@?$ImVector@UImDrawVert@@@@QEAAXAEAU1@@Z	; ImVector<ImDrawVert>::swap
PUBLIC	?_grow_capacity@?$ImVector@UImDrawVert@@@@QEBAHH@Z ; ImVector<ImDrawVert>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z	; ImVector<ImDrawVert>::resize
PUBLIC	?shrink@?$ImVector@UImDrawVert@@@@QEAAXH@Z	; ImVector<ImDrawVert>::shrink
PUBLIC	?reserve@?$ImVector@UImDrawVert@@@@QEAAXH@Z	; ImVector<ImDrawVert>::reserve
PUBLIC	??0?$ImVector@UImVec4@@@@QEAA@XZ		; ImVector<ImVec4>::ImVector<ImVec4>
PUBLIC	??1?$ImVector@UImVec4@@@@QEAA@XZ		; ImVector<ImVec4>::~ImVector<ImVec4>
PUBLIC	?clear@?$ImVector@UImVec4@@@@QEAAXXZ		; ImVector<ImVec4>::clear
PUBLIC	?_grow_capacity@?$ImVector@UImVec4@@@@QEBAHH@Z	; ImVector<ImVec4>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImVec4@@@@QEAAXH@Z		; ImVector<ImVec4>::resize
PUBLIC	?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z		; ImVector<ImVec4>::reserve
PUBLIC	?push_back@?$ImVector@UImVec4@@@@QEAAXAEBUImVec4@@@Z ; ImVector<ImVec4>::push_back
PUBLIC	?pop_back@?$ImVector@UImVec4@@@@QEAAXXZ		; ImVector<ImVec4>::pop_back
PUBLIC	??0?$ImVector@PEAX@@QEAA@XZ			; ImVector<void * __ptr64>::ImVector<void * __ptr64>
PUBLIC	??1?$ImVector@PEAX@@QEAA@XZ			; ImVector<void * __ptr64>::~ImVector<void * __ptr64>
PUBLIC	?clear@?$ImVector@PEAX@@QEAAXXZ			; ImVector<void * __ptr64>::clear
PUBLIC	?_grow_capacity@?$ImVector@PEAX@@QEBAHH@Z	; ImVector<void * __ptr64>::_grow_capacity
PUBLIC	?resize@?$ImVector@PEAX@@QEAAXH@Z		; ImVector<void * __ptr64>::resize
PUBLIC	?reserve@?$ImVector@PEAX@@QEAAXH@Z		; ImVector<void * __ptr64>::reserve
PUBLIC	?push_back@?$ImVector@PEAX@@QEAAXAEBQEAX@Z	; ImVector<void * __ptr64>::push_back
PUBLIC	?pop_back@?$ImVector@PEAX@@QEAAXXZ		; ImVector<void * __ptr64>::pop_back
PUBLIC	??0?$ImVector@UImVec2@@@@QEAA@XZ		; ImVector<ImVec2>::ImVector<ImVec2>
PUBLIC	??1?$ImVector@UImVec2@@@@QEAA@XZ		; ImVector<ImVec2>::~ImVector<ImVec2>
PUBLIC	?clear@?$ImVector@UImVec2@@@@QEAAXXZ		; ImVector<ImVec2>::clear
PUBLIC	?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ	; ImVector<ImVec2>::back
PUBLIC	?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z	; ImVector<ImVec2>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImVec2@@@@QEAAXH@Z		; ImVector<ImVec2>::resize
PUBLIC	?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z		; ImVector<ImVec2>::reserve
PUBLIC	?reserve_discard@?$ImVector@UImVec2@@@@QEAAXH@Z	; ImVector<ImVec2>::reserve_discard
PUBLIC	?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
PUBLIC	??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z ; ImDrawList::ImDrawList
PUBLIC	?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z ; ImDrawList::PushClipRect
PUBLIC	?PushClipRectFullScreen@ImDrawList@@QEAAXXZ	; ImDrawList::PushClipRectFullScreen
PUBLIC	?PopClipRect@ImDrawList@@QEAAXXZ		; ImDrawList::PopClipRect
PUBLIC	?PushTextureID@ImDrawList@@QEAAXPEAX@Z		; ImDrawList::PushTextureID
PUBLIC	?PopTextureID@ImDrawList@@QEAAXXZ		; ImDrawList::PopTextureID
PUBLIC	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z	; ImDrawList::AddLine
PUBLIC	?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z	; ImDrawList::AddRect
PUBLIC	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
PUBLIC	?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z ; ImDrawList::AddRectFilledMultiColor
PUBLIC	?AddQuad@ImDrawList@@QEAAXAEBUImVec2@@000IM@Z	; ImDrawList::AddQuad
PUBLIC	?AddQuadFilled@ImDrawList@@QEAAXAEBUImVec2@@000I@Z ; ImDrawList::AddQuadFilled
PUBLIC	?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z ; ImDrawList::AddTriangle
PUBLIC	?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z ; ImDrawList::AddTriangleFilled
PUBLIC	?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z	; ImDrawList::AddCircle
PUBLIC	?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z ; ImDrawList::AddCircleFilled
PUBLIC	?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z	; ImDrawList::AddNgon
PUBLIC	?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z ; ImDrawList::AddNgonFilled
PUBLIC	?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z	; ImDrawList::AddText
PUBLIC	?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z ; ImDrawList::AddText
PUBLIC	?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z ; ImDrawList::AddPolyline
PUBLIC	?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z ; ImDrawList::AddConvexPolyFilled
PUBLIC	?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z ; ImDrawList::AddBezierCubic
PUBLIC	?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z ; ImDrawList::AddBezierQuadratic
PUBLIC	?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z ; ImDrawList::AddImage
PUBLIC	?AddImageQuad@ImDrawList@@QEAAXPEAXAEBUImVec2@@1111111I@Z ; ImDrawList::AddImageQuad
PUBLIC	?AddImageRounded@ImDrawList@@QEAAXPEAXAEBUImVec2@@111IMH@Z ; ImDrawList::AddImageRounded
PUBLIC	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z	; ImDrawList::PathLineTo
PUBLIC	?PathFillConvex@ImDrawList@@QEAAXI@Z		; ImDrawList::PathFillConvex
PUBLIC	?PathStroke@ImDrawList@@QEAAXIHM@Z		; ImDrawList::PathStroke
PUBLIC	?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z	; ImDrawList::PathArcTo
PUBLIC	?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast
PUBLIC	?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z ; ImDrawList::PathBezierCubicCurveTo
PUBLIC	?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z ; ImDrawList::PathBezierQuadraticCurveTo
PUBLIC	?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z	; ImDrawList::PathRect
PUBLIC	?AddCallback@ImDrawList@@QEAAXP6AXPEBU1@PEBUImDrawCmd@@@ZPEAX@Z ; ImDrawList::AddCallback
PUBLIC	?AddDrawCmd@ImDrawList@@QEAAXXZ			; ImDrawList::AddDrawCmd
PUBLIC	?CloneOutput@ImDrawList@@QEBAPEAU1@XZ		; ImDrawList::CloneOutput
PUBLIC	?PrimReserve@ImDrawList@@QEAAXHH@Z		; ImDrawList::PrimReserve
PUBLIC	?PrimUnreserve@ImDrawList@@QEAAXHH@Z		; ImDrawList::PrimUnreserve
PUBLIC	?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z	; ImDrawList::PrimRect
PUBLIC	?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z	; ImDrawList::PrimRectUV
PUBLIC	?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z ; ImDrawList::PrimQuadUV
PUBLIC	?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z	; ImDrawList::PrimWriteVtx
PUBLIC	?PrimWriteIdx@ImDrawList@@QEAAXG@Z		; ImDrawList::PrimWriteIdx
PUBLIC	?_ResetForNewFrame@ImDrawList@@QEAAXXZ		; ImDrawList::_ResetForNewFrame
PUBLIC	?_ClearFreeMemory@ImDrawList@@QEAAXXZ		; ImDrawList::_ClearFreeMemory
PUBLIC	?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ		; ImDrawList::_PopUnusedDrawCmd
PUBLIC	?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ		; ImDrawList::_TryMergeDrawCmds
PUBLIC	?_OnChangedClipRect@ImDrawList@@QEAAXXZ		; ImDrawList::_OnChangedClipRect
PUBLIC	?_OnChangedTextureID@ImDrawList@@QEAAXXZ	; ImDrawList::_OnChangedTextureID
PUBLIC	?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ	; ImDrawList::_OnChangedVtxOffset
PUBLIC	?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z ; ImDrawList::_CalcCircleAutoSegmentCount
PUBLIC	?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z ; ImDrawList::_PathArcToFastEx
PUBLIC	?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::_PathArcToN
PUBLIC	?DeIndexAllBuffers@ImDrawData@@QEAAXXZ		; ImDrawData::DeIndexAllBuffers
PUBLIC	?ScaleClipRects@ImDrawData@@QEAAXAEBUImVec2@@@Z	; ImDrawData::ScaleClipRects
PUBLIC	??0ImFontConfig@@QEAA@XZ			; ImFontConfig::ImFontConfig
PUBLIC	??1?$ImVector@I@@QEAA@XZ			; ImVector<unsigned int>::~ImVector<unsigned int>
PUBLIC	?clear@?$ImVector@I@@QEAAXXZ			; ImVector<unsigned int>::clear
PUBLIC	?empty@?$ImVector@I@@QEBA_NXZ			; ImVector<unsigned int>::empty
PUBLIC	??A?$ImVector@I@@QEAAAEAIH@Z			; ImVector<unsigned int>::operator[]
PUBLIC	??A?$ImVector@I@@QEBAAEBIH@Z			; ImVector<unsigned int>::operator[]
PUBLIC	?begin@?$ImVector@I@@QEBAPEBIXZ			; ImVector<unsigned int>::begin
PUBLIC	?end@?$ImVector@I@@QEBAPEBIXZ			; ImVector<unsigned int>::end
PUBLIC	?_grow_capacity@?$ImVector@I@@QEBAHH@Z		; ImVector<unsigned int>::_grow_capacity
PUBLIC	?resize@?$ImVector@I@@QEAAXH@Z			; ImVector<unsigned int>::resize
PUBLIC	?reserve@?$ImVector@I@@QEAAXH@Z			; ImVector<unsigned int>::reserve
PUBLIC	?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z	; ImFontGlyphRangesBuilder::GetBit
PUBLIC	?SetBit@ImFontGlyphRangesBuilder@@QEAAX_K@Z	; ImFontGlyphRangesBuilder::SetBit
PUBLIC	?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z	; ImFontGlyphRangesBuilder::AddChar
PUBLIC	?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z	; ImFontGlyphRangesBuilder::AddText
PUBLIC	?AddRanges@ImFontGlyphRangesBuilder@@QEAAXPEBG@Z ; ImFontGlyphRangesBuilder::AddRanges
PUBLIC	?BuildRanges@ImFontGlyphRangesBuilder@@QEAAXPEAU?$ImVector@G@@@Z ; ImFontGlyphRangesBuilder::BuildRanges
PUBLIC	??0ImFontAtlasCustomRect@@QEAA@XZ		; ImFontAtlasCustomRect::ImFontAtlasCustomRect
PUBLIC	?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ	; ImFontAtlasCustomRect::IsPacked
PUBLIC	??0ImFontAtlas@@QEAA@XZ				; ImFontAtlas::ImFontAtlas
PUBLIC	??1ImFontAtlas@@QEAA@XZ				; ImFontAtlas::~ImFontAtlas
PUBLIC	?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z ; ImFontAtlas::AddFont
PUBLIC	?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z ; ImFontAtlas::AddFontDefault
PUBLIC	?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z ; ImFontAtlas::AddFontFromFileTTF
PUBLIC	?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z ; ImFontAtlas::AddFontFromMemoryTTF
PUBLIC	?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z ; ImFontAtlas::AddFontFromMemoryCompressedTTF
PUBLIC	?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z ; ImFontAtlas::AddFontFromMemoryCompressedBase85TTF
PUBLIC	?ClearInputData@ImFontAtlas@@QEAAXXZ		; ImFontAtlas::ClearInputData
PUBLIC	?ClearTexData@ImFontAtlas@@QEAAXXZ		; ImFontAtlas::ClearTexData
PUBLIC	?ClearFonts@ImFontAtlas@@QEAAXXZ		; ImFontAtlas::ClearFonts
PUBLIC	?Clear@ImFontAtlas@@QEAAXXZ			; ImFontAtlas::Clear
PUBLIC	?Build@ImFontAtlas@@QEAA_NXZ			; ImFontAtlas::Build
PUBLIC	?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z ; ImFontAtlas::GetTexDataAsAlpha8
PUBLIC	?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z ; ImFontAtlas::GetTexDataAsRGBA32
PUBLIC	?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ	; ImFontAtlas::GetGlyphRangesDefault
PUBLIC	?GetGlyphRangesGreek@ImFontAtlas@@QEAAPEBGXZ	; ImFontAtlas::GetGlyphRangesGreek
PUBLIC	?GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ	; ImFontAtlas::GetGlyphRangesKorean
PUBLIC	?GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ	; ImFontAtlas::GetGlyphRangesJapanese
PUBLIC	?GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ ; ImFontAtlas::GetGlyphRangesChineseFull
PUBLIC	?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ ; ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon
PUBLIC	?GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ	; ImFontAtlas::GetGlyphRangesCyrillic
PUBLIC	?GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ	; ImFontAtlas::GetGlyphRangesThai
PUBLIC	?GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ ; ImFontAtlas::GetGlyphRangesVietnamese
PUBLIC	?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z	; ImFontAtlas::AddCustomRectRegular
PUBLIC	?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z ; ImFontAtlas::AddCustomRectFontGlyph
PUBLIC	?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z ; ImFontAtlas::GetCustomRectByIndex
PUBLIC	?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z ; ImFontAtlas::CalcCustomRectUV
PUBLIC	?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z ; ImFontAtlas::GetMouseCursorTexData
PUBLIC	??0?$ImVector@PEAUImFont@@@@QEAA@XZ		; ImVector<ImFont * __ptr64>::ImVector<ImFont * __ptr64>
PUBLIC	??1?$ImVector@PEAUImFont@@@@QEAA@XZ		; ImVector<ImFont * __ptr64>::~ImVector<ImFont * __ptr64>
PUBLIC	?clear@?$ImVector@PEAUImFont@@@@QEAAXXZ		; ImVector<ImFont * __ptr64>::clear
PUBLIC	?clear_delete@?$ImVector@PEAUImFont@@@@QEAAXXZ	; ImVector<ImFont * __ptr64>::clear_delete
PUBLIC	?empty@?$ImVector@PEAUImFont@@@@QEBA_NXZ	; ImVector<ImFont * __ptr64>::empty
PUBLIC	??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ; ImVector<ImFont * __ptr64>::operator[]
PUBLIC	?back@?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@XZ ; ImVector<ImFont * __ptr64>::back
PUBLIC	?_grow_capacity@?$ImVector@PEAUImFont@@@@QEBAHH@Z ; ImVector<ImFont * __ptr64>::_grow_capacity
PUBLIC	?reserve@?$ImVector@PEAUImFont@@@@QEAAXH@Z	; ImVector<ImFont * __ptr64>::reserve
PUBLIC	?push_back@?$ImVector@PEAUImFont@@@@QEAAXAEBQEAUImFont@@@Z ; ImVector<ImFont * __ptr64>::push_back
PUBLIC	??0?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ	; ImVector<ImFontAtlasCustomRect>::ImVector<ImFontAtlasCustomRect>
PUBLIC	??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ	; ImVector<ImFontAtlasCustomRect>::~ImVector<ImFontAtlasCustomRect>
PUBLIC	?clear@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXXZ ; ImVector<ImFontAtlasCustomRect>::clear
PUBLIC	??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ; ImVector<ImFontAtlasCustomRect>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@UImFontAtlasCustomRect@@@@QEBAHH@Z ; ImVector<ImFontAtlasCustomRect>::_grow_capacity
PUBLIC	?reserve@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXH@Z ; ImVector<ImFontAtlasCustomRect>::reserve
PUBLIC	?push_back@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXAEBUImFontAtlasCustomRect@@@Z ; ImVector<ImFontAtlasCustomRect>::push_back
PUBLIC	??0?$ImVector@UImFontConfig@@@@QEAA@XZ		; ImVector<ImFontConfig>::ImVector<ImFontConfig>
PUBLIC	??1?$ImVector@UImFontConfig@@@@QEAA@XZ		; ImVector<ImFontConfig>::~ImVector<ImFontConfig>
PUBLIC	?clear@?$ImVector@UImFontConfig@@@@QEAAXXZ	; ImVector<ImFontConfig>::clear
PUBLIC	??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ; ImVector<ImFontConfig>::operator[]
PUBLIC	?back@?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@XZ ; ImVector<ImFontConfig>::back
PUBLIC	?_grow_capacity@?$ImVector@UImFontConfig@@@@QEBAHH@Z ; ImVector<ImFontConfig>::_grow_capacity
PUBLIC	?reserve@?$ImVector@UImFontConfig@@@@QEAAXH@Z	; ImVector<ImFontConfig>::reserve
PUBLIC	?push_back@?$ImVector@UImFontConfig@@@@QEAAXAEBUImFontConfig@@@Z ; ImVector<ImFontConfig>::push_back
PUBLIC	??0?$ImVector@M@@QEAA@XZ			; ImVector<float>::ImVector<float>
PUBLIC	??1?$ImVector@M@@QEAA@XZ			; ImVector<float>::~ImVector<float>
PUBLIC	?clear@?$ImVector@M@@QEAAXXZ			; ImVector<float>::clear
PUBLIC	??A?$ImVector@M@@QEAAAEAMH@Z			; ImVector<float>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@M@@QEBAHH@Z		; ImVector<float>::_grow_capacity
PUBLIC	?resize@?$ImVector@M@@QEAAXHAEBM@Z		; ImVector<float>::resize
PUBLIC	?reserve@?$ImVector@M@@QEAAXH@Z			; ImVector<float>::reserve
PUBLIC	??0?$ImVector@UImFontGlyph@@@@QEAA@XZ		; ImVector<ImFontGlyph>::ImVector<ImFontGlyph>
PUBLIC	??1?$ImVector@UImFontGlyph@@@@QEAA@XZ		; ImVector<ImFontGlyph>::~ImVector<ImFontGlyph>
PUBLIC	?clear@?$ImVector@UImFontGlyph@@@@QEAAXXZ	; ImVector<ImFontGlyph>::clear
PUBLIC	??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z ; ImVector<ImFontGlyph>::operator[]
PUBLIC	?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ ; ImVector<ImFontGlyph>::back
PUBLIC	?_grow_capacity@?$ImVector@UImFontGlyph@@@@QEBAHH@Z ; ImVector<ImFontGlyph>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImFontGlyph@@@@QEAAXH@Z	; ImVector<ImFontGlyph>::resize
PUBLIC	?reserve@?$ImVector@UImFontGlyph@@@@QEAAXH@Z	; ImVector<ImFontGlyph>::reserve
PUBLIC	??0ImFont@@QEAA@XZ				; ImFont::ImFont
PUBLIC	??1ImFont@@QEAA@XZ				; ImFont::~ImFont
PUBLIC	?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z	; ImFont::FindGlyph
PUBLIC	?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyphNoFallback
PUBLIC	?IsLoaded@ImFont@@QEBA_NXZ			; ImFont::IsLoaded
PUBLIC	?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z ; ImFont::CalcTextSizeA
PUBLIC	?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z ; ImFont::CalcWordWrapPositionA
PUBLIC	?RenderChar@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IG@Z ; ImFont::RenderChar
PUBLIC	?RenderText@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IAEBUImVec4@@PEBD3M_N@Z ; ImFont::RenderText
PUBLIC	?BuildLookupTable@ImFont@@QEAAXXZ		; ImFont::BuildLookupTable
PUBLIC	?ClearOutputData@ImFont@@QEAAXXZ		; ImFont::ClearOutputData
PUBLIC	?GrowIndex@ImFont@@QEAAXH@Z			; ImFont::GrowIndex
PUBLIC	?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z ; ImFont::AddGlyph
PUBLIC	?AddRemapChar@ImFont@@QEAAXGG_N@Z		; ImFont::AddRemapChar
PUBLIC	?SetGlyphVisible@ImFont@@QEAAXG_N@Z		; ImFont::SetGlyphVisible
PUBLIC	?IsGlyphRangeUnused@ImFont@@QEAA_NII@Z		; ImFont::IsGlyphRangeUnused
PUBLIC	??_GImFont@@QEAAPEAXI@Z				; ImFont::`scalar deleting destructor'
PUBLIC	fabsf
PUBLIC	?ImBezierCubicCalc@@YA?AUImVec2@@AEBU1@000M@Z	; ImBezierCubicCalc
PUBLIC	?ImBezierQuadraticCalc@@YA?AUImVec2@@AEBU1@00M@Z ; ImBezierQuadraticCalc
PUBLIC	?ImBitArraySetBit@@YAXPEAIH@Z			; ImBitArraySetBit
PUBLIC	?Create@ImBitVector@@QEAAXH@Z			; ImBitVector::Create
PUBLIC	?Clear@ImBitVector@@QEAAXXZ			; ImBitVector::Clear
PUBLIC	?TestBit@ImBitVector@@QEBA_NH@Z			; ImBitVector::TestBit
PUBLIC	?SetBit@ImBitVector@@QEAAXH@Z			; ImBitVector::SetBit
PUBLIC	??1ImBitVector@@QEAA@XZ				; ImBitVector::~ImBitVector
PUBLIC	??1?$ImVector@H@@QEAA@XZ			; ImVector<int>::~ImVector<int>
PUBLIC	??A?$ImVector@H@@QEAAAEAHH@Z			; ImVector<int>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@H@@QEBAHH@Z		; ImVector<int>::_grow_capacity
PUBLIC	?reserve@?$ImVector@H@@QEAAXH@Z			; ImVector<int>::reserve
PUBLIC	?push_back@?$ImVector@H@@QEAAXAEBH@Z		; ImVector<int>::push_back
PUBLIC	??0ImDrawListSharedData@@QEAA@XZ		; ImDrawListSharedData::ImDrawListSharedData
PUBLIC	?SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z ; ImDrawListSharedData::SetCircleTessellationMaxError
PUBLIC	?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z ; ImGui::RenderColorRectWithAlphaCheckerboard
PUBLIC	?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z ; ImGui::RenderArrow
PUBLIC	?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z ; ImGui::RenderBullet
PUBLIC	?RenderCheckMark@ImGui@@YAXPEAUImDrawList@@UImVec2@@IM@Z ; ImGui::RenderCheckMark
PUBLIC	?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z ; ImGui::RenderArrowPointingAt
PUBLIC	?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z ; ImGui::RenderRectFilledRangeH
PUBLIC	?RenderRectFilledWithHole@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@1IM@Z ; ImGui::RenderRectFilledWithHole
PUBLIC	?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z ; ImGui::ShadeVertsLinearColorGradientKeepAlpha
PUBLIC	?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z ; ImGui::ShadeVertsLinearUV
PUBLIC	?ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ ; ImFontAtlasGetBuilderForStbTruetype
PUBLIC	?ImFontAtlasBuildInit@@YAXPEAUImFontAtlas@@@Z	; ImFontAtlasBuildInit
PUBLIC	?ImFontAtlasBuildSetupFont@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontConfig@@MM@Z ; ImFontAtlasBuildSetupFont
PUBLIC	?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z ; ImFontAtlasBuildPackCustomRects
PUBLIC	?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z	; ImFontAtlasBuildFinish
PUBLIC	?ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z ; ImFontAtlasBuildRender8bppRectFromString
PUBLIC	?ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z ; ImFontAtlasBuildRender32bppRectFromString
PUBLIC	?ImFontAtlasBuildMultiplyCalcLookupTable@@YAXQEAEM@Z ; ImFontAtlasBuildMultiplyCalcLookupTable
PUBLIC	?ImFontAtlasBuildMultiplyRectAlpha8@@YAXQEBEPEAEHHHHH@Z ; ImFontAtlasBuildMultiplyRectAlpha8
PUBLIC	??1ImFontBuildSrcData@@QEAA@XZ			; ImFontBuildSrcData::~ImFontBuildSrcData
PUBLIC	??_GImFontBuildSrcData@@QEAAPEAXI@Z		; ImFontBuildSrcData::`scalar deleting destructor'
PUBLIC	??0?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ	; ImVector<ImFontBuildSrcData>::ImVector<ImFontBuildSrcData>
PUBLIC	??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ	; ImVector<ImFontBuildSrcData>::~ImVector<ImFontBuildSrcData>
PUBLIC	?clear@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ ; ImVector<ImFontBuildSrcData>::clear
PUBLIC	?clear_destruct@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ ; ImVector<ImFontBuildSrcData>::clear_destruct
PUBLIC	?size_in_bytes@?$ImVector@UImFontBuildSrcData@@@@QEBAHXZ ; ImVector<ImFontBuildSrcData>::size_in_bytes
PUBLIC	??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z ; ImVector<ImFontBuildSrcData>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@UImFontBuildSrcData@@@@QEBAHH@Z ; ImVector<ImFontBuildSrcData>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z ; ImVector<ImFontBuildSrcData>::resize
PUBLIC	?reserve@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z ; ImVector<ImFontBuildSrcData>::reserve
PUBLIC	??0?$ImVector@UImFontBuildDstData@@@@QEAA@XZ	; ImVector<ImFontBuildDstData>::ImVector<ImFontBuildDstData>
PUBLIC	??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ	; ImVector<ImFontBuildDstData>::~ImVector<ImFontBuildDstData>
PUBLIC	?clear@?$ImVector@UImFontBuildDstData@@@@QEAAXXZ ; ImVector<ImFontBuildDstData>::clear
PUBLIC	?size_in_bytes@?$ImVector@UImFontBuildDstData@@@@QEBAHXZ ; ImVector<ImFontBuildDstData>::size_in_bytes
PUBLIC	??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z ; ImVector<ImFontBuildDstData>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@UImFontBuildDstData@@@@QEBAHH@Z ; ImVector<ImFontBuildDstData>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z ; ImVector<ImFontBuildDstData>::resize
PUBLIC	?reserve@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z ; ImVector<ImFontBuildDstData>::reserve
PUBLIC	??0?$ImVector@Ustbrp_rect@@@@QEAA@XZ		; ImVector<stbrp_rect>::ImVector<stbrp_rect>
PUBLIC	??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ		; ImVector<stbrp_rect>::~ImVector<stbrp_rect>
PUBLIC	?clear@?$ImVector@Ustbrp_rect@@@@QEAAXXZ	; ImVector<stbrp_rect>::clear
PUBLIC	?size_in_bytes@?$ImVector@Ustbrp_rect@@@@QEBAHXZ ; ImVector<stbrp_rect>::size_in_bytes
PUBLIC	??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@Ustbrp_rect@@@@QEBAHH@Z ; ImVector<stbrp_rect>::_grow_capacity
PUBLIC	?resize@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z	; ImVector<stbrp_rect>::resize
PUBLIC	?reserve@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z	; ImVector<stbrp_rect>::reserve
PUBLIC	??0?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ	; ImVector<stbtt_packedchar>::ImVector<stbtt_packedchar>
PUBLIC	??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ	; ImVector<stbtt_packedchar>::~ImVector<stbtt_packedchar>
PUBLIC	?size_in_bytes@?$ImVector@Ustbtt_packedchar@@@@QEBAHXZ ; ImVector<stbtt_packedchar>::size_in_bytes
PUBLIC	??A?$ImVector@Ustbtt_packedchar@@@@QEAAAEAUstbtt_packedchar@@H@Z ; ImVector<stbtt_packedchar>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@Ustbtt_packedchar@@@@QEBAHH@Z ; ImVector<stbtt_packedchar>::_grow_capacity
PUBLIC	?resize@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z ; ImVector<stbtt_packedchar>::resize
PUBLIC	?reserve@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z ; ImVector<stbtt_packedchar>::reserve
PUBLIC	??$IM_DELETE@UImFont@@@@YAXPEAUImFont@@@Z	; IM_DELETE<ImFont>
PUBLIC	??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@ ; `string'
PUBLIC	??_C@_1BG@HMJJDGFN@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GA@FAIKKLKG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@ ; `string'
PUBLIC	??_C@_1DA@HCNHOFJN@?$AAn?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAS?$AAt?$AAo?$AAr?$AAa?$AAg?$AAe?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DM?$AA?5?$AA5?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_13COJANIEC@?$AA0?$AA?$AA@			; `string'
PUBLIC	??_C@_1GA@HGJIAHCP@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@ ; `string'
PUBLIC	?__LINE__Var@?0??stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z@4JA ; `stbrp__skyline_find_min_y'::`1'::__LINE__Var
PUBLIC	??_C@_1BO@KBODBKOH@?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@BDIGDJGP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO?$AA?5?$AAx?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BM@JHJLEEND@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA ; `stbrp__skyline_find_best_pos'::`1'::__LINE__Var
PUBLIC	??_C@_1CM@LEHAODMI@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AAc?$AA?9?$AA?$DO?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@MNLKNDNL@?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FA@GPDJEJHP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO?$AA?5?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA ; `stbrp__skyline_pack_rectangle'::`1'::__LINE__Var
PUBLIC	??_C@_1CM@NCKIDPDA@?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?5?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@NJIDGHPD@?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DM@MABMKAHD@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAn?$AAu?$AAm?$AA_?$AAn?$AAo?$AAd?$AAe?$AAs?$AA?$CL?$AA2?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z@4JA ; `stbtt__buf_seek'::`1'::__LINE__Var
PUBLIC	??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@ ; `string'
PUBLIC	??_C@_1DA@CPAEOPEI@?$AA?$CB?$AA?$CI?$AAo?$AA?5?$AA?$DO?$AA?5?$AAb?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAo?$AA?5?$AA?$DM?$AA?5?$AA0?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z@4JA ; `stbtt__buf_get'::`1'::__LINE__Var
PUBLIC	??_C@_1CC@OMFGMKMB@?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA4?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z@4JA ; `stbtt__new_buf'::`1'::__LINE__Var
PUBLIC	??_C@_1CE@EPOLDKHI@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AA0?$AAx?$AA4?$AA0?$AA0?$AA0?$AA0?$AA0?$AA0?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU2@@Z@4JA ; `stbtt__cff_get_index'::`1'::__LINE__Var
PUBLIC	??_C@_1DK@IJDIOPHB@?$AAo?$AAf?$AAf?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA4?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z@4JA ; `stbtt__cff_int'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z@4JA ; `stbtt__cff_skip_operand'::`1'::__LINE__Var
PUBLIC	??_C@_1BC@KDMJFGHG@?$AAb?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA8?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__cff_index_get@@YA?AUstbtt__buf@@U2@H@Z@4JA ; `stbtt__cff_index_get'::`1'::__LINE__Var
PUBLIC	??_C@_1CI@PFMEGAIA@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_04LBBEMOBJ@typ1?$AA@			; `string'
PUBLIC	??_C@_04LLEFIKCJ@OTTO?$AA@			; `string'
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	??_C@_04KIOEMAHO@ttcf?$AA@			; `string'
PUBLIC	??_C@_04EICJPCEA@cmap?$AA@			; `string'
PUBLIC	??_C@_04DACNFKGE@loca?$AA@			; `string'
PUBLIC	??_C@_04NEODDMOL@head?$AA@			; `string'
PUBLIC	??_C@_04LLIHEPK@glyf?$AA@			; `string'
PUBLIC	??_C@_04FMPHLIKP@hhea?$AA@			; `string'
PUBLIC	??_C@_04ONMNCIMC@hmtx?$AA@			; `string'
PUBLIC	??_C@_04HHMMLDJI@kern?$AA@			; `string'
PUBLIC	??_C@_04PCFDEHHD@GPOS?$AA@			; `string'
PUBLIC	??_C@_04HJGCPIEK@CFF?5?$AA@			; `string'
PUBLIC	??_C@_04KODIGLGG@maxp?$AA@			; `string'
PUBLIC	?__LINE__Var@?0??stbtt_FindGlyphIndex@@9@4JA	; `stbtt_FindGlyphIndex'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z@4JA ; `stbtt__GetGlyfOffset'::`1'::__LINE__Var
PUBLIC	??_C@_1CA@MDABGEPC@?$AA?$CB?$AAi?$AAn?$AAf?$AAo?$AA?9?$AA?$DO?$AAc?$AAf?$AAf?$AA?4?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z@4JA ; `stbtt__GetGlyphShapeTT'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z@4JA ; `stbtt__GetGlyphShapeT2'::`1'::__LINE__Var
PUBLIC	??_C@_1GE@KABFAMEA@?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA_?$AAc?$AAt?$AAx?$AA?4?$AAn?$AAu?$AAm?$AA_?$AAv?$AAe?$AAr?$AAt?$AAi?$AAc?$AAe?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z@4JA ; `stbtt__new_active'::`1'::__LINE__Var
PUBLIC	??_C@_1O@EHPNOHML@?$AAz?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA ; `stbtt__handle_clipped_edge'::`1'::__LINE__Var
PUBLIC	??_C@_1BA@ENLNFFAM@?$AAy?$AA0?$AA?5?$AA?$DM?$AA?5?$AAy?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@JGPMADBG@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@DHAKMBPL@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@FAAMJPKE@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@FEPJEPJJ@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@NGGEAFFG@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@NILBPPPH@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FK@JPMIPNJF@?$AAx?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA0?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__sized_trapezoid_area@@YAMMMM@Z@4JA ; `stbtt__sized_trapezoid_area'::`1'::__LINE__Var
PUBLIC	??_C@_1BO@IKHHJKG@?$AAt?$AAo?$AAp?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@HFDPCECH@?$AAb?$AAo?$AAt?$AAt?$AAo?$AAm?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z@4JA ; `stbtt__fill_active_edges_new'::`1'::__LINE__Var
PUBLIC	??_C@_1BO@MDBOACOJ@?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_?$AAt?$AAo?$AAp?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EI@KOIFPDFH@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAy?$AA_?$AAb?$AAo?$AAt?$AAt?$AAo?$AAm?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_@ ; `string'
PUBLIC	??_C@_1CE@GDDDMDCC@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl?$AAe?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@DNEJOLOH@?$AAd?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@KAEGAKJB@?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@PHOJNIKI@?$AAf?$AAa?$AAb?$AAs?$AAf?$AA?$CI?$AAa?$AAr?$AAe?$AAa?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA?4?$AA0?$AA1?$AAf?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@LBLBFJLN@?$AAs?$AAy?$AA1?$AA?5?$AA?$DO?$AA?5?$AAy?$AA_?$AAf?$AAi?$AAn?$AAa?$AAl?$AA?9?$AA0?$AA?4?$AA0?$AA1?$AAf?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z@4JA ; `stbtt__rasterize_sorted_edges'::`1'::__LINE__Var
PUBLIC	??_C@_1BK@LMAHJHLI@?$AAz?$AA?9?$AA?$DO?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@PMJHELI@?$AAz?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA_?$AAy?$AA_?$AAt?$AAo?$AAp?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__h_prefilter@@YAXPEAEHHHI@Z@4JA ; `stbtt__h_prefilter'::`1'::__LINE__Var
PUBLIC	??_C@_1BO@BDJAMAMF@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__v_prefilter@@YAXPEAEHHHI@Z@4JA ; `stbtt__v_prefilter'::`1'::__LINE__Var
PUBLIC	??_C@_1DO@LAPBLJ@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$CK?$AAs?$AAt?$AAr?$AAi?$AAd?$AAe?$AA_?$AAi?$AAn?$AA_?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z@4JA ; `ImDrawListSharedData::SetCircleTessellationMaxError'::`1'::__LINE__Var
PUBLIC	??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@ ; `string'
PUBLIC	??_C@_1CC@JCMOPDC@?$AAm?$AAa?$AAx?$AA_?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AAf?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??AddDrawCmd@ImDrawList@@QEAAXXZ@4JA ; `ImDrawList::AddDrawCmd'::`1'::__LINE__Var
PUBLIC	??_C@_1LC@MAEAJCLC@?$AAd?$AAr?$AAa?$AAw?$AA_?$AAc?$AAm?$AAd?$AA?4?$AAC?$AAl?$AAi?$AAp?$AAR?$AAe?$AAc?$AAt?$AA?4?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAd?$AAr?$AAa?$AAw?$AA_?$AAc?$AAm?$AAd?$AA?4@ ; `string'
PUBLIC	?__LINE__Var@?0??AddCallback@ImDrawList@@QEAAXP6AXPEBU2@PEBUImDrawCmd@@@ZPEAX@Z@4JA ; `ImDrawList::AddCallback'::`1'::__LINE__Var
PUBLIC	??_C@_1DI@FGNNAPCK@?$AAc?$AAu?$AAr?$AAr?$AA_?$AAc?$AAm?$AAd?$AA?9?$AA?$DO?$AAU?$AAs?$AAe?$AAr?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??_OnChangedClipRect@ImDrawList@@QEAAXXZ@4JA ; `ImDrawList::_OnChangedClipRect'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??_OnChangedTextureID@ImDrawList@@QEAAXXZ@4JA ; `ImDrawList::_OnChangedTextureID'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??_OnChangedVtxOffset@ImDrawList@@QEAAXXZ@4JA ; `ImDrawList::_OnChangedVtxOffset'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z@4JA ; `ImDrawList::PathBezierCubicCurveTo'::`1'::__LINE__Var
PUBLIC	??_C@_1EG@DFNGCDMN@?$AA_?$AAD?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAC?$AAu?$AAr?$AAv?$AAe?$AAT?$AAe?$AAs?$AAs?$AAe?$AAl?$AAl?$AAa?$AAt?$AAi?$AAo?$AAn?$AAT?$AAo?$AAl?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4@ ; `string'
PUBLIC	?__LINE__Var@?0??PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z@4JA ; `ImDrawList::PathBezierQuadraticCurveTo'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??FixRectCornerFlags@@YAHH@Z@4JA	; `FixRectCornerFlags'::`1'::__LINE__Var
PUBLIC	??_C@_0DF@FNKJFHEE@Misuse?5of?5legacy?5hardcoded?5ImDra@ ; `string'
PUBLIC	??_C@_1JM@GAJOFMMN@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA0?$AAx?$AA0?$AAF?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAM?$AAi?$AAs?$AAu?$AAs?$AAe?$AA?5?$AAo@ ; `string'
PUBLIC	?__LINE__Var@?0??AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z@4JA ; `ImDrawList::AddText'::`1'::__LINE__Var
PUBLIC	??_C@_1GI@CIGOLMNM@?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AAA?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAI?$AAD?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_@ ; `string'
PUBLIC	?__LINE__Var@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4JA ; `ImDrawListSplitter::Split'::`1'::__LINE__Var
PUBLIC	??_C@_0GA@FGMHMEOI@Nested?5channel?5splitting?5is?5not?5@ ; `string'
PUBLIC	??_C@_1BAE@LAENHIMB@?$AA_?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4JA ; `ImDrawListSplitter::SetCurrentChannel'::`1'::__LINE__Var
PUBLIC	??_C@_1DC@ILGGLBID@?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAd?$AAx?$AA?5?$AA?$DM?$AA?5?$AA_?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0???1ImFontAtlas@@QEAA@XZ@4JA	; `ImFontAtlas::~ImFontAtlas'::`1'::__LINE__Var
PUBLIC	??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAtl@ ; `string'
PUBLIC	??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAm?$AAo?$AAd?$AAi?$AAf?$AAy?$AA?5?$AAa?$AA?5?$AAl?$AAo?$AAc?$AAk@ ; `string'
PUBLIC	?__LINE__Var@?0??ClearInputData@ImFontAtlas@@QEAAXXZ@4JA ; `ImFontAtlas::ClearInputData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ClearTexData@ImFontAtlas@@QEAAXXZ@4JA ; `ImFontAtlas::ClearTexData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ClearFonts@ImFontAtlas@@QEAAXXZ@4JA ; `ImFontAtlas::ClearFonts'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4JA ; `ImFontAtlas::AddFont'::`1'::__LINE__Var
PUBLIC	??_C@_1GM@FAHJAOLI@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAF?$AAo?$AAn?$AAt?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAf?$AAo?$AAn?$AAt?$AA_@ ; `string'
PUBLIC	??_C@_1DI@LEOIHPJH@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAS?$AAi?$AAz?$AAe?$AAP?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AAf?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CI@EDBCHFCN@Cannot?5use?5MergeMode?5for?5the?5fir@ ; `string'
PUBLIC	??_C@_1HI@KOOOLAEJ@?$AA?$CB?$AAF?$AAo?$AAn?$AAt?$AAs?$AA?4?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAu?$AAs?$AAe?$AA?5?$AAM?$AAe@ ; `string'
PUBLIC	??_C@_0BG@CONABPA@ProggyClean?4ttf?0?5?$CFdpx?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z@4JA ; `ImFontAtlas::AddFontFromFileTTF'::`1'::__LINE__Var
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_1EG@KCPDJPKE@?$AA?$CI?$AA0?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAo?$AAn?$AAt?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_0L@EPCGLJHG@?$CFs?0?5?$CF?40fpx?$AA@	; `string'
PUBLIC	?__LINE__Var@?0??AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z@4JA ; `ImFontAtlas::AddFontFromMemoryTTF'::`1'::__LINE__Var
PUBLIC	??_C@_1CO@ODFMNMML@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?4?$AAF?$AAo?$AAn?$AAt?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z@4JA ; `ImFontAtlas::AddFontFromMemoryCompressedTTF'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z@4JA ; `ImFontAtlas::AddCustomRectRegular'::`1'::__LINE__Var
PUBLIC	??_C@_1DK@GHLOFHKF@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAF?$AAF?$AAF?$AAF?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DO@CAIIJEKF@?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAF?$AAF?$AAF?$AAF?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z@4JA ; `ImFontAtlas::AddCustomRectFontGlyph'::`1'::__LINE__Var
PUBLIC	??_C@_1BE@PBFICKNN@?$AAf?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z@4JA ; `ImFontAtlas::CalcCustomRectUV'::`1'::__LINE__Var
PUBLIC	??_C@_1DM@CMBJAGBP@?$AAT?$AAe?$AAx?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAT?$AAe?$AAx?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@DEJIAPCP@?$AAr?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAI?$AAs?$AAP?$AAa?$AAc?$AAk?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU3@1@Z@4JA ; `ImFontAtlas::GetMouseCursorTexData'::`1'::__LINE__Var
PUBLIC	??_C@_1DC@JHOLDEIK@?$AAP?$AAa?$AAc?$AAk?$AAI?$AAd?$AAM?$AAo?$AAu?$AAs?$AAe?$AAC?$AAu?$AAr?$AAs?$AAo?$AAr?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??Build@ImFontAtlas@@QEAA_NXZ@4JA ; `ImFontAtlas::Build'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4JA ; `ImFontAtlasBuildWithStbTruetype'::`1'::__LINE__Var
PUBLIC	??_C@_1DG@BBHAKCJP@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAa?$AAt?$AAa?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1KE@NPGLPIC@?$AAc?$AAf?$AAg?$AA?4?$AAD?$AAs?$AAt?$AAF?$AAo?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CI?$AA?$CB?$AAc?$AAf?$AAg?$AA?4?$AAD?$AAs?$AAt?$AAF?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAI?$AAs@ ; `string'
PUBLIC	??_C@_1CO@NKKOCLPN@?$AAs?$AAr?$AAc?$AA_?$AAt?$AAm?$AAp?$AA?4?$AAD?$AAs?$AAt?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DC@IFELKFNN@FontData?5is?5incorrect?0?5or?5FontNo@ ; `string'
PUBLIC	??_C@_1JA@MENENCJI@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAF?$AAo?$AAn?$AAt?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAi?$AAs@ ; `string'
PUBLIC	??_C@_1FO@GJGKHCEN@?$AAs?$AAr?$AAc?$AA_?$AAt?$AAm?$AAp?$AA?4?$AAG?$AAl?$AAy?$AAp?$AAh?$AAs?$AAL?$AAi?$AAs?$AAt?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AAr?$AAc?$AA_?$AAt@ ; `string'
PUBLIC	??_C@_1DC@ENBGOGEF@?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA_?$AAi?$AAn?$AA_?$AAf?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4JA ; `ImFontAtlasBuildPackCustomRects'::`1'::__LINE__Var
PUBLIC	??_C@_1CE@FMMHMDCM@?$AAp?$AAa?$AAc?$AAk?$AA_?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@POMOOFJC@?$AAu?$AAs?$AAe?$AAr?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1KE@CBAIECN@?$AAp?$AAa?$AAc?$AAk?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?4?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAu?$AAs?$AAe?$AAr?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?$FL?$AAi?$AA?$FN@ ; `string'
PUBLIC	?__LINE__Var@?0??ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z@4JA ; `ImFontAtlasBuildRender8bppRectFromString'::`1'::__LINE__Var
PUBLIC	??_C@_1EG@KOLNNAOF@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$CL?$AA?5?$AAw?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAW?$AAi?$AAd@ ; `string'
PUBLIC	??_C@_1EI@CHFOHLGN@?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy?$AA?5?$AA?$CL?$AA?5?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAH?$AAe?$AAi@ ; `string'
PUBLIC	?__LINE__Var@?0??ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z@4JA ; `ImFontAtlasBuildRender32bppRectFromString'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z@4JA ; `ImFontAtlasBuildRenderDefaultTexData'::`1'::__LINE__Var
PUBLIC	??_C@_1BM@DDBMCGAE@?$AAr?$AA?9?$AA?$DO?$AAI?$AAs?$AAP?$AAa?$AAc?$AAk?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1MA@PDHEAINP@?$AAr?$AA?9?$AA?$DO?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAF?$AAO?$AAN?$AAT?$AA_?$AAA?$AAT?$AAL?$AAA?$AAS?$AA_?$AAD?$AAE?$AAF?$AAA?$AAU?$AAL?$AAT?$AA_?$AAT@ ; `string'
PUBLIC	??_C@_1EA@DBHHBIED@?$AAr?$AA?9?$AA?$DO?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA2?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AA?9?$AA?$DO?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA2?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z@4JA ; `ImFontAtlasBuildRenderLinesTexData'::`1'::__LINE__Var
PUBLIC	??_C@_1HO@DLMJCKJA@?$AAp?$AAa?$AAd?$AA_?$AAl?$AAe?$AAf?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CL?$AA?5?$AAp?$AAa?$AAd?$AA_?$AAr?$AAi?$AAg?$AAh@ ; `string'
PUBLIC	?__LINE__Var@?0??ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z@4JA ; `ImFontAtlasBuildFinish'::`1'::__LINE__Var
PUBLIC	??_C@_1HG@JLCPLJIF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAP?$AAi?$AAx?$AAe?$AAl?$AAs?$AAA?$AAl?$AAp?$AAh?$AAa?$AA8?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAa@ ; `string'
PUBLIC	??_C@_1EC@BJJINGAO@?$AAr?$AA?9?$AA?$DO?$AAF?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AAA?$AAt?$AAl?$AAa?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	?__LINE__Var@?0??BuildLookupTable@ImFont@@QEAAXXZ@4JA ; `ImFont::BuildLookupTable'::`1'::__LINE__Var
PUBLIC	??_C@_1CK@FHBHHKB@?$AAG?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AA0?$AAx?$AAF?$AAF?$AAF?$AAF?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??GrowIndex@ImFont@@QEAAXH@Z@4JA	; `ImFont::GrowIndex'::`1'::__LINE__Var
PUBLIC	??_C@_1EO@HLFAHELG@?$AAI?$AAn?$AAd?$AAe?$AAx?$AAA?$AAd?$AAv?$AAa?$AAn?$AAc?$AAe?$AAX?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAI?$AAn?$AAd?$AAe?$AAx?$AAL?$AAo?$AAo?$AAk?$AAu@ ; `string'
PUBLIC	?__LINE__Var@?0??AddRemapChar@ImFont@@QEAAXGG_N@Z@4JA ; `ImFont::AddRemapChar'::`1'::__LINE__Var
PUBLIC	??_C@_1CK@OHOOGJPG@?$AAI?$AAn?$AAd?$AAe?$AAx?$AAL?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z@4JA ; `ImFont::CalcWordWrapPositionA'::`1'::__LINE__Var
PUBLIC	??_C@_1BM@KGJCABG@?$AAt?$AAe?$AAx?$AAt?$AA_?$AAe?$AAn?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z@4JA ; `ImGui::RenderArrow'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??stb__match@@YAXPEBEI@Z@4JA	; `stb__match'::`1'::__LINE__Var
PUBLIC	??_C@_1FC@IADGHEAH@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAs?$AAt?$AAb?$AA_?$AA_?$AAb?$AAa?$AAr?$AAr?$AAi@ ; `string'
PUBLIC	?__LINE__Var@?0??stb__lit@@YAXPEBEI@Z@4JA	; `stb__lit'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??stb_decompress@@YAIPEAEPEBEI@Z@4JA ; `stb_decompress'::`1'::__LINE__Var
PUBLIC	??_C@_1DG@GCANDLHA@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAo?$AAl?$AAe?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DG@EGIPGKEG@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAo?$AAl?$AAe?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DO@NPHOAPAC@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAt?$AA?5?$AA?$DM?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CL?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@BPLGCGDC@?$AAn?$AAe?$AAw?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@358637bd
PUBLIC	__real@3727c5ac
PUBLIC	__real@3c23d70a
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3d23d70a
PUBLIC	__real@3d75c28f
PUBLIC	__real@3d8f5c29
PUBLIC	__real@3da3d70a
PUBLIC	__real@3db851ec
PUBLIC	__real@3dcccccd
PUBLIC	__real@3de147ae
PUBLIC	__real@3e0f5c29
PUBLIC	__real@3e23d70a
PUBLIC	__real@3e2e147b
PUBLIC	__real@3e428f5c
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e6b851f
PUBLIC	__real@3e75c28f
PUBLIC	__real@3e800000
PUBLIC	__real@3e851eb8
PUBLIC	__real@3e8a3d71
PUBLIC	__real@3e8f5c29
PUBLIC	__real@3e947ae1
PUBLIC	__real@3e99999a
PUBLIC	__real@3e9eb852
PUBLIC	__real@3ea3d70a
PUBLIC	__real@3eb33333
PUBLIC	__real@3ec28f5c
PUBLIC	__real@3ec7ae14
PUBLIC	__real@3ecccccd
PUBLIC	__real@3ed1eb85
PUBLIC	__real@3ed70a3d
PUBLIC	__real@3edc28f6
PUBLIC	__real@3ee147ae
PUBLIC	__real@3ee66666
PUBLIC	__real@3eeb851f
PUBLIC	__real@3ef0a3d7
PUBLIC	__real@3ef5c28f
PUBLIC	__real@3efae148
PUBLIC	__real@3f000000
PUBLIC	__real@3f028f5c
PUBLIC	__real@3f051eb8
PUBLIC	__real@3f07ae14
PUBLIC	__real@3f0a3d71
PUBLIC	__real@3f0ccccd
PUBLIC	__real@3f11eb85
PUBLIC	__real@3f170a3d
PUBLIC	__real@3f19999a
PUBLIC	__real@3f1c28f6
PUBLIC	__real@3f1eb852
PUBLIC	__real@3f2147ae
PUBLIC	__real@3f23d70a
PUBLIC	__real@3f2b851f
PUBLIC	__real@3f2e147b
PUBLIC	__real@3f30a3d7
PUBLIC	__real@3f333333
PUBLIC	__real@3f35c28f
PUBLIC	__real@3f3d70a4
PUBLIC	__real@3f400000
PUBLIC	__real@3f47ae14
PUBLIC	__real@3f4a3d71
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f51eb85
PUBLIC	__real@3f547ae1
PUBLIC	__real@3f59999a
PUBLIC	__real@3f5c28f6
PUBLIC	__real@3f5db22d
PUBLIC	__real@3f5eb852
PUBLIC	__real@3f6147ae
PUBLIC	__real@3f666666
PUBLIC	__real@3f6b851f
PUBLIC	__real@3f70a3d7
PUBLIC	__real@3f733333
PUBLIC	__real@3f75c28f
PUBLIC	__real@3f7ae148
PUBLIC	__real@3f7d70a4
PUBLIC	__real@3f7fffef
PUBLIC	__real@3f800000
PUBLIC	__real@3f8147ae
PUBLIC	__real@3fc90fdb
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@40490fdb
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@40c00000
PUBLIC	__real@40c90fdb
PUBLIC	__real@40e00000
PUBLIC	__real@41000000
PUBLIC	__real@41100000
PUBLIC	__real@41300000
PUBLIC	__real@41400000
PUBLIC	__real@41500000
PUBLIC	__real@41700000
PUBLIC	__real@41800000
PUBLIC	__real@41880000
PUBLIC	__real@41900000
PUBLIC	__real@41980000
PUBLIC	__real@41a80000
PUBLIC	__real@41b00000
PUBLIC	__real@41b80000
PUBLIC	__real@41f80000
PUBLIC	__real@42400000
PUBLIC	__real@425c0000
PUBLIC	__real@42920000
PUBLIC	__real@42b60000
PUBLIC	__real@42c80000
PUBLIC	__real@42da0000
PUBLIC	__real@42f60000
PUBLIC	__real@437f0000
PUBLIC	__real@44333333
PUBLIC	__real@44b33333
PUBLIC	__real@45333333
PUBLIC	__real@46800000
PUBLIC	__real@47800000
PUBLIC	__real@7f7fffff
PUBLIC	__real@bf400000
PUBLIC	__real@bf5db22d
PUBLIC	__real@bf800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp_memchr:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	__imp_memmove:PROC
EXTRN	memset:PROC
EXTRN	strlen:PROC
EXTRN	__imp__wassert:PROC
EXTRN	?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ:PROC	; ImGui::GetStyle
EXTRN	?GetColorU32@ImGui@@YAII@Z:PROC			; ImGui::GetColorU32
EXTRN	?MemAlloc@ImGui@@YAPEAX_K@Z:PROC		; ImGui::MemAlloc
EXTRN	?MemFree@ImGui@@YAXPEAX@Z:PROC			; ImGui::MemFree
EXTRN	__imp_qsort:PROC
EXTRN	fabs:PROC
EXTRN	__imp_acosf:PROC
EXTRN	__imp_ceilf:PROC
EXTRN	__imp_cosf:PROC
EXTRN	__imp_sinf:PROC
EXTRN	__imp_sqrtf:PROC
EXTRN	?ImAlphaBlendColors@@YAIII@Z:PROC		; ImAlphaBlendColors
EXTRN	?ImFormatString@@YAHPEAD_KPEBDZZ:PROC		; ImFormatString
EXTRN	?ImTextCharFromUtf8@@YAHPEAIPEBD1@Z:PROC	; ImTextCharFromUtf8
EXTRN	?ImFileLoadToMemory@@YAPEAXPEBD0PEA_KH@Z:PROC	; ImFileLoadToMemory
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_BSS	SEGMENT
	ALIGN	8

?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A DQ 01bH DUP (?) ; FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA
?io@?1??ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ@4U2@A DQ 01H DUP (?) ; `ImFontAtlasGetBuilderForStbTruetype'::`2'::io
?stb__barrier_out_e@@3PEAEEA DQ 01H DUP (?)		; stb__barrier_out_e
?stb__barrier_out_b@@3PEAEEA DQ 01H DUP (?)		; stb__barrier_out_b
?stb__barrier_in_b@@3PEBEEB DQ 01H DUP (?)		; stb__barrier_in_b
?stb__dout@@3PEAEEA DQ 01H DUP (?)			; stb__dout
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN7
	DD	imagerel $LN7+181
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec2@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??0ImVec2@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec2@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0ImVec2@@QEAA@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec4@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0ImVec4@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec4@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??0ImVec4@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z DD imagerel $LN5
	DD	imagerel $LN5+4120
	DD	imagerel $unwind$?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z DD imagerel $LN5
	DD	imagerel $LN5+4110
	DD	imagerel $unwind$?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z DD imagerel $LN5
	DD	imagerel $LN5+4105
	DD	imagerel $unwind$?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KUImNewWrapper@@PEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??2@YAPEAX_KUImNewWrapper@@PEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??3@YAXPEAXUImNewWrapper@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??3@YAXPEAXUImNewWrapper@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@G@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@G@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$ImVector@G@@QEAAAEAU0@AEBU0@@Z DD imagerel $LN4
	DD	imagerel $LN4+154
	DD	imagerel $unwind$??4?$ImVector@G@@QEAAAEAU0@AEBU0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@G@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@G@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@G@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@G@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?empty@?$ImVector@G@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+91
	DD	imagerel $unwind$?empty@?$ImVector@G@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@G@@QEAAAEAGH@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@G@@QEAAAEAGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@G@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@G@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@G@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+121
	DD	imagerel $unwind$?resize@?$ImVector@G@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@G@@QEAAXHAEBG@Z DD imagerel $LN8
	DD	imagerel $LN8+218
	DD	imagerel $unwind$?resize@?$ImVector@G@@QEAAXHAEBG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?shrink@?$ImVector@G@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+116
	DD	imagerel $unwind$?shrink@?$ImVector@G@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@G@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+195
	DD	imagerel $unwind$?reserve@?$ImVector@G@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@G@@QEAAXAEBG@Z DD imagerel $LN4
	DD	imagerel $LN4+183
	DD	imagerel $unwind$?push_back@?$ImVector@G@@QEAAXAEBG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImDrawCmd@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0ImDrawCmd@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImDrawCmdHeader@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??0ImDrawCmdHeader@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImDrawCmd@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@UImDrawCmd@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$ImVector@UImDrawCmd@@@@QEAAAEAU0@AEBU0@@Z DD imagerel $LN4
	DD	imagerel $LN4+155
	DD	imagerel $unwind$??4?$ImVector@UImDrawCmd@@@@QEAAAEAU0@AEBU0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImDrawCmd@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@UImDrawCmd@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+121
	DD	imagerel $unwind$?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z DD imagerel $LN4
	DD	imagerel $LN4+183
	DD	imagerel $unwind$?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$ImVector@UImDrawCmd@@@@QEAAPEAUImDrawCmd@@PEBU2@@Z DD imagerel $LN5
	DD	imagerel $LN5+300
	DD	imagerel $unwind$?erase@?$ImVector@UImDrawCmd@@@@QEAAPEAUImDrawCmd@@PEBU2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImDrawChannel@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+106
	DD	imagerel $unwind$??0ImDrawChannel@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ImDrawChannel@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0ImDrawChannel@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0ImDrawChannel@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0ImDrawChannel@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImDrawChannel@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@UImDrawChannel@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImDrawChannel@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@UImDrawChannel@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+121
	DD	imagerel $unwind$?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImDrawListSplitter@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+98
	DD	imagerel $unwind$??0ImDrawListSplitter@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Clear@ImDrawListSplitter@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?Clear@ImDrawListSplitter@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+251
	DD	imagerel $unwind$?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z DD imagerel $LN14
	DD	imagerel $LN14+539
	DD	imagerel $unwind$?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4HA DD imagerel ?dtor$0@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4HA
	DD	imagerel ?dtor$0@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4HA+56
	DD	imagerel $unwind$?dtor$0@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z DD imagerel $LN28
	DD	imagerel $LN28+1373
	DD	imagerel $unwind$?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z DD imagerel $LN13
	DD	imagerel $LN13+586
	DD	imagerel $unwind$?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImDrawVert@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@UImDrawVert@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$ImVector@UImDrawVert@@@@QEAAAEAU0@AEBU0@@Z DD imagerel $LN4
	DD	imagerel $LN4+155
	DD	imagerel $unwind$??4?$ImVector@UImDrawVert@@@@QEAAAEAU0@AEBU0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImDrawVert@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@UImDrawVert@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?swap@?$ImVector@UImDrawVert@@@@QEAAXAEAU1@@Z DD imagerel $LN3
	DD	imagerel $LN3+195
	DD	imagerel $unwind$?swap@?$ImVector@UImDrawVert@@@@QEAAXAEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImDrawVert@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImDrawVert@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+121
	DD	imagerel $unwind$?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?shrink@?$ImVector@UImDrawVert@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+116
	DD	imagerel $unwind$?shrink@?$ImVector@UImDrawVert@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImDrawVert@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@UImDrawVert@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImVec4@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@UImVec4@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImVec4@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@UImVec4@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImVec4@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@UImVec4@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImVec4@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImVec4@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImVec4@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+121
	DD	imagerel $unwind$?resize@?$ImVector@UImVec4@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@UImVec4@@@@QEAAXAEBUImVec4@@@Z DD imagerel $LN4
	DD	imagerel $LN4+183
	DD	imagerel $unwind$?push_back@?$ImVector@UImVec4@@@@QEAAXAEBUImVec4@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pop_back@?$ImVector@UImVec4@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?pop_back@?$ImVector@UImVec4@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@PEAX@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@PEAX@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@PEAX@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@PEAX@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@PEAX@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@PEAX@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@PEAX@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@PEAX@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@PEAX@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+121
	DD	imagerel $unwind$?resize@?$ImVector@PEAX@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@PEAX@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@PEAX@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@PEAX@@QEAAXAEBQEAX@Z DD imagerel $LN4
	DD	imagerel $LN4+183
	DD	imagerel $unwind$?push_back@?$ImVector@PEAX@@QEAAXAEBQEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pop_back@?$ImVector@PEAX@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?pop_back@?$ImVector@PEAX@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImVec2@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@UImVec2@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImVec2@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@UImVec2@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImVec2@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@UImVec2@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImVec2@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+121
	DD	imagerel $unwind$?resize@?$ImVector@UImVec2@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve_discard@?$ImVector@UImVec2@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+152
	DD	imagerel $unwind$?reserve_discard@?$ImVector@UImVec2@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z DD imagerel $LN4
	DD	imagerel $LN4+183
	DD	imagerel $unwind$?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z DD imagerel $LN10
	DD	imagerel $LN10+271
	DD	imagerel $unwind$??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA DD imagerel ?dtor$0@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA
	DD	imagerel ?dtor$0@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA DD imagerel ?dtor$1@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA
	DD	imagerel ?dtor$1@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA+43
	DD	imagerel $unwind$?dtor$1@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA DD imagerel ?dtor$2@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA
	DD	imagerel ?dtor$2@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA+43
	DD	imagerel $unwind$?dtor$2@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA DD imagerel ?dtor$3@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA
	DD	imagerel ?dtor$3@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA+43
	DD	imagerel $unwind$?dtor$3@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$4@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA DD imagerel ?dtor$4@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA
	DD	imagerel ?dtor$4@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA+43
	DD	imagerel $unwind$?dtor$4@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$5@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA DD imagerel ?dtor$5@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA
	DD	imagerel ?dtor$5@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA+43
	DD	imagerel $unwind$?dtor$5@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z DD imagerel $LN8
	DD	imagerel $LN8+404
	DD	imagerel $unwind$?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PushClipRectFullScreen@ImDrawList@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+175
	DD	imagerel $unwind$?PushClipRectFullScreen@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PopClipRect@ImDrawList@@QEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+200
	DD	imagerel $unwind$?PopClipRect@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PushTextureID@ImDrawList@@QEAAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$?PushTextureID@ImDrawList@@QEAAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PopTextureID@ImDrawList@@QEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+166
	DD	imagerel $unwind$?PopTextureID@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z DD imagerel $LN4
	DD	imagerel $LN4+246
	DD	imagerel $unwind$?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z DD imagerel $LN6
	DD	imagerel $LN6+445
	DD	imagerel $unwind$?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z DD imagerel $LN7
	DD	imagerel $LN7+242
	DD	imagerel $unwind$?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z DD imagerel $LN4
	DD	imagerel $LN4+537
	DD	imagerel $unwind$?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddQuad@ImDrawList@@QEAAXAEBUImVec2@@000IM@Z DD imagerel $LN4
	DD	imagerel $LN4+192
	DD	imagerel $unwind$?AddQuad@ImDrawList@@QEAAXAEBUImVec2@@000IM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddQuadFilled@ImDrawList@@QEAAXAEBUImVec2@@000I@Z DD imagerel $LN4
	DD	imagerel $LN4+178
	DD	imagerel $unwind$?AddQuadFilled@ImDrawList@@QEAAXAEBUImVec2@@000I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z DD imagerel $LN4
	DD	imagerel $LN4+173
	DD	imagerel $unwind$?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z DD imagerel $LN4
	DD	imagerel $LN4+159
	DD	imagerel $unwind$?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z DD imagerel $LN7
	DD	imagerel $LN7+370
	DD	imagerel $unwind$?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z DD imagerel $LN7
	DD	imagerel $LN7+334
	DD	imagerel $unwind$?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z DD imagerel $LN5
	DD	imagerel $LN5+241
	DD	imagerel $unwind$?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z DD imagerel $LN5
	DD	imagerel $LN5+213
	DD	imagerel $unwind$?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z DD imagerel $LN12
	DD	imagerel $LN12+614
	DD	imagerel $unwind$?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z DD imagerel $LN78
	DD	imagerel $LN78+8529
	DD	imagerel $unwind$?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z DD imagerel $LN25
	DD	imagerel $LN25+2464
	DD	imagerel $unwind$?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z DD imagerel $LN4
	DD	imagerel $LN4+175
	DD	imagerel $unwind$?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z DD imagerel $LN4
	DD	imagerel $LN4+165
	DD	imagerel $unwind$?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z DD imagerel $LN8
	DD	imagerel $LN8+261
	DD	imagerel $unwind$?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddImageQuad@ImDrawList@@QEAAXPEAXAEBUImVec2@@1111111I@Z DD imagerel $LN8
	DD	imagerel $LN8+309
	DD	imagerel $unwind$?AddImageQuad@ImDrawList@@QEAAXPEAXAEBUImVec2@@1111111I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddImageRounded@ImDrawList@@QEAAXPEAXAEBUImVec2@@111IMH@Z DD imagerel $LN10
	DD	imagerel $LN10+462
	DD	imagerel $unwind$?AddImageRounded@ImDrawList@@QEAAXPEAXAEBUImVec2@@111IMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathFillConvex@ImDrawList@@QEAAXI@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$?PathFillConvex@ImDrawList@@QEAAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathStroke@ImDrawList@@QEAAXIHM@Z DD imagerel $LN3
	DD	imagerel $LN3+149
	DD	imagerel $unwind$?PathStroke@ImDrawList@@QEAAXIHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z DD imagerel $LN26
	DD	imagerel $LN26+1391
	DD	imagerel $unwind$?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z DD imagerel $LN4
	DD	imagerel $LN4+199
	DD	imagerel $unwind$?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z DD imagerel $LN9
	DD	imagerel $LN9+515
	DD	imagerel $unwind$?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z DD imagerel $LN9
	DD	imagerel $LN9+468
	DD	imagerel $unwind$?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z DD imagerel $LN18
	DD	imagerel $LN18+1082
	DD	imagerel $unwind$?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddCallback@ImDrawList@@QEAAXP6AXPEBU1@PEBUImDrawCmd@@@ZPEAX@Z DD imagerel $LN5
	DD	imagerel $LN5+235
	DD	imagerel $unwind$?AddCallback@ImDrawList@@QEAAXP6AXPEBU1@PEBUImDrawCmd@@@ZPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddDrawCmd@ImDrawList@@QEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+261
	DD	imagerel $unwind$?AddDrawCmd@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CloneOutput@ImDrawList@@QEBAPEAU1@XZ DD imagerel $LN6
	DD	imagerel $LN6+300
	DD	imagerel $unwind$?CloneOutput@ImDrawList@@QEBAPEAU1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??CloneOutput@ImDrawList@@QEBAPEAU1@XZ@4HA DD imagerel ?dtor$0@?0??CloneOutput@ImDrawList@@QEBAPEAU1@XZ@4HA
	DD	imagerel ?dtor$0@?0??CloneOutput@ImDrawList@@QEBAPEAU1@XZ@4HA+56
	DD	imagerel $unwind$?dtor$0@?0??CloneOutput@ImDrawList@@QEBAPEAU1@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PrimReserve@ImDrawList@@QEAAXHH@Z DD imagerel $LN4
	DD	imagerel $LN4+343
	DD	imagerel $unwind$?PrimReserve@ImDrawList@@QEAAXHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PrimUnreserve@ImDrawList@@QEAAXHH@Z DD imagerel $LN3
	DD	imagerel $LN3+187
	DD	imagerel $unwind$?PrimUnreserve@ImDrawList@@QEAAXHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z DD imagerel $LN3
	DD	imagerel $LN3+826
	DD	imagerel $unwind$?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z DD imagerel $LN3
	DD	imagerel $LN3+905
	DD	imagerel $unwind$?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z DD imagerel $LN3
	DD	imagerel $LN3+730
	DD	imagerel $unwind$?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z DD imagerel $LN3
	DD	imagerel $LN3+182
	DD	imagerel $unwind$?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PrimWriteIdx@ImDrawList@@QEAAXG@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$?PrimWriteIdx@ImDrawList@@QEAAXG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_ResetForNewFrame@ImDrawList@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+342
	DD	imagerel $unwind$?_ResetForNewFrame@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_ClearFreeMemory@ImDrawList@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+241
	DD	imagerel $unwind$?_ClearFreeMemory@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+136
	DD	imagerel $unwind$?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+200
	DD	imagerel $unwind$?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_OnChangedClipRect@ImDrawList@@QEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+338
	DD	imagerel $unwind$?_OnChangedClipRect@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_OnChangedTextureID@ImDrawList@@QEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+322
	DD	imagerel $unwind$?_OnChangedTextureID@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+187
	DD	imagerel $unwind$?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z DD imagerel $LN5
	DD	imagerel $LN5+224
	DD	imagerel $unwind$?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z DD imagerel $LN23
	DD	imagerel $LN23+1278
	DD	imagerel $unwind$?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z DD imagerel $LN7
	DD	imagerel $LN7+377
	DD	imagerel $unwind$?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DeIndexAllBuffers@ImDrawData@@QEAAXXZ DD imagerel $LN11
	DD	imagerel $LN11+437
	DD	imagerel $unwind$?DeIndexAllBuffers@ImDrawData@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??DeIndexAllBuffers@ImDrawData@@QEAAXXZ@4HA DD imagerel ?dtor$0@?0??DeIndexAllBuffers@ImDrawData@@QEAAXXZ@4HA
	DD	imagerel ?dtor$0@?0??DeIndexAllBuffers@ImDrawData@@QEAAXXZ@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??DeIndexAllBuffers@ImDrawData@@QEAAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ScaleClipRects@ImDrawData@@QEAAXAEBUImVec2@@@Z DD imagerel $LN9
	DD	imagerel $LN9+314
	DD	imagerel $unwind$?ScaleClipRects@ImDrawData@@QEAAXAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImFontConfig@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+212
	DD	imagerel $unwind$??0ImFontConfig@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@I@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@I@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@I@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@I@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?empty@?$ImVector@I@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+91
	DD	imagerel $unwind$?empty@?$ImVector@I@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@I@@QEAAAEAIH@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@I@@QEAAAEAIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@I@@QEBAAEBIH@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@I@@QEBAAEBIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?begin@?$ImVector@I@@QEBAPEBIXZ DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$?begin@?$ImVector@I@@QEBAPEBIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?end@?$ImVector@I@@QEBAPEBIXZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$?end@?$ImVector@I@@QEBAPEBIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@I@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@I@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@I@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+121
	DD	imagerel $unwind$?resize@?$ImVector@I@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@I@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@I@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z DD imagerel $LN5
	DD	imagerel $LN5+165
	DD	imagerel $unwind$?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetBit@ImFontGlyphRangesBuilder@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+155
	DD	imagerel $unwind$?SetBit@ImFontGlyphRangesBuilder@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z DD imagerel $LN10
	DD	imagerel $LN10+283
	DD	imagerel $unwind$?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddRanges@ImFontGlyphRangesBuilder@@QEAAXPEBG@Z DD imagerel $LN9
	DD	imagerel $LN9+191
	DD	imagerel $unwind$?AddRanges@ImFontGlyphRangesBuilder@@QEAAXPEBG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BuildRanges@ImFontGlyphRangesBuilder@@QEAAXPEAU?$ImVector@G@@@Z DD imagerel $LN9
	DD	imagerel $LN9+261
	DD	imagerel $unwind$?BuildRanges@ImFontGlyphRangesBuilder@@QEAAXPEAU?$ImVector@G@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImFontAtlasCustomRect@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+211
	DD	imagerel $unwind$??0ImFontAtlasCustomRect@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+97
	DD	imagerel $unwind$?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImFontAtlas@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+275
	DD	imagerel $unwind$??0ImFontAtlas@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ImFontAtlas@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0ImFontAtlas@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0ImFontAtlas@@QEAA@XZ@4HA+43
	DD	imagerel $unwind$?dtor$0@?0???0ImFontAtlas@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0ImFontAtlas@@QEAA@XZ@4HA DD imagerel ?dtor$1@?0???0ImFontAtlas@@QEAA@XZ@4HA
	DD	imagerel ?dtor$1@?0???0ImFontAtlas@@QEAA@XZ@4HA+43
	DD	imagerel $unwind$?dtor$1@?0???0ImFontAtlas@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0???0ImFontAtlas@@QEAA@XZ@4HA DD imagerel ?dtor$2@?0???0ImFontAtlas@@QEAA@XZ@4HA
	DD	imagerel ?dtor$2@?0???0ImFontAtlas@@QEAA@XZ@4HA+43
	DD	imagerel $unwind$?dtor$2@?0???0ImFontAtlas@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ImFontAtlas@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$??1ImFontAtlas@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z DD imagerel $LN18
	DD	imagerel $LN18+751
	DD	imagerel $unwind$?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4HA DD imagerel ?dtor$0@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4HA
	DD	imagerel ?dtor$0@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4HA+56
	DD	imagerel $unwind$?dtor$0@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z DD imagerel $LN10
	DD	imagerel $LN10+482
	DD	imagerel $unwind$?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z DD imagerel $LN13
	DD	imagerel $LN13+618
	DD	imagerel $unwind$?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z DD imagerel $LN11
	DD	imagerel $LN11+447
	DD	imagerel $unwind$?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z DD imagerel $LN6
	DD	imagerel $LN6+374
	DD	imagerel $unwind$?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z DD imagerel $LN3
	DD	imagerel $LN3+198
	DD	imagerel $unwind$?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearInputData@ImFontAtlas@@QEAAXXZ DD imagerel $LN13
	DD	imagerel $LN13+551
	DD	imagerel $unwind$?ClearInputData@ImFontAtlas@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearTexData@ImFontAtlas@@QEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+213
	DD	imagerel $unwind$?ClearTexData@ImFontAtlas@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearFonts@ImFontAtlas@@QEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+142
	DD	imagerel $unwind$?ClearFonts@ImFontAtlas@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Clear@ImFontAtlas@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$?Clear@ImFontAtlas@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Build@ImFontAtlas@@QEAA_NXZ DD imagerel $LN7
	DD	imagerel $LN7+186
	DD	imagerel $unwind$?Build@ImFontAtlas@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z DD imagerel $LN7
	DD	imagerel $LN7+195
	DD	imagerel $unwind$?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z DD imagerel $LN11
	DD	imagerel $LN11+453
	DD	imagerel $unwind$?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetGlyphRangesGreek@ImFontAtlas@@QEAAPEBGXZ DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?GetGlyphRangesGreek@ImFontAtlas@@QEAAPEBGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ DD imagerel $LN4
	DD	imagerel $LN4+160
	DD	imagerel $unwind$?GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ DD imagerel $LN4
	DD	imagerel $LN4+160
	DD	imagerel $unwind$?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z DD imagerel $LN7
	DD	imagerel $LN7+288
	DD	imagerel $unwind$?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z DD imagerel $LN8
	DD	imagerel $LN8+388
	DD	imagerel $unwind$?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z DD imagerel $LN4
	DD	imagerel $LN4+118
	DD	imagerel $unwind$?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z DD imagerel $LN6
	DD	imagerel $LN6+368
	DD	imagerel $unwind$?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z DD imagerel $LN7
	DD	imagerel $LN7+737
	DD	imagerel $unwind$?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@PEAUImFont@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@PEAUImFont@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@PEAUImFont@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@PEAUImFont@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@PEAUImFont@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@PEAUImFont@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear_delete@?$ImVector@PEAUImFont@@@@QEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+121
	DD	imagerel $unwind$?clear_delete@?$ImVector@PEAUImFont@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?empty@?$ImVector@PEAUImFont@@@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+91
	DD	imagerel $unwind$?empty@?$ImVector@PEAUImFont@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@XZ DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$?back@?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@PEAUImFont@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@PEAUImFont@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@PEAUImFont@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@PEAUImFont@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@PEAUImFont@@@@QEAAXAEBQEAUImFont@@@Z DD imagerel $LN4
	DD	imagerel $LN4+183
	DD	imagerel $unwind$?push_back@?$ImVector@PEAUImFont@@@@QEAAXAEBQEAUImFont@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImFontAtlasCustomRect@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImFontAtlasCustomRect@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXAEBUImFontAtlasCustomRect@@@Z DD imagerel $LN4
	DD	imagerel $LN4+183
	DD	imagerel $unwind$?push_back@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXAEBUImFontAtlasCustomRect@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImFontConfig@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@UImFontConfig@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImFontConfig@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@UImFontConfig@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImFontConfig@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@UImFontConfig@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+135
	DD	imagerel $unwind$??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@XZ DD imagerel $LN4
	DD	imagerel $LN4+123
	DD	imagerel $unwind$?back@?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImFontConfig@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImFontConfig@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImFontConfig@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+203
	DD	imagerel $unwind$?reserve@?$ImVector@UImFontConfig@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@UImFontConfig@@@@QEAAXAEBUImFontConfig@@@Z DD imagerel $LN4
	DD	imagerel $LN4+186
	DD	imagerel $unwind$?push_back@?$ImVector@UImFontConfig@@@@QEAAXAEBUImFontConfig@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@M@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@M@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@M@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@M@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@M@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@M@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@M@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@M@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@M@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@M@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@M@@QEAAXHAEBM@Z DD imagerel $LN8
	DD	imagerel $LN8+218
	DD	imagerel $unwind$?resize@?$ImVector@M@@QEAAXHAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@M@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@M@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImFontGlyph@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@UImFontGlyph@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImFontGlyph@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@UImFontGlyph@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImFontGlyph@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@UImFontGlyph@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImFontGlyph@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImFontGlyph@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImFontGlyph@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+121
	DD	imagerel $unwind$?resize@?$ImVector@UImFontGlyph@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImFontGlyph@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@UImFontGlyph@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImFont@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+391
	DD	imagerel $unwind$??0ImFont@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ImFont@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0ImFont@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0ImFont@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0ImFont@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0ImFont@@QEAA@XZ@4HA DD imagerel ?dtor$1@?0???0ImFont@@QEAA@XZ@4HA
	DD	imagerel ?dtor$1@?0???0ImFont@@QEAA@XZ@4HA+43
	DD	imagerel $unwind$?dtor$1@?0???0ImFont@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ImFont@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+132
	DD	imagerel $unwind$??1ImFont@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z DD imagerel $LN5
	DD	imagerel $LN5+142
	DD	imagerel $unwind$?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IsLoaded@ImFont@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+93
	DD	imagerel $unwind$?IsLoaded@ImFont@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z DD imagerel $LN27
	DD	imagerel $LN27+955
	DD	imagerel $unwind$?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z DD imagerel $LN27
	DD	imagerel $LN27+993
	DD	imagerel $unwind$?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderChar@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IG@Z DD imagerel $LN8
	DD	imagerel $LN8+560
	DD	imagerel $unwind$?RenderChar@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderText@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IAEBUImVec4@@PEBD3M_N@Z DD imagerel $LN46
	DD	imagerel $LN46+3520
	DD	imagerel $unwind$?RenderText@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IAEBUImVec4@@PEBD3M_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BuildLookupTable@ImFont@@QEAAXXZ DD imagerel $LN22
	DD	imagerel $LN22+1715
	DD	imagerel $unwind$?BuildLookupTable@ImFont@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearOutputData@ImFont@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+220
	DD	imagerel $unwind$?ClearOutputData@ImFont@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GrowIndex@ImFont@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+218
	DD	imagerel $unwind$?GrowIndex@ImFont@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z DD imagerel $LN13
	DD	imagerel $LN13+873
	DD	imagerel $unwind$?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddRemapChar@ImFont@@QEAAXGG_N@Z DD imagerel $LN10
	DD	imagerel $LN10+420
	DD	imagerel $unwind$?AddRemapChar@ImFont@@QEAAXGG_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetGlyphVisible@ImFont@@QEAAXG_N@Z DD imagerel $LN6
	DD	imagerel $LN6+155
	DD	imagerel $unwind$?SetGlyphVisible@ImFont@@QEAAXG_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IsGlyphRangeUnused@ImFont@@QEAA_NII@Z DD imagerel $LN8
	DD	imagerel $LN8+182
	DD	imagerel $unwind$?IsGlyphRangeUnused@ImFont@@QEAA_NII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GImFont@@QEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_GImFont@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fabsf DD	imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$fabsf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImQsort@@YAXPEAX_K1P6AHPEBX2@Z@Z DD imagerel ?ImQsort@@YAXPEAX_K1P6AHPEBX2@Z@Z
	DD	imagerel ?ImQsort@@YAXPEAX_K1P6AHPEBX2@Z@Z+111
	DD	imagerel $unwind$?ImQsort@@YAXPEAX_K1P6AHPEBX2@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImUpperPowerOfTwo@@YAHH@Z DD imagerel ?ImUpperPowerOfTwo@@YAHH@Z
	DD	imagerel ?ImUpperPowerOfTwo@@YAHH@Z+206
	DD	imagerel $unwind$?ImUpperPowerOfTwo@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImCharIsBlankA@@YA_ND@Z DD imagerel ?ImCharIsBlankA@@YA_ND@Z
	DD	imagerel ?ImCharIsBlankA@@YA_ND@Z+56
	DD	imagerel $unwind$?ImCharIsBlankA@@YA_ND@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImCharIsBlankW@@YA_NI@Z DD imagerel ?ImCharIsBlankW@@YA_NI@Z
	DD	imagerel ?ImCharIsBlankW@@YA_NI@Z+59
	DD	imagerel $unwind$?ImCharIsBlankW@@YA_NI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D@YA?AUImVec2@@AEBU0@M@Z DD imagerel ??D@YA?AUImVec2@@AEBU0@M@Z
	DD	imagerel ??D@YA?AUImVec2@@AEBU0@M@Z+75
	DD	imagerel $unwind$??D@YA?AUImVec2@@AEBU0@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??H@YA?AUImVec2@@AEBU0@0@Z DD imagerel ??H@YA?AUImVec2@@AEBU0@0@Z
	DD	imagerel ??H@YA?AUImVec2@@AEBU0@0@Z+81
	DD	imagerel $unwind$??H@YA?AUImVec2@@AEBU0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??G@YA?AUImVec2@@AEBU0@0@Z DD imagerel ??G@YA?AUImVec2@@AEBU0@0@Z
	DD	imagerel ??G@YA?AUImVec2@@AEBU0@0@Z+81
	DD	imagerel $unwind$??G@YA?AUImVec2@@AEBU0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D@YA?AUImVec2@@AEBU0@0@Z DD imagerel ??D@YA?AUImVec2@@AEBU0@0@Z
	DD	imagerel ??D@YA?AUImVec2@@AEBU0@0@Z+81
	DD	imagerel $unwind$??D@YA?AUImVec2@@AEBU0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z DD imagerel ??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z
	DD	imagerel ??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z+79
	DD	imagerel $unwind$??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImAbs@@YAHH@Z DD imagerel ?ImAbs@@YAHH@Z
	DD	imagerel ?ImAbs@@YAHH@Z+43
	DD	imagerel $unwind$?ImAbs@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImAbs@@YAMM@Z DD imagerel ?ImAbs@@YAMM@Z
	DD	imagerel ?ImAbs@@YAMM@Z+32
	DD	imagerel $unwind$?ImAbs@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImRsqrt@@YAMM@Z DD imagerel ?ImRsqrt@@YAMM@Z
	DD	imagerel ?ImRsqrt@@YAMM@Z+68
	DD	imagerel $unwind$?ImRsqrt@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImMin@@YA?AUImVec2@@AEBU1@0@Z DD imagerel ?ImMin@@YA?AUImVec2@@AEBU1@0@Z
	DD	imagerel ?ImMin@@YA?AUImVec2@@AEBU1@0@Z+148
	DD	imagerel $unwind$?ImMin@@YA?AUImVec2@@AEBU1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImMax@@YA?AUImVec2@@AEBU1@0@Z DD imagerel ?ImMax@@YA?AUImVec2@@AEBU1@0@Z
	DD	imagerel ?ImMax@@YA?AUImVec2@@AEBU1@0@Z+148
	DD	imagerel $unwind$?ImMax@@YA?AUImVec2@@AEBU1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z DD imagerel ?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z
	DD	imagerel ?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z+226
	DD	imagerel $unwind$?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z DD imagerel ?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z
	DD	imagerel ?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z+228
	DD	imagerel $unwind$?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImLengthSqr@@YAMAEBUImVec2@@@Z DD imagerel ?ImLengthSqr@@YAMAEBUImVec2@@@Z
	DD	imagerel ?ImLengthSqr@@YAMAEBUImVec2@@@Z+57
	DD	imagerel $unwind$?ImLengthSqr@@YAMAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFloor@@YAMM@Z DD imagerel ?ImFloor@@YAMM@Z
	DD	imagerel ?ImFloor@@YAMM@Z+29
	DD	imagerel $unwind$?ImFloor@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFloorSigned@@YAMM@Z DD imagerel ?ImFloorSigned@@YAMM@Z
	DD	imagerel ?ImFloorSigned@@YAMM@Z+76
	DD	imagerel $unwind$?ImFloorSigned@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImDot@@YAMAEBUImVec2@@0@Z DD imagerel ?ImDot@@YAMAEBUImVec2@@0@Z
	DD	imagerel ?ImDot@@YAMAEBUImVec2@@0@Z+62
	DD	imagerel $unwind$?ImDot@@YAMAEBUImVec2@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImMin@M@@YAMMM@Z DD imagerel ??$ImMin@M@@YAMMM@Z
	DD	imagerel ??$ImMin@M@@YAMMM@Z+110
	DD	imagerel $unwind$??$ImMin@M@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImMax@M@@YAMMM@Z DD imagerel ??$ImMax@M@@YAMMM@Z
	DD	imagerel ??$ImMax@M@@YAMMM@Z+110
	DD	imagerel $unwind$??$ImMax@M@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImMul@@YA?AUImVec2@@AEBU1@0@Z DD imagerel ?ImMul@@YA?AUImVec2@@AEBU1@0@Z
	DD	imagerel ?ImMul@@YA?AUImVec2@@AEBU1@0@Z+81
	DD	imagerel $unwind$?ImMul@@YA?AUImVec2@@AEBU1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImBezierCubicCalc@@YA?AUImVec2@@AEBU1@000M@Z DD imagerel $LN3
	DD	imagerel $LN3+389
	DD	imagerel $unwind$?ImBezierCubicCalc@@YA?AUImVec2@@AEBU1@000M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImBezierQuadraticCalc@@YA?AUImVec2@@AEBU1@00M@Z DD imagerel $LN3
	DD	imagerel $LN3+287
	DD	imagerel $unwind$?ImBezierQuadraticCalc@@YA?AUImVec2@@AEBU1@00M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImBitArraySetBit@@YAXPEAIH@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$?ImBitArraySetBit@@YAXPEAIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Create@ImBitVector@@QEAAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?Create@ImBitVector@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Clear@ImBitVector@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$?Clear@ImBitVector@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TestBit@ImBitVector@@QEBA_NH@Z DD imagerel $LN6
	DD	imagerel $LN6+142
	DD	imagerel $unwind$?TestBit@ImBitVector@@QEBA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetBit@ImBitVector@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+83
	DD	imagerel $unwind$?SetBit@ImBitVector@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ImBitVector@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??1ImBitVector@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@H@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@H@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@H@@QEAAAEAHH@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@H@@QEAAAEAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@H@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@H@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@H@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@H@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@H@@QEAAXAEBH@Z DD imagerel $LN4
	DD	imagerel $LN4+183
	DD	imagerel $unwind$?push_back@?$ImVector@H@@QEAAXAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImDrawListSharedData@@QEAA@XZ DD imagerel $LN7
	DD	imagerel $LN7+406
	DD	imagerel $unwind$??0ImDrawListSharedData@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ImDrawListSharedData@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0ImDrawListSharedData@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0ImDrawListSharedData@@QEAA@XZ@4HA+43
	DD	imagerel $unwind$?dtor$0@?0???0ImDrawListSharedData@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z DD imagerel $LN10
	DD	imagerel $LN10+439
	DD	imagerel $unwind$?SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z DD imagerel $LN22
	DD	imagerel $LN22+1019
	DD	imagerel $unwind$?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z DD imagerel $LN12
	DD	imagerel $LN12+916
	DD	imagerel $unwind$?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderCheckMark@ImGui@@YAXPEAUImDrawList@@UImVec2@@IM@Z DD imagerel $LN3
	DD	imagerel $LN3+464
	DD	imagerel $unwind$?RenderCheckMark@ImGui@@YAXPEAUImDrawList@@UImVec2@@IM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z DD imagerel $LN10
	DD	imagerel $LN10+719
	DD	imagerel $unwind$?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z DD imagerel $LN15
	DD	imagerel $LN15+1948
	DD	imagerel $unwind$?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderRectFilledWithHole@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@1IM@Z DD imagerel $LN35
	DD	imagerel $LN35+1805
	DD	imagerel $unwind$?RenderRectFilledWithHole@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@1IM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z DD imagerel $LN6
	DD	imagerel $LN6+661
	DD	imagerel $unwind$?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z DD imagerel $LN17
	DD	imagerel $LN17+767
	DD	imagerel $unwind$?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$?ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildInit@@YAXPEAUImFontAtlas@@@Z DD imagerel $LN8
	DD	imagerel $LN8+226
	DD	imagerel $unwind$?ImFontAtlasBuildInit@@YAXPEAUImFontAtlas@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildSetupFont@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontConfig@@MM@Z DD imagerel $LN4
	DD	imagerel $LN4+233
	DD	imagerel $unwind$?ImFontAtlasBuildSetupFont@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontConfig@@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z DD imagerel $LN15
	DD	imagerel $LN15+820
	DD	imagerel $unwind$?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4HA DD imagerel ?dtor$0@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4HA
	DD	imagerel ?dtor$0@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z DD imagerel $LN14
	DD	imagerel $LN14+673
	DD	imagerel $unwind$?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z DD imagerel $LN15
	DD	imagerel $LN15+444
	DD	imagerel $unwind$?ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z DD imagerel $LN15
	DD	imagerel $LN15+439
	DD	imagerel $unwind$?ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildMultiplyCalcLookupTable@@YAXQEAEM@Z DD imagerel $LN8
	DD	imagerel $LN8+163
	DD	imagerel $unwind$?ImFontAtlasBuildMultiplyCalcLookupTable@@YAXQEAEM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildMultiplyRectAlpha8@@YAXQEBEPEAEHHHHH@Z DD imagerel $LN9
	DD	imagerel $LN9+229
	DD	imagerel $unwind$?ImFontAtlasBuildMultiplyRectAlpha8@@YAXQEBEPEAEHHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbrp_pack_rects DD imagerel stbrp_pack_rects
	DD	imagerel stbrp_pack_rects+713
	DD	imagerel $unwind$stbrp_pack_rects
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbrp_init_target DD imagerel stbrp_init_target
	DD	imagerel stbrp_init_target+485
	DD	imagerel $unwind$stbrp_init_target
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbrp_setup_allow_out_of_mem DD imagerel stbrp_setup_allow_out_of_mem
	DD	imagerel stbrp_setup_allow_out_of_mem+123
	DD	imagerel $unwind$stbrp_setup_allow_out_of_mem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z DD imagerel ?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z
	DD	imagerel ?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z+593
	DD	imagerel $unwind$?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z DD imagerel ?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z
	DD	imagerel ?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z+1293
	DD	imagerel $unwind$?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z DD imagerel ?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z
	DD	imagerel ?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z+889
	DD	imagerel $unwind$?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?rect_height_compare@@YAHPEBX0@Z DD imagerel ?rect_height_compare@@YAHPEBX0@Z
	DD	imagerel ?rect_height_compare@@YAHPEBX0@Z+207
	DD	imagerel $unwind$?rect_height_compare@@YAHPEBX0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?rect_original_order@@YAHPEBX0@Z DD imagerel ?rect_original_order@@YAHPEBX0@Z
	DD	imagerel ?rect_original_order@@YAHPEBX0@Z+161
	DD	imagerel $unwind$?rect_original_order@@YAHPEBX0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_PackBegin DD imagerel stbtt_PackBegin
	DD	imagerel stbtt_PackBegin+483
	DD	imagerel $unwind$stbtt_PackBegin
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_PackEnd DD imagerel stbtt_PackEnd
	DD	imagerel stbtt_PackEnd+84
	DD	imagerel $unwind$stbtt_PackEnd
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_GetPackedQuad DD imagerel stbtt_GetPackedQuad
	DD	imagerel stbtt_GetPackedQuad+642
	DD	imagerel $unwind$stbtt_GetPackedQuad
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_PackFontRangesRenderIntoRects DD imagerel stbtt_PackFontRangesRenderIntoRects
	DD	imagerel stbtt_PackFontRangesRenderIntoRects+2125
	DD	imagerel $unwind$stbtt_PackFontRangesRenderIntoRects
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_GetFontOffsetForIndex DD imagerel stbtt_GetFontOffsetForIndex
	DD	imagerel stbtt_GetFontOffsetForIndex+74
	DD	imagerel $unwind$stbtt_GetFontOffsetForIndex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_InitFont DD imagerel stbtt_InitFont
	DD	imagerel stbtt_InitFont+88
	DD	imagerel $unwind$stbtt_InitFont
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_FindGlyphIndex DD imagerel stbtt_FindGlyphIndex
	DD	imagerel stbtt_FindGlyphIndex+1684
	DD	imagerel $unwind$stbtt_FindGlyphIndex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_ScaleForPixelHeight DD imagerel stbtt_ScaleForPixelHeight
	DD	imagerel stbtt_ScaleForPixelHeight+166
	DD	imagerel $unwind$stbtt_ScaleForPixelHeight
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_ScaleForMappingEmToPixels DD imagerel stbtt_ScaleForMappingEmToPixels
	DD	imagerel stbtt_ScaleForMappingEmToPixels+119
	DD	imagerel $unwind$stbtt_ScaleForMappingEmToPixels
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_GetFontVMetrics DD imagerel stbtt_GetFontVMetrics
	DD	imagerel stbtt_GetFontVMetrics+232
	DD	imagerel $unwind$stbtt_GetFontVMetrics
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_GetGlyphHMetrics DD imagerel stbtt_GetGlyphHMetrics
	DD	imagerel stbtt_GetGlyphHMetrics+434
	DD	imagerel $unwind$stbtt_GetGlyphHMetrics
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_GetGlyphBox DD imagerel stbtt_GetGlyphBox
	DD	imagerel stbtt_GetGlyphBox+371
	DD	imagerel $unwind$stbtt_GetGlyphBox
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_GetGlyphShape DD imagerel stbtt_GetGlyphShape
	DD	imagerel stbtt_GetGlyphShape+128
	DD	imagerel $unwind$stbtt_GetGlyphShape
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_MakeGlyphBitmapSubpixel DD imagerel stbtt_MakeGlyphBitmapSubpixel
	DD	imagerel stbtt_MakeGlyphBitmapSubpixel+440
	DD	imagerel $unwind$stbtt_MakeGlyphBitmapSubpixel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_GetGlyphBitmapBox DD imagerel stbtt_GetGlyphBitmapBox
	DD	imagerel stbtt_GetGlyphBitmapBox+168
	DD	imagerel $unwind$stbtt_GetGlyphBitmapBox
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_GetGlyphBitmapBoxSubpixel DD imagerel stbtt_GetGlyphBitmapBoxSubpixel
	DD	imagerel stbtt_GetGlyphBitmapBoxSubpixel+481
	DD	imagerel $unwind$stbtt_GetGlyphBitmapBoxSubpixel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_Rasterize DD imagerel stbtt_Rasterize
	DD	imagerel stbtt_Rasterize+409
	DD	imagerel $unwind$stbtt_Rasterize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z DD imagerel ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z+136
	DD	imagerel $unwind$?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z DD imagerel ?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z+101
	DD	imagerel $unwind$?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z DD imagerel ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z
	DD	imagerel ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z+195
	DD	imagerel $unwind$?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z DD imagerel ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z
	DD	imagerel ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z+86
	DD	imagerel $unwind$?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z DD imagerel ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z
	DD	imagerel ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z+194
	DD	imagerel $unwind$?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z DD imagerel ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z
	DD	imagerel ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z+194
	DD	imagerel $unwind$?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z DD imagerel ?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z
	DD	imagerel ?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z+302
	DD	imagerel $unwind$?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z DD imagerel ?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z
	DD	imagerel ?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z+312
	DD	imagerel $unwind$?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z DD imagerel ?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z+345
	DD	imagerel $unwind$?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z DD imagerel ?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z+219
	DD	imagerel $unwind$?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z DD imagerel ?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z
	DD	imagerel ?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z+391
	DD	imagerel $unwind$?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z DD imagerel ?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z
	DD	imagerel ?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z+247
	DD	imagerel $unwind$?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z DD imagerel ?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z+83
	DD	imagerel $unwind$?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z DD imagerel ?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z
	DD	imagerel ?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z+390
	DD	imagerel $unwind$?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ttUSHORT@@YAGPEAE@Z DD imagerel ?ttUSHORT@@YAGPEAE@Z
	DD	imagerel ?ttUSHORT@@YAGPEAE@Z+98
	DD	imagerel $unwind$?ttUSHORT@@YAGPEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ttSHORT@@YAFPEAE@Z DD imagerel ?ttSHORT@@YAFPEAE@Z
	DD	imagerel ?ttSHORT@@YAFPEAE@Z+98
	DD	imagerel $unwind$?ttSHORT@@YAFPEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ttULONG@@YAIPEAE@Z DD imagerel ?ttULONG@@YAIPEAE@Z
	DD	imagerel ?ttULONG@@YAIPEAE@Z+145
	DD	imagerel $unwind$?ttULONG@@YAIPEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ttLONG@@YAHPEAE@Z DD imagerel ?ttLONG@@YAHPEAE@Z
	DD	imagerel ?ttLONG@@YAHPEAE@Z+145
	DD	imagerel $unwind$?ttLONG@@YAHPEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__isfont@@YAHPEAE@Z DD imagerel ?stbtt__isfont@@YAHPEAE@Z
	DD	imagerel ?stbtt__isfont@@YAHPEAE@Z+833
	DD	imagerel $unwind$?stbtt__isfont@@YAHPEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__find_table@@YAIPEAEIPEBD@Z DD imagerel ?stbtt__find_table@@YAIPEAEIPEBD@Z
	DD	imagerel ?stbtt__find_table@@YAIPEAEIPEBD@Z+400
	DD	imagerel $unwind$?stbtt__find_table@@YAIPEAEIPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z DD imagerel ?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z
	DD	imagerel ?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z+432
	DD	imagerel $unwind$?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z DD imagerel ?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z
	DD	imagerel ?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z+562
	DD	imagerel $unwind$?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z DD imagerel ?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z
	DD	imagerel ?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z+2311
	DD	imagerel $unwind$?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z DD imagerel ?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z
	DD	imagerel ?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z+152
	DD	imagerel $unwind$?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z DD imagerel ?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z
	DD	imagerel ?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z+487
	DD	imagerel $unwind$?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z DD imagerel ?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z
	DD	imagerel ?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z+473
	DD	imagerel $unwind$?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z DD imagerel ?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z
	DD	imagerel ?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z+506
	DD	imagerel $unwind$?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD imagerel ?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
	DD	imagerel ?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z+5075
	DD	imagerel $unwind$?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z DD imagerel ?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z
	DD	imagerel ?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z+261
	DD	imagerel $unwind$?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z DD imagerel ?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z
	DD	imagerel ?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z+343
	DD	imagerel $unwind$?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z DD imagerel ?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z
	DD	imagerel ?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z+182
	DD	imagerel $unwind$?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z DD imagerel ?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z
	DD	imagerel ?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z+288
	DD	imagerel $unwind$?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z DD imagerel ?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z
	DD	imagerel ?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z+204
	DD	imagerel $unwind$?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z DD imagerel ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z
	DD	imagerel ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z+287
	DD	imagerel $unwind$?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z DD imagerel ?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z
	DD	imagerel ?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z+330
	DD	imagerel $unwind$?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z DD imagerel ?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z
	DD	imagerel ?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z+686
	DD	imagerel $unwind$?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z DD imagerel ?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z
	DD	imagerel ?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z+5348
	DD	imagerel $unwind$?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD imagerel ?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
	DD	imagerel ?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z+473
	DD	imagerel $unwind$?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z DD imagerel ?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z
	DD	imagerel ?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z+369
	DD	imagerel $unwind$?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z DD imagerel ?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z
	DD	imagerel ?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z+94
	DD	imagerel $unwind$?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z DD imagerel ?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z
	DD	imagerel ?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z+108
	DD	imagerel $unwind$?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z DD imagerel ?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z
	DD	imagerel ?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z+509
	DD	imagerel $unwind$?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z DD imagerel ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z
	DD	imagerel ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z+1403
	DD	imagerel $unwind$?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__sized_trapezoid_area@@YAMMMM@Z DD imagerel ?stbtt__sized_trapezoid_area@@YAMMMM@Z
	DD	imagerel ?stbtt__sized_trapezoid_area@@YAMMMM@Z+202
	DD	imagerel $unwind$?stbtt__sized_trapezoid_area@@YAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__position_trapezoid_area@@YAMMMMMM@Z DD imagerel ?stbtt__position_trapezoid_area@@YAMMMMMM@Z
	DD	imagerel ?stbtt__position_trapezoid_area@@YAMMMMMM@Z+111
	DD	imagerel $unwind$?stbtt__position_trapezoid_area@@YAMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__sized_triangle_area@@YAMMM@Z DD imagerel ?stbtt__sized_triangle_area@@YAMMM@Z
	DD	imagerel ?stbtt__sized_triangle_area@@YAMMM@Z+75
	DD	imagerel $unwind$?stbtt__sized_triangle_area@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z DD imagerel ?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z
	DD	imagerel ?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z+4245
	DD	imagerel $unwind$?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z DD imagerel ?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z
	DD	imagerel ?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z+1396
	DD	imagerel $unwind$?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z DD imagerel ?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z
	DD	imagerel ?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z+414
	DD	imagerel $unwind$?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z DD imagerel ?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z
	DD	imagerel ?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z+1184
	DD	imagerel $unwind$?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z DD imagerel ?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z
	DD	imagerel ?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z+92
	DD	imagerel $unwind$?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z DD imagerel ?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z
	DD	imagerel ?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z+1061
	DD	imagerel $unwind$?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z DD imagerel ?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z
	DD	imagerel ?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z+133
	DD	imagerel $unwind$?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z DD imagerel ?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z
	DD	imagerel ?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z+647
	DD	imagerel $unwind$?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z DD imagerel ?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z
	DD	imagerel ?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z+1273
	DD	imagerel $unwind$?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z DD imagerel ?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z
	DD	imagerel ?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z+1512
	DD	imagerel $unwind$?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__h_prefilter@@YAXPEAEHHHI@Z DD imagerel ?stbtt__h_prefilter@@YAXPEAEHHHI@Z
	DD	imagerel ?stbtt__h_prefilter@@YAXPEAEHHHI@Z+1185
	DD	imagerel $unwind$?stbtt__h_prefilter@@YAXPEAEHHHI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__v_prefilter@@YAXPEAEHHHI@Z DD imagerel ?stbtt__v_prefilter@@YAXPEAEHHHI@Z
	DD	imagerel ?stbtt__v_prefilter@@YAXPEAEHHHI@Z+1341
	DD	imagerel $unwind$?stbtt__v_prefilter@@YAXPEAEHHHI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__oversample_shift@@YAMH@Z DD imagerel ?stbtt__oversample_shift@@YAMH@Z
	DD	imagerel ?stbtt__oversample_shift@@YAMH@Z+105
	DD	imagerel $unwind$?stbtt__oversample_shift@@YAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImClamp@H@@YAHHHH@Z DD imagerel ??$ImClamp@H@@YAHHHH@Z
	DD	imagerel ??$ImClamp@H@@YAHHHH@Z+143
	DD	imagerel $unwind$??$ImClamp@H@@YAHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImMax@H@@YAHHH@Z DD imagerel ??$ImMax@H@@YAHHH@Z
	DD	imagerel ??$ImMax@H@@YAHHH@Z+98
	DD	imagerel $unwind$??$ImMax@H@@YAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z DD imagerel ?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z
	DD	imagerel ?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z+1115
	DD	imagerel $unwind$?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z DD imagerel ?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z
	DD	imagerel ?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z+677
	DD	imagerel $unwind$?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FixRectCornerFlags@@YAHH@Z DD imagerel ?FixRectCornerFlags@@YAHH@Z
	DD	imagerel ?FixRectCornerFlags@@YAHH@Z+192
	DD	imagerel $unwind$?FixRectCornerFlags@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImClamp@M@@YAMMMM@Z DD imagerel ??$ImClamp@M@@YAMMMM@Z
	DD	imagerel ??$ImClamp@M@@YAMMMM@Z+167
	DD	imagerel $unwind$??$ImClamp@M@@YAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__EFONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@YAXXZ DD imagerel ??__EFONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@YAXXZ
	DD	imagerel ??__EFONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@YAXXZ+741
	DD	imagerel $unwind$??__EFONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_decompress_length@@YAIPEBE@Z DD imagerel ?stb_decompress_length@@YAIPEBE@Z
	DD	imagerel ?stb_decompress_length@@YAIPEBE@Z+145
	DD	imagerel $unwind$?stb_decompress_length@@YAIPEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_decompress@@YAIPEAEPEBEI@Z DD imagerel ?stb_decompress@@YAIPEAEPEBEI@Z
	DD	imagerel ?stb_decompress@@YAIPEAEPEBEI@Z+853
	DD	imagerel $unwind$?stb_decompress@@YAIPEAEPEBEI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetDefaultCompressedFontDataTTFBase85@@YAPEBDXZ DD imagerel ?GetDefaultCompressedFontDataTTFBase85@@YAPEBDXZ
	DD	imagerel ?GetDefaultCompressedFontDataTTFBase85@@YAPEBDXZ+45
	DD	imagerel $unwind$?GetDefaultCompressedFontDataTTFBase85@@YAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Decode85Byte@@YAID@Z DD imagerel ?Decode85Byte@@YAID@Z
	DD	imagerel ?Decode85Byte@@YAID@Z+101
	DD	imagerel $unwind$?Decode85Byte@@YAID@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Decode85@@YAXPEBEPEAE@Z DD imagerel ?Decode85@@YAXPEBEPEAE@Z
	DD	imagerel ?Decode85@@YAXPEBEPEAE@Z+437
	DD	imagerel $unwind$?Decode85@@YAXPEBEPEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ImFontBuildSrcData@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??1ImFontBuildSrcData@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GImFontBuildSrcData@@QEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_GImFontBuildSrcData@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?UnpackBitVectorToFlatIndexList@@YAXPEBUImBitVector@@PEAU?$ImVector@H@@@Z DD imagerel ?UnpackBitVectorToFlatIndexList@@YAXPEBUImBitVector@@PEAU?$ImVector@H@@@Z
	DD	imagerel ?UnpackBitVectorToFlatIndexList@@YAXPEBUImBitVector@@PEAU?$ImVector@H@@@Z+287
	DD	imagerel $unwind$?UnpackBitVectorToFlatIndexList@@YAXPEBUImBitVector@@PEAU?$ImVector@H@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z DD imagerel ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z
	DD	imagerel ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z+5724
	DD	imagerel $unwind$?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA DD imagerel ?dtor$0@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
	DD	imagerel ?dtor$0@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA DD imagerel ?dtor$1@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
	DD	imagerel ?dtor$1@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA+36
	DD	imagerel $unwind$?dtor$1@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA DD imagerel ?dtor$2@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
	DD	imagerel ?dtor$2@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA+39
	DD	imagerel $unwind$?dtor$2@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA DD imagerel ?dtor$3@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
	DD	imagerel ?dtor$3@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA+39
	DD	imagerel $unwind$?dtor$3@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear_destruct@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+129
	DD	imagerel $unwind$?clear_destruct@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size_in_bytes@?$ImVector@UImFontBuildSrcData@@@@QEBAHXZ DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$?size_in_bytes@?$ImVector@UImFontBuildSrcData@@@@QEBAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+135
	DD	imagerel $unwind$??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImFontBuildSrcData@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImFontBuildSrcData@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+121
	DD	imagerel $unwind$?resize@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+203
	DD	imagerel $unwind$?reserve@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImFontBuildDstData@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@UImFontBuildDstData@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImFontBuildDstData@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@UImFontBuildDstData@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size_in_bytes@?$ImVector@UImFontBuildDstData@@@@QEBAHXZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?size_in_bytes@?$ImVector@UImFontBuildDstData@@@@QEBAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImFontBuildDstData@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImFontBuildDstData@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+121
	DD	imagerel $unwind$?resize@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@Ustbrp_rect@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@Ustbrp_rect@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@Ustbrp_rect@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@Ustbrp_rect@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size_in_bytes@?$ImVector@Ustbrp_rect@@@@QEBAHXZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?size_in_bytes@?$ImVector@Ustbrp_rect@@@@QEBAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@Ustbrp_rect@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@Ustbrp_rect@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+121
	DD	imagerel $unwind$?resize@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size_in_bytes@?$ImVector@Ustbtt_packedchar@@@@QEBAHXZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?size_in_bytes@?$ImVector@Ustbtt_packedchar@@@@QEBAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@Ustbtt_packedchar@@@@QEAAAEAUstbtt_packedchar@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@Ustbtt_packedchar@@@@QEAAAEAUstbtt_packedchar@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@Ustbtt_packedchar@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@Ustbtt_packedchar@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+121
	DD	imagerel $unwind$?resize@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z DD imagerel ?ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z
	DD	imagerel ?ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z+954
	DD	imagerel $unwind$?ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z DD imagerel ?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z
	DD	imagerel ?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z+1250
	DD	imagerel $unwind$?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z DD imagerel ?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z
	DD	imagerel ?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z+250
	DD	imagerel $unwind$?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z DD imagerel ?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z
	DD	imagerel ?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z+146
	DD	imagerel $unwind$?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CalcWordWrapNextLineStartA@@YAPEBDPEBD0@Z DD imagerel ?CalcWordWrapNextLineStartA@@YAPEBDPEBD0@Z
	DD	imagerel ?CalcWordWrapNextLineStartA@@YAPEBDPEBD0@Z+153
	DD	imagerel $unwind$?CalcWordWrapNextLineStartA@@YAPEBDPEBD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImAcos01@@YAMM@Z DD imagerel ?ImAcos01@@YAMM@Z
	DD	imagerel ?ImAcos01@@YAMM@Z+103
	DD	imagerel $unwind$?ImAcos01@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImSwap@M@@YAXAEAM0@Z DD imagerel ??$ImSwap@M@@YAXAEAM0@Z
	DD	imagerel ??$ImSwap@M@@YAXAEAM0@Z+109
	DD	imagerel $unwind$??$ImSwap@M@@YAXAEAM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImLerp@M@@YAMMMM@Z DD imagerel ??$ImLerp@M@@YAMMMM@Z
	DD	imagerel ??$ImLerp@M@@YAMMMM@Z+96
	DD	imagerel $unwind$??$ImLerp@M@@YAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb__match@@YAXPEBEI@Z DD imagerel ?stb__match@@YAXPEBEI@Z
	DD	imagerel ?stb__match@@YAXPEBEI@Z+299
	DD	imagerel $unwind$?stb__match@@YAXPEBEI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb__lit@@YAXPEBEI@Z DD imagerel ?stb__lit@@YAXPEBEI@Z
	DD	imagerel ?stb__lit@@YAXPEBEI@Z+262
	DD	imagerel $unwind$?stb__lit@@YAXPEBEI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_decompress_token@@YAPEBEPEBE@Z DD imagerel ?stb_decompress_token@@YAPEBEPEBE@Z
	DD	imagerel ?stb_decompress_token@@YAPEBEPEBE@Z+1430
	DD	imagerel $unwind$?stb_decompress_token@@YAPEBEPEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_adler32@@YAIIPEAEI@Z DD imagerel ?stb_adler32@@YAIIPEAEI@Z
	DD	imagerel ?stb_adler32@@YAIIPEAEI@Z+689
	DD	imagerel $unwind$?stb_adler32@@YAIIPEAEI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$IM_DELETE@UImFont@@@@YAXPEAUImFont@@@Z DD imagerel $LN4
	DD	imagerel $LN4+88
	DD	imagerel $unwind$??$IM_DELETE@UImFont@@@@YAXPEAUImFont@@@Z
pdata	ENDS
CRT$XCU	SEGMENT
?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA$initializer$@@3P6AXXZEA DQ FLAT:??__EFONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@YAXXZ ; FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf5db22d
CONST	SEGMENT
__real@bf5db22d DD 0bf5db22dr			; -0.866
CONST	ENDS
;	COMDAT __real@bf400000
CONST	SEGMENT
__real@bf400000 DD 0bf400000r			; -0.75
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@47800000
CONST	SEGMENT
__real@47800000 DD 047800000r			; 65536
CONST	ENDS
;	COMDAT __real@46800000
CONST	SEGMENT
__real@46800000 DD 046800000r			; 16384
CONST	ENDS
;	COMDAT __real@45333333
CONST	SEGMENT
__real@45333333 DD 045333333r			; 2867.2
CONST	ENDS
;	COMDAT __real@44b33333
CONST	SEGMENT
__real@44b33333 DD 044b33333r			; 1433.6
CONST	ENDS
;	COMDAT __real@44333333
CONST	SEGMENT
__real@44333333 DD 044333333r			; 716.8
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@42f60000
CONST	SEGMENT
__real@42f60000 DD 042f60000r			; 123
CONST	ENDS
;	COMDAT __real@42da0000
CONST	SEGMENT
__real@42da0000 DD 042da0000r			; 109
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42b60000
CONST	SEGMENT
__real@42b60000 DD 042b60000r			; 91
CONST	ENDS
;	COMDAT __real@42920000
CONST	SEGMENT
__real@42920000 DD 042920000r			; 73
CONST	ENDS
;	COMDAT __real@425c0000
CONST	SEGMENT
__real@425c0000 DD 0425c0000r			; 55
CONST	ENDS
;	COMDAT __real@42400000
CONST	SEGMENT
__real@42400000 DD 042400000r			; 48
CONST	ENDS
;	COMDAT __real@41f80000
CONST	SEGMENT
__real@41f80000 DD 041f80000r			; 31
CONST	ENDS
;	COMDAT __real@41b80000
CONST	SEGMENT
__real@41b80000 DD 041b80000r			; 23
CONST	ENDS
;	COMDAT __real@41b00000
CONST	SEGMENT
__real@41b00000 DD 041b00000r			; 22
CONST	ENDS
;	COMDAT __real@41a80000
CONST	SEGMENT
__real@41a80000 DD 041a80000r			; 21
CONST	ENDS
;	COMDAT __real@41980000
CONST	SEGMENT
__real@41980000 DD 041980000r			; 19
CONST	ENDS
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@41880000
CONST	SEGMENT
__real@41880000 DD 041880000r			; 17
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@41500000
CONST	SEGMENT
__real@41500000 DD 041500000r			; 13
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@41300000
CONST	SEGMENT
__real@41300000 DD 041300000r			; 11
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3f8147ae
CONST	SEGMENT
__real@3f8147ae DD 03f8147aer			; 1.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7fffef
CONST	SEGMENT
__real@3f7fffef DD 03f7fffefr			; 0.999999
CONST	ENDS
;	COMDAT __real@3f7d70a4
CONST	SEGMENT
__real@3f7d70a4 DD 03f7d70a4r			; 0.99
CONST	ENDS
;	COMDAT __real@3f7ae148
CONST	SEGMENT
__real@3f7ae148 DD 03f7ae148r			; 0.98
CONST	ENDS
;	COMDAT __real@3f75c28f
CONST	SEGMENT
__real@3f75c28f DD 03f75c28fr			; 0.96
CONST	ENDS
;	COMDAT __real@3f733333
CONST	SEGMENT
__real@3f733333 DD 03f733333r			; 0.95
CONST	ENDS
;	COMDAT __real@3f70a3d7
CONST	SEGMENT
__real@3f70a3d7 DD 03f70a3d7r			; 0.94
CONST	ENDS
;	COMDAT __real@3f6b851f
CONST	SEGMENT
__real@3f6b851f DD 03f6b851fr			; 0.92
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f6147ae
CONST	SEGMENT
__real@3f6147ae DD 03f6147aer			; 0.88
CONST	ENDS
;	COMDAT __real@3f5eb852
CONST	SEGMENT
__real@3f5eb852 DD 03f5eb852r			; 0.87
CONST	ENDS
;	COMDAT __real@3f5db22d
CONST	SEGMENT
__real@3f5db22d DD 03f5db22dr			; 0.866
CONST	ENDS
;	COMDAT __real@3f5c28f6
CONST	SEGMENT
__real@3f5c28f6 DD 03f5c28f6r			; 0.86
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f547ae1
CONST	SEGMENT
__real@3f547ae1 DD 03f547ae1r			; 0.83
CONST	ENDS
;	COMDAT __real@3f51eb85
CONST	SEGMENT
__real@3f51eb85 DD 03f51eb85r			; 0.82
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f4a3d71
CONST	SEGMENT
__real@3f4a3d71 DD 03f4a3d71r			; 0.79
CONST	ENDS
;	COMDAT __real@3f47ae14
CONST	SEGMENT
__real@3f47ae14 DD 03f47ae14r			; 0.78
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f3d70a4
CONST	SEGMENT
__real@3f3d70a4 DD 03f3d70a4r			; 0.74
CONST	ENDS
;	COMDAT __real@3f35c28f
CONST	SEGMENT
__real@3f35c28f DD 03f35c28fr			; 0.71
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f30a3d7
CONST	SEGMENT
__real@3f30a3d7 DD 03f30a3d7r			; 0.69
CONST	ENDS
;	COMDAT __real@3f2e147b
CONST	SEGMENT
__real@3f2e147b DD 03f2e147br			; 0.68
CONST	ENDS
;	COMDAT __real@3f2b851f
CONST	SEGMENT
__real@3f2b851f DD 03f2b851fr			; 0.67
CONST	ENDS
;	COMDAT __real@3f23d70a
CONST	SEGMENT
__real@3f23d70a DD 03f23d70ar			; 0.64
CONST	ENDS
;	COMDAT __real@3f2147ae
CONST	SEGMENT
__real@3f2147ae DD 03f2147aer			; 0.63
CONST	ENDS
;	COMDAT __real@3f1eb852
CONST	SEGMENT
__real@3f1eb852 DD 03f1eb852r			; 0.62
CONST	ENDS
;	COMDAT __real@3f1c28f6
CONST	SEGMENT
__real@3f1c28f6 DD 03f1c28f6r			; 0.61
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f170a3d
CONST	SEGMENT
__real@3f170a3d DD 03f170a3dr			; 0.59
CONST	ENDS
;	COMDAT __real@3f11eb85
CONST	SEGMENT
__real@3f11eb85 DD 03f11eb85r			; 0.57
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT __real@3f0a3d71
CONST	SEGMENT
__real@3f0a3d71 DD 03f0a3d71r			; 0.54
CONST	ENDS
;	COMDAT __real@3f07ae14
CONST	SEGMENT
__real@3f07ae14 DD 03f07ae14r			; 0.53
CONST	ENDS
;	COMDAT __real@3f051eb8
CONST	SEGMENT
__real@3f051eb8 DD 03f051eb8r			; 0.52
CONST	ENDS
;	COMDAT __real@3f028f5c
CONST	SEGMENT
__real@3f028f5c DD 03f028f5cr			; 0.51
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3efae148
CONST	SEGMENT
__real@3efae148 DD 03efae148r			; 0.49
CONST	ENDS
;	COMDAT __real@3ef5c28f
CONST	SEGMENT
__real@3ef5c28f DD 03ef5c28fr			; 0.48
CONST	ENDS
;	COMDAT __real@3ef0a3d7
CONST	SEGMENT
__real@3ef0a3d7 DD 03ef0a3d7r			; 0.47
CONST	ENDS
;	COMDAT __real@3eeb851f
CONST	SEGMENT
__real@3eeb851f DD 03eeb851fr			; 0.46
CONST	ENDS
;	COMDAT __real@3ee66666
CONST	SEGMENT
__real@3ee66666 DD 03ee66666r			; 0.45
CONST	ENDS
;	COMDAT __real@3ee147ae
CONST	SEGMENT
__real@3ee147ae DD 03ee147aer			; 0.44
CONST	ENDS
;	COMDAT __real@3edc28f6
CONST	SEGMENT
__real@3edc28f6 DD 03edc28f6r			; 0.43
CONST	ENDS
;	COMDAT __real@3ed70a3d
CONST	SEGMENT
__real@3ed70a3d DD 03ed70a3dr			; 0.42
CONST	ENDS
;	COMDAT __real@3ed1eb85
CONST	SEGMENT
__real@3ed1eb85 DD 03ed1eb85r			; 0.41
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3ec7ae14
CONST	SEGMENT
__real@3ec7ae14 DD 03ec7ae14r			; 0.39
CONST	ENDS
;	COMDAT __real@3ec28f5c
CONST	SEGMENT
__real@3ec28f5c DD 03ec28f5cr			; 0.38
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3ea3d70a
CONST	SEGMENT
__real@3ea3d70a DD 03ea3d70ar			; 0.32
CONST	ENDS
;	COMDAT __real@3e9eb852
CONST	SEGMENT
__real@3e9eb852 DD 03e9eb852r			; 0.31
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e947ae1
CONST	SEGMENT
__real@3e947ae1 DD 03e947ae1r			; 0.29
CONST	ENDS
;	COMDAT __real@3e8f5c29
CONST	SEGMENT
__real@3e8f5c29 DD 03e8f5c29r			; 0.28
CONST	ENDS
;	COMDAT __real@3e8a3d71
CONST	SEGMENT
__real@3e8a3d71 DD 03e8a3d71r			; 0.27
CONST	ENDS
;	COMDAT __real@3e851eb8
CONST	SEGMENT
__real@3e851eb8 DD 03e851eb8r			; 0.26
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e75c28f
CONST	SEGMENT
__real@3e75c28f DD 03e75c28fr			; 0.24
CONST	ENDS
;	COMDAT __real@3e6b851f
CONST	SEGMENT
__real@3e6b851f DD 03e6b851fr			; 0.23
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e428f5c
CONST	SEGMENT
__real@3e428f5c DD 03e428f5cr			; 0.19
CONST	ENDS
;	COMDAT __real@3e2e147b
CONST	SEGMENT
__real@3e2e147b DD 03e2e147br			; 0.17
CONST	ENDS
;	COMDAT __real@3e23d70a
CONST	SEGMENT
__real@3e23d70a DD 03e23d70ar			; 0.16
CONST	ENDS
;	COMDAT __real@3e0f5c29
CONST	SEGMENT
__real@3e0f5c29 DD 03e0f5c29r			; 0.14
CONST	ENDS
;	COMDAT __real@3de147ae
CONST	SEGMENT
__real@3de147ae DD 03de147aer			; 0.11
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db851ec
CONST	SEGMENT
__real@3db851ec DD 03db851ecr			; 0.09
CONST	ENDS
;	COMDAT __real@3da3d70a
CONST	SEGMENT
__real@3da3d70a DD 03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT __real@3d8f5c29
CONST	SEGMENT
__real@3d8f5c29 DD 03d8f5c29r			; 0.07
CONST	ENDS
;	COMDAT __real@3d75c28f
CONST	SEGMENT
__real@3d75c28f DD 03d75c28fr			; 0.06
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-05
CONST	ENDS
;	COMDAT __real@358637bd
CONST	SEGMENT
__real@358637bd DD 0358637bdr			; 1e-06
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1CC@BPLGCGDC@?$AAn?$AAe?$AAw?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@BPLGCGDC@?$AAn?$AAe?$AAw?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ DB 'n'
	DB	00H, 'e', 00H, 'w', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'S', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'S'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@NPHOAPAC@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAt?$AA?5?$AA?$DM?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CL?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@NPHOAPAC@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAt?$AA?5?$AA?$DM?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CL?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ DB 'i'
	DB	00H, 't', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'D', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'D', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'S'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@EGIPGKEG@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAo?$AAl?$AAe?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@EGIPGKEG@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAo?$AAl?$AAe?$AAn?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'b', 00H, '_', 00H, '_', 00H, 'd', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'o'
	DB	00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, ' ', 00H
	DB	'+', 00H, ' ', 00H, 'o', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@GCANDLHA@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAo?$AAl?$AAe?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@GCANDLHA@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAo?$AAl?$AAe?$AAn?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'b', 00H, '_', 00H, '_', 00H, 'd', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'o'
	DB	00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, ' ', 00H
	DB	'+', 00H, ' ', 00H, 'o', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stb_decompress@@YAIPEAEPEBEI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stb_decompress@@YAIPEAEPEBEI@Z@4JA DD 0fc2H ; `stb_decompress'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??stb__lit@@YAXPEBEI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stb__lit@@YAXPEBEI@Z@4JA DD 0f85H	; `stb__lit'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FC@IADGHEAH@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAs?$AAt?$AAb?$AA_?$AA_?$AAb?$AAa?$AAr?$AAr?$AAi@
CONST	SEGMENT
??_C@_1FC@IADGHEAH@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAs?$AAt?$AAb?$AA_?$AA_?$AAb?$AAa?$AAr?$AAr?$AAi@ DB 's'
	DB	00H, 't', 00H, 'b', 00H, '_', 00H, '_', 00H, 'd', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'l', 00H, 'e'
	DB	00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, '_'
	DB	00H, 'b', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'i', 00H, 'e', 00H
	DB	'r', 00H, '_', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stb__match@@YAXPEBEI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stb__match@@YAXPEBEI@Z@4JA DD 0f7cH	; `stb__match'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z@4JA DD 0eadH ; `ImGui::RenderArrow'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BM@KGJCABG@?$AAt?$AAe?$AAx?$AAt?$AA_?$AAe?$AAn?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@KGJCABG@?$AAt?$AAe?$AAx?$AAt?$AA_?$AAe?$AAn?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 't'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, '_', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z@4JA DD 0d23H ; `ImFont::CalcWordWrapPositionA'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CK@OHOOGJPG@?$AAI?$AAn?$AAd?$AAe?$AAx?$AAL?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@OHOOGJPG@?$AAI?$AAn?$AAd?$AAe?$AAx?$AAL?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'I'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, 'L', 00H, 'o', 00H
	DB	'o', 00H, 'k', 00H, 'u', 00H, 'p', 00H, '.', 00H, 'S', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AddRemapChar@ImFont@@QEAAXGG_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddRemapChar@ImFont@@QEAAXGG_N@Z@4JA DD 0cf3H ; `ImFont::AddRemapChar'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EO@HLFAHELG@?$AAI?$AAn?$AAd?$AAe?$AAx?$AAA?$AAd?$AAv?$AAa?$AAn?$AAc?$AAe?$AAX?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAI?$AAn?$AAd?$AAe?$AAx?$AAL?$AAo?$AAo?$AAk?$AAu@
CONST	SEGMENT
??_C@_1EO@HLFAHELG@?$AAI?$AAn?$AAd?$AAe?$AAx?$AAA?$AAd?$AAv?$AAa?$AAn?$AAc?$AAe?$AAX?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAI?$AAn?$AAd?$AAe?$AAx?$AAL?$AAo?$AAo?$AAk?$AAu@ DB 'I'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, 'A', 00H, 'd', 00H
	DB	'v', 00H, 'a', 00H, 'n', 00H, 'c', 00H, 'e', 00H, 'X', 00H, '.'
	DB	00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x'
	DB	00H, 'L', 00H, 'o', 00H, 'o', 00H, 'k', 00H, 'u', 00H, 'p', 00H
	DB	'.', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??GrowIndex@ImFont@@QEAAXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??GrowIndex@ImFont@@QEAAXH@Z@4JA DD 0cbbH ; `ImFont::GrowIndex'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CK@FHBHHKB@?$AAG?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AA0?$AAx?$AAF?$AAF?$AAF?$AAF?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@FHBHHKB@?$AAG?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AA0?$AAx?$AAF?$AAF?$AAF?$AAF?$AA?$AA@ DB 'G'
	DB	00H, 'l', 00H, 'y', 00H, 'p', 00H, 'h', 00H, 's', 00H, '.', 00H
	DB	'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, '0', 00H, 'x', 00H, 'F', 00H, 'F', 00H, 'F', 00H, 'F', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??BuildLookupTable@ImFont@@QEAAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??BuildLookupTable@ImFont@@QEAAXXZ@4JA DD 0c54H ; `ImFont::BuildLookupTable'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EC@BJJINGAO@?$AAr?$AA?9?$AA?$DO?$AAF?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AAA?$AAt?$AAl?$AAa?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1EC@BJJINGAO@?$AAr?$AA?9?$AA?$DO?$AAF?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AAA?$AAt?$AAl?$AAa?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs@ DB 'r'
	DB	00H, '-', 00H, '>', 00H, 'F', 00H, 'o', 00H, 'n', 00H, 't', 00H
	DB	'-', 00H, '>', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'a'
	DB	00H, 'i', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'A', 00H, 't', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'a', 00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HG@JLCPLJIF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAP?$AAi?$AAx?$AAe?$AAl?$AAs?$AAA?$AAl?$AAp?$AAh?$AAa?$AA8?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAa@
CONST	SEGMENT
??_C@_1HG@JLCPLJIF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAP?$AAi?$AAx?$AAe?$AAl?$AAs?$AAA?$AAl?$AAp?$AAh?$AAa?$AA8?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAa@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'T', 00H, 'e', 00H, 'x', 00H, 'P', 00H, 'i', 00H, 'x', 00H, 'e'
	DB	00H, 'l', 00H, 's', 00H, 'A', 00H, 'l', 00H, 'p', 00H, 'h', 00H
	DB	'a', 00H, '8', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'a', 00H, 't', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H, 'T', 00H, 'e'
	DB	00H, 'x', 00H, 'P', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H
	DB	's', 00H, 'R', 00H, 'G', 00H, 'B', 00H, 'A', 00H, '3', 00H, '2'
	DB	00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z@4JA DD 0ad6H ; `ImFontAtlasBuildFinish'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1HO@DLMJCKJA@?$AAp?$AAa?$AAd?$AA_?$AAl?$AAe?$AAf?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CL?$AA?5?$AAp?$AAa?$AAd?$AA_?$AAr?$AAi?$AAg?$AAh@
CONST	SEGMENT
??_C@_1HO@DLMJCKJA@?$AAp?$AAa?$AAd?$AA_?$AAl?$AAe?$AAf?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CL?$AA?5?$AAp?$AAa?$AAd?$AA_?$AAr?$AAi?$AAg?$AAh@ DB 'p'
	DB	00H, 'a', 00H, 'd', 00H, '_', 00H, 'l', 00H, 'e', 00H, 'f', 00H
	DB	't', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 'n'
	DB	00H, 'e', 00H, '_', 00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H
	DB	'h', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'p', 00H, 'a', 00H, 'd'
	DB	00H, '_', 00H, 'r', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'r', 00H, '-', 00H, '>'
	DB	00H, 'W', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'y', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'r', 00H, '-', 00H, '>', 00H, 'H', 00H, 'e', 00H, 'i', 00H
	DB	'g', 00H, 'h', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z@4JA DD 0a8dH ; `ImFontAtlasBuildRenderLinesTexData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EA@DBHHBIED@?$AAr?$AA?9?$AA?$DO?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA2?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AA?9?$AA?$DO?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA2?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@DBHHBIED@?$AAr?$AA?9?$AA?$DO?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA2?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AA?9?$AA?$DO?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA2?$AA?$AA@ DB 'r'
	DB	00H, '-', 00H, '>', 00H, 'W', 00H, 'i', 00H, 'd', 00H, 't', 00H
	DB	'h', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '2', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'r', 00H, '-', 00H, '>', 00H
	DB	'H', 00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '2', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MA@PDHEAINP@?$AAr?$AA?9?$AA?$DO?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAF?$AAO?$AAN?$AAT?$AA_?$AAA?$AAT?$AAL?$AAA?$AAS?$AA_?$AAD?$AAE?$AAF?$AAA?$AAU?$AAL?$AAT?$AA_?$AAT@
CONST	SEGMENT
??_C@_1MA@PDHEAINP@?$AAr?$AA?9?$AA?$DO?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAF?$AAO?$AAN?$AAT?$AA_?$AAA?$AAT?$AAL?$AAA?$AAS?$AA_?$AAD?$AAE?$AAF?$AAA?$AAU?$AAL?$AAT?$AA_?$AAT@ DB 'r'
	DB	00H, '-', 00H, '>', 00H, 'W', 00H, 'i', 00H, 'd', 00H, 't', 00H
	DB	'h', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'F', 00H, 'O'
	DB	00H, 'N', 00H, 'T', 00H, '_', 00H, 'A', 00H, 'T', 00H, 'L', 00H
	DB	'A', 00H, 'S', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'F', 00H, 'A'
	DB	00H, 'U', 00H, 'L', 00H, 'T', 00H, '_', 00H, 'T', 00H, 'E', 00H
	DB	'X', 00H, '_', 00H, 'D', 00H, 'A', 00H, 'T', 00H, 'A', 00H, '_'
	DB	00H, 'W', 00H, ' ', 00H, '*', 00H, ' ', 00H, '2', 00H, ' ', 00H
	DB	'+', 00H, ' ', 00H, '1', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'r', 00H, '-', 00H, '>', 00H, 'H', 00H, 'e', 00H, 'i', 00H
	DB	'g', 00H, 'h', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'F', 00H, 'O', 00H, 'N', 00H, 'T', 00H, '_', 00H, 'A', 00H
	DB	'T', 00H, 'L', 00H, 'A', 00H, 'S', 00H, '_', 00H, 'D', 00H, 'E'
	DB	00H, 'F', 00H, 'A', 00H, 'U', 00H, 'L', 00H, 'T', 00H, '_', 00H
	DB	'T', 00H, 'E', 00H, 'X', 00H, '_', 00H, 'D', 00H, 'A', 00H, 'T'
	DB	00H, 'A', 00H, '_', 00H, 'H', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@DDBMCGAE@?$AAr?$AA?9?$AA?$DO?$AAI?$AAs?$AAP?$AAa?$AAc?$AAk?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@DDBMCGAE@?$AAr?$AA?9?$AA?$DO?$AAI?$AAs?$AAP?$AAa?$AAc?$AAk?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@ DB 'r'
	DB	00H, '-', 00H, '>', 00H, 'I', 00H, 's', 00H, 'P', 00H, 'a', 00H
	DB	'c', 00H, 'k', 00H, 'e', 00H, 'd', 00H, '(', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z@4JA DD 0a65H ; `ImFontAtlasBuildRenderDefaultTexData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z@4JA DD 0a5bH ; `ImFontAtlasBuildRender32bppRectFromString'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EI@CHFOHLGN@?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy?$AA?5?$AA?$CL?$AA?5?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAH?$AAe?$AAi@
CONST	SEGMENT
??_C@_1EI@CHFOHLGN@?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy?$AA?5?$AA?$CL?$AA?5?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAH?$AAe?$AAi@ DB 'y'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'y', 00H, ' ', 00H, '+', 00H, ' '
	DB	00H, 'h', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'a', 00H
	DB	't', 00H, 'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H, 'T'
	DB	00H, 'e', 00H, 'x', 00H, 'H', 00H, 'e', 00H, 'i', 00H, 'g', 00H
	DB	'h', 00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@KOLNNAOF@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$CL?$AA?5?$AAw?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAW?$AAi?$AAd@
CONST	SEGMENT
??_C@_1EG@KOLNNAOF@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$CL?$AA?5?$AAw?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAW?$AAi?$AAd@ DB 'x'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'x', 00H, ' ', 00H, '+', 00H, ' '
	DB	00H, 'w', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'a', 00H
	DB	't', 00H, 'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H, 'T'
	DB	00H, 'e', 00H, 'x', 00H, 'W', 00H, 'i', 00H, 'd', 00H, 't', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z@4JA DD 0a51H ; `ImFontAtlasBuildRender8bppRectFromString'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1KE@CBAIECN@?$AAp?$AAa?$AAc?$AAk?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?4?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAu?$AAs?$AAe?$AAr?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?$FL?$AAi?$AA?$FN@
CONST	SEGMENT
??_C@_1KE@CBAIECN@?$AAp?$AAa?$AAc?$AAk?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?4?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAu?$AAs?$AAe?$AAr?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?$FL?$AAi?$AA?$FN@ DB 'p'
	DB	00H, 'a', 00H, 'c', 00H, 'k', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '[', 00H, 'i', 00H, ']', 00H, '.'
	DB	00H, 'w', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'u', 00H
	DB	's', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 's', 00H, '[', 00H, 'i', 00H, ']', 00H, '.', 00H
	DB	'W', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H
	DB	'_', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 's', 00H, '['
	DB	00H, 'i', 00H, ']', 00H, '.', 00H, 'h', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H, '_'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 's', 00H, '[', 00H
	DB	'i', 00H, ']', 00H, '.', 00H, 'H', 00H, 'e', 00H, 'i', 00H, 'g'
	DB	00H, 'h', 00H, 't', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@POMOOFJC@?$AAu?$AAs?$AAe?$AAr?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@POMOOFJC@?$AAu?$AAs?$AAe?$AAr?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?$AA@ DB 'u'
	DB	00H, 's', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '.', 00H, 'S', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@FMMHMDCM@?$AAp?$AAa?$AAc?$AAk?$AA_?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@FMMHMDCM@?$AAp?$AAa?$AAc?$AAk?$AA_?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'p'
	DB	00H, 'a', 00H, 'c', 00H, 'k', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, ' ', 00H, '!'
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4JA DD 0a36H ; `ImFontAtlasBuildPackCustomRects'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DC@ENBGOGEF@?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA_?$AAi?$AAn?$AA_?$AAf?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@ENBGOGEF@?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA_?$AAi?$AAn?$AA_?$AAf?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'g'
	DB	00H, 'l', 00H, 'y', 00H, 'p', 00H, 'h', 00H, '_', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, '_', 00H, 'i', 00H, 'n'
	DB	00H, '_', 00H, 'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@GJGKHCEN@?$AAs?$AAr?$AAc?$AA_?$AAt?$AAm?$AAp?$AA?4?$AAG?$AAl?$AAy?$AAp?$AAh?$AAs?$AAL?$AAi?$AAs?$AAt?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AAr?$AAc?$AA_?$AAt@
CONST	SEGMENT
??_C@_1FO@GJGKHCEN@?$AAs?$AAr?$AAc?$AA_?$AAt?$AAm?$AAp?$AA?4?$AAG?$AAl?$AAy?$AAp?$AAh?$AAs?$AAL?$AAi?$AAs?$AAt?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AAr?$AAc?$AA_?$AAt@ DB 's'
	DB	00H, 'r', 00H, 'c', 00H, '_', 00H, 't', 00H, 'm', 00H, 'p', 00H
	DB	'.', 00H, 'G', 00H, 'l', 00H, 'y', 00H, 'p', 00H, 'h', 00H, 's'
	DB	00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '.', 00H, 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '_', 00H, 't', 00H, 'm', 00H
	DB	'p', 00H, '.', 00H, 'G', 00H, 'l', 00H, 'y', 00H, 'p', 00H, 'h'
	DB	00H, 's', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1JA@MENENCJI@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAF?$AAo?$AAn?$AAt?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAi?$AAs@
CONST	SEGMENT
??_C@_1JA@MENENCJI@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAF?$AAo?$AAn?$AAt?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAi?$AAs@ DB 'f'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, '_', 00H, 'o', 00H, 'f', 00H
	DB	'f', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, '>', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'"', 00H, 'F', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'D', 00H, 'a'
	DB	00H, 't', 00H, 'a', 00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'r', 00H, 'r', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, ',', 00H, ' ', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'F', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'N', 00H, 'o'
	DB	00H, ' ', 00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 'b', 00H, 'e', 00H, ' ', 00H, 'f', 00H, 'o'
	DB	00H, 'u', 00H, 'n', 00H, 'd', 00H, '.', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@IFELKFNN@FontData?5is?5incorrect?0?5or?5FontNo@
CONST	SEGMENT
??_C@_0DC@IFELKFNN@FontData?5is?5incorrect?0?5or?5FontNo@ DB 'FontData is'
	DB	' incorrect, or FontNo cannot be found.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@NKKOCLPN@?$AAs?$AAr?$AAc?$AA_?$AAt?$AAm?$AAp?$AA?4?$AAD?$AAs?$AAt?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@NKKOCLPN@?$AAs?$AAr?$AAc?$AA_?$AAt?$AAm?$AAp?$AA?4?$AAD?$AAs?$AAt?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@ DB 's'
	DB	00H, 'r', 00H, 'c', 00H, '_', 00H, 't', 00H, 'm', 00H, 'p', 00H
	DB	'.', 00H, 'D', 00H, 's', 00H, 't', 00H, 'I', 00H, 'n', 00H, 'd'
	DB	00H, 'e', 00H, 'x', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'-', 00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1KE@NPGLPIC@?$AAc?$AAf?$AAg?$AA?4?$AAD?$AAs?$AAt?$AAF?$AAo?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CI?$AA?$CB?$AAc?$AAf?$AAg?$AA?4?$AAD?$AAs?$AAt?$AAF?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAI?$AAs@
CONST	SEGMENT
??_C@_1KE@NPGLPIC@?$AAc?$AAf?$AAg?$AA?4?$AAD?$AAs?$AAt?$AAF?$AAo?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CI?$AA?$CB?$AAc?$AAf?$AAg?$AA?4?$AAD?$AAs?$AAt?$AAF?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAI?$AAs@ DB 'c'
	DB	00H, 'f', 00H, 'g', 00H, '.', 00H, 'D', 00H, 's', 00H, 't', 00H
	DB	'F', 00H, 'o', 00H, 'n', 00H, 't', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '(', 00H, '!', 00H, 'c', 00H, 'f', 00H, 'g', 00H
	DB	'.', 00H, 'D', 00H, 's', 00H, 't', 00H, 'F', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, '-', 00H, '>', 00H, 'I', 00H, 's', 00H, 'L', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'd', 00H, '(', 00H, ')'
	DB	00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'c', 00H, 'f', 00H
	DB	'g', 00H, '.', 00H, 'D', 00H, 's', 00H, 't', 00H, 'F', 00H, 'o'
	DB	00H, 'n', 00H, 't', 00H, '-', 00H, '>', 00H, 'C', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'e', 00H, 'r'
	DB	00H, 'A', 00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@BBHAKCJP@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAa?$AAt?$AAa?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@BBHAKCJP@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAa?$AAt?$AAa?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'C', 00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H, 'D'
	DB	00H, 'a', 00H, 't', 00H, 'a', 00H, '.', 00H, 'S', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4JA DD 0922H ; `ImFontAtlasBuildWithStbTruetype'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??Build@ImFontAtlas@@QEAA_NXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??Build@ImFontAtlas@@QEAA_NXZ@4JA DD 08cdH ; `ImFontAtlas::Build'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DC@JHOLDEIK@?$AAP?$AAa?$AAc?$AAk?$AAI?$AAd?$AAM?$AAo?$AAu?$AAs?$AAe?$AAC?$AAu?$AAr?$AAs?$AAo?$AAr?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@JHOLDEIK@?$AAP?$AAa?$AAc?$AAk?$AAI?$AAd?$AAM?$AAo?$AAu?$AAs?$AAe?$AAC?$AAu?$AAr?$AAs?$AAo?$AAr?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@ DB 'P'
	DB	00H, 'a', 00H, 'c', 00H, 'k', 00H, 'I', 00H, 'd', 00H, 'M', 00H
	DB	'o', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'u', 00H, 'r'
	DB	00H, 's', 00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '-', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU3@1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU3@1@Z@4JA DD 08b8H ; `ImFontAtlas::GetMouseCursorTexData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CC@DEJIAPCP@?$AAr?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAI?$AAs?$AAP?$AAa?$AAc?$AAk?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@DEJIAPCP@?$AAr?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAI?$AAs?$AAP?$AAa?$AAc?$AAk?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@ DB 'r'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '-', 00H, '>', 00H, 'I', 00H
	DB	's', 00H, 'P', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 'd'
	DB	00H, '(', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@CMBJAGBP@?$AAT?$AAe?$AAx?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAT?$AAe?$AAx?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@CMBJAGBP@?$AAT?$AAe?$AAx?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAT?$AAe?$AAx?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'T'
	DB	00H, 'e', 00H, 'x', 00H, 'W', 00H, 'i', 00H, 'd', 00H, 't', 00H
	DB	'h', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 'H', 00H
	DB	'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, ' ', 00H, '>'
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z@4JA DD 08b0H ; `ImFontAtlas::CalcCustomRectUV'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BE@PBFICKNN@?$AAf?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@PBFICKNN@?$AAf?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'f'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z@4JA DD 089dH ; `ImFontAtlas::AddCustomRectFontGlyph'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DO@CAIIJEKF@?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAF?$AAF?$AAF?$AAF?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@CAIIJEKF@?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAF?$AAF?$AAF?$AAF?$AA?$AA@ DB 'h'
	DB	00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'h', 00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '0', 00H, 'x', 00H, 'F'
	DB	00H, 'F', 00H, 'F', 00H, 'F', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@GHLOFHKF@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAF?$AAF?$AAF?$AAF?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@GHLOFHKF@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAF?$AAF?$AAF?$AAF?$AA?$AA@ DB 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H
	DB	' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 'x', 00H, 'F', 00H, 'F', 00H, 'F'
	DB	00H, 'F', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z@4JA DD 0892H ; `ImFontAtlas::AddCustomRectRegular'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z@4JA DD 087cH ; `ImFontAtlas::AddFontFromMemoryCompressedTTF'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CO@ODFMNMML@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?4?$AAF?$AAo?$AAn?$AAt?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@ODFMNMML@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?4?$AAF?$AAo?$AAn?$AAt?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'f'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, '_', 00H, 'c', 00H, 'f', 00H
	DB	'g', 00H, '.', 00H, 'F', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'D'
	DB	00H, 'a', 00H, 't', 00H, 'a', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z@4JA DD 086fH ; `ImFontAtlas::AddFontFromMemoryTTF'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0L@EPCGLJHG@?$CFs?0?5?$CF?40fpx?$AA@
CONST	SEGMENT
??_C@_0L@EPCGLJHG@?$CFs?0?5?$CF?40fpx?$AA@ DB '%s, %.0fpx', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@KCPDJPKE@?$AA?$CI?$AA0?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAo?$AAn?$AAt?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1EG@KCPDJPKE@?$AA?$CI?$AA0?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAo?$AAn?$AAt?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB '('
	DB	00H, '0', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'"', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' '
	DB	00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'l', 00H, 'o', 00H
	DB	'a', 00H, 'd', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'n', 00H, 't'
	DB	00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, '!', 00H
	DB	'"', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z@4JA DD 0859H ; `ImFontAtlas::AddFontFromFileTTF'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BG@CONABPA@ProggyClean?4ttf?0?5?$CFdpx?$AA@
CONST	SEGMENT
??_C@_0BG@CONABPA@ProggyClean?4ttf?0?5?$CFdpx?$AA@ DB 'ProggyClean.ttf, %'
	DB	'dpx', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1HI@KOOOLAEJ@?$AA?$CB?$AAF?$AAo?$AAn?$AAt?$AAs?$AA?4?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAu?$AAs?$AAe?$AA?5?$AAM?$AAe@
CONST	SEGMENT
??_C@_1HI@KOOOLAEJ@?$AA?$CB?$AAF?$AAo?$AAn?$AAt?$AAs?$AA?4?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAu?$AAs?$AAe?$AA?5?$AAM?$AAe@ DB '!'
	DB	00H, 'F', 00H, 'o', 00H, 'n', 00H, 't', 00H, 's', 00H, '.', 00H
	DB	'e', 00H, 'm', 00H, 'p', 00H, 't', 00H, 'y', 00H, '(', 00H, ')'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'C', 00H
	DB	'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'u'
	DB	00H, 's', 00H, 'e', 00H, ' ', 00H, 'M', 00H, 'e', 00H, 'r', 00H
	DB	'g', 00H, 'e', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ' '
	DB	00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 't', 00H, 'h', 00H
	DB	'e', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't'
	DB	00H, ' ', 00H, 'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EDBCHFCN@Cannot?5use?5MergeMode?5for?5the?5fir@
CONST	SEGMENT
??_C@_0CI@EDBCHFCN@Cannot?5use?5MergeMode?5for?5the?5fir@ DB 'Cannot use '
	DB	'MergeMode for the first font', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@LEOIHPJH@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAS?$AAi?$AAz?$AAe?$AAP?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@LEOIHPJH@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAS?$AAi?$AAz?$AAe?$AAP?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AAf?$AA?$AA@ DB 'f'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, '_', 00H, 'c', 00H, 'f', 00H
	DB	'g', 00H, '-', 00H, '>', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, 'P', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, 's', 00H
	DB	' ', 00H, '>', 00H, ' ', 00H, '0', 00H, '.', 00H, '0', 00H, 'f'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@FAHJAOLI@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAF?$AAo?$AAn?$AAt?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAf?$AAo?$AAn?$AAt?$AA_@
CONST	SEGMENT
??_C@_1GM@FAHJAOLI@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAF?$AAo?$AAn?$AAt?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAf?$AAo?$AAn?$AAt?$AA_@ DB 'f'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, '_', 00H, 'c', 00H, 'f', 00H
	DB	'g', 00H, '-', 00H, '>', 00H, 'F', 00H, 'o', 00H, 'n', 00H, 't'
	DB	00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, '_', 00H, 'c', 00H
	DB	'f', 00H, 'g', 00H, '-', 00H, '>', 00H, 'F', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4JA DD 0813H ; `ImFontAtlas::AddFont'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ClearFonts@ImFontAtlas@@QEAAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ClearFonts@ImFontAtlas@@QEAAXXZ@4JA DD 07e1H ; `ImFontAtlas::ClearFonts'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ClearTexData@ImFontAtlas@@QEAAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ClearTexData@ImFontAtlas@@QEAAXXZ@4JA DD 07d4H ; `ImFontAtlas::ClearTexData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ClearInputData@ImFontAtlas@@QEAAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ClearInputData@ImFontAtlas@@QEAAXXZ@4JA DD 07bdH ; `ImFontAtlas::ClearInputData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAm?$AAo?$AAd?$AAi?$AAf?$AAy?$AA?5?$AAa?$AA?5?$AAl?$AAo?$AAc?$AAk@
CONST	SEGMENT
??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAm?$AAo?$AAd?$AAi?$AAf?$AAy?$AA?5?$AAa?$AA?5?$AAl?$AAo?$AAc?$AAk@ DB '!'
	DB	00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'C', 00H, 'a'
	DB	00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'm', 00H
	DB	'o', 00H, 'd', 00H, 'i', 00H, 'f', 00H, 'y', 00H, ' ', 00H, 'a'
	DB	00H, ' ', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'F', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'A', 00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	' ', 00H, 'b', 00H, 'e', 00H, 't', 00H, 'w', 00H, 'e', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, 'N', 00H, 'e', 00H, 'w', 00H, 'F', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '(', 00H, ')', 00H, ' '
	DB	00H, 'a', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'E', 00H, 'n', 00H
	DB	'd', 00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '/'
	DB	00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	'(', 00H, ')', 00H, '!', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAtl@
CONST	SEGMENT
??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAtl@ DB 'Cannot modif'
	DB	'y a locked ImFontAtlas between NewFrame() and EndFrame/Render'
	DB	'()!', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0???1ImFontAtlas@@QEAA@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0???1ImFontAtlas@@QEAA@XZ@4JA DD 07b7H	; `ImFontAtlas::~ImFontAtlas'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DC@ILGGLBID@?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAd?$AAx?$AA?5?$AA?$DM?$AA?5?$AA_?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@ILGGLBID@?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAd?$AAx?$AA?5?$AA?$DM?$AA?5?$AA_?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ DB 'i'
	DB	00H, 'd', 00H, 'x', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'i', 00H, 'd'
	DB	00H, 'x', 00H, ' ', 00H, '<', 00H, ' ', 00H, '_', 00H, 'C', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4JA DD 06f7H ; `ImDrawListSplitter::SetCurrentChannel'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BAE@LAENHIMB@?$AA_?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
CONST	SEGMENT
??_C@_1BAE@LAENHIMB@?$AA_?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5@ DB '_'
	DB	00H, 'C', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H
	DB	't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, '_', 00H, 'C', 00H, 'o', 00H
	DB	'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '<', 00H, '=', 00H, ' '
	DB	00H, '1', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H
	DB	'N', 00H, 'e', 00H, 's', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H
	DB	'l', 00H, ' ', 00H, 's', 00H, 'p', 00H, 'l', 00H, 'i', 00H, 't'
	DB	00H, 't', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i', 00H
	DB	's', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 's'
	DB	00H, 'u', 00H, 'p', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H
	DB	'e', 00H, 'd', 00H, '.', 00H, ' ', 00H, 'P', 00H, 'l', 00H, 'e'
	DB	00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'u', 00H, 's', 00H
	DB	'e', 00H, ' ', 00H, 's', 00H, 'e', 00H, 'p', 00H, 'a', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	's', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'c', 00H, 'e', 00H, 's'
	DB	00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'I', 00H, 'm', 00H
	DB	'D', 00H, 'r', 00H, 'a', 00H, 'w', 00H, 'L', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, 'S', 00H, 'p', 00H, 'l', 00H, 'i', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '.', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GA@FGMHMEOI@Nested?5channel?5splitting?5is?5not?5@
CONST	SEGMENT
??_C@_0GA@FGMHMEOI@Nested?5channel?5splitting?5is?5not?5@ DB 'Nested chan'
	DB	'nel splitting is not supported. Please use separate instances'
	DB	' of ImDrawListSplitter.', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4JA DD 0692H ; `ImDrawListSplitter::Split'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GI@CIGOLMNM@?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AAA?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAI?$AAD?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_@
CONST	SEGMENT
??_C@_1GI@CIGOLMNM@?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AAA?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAI?$AAD?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_@ DB 'f'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, '-', 00H, '>', 00H, 'C', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'e'
	DB	00H, 'r', 00H, 'A', 00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	'-', 00H, '>', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 'I', 00H, 'D'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '_', 00H, 'C', 00H
	DB	'm', 00H, 'd', 00H, 'H', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e'
	DB	00H, 'r', 00H, '.', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, 'I', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z@4JA DD 0621H ; `ImDrawList::AddText'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1JM@GAJOFMMN@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA0?$AAx?$AA0?$AAF?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAM?$AAi?$AAs?$AAu?$AAs?$AAe?$AA?5?$AAo@
CONST	SEGMENT
??_C@_1JM@GAJOFMMN@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA0?$AAx?$AA0?$AAF?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAM?$AAi?$AAs?$AAu?$AAs?$AAe?$AA?5?$AAo@ DB '('
	DB	00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H
	DB	'&', 00H, ' ', 00H, '0', 00H, 'x', 00H, '0', 00H, 'F', 00H, ')'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'M', 00H, 'i', 00H, 's'
	DB	00H, 'u', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'o', 00H, 'f', 00H
	DB	' ', 00H, 'l', 00H, 'e', 00H, 'g', 00H, 'a', 00H, 'c', 00H, 'y'
	DB	00H, ' ', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'd', 00H, 'c', 00H
	DB	'o', 00H, 'd', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'I', 00H, 'm'
	DB	00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w', 00H, 'C', 00H, 'o', 00H
	DB	'r', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'F', 00H, 'l', 00H, 'a'
	DB	00H, 'g', 00H, 's', 00H, ' ', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'u', 00H, 'e', 00H, 's', 00H, '!', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@FNKJFHEE@Misuse?5of?5legacy?5hardcoded?5ImDra@
CONST	SEGMENT
??_C@_0DF@FNKJFHEE@Misuse?5of?5legacy?5hardcoded?5ImDra@ DB 'Misuse of le'
	DB	'gacy hardcoded ImDrawCornerFlags values!', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??FixRectCornerFlags@@YAHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??FixRectCornerFlags@@YAHH@Z@4JA DD 0523H ; `FixRectCornerFlags'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z@4JA DD 0512H ; `ImDrawList::PathBezierQuadraticCurveTo'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EG@DFNGCDMN@?$AA_?$AAD?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAC?$AAu?$AAr?$AAv?$AAe?$AAT?$AAe?$AAs?$AAs?$AAe?$AAl?$AAl?$AAa?$AAt?$AAi?$AAo?$AAn?$AAT?$AAo?$AAl?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4@
CONST	SEGMENT
??_C@_1EG@DFNGCDMN@?$AA_?$AAD?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAC?$AAu?$AAr?$AAv?$AAe?$AAT?$AAe?$AAs?$AAs?$AAe?$AAl?$AAl?$AAa?$AAt?$AAi?$AAo?$AAn?$AAT?$AAo?$AAl?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4@ DB '_'
	DB	00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, '-', 00H, '>', 00H
	DB	'C', 00H, 'u', 00H, 'r', 00H, 'v', 00H, 'e', 00H, 'T', 00H, 'e'
	DB	00H, 's', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'l', 00H, 'a', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'T', 00H, 'o', 00H, 'l'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, '.', 00H, '0', 00H
	DB	'f', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z@4JA DD 0502H ; `ImDrawList::PathBezierCubicCurveTo'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??_OnChangedVtxOffset@ImDrawList@@QEAAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_OnChangedVtxOffset@ImDrawList@@QEAAXXZ@4JA DD 021fH ; `ImDrawList::_OnChangedVtxOffset'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??_OnChangedTextureID@ImDrawList@@QEAAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_OnChangedTextureID@ImDrawList@@QEAAXXZ@4JA DD 0208H ; `ImDrawList::_OnChangedTextureID'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??_OnChangedClipRect@ImDrawList@@QEAAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_OnChangedClipRect@ImDrawList@@QEAAXXZ@4JA DD 01f1H ; `ImDrawList::_OnChangedClipRect'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DI@FGNNAPCK@?$AAc?$AAu?$AAr?$AAr?$AA_?$AAc?$AAm?$AAd?$AA?9?$AA?$DO?$AAU?$AAs?$AAe?$AAr?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@FGNNAPCK@?$AAc?$AAu?$AAr?$AAr?$AA_?$AAc?$AAm?$AAd?$AA?9?$AA?$DO?$AAU?$AAs?$AAe?$AAr?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'c'
	DB	00H, 'u', 00H, 'r', 00H, 'r', 00H, '_', 00H, 'c', 00H, 'm', 00H
	DB	'd', 00H, '-', 00H, '>', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, 'C', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'b', 00H, 'a', 00H
	DB	'c', 00H, 'k', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AddCallback@ImDrawList@@QEAAXP6AXPEBU2@PEBUImDrawCmd@@@ZPEAX@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddCallback@ImDrawList@@QEAAXP6AXPEBU2@PEBUImDrawCmd@@@ZPEAX@Z@4JA DD 01ccH ; `ImDrawList::AddCallback'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1LC@MAEAJCLC@?$AAd?$AAr?$AAa?$AAw?$AA_?$AAc?$AAm?$AAd?$AA?4?$AAC?$AAl?$AAi?$AAp?$AAR?$AAe?$AAc?$AAt?$AA?4?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAd?$AAr?$AAa?$AAw?$AA_?$AAc?$AAm?$AAd?$AA?4@
CONST	SEGMENT
??_C@_1LC@MAEAJCLC@?$AAd?$AAr?$AAa?$AAw?$AA_?$AAc?$AAm?$AAd?$AA?4?$AAC?$AAl?$AAi?$AAp?$AAR?$AAe?$AAc?$AAt?$AA?4?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAd?$AAr?$AAa?$AAw?$AA_?$AAc?$AAm?$AAd?$AA?4@ DB 'd'
	DB	00H, 'r', 00H, 'a', 00H, 'w', 00H, '_', 00H, 'c', 00H, 'm', 00H
	DB	'd', 00H, '.', 00H, 'C', 00H, 'l', 00H, 'i', 00H, 'p', 00H, 'R'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '.', 00H, 'x', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'd', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, '_', 00H, 'c', 00H, 'm', 00H, 'd', 00H, '.', 00H, 'C', 00H
	DB	'l', 00H, 'i', 00H, 'p', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, '.', 00H, 'z', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'd', 00H, 'r', 00H, 'a', 00H, 'w', 00H, '_', 00H, 'c', 00H, 'm'
	DB	00H, 'd', 00H, '.', 00H, 'C', 00H, 'l', 00H, 'i', 00H, 'p', 00H
	DB	'R', 00H, 'e', 00H, 'c', 00H, 't', 00H, '.', 00H, 'y', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, 'd', 00H, 'r', 00H, 'a', 00H
	DB	'w', 00H, '_', 00H, 'c', 00H, 'm', 00H, 'd', 00H, '.', 00H, 'C'
	DB	00H, 'l', 00H, 'i', 00H, 'p', 00H, 'R', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, '.', 00H, 'w', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AddDrawCmd@ImDrawList@@QEAAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddDrawCmd@ImDrawList@@QEAAXXZ@4JA DD 01b3H ; `ImDrawList::AddDrawCmd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CC@JCMOPDC@?$AAm?$AAa?$AAx?$AA_?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@JCMOPDC@?$AAm?$AAa?$AAx?$AA_?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AAf?$AA?$AA@ DB 'm'
	DB	00H, 'a', 00H, 'x', 00H, '_', 00H, 'e', 00H, 'r', 00H, 'r', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, '.'
	DB	00H, '0', 00H, 'f', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
CONST	SEGMENT
??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'f', 00H, 'r', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, 'w', 00H, 'o', 00H, 'r', 00H, 'k', 00H, '\', 00H
	DB	't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm', 00H
	DB	'g', 00H, 'u', 00H, 'i', 00H, '_', 00H, 'd', 00H, 'r', 00H, 'a'
	DB	00H, 'w', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z@4JA DD 0173H ; `ImDrawListSharedData::SetCircleTessellationMaxError'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DO@LAPBLJ@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$CK?$AAs?$AAt?$AAr?$AAi?$AAd?$AAe?$AA_?$AAi?$AAn?$AA_?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@LAPBLJ@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$CK?$AAs?$AAt?$AAr?$AAi?$AAd?$AAe?$AA_?$AAi?$AAn?$AA_?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'p'
	DB	00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, 's', 00H, '[', 00H
	DB	'i', 00H, '*', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'i', 00H, 'n', 00H, '_', 00H, 'b', 00H
	DB	'y', 00H, 't', 00H, 'e', 00H, 's', 00H, ']', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__v_prefilter@@YAXPEAEHHHI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__v_prefilter@@YAXPEAEHHHI@Z@4JA DD 0ff3H ; `stbtt__v_prefilter'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BO@BDJAMAMF@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@BDJAMAMF@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'p'
	DB	00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, 's', 00H, '[', 00H
	DB	'i', 00H, ']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__h_prefilter@@YAXPEAEHHHI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__h_prefilter@@YAXPEAEHHHI@Z@4JA DD 0fb5H ; `stbtt__h_prefilter'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CI@PMJHELI@?$AAz?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA_?$AAy?$AA_?$AAt?$AAo?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@PMJHELI@?$AAz?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA_?$AAy?$AA_?$AAt?$AAo?$AAp?$AA?$AA@ DB 'z'
	DB	00H, '-', 00H, '>', 00H, 'e', 00H, 'y', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, 's', 00H, 'c', 00H, 'a', 00H, 'n', 00H, '_'
	DB	00H, 'y', 00H, '_', 00H, 't', 00H, 'o', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@LMAHJHLI@?$AAz?$AA?9?$AA?$DO?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@LMAHJHLI@?$AAz?$AA?9?$AA?$DO?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ DB 'z'
	DB	00H, '-', 00H, '>', 00H, 'd', 00H, 'i', 00H, 'r', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z@4JA DD 0ceaH ; `stbtt__rasterize_sorted_edges'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CI@LBLBFJLN@?$AAs?$AAy?$AA1?$AA?5?$AA?$DO?$AA?5?$AAy?$AA_?$AAf?$AAi?$AAn?$AAa?$AAl?$AA?9?$AA0?$AA?4?$AA0?$AA1?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@LBLBFJLN@?$AAs?$AAy?$AA1?$AA?5?$AA?$DO?$AA?5?$AAy?$AA_?$AAf?$AAi?$AAn?$AAa?$AAl?$AA?9?$AA0?$AA?4?$AA0?$AA1?$AAf?$AA?$AA@ DB 's'
	DB	00H, 'y', 00H, '1', 00H, ' ', 00H, '>', 00H, ' ', 00H, 'y', 00H
	DB	'_', 00H, 'f', 00H, 'i', 00H, 'n', 00H, 'a', 00H, 'l', 00H, '-'
	DB	00H, '0', 00H, '.', 00H, '0', 00H, '1', 00H, 'f', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@PHOJNIKI@?$AAf?$AAa?$AAb?$AAs?$AAf?$AA?$CI?$AAa?$AAr?$AAe?$AAa?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA?4?$AA0?$AA1?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@PHOJNIKI@?$AAf?$AAa?$AAb?$AAs?$AAf?$AA?$CI?$AAa?$AAr?$AAe?$AAa?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA?4?$AA0?$AA1?$AAf?$AA?$AA@ DB 'f'
	DB	00H, 'a', 00H, 'b', 00H, 's', 00H, 'f', 00H, '(', 00H, 'a', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, ')', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '1', 00H, '.', 00H, '0', 00H, '1', 00H, 'f', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@KAEGAKJB@?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@KAEGAKJB@?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'd'
	DB	00H, 'x', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@DNEJOLOH@?$AAd?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@DNEJOLOH@?$AAd?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'd'
	DB	00H, 'y', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@GDDDMDCC@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl?$AAe?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@GDDDMDCC@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl?$AAe?$AAn?$AA?$AA@ DB 'x'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'x', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'l', 00H, 'e', 00H, 'n', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@KOIFPDFH@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAy?$AA_?$AAb?$AAo?$AAt?$AAt?$AAo?$AAm?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_@
CONST	SEGMENT
??_C@_1EI@KOIFPDFH@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAy?$AA_?$AAb?$AAo?$AAt?$AAt?$AAo?$AAm?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_@ DB 'e'
	DB	00H, '-', 00H, '>', 00H, 's', 00H, 'y', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 'y', 00H, '_', 00H, 'b', 00H, 'o', 00H, 't'
	DB	00H, 't', 00H, 'o', 00H, 'm', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, 'e', 00H, '-', 00H, '>', 00H, 'e', 00H, 'y', 00H, ' '
	DB	00H, '>', 00H, '=', 00H, ' ', 00H, 'y', 00H, '_', 00H, 't', 00H
	DB	'o', 00H, 'p', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@MDBOACOJ@?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_?$AAt?$AAo?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@MDBOACOJ@?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_?$AAt?$AAo?$AAp?$AA?$AA@ DB 'e'
	DB	00H, '-', 00H, '>', 00H, 'e', 00H, 'y', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, 'y', 00H, '_', 00H, 't', 00H, 'o', 00H, 'p'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z@4JA DD 0c10H ; `stbtt__fill_active_edges_new'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CE@HFDPCECH@?$AAb?$AAo?$AAt?$AAt?$AAo?$AAm?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@HFDPCECH@?$AAb?$AAo?$AAt?$AAt?$AAo?$AAm?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'b'
	DB	00H, 'o', 00H, 't', 00H, 't', 00H, 'o', 00H, 'm', 00H, '_', 00H
	DB	'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>'
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@IKHHJKG@?$AAt?$AAo?$AAp?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@IKHHJKG@?$AAt?$AAo?$AAp?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 't'
	DB	00H, 'o', 00H, 'p', 00H, '_', 00H, 'w', 00H, 'i', 00H, 'd', 00H
	DB	't', 00H, 'h', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__sized_trapezoid_area@@YAMMMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__sized_trapezoid_area@@YAMMMM@Z@4JA DD 0bffH ; `stbtt__sized_trapezoid_area'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FK@JPMIPNJF@?$AAx?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA0?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5@
CONST	SEGMENT
??_C@_1FK@JPMIPNJF@?$AAx?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA0?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5@ DB 'x'
	DB	00H, '0', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'x', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '0', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '+', 00H, '1', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '1', 00H, ' '
	DB	00H, '>', 00H, '=', 00H, ' ', 00H, 'x', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 'x', 00H, '1', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, 'x', 00H, '+', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NILBPPPH@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@NILBPPPH@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@ DB 'x'
	DB	00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'x', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '1', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '+', 00H, '1', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@NGGEAFFG@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@NGGEAFFG@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@ DB 'x'
	DB	00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'x', 00H
	DB	'+', 00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@FEPJEPJJ@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@FEPJEPJJ@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$AA@ DB 'x'
	DB	00H, '1', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@FAAMJPKE@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@FAAMJPKE@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$AA@ DB 'x'
	DB	00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'x', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@DHAKMBPL@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@DHAKMBPL@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@ DB 'x'
	DB	00H, '1', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H
	DB	'+', 00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@JGPMADBG@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@JGPMADBG@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?$AA@ DB 'e'
	DB	00H, '-', 00H, '>', 00H, 's', 00H, 'y', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 'e', 00H, '-', 00H, '>', 00H, 'e', 00H, 'y'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@ENLNFFAM@?$AAy?$AA0?$AA?5?$AA?$DM?$AA?5?$AAy?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@ENLNFFAM@?$AAy?$AA0?$AA?5?$AA?$DM?$AA?5?$AAy?$AA1?$AA?$AA@ DB 'y'
	DB	00H, '0', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'y', 00H, '1', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA DD 0bdaH ; `stbtt__handle_clipped_edge'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1O@EHPNOHML@?$AAz?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1O@EHPNOHML@?$AAz?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'z', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z@4JA DD 0b2fH ; `stbtt__new_active'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GE@KABFAMEA@?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA_?$AAc?$AAt?$AAx?$AA?4?$AAn?$AAu?$AAm?$AA_?$AAv?$AAe?$AAr?$AAt?$AAi?$AAc?$AAe?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt@
CONST	SEGMENT
??_C@_1GE@KABFAMEA@?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA_?$AAc?$AAt?$AAx?$AA?4?$AAn?$AAu?$AAm?$AA_?$AAv?$AAe?$AAr?$AAt?$AAi?$AAc?$AAe?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt@ DB 'o'
	DB	00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, '_', 00H
	DB	'c', 00H, 't', 00H, 'x', 00H, '.', 00H, 'n', 00H, 'u', 00H, 'm'
	DB	00H, '_', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'i', 00H
	DB	'c', 00H, 'e', 00H, 's', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, '_', 00H
	DB	'c', 00H, 't', 00H, 'x', 00H, '.', 00H, 'n', 00H, 'u', 00H, 'm'
	DB	00H, '_', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'i', 00H
	DB	'c', 00H, 'e', 00H, 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z@4JA DD 08e3H ; `stbtt__GetGlyphShapeT2'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z@4JA DD 0690H ; `stbtt__GetGlyphShapeTT'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CA@MDABGEPC@?$AA?$CB?$AAi?$AAn?$AAf?$AAo?$AA?9?$AA?$DO?$AAc?$AAf?$AAf?$AA?4?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@MDABGEPC@?$AA?$CB?$AAi?$AAn?$AAf?$AAo?$AA?9?$AA?$DO?$AAc?$AAf?$AAf?$AA?4?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB '!'
	DB	00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H
	DB	'c', 00H, 'f', 00H, 'f', 00H, '.', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z@4JA DD 0649H ; `stbtt__GetGlyfOffset'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt_FindGlyphIndex@@9@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt_FindGlyphIndex@@9@4JA DD 05deH	; `stbtt_FindGlyphIndex'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04KODIGLGG@maxp?$AA@
CONST	SEGMENT
??_C@_04KODIGLGG@maxp?$AA@ DB 'maxp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HJGCPIEK@CFF?5?$AA@
CONST	SEGMENT
??_C@_04HJGCPIEK@CFF?5?$AA@ DB 'CFF ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PCFDEHHD@GPOS?$AA@
CONST	SEGMENT
??_C@_04PCFDEHHD@GPOS?$AA@ DB 'GPOS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HHMMLDJI@kern?$AA@
CONST	SEGMENT
??_C@_04HHMMLDJI@kern?$AA@ DB 'kern', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04ONMNCIMC@hmtx?$AA@
CONST	SEGMENT
??_C@_04ONMNCIMC@hmtx?$AA@ DB 'hmtx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FMPHLIKP@hhea?$AA@
CONST	SEGMENT
??_C@_04FMPHLIKP@hhea?$AA@ DB 'hhea', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LLIHEPK@glyf?$AA@
CONST	SEGMENT
??_C@_04LLIHEPK@glyf?$AA@ DB 'glyf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NEODDMOL@head?$AA@
CONST	SEGMENT
??_C@_04NEODDMOL@head?$AA@ DB 'head', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DACNFKGE@loca?$AA@
CONST	SEGMENT
??_C@_04DACNFKGE@loca?$AA@ DB 'loca', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EICJPCEA@cmap?$AA@
CONST	SEGMENT
??_C@_04EICJPCEA@cmap?$AA@ DB 'cmap', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KIOEMAHO@ttcf?$AA@
CONST	SEGMENT
??_C@_04KIOEMAHO@ttcf?$AA@ DB 'ttcf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LLEFIKCJ@OTTO?$AA@
CONST	SEGMENT
??_C@_04LLEFIKCJ@OTTO?$AA@ DB 'OTTO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBBEMOBJ@typ1?$AA@
CONST	SEGMENT
??_C@_04LBBEMOBJ@typ1?$AA@ DB 'typ1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@PFMEGAIA@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@PFMEGAIA@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__cff_index_get@@YA?AUstbtt__buf@@U2@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__cff_index_get@@YA?AUstbtt__buf@@U2@H@Z@4JA DD 04f2H ; `stbtt__cff_index_get'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BC@KDMJFGHG@?$AAb?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA8?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@KDMJFGHG@?$AAb?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA8?$AA?$AA@ DB 'b'
	DB	00H, '0', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '2', 00H
	DB	'8', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z@4JA DD 04c5H ; `stbtt__cff_skip_operand'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z@4JA DD 04baH ; `stbtt__cff_int'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DK@IJDIOPHB@?$AAo?$AAf?$AAf?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA4?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@IJDIOPHB@?$AAo?$AAf?$AAf?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA4?$AA?$AA@ DB 'o'
	DB	00H, 'f', 00H, 'f', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'o', 00H, 'f', 00H, 'f', 00H, 's', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, '=', 00H, ' '
	DB	00H, '4', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU2@@Z@4JA DD 04acH ; `stbtt__cff_get_index'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CE@EPOLDKHI@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AA0?$AAx?$AA4?$AA0?$AA0?$AA0?$AA0?$AA0?$AA0?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@EPOLDKHI@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AA0?$AAx?$AA4?$AA0?$AA0?$AA0?$AA0?$AA0?$AA0?$AA0?$AA?$AA@ DB 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'0', 00H, 'x', 00H, '4', 00H, '0', 00H, '0', 00H, '0', 00H, '0'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z@4JA DD 0496H ; `stbtt__new_buf'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CC@OMFGMKMB@?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA4?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@OMFGMKMB@?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA4?$AA?$AA@ DB 'n'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'n', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '4', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z@4JA DD 048cH ; `stbtt__buf_get'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DA@CPAEOPEI@?$AA?$CB?$AA?$CI?$AAo?$AA?5?$AA?$DO?$AA?5?$AAb?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAo?$AA?5?$AA?$DM?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@CPAEOPEI@?$AA?$CB?$AA?$CI?$AAo?$AA?5?$AA?$DO?$AA?5?$AAb?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAo?$AA?5?$AA?$DM?$AA?5?$AA0?$AA?$CJ?$AA?$AA@ DB '!'
	DB	00H, '(', 00H, 'o', 00H, ' ', 00H, '>', 00H, ' ', 00H, 'b', 00H
	DB	'-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' '
	DB	00H, '|', 00H, '|', 00H, ' ', 00H, 'o', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, '0', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
CONST	SEGMENT
??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'f', 00H, 'r', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, 'w', 00H, 'o', 00H, 'r', 00H, 'k', 00H, '\', 00H
	DB	't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'e', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z@4JA DD 0481H ; `stbtt__buf_seek'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DM@MABMKAHD@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAn?$AAu?$AAm?$AA_?$AAn?$AAo?$AAd?$AAe?$AAs?$AA?$CL?$AA2?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@MABMKAHD@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAn?$AAu?$AAm?$AA_?$AAn?$AAo?$AAd?$AAe?$AAs?$AA?$CL?$AA2?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'e'
	DB	00H, 'x', 00H, 't', 00H, '-', 00H, '>', 00H, 'n', 00H, 'u', 00H
	DB	'm', 00H, '_', 00H, 'n', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 's'
	DB	00H, '+', 00H, '2', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@NJIDGHPD@?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@NJIDGHPD@?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'c'
	DB	00H, 'u', 00H, 'r', 00H, '-', 00H, '>', 00H, 'n', 00H, 'e', 00H
	DB	'x', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@NCKIDPDA@?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?5?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@NCKIDPDA@?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?5?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?$AA@ DB 'c'
	DB	00H, 'u', 00H, 'r', 00H, '-', 00H, '>', 00H, 'x', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, 'c', 00H, 'u', 00H, 'r', 00H, '-', 00H, '>'
	DB	00H, 'n', 00H, 'e', 00H, 'x', 00H, 't', 00H, '-', 00H, '>', 00H
	DB	'x', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA DD 01c2H ; `stbrp__skyline_pack_rectangle'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FA@GPDJEJHP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO?$AA?5?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5@
CONST	SEGMENT
??_C@_1FA@GPDJEJHP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO?$AA?5?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5@ DB 'n'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, '-', 00H, '>', 00H, 'n', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, '-', 00H, '>', 00H, 'x', 00H, ' '
	DB	00H, '>', 00H, ' ', 00H, 'x', 00H, 'p', 00H, 'o', 00H, 's', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 'd'
	DB	00H, 'e', 00H, '-', 00H, '>', 00H, 'x', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 'x', 00H, 'p', 00H, 'o', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@MNLKNDNL@?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@MNLKNDNL@?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'x'
	DB	00H, 'p', 00H, 'o', 00H, 's', 00H, ' ', 00H, '>', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@LEHAODMI@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AAc?$AA?9?$AA?$DO?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@LEHAODMI@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AAc?$AA?9?$AA?$DO?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '%', 00H
	DB	' ', 00H, 'c', 00H, '-', 00H, '>', 00H, 'a', 00H, 'l', 00H, 'i'
	DB	00H, 'g', 00H, 'n', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA DD 015cH ; `stbrp__skyline_find_best_pos'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BM@JHJLEEND@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@JHJLEEND@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0?$AA?$AA@ DB 'n'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, '-', 00H, '>', 00H, 'x', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@BDIGDJGP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO?$AA?5?$AAx?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@BDIGDJGP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO?$AA?5?$AAx?$AA0?$AA?$AA@ DB 'n'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, '-', 00H, '>', 00H, 'n', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, '-', 00H, '>', 00H, 'x', 00H, ' '
	DB	00H, '>', 00H, ' ', 00H, 'x', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@KBODBKOH@?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@KBODBKOH@?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0?$AA?$AA@ DB 'f'
	DB	00H, 'i', 00H, 'r', 00H, 's', 00H, 't', 00H, '-', 00H, '>', 00H
	DB	'x', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z@4JA DD 0124H ; `stbrp__skyline_find_min_y'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GA@HGJIAHCP@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
CONST	SEGMENT
??_C@_1GA@HGJIAHCP@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'f', 00H, 'r', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, 'w', 00H, 'o', 00H, 'r', 00H, 'k', 00H, '\', 00H
	DB	't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0?$AA?$AA@ DB '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@HCNHOFJN@?$AAn?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAS?$AAt?$AAo?$AAr?$AAa?$AAg?$AAe?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DM?$AA?5?$AA5?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@HCNHOFJN@?$AAn?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAS?$AAt?$AAo?$AAr?$AAa?$AAg?$AAe?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DM?$AA?5?$AA5?$AA?$CJ?$AA?$AA@ DB 'n'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, '(', 00H, 'S', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'S'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, '<', 00H
	DB	' ', 00H, '5', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GA@FAIKKLKG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
CONST	SEGMENT
??_C@_1GA@FAIKKLKG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'f', 00H, 'r', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, 'w', 00H, 'o', 00H, 'r', 00H, 'k', 00H, '\', 00H
	DB	't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm', 00H
	DB	'g', 00H, 'u', 00H, 'i', 00H, '_', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'n', 00H, 'a', 00H, 'l', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@HMJJDGFN@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@HMJJDGFN@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
CONST	SEGMENT
??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'f', 00H, 'r', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, 'w', 00H, 'o', 00H, 'r', 00H, 'k', 00H, '\', 00H
	DB	't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm', 00H
	DB	'g', 00H, 'u', 00H, 'i', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$IM_DELETE@UImFont@@@@YAXPEAUImFont@@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_adler32@@YAIIPEAEI@Z DD 05053001H
	DD	0117031aH
	DD	07010002dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_decompress_token@@YAPEBEPEBE@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb__lit@@YAXPEBEI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb__match@@YAXPEBEI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImLerp@M@@YAMMMM@Z DD 015052f01H
	DD	011b1320H
	DD	07014001bH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImSwap@M@@YAXAEAM0@Z DD 05052d01H
	DD	01130316H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImAcos01@@YAMM@Z DD 035052301H
	DD	010f3314H
	DD	07008001fH
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CalcWordWrapNextLineStartA@@YAPEBDPEBD0@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z DD 05053501H
	DD	011c031fH
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z DD 035063c19H
	DD	010f3314H
	DD	07008008aH
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	0440H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z$rtcName$0 DB 075H ; ImFontAtlasBuildRenderLinesTexData
	DB	076H
	DB	030H
	DB	00H
?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z$rtcName$1 DB 075H ; ImFontAtlasBuildRenderLinesTexData
	DB	076H
	DB	031H
	DB	00H
	ORG $+8
?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z$rtcVarDesc DD 0218H ; ImFontAtlasBuildRenderLinesTexData
	DD	08H
	DQ	FLAT:?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z$rtcName$1
	DD	01f8H
	DD	08H
	DQ	FLAT:?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z$rtcName$0
	ORG $+96
?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z$rtcFrameData DD 02H ; ImFontAtlasBuildRenderLinesTexData
	DD	00H
	DQ	FLAT:?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z DD 045052a01H
	DD	010e4313H
	DD	070070039H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@Ustbtt_packedchar@@@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@Ustbtt_packedchar@@@@QEAAAEAUstbtt_packedchar@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size_in_bytes@?$ImVector@Ustbtt_packedchar@@@@QEBAHXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ DD imagerel ??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@Ustbrp_rect@@@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size_in_bytes@?$ImVector@Ustbrp_rect@@@@QEBAHXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@Ustbrp_rect@@@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ DD imagerel ??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@Ustbrp_rect@@@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImFontBuildDstData@@@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size_in_bytes@?$ImVector@UImFontBuildDstData@@@@QEBAHXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImFontBuildDstData@@@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ DD imagerel ??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImFontBuildDstData@@@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImFontBuildSrcData@@@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size_in_bytes@?$ImVector@UImFontBuildSrcData@@@@QEBAHXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear_destruct@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ DD imagerel ??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z DD imagerel ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z
	DD	0ffffffffH
	DD	imagerel ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z+257
	DD	00H
	DD	imagerel ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z+267
	DD	01H
	DD	imagerel ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z+758
	DD	00H
	DD	imagerel ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z+768
	DD	0ffffffffH
	DD	imagerel ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z+789
	DD	01H
	DD	imagerel ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z+918
	DD	00H
	DD	imagerel ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z+928
	DD	0ffffffffH
	DD	imagerel ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z+949
	DD	01H
	DD	imagerel ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z+2124
	DD	02H
	DD	imagerel ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z+2137
	DD	03H
	DD	imagerel ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z+5625
	DD	02H
	DD	imagerel ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z+5638
	DD	01H
	DD	imagerel ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z+5651
	DD	00H
	DD	imagerel ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z+5661
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
	DD	02H
	DD	imagerel ?dtor$3@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z DD 065054619H
	DD	010e6313H
	DD	0700701efH
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z
	DD	0f62H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$0 DB 073H ; ImFontAtlasBuildWithStbTruetype
	DB	072H
	DB	063H
	DB	05fH
	DB	074H
	DB	06dH
	DB	070H
	DB	05fH
	DB	061H
	DB	072H
	DB	072H
	DB	061H
	DB	079H
	DB	00H
	ORG $+2
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$1 DB 064H ; ImFontAtlasBuildWithStbTruetype
	DB	073H
	DB	074H
	DB	05fH
	DB	074H
	DB	06dH
	DB	070H
	DB	05fH
	DB	061H
	DB	072H
	DB	072H
	DB	061H
	DB	079H
	DB	00H
	ORG $+2
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$2 DB 062H ; ImFontAtlasBuildWithStbTruetype
	DB	075H
	DB	066H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	073H
	DB	00H
	ORG $+2
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$4 DB 078H ; ImFontAtlasBuildWithStbTruetype
	DB	030H
	DB	00H
	ORG $+1
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$3 DB 062H ; ImFontAtlasBuildWithStbTruetype
	DB	075H
	DB	066H
	DB	05fH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	065H
	DB	064H
	DB	063H
	DB	068H
	DB	061H
	DB	072H
	DB	073H
	DB	00H
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$5 DB 079H ; ImFontAtlasBuildWithStbTruetype
	DB	030H
	DB	00H
	ORG $+1
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$6 DB 078H ; ImFontAtlasBuildWithStbTruetype
	DB	031H
	DB	00H
	ORG $+1
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$7 DB 079H ; ImFontAtlasBuildWithStbTruetype
	DB	031H
	DB	00H
	ORG $+1
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$8 DB 073H ; ImFontAtlasBuildWithStbTruetype
	DB	070H
	DB	063H
	DB	00H
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$9 DB 06dH ; ImFontAtlasBuildWithStbTruetype
	DB	075H
	DB	06cH
	DB	074H
	DB	069H
	DB	070H
	DB	06cH
	DB	079H
	DB	05fH
	DB	074H
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+1
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$10 DB 075H ; ImFontAtlasBuildWithStbTruetype
	DB	06eH
	DB	073H
	DB	063H
	DB	061H
	DB	06cH
	DB	065H
	DB	064H
	DB	05fH
	DB	061H
	DB	073H
	DB	063H
	DB	065H
	DB	06eH
	DB	074H
	DB	00H
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$11 DB 075H ; ImFontAtlasBuildWithStbTruetype
	DB	06eH
	DB	073H
	DB	063H
	DB	061H
	DB	06cH
	DB	065H
	DB	064H
	DB	05fH
	DB	064H
	DB	065H
	DB	073H
	DB	063H
	DB	065H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+3
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$13 DB 071H ; ImFontAtlasBuildWithStbTruetype
	DB	00H
	ORG $+2
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$12 DB 075H ; ImFontAtlasBuildWithStbTruetype
	DB	06eH
	DB	073H
	DB	063H
	DB	061H
	DB	06cH
	DB	065H
	DB	064H
	DB	05fH
	DB	06cH
	DB	069H
	DB	06eH
	DB	065H
	DB	05fH
	DB	067H
	DB	061H
	DB	070H
	DB	00H
	ORG $+6
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$14 DB 075H ; ImFontAtlasBuildWithStbTruetype
	DB	06eH
	DB	075H
	DB	073H
	DB	065H
	DB	064H
	DB	05fH
	DB	078H
	DB	00H
	ORG $+7
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$15 DB 075H ; ImFontAtlasBuildWithStbTruetype
	DB	06eH
	DB	075H
	DB	073H
	DB	065H
	DB	064H
	DB	05fH
	DB	079H
	DB	00H
	ORG $+7
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcVarDesc DD 09e4H ; ImFontAtlasBuildWithStbTruetype
	DD	04H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$15
	DD	09c4H
	DD	04H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$14
	DD	0988H
	DD	020H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$13
	DD	0884H
	DD	04H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$12
	DD	0864H
	DD	04H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$11
	DD	0844H
	DD	04H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$10
	DD	0650H
	DD	0100H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$9
	DD	0530H
	DD	040H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$8
	DD	04a4H
	DD	04H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$7
	DD	0484H
	DD	04H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$6
	DD	0464H
	DD	04H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$5
	DD	0444H
	DD	04H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$4
	DD	02f8H
	DD	010H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$3
	DD	02c8H
	DD	010H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$2
	DD	098H
	DD	010H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$1
	DD	068H
	DD	010H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$0
	ORG $+768
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcFrameData DD 010H ; ImFontAtlasBuildWithStbTruetype
	DD	00H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcVarDesc
$cppxdata$?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z DD 019930522H
	DD	04H
	DD	imagerel $stateUnwindMap$?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z
	DD	00H
	DD	00H
	DD	0fH
	DD	imagerel $ip2state$?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z
	DD	0f48H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?UnpackBitVectorToFlatIndexList@@YAXPEBUImBitVector@@PEAU?$ImVector@H@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c0035H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GImFontBuildSrcData@@QEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ImFontBuildSrcData@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Decode85@@YAXPEBEPEAE@Z DD 025052f01H
	DD	01132318H
	DD	0700c0023H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Decode85Byte@@YAID@Z DD 05052701H
	DD	010d0310H
	DD	07006001bH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetDefaultCompressedFontDataTTFBase85@@YAPEBDXZ DD 05051c01H
	DD	010a030dH
	DD	070030019H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_decompress@@YAIPEAEPEBEI@Z DD 025053401H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_decompress_length@@YAIPEBE@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__EFONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImClamp@M@@YAMMMM@Z DD 015052f01H
	DD	011b1320H
	DD	07014001dH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FixRectCornerFlags@@YAHH@Z DD 025052801H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z DD 055053c01H
	DD	01205325H
	DD	07019004bH
	DD	05018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z DD 065053c01H
	DD	01206325H
	DD	070190081H
	DD	05018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImMax@H@@YAHHH@Z DD 05052a01H
	DD	01110314H
	DD	0700a001bH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImClamp@H@@YAHHHH@Z DD 05052f01H
	DD	01160319H
	DD	0700f001bH
	DD	0500eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__oversample_shift@@YAMH@Z DD 015052801H
	DD	010d1312H
	DD	07006001bH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__v_prefilter@@YAXPEAEHHHI@Z DD 025054919H
	DD	011c2321H
	DD	070150031H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__v_prefilter@@YAXPEAEHHHI@Z$rtcName$0 DB 062H	; stbtt__v_prefilter
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
	ORG $+9
?stbtt__v_prefilter@@YAXPEAEHHHI@Z$rtcVarDesc DD 028H	; stbtt__v_prefilter
	DD	08H
	DQ	FLAT:?stbtt__v_prefilter@@YAXPEAEHHHI@Z$rtcName$0
	ORG $+48
?stbtt__v_prefilter@@YAXPEAEHHHI@Z$rtcFrameData DD 01H	; stbtt__v_prefilter
	DD	00H
	DQ	FLAT:?stbtt__v_prefilter@@YAXPEAEHHHI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__h_prefilter@@YAXPEAEHHHI@Z DD 025054919H
	DD	011c2321H
	DD	070150031H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__h_prefilter@@YAXPEAEHHHI@Z$rtcName$0 DB 062H	; stbtt__h_prefilter
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
	ORG $+9
?stbtt__h_prefilter@@YAXPEAEHHHI@Z$rtcVarDesc DD 028H	; stbtt__h_prefilter
	DD	08H
	DQ	FLAT:?stbtt__h_prefilter@@YAXPEAEHHHI@Z$rtcName$0
	ORG $+48
?stbtt__h_prefilter@@YAXPEAEHHHI@Z$rtcFrameData DD 01H	; stbtt__h_prefilter
	DD	00H
	DQ	FLAT:?stbtt__h_prefilter@@YAXPEAEHHHI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z DD 065075119H
	DD	0246829H
	DD	011d6322H
	DD	07016004bH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0238H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z$rtcName$0 DB 06eH ; stbtt_FlattenCurves
	DB	075H
	DB	06dH
	DB	05fH
	DB	070H
	DB	06fH
	DB	069H
	DB	06eH
	DB	074H
	DB	073H
	DB	00H
	ORG $+5
?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z$rtcVarDesc DD 084H ; stbtt_FlattenCurves
	DD	04H
	DQ	FLAT:?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z$rtcName$0
	ORG $+48
?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z$rtcFrameData DD 01H ; stbtt_FlattenCurves
	DD	00H
	DQ	FLAT:?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z DD 065053b01H
	DD	011f6324H
	DD	070180099H
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z DD 055053b01H
	DD	011f5324H
	DD	070180033H
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z DD 05053801H
	DD	011e0321H
	DD	070170019H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z DD 045053901H
	DD	011d4322H
	DD	07016004dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z DD 025062f01H
	DD	01132318H
	DD	0700c003eH
	DD	0500a600bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z$rtcName$0 DB 074H ; stbtt__sort_edges_quicksort
	DB	00H
	ORG $+14
?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z$rtcVarDesc DD 028H ; stbtt__sort_edges_quicksort
	DD	014H
	DQ	FLAT:?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z$rtcName$0
	ORG $+48
?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z$rtcFrameData DD 01H ; stbtt__sort_edges_quicksort
	DD	00H
	DQ	FLAT:?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z DD 025064019H
	DD	01132318H
	DD	0700c0038H
	DD	0500a600bH
	DD	imagerel __GSHandlerCheck
	DD	01b0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z$rtcName$0 DB 074H ; stbtt__sort_edges_ins_sort
	DB	00H
	ORG $+14
?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z$rtcVarDesc DD 068H ; stbtt__sort_edges_ins_sort
	DD	014H
	DQ	FLAT:?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z$rtcName$0
	ORG $+48
?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z$rtcFrameData DD 01H ; stbtt__sort_edges_ins_sort
	DD	00H
	DQ	FLAT:?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z DD 035054a19H
	DD	011d3322H
	DD	0701600d7H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	06a8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcName$0 DB 068H ; stbtt__rasterize_sorted_edges
	DB	068H
	DB	00H
	ORG $+1
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcName$1 DB 061H ; stbtt__rasterize_sorted_edges
	DB	063H
	DB	074H
	DB	069H
	DB	076H
	DB	065H
	DB	00H
	ORG $+5
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcName$2 DB 073H ; stbtt__rasterize_sorted_edges
	DB	063H
	DB	061H
	DB	06eH
	DB	06cH
	DB	069H
	DB	06eH
	DB	065H
	DB	05fH
	DB	064H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+2
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcVarDesc DD 0f0H ; stbtt__rasterize_sorted_edges
	DD	0204H
	DQ	FLAT:?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcName$2
	DD	068H
	DD	08H
	DQ	FLAT:?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcName$1
	DD	038H
	DD	018H
	DQ	FLAT:?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcName$0
	ORG $+144
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcFrameData DD 03H ; stbtt__rasterize_sorted_edges
	DD	00H
	DQ	FLAT:?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z DD 045053901H
	DD	011d4322H
	DD	0701600b3H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__sized_triangle_area@@YAMMM@Z DD 015052901H
	DD	0115131aH
	DD	0700e001bH
	DD	0500dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__position_trapezoid_area@@YAMMMMMM@Z DD 035053501H
	DD	01213326H
	DD	0701a001fH
	DD	05019H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__sized_trapezoid_area@@YAMMMM@Z DD 035052f01H
	DD	011b3320H
	DD	07014001fH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z DD 025053a01H
	DD	011e2323H
	DD	070170025H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z DD 025052f01H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z DD 025053401H
	DD	0118231dH
	DD	070110029H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD 025054419H
	DD	0117231cH
	DD	070100031H
	DD	0500fH
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcName$0 DB 063H ; stbtt__GetGlyphShapeT2
	DB	06fH
	DB	075H
	DB	06eH
	DB	074H
	DB	05fH
	DB	063H
	DB	074H
	DB	078H
	DB	00H
	ORG $+6
?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcName$1 DB 06fH ; stbtt__GetGlyphShapeT2
	DB	075H
	DB	074H
	DB	070H
	DB	075H
	DB	074H
	DB	05fH
	DB	063H
	DB	074H
	DB	078H
	DB	00H
	ORG $+5
?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcVarDesc DD 078H ; stbtt__GetGlyphShapeT2
	DD	038H
	DQ	FLAT:?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcName$1
	DD	028H
	DD	038H
	DQ	FLAT:?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcName$0
	ORG $+96
?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcFrameData DD 02H ; stbtt__GetGlyphShapeT2
	DD	00H
	DQ	FLAT:?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z DD 045064519H
	DD	0118431dH
	DD	07011013eH
	DD	0500f6010H
	DD	imagerel __GSHandlerCheck
	DD	09e0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcName$0 DB 073H ; stbtt__run_charstring
	DB	00H
	ORG $+6
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcName$1 DB 073H ; stbtt__run_charstring
	DB	075H
	DB	062H
	DB	072H
	DB	05fH
	DB	073H
	DB	074H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+1
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcName$2 DB 073H ; stbtt__run_charstring
	DB	075H
	DB	062H
	DB	072H
	DB	073H
	DB	00H
	ORG $+2
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcName$3 DB 062H ; stbtt__run_charstring
	DB	00H
	ORG $+2
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcVarDesc DD 0338H ; stbtt__run_charstring
	DD	010H
	DQ	FLAT:?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcName$3
	DD	0308H
	DD	010H
	DQ	FLAT:?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcName$2
	DD	0250H
	DD	0a0H
	DQ	FLAT:?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcName$1
	DD	0170H
	DD	0c0H
	DQ	FLAT:?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcName$0
	ORG $+192
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcFrameData DD 04H ; stbtt__run_charstring
	DD	00H
	DQ	FLAT:?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z DD 025064619H
	DD	0119231eH
	DD	07012008cH
	DD	050106011H
	DD	imagerel __GSHandlerCheck
	DD	0458H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z$rtcName$0 DB 066H ; stbtt__cid_get_glyph_subrs
	DB	064H
	DB	073H
	DB	065H
	DB	06cH
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+7
?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z$rtcVarDesc DD 028H ; stbtt__cid_get_glyph_subrs
	DD	010H
	DQ	FLAT:?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z$rtcName$0
	ORG $+48
?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z$rtcFrameData DD 01H ; stbtt__cid_get_glyph_subrs
	DD	00H
	DQ	FLAT:?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z DD 025063501H
	DD	0119231eH
	DD	070120042H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z DD 045053c01H
	DD	01204325H
	DD	070190031H
	DD	05018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z DD 045053601H
	DD	011a431fH
	DD	070130021H
	DD	05012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z DD 045053601H
	DD	011a431fH
	DD	070130023H
	DD	05012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z DD 045052a01H
	DD	010e4313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z DD 035053801H
	DD	011c3321H
	DD	07015001fH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z DD 05053101H
	DD	0117031aH
	DD	070100019H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD 055054419H
	DD	0117531cH
	DD	0701000ffH
	DD	0500fH
	DD	imagerel __GSHandlerCheck
	DD	07e0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcName$0 DB 063H ; stbtt__GetGlyphShapeTT
	DB	06fH
	DB	06dH
	DB	070H
	DB	05fH
	DB	076H
	DB	065H
	DB	072H
	DB	074H
	DB	073H
	DB	00H
	ORG $+1
?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcName$1 DB 06dH ; stbtt__GetGlyphShapeTT
	DB	074H
	DB	078H
	DB	00H
?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcVarDesc DD 04d8H ; stbtt__GetGlyphShapeTT
	DD	018H
	DQ	FLAT:?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcName$1
	DD	0498H
	DD	08H
	DQ	FLAT:?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcName$0
	ORG $+96
?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcFrameData DD 02H ; stbtt__GetGlyphShapeTT
	DD	00H
	DQ	FLAT:?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z DD 035053801H
	DD	011c3321H
	DD	070150021H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z DD 025054919H
	DD	011c2321H
	DD	07015002bH
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0148H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z$rtcName$0 DB 063H ; stbtt__GetGlyphInfoT2
	DB	00H
	ORG $+14
?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z$rtcVarDesc DD 028H ; stbtt__GetGlyphInfoT2
	DD	038H
	DQ	FLAT:?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z$rtcName$0
	ORG $+48
?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z$rtcFrameData DD 01H ; stbtt__GetGlyphInfoT2
	DD	00H
	DQ	FLAT:?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b0025H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z DD 05053601H
	DD	011c031fH
	DD	070150019H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z DD 025064619H
	DD	0119231eH
	DD	07012014cH
	DD	050106011H
	DD	imagerel __GSHandlerCheck
	DD	0a58H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$0 DB 062H ; stbtt_InitFont_internal
	DB	00H
	ORG $+6
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$1 DB 074H ; stbtt_InitFont_internal
	DB	06fH
	DB	070H
	DB	064H
	DB	069H
	DB	063H
	DB	074H
	DB	00H
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$2 DB 074H ; stbtt_InitFont_internal
	DB	06fH
	DB	070H
	DB	064H
	DB	069H
	DB	063H
	DB	074H
	DB	069H
	DB	064H
	DB	078H
	DB	00H
	ORG $+1
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$3 DB 063H ; stbtt_InitFont_internal
	DB	073H
	DB	074H
	DB	079H
	DB	070H
	DB	065H
	DB	00H
	ORG $+5
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$4 DB 063H ; stbtt_InitFont_internal
	DB	068H
	DB	061H
	DB	072H
	DB	073H
	DB	074H
	DB	072H
	DB	069H
	DB	06eH
	DB	067H
	DB	073H
	DB	00H
	ORG $+4
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$5 DB 066H ; stbtt_InitFont_internal
	DB	064H
	DB	061H
	DB	072H
	DB	072H
	DB	061H
	DB	079H
	DB	06fH
	DB	066H
	DB	066H
	DB	00H
	ORG $+5
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$6 DB 066H ; stbtt_InitFont_internal
	DB	064H
	DB	073H
	DB	065H
	DB	06cH
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	066H
	DB	066H
	DB	00H
	ORG $+12
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcVarDesc DD 0194H ; stbtt_InitFont_internal
	DD	04H
	DQ	FLAT:?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$6
	DD	0174H
	DD	04H
	DQ	FLAT:?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$5
	DD	0154H
	DD	04H
	DQ	FLAT:?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$4
	DD	0134H
	DD	04H
	DQ	FLAT:?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$3
	DD	0108H
	DD	010H
	DQ	FLAT:?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$2
	DD	0d8H
	DD	010H
	DQ	FLAT:?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$1
	DD	0a8H
	DD	010H
	DQ	FLAT:?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$0
	ORG $+336
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcFrameData DD 07H ; stbtt_InitFont_internal
	DD	00H
	DQ	FLAT:?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z DD 025064619H
	DD	0119231eH
	DD	07012005aH
	DD	050106011H
	DD	imagerel __GSHandlerCheck
	DD	02c8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcName$0 DB 073H ; stbtt__get_subrs
	DB	075H
	DB	062H
	DB	072H
	DB	073H
	DB	06fH
	DB	066H
	DB	066H
	DB	00H
	ORG $+7
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcName$1 DB 070H ; stbtt__get_subrs
	DB	072H
	DB	069H
	DB	076H
	DB	061H
	DB	074H
	DB	065H
	DB	05fH
	DB	06cH
	DB	06fH
	DB	063H
	DB	00H
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcName$2 DB 070H ; stbtt__get_subrs
	DB	064H
	DB	069H
	DB	063H
	DB	074H
	DB	00H
	ORG $+6
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcFrameData DD 03H ; stbtt__get_subrs
	DD	00H
	DQ	FLAT:?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcVarDesc
	ORG $+8
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcVarDesc DD 068H ; stbtt__get_subrs
	DD	010H
	DQ	FLAT:?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__find_table@@YAIPEAEIPEBD@Z DD 025053301H
	DD	0117231cH
	DD	07010002dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__isfont@@YAHPEAE@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ttLONG@@YAHPEAE@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ttULONG@@YAIPEAE@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ttSHORT@@YAFPEAE@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ttUSHORT@@YAGPEAE@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z DD 025063501H
	DD	0119231eH
	DD	070120038H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z DD 025064a19H
	DD	011d2322H
	DD	070160032H
	DD	050146015H
	DD	imagerel __GSHandlerCheck
	DD	0188H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z$rtcName$0 DB 06fH ; stbtt__dict_get_ints
	DB	070H
	DB	065H
	DB	072H
	DB	061H
	DB	06eH
	DB	064H
	DB	073H
	DB	00H
	ORG $+7
?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z$rtcVarDesc DD 048H ; stbtt__dict_get_ints
	DD	010H
	DQ	FLAT:?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z$rtcName$0
	ORG $+48
?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z$rtcFrameData DD 01H ; stbtt__dict_get_ints
	DD	00H
	DQ	FLAT:?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z DD 025063501H
	DD	0119231eH
	DD	070120040H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z DD 025063001H
	DD	01142319H
	DD	0700d0034H
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z DD 025063a01H
	DD	011e2323H
	DD	07017002eH
	DD	050156016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z$rtcName$0 DB 072H ; stbtt__buf_range
	DB	00H
	ORG $+14
?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z$rtcVarDesc DD 028H ; stbtt__buf_range
	DD	010H
	DQ	FLAT:?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z$rtcName$0
	ORG $+48
?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z$rtcFrameData DD 01H ; stbtt__buf_range
	DD	00H
	DQ	FLAT:?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z DD 025063501H
	DD	0119231eH
	DD	070120022H
	DD	050106011H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z$rtcName$0 DB 072H ; stbtt__new_buf
	DB	00H
	ORG $+14
?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z$rtcVarDesc DD 028H ; stbtt__new_buf
	DD	010H
	DQ	FLAT:?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z$rtcName$0
	ORG $+48
?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z$rtcFrameData DD 01H ; stbtt__new_buf
	DD	00H
	DQ	FLAT:?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b0025H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z DD 05052801H
	DD	010e0311H
	DD	07007001bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_Rasterize DD 065054b19H
	DD	011e6323H
	DD	070170035H
	DD	05016H
	DD	imagerel __GSHandlerCheck
	DD	0198H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
stbtt_Rasterize$rtcName$0 DB 077H
	DB	069H
	DB	06eH
	DB	064H
	DB	069H
	DB	06eH
	DB	067H
	DB	05fH
	DB	063H
	DB	06fH
	DB	075H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+2
stbtt_Rasterize$rtcName$1 DB 077H
	DB	069H
	DB	06eH
	DB	064H
	DB	069H
	DB	06eH
	DB	067H
	DB	05fH
	DB	06cH
	DB	065H
	DB	06eH
	DB	067H
	DB	074H
	DB	068H
	DB	073H
	DB	00H
stbtt_Rasterize$rtcVarDesc DD 0a8H
	DD	08H
	DQ	FLAT:stbtt_Rasterize$rtcName$1
	DD	084H
	DD	04H
	DQ	FLAT:stbtt_Rasterize$rtcName$0
	ORG $+96
stbtt_Rasterize$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:stbtt_Rasterize$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_GetGlyphBitmapBoxSubpixel DD 035054b19H
	DD	011e3323H
	DD	07017002fH
	DD	05016H
	DD	imagerel __GSHandlerCheck
	DD	0168H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
stbtt_GetGlyphBitmapBoxSubpixel$rtcName$0 DB 078H
	DB	030H
	DB	00H
	ORG $+1
stbtt_GetGlyphBitmapBoxSubpixel$rtcName$1 DB 079H
	DB	030H
	DB	00H
	ORG $+1
stbtt_GetGlyphBitmapBoxSubpixel$rtcName$2 DB 078H
	DB	031H
	DB	00H
	ORG $+1
stbtt_GetGlyphBitmapBoxSubpixel$rtcName$3 DB 079H
	DB	031H
	DB	00H
	ORG $+1
stbtt_GetGlyphBitmapBoxSubpixel$rtcVarDesc DD 094H
	DD	04H
	DQ	FLAT:stbtt_GetGlyphBitmapBoxSubpixel$rtcName$3
	DD	074H
	DD	04H
	DQ	FLAT:stbtt_GetGlyphBitmapBoxSubpixel$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:stbtt_GetGlyphBitmapBoxSubpixel$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:stbtt_GetGlyphBitmapBoxSubpixel$rtcName$0
	ORG $+192
stbtt_GetGlyphBitmapBoxSubpixel$rtcFrameData DD 04H
	DD	00H
	DQ	FLAT:stbtt_GetGlyphBitmapBoxSubpixel$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_GetGlyphBitmapBox DD 055053a01H
	DD	011e5323H
	DD	070170023H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_MakeGlyphBitmapSubpixel DD 065054a19H
	DD	011d6322H
	DD	07016003bH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	01c8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
stbtt_MakeGlyphBitmapSubpixel$rtcName$0 DB 069H
	DB	078H
	DB	030H
	DB	00H
stbtt_MakeGlyphBitmapSubpixel$rtcName$1 DB 069H
	DB	079H
	DB	030H
	DB	00H
stbtt_MakeGlyphBitmapSubpixel$rtcName$2 DB 076H
	DB	065H
	DB	072H
	DB	074H
	DB	069H
	DB	063H
	DB	065H
	DB	073H
	DB	00H
	ORG $+3
stbtt_MakeGlyphBitmapSubpixel$rtcName$3 DB 067H
	DB	062H
	DB	06dH
	DB	00H
	ORG $+8
stbtt_MakeGlyphBitmapSubpixel$rtcVarDesc DD 0e8H
	DD	018H
	DQ	FLAT:stbtt_MakeGlyphBitmapSubpixel$rtcName$3
	DD	0a8H
	DD	08H
	DQ	FLAT:stbtt_MakeGlyphBitmapSubpixel$rtcName$2
	DD	084H
	DD	04H
	DQ	FLAT:stbtt_MakeGlyphBitmapSubpixel$rtcName$1
	DD	064H
	DD	04H
	DQ	FLAT:stbtt_MakeGlyphBitmapSubpixel$rtcName$0
	ORG $+192
stbtt_MakeGlyphBitmapSubpixel$rtcFrameData DD 04H
	DD	00H
	DQ	FLAT:stbtt_MakeGlyphBitmapSubpixel$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_GetGlyphShape DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_GetGlyphBox DD 035053801H
	DD	011c3321H
	DD	070150023H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_GetGlyphHMetrics DD 025053801H
	DD	011c2321H
	DD	070150021H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_GetFontVMetrics DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_ScaleForMappingEmToPixels DD 035053001H
	DD	01143319H
	DD	0700d0023H
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_ScaleForPixelHeight DD 035053001H
	DD	01143319H
	DD	0700d0023H
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_FindGlyphIndex DD 025052e01H
	DD	01122317H
	DD	0700b0095H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_InitFont DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_GetFontOffsetForIndex DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_PackFontRangesRenderIntoRects DD 055064b19H
	DD	011e5323H
	DD	07017009aH
	DD	050156016H
	DD	imagerel __GSHandlerCheck
	DD	04c8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
stbtt_PackFontRangesRenderIntoRects$rtcName$0 DB 061H
	DB	064H
	DB	076H
	DB	061H
	DB	06eH
	DB	063H
	DB	065H
	DB	00H
stbtt_PackFontRangesRenderIntoRects$rtcName$1 DB 06cH
	DB	073H
	DB	062H
	DB	00H
stbtt_PackFontRangesRenderIntoRects$rtcName$2 DB 078H
	DB	030H
	DB	00H
	ORG $+1
stbtt_PackFontRangesRenderIntoRects$rtcName$3 DB 079H
	DB	030H
	DB	00H
	ORG $+1
stbtt_PackFontRangesRenderIntoRects$rtcName$4 DB 078H
	DB	031H
	DB	00H
	ORG $+1
stbtt_PackFontRangesRenderIntoRects$rtcName$5 DB 079H
	DB	031H
	DB	00H
	ORG $+5
stbtt_PackFontRangesRenderIntoRects$rtcVarDesc DD 02d4H
	DD	04H
	DQ	FLAT:stbtt_PackFontRangesRenderIntoRects$rtcName$5
	DD	02b4H
	DD	04H
	DQ	FLAT:stbtt_PackFontRangesRenderIntoRects$rtcName$4
	DD	0294H
	DD	04H
	DQ	FLAT:stbtt_PackFontRangesRenderIntoRects$rtcName$3
	DD	0274H
	DD	04H
	DQ	FLAT:stbtt_PackFontRangesRenderIntoRects$rtcName$2
	DD	0254H
	DD	04H
	DQ	FLAT:stbtt_PackFontRangesRenderIntoRects$rtcName$1
	DD	0234H
	DD	04H
	DQ	FLAT:stbtt_PackFontRangesRenderIntoRects$rtcName$0
	ORG $+288
stbtt_PackFontRangesRenderIntoRects$rtcFrameData DD 06H
	DD	00H
	DQ	FLAT:stbtt_PackFontRangesRenderIntoRects$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_GetPackedQuad DD 025053801H
	DD	011c2321H
	DD	070150031H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_PackEnd DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_PackBegin DD 035053901H
	DD	011d3322H
	DD	07016002bH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?rect_original_order@@YAHPEBX0@Z DD 05052d01H
	DD	01130316H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?rect_height_compare@@YAHPEBX0@Z DD 05052d01H
	DD	01130316H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z DD 025063a01H
	DD	011e2323H
	DD	070170042H
	DD	050156016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcName$0 DB 072H ; stbrp__skyline_pack_rectangle
	DB	065H
	DB	073H
	DB	00H
	ORG $+12
?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcVarDesc DD 028H ; stbrp__skyline_pack_rectangle
	DD	010H
	DQ	FLAT:?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcName$0
	ORG $+48
?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcFrameData DD 01H ; stbrp__skyline_pack_rectangle
	DD	00H
	DQ	FLAT:?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z DD 035064b19H
	DD	011e3323H
	DD	070170054H
	DD	050156016H
	DD	imagerel __GSHandlerCheck
	DD	0298H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcName$0 DB 066H ; stbrp__skyline_find_best_pos
	DB	072H
	DB	00H
	ORG $+1
?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcName$1 DB 077H ; stbrp__skyline_find_best_pos
	DB	061H
	DB	073H
	DB	074H
	DB	065H
	DB	00H
	ORG $+2
?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcName$2 DB 077H ; stbrp__skyline_find_best_pos
	DB	061H
	DB	073H
	DB	074H
	DB	065H
	DB	00H
	ORG $+6
?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcFrameData DD 03H ; stbrp__skyline_find_best_pos
	DD	00H
	DQ	FLAT:?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcVarDesc
	ORG $+8
?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcVarDesc DD 01c4H ; stbrp__skyline_find_best_pos
	DD	04H
	DQ	FLAT:?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcName$2
	DD	0164H
	DD	04H
	DQ	FLAT:?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcName$1
	DD	098H
	DD	010H
	DQ	FLAT:?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z DD 025053901H
	DD	011d2322H
	DD	070160035H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbrp_setup_allow_out_of_mem DD 05052c01H
	DD	01120315H
	DD	0700b0019H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbrp_init_target DD 025053801H
	DD	011c2321H
	DD	070150021H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbrp_pack_rects DD 025063501H
	DD	0119231eH
	DD	070120036H
	DD	050106011H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
stbrp_pack_rects$rtcName$0 DB 066H
	DB	072H
	DB	00H
	ORG $+13
stbrp_pack_rects$rtcVarDesc DD 068H
	DD	010H
	DQ	FLAT:stbrp_pack_rects$rtcName$0
	ORG $+48
stbrp_pack_rects$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:stbrp_pack_rects$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildMultiplyRectAlpha8@@YAXQEBEPEAEHHHHH@Z DD 05053701H
	DD	011d0320H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildMultiplyCalcLookupTable@@YAXQEAEM@Z DD 05052e01H
	DD	01140317H
	DD	0700d0021H
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z DD 025053801H
	DD	011c2321H
	DD	070150029H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z DD 025053801H
	DD	011c2321H
	DD	070150029H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z DD 065053b19H
	DD	010e6313H
	DD	070070039H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	01b8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z$rtcName$0 DB 075H ; ImFontAtlasBuildFinish
	DB	076H
	DB	030H
	DB	00H
?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z$rtcName$1 DB 075H ; ImFontAtlasBuildFinish
	DB	076H
	DB	031H
	DB	00H
	ORG $+8
?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z$rtcVarDesc DD 0c8H ; ImFontAtlasBuildFinish
	DD	08H
	DQ	FLAT:?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z$rtcName$1
	DD	0a8H
	DD	08H
	DQ	FLAT:?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z$rtcName$0
	ORG $+96
?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z$rtcFrameData DD 02H ; ImFontAtlasBuildFinish
	DD	00H
	DQ	FLAT:?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z DD imagerel ?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z
	DD	0ffffffffH
	DD	imagerel ?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z+195
	DD	00H
	DD	imagerel ?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z+770
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z DD 025054b19H
	DD	01132318H
	DD	0700c0039H
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z
	DD	01baH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z$rtcName$0 DB 070H ; ImFontAtlasBuildPackCustomRects
	DB	061H
	DB	063H
	DB	06bH
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	073H
	DB	00H
	ORG $+5
?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z$rtcVarDesc DD 068H ; ImFontAtlasBuildPackCustomRects
	DD	010H
	DQ	FLAT:?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z$rtcName$0
	ORG $+48
?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z$rtcFrameData DD 01H ; ImFontAtlasBuildPackCustomRects
	DD	00H
	DQ	FLAT:?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z$rtcVarDesc
$cppxdata$?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z
	DD	0198H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildSetupFont@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontConfig@@MM@Z DD 025053a01H
	DD	011e2323H
	DD	07017001dH
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildInit@@YAXPEAUImFontAtlas@@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ DD 05051c01H
	DD	010a030dH
	DD	070030019H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z DD 025054919H
	DD	011c2321H
	DD	07015007fH
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	03e0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$0 DB 073H ; ImGui::ShadeVertsLinearUV
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+3
?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$1 DB 075H ; ImGui::ShadeVertsLinearUV
	DB	076H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$2 DB 073H ; ImGui::ShadeVertsLinearUV
	DB	063H
	DB	061H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+2
?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$3 DB 06dH ; ImGui::ShadeVertsLinearUV
	DB	069H
	DB	06eH
	DB	00H
?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$4 DB 06dH ; ImGui::ShadeVertsLinearUV
	DB	061H
	DB	078H
	DB	00H
?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcVarDesc DD 0e8H ; ImGui::ShadeVertsLinearUV
	DD	08H
	DQ	FLAT:?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$4
	DD	0c8H
	DD	08H
	DQ	FLAT:?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$3
	DD	068H
	DD	08H
	DQ	FLAT:?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$0
	ORG $+240
?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcFrameData DD 05H ; ImGui::ShadeVertsLinearUV
	DD	00H
	DQ	FLAT:?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z DD 025054919H
	DD	011c2321H
	DD	070150079H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	03b8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z$rtcName$0 DB 067H ; ImGui::ShadeVertsLinearColorGradientKeepAlpha
	DB	072H
	DB	061H
	DB	064H
	DB	069H
	DB	065H
	DB	06eH
	DB	074H
	DB	05fH
	DB	065H
	DB	078H
	DB	074H
	DB	065H
	DB	06eH
	DB	074H
	DB	00H
?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z$rtcVarDesc DD 028H ; ImGui::ShadeVertsLinearColorGradientKeepAlpha
	DD	08H
	DQ	FLAT:?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z$rtcName$0
	ORG $+48
?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z$rtcFrameData DD 01H ; ImGui::ShadeVertsLinearColorGradientKeepAlpha
	DD	00H
	DQ	FLAT:?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderRectFilledWithHole@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@1IM@Z DD 035053901H
	DD	011d3322H
	DD	070160089H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z DD 035054b19H
	DD	011e3323H
	DD	070170091H
	DD	05016H
	DD	imagerel __GSHandlerCheck
	DD	0470H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z$rtcName$0 DB 070H ; ImGui::RenderRectFilledRangeH
	DB	030H
	DB	00H
	ORG $+1
?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z$rtcName$1 DB 070H ; ImGui::RenderRectFilledRangeH
	DB	031H
	DB	00H
	ORG $+9
?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z$rtcVarDesc DD 058H ; ImGui::RenderRectFilledRangeH
	DD	08H
	DQ	FLAT:?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z$rtcName$0
	ORG $+96
?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z$rtcFrameData DD 02H ; ImGui::RenderRectFilledRangeH
	DD	00H
	DQ	FLAT:?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z DD 035053901H
	DD	011d3322H
	DD	07016003fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderCheckMark@ImGui@@YAXPEAUImDrawList@@UImVec2@@IM@Z DD 025053a01H
	DD	011e2323H
	DD	07017003dH
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z DD 035053401H
	DD	0118331dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z DD 035054a19H
	DD	011d3322H
	DD	070160091H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0478H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcName$0 DB 063H ; ImGui::RenderArrow
	DB	065H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	00H
	ORG $+1
?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcName$1 DB 061H ; ImGui::RenderArrow
	DB	00H
	ORG $+2
?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcName$2 DB 062H ; ImGui::RenderArrow
	DB	00H
	ORG $+2
?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcName$3 DB 063H ; ImGui::RenderArrow
	DB	00H
	ORG $+6
?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcFrameData DD 04H ; ImGui::RenderArrow
	DD	00H
	DQ	FLAT:?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcVarDesc
	ORG $+8
?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcVarDesc DD 0d8H ; ImGui::RenderArrow
	DD	08H
	DQ	FLAT:?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcName$3
	DD	0b8H
	DD	08H
	DQ	FLAT:?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcName$2
	DD	098H
	DD	08H
	DQ	FLAT:?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcName$1
	DD	078H
	DD	08H
	DQ	FLAT:?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z DD 035053901H
	DD	011d3322H
	DD	07016004fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z DD 025053001H
	DD	01142319H
	DD	0700d0025H
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ImDrawListSharedData@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ImDrawListSharedData@@QEAA@XZ DD imagerel ??0ImDrawListSharedData@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0ImDrawListSharedData@@QEAA@XZ+107
	DD	00H
	DD	imagerel ??0ImDrawListSharedData@@QEAA@XZ+389
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ImDrawListSharedData@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0ImDrawListSharedData@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ImDrawListSharedData@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0ImDrawListSharedData@@QEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0ImDrawListSharedData@@QEAA@XZ
	DD	0148H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImDrawListSharedData@@QEAA@XZ DD 025053511H
	DD	010e2313H
	DD	07007002dH
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ImDrawListSharedData@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@H@@QEAAXAEBH@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@H@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@H@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@H@@QEAAAEAHH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@H@@QEAA@XZ DD imagerel ??1?$ImVector@H@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@H@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@H@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@H@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@H@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ImBitVector@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetBit@ImBitVector@@QEAAXH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TestBit@ImBitVector@@QEBA_NH@Z DD 025031301H
	DD	0d20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Clear@ImBitVector@@QEAAXXZ DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Create@ImBitVector@@QEAAXH@Z DD 025031301H
	DD	0b20e2313H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImBitArraySetBit@@YAXPEAIH@Z DD 05031101H
	DD	0920e0311H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImBezierQuadraticCalc@@YA?AUImVec2@@AEBU1@00M@Z DD 025053901H
	DD	011d2322H
	DD	07016002dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImBezierCubicCalc@@YA?AUImVec2@@AEBU1@000M@Z DD 025053901H
	DD	011d2322H
	DD	070160031H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImMul@@YA?AUImVec2@@AEBU1@0@Z DD 025031901H
	DD	0b2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImMax@M@@YAMMM@Z DD 015052901H
	DD	0115131aH
	DD	0700e001dH
	DD	0500dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImMin@M@@YAMMM@Z DD 015052901H
	DD	0115131aH
	DD	0700e001dH
	DD	0500dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImDot@@YAMAEBUImVec2@@0@Z DD 05031201H
	DD	0720f0312H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFloorSigned@@YAMM@Z DD 05030e01H
	DD	0920b030eH
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFloor@@YAMM@Z DD 05030e01H
	DD	0720b030eH
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImLengthSqr@@YAMAEBUImVec2@@@Z DD 05030d01H
	DD	0720a030dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z DD 035032201H
	DD	0f21d3322H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z DD 025031e01H
	DD	0d219231eH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImMax@@YA?AUImVec2@@AEBU1@0@Z DD 025031901H
	DD	0d2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImMin@@YA?AUImVec2@@AEBU1@0@Z DD 025031901H
	DD	0d2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImRsqrt@@YAMM@Z DD 05030e01H
	DD	0d20b030eH
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImAbs@@YAMM@Z DD 025031001H
	DD	0b20b2310H
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImAbs@@YAHH@Z DD 05030c01H
	DD	09209030cH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z DD 05031201H
	DD	0720f0312H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D@YA?AUImVec2@@AEBU0@0@Z DD 025031901H
	DD	0b2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??G@YA?AUImVec2@@AEBU0@0@Z DD 025031901H
	DD	0b2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??H@YA?AUImVec2@@AEBU0@0@Z DD 025031901H
	DD	0b2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D@YA?AUImVec2@@AEBU0@M@Z DD 025031a01H
	DD	0b215231aH
	DD	05011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImCharIsBlankW@@YA_NI@Z DD 05030c01H
	DD	09209030cH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImCharIsBlankA@@YA_ND@Z DD 05030c01H
	DD	09209030cH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImUpperPowerOfTwo@@YAHH@Z DD 05052601H
	DD	010d0310H
	DD	070060019H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImQsort@@YAXPEAX_K1P6AHPEBX2@Z@Z DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fabsf DD 035052301H
	DD	010f3314H
	DD	07008001fH
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GImFont@@QEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IsGlyphRangeUnused@ImFont@@QEAA_NII@Z DD 05053101H
	DD	0117031aH
	DD	070100025H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetGlyphVisible@ImFont@@QEAAXG_N@Z DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddRemapChar@ImFont@@QEAAXGG_N@Z DD 025053a01H
	DD	011e2323H
	DD	070170021H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z DD 025053b01H
	DD	011f2324H
	DD	07018002dH
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GrowIndex@ImFont@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0025H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearOutputData@ImFont@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BuildLookupTable@ImFont@@QEAAXXZ DD 025063c19H
	DD	010f2314H
	DD	07008004eH
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	0260H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?BuildLookupTable@ImFont@@QEAAXXZ$rtcName$0 DB 065H	; ImFont::BuildLookupTable
	DB	06cH
	DB	06cH
	DB	069H
	DB	070H
	DB	073H
	DB	069H
	DB	073H
	DB	05fH
	DB	063H
	DB	068H
	DB	061H
	DB	072H
	DB	073H
	DB	00H
	ORG $+1
?BuildLookupTable@ImFont@@QEAAXXZ$rtcName$1 DB 064H	; ImFont::BuildLookupTable
	DB	06fH
	DB	074H
	DB	073H
	DB	05fH
	DB	063H
	DB	068H
	DB	061H
	DB	072H
	DB	073H
	DB	00H
	ORG $+5
?BuildLookupTable@ImFont@@QEAAXXZ$rtcName$2 DB 066H	; ImFont::BuildLookupTable
	DB	061H
	DB	06cH
	DB	06cH
	DB	062H
	DB	061H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	068H
	DB	061H
	DB	072H
	DB	073H
	DB	00H
	ORG $+1
?BuildLookupTable@ImFont@@QEAAXXZ$rtcVarDesc DD 0164H	; ImFont::BuildLookupTable
	DD	06H
	DQ	FLAT:?BuildLookupTable@ImFont@@QEAAXXZ$rtcName$2
	DD	0104H
	DD	04H
	DQ	FLAT:?BuildLookupTable@ImFont@@QEAAXXZ$rtcName$1
	DD	0e4H
	DD	04H
	DQ	FLAT:?BuildLookupTable@ImFont@@QEAAXXZ$rtcName$0
	ORG $+144
?BuildLookupTable@ImFont@@QEAAXXZ$rtcFrameData DD 03H	; ImFont::BuildLookupTable
	DD	00H
	DQ	FLAT:?BuildLookupTable@ImFont@@QEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderText@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IAEBUImVec4@@PEBD3M_N@Z DD 035054b19H
	DD	011e3323H
	DD	0701700b1H
	DD	05016H
	DD	imagerel __GSHandlerCheck
	DD	0570H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?RenderText@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IAEBUImVec4@@PEBD3M_N@Z$rtcName$0 DB 063H ; ImFont::RenderText
	DB	00H
	ORG $+14
?RenderText@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IAEBUImVec4@@PEBD3M_N@Z$rtcVarDesc DD 0274H ; ImFont::RenderText
	DD	04H
	DQ	FLAT:?RenderText@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IAEBUImVec4@@PEBD3M_N@Z$rtcName$0
	ORG $+48
?RenderText@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IAEBUImVec4@@PEBD3M_N@Z$rtcFrameData DD 01H ; ImFont::RenderText
	DD	00H
	DQ	FLAT:?RenderText@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IAEBUImVec4@@PEBD3M_N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderChar@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IG@Z DD 035053a01H
	DD	011e3323H
	DD	070170041H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z DD 025054b19H
	DD	011e2323H
	DD	070170047H
	DD	05016H
	DD	imagerel __GSHandlerCheck
	DD	0220H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z$rtcName$0 DB 063H ; ImFont::CalcWordWrapPositionA
	DB	00H
	ORG $+14
?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z$rtcVarDesc DD 0104H ; ImFont::CalcWordWrapPositionA
	DD	04H
	DQ	FLAT:?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z$rtcName$0
	ORG $+48
?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z$rtcFrameData DD 01H ; ImFont::CalcWordWrapPositionA
	DD	00H
	DQ	FLAT:?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z DD 035054c19H
	DD	011f3324H
	DD	070180047H
	DD	05017H
	DD	imagerel __GSHandlerCheck
	DD	0228H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z$rtcName$0 DB 074H ; ImFont::CalcTextSizeA
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+2
?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z$rtcName$1 DB 063H ; ImFont::CalcTextSizeA
	DB	00H
	ORG $+2
?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z$rtcVarDesc DD 0134H ; ImFont::CalcTextSizeA
	DD	04H
	DQ	FLAT:?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z$rtcName$1
	DD	078H
	DD	08H
	DQ	FLAT:?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z$rtcName$0
	ORG $+96
?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z$rtcFrameData DD 02H ; ImFont::CalcTextSizeA
	DD	00H
	DQ	FLAT:?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IsLoaded@ImFont@@QEBA_NXZ DD 05052801H
	DD	010e0311H
	DD	07007001bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z DD 05052d01H
	DD	01130316H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z DD 05052d01H
	DD	01130316H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1ImFont@@QEAA@XZ DD imagerel ??1ImFont@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1ImFont@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1ImFont@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ImFont@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1ImFont@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0ImFont@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ImFont@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ImFont@@QEAA@XZ DD imagerel ??0ImFont@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0ImFont@@QEAA@XZ+69
	DD	00H
	DD	imagerel ??0ImFont@@QEAA@XZ+89
	DD	01H
	DD	imagerel ??0ImFont@@QEAA@XZ+374
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ImFont@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0ImFont@@QEAA@XZ@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???0ImFont@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ImFont@@QEAA@XZ DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??0ImFont@@QEAA@XZ
	DD	00H
	DD	00H
	DD	04H
	DD	imagerel $ip2state$??0ImFont@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImFont@@QEAA@XZ DD 025053511H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ImFont@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImFontGlyph@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImFontGlyph@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImFontGlyph@@@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImFontGlyph@@@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImFontGlyph@@@@QEAA@XZ DD imagerel ??1?$ImVector@UImFontGlyph@@@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@UImFontGlyph@@@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@UImFontGlyph@@@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImFontGlyph@@@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@UImFontGlyph@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImFontGlyph@@@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@M@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@M@@QEAAXHAEBM@Z DD 025053301H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@M@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@M@@QEAAAEAMH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@M@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@M@@QEAA@XZ DD imagerel ??1?$ImVector@M@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@M@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@M@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@M@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@M@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@M@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@UImFontConfig@@@@QEAAXAEBUImFontConfig@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImFontConfig@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImFontConfig@@@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImFontConfig@@@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImFontConfig@@@@QEAA@XZ DD imagerel ??1?$ImVector@UImFontConfig@@@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@UImFontConfig@@@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@UImFontConfig@@@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImFontConfig@@@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@UImFontConfig@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImFontConfig@@@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXAEBUImFontAtlasCustomRect@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImFontAtlasCustomRect@@@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ DD imagerel ??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@PEAUImFont@@@@QEAAXAEBQEAUImFont@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@PEAUImFont@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@PEAUImFont@@@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?empty@?$ImVector@PEAUImFont@@@@QEBA_NXZ DD 05052801H
	DD	010e0311H
	DD	07007001bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear_delete@?$ImVector@PEAUImFont@@@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@PEAUImFont@@@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@PEAUImFont@@@@QEAA@XZ DD imagerel ??1?$ImVector@PEAUImFont@@@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@PEAUImFont@@@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@PEAUImFont@@@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@PEAUImFont@@@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@PEAUImFont@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@PEAUImFont@@@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z DD 025054919H
	DD	011c2321H
	DD	070150047H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0220H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z$rtcName$0 DB 070H ; ImFontAtlas::GetMouseCursorTexData
	DB	06fH
	DB	073H
	DB	00H
?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z$rtcName$1 DB 073H ; ImFontAtlas::GetMouseCursorTexData
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+7
?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z$rtcVarDesc DD 068H ; ImFontAtlas::GetMouseCursorTexData
	DD	08H
	DQ	FLAT:?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z$rtcName$0
	ORG $+96
?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z$rtcFrameData DD 02H ; ImFontAtlas::GetMouseCursorTexData
	DD	00H
	DQ	FLAT:?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z DD 025053901H
	DD	011d2322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z DD 025054b19H
	DD	011e2323H
	DD	070170025H
	DD	05016H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z$rtcName$0 DB 072H ; ImFontAtlas::AddCustomRectFontGlyph
	DB	00H
	ORG $+14
?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z$rtcVarDesc DD 028H ; ImFontAtlas::AddCustomRectFontGlyph
	DD	020H
	DQ	FLAT:?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z$rtcName$0
	ORG $+48
?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z$rtcFrameData DD 01H ; ImFontAtlas::AddCustomRectFontGlyph
	DD	00H
	DQ	FLAT:?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z DD 025054419H
	DD	0117231cH
	DD	070100025H
	DD	0500fH
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z$rtcName$0 DB 072H ; ImFontAtlas::AddCustomRectRegular
	DB	00H
	ORG $+14
?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z$rtcVarDesc DD 028H ; ImFontAtlas::AddCustomRectRegular
	DD	020H
	DQ	FLAT:?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z$rtcName$0
	ORG $+48
?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z$rtcFrameData DD 01H ; ImFontAtlas::AddCustomRectRegular
	DD	00H
	DQ	FLAT:?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetGlyphRangesGreek@ImFontAtlas@@QEAAPEBGXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z DD 035054a19H
	DD	011d3322H
	DD	07016002fH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0168H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z$rtcName$0 DB 070H ; ImFontAtlas::GetTexDataAsRGBA32
	DB	069H
	DB	078H
	DB	065H
	DB	06cH
	DB	073H
	DB	00H
	ORG $+9
?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z$rtcVarDesc DD 038H ; ImFontAtlas::GetTexDataAsRGBA32
	DD	08H
	DQ	FLAT:?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z$rtcName$0
	ORG $+48
?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z$rtcFrameData DD 01H ; ImFontAtlas::GetTexDataAsRGBA32
	DD	00H
	DQ	FLAT:?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Build@ImFontAtlas@@QEAA_NXZ DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Clear@ImFontAtlas@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearFonts@ImFontAtlas@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearTexData@ImFontAtlas@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearInputData@ImFontAtlas@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z DD 035053a01H
	DD	011e3323H
	DD	07017002bH
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z DD 035064c19H
	DD	011f3324H
	DD	070180086H
	DD	050166017H
	DD	imagerel __GSHandlerCheck
	DD	0420H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z$rtcName$0 DB 066H ; ImFontAtlas::AddFontFromMemoryCompressedTTF
	DB	06fH
	DB	06eH
	DB	074H
	DB	05fH
	DB	063H
	DB	066H
	DB	067H
	DB	00H
	ORG $+7
?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z$rtcVarDesc DD 080H ; ImFontAtlas::AddFontFromMemoryCompressedTTF
	DD	088H
	DQ	FLAT:?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z$rtcName$0
	ORG $+48
?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z$rtcFrameData DD 01H ; ImFontAtlas::AddFontFromMemoryCompressedTTF
	DD	00H
	DQ	FLAT:?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z DD 025064c19H
	DD	011f2324H
	DD	07018007cH
	DD	050166017H
	DD	imagerel __GSHandlerCheck
	DD	03d0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z$rtcName$0 DB 066H ; ImFontAtlas::AddFontFromMemoryTTF
	DB	06fH
	DB	06eH
	DB	074H
	DB	05fH
	DB	063H
	DB	066H
	DB	067H
	DB	00H
	ORG $+7
?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z$rtcVarDesc DD 030H ; ImFontAtlas::AddFontFromMemoryTTF
	DD	088H
	DQ	FLAT:?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z$rtcName$0
	ORG $+48
?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z$rtcFrameData DD 01H ; ImFontAtlas::AddFontFromMemoryTTF
	DD	00H
	DQ	FLAT:?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z DD 035064c19H
	DD	011f3324H
	DD	07018008aH
	DD	050166017H
	DD	imagerel __GSHandlerCheck
	DD	0440H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z$rtcName$0 DB 064H ; ImFontAtlas::AddFontFromFileTTF
	DB	061H
	DB	074H
	DB	061H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+6
?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z$rtcName$1 DB 066H ; ImFontAtlas::AddFontFromFileTTF
	DB	06fH
	DB	06eH
	DB	074H
	DB	05fH
	DB	063H
	DB	066H
	DB	067H
	DB	00H
	ORG $+7
?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z$rtcVarDesc DD 080H ; ImFontAtlas::AddFontFromFileTTF
	DD	088H
	DQ	FLAT:?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z$rtcName$0
	ORG $+96
?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z$rtcFrameData DD 02H ; ImFontAtlas::AddFontFromFileTTF
	DD	00H
	DQ	FLAT:?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z DD 035064119H
	DD	01143319H
	DD	0700d008aH
	DD	0500b600cH
	DD	imagerel __GSHandlerCheck
	DD	0440H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z$rtcName$0 DB 066H ; ImFontAtlas::AddFontDefault
	DB	06fH
	DB	06eH
	DB	074H
	DB	05fH
	DB	063H
	DB	066H
	DB	067H
	DB	00H
	ORG $+7
?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z$rtcVarDesc DD 040H ; ImFontAtlas::AddFontDefault
	DD	088H
	DQ	FLAT:?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z$rtcName$0
	ORG $+48
?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z$rtcFrameData DD 01H ; ImFontAtlas::AddFontDefault
	DD	00H
	DQ	FLAT:?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z DD imagerel ?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z
	DD	0ffffffffH
	DD	imagerel ?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z+317
	DD	00H
	DD	imagerel ?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z+373
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z
	DD	01c8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z DD 025053a11H
	DD	01132318H
	DD	0700c003dH
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1ImFontAtlas@@QEAA@XZ DD imagerel ??1ImFontAtlas@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1ImFontAtlas@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1ImFontAtlas@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ImFontAtlas@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1ImFontAtlas@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0???0ImFontAtlas@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0ImFontAtlas@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ImFontAtlas@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ImFontAtlas@@QEAA@XZ DD imagerel ??0ImFontAtlas@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0ImFontAtlas@@QEAA@XZ+111
	DD	00H
	DD	imagerel ??0ImFontAtlas@@QEAA@XZ+131
	DD	01H
	DD	imagerel ??0ImFontAtlas@@QEAA@XZ+151
	DD	02H
	DD	imagerel ??0ImFontAtlas@@QEAA@XZ+258
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ImFontAtlas@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0ImFontAtlas@@QEAA@XZ@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???0ImFontAtlas@@QEAA@XZ@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0???0ImFontAtlas@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ImFontAtlas@@QEAA@XZ DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$??0ImFontAtlas@@QEAA@XZ
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$??0ImFontAtlas@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImFontAtlas@@QEAA@XZ DD 025053511H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ImFontAtlas@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ DD 05052801H
	DD	010e0311H
	DD	07007001bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImFontAtlasCustomRect@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BuildRanges@ImFontGlyphRangesBuilder@@QEAAXPEAU?$ImVector@G@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c0031H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddRanges@ImFontGlyphRangesBuilder@@QEAAXPEBG@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z DD 025054519H
	DD	0118231dH
	DD	070110027H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0120H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z$rtcName$0 DB 063H ; ImFontGlyphRangesBuilder::AddText
	DB	00H
	ORG $+14
?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z$rtcVarDesc DD 024H ; ImFontGlyphRangesBuilder::AddText
	DD	04H
	DQ	FLAT:?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z$rtcName$0
	ORG $+48
?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z$rtcFrameData DD 01H ; ImFontGlyphRangesBuilder::AddText
	DD	00H
	DQ	FLAT:?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetBit@ImFontGlyphRangesBuilder@@QEAAX_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@I@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@I@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@I@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?end@?$ImVector@I@@QEBAPEBIXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?begin@?$ImVector@I@@QEBAPEBIXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@I@@QEBAAEBIH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@I@@QEAAAEAIH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?empty@?$ImVector@I@@QEBA_NXZ DD 05052801H
	DD	010e0311H
	DD	07007001bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@I@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@I@@QEAA@XZ DD imagerel ??1?$ImVector@I@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@I@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@I@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@I@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@I@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImFontConfig@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ScaleClipRects@ImDrawData@@QEAAXAEBUImVec2@@@Z DD 035063001H
	DD	01143319H
	DD	0700d0034H
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??DeIndexAllBuffers@ImDrawData@@QEAAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?DeIndexAllBuffers@ImDrawData@@QEAAXXZ DD imagerel ?DeIndexAllBuffers@ImDrawData@@QEAAXXZ
	DD	0ffffffffH
	DD	imagerel ?DeIndexAllBuffers@ImDrawData@@QEAAXXZ+81
	DD	00H
	DD	imagerel ?DeIndexAllBuffers@ImDrawData@@QEAAXXZ+386
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?DeIndexAllBuffers@ImDrawData@@QEAAXXZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??DeIndexAllBuffers@ImDrawData@@QEAAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DeIndexAllBuffers@ImDrawData@@QEAAXXZ DD 025064719H
	DD	010f2314H
	DD	070080034H
	DD	050066007H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?DeIndexAllBuffers@ImDrawData@@QEAAXXZ
	DD	0192H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?DeIndexAllBuffers@ImDrawData@@QEAAXXZ$rtcName$0 DB 06eH ; ImDrawData::DeIndexAllBuffers
	DB	065H
	DB	077H
	DB	05fH
	DB	076H
	DB	074H
	DB	078H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
	ORG $+1
?DeIndexAllBuffers@ImDrawData@@QEAAXXZ$rtcVarDesc DD 028H ; ImDrawData::DeIndexAllBuffers
	DD	010H
	DQ	FLAT:?DeIndexAllBuffers@ImDrawData@@QEAAXXZ$rtcName$0
	ORG $+48
?DeIndexAllBuffers@ImDrawData@@QEAAXXZ$rtcFrameData DD 01H ; ImDrawData::DeIndexAllBuffers
	DD	00H
	DQ	FLAT:?DeIndexAllBuffers@ImDrawData@@QEAAXXZ$rtcVarDesc
$cppxdata$?DeIndexAllBuffers@ImDrawData@@QEAAXXZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?DeIndexAllBuffers@ImDrawData@@QEAAXXZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?DeIndexAllBuffers@ImDrawData@@QEAAXXZ
	DD	0178H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z DD 025053b01H
	DD	011f2324H
	DD	070180029H
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z DD 025054b19H
	DD	011e2323H
	DD	070170051H
	DD	05016H
	DD	imagerel __GSHandlerCheck
	DD	0278H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcName$0 DB 073H ; ImDrawList::_PathArcToFastEx
	DB	00H
	ORG $+2
?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcName$1 DB 073H ; ImDrawList::_PathArcToFastEx
	DB	00H
	ORG $+2
?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcName$2 DB 073H ; ImDrawList::_PathArcToFastEx
	DB	00H
	ORG $+6
?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcVarDesc DD 01a8H ; ImDrawList::_PathArcToFastEx
	DD	08H
	DQ	FLAT:?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcName$2
	DD	0168H
	DD	08H
	DQ	FLAT:?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcName$1
	DD	0128H
	DD	08H
	DQ	FLAT:?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcName$0
	ORG $+144
?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcFrameData DD 03H ; ImDrawList::_PathArcToFastEx
	DD	00H
	DQ	FLAT:?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z DD 025053001H
	DD	01142319H
	DD	0700d0021H
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_OnChangedTextureID@ImDrawList@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_OnChangedClipRect@ImDrawList@@QEAAXXZ DD 025062b01H
	DD	010f2314H
	DD	070080024H
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_ClearFreeMemory@ImDrawList@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_ResetForNewFrame@ImDrawList@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070027H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PrimWriteIdx@ImDrawList@@QEAAXG@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z DD 05053701H
	DD	011d0320H
	DD	070160019H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z DD 05053701H
	DD	011d0320H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z DD 025054a19H
	DD	011d2322H
	DD	070160031H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcName$0 DB 062H ; ImDrawList::PrimRectUV
	DB	00H
	ORG $+2
?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcName$1 DB 064H ; ImDrawList::PrimRectUV
	DB	00H
	ORG $+2
?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcName$2 DB 075H ; ImDrawList::PrimRectUV
	DB	076H
	DB	05fH
	DB	062H
	DB	00H
	ORG $+3
?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcName$3 DB 075H ; ImDrawList::PrimRectUV
	DB	076H
	DB	05fH
	DB	064H
	DB	00H
	ORG $+3
?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcFrameData DD 04H ; ImDrawList::PrimRectUV
	DD	00H
	DQ	FLAT:?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcVarDesc
	ORG $+8
?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcVarDesc DD 088H ; ImDrawList::PrimRectUV
	DD	08H
	DQ	FLAT:?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcName$3
	DD	068H
	DD	08H
	DQ	FLAT:?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z DD 025054a19H
	DD	011d2322H
	DD	07016002dH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcName$0 DB 062H ; ImDrawList::PrimRect
	DB	00H
	ORG $+2
?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcName$1 DB 064H ; ImDrawList::PrimRect
	DB	00H
	ORG $+2
?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcName$2 DB 075H ; ImDrawList::PrimRect
	DB	076H
	DB	00H
	ORG $+5
?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcVarDesc DD 068H ; ImDrawList::PrimRect
	DD	08H
	DQ	FLAT:?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcName$0
	ORG $+144
?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcFrameData DD 03H ; ImDrawList::PrimRect
	DD	00H
	DQ	FLAT:?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PrimUnreserve@ImDrawList@@QEAAXHH@Z DD 025053301H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PrimReserve@ImDrawList@@QEAAXHH@Z DD 025053301H
	DD	0117231cH
	DD	070100029H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??CloneOutput@ImDrawList@@QEBAPEAU1@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?CloneOutput@ImDrawList@@QEBAPEAU1@XZ DD imagerel ?CloneOutput@ImDrawList@@QEBAPEAU1@XZ
	DD	0ffffffffH
	DD	imagerel ?CloneOutput@ImDrawList@@QEBAPEAU1@XZ+118
	DD	00H
	DD	imagerel ?CloneOutput@ImDrawList@@QEBAPEAU1@XZ+185
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?CloneOutput@ImDrawList@@QEBAPEAU1@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??CloneOutput@ImDrawList@@QEBAPEAU1@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?CloneOutput@ImDrawList@@QEBAPEAU1@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?CloneOutput@ImDrawList@@QEBAPEAU1@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?CloneOutput@ImDrawList@@QEBAPEAU1@XZ
	DD	01a8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CloneOutput@ImDrawList@@QEBAPEAU1@XZ DD 025053511H
	DD	010e2313H
	DD	070070039H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?CloneOutput@ImDrawList@@QEBAPEAU1@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddDrawCmd@ImDrawList@@QEAAXXZ DD 025063c19H
	DD	010f2314H
	DD	070080026H
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	0128H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddDrawCmd@ImDrawList@@QEAAXXZ$rtcName$0 DB 064H	; ImDrawList::AddDrawCmd
	DB	072H
	DB	061H
	DB	077H
	DB	05fH
	DB	063H
	DB	06dH
	DB	064H
	DB	00H
	ORG $+7
?AddDrawCmd@ImDrawList@@QEAAXXZ$rtcVarDesc DD 028H	; ImDrawList::AddDrawCmd
	DD	038H
	DQ	FLAT:?AddDrawCmd@ImDrawList@@QEAAXXZ$rtcName$0
	ORG $+48
?AddDrawCmd@ImDrawList@@QEAAXXZ$rtcFrameData DD 01H	; ImDrawList::AddDrawCmd
	DD	00H
	DQ	FLAT:?AddDrawCmd@ImDrawList@@QEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddCallback@ImDrawList@@QEAAXP6AXPEBU1@PEBUImDrawCmd@@@ZPEAX@Z DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z DD 035053a01H
	DD	011e3323H
	DD	070170047H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z DD 055054a19H
	DD	011d5322H
	DD	070160033H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0188H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z$rtcName$0 DB 070H ; ImDrawList::PathBezierQuadraticCurveTo
	DB	031H
	DB	00H
	ORG $+13
?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z$rtcVarDesc DD 058H ; ImDrawList::PathBezierQuadraticCurveTo
	DD	08H
	DQ	FLAT:?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z$rtcName$0
	ORG $+48
?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z$rtcFrameData DD 01H ; ImDrawList::PathBezierQuadraticCurveTo
	DD	00H
	DQ	FLAT:?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z DD 065054a19H
	DD	011d6322H
	DD	070160035H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0198H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z$rtcName$0 DB 070H ; ImDrawList::PathBezierCubicCurveTo
	DB	031H
	DB	00H
	ORG $+13
?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z$rtcVarDesc DD 068H ; ImDrawList::PathBezierCubicCurveTo
	DD	08H
	DQ	FLAT:?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z$rtcName$0
	ORG $+48
?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z$rtcFrameData DD 01H ; ImDrawList::PathBezierCubicCurveTo
	DD	00H
	DQ	FLAT:?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z DD 035053a01H
	DD	011e3323H
	DD	070170021H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z DD 035053b01H
	DD	011f3324H
	DD	07018005bH
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathStroke@ImDrawList@@QEAAXIHM@Z DD 035053901H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathFillConvex@ImDrawList@@QEAAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddImageRounded@ImDrawList@@QEAAXPEAXAEBUImVec2@@111IMH@Z DD 045053901H
	DD	011d4322H
	DD	07016002dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddImageQuad@ImDrawList@@QEAAXPEAXAEBUImVec2@@1111111I@Z DD 055053901H
	DD	011d5322H
	DD	070160027H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z DD 035053901H
	DD	011d3322H
	DD	070160023H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z DD 035053901H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z DD 025054a19H
	DD	011d2322H
	DD	0701600a9H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0538H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z$rtcName$0 DB 075H ; ImDrawList::AddConvexPolyFilled
	DB	076H
	DB	00H
	ORG $+13
?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z$rtcVarDesc DD 028H ; ImDrawList::AddConvexPolyFilled
	DD	08H
	DQ	FLAT:?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z$rtcName$0
	ORG $+48
?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z$rtcFrameData DD 01H ; ImDrawList::AddConvexPolyFilled
	DD	00H
	DQ	FLAT:?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z DD 025064b19H
	DD	011e2323H
	DD	0701701e8H
	DD	050156016H
	DD	imagerel __GSHandlerCheck
	DD	0f30H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcName$0 DB 06fH ; ImDrawList::AddPolyline
	DB	070H
	DB	061H
	DB	071H
	DB	075H
	DB	065H
	DB	05fH
	DB	075H
	DB	076H
	DB	00H
	ORG $+6
?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcName$1 DB 074H ; ImDrawList::AddPolyline
	DB	065H
	DB	078H
	DB	05fH
	DB	075H
	DB	076H
	DB	073H
	DB	00H
?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcName$2 DB 074H ; ImDrawList::AddPolyline
	DB	065H
	DB	078H
	DB	05fH
	DB	075H
	DB	076H
	DB	030H
	DB	00H
?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcName$3 DB 074H ; ImDrawList::AddPolyline
	DB	065H
	DB	078H
	DB	05fH
	DB	075H
	DB	076H
	DB	031H
	DB	00H
	ORG $+8
?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcVarDesc DD 0418H ; ImDrawList::AddPolyline
	DD	08H
	DQ	FLAT:?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcName$3
	DD	03f8H
	DD	08H
	DQ	FLAT:?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcName$2
	DD	03c8H
	DD	010H
	DQ	FLAT:?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcName$0
	ORG $+192
?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcFrameData DD 04H ; ImDrawList::AddPolyline
	DD	00H
	DQ	FLAT:?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z DD 055064c19H
	DD	011f5324H
	DD	070180028H
	DD	050166017H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z$rtcName$0 DB 063H ; ImDrawList::AddText
	DB	06cH
	DB	069H
	DB	070H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+6
?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z$rtcVarDesc DD 058H ; ImDrawList::AddText
	DD	010H
	DQ	FLAT:?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z$rtcName$0
	ORG $+48
?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z$rtcFrameData DD 01H ; ImDrawList::AddText
	DD	00H
	DQ	FLAT:?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z DD 055053901H
	DD	011d5322H
	DD	070160023H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z DD 035053a01H
	DD	011e3323H
	DD	070170023H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z DD 035053a01H
	DD	011e3323H
	DD	070170023H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z DD 035053a01H
	DD	011e3323H
	DD	070170023H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z DD 035053a01H
	DD	011e3323H
	DD	070170023H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddQuadFilled@ImDrawList@@QEAAXAEBUImVec2@@000I@Z DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddQuad@ImDrawList@@QEAAXAEBUImVec2@@000IM@Z DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z DD 025054a19H
	DD	011d2322H
	DD	070160029H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z$rtcName$0 DB 075H ; ImDrawList::AddRectFilledMultiColor
	DB	076H
	DB	00H
	ORG $+13
?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z$rtcVarDesc DD 028H ; ImDrawList::AddRectFilledMultiColor
	DD	08H
	DQ	FLAT:?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z$rtcName$0
	ORG $+48
?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z$rtcFrameData DD 01H ; ImDrawList::AddRectFilledMultiColor
	DD	00H
	DQ	FLAT:?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z DD 035053901H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z DD 035053901H
	DD	011d3322H
	DD	07016003fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z DD 025053901H
	DD	011d2322H
	DD	07016002dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PopTextureID@ImDrawList@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PushTextureID@ImDrawList@@QEAAXPEAX@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PopClipRect@ImDrawList@@QEAAXXZ DD 025062b01H
	DD	010f2314H
	DD	070080020H
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PushClipRectFullScreen@ImDrawList@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z DD 035064b19H
	DD	011e3323H
	DD	07017002aH
	DD	050156016H
	DD	imagerel __GSHandlerCheck
	DD	0148H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z$rtcName$0 DB 063H ; ImDrawList::PushClipRect
	DB	072H
	DB	00H
	ORG $+5
?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z$rtcName$1 DB 063H ; ImDrawList::PushClipRect
	DB	075H
	DB	072H
	DB	072H
	DB	065H
	DB	06eH
	DB	074H
	DB	00H
?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z$rtcVarDesc DD 068H ; ImDrawList::PushClipRect
	DD	010H
	DQ	FLAT:?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z$rtcName$0
	ORG $+96
?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z$rtcFrameData DD 02H ; ImDrawList::PushClipRect
	DD	00H
	DQ	FLAT:?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$5@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$4@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z DD imagerel ??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z
	DD	0ffffffffH
	DD	imagerel ??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z+74
	DD	00H
	DD	imagerel ??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z+94
	DD	01H
	DD	imagerel ??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z+114
	DD	02H
	DD	imagerel ??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z+134
	DD	03H
	DD	imagerel ??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z+154
	DD	04H
	DD	imagerel ??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z+174
	DD	05H
	DD	imagerel ??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z+254
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA
	DD	02H
	DD	imagerel ?dtor$3@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA
	DD	03H
	DD	imagerel ?dtor$4@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA
	DD	04H
	DD	imagerel ?dtor$5@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z DD 019930522H
	DD	06H
	DD	imagerel $stateUnwindMap$??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z
	DD	00H
	DD	00H
	DD	08H
	DD	imagerel $ip2state$??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z DD 025053a11H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve_discard@?$ImVector@UImVec2@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImVec2@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImVec2@@@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImVec2@@@@QEAA@XZ DD imagerel ??1?$ImVector@UImVec2@@@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@UImVec2@@@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@UImVec2@@@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImVec2@@@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@UImVec2@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImVec2@@@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pop_back@?$ImVector@PEAX@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@PEAX@@QEAAXAEBQEAX@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@PEAX@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@PEAX@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@PEAX@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@PEAX@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@PEAX@@QEAA@XZ DD imagerel ??1?$ImVector@PEAX@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@PEAX@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@PEAX@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@PEAX@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@PEAX@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@PEAX@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pop_back@?$ImVector@UImVec4@@@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@UImVec4@@@@QEAAXAEBUImVec4@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImVec4@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImVec4@@@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImVec4@@@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImVec4@@@@QEAA@XZ DD imagerel ??1?$ImVector@UImVec4@@@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@UImVec4@@@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@UImVec4@@@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImVec4@@@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@UImVec4@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImVec4@@@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImDrawVert@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?shrink@?$ImVector@UImDrawVert@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImDrawVert@@@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?swap@?$ImVector@UImDrawVert@@@@QEAAXAEAU1@@Z DD 05052d01H
	DD	01130316H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImDrawVert@@@@QEAA@XZ DD imagerel ??1?$ImVector@UImDrawVert@@@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@UImDrawVert@@@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@UImDrawVert@@@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImDrawVert@@@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@UImDrawVert@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$ImVector@UImDrawVert@@@@QEAAAEAU0@AEBU0@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImDrawVert@@@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c0059H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z DD imagerel ?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z
	DD	0ffffffffH
	DD	imagerel ?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z+382
	DD	00H
	DD	imagerel ?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z+454
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z
	DD	01c8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z DD 025053f11H
	DD	0118231dH
	DD	07011003dH
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Clear@ImDrawListSplitter@@QEAAXXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImDrawListSplitter@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImDrawChannel@@@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImDrawChannel@@@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ImDrawChannel@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ImDrawChannel@@QEAA@XZ DD imagerel ??0ImDrawChannel@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0ImDrawChannel@@QEAA@XZ+69
	DD	00H
	DD	imagerel ??0ImDrawChannel@@QEAA@XZ+89
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ImDrawChannel@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0ImDrawChannel@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ImDrawChannel@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0ImDrawChannel@@QEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0ImDrawChannel@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImDrawChannel@@QEAA@XZ DD 025053511H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ImDrawChannel@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$ImVector@UImDrawCmd@@@@QEAAPEAUImDrawCmd@@PEBU2@@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImDrawCmd@@@@QEAA@XZ DD imagerel ??1?$ImVector@UImDrawCmd@@@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@UImDrawCmd@@@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@UImDrawCmd@@@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImDrawCmd@@@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@UImDrawCmd@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$ImVector@UImDrawCmd@@@@QEAAAEAU0@AEBU0@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImDrawCmd@@@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImDrawCmdHeader@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImDrawCmd@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@G@@QEAAXAEBG@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@G@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?shrink@?$ImVector@G@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@G@@QEAAXHAEBG@Z DD 025053301H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@G@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@G@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@G@@QEAAAEAGH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?empty@?$ImVector@G@@QEBA_NXZ DD 05052801H
	DD	010e0311H
	DD	07007001bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@G@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@G@@QEAA@XZ DD imagerel ??1?$ImVector@G@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@G@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@G@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@G@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@G@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$ImVector@G@@QEAAAEAU0@AEBU0@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@G@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??3@YAXPEAXUImNewWrapper@@0@Z DD 05053101H
	DD	0117031aH
	DD	070100019H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KUImNewWrapper@@PEAX@Z DD 05053101H
	DD	0117031aH
	DD	070100019H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z DD 035062b01H
	DD	010f3314H
	DD	0700801b8H
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z DD 035062b01H
	DD	010f3314H
	DD	0700801b8H
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z DD 035062b01H
	DD	010f3314H
	DD	0700801b8H
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec4@@QEAA@MMMM@Z DD 05031f01H
	DD	0721c031fH
	DD	05018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec4@@QEAA@XZ DD 05030d01H
	DD	0720a030dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec2@@QEAA@MM@Z DD 05031901H
	DD	072160319H
	DD	05012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec2@@QEAA@XZ DD 05030d01H
	DD	0720a030dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 025053901H
	DD	011d2322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??$IM_DELETE@UImFont@@@@YAXPEAUImFont@@@Z
_TEXT	SEGMENT
p$ = 224
??$IM_DELETE@UImFont@@@@YAXPEAUImFont@@@Z PROC		; IM_DELETE<ImFont>, COMDAT

; 1745 : template<typename T> void IM_DELETE(T* p)   { if (p) { p->~T(); ImGui::MemFree(p); } }

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 83 bd e0 00
	00 00 00	 cmp	 QWORD PTR p$[rbp], 0
  00032	74 1a		 je	 SHORT $LN2@IM_DELETE
  00034	33 d2		 xor	 edx, edx
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  0003d	e8 00 00 00 00	 call	 ??_GImFont@@QEAAPEAXI@Z
  00042	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00049	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN2@IM_DELETE:
  0004e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00055	5f		 pop	 rdi
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
??$IM_DELETE@UImFont@@@@YAXPEAUImFont@@@Z ENDP		; IM_DELETE<ImFont>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?stb_adler32@@YAIIPEAEI@Z
_TEXT	SEGMENT
ADLER_MOD$ = 4
s1$ = 36
s2$ = 68
blocklen$ = 100
i$ = 132
adler32$ = 384
buffer$ = 392
buflen$ = 400
?stb_adler32@@YAIIPEAEI@Z PROC				; stb_adler32, COMDAT

; 4003 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00017	48 8b ec	 mov	 rbp, rsp
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	8b 8c 24 88 01
	00 00		 mov	 ecx, DWORD PTR [rsp+392]

; 4004 :     const unsigned long ADLER_MOD = 65521;

  00030	c7 45 04 f1 ff
	00 00		 mov	 DWORD PTR ADLER_MOD$[rbp], 65521 ; 0000fff1H

; 4005 :     unsigned long s1 = adler32 & 0xffff, s2 = adler32 >> 16;

  00037	8b 85 80 01 00
	00		 mov	 eax, DWORD PTR adler32$[rbp]
  0003d	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00042	89 45 24	 mov	 DWORD PTR s1$[rbp], eax
  00045	8b 85 80 01 00
	00		 mov	 eax, DWORD PTR adler32$[rbp]
  0004b	c1 e8 10	 shr	 eax, 16
  0004e	89 45 44	 mov	 DWORD PTR s2$[rbp], eax

; 4006 :     unsigned long blocklen = buflen % 5552;

  00051	33 d2		 xor	 edx, edx
  00053	8b 85 90 01 00
	00		 mov	 eax, DWORD PTR buflen$[rbp]
  00059	b9 b0 15 00 00	 mov	 ecx, 5552		; 000015b0H
  0005e	f7 f1		 div	 ecx
  00060	8b c2		 mov	 eax, edx
  00062	89 45 64	 mov	 DWORD PTR blocklen$[rbp], eax
$LN2@stb_adler3:

; 4007 : 
; 4008 :     unsigned long i;
; 4009 :     while (buflen) {

  00065	83 bd 90 01 00
	00 00		 cmp	 DWORD PTR buflen$[rbp], 0
  0006c	0f 84 2c 02 00
	00		 je	 $LN3@stb_adler3

; 4010 :         for (i=0; i + 7 < blocklen; i += 8) {

  00072	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR i$[rbp], 0
  0007c	eb 0f		 jmp	 SHORT $LN6@stb_adler3
$LN4@stb_adler3:
  0007e	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  00084	83 c0 08	 add	 eax, 8
  00087	89 85 84 00 00
	00		 mov	 DWORD PTR i$[rbp], eax
$LN6@stb_adler3:
  0008d	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  00093	83 c0 07	 add	 eax, 7
  00096	3b 45 64	 cmp	 eax, DWORD PTR blocklen$[rbp]
  00099	0f 83 6f 01 00
	00		 jae	 $LN5@stb_adler3

; 4011 :             s1 += buffer[0], s2 += s1;

  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	48 6b c0 00	 imul	 rax, rax, 0
  000a8	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR buffer$[rbp]
  000af	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000b3	8b 4d 24	 mov	 ecx, DWORD PTR s1$[rbp]
  000b6	03 c8		 add	 ecx, eax
  000b8	8b c1		 mov	 eax, ecx
  000ba	89 45 24	 mov	 DWORD PTR s1$[rbp], eax
  000bd	8b 45 24	 mov	 eax, DWORD PTR s1$[rbp]
  000c0	8b 4d 44	 mov	 ecx, DWORD PTR s2$[rbp]
  000c3	03 c8		 add	 ecx, eax
  000c5	8b c1		 mov	 eax, ecx
  000c7	89 45 44	 mov	 DWORD PTR s2$[rbp], eax

; 4012 :             s1 += buffer[1], s2 += s1;

  000ca	b8 01 00 00 00	 mov	 eax, 1
  000cf	48 6b c0 01	 imul	 rax, rax, 1
  000d3	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR buffer$[rbp]
  000da	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000de	8b 4d 24	 mov	 ecx, DWORD PTR s1$[rbp]
  000e1	03 c8		 add	 ecx, eax
  000e3	8b c1		 mov	 eax, ecx
  000e5	89 45 24	 mov	 DWORD PTR s1$[rbp], eax
  000e8	8b 45 24	 mov	 eax, DWORD PTR s1$[rbp]
  000eb	8b 4d 44	 mov	 ecx, DWORD PTR s2$[rbp]
  000ee	03 c8		 add	 ecx, eax
  000f0	8b c1		 mov	 eax, ecx
  000f2	89 45 44	 mov	 DWORD PTR s2$[rbp], eax

; 4013 :             s1 += buffer[2], s2 += s1;

  000f5	b8 01 00 00 00	 mov	 eax, 1
  000fa	48 6b c0 02	 imul	 rax, rax, 2
  000fe	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR buffer$[rbp]
  00105	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00109	8b 4d 24	 mov	 ecx, DWORD PTR s1$[rbp]
  0010c	03 c8		 add	 ecx, eax
  0010e	8b c1		 mov	 eax, ecx
  00110	89 45 24	 mov	 DWORD PTR s1$[rbp], eax
  00113	8b 45 24	 mov	 eax, DWORD PTR s1$[rbp]
  00116	8b 4d 44	 mov	 ecx, DWORD PTR s2$[rbp]
  00119	03 c8		 add	 ecx, eax
  0011b	8b c1		 mov	 eax, ecx
  0011d	89 45 44	 mov	 DWORD PTR s2$[rbp], eax

; 4014 :             s1 += buffer[3], s2 += s1;

  00120	b8 01 00 00 00	 mov	 eax, 1
  00125	48 6b c0 03	 imul	 rax, rax, 3
  00129	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR buffer$[rbp]
  00130	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00134	8b 4d 24	 mov	 ecx, DWORD PTR s1$[rbp]
  00137	03 c8		 add	 ecx, eax
  00139	8b c1		 mov	 eax, ecx
  0013b	89 45 24	 mov	 DWORD PTR s1$[rbp], eax
  0013e	8b 45 24	 mov	 eax, DWORD PTR s1$[rbp]
  00141	8b 4d 44	 mov	 ecx, DWORD PTR s2$[rbp]
  00144	03 c8		 add	 ecx, eax
  00146	8b c1		 mov	 eax, ecx
  00148	89 45 44	 mov	 DWORD PTR s2$[rbp], eax

; 4015 :             s1 += buffer[4], s2 += s1;

  0014b	b8 01 00 00 00	 mov	 eax, 1
  00150	48 6b c0 04	 imul	 rax, rax, 4
  00154	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR buffer$[rbp]
  0015b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0015f	8b 4d 24	 mov	 ecx, DWORD PTR s1$[rbp]
  00162	03 c8		 add	 ecx, eax
  00164	8b c1		 mov	 eax, ecx
  00166	89 45 24	 mov	 DWORD PTR s1$[rbp], eax
  00169	8b 45 24	 mov	 eax, DWORD PTR s1$[rbp]
  0016c	8b 4d 44	 mov	 ecx, DWORD PTR s2$[rbp]
  0016f	03 c8		 add	 ecx, eax
  00171	8b c1		 mov	 eax, ecx
  00173	89 45 44	 mov	 DWORD PTR s2$[rbp], eax

; 4016 :             s1 += buffer[5], s2 += s1;

  00176	b8 01 00 00 00	 mov	 eax, 1
  0017b	48 6b c0 05	 imul	 rax, rax, 5
  0017f	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR buffer$[rbp]
  00186	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0018a	8b 4d 24	 mov	 ecx, DWORD PTR s1$[rbp]
  0018d	03 c8		 add	 ecx, eax
  0018f	8b c1		 mov	 eax, ecx
  00191	89 45 24	 mov	 DWORD PTR s1$[rbp], eax
  00194	8b 45 24	 mov	 eax, DWORD PTR s1$[rbp]
  00197	8b 4d 44	 mov	 ecx, DWORD PTR s2$[rbp]
  0019a	03 c8		 add	 ecx, eax
  0019c	8b c1		 mov	 eax, ecx
  0019e	89 45 44	 mov	 DWORD PTR s2$[rbp], eax

; 4017 :             s1 += buffer[6], s2 += s1;

  001a1	b8 01 00 00 00	 mov	 eax, 1
  001a6	48 6b c0 06	 imul	 rax, rax, 6
  001aa	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR buffer$[rbp]
  001b1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  001b5	8b 4d 24	 mov	 ecx, DWORD PTR s1$[rbp]
  001b8	03 c8		 add	 ecx, eax
  001ba	8b c1		 mov	 eax, ecx
  001bc	89 45 24	 mov	 DWORD PTR s1$[rbp], eax
  001bf	8b 45 24	 mov	 eax, DWORD PTR s1$[rbp]
  001c2	8b 4d 44	 mov	 ecx, DWORD PTR s2$[rbp]
  001c5	03 c8		 add	 ecx, eax
  001c7	8b c1		 mov	 eax, ecx
  001c9	89 45 44	 mov	 DWORD PTR s2$[rbp], eax

; 4018 :             s1 += buffer[7], s2 += s1;

  001cc	b8 01 00 00 00	 mov	 eax, 1
  001d1	48 6b c0 07	 imul	 rax, rax, 7
  001d5	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR buffer$[rbp]
  001dc	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  001e0	8b 4d 24	 mov	 ecx, DWORD PTR s1$[rbp]
  001e3	03 c8		 add	 ecx, eax
  001e5	8b c1		 mov	 eax, ecx
  001e7	89 45 24	 mov	 DWORD PTR s1$[rbp], eax
  001ea	8b 45 24	 mov	 eax, DWORD PTR s1$[rbp]
  001ed	8b 4d 44	 mov	 ecx, DWORD PTR s2$[rbp]
  001f0	03 c8		 add	 ecx, eax
  001f2	8b c1		 mov	 eax, ecx
  001f4	89 45 44	 mov	 DWORD PTR s2$[rbp], eax

; 4019 : 
; 4020 :             buffer += 8;

  001f7	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR buffer$[rbp]
  001fe	48 83 c0 08	 add	 rax, 8
  00202	48 89 85 88 01
	00 00		 mov	 QWORD PTR buffer$[rbp], rax

; 4021 :         }

  00209	e9 70 fe ff ff	 jmp	 $LN4@stb_adler3
$LN5@stb_adler3:

; 4022 : 
; 4023 :         for (; i < blocklen; ++i)

  0020e	eb 0e		 jmp	 SHORT $LN9@stb_adler3
$LN7@stb_adler3:
  00210	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  00216	ff c0		 inc	 eax
  00218	89 85 84 00 00
	00		 mov	 DWORD PTR i$[rbp], eax
$LN9@stb_adler3:
  0021e	8b 45 64	 mov	 eax, DWORD PTR blocklen$[rbp]
  00221	39 85 84 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00227	73 34		 jae	 SHORT $LN8@stb_adler3

; 4024 :             s1 += *buffer++, s2 += s1;

  00229	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR buffer$[rbp]
  00230	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00233	8b 4d 24	 mov	 ecx, DWORD PTR s1$[rbp]
  00236	03 c8		 add	 ecx, eax
  00238	8b c1		 mov	 eax, ecx
  0023a	89 45 24	 mov	 DWORD PTR s1$[rbp], eax
  0023d	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR buffer$[rbp]
  00244	48 ff c0	 inc	 rax
  00247	48 89 85 88 01
	00 00		 mov	 QWORD PTR buffer$[rbp], rax
  0024e	8b 45 24	 mov	 eax, DWORD PTR s1$[rbp]
  00251	8b 4d 44	 mov	 ecx, DWORD PTR s2$[rbp]
  00254	03 c8		 add	 ecx, eax
  00256	8b c1		 mov	 eax, ecx
  00258	89 45 44	 mov	 DWORD PTR s2$[rbp], eax
  0025b	eb b3		 jmp	 SHORT $LN7@stb_adler3
$LN8@stb_adler3:

; 4025 : 
; 4026 :         s1 %= ADLER_MOD, s2 %= ADLER_MOD;

  0025d	33 d2		 xor	 edx, edx
  0025f	8b 45 24	 mov	 eax, DWORD PTR s1$[rbp]
  00262	b9 f1 ff 00 00	 mov	 ecx, 65521		; 0000fff1H
  00267	f7 f1		 div	 ecx
  00269	8b c2		 mov	 eax, edx
  0026b	89 45 24	 mov	 DWORD PTR s1$[rbp], eax
  0026e	33 d2		 xor	 edx, edx
  00270	8b 45 44	 mov	 eax, DWORD PTR s2$[rbp]
  00273	b9 f1 ff 00 00	 mov	 ecx, 65521		; 0000fff1H
  00278	f7 f1		 div	 ecx
  0027a	8b c2		 mov	 eax, edx
  0027c	89 45 44	 mov	 DWORD PTR s2$[rbp], eax

; 4027 :         buflen -= blocklen;

  0027f	8b 45 64	 mov	 eax, DWORD PTR blocklen$[rbp]
  00282	8b 8d 90 01 00
	00		 mov	 ecx, DWORD PTR buflen$[rbp]
  00288	2b c8		 sub	 ecx, eax
  0028a	8b c1		 mov	 eax, ecx
  0028c	89 85 90 01 00
	00		 mov	 DWORD PTR buflen$[rbp], eax

; 4028 :         blocklen = 5552;

  00292	c7 45 64 b0 15
	00 00		 mov	 DWORD PTR blocklen$[rbp], 5552 ; 000015b0H

; 4029 :     }

  00299	e9 c7 fd ff ff	 jmp	 $LN2@stb_adler3
$LN3@stb_adler3:

; 4030 :     return (unsigned int)(s2 << 16) + (unsigned int)s1;

  0029e	8b 45 44	 mov	 eax, DWORD PTR s2$[rbp]
  002a1	c1 e0 10	 shl	 eax, 16
  002a4	03 45 24	 add	 eax, DWORD PTR s1$[rbp]

; 4031 : }

  002a7	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  002ae	5f		 pop	 rdi
  002af	5d		 pop	 rbp
  002b0	c3		 ret	 0
?stb_adler32@@YAIIPEAEI@Z ENDP				; stb_adler32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?stb_decompress_token@@YAPEBEPEBE@Z
_TEXT	SEGMENT
i$ = 224
?stb_decompress_token@@YAPEBEPEBE@Z PROC		; stb_decompress_token, COMDAT

; 3986 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 3987 :     if (*i >= 0x20) { // use fewer if's for cases that expand small

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR i$[rbp]
  00031	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00034	83 f8 20	 cmp	 eax, 32			; 00000020H
  00037	0f 8c 47 01 00
	00		 jl	 $LN2@stb_decomp

; 3988 :         if (*i >= 0x80)       stb__match(stb__dout-i[1]-1, i[0] - 0x80 + 1), i += 2;

  0003d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR i$[rbp]
  00044	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00047	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0004c	7c 59		 jl	 SHORT $LN4@stb_decomp
  0004e	b8 01 00 00 00	 mov	 eax, 1
  00053	48 6b c0 00	 imul	 rax, rax, 0
  00057	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  0005e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00062	83 e8 7f	 sub	 eax, 127		; 0000007fH
  00065	b9 01 00 00 00	 mov	 ecx, 1
  0006a	48 6b c9 01	 imul	 rcx, rcx, 1
  0006e	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR i$[rbp]
  00075	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00079	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?stb__dout@@3PEAEEA
  00080	48 2b d1	 sub	 rdx, rcx
  00083	48 8b ca	 mov	 rcx, rdx
  00086	48 ff c9	 dec	 rcx
  00089	8b d0		 mov	 edx, eax
  0008b	e8 00 00 00 00	 call	 ?stb__match@@YAXPEBEI@Z	; stb__match
  00090	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR i$[rbp]
  00097	48 83 c0 02	 add	 rax, 2
  0009b	48 89 85 e0 00
	00 00		 mov	 QWORD PTR i$[rbp], rax
  000a2	e9 d8 00 00 00	 jmp	 $LN5@stb_decomp
$LN4@stb_decomp:

; 3989 :         else if (*i >= 0x40)  stb__match(stb__dout-(stb__in2(0) - 0x4000 + 1), i[2]+1), i += 3;

  000a7	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR i$[rbp]
  000ae	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000b1	83 f8 40	 cmp	 eax, 64			; 00000040H
  000b4	7c 74		 jl	 SHORT $LN6@stb_decomp
  000b6	b8 01 00 00 00	 mov	 eax, 1
  000bb	48 6b c0 02	 imul	 rax, rax, 2
  000bf	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  000c6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000ca	ff c0		 inc	 eax
  000cc	b9 01 00 00 00	 mov	 ecx, 1
  000d1	48 6b c9 00	 imul	 rcx, rcx, 0
  000d5	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR i$[rbp]
  000dc	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000e0	c1 e1 08	 shl	 ecx, 8
  000e3	ba 01 00 00 00	 mov	 edx, 1
  000e8	48 6b d2 01	 imul	 rdx, rdx, 1
  000ec	4c 8b 85 e0 00
	00 00		 mov	 r8, QWORD PTR i$[rbp]
  000f3	41 0f b6 14 10	 movzx	 edx, BYTE PTR [r8+rdx]
  000f8	8d 8c 11 01 c0
	ff ff		 lea	 ecx, DWORD PTR [rcx+rdx-16383]
  000ff	48 63 c9	 movsxd	 rcx, ecx
  00102	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?stb__dout@@3PEAEEA
  00109	48 2b d1	 sub	 rdx, rcx
  0010c	48 8b ca	 mov	 rcx, rdx
  0010f	8b d0		 mov	 edx, eax
  00111	e8 00 00 00 00	 call	 ?stb__match@@YAXPEBEI@Z	; stb__match
  00116	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR i$[rbp]
  0011d	48 83 c0 03	 add	 rax, 3
  00121	48 89 85 e0 00
	00 00		 mov	 QWORD PTR i$[rbp], rax
  00128	eb 55		 jmp	 SHORT $LN7@stb_decomp
$LN6@stb_decomp:

; 3990 :         else /* *i >= 0x20 */ stb__lit(i+1, i[0] - 0x20 + 1), i += 1 + (i[0] - 0x20 + 1);

  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	48 6b c0 00	 imul	 rax, rax, 0
  00133	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  0013a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0013e	83 e8 1f	 sub	 eax, 31
  00141	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  00148	48 ff c1	 inc	 rcx
  0014b	8b d0		 mov	 edx, eax
  0014d	e8 00 00 00 00	 call	 ?stb__lit@@YAXPEBEI@Z	; stb__lit
  00152	b8 01 00 00 00	 mov	 eax, 1
  00157	48 6b c0 00	 imul	 rax, rax, 0
  0015b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  00162	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00166	83 e8 1e	 sub	 eax, 30
  00169	48 98		 cdqe
  0016b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  00172	48 03 c8	 add	 rcx, rax
  00175	48 8b c1	 mov	 rax, rcx
  00178	48 89 85 e0 00
	00 00		 mov	 QWORD PTR i$[rbp], rax
$LN7@stb_decomp:
$LN5@stb_decomp:

; 3991 :     } else { // more ifs for cases that expand large, since overhead is amortized

  0017f	e9 01 04 00 00	 jmp	 $LN3@stb_decomp
$LN2@stb_decomp:

; 3992 :         if (*i >= 0x18)       stb__match(stb__dout-(stb__in3(0) - 0x180000 + 1), i[3]+1), i += 4;

  00184	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR i$[rbp]
  0018b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0018e	83 f8 18	 cmp	 eax, 24
  00191	0f 8c 93 00 00
	00		 jl	 $LN8@stb_decomp
  00197	b8 01 00 00 00	 mov	 eax, 1
  0019c	48 6b c0 03	 imul	 rax, rax, 3
  001a0	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  001a7	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  001ab	ff c0		 inc	 eax
  001ad	b9 01 00 00 00	 mov	 ecx, 1
  001b2	48 6b c9 00	 imul	 rcx, rcx, 0
  001b6	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR i$[rbp]
  001bd	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  001c1	c1 e1 10	 shl	 ecx, 16
  001c4	ba 01 00 00 00	 mov	 edx, 1
  001c9	48 6b d2 01	 imul	 rdx, rdx, 1
  001cd	4c 8b 85 e0 00
	00 00		 mov	 r8, QWORD PTR i$[rbp]
  001d4	41 0f b6 14 10	 movzx	 edx, BYTE PTR [r8+rdx]
  001d9	c1 e2 08	 shl	 edx, 8
  001dc	41 b8 01 00 00
	00		 mov	 r8d, 1
  001e2	4d 6b c0 02	 imul	 r8, r8, 2
  001e6	4c 8b 8d e0 00
	00 00		 mov	 r9, QWORD PTR i$[rbp]
  001ed	47 0f b6 04 01	 movzx	 r8d, BYTE PTR [r9+r8]
  001f2	41 03 d0	 add	 edx, r8d
  001f5	8d 8c 11 01 00
	e8 ff		 lea	 ecx, DWORD PTR [rcx+rdx-1572863]
  001fc	48 63 c9	 movsxd	 rcx, ecx
  001ff	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?stb__dout@@3PEAEEA
  00206	48 2b d1	 sub	 rdx, rcx
  00209	48 8b ca	 mov	 rcx, rdx
  0020c	8b d0		 mov	 edx, eax
  0020e	e8 00 00 00 00	 call	 ?stb__match@@YAXPEBEI@Z	; stb__match
  00213	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR i$[rbp]
  0021a	48 83 c0 04	 add	 rax, 4
  0021e	48 89 85 e0 00
	00 00		 mov	 QWORD PTR i$[rbp], rax
  00225	e9 5b 03 00 00	 jmp	 $LN9@stb_decomp
$LN8@stb_decomp:

; 3993 :         else if (*i >= 0x10)  stb__match(stb__dout-(stb__in3(0) - 0x100000 + 1), stb__in2(3)+1), i += 5;

  0022a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR i$[rbp]
  00231	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00234	83 f8 10	 cmp	 eax, 16
  00237	0f 8c ac 00 00
	00		 jl	 $LN10@stb_decomp
  0023d	b8 01 00 00 00	 mov	 eax, 1
  00242	48 6b c0 03	 imul	 rax, rax, 3
  00246	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  0024d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00251	c1 e0 08	 shl	 eax, 8
  00254	b9 01 00 00 00	 mov	 ecx, 1
  00259	48 6b c9 04	 imul	 rcx, rcx, 4
  0025d	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR i$[rbp]
  00264	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00268	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0026c	b9 01 00 00 00	 mov	 ecx, 1
  00271	48 6b c9 00	 imul	 rcx, rcx, 0
  00275	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR i$[rbp]
  0027c	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00280	c1 e1 10	 shl	 ecx, 16
  00283	ba 01 00 00 00	 mov	 edx, 1
  00288	48 6b d2 01	 imul	 rdx, rdx, 1
  0028c	4c 8b 85 e0 00
	00 00		 mov	 r8, QWORD PTR i$[rbp]
  00293	41 0f b6 14 10	 movzx	 edx, BYTE PTR [r8+rdx]
  00298	c1 e2 08	 shl	 edx, 8
  0029b	41 b8 01 00 00
	00		 mov	 r8d, 1
  002a1	4d 6b c0 02	 imul	 r8, r8, 2
  002a5	4c 8b 8d e0 00
	00 00		 mov	 r9, QWORD PTR i$[rbp]
  002ac	47 0f b6 04 01	 movzx	 r8d, BYTE PTR [r9+r8]
  002b1	41 03 d0	 add	 edx, r8d
  002b4	8d 8c 11 01 00
	f0 ff		 lea	 ecx, DWORD PTR [rcx+rdx-1048575]
  002bb	48 63 c9	 movsxd	 rcx, ecx
  002be	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?stb__dout@@3PEAEEA
  002c5	48 2b d1	 sub	 rdx, rcx
  002c8	48 8b ca	 mov	 rcx, rdx
  002cb	8b d0		 mov	 edx, eax
  002cd	e8 00 00 00 00	 call	 ?stb__match@@YAXPEBEI@Z	; stb__match
  002d2	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR i$[rbp]
  002d9	48 83 c0 05	 add	 rax, 5
  002dd	48 89 85 e0 00
	00 00		 mov	 QWORD PTR i$[rbp], rax
  002e4	e9 9c 02 00 00	 jmp	 $LN11@stb_decomp
$LN10@stb_decomp:

; 3994 :         else if (*i >= 0x08)  stb__lit(i+2, stb__in2(0) - 0x0800 + 1), i += 2 + (stb__in2(0) - 0x0800 + 1);

  002e9	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR i$[rbp]
  002f0	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  002f3	83 f8 08	 cmp	 eax, 8
  002f6	0f 8c 91 00 00
	00		 jl	 $LN12@stb_decomp
  002fc	b8 01 00 00 00	 mov	 eax, 1
  00301	48 6b c0 00	 imul	 rax, rax, 0
  00305	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  0030c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00310	c1 e0 08	 shl	 eax, 8
  00313	b9 01 00 00 00	 mov	 ecx, 1
  00318	48 6b c9 01	 imul	 rcx, rcx, 1
  0031c	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR i$[rbp]
  00323	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00327	8d 84 08 01 f8
	ff ff		 lea	 eax, DWORD PTR [rax+rcx-2047]
  0032e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  00335	48 83 c1 02	 add	 rcx, 2
  00339	8b d0		 mov	 edx, eax
  0033b	e8 00 00 00 00	 call	 ?stb__lit@@YAXPEBEI@Z	; stb__lit
  00340	b8 01 00 00 00	 mov	 eax, 1
  00345	48 6b c0 00	 imul	 rax, rax, 0
  00349	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  00350	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00354	c1 e0 08	 shl	 eax, 8
  00357	b9 01 00 00 00	 mov	 ecx, 1
  0035c	48 6b c9 01	 imul	 rcx, rcx, 1
  00360	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR i$[rbp]
  00367	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0036b	8d 84 08 03 f8
	ff ff		 lea	 eax, DWORD PTR [rax+rcx-2045]
  00372	48 98		 cdqe
  00374	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  0037b	48 03 c8	 add	 rcx, rax
  0037e	48 8b c1	 mov	 rax, rcx
  00381	48 89 85 e0 00
	00 00		 mov	 QWORD PTR i$[rbp], rax
  00388	e9 f8 01 00 00	 jmp	 $LN13@stb_decomp
$LN12@stb_decomp:

; 3995 :         else if (*i == 0x07)  stb__lit(i+3, stb__in2(1) + 1), i += 3 + (stb__in2(1) + 1);

  0038d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR i$[rbp]
  00394	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00397	83 f8 07	 cmp	 eax, 7
  0039a	0f 85 8b 00 00
	00		 jne	 $LN14@stb_decomp
  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 01	 imul	 rax, rax, 1
  003a9	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  003b0	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  003b4	c1 e0 08	 shl	 eax, 8
  003b7	b9 01 00 00 00	 mov	 ecx, 1
  003bc	48 6b c9 02	 imul	 rcx, rcx, 2
  003c0	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR i$[rbp]
  003c7	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  003cb	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  003cf	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  003d6	48 83 c1 03	 add	 rcx, 3
  003da	8b d0		 mov	 edx, eax
  003dc	e8 00 00 00 00	 call	 ?stb__lit@@YAXPEBEI@Z	; stb__lit
  003e1	b8 01 00 00 00	 mov	 eax, 1
  003e6	48 6b c0 01	 imul	 rax, rax, 1
  003ea	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  003f1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  003f5	c1 e0 08	 shl	 eax, 8
  003f8	b9 01 00 00 00	 mov	 ecx, 1
  003fd	48 6b c9 02	 imul	 rcx, rcx, 2
  00401	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR i$[rbp]
  00408	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0040c	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00410	48 98		 cdqe
  00412	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  00419	48 03 c8	 add	 rcx, rax
  0041c	48 8b c1	 mov	 rax, rcx
  0041f	48 89 85 e0 00
	00 00		 mov	 QWORD PTR i$[rbp], rax
  00426	e9 5a 01 00 00	 jmp	 $LN15@stb_decomp
$LN14@stb_decomp:

; 3996 :         else if (*i == 0x06)  stb__match(stb__dout-(stb__in3(1)+1), i[4]+1), i += 5;

  0042b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR i$[rbp]
  00432	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00435	83 f8 06	 cmp	 eax, 6
  00438	0f 85 90 00 00
	00		 jne	 $LN16@stb_decomp
  0043e	b8 01 00 00 00	 mov	 eax, 1
  00443	48 6b c0 04	 imul	 rax, rax, 4
  00447	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  0044e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00452	ff c0		 inc	 eax
  00454	b9 01 00 00 00	 mov	 ecx, 1
  00459	48 6b c9 01	 imul	 rcx, rcx, 1
  0045d	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR i$[rbp]
  00464	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00468	c1 e1 10	 shl	 ecx, 16
  0046b	ba 01 00 00 00	 mov	 edx, 1
  00470	48 6b d2 02	 imul	 rdx, rdx, 2
  00474	4c 8b 85 e0 00
	00 00		 mov	 r8, QWORD PTR i$[rbp]
  0047b	41 0f b6 14 10	 movzx	 edx, BYTE PTR [r8+rdx]
  00480	c1 e2 08	 shl	 edx, 8
  00483	41 b8 01 00 00
	00		 mov	 r8d, 1
  00489	4d 6b c0 03	 imul	 r8, r8, 3
  0048d	4c 8b 8d e0 00
	00 00		 mov	 r9, QWORD PTR i$[rbp]
  00494	47 0f b6 04 01	 movzx	 r8d, BYTE PTR [r9+r8]
  00499	41 03 d0	 add	 edx, r8d
  0049c	8d 4c 11 01	 lea	 ecx, DWORD PTR [rcx+rdx+1]
  004a0	48 63 c9	 movsxd	 rcx, ecx
  004a3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?stb__dout@@3PEAEEA
  004aa	48 2b d1	 sub	 rdx, rcx
  004ad	48 8b ca	 mov	 rcx, rdx
  004b0	8b d0		 mov	 edx, eax
  004b2	e8 00 00 00 00	 call	 ?stb__match@@YAXPEBEI@Z	; stb__match
  004b7	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR i$[rbp]
  004be	48 83 c0 05	 add	 rax, 5
  004c2	48 89 85 e0 00
	00 00		 mov	 QWORD PTR i$[rbp], rax
  004c9	e9 b7 00 00 00	 jmp	 $LN17@stb_decomp
$LN16@stb_decomp:

; 3997 :         else if (*i == 0x04)  stb__match(stb__dout-(stb__in3(1)+1), stb__in2(4)+1), i += 6;

  004ce	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR i$[rbp]
  004d5	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  004d8	83 f8 04	 cmp	 eax, 4
  004db	0f 85 a4 00 00
	00		 jne	 $LN18@stb_decomp
  004e1	b8 01 00 00 00	 mov	 eax, 1
  004e6	48 6b c0 04	 imul	 rax, rax, 4
  004ea	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  004f1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  004f5	c1 e0 08	 shl	 eax, 8
  004f8	b9 01 00 00 00	 mov	 ecx, 1
  004fd	48 6b c9 05	 imul	 rcx, rcx, 5
  00501	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR i$[rbp]
  00508	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0050c	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00510	b9 01 00 00 00	 mov	 ecx, 1
  00515	48 6b c9 01	 imul	 rcx, rcx, 1
  00519	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR i$[rbp]
  00520	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00524	c1 e1 10	 shl	 ecx, 16
  00527	ba 01 00 00 00	 mov	 edx, 1
  0052c	48 6b d2 02	 imul	 rdx, rdx, 2
  00530	4c 8b 85 e0 00
	00 00		 mov	 r8, QWORD PTR i$[rbp]
  00537	41 0f b6 14 10	 movzx	 edx, BYTE PTR [r8+rdx]
  0053c	c1 e2 08	 shl	 edx, 8
  0053f	41 b8 01 00 00
	00		 mov	 r8d, 1
  00545	4d 6b c0 03	 imul	 r8, r8, 3
  00549	4c 8b 8d e0 00
	00 00		 mov	 r9, QWORD PTR i$[rbp]
  00550	47 0f b6 04 01	 movzx	 r8d, BYTE PTR [r9+r8]
  00555	41 03 d0	 add	 edx, r8d
  00558	8d 4c 11 01	 lea	 ecx, DWORD PTR [rcx+rdx+1]
  0055c	48 63 c9	 movsxd	 rcx, ecx
  0055f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?stb__dout@@3PEAEEA
  00566	48 2b d1	 sub	 rdx, rcx
  00569	48 8b ca	 mov	 rcx, rdx
  0056c	8b d0		 mov	 edx, eax
  0056e	e8 00 00 00 00	 call	 ?stb__match@@YAXPEBEI@Z	; stb__match
  00573	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR i$[rbp]
  0057a	48 83 c0 06	 add	 rax, 6
  0057e	48 89 85 e0 00
	00 00		 mov	 QWORD PTR i$[rbp], rax
$LN18@stb_decomp:
$LN17@stb_decomp:
$LN15@stb_decomp:
$LN13@stb_decomp:
$LN11@stb_decomp:
$LN9@stb_decomp:
$LN3@stb_decomp:

; 3998 :     }
; 3999 :     return i;

  00585	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR i$[rbp]

; 4000 : }

  0058c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00593	5f		 pop	 rdi
  00594	5d		 pop	 rbp
  00595	c3		 ret	 0
?stb_decompress_token@@YAPEBEPEBE@Z ENDP		; stb_decompress_token
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?stb__lit@@YAXPEBEI@Z
_TEXT	SEGMENT
data$ = 224
length$ = 232
?stb__lit@@YAXPEBEI@Z PROC				; stb__lit, COMDAT

; 3973 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 3974 :     IM_ASSERT(stb__dout + length <= stb__barrier_out_e);

  0002e	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR length$[rbp]
  00034	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?stb__dout@@3PEAEEA
  0003b	48 03 c8	 add	 rcx, rax
  0003e	48 8b c1	 mov	 rax, rcx
  00041	48 3b 05 00 00
	00 00		 cmp	 rax, QWORD PTR ?stb__barrier_out_e@@3PEAEEA
  00048	76 21		 jbe	 SHORT $LN5@stb__lit
  0004a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stb__lit@@YAXPEBEI@Z@4JA
  00050	ff c0		 inc	 eax
  00052	44 8b c0	 mov	 r8d, eax
  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@IADGHEAH@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAs?$AAt?$AAb?$AA_?$AA_?$AAb?$AAa?$AAr?$AAr?$AAi@
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00069	33 c0		 xor	 eax, eax
$LN5@stb__lit:

; 3975 :     if (stb__dout + length > stb__barrier_out_e) { stb__dout += length; return; }

  0006b	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR length$[rbp]
  00071	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?stb__dout@@3PEAEEA
  00078	48 03 c8	 add	 rcx, rax
  0007b	48 8b c1	 mov	 rax, rcx
  0007e	48 3b 05 00 00
	00 00		 cmp	 rax, QWORD PTR ?stb__barrier_out_e@@3PEAEEA
  00085	76 1c		 jbe	 SHORT $LN2@stb__lit
  00087	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR length$[rbp]
  0008d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?stb__dout@@3PEAEEA
  00094	48 03 c8	 add	 rcx, rax
  00097	48 8b c1	 mov	 rax, rcx
  0009a	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?stb__dout@@3PEAEEA, rax
  000a1	eb 59		 jmp	 SHORT $LN1@stb__lit
$LN2@stb__lit:

; 3976 :     if (data < stb__barrier_in_b) { stb__dout = stb__barrier_out_e+1; return; }

  000a3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?stb__barrier_in_b@@3PEBEEB
  000aa	48 39 85 e0 00
	00 00		 cmp	 QWORD PTR data$[rbp], rax
  000b1	73 13		 jae	 SHORT $LN3@stb__lit
  000b3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?stb__barrier_out_e@@3PEAEEA
  000ba	48 ff c0	 inc	 rax
  000bd	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?stb__dout@@3PEAEEA, rax
  000c4	eb 36		 jmp	 SHORT $LN1@stb__lit
$LN3@stb__lit:

; 3977 :     memcpy(stb__dout, data, length);

  000c6	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR length$[rbp]
  000cc	44 8b c0	 mov	 r8d, eax
  000cf	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR data$[rbp]
  000d6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?stb__dout@@3PEAEEA
  000dd	e8 00 00 00 00	 call	 memcpy

; 3978 :     stb__dout += length;

  000e2	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR length$[rbp]
  000e8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?stb__dout@@3PEAEEA
  000ef	48 03 c8	 add	 rcx, rax
  000f2	48 8b c1	 mov	 rax, rcx
  000f5	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?stb__dout@@3PEAEEA, rax
$LN1@stb__lit:

; 3979 : }

  000fc	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00103	5f		 pop	 rdi
  00104	5d		 pop	 rbp
  00105	c3		 ret	 0
?stb__lit@@YAXPEBEI@Z ENDP				; stb__lit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?stb__match@@YAXPEBEI@Z
_TEXT	SEGMENT
tv80 = 192
data$ = 240
length$ = 248
?stb__match@@YAXPEBEI@Z PROC				; stb__match, COMDAT

; 3964 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 3965 :     // INVERSE of memmove... write each byte before copying the next...
; 3966 :     IM_ASSERT(stb__dout + length <= stb__barrier_out_e);

  0002e	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR length$[rbp]
  00034	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?stb__dout@@3PEAEEA
  0003b	48 03 c8	 add	 rcx, rax
  0003e	48 8b c1	 mov	 rax, rcx
  00041	48 3b 05 00 00
	00 00		 cmp	 rax, QWORD PTR ?stb__barrier_out_e@@3PEAEEA
  00048	76 22		 jbe	 SHORT $LN7@stb__match
  0004a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stb__match@@YAXPEBEI@Z@4JA
  00050	83 c0 02	 add	 eax, 2
  00053	44 8b c0	 mov	 r8d, eax
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@IADGHEAH@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAs?$AAt?$AAb?$AA_?$AA_?$AAb?$AAa?$AAr?$AAr?$AAi@
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0006a	33 c0		 xor	 eax, eax
$LN7@stb__match:

; 3967 :     if (stb__dout + length > stb__barrier_out_e) { stb__dout += length; return; }

  0006c	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR length$[rbp]
  00072	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?stb__dout@@3PEAEEA
  00079	48 03 c8	 add	 rcx, rax
  0007c	48 8b c1	 mov	 rax, rcx
  0007f	48 3b 05 00 00
	00 00		 cmp	 rax, QWORD PTR ?stb__barrier_out_e@@3PEAEEA
  00086	76 1c		 jbe	 SHORT $LN4@stb__match
  00088	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR length$[rbp]
  0008e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?stb__dout@@3PEAEEA
  00095	48 03 c8	 add	 rcx, rax
  00098	48 8b c1	 mov	 rax, rcx
  0009b	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?stb__dout@@3PEAEEA, rax
  000a2	eb 7d		 jmp	 SHORT $LN1@stb__match
$LN4@stb__match:

; 3968 :     if (data < stb__barrier_out_b) { stb__dout = stb__barrier_out_e+1; return; }

  000a4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?stb__barrier_out_b@@3PEAEEA
  000ab	48 39 85 f0 00
	00 00		 cmp	 QWORD PTR data$[rbp], rax
  000b2	73 13		 jae	 SHORT $LN5@stb__match
  000b4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?stb__barrier_out_e@@3PEAEEA
  000bb	48 ff c0	 inc	 rax
  000be	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?stb__dout@@3PEAEEA, rax
  000c5	eb 5a		 jmp	 SHORT $LN1@stb__match
$LN5@stb__match:
$LN2@stb__match:

; 3969 :     while (length--) *stb__dout++ = *data++;

  000c7	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR length$[rbp]
  000cd	89 85 c0 00 00
	00		 mov	 DWORD PTR tv80[rbp], eax
  000d3	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR length$[rbp]
  000d9	ff c8		 dec	 eax
  000db	89 85 f8 00 00
	00		 mov	 DWORD PTR length$[rbp], eax
  000e1	83 bd c0 00 00
	00 00		 cmp	 DWORD PTR tv80[rbp], 0
  000e8	74 37		 je	 SHORT $LN3@stb__match
  000ea	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?stb__dout@@3PEAEEA
  000f1	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000f8	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  000fb	88 08		 mov	 BYTE PTR [rax], cl
  000fd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?stb__dout@@3PEAEEA
  00104	48 ff c0	 inc	 rax
  00107	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?stb__dout@@3PEAEEA, rax
  0010e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00115	48 ff c0	 inc	 rax
  00118	48 89 85 f0 00
	00 00		 mov	 QWORD PTR data$[rbp], rax
  0011f	eb a6		 jmp	 SHORT $LN2@stb__match
$LN3@stb__match:
$LN1@stb__match:

; 3970 : }

  00121	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00128	5f		 pop	 rdi
  00129	5d		 pop	 rbp
  0012a	c3		 ret	 0
?stb__match@@YAXPEBEI@Z ENDP				; stb__match
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ??$ImLerp@M@@YAMMMM@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
t$ = 240
??$ImLerp@M@@YAMMMM@Z PROC				; ImLerp<float>, COMDAT

; 455  : template<typename T> static inline T ImLerp(T a, T b, float t)                  { return (T)(a + (b - a) * t); }

  00000	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  00006	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  0000c	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  00012	55		 push	 rbp
  00013	57		 push	 rdi
  00014	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0001b	48 8d 6c 24 10	 lea	 rbp, QWORD PTR [rsp+16]
  00020	48 8b fc	 mov	 rdi, rsp
  00023	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	f3 0f 10 85 e8
	00 00 00	 movss	 xmm0, DWORD PTR b$[rbp]
  00037	f3 0f 5c 85 e0
	00 00 00	 subss	 xmm0, DWORD PTR a$[rbp]
  0003f	f3 0f 59 85 f0
	00 00 00	 mulss	 xmm0, DWORD PTR t$[rbp]
  00047	f3 0f 10 8d e0
	00 00 00	 movss	 xmm1, DWORD PTR a$[rbp]
  0004f	f3 0f 58 c8	 addss	 xmm1, xmm0
  00053	0f 28 c1	 movaps	 xmm0, xmm1
  00056	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005d	5f		 pop	 rdi
  0005e	5d		 pop	 rbp
  0005f	c3		 ret	 0
??$ImLerp@M@@YAMMMM@Z ENDP				; ImLerp<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ??$ImSwap@M@@YAXAEAM0@Z
_TEXT	SEGMENT
tmp$ = 4
a$ = 256
b$ = 264
??$ImSwap@M@@YAXAEAM0@Z PROC				; ImSwap<float>, COMDAT

; 456  : template<typename T> static inline void ImSwap(T& a, T& b)                      { T tmp = a; a = b; b = tmp; }

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  00034	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00038	f3 0f 11 45 04	 movss	 DWORD PTR tmp$[rbp], xmm0
  0003d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  00044	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  0004b	f3 0f 10 01	 movss	 xmm0, DWORD PTR [rcx]
  0004f	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  00053	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  0005a	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR tmp$[rbp]
  0005f	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  00063	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006a	5f		 pop	 rdi
  0006b	5d		 pop	 rbp
  0006c	c3		 ret	 0
??$ImSwap@M@@YAXAEAM0@Z ENDP				; ImSwap<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ImAcos01@@YAMM@Z
_TEXT	SEGMENT
x$ = 224
?ImAcos01@@YAMM@Z PROC					; ImAcos01, COMDAT

; 3821 : {

  00000	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  00006	55		 push	 rbp
  00007	57		 push	 rdi
  00008	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000f	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd

; 3822 :     if (x <= 0.0f) return IM_PI * 0.5f;

  00023	0f 57 c0	 xorps	 xmm0, xmm0
  00026	0f 2f 85 e0 00
	00 00		 comiss	 xmm0, DWORD PTR x$[rbp]
  0002d	72 0a		 jb	 SHORT $LN2@ImAcos01
  0002f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00037	eb 24		 jmp	 SHORT $LN1@ImAcos01
$LN2@ImAcos01:

; 3823 :     if (x >= 1.0f) return 0.0f;

  00039	f3 0f 10 85 e0
	00 00 00	 movss	 xmm0, DWORD PTR x$[rbp]
  00041	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00048	72 05		 jb	 SHORT $LN3@ImAcos01
  0004a	0f 57 c0	 xorps	 xmm0, xmm0
  0004d	eb 0e		 jmp	 SHORT $LN1@ImAcos01
$LN3@ImAcos01:

; 3824 :     return ImAcos(x);

  0004f	f3 0f 10 85 e0
	00 00 00	 movss	 xmm0, DWORD PTR x$[rbp]
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_acosf
$LN1@ImAcos01:

; 3825 :     //return (-0.69813170079773212f * x * x - 0.87266462599716477f) * x + 1.5707963267948966f; // Cheap approximation, may be enough for what we do.
; 3826 : }

  0005d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
?ImAcos01@@YAMM@Z ENDP					; ImAcos01
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?CalcWordWrapNextLineStartA@@YAPEBDPEBD0@Z
_TEXT	SEGMENT
text$ = 224
text_end$ = 232
?CalcWordWrapNextLineStartA@@YAPEBDPEBD0@Z PROC		; CalcWordWrapNextLineStartA, COMDAT

; 3351 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
$LN2@CalcWordWr:

; 3352 :     while (text < text_end && ImCharIsBlankA(*text))

  0002f	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR text_end$[rbp]
  00036	48 39 85 e0 00
	00 00		 cmp	 QWORD PTR text$[rbp], rax
  0003d	73 29		 jae	 SHORT $LN3@CalcWordWr
  0003f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR text$[rbp]
  00046	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00049	e8 00 00 00 00	 call	 ?ImCharIsBlankA@@YA_ND@Z ; ImCharIsBlankA
  0004e	0f b6 c0	 movzx	 eax, al
  00051	85 c0		 test	 eax, eax
  00053	74 13		 je	 SHORT $LN3@CalcWordWr

; 3353 :         text++;

  00055	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR text$[rbp]
  0005c	48 ff c0	 inc	 rax
  0005f	48 89 85 e0 00
	00 00		 mov	 QWORD PTR text$[rbp], rax
  00066	eb c7		 jmp	 SHORT $LN2@CalcWordWr
$LN3@CalcWordWr:

; 3354 :     if (*text == '\n')

  00068	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR text$[rbp]
  0006f	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00072	83 f8 0a	 cmp	 eax, 10
  00075	75 11		 jne	 SHORT $LN4@CalcWordWr

; 3355 :         text++;

  00077	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR text$[rbp]
  0007e	48 ff c0	 inc	 rax
  00081	48 89 85 e0 00
	00 00		 mov	 QWORD PTR text$[rbp], rax
$LN4@CalcWordWr:

; 3356 :     return text;

  00088	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR text$[rbp]

; 3357 : }

  0008f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?CalcWordWrapNextLineStartA@@YAPEBDPEBD0@Z ENDP		; CalcWordWrapNextLineStartA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z
_TEXT	SEGMENT
n$1 = 4
font$ = 256
candidate_chars$ = 264
candidate_chars_count$ = 272
?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z PROC	; FindFirstExistingGlyph, COMDAT

; 3148 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 3149 :     for (int n = 0; n < candidate_chars_count; n++)

  00034	c7 45 04 00 00
	00 00		 mov	 DWORD PTR n$1[rbp], 0
  0003b	eb 08		 jmp	 SHORT $LN4@FindFirstE
$LN2@FindFirstE:
  0003d	8b 45 04	 mov	 eax, DWORD PTR n$1[rbp]
  00040	ff c0		 inc	 eax
  00042	89 45 04	 mov	 DWORD PTR n$1[rbp], eax
$LN4@FindFirstE:
  00045	8b 85 10 01 00
	00		 mov	 eax, DWORD PTR candidate_chars_count$[rbp]
  0004b	39 45 04	 cmp	 DWORD PTR n$1[rbp], eax
  0004e	7d 33		 jge	 SHORT $LN3@FindFirstE

; 3150 :         if (font->FindGlyphNoFallback(candidate_chars[n]) != NULL)

  00050	48 63 45 04	 movsxd	 rax, DWORD PTR n$1[rbp]
  00054	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR candidate_chars$[rbp]
  0005b	0f b7 14 41	 movzx	 edx, WORD PTR [rcx+rax*2]
  0005f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  00066	e8 00 00 00 00	 call	 ?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyphNoFallback
  0006b	48 85 c0	 test	 rax, rax
  0006e	74 11		 je	 SHORT $LN5@FindFirstE

; 3151 :             return candidate_chars[n];

  00070	48 63 45 04	 movsxd	 rax, DWORD PTR n$1[rbp]
  00074	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR candidate_chars$[rbp]
  0007b	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0007f	eb 07		 jmp	 SHORT $LN1@FindFirstE
$LN5@FindFirstE:

; 3152 :     return (ImWchar)-1;

  00081	eb ba		 jmp	 SHORT $LN2@FindFirstE
$LN3@FindFirstE:
  00083	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
$LN1@FindFirstE:

; 3153 : }

  00088	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008f	5f		 pop	 rdi
  00090	5d		 pop	 rbp
  00091	c3		 ret	 0
?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z ENDP	; FindFirstExistingGlyph
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z
_TEXT	SEGMENT
n$1 = 4
tv75 = 212
base_codepoint$ = 256
accumulative_offsets$ = 264
accumulative_offsets_count$ = 272
out_ranges$ = 280
?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z PROC ; UnpackAccumulativeOffsetsIntoRanges, COMDAT

; 2854 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8b ec	 mov	 rbp, rsp
  0001f	48 8b fc	 mov	 rdi, rsp
  00022	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR [rsp+264]

; 2855 :     for (int n = 0; n < accumulative_offsets_count; n++, out_ranges += 2)

  00035	c7 45 04 00 00
	00 00		 mov	 DWORD PTR n$1[rbp], 0
  0003c	eb 1a		 jmp	 SHORT $LN4@UnpackAccu
$LN2@UnpackAccu:
  0003e	8b 45 04	 mov	 eax, DWORD PTR n$1[rbp]
  00041	ff c0		 inc	 eax
  00043	89 45 04	 mov	 DWORD PTR n$1[rbp], eax
  00046	48 8b 85 18 01
	00 00		 mov	 rax, QWORD PTR out_ranges$[rbp]
  0004d	48 83 c0 04	 add	 rax, 4
  00051	48 89 85 18 01
	00 00		 mov	 QWORD PTR out_ranges$[rbp], rax
$LN4@UnpackAccu:
  00058	8b 85 10 01 00
	00		 mov	 eax, DWORD PTR accumulative_offsets_count$[rbp]
  0005e	39 45 04	 cmp	 DWORD PTR n$1[rbp], eax
  00061	7d 77		 jge	 SHORT $LN3@UnpackAccu

; 2856 :     {
; 2857 :         out_ranges[0] = out_ranges[1] = (ImWchar)(base_codepoint + accumulative_offsets[n]);

  00063	48 63 45 04	 movsxd	 rax, DWORD PTR n$1[rbp]
  00067	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR accumulative_offsets$[rbp]
  0006e	0f bf 04 41	 movsx	 eax, WORD PTR [rcx+rax*2]
  00072	8b 8d 00 01 00
	00		 mov	 ecx, DWORD PTR base_codepoint$[rbp]
  00078	03 c8		 add	 ecx, eax
  0007a	89 8d d4 00 00
	00		 mov	 DWORD PTR tv75[rbp], ecx
  00080	b8 02 00 00 00	 mov	 eax, 2
  00085	48 6b c0 01	 imul	 rax, rax, 1
  00089	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR out_ranges$[rbp]
  00090	0f b7 95 d4 00
	00 00		 movzx	 edx, WORD PTR tv75[rbp]
  00097	66 89 14 01	 mov	 WORD PTR [rcx+rax], dx
  0009b	b8 02 00 00 00	 mov	 eax, 2
  000a0	48 6b c0 00	 imul	 rax, rax, 0
  000a4	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR out_ranges$[rbp]
  000ab	0f b7 95 d4 00
	00 00		 movzx	 edx, WORD PTR tv75[rbp]
  000b2	66 89 14 01	 mov	 WORD PTR [rcx+rax], dx

; 2858 :         base_codepoint += accumulative_offsets[n];

  000b6	48 63 45 04	 movsxd	 rax, DWORD PTR n$1[rbp]
  000ba	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR accumulative_offsets$[rbp]
  000c1	0f bf 04 41	 movsx	 eax, WORD PTR [rcx+rax*2]
  000c5	8b 8d 00 01 00
	00		 mov	 ecx, DWORD PTR base_codepoint$[rbp]
  000cb	03 c8		 add	 ecx, eax
  000cd	8b c1		 mov	 eax, ecx
  000cf	89 85 00 01 00
	00		 mov	 DWORD PTR base_codepoint$[rbp], eax

; 2859 :     }

  000d5	e9 64 ff ff ff	 jmp	 $LN2@UnpackAccu
$LN3@UnpackAccu:

; 2860 :     out_ranges[0] = 0;

  000da	b8 02 00 00 00	 mov	 eax, 2
  000df	48 6b c0 00	 imul	 rax, rax, 0
  000e3	33 c9		 xor	 ecx, ecx
  000e5	48 8b 95 18 01
	00 00		 mov	 rdx, QWORD PTR out_ranges$[rbp]
  000ec	66 89 0c 02	 mov	 WORD PTR [rdx+rax], cx

; 2861 : }

  000f0	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000f7	5f		 pop	 rdi
  000f8	5d		 pop	 rbp
  000f9	c3		 ret	 0
?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z ENDP ; UnpackAccumulativeOffsetsIntoRanges
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z
_TEXT	SEGMENT
r$ = 8
n$5 = 36
y$6 = 68
line_width$7 = 100
pad_left$8 = 132
pad_right$9 = 164
write_ptr$10 = 200
i$11 = 228
i$12 = 260
i$13 = 292
write_ptr$14 = 328
i$15 = 356
i$16 = 388
i$17 = 420
uv0$18 = 456
uv1$19 = 488
half_v$20 = 516
$T21 = 932
$T22 = 964
$T23 = 996
tv221 = 1032
tv204 = 1032
__$ArrayPad$ = 1040
atlas$ = 1088
?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z PROC ; ImFontAtlasBuildRenderLinesTexData, COMDAT

; 2701 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec 50 04
	00 00		 sub	 rsp, 1104		; 00000450H
  0000f	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 14 01 00 00	 mov	 ecx, 276		; 00000114H
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 78
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1144]
  0002b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00032	48 33 c5	 xor	 rax, rbp
  00035	48 89 85 10 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2702 :     if (atlas->Flags & ImFontAtlasFlags_NoBakedLines)

  0003c	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00043	8b 00		 mov	 eax, DWORD PTR [rax]
  00045	83 e0 04	 and	 eax, 4
  00048	85 c0		 test	 eax, eax
  0004a	74 05		 je	 SHORT $LN23@ImFontAtla

; 2703 :         return;

  0004c	e9 67 04 00 00	 jmp	 $LN1@ImFontAtla
$LN23@ImFontAtla:

; 2704 : 
; 2705 :     // This generates a triangular shape in the texture, with the various line widths stacked on top of each other to allow interpolation between them
; 2706 :     ImFontAtlasCustomRect* r = atlas->GetCustomRectByIndex(atlas->PackIdLines);

  00051	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00058	8b 90 98 04 00
	00		 mov	 edx, DWORD PTR [rax+1176]
  0005e	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  00065	e8 00 00 00 00	 call	 ?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z ; ImFontAtlas::GetCustomRectByIndex
  0006a	48 89 45 08	 mov	 QWORD PTR r$[rbp], rax

; 2707 :     IM_ASSERT(r->IsPacked());

  0006e	48 8b 4d 08	 mov	 rcx, QWORD PTR r$[rbp]
  00072	e8 00 00 00 00	 call	 ?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ ; ImFontAtlasCustomRect::IsPacked
  00077	0f b6 c0	 movzx	 eax, al
  0007a	85 c0		 test	 eax, eax
  0007c	75 22		 jne	 SHORT $LN27@ImFontAtla
  0007e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z@4JA
  00084	83 c0 06	 add	 eax, 6
  00087	44 8b c0	 mov	 r8d, eax
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00091	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@DDBMCGAE@?$AAr?$AA?9?$AA?$DO?$AAI?$AAs?$AAP?$AAa?$AAc?$AAk?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0009e	33 c0		 xor	 eax, eax
$LN27@ImFontAtla:

; 2708 :     for (unsigned int n = 0; n < IM_DRAWLIST_TEX_LINES_WIDTH_MAX + 1; n++) // +1 because of the zero-width row

  000a0	c7 45 24 00 00
	00 00		 mov	 DWORD PTR n$5[rbp], 0
  000a7	eb 08		 jmp	 SHORT $LN4@ImFontAtla
$LN2@ImFontAtla:
  000a9	8b 45 24	 mov	 eax, DWORD PTR n$5[rbp]
  000ac	ff c0		 inc	 eax
  000ae	89 45 24	 mov	 DWORD PTR n$5[rbp], eax
$LN4@ImFontAtla:
  000b1	83 7d 24 40	 cmp	 DWORD PTR n$5[rbp], 64	; 00000040H
  000b5	0f 83 fd 03 00
	00		 jae	 $LN3@ImFontAtla

; 2709 :     {
; 2710 :         // Each line consists of at least two empty pixels at the ends, with a line of solid pixels in the middle
; 2711 :         unsigned int y = n;

  000bb	8b 45 24	 mov	 eax, DWORD PTR n$5[rbp]
  000be	89 45 44	 mov	 DWORD PTR y$6[rbp], eax

; 2712 :         unsigned int line_width = n;

  000c1	8b 45 24	 mov	 eax, DWORD PTR n$5[rbp]
  000c4	89 45 64	 mov	 DWORD PTR line_width$7[rbp], eax

; 2713 :         unsigned int pad_left = (r->Width - line_width) / 2;

  000c7	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  000cb	0f b7 00	 movzx	 eax, WORD PTR [rax]
  000ce	2b 45 64	 sub	 eax, DWORD PTR line_width$7[rbp]
  000d1	33 d2		 xor	 edx, edx
  000d3	b9 02 00 00 00	 mov	 ecx, 2
  000d8	f7 f1		 div	 ecx
  000da	89 85 84 00 00
	00		 mov	 DWORD PTR pad_left$8[rbp], eax

; 2714 :         unsigned int pad_right = r->Width - (pad_left + line_width);

  000e0	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  000e4	0f b7 00	 movzx	 eax, WORD PTR [rax]
  000e7	8b 4d 64	 mov	 ecx, DWORD PTR line_width$7[rbp]
  000ea	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR pad_left$8[rbp]
  000f0	03 d1		 add	 edx, ecx
  000f2	8b ca		 mov	 ecx, edx
  000f4	2b c1		 sub	 eax, ecx
  000f6	89 85 a4 00 00
	00		 mov	 DWORD PTR pad_right$9[rbp], eax

; 2715 : 
; 2716 :         // Write each slice
; 2717 :         IM_ASSERT(pad_left + line_width + pad_right == r->Width && y < r->Height); // Make sure we're inside the texture bounds before we start writing pixels

  000fc	8b 45 64	 mov	 eax, DWORD PTR line_width$7[rbp]
  000ff	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR pad_left$8[rbp]
  00105	03 c8		 add	 ecx, eax
  00107	8b c1		 mov	 eax, ecx
  00109	03 85 a4 00 00
	00		 add	 eax, DWORD PTR pad_right$9[rbp]
  0010f	48 8b 4d 08	 mov	 rcx, QWORD PTR r$[rbp]
  00113	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  00116	3b c1		 cmp	 eax, ecx
  00118	75 0d		 jne	 SHORT $LN28@ImFontAtla
  0011a	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  0011e	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  00122	39 45 44	 cmp	 DWORD PTR y$6[rbp], eax
  00125	72 22		 jb	 SHORT $LN29@ImFontAtla
$LN28@ImFontAtla:
  00127	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z@4JA
  0012d	83 c0 10	 add	 eax, 16
  00130	44 8b c0	 mov	 r8d, eax
  00133	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0013a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HO@DLMJCKJA@?$AAp?$AAa?$AAd?$AA_?$AAl?$AAe?$AAf?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CL?$AA?5?$AAp?$AAa?$AAd?$AA_?$AAr?$AAi?$AAg?$AAh@
  00141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00147	33 c0		 xor	 eax, eax
$LN29@ImFontAtla:

; 2718 :         if (atlas->TexPixelsAlpha8 != NULL)

  00149	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00150	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  00155	0f 84 0b 01 00
	00		 je	 $LN24@ImFontAtla

; 2719 :         {
; 2720 :             unsigned char* write_ptr = &atlas->TexPixelsAlpha8[r->X + ((r->Y + y) * atlas->TexWidth)];

  0015b	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  0015f	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00163	48 8b 4d 08	 mov	 rcx, QWORD PTR r$[rbp]
  00167	0f b7 49 06	 movzx	 ecx, WORD PTR [rcx+6]
  0016b	03 4d 44	 add	 ecx, DWORD PTR y$6[rbp]
  0016e	48 8b 95 40 04
	00 00		 mov	 rdx, QWORD PTR atlas$[rbp]
  00175	0f af 4a 40	 imul	 ecx, DWORD PTR [rdx+64]
  00179	03 c1		 add	 eax, ecx
  0017b	8b c0		 mov	 eax, eax
  0017d	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  00184	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00188	48 03 c8	 add	 rcx, rax
  0018b	48 8b c1	 mov	 rax, rcx
  0018e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR write_ptr$10[rbp], rax

; 2721 :             for (unsigned int i = 0; i < pad_left; i++)

  00195	c7 85 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR i$11[rbp], 0
  0019f	eb 0e		 jmp	 SHORT $LN7@ImFontAtla
$LN5@ImFontAtla:
  001a1	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR i$11[rbp]
  001a7	ff c0		 inc	 eax
  001a9	89 85 e4 00 00
	00		 mov	 DWORD PTR i$11[rbp], eax
$LN7@ImFontAtla:
  001af	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR pad_left$8[rbp]
  001b5	39 85 e4 00 00
	00		 cmp	 DWORD PTR i$11[rbp], eax
  001bb	73 13		 jae	 SHORT $LN6@ImFontAtla

; 2722 :                 *(write_ptr + i) = 0x00;

  001bd	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR i$11[rbp]
  001c3	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR write_ptr$10[rbp]
  001ca	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
  001ce	eb d1		 jmp	 SHORT $LN5@ImFontAtla
$LN6@ImFontAtla:

; 2723 : 
; 2724 :             for (unsigned int i = 0; i < line_width; i++)

  001d0	c7 85 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$12[rbp], 0
  001da	eb 0e		 jmp	 SHORT $LN10@ImFontAtla
$LN8@ImFontAtla:
  001dc	8b 85 04 01 00
	00		 mov	 eax, DWORD PTR i$12[rbp]
  001e2	ff c0		 inc	 eax
  001e4	89 85 04 01 00
	00		 mov	 DWORD PTR i$12[rbp], eax
$LN10@ImFontAtla:
  001ea	8b 45 64	 mov	 eax, DWORD PTR line_width$7[rbp]
  001ed	39 85 04 01 00
	00		 cmp	 DWORD PTR i$12[rbp], eax
  001f3	73 1f		 jae	 SHORT $LN9@ImFontAtla

; 2725 :                 *(write_ptr + pad_left + i) = 0xFF;

  001f5	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR pad_left$8[rbp]
  001fb	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR write_ptr$10[rbp]
  00202	48 03 c8	 add	 rcx, rax
  00205	48 8b c1	 mov	 rax, rcx
  00208	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR i$12[rbp]
  0020e	c6 04 08 ff	 mov	 BYTE PTR [rax+rcx], 255	; 000000ffH
  00212	eb c8		 jmp	 SHORT $LN8@ImFontAtla
$LN9@ImFontAtla:

; 2726 : 
; 2727 :             for (unsigned int i = 0; i < pad_right; i++)

  00214	c7 85 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$13[rbp], 0
  0021e	eb 0e		 jmp	 SHORT $LN13@ImFontAtla
$LN11@ImFontAtla:
  00220	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR i$13[rbp]
  00226	ff c0		 inc	 eax
  00228	89 85 24 01 00
	00		 mov	 DWORD PTR i$13[rbp], eax
$LN13@ImFontAtla:
  0022e	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR pad_right$9[rbp]
  00234	39 85 24 01 00
	00		 cmp	 DWORD PTR i$13[rbp], eax
  0023a	73 25		 jae	 SHORT $LN12@ImFontAtla

; 2728 :                 *(write_ptr + pad_left + line_width + i) = 0x00;

  0023c	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR pad_left$8[rbp]
  00242	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR write_ptr$10[rbp]
  00249	48 03 c8	 add	 rcx, rax
  0024c	48 8b c1	 mov	 rax, rcx
  0024f	8b 4d 64	 mov	 ecx, DWORD PTR line_width$7[rbp]
  00252	48 03 c1	 add	 rax, rcx
  00255	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR i$13[rbp]
  0025b	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0
  0025f	eb bf		 jmp	 SHORT $LN11@ImFontAtla
$LN12@ImFontAtla:

; 2729 :         }
; 2730 :         else

  00261	e9 0a 01 00 00	 jmp	 $LN25@ImFontAtla
$LN24@ImFontAtla:

; 2731 :         {
; 2732 :             unsigned int* write_ptr = &atlas->TexPixelsRGBA32[r->X + ((r->Y + y) * atlas->TexWidth)];

  00266	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  0026a	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0026e	48 8b 4d 08	 mov	 rcx, QWORD PTR r$[rbp]
  00272	0f b7 49 06	 movzx	 ecx, WORD PTR [rcx+6]
  00276	03 4d 44	 add	 ecx, DWORD PTR y$6[rbp]
  00279	48 8b 95 40 04
	00 00		 mov	 rdx, QWORD PTR atlas$[rbp]
  00280	0f af 4a 40	 imul	 ecx, DWORD PTR [rdx+64]
  00284	03 c1		 add	 eax, ecx
  00286	8b c0		 mov	 eax, eax
  00288	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  0028f	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00293	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00297	48 89 85 48 01
	00 00		 mov	 QWORD PTR write_ptr$14[rbp], rax

; 2733 :             for (unsigned int i = 0; i < pad_left; i++)

  0029e	c7 85 64 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$15[rbp], 0
  002a8	eb 0e		 jmp	 SHORT $LN16@ImFontAtla
$LN14@ImFontAtla:
  002aa	8b 85 64 01 00
	00		 mov	 eax, DWORD PTR i$15[rbp]
  002b0	ff c0		 inc	 eax
  002b2	89 85 64 01 00
	00		 mov	 DWORD PTR i$15[rbp], eax
$LN16@ImFontAtla:
  002b8	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR pad_left$8[rbp]
  002be	39 85 64 01 00
	00		 cmp	 DWORD PTR i$15[rbp], eax
  002c4	73 16		 jae	 SHORT $LN15@ImFontAtla

; 2734 :                 *(write_ptr + i) = IM_COL32(255, 255, 255, 0);

  002c6	8b 85 64 01 00
	00		 mov	 eax, DWORD PTR i$15[rbp]
  002cc	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR write_ptr$14[rbp]
  002d3	c7 04 81 ff ff
	ff 00		 mov	 DWORD PTR [rcx+rax*4], 16777215 ; 00ffffffH
  002da	eb ce		 jmp	 SHORT $LN14@ImFontAtla
$LN15@ImFontAtla:

; 2735 : 
; 2736 :             for (unsigned int i = 0; i < line_width; i++)

  002dc	c7 85 84 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$16[rbp], 0
  002e6	eb 0e		 jmp	 SHORT $LN19@ImFontAtla
$LN17@ImFontAtla:
  002e8	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR i$16[rbp]
  002ee	ff c0		 inc	 eax
  002f0	89 85 84 01 00
	00		 mov	 DWORD PTR i$16[rbp], eax
$LN19@ImFontAtla:
  002f6	8b 45 64	 mov	 eax, DWORD PTR line_width$7[rbp]
  002f9	39 85 84 01 00
	00		 cmp	 DWORD PTR i$16[rbp], eax
  002ff	73 20		 jae	 SHORT $LN18@ImFontAtla

; 2737 :                 *(write_ptr + pad_left + i) = IM_COL32_WHITE;

  00301	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR pad_left$8[rbp]
  00307	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR write_ptr$14[rbp]
  0030e	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00312	8b 8d 84 01 00
	00		 mov	 ecx, DWORD PTR i$16[rbp]
  00318	c7 04 88 ff ff
	ff ff		 mov	 DWORD PTR [rax+rcx*4], -1 ; ffffffffH
  0031f	eb c7		 jmp	 SHORT $LN17@ImFontAtla
$LN18@ImFontAtla:

; 2738 : 
; 2739 :             for (unsigned int i = 0; i < pad_right; i++)

  00321	c7 85 a4 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$17[rbp], 0
  0032b	eb 0e		 jmp	 SHORT $LN22@ImFontAtla
$LN20@ImFontAtla:
  0032d	8b 85 a4 01 00
	00		 mov	 eax, DWORD PTR i$17[rbp]
  00333	ff c0		 inc	 eax
  00335	89 85 a4 01 00
	00		 mov	 DWORD PTR i$17[rbp], eax
$LN22@ImFontAtla:
  0033b	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR pad_right$9[rbp]
  00341	39 85 a4 01 00
	00		 cmp	 DWORD PTR i$17[rbp], eax
  00347	73 27		 jae	 SHORT $LN21@ImFontAtla

; 2740 :                 *(write_ptr + pad_left + line_width + i) = IM_COL32(255, 255, 255, 0);

  00349	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR pad_left$8[rbp]
  0034f	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR write_ptr$14[rbp]
  00356	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0035a	8b 4d 64	 mov	 ecx, DWORD PTR line_width$7[rbp]
  0035d	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00361	8b 8d a4 01 00
	00		 mov	 ecx, DWORD PTR i$17[rbp]
  00367	c7 04 88 ff ff
	ff 00		 mov	 DWORD PTR [rax+rcx*4], 16777215 ; 00ffffffH
  0036e	eb bd		 jmp	 SHORT $LN20@ImFontAtla
$LN21@ImFontAtla:
$LN25@ImFontAtla:

; 2741 :         }
; 2742 : 
; 2743 :         // Calculate UVs for this line
; 2744 :         ImVec2 uv0 = ImVec2((float)(r->X + pad_left - 1), (float)(r->Y + y)) * atlas->TexUvScale;

  00370	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00377	48 83 c0 48	 add	 rax, 72			; 00000048H
  0037b	48 89 85 08 04
	00 00		 mov	 QWORD PTR tv204[rbp], rax
  00382	48 8b 4d 08	 mov	 rcx, QWORD PTR r$[rbp]
  00386	0f b7 49 06	 movzx	 ecx, WORD PTR [rcx+6]
  0038a	03 4d 44	 add	 ecx, DWORD PTR y$6[rbp]
  0038d	8b c9		 mov	 ecx, ecx
  0038f	f3 48 0f 2a c1	 cvtsi2ss xmm0, rcx
  00394	48 8b 4d 08	 mov	 rcx, QWORD PTR r$[rbp]
  00398	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  0039c	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR pad_left$8[rbp]
  003a2	8d 4c 11 ff	 lea	 ecx, DWORD PTR [rcx+rdx-1]
  003a6	8b c9		 mov	 ecx, ecx
  003a8	f3 48 0f 2a c9	 cvtsi2ss xmm1, rcx
  003ad	0f 28 d0	 movaps	 xmm2, xmm0
  003b0	48 8d 8d a4 03
	00 00		 lea	 rcx, QWORD PTR $T21[rbp]
  003b7	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  003bc	48 8b 8d 08 04
	00 00		 mov	 rcx, QWORD PTR tv204[rbp]
  003c3	4c 8b c1	 mov	 r8, rcx
  003c6	48 8b d0	 mov	 rdx, rax
  003c9	48 8d 8d c8 01
	00 00		 lea	 rcx, QWORD PTR uv0$18[rbp]
  003d0	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@0@Z ; operator*

; 2745 :         ImVec2 uv1 = ImVec2((float)(r->X + pad_left + line_width + 1), (float)(r->Y + y + 1)) * atlas->TexUvScale;

  003d5	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  003dc	48 83 c0 48	 add	 rax, 72			; 00000048H
  003e0	48 89 85 08 04
	00 00		 mov	 QWORD PTR tv221[rbp], rax
  003e7	48 8b 4d 08	 mov	 rcx, QWORD PTR r$[rbp]
  003eb	0f b7 49 06	 movzx	 ecx, WORD PTR [rcx+6]
  003ef	8b 55 44	 mov	 edx, DWORD PTR y$6[rbp]
  003f2	8d 4c 11 01	 lea	 ecx, DWORD PTR [rcx+rdx+1]
  003f6	8b c9		 mov	 ecx, ecx
  003f8	f3 48 0f 2a c1	 cvtsi2ss xmm0, rcx
  003fd	48 8b 4d 08	 mov	 rcx, QWORD PTR r$[rbp]
  00401	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00405	03 8d 84 00 00
	00		 add	 ecx, DWORD PTR pad_left$8[rbp]
  0040b	8b 55 64	 mov	 edx, DWORD PTR line_width$7[rbp]
  0040e	8d 4c 11 01	 lea	 ecx, DWORD PTR [rcx+rdx+1]
  00412	8b c9		 mov	 ecx, ecx
  00414	f3 48 0f 2a c9	 cvtsi2ss xmm1, rcx
  00419	0f 28 d0	 movaps	 xmm2, xmm0
  0041c	48 8d 8d c4 03
	00 00		 lea	 rcx, QWORD PTR $T22[rbp]
  00423	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00428	48 8b 8d 08 04
	00 00		 mov	 rcx, QWORD PTR tv221[rbp]
  0042f	4c 8b c1	 mov	 r8, rcx
  00432	48 8b d0	 mov	 rdx, rax
  00435	48 8d 8d e8 01
	00 00		 lea	 rcx, QWORD PTR uv1$19[rbp]
  0043c	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@0@Z ; operator*

; 2746 :         float half_v = (uv0.y + uv1.y) * 0.5f; // Calculate a constant V in the middle of the row to avoid sampling artifacts

  00441	f3 0f 10 85 cc
	01 00 00	 movss	 xmm0, DWORD PTR uv0$18[rbp+4]
  00449	f3 0f 58 85 ec
	01 00 00	 addss	 xmm0, DWORD PTR uv1$19[rbp+4]
  00451	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00459	f3 0f 11 85 04
	02 00 00	 movss	 DWORD PTR half_v$20[rbp], xmm0

; 2747 :         atlas->TexUvLines[n] = ImVec4(uv0.x, half_v, uv1.x, half_v);

  00461	f3 0f 10 85 04
	02 00 00	 movss	 xmm0, DWORD PTR half_v$20[rbp]
  00469	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0046f	f3 0f 10 9d e8
	01 00 00	 movss	 xmm3, DWORD PTR uv1$19[rbp]
  00477	f3 0f 10 95 04
	02 00 00	 movss	 xmm2, DWORD PTR half_v$20[rbp]
  0047f	f3 0f 10 8d c8
	01 00 00	 movss	 xmm1, DWORD PTR uv0$18[rbp]
  00487	48 8d 8d e4 03
	00 00		 lea	 rcx, QWORD PTR $T23[rbp]
  0048e	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00493	8b 4d 24	 mov	 ecx, DWORD PTR n$5[rbp]
  00496	48 6b c9 10	 imul	 rcx, rcx, 16
  0049a	48 8b 95 40 04
	00 00		 mov	 rdx, QWORD PTR atlas$[rbp]
  004a1	48 8d bc 0a 88
	00 00 00	 lea	 rdi, QWORD PTR [rdx+rcx+136]
  004a9	48 8b f0	 mov	 rsi, rax
  004ac	b9 10 00 00 00	 mov	 ecx, 16
  004b1	f3 a4		 rep movsb

; 2748 :     }

  004b3	e9 f1 fb ff ff	 jmp	 $LN2@ImFontAtla
$LN3@ImFontAtla:
$LN1@ImFontAtla:

; 2749 : }

  004b8	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  004bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z$rtcFrameData
  004c3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  004c8	48 8b 8d 10 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  004cf	48 33 cd	 xor	 rcx, rbp
  004d2	e8 00 00 00 00	 call	 __security_check_cookie
  004d7	48 8d a5 20 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1056]
  004de	5f		 pop	 rdi
  004df	5e		 pop	 rsi
  004e0	5d		 pop	 rbp
  004e1	c3		 ret	 0
?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z ENDP ; ImFontAtlasBuildRenderLinesTexData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z
_TEXT	SEGMENT
r$ = 8
w$ = 36
x_for_white$1 = 68
x_for_black$2 = 100
offset$3 = 132
$T4 = 356
atlas$ = 416
?ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z PROC ; ImFontAtlasBuildRenderDefaultTexData, COMDAT

; 2661 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0000e	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+488]

; 2662 :     ImFontAtlasCustomRect* r = atlas->GetCustomRectByIndex(atlas->PackIdMouseCursors);

  0002a	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00031	8b 90 94 04 00
	00		 mov	 edx, DWORD PTR [rax+1172]
  00037	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  0003e	e8 00 00 00 00	 call	 ?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z ; ImFontAtlas::GetCustomRectByIndex
  00043	48 89 45 08	 mov	 QWORD PTR r$[rbp], rax

; 2663 :     IM_ASSERT(r->IsPacked());

  00047	48 8b 4d 08	 mov	 rcx, QWORD PTR r$[rbp]
  0004b	e8 00 00 00 00	 call	 ?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ ; ImFontAtlasCustomRect::IsPacked
  00050	0f b6 c0	 movzx	 eax, al
  00053	85 c0		 test	 eax, eax
  00055	75 22		 jne	 SHORT $LN9@ImFontAtla
  00057	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z@4JA
  0005d	83 c0 02	 add	 eax, 2
  00060	44 8b c0	 mov	 r8d, eax
  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@DDBMCGAE@?$AAr?$AA?9?$AA?$DO?$AAI?$AAs?$AAP?$AAa?$AAc?$AAk?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00077	33 c0		 xor	 eax, eax
$LN9@ImFontAtla:

; 2664 : 
; 2665 :     const int w = atlas->TexWidth;

  00079	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00080	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  00083	89 45 24	 mov	 DWORD PTR w$[rbp], eax

; 2666 :     if (!(atlas->Flags & ImFontAtlasFlags_NoMouseCursors))

  00086	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  0008d	8b 00		 mov	 eax, DWORD PTR [rax]
  0008f	83 e0 02	 and	 eax, 2
  00092	85 c0		 test	 eax, eax
  00094	0f 85 70 01 00
	00		 jne	 $LN2@ImFontAtla

; 2667 :     {
; 2668 :         // Render/copy pixels
; 2669 :         IM_ASSERT(r->Width == FONT_ATLAS_DEFAULT_TEX_DATA_W * 2 + 1 && r->Height == FONT_ATLAS_DEFAULT_TEX_DATA_H);

  0009a	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  0009e	0f b7 00	 movzx	 eax, WORD PTR [rax]
  000a1	3d f5 00 00 00	 cmp	 eax, 245		; 000000f5H
  000a6	75 0d		 jne	 SHORT $LN10@ImFontAtla
  000a8	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  000ac	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  000b0	83 f8 1b	 cmp	 eax, 27
  000b3	74 22		 je	 SHORT $LN11@ImFontAtla
$LN10@ImFontAtla:
  000b5	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z@4JA
  000bb	83 c0 08	 add	 eax, 8
  000be	44 8b c0	 mov	 r8d, eax
  000c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1MA@PDHEAINP@?$AAr?$AA?9?$AA?$DO?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAF?$AAO?$AAN?$AAT?$AA_?$AAA?$AAT?$AAL?$AAA?$AAS?$AA_?$AAD?$AAE?$AAF?$AAA?$AAU?$AAL?$AAT?$AA_?$AAT@
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000d5	33 c0		 xor	 eax, eax
$LN11@ImFontAtla:

; 2670 :         const int x_for_white = r->X;

  000d7	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  000db	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  000df	89 45 44	 mov	 DWORD PTR x_for_white$1[rbp], eax

; 2671 :         const int x_for_black = r->X + FONT_ATLAS_DEFAULT_TEX_DATA_W + 1;

  000e2	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  000e6	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  000ea	83 c0 7b	 add	 eax, 123		; 0000007bH
  000ed	89 45 64	 mov	 DWORD PTR x_for_black$2[rbp], eax

; 2672 :         if (atlas->TexPixelsAlpha8 != NULL)

  000f0	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  000f7	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  000fc	0f 84 81 00 00
	00		 je	 $LN4@ImFontAtla

; 2673 :         {
; 2674 :             ImFontAtlasBuildRender8bppRectFromString(atlas, x_for_white, r->Y, FONT_ATLAS_DEFAULT_TEX_DATA_W, FONT_ATLAS_DEFAULT_TEX_DATA_H, FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS, '.', 0xFF);

  00102	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  00106	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0010a	c6 44 24 38 ff	 mov	 BYTE PTR [rsp+56], 255	; 000000ffH
  0010f	c6 44 24 30 2e	 mov	 BYTE PTR [rsp+48], 46	; 0000002eH
  00114	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS@@3QBDB
  0011b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00120	c7 44 24 20 1b
	00 00 00	 mov	 DWORD PTR [rsp+32], 27
  00128	41 b9 7a 00 00
	00		 mov	 r9d, 122		; 0000007aH
  0012e	44 8b c0	 mov	 r8d, eax
  00131	8b 55 44	 mov	 edx, DWORD PTR x_for_white$1[rbp]
  00134	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  0013b	e8 00 00 00 00	 call	 ?ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z ; ImFontAtlasBuildRender8bppRectFromString

; 2675 :             ImFontAtlasBuildRender8bppRectFromString(atlas, x_for_black, r->Y, FONT_ATLAS_DEFAULT_TEX_DATA_W, FONT_ATLAS_DEFAULT_TEX_DATA_H, FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS, 'X', 0xFF);

  00140	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  00144	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  00148	c6 44 24 38 ff	 mov	 BYTE PTR [rsp+56], 255	; 000000ffH
  0014d	c6 44 24 30 58	 mov	 BYTE PTR [rsp+48], 88	; 00000058H
  00152	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS@@3QBDB
  00159	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0015e	c7 44 24 20 1b
	00 00 00	 mov	 DWORD PTR [rsp+32], 27
  00166	41 b9 7a 00 00
	00		 mov	 r9d, 122		; 0000007aH
  0016c	44 8b c0	 mov	 r8d, eax
  0016f	8b 55 64	 mov	 edx, DWORD PTR x_for_black$2[rbp]
  00172	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  00179	e8 00 00 00 00	 call	 ?ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z ; ImFontAtlasBuildRender8bppRectFromString

; 2676 :         }
; 2677 :         else

  0017e	e9 82 00 00 00	 jmp	 $LN5@ImFontAtla
$LN4@ImFontAtla:

; 2678 :         {
; 2679 :             ImFontAtlasBuildRender32bppRectFromString(atlas, x_for_white, r->Y, FONT_ATLAS_DEFAULT_TEX_DATA_W, FONT_ATLAS_DEFAULT_TEX_DATA_H, FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS, '.', IM_COL32_WHITE);

  00183	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  00187	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0018b	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR [rsp+56], -1	; ffffffffH
  00193	c6 44 24 30 2e	 mov	 BYTE PTR [rsp+48], 46	; 0000002eH
  00198	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS@@3QBDB
  0019f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a4	c7 44 24 20 1b
	00 00 00	 mov	 DWORD PTR [rsp+32], 27
  001ac	41 b9 7a 00 00
	00		 mov	 r9d, 122		; 0000007aH
  001b2	44 8b c0	 mov	 r8d, eax
  001b5	8b 55 44	 mov	 edx, DWORD PTR x_for_white$1[rbp]
  001b8	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  001bf	e8 00 00 00 00	 call	 ?ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z ; ImFontAtlasBuildRender32bppRectFromString

; 2680 :             ImFontAtlasBuildRender32bppRectFromString(atlas, x_for_black, r->Y, FONT_ATLAS_DEFAULT_TEX_DATA_W, FONT_ATLAS_DEFAULT_TEX_DATA_H, FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS, 'X', IM_COL32_WHITE);

  001c4	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  001c8	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  001cc	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR [rsp+56], -1	; ffffffffH
  001d4	c6 44 24 30 58	 mov	 BYTE PTR [rsp+48], 88	; 00000058H
  001d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS@@3QBDB
  001e0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001e5	c7 44 24 20 1b
	00 00 00	 mov	 DWORD PTR [rsp+32], 27
  001ed	41 b9 7a 00 00
	00		 mov	 r9d, 122		; 0000007aH
  001f3	44 8b c0	 mov	 r8d, eax
  001f6	8b 55 64	 mov	 edx, DWORD PTR x_for_black$2[rbp]
  001f9	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  00200	e8 00 00 00 00	 call	 ?ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z ; ImFontAtlasBuildRender32bppRectFromString
$LN5@ImFontAtla:

; 2681 :         }
; 2682 :     }
; 2683 :     else

  00205	e9 49 01 00 00	 jmp	 $LN3@ImFontAtla
$LN2@ImFontAtla:

; 2684 :     {
; 2685 :         // Render 4 white pixels
; 2686 :         IM_ASSERT(r->Width == 2 && r->Height == 2);

  0020a	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  0020e	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00211	83 f8 02	 cmp	 eax, 2
  00214	75 0d		 jne	 SHORT $LN12@ImFontAtla
  00216	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  0021a	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  0021e	83 f8 02	 cmp	 eax, 2
  00221	74 22		 je	 SHORT $LN13@ImFontAtla
$LN12@ImFontAtla:
  00223	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z@4JA
  00229	83 c0 19	 add	 eax, 25
  0022c	44 8b c0	 mov	 r8d, eax
  0022f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00236	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@DBHHBIED@?$AAr?$AA?9?$AA?$DO?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA2?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AA?9?$AA?$DO?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA2?$AA?$AA@
  0023d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00243	33 c0		 xor	 eax, eax
$LN13@ImFontAtla:

; 2687 :         const int offset = (int)r->X + (int)r->Y * w;

  00245	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  00249	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0024d	48 8b 4d 08	 mov	 rcx, QWORD PTR r$[rbp]
  00251	0f b7 49 06	 movzx	 ecx, WORD PTR [rcx+6]
  00255	0f af 4d 24	 imul	 ecx, DWORD PTR w$[rbp]
  00259	03 c1		 add	 eax, ecx
  0025b	89 85 84 00 00
	00		 mov	 DWORD PTR offset$3[rbp], eax

; 2688 :         if (atlas->TexPixelsAlpha8 != NULL)

  00261	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00268	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  0026d	74 6d		 je	 SHORT $LN6@ImFontAtla

; 2689 :         {
; 2690 :             atlas->TexPixelsAlpha8[offset] = atlas->TexPixelsAlpha8[offset + 1] = atlas->TexPixelsAlpha8[offset + w] = atlas->TexPixelsAlpha8[offset + w + 1] = 0xFF;

  0026f	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR offset$3[rbp]
  00275	8b 4d 24	 mov	 ecx, DWORD PTR w$[rbp]
  00278	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0027c	48 98		 cdqe
  0027e	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  00285	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00289	c6 04 01 ff	 mov	 BYTE PTR [rcx+rax], 255	; 000000ffH
  0028d	8b 45 24	 mov	 eax, DWORD PTR w$[rbp]
  00290	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR offset$3[rbp]
  00296	03 c8		 add	 ecx, eax
  00298	8b c1		 mov	 eax, ecx
  0029a	48 98		 cdqe
  0029c	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  002a3	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  002a7	c6 04 01 ff	 mov	 BYTE PTR [rcx+rax], 255	; 000000ffH
  002ab	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR offset$3[rbp]
  002b1	ff c0		 inc	 eax
  002b3	48 98		 cdqe
  002b5	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  002bc	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  002c0	c6 04 01 ff	 mov	 BYTE PTR [rcx+rax], 255	; 000000ffH
  002c4	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR offset$3[rbp]
  002cb	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  002d2	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  002d6	c6 04 01 ff	 mov	 BYTE PTR [rcx+rax], 255	; 000000ffH

; 2691 :         }
; 2692 :         else

  002da	eb 77		 jmp	 SHORT $LN7@ImFontAtla
$LN6@ImFontAtla:

; 2693 :         {
; 2694 :             atlas->TexPixelsRGBA32[offset] = atlas->TexPixelsRGBA32[offset + 1] = atlas->TexPixelsRGBA32[offset + w] = atlas->TexPixelsRGBA32[offset + w + 1] = IM_COL32_WHITE;

  002dc	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR offset$3[rbp]
  002e2	8b 4d 24	 mov	 ecx, DWORD PTR w$[rbp]
  002e5	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  002e9	48 98		 cdqe
  002eb	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  002f2	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  002f6	c7 04 81 ff ff
	ff ff		 mov	 DWORD PTR [rcx+rax*4], -1 ; ffffffffH
  002fd	8b 45 24	 mov	 eax, DWORD PTR w$[rbp]
  00300	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR offset$3[rbp]
  00306	03 c8		 add	 ecx, eax
  00308	8b c1		 mov	 eax, ecx
  0030a	48 98		 cdqe
  0030c	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  00313	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00317	c7 04 81 ff ff
	ff ff		 mov	 DWORD PTR [rcx+rax*4], -1 ; ffffffffH
  0031e	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR offset$3[rbp]
  00324	ff c0		 inc	 eax
  00326	48 98		 cdqe
  00328	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  0032f	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00333	c7 04 81 ff ff
	ff ff		 mov	 DWORD PTR [rcx+rax*4], -1 ; ffffffffH
  0033a	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR offset$3[rbp]
  00341	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  00348	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0034c	c7 04 81 ff ff
	ff ff		 mov	 DWORD PTR [rcx+rax*4], -1 ; ffffffffH
$LN7@ImFontAtla:
$LN3@ImFontAtla:

; 2695 :         }
; 2696 :     }
; 2697 :     atlas->TexUvWhitePixel = ImVec2((r->X + 0.5f) * atlas->TexUvScale.x, (r->Y + 0.5f) * atlas->TexUvScale.y);

  00353	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  00357	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0035b	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0035f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00367	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  0036e	f3 0f 59 40 4c	 mulss	 xmm0, DWORD PTR [rax+76]
  00373	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  00377	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0037b	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  0037f	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  00387	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  0038e	f3 0f 59 48 48	 mulss	 xmm1, DWORD PTR [rax+72]
  00393	0f 28 d0	 movaps	 xmm2, xmm0
  00396	48 8d 8d 64 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  0039d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  003a2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003a5	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  003ac	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 2698 : }

  003b0	48 8d a5 88 01
	00 00		 lea	 rsp, QWORD PTR [rbp+392]
  003b7	5f		 pop	 rdi
  003b8	5d		 pop	 rbp
  003b9	c3		 ret	 0
?ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z ENDP ; ImFontAtlasBuildRenderDefaultTexData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z PROC	; ImVector<stbtt_packedchar>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 6b c0 1c	 imul	 rax, rax, 28
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 6b c0 1c	 imul	 rax, rax, 28
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z ENDP	; ImVector<stbtt_packedchar>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?resize@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z PROC	; ImVector<stbtt_packedchar>::resize, COMDAT

; 1800 :     inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 e8 00 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  0003e	7e 20		 jle	 SHORT $LN2@resize
  00040	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  00046	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@Ustbtt_packedchar@@@@QEBAHH@Z ; ImVector<stbtt_packedchar>::_grow_capacity
  00052	8b d0		 mov	 edx, eax
  00054	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	e8 00 00 00 00	 call	 ?reserve@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z ; ImVector<stbtt_packedchar>::reserve
$LN2@resize:
  00060	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  0006d	89 08		 mov	 DWORD PTR [rax], ecx
  0006f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
?resize@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z ENDP	; ImVector<stbtt_packedchar>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@Ustbtt_packedchar@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@Ustbtt_packedchar@@@@QEBAHH@Z PROC ; ImVector<stbtt_packedchar>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@Ustbtt_packedchar@@@@QEBAHH@Z ENDP ; ImVector<stbtt_packedchar>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@Ustbtt_packedchar@@@@QEAAAEAUstbtt_packedchar@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@Ustbtt_packedchar@@@@QEAAAEAUstbtt_packedchar@@H@Z PROC ; ImVector<stbtt_packedchar>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 6b c0 1c	 imul	 rax, rax, 28
  0006f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@Ustbtt_packedchar@@@@QEAAAEAUstbtt_packedchar@@H@Z ENDP ; ImVector<stbtt_packedchar>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?size_in_bytes@?$ImVector@Ustbtt_packedchar@@@@QEBAHXZ
_TEXT	SEGMENT
this$ = 224
?size_in_bytes@?$ImVector@Ustbtt_packedchar@@@@QEBAHXZ PROC ; ImVector<stbtt_packedchar>::size_in_bytes, COMDAT

; 1783 :     inline int          size_in_bytes() const               { return Size * (int)sizeof(T); }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	6b 00 1c	 imul	 eax, DWORD PTR [rax], 28
  00032	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00039	5f		 pop	 rdi
  0003a	5d		 pop	 rbp
  0003b	c3		 ret	 0
?size_in_bytes@?$ImVector@Ustbtt_packedchar@@@@QEBAHXZ ENDP ; ImVector<stbtt_packedchar>::size_in_bytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ PROC		; ImVector<stbtt_packedchar>::~ImVector<stbtt_packedchar>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ ENDP		; ImVector<stbtt_packedchar>::~ImVector<stbtt_packedchar>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ PROC		; ImVector<stbtt_packedchar>::ImVector<stbtt_packedchar>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ ENDP		; ImVector<stbtt_packedchar>::ImVector<stbtt_packedchar>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z PROC	; ImVector<stbrp_rect>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 6b c0 18	 imul	 rax, rax, 24
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 6b c0 18	 imul	 rax, rax, 24
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z ENDP	; ImVector<stbrp_rect>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?resize@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z PROC		; ImVector<stbrp_rect>::resize, COMDAT

; 1800 :     inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 e8 00 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  0003e	7e 20		 jle	 SHORT $LN2@resize
  00040	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  00046	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@Ustbrp_rect@@@@QEBAHH@Z ; ImVector<stbrp_rect>::_grow_capacity
  00052	8b d0		 mov	 edx, eax
  00054	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	e8 00 00 00 00	 call	 ?reserve@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z ; ImVector<stbrp_rect>::reserve
$LN2@resize:
  00060	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  0006d	89 08		 mov	 DWORD PTR [rax], ecx
  0006f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
?resize@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z ENDP		; ImVector<stbrp_rect>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@Ustbrp_rect@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@Ustbrp_rect@@@@QEBAHH@Z PROC	; ImVector<stbrp_rect>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@Ustbrp_rect@@@@QEBAHH@Z ENDP	; ImVector<stbrp_rect>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z PROC ; ImVector<stbrp_rect>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 6b c0 18	 imul	 rax, rax, 24
  0006f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ENDP ; ImVector<stbrp_rect>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?size_in_bytes@?$ImVector@Ustbrp_rect@@@@QEBAHXZ
_TEXT	SEGMENT
this$ = 224
?size_in_bytes@?$ImVector@Ustbrp_rect@@@@QEBAHXZ PROC	; ImVector<stbrp_rect>::size_in_bytes, COMDAT

; 1783 :     inline int          size_in_bytes() const               { return Size * (int)sizeof(T); }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	6b 00 18	 imul	 eax, DWORD PTR [rax], 24
  00032	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00039	5f		 pop	 rdi
  0003a	5d		 pop	 rbp
  0003b	c3		 ret	 0
?size_in_bytes@?$ImVector@Ustbrp_rect@@@@QEBAHXZ ENDP	; ImVector<stbrp_rect>::size_in_bytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@Ustbrp_rect@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@Ustbrp_rect@@@@QEAAXXZ PROC		; ImVector<stbrp_rect>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@Ustbrp_rect@@@@QEAAXXZ ENDP		; ImVector<stbrp_rect>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ PROC		; ImVector<stbrp_rect>::~ImVector<stbrp_rect>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ ENDP		; ImVector<stbrp_rect>::~ImVector<stbrp_rect>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@Ustbrp_rect@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@Ustbrp_rect@@@@QEAA@XZ PROC		; ImVector<stbrp_rect>::ImVector<stbrp_rect>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@Ustbrp_rect@@@@QEAA@XZ ENDP		; ImVector<stbrp_rect>::ImVector<stbrp_rect>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z PROC ; ImVector<ImFontBuildDstData>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z ENDP ; ImVector<ImFontBuildDstData>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?resize@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z PROC	; ImVector<ImFontBuildDstData>::resize, COMDAT

; 1800 :     inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 e8 00 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  0003e	7e 20		 jle	 SHORT $LN2@resize
  00040	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  00046	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@UImFontBuildDstData@@@@QEBAHH@Z ; ImVector<ImFontBuildDstData>::_grow_capacity
  00052	8b d0		 mov	 edx, eax
  00054	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z ; ImVector<ImFontBuildDstData>::reserve
$LN2@resize:
  00060	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  0006d	89 08		 mov	 DWORD PTR [rax], ecx
  0006f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
?resize@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z ENDP	; ImVector<ImFontBuildDstData>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@UImFontBuildDstData@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImFontBuildDstData@@@@QEBAHH@Z PROC ; ImVector<ImFontBuildDstData>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@UImFontBuildDstData@@@@QEBAHH@Z ENDP ; ImVector<ImFontBuildDstData>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z PROC ; ImVector<ImFontBuildDstData>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0006f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z ENDP ; ImVector<ImFontBuildDstData>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?size_in_bytes@?$ImVector@UImFontBuildDstData@@@@QEBAHXZ
_TEXT	SEGMENT
this$ = 224
?size_in_bytes@?$ImVector@UImFontBuildDstData@@@@QEBAHXZ PROC ; ImVector<ImFontBuildDstData>::size_in_bytes, COMDAT

; 1783 :     inline int          size_in_bytes() const               { return Size * (int)sizeof(T); }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	6b 00 20	 imul	 eax, DWORD PTR [rax], 32 ; 00000020H
  00032	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00039	5f		 pop	 rdi
  0003a	5d		 pop	 rbp
  0003b	c3		 ret	 0
?size_in_bytes@?$ImVector@UImFontBuildDstData@@@@QEBAHXZ ENDP ; ImVector<ImFontBuildDstData>::size_in_bytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@UImFontBuildDstData@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImFontBuildDstData@@@@QEAAXXZ PROC	; ImVector<ImFontBuildDstData>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@UImFontBuildDstData@@@@QEAAXXZ ENDP	; ImVector<ImFontBuildDstData>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ PROC	; ImVector<ImFontBuildDstData>::~ImVector<ImFontBuildDstData>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ ENDP	; ImVector<ImFontBuildDstData>::~ImVector<ImFontBuildDstData>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@UImFontBuildDstData@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImFontBuildDstData@@@@QEAA@XZ PROC	; ImVector<ImFontBuildDstData>::ImVector<ImFontBuildDstData>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@UImFontBuildDstData@@@@QEAA@XZ ENDP	; ImVector<ImFontBuildDstData>::ImVector<ImFontBuildDstData>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z PROC ; ImVector<ImFontBuildSrcData>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 7f		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 69 c0 10 01
	00 00		 imul	 rax, rax, 272		; 00000110H
  00050	48 8b c8	 mov	 rcx, rax
  00053	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00058	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  0005c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00063	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00068	74 38		 je	 SHORT $LN3@reserve
  0006a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00074	48 69 c0 10 01
	00 00		 imul	 rax, rax, 272		; 00000110H
  0007b	4c 8b c0	 mov	 r8, rax
  0007e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00085	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00089	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  0008d	e8 00 00 00 00	 call	 memcpy
  00092	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00099	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0009d	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  000a2	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a9	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000ad	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000b1	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b8	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000be	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000c1	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c8	5f		 pop	 rdi
  000c9	5d		 pop	 rbp
  000ca	c3		 ret	 0
?reserve@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z ENDP ; ImVector<ImFontBuildSrcData>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?resize@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z PROC	; ImVector<ImFontBuildSrcData>::resize, COMDAT

; 1800 :     inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 e8 00 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  0003e	7e 20		 jle	 SHORT $LN2@resize
  00040	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  00046	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@UImFontBuildSrcData@@@@QEBAHH@Z ; ImVector<ImFontBuildSrcData>::_grow_capacity
  00052	8b d0		 mov	 edx, eax
  00054	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z ; ImVector<ImFontBuildSrcData>::reserve
$LN2@resize:
  00060	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  0006d	89 08		 mov	 DWORD PTR [rax], ecx
  0006f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
?resize@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z ENDP	; ImVector<ImFontBuildSrcData>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@UImFontBuildSrcData@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImFontBuildSrcData@@@@QEBAHH@Z PROC ; ImVector<ImFontBuildSrcData>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@UImFontBuildSrcData@@@@QEBAHH@Z ENDP ; ImVector<ImFontBuildSrcData>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z PROC ; ImVector<ImFontBuildSrcData>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 69 c0 10 01
	00 00		 imul	 rax, rax, 272		; 00000110H
  00072	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00079	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0007d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00084	5f		 pop	 rdi
  00085	5d		 pop	 rbp
  00086	c3		 ret	 0
??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z ENDP ; ImVector<ImFontBuildSrcData>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?size_in_bytes@?$ImVector@UImFontBuildSrcData@@@@QEBAHXZ
_TEXT	SEGMENT
this$ = 224
?size_in_bytes@?$ImVector@UImFontBuildSrcData@@@@QEBAHXZ PROC ; ImVector<ImFontBuildSrcData>::size_in_bytes, COMDAT

; 1783 :     inline int          size_in_bytes() const               { return Size * (int)sizeof(T); }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	69 00 10 01 00
	00		 imul	 eax, DWORD PTR [rax], 272 ; 00000110H
  00035	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003c	5f		 pop	 rdi
  0003d	5d		 pop	 rbp
  0003e	c3		 ret	 0
?size_in_bytes@?$ImVector@UImFontBuildSrcData@@@@QEBAHXZ ENDP ; ImVector<ImFontBuildSrcData>::size_in_bytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear_destruct@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ
_TEXT	SEGMENT
n$1 = 4
this$ = 256
?clear_destruct@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ PROC ; ImVector<ImFontBuildSrcData>::clear_destruct, COMDAT

; 1779 :     inline void         clear_destruct()                    { for (int n = 0; n < Size; n++) Data[n].~T(); clear(); }           // Important: never called automatically! always explicit.

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	c7 45 04 00 00
	00 00		 mov	 DWORD PTR n$1[rbp], 0
  00031	eb 08		 jmp	 SHORT $LN4@clear_dest
$LN2@clear_dest:
  00033	8b 45 04	 mov	 eax, DWORD PTR n$1[rbp]
  00036	ff c0		 inc	 eax
  00038	89 45 04	 mov	 DWORD PTR n$1[rbp], eax
$LN4@clear_dest:
  0003b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	39 45 04	 cmp	 DWORD PTR n$1[rbp], eax
  00047	7d 22		 jge	 SHORT $LN3@clear_dest
  00049	48 63 45 04	 movsxd	 rax, DWORD PTR n$1[rbp]
  0004d	48 69 c0 10 01
	00 00		 imul	 rax, rax, 272		; 00000110H
  00054	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0005f	33 d2		 xor	 edx, edx
  00061	48 8b c8	 mov	 rcx, rax
  00064	e8 00 00 00 00	 call	 ??_GImFontBuildSrcData@@QEAAPEAXI@Z
  00069	eb c8		 jmp	 SHORT $LN2@clear_dest
$LN3@clear_dest:
  0006b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	e8 00 00 00 00	 call	 ?clear@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ ; ImVector<ImFontBuildSrcData>::clear
  00077	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007e	5f		 pop	 rdi
  0007f	5d		 pop	 rbp
  00080	c3		 ret	 0
?clear_destruct@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ ENDP ; ImVector<ImFontBuildSrcData>::clear_destruct
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ PROC	; ImVector<ImFontBuildSrcData>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ ENDP	; ImVector<ImFontBuildSrcData>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ PROC	; ImVector<ImFontBuildSrcData>::~ImVector<ImFontBuildSrcData>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ ENDP	; ImVector<ImFontBuildSrcData>::~ImVector<ImFontBuildSrcData>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ PROC	; ImVector<ImFontBuildSrcData>::ImVector<ImFontBuildSrcData>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ ENDP	; ImVector<ImFontBuildSrcData>::ImVector<ImFontBuildSrcData>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z
_TEXT	SEGMENT
src_tmp_array$ = 8
dst_tmp_array$ = 56
src_i$19 = 100
src_tmp$20 = 136
cfg$21 = 168
output_i$22 = 196
font_offset$23 = 228
dst_tmp$24 = 264
src_range$25 = 296
total_glyphs_count$ = 324
src_i$26 = 356
src_tmp$27 = 392
dst_tmp$28 = 424
src_range$29 = 456
codepoint$30 = 484
src_i$31 = 516
src_tmp$32 = 552
dst_i$33 = 580
buf_rects$ = 616
buf_packedchars$ = 664
total_surface$ = 708
buf_rects_out_n$ = 740
buf_packedchars_out_n$ = 772
src_i$34 = 804
src_tmp$35 = 840
cfg$36 = 872
scale$37 = 900
padding$38 = 932
glyph_i$39 = 964
x0$40 = 996
y0$41 = 1028
x1$42 = 1060
y1$43 = 1092
glyph_index_in_font$44 = 1124
surface_sqrt$ = 1156
TEX_HEIGHT_MAX$ = 1188
spc$ = 1232
src_i$45 = 1316
src_tmp$46 = 1352
glyph_i$47 = 1380
src_i$48 = 1412
cfg$49 = 1448
src_tmp$50 = 1480
multiply_table$51 = 1520
r$52 = 1800
glyph_i$53 = 1828
src_i$54 = 1860
src_tmp$55 = 1896
cfg$56 = 1928
dst_font$57 = 1960
font_scale$58 = 1988
unscaled_ascent$59 = 2020
unscaled_descent$60 = 2052
unscaled_line_gap$61 = 2084
ascent$62 = 2116
descent$63 = 2148
font_off_x$64 = 2180
font_off_y$65 = 2212
glyph_i$66 = 2244
codepoint$67 = 2276
pc$68 = 2312
q$69 = 2344
unused_x$70 = 2404
unused_y$71 = 2436
$T72 = 3620
$T73 = 3652
$T74 = 3684
$T75 = 3716
$T76 = 3748
$T77 = 3780
$T78 = 3816
tv764 = 3828
tv755 = 3828
tv617 = 3828
tv555 = 3828
tv467 = 3828
tv554 = 3832
tv225 = 3832
tv553 = 3836
__$ArrayPad$ = 3840
atlas$ = 3888
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z PROC ; ImFontAtlasBuildWithStbTruetype, COMDAT

; 2338 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 78 0f
	00 00		 sub	 rsp, 3960		; 00000f78H
  0000e	48 8d 6c 24 60	 lea	 rbp, QWORD PTR [rsp+96]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 de 03 00 00	 mov	 ecx, 990		; 000003deH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 98
	0f 00 00	 mov	 rcx, QWORD PTR [rsp+3992]
  0002a	48 c7 85 e8 0e
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T78[rbp], -2
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 00 0f
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2339 :     IM_ASSERT(atlas->ConfigData.Size > 0);

  00046	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  0004d	83 78 78 00	 cmp	 DWORD PTR [rax+120], 0
  00051	7f 21		 jg	 SHORT $LN66@ImFontAtla
  00053	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4JA
  00059	ff c0		 inc	 eax
  0005b	44 8b c0	 mov	 r8d, eax
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@BBHAKCJP@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAa?$AAt?$AAa?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00072	33 c0		 xor	 eax, eax
$LN66@ImFontAtla:

; 2340 : 
; 2341 :     ImFontAtlasBuildInit(atlas);

  00074	48 8b 8d 30 0f
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  0007b	e8 00 00 00 00	 call	 ?ImFontAtlasBuildInit@@YAXPEAUImFontAtlas@@@Z ; ImFontAtlasBuildInit

; 2342 : 
; 2343 :     // Clear atlas
; 2344 :     atlas->TexID = (ImTextureID)NULL;

  00080	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00087	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 2345 :     atlas->TexWidth = atlas->TexHeight = 0;

  0008f	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00096	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [rax+68], 0
  0009d	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  000a4	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [rax+64], 0

; 2346 :     atlas->TexUvScale = ImVec2(0.0f, 0.0f);

  000ab	0f 57 d2	 xorps	 xmm2, xmm2
  000ae	0f 57 c9	 xorps	 xmm1, xmm1
  000b1	48 8d 8d 24 0e
	00 00		 lea	 rcx, QWORD PTR $T72[rbp]
  000b8	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000bd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c0	48 8b 8d 30 0f
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  000c7	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 2347 :     atlas->TexUvWhitePixel = ImVec2(0.0f, 0.0f);

  000cb	0f 57 d2	 xorps	 xmm2, xmm2
  000ce	0f 57 c9	 xorps	 xmm1, xmm1
  000d1	48 8d 8d 44 0e
	00 00		 lea	 rcx, QWORD PTR $T73[rbp]
  000d8	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000dd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e0	48 8b 8d 30 0f
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  000e7	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 2348 :     atlas->ClearTexData();

  000eb	48 8b 8d 30 0f
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  000f2	e8 00 00 00 00	 call	 ?ClearTexData@ImFontAtlas@@QEAAXXZ ; ImFontAtlas::ClearTexData

; 2349 : 
; 2350 :     // Temporary storage for building
; 2351 :     ImVector<ImFontBuildSrcData> src_tmp_array;

  000f7	48 8d 4d 08	 lea	 rcx, QWORD PTR src_tmp_array$[rbp]
  000fb	e8 00 00 00 00	 call	 ??0?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ ; ImVector<ImFontBuildSrcData>::ImVector<ImFontBuildSrcData>
  00100	90		 npad	 1

; 2352 :     ImVector<ImFontBuildDstData> dst_tmp_array;

  00101	48 8d 4d 38	 lea	 rcx, QWORD PTR dst_tmp_array$[rbp]
  00105	e8 00 00 00 00	 call	 ??0?$ImVector@UImFontBuildDstData@@@@QEAA@XZ ; ImVector<ImFontBuildDstData>::ImVector<ImFontBuildDstData>
  0010a	90		 npad	 1

; 2353 :     src_tmp_array.resize(atlas->ConfigData.Size);

  0010b	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00112	8b 50 78	 mov	 edx, DWORD PTR [rax+120]
  00115	48 8d 4d 08	 lea	 rcx, QWORD PTR src_tmp_array$[rbp]
  00119	e8 00 00 00 00	 call	 ?resize@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z ; ImVector<ImFontBuildSrcData>::resize

; 2354 :     dst_tmp_array.resize(atlas->Fonts.Size);

  0011e	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00125	8b 50 58	 mov	 edx, DWORD PTR [rax+88]
  00128	48 8d 4d 38	 lea	 rcx, QWORD PTR dst_tmp_array$[rbp]
  0012c	e8 00 00 00 00	 call	 ?resize@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z ; ImVector<ImFontBuildDstData>::resize

; 2355 :     memset(src_tmp_array.Data, 0, (size_t)src_tmp_array.size_in_bytes());

  00131	48 8d 4d 08	 lea	 rcx, QWORD PTR src_tmp_array$[rbp]
  00135	e8 00 00 00 00	 call	 ?size_in_bytes@?$ImVector@UImFontBuildSrcData@@@@QEBAHXZ ; ImVector<ImFontBuildSrcData>::size_in_bytes
  0013a	48 98		 cdqe
  0013c	4c 8b c0	 mov	 r8, rax
  0013f	33 d2		 xor	 edx, edx
  00141	48 8b 4d 10	 mov	 rcx, QWORD PTR src_tmp_array$[rbp+8]
  00145	e8 00 00 00 00	 call	 memset

; 2356 :     memset(dst_tmp_array.Data, 0, (size_t)dst_tmp_array.size_in_bytes());

  0014a	48 8d 4d 38	 lea	 rcx, QWORD PTR dst_tmp_array$[rbp]
  0014e	e8 00 00 00 00	 call	 ?size_in_bytes@?$ImVector@UImFontBuildDstData@@@@QEBAHXZ ; ImVector<ImFontBuildDstData>::size_in_bytes
  00153	48 98		 cdqe
  00155	4c 8b c0	 mov	 r8, rax
  00158	33 d2		 xor	 edx, edx
  0015a	48 8b 4d 40	 mov	 rcx, QWORD PTR dst_tmp_array$[rbp+8]
  0015e	e8 00 00 00 00	 call	 memset

; 2357 : 
; 2358 :     // 1. Initialize font loading structure, check font data validity
; 2359 :     for (int src_i = 0; src_i < atlas->ConfigData.Size; src_i++)

  00163	c7 45 64 00 00
	00 00		 mov	 DWORD PTR src_i$19[rbp], 0
  0016a	eb 08		 jmp	 SHORT $LN4@ImFontAtla
$LN2@ImFontAtla:
  0016c	8b 45 64	 mov	 eax, DWORD PTR src_i$19[rbp]
  0016f	ff c0		 inc	 eax
  00171	89 45 64	 mov	 DWORD PTR src_i$19[rbp], eax
$LN4@ImFontAtla:
  00174	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  0017b	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  0017e	39 45 64	 cmp	 DWORD PTR src_i$19[rbp], eax
  00181	0f 8d 64 03 00
	00		 jge	 $LN3@ImFontAtla

; 2360 :     {
; 2361 :         ImFontBuildSrcData& src_tmp = src_tmp_array[src_i];

  00187	8b 55 64	 mov	 edx, DWORD PTR src_i$19[rbp]
  0018a	48 8d 4d 08	 lea	 rcx, QWORD PTR src_tmp_array$[rbp]
  0018e	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z ; ImVector<ImFontBuildSrcData>::operator[]
  00193	48 89 85 88 00
	00 00		 mov	 QWORD PTR src_tmp$20[rbp], rax

; 2362 :         ImFontConfig& cfg = atlas->ConfigData[src_i];

  0019a	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  001a1	48 83 c0 78	 add	 rax, 120		; 00000078H
  001a5	8b 55 64	 mov	 edx, DWORD PTR src_i$19[rbp]
  001a8	48 8b c8	 mov	 rcx, rax
  001ab	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ; ImVector<ImFontConfig>::operator[]
  001b0	48 89 85 a8 00
	00 00		 mov	 QWORD PTR cfg$21[rbp], rax

; 2363 :         IM_ASSERT(cfg.DstFont && (!cfg.DstFont->IsLoaded() || cfg.DstFont->ContainerAtlas == atlas));

  001b7	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR cfg$21[rbp]
  001be	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  001c6	74 35		 je	 SHORT $LN68@ImFontAtla
  001c8	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR cfg$21[rbp]
  001cf	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  001d6	e8 00 00 00 00	 call	 ?IsLoaded@ImFont@@QEBA_NXZ ; ImFont::IsLoaded
  001db	0f b6 c0	 movzx	 eax, al
  001de	85 c0		 test	 eax, eax
  001e0	74 3d		 je	 SHORT $LN67@ImFontAtla
  001e2	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR cfg$21[rbp]
  001e9	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  001f0	48 8b 8d 30 0f
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  001f7	48 39 48 40	 cmp	 QWORD PTR [rax+64], rcx
  001fb	74 22		 je	 SHORT $LN67@ImFontAtla
$LN68@ImFontAtla:
  001fd	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4JA
  00203	83 c0 19	 add	 eax, 25
  00206	44 8b c0	 mov	 r8d, eax
  00209	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00210	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1KE@NPGLPIC@?$AAc?$AAf?$AAg?$AA?4?$AAD?$AAs?$AAt?$AAF?$AAo?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CI?$AA?$CB?$AAc?$AAf?$AAg?$AA?4?$AAD?$AAs?$AAt?$AAF?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAI?$AAs@
  00217	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0021d	33 c0		 xor	 eax, eax
$LN67@ImFontAtla:

; 2364 : 
; 2365 :         // Find index from cfg.DstFont (we allow the user to set cfg.DstFont. Also it makes casual debugging nicer than when storing indices)
; 2366 :         src_tmp.DstIndex = -1;

  0021f	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR src_tmp$20[rbp]
  00226	c7 80 e0 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+224], -1

; 2367 :         for (int output_i = 0; output_i < atlas->Fonts.Size && src_tmp.DstIndex == -1; output_i++)

  00230	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR output_i$22[rbp], 0
  0023a	eb 0e		 jmp	 SHORT $LN7@ImFontAtla
$LN5@ImFontAtla:
  0023c	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR output_i$22[rbp]
  00242	ff c0		 inc	 eax
  00244	89 85 c4 00 00
	00		 mov	 DWORD PTR output_i$22[rbp], eax
$LN7@ImFontAtla:
  0024a	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00251	8b 40 58	 mov	 eax, DWORD PTR [rax+88]
  00254	39 85 c4 00 00
	00		 cmp	 DWORD PTR output_i$22[rbp], eax
  0025a	7d 51		 jge	 SHORT $LN6@ImFontAtla
  0025c	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR src_tmp$20[rbp]
  00263	83 b8 e0 00 00
	00 ff		 cmp	 DWORD PTR [rax+224], -1
  0026a	75 41		 jne	 SHORT $LN6@ImFontAtla

; 2368 :             if (cfg.DstFont == atlas->Fonts[output_i])

  0026c	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00273	48 83 c0 58	 add	 rax, 88			; 00000058H
  00277	8b 95 c4 00 00
	00		 mov	 edx, DWORD PTR output_i$22[rbp]
  0027d	48 8b c8	 mov	 rcx, rax
  00280	e8 00 00 00 00	 call	 ??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ; ImVector<ImFont * __ptr64>::operator[]
  00285	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR cfg$21[rbp]
  0028c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0028f	48 39 81 80 00
	00 00		 cmp	 QWORD PTR [rcx+128], rax
  00296	75 13		 jne	 SHORT $LN50@ImFontAtla

; 2369 :                 src_tmp.DstIndex = output_i;

  00298	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR src_tmp$20[rbp]
  0029f	8b 8d c4 00 00
	00		 mov	 ecx, DWORD PTR output_i$22[rbp]
  002a5	89 88 e0 00 00
	00		 mov	 DWORD PTR [rax+224], ecx
$LN50@ImFontAtla:

; 2370 :         if (src_tmp.DstIndex == -1)

  002ab	eb 8f		 jmp	 SHORT $LN5@ImFontAtla
$LN6@ImFontAtla:
  002ad	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR src_tmp$20[rbp]
  002b4	83 b8 e0 00 00
	00 ff		 cmp	 DWORD PTR [rax+224], -1
  002bb	75 58		 jne	 SHORT $LN51@ImFontAtla

; 2371 :         {
; 2372 :             IM_ASSERT(src_tmp.DstIndex != -1); // cfg.DstFont not pointing within atlas->Fonts[] array?

  002bd	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR src_tmp$20[rbp]
  002c4	83 b8 e0 00 00
	00 ff		 cmp	 DWORD PTR [rax+224], -1
  002cb	75 22		 jne	 SHORT $LN69@ImFontAtla
  002cd	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4JA
  002d3	83 c0 22	 add	 eax, 34			; 00000022H
  002d6	44 8b c0	 mov	 r8d, eax
  002d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  002e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@NKKOCLPN@?$AAs?$AAr?$AAc?$AA_?$AAt?$AAm?$AAp?$AA?4?$AAD?$AAs?$AAt?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@
  002e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002ed	33 c0		 xor	 eax, eax
$LN69@ImFontAtla:

; 2373 :             return false;

  002ef	c6 85 64 0e 00
	00 00		 mov	 BYTE PTR $T74[rbp], 0
  002f6	48 8d 4d 38	 lea	 rcx, QWORD PTR dst_tmp_array$[rbp]
  002fa	e8 00 00 00 00	 call	 ??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ ; ImVector<ImFontBuildDstData>::~ImVector<ImFontBuildDstData>
  002ff	90		 npad	 1
  00300	48 8d 4d 08	 lea	 rcx, QWORD PTR src_tmp_array$[rbp]
  00304	e8 00 00 00 00	 call	 ??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ ; ImVector<ImFontBuildSrcData>::~ImVector<ImFontBuildSrcData>
  00309	0f b6 85 64 0e
	00 00		 movzx	 eax, BYTE PTR $T74[rbp]
  00310	e9 18 13 00 00	 jmp	 $LN1@ImFontAtla
$LN51@ImFontAtla:

; 2374 :         }
; 2375 :         // Initialize helper structure for font loading and verify that the TTF/OTF data is correct
; 2376 :         const int font_offset = stbtt_GetFontOffsetForIndex((unsigned char*)cfg.FontData, cfg.FontNo);

  00315	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR cfg$21[rbp]
  0031c	8b 50 10	 mov	 edx, DWORD PTR [rax+16]
  0031f	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR cfg$21[rbp]
  00326	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00329	e8 00 00 00 00	 call	 stbtt_GetFontOffsetForIndex
  0032e	89 85 e4 00 00
	00		 mov	 DWORD PTR font_offset$23[rbp], eax

; 2377 :         IM_ASSERT(font_offset >= 0 && "FontData is incorrect, or FontNo cannot be found.");

  00334	83 bd e4 00 00
	00 00		 cmp	 DWORD PTR font_offset$23[rbp], 0
  0033b	7c 0c		 jl	 SHORT $LN70@ImFontAtla
  0033d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DC@IFELKFNN@FontData?5is?5incorrect?0?5or?5FontNo@
  00344	48 85 c0	 test	 rax, rax
  00347	75 22		 jne	 SHORT $LN71@ImFontAtla
$LN70@ImFontAtla:
  00349	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4JA
  0034f	83 c0 27	 add	 eax, 39			; 00000027H
  00352	44 8b c0	 mov	 r8d, eax
  00355	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0035c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1JA@MENENCJI@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAF?$AAo?$AAn?$AAt?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAi?$AAs@
  00363	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00369	33 c0		 xor	 eax, eax
$LN71@ImFontAtla:

; 2378 :         if (!stbtt_InitFont(&src_tmp.FontInfo, (unsigned char*)cfg.FontData, font_offset))

  0036b	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR src_tmp$20[rbp]
  00372	44 8b 85 e4 00
	00 00		 mov	 r8d, DWORD PTR font_offset$23[rbp]
  00379	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR cfg$21[rbp]
  00380	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00383	48 8b c8	 mov	 rcx, rax
  00386	e8 00 00 00 00	 call	 stbtt_InitFont
  0038b	85 c0		 test	 eax, eax
  0038d	75 26		 jne	 SHORT $LN52@ImFontAtla

; 2379 :             return false;

  0038f	c6 85 84 0e 00
	00 00		 mov	 BYTE PTR $T75[rbp], 0
  00396	48 8d 4d 38	 lea	 rcx, QWORD PTR dst_tmp_array$[rbp]
  0039a	e8 00 00 00 00	 call	 ??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ ; ImVector<ImFontBuildDstData>::~ImVector<ImFontBuildDstData>
  0039f	90		 npad	 1
  003a0	48 8d 4d 08	 lea	 rcx, QWORD PTR src_tmp_array$[rbp]
  003a4	e8 00 00 00 00	 call	 ??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ ; ImVector<ImFontBuildSrcData>::~ImVector<ImFontBuildSrcData>
  003a9	0f b6 85 84 0e
	00 00		 movzx	 eax, BYTE PTR $T75[rbp]
  003b0	e9 78 12 00 00	 jmp	 $LN1@ImFontAtla
$LN52@ImFontAtla:

; 2380 : 
; 2381 :         // Measure highest codepoints
; 2382 :         ImFontBuildDstData& dst_tmp = dst_tmp_array[src_tmp.DstIndex];

  003b5	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR src_tmp$20[rbp]
  003bc	8b 90 e0 00 00
	00		 mov	 edx, DWORD PTR [rax+224]
  003c2	48 8d 4d 38	 lea	 rcx, QWORD PTR dst_tmp_array$[rbp]
  003c6	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z ; ImVector<ImFontBuildDstData>::operator[]
  003cb	48 89 85 08 01
	00 00		 mov	 QWORD PTR dst_tmp$24[rbp], rax

; 2383 :         src_tmp.SrcRanges = cfg.GlyphRanges ? cfg.GlyphRanges : atlas->GetGlyphRangesDefault();

  003d2	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR cfg$21[rbp]
  003d9	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  003de	74 14		 je	 SHORT $LN72@ImFontAtla
  003e0	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR cfg$21[rbp]
  003e7	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  003eb	48 89 85 f8 0e
	00 00		 mov	 QWORD PTR tv225[rbp], rax
  003f2	eb 13		 jmp	 SHORT $LN73@ImFontAtla
$LN72@ImFontAtla:
  003f4	48 8b 8d 30 0f
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  003fb	e8 00 00 00 00	 call	 ?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ ; ImFontAtlas::GetGlyphRangesDefault
  00400	48 89 85 f8 0e
	00 00		 mov	 QWORD PTR tv225[rbp], rax
$LN73@ImFontAtla:
  00407	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR src_tmp$20[rbp]
  0040e	48 8b 8d f8 0e
	00 00		 mov	 rcx, QWORD PTR tv225[rbp]
  00415	48 89 88 d8 00
	00 00		 mov	 QWORD PTR [rax+216], rcx

; 2384 :         for (const ImWchar* src_range = src_tmp.SrcRanges; src_range[0] && src_range[1]; src_range += 2)

  0041c	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR src_tmp$20[rbp]
  00423	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  0042a	48 89 85 28 01
	00 00		 mov	 QWORD PTR src_range$25[rbp], rax
  00431	eb 12		 jmp	 SHORT $LN10@ImFontAtla
$LN8@ImFontAtla:
  00433	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR src_range$25[rbp]
  0043a	48 83 c0 04	 add	 rax, 4
  0043e	48 89 85 28 01
	00 00		 mov	 QWORD PTR src_range$25[rbp], rax
$LN10@ImFontAtla:
  00445	b8 02 00 00 00	 mov	 eax, 2
  0044a	48 6b c0 00	 imul	 rax, rax, 0
  0044e	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR src_range$25[rbp]
  00455	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  00459	85 c0		 test	 eax, eax
  0045b	74 4f		 je	 SHORT $LN9@ImFontAtla
  0045d	b8 02 00 00 00	 mov	 eax, 2
  00462	48 6b c0 01	 imul	 rax, rax, 1
  00466	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR src_range$25[rbp]
  0046d	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  00471	85 c0		 test	 eax, eax
  00473	74 37		 je	 SHORT $LN9@ImFontAtla

; 2385 :             src_tmp.GlyphsHighest = ImMax(src_tmp.GlyphsHighest, (int)src_range[1]);

  00475	b8 02 00 00 00	 mov	 eax, 2
  0047a	48 6b c0 01	 imul	 rax, rax, 1
  0047e	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR src_range$25[rbp]
  00485	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  00489	8b d0		 mov	 edx, eax
  0048b	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR src_tmp$20[rbp]
  00492	8b 88 e4 00 00
	00		 mov	 ecx, DWORD PTR [rax+228]
  00498	e8 00 00 00 00	 call	 ??$ImMax@H@@YAHHH@Z	; ImMax<int>
  0049d	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR src_tmp$20[rbp]
  004a4	89 81 e4 00 00
	00		 mov	 DWORD PTR [rcx+228], eax
  004aa	eb 87		 jmp	 SHORT $LN8@ImFontAtla
$LN9@ImFontAtla:

; 2386 :         dst_tmp.SrcCount++;

  004ac	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR dst_tmp$24[rbp]
  004b3	8b 00		 mov	 eax, DWORD PTR [rax]
  004b5	ff c0		 inc	 eax
  004b7	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR dst_tmp$24[rbp]
  004be	89 01		 mov	 DWORD PTR [rcx], eax

; 2387 :         dst_tmp.GlyphsHighest = ImMax(dst_tmp.GlyphsHighest, src_tmp.GlyphsHighest);

  004c0	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR src_tmp$20[rbp]
  004c7	8b 90 e4 00 00
	00		 mov	 edx, DWORD PTR [rax+228]
  004cd	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR dst_tmp$24[rbp]
  004d4	8b 48 04	 mov	 ecx, DWORD PTR [rax+4]
  004d7	e8 00 00 00 00	 call	 ??$ImMax@H@@YAHHH@Z	; ImMax<int>
  004dc	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR dst_tmp$24[rbp]
  004e3	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 2388 :     }

  004e6	e9 81 fc ff ff	 jmp	 $LN2@ImFontAtla
$LN3@ImFontAtla:

; 2389 : 
; 2390 :     // 2. For every requested codepoint, check for their presence in the font data, and handle redundancy or overlaps between source fonts to avoid unused glyphs.
; 2391 :     int total_glyphs_count = 0;

  004eb	c7 85 44 01 00
	00 00 00 00 00	 mov	 DWORD PTR total_glyphs_count$[rbp], 0

; 2392 :     for (int src_i = 0; src_i < src_tmp_array.Size; src_i++)

  004f5	c7 85 64 01 00
	00 00 00 00 00	 mov	 DWORD PTR src_i$26[rbp], 0
  004ff	eb 0e		 jmp	 SHORT $LN13@ImFontAtla
$LN11@ImFontAtla:
  00501	8b 85 64 01 00
	00		 mov	 eax, DWORD PTR src_i$26[rbp]
  00507	ff c0		 inc	 eax
  00509	89 85 64 01 00
	00		 mov	 DWORD PTR src_i$26[rbp], eax
$LN13@ImFontAtla:
  0050f	8b 45 08	 mov	 eax, DWORD PTR src_tmp_array$[rbp]
  00512	39 85 64 01 00
	00		 cmp	 DWORD PTR src_i$26[rbp], eax
  00518	0f 8d fa 01 00
	00		 jge	 $LN12@ImFontAtla

; 2393 :     {
; 2394 :         ImFontBuildSrcData& src_tmp = src_tmp_array[src_i];

  0051e	8b 95 64 01 00
	00		 mov	 edx, DWORD PTR src_i$26[rbp]
  00524	48 8d 4d 08	 lea	 rcx, QWORD PTR src_tmp_array$[rbp]
  00528	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z ; ImVector<ImFontBuildSrcData>::operator[]
  0052d	48 89 85 88 01
	00 00		 mov	 QWORD PTR src_tmp$27[rbp], rax

; 2395 :         ImFontBuildDstData& dst_tmp = dst_tmp_array[src_tmp.DstIndex];

  00534	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR src_tmp$27[rbp]
  0053b	8b 90 e0 00 00
	00		 mov	 edx, DWORD PTR [rax+224]
  00541	48 8d 4d 38	 lea	 rcx, QWORD PTR dst_tmp_array$[rbp]
  00545	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z ; ImVector<ImFontBuildDstData>::operator[]
  0054a	48 89 85 a8 01
	00 00		 mov	 QWORD PTR dst_tmp$28[rbp], rax

; 2396 :         src_tmp.GlyphsSet.Create(src_tmp.GlyphsHighest + 1);

  00551	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR src_tmp$27[rbp]
  00558	8b 80 e4 00 00
	00		 mov	 eax, DWORD PTR [rax+228]
  0055e	ff c0		 inc	 eax
  00560	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR src_tmp$27[rbp]
  00567	48 81 c1 f0 00
	00 00		 add	 rcx, 240		; 000000f0H
  0056e	8b d0		 mov	 edx, eax
  00570	e8 00 00 00 00	 call	 ?Create@ImBitVector@@QEAAXH@Z ; ImBitVector::Create

; 2397 :         if (dst_tmp.GlyphsSet.Storage.empty())

  00575	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR dst_tmp$28[rbp]
  0057c	48 83 c0 10	 add	 rax, 16
  00580	48 8b c8	 mov	 rcx, rax
  00583	e8 00 00 00 00	 call	 ?empty@?$ImVector@I@@QEBA_NXZ ; ImVector<unsigned int>::empty
  00588	0f b6 c0	 movzx	 eax, al
  0058b	85 c0		 test	 eax, eax
  0058d	74 1e		 je	 SHORT $LN53@ImFontAtla

; 2398 :             dst_tmp.GlyphsSet.Create(dst_tmp.GlyphsHighest + 1);

  0058f	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR dst_tmp$28[rbp]
  00596	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00599	ff c0		 inc	 eax
  0059b	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR dst_tmp$28[rbp]
  005a2	48 83 c1 10	 add	 rcx, 16
  005a6	8b d0		 mov	 edx, eax
  005a8	e8 00 00 00 00	 call	 ?Create@ImBitVector@@QEAAXH@Z ; ImBitVector::Create
$LN53@ImFontAtla:

; 2399 : 
; 2400 :         for (const ImWchar* src_range = src_tmp.SrcRanges; src_range[0] && src_range[1]; src_range += 2)

  005ad	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR src_tmp$27[rbp]
  005b4	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  005bb	48 89 85 c8 01
	00 00		 mov	 QWORD PTR src_range$29[rbp], rax
  005c2	eb 12		 jmp	 SHORT $LN16@ImFontAtla
$LN14@ImFontAtla:
  005c4	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR src_range$29[rbp]
  005cb	48 83 c0 04	 add	 rax, 4
  005cf	48 89 85 c8 01
	00 00		 mov	 QWORD PTR src_range$29[rbp], rax
$LN16@ImFontAtla:
  005d6	b8 02 00 00 00	 mov	 eax, 2
  005db	48 6b c0 00	 imul	 rax, rax, 0
  005df	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR src_range$29[rbp]
  005e6	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  005ea	85 c0		 test	 eax, eax
  005ec	0f 84 21 01 00
	00		 je	 $LN15@ImFontAtla
  005f2	b8 02 00 00 00	 mov	 eax, 2
  005f7	48 6b c0 01	 imul	 rax, rax, 1
  005fb	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR src_range$29[rbp]
  00602	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  00606	85 c0		 test	 eax, eax
  00608	0f 84 05 01 00
	00		 je	 $LN15@ImFontAtla

; 2401 :             for (unsigned int codepoint = src_range[0]; codepoint <= src_range[1]; codepoint++)

  0060e	b8 02 00 00 00	 mov	 eax, 2
  00613	48 6b c0 00	 imul	 rax, rax, 0
  00617	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR src_range$29[rbp]
  0061e	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  00622	89 85 e4 01 00
	00		 mov	 DWORD PTR codepoint$30[rbp], eax
  00628	eb 0e		 jmp	 SHORT $LN19@ImFontAtla
$LN17@ImFontAtla:
  0062a	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR codepoint$30[rbp]
  00630	ff c0		 inc	 eax
  00632	89 85 e4 01 00
	00		 mov	 DWORD PTR codepoint$30[rbp], eax
$LN19@ImFontAtla:
  00638	b8 02 00 00 00	 mov	 eax, 2
  0063d	48 6b c0 01	 imul	 rax, rax, 1
  00641	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR src_range$29[rbp]
  00648	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  0064c	39 85 e4 01 00
	00		 cmp	 DWORD PTR codepoint$30[rbp], eax
  00652	0f 87 b6 00 00
	00		 ja	 $LN18@ImFontAtla

; 2402 :             {
; 2403 :                 if (dst_tmp.GlyphsSet.TestBit(codepoint))    // Don't overwrite existing glyphs. We could make this an option for MergeMode (e.g. MergeOverwrite==true)

  00658	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR dst_tmp$28[rbp]
  0065f	48 83 c0 10	 add	 rax, 16
  00663	8b 95 e4 01 00
	00		 mov	 edx, DWORD PTR codepoint$30[rbp]
  00669	48 8b c8	 mov	 rcx, rax
  0066c	e8 00 00 00 00	 call	 ?TestBit@ImBitVector@@QEBA_NH@Z ; ImBitVector::TestBit
  00671	0f b6 c0	 movzx	 eax, al
  00674	85 c0		 test	 eax, eax
  00676	74 02		 je	 SHORT $LN54@ImFontAtla

; 2404 :                     continue;

  00678	eb b0		 jmp	 SHORT $LN17@ImFontAtla
$LN54@ImFontAtla:

; 2405 :                 if (!stbtt_FindGlyphIndex(&src_tmp.FontInfo, codepoint))    // It is actually in the font?

  0067a	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR src_tmp$27[rbp]
  00681	8b 95 e4 01 00
	00		 mov	 edx, DWORD PTR codepoint$30[rbp]
  00687	48 8b c8	 mov	 rcx, rax
  0068a	e8 00 00 00 00	 call	 stbtt_FindGlyphIndex
  0068f	85 c0		 test	 eax, eax
  00691	75 02		 jne	 SHORT $LN55@ImFontAtla

; 2406 :                     continue;

  00693	eb 95		 jmp	 SHORT $LN17@ImFontAtla
$LN55@ImFontAtla:

; 2407 : 
; 2408 :                 // Add to avail set/counters
; 2409 :                 src_tmp.GlyphsCount++;

  00695	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR src_tmp$27[rbp]
  0069c	8b 80 e8 00 00
	00		 mov	 eax, DWORD PTR [rax+232]
  006a2	ff c0		 inc	 eax
  006a4	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR src_tmp$27[rbp]
  006ab	89 81 e8 00 00
	00		 mov	 DWORD PTR [rcx+232], eax

; 2410 :                 dst_tmp.GlyphsCount++;

  006b1	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR dst_tmp$28[rbp]
  006b8	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  006bb	ff c0		 inc	 eax
  006bd	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR dst_tmp$28[rbp]
  006c4	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 2411 :                 src_tmp.GlyphsSet.SetBit(codepoint);

  006c7	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR src_tmp$27[rbp]
  006ce	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  006d4	8b 95 e4 01 00
	00		 mov	 edx, DWORD PTR codepoint$30[rbp]
  006da	48 8b c8	 mov	 rcx, rax
  006dd	e8 00 00 00 00	 call	 ?SetBit@ImBitVector@@QEAAXH@Z ; ImBitVector::SetBit

; 2412 :                 dst_tmp.GlyphsSet.SetBit(codepoint);

  006e2	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR dst_tmp$28[rbp]
  006e9	48 83 c0 10	 add	 rax, 16
  006ed	8b 95 e4 01 00
	00		 mov	 edx, DWORD PTR codepoint$30[rbp]
  006f3	48 8b c8	 mov	 rcx, rax
  006f6	e8 00 00 00 00	 call	 ?SetBit@ImBitVector@@QEAAXH@Z ; ImBitVector::SetBit

; 2413 :                 total_glyphs_count++;

  006fb	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR total_glyphs_count$[rbp]
  00701	ff c0		 inc	 eax
  00703	89 85 44 01 00
	00		 mov	 DWORD PTR total_glyphs_count$[rbp], eax

; 2414 :             }

  00709	e9 1c ff ff ff	 jmp	 $LN17@ImFontAtla
$LN18@ImFontAtla:
  0070e	e9 b1 fe ff ff	 jmp	 $LN14@ImFontAtla
$LN15@ImFontAtla:

; 2415 :     }

  00713	e9 e9 fd ff ff	 jmp	 $LN11@ImFontAtla
$LN12@ImFontAtla:

; 2416 : 
; 2417 :     // 3. Unpack our bit map into a flat list (we now have all the Unicode points that we know are requested _and_ available _and_ not overlapping another)
; 2418 :     for (int src_i = 0; src_i < src_tmp_array.Size; src_i++)

  00718	c7 85 04 02 00
	00 00 00 00 00	 mov	 DWORD PTR src_i$31[rbp], 0
  00722	eb 0e		 jmp	 SHORT $LN22@ImFontAtla
$LN20@ImFontAtla:
  00724	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR src_i$31[rbp]
  0072a	ff c0		 inc	 eax
  0072c	89 85 04 02 00
	00		 mov	 DWORD PTR src_i$31[rbp], eax
$LN22@ImFontAtla:
  00732	8b 45 08	 mov	 eax, DWORD PTR src_tmp_array$[rbp]
  00735	39 85 04 02 00
	00		 cmp	 DWORD PTR src_i$31[rbp], eax
  0073b	0f 8d b3 00 00
	00		 jge	 $LN21@ImFontAtla

; 2419 :     {
; 2420 :         ImFontBuildSrcData& src_tmp = src_tmp_array[src_i];

  00741	8b 95 04 02 00
	00		 mov	 edx, DWORD PTR src_i$31[rbp]
  00747	48 8d 4d 08	 lea	 rcx, QWORD PTR src_tmp_array$[rbp]
  0074b	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z ; ImVector<ImFontBuildSrcData>::operator[]
  00750	48 89 85 28 02
	00 00		 mov	 QWORD PTR src_tmp$32[rbp], rax

; 2421 :         src_tmp.GlyphsList.reserve(src_tmp.GlyphsCount);

  00757	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR src_tmp$32[rbp]
  0075e	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00764	48 8b 8d 28 02
	00 00		 mov	 rcx, QWORD PTR src_tmp$32[rbp]
  0076b	8b 91 e8 00 00
	00		 mov	 edx, DWORD PTR [rcx+232]
  00771	48 8b c8	 mov	 rcx, rax
  00774	e8 00 00 00 00	 call	 ?reserve@?$ImVector@H@@QEAAXH@Z ; ImVector<int>::reserve

; 2422 :         UnpackBitVectorToFlatIndexList(&src_tmp.GlyphsSet, &src_tmp.GlyphsList);

  00779	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR src_tmp$32[rbp]
  00780	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00786	48 8b 8d 28 02
	00 00		 mov	 rcx, QWORD PTR src_tmp$32[rbp]
  0078d	48 81 c1 f0 00
	00 00		 add	 rcx, 240		; 000000f0H
  00794	48 8b d0	 mov	 rdx, rax
  00797	e8 00 00 00 00	 call	 ?UnpackBitVectorToFlatIndexList@@YAXPEBUImBitVector@@PEAU?$ImVector@H@@@Z ; UnpackBitVectorToFlatIndexList

; 2423 :         src_tmp.GlyphsSet.Clear();

  0079c	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR src_tmp$32[rbp]
  007a3	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  007a9	48 8b c8	 mov	 rcx, rax
  007ac	e8 00 00 00 00	 call	 ?Clear@ImBitVector@@QEAAXXZ ; ImBitVector::Clear

; 2424 :         IM_ASSERT(src_tmp.GlyphsList.Size == src_tmp.GlyphsCount);

  007b1	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR src_tmp$32[rbp]
  007b8	48 8b 8d 28 02
	00 00		 mov	 rcx, QWORD PTR src_tmp$32[rbp]
  007bf	8b 89 e8 00 00
	00		 mov	 ecx, DWORD PTR [rcx+232]
  007c5	39 88 00 01 00
	00		 cmp	 DWORD PTR [rax+256], ecx
  007cb	74 22		 je	 SHORT $LN74@ImFontAtla
  007cd	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4JA
  007d3	83 c0 56	 add	 eax, 86			; 00000056H
  007d6	44 8b c0	 mov	 r8d, eax
  007d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  007e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FO@GJGKHCEN@?$AAs?$AAr?$AAc?$AA_?$AAt?$AAm?$AAp?$AA?4?$AAG?$AAl?$AAy?$AAp?$AAh?$AAs?$AAL?$AAi?$AAs?$AAt?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AAr?$AAc?$AA_?$AAt@
  007e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007ed	33 c0		 xor	 eax, eax
$LN74@ImFontAtla:

; 2425 :     }

  007ef	e9 30 ff ff ff	 jmp	 $LN20@ImFontAtla
$LN21@ImFontAtla:

; 2426 :     for (int dst_i = 0; dst_i < dst_tmp_array.Size; dst_i++)

  007f4	c7 85 44 02 00
	00 00 00 00 00	 mov	 DWORD PTR dst_i$33[rbp], 0
  007fe	eb 0e		 jmp	 SHORT $LN25@ImFontAtla
$LN23@ImFontAtla:
  00800	8b 85 44 02 00
	00		 mov	 eax, DWORD PTR dst_i$33[rbp]
  00806	ff c0		 inc	 eax
  00808	89 85 44 02 00
	00		 mov	 DWORD PTR dst_i$33[rbp], eax
$LN25@ImFontAtla:
  0080e	8b 45 38	 mov	 eax, DWORD PTR dst_tmp_array$[rbp]
  00811	39 85 44 02 00
	00		 cmp	 DWORD PTR dst_i$33[rbp], eax
  00817	7d 1d		 jge	 SHORT $LN24@ImFontAtla

; 2427 :         dst_tmp_array[dst_i].GlyphsSet.Clear();

  00819	8b 95 44 02 00
	00		 mov	 edx, DWORD PTR dst_i$33[rbp]
  0081f	48 8d 4d 38	 lea	 rcx, QWORD PTR dst_tmp_array$[rbp]
  00823	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z ; ImVector<ImFontBuildDstData>::operator[]
  00828	48 83 c0 10	 add	 rax, 16
  0082c	48 8b c8	 mov	 rcx, rax
  0082f	e8 00 00 00 00	 call	 ?Clear@ImBitVector@@QEAAXXZ ; ImBitVector::Clear
  00834	eb ca		 jmp	 SHORT $LN23@ImFontAtla
$LN24@ImFontAtla:

; 2428 :     dst_tmp_array.clear();

  00836	48 8d 4d 38	 lea	 rcx, QWORD PTR dst_tmp_array$[rbp]
  0083a	e8 00 00 00 00	 call	 ?clear@?$ImVector@UImFontBuildDstData@@@@QEAAXXZ ; ImVector<ImFontBuildDstData>::clear

; 2429 : 
; 2430 :     // Allocate packing character data and flag packed characters buffer as non-packed (x0=y0=x1=y1=0)
; 2431 :     // (We technically don't need to zero-clear buf_rects, but let's do it for the sake of sanity)
; 2432 :     ImVector<stbrp_rect> buf_rects;

  0083f	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR buf_rects$[rbp]
  00846	e8 00 00 00 00	 call	 ??0?$ImVector@Ustbrp_rect@@@@QEAA@XZ ; ImVector<stbrp_rect>::ImVector<stbrp_rect>
  0084b	90		 npad	 1

; 2433 :     ImVector<stbtt_packedchar> buf_packedchars;

  0084c	48 8d 8d 98 02
	00 00		 lea	 rcx, QWORD PTR buf_packedchars$[rbp]
  00853	e8 00 00 00 00	 call	 ??0?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ ; ImVector<stbtt_packedchar>::ImVector<stbtt_packedchar>
  00858	90		 npad	 1

; 2434 :     buf_rects.resize(total_glyphs_count);

  00859	8b 95 44 01 00
	00		 mov	 edx, DWORD PTR total_glyphs_count$[rbp]
  0085f	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR buf_rects$[rbp]
  00866	e8 00 00 00 00	 call	 ?resize@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z ; ImVector<stbrp_rect>::resize

; 2435 :     buf_packedchars.resize(total_glyphs_count);

  0086b	8b 95 44 01 00
	00		 mov	 edx, DWORD PTR total_glyphs_count$[rbp]
  00871	48 8d 8d 98 02
	00 00		 lea	 rcx, QWORD PTR buf_packedchars$[rbp]
  00878	e8 00 00 00 00	 call	 ?resize@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z ; ImVector<stbtt_packedchar>::resize

; 2436 :     memset(buf_rects.Data, 0, (size_t)buf_rects.size_in_bytes());

  0087d	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR buf_rects$[rbp]
  00884	e8 00 00 00 00	 call	 ?size_in_bytes@?$ImVector@Ustbrp_rect@@@@QEBAHXZ ; ImVector<stbrp_rect>::size_in_bytes
  00889	48 98		 cdqe
  0088b	4c 8b c0	 mov	 r8, rax
  0088e	33 d2		 xor	 edx, edx
  00890	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR buf_rects$[rbp+8]
  00897	e8 00 00 00 00	 call	 memset

; 2437 :     memset(buf_packedchars.Data, 0, (size_t)buf_packedchars.size_in_bytes());

  0089c	48 8d 8d 98 02
	00 00		 lea	 rcx, QWORD PTR buf_packedchars$[rbp]
  008a3	e8 00 00 00 00	 call	 ?size_in_bytes@?$ImVector@Ustbtt_packedchar@@@@QEBAHXZ ; ImVector<stbtt_packedchar>::size_in_bytes
  008a8	48 98		 cdqe
  008aa	4c 8b c0	 mov	 r8, rax
  008ad	33 d2		 xor	 edx, edx
  008af	48 8b 8d a0 02
	00 00		 mov	 rcx, QWORD PTR buf_packedchars$[rbp+8]
  008b6	e8 00 00 00 00	 call	 memset

; 2438 : 
; 2439 :     // 4. Gather glyphs sizes so we can pack them in our virtual canvas.
; 2440 :     int total_surface = 0;

  008bb	c7 85 c4 02 00
	00 00 00 00 00	 mov	 DWORD PTR total_surface$[rbp], 0

; 2441 :     int buf_rects_out_n = 0;

  008c5	c7 85 e4 02 00
	00 00 00 00 00	 mov	 DWORD PTR buf_rects_out_n$[rbp], 0

; 2442 :     int buf_packedchars_out_n = 0;

  008cf	c7 85 04 03 00
	00 00 00 00 00	 mov	 DWORD PTR buf_packedchars_out_n$[rbp], 0

; 2443 :     for (int src_i = 0; src_i < src_tmp_array.Size; src_i++)

  008d9	c7 85 24 03 00
	00 00 00 00 00	 mov	 DWORD PTR src_i$34[rbp], 0
  008e3	eb 0e		 jmp	 SHORT $LN28@ImFontAtla
$LN26@ImFontAtla:
  008e5	8b 85 24 03 00
	00		 mov	 eax, DWORD PTR src_i$34[rbp]
  008eb	ff c0		 inc	 eax
  008ed	89 85 24 03 00
	00		 mov	 DWORD PTR src_i$34[rbp], eax
$LN28@ImFontAtla:
  008f3	8b 45 08	 mov	 eax, DWORD PTR src_tmp_array$[rbp]
  008f6	39 85 24 03 00
	00		 cmp	 DWORD PTR src_i$34[rbp], eax
  008fc	0f 8d f1 03 00
	00		 jge	 $LN27@ImFontAtla

; 2444 :     {
; 2445 :         ImFontBuildSrcData& src_tmp = src_tmp_array[src_i];

  00902	8b 95 24 03 00
	00		 mov	 edx, DWORD PTR src_i$34[rbp]
  00908	48 8d 4d 08	 lea	 rcx, QWORD PTR src_tmp_array$[rbp]
  0090c	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z ; ImVector<ImFontBuildSrcData>::operator[]
  00911	48 89 85 48 03
	00 00		 mov	 QWORD PTR src_tmp$35[rbp], rax

; 2446 :         if (src_tmp.GlyphsCount == 0)

  00918	48 8b 85 48 03
	00 00		 mov	 rax, QWORD PTR src_tmp$35[rbp]
  0091f	83 b8 e8 00 00
	00 00		 cmp	 DWORD PTR [rax+232], 0
  00926	75 02		 jne	 SHORT $LN56@ImFontAtla

; 2447 :             continue;

  00928	eb bb		 jmp	 SHORT $LN26@ImFontAtla
$LN56@ImFontAtla:

; 2448 : 
; 2449 :         src_tmp.Rects = &buf_rects[buf_rects_out_n];

  0092a	8b 95 e4 02 00
	00		 mov	 edx, DWORD PTR buf_rects_out_n$[rbp]
  00930	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR buf_rects$[rbp]
  00937	e8 00 00 00 00	 call	 ??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
  0093c	48 8b 8d 48 03
	00 00		 mov	 rcx, QWORD PTR src_tmp$35[rbp]
  00943	48 89 81 c8 00
	00 00		 mov	 QWORD PTR [rcx+200], rax

; 2450 :         src_tmp.PackedChars = &buf_packedchars[buf_packedchars_out_n];

  0094a	8b 95 04 03 00
	00		 mov	 edx, DWORD PTR buf_packedchars_out_n$[rbp]
  00950	48 8d 8d 98 02
	00 00		 lea	 rcx, QWORD PTR buf_packedchars$[rbp]
  00957	e8 00 00 00 00	 call	 ??A?$ImVector@Ustbtt_packedchar@@@@QEAAAEAUstbtt_packedchar@@H@Z ; ImVector<stbtt_packedchar>::operator[]
  0095c	48 8b 8d 48 03
	00 00		 mov	 rcx, QWORD PTR src_tmp$35[rbp]
  00963	48 89 81 d0 00
	00 00		 mov	 QWORD PTR [rcx+208], rax

; 2451 :         buf_rects_out_n += src_tmp.GlyphsCount;

  0096a	48 8b 85 48 03
	00 00		 mov	 rax, QWORD PTR src_tmp$35[rbp]
  00971	8b 80 e8 00 00
	00		 mov	 eax, DWORD PTR [rax+232]
  00977	8b 8d e4 02 00
	00		 mov	 ecx, DWORD PTR buf_rects_out_n$[rbp]
  0097d	03 c8		 add	 ecx, eax
  0097f	8b c1		 mov	 eax, ecx
  00981	89 85 e4 02 00
	00		 mov	 DWORD PTR buf_rects_out_n$[rbp], eax

; 2452 :         buf_packedchars_out_n += src_tmp.GlyphsCount;

  00987	48 8b 85 48 03
	00 00		 mov	 rax, QWORD PTR src_tmp$35[rbp]
  0098e	8b 80 e8 00 00
	00		 mov	 eax, DWORD PTR [rax+232]
  00994	8b 8d 04 03 00
	00		 mov	 ecx, DWORD PTR buf_packedchars_out_n$[rbp]
  0099a	03 c8		 add	 ecx, eax
  0099c	8b c1		 mov	 eax, ecx
  0099e	89 85 04 03 00
	00		 mov	 DWORD PTR buf_packedchars_out_n$[rbp], eax

; 2453 : 
; 2454 :         // Convert our ranges in the format stb_truetype wants
; 2455 :         ImFontConfig& cfg = atlas->ConfigData[src_i];

  009a4	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  009ab	48 83 c0 78	 add	 rax, 120		; 00000078H
  009af	8b 95 24 03 00
	00		 mov	 edx, DWORD PTR src_i$34[rbp]
  009b5	48 8b c8	 mov	 rcx, rax
  009b8	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ; ImVector<ImFontConfig>::operator[]
  009bd	48 89 85 68 03
	00 00		 mov	 QWORD PTR cfg$36[rbp], rax

; 2456 :         src_tmp.PackRange.font_size = cfg.SizePixels;

  009c4	48 8b 85 48 03
	00 00		 mov	 rax, QWORD PTR src_tmp$35[rbp]
  009cb	48 8b 8d 68 03
	00 00		 mov	 rcx, QWORD PTR cfg$36[rbp]
  009d2	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [rcx+20]
  009d7	f3 0f 11 80 a0
	00 00 00	 movss	 DWORD PTR [rax+160], xmm0

; 2457 :         src_tmp.PackRange.first_unicode_codepoint_in_range = 0;

  009df	48 8b 85 48 03
	00 00		 mov	 rax, QWORD PTR src_tmp$35[rbp]
  009e6	c7 80 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+164], 0

; 2458 :         src_tmp.PackRange.array_of_unicode_codepoints = src_tmp.GlyphsList.Data;

  009f0	48 8b 85 48 03
	00 00		 mov	 rax, QWORD PTR src_tmp$35[rbp]
  009f7	48 8b 8d 48 03
	00 00		 mov	 rcx, QWORD PTR src_tmp$35[rbp]
  009fe	48 8b 89 08 01
	00 00		 mov	 rcx, QWORD PTR [rcx+264]
  00a05	48 89 88 a8 00
	00 00		 mov	 QWORD PTR [rax+168], rcx

; 2459 :         src_tmp.PackRange.num_chars = src_tmp.GlyphsList.Size;

  00a0c	48 8b 85 48 03
	00 00		 mov	 rax, QWORD PTR src_tmp$35[rbp]
  00a13	48 8b 8d 48 03
	00 00		 mov	 rcx, QWORD PTR src_tmp$35[rbp]
  00a1a	8b 89 00 01 00
	00		 mov	 ecx, DWORD PTR [rcx+256]
  00a20	89 88 b0 00 00
	00		 mov	 DWORD PTR [rax+176], ecx

; 2460 :         src_tmp.PackRange.chardata_for_range = src_tmp.PackedChars;

  00a26	48 8b 85 48 03
	00 00		 mov	 rax, QWORD PTR src_tmp$35[rbp]
  00a2d	48 8b 8d 48 03
	00 00		 mov	 rcx, QWORD PTR src_tmp$35[rbp]
  00a34	48 8b 89 d0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+208]
  00a3b	48 89 88 b8 00
	00 00		 mov	 QWORD PTR [rax+184], rcx

; 2461 :         src_tmp.PackRange.h_oversample = (unsigned char)cfg.OversampleH;

  00a42	48 8b 85 48 03
	00 00		 mov	 rax, QWORD PTR src_tmp$35[rbp]
  00a49	48 8b 8d 68 03
	00 00		 mov	 rcx, QWORD PTR cfg$36[rbp]
  00a50	0f b6 49 18	 movzx	 ecx, BYTE PTR [rcx+24]
  00a54	88 88 c0 00 00
	00		 mov	 BYTE PTR [rax+192], cl

; 2462 :         src_tmp.PackRange.v_oversample = (unsigned char)cfg.OversampleV;

  00a5a	48 8b 85 48 03
	00 00		 mov	 rax, QWORD PTR src_tmp$35[rbp]
  00a61	48 8b 8d 68 03
	00 00		 mov	 rcx, QWORD PTR cfg$36[rbp]
  00a68	0f b6 49 1c	 movzx	 ecx, BYTE PTR [rcx+28]
  00a6c	88 88 c1 00 00
	00		 mov	 BYTE PTR [rax+193], cl

; 2463 : 
; 2464 :         // Gather the sizes of all rectangles we will need to pack (this loop is based on stbtt_PackFontRangesGatherRects)
; 2465 :         const float scale = (cfg.SizePixels > 0) ? stbtt_ScaleForPixelHeight(&src_tmp.FontInfo, cfg.SizePixels) : stbtt_ScaleForMappingEmToPixels(&src_tmp.FontInfo, -cfg.SizePixels);

  00a72	48 8b 85 68 03
	00 00		 mov	 rax, QWORD PTR cfg$36[rbp]
  00a79	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  00a7e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00a85	76 25		 jbe	 SHORT $LN75@ImFontAtla
  00a87	48 8b 85 48 03
	00 00		 mov	 rax, QWORD PTR src_tmp$35[rbp]
  00a8e	48 8b 8d 68 03
	00 00		 mov	 rcx, QWORD PTR cfg$36[rbp]
  00a95	f3 0f 10 49 14	 movss	 xmm1, DWORD PTR [rcx+20]
  00a9a	48 8b c8	 mov	 rcx, rax
  00a9d	e8 00 00 00 00	 call	 stbtt_ScaleForPixelHeight
  00aa2	f3 0f 11 85 f4
	0e 00 00	 movss	 DWORD PTR tv467[rbp], xmm0
  00aaa	eb 2d		 jmp	 SHORT $LN76@ImFontAtla
$LN75@ImFontAtla:
  00aac	48 8b 85 68 03
	00 00		 mov	 rax, QWORD PTR cfg$36[rbp]
  00ab3	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  00ab8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00abf	48 8b 85 48 03
	00 00		 mov	 rax, QWORD PTR src_tmp$35[rbp]
  00ac6	0f 28 c8	 movaps	 xmm1, xmm0
  00ac9	48 8b c8	 mov	 rcx, rax
  00acc	e8 00 00 00 00	 call	 stbtt_ScaleForMappingEmToPixels
  00ad1	f3 0f 11 85 f4
	0e 00 00	 movss	 DWORD PTR tv467[rbp], xmm0
$LN76@ImFontAtla:
  00ad9	f3 0f 10 85 f4
	0e 00 00	 movss	 xmm0, DWORD PTR tv467[rbp]
  00ae1	f3 0f 11 85 84
	03 00 00	 movss	 DWORD PTR scale$37[rbp], xmm0

; 2466 :         const int padding = atlas->TexGlyphPadding;

  00ae9	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00af0	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00af3	89 85 a4 03 00
	00		 mov	 DWORD PTR padding$38[rbp], eax

; 2467 :         for (int glyph_i = 0; glyph_i < src_tmp.GlyphsList.Size; glyph_i++)

  00af9	c7 85 c4 03 00
	00 00 00 00 00	 mov	 DWORD PTR glyph_i$39[rbp], 0
  00b03	eb 0e		 jmp	 SHORT $LN31@ImFontAtla
$LN29@ImFontAtla:
  00b05	8b 85 c4 03 00
	00		 mov	 eax, DWORD PTR glyph_i$39[rbp]
  00b0b	ff c0		 inc	 eax
  00b0d	89 85 c4 03 00
	00		 mov	 DWORD PTR glyph_i$39[rbp], eax
$LN31@ImFontAtla:
  00b13	48 8b 85 48 03
	00 00		 mov	 rax, QWORD PTR src_tmp$35[rbp]
  00b1a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00b20	39 85 c4 03 00
	00		 cmp	 DWORD PTR glyph_i$39[rbp], eax
  00b26	0f 8d c2 01 00
	00		 jge	 $LN30@ImFontAtla

; 2468 :         {
; 2469 :             int x0, y0, x1, y1;
; 2470 :             const int glyph_index_in_font = stbtt_FindGlyphIndex(&src_tmp.FontInfo, src_tmp.GlyphsList[glyph_i]);

  00b2c	48 8b 85 48 03
	00 00		 mov	 rax, QWORD PTR src_tmp$35[rbp]
  00b33	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00b39	8b 95 c4 03 00
	00		 mov	 edx, DWORD PTR glyph_i$39[rbp]
  00b3f	48 8b c8	 mov	 rcx, rax
  00b42	e8 00 00 00 00	 call	 ??A?$ImVector@H@@QEAAAEAHH@Z ; ImVector<int>::operator[]
  00b47	48 8b 8d 48 03
	00 00		 mov	 rcx, QWORD PTR src_tmp$35[rbp]
  00b4e	8b 10		 mov	 edx, DWORD PTR [rax]
  00b50	e8 00 00 00 00	 call	 stbtt_FindGlyphIndex
  00b55	89 85 64 04 00
	00		 mov	 DWORD PTR glyph_index_in_font$44[rbp], eax

; 2471 :             IM_ASSERT(glyph_index_in_font != 0);

  00b5b	83 bd 64 04 00
	00 00		 cmp	 DWORD PTR glyph_index_in_font$44[rbp], 0
  00b62	75 24		 jne	 SHORT $LN77@ImFontAtla
  00b64	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4JA
  00b6a	05 85 00 00 00	 add	 eax, 133		; 00000085H
  00b6f	44 8b c0	 mov	 r8d, eax
  00b72	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00b79	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@ENBGOGEF@?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA_?$AAi?$AAn?$AA_?$AAf?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00b80	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00b86	33 c0		 xor	 eax, eax
$LN77@ImFontAtla:

; 2472 :             stbtt_GetGlyphBitmapBoxSubpixel(&src_tmp.FontInfo, glyph_index_in_font, scale * cfg.OversampleH, scale * cfg.OversampleV, 0, 0, &x0, &y0, &x1, &y1);

  00b88	48 8b 85 68 03
	00 00		 mov	 rax, QWORD PTR cfg$36[rbp]
  00b8f	f3 0f 2a 40 1c	 cvtsi2ss xmm0, DWORD PTR [rax+28]
  00b94	f3 0f 10 8d 84
	03 00 00	 movss	 xmm1, DWORD PTR scale$37[rbp]
  00b9c	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00ba0	0f 28 c1	 movaps	 xmm0, xmm1
  00ba3	48 8b 85 68 03
	00 00		 mov	 rax, QWORD PTR cfg$36[rbp]
  00baa	f3 0f 2a 48 18	 cvtsi2ss xmm1, DWORD PTR [rax+24]
  00baf	f3 0f 10 95 84
	03 00 00	 movss	 xmm2, DWORD PTR scale$37[rbp]
  00bb7	f3 0f 59 d1	 mulss	 xmm2, xmm1
  00bbb	0f 28 ca	 movaps	 xmm1, xmm2
  00bbe	48 8b 85 48 03
	00 00		 mov	 rax, QWORD PTR src_tmp$35[rbp]
  00bc5	48 8d 8d 44 04
	00 00		 lea	 rcx, QWORD PTR y1$43[rbp]
  00bcc	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00bd1	48 8d 8d 24 04
	00 00		 lea	 rcx, QWORD PTR x1$42[rbp]
  00bd8	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00bdd	48 8d 8d 04 04
	00 00		 lea	 rcx, QWORD PTR y0$41[rbp]
  00be4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00be9	48 8d 8d e4 03
	00 00		 lea	 rcx, QWORD PTR x0$40[rbp]
  00bf0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00bf5	0f 57 d2	 xorps	 xmm2, xmm2
  00bf8	f3 0f 11 54 24
	28		 movss	 DWORD PTR [rsp+40], xmm2
  00bfe	0f 57 d2	 xorps	 xmm2, xmm2
  00c01	f3 0f 11 54 24
	20		 movss	 DWORD PTR [rsp+32], xmm2
  00c07	0f 28 d8	 movaps	 xmm3, xmm0
  00c0a	0f 28 d1	 movaps	 xmm2, xmm1
  00c0d	8b 95 64 04 00
	00		 mov	 edx, DWORD PTR glyph_index_in_font$44[rbp]
  00c13	48 8b c8	 mov	 rcx, rax
  00c16	e8 00 00 00 00	 call	 stbtt_GetGlyphBitmapBoxSubpixel

; 2473 :             src_tmp.Rects[glyph_i].w = (stbrp_coord)(x1 - x0 + padding + cfg.OversampleH - 1);

  00c1b	8b 85 e4 03 00
	00		 mov	 eax, DWORD PTR x0$40[rbp]
  00c21	8b 8d 24 04 00
	00		 mov	 ecx, DWORD PTR x1$42[rbp]
  00c27	2b c8		 sub	 ecx, eax
  00c29	8b c1		 mov	 eax, ecx
  00c2b	03 85 a4 03 00
	00		 add	 eax, DWORD PTR padding$38[rbp]
  00c31	48 8b 8d 68 03
	00 00		 mov	 rcx, QWORD PTR cfg$36[rbp]
  00c38	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  00c3b	8d 44 08 ff	 lea	 eax, DWORD PTR [rax+rcx-1]
  00c3f	48 63 8d c4 03
	00 00		 movsxd	 rcx, DWORD PTR glyph_i$39[rbp]
  00c46	48 6b c9 18	 imul	 rcx, rcx, 24
  00c4a	48 8b 95 48 03
	00 00		 mov	 rdx, QWORD PTR src_tmp$35[rbp]
  00c51	48 8b 92 c8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+200]
  00c58	89 44 0a 04	 mov	 DWORD PTR [rdx+rcx+4], eax

; 2474 :             src_tmp.Rects[glyph_i].h = (stbrp_coord)(y1 - y0 + padding + cfg.OversampleV - 1);

  00c5c	8b 85 04 04 00
	00		 mov	 eax, DWORD PTR y0$41[rbp]
  00c62	8b 8d 44 04 00
	00		 mov	 ecx, DWORD PTR y1$43[rbp]
  00c68	2b c8		 sub	 ecx, eax
  00c6a	8b c1		 mov	 eax, ecx
  00c6c	03 85 a4 03 00
	00		 add	 eax, DWORD PTR padding$38[rbp]
  00c72	48 8b 8d 68 03
	00 00		 mov	 rcx, QWORD PTR cfg$36[rbp]
  00c79	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  00c7c	8d 44 08 ff	 lea	 eax, DWORD PTR [rax+rcx-1]
  00c80	48 63 8d c4 03
	00 00		 movsxd	 rcx, DWORD PTR glyph_i$39[rbp]
  00c87	48 6b c9 18	 imul	 rcx, rcx, 24
  00c8b	48 8b 95 48 03
	00 00		 mov	 rdx, QWORD PTR src_tmp$35[rbp]
  00c92	48 8b 92 c8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+200]
  00c99	89 44 0a 08	 mov	 DWORD PTR [rdx+rcx+8], eax

; 2475 :             total_surface += src_tmp.Rects[glyph_i].w * src_tmp.Rects[glyph_i].h;

  00c9d	48 63 85 c4 03
	00 00		 movsxd	 rax, DWORD PTR glyph_i$39[rbp]
  00ca4	48 6b c0 18	 imul	 rax, rax, 24
  00ca8	48 8b 8d 48 03
	00 00		 mov	 rcx, QWORD PTR src_tmp$35[rbp]
  00caf	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  00cb6	48 63 95 c4 03
	00 00		 movsxd	 rdx, DWORD PTR glyph_i$39[rbp]
  00cbd	48 6b d2 18	 imul	 rdx, rdx, 24
  00cc1	4c 8b 85 48 03
	00 00		 mov	 r8, QWORD PTR src_tmp$35[rbp]
  00cc8	4d 8b 80 c8 00
	00 00		 mov	 r8, QWORD PTR [r8+200]
  00ccf	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  00cd3	41 0f af 44 10
	08		 imul	 eax, DWORD PTR [r8+rdx+8]
  00cd9	8b 8d c4 02 00
	00		 mov	 ecx, DWORD PTR total_surface$[rbp]
  00cdf	03 c8		 add	 ecx, eax
  00ce1	8b c1		 mov	 eax, ecx
  00ce3	89 85 c4 02 00
	00		 mov	 DWORD PTR total_surface$[rbp], eax

; 2476 :         }

  00ce9	e9 17 fe ff ff	 jmp	 $LN29@ImFontAtla
$LN30@ImFontAtla:

; 2477 :     }

  00cee	e9 f2 fb ff ff	 jmp	 $LN26@ImFontAtla
$LN27@ImFontAtla:

; 2478 : 
; 2479 :     // We need a width for the skyline algorithm, any width!
; 2480 :     // The exact width doesn't really matter much, but some API/GPU have texture size limitations and increasing width can decrease height.
; 2481 :     // User can override TexDesiredWidth and TexGlyphPadding if they wish, otherwise we use a simple heuristic to select the width based on expected surface.
; 2482 :     const int surface_sqrt = (int)ImSqrt((float)total_surface) + 1;

  00cf3	f3 0f 2a 85 c4
	02 00 00	 cvtsi2ss xmm0, DWORD PTR total_surface$[rbp]
  00cfb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sqrtf
  00d01	f3 0f 2c c0	 cvttss2si eax, xmm0
  00d05	ff c0		 inc	 eax
  00d07	89 85 84 04 00
	00		 mov	 DWORD PTR surface_sqrt$[rbp], eax

; 2483 :     atlas->TexHeight = 0;

  00d0d	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00d14	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [rax+68], 0

; 2484 :     if (atlas->TexDesiredWidth > 0)

  00d1b	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00d22	83 78 10 00	 cmp	 DWORD PTR [rax+16], 0
  00d26	7e 19		 jle	 SHORT $LN57@ImFontAtla

; 2485 :         atlas->TexWidth = atlas->TexDesiredWidth;

  00d28	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00d2f	48 8b 8d 30 0f
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  00d36	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  00d39	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 2486 :     else

  00d3c	e9 89 00 00 00	 jmp	 $LN58@ImFontAtla
$LN57@ImFontAtla:

; 2487 :         atlas->TexWidth = (surface_sqrt >= 4096 * 0.7f) ? 4096 : (surface_sqrt >= 2048 * 0.7f) ? 2048 : (surface_sqrt >= 1024 * 0.7f) ? 1024 : 512;

  00d41	f3 0f 2a 85 84
	04 00 00	 cvtsi2ss xmm0, DWORD PTR surface_sqrt$[rbp]
  00d49	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@45333333
  00d50	72 0c		 jb	 SHORT $LN82@ImFontAtla
  00d52	c7 85 f4 0e 00
	00 00 10 00 00	 mov	 DWORD PTR tv555[rbp], 4096 ; 00001000H
  00d5c	eb 5c		 jmp	 SHORT $LN83@ImFontAtla
$LN82@ImFontAtla:
  00d5e	f3 0f 2a 85 84
	04 00 00	 cvtsi2ss xmm0, DWORD PTR surface_sqrt$[rbp]
  00d66	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@44b33333
  00d6d	72 0c		 jb	 SHORT $LN80@ImFontAtla
  00d6f	c7 85 f8 0e 00
	00 00 08 00 00	 mov	 DWORD PTR tv554[rbp], 2048 ; 00000800H
  00d79	eb 33		 jmp	 SHORT $LN81@ImFontAtla
$LN80@ImFontAtla:
  00d7b	f3 0f 2a 85 84
	04 00 00	 cvtsi2ss xmm0, DWORD PTR surface_sqrt$[rbp]
  00d83	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@44333333
  00d8a	72 0c		 jb	 SHORT $LN78@ImFontAtla
  00d8c	c7 85 fc 0e 00
	00 00 04 00 00	 mov	 DWORD PTR tv553[rbp], 1024 ; 00000400H
  00d96	eb 0a		 jmp	 SHORT $LN79@ImFontAtla
$LN78@ImFontAtla:
  00d98	c7 85 fc 0e 00
	00 00 02 00 00	 mov	 DWORD PTR tv553[rbp], 512 ; 00000200H
$LN79@ImFontAtla:
  00da2	8b 85 fc 0e 00
	00		 mov	 eax, DWORD PTR tv553[rbp]
  00da8	89 85 f8 0e 00
	00		 mov	 DWORD PTR tv554[rbp], eax
$LN81@ImFontAtla:
  00dae	8b 85 f8 0e 00
	00		 mov	 eax, DWORD PTR tv554[rbp]
  00db4	89 85 f4 0e 00
	00		 mov	 DWORD PTR tv555[rbp], eax
$LN83@ImFontAtla:
  00dba	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00dc1	8b 8d f4 0e 00
	00		 mov	 ecx, DWORD PTR tv555[rbp]
  00dc7	89 48 40	 mov	 DWORD PTR [rax+64], ecx
$LN58@ImFontAtla:

; 2488 : 
; 2489 :     // 5. Start packing
; 2490 :     // Pack our extra data rectangles first, so it will be on the upper-left corner of our texture (UV will have small values).
; 2491 :     const int TEX_HEIGHT_MAX = 1024 * 32;

  00dca	c7 85 a4 04 00
	00 00 80 00 00	 mov	 DWORD PTR TEX_HEIGHT_MAX$[rbp], 32768 ; 00008000H

; 2492 :     stbtt_pack_context spc = {};

  00dd4	48 8d 85 d0 04
	00 00		 lea	 rax, QWORD PTR spc$[rbp]
  00ddb	48 8b f8	 mov	 rdi, rax
  00dde	33 c0		 xor	 eax, eax
  00de0	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00de5	f3 aa		 rep stosb

; 2493 :     stbtt_PackBegin(&spc, NULL, atlas->TexWidth, TEX_HEIGHT_MAX, 0, atlas->TexGlyphPadding, NULL);

  00de7	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00df0	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00df7	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00dfa	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00dfe	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00e06	41 b9 00 80 00
	00		 mov	 r9d, 32768		; 00008000H
  00e0c	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00e13	44 8b 40 40	 mov	 r8d, DWORD PTR [rax+64]
  00e17	33 d2		 xor	 edx, edx
  00e19	48 8d 8d d0 04
	00 00		 lea	 rcx, QWORD PTR spc$[rbp]
  00e20	e8 00 00 00 00	 call	 stbtt_PackBegin

; 2494 :     ImFontAtlasBuildPackCustomRects(atlas, spc.pack_info);

  00e25	48 8b 95 d8 04
	00 00		 mov	 rdx, QWORD PTR spc$[rbp+8]
  00e2c	48 8b 8d 30 0f
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  00e33	e8 00 00 00 00	 call	 ?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z ; ImFontAtlasBuildPackCustomRects

; 2495 : 
; 2496 :     // 6. Pack each source font. No rendering yet, we are working with rectangles in an infinitely tall texture at this point.
; 2497 :     for (int src_i = 0; src_i < src_tmp_array.Size; src_i++)

  00e38	c7 85 24 05 00
	00 00 00 00 00	 mov	 DWORD PTR src_i$45[rbp], 0
  00e42	eb 0e		 jmp	 SHORT $LN34@ImFontAtla
$LN32@ImFontAtla:
  00e44	8b 85 24 05 00
	00		 mov	 eax, DWORD PTR src_i$45[rbp]
  00e4a	ff c0		 inc	 eax
  00e4c	89 85 24 05 00
	00		 mov	 DWORD PTR src_i$45[rbp], eax
$LN34@ImFontAtla:
  00e52	8b 45 08	 mov	 eax, DWORD PTR src_tmp_array$[rbp]
  00e55	39 85 24 05 00
	00		 cmp	 DWORD PTR src_i$45[rbp], eax
  00e5b	0f 8d fe 00 00
	00		 jge	 $LN33@ImFontAtla

; 2498 :     {
; 2499 :         ImFontBuildSrcData& src_tmp = src_tmp_array[src_i];

  00e61	8b 95 24 05 00
	00		 mov	 edx, DWORD PTR src_i$45[rbp]
  00e67	48 8d 4d 08	 lea	 rcx, QWORD PTR src_tmp_array$[rbp]
  00e6b	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z ; ImVector<ImFontBuildSrcData>::operator[]
  00e70	48 89 85 48 05
	00 00		 mov	 QWORD PTR src_tmp$46[rbp], rax

; 2500 :         if (src_tmp.GlyphsCount == 0)

  00e77	48 8b 85 48 05
	00 00		 mov	 rax, QWORD PTR src_tmp$46[rbp]
  00e7e	83 b8 e8 00 00
	00 00		 cmp	 DWORD PTR [rax+232], 0
  00e85	75 02		 jne	 SHORT $LN59@ImFontAtla

; 2501 :             continue;

  00e87	eb bb		 jmp	 SHORT $LN32@ImFontAtla
$LN59@ImFontAtla:

; 2502 : 
; 2503 :         stbrp_pack_rects((stbrp_context*)spc.pack_info, src_tmp.Rects, src_tmp.GlyphsCount);

  00e89	48 8b 85 48 05
	00 00		 mov	 rax, QWORD PTR src_tmp$46[rbp]
  00e90	44 8b 80 e8 00
	00 00		 mov	 r8d, DWORD PTR [rax+232]
  00e97	48 8b 85 48 05
	00 00		 mov	 rax, QWORD PTR src_tmp$46[rbp]
  00e9e	48 8b 90 c8 00
	00 00		 mov	 rdx, QWORD PTR [rax+200]
  00ea5	48 8b 8d d8 04
	00 00		 mov	 rcx, QWORD PTR spc$[rbp+8]
  00eac	e8 00 00 00 00	 call	 stbrp_pack_rects

; 2504 : 
; 2505 :         // Extend texture height and mark missing glyphs as non-packed so we won't render them.
; 2506 :         // FIXME: We are not handling packing failure here (would happen if we got off TEX_HEIGHT_MAX or if a single if larger than TexWidth?)
; 2507 :         for (int glyph_i = 0; glyph_i < src_tmp.GlyphsCount; glyph_i++)

  00eb1	c7 85 64 05 00
	00 00 00 00 00	 mov	 DWORD PTR glyph_i$47[rbp], 0
  00ebb	eb 0e		 jmp	 SHORT $LN37@ImFontAtla
$LN35@ImFontAtla:
  00ebd	8b 85 64 05 00
	00		 mov	 eax, DWORD PTR glyph_i$47[rbp]
  00ec3	ff c0		 inc	 eax
  00ec5	89 85 64 05 00
	00		 mov	 DWORD PTR glyph_i$47[rbp], eax
$LN37@ImFontAtla:
  00ecb	48 8b 85 48 05
	00 00		 mov	 rax, QWORD PTR src_tmp$46[rbp]
  00ed2	8b 80 e8 00 00
	00		 mov	 eax, DWORD PTR [rax+232]
  00ed8	39 85 64 05 00
	00		 cmp	 DWORD PTR glyph_i$47[rbp], eax
  00ede	7d 7a		 jge	 SHORT $LN36@ImFontAtla

; 2508 :             if (src_tmp.Rects[glyph_i].was_packed)

  00ee0	48 63 85 64 05
	00 00		 movsxd	 rax, DWORD PTR glyph_i$47[rbp]
  00ee7	48 6b c0 18	 imul	 rax, rax, 24
  00eeb	48 8b 8d 48 05
	00 00		 mov	 rcx, QWORD PTR src_tmp$46[rbp]
  00ef2	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  00ef9	83 7c 01 14 00	 cmp	 DWORD PTR [rcx+rax+20], 0
  00efe	74 55		 je	 SHORT $LN60@ImFontAtla

; 2509 :                 atlas->TexHeight = ImMax(atlas->TexHeight, src_tmp.Rects[glyph_i].y + src_tmp.Rects[glyph_i].h);

  00f00	48 63 85 64 05
	00 00		 movsxd	 rax, DWORD PTR glyph_i$47[rbp]
  00f07	48 6b c0 18	 imul	 rax, rax, 24
  00f0b	48 8b 8d 48 05
	00 00		 mov	 rcx, QWORD PTR src_tmp$46[rbp]
  00f12	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  00f19	48 63 95 64 05
	00 00		 movsxd	 rdx, DWORD PTR glyph_i$47[rbp]
  00f20	48 6b d2 18	 imul	 rdx, rdx, 24
  00f24	48 8b bd 48 05
	00 00		 mov	 rdi, QWORD PTR src_tmp$46[rbp]
  00f2b	48 8b bf c8 00
	00 00		 mov	 rdi, QWORD PTR [rdi+200]
  00f32	8b 44 01 10	 mov	 eax, DWORD PTR [rcx+rax+16]
  00f36	03 44 17 08	 add	 eax, DWORD PTR [rdi+rdx+8]
  00f3a	8b d0		 mov	 edx, eax
  00f3c	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00f43	8b 48 44	 mov	 ecx, DWORD PTR [rax+68]
  00f46	e8 00 00 00 00	 call	 ??$ImMax@H@@YAHHH@Z	; ImMax<int>
  00f4b	48 8b 8d 30 0f
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  00f52	89 41 44	 mov	 DWORD PTR [rcx+68], eax
$LN60@ImFontAtla:

; 2510 :     }

  00f55	e9 63 ff ff ff	 jmp	 $LN35@ImFontAtla
$LN36@ImFontAtla:
  00f5a	e9 e5 fe ff ff	 jmp	 $LN32@ImFontAtla
$LN33@ImFontAtla:

; 2511 : 
; 2512 :     // 7. Allocate texture
; 2513 :     atlas->TexHeight = (atlas->Flags & ImFontAtlasFlags_NoPowerOfTwoHeight) ? (atlas->TexHeight + 1) : ImUpperPowerOfTwo(atlas->TexHeight);

  00f5f	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00f66	8b 00		 mov	 eax, DWORD PTR [rax]
  00f68	83 e0 01	 and	 eax, 1
  00f6b	85 c0		 test	 eax, eax
  00f6d	74 14		 je	 SHORT $LN84@ImFontAtla
  00f6f	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00f76	8b 40 44	 mov	 eax, DWORD PTR [rax+68]
  00f79	ff c0		 inc	 eax
  00f7b	89 85 f4 0e 00
	00		 mov	 DWORD PTR tv617[rbp], eax
  00f81	eb 15		 jmp	 SHORT $LN85@ImFontAtla
$LN84@ImFontAtla:
  00f83	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00f8a	8b 48 44	 mov	 ecx, DWORD PTR [rax+68]
  00f8d	e8 00 00 00 00	 call	 ?ImUpperPowerOfTwo@@YAHH@Z ; ImUpperPowerOfTwo
  00f92	89 85 f4 0e 00
	00		 mov	 DWORD PTR tv617[rbp], eax
$LN85@ImFontAtla:
  00f98	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00f9f	8b 8d f4 0e 00
	00		 mov	 ecx, DWORD PTR tv617[rbp]
  00fa5	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 2514 :     atlas->TexUvScale = ImVec2(1.0f / atlas->TexWidth, 1.0f / atlas->TexHeight);

  00fa8	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00faf	f3 0f 2a 40 44	 cvtsi2ss xmm0, DWORD PTR [rax+68]
  00fb4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00fbc	f3 0f 5e c8	 divss	 xmm1, xmm0
  00fc0	0f 28 c1	 movaps	 xmm0, xmm1
  00fc3	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00fca	f3 0f 2a 48 40	 cvtsi2ss xmm1, DWORD PTR [rax+64]
  00fcf	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00fd7	f3 0f 5e d1	 divss	 xmm2, xmm1
  00fdb	0f 28 ca	 movaps	 xmm1, xmm2
  00fde	0f 28 d0	 movaps	 xmm2, xmm0
  00fe1	48 8d 8d a4 0e
	00 00		 lea	 rcx, QWORD PTR $T76[rbp]
  00fe8	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00fed	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00ff0	48 8b 8d 30 0f
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  00ff7	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 2515 :     atlas->TexPixelsAlpha8 = (unsigned char*)IM_ALLOC(atlas->TexWidth * atlas->TexHeight);

  00ffb	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  01002	48 8b 8d 30 0f
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  01009	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  0100c	0f af 41 44	 imul	 eax, DWORD PTR [rcx+68]
  01010	48 98		 cdqe
  01012	48 8b c8	 mov	 rcx, rax
  01015	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  0101a	48 8b 8d 30 0f
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  01021	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 2516 :     memset(atlas->TexPixelsAlpha8, 0, atlas->TexWidth * atlas->TexHeight);

  01025	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  0102c	48 8b 8d 30 0f
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  01033	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  01036	0f af 41 44	 imul	 eax, DWORD PTR [rcx+68]
  0103a	48 98		 cdqe
  0103c	4c 8b c0	 mov	 r8, rax
  0103f	33 d2		 xor	 edx, edx
  01041	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  01048	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0104c	e8 00 00 00 00	 call	 memset

; 2517 :     spc.pixels = atlas->TexPixelsAlpha8;

  01051	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  01058	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0105c	48 89 85 00 05
	00 00		 mov	 QWORD PTR spc$[rbp+48], rax

; 2518 :     spc.height = atlas->TexHeight;

  01063	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  0106a	8b 40 44	 mov	 eax, DWORD PTR [rax+68]
  0106d	89 85 e4 04 00
	00		 mov	 DWORD PTR spc$[rbp+20], eax

; 2519 : 
; 2520 :     // 8. Render/rasterize font characters into the texture
; 2521 :     for (int src_i = 0; src_i < src_tmp_array.Size; src_i++)

  01073	c7 85 84 05 00
	00 00 00 00 00	 mov	 DWORD PTR src_i$48[rbp], 0
  0107d	eb 0e		 jmp	 SHORT $LN40@ImFontAtla
$LN38@ImFontAtla:
  0107f	8b 85 84 05 00
	00		 mov	 eax, DWORD PTR src_i$48[rbp]
  01085	ff c0		 inc	 eax
  01087	89 85 84 05 00
	00		 mov	 DWORD PTR src_i$48[rbp], eax
$LN40@ImFontAtla:
  0108d	8b 45 08	 mov	 eax, DWORD PTR src_tmp_array$[rbp]
  01090	39 85 84 05 00
	00		 cmp	 DWORD PTR src_i$48[rbp], eax
  01096	0f 8d 99 01 00
	00		 jge	 $LN39@ImFontAtla

; 2522 :     {
; 2523 :         ImFontConfig& cfg = atlas->ConfigData[src_i];

  0109c	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  010a3	48 83 c0 78	 add	 rax, 120		; 00000078H
  010a7	8b 95 84 05 00
	00		 mov	 edx, DWORD PTR src_i$48[rbp]
  010ad	48 8b c8	 mov	 rcx, rax
  010b0	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ; ImVector<ImFontConfig>::operator[]
  010b5	48 89 85 a8 05
	00 00		 mov	 QWORD PTR cfg$49[rbp], rax

; 2524 :         ImFontBuildSrcData& src_tmp = src_tmp_array[src_i];

  010bc	8b 95 84 05 00
	00		 mov	 edx, DWORD PTR src_i$48[rbp]
  010c2	48 8d 4d 08	 lea	 rcx, QWORD PTR src_tmp_array$[rbp]
  010c6	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z ; ImVector<ImFontBuildSrcData>::operator[]
  010cb	48 89 85 c8 05
	00 00		 mov	 QWORD PTR src_tmp$50[rbp], rax

; 2525 :         if (src_tmp.GlyphsCount == 0)

  010d2	48 8b 85 c8 05
	00 00		 mov	 rax, QWORD PTR src_tmp$50[rbp]
  010d9	83 b8 e8 00 00
	00 00		 cmp	 DWORD PTR [rax+232], 0
  010e0	75 02		 jne	 SHORT $LN61@ImFontAtla

; 2526 :             continue;

  010e2	eb 9b		 jmp	 SHORT $LN38@ImFontAtla
$LN61@ImFontAtla:

; 2527 : 
; 2528 :         stbtt_PackFontRangesRenderIntoRects(&spc, &src_tmp.FontInfo, &src_tmp.PackRange, 1, src_tmp.Rects);

  010e4	48 8b 85 c8 05
	00 00		 mov	 rax, QWORD PTR src_tmp$50[rbp]
  010eb	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  010f1	48 8b 8d c8 05
	00 00		 mov	 rcx, QWORD PTR src_tmp$50[rbp]
  010f8	48 8b 95 c8 05
	00 00		 mov	 rdx, QWORD PTR src_tmp$50[rbp]
  010ff	48 8b 92 c8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+200]
  01106	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0110b	41 b9 01 00 00
	00		 mov	 r9d, 1
  01111	4c 8b c0	 mov	 r8, rax
  01114	48 8b d1	 mov	 rdx, rcx
  01117	48 8d 8d d0 04
	00 00		 lea	 rcx, QWORD PTR spc$[rbp]
  0111e	e8 00 00 00 00	 call	 stbtt_PackFontRangesRenderIntoRects

; 2529 : 
; 2530 :         // Apply multiply operator
; 2531 :         if (cfg.RasterizerMultiply != 1.0f)

  01123	48 8b 85 a8 05
	00 00		 mov	 rax, QWORD PTR cfg$49[rbp]
  0112a	f3 0f 10 40 50	 movss	 xmm0, DWORD PTR [rax+80]
  0112f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3f800000
  01136	7a 06		 jp	 SHORT $LN94@ImFontAtla
  01138	0f 84 e0 00 00
	00		 je	 $LN62@ImFontAtla
$LN94@ImFontAtla:

; 2532 :         {
; 2533 :             unsigned char multiply_table[256];
; 2534 :             ImFontAtlasBuildMultiplyCalcLookupTable(multiply_table, cfg.RasterizerMultiply);

  0113e	48 8b 85 a8 05
	00 00		 mov	 rax, QWORD PTR cfg$49[rbp]
  01145	f3 0f 10 48 50	 movss	 xmm1, DWORD PTR [rax+80]
  0114a	48 8d 8d f0 05
	00 00		 lea	 rcx, QWORD PTR multiply_table$51[rbp]
  01151	e8 00 00 00 00	 call	 ?ImFontAtlasBuildMultiplyCalcLookupTable@@YAXQEAEM@Z ; ImFontAtlasBuildMultiplyCalcLookupTable

; 2535 :             stbrp_rect* r = &src_tmp.Rects[0];

  01156	b8 18 00 00 00	 mov	 eax, 24
  0115b	48 6b c0 00	 imul	 rax, rax, 0
  0115f	48 8b 8d c8 05
	00 00		 mov	 rcx, QWORD PTR src_tmp$50[rbp]
  01166	48 03 81 c8 00
	00 00		 add	 rax, QWORD PTR [rcx+200]
  0116d	48 89 85 08 07
	00 00		 mov	 QWORD PTR r$52[rbp], rax

; 2536 :             for (int glyph_i = 0; glyph_i < src_tmp.GlyphsCount; glyph_i++, r++)

  01174	c7 85 24 07 00
	00 00 00 00 00	 mov	 DWORD PTR glyph_i$53[rbp], 0
  0117e	eb 20		 jmp	 SHORT $LN43@ImFontAtla
$LN41@ImFontAtla:
  01180	8b 85 24 07 00
	00		 mov	 eax, DWORD PTR glyph_i$53[rbp]
  01186	ff c0		 inc	 eax
  01188	89 85 24 07 00
	00		 mov	 DWORD PTR glyph_i$53[rbp], eax
  0118e	48 8b 85 08 07
	00 00		 mov	 rax, QWORD PTR r$52[rbp]
  01195	48 83 c0 18	 add	 rax, 24
  01199	48 89 85 08 07
	00 00		 mov	 QWORD PTR r$52[rbp], rax
$LN43@ImFontAtla:
  011a0	48 8b 85 c8 05
	00 00		 mov	 rax, QWORD PTR src_tmp$50[rbp]
  011a7	8b 80 e8 00 00
	00		 mov	 eax, DWORD PTR [rax+232]
  011ad	39 85 24 07 00
	00		 cmp	 DWORD PTR glyph_i$53[rbp], eax
  011b3	7d 69		 jge	 SHORT $LN62@ImFontAtla

; 2537 :                 if (r->was_packed)

  011b5	48 8b 85 08 07
	00 00		 mov	 rax, QWORD PTR r$52[rbp]
  011bc	83 78 14 00	 cmp	 DWORD PTR [rax+20], 0
  011c0	74 57		 je	 SHORT $LN63@ImFontAtla

; 2538 :                     ImFontAtlasBuildMultiplyRectAlpha8(multiply_table, atlas->TexPixelsAlpha8, r->x, r->y, r->w, r->h, atlas->TexWidth * 1);

  011c2	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  011c9	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  011cc	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  011d0	48 8b 85 08 07
	00 00		 mov	 rax, QWORD PTR r$52[rbp]
  011d7	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  011da	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  011de	48 8b 85 08 07
	00 00		 mov	 rax, QWORD PTR r$52[rbp]
  011e5	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  011e8	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  011ec	48 8b 85 08 07
	00 00		 mov	 rax, QWORD PTR r$52[rbp]
  011f3	44 8b 48 10	 mov	 r9d, DWORD PTR [rax+16]
  011f7	48 8b 85 08 07
	00 00		 mov	 rax, QWORD PTR r$52[rbp]
  011fe	44 8b 40 0c	 mov	 r8d, DWORD PTR [rax+12]
  01202	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  01209	48 8b 50 30	 mov	 rdx, QWORD PTR [rax+48]
  0120d	48 8d 8d f0 05
	00 00		 lea	 rcx, QWORD PTR multiply_table$51[rbp]
  01214	e8 00 00 00 00	 call	 ?ImFontAtlasBuildMultiplyRectAlpha8@@YAXQEBEPEAEHHHHH@Z ; ImFontAtlasBuildMultiplyRectAlpha8
$LN63@ImFontAtla:

; 2539 :         }

  01219	e9 62 ff ff ff	 jmp	 $LN41@ImFontAtla
$LN62@ImFontAtla:

; 2540 :         src_tmp.Rects = NULL;

  0121e	48 8b 85 c8 05
	00 00		 mov	 rax, QWORD PTR src_tmp$50[rbp]
  01225	48 c7 80 c8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+200], 0

; 2541 :     }

  01230	e9 4a fe ff ff	 jmp	 $LN38@ImFontAtla
$LN39@ImFontAtla:

; 2542 : 
; 2543 :     // End packing
; 2544 :     stbtt_PackEnd(&spc);

  01235	48 8d 8d d0 04
	00 00		 lea	 rcx, QWORD PTR spc$[rbp]
  0123c	e8 00 00 00 00	 call	 stbtt_PackEnd

; 2545 :     buf_rects.clear();

  01241	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR buf_rects$[rbp]
  01248	e8 00 00 00 00	 call	 ?clear@?$ImVector@Ustbrp_rect@@@@QEAAXXZ ; ImVector<stbrp_rect>::clear

; 2546 : 
; 2547 :     // 9. Setup ImFont and glyphs for runtime
; 2548 :     for (int src_i = 0; src_i < src_tmp_array.Size; src_i++)

  0124d	c7 85 44 07 00
	00 00 00 00 00	 mov	 DWORD PTR src_i$54[rbp], 0
  01257	eb 0e		 jmp	 SHORT $LN46@ImFontAtla
$LN44@ImFontAtla:
  01259	8b 85 44 07 00
	00		 mov	 eax, DWORD PTR src_i$54[rbp]
  0125f	ff c0		 inc	 eax
  01261	89 85 44 07 00
	00		 mov	 DWORD PTR src_i$54[rbp], eax
$LN46@ImFontAtla:
  01267	8b 45 08	 mov	 eax, DWORD PTR src_tmp_array$[rbp]
  0126a	39 85 44 07 00
	00		 cmp	 DWORD PTR src_i$54[rbp], eax
  01270	0f 8d 67 03 00
	00		 jge	 $LN45@ImFontAtla

; 2549 :     {
; 2550 :         ImFontBuildSrcData& src_tmp = src_tmp_array[src_i];

  01276	8b 95 44 07 00
	00		 mov	 edx, DWORD PTR src_i$54[rbp]
  0127c	48 8d 4d 08	 lea	 rcx, QWORD PTR src_tmp_array$[rbp]
  01280	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z ; ImVector<ImFontBuildSrcData>::operator[]
  01285	48 89 85 68 07
	00 00		 mov	 QWORD PTR src_tmp$55[rbp], rax

; 2551 :         if (src_tmp.GlyphsCount == 0)

  0128c	48 8b 85 68 07
	00 00		 mov	 rax, QWORD PTR src_tmp$55[rbp]
  01293	83 b8 e8 00 00
	00 00		 cmp	 DWORD PTR [rax+232], 0
  0129a	75 02		 jne	 SHORT $LN64@ImFontAtla

; 2552 :             continue;

  0129c	eb bb		 jmp	 SHORT $LN44@ImFontAtla
$LN64@ImFontAtla:

; 2553 : 
; 2554 :         // When merging fonts with MergeMode=true:
; 2555 :         // - We can have multiple input fonts writing into a same destination font.
; 2556 :         // - dst_font->ConfigData is != from cfg which is our source configuration.
; 2557 :         ImFontConfig& cfg = atlas->ConfigData[src_i];

  0129e	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  012a5	48 83 c0 78	 add	 rax, 120		; 00000078H
  012a9	8b 95 44 07 00
	00		 mov	 edx, DWORD PTR src_i$54[rbp]
  012af	48 8b c8	 mov	 rcx, rax
  012b2	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ; ImVector<ImFontConfig>::operator[]
  012b7	48 89 85 88 07
	00 00		 mov	 QWORD PTR cfg$56[rbp], rax

; 2558 :         ImFont* dst_font = cfg.DstFont;

  012be	48 8b 85 88 07
	00 00		 mov	 rax, QWORD PTR cfg$56[rbp]
  012c5	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  012cc	48 89 85 a8 07
	00 00		 mov	 QWORD PTR dst_font$57[rbp], rax

; 2559 : 
; 2560 :         const float font_scale = stbtt_ScaleForPixelHeight(&src_tmp.FontInfo, cfg.SizePixels);

  012d3	48 8b 85 68 07
	00 00		 mov	 rax, QWORD PTR src_tmp$55[rbp]
  012da	48 8b 8d 88 07
	00 00		 mov	 rcx, QWORD PTR cfg$56[rbp]
  012e1	f3 0f 10 49 14	 movss	 xmm1, DWORD PTR [rcx+20]
  012e6	48 8b c8	 mov	 rcx, rax
  012e9	e8 00 00 00 00	 call	 stbtt_ScaleForPixelHeight
  012ee	f3 0f 11 85 c4
	07 00 00	 movss	 DWORD PTR font_scale$58[rbp], xmm0

; 2561 :         int unscaled_ascent, unscaled_descent, unscaled_line_gap;
; 2562 :         stbtt_GetFontVMetrics(&src_tmp.FontInfo, &unscaled_ascent, &unscaled_descent, &unscaled_line_gap);

  012f6	48 8b 85 68 07
	00 00		 mov	 rax, QWORD PTR src_tmp$55[rbp]
  012fd	4c 8d 8d 24 08
	00 00		 lea	 r9, QWORD PTR unscaled_line_gap$61[rbp]
  01304	4c 8d 85 04 08
	00 00		 lea	 r8, QWORD PTR unscaled_descent$60[rbp]
  0130b	48 8d 95 e4 07
	00 00		 lea	 rdx, QWORD PTR unscaled_ascent$59[rbp]
  01312	48 8b c8	 mov	 rcx, rax
  01315	e8 00 00 00 00	 call	 stbtt_GetFontVMetrics

; 2563 : 
; 2564 :         const float ascent = ImFloor(unscaled_ascent * font_scale + ((unscaled_ascent > 0.0f) ? +1 : -1));

  0131a	f3 0f 2a 85 e4
	07 00 00	 cvtsi2ss xmm0, DWORD PTR unscaled_ascent$59[rbp]
  01322	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  01329	76 0c		 jbe	 SHORT $LN86@ImFontAtla
  0132b	c7 85 f4 0e 00
	00 01 00 00 00	 mov	 DWORD PTR tv755[rbp], 1
  01335	eb 0a		 jmp	 SHORT $LN87@ImFontAtla
$LN86@ImFontAtla:
  01337	c7 85 f4 0e 00
	00 ff ff ff ff	 mov	 DWORD PTR tv755[rbp], -1
$LN87@ImFontAtla:
  01341	f3 0f 2a 85 e4
	07 00 00	 cvtsi2ss xmm0, DWORD PTR unscaled_ascent$59[rbp]
  01349	f3 0f 59 85 c4
	07 00 00	 mulss	 xmm0, DWORD PTR font_scale$58[rbp]
  01351	f3 0f 2a 8d f4
	0e 00 00	 cvtsi2ss xmm1, DWORD PTR tv755[rbp]
  01359	f3 0f 58 c1	 addss	 xmm0, xmm1
  0135d	e8 00 00 00 00	 call	 ?ImFloor@@YAMM@Z	; ImFloor
  01362	f3 0f 11 85 44
	08 00 00	 movss	 DWORD PTR ascent$62[rbp], xmm0

; 2565 :         const float descent = ImFloor(unscaled_descent * font_scale + ((unscaled_descent > 0.0f) ? +1 : -1));

  0136a	f3 0f 2a 85 04
	08 00 00	 cvtsi2ss xmm0, DWORD PTR unscaled_descent$60[rbp]
  01372	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  01379	76 0c		 jbe	 SHORT $LN88@ImFontAtla
  0137b	c7 85 f4 0e 00
	00 01 00 00 00	 mov	 DWORD PTR tv764[rbp], 1
  01385	eb 0a		 jmp	 SHORT $LN89@ImFontAtla
$LN88@ImFontAtla:
  01387	c7 85 f4 0e 00
	00 ff ff ff ff	 mov	 DWORD PTR tv764[rbp], -1
$LN89@ImFontAtla:
  01391	f3 0f 2a 85 04
	08 00 00	 cvtsi2ss xmm0, DWORD PTR unscaled_descent$60[rbp]
  01399	f3 0f 59 85 c4
	07 00 00	 mulss	 xmm0, DWORD PTR font_scale$58[rbp]
  013a1	f3 0f 2a 8d f4
	0e 00 00	 cvtsi2ss xmm1, DWORD PTR tv764[rbp]
  013a9	f3 0f 58 c1	 addss	 xmm0, xmm1
  013ad	e8 00 00 00 00	 call	 ?ImFloor@@YAMM@Z	; ImFloor
  013b2	f3 0f 11 85 64
	08 00 00	 movss	 DWORD PTR descent$63[rbp], xmm0

; 2566 :         ImFontAtlasBuildSetupFont(atlas, dst_font, &cfg, ascent, descent);

  013ba	f3 0f 10 85 64
	08 00 00	 movss	 xmm0, DWORD PTR descent$63[rbp]
  013c2	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  013c8	f3 0f 10 9d 44
	08 00 00	 movss	 xmm3, DWORD PTR ascent$62[rbp]
  013d0	4c 8b 85 88 07
	00 00		 mov	 r8, QWORD PTR cfg$56[rbp]
  013d7	48 8b 95 a8 07
	00 00		 mov	 rdx, QWORD PTR dst_font$57[rbp]
  013de	48 8b 8d 30 0f
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  013e5	e8 00 00 00 00	 call	 ?ImFontAtlasBuildSetupFont@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontConfig@@MM@Z ; ImFontAtlasBuildSetupFont

; 2567 :         const float font_off_x = cfg.GlyphOffset.x;

  013ea	48 8b 85 88 07
	00 00		 mov	 rax, QWORD PTR cfg$56[rbp]
  013f1	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [rax+44]
  013f6	f3 0f 11 85 84
	08 00 00	 movss	 DWORD PTR font_off_x$64[rbp], xmm0

; 2568 :         const float font_off_y = cfg.GlyphOffset.y + IM_ROUND(dst_font->Ascent);

  013fe	48 8b 85 a8 07
	00 00		 mov	 rax, QWORD PTR dst_font$57[rbp]
  01405	f3 0f 10 40 68	 movss	 xmm0, DWORD PTR [rax+104]
  0140a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  01412	f3 0f 2c c0	 cvttss2si eax, xmm0
  01416	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0141a	48 8b 85 88 07
	00 00		 mov	 rax, QWORD PTR cfg$56[rbp]
  01421	f3 0f 10 48 30	 movss	 xmm1, DWORD PTR [rax+48]
  01426	f3 0f 58 c8	 addss	 xmm1, xmm0
  0142a	0f 28 c1	 movaps	 xmm0, xmm1
  0142d	f3 0f 11 85 a4
	08 00 00	 movss	 DWORD PTR font_off_y$65[rbp], xmm0

; 2569 : 
; 2570 :         for (int glyph_i = 0; glyph_i < src_tmp.GlyphsCount; glyph_i++)

  01435	c7 85 c4 08 00
	00 00 00 00 00	 mov	 DWORD PTR glyph_i$66[rbp], 0
  0143f	eb 0e		 jmp	 SHORT $LN49@ImFontAtla
$LN47@ImFontAtla:
  01441	8b 85 c4 08 00
	00		 mov	 eax, DWORD PTR glyph_i$66[rbp]
  01447	ff c0		 inc	 eax
  01449	89 85 c4 08 00
	00		 mov	 DWORD PTR glyph_i$66[rbp], eax
$LN49@ImFontAtla:
  0144f	48 8b 85 68 07
	00 00		 mov	 rax, QWORD PTR src_tmp$55[rbp]
  01456	8b 80 e8 00 00
	00		 mov	 eax, DWORD PTR [rax+232]
  0145c	39 85 c4 08 00
	00		 cmp	 DWORD PTR glyph_i$66[rbp], eax
  01462	0f 8d 70 01 00
	00		 jge	 $LN48@ImFontAtla

; 2571 :         {
; 2572 :             // Register glyph
; 2573 :             const int codepoint = src_tmp.GlyphsList[glyph_i];

  01468	48 8b 85 68 07
	00 00		 mov	 rax, QWORD PTR src_tmp$55[rbp]
  0146f	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  01475	8b 95 c4 08 00
	00		 mov	 edx, DWORD PTR glyph_i$66[rbp]
  0147b	48 8b c8	 mov	 rcx, rax
  0147e	e8 00 00 00 00	 call	 ??A?$ImVector@H@@QEAAAEAHH@Z ; ImVector<int>::operator[]
  01483	8b 00		 mov	 eax, DWORD PTR [rax]
  01485	89 85 e4 08 00
	00		 mov	 DWORD PTR codepoint$67[rbp], eax

; 2574 :             const stbtt_packedchar& pc = src_tmp.PackedChars[glyph_i];

  0148b	48 63 85 c4 08
	00 00		 movsxd	 rax, DWORD PTR glyph_i$66[rbp]
  01492	48 6b c0 1c	 imul	 rax, rax, 28
  01496	48 8b 8d 68 07
	00 00		 mov	 rcx, QWORD PTR src_tmp$55[rbp]
  0149d	48 03 81 d0 00
	00 00		 add	 rax, QWORD PTR [rcx+208]
  014a4	48 89 85 08 09
	00 00		 mov	 QWORD PTR pc$68[rbp], rax

; 2575 :             stbtt_aligned_quad q;
; 2576 :             float unused_x = 0.0f, unused_y = 0.0f;

  014ab	0f 57 c0	 xorps	 xmm0, xmm0
  014ae	f3 0f 11 85 64
	09 00 00	 movss	 DWORD PTR unused_x$70[rbp], xmm0
  014b6	0f 57 c0	 xorps	 xmm0, xmm0
  014b9	f3 0f 11 85 84
	09 00 00	 movss	 DWORD PTR unused_y$71[rbp], xmm0

; 2577 :             stbtt_GetPackedQuad(src_tmp.PackedChars, atlas->TexWidth, atlas->TexHeight, glyph_i, &unused_x, &unused_y, &q, 0);

  014c1	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  014c9	48 8d 85 28 09
	00 00		 lea	 rax, QWORD PTR q$69[rbp]
  014d0	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  014d5	48 8d 85 84 09
	00 00		 lea	 rax, QWORD PTR unused_y$71[rbp]
  014dc	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  014e1	48 8d 85 64 09
	00 00		 lea	 rax, QWORD PTR unused_x$70[rbp]
  014e8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  014ed	44 8b 8d c4 08
	00 00		 mov	 r9d, DWORD PTR glyph_i$66[rbp]
  014f4	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  014fb	44 8b 40 44	 mov	 r8d, DWORD PTR [rax+68]
  014ff	48 8b 85 30 0f
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  01506	8b 50 40	 mov	 edx, DWORD PTR [rax+64]
  01509	48 8b 85 68 07
	00 00		 mov	 rax, QWORD PTR src_tmp$55[rbp]
  01510	48 8b 88 d0 00
	00 00		 mov	 rcx, QWORD PTR [rax+208]
  01517	e8 00 00 00 00	 call	 stbtt_GetPackedQuad

; 2578 :             dst_font->AddGlyph(&cfg, (ImWchar)codepoint, q.x0 + font_off_x, q.y0 + font_off_y, q.x1 + font_off_x, q.y1 + font_off_y, q.s0, q.t0, q.s1, q.t1, pc.xadvance);

  0151c	f3 0f 10 85 3c
	09 00 00	 movss	 xmm0, DWORD PTR q$69[rbp+20]
  01524	f3 0f 58 85 a4
	08 00 00	 addss	 xmm0, DWORD PTR font_off_y$65[rbp]
  0152c	f3 0f 10 8d 38
	09 00 00	 movss	 xmm1, DWORD PTR q$69[rbp+16]
  01534	f3 0f 58 8d 84
	08 00 00	 addss	 xmm1, DWORD PTR font_off_x$64[rbp]
  0153c	f3 0f 10 95 2c
	09 00 00	 movss	 xmm2, DWORD PTR q$69[rbp+4]
  01544	f3 0f 58 95 a4
	08 00 00	 addss	 xmm2, DWORD PTR font_off_y$65[rbp]
  0154c	f3 0f 10 9d 28
	09 00 00	 movss	 xmm3, DWORD PTR q$69[rbp]
  01554	f3 0f 58 9d 84
	08 00 00	 addss	 xmm3, DWORD PTR font_off_x$64[rbp]
  0155c	48 8b 85 08 09
	00 00		 mov	 rax, QWORD PTR pc$68[rbp]
  01563	f3 0f 10 60 10	 movss	 xmm4, DWORD PTR [rax+16]
  01568	f3 0f 11 64 24
	58		 movss	 DWORD PTR [rsp+88], xmm4
  0156e	f3 0f 10 a5 44
	09 00 00	 movss	 xmm4, DWORD PTR q$69[rbp+28]
  01576	f3 0f 11 64 24
	50		 movss	 DWORD PTR [rsp+80], xmm4
  0157c	f3 0f 10 a5 40
	09 00 00	 movss	 xmm4, DWORD PTR q$69[rbp+24]
  01584	f3 0f 11 64 24
	48		 movss	 DWORD PTR [rsp+72], xmm4
  0158a	f3 0f 10 a5 34
	09 00 00	 movss	 xmm4, DWORD PTR q$69[rbp+12]
  01592	f3 0f 11 64 24
	40		 movss	 DWORD PTR [rsp+64], xmm4
  01598	f3 0f 10 a5 30
	09 00 00	 movss	 xmm4, DWORD PTR q$69[rbp+8]
  015a0	f3 0f 11 64 24
	38		 movss	 DWORD PTR [rsp+56], xmm4
  015a6	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  015ac	f3 0f 11 4c 24
	28		 movss	 DWORD PTR [rsp+40], xmm1
  015b2	f3 0f 11 54 24
	20		 movss	 DWORD PTR [rsp+32], xmm2
  015b8	44 0f b7 85 e4
	08 00 00	 movzx	 r8d, WORD PTR codepoint$67[rbp]
  015c0	48 8b 95 88 07
	00 00		 mov	 rdx, QWORD PTR cfg$56[rbp]
  015c7	48 8b 8d a8 07
	00 00		 mov	 rcx, QWORD PTR dst_font$57[rbp]
  015ce	e8 00 00 00 00	 call	 ?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z ; ImFont::AddGlyph

; 2579 :         }

  015d3	e9 69 fe ff ff	 jmp	 $LN47@ImFontAtla
$LN48@ImFontAtla:

; 2580 :     }

  015d8	e9 7c fc ff ff	 jmp	 $LN44@ImFontAtla
$LN45@ImFontAtla:

; 2581 : 
; 2582 :     // Cleanup
; 2583 :     src_tmp_array.clear_destruct();

  015dd	48 8d 4d 08	 lea	 rcx, QWORD PTR src_tmp_array$[rbp]
  015e1	e8 00 00 00 00	 call	 ?clear_destruct@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ ; ImVector<ImFontBuildSrcData>::clear_destruct

; 2584 : 
; 2585 :     ImFontAtlasBuildFinish(atlas);

  015e6	48 8b 8d 30 0f
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  015ed	e8 00 00 00 00	 call	 ?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z ; ImFontAtlasBuildFinish

; 2586 :     return true;

  015f2	c6 85 c4 0e 00
	00 01		 mov	 BYTE PTR $T77[rbp], 1
  015f9	48 8d 8d 98 02
	00 00		 lea	 rcx, QWORD PTR buf_packedchars$[rbp]
  01600	e8 00 00 00 00	 call	 ??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ ; ImVector<stbtt_packedchar>::~ImVector<stbtt_packedchar>
  01605	90		 npad	 1
  01606	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR buf_rects$[rbp]
  0160d	e8 00 00 00 00	 call	 ??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ ; ImVector<stbrp_rect>::~ImVector<stbrp_rect>
  01612	90		 npad	 1
  01613	48 8d 4d 38	 lea	 rcx, QWORD PTR dst_tmp_array$[rbp]
  01617	e8 00 00 00 00	 call	 ??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ ; ImVector<ImFontBuildDstData>::~ImVector<ImFontBuildDstData>
  0161c	90		 npad	 1
  0161d	48 8d 4d 08	 lea	 rcx, QWORD PTR src_tmp_array$[rbp]
  01621	e8 00 00 00 00	 call	 ??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ ; ImVector<ImFontBuildSrcData>::~ImVector<ImFontBuildSrcData>
  01626	0f b6 85 c4 0e
	00 00		 movzx	 eax, BYTE PTR $T77[rbp]
$LN1@ImFontAtla:

; 2587 : }

  0162d	48 8b f8	 mov	 rdi, rax
  01630	48 8d 4d a0	 lea	 rcx, QWORD PTR [rbp-96]
  01634	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcFrameData
  0163b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  01640	48 8b c7	 mov	 rax, rdi
  01643	48 8b 8d 00 0f
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0164a	48 33 cd	 xor	 rcx, rbp
  0164d	e8 00 00 00 00	 call	 __security_check_cookie
  01652	48 8d a5 18 0f
	00 00		 lea	 rsp, QWORD PTR [rbp+3864]
  01659	5f		 pop	 rdi
  0165a	5d		 pop	 rbp
  0165b	c3		 ret	 0
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z ENDP ; ImFontAtlasBuildWithStbTruetype
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
src_tmp_array$ = 8
dst_tmp_array$ = 56
src_i$19 = 100
src_tmp$20 = 136
cfg$21 = 168
output_i$22 = 196
font_offset$23 = 228
dst_tmp$24 = 264
src_range$25 = 296
total_glyphs_count$ = 324
src_i$26 = 356
src_tmp$27 = 392
dst_tmp$28 = 424
src_range$29 = 456
codepoint$30 = 484
src_i$31 = 516
src_tmp$32 = 552
dst_i$33 = 580
buf_rects$ = 616
buf_packedchars$ = 664
total_surface$ = 708
buf_rects_out_n$ = 740
buf_packedchars_out_n$ = 772
src_i$34 = 804
src_tmp$35 = 840
cfg$36 = 872
scale$37 = 900
padding$38 = 932
glyph_i$39 = 964
x0$40 = 996
y0$41 = 1028
x1$42 = 1060
y1$43 = 1092
glyph_index_in_font$44 = 1124
surface_sqrt$ = 1156
TEX_HEIGHT_MAX$ = 1188
spc$ = 1232
src_i$45 = 1316
src_tmp$46 = 1352
glyph_i$47 = 1380
src_i$48 = 1412
cfg$49 = 1448
src_tmp$50 = 1480
multiply_table$51 = 1520
r$52 = 1800
glyph_i$53 = 1828
src_i$54 = 1860
src_tmp$55 = 1896
cfg$56 = 1928
dst_font$57 = 1960
font_scale$58 = 1988
unscaled_ascent$59 = 2020
unscaled_descent$60 = 2052
unscaled_line_gap$61 = 2084
ascent$62 = 2116
descent$63 = 2148
font_off_x$64 = 2180
font_off_y$65 = 2212
glyph_i$66 = 2244
codepoint$67 = 2276
pc$68 = 2312
q$69 = 2344
unused_x$70 = 2404
unused_y$71 = 2436
$T72 = 3620
$T73 = 3652
$T74 = 3684
$T75 = 3716
$T76 = 3748
$T77 = 3780
$T78 = 3816
tv764 = 3828
tv755 = 3828
tv617 = 3828
tv555 = 3828
tv467 = 3828
tv554 = 3832
tv225 = 3832
tv553 = 3836
__$ArrayPad$ = 3840
atlas$ = 3888
?dtor$0@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA PROC ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 60	 lea	 rbp, QWORD PTR [rdx+96]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR src_tmp_array$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ ; ImVector<ImFontBuildSrcData>::~ImVector<ImFontBuildSrcData>
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA ENDP ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$0
src_tmp_array$ = 8
dst_tmp_array$ = 56
src_i$19 = 100
src_tmp$20 = 136
cfg$21 = 168
output_i$22 = 196
font_offset$23 = 228
dst_tmp$24 = 264
src_range$25 = 296
total_glyphs_count$ = 324
src_i$26 = 356
src_tmp$27 = 392
dst_tmp$28 = 424
src_range$29 = 456
codepoint$30 = 484
src_i$31 = 516
src_tmp$32 = 552
dst_i$33 = 580
buf_rects$ = 616
buf_packedchars$ = 664
total_surface$ = 708
buf_rects_out_n$ = 740
buf_packedchars_out_n$ = 772
src_i$34 = 804
src_tmp$35 = 840
cfg$36 = 872
scale$37 = 900
padding$38 = 932
glyph_i$39 = 964
x0$40 = 996
y0$41 = 1028
x1$42 = 1060
y1$43 = 1092
glyph_index_in_font$44 = 1124
surface_sqrt$ = 1156
TEX_HEIGHT_MAX$ = 1188
spc$ = 1232
src_i$45 = 1316
src_tmp$46 = 1352
glyph_i$47 = 1380
src_i$48 = 1412
cfg$49 = 1448
src_tmp$50 = 1480
multiply_table$51 = 1520
r$52 = 1800
glyph_i$53 = 1828
src_i$54 = 1860
src_tmp$55 = 1896
cfg$56 = 1928
dst_font$57 = 1960
font_scale$58 = 1988
unscaled_ascent$59 = 2020
unscaled_descent$60 = 2052
unscaled_line_gap$61 = 2084
ascent$62 = 2116
descent$63 = 2148
font_off_x$64 = 2180
font_off_y$65 = 2212
glyph_i$66 = 2244
codepoint$67 = 2276
pc$68 = 2312
q$69 = 2344
unused_x$70 = 2404
unused_y$71 = 2436
$T72 = 3620
$T73 = 3652
$T74 = 3684
$T75 = 3716
$T76 = 3748
$T77 = 3780
$T78 = 3816
tv764 = 3828
tv755 = 3828
tv617 = 3828
tv555 = 3828
tv467 = 3828
tv554 = 3832
tv225 = 3832
tv553 = 3836
__$ArrayPad$ = 3840
atlas$ = 3888
?dtor$1@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA PROC ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$1
  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 60	 lea	 rbp, QWORD PTR [rdx+96]
  00038	48 8d 4d 38	 lea	 rcx, QWORD PTR dst_tmp_array$[rbp]
  0003c	e8 00 00 00 00	 call	 ??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ ; ImVector<ImFontBuildDstData>::~ImVector<ImFontBuildDstData>
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?dtor$1@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA ENDP ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$1
src_tmp_array$ = 8
dst_tmp_array$ = 56
src_i$19 = 100
src_tmp$20 = 136
cfg$21 = 168
output_i$22 = 196
font_offset$23 = 228
dst_tmp$24 = 264
src_range$25 = 296
total_glyphs_count$ = 324
src_i$26 = 356
src_tmp$27 = 392
dst_tmp$28 = 424
src_range$29 = 456
codepoint$30 = 484
src_i$31 = 516
src_tmp$32 = 552
dst_i$33 = 580
buf_rects$ = 616
buf_packedchars$ = 664
total_surface$ = 708
buf_rects_out_n$ = 740
buf_packedchars_out_n$ = 772
src_i$34 = 804
src_tmp$35 = 840
cfg$36 = 872
scale$37 = 900
padding$38 = 932
glyph_i$39 = 964
x0$40 = 996
y0$41 = 1028
x1$42 = 1060
y1$43 = 1092
glyph_index_in_font$44 = 1124
surface_sqrt$ = 1156
TEX_HEIGHT_MAX$ = 1188
spc$ = 1232
src_i$45 = 1316
src_tmp$46 = 1352
glyph_i$47 = 1380
src_i$48 = 1412
cfg$49 = 1448
src_tmp$50 = 1480
multiply_table$51 = 1520
r$52 = 1800
glyph_i$53 = 1828
src_i$54 = 1860
src_tmp$55 = 1896
cfg$56 = 1928
dst_font$57 = 1960
font_scale$58 = 1988
unscaled_ascent$59 = 2020
unscaled_descent$60 = 2052
unscaled_line_gap$61 = 2084
ascent$62 = 2116
descent$63 = 2148
font_off_x$64 = 2180
font_off_y$65 = 2212
glyph_i$66 = 2244
codepoint$67 = 2276
pc$68 = 2312
q$69 = 2344
unused_x$70 = 2404
unused_y$71 = 2436
$T72 = 3620
$T73 = 3652
$T74 = 3684
$T75 = 3716
$T76 = 3748
$T77 = 3780
$T78 = 3816
tv764 = 3828
tv755 = 3828
tv617 = 3828
tv555 = 3828
tv467 = 3828
tv554 = 3832
tv225 = 3832
tv553 = 3836
__$ArrayPad$ = 3840
atlas$ = 3888
?dtor$2@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA PROC ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$2
  00048	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0004d	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00052	55		 push	 rbp
  00053	57		 push	 rdi
  00054	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00058	48 8d 6a 60	 lea	 rbp, QWORD PTR [rdx+96]
  0005c	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR buf_rects$[rbp]
  00063	e8 00 00 00 00	 call	 ??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ ; ImVector<stbrp_rect>::~ImVector<stbrp_rect>
  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?dtor$2@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA ENDP ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$2
src_tmp_array$ = 8
dst_tmp_array$ = 56
src_i$19 = 100
src_tmp$20 = 136
cfg$21 = 168
output_i$22 = 196
font_offset$23 = 228
dst_tmp$24 = 264
src_range$25 = 296
total_glyphs_count$ = 324
src_i$26 = 356
src_tmp$27 = 392
dst_tmp$28 = 424
src_range$29 = 456
codepoint$30 = 484
src_i$31 = 516
src_tmp$32 = 552
dst_i$33 = 580
buf_rects$ = 616
buf_packedchars$ = 664
total_surface$ = 708
buf_rects_out_n$ = 740
buf_packedchars_out_n$ = 772
src_i$34 = 804
src_tmp$35 = 840
cfg$36 = 872
scale$37 = 900
padding$38 = 932
glyph_i$39 = 964
x0$40 = 996
y0$41 = 1028
x1$42 = 1060
y1$43 = 1092
glyph_index_in_font$44 = 1124
surface_sqrt$ = 1156
TEX_HEIGHT_MAX$ = 1188
spc$ = 1232
src_i$45 = 1316
src_tmp$46 = 1352
glyph_i$47 = 1380
src_i$48 = 1412
cfg$49 = 1448
src_tmp$50 = 1480
multiply_table$51 = 1520
r$52 = 1800
glyph_i$53 = 1828
src_i$54 = 1860
src_tmp$55 = 1896
cfg$56 = 1928
dst_font$57 = 1960
font_scale$58 = 1988
unscaled_ascent$59 = 2020
unscaled_descent$60 = 2052
unscaled_line_gap$61 = 2084
ascent$62 = 2116
descent$63 = 2148
font_off_x$64 = 2180
font_off_y$65 = 2212
glyph_i$66 = 2244
codepoint$67 = 2276
pc$68 = 2312
q$69 = 2344
unused_x$70 = 2404
unused_y$71 = 2436
$T72 = 3620
$T73 = 3652
$T74 = 3684
$T75 = 3716
$T76 = 3748
$T77 = 3780
$T78 = 3816
tv764 = 3828
tv755 = 3828
tv617 = 3828
tv555 = 3828
tv467 = 3828
tv554 = 3832
tv225 = 3832
tv553 = 3836
__$ArrayPad$ = 3840
atlas$ = 3888
?dtor$3@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA PROC ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$3
  0006f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00074	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00079	55		 push	 rbp
  0007a	57		 push	 rdi
  0007b	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0007f	48 8d 6a 60	 lea	 rbp, QWORD PTR [rdx+96]
  00083	48 8d 8d 98 02
	00 00		 lea	 rcx, QWORD PTR buf_packedchars$[rbp]
  0008a	e8 00 00 00 00	 call	 ??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ ; ImVector<stbtt_packedchar>::~ImVector<stbtt_packedchar>
  0008f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00093	5f		 pop	 rdi
  00094	5d		 pop	 rbp
  00095	c3		 ret	 0
?dtor$3@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA ENDP ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
src_tmp_array$ = 8
dst_tmp_array$ = 56
src_i$19 = 100
src_tmp$20 = 136
cfg$21 = 168
output_i$22 = 196
font_offset$23 = 228
dst_tmp$24 = 264
src_range$25 = 296
total_glyphs_count$ = 324
src_i$26 = 356
src_tmp$27 = 392
dst_tmp$28 = 424
src_range$29 = 456
codepoint$30 = 484
src_i$31 = 516
src_tmp$32 = 552
dst_i$33 = 580
buf_rects$ = 616
buf_packedchars$ = 664
total_surface$ = 708
buf_rects_out_n$ = 740
buf_packedchars_out_n$ = 772
src_i$34 = 804
src_tmp$35 = 840
cfg$36 = 872
scale$37 = 900
padding$38 = 932
glyph_i$39 = 964
x0$40 = 996
y0$41 = 1028
x1$42 = 1060
y1$43 = 1092
glyph_index_in_font$44 = 1124
surface_sqrt$ = 1156
TEX_HEIGHT_MAX$ = 1188
spc$ = 1232
src_i$45 = 1316
src_tmp$46 = 1352
glyph_i$47 = 1380
src_i$48 = 1412
cfg$49 = 1448
src_tmp$50 = 1480
multiply_table$51 = 1520
r$52 = 1800
glyph_i$53 = 1828
src_i$54 = 1860
src_tmp$55 = 1896
cfg$56 = 1928
dst_font$57 = 1960
font_scale$58 = 1988
unscaled_ascent$59 = 2020
unscaled_descent$60 = 2052
unscaled_line_gap$61 = 2084
ascent$62 = 2116
descent$63 = 2148
font_off_x$64 = 2180
font_off_y$65 = 2212
glyph_i$66 = 2244
codepoint$67 = 2276
pc$68 = 2312
q$69 = 2344
unused_x$70 = 2404
unused_y$71 = 2436
$T72 = 3620
$T73 = 3652
$T74 = 3684
$T75 = 3716
$T76 = 3748
$T77 = 3780
$T78 = 3816
tv764 = 3828
tv755 = 3828
tv617 = 3828
tv555 = 3828
tv467 = 3828
tv554 = 3832
tv225 = 3832
tv553 = 3836
__$ArrayPad$ = 3840
atlas$ = 3888
?dtor$0@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA PROC ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 60	 lea	 rbp, QWORD PTR [rdx+96]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR src_tmp_array$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ ; ImVector<ImFontBuildSrcData>::~ImVector<ImFontBuildSrcData>
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA ENDP ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
src_tmp_array$ = 8
dst_tmp_array$ = 56
src_i$19 = 100
src_tmp$20 = 136
cfg$21 = 168
output_i$22 = 196
font_offset$23 = 228
dst_tmp$24 = 264
src_range$25 = 296
total_glyphs_count$ = 324
src_i$26 = 356
src_tmp$27 = 392
dst_tmp$28 = 424
src_range$29 = 456
codepoint$30 = 484
src_i$31 = 516
src_tmp$32 = 552
dst_i$33 = 580
buf_rects$ = 616
buf_packedchars$ = 664
total_surface$ = 708
buf_rects_out_n$ = 740
buf_packedchars_out_n$ = 772
src_i$34 = 804
src_tmp$35 = 840
cfg$36 = 872
scale$37 = 900
padding$38 = 932
glyph_i$39 = 964
x0$40 = 996
y0$41 = 1028
x1$42 = 1060
y1$43 = 1092
glyph_index_in_font$44 = 1124
surface_sqrt$ = 1156
TEX_HEIGHT_MAX$ = 1188
spc$ = 1232
src_i$45 = 1316
src_tmp$46 = 1352
glyph_i$47 = 1380
src_i$48 = 1412
cfg$49 = 1448
src_tmp$50 = 1480
multiply_table$51 = 1520
r$52 = 1800
glyph_i$53 = 1828
src_i$54 = 1860
src_tmp$55 = 1896
cfg$56 = 1928
dst_font$57 = 1960
font_scale$58 = 1988
unscaled_ascent$59 = 2020
unscaled_descent$60 = 2052
unscaled_line_gap$61 = 2084
ascent$62 = 2116
descent$63 = 2148
font_off_x$64 = 2180
font_off_y$65 = 2212
glyph_i$66 = 2244
codepoint$67 = 2276
pc$68 = 2312
q$69 = 2344
unused_x$70 = 2404
unused_y$71 = 2436
$T72 = 3620
$T73 = 3652
$T74 = 3684
$T75 = 3716
$T76 = 3748
$T77 = 3780
$T78 = 3816
tv764 = 3828
tv755 = 3828
tv617 = 3828
tv555 = 3828
tv467 = 3828
tv554 = 3832
tv225 = 3832
tv553 = 3836
__$ArrayPad$ = 3840
atlas$ = 3888
?dtor$1@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA PROC ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$1
  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 60	 lea	 rbp, QWORD PTR [rdx+96]
  00038	48 8d 4d 38	 lea	 rcx, QWORD PTR dst_tmp_array$[rbp]
  0003c	e8 00 00 00 00	 call	 ??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ ; ImVector<ImFontBuildDstData>::~ImVector<ImFontBuildDstData>
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?dtor$1@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA ENDP ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
src_tmp_array$ = 8
dst_tmp_array$ = 56
src_i$19 = 100
src_tmp$20 = 136
cfg$21 = 168
output_i$22 = 196
font_offset$23 = 228
dst_tmp$24 = 264
src_range$25 = 296
total_glyphs_count$ = 324
src_i$26 = 356
src_tmp$27 = 392
dst_tmp$28 = 424
src_range$29 = 456
codepoint$30 = 484
src_i$31 = 516
src_tmp$32 = 552
dst_i$33 = 580
buf_rects$ = 616
buf_packedchars$ = 664
total_surface$ = 708
buf_rects_out_n$ = 740
buf_packedchars_out_n$ = 772
src_i$34 = 804
src_tmp$35 = 840
cfg$36 = 872
scale$37 = 900
padding$38 = 932
glyph_i$39 = 964
x0$40 = 996
y0$41 = 1028
x1$42 = 1060
y1$43 = 1092
glyph_index_in_font$44 = 1124
surface_sqrt$ = 1156
TEX_HEIGHT_MAX$ = 1188
spc$ = 1232
src_i$45 = 1316
src_tmp$46 = 1352
glyph_i$47 = 1380
src_i$48 = 1412
cfg$49 = 1448
src_tmp$50 = 1480
multiply_table$51 = 1520
r$52 = 1800
glyph_i$53 = 1828
src_i$54 = 1860
src_tmp$55 = 1896
cfg$56 = 1928
dst_font$57 = 1960
font_scale$58 = 1988
unscaled_ascent$59 = 2020
unscaled_descent$60 = 2052
unscaled_line_gap$61 = 2084
ascent$62 = 2116
descent$63 = 2148
font_off_x$64 = 2180
font_off_y$65 = 2212
glyph_i$66 = 2244
codepoint$67 = 2276
pc$68 = 2312
q$69 = 2344
unused_x$70 = 2404
unused_y$71 = 2436
$T72 = 3620
$T73 = 3652
$T74 = 3684
$T75 = 3716
$T76 = 3748
$T77 = 3780
$T78 = 3816
tv764 = 3828
tv755 = 3828
tv617 = 3828
tv555 = 3828
tv467 = 3828
tv554 = 3832
tv225 = 3832
tv553 = 3836
__$ArrayPad$ = 3840
atlas$ = 3888
?dtor$2@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA PROC ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$2
  00048	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0004d	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00052	55		 push	 rbp
  00053	57		 push	 rdi
  00054	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00058	48 8d 6a 60	 lea	 rbp, QWORD PTR [rdx+96]
  0005c	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR buf_rects$[rbp]
  00063	e8 00 00 00 00	 call	 ??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ ; ImVector<stbrp_rect>::~ImVector<stbrp_rect>
  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?dtor$2@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA ENDP ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
src_tmp_array$ = 8
dst_tmp_array$ = 56
src_i$19 = 100
src_tmp$20 = 136
cfg$21 = 168
output_i$22 = 196
font_offset$23 = 228
dst_tmp$24 = 264
src_range$25 = 296
total_glyphs_count$ = 324
src_i$26 = 356
src_tmp$27 = 392
dst_tmp$28 = 424
src_range$29 = 456
codepoint$30 = 484
src_i$31 = 516
src_tmp$32 = 552
dst_i$33 = 580
buf_rects$ = 616
buf_packedchars$ = 664
total_surface$ = 708
buf_rects_out_n$ = 740
buf_packedchars_out_n$ = 772
src_i$34 = 804
src_tmp$35 = 840
cfg$36 = 872
scale$37 = 900
padding$38 = 932
glyph_i$39 = 964
x0$40 = 996
y0$41 = 1028
x1$42 = 1060
y1$43 = 1092
glyph_index_in_font$44 = 1124
surface_sqrt$ = 1156
TEX_HEIGHT_MAX$ = 1188
spc$ = 1232
src_i$45 = 1316
src_tmp$46 = 1352
glyph_i$47 = 1380
src_i$48 = 1412
cfg$49 = 1448
src_tmp$50 = 1480
multiply_table$51 = 1520
r$52 = 1800
glyph_i$53 = 1828
src_i$54 = 1860
src_tmp$55 = 1896
cfg$56 = 1928
dst_font$57 = 1960
font_scale$58 = 1988
unscaled_ascent$59 = 2020
unscaled_descent$60 = 2052
unscaled_line_gap$61 = 2084
ascent$62 = 2116
descent$63 = 2148
font_off_x$64 = 2180
font_off_y$65 = 2212
glyph_i$66 = 2244
codepoint$67 = 2276
pc$68 = 2312
q$69 = 2344
unused_x$70 = 2404
unused_y$71 = 2436
$T72 = 3620
$T73 = 3652
$T74 = 3684
$T75 = 3716
$T76 = 3748
$T77 = 3780
$T78 = 3816
tv764 = 3828
tv755 = 3828
tv617 = 3828
tv555 = 3828
tv467 = 3828
tv554 = 3832
tv225 = 3832
tv553 = 3836
__$ArrayPad$ = 3840
atlas$ = 3888
?dtor$3@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA PROC ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$3
  0006f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00074	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00079	55		 push	 rbp
  0007a	57		 push	 rdi
  0007b	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0007f	48 8d 6a 60	 lea	 rbp, QWORD PTR [rdx+96]
  00083	48 8d 8d 98 02
	00 00		 lea	 rcx, QWORD PTR buf_packedchars$[rbp]
  0008a	e8 00 00 00 00	 call	 ??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ ; ImVector<stbtt_packedchar>::~ImVector<stbtt_packedchar>
  0008f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00093	5f		 pop	 rdi
  00094	5d		 pop	 rbp
  00095	c3		 ret	 0
?dtor$3@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA ENDP ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?UnpackBitVectorToFlatIndexList@@YAXPEBUImBitVector@@PEAU?$ImVector@H@@@Z
_TEXT	SEGMENT
it_begin$ = 8
it_end$ = 40
it$1 = 72
entries_32$2 = 100
bit_n$3 = 132
$T4 = 356
tv128 = 372
in$ = 416
out$ = 424
?UnpackBitVectorToFlatIndexList@@YAXPEBUImBitVector@@PEAU?$ImVector@H@@@Z PROC ; UnpackBitVectorToFlatIndexList, COMDAT

; 2326 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+456]

; 2327 :     IM_ASSERT(sizeof(in->Storage.Data[0]) == sizeof(int));
; 2328 :     const ImU32* it_begin = in->Storage.begin();

  0002f	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR in$[rbp]
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ?begin@?$ImVector@I@@QEBAPEBIXZ ; ImVector<unsigned int>::begin
  0003e	48 89 45 08	 mov	 QWORD PTR it_begin$[rbp], rax

; 2329 :     const ImU32* it_end = in->Storage.end();

  00042	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR in$[rbp]
  00049	48 8b c8	 mov	 rcx, rax
  0004c	e8 00 00 00 00	 call	 ?end@?$ImVector@I@@QEBAPEBIXZ ; ImVector<unsigned int>::end
  00051	48 89 45 28	 mov	 QWORD PTR it_end$[rbp], rax

; 2330 :     for (const ImU32* it = it_begin; it < it_end; it++)

  00055	48 8b 45 08	 mov	 rax, QWORD PTR it_begin$[rbp]
  00059	48 89 45 48	 mov	 QWORD PTR it$1[rbp], rax
  0005d	eb 0c		 jmp	 SHORT $LN4@UnpackBitV
$LN2@UnpackBitV:
  0005f	48 8b 45 48	 mov	 rax, QWORD PTR it$1[rbp]
  00063	48 83 c0 04	 add	 rax, 4
  00067	48 89 45 48	 mov	 QWORD PTR it$1[rbp], rax
$LN4@UnpackBitV:
  0006b	48 8b 45 28	 mov	 rax, QWORD PTR it_end$[rbp]
  0006f	48 39 45 48	 cmp	 QWORD PTR it$1[rbp], rax
  00073	0f 83 9c 00 00
	00		 jae	 $LN3@UnpackBitV

; 2331 :         if (ImU32 entries_32 = *it)

  00079	48 8b 45 48	 mov	 rax, QWORD PTR it$1[rbp]
  0007d	8b 00		 mov	 eax, DWORD PTR [rax]
  0007f	89 45 64	 mov	 DWORD PTR entries_32$2[rbp], eax
  00082	83 7d 64 00	 cmp	 DWORD PTR entries_32$2[rbp], 0
  00086	0f 84 84 00 00
	00		 je	 $LN8@UnpackBitV

; 2332 :             for (ImU32 bit_n = 0; bit_n < 32; bit_n++)

  0008c	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR bit_n$3[rbp], 0
  00096	eb 0e		 jmp	 SHORT $LN7@UnpackBitV
$LN5@UnpackBitV:
  00098	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR bit_n$3[rbp]
  0009e	ff c0		 inc	 eax
  000a0	89 85 84 00 00
	00		 mov	 DWORD PTR bit_n$3[rbp], eax
$LN7@UnpackBitV:
  000a6	83 bd 84 00 00
	00 20		 cmp	 DWORD PTR bit_n$3[rbp], 32 ; 00000020H
  000ad	73 61		 jae	 SHORT $LN6@UnpackBitV

; 2333 :                 if (entries_32 & ((ImU32)1 << bit_n))

  000af	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR bit_n$3[rbp]
  000b5	b9 01 00 00 00	 mov	 ecx, 1
  000ba	89 8d 74 01 00
	00		 mov	 DWORD PTR tv128[rbp], ecx
  000c0	0f b6 c8	 movzx	 ecx, al
  000c3	8b 85 74 01 00
	00		 mov	 eax, DWORD PTR tv128[rbp]
  000c9	d3 e0		 shl	 eax, cl
  000cb	8b 4d 64	 mov	 ecx, DWORD PTR entries_32$2[rbp]
  000ce	23 c8		 and	 ecx, eax
  000d0	8b c1		 mov	 eax, ecx
  000d2	85 c0		 test	 eax, eax
  000d4	74 38		 je	 SHORT $LN9@UnpackBitV

; 2334 :                     out->push_back((int)(((it - it_begin) << 5) + bit_n));

  000d6	48 8b 45 08	 mov	 rax, QWORD PTR it_begin$[rbp]
  000da	48 8b 4d 48	 mov	 rcx, QWORD PTR it$1[rbp]
  000de	48 2b c8	 sub	 rcx, rax
  000e1	48 8b c1	 mov	 rax, rcx
  000e4	48 c1 f8 02	 sar	 rax, 2
  000e8	48 c1 e0 05	 shl	 rax, 5
  000ec	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR bit_n$3[rbp]
  000f2	48 03 c1	 add	 rax, rcx
  000f5	89 85 64 01 00
	00		 mov	 DWORD PTR $T4[rbp], eax
  000fb	48 8d 95 64 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00102	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR out$[rbp]
  00109	e8 00 00 00 00	 call	 ?push_back@?$ImVector@H@@QEAAXAEBH@Z ; ImVector<int>::push_back
$LN9@UnpackBitV:

; 2335 : }

  0010e	eb 88		 jmp	 SHORT $LN5@UnpackBitV
$LN6@UnpackBitV:
$LN8@UnpackBitV:
  00110	e9 4a ff ff ff	 jmp	 $LN2@UnpackBitV
$LN3@UnpackBitV:
  00115	48 8d a5 88 01
	00 00		 lea	 rsp, QWORD PTR [rbp+392]
  0011c	5f		 pop	 rdi
  0011d	5d		 pop	 rbp
  0011e	c3		 ret	 0
?UnpackBitVectorToFlatIndexList@@YAXPEBUImBitVector@@PEAU?$ImVector@H@@@Z ENDP ; UnpackBitVectorToFlatIndexList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GImFontBuildSrcData@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GImFontBuildSrcData@@QEAAPEAXI@Z PROC		; ImFontBuildSrcData::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1ImFontBuildSrcData@@QEAA@XZ
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 10 01 00 00	 mov	 edx, 272		; 00000110H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_GImFontBuildSrcData@@QEAAPEAXI@Z ENDP		; ImFontBuildSrcData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ImFontBuildSrcData@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1ImFontBuildSrcData@@QEAA@XZ PROC			; ImFontBuildSrcData::~ImFontBuildSrcData, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00037	48 8b c8	 mov	 rcx, rax
  0003a	e8 00 00 00 00	 call	 ??1?$ImVector@H@@QEAA@XZ ; ImVector<int>::~ImVector<int>
  0003f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00046	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0004c	48 8b c8	 mov	 rcx, rax
  0004f	e8 00 00 00 00	 call	 ??1ImBitVector@@QEAA@XZ
  00054	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1ImFontBuildSrcData@@QEAA@XZ ENDP			; ImFontBuildSrcData::~ImFontBuildSrcData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?Decode85@@YAXPEBEPEAE@Z
_TEXT	SEGMENT
tmp$1 = 4
tv66 = 212
tv70 = 216
tv74 = 220
tv78 = 224
src$ = 272
dst$ = 280
?Decode85@@YAXPEBEPEAE@Z PROC				; Decode85, COMDAT

; 2104 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]
$LN2@Decode85:

; 2105 :     while (*src)

  0002f	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR src$[rbp]
  00036	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00039	85 c0		 test	 eax, eax
  0003b	0f 84 6a 01 00
	00		 je	 $LN3@Decode85

; 2106 :     {
; 2107 :         unsigned int tmp = Decode85Byte(src[0]) + 85 * (Decode85Byte(src[1]) + 85 * (Decode85Byte(src[2]) + 85 * (Decode85Byte(src[3]) + 85 * Decode85Byte(src[4]))));

  00041	b8 01 00 00 00	 mov	 eax, 1
  00046	48 6b c0 00	 imul	 rax, rax, 0
  0004a	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR src$[rbp]
  00051	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  00055	e8 00 00 00 00	 call	 ?Decode85Byte@@YAID@Z	; Decode85Byte
  0005a	89 85 d4 00 00
	00		 mov	 DWORD PTR tv66[rbp], eax
  00060	b9 01 00 00 00	 mov	 ecx, 1
  00065	48 6b c9 01	 imul	 rcx, rcx, 1
  00069	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR src$[rbp]
  00070	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00074	e8 00 00 00 00	 call	 ?Decode85Byte@@YAID@Z	; Decode85Byte
  00079	89 85 d8 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  0007f	b9 01 00 00 00	 mov	 ecx, 1
  00084	48 6b c9 02	 imul	 rcx, rcx, 2
  00088	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR src$[rbp]
  0008f	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00093	e8 00 00 00 00	 call	 ?Decode85Byte@@YAID@Z	; Decode85Byte
  00098	89 85 dc 00 00
	00		 mov	 DWORD PTR tv74[rbp], eax
  0009e	b9 01 00 00 00	 mov	 ecx, 1
  000a3	48 6b c9 03	 imul	 rcx, rcx, 3
  000a7	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR src$[rbp]
  000ae	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000b2	e8 00 00 00 00	 call	 ?Decode85Byte@@YAID@Z	; Decode85Byte
  000b7	89 85 e0 00 00
	00		 mov	 DWORD PTR tv78[rbp], eax
  000bd	b9 01 00 00 00	 mov	 ecx, 1
  000c2	48 6b c9 04	 imul	 rcx, rcx, 4
  000c6	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR src$[rbp]
  000cd	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000d1	e8 00 00 00 00	 call	 ?Decode85Byte@@YAID@Z	; Decode85Byte
  000d6	6b c0 55	 imul	 eax, eax, 85		; 00000055H
  000d9	8b 8d e0 00 00
	00		 mov	 ecx, DWORD PTR tv78[rbp]
  000df	03 c8		 add	 ecx, eax
  000e1	8b c1		 mov	 eax, ecx
  000e3	6b c0 55	 imul	 eax, eax, 85		; 00000055H
  000e6	8b 8d dc 00 00
	00		 mov	 ecx, DWORD PTR tv74[rbp]
  000ec	03 c8		 add	 ecx, eax
  000ee	8b c1		 mov	 eax, ecx
  000f0	6b c0 55	 imul	 eax, eax, 85		; 00000055H
  000f3	8b 8d d8 00 00
	00		 mov	 ecx, DWORD PTR tv70[rbp]
  000f9	03 c8		 add	 ecx, eax
  000fb	8b c1		 mov	 eax, ecx
  000fd	6b c0 55	 imul	 eax, eax, 85		; 00000055H
  00100	8b 8d d4 00 00
	00		 mov	 ecx, DWORD PTR tv66[rbp]
  00106	03 c8		 add	 ecx, eax
  00108	8b c1		 mov	 eax, ecx
  0010a	89 45 04	 mov	 DWORD PTR tmp$1[rbp], eax

; 2108 :         dst[0] = ((tmp >> 0) & 0xFF); dst[1] = ((tmp >> 8) & 0xFF); dst[2] = ((tmp >> 16) & 0xFF); dst[3] = ((tmp >> 24) & 0xFF);   // We can't assume little-endianness.

  0010d	8b 45 04	 mov	 eax, DWORD PTR tmp$1[rbp]
  00110	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00115	b9 01 00 00 00	 mov	 ecx, 1
  0011a	48 6b c9 00	 imul	 rcx, rcx, 0
  0011e	48 8b 95 18 01
	00 00		 mov	 rdx, QWORD PTR dst$[rbp]
  00125	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00128	8b 45 04	 mov	 eax, DWORD PTR tmp$1[rbp]
  0012b	c1 e8 08	 shr	 eax, 8
  0012e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00133	b9 01 00 00 00	 mov	 ecx, 1
  00138	48 6b c9 01	 imul	 rcx, rcx, 1
  0013c	48 8b 95 18 01
	00 00		 mov	 rdx, QWORD PTR dst$[rbp]
  00143	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00146	8b 45 04	 mov	 eax, DWORD PTR tmp$1[rbp]
  00149	c1 e8 10	 shr	 eax, 16
  0014c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00151	b9 01 00 00 00	 mov	 ecx, 1
  00156	48 6b c9 02	 imul	 rcx, rcx, 2
  0015a	48 8b 95 18 01
	00 00		 mov	 rdx, QWORD PTR dst$[rbp]
  00161	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00164	8b 45 04	 mov	 eax, DWORD PTR tmp$1[rbp]
  00167	c1 e8 18	 shr	 eax, 24
  0016a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0016f	b9 01 00 00 00	 mov	 ecx, 1
  00174	48 6b c9 03	 imul	 rcx, rcx, 3
  00178	48 8b 95 18 01
	00 00		 mov	 rdx, QWORD PTR dst$[rbp]
  0017f	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 2109 :         src += 5;

  00182	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR src$[rbp]
  00189	48 83 c0 05	 add	 rax, 5
  0018d	48 89 85 10 01
	00 00		 mov	 QWORD PTR src$[rbp], rax

; 2110 :         dst += 4;

  00194	48 8b 85 18 01
	00 00		 mov	 rax, QWORD PTR dst$[rbp]
  0019b	48 83 c0 04	 add	 rax, 4
  0019f	48 89 85 18 01
	00 00		 mov	 QWORD PTR dst$[rbp], rax

; 2111 :     }

  001a6	e9 84 fe ff ff	 jmp	 $LN2@Decode85
$LN3@Decode85:

; 2112 : }

  001ab	48 8d a5 f8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+248]
  001b2	5f		 pop	 rdi
  001b3	5d		 pop	 rbp
  001b4	c3		 ret	 0
?Decode85@@YAXPEBEPEAE@Z ENDP				; Decode85
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?Decode85Byte@@YAID@Z
_TEXT	SEGMENT
tv70 = 192
c$ = 240
?Decode85Byte@@YAID@Z PROC				; Decode85Byte, COMDAT

; 2102 : static unsigned int Decode85Byte(char c)                                    { return c >= '\\' ? c-36 : c-35; }

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000d	48 8b ec	 mov	 rbp, rsp
  00010	48 8b fc	 mov	 rdi, rsp
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	0f b6 8c 24 f8
	00 00 00	 movzx	 ecx, BYTE PTR [rsp+248]
  00027	0f be 85 f0 00
	00 00		 movsx	 eax, BYTE PTR c$[rbp]
  0002e	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  00031	7c 12		 jl	 SHORT $LN3@Decode85By
  00033	0f be 85 f0 00
	00 00		 movsx	 eax, BYTE PTR c$[rbp]
  0003a	83 e8 24	 sub	 eax, 36			; 00000024H
  0003d	89 85 c0 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00043	eb 10		 jmp	 SHORT $LN4@Decode85By
$LN3@Decode85By:
  00045	0f be 85 f0 00
	00 00		 movsx	 eax, BYTE PTR c$[rbp]
  0004c	83 e8 23	 sub	 eax, 35			; 00000023H
  0004f	89 85 c0 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
$LN4@Decode85By:
  00055	8b 85 c0 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0005b	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00062	5f		 pop	 rdi
  00063	5d		 pop	 rbp
  00064	c3		 ret	 0
?Decode85Byte@@YAID@Z ENDP				; Decode85Byte
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?GetDefaultCompressedFontDataTTFBase85@@YAPEBDXZ
_TEXT	SEGMENT
?GetDefaultCompressedFontDataTTFBase85@@YAPEBDXZ PROC	; GetDefaultCompressedFontDataTTFBase85, COMDAT

; 4166 : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000a	48 8b ec	 mov	 rbp, rsp
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd

; 4167 :     return proggy_clean_ttf_compressed_data_base85;

  0001c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?proggy_clean_ttf_compressed_data_base85@@3QBDB

; 4168 : }

  00023	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002a	5f		 pop	 rdi
  0002b	5d		 pop	 rbp
  0002c	c3		 ret	 0
?GetDefaultCompressedFontDataTTFBase85@@YAPEBDXZ ENDP	; GetDefaultCompressedFontDataTTFBase85
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?stb_decompress@@YAIPEAEPEBEI@Z
_TEXT	SEGMENT
olen$ = 4
old_i$1 = 40
output$ = 288
i$ = 296
__formal$ = 304
?stb_decompress@@YAIPEAEPEBEI@Z PROC			; stb_decompress, COMDAT

; 4034 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 4035 :     if (stb__in4(0) != 0x57bC0000) return 0;

  00034	b8 01 00 00 00	 mov	 eax, 1
  00039	48 6b c0 00	 imul	 rax, rax, 0
  0003d	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 e0 18	 shl	 eax, 24
  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	48 6b c9 01	 imul	 rcx, rcx, 1
  00054	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR i$[rbp]
  0005b	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0005f	c1 e1 10	 shl	 ecx, 16
  00062	ba 01 00 00 00	 mov	 edx, 1
  00067	48 6b d2 02	 imul	 rdx, rdx, 2
  0006b	4c 8b 85 28 01
	00 00		 mov	 r8, QWORD PTR i$[rbp]
  00072	41 0f b6 14 10	 movzx	 edx, BYTE PTR [r8+rdx]
  00077	c1 e2 08	 shl	 edx, 8
  0007a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00080	4d 6b c0 03	 imul	 r8, r8, 3
  00084	4c 8b 8d 28 01
	00 00		 mov	 r9, QWORD PTR i$[rbp]
  0008b	47 0f b6 04 01	 movzx	 r8d, BYTE PTR [r9+r8]
  00090	41 03 d0	 add	 edx, r8d
  00093	03 ca		 add	 ecx, edx
  00095	03 c1		 add	 eax, ecx
  00097	3d 00 00 bc 57	 cmp	 eax, 1471938560		; 57bc0000H
  0009c	74 07		 je	 SHORT $LN5@stb_decomp
  0009e	33 c0		 xor	 eax, eax
  000a0	e9 a6 02 00 00	 jmp	 $LN1@stb_decomp
$LN5@stb_decomp:

; 4036 :     if (stb__in4(4) != 0)          return 0; // error! stream is > 4GB

  000a5	b8 01 00 00 00	 mov	 eax, 1
  000aa	48 6b c0 04	 imul	 rax, rax, 4
  000ae	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  000b5	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000b9	c1 e0 18	 shl	 eax, 24
  000bc	b9 01 00 00 00	 mov	 ecx, 1
  000c1	48 6b c9 05	 imul	 rcx, rcx, 5
  000c5	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR i$[rbp]
  000cc	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000d0	c1 e1 10	 shl	 ecx, 16
  000d3	ba 01 00 00 00	 mov	 edx, 1
  000d8	48 6b d2 06	 imul	 rdx, rdx, 6
  000dc	4c 8b 85 28 01
	00 00		 mov	 r8, QWORD PTR i$[rbp]
  000e3	41 0f b6 14 10	 movzx	 edx, BYTE PTR [r8+rdx]
  000e8	c1 e2 08	 shl	 edx, 8
  000eb	41 b8 01 00 00
	00		 mov	 r8d, 1
  000f1	4d 6b c0 07	 imul	 r8, r8, 7
  000f5	4c 8b 8d 28 01
	00 00		 mov	 r9, QWORD PTR i$[rbp]
  000fc	47 0f b6 04 01	 movzx	 r8d, BYTE PTR [r9+r8]
  00101	41 03 d0	 add	 edx, r8d
  00104	03 ca		 add	 ecx, edx
  00106	03 c1		 add	 eax, ecx
  00108	85 c0		 test	 eax, eax
  0010a	74 07		 je	 SHORT $LN6@stb_decomp
  0010c	33 c0		 xor	 eax, eax
  0010e	e9 38 02 00 00	 jmp	 $LN1@stb_decomp
$LN6@stb_decomp:

; 4037 :     const unsigned int olen = stb_decompress_length(i);

  00113	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  0011a	e8 00 00 00 00	 call	 ?stb_decompress_length@@YAIPEBE@Z ; stb_decompress_length
  0011f	89 45 04	 mov	 DWORD PTR olen$[rbp], eax

; 4038 :     stb__barrier_in_b = i;

  00122	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR i$[rbp]
  00129	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?stb__barrier_in_b@@3PEBEEB, rax

; 4039 :     stb__barrier_out_e = output + olen;

  00130	8b 45 04	 mov	 eax, DWORD PTR olen$[rbp]
  00133	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR output$[rbp]
  0013a	48 03 c8	 add	 rcx, rax
  0013d	48 8b c1	 mov	 rax, rcx
  00140	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?stb__barrier_out_e@@3PEAEEA, rax

; 4040 :     stb__barrier_out_b = output;

  00147	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR output$[rbp]
  0014e	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?stb__barrier_out_b@@3PEAEEA, rax

; 4041 :     i += 16;

  00155	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR i$[rbp]
  0015c	48 83 c0 10	 add	 rax, 16
  00160	48 89 85 28 01
	00 00		 mov	 QWORD PTR i$[rbp], rax

; 4042 : 
; 4043 :     stb__dout = output;

  00167	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR output$[rbp]
  0016e	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?stb__dout@@3PEAEEA, rax
$LN2@stb_decomp:

; 4044 :     for (;;) {
; 4045 :         const unsigned char *old_i = i;

  00175	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR i$[rbp]
  0017c	48 89 45 28	 mov	 QWORD PTR old_i$1[rbp], rax

; 4046 :         i = stb_decompress_token(i);

  00180	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  00187	e8 00 00 00 00	 call	 ?stb_decompress_token@@YAPEBEPEBE@Z ; stb_decompress_token
  0018c	48 89 85 28 01
	00 00		 mov	 QWORD PTR i$[rbp], rax

; 4047 :         if (i == old_i) {

  00193	48 8b 45 28	 mov	 rax, QWORD PTR old_i$1[rbp]
  00197	48 39 85 28 01
	00 00		 cmp	 QWORD PTR i$[rbp], rax
  0019e	0f 85 4a 01 00
	00		 jne	 $LN7@stb_decomp

; 4048 :             if (*i == 0x05 && i[1] == 0xfa) {

  001a4	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR i$[rbp]
  001ab	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  001ae	83 f8 05	 cmp	 eax, 5
  001b1	0f 85 0b 01 00
	00		 jne	 $LN8@stb_decomp
  001b7	b8 01 00 00 00	 mov	 eax, 1
  001bc	48 6b c0 01	 imul	 rax, rax, 1
  001c0	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR i$[rbp]
  001c7	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  001cb	3d fa 00 00 00	 cmp	 eax, 250		; 000000faH
  001d0	0f 85 ec 00 00
	00		 jne	 $LN8@stb_decomp

; 4049 :                 IM_ASSERT(stb__dout == output + olen);

  001d6	8b 45 04	 mov	 eax, DWORD PTR olen$[rbp]
  001d9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR output$[rbp]
  001e0	48 03 c8	 add	 rcx, rax
  001e3	48 8b c1	 mov	 rax, rcx
  001e6	48 39 05 00 00
	00 00		 cmp	 QWORD PTR ?stb__dout@@3PEAEEA, rax
  001ed	74 22		 je	 SHORT $LN14@stb_decomp
  001ef	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stb_decompress@@YAIPEAEPEBEI@Z@4JA
  001f5	83 c0 0f	 add	 eax, 15
  001f8	44 8b c0	 mov	 r8d, eax
  001fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00202	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@GCANDLHA@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAo?$AAl?$AAe?$AAn?$AA?$AA@
  00209	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0020f	33 c0		 xor	 eax, eax
$LN14@stb_decomp:

; 4050 :                 if (stb__dout != output + olen) return 0;

  00211	8b 45 04	 mov	 eax, DWORD PTR olen$[rbp]
  00214	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR output$[rbp]
  0021b	48 03 c8	 add	 rcx, rax
  0021e	48 8b c1	 mov	 rax, rcx
  00221	48 39 05 00 00
	00 00		 cmp	 QWORD PTR ?stb__dout@@3PEAEEA, rax
  00228	74 07		 je	 SHORT $LN10@stb_decomp
  0022a	33 c0		 xor	 eax, eax
  0022c	e9 1a 01 00 00	 jmp	 $LN1@stb_decomp
$LN10@stb_decomp:

; 4051 :                 if (stb_adler32(1, output, olen) != (unsigned int) stb__in4(2))

  00231	44 8b 45 04	 mov	 r8d, DWORD PTR olen$[rbp]
  00235	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR output$[rbp]
  0023c	b9 01 00 00 00	 mov	 ecx, 1
  00241	e8 00 00 00 00	 call	 ?stb_adler32@@YAIIPEAEI@Z ; stb_adler32
  00246	b9 01 00 00 00	 mov	 ecx, 1
  0024b	48 6b c9 02	 imul	 rcx, rcx, 2
  0024f	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR i$[rbp]
  00256	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0025a	c1 e1 18	 shl	 ecx, 24
  0025d	ba 01 00 00 00	 mov	 edx, 1
  00262	48 6b d2 03	 imul	 rdx, rdx, 3
  00266	4c 8b 85 28 01
	00 00		 mov	 r8, QWORD PTR i$[rbp]
  0026d	41 0f b6 14 10	 movzx	 edx, BYTE PTR [r8+rdx]
  00272	c1 e2 10	 shl	 edx, 16
  00275	41 b8 01 00 00
	00		 mov	 r8d, 1
  0027b	4d 6b c0 04	 imul	 r8, r8, 4
  0027f	4c 8b 8d 28 01
	00 00		 mov	 r9, QWORD PTR i$[rbp]
  00286	47 0f b6 04 01	 movzx	 r8d, BYTE PTR [r9+r8]
  0028b	41 c1 e0 08	 shl	 r8d, 8
  0028f	41 b9 01 00 00
	00		 mov	 r9d, 1
  00295	4d 6b c9 05	 imul	 r9, r9, 5
  00299	4c 8b 95 28 01
	00 00		 mov	 r10, QWORD PTR i$[rbp]
  002a0	47 0f b6 0c 0a	 movzx	 r9d, BYTE PTR [r10+r9]
  002a5	45 03 c1	 add	 r8d, r9d
  002a8	41 03 d0	 add	 edx, r8d
  002ab	03 ca		 add	 ecx, edx
  002ad	3b c1		 cmp	 eax, ecx
  002af	74 07		 je	 SHORT $LN11@stb_decomp

; 4052 :                     return 0;

  002b1	33 c0		 xor	 eax, eax
  002b3	e9 93 00 00 00	 jmp	 $LN1@stb_decomp
$LN11@stb_decomp:

; 4053 :                 return olen;

  002b8	8b 45 04	 mov	 eax, DWORD PTR olen$[rbp]
  002bb	e9 8b 00 00 00	 jmp	 $LN1@stb_decomp

; 4054 :             } else {

  002c0	eb 2c		 jmp	 SHORT $LN9@stb_decomp
$LN8@stb_decomp:

; 4055 :                 IM_ASSERT(0); /* NOTREACHED */

  002c2	33 c0		 xor	 eax, eax
  002c4	85 c0		 test	 eax, eax
  002c6	75 22		 jne	 SHORT $LN15@stb_decomp
  002c8	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stb_decompress@@YAIPEAEPEBEI@Z@4JA
  002ce	83 c0 15	 add	 eax, 21
  002d1	44 8b c0	 mov	 r8d, eax
  002d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  002db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  002e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002e8	33 c0		 xor	 eax, eax
$LN15@stb_decomp:

; 4056 :                 return 0;

  002ea	33 c0		 xor	 eax, eax
  002ec	eb 5d		 jmp	 SHORT $LN1@stb_decomp
$LN9@stb_decomp:
$LN7@stb_decomp:

; 4057 :             }
; 4058 :         }
; 4059 :         IM_ASSERT(stb__dout <= output + olen);

  002ee	8b 45 04	 mov	 eax, DWORD PTR olen$[rbp]
  002f1	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR output$[rbp]
  002f8	48 03 c8	 add	 rcx, rax
  002fb	48 8b c1	 mov	 rax, rcx
  002fe	48 39 05 00 00
	00 00		 cmp	 QWORD PTR ?stb__dout@@3PEAEEA, rax
  00305	76 22		 jbe	 SHORT $LN16@stb_decomp
  00307	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stb_decompress@@YAIPEAEPEBEI@Z@4JA
  0030d	83 c0 19	 add	 eax, 25
  00310	44 8b c0	 mov	 r8d, eax
  00313	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0031a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@EGIPGKEG@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAo?$AAl?$AAe?$AAn?$AA?$AA@
  00321	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00327	33 c0		 xor	 eax, eax
$LN16@stb_decomp:

; 4060 :         if (stb__dout > output + olen)

  00329	8b 45 04	 mov	 eax, DWORD PTR olen$[rbp]
  0032c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR output$[rbp]
  00333	48 03 c8	 add	 rcx, rax
  00336	48 8b c1	 mov	 rax, rcx
  00339	48 39 05 00 00
	00 00		 cmp	 QWORD PTR ?stb__dout@@3PEAEEA, rax
  00340	76 04		 jbe	 SHORT $LN12@stb_decomp

; 4061 :             return 0;

  00342	33 c0		 xor	 eax, eax
  00344	eb 05		 jmp	 SHORT $LN1@stb_decomp
$LN12@stb_decomp:

; 4062 :     }

  00346	e9 2a fe ff ff	 jmp	 $LN2@stb_decomp
$LN1@stb_decomp:

; 4063 : }

  0034b	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00352	5f		 pop	 rdi
  00353	5d		 pop	 rbp
  00354	c3		 ret	 0
?stb_decompress@@YAIPEAEPEBEI@Z ENDP			; stb_decompress
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?stb_decompress_length@@YAIPEBE@Z
_TEXT	SEGMENT
input$ = 224
?stb_decompress_length@@YAIPEBE@Z PROC			; stb_decompress_length, COMDAT

; 3956 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 3957 :     return (input[8] << 24) + (input[9] << 16) + (input[10] << 8) + input[11];

  00028	b8 01 00 00 00	 mov	 eax, 1
  0002d	48 6b c0 08	 imul	 rax, rax, 8
  00031	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR input$[rbp]
  00038	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0003c	c1 e0 18	 shl	 eax, 24
  0003f	b9 01 00 00 00	 mov	 ecx, 1
  00044	48 6b c9 09	 imul	 rcx, rcx, 9
  00048	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR input$[rbp]
  0004f	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00053	c1 e1 10	 shl	 ecx, 16
  00056	03 c1		 add	 eax, ecx
  00058	b9 01 00 00 00	 mov	 ecx, 1
  0005d	48 6b c9 0a	 imul	 rcx, rcx, 10
  00061	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR input$[rbp]
  00068	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0006c	c1 e1 08	 shl	 ecx, 8
  0006f	03 c1		 add	 eax, ecx
  00071	b9 01 00 00 00	 mov	 ecx, 1
  00076	48 6b c9 0b	 imul	 rcx, rcx, 11
  0007a	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR input$[rbp]
  00081	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00085	03 c1		 add	 eax, ecx

; 3958 : }

  00087	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0008e	5f		 pop	 rdi
  0008f	5d		 pop	 rbp
  00090	c3		 ret	 0
?stb_decompress_length@@YAIPEBE@Z ENDP			; stb_decompress_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ??__EFONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@YAXXZ
text$di	SEGMENT
??__EFONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@YAXXZ PROC	; `dynamic initializer for 'FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA'', COMDAT

; 1965 : };

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1956 :     { ImVec2( 0,3), ImVec2(12,19), ImVec2( 0, 0) }, // ImGuiMouseCursor_Arrow

  0001e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@40400000
  00026	0f 57 c9	 xorps	 xmm1, xmm1
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A
  00030	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00035	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@41980000
  0003d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41400000
  00045	48 8d 0d 08 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+8
  0004c	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00051	0f 57 d2	 xorps	 xmm2, xmm2
  00054	0f 57 c9	 xorps	 xmm1, xmm1
  00057	48 8d 0d 10 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+16
  0005e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 1957 :     { ImVec2(13,0), ImVec2( 7,16), ImVec2( 1, 8) }, // ImGuiMouseCursor_TextInput

  00063	0f 57 d2	 xorps	 xmm2, xmm2
  00066	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41500000
  0006e	48 8d 0d 18 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+24
  00075	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0007a	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@41800000
  00082	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40e00000
  0008a	48 8d 0d 20 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+32
  00091	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00096	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@41000000
  0009e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  000a6	48 8d 0d 28 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+40
  000ad	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 1958 :     { ImVec2(31,0), ImVec2(23,23), ImVec2(11,11) }, // ImGuiMouseCursor_ResizeAll

  000b2	0f 57 d2	 xorps	 xmm2, xmm2
  000b5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41f80000
  000bd	48 8d 0d 30 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+48
  000c4	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000c9	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@41b80000
  000d1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41b80000
  000d9	48 8d 0d 38 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+56
  000e0	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000e5	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@41300000
  000ed	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41300000
  000f5	48 8d 0d 40 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+64
  000fc	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 1959 :     { ImVec2(21,0), ImVec2( 9,23), ImVec2( 4,11) }, // ImGuiMouseCursor_ResizeNS

  00101	0f 57 d2	 xorps	 xmm2, xmm2
  00104	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41a80000
  0010c	48 8d 0d 48 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+72
  00113	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00118	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@41b80000
  00120	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41100000
  00128	48 8d 0d 50 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+80
  0012f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00134	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@41300000
  0013c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40800000
  00144	48 8d 0d 58 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+88
  0014b	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 1960 :     { ImVec2(55,18),ImVec2(23, 9), ImVec2(11, 4) }, // ImGuiMouseCursor_ResizeEW

  00150	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@41900000
  00158	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@425c0000
  00160	48 8d 0d 60 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+96
  00167	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0016c	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@41100000
  00174	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41b80000
  0017c	48 8d 0d 68 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+104
  00183	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00188	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@40800000
  00190	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41300000
  00198	48 8d 0d 70 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+112
  0019f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 1961 :     { ImVec2(73,0), ImVec2(17,17), ImVec2( 8, 8) }, // ImGuiMouseCursor_ResizeNESW

  001a4	0f 57 d2	 xorps	 xmm2, xmm2
  001a7	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42920000
  001af	48 8d 0d 78 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+120
  001b6	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001bb	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@41880000
  001c3	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41880000
  001cb	48 8d 0d 80 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+128
  001d2	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001d7	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@41000000
  001df	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41000000
  001e7	48 8d 0d 88 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+136
  001ee	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 1962 :     { ImVec2(55,0), ImVec2(17,17), ImVec2( 8, 8) }, // ImGuiMouseCursor_ResizeNWSE

  001f3	0f 57 d2	 xorps	 xmm2, xmm2
  001f6	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@425c0000
  001fe	48 8d 0d 90 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+144
  00205	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0020a	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@41880000
  00212	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41880000
  0021a	48 8d 0d 98 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+152
  00221	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00226	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@41000000
  0022e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41000000
  00236	48 8d 0d a0 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+160
  0023d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 1963 :     { ImVec2(91,0), ImVec2(17,22), ImVec2( 5, 0) }, // ImGuiMouseCursor_Hand

  00242	0f 57 d2	 xorps	 xmm2, xmm2
  00245	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42b60000
  0024d	48 8d 0d a8 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+168
  00254	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00259	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@41b00000
  00261	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41880000
  00269	48 8d 0d b0 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+176
  00270	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00275	0f 57 d2	 xorps	 xmm2, xmm2
  00278	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40a00000
  00280	48 8d 0d b8 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+184
  00287	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 1964 :     { ImVec2(109,0),ImVec2(13,15), ImVec2( 6, 7) }, // ImGuiMouseCursor_NotAllowed

  0028c	0f 57 d2	 xorps	 xmm2, xmm2
  0028f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42da0000
  00297	48 8d 0d c0 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+192
  0029e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  002a3	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@41700000
  002ab	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41500000
  002b3	48 8d 0d c8 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+200
  002ba	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  002bf	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@40e00000
  002c7	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40c00000
  002cf	48 8d 0d d0 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+208
  002d6	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  002db	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  002e2	5f		 pop	 rdi
  002e3	5d		 pop	 rbp
  002e4	c3		 ret	 0
??__EFONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@YAXXZ ENDP	; `dynamic initializer for 'FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ??$ImClamp@M@@YAMMMM@Z
_TEXT	SEGMENT
tv67 = 192
tv66 = 196
v$ = 240
mn$ = 248
mx$ = 256
??$ImClamp@M@@YAMMMM@Z PROC				; ImClamp<float>, COMDAT

; 454  : template<typename T> static inline T ImClamp(T v, T mn, T mx)                   { return (v < mn) ? mn : (v > mx) ? mx : v; }

  00000	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  00006	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  0000c	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  00012	55		 push	 rbp
  00013	57		 push	 rdi
  00014	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001b	48 8d 6c 24 10	 lea	 rbp, QWORD PTR [rsp+16]
  00020	48 8b fc	 mov	 rdi, rsp
  00023	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	f3 0f 10 85 f8
	00 00 00	 movss	 xmm0, DWORD PTR mn$[rbp]
  00037	0f 2f 85 f0 00
	00 00		 comiss	 xmm0, DWORD PTR v$[rbp]
  0003e	76 12		 jbe	 SHORT $LN5@ImClamp
  00040	f3 0f 10 85 f8
	00 00 00	 movss	 xmm0, DWORD PTR mn$[rbp]
  00048	f3 0f 11 85 c0
	00 00 00	 movss	 DWORD PTR tv67[rbp], xmm0
  00050	eb 43		 jmp	 SHORT $LN6@ImClamp
$LN5@ImClamp:
  00052	f3 0f 10 85 f0
	00 00 00	 movss	 xmm0, DWORD PTR v$[rbp]
  0005a	0f 2f 85 00 01
	00 00		 comiss	 xmm0, DWORD PTR mx$[rbp]
  00061	76 12		 jbe	 SHORT $LN3@ImClamp
  00063	f3 0f 10 85 00
	01 00 00	 movss	 xmm0, DWORD PTR mx$[rbp]
  0006b	f3 0f 11 85 c4
	00 00 00	 movss	 DWORD PTR tv66[rbp], xmm0
  00073	eb 10		 jmp	 SHORT $LN4@ImClamp
$LN3@ImClamp:
  00075	f3 0f 10 85 f0
	00 00 00	 movss	 xmm0, DWORD PTR v$[rbp]
  0007d	f3 0f 11 85 c4
	00 00 00	 movss	 DWORD PTR tv66[rbp], xmm0
$LN4@ImClamp:
  00085	f3 0f 10 85 c4
	00 00 00	 movss	 xmm0, DWORD PTR tv66[rbp]
  0008d	f3 0f 11 85 c0
	00 00 00	 movss	 DWORD PTR tv67[rbp], xmm0
$LN6@ImClamp:
  00095	f3 0f 10 85 c0
	00 00 00	 movss	 xmm0, DWORD PTR tv67[rbp]
  0009d	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000a4	5f		 pop	 rdi
  000a5	5d		 pop	 rbp
  000a6	c3		 ret	 0
??$ImClamp@M@@YAMMMM@Z ENDP				; ImClamp<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?FixRectCornerFlags@@YAHH@Z
_TEXT	SEGMENT
flags$ = 224
?FixRectCornerFlags@@YAHH@Z PROC			; FixRectCornerFlags, COMDAT

; 1315 : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR [rsp+264]

; 1316 : #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
; 1317 :     // Obsoleted in 1.82 (from February 2021)
; 1318 :     // Legacy Support for hard coded ~0 (used to be a suggested equivalent to ImDrawCornerFlags_All)
; 1319 :     //   ~0   --> ImDrawFlags_RoundCornersAll or 0
; 1320 :     if (flags == ~0)

  00028	83 bd e0 00 00
	00 ff		 cmp	 DWORD PTR flags$[rbp], -1
  0002f	75 07		 jne	 SHORT $LN2@FixRectCor

; 1321 :         return ImDrawFlags_RoundCornersAll;

  00031	b8 f0 00 00 00	 mov	 eax, 240		; 000000f0H
  00036	eb 7e		 jmp	 SHORT $LN1@FixRectCor
$LN2@FixRectCor:

; 1322 : 
; 1323 :     // Legacy Support for hard coded 0x01 to 0x0F (matching 15 out of 16 old flags combinations)
; 1324 :     //   0x01 --> ImDrawFlags_RoundCornersTopLeft (VALUE 0x01 OVERLAPS ImDrawFlags_Closed but ImDrawFlags_Closed is never valid in this path!)
; 1325 :     //   0x02 --> ImDrawFlags_RoundCornersTopRight
; 1326 :     //   0x03 --> ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersTopRight
; 1327 :     //   0x04 --> ImDrawFlags_RoundCornersBotLeft
; 1328 :     //   0x05 --> ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersBotLeft
; 1329 :     //   ...
; 1330 :     //   0x0F --> ImDrawFlags_RoundCornersAll or 0
; 1331 :     // (See all values in ImDrawCornerFlags_)
; 1332 :     if (flags >= 0x01 && flags <= 0x0F)

  00038	83 bd e0 00 00
	00 01		 cmp	 DWORD PTR flags$[rbp], 1
  0003f	7c 14		 jl	 SHORT $LN3@FixRectCor
  00041	83 bd e0 00 00
	00 0f		 cmp	 DWORD PTR flags$[rbp], 15
  00048	7f 0b		 jg	 SHORT $LN3@FixRectCor

; 1333 :         return (flags << 4);

  0004a	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  00050	c1 e0 04	 shl	 eax, 4
  00053	eb 61		 jmp	 SHORT $LN1@FixRectCor
$LN3@FixRectCor:

; 1334 : 
; 1335 :     // We cannot support hard coded 0x00 with 'float rounding > 0.0f' --> replace with ImDrawFlags_RoundCornersNone or use 'float rounding = 0.0f'
; 1336 : #endif
; 1337 : 
; 1338 :     // If this triggers, please update your code replacing hardcoded values with new ImDrawFlags_RoundCorners* values.
; 1339 :     // Note that ImDrawFlags_Closed (== 0x01) is an invalid flag for AddRect(), AddRectFilled(), PathRect() etc...
; 1340 :     IM_ASSERT((flags & 0x0F) == 0 && "Misuse of legacy hardcoded ImDrawCornerFlags values!");

  00055	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  0005b	83 e0 0f	 and	 eax, 15
  0005e	85 c0		 test	 eax, eax
  00060	75 0c		 jne	 SHORT $LN6@FixRectCor
  00062	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DF@FNKJFHEE@Misuse?5of?5legacy?5hardcoded?5ImDra@
  00069	48 85 c0	 test	 rax, rax
  0006c	75 22		 jne	 SHORT $LN7@FixRectCor
$LN6@FixRectCor:
  0006e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??FixRectCornerFlags@@YAHH@Z@4JA
  00074	83 c0 19	 add	 eax, 25
  00077	44 8b c0	 mov	 r8d, eax
  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1JM@GAJOFMMN@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA0?$AAx?$AA0?$AAF?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAM?$AAi?$AAs?$AAu?$AAs?$AAe?$AA?5?$AAo@
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0008e	33 c0		 xor	 eax, eax
$LN7@FixRectCor:

; 1341 : 
; 1342 :     if ((flags & ImDrawFlags_RoundCornersMask_) == 0)

  00090	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  00096	25 f0 01 00 00	 and	 eax, 496		; 000001f0H
  0009b	85 c0		 test	 eax, eax
  0009d	75 11		 jne	 SHORT $LN4@FixRectCor

; 1343 :         flags |= ImDrawFlags_RoundCornersAll;

  0009f	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  000a5	0d f0 00 00 00	 or	 eax, 240		; 000000f0H
  000aa	89 85 e0 00 00
	00		 mov	 DWORD PTR flags$[rbp], eax
$LN4@FixRectCor:

; 1344 : 
; 1345 :     return flags;

  000b0	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
$LN1@FixRectCor:

; 1346 : }

  000b6	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000bd	5f		 pop	 rdi
  000be	5d		 pop	 rbp
  000bf	c3		 ret	 0
?FixRectCornerFlags@@YAHH@Z ENDP			; FixRectCornerFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z
_TEXT	SEGMENT
dx$ = 4
dy$ = 36
det$ = 68
x12$1 = 100
y12$2 = 132
x23$3 = 164
y23$4 = 196
x123$5 = 228
y123$6 = 260
$T7 = 484
path$ = 544
x1$ = 552
y1$ = 560
x2$ = 568
y2$ = 576
x3$ = 584
y3$ = 592
tess_tol$ = 600
level$ = 608
?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z PROC ; PathBezierQuadraticCurveToCasteljau, COMDAT

; 1264 : {

  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00012	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00017	55		 push	 rbp
  00018	57		 push	 rdi
  00019	48 81 ec 58 02
	00 00		 sub	 rsp, 600		; 00000258H
  00020	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00025	48 8b fc	 mov	 rdi, rsp
  00028	b9 96 00 00 00	 mov	 ecx, 150		; 00000096H
  0002d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00032	f3 ab		 rep stosd
  00034	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR [rsp+632]

; 1265 :     float dx = x3 - x1, dy = y3 - y1;

  0003c	f3 0f 10 85 48
	02 00 00	 movss	 xmm0, DWORD PTR x3$[rbp]
  00044	f3 0f 5c 85 28
	02 00 00	 subss	 xmm0, DWORD PTR x1$[rbp]
  0004c	f3 0f 11 45 04	 movss	 DWORD PTR dx$[rbp], xmm0
  00051	f3 0f 10 85 50
	02 00 00	 movss	 xmm0, DWORD PTR y3$[rbp]
  00059	f3 0f 5c 85 30
	02 00 00	 subss	 xmm0, DWORD PTR y1$[rbp]
  00061	f3 0f 11 45 24	 movss	 DWORD PTR dy$[rbp], xmm0

; 1266 :     float det = (x2 - x3) * dy - (y2 - y3) * dx;

  00066	f3 0f 10 85 38
	02 00 00	 movss	 xmm0, DWORD PTR x2$[rbp]
  0006e	f3 0f 5c 85 48
	02 00 00	 subss	 xmm0, DWORD PTR x3$[rbp]
  00076	f3 0f 59 45 24	 mulss	 xmm0, DWORD PTR dy$[rbp]
  0007b	f3 0f 10 8d 40
	02 00 00	 movss	 xmm1, DWORD PTR y2$[rbp]
  00083	f3 0f 5c 8d 50
	02 00 00	 subss	 xmm1, DWORD PTR y3$[rbp]
  0008b	f3 0f 59 4d 04	 mulss	 xmm1, DWORD PTR dx$[rbp]
  00090	f3 0f 5c c1	 subss	 xmm0, xmm1
  00094	f3 0f 11 45 44	 movss	 DWORD PTR det$[rbp], xmm0

; 1267 :     if (det * det * 4.0f < tess_tol * (dx * dx + dy * dy))

  00099	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR det$[rbp]
  0009e	f3 0f 59 45 44	 mulss	 xmm0, DWORD PTR det$[rbp]
  000a3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40800000
  000ab	f3 0f 10 4d 04	 movss	 xmm1, DWORD PTR dx$[rbp]
  000b0	f3 0f 59 4d 04	 mulss	 xmm1, DWORD PTR dx$[rbp]
  000b5	f3 0f 10 55 24	 movss	 xmm2, DWORD PTR dy$[rbp]
  000ba	f3 0f 59 55 24	 mulss	 xmm2, DWORD PTR dy$[rbp]
  000bf	f3 0f 58 ca	 addss	 xmm1, xmm2
  000c3	f3 0f 10 95 58
	02 00 00	 movss	 xmm2, DWORD PTR tess_tol$[rbp]
  000cb	f3 0f 59 d1	 mulss	 xmm2, xmm1
  000cf	0f 28 ca	 movaps	 xmm1, xmm2
  000d2	0f 2f c8	 comiss	 xmm1, xmm0
  000d5	76 30		 jbe	 SHORT $LN2@PathBezier

; 1268 :     {
; 1269 :         path->push_back(ImVec2(x3, y3));

  000d7	f3 0f 10 95 50
	02 00 00	 movss	 xmm2, DWORD PTR y3$[rbp]
  000df	f3 0f 10 8d 48
	02 00 00	 movss	 xmm1, DWORD PTR x3$[rbp]
  000e7	48 8d 8d e4 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  000ee	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000f3	48 8b d0	 mov	 rdx, rax
  000f6	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR path$[rbp]
  000fd	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
  00102	e9 94 01 00 00	 jmp	 $LN3@PathBezier
$LN2@PathBezier:

; 1270 :     }
; 1271 :     else if (level < 10)

  00107	83 bd 60 02 00
	00 0a		 cmp	 DWORD PTR level$[rbp], 10
  0010e	0f 8d 87 01 00
	00		 jge	 $LN4@PathBezier

; 1272 :     {
; 1273 :         float x12 = (x1 + x2) * 0.5f, y12 = (y1 + y2) * 0.5f;

  00114	f3 0f 10 85 28
	02 00 00	 movss	 xmm0, DWORD PTR x1$[rbp]
  0011c	f3 0f 58 85 38
	02 00 00	 addss	 xmm0, DWORD PTR x2$[rbp]
  00124	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0012c	f3 0f 11 45 64	 movss	 DWORD PTR x12$1[rbp], xmm0
  00131	f3 0f 10 85 30
	02 00 00	 movss	 xmm0, DWORD PTR y1$[rbp]
  00139	f3 0f 58 85 40
	02 00 00	 addss	 xmm0, DWORD PTR y2$[rbp]
  00141	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00149	f3 0f 11 85 84
	00 00 00	 movss	 DWORD PTR y12$2[rbp], xmm0

; 1274 :         float x23 = (x2 + x3) * 0.5f, y23 = (y2 + y3) * 0.5f;

  00151	f3 0f 10 85 38
	02 00 00	 movss	 xmm0, DWORD PTR x2$[rbp]
  00159	f3 0f 58 85 48
	02 00 00	 addss	 xmm0, DWORD PTR x3$[rbp]
  00161	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00169	f3 0f 11 85 a4
	00 00 00	 movss	 DWORD PTR x23$3[rbp], xmm0
  00171	f3 0f 10 85 40
	02 00 00	 movss	 xmm0, DWORD PTR y2$[rbp]
  00179	f3 0f 58 85 50
	02 00 00	 addss	 xmm0, DWORD PTR y3$[rbp]
  00181	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00189	f3 0f 11 85 c4
	00 00 00	 movss	 DWORD PTR y23$4[rbp], xmm0

; 1275 :         float x123 = (x12 + x23) * 0.5f, y123 = (y12 + y23) * 0.5f;

  00191	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR x12$1[rbp]
  00196	f3 0f 58 85 a4
	00 00 00	 addss	 xmm0, DWORD PTR x23$3[rbp]
  0019e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  001a6	f3 0f 11 85 e4
	00 00 00	 movss	 DWORD PTR x123$5[rbp], xmm0
  001ae	f3 0f 10 85 84
	00 00 00	 movss	 xmm0, DWORD PTR y12$2[rbp]
  001b6	f3 0f 58 85 c4
	00 00 00	 addss	 xmm0, DWORD PTR y23$4[rbp]
  001be	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  001c6	f3 0f 11 85 04
	01 00 00	 movss	 DWORD PTR y123$6[rbp], xmm0

; 1276 :         PathBezierQuadraticCurveToCasteljau(path, x1, y1, x12, y12, x123, y123, tess_tol, level + 1);

  001ce	8b 85 60 02 00
	00		 mov	 eax, DWORD PTR level$[rbp]
  001d4	ff c0		 inc	 eax
  001d6	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  001da	f3 0f 10 85 58
	02 00 00	 movss	 xmm0, DWORD PTR tess_tol$[rbp]
  001e2	f3 0f 11 44 24
	38		 movss	 DWORD PTR [rsp+56], xmm0
  001e8	f3 0f 10 85 04
	01 00 00	 movss	 xmm0, DWORD PTR y123$6[rbp]
  001f0	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  001f6	f3 0f 10 85 e4
	00 00 00	 movss	 xmm0, DWORD PTR x123$5[rbp]
  001fe	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00204	f3 0f 10 85 84
	00 00 00	 movss	 xmm0, DWORD PTR y12$2[rbp]
  0020c	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00212	f3 0f 10 5d 64	 movss	 xmm3, DWORD PTR x12$1[rbp]
  00217	f3 0f 10 95 30
	02 00 00	 movss	 xmm2, DWORD PTR y1$[rbp]
  0021f	f3 0f 10 8d 28
	02 00 00	 movss	 xmm1, DWORD PTR x1$[rbp]
  00227	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR path$[rbp]
  0022e	e8 00 00 00 00	 call	 ?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z ; PathBezierQuadraticCurveToCasteljau

; 1277 :         PathBezierQuadraticCurveToCasteljau(path, x123, y123, x23, y23, x3, y3, tess_tol, level + 1);

  00233	8b 85 60 02 00
	00		 mov	 eax, DWORD PTR level$[rbp]
  00239	ff c0		 inc	 eax
  0023b	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  0023f	f3 0f 10 85 58
	02 00 00	 movss	 xmm0, DWORD PTR tess_tol$[rbp]
  00247	f3 0f 11 44 24
	38		 movss	 DWORD PTR [rsp+56], xmm0
  0024d	f3 0f 10 85 50
	02 00 00	 movss	 xmm0, DWORD PTR y3$[rbp]
  00255	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  0025b	f3 0f 10 85 48
	02 00 00	 movss	 xmm0, DWORD PTR x3$[rbp]
  00263	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00269	f3 0f 10 85 c4
	00 00 00	 movss	 xmm0, DWORD PTR y23$4[rbp]
  00271	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00277	f3 0f 10 9d a4
	00 00 00	 movss	 xmm3, DWORD PTR x23$3[rbp]
  0027f	f3 0f 10 95 04
	01 00 00	 movss	 xmm2, DWORD PTR y123$6[rbp]
  00287	f3 0f 10 8d e4
	00 00 00	 movss	 xmm1, DWORD PTR x123$5[rbp]
  0028f	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR path$[rbp]
  00296	e8 00 00 00 00	 call	 ?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z ; PathBezierQuadraticCurveToCasteljau
$LN4@PathBezier:
$LN3@PathBezier:

; 1278 :     }
; 1279 : }

  0029b	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  002a2	5f		 pop	 rdi
  002a3	5d		 pop	 rbp
  002a4	c3		 ret	 0
?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z ENDP ; PathBezierQuadraticCurveToCasteljau
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z
_TEXT	SEGMENT
dx$ = 4
dy$ = 36
d2$ = 68
d3$ = 100
x12$1 = 132
y12$2 = 164
x23$3 = 196
y23$4 = 228
x34$5 = 260
y34$6 = 292
x123$7 = 324
y123$8 = 356
x234$9 = 388
y234$10 = 420
x1234$11 = 452
y1234$12 = 484
$T13 = 900
tv81 = 916
tv78 = 916
path$ = 960
x1$ = 968
y1$ = 976
x2$ = 984
y2$ = 992
x3$ = 1000
y3$ = 1008
x4$ = 1016
y4$ = 1024
tess_tol$ = 1032
level$ = 1040
?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z PROC ; PathBezierCubicCurveToCasteljau, COMDAT

; 1239 : {

  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00012	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00017	55		 push	 rbp
  00018	57		 push	 rdi
  00019	48 81 ec 08 04
	00 00		 sub	 rsp, 1032		; 00000408H
  00020	48 8d 6c 24 60	 lea	 rbp, QWORD PTR [rsp+96]
  00025	48 8b fc	 mov	 rdi, rsp
  00028	b9 02 01 00 00	 mov	 ecx, 258		; 00000102H
  0002d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00032	f3 ab		 rep stosd
  00034	48 8b 8c 24 28
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1064]

; 1240 :     float dx = x4 - x1;

  0003c	f3 0f 10 85 f8
	03 00 00	 movss	 xmm0, DWORD PTR x4$[rbp]
  00044	f3 0f 5c 85 c8
	03 00 00	 subss	 xmm0, DWORD PTR x1$[rbp]
  0004c	f3 0f 11 45 04	 movss	 DWORD PTR dx$[rbp], xmm0

; 1241 :     float dy = y4 - y1;

  00051	f3 0f 10 85 00
	04 00 00	 movss	 xmm0, DWORD PTR y4$[rbp]
  00059	f3 0f 5c 85 d0
	03 00 00	 subss	 xmm0, DWORD PTR y1$[rbp]
  00061	f3 0f 11 45 24	 movss	 DWORD PTR dy$[rbp], xmm0

; 1242 :     float d2 = (x2 - x4) * dy - (y2 - y4) * dx;

  00066	f3 0f 10 85 d8
	03 00 00	 movss	 xmm0, DWORD PTR x2$[rbp]
  0006e	f3 0f 5c 85 f8
	03 00 00	 subss	 xmm0, DWORD PTR x4$[rbp]
  00076	f3 0f 59 45 24	 mulss	 xmm0, DWORD PTR dy$[rbp]
  0007b	f3 0f 10 8d e0
	03 00 00	 movss	 xmm1, DWORD PTR y2$[rbp]
  00083	f3 0f 5c 8d 00
	04 00 00	 subss	 xmm1, DWORD PTR y4$[rbp]
  0008b	f3 0f 59 4d 04	 mulss	 xmm1, DWORD PTR dx$[rbp]
  00090	f3 0f 5c c1	 subss	 xmm0, xmm1
  00094	f3 0f 11 45 44	 movss	 DWORD PTR d2$[rbp], xmm0

; 1243 :     float d3 = (x3 - x4) * dy - (y3 - y4) * dx;

  00099	f3 0f 10 85 e8
	03 00 00	 movss	 xmm0, DWORD PTR x3$[rbp]
  000a1	f3 0f 5c 85 f8
	03 00 00	 subss	 xmm0, DWORD PTR x4$[rbp]
  000a9	f3 0f 59 45 24	 mulss	 xmm0, DWORD PTR dy$[rbp]
  000ae	f3 0f 10 8d f0
	03 00 00	 movss	 xmm1, DWORD PTR y3$[rbp]
  000b6	f3 0f 5c 8d 00
	04 00 00	 subss	 xmm1, DWORD PTR y4$[rbp]
  000be	f3 0f 59 4d 04	 mulss	 xmm1, DWORD PTR dx$[rbp]
  000c3	f3 0f 5c c1	 subss	 xmm0, xmm1
  000c7	f3 0f 11 45 64	 movss	 DWORD PTR d3$[rbp], xmm0

; 1244 :     d2 = (d2 >= 0) ? d2 : -d2;

  000cc	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR d2$[rbp]
  000d1	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  000d8	72 0f		 jb	 SHORT $LN6@PathBezier
  000da	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR d2$[rbp]
  000df	f3 0f 11 85 94
	03 00 00	 movss	 DWORD PTR tv78[rbp], xmm0
  000e7	eb 14		 jmp	 SHORT $LN7@PathBezier
$LN6@PathBezier:
  000e9	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR d2$[rbp]
  000ee	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000f5	f3 0f 11 85 94
	03 00 00	 movss	 DWORD PTR tv78[rbp], xmm0
$LN7@PathBezier:
  000fd	f3 0f 10 85 94
	03 00 00	 movss	 xmm0, DWORD PTR tv78[rbp]
  00105	f3 0f 11 45 44	 movss	 DWORD PTR d2$[rbp], xmm0

; 1245 :     d3 = (d3 >= 0) ? d3 : -d3;

  0010a	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR d3$[rbp]
  0010f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00116	72 0f		 jb	 SHORT $LN8@PathBezier
  00118	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR d3$[rbp]
  0011d	f3 0f 11 85 94
	03 00 00	 movss	 DWORD PTR tv81[rbp], xmm0
  00125	eb 14		 jmp	 SHORT $LN9@PathBezier
$LN8@PathBezier:
  00127	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR d3$[rbp]
  0012c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00133	f3 0f 11 85 94
	03 00 00	 movss	 DWORD PTR tv81[rbp], xmm0
$LN9@PathBezier:
  0013b	f3 0f 10 85 94
	03 00 00	 movss	 xmm0, DWORD PTR tv81[rbp]
  00143	f3 0f 11 45 64	 movss	 DWORD PTR d3$[rbp], xmm0

; 1246 :     if ((d2 + d3) * (d2 + d3) < tess_tol * (dx * dx + dy * dy))

  00148	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR d2$[rbp]
  0014d	f3 0f 58 45 64	 addss	 xmm0, DWORD PTR d3$[rbp]
  00152	f3 0f 10 4d 44	 movss	 xmm1, DWORD PTR d2$[rbp]
  00157	f3 0f 58 4d 64	 addss	 xmm1, DWORD PTR d3$[rbp]
  0015c	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00160	f3 0f 10 4d 04	 movss	 xmm1, DWORD PTR dx$[rbp]
  00165	f3 0f 59 4d 04	 mulss	 xmm1, DWORD PTR dx$[rbp]
  0016a	f3 0f 10 55 24	 movss	 xmm2, DWORD PTR dy$[rbp]
  0016f	f3 0f 59 55 24	 mulss	 xmm2, DWORD PTR dy$[rbp]
  00174	f3 0f 58 ca	 addss	 xmm1, xmm2
  00178	f3 0f 10 95 08
	04 00 00	 movss	 xmm2, DWORD PTR tess_tol$[rbp]
  00180	f3 0f 59 d1	 mulss	 xmm2, xmm1
  00184	0f 28 ca	 movaps	 xmm1, xmm2
  00187	0f 2f c8	 comiss	 xmm1, xmm0
  0018a	76 30		 jbe	 SHORT $LN2@PathBezier

; 1247 :     {
; 1248 :         path->push_back(ImVec2(x4, y4));

  0018c	f3 0f 10 95 00
	04 00 00	 movss	 xmm2, DWORD PTR y4$[rbp]
  00194	f3 0f 10 8d f8
	03 00 00	 movss	 xmm1, DWORD PTR x4$[rbp]
  0019c	48 8d 8d 84 03
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  001a3	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001a8	48 8b d0	 mov	 rdx, rax
  001ab	48 8b 8d c0 03
	00 00		 mov	 rcx, QWORD PTR path$[rbp]
  001b2	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
  001b7	e9 95 02 00 00	 jmp	 $LN3@PathBezier
$LN2@PathBezier:

; 1249 :     }
; 1250 :     else if (level < 10)

  001bc	83 bd 10 04 00
	00 0a		 cmp	 DWORD PTR level$[rbp], 10
  001c3	0f 8d 88 02 00
	00		 jge	 $LN4@PathBezier

; 1251 :     {
; 1252 :         float x12 = (x1 + x2) * 0.5f, y12 = (y1 + y2) * 0.5f;

  001c9	f3 0f 10 85 c8
	03 00 00	 movss	 xmm0, DWORD PTR x1$[rbp]
  001d1	f3 0f 58 85 d8
	03 00 00	 addss	 xmm0, DWORD PTR x2$[rbp]
  001d9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  001e1	f3 0f 11 85 84
	00 00 00	 movss	 DWORD PTR x12$1[rbp], xmm0
  001e9	f3 0f 10 85 d0
	03 00 00	 movss	 xmm0, DWORD PTR y1$[rbp]
  001f1	f3 0f 58 85 e0
	03 00 00	 addss	 xmm0, DWORD PTR y2$[rbp]
  001f9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00201	f3 0f 11 85 a4
	00 00 00	 movss	 DWORD PTR y12$2[rbp], xmm0

; 1253 :         float x23 = (x2 + x3) * 0.5f, y23 = (y2 + y3) * 0.5f;

  00209	f3 0f 10 85 d8
	03 00 00	 movss	 xmm0, DWORD PTR x2$[rbp]
  00211	f3 0f 58 85 e8
	03 00 00	 addss	 xmm0, DWORD PTR x3$[rbp]
  00219	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00221	f3 0f 11 85 c4
	00 00 00	 movss	 DWORD PTR x23$3[rbp], xmm0
  00229	f3 0f 10 85 e0
	03 00 00	 movss	 xmm0, DWORD PTR y2$[rbp]
  00231	f3 0f 58 85 f0
	03 00 00	 addss	 xmm0, DWORD PTR y3$[rbp]
  00239	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00241	f3 0f 11 85 e4
	00 00 00	 movss	 DWORD PTR y23$4[rbp], xmm0

; 1254 :         float x34 = (x3 + x4) * 0.5f, y34 = (y3 + y4) * 0.5f;

  00249	f3 0f 10 85 e8
	03 00 00	 movss	 xmm0, DWORD PTR x3$[rbp]
  00251	f3 0f 58 85 f8
	03 00 00	 addss	 xmm0, DWORD PTR x4$[rbp]
  00259	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00261	f3 0f 11 85 04
	01 00 00	 movss	 DWORD PTR x34$5[rbp], xmm0
  00269	f3 0f 10 85 f0
	03 00 00	 movss	 xmm0, DWORD PTR y3$[rbp]
  00271	f3 0f 58 85 00
	04 00 00	 addss	 xmm0, DWORD PTR y4$[rbp]
  00279	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00281	f3 0f 11 85 24
	01 00 00	 movss	 DWORD PTR y34$6[rbp], xmm0

; 1255 :         float x123 = (x12 + x23) * 0.5f, y123 = (y12 + y23) * 0.5f;

  00289	f3 0f 10 85 84
	00 00 00	 movss	 xmm0, DWORD PTR x12$1[rbp]
  00291	f3 0f 58 85 c4
	00 00 00	 addss	 xmm0, DWORD PTR x23$3[rbp]
  00299	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  002a1	f3 0f 11 85 44
	01 00 00	 movss	 DWORD PTR x123$7[rbp], xmm0
  002a9	f3 0f 10 85 a4
	00 00 00	 movss	 xmm0, DWORD PTR y12$2[rbp]
  002b1	f3 0f 58 85 e4
	00 00 00	 addss	 xmm0, DWORD PTR y23$4[rbp]
  002b9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  002c1	f3 0f 11 85 64
	01 00 00	 movss	 DWORD PTR y123$8[rbp], xmm0

; 1256 :         float x234 = (x23 + x34) * 0.5f, y234 = (y23 + y34) * 0.5f;

  002c9	f3 0f 10 85 c4
	00 00 00	 movss	 xmm0, DWORD PTR x23$3[rbp]
  002d1	f3 0f 58 85 04
	01 00 00	 addss	 xmm0, DWORD PTR x34$5[rbp]
  002d9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  002e1	f3 0f 11 85 84
	01 00 00	 movss	 DWORD PTR x234$9[rbp], xmm0
  002e9	f3 0f 10 85 e4
	00 00 00	 movss	 xmm0, DWORD PTR y23$4[rbp]
  002f1	f3 0f 58 85 24
	01 00 00	 addss	 xmm0, DWORD PTR y34$6[rbp]
  002f9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00301	f3 0f 11 85 a4
	01 00 00	 movss	 DWORD PTR y234$10[rbp], xmm0

; 1257 :         float x1234 = (x123 + x234) * 0.5f, y1234 = (y123 + y234) * 0.5f;

  00309	f3 0f 10 85 44
	01 00 00	 movss	 xmm0, DWORD PTR x123$7[rbp]
  00311	f3 0f 58 85 84
	01 00 00	 addss	 xmm0, DWORD PTR x234$9[rbp]
  00319	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00321	f3 0f 11 85 c4
	01 00 00	 movss	 DWORD PTR x1234$11[rbp], xmm0
  00329	f3 0f 10 85 64
	01 00 00	 movss	 xmm0, DWORD PTR y123$8[rbp]
  00331	f3 0f 58 85 a4
	01 00 00	 addss	 xmm0, DWORD PTR y234$10[rbp]
  00339	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00341	f3 0f 11 85 e4
	01 00 00	 movss	 DWORD PTR y1234$12[rbp], xmm0

; 1258 :         PathBezierCubicCurveToCasteljau(path, x1, y1, x12, y12, x123, y123, x1234, y1234, tess_tol, level + 1);

  00349	8b 85 10 04 00
	00		 mov	 eax, DWORD PTR level$[rbp]
  0034f	ff c0		 inc	 eax
  00351	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00355	f3 0f 10 85 08
	04 00 00	 movss	 xmm0, DWORD PTR tess_tol$[rbp]
  0035d	f3 0f 11 44 24
	48		 movss	 DWORD PTR [rsp+72], xmm0
  00363	f3 0f 10 85 e4
	01 00 00	 movss	 xmm0, DWORD PTR y1234$12[rbp]
  0036b	f3 0f 11 44 24
	40		 movss	 DWORD PTR [rsp+64], xmm0
  00371	f3 0f 10 85 c4
	01 00 00	 movss	 xmm0, DWORD PTR x1234$11[rbp]
  00379	f3 0f 11 44 24
	38		 movss	 DWORD PTR [rsp+56], xmm0
  0037f	f3 0f 10 85 64
	01 00 00	 movss	 xmm0, DWORD PTR y123$8[rbp]
  00387	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  0038d	f3 0f 10 85 44
	01 00 00	 movss	 xmm0, DWORD PTR x123$7[rbp]
  00395	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  0039b	f3 0f 10 85 a4
	00 00 00	 movss	 xmm0, DWORD PTR y12$2[rbp]
  003a3	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  003a9	f3 0f 10 9d 84
	00 00 00	 movss	 xmm3, DWORD PTR x12$1[rbp]
  003b1	f3 0f 10 95 d0
	03 00 00	 movss	 xmm2, DWORD PTR y1$[rbp]
  003b9	f3 0f 10 8d c8
	03 00 00	 movss	 xmm1, DWORD PTR x1$[rbp]
  003c1	48 8b 8d c0 03
	00 00		 mov	 rcx, QWORD PTR path$[rbp]
  003c8	e8 00 00 00 00	 call	 ?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z ; PathBezierCubicCurveToCasteljau

; 1259 :         PathBezierCubicCurveToCasteljau(path, x1234, y1234, x234, y234, x34, y34, x4, y4, tess_tol, level + 1);

  003cd	8b 85 10 04 00
	00		 mov	 eax, DWORD PTR level$[rbp]
  003d3	ff c0		 inc	 eax
  003d5	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  003d9	f3 0f 10 85 08
	04 00 00	 movss	 xmm0, DWORD PTR tess_tol$[rbp]
  003e1	f3 0f 11 44 24
	48		 movss	 DWORD PTR [rsp+72], xmm0
  003e7	f3 0f 10 85 00
	04 00 00	 movss	 xmm0, DWORD PTR y4$[rbp]
  003ef	f3 0f 11 44 24
	40		 movss	 DWORD PTR [rsp+64], xmm0
  003f5	f3 0f 10 85 f8
	03 00 00	 movss	 xmm0, DWORD PTR x4$[rbp]
  003fd	f3 0f 11 44 24
	38		 movss	 DWORD PTR [rsp+56], xmm0
  00403	f3 0f 10 85 24
	01 00 00	 movss	 xmm0, DWORD PTR y34$6[rbp]
  0040b	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00411	f3 0f 10 85 04
	01 00 00	 movss	 xmm0, DWORD PTR x34$5[rbp]
  00419	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  0041f	f3 0f 10 85 a4
	01 00 00	 movss	 xmm0, DWORD PTR y234$10[rbp]
  00427	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0042d	f3 0f 10 9d 84
	01 00 00	 movss	 xmm3, DWORD PTR x234$9[rbp]
  00435	f3 0f 10 95 e4
	01 00 00	 movss	 xmm2, DWORD PTR y1234$12[rbp]
  0043d	f3 0f 10 8d c4
	01 00 00	 movss	 xmm1, DWORD PTR x1234$11[rbp]
  00445	48 8b 8d c0 03
	00 00		 mov	 rcx, QWORD PTR path$[rbp]
  0044c	e8 00 00 00 00	 call	 ?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z ; PathBezierCubicCurveToCasteljau
$LN4@PathBezier:
$LN3@PathBezier:

; 1260 :     }
; 1261 : }

  00451	48 8d a5 a8 03
	00 00		 lea	 rsp, QWORD PTR [rbp+936]
  00458	5f		 pop	 rdi
  00459	5d		 pop	 rbp
  0045a	c3		 ret	 0
?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z ENDP ; PathBezierCubicCurveToCasteljau
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ??$ImMax@H@@YAHHH@Z
_TEXT	SEGMENT
tv65 = 192
lhs$ = 240
rhs$ = 248
??$ImMax@H@@YAHHH@Z PROC				; ImMax<int>, COMDAT

; 453  : template<typename T> static inline T ImMax(T lhs, T rhs)                        { return lhs >= rhs ? lhs : rhs; }

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	55		 push	 rbp
  00009	57		 push	 rdi
  0000a	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  00011	48 8b ec	 mov	 rbp, rsp
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR [rsp+248]
  0002a	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR rhs$[rbp]
  00030	39 85 f0 00 00
	00		 cmp	 DWORD PTR lhs$[rbp], eax
  00036	7c 0e		 jl	 SHORT $LN3@ImMax
  00038	8b 85 f0 00 00
	00		 mov	 eax, DWORD PTR lhs$[rbp]
  0003e	89 85 c0 00 00
	00		 mov	 DWORD PTR tv65[rbp], eax
  00044	eb 0c		 jmp	 SHORT $LN4@ImMax
$LN3@ImMax:
  00046	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR rhs$[rbp]
  0004c	89 85 c0 00 00
	00		 mov	 DWORD PTR tv65[rbp], eax
$LN4@ImMax:
  00052	8b 85 c0 00 00
	00		 mov	 eax, DWORD PTR tv65[rbp]
  00058	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0005f	5f		 pop	 rdi
  00060	5d		 pop	 rbp
  00061	c3		 ret	 0
??$ImMax@H@@YAHHH@Z ENDP				; ImMax<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ??$ImClamp@H@@YAHHHH@Z
_TEXT	SEGMENT
tv67 = 192
tv66 = 196
v$ = 240
mn$ = 248
mx$ = 256
??$ImClamp@H@@YAHHHH@Z PROC				; ImClamp<int>, COMDAT

; 454  : template<typename T> static inline T ImClamp(T v, T mn, T mx)                   { return (v < mn) ? mn : (v > mx) ? mx : v; }

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	55		 push	 rbp
  0000e	57		 push	 rdi
  0000f	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  00016	48 8b ec	 mov	 rbp, rsp
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR [rsp+248]
  0002f	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR mn$[rbp]
  00035	39 85 f0 00 00
	00		 cmp	 DWORD PTR v$[rbp], eax
  0003b	7d 0e		 jge	 SHORT $LN5@ImClamp
  0003d	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR mn$[rbp]
  00043	89 85 c0 00 00
	00		 mov	 DWORD PTR tv67[rbp], eax
  00049	eb 34		 jmp	 SHORT $LN6@ImClamp
$LN5@ImClamp:
  0004b	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR mx$[rbp]
  00051	39 85 f0 00 00
	00		 cmp	 DWORD PTR v$[rbp], eax
  00057	7e 0e		 jle	 SHORT $LN3@ImClamp
  00059	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR mx$[rbp]
  0005f	89 85 c4 00 00
	00		 mov	 DWORD PTR tv66[rbp], eax
  00065	eb 0c		 jmp	 SHORT $LN4@ImClamp
$LN3@ImClamp:
  00067	8b 85 f0 00 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  0006d	89 85 c4 00 00
	00		 mov	 DWORD PTR tv66[rbp], eax
$LN4@ImClamp:
  00073	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR tv66[rbp]
  00079	89 85 c0 00 00
	00		 mov	 DWORD PTR tv67[rbp], eax
$LN6@ImClamp:
  0007f	8b 85 c0 00 00
	00		 mov	 eax, DWORD PTR tv67[rbp]
  00085	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0008c	5f		 pop	 rdi
  0008d	5d		 pop	 rbp
  0008e	c3		 ret	 0
??$ImClamp@H@@YAHHHH@Z ENDP				; ImClamp<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__oversample_shift@@YAMH@Z
_TEXT	SEGMENT
oversample$ = 224
?stbtt__oversample_shift@@YAMH@Z PROC			; stbtt__oversample_shift, COMDAT

; 4145 : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000d	48 8d 6c 24 10	 lea	 rbp, QWORD PTR [rsp+16]
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR [rsp+248]

; 4146 :    if (!oversample)

  00028	83 bd e0 00 00
	00 00		 cmp	 DWORD PTR oversample$[rbp], 0
  0002f	75 05		 jne	 SHORT $LN2@stbtt__ove

; 4147 :       return 0.0f;

  00031	0f 57 c0	 xorps	 xmm0, xmm0
  00034	eb 29		 jmp	 SHORT $LN1@stbtt__ove
$LN2@stbtt__ove:

; 4148 : 
; 4149 :    // The prefilter is a box filter of width "oversample",
; 4150 :    // which shifts phase by (oversample - 1)/2 pixels in
; 4151 :    // oversampled space. We want to shift in the opposite
; 4152 :    // direction to counter this.
; 4153 :    return (float)-(oversample - 1) / (2.0f * (float)oversample);

  00036	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR oversample$[rbp]
  0003c	ff c8		 dec	 eax
  0003e	f7 d8		 neg	 eax
  00040	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00044	f3 0f 2a 8d e0
	00 00 00	 cvtsi2ss xmm1, DWORD PTR oversample$[rbp]
  0004c	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@40000000
  00054	f3 0f 59 d1	 mulss	 xmm2, xmm1
  00058	0f 28 ca	 movaps	 xmm1, xmm2
  0005b	f3 0f 5e c1	 divss	 xmm0, xmm1
$LN1@stbtt__ove:

; 4154 : }

  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
?stbtt__oversample_shift@@YAMH@Z ENDP			; stbtt__oversample_shift
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__v_prefilter@@YAXPEAEHHHI@Z
_TEXT	SEGMENT
buffer$ = 8
safe_h$ = 36
j$ = 68
i$4 = 100
total$5 = 132
tv70 = 340
__$ArrayPad$ = 344
pixels$ = 384
w$ = 392
h$ = 400
stride_in_bytes$ = 408
kernel_width$ = 416
?stbtt__v_prefilter@@YAXPEAEHHHI@Z PROC			; stbtt__v_prefilter, COMDAT

; 4083 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00038	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003f	48 33 c5	 xor	 rax, rbp
  00042	48 89 85 58 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 4084 :    unsigned char buffer[STBTT_MAX_OVERSAMPLE];
; 4085 :    int safe_h = h - kernel_width;

  00049	8b 85 a0 01 00
	00		 mov	 eax, DWORD PTR kernel_width$[rbp]
  0004f	8b 8d 90 01 00
	00		 mov	 ecx, DWORD PTR h$[rbp]
  00055	2b c8		 sub	 ecx, eax
  00057	8b c1		 mov	 eax, ecx
  00059	89 45 24	 mov	 DWORD PTR safe_h$[rbp], eax

; 4086 :    int j;
; 4087 :    STBTT_memset(buffer, 0, STBTT_MAX_OVERSAMPLE); // suppress bogus warning from VS2013 -analyze

  0005c	41 b8 08 00 00
	00		 mov	 r8d, 8
  00062	33 d2		 xor	 edx, edx
  00064	48 8d 4d 08	 lea	 rcx, QWORD PTR buffer$[rbp]
  00068	e8 00 00 00 00	 call	 memset

; 4088 :    for (j=0; j < w; ++j) {

  0006d	c7 45 44 00 00
	00 00		 mov	 DWORD PTR j$[rbp], 0
  00074	eb 08		 jmp	 SHORT $LN4@stbtt__v_p
$LN2@stbtt__v_p:
  00076	8b 45 44	 mov	 eax, DWORD PTR j$[rbp]
  00079	ff c0		 inc	 eax
  0007b	89 45 44	 mov	 DWORD PTR j$[rbp], eax
$LN4@stbtt__v_p:
  0007e	8b 85 88 01 00
	00		 mov	 eax, DWORD PTR w$[rbp]
  00084	39 45 44	 cmp	 DWORD PTR j$[rbp], eax
  00087	0f 8d 87 04 00
	00		 jge	 $LN3@stbtt__v_p

; 4089 :       int i;
; 4090 :       unsigned int total;
; 4091 :       STBTT_memset(buffer, 0, kernel_width);

  0008d	8b 85 a0 01 00
	00		 mov	 eax, DWORD PTR kernel_width$[rbp]
  00093	44 8b c0	 mov	 r8d, eax
  00096	33 d2		 xor	 edx, edx
  00098	48 8d 4d 08	 lea	 rcx, QWORD PTR buffer$[rbp]
  0009c	e8 00 00 00 00	 call	 memset

; 4092 : 
; 4093 :       total = 0;

  000a1	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR total$5[rbp], 0

; 4094 : 
; 4095 :       // make kernel_width a constant in common cases so compiler can optimize out the divide
; 4096 :       switch (kernel_width) {

  000ab	8b 85 a0 01 00
	00		 mov	 eax, DWORD PTR kernel_width$[rbp]
  000b1	89 85 54 01 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  000b7	83 bd 54 01 00
	00 02		 cmp	 DWORD PTR tv70[rbp], 2
  000be	74 2c		 je	 SHORT $LN28@stbtt__v_p
  000c0	83 bd 54 01 00
	00 03		 cmp	 DWORD PTR tv70[rbp], 3
  000c7	0f 84 d0 00 00
	00		 je	 $LN29@stbtt__v_p
  000cd	83 bd 54 01 00
	00 04		 cmp	 DWORD PTR tv70[rbp], 4
  000d4	0f 84 74 01 00
	00		 je	 $LN30@stbtt__v_p
  000da	83 bd 54 01 00
	00 05		 cmp	 DWORD PTR tv70[rbp], 5
  000e1	0f 84 18 02 00
	00		 je	 $LN31@stbtt__v_p
  000e7	e9 c4 02 00 00	 jmp	 $LN32@stbtt__v_p
$LN28@stbtt__v_p:

; 4097 :          case 2:
; 4098 :             for (i=0; i <= safe_h; ++i) {

  000ec	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  000f3	eb 08		 jmp	 SHORT $LN9@stbtt__v_p
$LN7@stbtt__v_p:
  000f5	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  000f8	ff c0		 inc	 eax
  000fa	89 45 64	 mov	 DWORD PTR i$4[rbp], eax
$LN9@stbtt__v_p:
  000fd	8b 45 24	 mov	 eax, DWORD PTR safe_h$[rbp]
  00100	39 45 64	 cmp	 DWORD PTR i$4[rbp], eax
  00103	0f 8f 8f 00 00
	00		 jg	 $LN8@stbtt__v_p

; 4099 :                total += pixels[i*stride_in_bytes] - buffer[i & STBTT__OVER_MASK];

  00109	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  0010c	0f af 85 98 01
	00 00		 imul	 eax, DWORD PTR stride_in_bytes$[rbp]
  00113	48 98		 cdqe
  00115	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR pixels$[rbp]
  0011c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00120	8b 4d 64	 mov	 ecx, DWORD PTR i$4[rbp]
  00123	83 e1 07	 and	 ecx, 7
  00126	48 63 c9	 movsxd	 rcx, ecx
  00129	0f b6 4c 0d 08	 movzx	 ecx, BYTE PTR buffer$[rbp+rcx]
  0012e	2b c1		 sub	 eax, ecx
  00130	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR total$5[rbp]
  00136	03 c8		 add	 ecx, eax
  00138	8b c1		 mov	 eax, ecx
  0013a	89 85 84 00 00
	00		 mov	 DWORD PTR total$5[rbp], eax

; 4100 :                buffer[(i+kernel_width) & STBTT__OVER_MASK] = pixels[i*stride_in_bytes];

  00140	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  00143	0f af 85 98 01
	00 00		 imul	 eax, DWORD PTR stride_in_bytes$[rbp]
  0014a	48 98		 cdqe
  0014c	8b 8d a0 01 00
	00		 mov	 ecx, DWORD PTR kernel_width$[rbp]
  00152	8b 55 64	 mov	 edx, DWORD PTR i$4[rbp]
  00155	03 d1		 add	 edx, ecx
  00157	8b ca		 mov	 ecx, edx
  00159	83 e1 07	 and	 ecx, 7
  0015c	8b c9		 mov	 ecx, ecx
  0015e	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  00165	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00169	88 44 0d 08	 mov	 BYTE PTR buffer$[rbp+rcx], al

; 4101 :                pixels[i*stride_in_bytes] = (unsigned char) (total / 2);

  0016d	33 d2		 xor	 edx, edx
  0016f	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR total$5[rbp]
  00175	b9 02 00 00 00	 mov	 ecx, 2
  0017a	f7 f1		 div	 ecx
  0017c	8b 4d 64	 mov	 ecx, DWORD PTR i$4[rbp]
  0017f	0f af 8d 98 01
	00 00		 imul	 ecx, DWORD PTR stride_in_bytes$[rbp]
  00186	48 63 c9	 movsxd	 rcx, ecx
  00189	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  00190	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 4102 :             }

  00193	e9 5d ff ff ff	 jmp	 $LN7@stbtt__v_p
$LN8@stbtt__v_p:

; 4103 :             break;

  00198	e9 be 02 00 00	 jmp	 $LN5@stbtt__v_p
$LN29@stbtt__v_p:

; 4104 :          case 3:
; 4105 :             for (i=0; i <= safe_h; ++i) {

  0019d	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  001a4	eb 08		 jmp	 SHORT $LN12@stbtt__v_p
$LN10@stbtt__v_p:
  001a6	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  001a9	ff c0		 inc	 eax
  001ab	89 45 64	 mov	 DWORD PTR i$4[rbp], eax
$LN12@stbtt__v_p:
  001ae	8b 45 24	 mov	 eax, DWORD PTR safe_h$[rbp]
  001b1	39 45 64	 cmp	 DWORD PTR i$4[rbp], eax
  001b4	0f 8f 8f 00 00
	00		 jg	 $LN11@stbtt__v_p

; 4106 :                total += pixels[i*stride_in_bytes] - buffer[i & STBTT__OVER_MASK];

  001ba	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  001bd	0f af 85 98 01
	00 00		 imul	 eax, DWORD PTR stride_in_bytes$[rbp]
  001c4	48 98		 cdqe
  001c6	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR pixels$[rbp]
  001cd	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  001d1	8b 4d 64	 mov	 ecx, DWORD PTR i$4[rbp]
  001d4	83 e1 07	 and	 ecx, 7
  001d7	48 63 c9	 movsxd	 rcx, ecx
  001da	0f b6 4c 0d 08	 movzx	 ecx, BYTE PTR buffer$[rbp+rcx]
  001df	2b c1		 sub	 eax, ecx
  001e1	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR total$5[rbp]
  001e7	03 c8		 add	 ecx, eax
  001e9	8b c1		 mov	 eax, ecx
  001eb	89 85 84 00 00
	00		 mov	 DWORD PTR total$5[rbp], eax

; 4107 :                buffer[(i+kernel_width) & STBTT__OVER_MASK] = pixels[i*stride_in_bytes];

  001f1	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  001f4	0f af 85 98 01
	00 00		 imul	 eax, DWORD PTR stride_in_bytes$[rbp]
  001fb	48 98		 cdqe
  001fd	8b 8d a0 01 00
	00		 mov	 ecx, DWORD PTR kernel_width$[rbp]
  00203	8b 55 64	 mov	 edx, DWORD PTR i$4[rbp]
  00206	03 d1		 add	 edx, ecx
  00208	8b ca		 mov	 ecx, edx
  0020a	83 e1 07	 and	 ecx, 7
  0020d	8b c9		 mov	 ecx, ecx
  0020f	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  00216	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  0021a	88 44 0d 08	 mov	 BYTE PTR buffer$[rbp+rcx], al

; 4108 :                pixels[i*stride_in_bytes] = (unsigned char) (total / 3);

  0021e	33 d2		 xor	 edx, edx
  00220	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR total$5[rbp]
  00226	b9 03 00 00 00	 mov	 ecx, 3
  0022b	f7 f1		 div	 ecx
  0022d	8b 4d 64	 mov	 ecx, DWORD PTR i$4[rbp]
  00230	0f af 8d 98 01
	00 00		 imul	 ecx, DWORD PTR stride_in_bytes$[rbp]
  00237	48 63 c9	 movsxd	 rcx, ecx
  0023a	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  00241	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 4109 :             }

  00244	e9 5d ff ff ff	 jmp	 $LN10@stbtt__v_p
$LN11@stbtt__v_p:

; 4110 :             break;

  00249	e9 0d 02 00 00	 jmp	 $LN5@stbtt__v_p
$LN30@stbtt__v_p:

; 4111 :          case 4:
; 4112 :             for (i=0; i <= safe_h; ++i) {

  0024e	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  00255	eb 08		 jmp	 SHORT $LN15@stbtt__v_p
$LN13@stbtt__v_p:
  00257	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  0025a	ff c0		 inc	 eax
  0025c	89 45 64	 mov	 DWORD PTR i$4[rbp], eax
$LN15@stbtt__v_p:
  0025f	8b 45 24	 mov	 eax, DWORD PTR safe_h$[rbp]
  00262	39 45 64	 cmp	 DWORD PTR i$4[rbp], eax
  00265	0f 8f 8f 00 00
	00		 jg	 $LN14@stbtt__v_p

; 4113 :                total += pixels[i*stride_in_bytes] - buffer[i & STBTT__OVER_MASK];

  0026b	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  0026e	0f af 85 98 01
	00 00		 imul	 eax, DWORD PTR stride_in_bytes$[rbp]
  00275	48 98		 cdqe
  00277	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR pixels$[rbp]
  0027e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00282	8b 4d 64	 mov	 ecx, DWORD PTR i$4[rbp]
  00285	83 e1 07	 and	 ecx, 7
  00288	48 63 c9	 movsxd	 rcx, ecx
  0028b	0f b6 4c 0d 08	 movzx	 ecx, BYTE PTR buffer$[rbp+rcx]
  00290	2b c1		 sub	 eax, ecx
  00292	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR total$5[rbp]
  00298	03 c8		 add	 ecx, eax
  0029a	8b c1		 mov	 eax, ecx
  0029c	89 85 84 00 00
	00		 mov	 DWORD PTR total$5[rbp], eax

; 4114 :                buffer[(i+kernel_width) & STBTT__OVER_MASK] = pixels[i*stride_in_bytes];

  002a2	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  002a5	0f af 85 98 01
	00 00		 imul	 eax, DWORD PTR stride_in_bytes$[rbp]
  002ac	48 98		 cdqe
  002ae	8b 8d a0 01 00
	00		 mov	 ecx, DWORD PTR kernel_width$[rbp]
  002b4	8b 55 64	 mov	 edx, DWORD PTR i$4[rbp]
  002b7	03 d1		 add	 edx, ecx
  002b9	8b ca		 mov	 ecx, edx
  002bb	83 e1 07	 and	 ecx, 7
  002be	8b c9		 mov	 ecx, ecx
  002c0	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  002c7	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  002cb	88 44 0d 08	 mov	 BYTE PTR buffer$[rbp+rcx], al

; 4115 :                pixels[i*stride_in_bytes] = (unsigned char) (total / 4);

  002cf	33 d2		 xor	 edx, edx
  002d1	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR total$5[rbp]
  002d7	b9 04 00 00 00	 mov	 ecx, 4
  002dc	f7 f1		 div	 ecx
  002de	8b 4d 64	 mov	 ecx, DWORD PTR i$4[rbp]
  002e1	0f af 8d 98 01
	00 00		 imul	 ecx, DWORD PTR stride_in_bytes$[rbp]
  002e8	48 63 c9	 movsxd	 rcx, ecx
  002eb	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  002f2	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 4116 :             }

  002f5	e9 5d ff ff ff	 jmp	 $LN13@stbtt__v_p
$LN14@stbtt__v_p:

; 4117 :             break;

  002fa	e9 5c 01 00 00	 jmp	 $LN5@stbtt__v_p
$LN31@stbtt__v_p:

; 4118 :          case 5:
; 4119 :             for (i=0; i <= safe_h; ++i) {

  002ff	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  00306	eb 08		 jmp	 SHORT $LN18@stbtt__v_p
$LN16@stbtt__v_p:
  00308	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  0030b	ff c0		 inc	 eax
  0030d	89 45 64	 mov	 DWORD PTR i$4[rbp], eax
$LN18@stbtt__v_p:
  00310	8b 45 24	 mov	 eax, DWORD PTR safe_h$[rbp]
  00313	39 45 64	 cmp	 DWORD PTR i$4[rbp], eax
  00316	0f 8f 8f 00 00
	00		 jg	 $LN17@stbtt__v_p

; 4120 :                total += pixels[i*stride_in_bytes] - buffer[i & STBTT__OVER_MASK];

  0031c	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  0031f	0f af 85 98 01
	00 00		 imul	 eax, DWORD PTR stride_in_bytes$[rbp]
  00326	48 98		 cdqe
  00328	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR pixels$[rbp]
  0032f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00333	8b 4d 64	 mov	 ecx, DWORD PTR i$4[rbp]
  00336	83 e1 07	 and	 ecx, 7
  00339	48 63 c9	 movsxd	 rcx, ecx
  0033c	0f b6 4c 0d 08	 movzx	 ecx, BYTE PTR buffer$[rbp+rcx]
  00341	2b c1		 sub	 eax, ecx
  00343	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR total$5[rbp]
  00349	03 c8		 add	 ecx, eax
  0034b	8b c1		 mov	 eax, ecx
  0034d	89 85 84 00 00
	00		 mov	 DWORD PTR total$5[rbp], eax

; 4121 :                buffer[(i+kernel_width) & STBTT__OVER_MASK] = pixels[i*stride_in_bytes];

  00353	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  00356	0f af 85 98 01
	00 00		 imul	 eax, DWORD PTR stride_in_bytes$[rbp]
  0035d	48 98		 cdqe
  0035f	8b 8d a0 01 00
	00		 mov	 ecx, DWORD PTR kernel_width$[rbp]
  00365	8b 55 64	 mov	 edx, DWORD PTR i$4[rbp]
  00368	03 d1		 add	 edx, ecx
  0036a	8b ca		 mov	 ecx, edx
  0036c	83 e1 07	 and	 ecx, 7
  0036f	8b c9		 mov	 ecx, ecx
  00371	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  00378	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  0037c	88 44 0d 08	 mov	 BYTE PTR buffer$[rbp+rcx], al

; 4122 :                pixels[i*stride_in_bytes] = (unsigned char) (total / 5);

  00380	33 d2		 xor	 edx, edx
  00382	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR total$5[rbp]
  00388	b9 05 00 00 00	 mov	 ecx, 5
  0038d	f7 f1		 div	 ecx
  0038f	8b 4d 64	 mov	 ecx, DWORD PTR i$4[rbp]
  00392	0f af 8d 98 01
	00 00		 imul	 ecx, DWORD PTR stride_in_bytes$[rbp]
  00399	48 63 c9	 movsxd	 rcx, ecx
  0039c	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  003a3	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 4123 :             }

  003a6	e9 5d ff ff ff	 jmp	 $LN16@stbtt__v_p
$LN17@stbtt__v_p:

; 4124 :             break;

  003ab	e9 ab 00 00 00	 jmp	 $LN5@stbtt__v_p
$LN32@stbtt__v_p:

; 4125 :          default:
; 4126 :             for (i=0; i <= safe_h; ++i) {

  003b0	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  003b7	eb 08		 jmp	 SHORT $LN21@stbtt__v_p
$LN19@stbtt__v_p:
  003b9	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  003bc	ff c0		 inc	 eax
  003be	89 45 64	 mov	 DWORD PTR i$4[rbp], eax
$LN21@stbtt__v_p:
  003c1	8b 45 24	 mov	 eax, DWORD PTR safe_h$[rbp]
  003c4	39 45 64	 cmp	 DWORD PTR i$4[rbp], eax
  003c7	0f 8f 8e 00 00
	00		 jg	 $LN20@stbtt__v_p

; 4127 :                total += pixels[i*stride_in_bytes] - buffer[i & STBTT__OVER_MASK];

  003cd	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  003d0	0f af 85 98 01
	00 00		 imul	 eax, DWORD PTR stride_in_bytes$[rbp]
  003d7	48 98		 cdqe
  003d9	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR pixels$[rbp]
  003e0	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  003e4	8b 4d 64	 mov	 ecx, DWORD PTR i$4[rbp]
  003e7	83 e1 07	 and	 ecx, 7
  003ea	48 63 c9	 movsxd	 rcx, ecx
  003ed	0f b6 4c 0d 08	 movzx	 ecx, BYTE PTR buffer$[rbp+rcx]
  003f2	2b c1		 sub	 eax, ecx
  003f4	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR total$5[rbp]
  003fa	03 c8		 add	 ecx, eax
  003fc	8b c1		 mov	 eax, ecx
  003fe	89 85 84 00 00
	00		 mov	 DWORD PTR total$5[rbp], eax

; 4128 :                buffer[(i+kernel_width) & STBTT__OVER_MASK] = pixels[i*stride_in_bytes];

  00404	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  00407	0f af 85 98 01
	00 00		 imul	 eax, DWORD PTR stride_in_bytes$[rbp]
  0040e	48 98		 cdqe
  00410	8b 8d a0 01 00
	00		 mov	 ecx, DWORD PTR kernel_width$[rbp]
  00416	8b 55 64	 mov	 edx, DWORD PTR i$4[rbp]
  00419	03 d1		 add	 edx, ecx
  0041b	8b ca		 mov	 ecx, edx
  0041d	83 e1 07	 and	 ecx, 7
  00420	8b c9		 mov	 ecx, ecx
  00422	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  00429	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  0042d	88 44 0d 08	 mov	 BYTE PTR buffer$[rbp+rcx], al

; 4129 :                pixels[i*stride_in_bytes] = (unsigned char) (total / kernel_width);

  00431	33 d2		 xor	 edx, edx
  00433	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR total$5[rbp]
  00439	f7 b5 a0 01 00
	00		 div	 DWORD PTR kernel_width$[rbp]
  0043f	8b 4d 64	 mov	 ecx, DWORD PTR i$4[rbp]
  00442	0f af 8d 98 01
	00 00		 imul	 ecx, DWORD PTR stride_in_bytes$[rbp]
  00449	48 63 c9	 movsxd	 rcx, ecx
  0044c	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  00453	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 4130 :             }

  00456	e9 5e ff ff ff	 jmp	 $LN19@stbtt__v_p
$LN20@stbtt__v_p:
$LN5@stbtt__v_p:

; 4131 :             break;
; 4132 :       }
; 4133 : 
; 4134 :       for (; i < h; ++i) {

  0045b	eb 08		 jmp	 SHORT $LN24@stbtt__v_p
$LN22@stbtt__v_p:
  0045d	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  00460	ff c0		 inc	 eax
  00462	89 45 64	 mov	 DWORD PTR i$4[rbp], eax
$LN24@stbtt__v_p:
  00465	8b 85 90 01 00
	00		 mov	 eax, DWORD PTR h$[rbp]
  0046b	39 45 64	 cmp	 DWORD PTR i$4[rbp], eax
  0046e	0f 8d 8a 00 00
	00		 jge	 $LN23@stbtt__v_p
$LN27@stbtt__v_p:

; 4135 :          STBTT_assert(pixels[i*stride_in_bytes] == 0);

  00474	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  00477	0f af 85 98 01
	00 00		 imul	 eax, DWORD PTR stride_in_bytes$[rbp]
  0047e	48 98		 cdqe
  00480	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR pixels$[rbp]
  00487	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0048b	85 c0		 test	 eax, eax
  0048d	74 22		 je	 SHORT $LN34@stbtt__v_p
  0048f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__v_prefilter@@YAXPEAEHHHI@Z@4JA
  00495	83 c0 34	 add	 eax, 52			; 00000034H
  00498	44 8b c0	 mov	 r8d, eax
  0049b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  004a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@LAPBLJ@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$CK?$AAs?$AAt?$AAr?$AAi?$AAd?$AAe?$AA_?$AAi?$AAn?$AA_?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  004a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004af	33 c0		 xor	 eax, eax
$LN34@stbtt__v_p:
  004b1	33 c0		 xor	 eax, eax
  004b3	85 c0		 test	 eax, eax
  004b5	75 bd		 jne	 SHORT $LN27@stbtt__v_p

; 4136 :          total -= buffer[i & STBTT__OVER_MASK];

  004b7	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  004ba	83 e0 07	 and	 eax, 7
  004bd	48 98		 cdqe
  004bf	0f b6 44 05 08	 movzx	 eax, BYTE PTR buffer$[rbp+rax]
  004c4	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR total$5[rbp]
  004ca	2b c8		 sub	 ecx, eax
  004cc	8b c1		 mov	 eax, ecx
  004ce	89 85 84 00 00
	00		 mov	 DWORD PTR total$5[rbp], eax

; 4137 :          pixels[i*stride_in_bytes] = (unsigned char) (total / kernel_width);

  004d4	33 d2		 xor	 edx, edx
  004d6	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR total$5[rbp]
  004dc	f7 b5 a0 01 00
	00		 div	 DWORD PTR kernel_width$[rbp]
  004e2	8b 4d 64	 mov	 ecx, DWORD PTR i$4[rbp]
  004e5	0f af 8d 98 01
	00 00		 imul	 ecx, DWORD PTR stride_in_bytes$[rbp]
  004ec	48 63 c9	 movsxd	 rcx, ecx
  004ef	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  004f6	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 4138 :       }

  004f9	e9 5f ff ff ff	 jmp	 $LN22@stbtt__v_p
$LN23@stbtt__v_p:

; 4139 : 
; 4140 :       pixels += 1;

  004fe	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR pixels$[rbp]
  00505	48 ff c0	 inc	 rax
  00508	48 89 85 80 01
	00 00		 mov	 QWORD PTR pixels$[rbp], rax

; 4141 :    }

  0050f	e9 62 fb ff ff	 jmp	 $LN2@stbtt__v_p
$LN3@stbtt__v_p:

; 4142 : }

  00514	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00518	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?stbtt__v_prefilter@@YAXPEAEHHHI@Z$rtcFrameData
  0051f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00524	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0052b	48 33 cd	 xor	 rcx, rbp
  0052e	e8 00 00 00 00	 call	 __security_check_cookie
  00533	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  0053a	5f		 pop	 rdi
  0053b	5d		 pop	 rbp
  0053c	c3		 ret	 0
?stbtt__v_prefilter@@YAXPEAEHHHI@Z ENDP			; stbtt__v_prefilter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__h_prefilter@@YAXPEAEHHHI@Z
_TEXT	SEGMENT
buffer$ = 8
safe_w$ = 36
j$ = 68
i$4 = 100
total$5 = 132
tv70 = 340
__$ArrayPad$ = 344
pixels$ = 384
w$ = 392
h$ = 400
stride_in_bytes$ = 408
kernel_width$ = 416
?stbtt__h_prefilter@@YAXPEAEHHHI@Z PROC			; stbtt__h_prefilter, COMDAT

; 4021 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00038	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003f	48 33 c5	 xor	 rax, rbp
  00042	48 89 85 58 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 4022 :    unsigned char buffer[STBTT_MAX_OVERSAMPLE];
; 4023 :    int safe_w = w - kernel_width;

  00049	8b 85 a0 01 00
	00		 mov	 eax, DWORD PTR kernel_width$[rbp]
  0004f	8b 8d 88 01 00
	00		 mov	 ecx, DWORD PTR w$[rbp]
  00055	2b c8		 sub	 ecx, eax
  00057	8b c1		 mov	 eax, ecx
  00059	89 45 24	 mov	 DWORD PTR safe_w$[rbp], eax

; 4024 :    int j;
; 4025 :    STBTT_memset(buffer, 0, STBTT_MAX_OVERSAMPLE); // suppress bogus warning from VS2013 -analyze

  0005c	41 b8 08 00 00
	00		 mov	 r8d, 8
  00062	33 d2		 xor	 edx, edx
  00064	48 8d 4d 08	 lea	 rcx, QWORD PTR buffer$[rbp]
  00068	e8 00 00 00 00	 call	 memset

; 4026 :    for (j=0; j < h; ++j) {

  0006d	c7 45 44 00 00
	00 00		 mov	 DWORD PTR j$[rbp], 0
  00074	eb 08		 jmp	 SHORT $LN4@stbtt__h_p
$LN2@stbtt__h_p:
  00076	8b 45 44	 mov	 eax, DWORD PTR j$[rbp]
  00079	ff c0		 inc	 eax
  0007b	89 45 44	 mov	 DWORD PTR j$[rbp], eax
$LN4@stbtt__h_p:
  0007e	8b 85 90 01 00
	00		 mov	 eax, DWORD PTR h$[rbp]
  00084	39 45 44	 cmp	 DWORD PTR j$[rbp], eax
  00087	0f 8d eb 03 00
	00		 jge	 $LN3@stbtt__h_p

; 4027 :       int i;
; 4028 :       unsigned int total;
; 4029 :       STBTT_memset(buffer, 0, kernel_width);

  0008d	8b 85 a0 01 00
	00		 mov	 eax, DWORD PTR kernel_width$[rbp]
  00093	44 8b c0	 mov	 r8d, eax
  00096	33 d2		 xor	 edx, edx
  00098	48 8d 4d 08	 lea	 rcx, QWORD PTR buffer$[rbp]
  0009c	e8 00 00 00 00	 call	 memset

; 4030 : 
; 4031 :       total = 0;

  000a1	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR total$5[rbp], 0

; 4032 : 
; 4033 :       // make kernel_width a constant in common cases so compiler can optimize out the divide
; 4034 :       switch (kernel_width) {

  000ab	8b 85 a0 01 00
	00		 mov	 eax, DWORD PTR kernel_width$[rbp]
  000b1	89 85 54 01 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  000b7	83 bd 54 01 00
	00 02		 cmp	 DWORD PTR tv70[rbp], 2
  000be	74 2c		 je	 SHORT $LN28@stbtt__h_p
  000c0	83 bd 54 01 00
	00 03		 cmp	 DWORD PTR tv70[rbp], 3
  000c7	0f 84 b3 00 00
	00		 je	 $LN29@stbtt__h_p
  000cd	83 bd 54 01 00
	00 04		 cmp	 DWORD PTR tv70[rbp], 4
  000d4	0f 84 3a 01 00
	00		 je	 $LN30@stbtt__h_p
  000da	83 bd 54 01 00
	00 05		 cmp	 DWORD PTR tv70[rbp], 5
  000e1	0f 84 c1 01 00
	00		 je	 $LN31@stbtt__h_p
  000e7	e9 50 02 00 00	 jmp	 $LN32@stbtt__h_p
$LN28@stbtt__h_p:

; 4035 :          case 2:
; 4036 :             for (i=0; i <= safe_w; ++i) {

  000ec	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  000f3	eb 08		 jmp	 SHORT $LN9@stbtt__h_p
$LN7@stbtt__h_p:
  000f5	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  000f8	ff c0		 inc	 eax
  000fa	89 45 64	 mov	 DWORD PTR i$4[rbp], eax
$LN9@stbtt__h_p:
  000fd	8b 45 24	 mov	 eax, DWORD PTR safe_w$[rbp]
  00100	39 45 64	 cmp	 DWORD PTR i$4[rbp], eax
  00103	7f 76		 jg	 SHORT $LN8@stbtt__h_p

; 4037 :                total += pixels[i] - buffer[i & STBTT__OVER_MASK];

  00105	48 63 45 64	 movsxd	 rax, DWORD PTR i$4[rbp]
  00109	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR pixels$[rbp]
  00110	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00114	8b 4d 64	 mov	 ecx, DWORD PTR i$4[rbp]
  00117	83 e1 07	 and	 ecx, 7
  0011a	48 63 c9	 movsxd	 rcx, ecx
  0011d	0f b6 4c 0d 08	 movzx	 ecx, BYTE PTR buffer$[rbp+rcx]
  00122	2b c1		 sub	 eax, ecx
  00124	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR total$5[rbp]
  0012a	03 c8		 add	 ecx, eax
  0012c	8b c1		 mov	 eax, ecx
  0012e	89 85 84 00 00
	00		 mov	 DWORD PTR total$5[rbp], eax

; 4038 :                buffer[(i+kernel_width) & STBTT__OVER_MASK] = pixels[i];

  00134	48 63 45 64	 movsxd	 rax, DWORD PTR i$4[rbp]
  00138	8b 8d a0 01 00
	00		 mov	 ecx, DWORD PTR kernel_width$[rbp]
  0013e	8b 55 64	 mov	 edx, DWORD PTR i$4[rbp]
  00141	03 d1		 add	 edx, ecx
  00143	8b ca		 mov	 ecx, edx
  00145	83 e1 07	 and	 ecx, 7
  00148	8b c9		 mov	 ecx, ecx
  0014a	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  00151	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00155	88 44 0d 08	 mov	 BYTE PTR buffer$[rbp+rcx], al

; 4039 :                pixels[i] = (unsigned char) (total / 2);

  00159	33 d2		 xor	 edx, edx
  0015b	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR total$5[rbp]
  00161	b9 02 00 00 00	 mov	 ecx, 2
  00166	f7 f1		 div	 ecx
  00168	48 63 4d 64	 movsxd	 rcx, DWORD PTR i$4[rbp]
  0016c	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  00173	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 4040 :             }

  00176	e9 7a ff ff ff	 jmp	 $LN7@stbtt__h_p
$LN8@stbtt__h_p:

; 4041 :             break;

  0017b	e9 4a 02 00 00	 jmp	 $LN5@stbtt__h_p
$LN29@stbtt__h_p:

; 4042 :          case 3:
; 4043 :             for (i=0; i <= safe_w; ++i) {

  00180	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  00187	eb 08		 jmp	 SHORT $LN12@stbtt__h_p
$LN10@stbtt__h_p:
  00189	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  0018c	ff c0		 inc	 eax
  0018e	89 45 64	 mov	 DWORD PTR i$4[rbp], eax
$LN12@stbtt__h_p:
  00191	8b 45 24	 mov	 eax, DWORD PTR safe_w$[rbp]
  00194	39 45 64	 cmp	 DWORD PTR i$4[rbp], eax
  00197	7f 76		 jg	 SHORT $LN11@stbtt__h_p

; 4044 :                total += pixels[i] - buffer[i & STBTT__OVER_MASK];

  00199	48 63 45 64	 movsxd	 rax, DWORD PTR i$4[rbp]
  0019d	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR pixels$[rbp]
  001a4	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  001a8	8b 4d 64	 mov	 ecx, DWORD PTR i$4[rbp]
  001ab	83 e1 07	 and	 ecx, 7
  001ae	48 63 c9	 movsxd	 rcx, ecx
  001b1	0f b6 4c 0d 08	 movzx	 ecx, BYTE PTR buffer$[rbp+rcx]
  001b6	2b c1		 sub	 eax, ecx
  001b8	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR total$5[rbp]
  001be	03 c8		 add	 ecx, eax
  001c0	8b c1		 mov	 eax, ecx
  001c2	89 85 84 00 00
	00		 mov	 DWORD PTR total$5[rbp], eax

; 4045 :                buffer[(i+kernel_width) & STBTT__OVER_MASK] = pixels[i];

  001c8	48 63 45 64	 movsxd	 rax, DWORD PTR i$4[rbp]
  001cc	8b 8d a0 01 00
	00		 mov	 ecx, DWORD PTR kernel_width$[rbp]
  001d2	8b 55 64	 mov	 edx, DWORD PTR i$4[rbp]
  001d5	03 d1		 add	 edx, ecx
  001d7	8b ca		 mov	 ecx, edx
  001d9	83 e1 07	 and	 ecx, 7
  001dc	8b c9		 mov	 ecx, ecx
  001de	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  001e5	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  001e9	88 44 0d 08	 mov	 BYTE PTR buffer$[rbp+rcx], al

; 4046 :                pixels[i] = (unsigned char) (total / 3);

  001ed	33 d2		 xor	 edx, edx
  001ef	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR total$5[rbp]
  001f5	b9 03 00 00 00	 mov	 ecx, 3
  001fa	f7 f1		 div	 ecx
  001fc	48 63 4d 64	 movsxd	 rcx, DWORD PTR i$4[rbp]
  00200	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  00207	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 4047 :             }

  0020a	e9 7a ff ff ff	 jmp	 $LN10@stbtt__h_p
$LN11@stbtt__h_p:

; 4048 :             break;

  0020f	e9 b6 01 00 00	 jmp	 $LN5@stbtt__h_p
$LN30@stbtt__h_p:

; 4049 :          case 4:
; 4050 :             for (i=0; i <= safe_w; ++i) {

  00214	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  0021b	eb 08		 jmp	 SHORT $LN15@stbtt__h_p
$LN13@stbtt__h_p:
  0021d	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  00220	ff c0		 inc	 eax
  00222	89 45 64	 mov	 DWORD PTR i$4[rbp], eax
$LN15@stbtt__h_p:
  00225	8b 45 24	 mov	 eax, DWORD PTR safe_w$[rbp]
  00228	39 45 64	 cmp	 DWORD PTR i$4[rbp], eax
  0022b	7f 76		 jg	 SHORT $LN14@stbtt__h_p

; 4051 :                total += pixels[i] - buffer[i & STBTT__OVER_MASK];

  0022d	48 63 45 64	 movsxd	 rax, DWORD PTR i$4[rbp]
  00231	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR pixels$[rbp]
  00238	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0023c	8b 4d 64	 mov	 ecx, DWORD PTR i$4[rbp]
  0023f	83 e1 07	 and	 ecx, 7
  00242	48 63 c9	 movsxd	 rcx, ecx
  00245	0f b6 4c 0d 08	 movzx	 ecx, BYTE PTR buffer$[rbp+rcx]
  0024a	2b c1		 sub	 eax, ecx
  0024c	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR total$5[rbp]
  00252	03 c8		 add	 ecx, eax
  00254	8b c1		 mov	 eax, ecx
  00256	89 85 84 00 00
	00		 mov	 DWORD PTR total$5[rbp], eax

; 4052 :                buffer[(i+kernel_width) & STBTT__OVER_MASK] = pixels[i];

  0025c	48 63 45 64	 movsxd	 rax, DWORD PTR i$4[rbp]
  00260	8b 8d a0 01 00
	00		 mov	 ecx, DWORD PTR kernel_width$[rbp]
  00266	8b 55 64	 mov	 edx, DWORD PTR i$4[rbp]
  00269	03 d1		 add	 edx, ecx
  0026b	8b ca		 mov	 ecx, edx
  0026d	83 e1 07	 and	 ecx, 7
  00270	8b c9		 mov	 ecx, ecx
  00272	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  00279	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  0027d	88 44 0d 08	 mov	 BYTE PTR buffer$[rbp+rcx], al

; 4053 :                pixels[i] = (unsigned char) (total / 4);

  00281	33 d2		 xor	 edx, edx
  00283	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR total$5[rbp]
  00289	b9 04 00 00 00	 mov	 ecx, 4
  0028e	f7 f1		 div	 ecx
  00290	48 63 4d 64	 movsxd	 rcx, DWORD PTR i$4[rbp]
  00294	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  0029b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 4054 :             }

  0029e	e9 7a ff ff ff	 jmp	 $LN13@stbtt__h_p
$LN14@stbtt__h_p:

; 4055 :             break;

  002a3	e9 22 01 00 00	 jmp	 $LN5@stbtt__h_p
$LN31@stbtt__h_p:

; 4056 :          case 5:
; 4057 :             for (i=0; i <= safe_w; ++i) {

  002a8	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  002af	eb 08		 jmp	 SHORT $LN18@stbtt__h_p
$LN16@stbtt__h_p:
  002b1	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  002b4	ff c0		 inc	 eax
  002b6	89 45 64	 mov	 DWORD PTR i$4[rbp], eax
$LN18@stbtt__h_p:
  002b9	8b 45 24	 mov	 eax, DWORD PTR safe_w$[rbp]
  002bc	39 45 64	 cmp	 DWORD PTR i$4[rbp], eax
  002bf	7f 76		 jg	 SHORT $LN17@stbtt__h_p

; 4058 :                total += pixels[i] - buffer[i & STBTT__OVER_MASK];

  002c1	48 63 45 64	 movsxd	 rax, DWORD PTR i$4[rbp]
  002c5	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR pixels$[rbp]
  002cc	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  002d0	8b 4d 64	 mov	 ecx, DWORD PTR i$4[rbp]
  002d3	83 e1 07	 and	 ecx, 7
  002d6	48 63 c9	 movsxd	 rcx, ecx
  002d9	0f b6 4c 0d 08	 movzx	 ecx, BYTE PTR buffer$[rbp+rcx]
  002de	2b c1		 sub	 eax, ecx
  002e0	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR total$5[rbp]
  002e6	03 c8		 add	 ecx, eax
  002e8	8b c1		 mov	 eax, ecx
  002ea	89 85 84 00 00
	00		 mov	 DWORD PTR total$5[rbp], eax

; 4059 :                buffer[(i+kernel_width) & STBTT__OVER_MASK] = pixels[i];

  002f0	48 63 45 64	 movsxd	 rax, DWORD PTR i$4[rbp]
  002f4	8b 8d a0 01 00
	00		 mov	 ecx, DWORD PTR kernel_width$[rbp]
  002fa	8b 55 64	 mov	 edx, DWORD PTR i$4[rbp]
  002fd	03 d1		 add	 edx, ecx
  002ff	8b ca		 mov	 ecx, edx
  00301	83 e1 07	 and	 ecx, 7
  00304	8b c9		 mov	 ecx, ecx
  00306	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  0030d	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00311	88 44 0d 08	 mov	 BYTE PTR buffer$[rbp+rcx], al

; 4060 :                pixels[i] = (unsigned char) (total / 5);

  00315	33 d2		 xor	 edx, edx
  00317	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR total$5[rbp]
  0031d	b9 05 00 00 00	 mov	 ecx, 5
  00322	f7 f1		 div	 ecx
  00324	48 63 4d 64	 movsxd	 rcx, DWORD PTR i$4[rbp]
  00328	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  0032f	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 4061 :             }

  00332	e9 7a ff ff ff	 jmp	 $LN16@stbtt__h_p
$LN17@stbtt__h_p:

; 4062 :             break;

  00337	e9 8e 00 00 00	 jmp	 $LN5@stbtt__h_p
$LN32@stbtt__h_p:

; 4063 :          default:
; 4064 :             for (i=0; i <= safe_w; ++i) {

  0033c	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  00343	eb 08		 jmp	 SHORT $LN21@stbtt__h_p
$LN19@stbtt__h_p:
  00345	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  00348	ff c0		 inc	 eax
  0034a	89 45 64	 mov	 DWORD PTR i$4[rbp], eax
$LN21@stbtt__h_p:
  0034d	8b 45 24	 mov	 eax, DWORD PTR safe_w$[rbp]
  00350	39 45 64	 cmp	 DWORD PTR i$4[rbp], eax
  00353	7f 75		 jg	 SHORT $LN20@stbtt__h_p

; 4065 :                total += pixels[i] - buffer[i & STBTT__OVER_MASK];

  00355	48 63 45 64	 movsxd	 rax, DWORD PTR i$4[rbp]
  00359	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR pixels$[rbp]
  00360	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00364	8b 4d 64	 mov	 ecx, DWORD PTR i$4[rbp]
  00367	83 e1 07	 and	 ecx, 7
  0036a	48 63 c9	 movsxd	 rcx, ecx
  0036d	0f b6 4c 0d 08	 movzx	 ecx, BYTE PTR buffer$[rbp+rcx]
  00372	2b c1		 sub	 eax, ecx
  00374	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR total$5[rbp]
  0037a	03 c8		 add	 ecx, eax
  0037c	8b c1		 mov	 eax, ecx
  0037e	89 85 84 00 00
	00		 mov	 DWORD PTR total$5[rbp], eax

; 4066 :                buffer[(i+kernel_width) & STBTT__OVER_MASK] = pixels[i];

  00384	48 63 45 64	 movsxd	 rax, DWORD PTR i$4[rbp]
  00388	8b 8d a0 01 00
	00		 mov	 ecx, DWORD PTR kernel_width$[rbp]
  0038e	8b 55 64	 mov	 edx, DWORD PTR i$4[rbp]
  00391	03 d1		 add	 edx, ecx
  00393	8b ca		 mov	 ecx, edx
  00395	83 e1 07	 and	 ecx, 7
  00398	8b c9		 mov	 ecx, ecx
  0039a	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  003a1	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  003a5	88 44 0d 08	 mov	 BYTE PTR buffer$[rbp+rcx], al

; 4067 :                pixels[i] = (unsigned char) (total / kernel_width);

  003a9	33 d2		 xor	 edx, edx
  003ab	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR total$5[rbp]
  003b1	f7 b5 a0 01 00
	00		 div	 DWORD PTR kernel_width$[rbp]
  003b7	48 63 4d 64	 movsxd	 rcx, DWORD PTR i$4[rbp]
  003bb	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  003c2	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 4068 :             }

  003c5	e9 7b ff ff ff	 jmp	 $LN19@stbtt__h_p
$LN20@stbtt__h_p:
$LN5@stbtt__h_p:

; 4069 :             break;
; 4070 :       }
; 4071 : 
; 4072 :       for (; i < w; ++i) {

  003ca	eb 08		 jmp	 SHORT $LN24@stbtt__h_p
$LN22@stbtt__h_p:
  003cc	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  003cf	ff c0		 inc	 eax
  003d1	89 45 64	 mov	 DWORD PTR i$4[rbp], eax
$LN24@stbtt__h_p:
  003d4	8b 85 88 01 00
	00		 mov	 eax, DWORD PTR w$[rbp]
  003da	39 45 64	 cmp	 DWORD PTR i$4[rbp], eax
  003dd	7d 79		 jge	 SHORT $LN23@stbtt__h_p
$LN27@stbtt__h_p:

; 4073 :          STBTT_assert(pixels[i] == 0);

  003df	48 63 45 64	 movsxd	 rax, DWORD PTR i$4[rbp]
  003e3	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR pixels$[rbp]
  003ea	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  003ee	85 c0		 test	 eax, eax
  003f0	74 22		 je	 SHORT $LN34@stbtt__h_p
  003f2	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__h_prefilter@@YAXPEAEHHHI@Z@4JA
  003f8	83 c0 34	 add	 eax, 52			; 00000034H
  003fb	44 8b c0	 mov	 r8d, eax
  003fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00405	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@BDJAMAMF@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  0040c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00412	33 c0		 xor	 eax, eax
$LN34@stbtt__h_p:
  00414	33 c0		 xor	 eax, eax
  00416	85 c0		 test	 eax, eax
  00418	75 c5		 jne	 SHORT $LN27@stbtt__h_p

; 4074 :          total -= buffer[i & STBTT__OVER_MASK];

  0041a	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  0041d	83 e0 07	 and	 eax, 7
  00420	48 98		 cdqe
  00422	0f b6 44 05 08	 movzx	 eax, BYTE PTR buffer$[rbp+rax]
  00427	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR total$5[rbp]
  0042d	2b c8		 sub	 ecx, eax
  0042f	8b c1		 mov	 eax, ecx
  00431	89 85 84 00 00
	00		 mov	 DWORD PTR total$5[rbp], eax

; 4075 :          pixels[i] = (unsigned char) (total / kernel_width);

  00437	33 d2		 xor	 edx, edx
  00439	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR total$5[rbp]
  0043f	f7 b5 a0 01 00
	00		 div	 DWORD PTR kernel_width$[rbp]
  00445	48 63 4d 64	 movsxd	 rcx, DWORD PTR i$4[rbp]
  00449	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR pixels$[rbp]
  00450	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 4076 :       }

  00453	e9 74 ff ff ff	 jmp	 $LN22@stbtt__h_p
$LN23@stbtt__h_p:

; 4077 : 
; 4078 :       pixels += stride_in_bytes;

  00458	48 63 85 98 01
	00 00		 movsxd	 rax, DWORD PTR stride_in_bytes$[rbp]
  0045f	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR pixels$[rbp]
  00466	48 03 c8	 add	 rcx, rax
  00469	48 8b c1	 mov	 rax, rcx
  0046c	48 89 85 80 01
	00 00		 mov	 QWORD PTR pixels$[rbp], rax

; 4079 :    }

  00473	e9 fe fb ff ff	 jmp	 $LN2@stbtt__h_p
$LN3@stbtt__h_p:

; 4080 : }

  00478	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0047c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?stbtt__h_prefilter@@YAXPEAEHHHI@Z$rtcFrameData
  00483	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00488	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0048f	48 33 cd	 xor	 rcx, rbp
  00492	e8 00 00 00 00	 call	 __security_check_cookie
  00497	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  0049e	5f		 pop	 rdi
  0049f	5d		 pop	 rbp
  004a0	c3		 ret	 0
?stbtt__h_prefilter@@YAXPEAEHHHI@Z ENDP			; stbtt__h_prefilter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z
_TEXT	SEGMENT
points$ = 8
num_points$ = 36
objspace_flatness_squared$ = 68
i$ = 100
n$ = 132
start$ = 164
pass$ = 196
x$4 = 228
y$5 = 260
tv167 = 468
tv149 = 468
tv95 = 468
__$ArrayPad$ = 472
vertices$ = 528
num_verts$ = 536
objspace_flatness$ = 544
contour_lengths$ = 552
num_contours$ = 560
userdata$ = 568
?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z PROC ; stbtt_FlattenCurves, COMDAT

; 3627 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000b	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 58 02
	00 00		 sub	 rsp, 600		; 00000258H
  0001d	48 8d 6c 24 60	 lea	 rbp, QWORD PTR [rsp+96]
  00022	0f 29 b5 e0 01
	00 00		 movaps	 XMMWORD PTR [rbp+480], xmm6
  00029	48 8b fc	 mov	 rdi, rsp
  0002c	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00031	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00036	f3 ab		 rep stosd
  00038	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR [rsp+632]
  00040	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00047	48 33 c5	 xor	 rax, rbp
  0004a	48 89 85 d8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3628 :    stbtt__point *points=0;

  00051	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR points$[rbp], 0

; 3629 :    int num_points=0;

  00059	c7 45 24 00 00
	00 00		 mov	 DWORD PTR num_points$[rbp], 0

; 3630 : 
; 3631 :    float objspace_flatness_squared = objspace_flatness * objspace_flatness;

  00060	f3 0f 10 85 20
	02 00 00	 movss	 xmm0, DWORD PTR objspace_flatness$[rbp]
  00068	f3 0f 59 85 20
	02 00 00	 mulss	 xmm0, DWORD PTR objspace_flatness$[rbp]
  00070	f3 0f 11 45 44	 movss	 DWORD PTR objspace_flatness_squared$[rbp], xmm0

; 3632 :    int i,n=0,start=0, pass;

  00075	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR n$[rbp], 0
  0007f	c7 85 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR start$[rbp], 0

; 3633 : 
; 3634 :    // count how many "moves" there are to get the contour count
; 3635 :    for (i=0; i < num_verts; ++i)

  00089	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00090	eb 08		 jmp	 SHORT $LN4@stbtt_Flat
$LN2@stbtt_Flat:
  00092	8b 45 64	 mov	 eax, DWORD PTR i$[rbp]
  00095	ff c0		 inc	 eax
  00097	89 45 64	 mov	 DWORD PTR i$[rbp], eax
$LN4@stbtt_Flat:
  0009a	8b 85 18 02 00
	00		 mov	 eax, DWORD PTR num_verts$[rbp]
  000a0	39 45 64	 cmp	 DWORD PTR i$[rbp], eax
  000a3	7d 29		 jge	 SHORT $LN3@stbtt_Flat

; 3636 :       if (vertices[i].type == STBTT_vmove)

  000a5	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  000a9	48 6b c0 0e	 imul	 rax, rax, 14
  000ad	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  000b4	0f b6 44 01 0c	 movzx	 eax, BYTE PTR [rcx+rax+12]
  000b9	83 f8 01	 cmp	 eax, 1
  000bc	75 0e		 jne	 SHORT $LN13@stbtt_Flat

; 3637 :          ++n;

  000be	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  000c4	ff c0		 inc	 eax
  000c6	89 85 84 00 00
	00		 mov	 DWORD PTR n$[rbp], eax
$LN13@stbtt_Flat:

; 3638 : 
; 3639 :    *num_contours = n;

  000cc	eb c4		 jmp	 SHORT $LN2@stbtt_Flat
$LN3@stbtt_Flat:
  000ce	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR num_contours$[rbp]
  000d5	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR n$[rbp]
  000db	89 08		 mov	 DWORD PTR [rax], ecx

; 3640 :    if (n == 0) return 0;

  000dd	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR n$[rbp], 0
  000e4	75 07		 jne	 SHORT $LN14@stbtt_Flat
  000e6	33 c0		 xor	 eax, eax
  000e8	e9 c5 04 00 00	 jmp	 $LN1@stbtt_Flat
$LN14@stbtt_Flat:

; 3641 : 
; 3642 :    *contour_lengths = (int *) STBTT_malloc(sizeof(**contour_lengths) * n, userdata);

  000ed	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR n$[rbp]
  000f4	48 c1 e0 02	 shl	 rax, 2
  000f8	48 8b c8	 mov	 rcx, rax
  000fb	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00100	48 8b 8d 28 02
	00 00		 mov	 rcx, QWORD PTR contour_lengths$[rbp]
  00107	48 89 01	 mov	 QWORD PTR [rcx], rax

; 3643 : 
; 3644 :    if (*contour_lengths == 0) {

  0010a	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR contour_lengths$[rbp]
  00111	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00115	75 14		 jne	 SHORT $LN15@stbtt_Flat

; 3645 :       *num_contours = 0;

  00117	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR num_contours$[rbp]
  0011e	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 3646 :       return 0;

  00124	33 c0		 xor	 eax, eax
  00126	e9 87 04 00 00	 jmp	 $LN1@stbtt_Flat
$LN15@stbtt_Flat:

; 3647 :    }
; 3648 : 
; 3649 :    // make two passes through the points so we don't need to realloc
; 3650 :    for (pass=0; pass < 2; ++pass) {

  0012b	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR pass$[rbp], 0
  00135	eb 0e		 jmp	 SHORT $LN7@stbtt_Flat
$LN5@stbtt_Flat:
  00137	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR pass$[rbp]
  0013d	ff c0		 inc	 eax
  0013f	89 85 c4 00 00
	00		 mov	 DWORD PTR pass$[rbp], eax
$LN7@stbtt_Flat:
  00145	83 bd c4 00 00
	00 02		 cmp	 DWORD PTR pass$[rbp], 2
  0014c	0f 8d 25 04 00
	00		 jge	 $LN6@stbtt_Flat

; 3651 :       float x=0,y=0;

  00152	0f 57 c0	 xorps	 xmm0, xmm0
  00155	f3 0f 11 85 e4
	00 00 00	 movss	 DWORD PTR x$4[rbp], xmm0
  0015d	0f 57 c0	 xorps	 xmm0, xmm0
  00160	f3 0f 11 85 04
	01 00 00	 movss	 DWORD PTR y$5[rbp], xmm0

; 3652 :       if (pass == 1) {

  00168	83 bd c4 00 00
	00 01		 cmp	 DWORD PTR pass$[rbp], 1
  0016f	75 25		 jne	 SHORT $LN16@stbtt_Flat

; 3653 :          points = (stbtt__point *) STBTT_malloc(num_points * sizeof(points[0]), userdata);

  00171	48 63 45 24	 movsxd	 rax, DWORD PTR num_points$[rbp]
  00175	48 c1 e0 03	 shl	 rax, 3
  00179	48 8b c8	 mov	 rcx, rax
  0017c	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00181	48 89 45 08	 mov	 QWORD PTR points$[rbp], rax

; 3654 :          if (points == NULL) goto error;

  00185	48 83 7d 08 00	 cmp	 QWORD PTR points$[rbp], 0
  0018a	75 0a		 jne	 SHORT $LN17@stbtt_Flat
  0018c	e9 ec 03 00 00	 jmp	 $LN18@stbtt_Flat
  00191	e9 e7 03 00 00	 jmp	 $error$25
$LN17@stbtt_Flat:
$LN16@stbtt_Flat:

; 3655 :       }
; 3656 :       num_points = 0;

  00196	c7 45 24 00 00
	00 00		 mov	 DWORD PTR num_points$[rbp], 0

; 3657 :       n= -1;

  0019d	c7 85 84 00 00
	00 ff ff ff ff	 mov	 DWORD PTR n$[rbp], -1

; 3658 :       for (i=0; i < num_verts; ++i) {

  001a7	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  001ae	eb 08		 jmp	 SHORT $LN10@stbtt_Flat
$LN8@stbtt_Flat:
  001b0	8b 45 64	 mov	 eax, DWORD PTR i$[rbp]
  001b3	ff c0		 inc	 eax
  001b5	89 45 64	 mov	 DWORD PTR i$[rbp], eax
$LN10@stbtt_Flat:
  001b8	8b 85 18 02 00
	00		 mov	 eax, DWORD PTR num_verts$[rbp]
  001be	39 45 64	 cmp	 DWORD PTR i$[rbp], eax
  001c1	0f 8d 8a 03 00
	00		 jge	 $LN9@stbtt_Flat

; 3659 :          switch (vertices[i].type) {

  001c7	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  001cb	48 6b c0 0e	 imul	 rax, rax, 14
  001cf	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  001d6	0f b6 44 01 0c	 movzx	 eax, BYTE PTR [rcx+rax+12]
  001db	88 85 d4 01 00
	00		 mov	 BYTE PTR tv95[rbp], al
  001e1	80 bd d4 01 00
	00 01		 cmp	 BYTE PTR tv95[rbp], 1
  001e8	74 2c		 je	 SHORT $LN19@stbtt_Flat
  001ea	80 bd d4 01 00
	00 02		 cmp	 BYTE PTR tv95[rbp], 2
  001f1	0f 84 d4 00 00
	00		 je	 $LN21@stbtt_Flat
  001f7	80 bd d4 01 00
	00 03		 cmp	 BYTE PTR tv95[rbp], 3
  001fe	0f 84 3b 01 00
	00		 je	 $LN22@stbtt_Flat
  00204	80 bd d4 01 00
	00 04		 cmp	 BYTE PTR tv95[rbp], 4
  0020b	0f 84 19 02 00
	00		 je	 $LN23@stbtt_Flat
  00211	e9 36 03 00 00	 jmp	 $LN11@stbtt_Flat
$LN19@stbtt_Flat:

; 3660 :             case STBTT_vmove:
; 3661 :                // start the next contour
; 3662 :                if (n >= 0)

  00216	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR n$[rbp], 0
  0021d	7c 21		 jl	 SHORT $LN20@stbtt_Flat

; 3663 :                   (*contour_lengths)[n] = num_points - start;

  0021f	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR start$[rbp]
  00225	8b 4d 24	 mov	 ecx, DWORD PTR num_points$[rbp]
  00228	2b c8		 sub	 ecx, eax
  0022a	8b c1		 mov	 eax, ecx
  0022c	48 63 8d 84 00
	00 00		 movsxd	 rcx, DWORD PTR n$[rbp]
  00233	48 8b 95 28 02
	00 00		 mov	 rdx, QWORD PTR contour_lengths$[rbp]
  0023a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0023d	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
$LN20@stbtt_Flat:

; 3664 :                ++n;

  00240	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  00246	ff c0		 inc	 eax
  00248	89 85 84 00 00
	00		 mov	 DWORD PTR n$[rbp], eax

; 3665 :                start = num_points;

  0024e	8b 45 24	 mov	 eax, DWORD PTR num_points$[rbp]
  00251	89 85 a4 00 00
	00		 mov	 DWORD PTR start$[rbp], eax

; 3666 : 
; 3667 :                x = vertices[i].x, y = vertices[i].y;

  00257	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  0025b	48 6b c0 0e	 imul	 rax, rax, 14
  0025f	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  00266	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  0026a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0026e	f3 0f 11 85 e4
	00 00 00	 movss	 DWORD PTR x$4[rbp], xmm0
  00276	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  0027a	48 6b c0 0e	 imul	 rax, rax, 14
  0027e	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  00285	0f bf 44 01 02	 movsx	 eax, WORD PTR [rcx+rax+2]
  0028a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0028e	f3 0f 11 85 04
	01 00 00	 movss	 DWORD PTR y$5[rbp], xmm0

; 3668 :                stbtt__add_point(points, num_points++, x,y);

  00296	8b 45 24	 mov	 eax, DWORD PTR num_points$[rbp]
  00299	89 85 d4 01 00
	00		 mov	 DWORD PTR tv149[rbp], eax
  0029f	8b 45 24	 mov	 eax, DWORD PTR num_points$[rbp]
  002a2	ff c0		 inc	 eax
  002a4	89 45 24	 mov	 DWORD PTR num_points$[rbp], eax
  002a7	f3 0f 10 9d 04
	01 00 00	 movss	 xmm3, DWORD PTR y$5[rbp]
  002af	f3 0f 10 95 e4
	00 00 00	 movss	 xmm2, DWORD PTR x$4[rbp]
  002b7	8b 95 d4 01 00
	00		 mov	 edx, DWORD PTR tv149[rbp]
  002bd	48 8b 4d 08	 mov	 rcx, QWORD PTR points$[rbp]
  002c1	e8 00 00 00 00	 call	 ?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point

; 3669 :                break;

  002c6	e9 81 02 00 00	 jmp	 $LN11@stbtt_Flat
$LN21@stbtt_Flat:

; 3670 :             case STBTT_vline:
; 3671 :                x = vertices[i].x, y = vertices[i].y;

  002cb	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  002cf	48 6b c0 0e	 imul	 rax, rax, 14
  002d3	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  002da	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  002de	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  002e2	f3 0f 11 85 e4
	00 00 00	 movss	 DWORD PTR x$4[rbp], xmm0
  002ea	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  002ee	48 6b c0 0e	 imul	 rax, rax, 14
  002f2	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  002f9	0f bf 44 01 02	 movsx	 eax, WORD PTR [rcx+rax+2]
  002fe	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00302	f3 0f 11 85 04
	01 00 00	 movss	 DWORD PTR y$5[rbp], xmm0

; 3672 :                stbtt__add_point(points, num_points++, x, y);

  0030a	8b 45 24	 mov	 eax, DWORD PTR num_points$[rbp]
  0030d	89 85 d4 01 00
	00		 mov	 DWORD PTR tv167[rbp], eax
  00313	8b 45 24	 mov	 eax, DWORD PTR num_points$[rbp]
  00316	ff c0		 inc	 eax
  00318	89 45 24	 mov	 DWORD PTR num_points$[rbp], eax
  0031b	f3 0f 10 9d 04
	01 00 00	 movss	 xmm3, DWORD PTR y$5[rbp]
  00323	f3 0f 10 95 e4
	00 00 00	 movss	 xmm2, DWORD PTR x$4[rbp]
  0032b	8b 95 d4 01 00
	00		 mov	 edx, DWORD PTR tv167[rbp]
  00331	48 8b 4d 08	 mov	 rcx, QWORD PTR points$[rbp]
  00335	e8 00 00 00 00	 call	 ?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point

; 3673 :                break;

  0033a	e9 0d 02 00 00	 jmp	 $LN11@stbtt_Flat
$LN22@stbtt_Flat:

; 3674 :             case STBTT_vcurve:
; 3675 :                stbtt__tesselate_curve(points, &num_points, x,y,

  0033f	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  00343	48 6b c0 0e	 imul	 rax, rax, 14
  00347	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  0034e	0f bf 44 01 02	 movsx	 eax, WORD PTR [rcx+rax+2]
  00353	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00357	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  0035b	48 6b c0 0e	 imul	 rax, rax, 14
  0035f	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  00366	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  0036a	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  0036e	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  00372	48 6b c0 0e	 imul	 rax, rax, 14
  00376	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  0037d	0f bf 44 01 06	 movsx	 eax, WORD PTR [rcx+rax+6]
  00382	f3 0f 2a d0	 cvtsi2ss xmm2, eax
  00386	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  0038a	48 6b c0 0e	 imul	 rax, rax, 14
  0038e	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  00395	0f bf 44 01 04	 movsx	 eax, WORD PTR [rcx+rax+4]
  0039a	f3 0f 2a d8	 cvtsi2ss xmm3, eax
  0039e	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR [rsp+72], 0
  003a6	f3 0f 10 65 44	 movss	 xmm4, DWORD PTR objspace_flatness_squared$[rbp]
  003ab	f3 0f 11 64 24
	40		 movss	 DWORD PTR [rsp+64], xmm4
  003b1	f3 0f 11 44 24
	38		 movss	 DWORD PTR [rsp+56], xmm0
  003b7	f3 0f 11 4c 24
	30		 movss	 DWORD PTR [rsp+48], xmm1
  003bd	f3 0f 11 54 24
	28		 movss	 DWORD PTR [rsp+40], xmm2
  003c3	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  003c9	f3 0f 10 9d 04
	01 00 00	 movss	 xmm3, DWORD PTR y$5[rbp]
  003d1	f3 0f 10 95 e4
	00 00 00	 movss	 xmm2, DWORD PTR x$4[rbp]
  003d9	48 8d 55 24	 lea	 rdx, QWORD PTR num_points$[rbp]
  003dd	48 8b 4d 08	 mov	 rcx, QWORD PTR points$[rbp]
  003e1	e8 00 00 00 00	 call	 ?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ; stbtt__tesselate_curve

; 3676 :                                         vertices[i].cx, vertices[i].cy,
; 3677 :                                         vertices[i].x,  vertices[i].y,
; 3678 :                                         objspace_flatness_squared, 0);
; 3679 :                x = vertices[i].x, y = vertices[i].y;

  003e6	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  003ea	48 6b c0 0e	 imul	 rax, rax, 14
  003ee	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  003f5	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  003f9	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  003fd	f3 0f 11 85 e4
	00 00 00	 movss	 DWORD PTR x$4[rbp], xmm0
  00405	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  00409	48 6b c0 0e	 imul	 rax, rax, 14
  0040d	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  00414	0f bf 44 01 02	 movsx	 eax, WORD PTR [rcx+rax+2]
  00419	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0041d	f3 0f 11 85 04
	01 00 00	 movss	 DWORD PTR y$5[rbp], xmm0

; 3680 :                break;

  00425	e9 22 01 00 00	 jmp	 $LN11@stbtt_Flat
$LN23@stbtt_Flat:

; 3681 :             case STBTT_vcubic:
; 3682 :                stbtt__tesselate_cubic(points, &num_points, x,y,

  0042a	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  0042e	48 6b c0 0e	 imul	 rax, rax, 14
  00432	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  00439	0f bf 44 01 02	 movsx	 eax, WORD PTR [rcx+rax+2]
  0043e	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00442	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  00446	48 6b c0 0e	 imul	 rax, rax, 14
  0044a	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  00451	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  00455	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00459	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  0045d	48 6b c0 0e	 imul	 rax, rax, 14
  00461	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  00468	0f bf 44 01 0a	 movsx	 eax, WORD PTR [rcx+rax+10]
  0046d	f3 0f 2a d0	 cvtsi2ss xmm2, eax
  00471	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  00475	48 6b c0 0e	 imul	 rax, rax, 14
  00479	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  00480	0f bf 44 01 08	 movsx	 eax, WORD PTR [rcx+rax+8]
  00485	f3 0f 2a d8	 cvtsi2ss xmm3, eax
  00489	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  0048d	48 6b c0 0e	 imul	 rax, rax, 14
  00491	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  00498	0f bf 44 01 06	 movsx	 eax, WORD PTR [rcx+rax+6]
  0049d	f3 0f 2a e0	 cvtsi2ss xmm4, eax
  004a1	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  004a5	48 6b c0 0e	 imul	 rax, rax, 14
  004a9	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  004b0	0f bf 44 01 04	 movsx	 eax, WORD PTR [rcx+rax+4]
  004b5	f3 0f 2a e8	 cvtsi2ss xmm5, eax
  004b9	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR [rsp+88], 0
  004c1	f3 0f 10 75 44	 movss	 xmm6, DWORD PTR objspace_flatness_squared$[rbp]
  004c6	f3 0f 11 74 24
	50		 movss	 DWORD PTR [rsp+80], xmm6
  004cc	f3 0f 11 44 24
	48		 movss	 DWORD PTR [rsp+72], xmm0
  004d2	f3 0f 11 4c 24
	40		 movss	 DWORD PTR [rsp+64], xmm1
  004d8	f3 0f 11 54 24
	38		 movss	 DWORD PTR [rsp+56], xmm2
  004de	f3 0f 11 5c 24
	30		 movss	 DWORD PTR [rsp+48], xmm3
  004e4	f3 0f 11 64 24
	28		 movss	 DWORD PTR [rsp+40], xmm4
  004ea	f3 0f 11 6c 24
	20		 movss	 DWORD PTR [rsp+32], xmm5
  004f0	f3 0f 10 9d 04
	01 00 00	 movss	 xmm3, DWORD PTR y$5[rbp]
  004f8	f3 0f 10 95 e4
	00 00 00	 movss	 xmm2, DWORD PTR x$4[rbp]
  00500	48 8d 55 24	 lea	 rdx, QWORD PTR num_points$[rbp]
  00504	48 8b 4d 08	 mov	 rcx, QWORD PTR points$[rbp]
  00508	e8 00 00 00 00	 call	 ?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ; stbtt__tesselate_cubic

; 3683 :                                         vertices[i].cx, vertices[i].cy,
; 3684 :                                         vertices[i].cx1, vertices[i].cy1,
; 3685 :                                         vertices[i].x,  vertices[i].y,
; 3686 :                                         objspace_flatness_squared, 0);
; 3687 :                x = vertices[i].x, y = vertices[i].y;

  0050d	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  00511	48 6b c0 0e	 imul	 rax, rax, 14
  00515	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  0051c	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  00520	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00524	f3 0f 11 85 e4
	00 00 00	 movss	 DWORD PTR x$4[rbp], xmm0
  0052c	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  00530	48 6b c0 0e	 imul	 rax, rax, 14
  00534	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  0053b	0f bf 44 01 02	 movsx	 eax, WORD PTR [rcx+rax+2]
  00540	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00544	f3 0f 11 85 04
	01 00 00	 movss	 DWORD PTR y$5[rbp], xmm0
$LN11@stbtt_Flat:

; 3688 :                break;
; 3689 :          }
; 3690 :       }

  0054c	e9 5f fc ff ff	 jmp	 $LN8@stbtt_Flat
$LN9@stbtt_Flat:

; 3691 :       (*contour_lengths)[n] = num_points - start;

  00551	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR start$[rbp]
  00557	8b 4d 24	 mov	 ecx, DWORD PTR num_points$[rbp]
  0055a	2b c8		 sub	 ecx, eax
  0055c	8b c1		 mov	 eax, ecx
  0055e	48 63 8d 84 00
	00 00		 movsxd	 rcx, DWORD PTR n$[rbp]
  00565	48 8b 95 28 02
	00 00		 mov	 rdx, QWORD PTR contour_lengths$[rbp]
  0056c	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0056f	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax

; 3692 :    }

  00572	e9 c0 fb ff ff	 jmp	 $LN5@stbtt_Flat
$LN6@stbtt_Flat:

; 3693 : 
; 3694 :    return points;

  00577	48 8b 45 08	 mov	 rax, QWORD PTR points$[rbp]
  0057b	eb 35		 jmp	 SHORT $LN1@stbtt_Flat
$LN18@stbtt_Flat:
$error$25:

; 3695 : error:
; 3696 :    STBTT_free(points, userdata);

  0057d	48 8b 4d 08	 mov	 rcx, QWORD PTR points$[rbp]
  00581	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree

; 3697 :    STBTT_free(*contour_lengths, userdata);

  00586	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR contour_lengths$[rbp]
  0058d	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00590	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree

; 3698 :    *contour_lengths = 0;

  00595	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR contour_lengths$[rbp]
  0059c	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 3699 :    *num_contours = 0;

  005a3	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR num_contours$[rbp]
  005aa	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 3700 :    return NULL;

  005b0	33 c0		 xor	 eax, eax
$LN1@stbtt_Flat:

; 3701 : }

  005b2	48 8b f8	 mov	 rdi, rax
  005b5	48 8d 4d a0	 lea	 rcx, QWORD PTR [rbp-96]
  005b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z$rtcFrameData
  005c0	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  005c5	48 8b c7	 mov	 rax, rdi
  005c8	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  005cf	48 33 cd	 xor	 rcx, rbp
  005d2	e8 00 00 00 00	 call	 __security_check_cookie
  005d7	0f 28 b5 e0 01
	00 00		 movaps	 xmm6, XMMWORD PTR [rbp+480]
  005de	48 8d a5 f8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+504]
  005e5	5f		 pop	 rdi
  005e6	5d		 pop	 rbp
  005e7	c3		 ret	 0
?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z ENDP ; stbtt_FlattenCurves
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z
_TEXT	SEGMENT
dx0$ = 4
dy0$ = 36
dx1$ = 68
dy1$ = 100
dx2$ = 132
dy2$ = 164
dx$ = 196
dy$ = 228
longlen$ = 260
shortlen$ = 292
flatness_squared$ = 324
x01$1 = 356
y01$2 = 388
x12$3 = 420
y12$4 = 452
x23$5 = 484
y23$6 = 516
xa$7 = 548
ya$8 = 580
xb$9 = 612
yb$10 = 644
mx$11 = 676
my$12 = 708
tv72 = 1108
tv82 = 1112
points$ = 1152
num_points$ = 1160
x0$ = 1168
y0$ = 1176
x1$ = 1184
y1$ = 1192
x2$ = 1200
y2$ = 1208
x3$ = 1216
y3$ = 1224
objspace_flatness_squared$ = 1232
n$ = 1240
?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z PROC ; stbtt__tesselate_cubic, COMDAT

; 3584 : {

  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00011	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00016	55		 push	 rbp
  00017	57		 push	 rdi
  00018	48 81 ec c8 04
	00 00		 sub	 rsp, 1224		; 000004c8H
  0001f	48 8d 6c 24 60	 lea	 rbp, QWORD PTR [rsp+96]
  00024	48 8b fc	 mov	 rdi, rsp
  00027	b9 32 01 00 00	 mov	 ecx, 306		; 00000132H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 e8
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1256]

; 3585 :    // @TODO this "flatness" calculation is just made-up nonsense that seems to work well enough
; 3586 :    float dx0 = x1-x0;

  0003b	f3 0f 10 85 a0
	04 00 00	 movss	 xmm0, DWORD PTR x1$[rbp]
  00043	f3 0f 5c 85 90
	04 00 00	 subss	 xmm0, DWORD PTR x0$[rbp]
  0004b	f3 0f 11 45 04	 movss	 DWORD PTR dx0$[rbp], xmm0

; 3587 :    float dy0 = y1-y0;

  00050	f3 0f 10 85 a8
	04 00 00	 movss	 xmm0, DWORD PTR y1$[rbp]
  00058	f3 0f 5c 85 98
	04 00 00	 subss	 xmm0, DWORD PTR y0$[rbp]
  00060	f3 0f 11 45 24	 movss	 DWORD PTR dy0$[rbp], xmm0

; 3588 :    float dx1 = x2-x1;

  00065	f3 0f 10 85 b0
	04 00 00	 movss	 xmm0, DWORD PTR x2$[rbp]
  0006d	f3 0f 5c 85 a0
	04 00 00	 subss	 xmm0, DWORD PTR x1$[rbp]
  00075	f3 0f 11 45 44	 movss	 DWORD PTR dx1$[rbp], xmm0

; 3589 :    float dy1 = y2-y1;

  0007a	f3 0f 10 85 b8
	04 00 00	 movss	 xmm0, DWORD PTR y2$[rbp]
  00082	f3 0f 5c 85 a8
	04 00 00	 subss	 xmm0, DWORD PTR y1$[rbp]
  0008a	f3 0f 11 45 64	 movss	 DWORD PTR dy1$[rbp], xmm0

; 3590 :    float dx2 = x3-x2;

  0008f	f3 0f 10 85 c0
	04 00 00	 movss	 xmm0, DWORD PTR x3$[rbp]
  00097	f3 0f 5c 85 b0
	04 00 00	 subss	 xmm0, DWORD PTR x2$[rbp]
  0009f	f3 0f 11 85 84
	00 00 00	 movss	 DWORD PTR dx2$[rbp], xmm0

; 3591 :    float dy2 = y3-y2;

  000a7	f3 0f 10 85 c8
	04 00 00	 movss	 xmm0, DWORD PTR y3$[rbp]
  000af	f3 0f 5c 85 b8
	04 00 00	 subss	 xmm0, DWORD PTR y2$[rbp]
  000b7	f3 0f 11 85 a4
	00 00 00	 movss	 DWORD PTR dy2$[rbp], xmm0

; 3592 :    float dx = x3-x0;

  000bf	f3 0f 10 85 c0
	04 00 00	 movss	 xmm0, DWORD PTR x3$[rbp]
  000c7	f3 0f 5c 85 90
	04 00 00	 subss	 xmm0, DWORD PTR x0$[rbp]
  000cf	f3 0f 11 85 c4
	00 00 00	 movss	 DWORD PTR dx$[rbp], xmm0

; 3593 :    float dy = y3-y0;

  000d7	f3 0f 10 85 c8
	04 00 00	 movss	 xmm0, DWORD PTR y3$[rbp]
  000df	f3 0f 5c 85 98
	04 00 00	 subss	 xmm0, DWORD PTR y0$[rbp]
  000e7	f3 0f 11 85 e4
	00 00 00	 movss	 DWORD PTR dy$[rbp], xmm0

; 3594 :    float longlen = (float) (STBTT_sqrt(dx0*dx0+dy0*dy0)+STBTT_sqrt(dx1*dx1+dy1*dy1)+STBTT_sqrt(dx2*dx2+dy2*dy2));

  000ef	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR dx0$[rbp]
  000f4	f3 0f 59 45 04	 mulss	 xmm0, DWORD PTR dx0$[rbp]
  000f9	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR dy0$[rbp]
  000fe	f3 0f 59 4d 24	 mulss	 xmm1, DWORD PTR dy0$[rbp]
  00103	f3 0f 58 c1	 addss	 xmm0, xmm1
  00107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sqrtf
  0010d	f3 0f 11 85 54
	04 00 00	 movss	 DWORD PTR tv72[rbp], xmm0
  00115	f3 0f 10 4d 44	 movss	 xmm1, DWORD PTR dx1$[rbp]
  0011a	f3 0f 59 4d 44	 mulss	 xmm1, DWORD PTR dx1$[rbp]
  0011f	f3 0f 10 55 64	 movss	 xmm2, DWORD PTR dy1$[rbp]
  00124	f3 0f 59 55 64	 mulss	 xmm2, DWORD PTR dy1$[rbp]
  00129	f3 0f 58 ca	 addss	 xmm1, xmm2
  0012d	0f 28 c1	 movaps	 xmm0, xmm1
  00130	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sqrtf
  00136	f3 0f 10 8d 54
	04 00 00	 movss	 xmm1, DWORD PTR tv72[rbp]
  0013e	f3 0f 58 c8	 addss	 xmm1, xmm0
  00142	0f 28 c1	 movaps	 xmm0, xmm1
  00145	f3 0f 11 85 58
	04 00 00	 movss	 DWORD PTR tv82[rbp], xmm0
  0014d	f3 0f 10 8d 84
	00 00 00	 movss	 xmm1, DWORD PTR dx2$[rbp]
  00155	f3 0f 59 8d 84
	00 00 00	 mulss	 xmm1, DWORD PTR dx2$[rbp]
  0015d	f3 0f 10 95 a4
	00 00 00	 movss	 xmm2, DWORD PTR dy2$[rbp]
  00165	f3 0f 59 95 a4
	00 00 00	 mulss	 xmm2, DWORD PTR dy2$[rbp]
  0016d	f3 0f 58 ca	 addss	 xmm1, xmm2
  00171	0f 28 c1	 movaps	 xmm0, xmm1
  00174	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sqrtf
  0017a	f3 0f 10 8d 58
	04 00 00	 movss	 xmm1, DWORD PTR tv82[rbp]
  00182	f3 0f 58 c8	 addss	 xmm1, xmm0
  00186	0f 28 c1	 movaps	 xmm0, xmm1
  00189	f3 0f 11 85 04
	01 00 00	 movss	 DWORD PTR longlen$[rbp], xmm0

; 3595 :    float shortlen = (float) STBTT_sqrt(dx*dx+dy*dy);

  00191	f3 0f 10 85 c4
	00 00 00	 movss	 xmm0, DWORD PTR dx$[rbp]
  00199	f3 0f 59 85 c4
	00 00 00	 mulss	 xmm0, DWORD PTR dx$[rbp]
  001a1	f3 0f 10 8d e4
	00 00 00	 movss	 xmm1, DWORD PTR dy$[rbp]
  001a9	f3 0f 59 8d e4
	00 00 00	 mulss	 xmm1, DWORD PTR dy$[rbp]
  001b1	f3 0f 58 c1	 addss	 xmm0, xmm1
  001b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sqrtf
  001bb	f3 0f 11 85 24
	01 00 00	 movss	 DWORD PTR shortlen$[rbp], xmm0

; 3596 :    float flatness_squared = longlen*longlen-shortlen*shortlen;

  001c3	f3 0f 10 85 04
	01 00 00	 movss	 xmm0, DWORD PTR longlen$[rbp]
  001cb	f3 0f 59 85 04
	01 00 00	 mulss	 xmm0, DWORD PTR longlen$[rbp]
  001d3	f3 0f 10 8d 24
	01 00 00	 movss	 xmm1, DWORD PTR shortlen$[rbp]
  001db	f3 0f 59 8d 24
	01 00 00	 mulss	 xmm1, DWORD PTR shortlen$[rbp]
  001e3	f3 0f 5c c1	 subss	 xmm0, xmm1
  001e7	f3 0f 11 85 44
	01 00 00	 movss	 DWORD PTR flatness_squared$[rbp], xmm0

; 3597 : 
; 3598 :    if (n > 16) // 65536 segments on one curve better be enough!

  001ef	83 bd d8 04 00
	00 10		 cmp	 DWORD PTR n$[rbp], 16
  001f6	7e 05		 jle	 SHORT $LN2@stbtt__tes

; 3599 :       return;

  001f8	e9 f2 02 00 00	 jmp	 $LN1@stbtt__tes
$LN2@stbtt__tes:

; 3600 : 
; 3601 :    if (flatness_squared > objspace_flatness_squared) {

  001fd	f3 0f 10 85 44
	01 00 00	 movss	 xmm0, DWORD PTR flatness_squared$[rbp]
  00205	0f 2f 85 d0 04
	00 00		 comiss	 xmm0, DWORD PTR objspace_flatness_squared$[rbp]
  0020c	0f 86 a4 02 00
	00		 jbe	 $LN3@stbtt__tes

; 3602 :       float x01 = (x0+x1)/2;

  00212	f3 0f 10 85 90
	04 00 00	 movss	 xmm0, DWORD PTR x0$[rbp]
  0021a	f3 0f 58 85 a0
	04 00 00	 addss	 xmm0, DWORD PTR x1$[rbp]
  00222	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0022a	f3 0f 11 85 64
	01 00 00	 movss	 DWORD PTR x01$1[rbp], xmm0

; 3603 :       float y01 = (y0+y1)/2;

  00232	f3 0f 10 85 98
	04 00 00	 movss	 xmm0, DWORD PTR y0$[rbp]
  0023a	f3 0f 58 85 a8
	04 00 00	 addss	 xmm0, DWORD PTR y1$[rbp]
  00242	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0024a	f3 0f 11 85 84
	01 00 00	 movss	 DWORD PTR y01$2[rbp], xmm0

; 3604 :       float x12 = (x1+x2)/2;

  00252	f3 0f 10 85 a0
	04 00 00	 movss	 xmm0, DWORD PTR x1$[rbp]
  0025a	f3 0f 58 85 b0
	04 00 00	 addss	 xmm0, DWORD PTR x2$[rbp]
  00262	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0026a	f3 0f 11 85 a4
	01 00 00	 movss	 DWORD PTR x12$3[rbp], xmm0

; 3605 :       float y12 = (y1+y2)/2;

  00272	f3 0f 10 85 a8
	04 00 00	 movss	 xmm0, DWORD PTR y1$[rbp]
  0027a	f3 0f 58 85 b8
	04 00 00	 addss	 xmm0, DWORD PTR y2$[rbp]
  00282	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0028a	f3 0f 11 85 c4
	01 00 00	 movss	 DWORD PTR y12$4[rbp], xmm0

; 3606 :       float x23 = (x2+x3)/2;

  00292	f3 0f 10 85 b0
	04 00 00	 movss	 xmm0, DWORD PTR x2$[rbp]
  0029a	f3 0f 58 85 c0
	04 00 00	 addss	 xmm0, DWORD PTR x3$[rbp]
  002a2	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  002aa	f3 0f 11 85 e4
	01 00 00	 movss	 DWORD PTR x23$5[rbp], xmm0

; 3607 :       float y23 = (y2+y3)/2;

  002b2	f3 0f 10 85 b8
	04 00 00	 movss	 xmm0, DWORD PTR y2$[rbp]
  002ba	f3 0f 58 85 c8
	04 00 00	 addss	 xmm0, DWORD PTR y3$[rbp]
  002c2	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  002ca	f3 0f 11 85 04
	02 00 00	 movss	 DWORD PTR y23$6[rbp], xmm0

; 3608 : 
; 3609 :       float xa = (x01+x12)/2;

  002d2	f3 0f 10 85 64
	01 00 00	 movss	 xmm0, DWORD PTR x01$1[rbp]
  002da	f3 0f 58 85 a4
	01 00 00	 addss	 xmm0, DWORD PTR x12$3[rbp]
  002e2	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  002ea	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR xa$7[rbp], xmm0

; 3610 :       float ya = (y01+y12)/2;

  002f2	f3 0f 10 85 84
	01 00 00	 movss	 xmm0, DWORD PTR y01$2[rbp]
  002fa	f3 0f 58 85 c4
	01 00 00	 addss	 xmm0, DWORD PTR y12$4[rbp]
  00302	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0030a	f3 0f 11 85 44
	02 00 00	 movss	 DWORD PTR ya$8[rbp], xmm0

; 3611 :       float xb = (x12+x23)/2;

  00312	f3 0f 10 85 a4
	01 00 00	 movss	 xmm0, DWORD PTR x12$3[rbp]
  0031a	f3 0f 58 85 e4
	01 00 00	 addss	 xmm0, DWORD PTR x23$5[rbp]
  00322	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0032a	f3 0f 11 85 64
	02 00 00	 movss	 DWORD PTR xb$9[rbp], xmm0

; 3612 :       float yb = (y12+y23)/2;

  00332	f3 0f 10 85 c4
	01 00 00	 movss	 xmm0, DWORD PTR y12$4[rbp]
  0033a	f3 0f 58 85 04
	02 00 00	 addss	 xmm0, DWORD PTR y23$6[rbp]
  00342	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0034a	f3 0f 11 85 84
	02 00 00	 movss	 DWORD PTR yb$10[rbp], xmm0

; 3613 : 
; 3614 :       float mx = (xa+xb)/2;

  00352	f3 0f 10 85 24
	02 00 00	 movss	 xmm0, DWORD PTR xa$7[rbp]
  0035a	f3 0f 58 85 64
	02 00 00	 addss	 xmm0, DWORD PTR xb$9[rbp]
  00362	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0036a	f3 0f 11 85 a4
	02 00 00	 movss	 DWORD PTR mx$11[rbp], xmm0

; 3615 :       float my = (ya+yb)/2;

  00372	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR ya$8[rbp]
  0037a	f3 0f 58 85 84
	02 00 00	 addss	 xmm0, DWORD PTR yb$10[rbp]
  00382	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0038a	f3 0f 11 85 c4
	02 00 00	 movss	 DWORD PTR my$12[rbp], xmm0

; 3616 : 
; 3617 :       stbtt__tesselate_cubic(points, num_points, x0,y0, x01,y01, xa,ya, mx,my, objspace_flatness_squared,n+1);

  00392	8b 85 d8 04 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  00398	ff c0		 inc	 eax
  0039a	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  0039e	f3 0f 10 85 d0
	04 00 00	 movss	 xmm0, DWORD PTR objspace_flatness_squared$[rbp]
  003a6	f3 0f 11 44 24
	50		 movss	 DWORD PTR [rsp+80], xmm0
  003ac	f3 0f 10 85 c4
	02 00 00	 movss	 xmm0, DWORD PTR my$12[rbp]
  003b4	f3 0f 11 44 24
	48		 movss	 DWORD PTR [rsp+72], xmm0
  003ba	f3 0f 10 85 a4
	02 00 00	 movss	 xmm0, DWORD PTR mx$11[rbp]
  003c2	f3 0f 11 44 24
	40		 movss	 DWORD PTR [rsp+64], xmm0
  003c8	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR ya$8[rbp]
  003d0	f3 0f 11 44 24
	38		 movss	 DWORD PTR [rsp+56], xmm0
  003d6	f3 0f 10 85 24
	02 00 00	 movss	 xmm0, DWORD PTR xa$7[rbp]
  003de	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  003e4	f3 0f 10 85 84
	01 00 00	 movss	 xmm0, DWORD PTR y01$2[rbp]
  003ec	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  003f2	f3 0f 10 85 64
	01 00 00	 movss	 xmm0, DWORD PTR x01$1[rbp]
  003fa	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00400	f3 0f 10 9d 98
	04 00 00	 movss	 xmm3, DWORD PTR y0$[rbp]
  00408	f3 0f 10 95 90
	04 00 00	 movss	 xmm2, DWORD PTR x0$[rbp]
  00410	48 8b 95 88 04
	00 00		 mov	 rdx, QWORD PTR num_points$[rbp]
  00417	48 8b 8d 80 04
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  0041e	e8 00 00 00 00	 call	 ?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ; stbtt__tesselate_cubic

; 3618 :       stbtt__tesselate_cubic(points, num_points, mx,my, xb,yb, x23,y23, x3,y3, objspace_flatness_squared,n+1);

  00423	8b 85 d8 04 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  00429	ff c0		 inc	 eax
  0042b	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  0042f	f3 0f 10 85 d0
	04 00 00	 movss	 xmm0, DWORD PTR objspace_flatness_squared$[rbp]
  00437	f3 0f 11 44 24
	50		 movss	 DWORD PTR [rsp+80], xmm0
  0043d	f3 0f 10 85 c8
	04 00 00	 movss	 xmm0, DWORD PTR y3$[rbp]
  00445	f3 0f 11 44 24
	48		 movss	 DWORD PTR [rsp+72], xmm0
  0044b	f3 0f 10 85 c0
	04 00 00	 movss	 xmm0, DWORD PTR x3$[rbp]
  00453	f3 0f 11 44 24
	40		 movss	 DWORD PTR [rsp+64], xmm0
  00459	f3 0f 10 85 04
	02 00 00	 movss	 xmm0, DWORD PTR y23$6[rbp]
  00461	f3 0f 11 44 24
	38		 movss	 DWORD PTR [rsp+56], xmm0
  00467	f3 0f 10 85 e4
	01 00 00	 movss	 xmm0, DWORD PTR x23$5[rbp]
  0046f	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00475	f3 0f 10 85 84
	02 00 00	 movss	 xmm0, DWORD PTR yb$10[rbp]
  0047d	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00483	f3 0f 10 85 64
	02 00 00	 movss	 xmm0, DWORD PTR xb$9[rbp]
  0048b	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00491	f3 0f 10 9d c4
	02 00 00	 movss	 xmm3, DWORD PTR my$12[rbp]
  00499	f3 0f 10 95 a4
	02 00 00	 movss	 xmm2, DWORD PTR mx$11[rbp]
  004a1	48 8b 95 88 04
	00 00		 mov	 rdx, QWORD PTR num_points$[rbp]
  004a8	48 8b 8d 80 04
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  004af	e8 00 00 00 00	 call	 ?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ; stbtt__tesselate_cubic

; 3619 :    } else {

  004b4	eb 39		 jmp	 SHORT $LN4@stbtt__tes
$LN3@stbtt__tes:

; 3620 :       stbtt__add_point(points, *num_points,x3,y3);

  004b6	f3 0f 10 9d c8
	04 00 00	 movss	 xmm3, DWORD PTR y3$[rbp]
  004be	f3 0f 10 95 c0
	04 00 00	 movss	 xmm2, DWORD PTR x3$[rbp]
  004c6	48 8b 85 88 04
	00 00		 mov	 rax, QWORD PTR num_points$[rbp]
  004cd	8b 10		 mov	 edx, DWORD PTR [rax]
  004cf	48 8b 8d 80 04
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  004d6	e8 00 00 00 00	 call	 ?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point

; 3621 :       *num_points = *num_points+1;

  004db	48 8b 85 88 04
	00 00		 mov	 rax, QWORD PTR num_points$[rbp]
  004e2	8b 00		 mov	 eax, DWORD PTR [rax]
  004e4	ff c0		 inc	 eax
  004e6	48 8b 8d 88 04
	00 00		 mov	 rcx, QWORD PTR num_points$[rbp]
  004ed	89 01		 mov	 DWORD PTR [rcx], eax
$LN4@stbtt__tes:
$LN1@stbtt__tes:

; 3622 :    }
; 3623 : }

  004ef	48 8d a5 68 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1128]
  004f6	5f		 pop	 rdi
  004f7	5d		 pop	 rbp
  004f8	c3		 ret	 0
?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ENDP ; stbtt__tesselate_cubic
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z
_TEXT	SEGMENT
mx$ = 4
my$ = 36
dx$ = 68
dy$ = 100
points$ = 352
num_points$ = 360
x0$ = 368
y0$ = 376
x1$ = 384
y1$ = 392
x2$ = 400
y2$ = 408
objspace_flatness_squared$ = 416
n$ = 424
?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z PROC ; stbtt__tesselate_curve, COMDAT

; 3564 : {

  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00011	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00016	55		 push	 rbp
  00017	57		 push	 rdi
  00018	48 81 ec 98 01
	00 00		 sub	 rsp, 408		; 00000198H
  0001f	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00024	48 8b fc	 mov	 rdi, rsp
  00027	b9 66 00 00 00	 mov	 ecx, 102		; 00000066H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+440]

; 3565 :    // midpoint
; 3566 :    float mx = (x0 + 2*x1 + x2)/4;

  0003b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00043	f3 0f 59 85 80
	01 00 00	 mulss	 xmm0, DWORD PTR x1$[rbp]
  0004b	f3 0f 10 8d 70
	01 00 00	 movss	 xmm1, DWORD PTR x0$[rbp]
  00053	f3 0f 58 c8	 addss	 xmm1, xmm0
  00057	0f 28 c1	 movaps	 xmm0, xmm1
  0005a	f3 0f 58 85 90
	01 00 00	 addss	 xmm0, DWORD PTR x2$[rbp]
  00062	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40800000
  0006a	f3 0f 11 45 04	 movss	 DWORD PTR mx$[rbp], xmm0

; 3567 :    float my = (y0 + 2*y1 + y2)/4;

  0006f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00077	f3 0f 59 85 88
	01 00 00	 mulss	 xmm0, DWORD PTR y1$[rbp]
  0007f	f3 0f 10 8d 78
	01 00 00	 movss	 xmm1, DWORD PTR y0$[rbp]
  00087	f3 0f 58 c8	 addss	 xmm1, xmm0
  0008b	0f 28 c1	 movaps	 xmm0, xmm1
  0008e	f3 0f 58 85 98
	01 00 00	 addss	 xmm0, DWORD PTR y2$[rbp]
  00096	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40800000
  0009e	f3 0f 11 45 24	 movss	 DWORD PTR my$[rbp], xmm0

; 3568 :    // versus directly drawn line
; 3569 :    float dx = (x0+x2)/2 - mx;

  000a3	f3 0f 10 85 70
	01 00 00	 movss	 xmm0, DWORD PTR x0$[rbp]
  000ab	f3 0f 58 85 90
	01 00 00	 addss	 xmm0, DWORD PTR x2$[rbp]
  000b3	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  000bb	f3 0f 5c 45 04	 subss	 xmm0, DWORD PTR mx$[rbp]
  000c0	f3 0f 11 45 44	 movss	 DWORD PTR dx$[rbp], xmm0

; 3570 :    float dy = (y0+y2)/2 - my;

  000c5	f3 0f 10 85 78
	01 00 00	 movss	 xmm0, DWORD PTR y0$[rbp]
  000cd	f3 0f 58 85 98
	01 00 00	 addss	 xmm0, DWORD PTR y2$[rbp]
  000d5	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  000dd	f3 0f 5c 45 24	 subss	 xmm0, DWORD PTR my$[rbp]
  000e2	f3 0f 11 45 64	 movss	 DWORD PTR dy$[rbp], xmm0

; 3571 :    if (n > 16) // 65536 segments on one curve better be enough!

  000e7	83 bd a8 01 00
	00 10		 cmp	 DWORD PTR n$[rbp], 16
  000ee	7e 0a		 jle	 SHORT $LN2@stbtt__tes

; 3572 :       return 1;

  000f0	b8 01 00 00 00	 mov	 eax, 1
  000f5	e9 83 01 00 00	 jmp	 $LN1@stbtt__tes
$LN2@stbtt__tes:

; 3573 :    if (dx*dx+dy*dy > objspace_flatness_squared) { // half-pixel error allowed... need to be smaller if AA

  000fa	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR dx$[rbp]
  000ff	f3 0f 59 45 44	 mulss	 xmm0, DWORD PTR dx$[rbp]
  00104	f3 0f 10 4d 64	 movss	 xmm1, DWORD PTR dy$[rbp]
  00109	f3 0f 59 4d 64	 mulss	 xmm1, DWORD PTR dy$[rbp]
  0010e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00112	0f 2f 85 a0 01
	00 00		 comiss	 xmm0, DWORD PTR objspace_flatness_squared$[rbp]
  00119	0f 86 20 01 00
	00		 jbe	 $LN3@stbtt__tes

; 3574 :       stbtt__tesselate_curve(points, num_points, x0,y0, (x0+x1)/2.0f,(y0+y1)/2.0f, mx,my, objspace_flatness_squared,n+1);

  0011f	8b 85 a8 01 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  00125	ff c0		 inc	 eax
  00127	f3 0f 10 85 78
	01 00 00	 movss	 xmm0, DWORD PTR y0$[rbp]
  0012f	f3 0f 58 85 88
	01 00 00	 addss	 xmm0, DWORD PTR y1$[rbp]
  00137	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0013f	f3 0f 10 8d 70
	01 00 00	 movss	 xmm1, DWORD PTR x0$[rbp]
  00147	f3 0f 58 8d 80
	01 00 00	 addss	 xmm1, DWORD PTR x1$[rbp]
  0014f	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40000000
  00157	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0015b	f3 0f 10 95 a0
	01 00 00	 movss	 xmm2, DWORD PTR objspace_flatness_squared$[rbp]
  00163	f3 0f 11 54 24
	40		 movss	 DWORD PTR [rsp+64], xmm2
  00169	f3 0f 10 55 24	 movss	 xmm2, DWORD PTR my$[rbp]
  0016e	f3 0f 11 54 24
	38		 movss	 DWORD PTR [rsp+56], xmm2
  00174	f3 0f 10 55 04	 movss	 xmm2, DWORD PTR mx$[rbp]
  00179	f3 0f 11 54 24
	30		 movss	 DWORD PTR [rsp+48], xmm2
  0017f	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00185	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [rsp+32], xmm1
  0018b	f3 0f 10 9d 78
	01 00 00	 movss	 xmm3, DWORD PTR y0$[rbp]
  00193	f3 0f 10 95 70
	01 00 00	 movss	 xmm2, DWORD PTR x0$[rbp]
  0019b	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR num_points$[rbp]
  001a2	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  001a9	e8 00 00 00 00	 call	 ?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ; stbtt__tesselate_curve

; 3575 :       stbtt__tesselate_curve(points, num_points, mx,my, (x1+x2)/2.0f,(y1+y2)/2.0f, x2,y2, objspace_flatness_squared,n+1);

  001ae	8b 85 a8 01 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  001b4	ff c0		 inc	 eax
  001b6	f3 0f 10 85 88
	01 00 00	 movss	 xmm0, DWORD PTR y1$[rbp]
  001be	f3 0f 58 85 98
	01 00 00	 addss	 xmm0, DWORD PTR y2$[rbp]
  001c6	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  001ce	f3 0f 10 8d 80
	01 00 00	 movss	 xmm1, DWORD PTR x1$[rbp]
  001d6	f3 0f 58 8d 90
	01 00 00	 addss	 xmm1, DWORD PTR x2$[rbp]
  001de	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40000000
  001e6	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  001ea	f3 0f 10 95 a0
	01 00 00	 movss	 xmm2, DWORD PTR objspace_flatness_squared$[rbp]
  001f2	f3 0f 11 54 24
	40		 movss	 DWORD PTR [rsp+64], xmm2
  001f8	f3 0f 10 95 98
	01 00 00	 movss	 xmm2, DWORD PTR y2$[rbp]
  00200	f3 0f 11 54 24
	38		 movss	 DWORD PTR [rsp+56], xmm2
  00206	f3 0f 10 95 90
	01 00 00	 movss	 xmm2, DWORD PTR x2$[rbp]
  0020e	f3 0f 11 54 24
	30		 movss	 DWORD PTR [rsp+48], xmm2
  00214	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  0021a	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [rsp+32], xmm1
  00220	f3 0f 10 5d 24	 movss	 xmm3, DWORD PTR my$[rbp]
  00225	f3 0f 10 55 04	 movss	 xmm2, DWORD PTR mx$[rbp]
  0022a	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR num_points$[rbp]
  00231	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  00238	e8 00 00 00 00	 call	 ?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ; stbtt__tesselate_curve

; 3576 :    } else {

  0023d	eb 39		 jmp	 SHORT $LN4@stbtt__tes
$LN3@stbtt__tes:

; 3577 :       stbtt__add_point(points, *num_points,x2,y2);

  0023f	f3 0f 10 9d 98
	01 00 00	 movss	 xmm3, DWORD PTR y2$[rbp]
  00247	f3 0f 10 95 90
	01 00 00	 movss	 xmm2, DWORD PTR x2$[rbp]
  0024f	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR num_points$[rbp]
  00256	8b 10		 mov	 edx, DWORD PTR [rax]
  00258	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  0025f	e8 00 00 00 00	 call	 ?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point

; 3578 :       *num_points = *num_points+1;

  00264	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR num_points$[rbp]
  0026b	8b 00		 mov	 eax, DWORD PTR [rax]
  0026d	ff c0		 inc	 eax
  0026f	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR num_points$[rbp]
  00276	89 01		 mov	 DWORD PTR [rcx], eax
$LN4@stbtt__tes:

; 3579 :    }
; 3580 :    return 1;

  00278	b8 01 00 00 00	 mov	 eax, 1
$LN1@stbtt__tes:

; 3581 : }

  0027d	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  00284	5f		 pop	 rdi
  00285	5d		 pop	 rbp
  00286	c3		 ret	 0
?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ENDP ; stbtt__tesselate_curve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z
_TEXT	SEGMENT
points$ = 224
n$ = 232
x$ = 240
y$ = 248
?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z PROC	; stbtt__add_point, COMDAT

; 3556 : {

  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0001e	48 8b ec	 mov	 rbp, rsp
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 3557 :    if (!points) return; // during first pass, it's unallocated

  00038	48 83 bd e0 00
	00 00 00	 cmp	 QWORD PTR points$[rbp], 0
  00040	75 02		 jne	 SHORT $LN2@stbtt__add
  00042	eb 37		 jmp	 SHORT $LN1@stbtt__add
$LN2@stbtt__add:

; 3558 :    points[n].x = x;

  00044	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR n$[rbp]
  0004b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  00052	f3 0f 10 85 f0
	00 00 00	 movss	 xmm0, DWORD PTR x$[rbp]
  0005a	f3 0f 11 04 c1	 movss	 DWORD PTR [rcx+rax*8], xmm0

; 3559 :    points[n].y = y;

  0005f	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR n$[rbp]
  00066	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  0006d	f3 0f 10 85 f8
	00 00 00	 movss	 xmm0, DWORD PTR y$[rbp]
  00075	f3 0f 11 44 c1
	04		 movss	 DWORD PTR [rcx+rax*8+4], xmm0
$LN1@stbtt__add:

; 3560 : }

  0007b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00082	5f		 pop	 rdi
  00083	5d		 pop	 rbp
  00084	c3		 ret	 0
?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ENDP	; stbtt__add_point
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z
_TEXT	SEGMENT
y_scale_inv$ = 4
e$ = 40
n$ = 68
i$ = 100
j$ = 132
k$ = 164
m$ = 196
vsubsample$ = 228
p$1 = 264
a$2 = 292
b$3 = 324
tv161 = 532
tv66 = 532
tv163 = 536
tv160 = 540
result$ = 576
pts$ = 584
wcount$ = 592
windings$ = 600
scale_x$ = 608
scale_y$ = 616
shift_x$ = 624
shift_y$ = 632
off_x$ = 640
off_y$ = 648
invert$ = 656
userdata$ = 664
?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z PROC ; stbtt__rasterize, COMDAT

; 3499 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 68 02
	00 00		 sub	 rsp, 616		; 00000268H
  0001d	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 9a 00 00 00	 mov	 ecx, 154		; 0000009aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 88
	02 00 00	 mov	 rcx, QWORD PTR [rsp+648]

; 3500 :    float y_scale_inv = invert ? -scale_y : scale_y;

  00039	83 bd 90 02 00
	00 00		 cmp	 DWORD PTR invert$[rbp], 0
  00040	74 19		 je	 SHORT $LN15@stbtt__ras
  00042	f3 0f 10 85 68
	02 00 00	 movss	 xmm0, DWORD PTR scale_y$[rbp]
  0004a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00051	f3 0f 11 85 14
	02 00 00	 movss	 DWORD PTR tv66[rbp], xmm0
  00059	eb 10		 jmp	 SHORT $LN16@stbtt__ras
$LN15@stbtt__ras:
  0005b	f3 0f 10 85 68
	02 00 00	 movss	 xmm0, DWORD PTR scale_y$[rbp]
  00063	f3 0f 11 85 14
	02 00 00	 movss	 DWORD PTR tv66[rbp], xmm0
$LN16@stbtt__ras:
  0006b	f3 0f 10 85 14
	02 00 00	 movss	 xmm0, DWORD PTR tv66[rbp]
  00073	f3 0f 11 45 04	 movss	 DWORD PTR y_scale_inv$[rbp], xmm0

; 3501 :    stbtt__edge *e;
; 3502 :    int n,i,j,k,m;
; 3503 : #if STBTT_RASTERIZER_VERSION == 1
; 3504 :    int vsubsample = result->h < 8 ? 15 : 5;
; 3505 : #elif STBTT_RASTERIZER_VERSION == 2
; 3506 :    int vsubsample = 1;

  00078	c7 85 e4 00 00
	00 01 00 00 00	 mov	 DWORD PTR vsubsample$[rbp], 1

; 3507 : #else
; 3508 :    #error "Unrecognized value of STBTT_RASTERIZER_VERSION"
; 3509 : #endif
; 3510 :    // vsubsample should divide 255 evenly; otherwise we won't reach full opacity
; 3511 : 
; 3512 :    // now we have to blow out the windings into explicit edge lists
; 3513 :    n = 0;

  00082	c7 45 44 00 00
	00 00		 mov	 DWORD PTR n$[rbp], 0

; 3514 :    for (i=0; i < windings; ++i)

  00089	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00090	eb 08		 jmp	 SHORT $LN4@stbtt__ras
$LN2@stbtt__ras:
  00092	8b 45 64	 mov	 eax, DWORD PTR i$[rbp]
  00095	ff c0		 inc	 eax
  00097	89 45 64	 mov	 DWORD PTR i$[rbp], eax
$LN4@stbtt__ras:
  0009a	8b 85 58 02 00
	00		 mov	 eax, DWORD PTR windings$[rbp]
  000a0	39 45 64	 cmp	 DWORD PTR i$[rbp], eax
  000a3	7d 1a		 jge	 SHORT $LN3@stbtt__ras

; 3515 :       n += wcount[i];

  000a5	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  000a9	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR wcount$[rbp]
  000b0	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  000b3	8b 4d 44	 mov	 ecx, DWORD PTR n$[rbp]
  000b6	03 c8		 add	 ecx, eax
  000b8	8b c1		 mov	 eax, ecx
  000ba	89 45 44	 mov	 DWORD PTR n$[rbp], eax
  000bd	eb d3		 jmp	 SHORT $LN2@stbtt__ras
$LN3@stbtt__ras:

; 3516 : 
; 3517 :    e = (stbtt__edge *) STBTT_malloc(sizeof(*e) * (n+1), userdata); // add an extra one as a sentinel

  000bf	8b 45 44	 mov	 eax, DWORD PTR n$[rbp]
  000c2	ff c0		 inc	 eax
  000c4	48 98		 cdqe
  000c6	48 6b c0 14	 imul	 rax, rax, 20
  000ca	48 8b c8	 mov	 rcx, rax
  000cd	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  000d2	48 89 45 28	 mov	 QWORD PTR e$[rbp], rax

; 3518 :    if (e == 0) return;

  000d6	48 83 7d 28 00	 cmp	 QWORD PTR e$[rbp], 0
  000db	75 05		 jne	 SHORT $LN11@stbtt__ras
  000dd	e9 39 03 00 00	 jmp	 $LN1@stbtt__ras
$LN11@stbtt__ras:

; 3519 :    n = 0;

  000e2	c7 45 44 00 00
	00 00		 mov	 DWORD PTR n$[rbp], 0

; 3520 : 
; 3521 :    m=0;

  000e9	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR m$[rbp], 0

; 3522 :    for (i=0; i < windings; ++i) {

  000f3	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  000fa	eb 08		 jmp	 SHORT $LN7@stbtt__ras
$LN5@stbtt__ras:
  000fc	8b 45 64	 mov	 eax, DWORD PTR i$[rbp]
  000ff	ff c0		 inc	 eax
  00101	89 45 64	 mov	 DWORD PTR i$[rbp], eax
$LN7@stbtt__ras:
  00104	8b 85 58 02 00
	00		 mov	 eax, DWORD PTR windings$[rbp]
  0010a	39 45 64	 cmp	 DWORD PTR i$[rbp], eax
  0010d	0f 8d b8 02 00
	00		 jge	 $LN6@stbtt__ras

; 3523 :       stbtt__point *p = pts + m;

  00113	48 63 85 c4 00
	00 00		 movsxd	 rax, DWORD PTR m$[rbp]
  0011a	48 8b 8d 48 02
	00 00		 mov	 rcx, QWORD PTR pts$[rbp]
  00121	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00125	48 89 85 08 01
	00 00		 mov	 QWORD PTR p$1[rbp], rax

; 3524 :       m += wcount[i];

  0012c	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  00130	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR wcount$[rbp]
  00137	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0013a	8b 8d c4 00 00
	00		 mov	 ecx, DWORD PTR m$[rbp]
  00140	03 c8		 add	 ecx, eax
  00142	8b c1		 mov	 eax, ecx
  00144	89 85 c4 00 00
	00		 mov	 DWORD PTR m$[rbp], eax

; 3525 :       j = wcount[i]-1;

  0014a	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  0014e	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR wcount$[rbp]
  00155	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00158	ff c8		 dec	 eax
  0015a	89 85 84 00 00
	00		 mov	 DWORD PTR j$[rbp], eax

; 3526 :       for (k=0; k < wcount[i]; j=k++) {

  00160	c7 85 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR k$[rbp], 0
  0016a	eb 1a		 jmp	 SHORT $LN10@stbtt__ras
$LN8@stbtt__ras:
  0016c	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR k$[rbp]
  00172	89 85 84 00 00
	00		 mov	 DWORD PTR j$[rbp], eax
  00178	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR k$[rbp]
  0017e	ff c0		 inc	 eax
  00180	89 85 a4 00 00
	00		 mov	 DWORD PTR k$[rbp], eax
$LN10@stbtt__ras:
  00186	48 63 45 64	 movsxd	 rax, DWORD PTR i$[rbp]
  0018a	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR wcount$[rbp]
  00191	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00194	39 85 a4 00 00
	00		 cmp	 DWORD PTR k$[rbp], eax
  0019a	0f 8d 26 02 00
	00		 jge	 $LN9@stbtt__ras

; 3527 :          int a=k,b=j;

  001a0	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR k$[rbp]
  001a6	89 85 24 01 00
	00		 mov	 DWORD PTR a$2[rbp], eax
  001ac	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR j$[rbp]
  001b2	89 85 44 01 00
	00		 mov	 DWORD PTR b$3[rbp], eax

; 3528 :          // skip the edge if horizontal
; 3529 :          if (p[j].y == p[k].y)

  001b8	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR j$[rbp]
  001bf	48 63 8d a4 00
	00 00		 movsxd	 rcx, DWORD PTR k$[rbp]
  001c6	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR p$1[rbp]
  001cd	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR p$1[rbp]
  001d4	f3 0f 10 44 c2
	04		 movss	 xmm0, DWORD PTR [rdx+rax*8+4]
  001da	41 0f 2e 44 c8
	04		 ucomiss xmm0, DWORD PTR [r8+rcx*8+4]
  001e0	7a 04		 jp	 SHORT $LN12@stbtt__ras
  001e2	75 02		 jne	 SHORT $LN12@stbtt__ras

; 3530 :             continue;

  001e4	eb 86		 jmp	 SHORT $LN8@stbtt__ras
$LN12@stbtt__ras:

; 3531 :          // add edge from j to k to the list
; 3532 :          e[n].invert = 0;

  001e6	48 63 45 44	 movsxd	 rax, DWORD PTR n$[rbp]
  001ea	48 6b c0 14	 imul	 rax, rax, 20
  001ee	48 8b 4d 28	 mov	 rcx, QWORD PTR e$[rbp]
  001f2	c7 44 01 10 00
	00 00 00	 mov	 DWORD PTR [rcx+rax+16], 0

; 3533 :          if (invert ? p[j].y > p[k].y : p[j].y < p[k].y) {

  001fa	83 bd 90 02 00
	00 00		 cmp	 DWORD PTR invert$[rbp], 0
  00201	74 4e		 je	 SHORT $LN21@stbtt__ras
  00203	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR j$[rbp]
  0020a	48 63 8d a4 00
	00 00		 movsxd	 rcx, DWORD PTR k$[rbp]
  00211	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR p$1[rbp]
  00218	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR p$1[rbp]
  0021f	f3 0f 10 44 c2
	04		 movss	 xmm0, DWORD PTR [rdx+rax*8+4]
  00225	41 0f 2f 44 c8
	04		 comiss	 xmm0, DWORD PTR [r8+rcx*8+4]
  0022b	76 0c		 jbe	 SHORT $LN19@stbtt__ras
  0022d	c7 85 14 02 00
	00 01 00 00 00	 mov	 DWORD PTR tv161[rbp], 1
  00237	eb 0a		 jmp	 SHORT $LN20@stbtt__ras
$LN19@stbtt__ras:
  00239	c7 85 14 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv161[rbp], 0
$LN20@stbtt__ras:
  00243	8b 85 14 02 00
	00		 mov	 eax, DWORD PTR tv161[rbp]
  00249	89 85 18 02 00
	00		 mov	 DWORD PTR tv163[rbp], eax
  0024f	eb 4c		 jmp	 SHORT $LN22@stbtt__ras
$LN21@stbtt__ras:
  00251	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR j$[rbp]
  00258	48 63 8d a4 00
	00 00		 movsxd	 rcx, DWORD PTR k$[rbp]
  0025f	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR p$1[rbp]
  00266	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR p$1[rbp]
  0026d	f3 0f 10 44 ca
	04		 movss	 xmm0, DWORD PTR [rdx+rcx*8+4]
  00273	41 0f 2f 44 c0
	04		 comiss	 xmm0, DWORD PTR [r8+rax*8+4]
  00279	76 0c		 jbe	 SHORT $LN17@stbtt__ras
  0027b	c7 85 1c 02 00
	00 01 00 00 00	 mov	 DWORD PTR tv160[rbp], 1
  00285	eb 0a		 jmp	 SHORT $LN18@stbtt__ras
$LN17@stbtt__ras:
  00287	c7 85 1c 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv160[rbp], 0
$LN18@stbtt__ras:
  00291	8b 85 1c 02 00
	00		 mov	 eax, DWORD PTR tv160[rbp]
  00297	89 85 18 02 00
	00		 mov	 DWORD PTR tv163[rbp], eax
$LN22@stbtt__ras:
  0029d	83 bd 18 02 00
	00 00		 cmp	 DWORD PTR tv163[rbp], 0
  002a4	74 2c		 je	 SHORT $LN13@stbtt__ras

; 3534 :             e[n].invert = 1;

  002a6	48 63 45 44	 movsxd	 rax, DWORD PTR n$[rbp]
  002aa	48 6b c0 14	 imul	 rax, rax, 20
  002ae	48 8b 4d 28	 mov	 rcx, QWORD PTR e$[rbp]
  002b2	c7 44 01 10 01
	00 00 00	 mov	 DWORD PTR [rcx+rax+16], 1

; 3535 :             a=j,b=k;

  002ba	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR j$[rbp]
  002c0	89 85 24 01 00
	00		 mov	 DWORD PTR a$2[rbp], eax
  002c6	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR k$[rbp]
  002cc	89 85 44 01 00
	00		 mov	 DWORD PTR b$3[rbp], eax
$LN13@stbtt__ras:

; 3536 :          }
; 3537 :          e[n].x0 = p[a].x * scale_x + shift_x;

  002d2	48 63 85 24 01
	00 00		 movsxd	 rax, DWORD PTR a$2[rbp]
  002d9	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR p$1[rbp]
  002e0	f3 0f 10 04 c1	 movss	 xmm0, DWORD PTR [rcx+rax*8]
  002e5	f3 0f 59 85 60
	02 00 00	 mulss	 xmm0, DWORD PTR scale_x$[rbp]
  002ed	f3 0f 58 85 70
	02 00 00	 addss	 xmm0, DWORD PTR shift_x$[rbp]
  002f5	48 63 45 44	 movsxd	 rax, DWORD PTR n$[rbp]
  002f9	48 6b c0 14	 imul	 rax, rax, 20
  002fd	48 8b 4d 28	 mov	 rcx, QWORD PTR e$[rbp]
  00301	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0

; 3538 :          e[n].y0 = (p[a].y * y_scale_inv + shift_y) * vsubsample;

  00306	48 63 85 24 01
	00 00		 movsxd	 rax, DWORD PTR a$2[rbp]
  0030d	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR p$1[rbp]
  00314	f3 0f 10 44 c1
	04		 movss	 xmm0, DWORD PTR [rcx+rax*8+4]
  0031a	f3 0f 59 45 04	 mulss	 xmm0, DWORD PTR y_scale_inv$[rbp]
  0031f	f3 0f 58 85 78
	02 00 00	 addss	 xmm0, DWORD PTR shift_y$[rbp]
  00327	f3 0f 2a 8d e4
	00 00 00	 cvtsi2ss xmm1, DWORD PTR vsubsample$[rbp]
  0032f	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00333	48 63 45 44	 movsxd	 rax, DWORD PTR n$[rbp]
  00337	48 6b c0 14	 imul	 rax, rax, 20
  0033b	48 8b 4d 28	 mov	 rcx, QWORD PTR e$[rbp]
  0033f	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0

; 3539 :          e[n].x1 = p[b].x * scale_x + shift_x;

  00345	48 63 85 44 01
	00 00		 movsxd	 rax, DWORD PTR b$3[rbp]
  0034c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR p$1[rbp]
  00353	f3 0f 10 04 c1	 movss	 xmm0, DWORD PTR [rcx+rax*8]
  00358	f3 0f 59 85 60
	02 00 00	 mulss	 xmm0, DWORD PTR scale_x$[rbp]
  00360	f3 0f 58 85 70
	02 00 00	 addss	 xmm0, DWORD PTR shift_x$[rbp]
  00368	48 63 45 44	 movsxd	 rax, DWORD PTR n$[rbp]
  0036c	48 6b c0 14	 imul	 rax, rax, 20
  00370	48 8b 4d 28	 mov	 rcx, QWORD PTR e$[rbp]
  00374	f3 0f 11 44 01
	08		 movss	 DWORD PTR [rcx+rax+8], xmm0

; 3540 :          e[n].y1 = (p[b].y * y_scale_inv + shift_y) * vsubsample;

  0037a	48 63 85 44 01
	00 00		 movsxd	 rax, DWORD PTR b$3[rbp]
  00381	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR p$1[rbp]
  00388	f3 0f 10 44 c1
	04		 movss	 xmm0, DWORD PTR [rcx+rax*8+4]
  0038e	f3 0f 59 45 04	 mulss	 xmm0, DWORD PTR y_scale_inv$[rbp]
  00393	f3 0f 58 85 78
	02 00 00	 addss	 xmm0, DWORD PTR shift_y$[rbp]
  0039b	f3 0f 2a 8d e4
	00 00 00	 cvtsi2ss xmm1, DWORD PTR vsubsample$[rbp]
  003a3	f3 0f 59 c1	 mulss	 xmm0, xmm1
  003a7	48 63 45 44	 movsxd	 rax, DWORD PTR n$[rbp]
  003ab	48 6b c0 14	 imul	 rax, rax, 20
  003af	48 8b 4d 28	 mov	 rcx, QWORD PTR e$[rbp]
  003b3	f3 0f 11 44 01
	0c		 movss	 DWORD PTR [rcx+rax+12], xmm0

; 3541 :          ++n;

  003b9	8b 45 44	 mov	 eax, DWORD PTR n$[rbp]
  003bc	ff c0		 inc	 eax
  003be	89 45 44	 mov	 DWORD PTR n$[rbp], eax

; 3542 :       }

  003c1	e9 a6 fd ff ff	 jmp	 $LN8@stbtt__ras
$LN9@stbtt__ras:

; 3543 :    }

  003c6	e9 31 fd ff ff	 jmp	 $LN5@stbtt__ras
$LN6@stbtt__ras:

; 3544 : 
; 3545 :    // now sort the edges by their highest point (should snap to integer, and then by x)
; 3546 :    //STBTT_sort(e, n, sizeof(e[0]), stbtt__edge_compare);
; 3547 :    stbtt__sort_edges(e, n);

  003cb	8b 55 44	 mov	 edx, DWORD PTR n$[rbp]
  003ce	48 8b 4d 28	 mov	 rcx, QWORD PTR e$[rbp]
  003d2	e8 00 00 00 00	 call	 ?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges

; 3548 : 
; 3549 :    // now, traverse the scanlines and find the intersections on each scanline, use xor winding rule
; 3550 :    stbtt__rasterize_sorted_edges(result, e, n, vsubsample, off_x, off_y, userdata);

  003d7	48 8b 85 98 02
	00 00		 mov	 rax, QWORD PTR userdata$[rbp]
  003de	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  003e3	8b 85 88 02 00
	00		 mov	 eax, DWORD PTR off_y$[rbp]
  003e9	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  003ed	8b 85 80 02 00
	00		 mov	 eax, DWORD PTR off_x$[rbp]
  003f3	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  003f7	44 8b 8d e4 00
	00 00		 mov	 r9d, DWORD PTR vsubsample$[rbp]
  003fe	44 8b 45 44	 mov	 r8d, DWORD PTR n$[rbp]
  00402	48 8b 55 28	 mov	 rdx, QWORD PTR e$[rbp]
  00406	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR result$[rbp]
  0040d	e8 00 00 00 00	 call	 ?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z ; stbtt__rasterize_sorted_edges

; 3551 : 
; 3552 :    STBTT_free(e, userdata);

  00412	48 8b 4d 28	 mov	 rcx, QWORD PTR e$[rbp]
  00416	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN1@stbtt__ras:

; 3553 : }

  0041b	48 8d a5 28 02
	00 00		 lea	 rsp, QWORD PTR [rbp+552]
  00422	5f		 pop	 rdi
  00423	5d		 pop	 rbp
  00424	c3		 ret	 0
?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z ENDP ; stbtt__rasterize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z
_TEXT	SEGMENT
p$ = 224
n$ = 232
?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z PROC	; stbtt__sort_edges, COMDAT

; 3488 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 3489 :    stbtt__sort_edges_quicksort(p, n);

  0002e	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR n$[rbp]
  00034	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  0003b	e8 00 00 00 00	 call	 ?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_quicksort

; 3490 :    stbtt__sort_edges_ins_sort(p, n);

  00040	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR n$[rbp]
  00046	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  0004d	e8 00 00 00 00	 call	 ?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_ins_sort

; 3491 : }

  00052	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00059	5f		 pop	 rdi
  0005a	5d		 pop	 rbp
  0005b	c3		 ret	 0
?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z ENDP	; stbtt__sort_edges
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z
_TEXT	SEGMENT
t$4 = 8
c01$5 = 52
c12$6 = 84
c$7 = 116
m$8 = 148
i$9 = 180
j$10 = 212
z$11 = 244
tv131 = 452
tv128 = 452
tv85 = 452
tv74 = 452
tv279 = 456
tv252 = 456
tv235 = 456
p$ = 496
n$ = 504
?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z PROC ; stbtt__sort_edges_quicksort, COMDAT

; 3426 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec f0 01
	00 00		 sub	 rsp, 496		; 000001f0H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 7c 00 00 00	 mov	 ecx, 124		; 0000007cH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR [rsp+536]
$LN2@stbtt__sor:

; 3427 :    /* threshold for transitioning to insertion sort */
; 3428 :    while (n > 12) {

  0002f	83 bd f8 01 00
	00 0c		 cmp	 DWORD PTR n$[rbp], 12
  00036	0f 8e 49 04 00
	00		 jle	 $LN3@stbtt__sor

; 3429 :       stbtt__edge t;
; 3430 :       int c01,c12,c,m,i,j;
; 3431 : 
; 3432 :       /* compute median of three */
; 3433 :       m = n >> 1;

  0003c	8b 85 f8 01 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  00042	d1 f8		 sar	 eax, 1
  00044	89 85 94 00 00
	00		 mov	 DWORD PTR m$8[rbp], eax

; 3434 :       c01 = STBTT__COMPARE(&p[0],&p[m]);

  0004a	b8 14 00 00 00	 mov	 eax, 20
  0004f	48 6b c0 00	 imul	 rax, rax, 0
  00053	48 63 8d 94 00
	00 00		 movsxd	 rcx, DWORD PTR m$8[rbp]
  0005a	48 6b c9 14	 imul	 rcx, rcx, 20
  0005e	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  00065	4c 8b 85 f0 01
	00 00		 mov	 r8, QWORD PTR p$[rbp]
  0006c	f3 0f 10 44 0a
	04		 movss	 xmm0, DWORD PTR [rdx+rcx+4]
  00072	41 0f 2f 44 00
	04		 comiss	 xmm0, DWORD PTR [r8+rax+4]
  00078	76 0c		 jbe	 SHORT $LN20@stbtt__sor
  0007a	c7 85 c4 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv74[rbp], 1
  00084	eb 0a		 jmp	 SHORT $LN21@stbtt__sor
$LN20@stbtt__sor:
  00086	c7 85 c4 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv74[rbp], 0
$LN21@stbtt__sor:
  00090	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR tv74[rbp]
  00096	89 45 34	 mov	 DWORD PTR c01$5[rbp], eax

; 3435 :       c12 = STBTT__COMPARE(&p[m],&p[n-1]);

  00099	48 63 85 94 00
	00 00		 movsxd	 rax, DWORD PTR m$8[rbp]
  000a0	48 6b c0 14	 imul	 rax, rax, 20
  000a4	8b 8d f8 01 00
	00		 mov	 ecx, DWORD PTR n$[rbp]
  000aa	ff c9		 dec	 ecx
  000ac	48 63 c9	 movsxd	 rcx, ecx
  000af	48 6b c9 14	 imul	 rcx, rcx, 20
  000b3	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  000ba	4c 8b 85 f0 01
	00 00		 mov	 r8, QWORD PTR p$[rbp]
  000c1	f3 0f 10 44 0a
	04		 movss	 xmm0, DWORD PTR [rdx+rcx+4]
  000c7	41 0f 2f 44 00
	04		 comiss	 xmm0, DWORD PTR [r8+rax+4]
  000cd	76 0c		 jbe	 SHORT $LN22@stbtt__sor
  000cf	c7 85 c4 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv85[rbp], 1
  000d9	eb 0a		 jmp	 SHORT $LN23@stbtt__sor
$LN22@stbtt__sor:
  000db	c7 85 c4 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv85[rbp], 0
$LN23@stbtt__sor:
  000e5	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR tv85[rbp]
  000eb	89 45 54	 mov	 DWORD PTR c12$6[rbp], eax

; 3436 :       /* if 0 >= mid >= end, or 0 < mid < end, then use mid */
; 3437 :       if (c01 != c12) {

  000ee	8b 45 54	 mov	 eax, DWORD PTR c12$6[rbp]
  000f1	39 45 34	 cmp	 DWORD PTR c01$5[rbp], eax
  000f4	0f 84 0a 01 00
	00		 je	 $LN13@stbtt__sor

; 3438 :          /* otherwise, we'll need to swap something else to middle */
; 3439 :          int z;
; 3440 :          c = STBTT__COMPARE(&p[0],&p[n-1]);

  000fa	b8 14 00 00 00	 mov	 eax, 20
  000ff	48 6b c0 00	 imul	 rax, rax, 0
  00103	8b 8d f8 01 00
	00		 mov	 ecx, DWORD PTR n$[rbp]
  00109	ff c9		 dec	 ecx
  0010b	48 63 c9	 movsxd	 rcx, ecx
  0010e	48 6b c9 14	 imul	 rcx, rcx, 20
  00112	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  00119	4c 8b 85 f0 01
	00 00		 mov	 r8, QWORD PTR p$[rbp]
  00120	f3 0f 10 44 0a
	04		 movss	 xmm0, DWORD PTR [rdx+rcx+4]
  00126	41 0f 2f 44 00
	04		 comiss	 xmm0, DWORD PTR [r8+rax+4]
  0012c	76 0c		 jbe	 SHORT $LN24@stbtt__sor
  0012e	c7 85 c4 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv128[rbp], 1
  00138	eb 0a		 jmp	 SHORT $LN25@stbtt__sor
$LN24@stbtt__sor:
  0013a	c7 85 c4 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv128[rbp], 0
$LN25@stbtt__sor:
  00144	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR tv128[rbp]
  0014a	89 45 74	 mov	 DWORD PTR c$7[rbp], eax

; 3441 :          /* 0>mid && mid<n:  0>n => n; 0<n => 0 */
; 3442 :          /* 0<mid && mid>n:  0>n => 0; 0<n => n */
; 3443 :          z = (c == c12) ? 0 : n-1;

  0014d	8b 45 54	 mov	 eax, DWORD PTR c12$6[rbp]
  00150	39 45 74	 cmp	 DWORD PTR c$7[rbp], eax
  00153	75 0c		 jne	 SHORT $LN26@stbtt__sor
  00155	c7 85 c4 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv131[rbp], 0
  0015f	eb 0e		 jmp	 SHORT $LN27@stbtt__sor
$LN26@stbtt__sor:
  00161	8b 85 f8 01 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  00167	ff c8		 dec	 eax
  00169	89 85 c4 01 00
	00		 mov	 DWORD PTR tv131[rbp], eax
$LN27@stbtt__sor:
  0016f	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR tv131[rbp]
  00175	89 85 f4 00 00
	00		 mov	 DWORD PTR z$11[rbp], eax

; 3444 :          t = p[z];

  0017b	48 63 85 f4 00
	00 00		 movsxd	 rax, DWORD PTR z$11[rbp]
  00182	48 6b c0 14	 imul	 rax, rax, 20
  00186	48 8d 4d 08	 lea	 rcx, QWORD PTR t$4[rbp]
  0018a	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  00191	48 8b f9	 mov	 rdi, rcx
  00194	48 8d 34 02	 lea	 rsi, QWORD PTR [rdx+rax]
  00198	b9 14 00 00 00	 mov	 ecx, 20
  0019d	f3 a4		 rep movsb

; 3445 :          p[z] = p[m];

  0019f	48 63 85 94 00
	00 00		 movsxd	 rax, DWORD PTR m$8[rbp]
  001a6	48 6b c0 14	 imul	 rax, rax, 20
  001aa	48 63 8d f4 00
	00 00		 movsxd	 rcx, DWORD PTR z$11[rbp]
  001b1	48 6b c9 14	 imul	 rcx, rcx, 20
  001b5	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  001bc	48 8b bd f0 01
	00 00		 mov	 rdi, QWORD PTR p$[rbp]
  001c3	48 89 bd c8 01
	00 00		 mov	 QWORD PTR tv235[rbp], rdi
  001ca	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  001ce	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR tv235[rbp]
  001d5	48 8d 34 01	 lea	 rsi, QWORD PTR [rcx+rax]
  001d9	b9 14 00 00 00	 mov	 ecx, 20
  001de	f3 a4		 rep movsb

; 3446 :          p[m] = t;

  001e0	48 63 85 94 00
	00 00		 movsxd	 rax, DWORD PTR m$8[rbp]
  001e7	48 6b c0 14	 imul	 rax, rax, 20
  001eb	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  001f2	48 8d 55 08	 lea	 rdx, QWORD PTR t$4[rbp]
  001f6	48 8d 3c 01	 lea	 rdi, QWORD PTR [rcx+rax]
  001fa	48 8b f2	 mov	 rsi, rdx
  001fd	b9 14 00 00 00	 mov	 ecx, 20
  00202	f3 a4		 rep movsb
$LN13@stbtt__sor:

; 3447 :       }
; 3448 :       /* now p[m] is the median-of-three */
; 3449 :       /* swap it to the beginning so it won't move around */
; 3450 :       t = p[0];

  00204	b8 14 00 00 00	 mov	 eax, 20
  00209	48 6b c0 00	 imul	 rax, rax, 0
  0020d	48 8d 4d 08	 lea	 rcx, QWORD PTR t$4[rbp]
  00211	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  00218	48 8b f9	 mov	 rdi, rcx
  0021b	48 8d 34 02	 lea	 rsi, QWORD PTR [rdx+rax]
  0021f	b9 14 00 00 00	 mov	 ecx, 20
  00224	f3 a4		 rep movsb

; 3451 :       p[0] = p[m];

  00226	48 63 85 94 00
	00 00		 movsxd	 rax, DWORD PTR m$8[rbp]
  0022d	48 6b c0 14	 imul	 rax, rax, 20
  00231	b9 14 00 00 00	 mov	 ecx, 20
  00236	48 6b c9 00	 imul	 rcx, rcx, 0
  0023a	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  00241	48 8b bd f0 01
	00 00		 mov	 rdi, QWORD PTR p$[rbp]
  00248	48 89 bd c8 01
	00 00		 mov	 QWORD PTR tv252[rbp], rdi
  0024f	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00253	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR tv252[rbp]
  0025a	48 8d 34 01	 lea	 rsi, QWORD PTR [rcx+rax]
  0025e	b9 14 00 00 00	 mov	 ecx, 20
  00263	f3 a4		 rep movsb

; 3452 :       p[m] = t;

  00265	48 63 85 94 00
	00 00		 movsxd	 rax, DWORD PTR m$8[rbp]
  0026c	48 6b c0 14	 imul	 rax, rax, 20
  00270	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00277	48 8d 55 08	 lea	 rdx, QWORD PTR t$4[rbp]
  0027b	48 8d 3c 01	 lea	 rdi, QWORD PTR [rcx+rax]
  0027f	48 8b f2	 mov	 rsi, rdx
  00282	b9 14 00 00 00	 mov	 ecx, 20
  00287	f3 a4		 rep movsb

; 3453 : 
; 3454 :       /* partition loop */
; 3455 :       i=1;

  00289	c7 85 b4 00 00
	00 01 00 00 00	 mov	 DWORD PTR i$9[rbp], 1

; 3456 :       j=n-1;

  00293	8b 85 f8 01 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  00299	ff c8		 dec	 eax
  0029b	89 85 d4 00 00
	00		 mov	 DWORD PTR j$10[rbp], eax
$LN4@stbtt__sor:

; 3457 :       for(;;) {
; 3458 :          /* handling of equality is crucial here */
; 3459 :          /* for sentinels & efficiency with duplicates */
; 3460 :          for (;;++i) {

  002a1	eb 0e		 jmp	 SHORT $LN9@stbtt__sor
$LN7@stbtt__sor:
  002a3	8b 85 b4 00 00
	00		 mov	 eax, DWORD PTR i$9[rbp]
  002a9	ff c0		 inc	 eax
  002ab	89 85 b4 00 00
	00		 mov	 DWORD PTR i$9[rbp], eax
$LN9@stbtt__sor:

; 3461 :             if (!STBTT__COMPARE(&p[i], &p[0])) break;

  002b1	48 63 85 b4 00
	00 00		 movsxd	 rax, DWORD PTR i$9[rbp]
  002b8	48 6b c0 14	 imul	 rax, rax, 20
  002bc	b9 14 00 00 00	 mov	 ecx, 20
  002c1	48 6b c9 00	 imul	 rcx, rcx, 0
  002c5	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  002cc	48 8b bd f0 01
	00 00		 mov	 rdi, QWORD PTR p$[rbp]
  002d3	f3 0f 10 44 0a
	04		 movss	 xmm0, DWORD PTR [rdx+rcx+4]
  002d9	0f 2f 44 07 04	 comiss	 xmm0, DWORD PTR [rdi+rax+4]
  002de	77 02		 ja	 SHORT $LN14@stbtt__sor
  002e0	eb 02		 jmp	 SHORT $LN8@stbtt__sor
$LN14@stbtt__sor:

; 3462 :          }

  002e2	eb bf		 jmp	 SHORT $LN7@stbtt__sor
$LN8@stbtt__sor:

; 3463 :          for (;;--j) {

  002e4	eb 0e		 jmp	 SHORT $LN12@stbtt__sor
$LN10@stbtt__sor:
  002e6	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR j$10[rbp]
  002ec	ff c8		 dec	 eax
  002ee	89 85 d4 00 00
	00		 mov	 DWORD PTR j$10[rbp], eax
$LN12@stbtt__sor:

; 3464 :             if (!STBTT__COMPARE(&p[0], &p[j])) break;

  002f4	b8 14 00 00 00	 mov	 eax, 20
  002f9	48 6b c0 00	 imul	 rax, rax, 0
  002fd	48 63 8d d4 00
	00 00		 movsxd	 rcx, DWORD PTR j$10[rbp]
  00304	48 6b c9 14	 imul	 rcx, rcx, 20
  00308	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  0030f	48 8b bd f0 01
	00 00		 mov	 rdi, QWORD PTR p$[rbp]
  00316	f3 0f 10 44 0a
	04		 movss	 xmm0, DWORD PTR [rdx+rcx+4]
  0031c	0f 2f 44 07 04	 comiss	 xmm0, DWORD PTR [rdi+rax+4]
  00321	77 02		 ja	 SHORT $LN15@stbtt__sor
  00323	eb 02		 jmp	 SHORT $LN11@stbtt__sor
$LN15@stbtt__sor:

; 3465 :          }

  00325	eb bf		 jmp	 SHORT $LN10@stbtt__sor
$LN11@stbtt__sor:

; 3466 :          /* make sure we haven't crossed */
; 3467 :          if (i >= j) break;

  00327	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR j$10[rbp]
  0032d	39 85 b4 00 00
	00		 cmp	 DWORD PTR i$9[rbp], eax
  00333	7c 05		 jl	 SHORT $LN16@stbtt__sor
  00335	e9 aa 00 00 00	 jmp	 $LN5@stbtt__sor
$LN16@stbtt__sor:

; 3468 :          t = p[i];

  0033a	48 63 85 b4 00
	00 00		 movsxd	 rax, DWORD PTR i$9[rbp]
  00341	48 6b c0 14	 imul	 rax, rax, 20
  00345	48 8d 4d 08	 lea	 rcx, QWORD PTR t$4[rbp]
  00349	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  00350	48 8b f9	 mov	 rdi, rcx
  00353	48 8d 34 02	 lea	 rsi, QWORD PTR [rdx+rax]
  00357	b9 14 00 00 00	 mov	 ecx, 20
  0035c	f3 a4		 rep movsb

; 3469 :          p[i] = p[j];

  0035e	48 63 85 d4 00
	00 00		 movsxd	 rax, DWORD PTR j$10[rbp]
  00365	48 6b c0 14	 imul	 rax, rax, 20
  00369	48 63 8d b4 00
	00 00		 movsxd	 rcx, DWORD PTR i$9[rbp]
  00370	48 6b c9 14	 imul	 rcx, rcx, 20
  00374	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  0037b	48 8b bd f0 01
	00 00		 mov	 rdi, QWORD PTR p$[rbp]
  00382	48 89 bd c8 01
	00 00		 mov	 QWORD PTR tv279[rbp], rdi
  00389	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0038d	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR tv279[rbp]
  00394	48 8d 34 01	 lea	 rsi, QWORD PTR [rcx+rax]
  00398	b9 14 00 00 00	 mov	 ecx, 20
  0039d	f3 a4		 rep movsb

; 3470 :          p[j] = t;

  0039f	48 63 85 d4 00
	00 00		 movsxd	 rax, DWORD PTR j$10[rbp]
  003a6	48 6b c0 14	 imul	 rax, rax, 20
  003aa	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  003b1	48 8d 55 08	 lea	 rdx, QWORD PTR t$4[rbp]
  003b5	48 8d 3c 01	 lea	 rdi, QWORD PTR [rcx+rax]
  003b9	48 8b f2	 mov	 rsi, rdx
  003bc	b9 14 00 00 00	 mov	 ecx, 20
  003c1	f3 a4		 rep movsb

; 3471 : 
; 3472 :          ++i;

  003c3	8b 85 b4 00 00
	00		 mov	 eax, DWORD PTR i$9[rbp]
  003c9	ff c0		 inc	 eax
  003cb	89 85 b4 00 00
	00		 mov	 DWORD PTR i$9[rbp], eax

; 3473 :          --j;

  003d1	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR j$10[rbp]
  003d7	ff c8		 dec	 eax
  003d9	89 85 d4 00 00
	00		 mov	 DWORD PTR j$10[rbp], eax

; 3474 :       }

  003df	e9 bd fe ff ff	 jmp	 $LN4@stbtt__sor
$LN5@stbtt__sor:

; 3475 :       /* recurse on smaller side, iterate on larger */
; 3476 :       if (j < (n-i)) {

  003e4	8b 85 b4 00 00
	00		 mov	 eax, DWORD PTR i$9[rbp]
  003ea	8b 8d f8 01 00
	00		 mov	 ecx, DWORD PTR n$[rbp]
  003f0	2b c8		 sub	 ecx, eax
  003f2	8b c1		 mov	 eax, ecx
  003f4	39 85 d4 00 00
	00		 cmp	 DWORD PTR j$10[rbp], eax
  003fa	7d 49		 jge	 SHORT $LN17@stbtt__sor

; 3477 :          stbtt__sort_edges_quicksort(p,j);

  003fc	8b 95 d4 00 00
	00		 mov	 edx, DWORD PTR j$10[rbp]
  00402	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00409	e8 00 00 00 00	 call	 ?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_quicksort

; 3478 :          p = p+i;

  0040e	48 63 85 b4 00
	00 00		 movsxd	 rax, DWORD PTR i$9[rbp]
  00415	48 6b c0 14	 imul	 rax, rax, 20
  00419	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00420	48 03 c8	 add	 rcx, rax
  00423	48 8b c1	 mov	 rax, rcx
  00426	48 89 85 f0 01
	00 00		 mov	 QWORD PTR p$[rbp], rax

; 3479 :          n = n-i;

  0042d	8b 85 b4 00 00
	00		 mov	 eax, DWORD PTR i$9[rbp]
  00433	8b 8d f8 01 00
	00		 mov	 ecx, DWORD PTR n$[rbp]
  00439	2b c8		 sub	 ecx, eax
  0043b	8b c1		 mov	 eax, ecx
  0043d	89 85 f8 01 00
	00		 mov	 DWORD PTR n$[rbp], eax

; 3480 :       } else {

  00443	eb 3b		 jmp	 SHORT $LN18@stbtt__sor
$LN17@stbtt__sor:

; 3481 :          stbtt__sort_edges_quicksort(p+i, n-i);

  00445	8b 85 b4 00 00
	00		 mov	 eax, DWORD PTR i$9[rbp]
  0044b	8b 8d f8 01 00
	00		 mov	 ecx, DWORD PTR n$[rbp]
  00451	2b c8		 sub	 ecx, eax
  00453	8b c1		 mov	 eax, ecx
  00455	48 63 8d b4 00
	00 00		 movsxd	 rcx, DWORD PTR i$9[rbp]
  0045c	48 6b c9 14	 imul	 rcx, rcx, 20
  00460	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  00467	48 03 d1	 add	 rdx, rcx
  0046a	48 8b ca	 mov	 rcx, rdx
  0046d	8b d0		 mov	 edx, eax
  0046f	e8 00 00 00 00	 call	 ?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_quicksort

; 3482 :          n = j;

  00474	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR j$10[rbp]
  0047a	89 85 f8 01 00
	00		 mov	 DWORD PTR n$[rbp], eax
$LN18@stbtt__sor:

; 3483 :       }
; 3484 :    }

  00480	e9 aa fb ff ff	 jmp	 $LN2@stbtt__sor
$LN3@stbtt__sor:

; 3485 : }

  00485	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00489	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z$rtcFrameData
  00490	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00495	48 8d a5 d0 01
	00 00		 lea	 rsp, QWORD PTR [rbp+464]
  0049c	5f		 pop	 rdi
  0049d	5e		 pop	 rsi
  0049e	5d		 pop	 rbp
  0049f	c3		 ret	 0
?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ENDP ; stbtt__sort_edges_quicksort
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z
_TEXT	SEGMENT
i$ = 4
j$ = 36
t$4 = 72
a$5 = 120
b$6 = 152
c$7 = 180
tv78 = 388
tv142 = 392
__$ArrayPad$ = 400
p$ = 448
n$ = 456
?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z PROC ; stbtt__sort_edges_ins_sort, COMDAT

; 3408 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec c0 01
	00 00		 sub	 rsp, 448		; 000001c0H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 70 00 00 00	 mov	 ecx, 112		; 00000070H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+488]
  0002f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00036	48 33 c5	 xor	 rax, rbp
  00039	48 89 85 90 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3409 :    int i,j;
; 3410 :    for (i=1; i < n; ++i) {

  00040	c7 45 04 01 00
	00 00		 mov	 DWORD PTR i$[rbp], 1
  00047	eb 08		 jmp	 SHORT $LN4@stbtt__sor
$LN2@stbtt__sor:
  00049	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  0004c	ff c0		 inc	 eax
  0004e	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN4@stbtt__sor:
  00051	8b 85 c8 01 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  00057	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  0005a	0f 8d 14 01 00
	00		 jge	 $LN3@stbtt__sor

; 3411 :       stbtt__edge t = p[i], *a = &t;

  00060	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  00064	48 6b c0 14	 imul	 rax, rax, 20
  00068	48 8d 4d 48	 lea	 rcx, QWORD PTR t$4[rbp]
  0006c	48 8b 95 c0 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  00073	48 8b f9	 mov	 rdi, rcx
  00076	48 8d 34 02	 lea	 rsi, QWORD PTR [rdx+rax]
  0007a	b9 14 00 00 00	 mov	 ecx, 20
  0007f	f3 a4		 rep movsb
  00081	48 8d 45 48	 lea	 rax, QWORD PTR t$4[rbp]
  00085	48 89 45 78	 mov	 QWORD PTR a$5[rbp], rax

; 3412 :       j = i;

  00089	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  0008c	89 45 24	 mov	 DWORD PTR j$[rbp], eax
$LN5@stbtt__sor:

; 3413 :       while (j > 0) {

  0008f	83 7d 24 00	 cmp	 DWORD PTR j$[rbp], 0
  00093	0f 8e ad 00 00
	00		 jle	 $LN6@stbtt__sor

; 3414 :          stbtt__edge *b = &p[j-1];

  00099	8b 45 24	 mov	 eax, DWORD PTR j$[rbp]
  0009c	ff c8		 dec	 eax
  0009e	48 98		 cdqe
  000a0	48 6b c0 14	 imul	 rax, rax, 20
  000a4	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  000ab	48 03 c8	 add	 rcx, rax
  000ae	48 8b c1	 mov	 rax, rcx
  000b1	48 89 85 98 00
	00 00		 mov	 QWORD PTR b$6[rbp], rax

; 3415 :          int c = STBTT__COMPARE(a,b);

  000b8	48 8b 85 98 00
	00 00		 mov	 rax, QWORD PTR b$6[rbp]
  000bf	48 8b 4d 78	 mov	 rcx, QWORD PTR a$5[rbp]
  000c3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  000c8	0f 2f 41 04	 comiss	 xmm0, DWORD PTR [rcx+4]
  000cc	76 0c		 jbe	 SHORT $LN10@stbtt__sor
  000ce	c7 85 84 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv78[rbp], 1
  000d8	eb 0a		 jmp	 SHORT $LN11@stbtt__sor
$LN10@stbtt__sor:
  000da	c7 85 84 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv78[rbp], 0
$LN11@stbtt__sor:
  000e4	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR tv78[rbp]
  000ea	89 85 b4 00 00
	00		 mov	 DWORD PTR c$7[rbp], eax

; 3416 :          if (!c) break;

  000f0	83 bd b4 00 00
	00 00		 cmp	 DWORD PTR c$7[rbp], 0
  000f7	75 02		 jne	 SHORT $LN7@stbtt__sor
  000f9	eb 4b		 jmp	 SHORT $LN6@stbtt__sor
$LN7@stbtt__sor:

; 3417 :          p[j] = p[j-1];

  000fb	8b 45 24	 mov	 eax, DWORD PTR j$[rbp]
  000fe	ff c8		 dec	 eax
  00100	48 98		 cdqe
  00102	48 6b c0 14	 imul	 rax, rax, 20
  00106	48 63 4d 24	 movsxd	 rcx, DWORD PTR j$[rbp]
  0010a	48 6b c9 14	 imul	 rcx, rcx, 20
  0010e	48 8b 95 c0 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  00115	48 8b bd c0 01
	00 00		 mov	 rdi, QWORD PTR p$[rbp]
  0011c	48 89 bd 88 01
	00 00		 mov	 QWORD PTR tv142[rbp], rdi
  00123	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00127	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR tv142[rbp]
  0012e	48 8d 34 01	 lea	 rsi, QWORD PTR [rcx+rax]
  00132	b9 14 00 00 00	 mov	 ecx, 20
  00137	f3 a4		 rep movsb

; 3418 :          --j;

  00139	8b 45 24	 mov	 eax, DWORD PTR j$[rbp]
  0013c	ff c8		 dec	 eax
  0013e	89 45 24	 mov	 DWORD PTR j$[rbp], eax

; 3419 :       }

  00141	e9 49 ff ff ff	 jmp	 $LN5@stbtt__sor
$LN6@stbtt__sor:

; 3420 :       if (i != j)

  00146	8b 45 24	 mov	 eax, DWORD PTR j$[rbp]
  00149	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  0014c	74 21		 je	 SHORT $LN8@stbtt__sor

; 3421 :          p[j] = t;

  0014e	48 63 45 24	 movsxd	 rax, DWORD PTR j$[rbp]
  00152	48 6b c0 14	 imul	 rax, rax, 20
  00156	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  0015d	48 8d 55 48	 lea	 rdx, QWORD PTR t$4[rbp]
  00161	48 8d 3c 01	 lea	 rdi, QWORD PTR [rcx+rax]
  00165	48 8b f2	 mov	 rsi, rdx
  00168	b9 14 00 00 00	 mov	 ecx, 20
  0016d	f3 a4		 rep movsb
$LN8@stbtt__sor:

; 3422 :    }

  0016f	e9 d5 fe ff ff	 jmp	 $LN2@stbtt__sor
$LN3@stbtt__sor:

; 3423 : }

  00174	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00178	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z$rtcFrameData
  0017f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00184	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0018b	48 33 cd	 xor	 rcx, rbp
  0018e	e8 00 00 00 00	 call	 __security_check_cookie
  00193	48 8d a5 a0 01
	00 00		 lea	 rsp, QWORD PTR [rbp+416]
  0019a	5f		 pop	 rdi
  0019b	5e		 pop	 rsi
  0019c	5d		 pop	 rbp
  0019d	c3		 ret	 0
?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z ENDP ; stbtt__sort_edges_ins_sort
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z
_TEXT	SEGMENT
hh$ = 8
active$ = 56
y$ = 84
j$ = 116
i$ = 148
scanline_data$ = 192
scanline$ = 744
scanline2$ = 776
scan_y_top$6 = 804
scan_y_bottom$7 = 836
step$8 = 872
z$9 = 904
z$10 = 936
sum$11 = 964
k$12 = 996
m$13 = 1028
z$14 = 1064
__$ArrayPad$ = 1656
result$ = 1696
e$ = 1704
n$ = 1712
vsubsample$ = 1720
off_x$ = 1728
off_y$ = 1736
userdata$ = 1744
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z PROC ; stbtt__rasterize_sorted_edges, COMDAT

; 3306 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec b8 06
	00 00		 sub	 rsp, 1720		; 000006b8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 ae 01 00 00	 mov	 ecx, 430		; 000001aeH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR [rsp+1752]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 78 06
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3307 :    stbtt__hheap hh = { 0, 0, 0 };

  0004a	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR hh$[rbp], 0
  00052	48 c7 45 10 00
	00 00 00	 mov	 QWORD PTR hh$[rbp+8], 0
  0005a	c7 45 18 00 00
	00 00		 mov	 DWORD PTR hh$[rbp+16], 0

; 3308 :    stbtt__active_edge *active = NULL;

  00061	48 c7 45 38 00
	00 00 00	 mov	 QWORD PTR active$[rbp], 0

; 3309 :    int y,j=0, i;

  00069	c7 45 74 00 00
	00 00		 mov	 DWORD PTR j$[rbp], 0

; 3310 :    float scanline_data[129], *scanline, *scanline2;
; 3311 : 
; 3312 :    STBTT__NOTUSED(vsubsample);
; 3313 : 
; 3314 :    if (result->w > 64)

  00070	48 8b 85 a0 06
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  00077	83 38 40	 cmp	 DWORD PTR [rax], 64	; 00000040H
  0007a	7e 24		 jle	 SHORT $LN19@stbtt__ras

; 3315 :       scanline = (float *) STBTT_malloc((result->w*2+1) * sizeof(float), userdata);

  0007c	48 8b 85 a0 06
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  00083	8b 00		 mov	 eax, DWORD PTR [rax]
  00085	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  00089	48 98		 cdqe
  0008b	48 c1 e0 02	 shl	 rax, 2
  0008f	48 8b c8	 mov	 rcx, rax
  00092	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00097	48 89 85 e8 02
	00 00		 mov	 QWORD PTR scanline$[rbp], rax

; 3316 :    else

  0009e	eb 0e		 jmp	 SHORT $LN20@stbtt__ras
$LN19@stbtt__ras:

; 3317 :       scanline = scanline_data;

  000a0	48 8d 85 c0 00
	00 00		 lea	 rax, QWORD PTR scanline_data$[rbp]
  000a7	48 89 85 e8 02
	00 00		 mov	 QWORD PTR scanline$[rbp], rax
$LN20@stbtt__ras:

; 3318 : 
; 3319 :    scanline2 = scanline + result->w;

  000ae	48 8b 85 a0 06
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  000b5	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  000b8	48 8b 8d e8 02
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  000bf	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  000c3	48 89 85 08 03
	00 00		 mov	 QWORD PTR scanline2$[rbp], rax

; 3320 : 
; 3321 :    y = off_y;

  000ca	8b 85 c8 06 00
	00		 mov	 eax, DWORD PTR off_y$[rbp]
  000d0	89 45 54	 mov	 DWORD PTR y$[rbp], eax

; 3322 :    e[n].y0 = (float) (off_y + result->h) + 1;

  000d3	48 8b 85 a0 06
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  000da	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  000dd	8b 8d c8 06 00
	00		 mov	 ecx, DWORD PTR off_y$[rbp]
  000e3	03 c8		 add	 ecx, eax
  000e5	8b c1		 mov	 eax, ecx
  000e7	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000eb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  000f3	48 63 85 b0 06
	00 00		 movsxd	 rax, DWORD PTR n$[rbp]
  000fa	48 6b c0 14	 imul	 rax, rax, 20
  000fe	48 8b 8d a8 06
	00 00		 mov	 rcx, QWORD PTR e$[rbp]
  00105	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0
$LN2@stbtt__ras:

; 3323 : 
; 3324 :    while (j < result->h) {

  0010b	48 8b 85 a0 06
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  00112	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00115	39 45 74	 cmp	 DWORD PTR j$[rbp], eax
  00118	0f 8d 01 04 00
	00		 jge	 $LN3@stbtt__ras

; 3325 :       // find center of pixel for this scanline
; 3326 :       float scan_y_top    = y + 0.0f;

  0011e	f3 0f 2a 45 54	 cvtsi2ss xmm0, DWORD PTR y$[rbp]
  00123	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@00000000
  0012b	f3 0f 11 85 24
	03 00 00	 movss	 DWORD PTR scan_y_top$6[rbp], xmm0

; 3327 :       float scan_y_bottom = y + 1.0f;

  00133	f3 0f 2a 45 54	 cvtsi2ss xmm0, DWORD PTR y$[rbp]
  00138	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00140	f3 0f 11 85 44
	03 00 00	 movss	 DWORD PTR scan_y_bottom$7[rbp], xmm0

; 3328 :       stbtt__active_edge **step = &active;

  00148	48 8d 45 38	 lea	 rax, QWORD PTR active$[rbp]
  0014c	48 89 85 68 03
	00 00		 mov	 QWORD PTR step$8[rbp], rax

; 3329 : 
; 3330 :       STBTT_memset(scanline , 0, result->w*sizeof(scanline[0]));

  00153	48 8b 85 a0 06
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  0015a	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0015d	48 c1 e0 02	 shl	 rax, 2
  00161	4c 8b c0	 mov	 r8, rax
  00164	33 d2		 xor	 edx, edx
  00166	48 8b 8d e8 02
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  0016d	e8 00 00 00 00	 call	 memset

; 3331 :       STBTT_memset(scanline2, 0, (result->w+1)*sizeof(scanline[0]));

  00172	48 8b 85 a0 06
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  00179	8b 00		 mov	 eax, DWORD PTR [rax]
  0017b	ff c0		 inc	 eax
  0017d	48 98		 cdqe
  0017f	48 c1 e0 02	 shl	 rax, 2
  00183	4c 8b c0	 mov	 r8, rax
  00186	33 d2		 xor	 edx, edx
  00188	48 8b 8d 08 03
	00 00		 mov	 rcx, QWORD PTR scanline2$[rbp]
  0018f	e8 00 00 00 00	 call	 memset
$LN4@stbtt__ras:

; 3332 : 
; 3333 :       // update all active edges;
; 3334 :       // remove all active edges that terminate before the top of this scanline
; 3335 :       while (*step) {

  00194	48 8b 85 68 03
	00 00		 mov	 rax, QWORD PTR step$8[rbp]
  0019b	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0019f	0f 84 b0 00 00
	00		 je	 $LN5@stbtt__ras

; 3336 :          stbtt__active_edge * z = *step;

  001a5	48 8b 85 68 03
	00 00		 mov	 rax, QWORD PTR step$8[rbp]
  001ac	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001af	48 89 85 88 03
	00 00		 mov	 QWORD PTR z$9[rbp], rax

; 3337 :          if (z->ey <= scan_y_top) {

  001b6	48 8b 85 88 03
	00 00		 mov	 rax, QWORD PTR z$9[rbp]
  001bd	f3 0f 10 85 24
	03 00 00	 movss	 xmm0, DWORD PTR scan_y_top$6[rbp]
  001c5	0f 2f 40 1c	 comiss	 xmm0, DWORD PTR [rax+28]
  001c9	72 74		 jb	 SHORT $LN21@stbtt__ras

; 3338 :             *step = z->next; // delete from list

  001cb	48 8b 85 68 03
	00 00		 mov	 rax, QWORD PTR step$8[rbp]
  001d2	48 8b 8d 88 03
	00 00		 mov	 rcx, QWORD PTR z$9[rbp]
  001d9	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001dc	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN8@stbtt__ras:

; 3339 :             STBTT_assert(z->direction);

  001df	48 8b 85 88 03
	00 00		 mov	 rax, QWORD PTR z$9[rbp]
  001e6	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  001eb	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  001f2	7a 24		 jp	 SHORT $LN31@stbtt__ras
  001f4	75 22		 jne	 SHORT $LN31@stbtt__ras
  001f6	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z@4JA
  001fc	83 c0 21	 add	 eax, 33			; 00000021H
  001ff	44 8b c0	 mov	 r8d, eax
  00202	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00209	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@LMAHJHLI@?$AAz?$AA?9?$AA?$DO?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
  00210	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00216	33 c0		 xor	 eax, eax
$LN31@stbtt__ras:
  00218	33 c0		 xor	 eax, eax
  0021a	85 c0		 test	 eax, eax
  0021c	75 c1		 jne	 SHORT $LN8@stbtt__ras

; 3340 :             z->direction = 0;

  0021e	48 8b 85 88 03
	00 00		 mov	 rax, QWORD PTR z$9[rbp]
  00225	0f 57 c0	 xorps	 xmm0, xmm0
  00228	f3 0f 11 40 14	 movss	 DWORD PTR [rax+20], xmm0

; 3341 :             stbtt__hheap_free(&hh, z);

  0022d	48 8b 95 88 03
	00 00		 mov	 rdx, QWORD PTR z$9[rbp]
  00234	48 8d 4d 08	 lea	 rcx, QWORD PTR hh$[rbp]
  00238	e8 00 00 00 00	 call	 ?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z ; stbtt__hheap_free

; 3342 :          } else {

  0023d	eb 11		 jmp	 SHORT $LN22@stbtt__ras
$LN21@stbtt__ras:

; 3343 :             step = &((*step)->next); // advance through list

  0023f	48 8b 85 68 03
	00 00		 mov	 rax, QWORD PTR step$8[rbp]
  00246	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00249	48 89 85 68 03
	00 00		 mov	 QWORD PTR step$8[rbp], rax
$LN22@stbtt__ras:

; 3344 :          }
; 3345 :       }

  00250	e9 3f ff ff ff	 jmp	 $LN4@stbtt__ras
$LN5@stbtt__ras:
$LN9@stbtt__ras:

; 3346 : 
; 3347 :       // insert all edges that start before the bottom of this scanline
; 3348 :       while (e->y0 <= scan_y_bottom) {

  00255	48 8b 85 a8 06
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  0025c	f3 0f 10 85 44
	03 00 00	 movss	 xmm0, DWORD PTR scan_y_bottom$7[rbp]
  00264	0f 2f 40 04	 comiss	 xmm0, DWORD PTR [rax+4]
  00268	0f 82 04 01 00
	00		 jb	 $LN10@stbtt__ras

; 3349 :          if (e->y0 != e->y1) {

  0026e	48 8b 85 a8 06
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  00275	48 8b 8d a8 06
	00 00		 mov	 rcx, QWORD PTR e$[rbp]
  0027c	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00281	0f 2e 41 0c	 ucomiss xmm0, DWORD PTR [rcx+12]
  00285	7a 06		 jp	 SHORT $LN33@stbtt__ras
  00287	0f 84 ce 00 00
	00		 je	 $LN23@stbtt__ras
$LN33@stbtt__ras:

; 3350 :             stbtt__active_edge *z = stbtt__new_active(&hh, e, off_x, scan_y_top, userdata);

  0028d	48 8b 85 d0 06
	00 00		 mov	 rax, QWORD PTR userdata$[rbp]
  00294	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00299	f3 0f 10 9d 24
	03 00 00	 movss	 xmm3, DWORD PTR scan_y_top$6[rbp]
  002a1	44 8b 85 c0 06
	00 00		 mov	 r8d, DWORD PTR off_x$[rbp]
  002a8	48 8b 95 a8 06
	00 00		 mov	 rdx, QWORD PTR e$[rbp]
  002af	48 8d 4d 08	 lea	 rcx, QWORD PTR hh$[rbp]
  002b3	e8 00 00 00 00	 call	 ?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z ; stbtt__new_active
  002b8	48 89 85 a8 03
	00 00		 mov	 QWORD PTR z$10[rbp], rax

; 3351 :             if (z != NULL) {

  002bf	48 83 bd a8 03
	00 00 00	 cmp	 QWORD PTR z$10[rbp], 0
  002c7	0f 84 8e 00 00
	00		 je	 $LN24@stbtt__ras

; 3352 :                if (j == 0 && off_y != 0) {

  002cd	83 7d 74 00	 cmp	 DWORD PTR j$[rbp], 0
  002d1	75 32		 jne	 SHORT $LN25@stbtt__ras
  002d3	83 bd c8 06 00
	00 00		 cmp	 DWORD PTR off_y$[rbp], 0
  002da	74 29		 je	 SHORT $LN25@stbtt__ras

; 3353 :                   if (z->ey < scan_y_top) {

  002dc	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR z$10[rbp]
  002e3	f3 0f 10 85 24
	03 00 00	 movss	 xmm0, DWORD PTR scan_y_top$6[rbp]
  002eb	0f 2f 40 1c	 comiss	 xmm0, DWORD PTR [rax+28]
  002ef	76 14		 jbe	 SHORT $LN26@stbtt__ras

; 3354 :                      // this can happen due to subpixel positioning and some kind of fp rounding error i think
; 3355 :                      z->ey = scan_y_top;

  002f1	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR z$10[rbp]
  002f8	f3 0f 10 85 24
	03 00 00	 movss	 xmm0, DWORD PTR scan_y_top$6[rbp]
  00300	f3 0f 11 40 1c	 movss	 DWORD PTR [rax+28], xmm0
$LN26@stbtt__ras:
$LN25@stbtt__ras:
$LN13@stbtt__ras:

; 3356 :                   }
; 3357 :                }
; 3358 :                STBTT_assert(z->ey >= scan_y_top); // if we get really unlucky a tiny bit of an edge can be out of bounds

  00305	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR z$10[rbp]
  0030c	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [rax+28]
  00311	0f 2f 85 24 03
	00 00		 comiss	 xmm0, DWORD PTR scan_y_top$6[rbp]
  00318	73 22		 jae	 SHORT $LN32@stbtt__ras
  0031a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z@4JA
  00320	83 c0 34	 add	 eax, 52			; 00000034H
  00323	44 8b c0	 mov	 r8d, eax
  00326	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0032d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@PMJHELI@?$AAz?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA_?$AAy?$AA_?$AAt?$AAo?$AAp?$AA?$AA@
  00334	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0033a	33 c0		 xor	 eax, eax
$LN32@stbtt__ras:
  0033c	33 c0		 xor	 eax, eax
  0033e	85 c0		 test	 eax, eax
  00340	75 c3		 jne	 SHORT $LN13@stbtt__ras

; 3359 :                // insert at front
; 3360 :                z->next = active;

  00342	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR z$10[rbp]
  00349	48 8b 4d 38	 mov	 rcx, QWORD PTR active$[rbp]
  0034d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 3361 :                active = z;

  00350	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR z$10[rbp]
  00357	48 89 45 38	 mov	 QWORD PTR active$[rbp], rax
$LN24@stbtt__ras:
$LN23@stbtt__ras:

; 3362 :             }
; 3363 :          }
; 3364 :          ++e;

  0035b	48 8b 85 a8 06
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  00362	48 83 c0 14	 add	 rax, 20
  00366	48 89 85 a8 06
	00 00		 mov	 QWORD PTR e$[rbp], rax

; 3365 :       }

  0036d	e9 e3 fe ff ff	 jmp	 $LN9@stbtt__ras
$LN10@stbtt__ras:

; 3366 : 
; 3367 :       // now process all active edges
; 3368 :       if (active)

  00372	48 83 7d 38 00	 cmp	 QWORD PTR active$[rbp], 0
  00377	74 36		 je	 SHORT $LN27@stbtt__ras

; 3369 :          stbtt__fill_active_edges_new(scanline, scanline2+1, result->w, active, scan_y_top);

  00379	48 8b 85 08 03
	00 00		 mov	 rax, QWORD PTR scanline2$[rbp]
  00380	48 83 c0 04	 add	 rax, 4
  00384	f3 0f 10 85 24
	03 00 00	 movss	 xmm0, DWORD PTR scan_y_top$6[rbp]
  0038c	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00392	4c 8b 4d 38	 mov	 r9, QWORD PTR active$[rbp]
  00396	48 8b 8d a0 06
	00 00		 mov	 rcx, QWORD PTR result$[rbp]
  0039d	44 8b 01	 mov	 r8d, DWORD PTR [rcx]
  003a0	48 8b d0	 mov	 rdx, rax
  003a3	48 8b 8d e8 02
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  003aa	e8 00 00 00 00	 call	 ?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z ; stbtt__fill_active_edges_new
$LN27@stbtt__ras:

; 3370 : 
; 3371 :       {
; 3372 :          float sum = 0;

  003af	0f 57 c0	 xorps	 xmm0, xmm0
  003b2	f3 0f 11 85 c4
	03 00 00	 movss	 DWORD PTR sum$11[rbp], xmm0

; 3373 :          for (i=0; i < result->w; ++i) {

  003ba	c7 85 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR i$[rbp], 0
  003c4	eb 0e		 jmp	 SHORT $LN16@stbtt__ras
$LN14@stbtt__ras:
  003c6	8b 85 94 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  003cc	ff c0		 inc	 eax
  003ce	89 85 94 00 00
	00		 mov	 DWORD PTR i$[rbp], eax
$LN16@stbtt__ras:
  003d4	48 8b 85 a0 06
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  003db	8b 00		 mov	 eax, DWORD PTR [rax]
  003dd	39 85 94 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  003e3	0f 8d c1 00 00
	00		 jge	 $LN15@stbtt__ras

; 3374 :             float k;
; 3375 :             int m;
; 3376 :             sum += scanline2[i];

  003e9	48 63 85 94 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  003f0	48 8b 8d 08 03
	00 00		 mov	 rcx, QWORD PTR scanline2$[rbp]
  003f7	f3 0f 10 85 c4
	03 00 00	 movss	 xmm0, DWORD PTR sum$11[rbp]
  003ff	f3 0f 58 04 81	 addss	 xmm0, DWORD PTR [rcx+rax*4]
  00404	f3 0f 11 85 c4
	03 00 00	 movss	 DWORD PTR sum$11[rbp], xmm0

; 3377 :             k = scanline[i] + sum;

  0040c	48 63 85 94 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  00413	48 8b 8d e8 02
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  0041a	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  0041f	f3 0f 58 85 c4
	03 00 00	 addss	 xmm0, DWORD PTR sum$11[rbp]
  00427	f3 0f 11 85 e4
	03 00 00	 movss	 DWORD PTR k$12[rbp], xmm0

; 3378 :             k = (float) STBTT_fabs(k)*255 + 0.5f;

  0042f	f3 0f 10 85 e4
	03 00 00	 movss	 xmm0, DWORD PTR k$12[rbp]
  00437	e8 00 00 00 00	 call	 fabsf
  0043c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00444	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0044c	f3 0f 11 85 e4
	03 00 00	 movss	 DWORD PTR k$12[rbp], xmm0

; 3379 :             m = (int) k;

  00454	f3 0f 2c 85 e4
	03 00 00	 cvttss2si eax, DWORD PTR k$12[rbp]
  0045c	89 85 04 04 00
	00		 mov	 DWORD PTR m$13[rbp], eax

; 3380 :             if (m > 255) m = 255;

  00462	81 bd 04 04 00
	00 ff 00 00 00	 cmp	 DWORD PTR m$13[rbp], 255 ; 000000ffH
  0046c	7e 0a		 jle	 SHORT $LN28@stbtt__ras
  0046e	c7 85 04 04 00
	00 ff 00 00 00	 mov	 DWORD PTR m$13[rbp], 255 ; 000000ffH
$LN28@stbtt__ras:

; 3381 :             result->pixels[j*result->stride + i] = (unsigned char) m;

  00478	48 8b 85 a0 06
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  0047f	8b 4d 74	 mov	 ecx, DWORD PTR j$[rbp]
  00482	0f af 48 08	 imul	 ecx, DWORD PTR [rax+8]
  00486	8b c1		 mov	 eax, ecx
  00488	03 85 94 00 00
	00		 add	 eax, DWORD PTR i$[rbp]
  0048e	48 98		 cdqe
  00490	48 8b 8d a0 06
	00 00		 mov	 rcx, QWORD PTR result$[rbp]
  00497	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0049b	0f b6 95 04 04
	00 00		 movzx	 edx, BYTE PTR m$13[rbp]
  004a2	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 3382 :          }

  004a5	e9 1c ff ff ff	 jmp	 $LN14@stbtt__ras
$LN15@stbtt__ras:

; 3383 :       }
; 3384 :       // advance all the edges
; 3385 :       step = &active;

  004aa	48 8d 45 38	 lea	 rax, QWORD PTR active$[rbp]
  004ae	48 89 85 68 03
	00 00		 mov	 QWORD PTR step$8[rbp], rax
$LN17@stbtt__ras:

; 3386 :       while (*step) {

  004b5	48 8b 85 68 03
	00 00		 mov	 rax, QWORD PTR step$8[rbp]
  004bc	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  004c0	74 48		 je	 SHORT $LN18@stbtt__ras

; 3387 :          stbtt__active_edge *z = *step;

  004c2	48 8b 85 68 03
	00 00		 mov	 rax, QWORD PTR step$8[rbp]
  004c9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  004cc	48 89 85 28 04
	00 00		 mov	 QWORD PTR z$14[rbp], rax

; 3388 :          z->fx += z->fdx; // advance to position for current scanline

  004d3	48 8b 85 28 04
	00 00		 mov	 rax, QWORD PTR z$14[rbp]
  004da	48 8b 8d 28 04
	00 00		 mov	 rcx, QWORD PTR z$14[rbp]
  004e1	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  004e6	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [rcx+12]
  004eb	48 8b 85 28 04
	00 00		 mov	 rax, QWORD PTR z$14[rbp]
  004f2	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0

; 3389 :          step = &((*step)->next); // advance through list

  004f7	48 8b 85 68 03
	00 00		 mov	 rax, QWORD PTR step$8[rbp]
  004fe	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00501	48 89 85 68 03
	00 00		 mov	 QWORD PTR step$8[rbp], rax

; 3390 :       }

  00508	eb ab		 jmp	 SHORT $LN17@stbtt__ras
$LN18@stbtt__ras:

; 3391 : 
; 3392 :       ++y;

  0050a	8b 45 54	 mov	 eax, DWORD PTR y$[rbp]
  0050d	ff c0		 inc	 eax
  0050f	89 45 54	 mov	 DWORD PTR y$[rbp], eax

; 3393 :       ++j;

  00512	8b 45 74	 mov	 eax, DWORD PTR j$[rbp]
  00515	ff c0		 inc	 eax
  00517	89 45 74	 mov	 DWORD PTR j$[rbp], eax

; 3394 :    }

  0051a	e9 ec fb ff ff	 jmp	 $LN2@stbtt__ras
$LN3@stbtt__ras:

; 3395 : 
; 3396 :    stbtt__hheap_cleanup(&hh, userdata);

  0051f	48 8b 95 d0 06
	00 00		 mov	 rdx, QWORD PTR userdata$[rbp]
  00526	48 8d 4d 08	 lea	 rcx, QWORD PTR hh$[rbp]
  0052a	e8 00 00 00 00	 call	 ?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z ; stbtt__hheap_cleanup

; 3397 : 
; 3398 :    if (scanline != scanline_data)

  0052f	48 8d 85 c0 00
	00 00		 lea	 rax, QWORD PTR scanline_data$[rbp]
  00536	48 39 85 e8 02
	00 00		 cmp	 QWORD PTR scanline$[rbp], rax
  0053d	74 0c		 je	 SHORT $LN29@stbtt__ras

; 3399 :       STBTT_free(scanline, userdata);

  0053f	48 8b 8d e8 02
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  00546	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN29@stbtt__ras:

; 3400 : }

  0054b	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  0054f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcFrameData
  00556	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0055b	48 8b 8d 78 06
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00562	48 33 cd	 xor	 rcx, rbp
  00565	e8 00 00 00 00	 call	 __security_check_cookie
  0056a	48 8d a5 88 06
	00 00		 lea	 rsp, QWORD PTR [rbp+1672]
  00571	5f		 pop	 rdi
  00572	5d		 pop	 rbp
  00573	c3		 ret	 0
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z ENDP ; stbtt__rasterize_sorted_edges
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z
_TEXT	SEGMENT
y_bottom$ = 4
x0$1 = 36
x0$2 = 68
dx$3 = 100
xb$4 = 132
x_top$5 = 164
x_bottom$6 = 196
sy0$7 = 228
sy1$8 = 260
dy$9 = 292
height$10 = 324
x$11 = 356
x$12 = 388
x1$13 = 420
x2$14 = 452
y_crossing$15 = 484
y_final$16 = 516
step$17 = 548
sign$18 = 580
area$19 = 612
t$20 = 644
denom$21 = 676
x$22 = 708
y0$23 = 740
x1$24 = 772
x2$25 = 804
x3$26 = 836
y3$27 = 868
y1$28 = 900
y2$29 = 932
tv299 = 1336
tv247 = 1336
tv187 = 1336
tv310 = 1344
tv312 = 1348
scanline$ = 1392
scanline_fill$ = 1400
len$ = 1408
e$ = 1416
y_top$ = 1424
?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z PROC ; stbtt__fill_active_edges_new, COMDAT

; 3088 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 98 05
	00 00		 sub	 rsp, 1432		; 00000598H
  0001d	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 66 01 00 00	 mov	 ecx, 358		; 00000166H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 b8
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1464]

; 3089 :    float y_bottom = y_top+1;

  00039	f3 0f 10 85 90
	05 00 00	 movss	 xmm0, DWORD PTR y_top$[rbp]
  00041	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00049	f3 0f 11 45 04	 movss	 DWORD PTR y_bottom$[rbp], xmm0
$LN2@stbtt__fil:

; 3090 : 
; 3091 :    while (e) {

  0004e	48 83 bd 88 05
	00 00 00	 cmp	 QWORD PTR e$[rbp], 0
  00056	0f 84 2f 10 00
	00		 je	 $LN3@stbtt__fil
$LN6@stbtt__fil:

; 3092 :       // brute force every pixel
; 3093 : 
; 3094 :       // compute intersection points with top & bottom
; 3095 :       STBTT_assert(e->ey >= y_top);

  0005c	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  00063	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [rax+28]
  00068	0f 2f 85 90 05
	00 00		 comiss	 xmm0, DWORD PTR y_top$[rbp]
  0006f	73 22		 jae	 SHORT $LN61@stbtt__fil
  00071	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z@4JA
  00077	83 c0 07	 add	 eax, 7
  0007a	44 8b c0	 mov	 r8d, eax
  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00084	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@MDBOACOJ@?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_?$AAt?$AAo?$AAp?$AA?$AA@
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00091	33 c0		 xor	 eax, eax
$LN61@stbtt__fil:
  00093	33 c0		 xor	 eax, eax
  00095	85 c0		 test	 eax, eax
  00097	75 c3		 jne	 SHORT $LN6@stbtt__fil

; 3096 : 
; 3097 :       if (e->fdx == 0) {

  00099	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  000a0	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [rax+12]
  000a5	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  000ac	0f 8a 13 01 00
	00		 jp	 $LN31@stbtt__fil
  000b2	0f 85 0d 01 00
	00		 jne	 $LN31@stbtt__fil

; 3098 :          float x0 = e->fx;

  000b8	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  000bf	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  000c4	f3 0f 11 45 24	 movss	 DWORD PTR x0$1[rbp], xmm0

; 3099 :          if (x0 < len) {

  000c9	f3 0f 2a 85 80
	05 00 00	 cvtsi2ss xmm0, DWORD PTR len$[rbp]
  000d1	0f 2f 45 24	 comiss	 xmm0, DWORD PTR x0$1[rbp]
  000d5	0f 86 e5 00 00
	00		 jbe	 $LN33@stbtt__fil

; 3100 :             if (x0 >= 0) {

  000db	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR x0$1[rbp]
  000e0	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  000e7	0f 82 8e 00 00
	00		 jb	 $LN34@stbtt__fil

; 3101 :                stbtt__handle_clipped_edge(scanline,(int) x0,e, x0,y_top, x0,y_bottom);

  000ed	f3 0f 2c 45 24	 cvttss2si eax, DWORD PTR x0$1[rbp]
  000f2	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR y_bottom$[rbp]
  000f7	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  000fd	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR x0$1[rbp]
  00102	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00108	f3 0f 10 85 90
	05 00 00	 movss	 xmm0, DWORD PTR y_top$[rbp]
  00110	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00116	f3 0f 10 5d 24	 movss	 xmm3, DWORD PTR x0$1[rbp]
  0011b	4c 8b 85 88 05
	00 00		 mov	 r8, QWORD PTR e$[rbp]
  00122	8b d0		 mov	 edx, eax
  00124	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  0012b	e8 00 00 00 00	 call	 ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge

; 3102 :                stbtt__handle_clipped_edge(scanline_fill-1,(int) x0+1,e, x0,y_top, x0,y_bottom);

  00130	f3 0f 2c 45 24	 cvttss2si eax, DWORD PTR x0$1[rbp]
  00135	ff c0		 inc	 eax
  00137	48 8b 8d 78 05
	00 00		 mov	 rcx, QWORD PTR scanline_fill$[rbp]
  0013e	48 83 e9 04	 sub	 rcx, 4
  00142	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR y_bottom$[rbp]
  00147	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  0014d	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR x0$1[rbp]
  00152	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00158	f3 0f 10 85 90
	05 00 00	 movss	 xmm0, DWORD PTR y_top$[rbp]
  00160	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00166	f3 0f 10 5d 24	 movss	 xmm3, DWORD PTR x0$1[rbp]
  0016b	4c 8b 85 88 05
	00 00		 mov	 r8, QWORD PTR e$[rbp]
  00172	8b d0		 mov	 edx, eax
  00174	e8 00 00 00 00	 call	 ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge

; 3103 :             } else {

  00179	eb 45		 jmp	 SHORT $LN35@stbtt__fil
$LN34@stbtt__fil:

; 3104 :                stbtt__handle_clipped_edge(scanline_fill-1,0,e, x0,y_top, x0,y_bottom);

  0017b	48 8b 85 78 05
	00 00		 mov	 rax, QWORD PTR scanline_fill$[rbp]
  00182	48 83 e8 04	 sub	 rax, 4
  00186	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR y_bottom$[rbp]
  0018b	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00191	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR x0$1[rbp]
  00196	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  0019c	f3 0f 10 85 90
	05 00 00	 movss	 xmm0, DWORD PTR y_top$[rbp]
  001a4	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  001aa	f3 0f 10 5d 24	 movss	 xmm3, DWORD PTR x0$1[rbp]
  001af	4c 8b 85 88 05
	00 00		 mov	 r8, QWORD PTR e$[rbp]
  001b6	33 d2		 xor	 edx, edx
  001b8	48 8b c8	 mov	 rcx, rax
  001bb	e8 00 00 00 00	 call	 ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
$LN35@stbtt__fil:
$LN33@stbtt__fil:

; 3105 :             }
; 3106 :          }
; 3107 :       } else {

  001c0	e9 b0 0e 00 00	 jmp	 $LN32@stbtt__fil
$LN31@stbtt__fil:

; 3108 :          float x0 = e->fx;

  001c5	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  001cc	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  001d1	f3 0f 11 45 44	 movss	 DWORD PTR x0$2[rbp], xmm0

; 3109 :          float dx = e->fdx;

  001d6	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  001dd	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [rax+12]
  001e2	f3 0f 11 45 64	 movss	 DWORD PTR dx$3[rbp], xmm0

; 3110 :          float xb = x0 + dx;

  001e7	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR x0$2[rbp]
  001ec	f3 0f 58 45 64	 addss	 xmm0, DWORD PTR dx$3[rbp]
  001f1	f3 0f 11 85 84
	00 00 00	 movss	 DWORD PTR xb$4[rbp], xmm0

; 3111 :          float x_top, x_bottom;
; 3112 :          float sy0,sy1;
; 3113 :          float dy = e->fdy;

  001f9	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  00200	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  00205	f3 0f 11 85 24
	01 00 00	 movss	 DWORD PTR dy$9[rbp], xmm0
$LN9@stbtt__fil:

; 3114 :          STBTT_assert(e->sy <= y_bottom && e->ey >= y_top);

  0020d	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  00214	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR y_bottom$[rbp]
  00219	0f 2f 40 18	 comiss	 xmm0, DWORD PTR [rax+24]
  0021d	72 15		 jb	 SHORT $LN62@stbtt__fil
  0021f	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  00226	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [rax+28]
  0022b	0f 2f 85 90 05
	00 00		 comiss	 xmm0, DWORD PTR y_top$[rbp]
  00232	73 22		 jae	 SHORT $LN63@stbtt__fil
$LN62@stbtt__fil:
  00234	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z@4JA
  0023a	83 c0 1a	 add	 eax, 26
  0023d	44 8b c0	 mov	 r8d, eax
  00240	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00247	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@KOIFPDFH@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAy?$AA_?$AAb?$AAo?$AAt?$AAt?$AAo?$AAm?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_@
  0024e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00254	33 c0		 xor	 eax, eax
$LN63@stbtt__fil:
  00256	33 c0		 xor	 eax, eax
  00258	85 c0		 test	 eax, eax
  0025a	75 b1		 jne	 SHORT $LN9@stbtt__fil

; 3115 : 
; 3116 :          // compute endpoints of line segment clipped to this scanline (if the
; 3117 :          // line segment starts on this scanline. x0 is the intersection of the
; 3118 :          // line with y_top, but that may be off the line segment.
; 3119 :          if (e->sy > y_top) {

  0025c	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  00263	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [rax+24]
  00268	0f 2f 85 90 05
	00 00		 comiss	 xmm0, DWORD PTR y_top$[rbp]
  0026f	76 4a		 jbe	 SHORT $LN36@stbtt__fil

; 3120 :             x_top = x0 + dx * (e->sy - y_top);

  00271	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  00278	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [rax+24]
  0027d	f3 0f 5c 85 90
	05 00 00	 subss	 xmm0, DWORD PTR y_top$[rbp]
  00285	f3 0f 10 4d 64	 movss	 xmm1, DWORD PTR dx$3[rbp]
  0028a	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0028e	0f 28 c1	 movaps	 xmm0, xmm1
  00291	f3 0f 10 4d 44	 movss	 xmm1, DWORD PTR x0$2[rbp]
  00296	f3 0f 58 c8	 addss	 xmm1, xmm0
  0029a	0f 28 c1	 movaps	 xmm0, xmm1
  0029d	f3 0f 11 85 a4
	00 00 00	 movss	 DWORD PTR x_top$5[rbp], xmm0

; 3121 :             sy0 = e->sy;

  002a5	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  002ac	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [rax+24]
  002b1	f3 0f 11 85 e4
	00 00 00	 movss	 DWORD PTR sy0$7[rbp], xmm0

; 3122 :          } else {

  002b9	eb 1d		 jmp	 SHORT $LN37@stbtt__fil
$LN36@stbtt__fil:

; 3123 :             x_top = x0;

  002bb	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR x0$2[rbp]
  002c0	f3 0f 11 85 a4
	00 00 00	 movss	 DWORD PTR x_top$5[rbp], xmm0

; 3124 :             sy0 = y_top;

  002c8	f3 0f 10 85 90
	05 00 00	 movss	 xmm0, DWORD PTR y_top$[rbp]
  002d0	f3 0f 11 85 e4
	00 00 00	 movss	 DWORD PTR sy0$7[rbp], xmm0
$LN37@stbtt__fil:

; 3125 :          }
; 3126 :          if (e->ey < y_bottom) {

  002d8	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  002df	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR y_bottom$[rbp]
  002e4	0f 2f 40 1c	 comiss	 xmm0, DWORD PTR [rax+28]
  002e8	76 4a		 jbe	 SHORT $LN38@stbtt__fil

; 3127 :             x_bottom = x0 + dx * (e->ey - y_top);

  002ea	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  002f1	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [rax+28]
  002f6	f3 0f 5c 85 90
	05 00 00	 subss	 xmm0, DWORD PTR y_top$[rbp]
  002fe	f3 0f 10 4d 64	 movss	 xmm1, DWORD PTR dx$3[rbp]
  00303	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00307	0f 28 c1	 movaps	 xmm0, xmm1
  0030a	f3 0f 10 4d 44	 movss	 xmm1, DWORD PTR x0$2[rbp]
  0030f	f3 0f 58 c8	 addss	 xmm1, xmm0
  00313	0f 28 c1	 movaps	 xmm0, xmm1
  00316	f3 0f 11 85 c4
	00 00 00	 movss	 DWORD PTR x_bottom$6[rbp], xmm0

; 3128 :             sy1 = e->ey;

  0031e	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  00325	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [rax+28]
  0032a	f3 0f 11 85 04
	01 00 00	 movss	 DWORD PTR sy1$8[rbp], xmm0

; 3129 :          } else {

  00332	eb 1d		 jmp	 SHORT $LN39@stbtt__fil
$LN38@stbtt__fil:

; 3130 :             x_bottom = xb;

  00334	f3 0f 10 85 84
	00 00 00	 movss	 xmm0, DWORD PTR xb$4[rbp]
  0033c	f3 0f 11 85 c4
	00 00 00	 movss	 DWORD PTR x_bottom$6[rbp], xmm0

; 3131 :             sy1 = y_bottom;

  00344	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR y_bottom$[rbp]
  00349	f3 0f 11 85 04
	01 00 00	 movss	 DWORD PTR sy1$8[rbp], xmm0
$LN39@stbtt__fil:

; 3132 :          }
; 3133 : 
; 3134 :          if (x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {

  00351	f3 0f 10 85 a4
	00 00 00	 movss	 xmm0, DWORD PTR x_top$5[rbp]
  00359	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00360	0f 82 f0 06 00
	00		 jb	 $LN40@stbtt__fil
  00366	f3 0f 10 85 c4
	00 00 00	 movss	 xmm0, DWORD PTR x_bottom$6[rbp]
  0036e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00375	0f 82 db 06 00
	00		 jb	 $LN40@stbtt__fil
  0037b	f3 0f 2a 85 80
	05 00 00	 cvtsi2ss xmm0, DWORD PTR len$[rbp]
  00383	0f 2f 85 a4 00
	00 00		 comiss	 xmm0, DWORD PTR x_top$5[rbp]
  0038a	0f 86 c6 06 00
	00		 jbe	 $LN40@stbtt__fil
  00390	f3 0f 2a 85 80
	05 00 00	 cvtsi2ss xmm0, DWORD PTR len$[rbp]
  00398	0f 2f 85 c4 00
	00 00		 comiss	 xmm0, DWORD PTR x_bottom$6[rbp]
  0039f	0f 86 b1 06 00
	00		 jbe	 $LN40@stbtt__fil

; 3135 :             // from here on, we don't have to range check x values
; 3136 : 
; 3137 :             if ((int) x_top == (int) x_bottom) {

  003a5	f3 0f 2c 85 a4
	00 00 00	 cvttss2si eax, DWORD PTR x_top$5[rbp]
  003ad	f3 0f 2c 8d c4
	00 00 00	 cvttss2si ecx, DWORD PTR x_bottom$6[rbp]
  003b5	3b c1		 cmp	 eax, ecx
  003b7	0f 85 25 01 00
	00		 jne	 $LN42@stbtt__fil

; 3138 :                float height;
; 3139 :                // simple case, only spans one pixel
; 3140 :                int x = (int) x_top;

  003bd	f3 0f 2c 85 a4
	00 00 00	 cvttss2si eax, DWORD PTR x_top$5[rbp]
  003c5	89 85 64 01 00
	00		 mov	 DWORD PTR x$11[rbp], eax

; 3141 :                height = (sy1 - sy0) * e->direction;

  003cb	f3 0f 10 85 04
	01 00 00	 movss	 xmm0, DWORD PTR sy1$8[rbp]
  003d3	f3 0f 5c 85 e4
	00 00 00	 subss	 xmm0, DWORD PTR sy0$7[rbp]
  003db	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  003e2	f3 0f 59 40 14	 mulss	 xmm0, DWORD PTR [rax+20]
  003e7	f3 0f 11 85 44
	01 00 00	 movss	 DWORD PTR height$10[rbp], xmm0
$LN12@stbtt__fil:

; 3142 :                STBTT_assert(x >= 0 && x < len);

  003ef	83 bd 64 01 00
	00 00		 cmp	 DWORD PTR x$11[rbp], 0
  003f6	7c 0e		 jl	 SHORT $LN64@stbtt__fil
  003f8	8b 85 80 05 00
	00		 mov	 eax, DWORD PTR len$[rbp]
  003fe	39 85 64 01 00
	00		 cmp	 DWORD PTR x$11[rbp], eax
  00404	7c 22		 jl	 SHORT $LN65@stbtt__fil
$LN64@stbtt__fil:
  00406	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z@4JA
  0040c	83 c0 36	 add	 eax, 54			; 00000036H
  0040f	44 8b c0	 mov	 r8d, eax
  00412	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00419	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@GDDDMDCC@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl?$AAe?$AAn?$AA?$AA@
  00420	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00426	33 c0		 xor	 eax, eax
$LN65@stbtt__fil:
  00428	33 c0		 xor	 eax, eax
  0042a	85 c0		 test	 eax, eax
  0042c	75 c1		 jne	 SHORT $LN12@stbtt__fil

; 3143 :                scanline[x]      += stbtt__position_trapezoid_area(height, x_top, x+1.0f, x_bottom, x+1.0f);

  0042e	48 63 85 64 01
	00 00		 movsxd	 rax, DWORD PTR x$11[rbp]
  00435	48 89 85 38 05
	00 00		 mov	 QWORD PTR tv187[rbp], rax
  0043c	f3 0f 2a 85 64
	01 00 00	 cvtsi2ss xmm0, DWORD PTR x$11[rbp]
  00444	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  0044c	f3 0f 2a 8d 64
	01 00 00	 cvtsi2ss xmm1, DWORD PTR x$11[rbp]
  00454	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f800000
  0045c	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00462	f3 0f 10 9d c4
	00 00 00	 movss	 xmm3, DWORD PTR x_bottom$6[rbp]
  0046a	0f 28 d1	 movaps	 xmm2, xmm1
  0046d	f3 0f 10 8d a4
	00 00 00	 movss	 xmm1, DWORD PTR x_top$5[rbp]
  00475	f3 0f 10 85 44
	01 00 00	 movss	 xmm0, DWORD PTR height$10[rbp]
  0047d	e8 00 00 00 00	 call	 ?stbtt__position_trapezoid_area@@YAMMMMMM@Z ; stbtt__position_trapezoid_area
  00482	48 8b 85 70 05
	00 00		 mov	 rax, QWORD PTR scanline$[rbp]
  00489	48 8b 8d 38 05
	00 00		 mov	 rcx, QWORD PTR tv187[rbp]
  00490	f3 0f 10 0c 88	 movss	 xmm1, DWORD PTR [rax+rcx*4]
  00495	f3 0f 58 c8	 addss	 xmm1, xmm0
  00499	0f 28 c1	 movaps	 xmm0, xmm1
  0049c	48 63 85 64 01
	00 00		 movsxd	 rax, DWORD PTR x$11[rbp]
  004a3	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  004aa	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 3144 :                scanline_fill[x] += height; // everything right of this pixel is filled

  004af	48 63 85 64 01
	00 00		 movsxd	 rax, DWORD PTR x$11[rbp]
  004b6	48 8b 8d 78 05
	00 00		 mov	 rcx, QWORD PTR scanline_fill$[rbp]
  004bd	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  004c2	f3 0f 58 85 44
	01 00 00	 addss	 xmm0, DWORD PTR height$10[rbp]
  004ca	48 63 85 64 01
	00 00		 movsxd	 rax, DWORD PTR x$11[rbp]
  004d1	48 8b 8d 78 05
	00 00		 mov	 rcx, QWORD PTR scanline_fill$[rbp]
  004d8	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 3145 :             } else {

  004dd	e9 6f 05 00 00	 jmp	 $LN43@stbtt__fil
$LN42@stbtt__fil:

; 3146 :                int x,x1,x2;
; 3147 :                float y_crossing, y_final, step, sign, area;
; 3148 :                // covers 2+ pixels
; 3149 :                if (x_top > x_bottom) {

  004e2	f3 0f 10 85 a4
	00 00 00	 movss	 xmm0, DWORD PTR x_top$5[rbp]
  004ea	0f 2f 85 c4 00
	00 00		 comiss	 xmm0, DWORD PTR x_bottom$6[rbp]
  004f1	0f 86 fa 00 00
	00		 jbe	 $LN44@stbtt__fil

; 3150 :                   // flip scanline vertically; signed area is the same
; 3151 :                   float t;
; 3152 :                   sy0 = y_bottom - (sy0 - y_top);

  004f7	f3 0f 10 85 e4
	00 00 00	 movss	 xmm0, DWORD PTR sy0$7[rbp]
  004ff	f3 0f 5c 85 90
	05 00 00	 subss	 xmm0, DWORD PTR y_top$[rbp]
  00507	f3 0f 10 4d 04	 movss	 xmm1, DWORD PTR y_bottom$[rbp]
  0050c	f3 0f 5c c8	 subss	 xmm1, xmm0
  00510	0f 28 c1	 movaps	 xmm0, xmm1
  00513	f3 0f 11 85 e4
	00 00 00	 movss	 DWORD PTR sy0$7[rbp], xmm0

; 3153 :                   sy1 = y_bottom - (sy1 - y_top);

  0051b	f3 0f 10 85 04
	01 00 00	 movss	 xmm0, DWORD PTR sy1$8[rbp]
  00523	f3 0f 5c 85 90
	05 00 00	 subss	 xmm0, DWORD PTR y_top$[rbp]
  0052b	f3 0f 10 4d 04	 movss	 xmm1, DWORD PTR y_bottom$[rbp]
  00530	f3 0f 5c c8	 subss	 xmm1, xmm0
  00534	0f 28 c1	 movaps	 xmm0, xmm1
  00537	f3 0f 11 85 04
	01 00 00	 movss	 DWORD PTR sy1$8[rbp], xmm0

; 3154 :                   t = sy0, sy0 = sy1, sy1 = t;

  0053f	f3 0f 10 85 e4
	00 00 00	 movss	 xmm0, DWORD PTR sy0$7[rbp]
  00547	f3 0f 11 85 84
	02 00 00	 movss	 DWORD PTR t$20[rbp], xmm0
  0054f	f3 0f 10 85 04
	01 00 00	 movss	 xmm0, DWORD PTR sy1$8[rbp]
  00557	f3 0f 11 85 e4
	00 00 00	 movss	 DWORD PTR sy0$7[rbp], xmm0
  0055f	f3 0f 10 85 84
	02 00 00	 movss	 xmm0, DWORD PTR t$20[rbp]
  00567	f3 0f 11 85 04
	01 00 00	 movss	 DWORD PTR sy1$8[rbp], xmm0

; 3155 :                   t = x_bottom, x_bottom = x_top, x_top = t;

  0056f	f3 0f 10 85 c4
	00 00 00	 movss	 xmm0, DWORD PTR x_bottom$6[rbp]
  00577	f3 0f 11 85 84
	02 00 00	 movss	 DWORD PTR t$20[rbp], xmm0
  0057f	f3 0f 10 85 a4
	00 00 00	 movss	 xmm0, DWORD PTR x_top$5[rbp]
  00587	f3 0f 11 85 c4
	00 00 00	 movss	 DWORD PTR x_bottom$6[rbp], xmm0
  0058f	f3 0f 10 85 84
	02 00 00	 movss	 xmm0, DWORD PTR t$20[rbp]
  00597	f3 0f 11 85 a4
	00 00 00	 movss	 DWORD PTR x_top$5[rbp], xmm0

; 3156 :                   dx = -dx;

  0059f	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR dx$3[rbp]
  005a4	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  005ab	f3 0f 11 45 64	 movss	 DWORD PTR dx$3[rbp], xmm0

; 3157 :                   dy = -dy;

  005b0	f3 0f 10 85 24
	01 00 00	 movss	 xmm0, DWORD PTR dy$9[rbp]
  005b8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  005bf	f3 0f 11 85 24
	01 00 00	 movss	 DWORD PTR dy$9[rbp], xmm0

; 3158 :                   t = x0, x0 = xb, xb = t;

  005c7	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR x0$2[rbp]
  005cc	f3 0f 11 85 84
	02 00 00	 movss	 DWORD PTR t$20[rbp], xmm0
  005d4	f3 0f 10 85 84
	00 00 00	 movss	 xmm0, DWORD PTR xb$4[rbp]
  005dc	f3 0f 11 45 44	 movss	 DWORD PTR x0$2[rbp], xmm0
  005e1	f3 0f 10 85 84
	02 00 00	 movss	 xmm0, DWORD PTR t$20[rbp]
  005e9	f3 0f 11 85 84
	00 00 00	 movss	 DWORD PTR xb$4[rbp], xmm0
$LN44@stbtt__fil:
$LN15@stbtt__fil:

; 3159 :                }
; 3160 :                STBTT_assert(dy >= 0);

  005f1	f3 0f 10 85 24
	01 00 00	 movss	 xmm0, DWORD PTR dy$9[rbp]
  005f9	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00600	73 22		 jae	 SHORT $LN66@stbtt__fil
  00602	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z@4JA
  00608	83 c0 48	 add	 eax, 72			; 00000048H
  0060b	44 8b c0	 mov	 r8d, eax
  0060e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00615	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BA@DNEJOLOH@?$AAd?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  0061c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00622	33 c0		 xor	 eax, eax
$LN66@stbtt__fil:
  00624	33 c0		 xor	 eax, eax
  00626	85 c0		 test	 eax, eax
  00628	75 c7		 jne	 SHORT $LN15@stbtt__fil
$LN18@stbtt__fil:

; 3161 :                STBTT_assert(dx >= 0);

  0062a	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR dx$3[rbp]
  0062f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00636	73 22		 jae	 SHORT $LN67@stbtt__fil
  00638	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z@4JA
  0063e	83 c0 49	 add	 eax, 73			; 00000049H
  00641	44 8b c0	 mov	 r8d, eax
  00644	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0064b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BA@KAEGAKJB@?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00652	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00658	33 c0		 xor	 eax, eax
$LN67@stbtt__fil:
  0065a	33 c0		 xor	 eax, eax
  0065c	85 c0		 test	 eax, eax
  0065e	75 ca		 jne	 SHORT $LN18@stbtt__fil

; 3162 : 
; 3163 :                x1 = (int) x_top;

  00660	f3 0f 2c 85 a4
	00 00 00	 cvttss2si eax, DWORD PTR x_top$5[rbp]
  00668	89 85 a4 01 00
	00		 mov	 DWORD PTR x1$13[rbp], eax

; 3164 :                x2 = (int) x_bottom;

  0066e	f3 0f 2c 85 c4
	00 00 00	 cvttss2si eax, DWORD PTR x_bottom$6[rbp]
  00676	89 85 c4 01 00
	00		 mov	 DWORD PTR x2$14[rbp], eax

; 3165 :                // compute intersection with y axis at x1+1
; 3166 :                y_crossing = y_top + dy * (x1+1 - x0);

  0067c	8b 85 a4 01 00
	00		 mov	 eax, DWORD PTR x1$13[rbp]
  00682	ff c0		 inc	 eax
  00684	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00688	f3 0f 5c 45 44	 subss	 xmm0, DWORD PTR x0$2[rbp]
  0068d	f3 0f 10 8d 24
	01 00 00	 movss	 xmm1, DWORD PTR dy$9[rbp]
  00695	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00699	0f 28 c1	 movaps	 xmm0, xmm1
  0069c	f3 0f 10 8d 90
	05 00 00	 movss	 xmm1, DWORD PTR y_top$[rbp]
  006a4	f3 0f 58 c8	 addss	 xmm1, xmm0
  006a8	0f 28 c1	 movaps	 xmm0, xmm1
  006ab	f3 0f 11 85 e4
	01 00 00	 movss	 DWORD PTR y_crossing$15[rbp], xmm0

; 3167 : 
; 3168 :                // compute intersection with y axis at x2
; 3169 :                y_final = y_top + dy * (x2 - x0);

  006b3	f3 0f 2a 85 c4
	01 00 00	 cvtsi2ss xmm0, DWORD PTR x2$14[rbp]
  006bb	f3 0f 5c 45 44	 subss	 xmm0, DWORD PTR x0$2[rbp]
  006c0	f3 0f 10 8d 24
	01 00 00	 movss	 xmm1, DWORD PTR dy$9[rbp]
  006c8	f3 0f 59 c8	 mulss	 xmm1, xmm0
  006cc	0f 28 c1	 movaps	 xmm0, xmm1
  006cf	f3 0f 10 8d 90
	05 00 00	 movss	 xmm1, DWORD PTR y_top$[rbp]
  006d7	f3 0f 58 c8	 addss	 xmm1, xmm0
  006db	0f 28 c1	 movaps	 xmm0, xmm1
  006de	f3 0f 11 85 04
	02 00 00	 movss	 DWORD PTR y_final$16[rbp], xmm0

; 3170 : 
; 3171 :                //           x1    x_top                            x2    x_bottom
; 3172 :                //     y_top  +------|-----+------------+------------+--------|---+------------+
; 3173 :                //            |            |            |            |            |            |
; 3174 :                //            |            |            |            |            |            |
; 3175 :                //       sy0  |      Txxxxx|............|............|............|............|
; 3176 :                // y_crossing |            *xxxxx.......|............|............|............|
; 3177 :                //            |            |     xxxxx..|............|............|............|
; 3178 :                //            |            |     /-   xx*xxxx........|............|............|
; 3179 :                //            |            | dy <       |    xxxxxx..|............|............|
; 3180 :                //   y_final  |            |     \-     |          xx*xxx.........|............|
; 3181 :                //       sy1  |            |            |            |   xxxxxB...|............|
; 3182 :                //            |            |            |            |            |            |
; 3183 :                //            |            |            |            |            |            |
; 3184 :                //  y_bottom  +------------+------------+------------+------------+------------+
; 3185 :                //
; 3186 :                // goal is to measure the area covered by '.' in each pixel
; 3187 : 
; 3188 :                // if x2 is right at the right edge of x1, y_crossing can blow up, github #1057
; 3189 :                // @TODO: maybe test against sy1 rather than y_bottom?
; 3190 :                if (y_crossing > y_bottom)

  006e6	f3 0f 10 85 e4
	01 00 00	 movss	 xmm0, DWORD PTR y_crossing$15[rbp]
  006ee	0f 2f 45 04	 comiss	 xmm0, DWORD PTR y_bottom$[rbp]
  006f2	76 0d		 jbe	 SHORT $LN45@stbtt__fil

; 3191 :                   y_crossing = y_bottom;

  006f4	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR y_bottom$[rbp]
  006f9	f3 0f 11 85 e4
	01 00 00	 movss	 DWORD PTR y_crossing$15[rbp], xmm0
$LN45@stbtt__fil:

; 3192 : 
; 3193 :                sign = e->direction;

  00701	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  00708	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  0070d	f3 0f 11 85 44
	02 00 00	 movss	 DWORD PTR sign$18[rbp], xmm0

; 3194 : 
; 3195 :                // area of the rectangle covered from sy0..y_crossing
; 3196 :                area = sign * (y_crossing-sy0);

  00715	f3 0f 10 85 e4
	01 00 00	 movss	 xmm0, DWORD PTR y_crossing$15[rbp]
  0071d	f3 0f 5c 85 e4
	00 00 00	 subss	 xmm0, DWORD PTR sy0$7[rbp]
  00725	f3 0f 10 8d 44
	02 00 00	 movss	 xmm1, DWORD PTR sign$18[rbp]
  0072d	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00731	0f 28 c1	 movaps	 xmm0, xmm1
  00734	f3 0f 11 85 64
	02 00 00	 movss	 DWORD PTR area$19[rbp], xmm0

; 3197 : 
; 3198 :                // area of the triangle (x_top,sy0), (x1+1,sy0), (x1+1,y_crossing)
; 3199 :                scanline[x1] += stbtt__sized_triangle_area(area, x1+1 - x_top);

  0073c	48 63 85 a4 01
	00 00		 movsxd	 rax, DWORD PTR x1$13[rbp]
  00743	48 89 85 38 05
	00 00		 mov	 QWORD PTR tv247[rbp], rax
  0074a	8b 8d a4 01 00
	00		 mov	 ecx, DWORD PTR x1$13[rbp]
  00750	ff c1		 inc	 ecx
  00752	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00756	f3 0f 5c 85 a4
	00 00 00	 subss	 xmm0, DWORD PTR x_top$5[rbp]
  0075e	0f 28 c8	 movaps	 xmm1, xmm0
  00761	f3 0f 10 85 64
	02 00 00	 movss	 xmm0, DWORD PTR area$19[rbp]
  00769	e8 00 00 00 00	 call	 ?stbtt__sized_triangle_area@@YAMMM@Z ; stbtt__sized_triangle_area
  0076e	48 8b 85 70 05
	00 00		 mov	 rax, QWORD PTR scanline$[rbp]
  00775	48 8b 8d 38 05
	00 00		 mov	 rcx, QWORD PTR tv247[rbp]
  0077c	f3 0f 10 0c 88	 movss	 xmm1, DWORD PTR [rax+rcx*4]
  00781	f3 0f 58 c8	 addss	 xmm1, xmm0
  00785	0f 28 c1	 movaps	 xmm0, xmm1
  00788	48 63 85 a4 01
	00 00		 movsxd	 rax, DWORD PTR x1$13[rbp]
  0078f	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  00796	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 3200 : 
; 3201 :                // check if final y_crossing is blown up; no test case for this
; 3202 :                if (y_final > y_bottom) {

  0079b	f3 0f 10 85 04
	02 00 00	 movss	 xmm0, DWORD PTR y_final$16[rbp]
  007a3	0f 2f 45 04	 comiss	 xmm0, DWORD PTR y_bottom$[rbp]
  007a7	76 52		 jbe	 SHORT $LN46@stbtt__fil

; 3203 :                   int denom = (x2 - (x1+1));

  007a9	8b 85 a4 01 00
	00		 mov	 eax, DWORD PTR x1$13[rbp]
  007af	ff c0		 inc	 eax
  007b1	8b 8d c4 01 00
	00		 mov	 ecx, DWORD PTR x2$14[rbp]
  007b7	2b c8		 sub	 ecx, eax
  007b9	8b c1		 mov	 eax, ecx
  007bb	89 85 a4 02 00
	00		 mov	 DWORD PTR denom$21[rbp], eax

; 3204 :                   y_final = y_bottom;

  007c1	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR y_bottom$[rbp]
  007c6	f3 0f 11 85 04
	02 00 00	 movss	 DWORD PTR y_final$16[rbp], xmm0

; 3205 :                   if (denom != 0) { // [DEAR IMGUI] Avoid div by zero (https://github.com/nothings/stb/issues/1316)

  007ce	83 bd a4 02 00
	00 00		 cmp	 DWORD PTR denom$21[rbp], 0
  007d5	74 24		 je	 SHORT $LN47@stbtt__fil

; 3206 :                      dy = (y_final - y_crossing ) / denom; // if denom=0, y_final = y_crossing, so y_final <= y_bottom

  007d7	f3 0f 10 85 04
	02 00 00	 movss	 xmm0, DWORD PTR y_final$16[rbp]
  007df	f3 0f 5c 85 e4
	01 00 00	 subss	 xmm0, DWORD PTR y_crossing$15[rbp]
  007e7	f3 0f 2a 8d a4
	02 00 00	 cvtsi2ss xmm1, DWORD PTR denom$21[rbp]
  007ef	f3 0f 5e c1	 divss	 xmm0, xmm1
  007f3	f3 0f 11 85 24
	01 00 00	 movss	 DWORD PTR dy$9[rbp], xmm0
$LN47@stbtt__fil:
$LN46@stbtt__fil:

; 3207 :                   }
; 3208 :                }
; 3209 : 
; 3210 :                // in second pixel, area covered by line segment found in first pixel
; 3211 :                // is always a rectangle 1 wide * the height of that line segment; this
; 3212 :                // is exactly what the variable 'area' stores. it also gets a contribution
; 3213 :                // from the line segment within it. the THIRD pixel will get the first
; 3214 :                // pixel's rectangle contribution, the second pixel's rectangle contribution,
; 3215 :                // and its own contribution. the 'own contribution' is the same in every pixel except
; 3216 :                // the leftmost and rightmost, a trapezoid that slides down in each pixel.
; 3217 :                // the second pixel's contribution to the third pixel will be the
; 3218 :                // rectangle 1 wide times the height change in the second pixel, which is dy.
; 3219 : 
; 3220 :                step = sign * dy * 1; // dy is dy/dx, change in y for every 1 change in x,

  007fb	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR sign$18[rbp]
  00803	f3 0f 59 85 24
	01 00 00	 mulss	 xmm0, DWORD PTR dy$9[rbp]
  0080b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f800000
  00813	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR step$17[rbp], xmm0

; 3221 :                // which multiplied by 1-pixel-width is how much pixel area changes for each step in x
; 3222 :                // so the area advances by 'step' every time
; 3223 : 
; 3224 :                for (x = x1+1; x < x2; ++x) {

  0081b	8b 85 a4 01 00
	00		 mov	 eax, DWORD PTR x1$13[rbp]
  00821	ff c0		 inc	 eax
  00823	89 85 84 01 00
	00		 mov	 DWORD PTR x$12[rbp], eax
  00829	eb 0e		 jmp	 SHORT $LN21@stbtt__fil
$LN19@stbtt__fil:
  0082b	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR x$12[rbp]
  00831	ff c0		 inc	 eax
  00833	89 85 84 01 00
	00		 mov	 DWORD PTR x$12[rbp], eax
$LN21@stbtt__fil:
  00839	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR x2$14[rbp]
  0083f	39 85 84 01 00
	00		 cmp	 DWORD PTR x$12[rbp], eax
  00845	7d 69		 jge	 SHORT $LN20@stbtt__fil

; 3225 :                   scanline[x] += area + step/2; // area of trapezoid is 1*step/2

  00847	48 63 85 84 01
	00 00		 movsxd	 rax, DWORD PTR x$12[rbp]
  0084e	f3 0f 10 85 24
	02 00 00	 movss	 xmm0, DWORD PTR step$17[rbp]
  00856	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0085e	f3 0f 10 8d 64
	02 00 00	 movss	 xmm1, DWORD PTR area$19[rbp]
  00866	f3 0f 58 c8	 addss	 xmm1, xmm0
  0086a	0f 28 c1	 movaps	 xmm0, xmm1
  0086d	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  00874	f3 0f 10 0c 81	 movss	 xmm1, DWORD PTR [rcx+rax*4]
  00879	f3 0f 58 c8	 addss	 xmm1, xmm0
  0087d	0f 28 c1	 movaps	 xmm0, xmm1
  00880	48 63 85 84 01
	00 00		 movsxd	 rax, DWORD PTR x$12[rbp]
  00887	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  0088e	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 3226 :                   area += step;

  00893	f3 0f 10 85 64
	02 00 00	 movss	 xmm0, DWORD PTR area$19[rbp]
  0089b	f3 0f 58 85 24
	02 00 00	 addss	 xmm0, DWORD PTR step$17[rbp]
  008a3	f3 0f 11 85 64
	02 00 00	 movss	 DWORD PTR area$19[rbp], xmm0

; 3227 :                }

  008ab	e9 7b ff ff ff	 jmp	 $LN19@stbtt__fil
$LN20@stbtt__fil:
$LN24@stbtt__fil:

; 3228 :                STBTT_assert(STBTT_fabs(area) <= 1.01f); // accumulated error from area += step unless we round step down

  008b0	f3 0f 10 85 64
	02 00 00	 movss	 xmm0, DWORD PTR area$19[rbp]
  008b8	e8 00 00 00 00	 call	 fabsf
  008bd	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f8147ae
  008c5	0f 2f c8	 comiss	 xmm1, xmm0
  008c8	73 24		 jae	 SHORT $LN68@stbtt__fil
  008ca	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z@4JA
  008d0	05 8c 00 00 00	 add	 eax, 140		; 0000008cH
  008d5	44 8b c0	 mov	 r8d, eax
  008d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  008df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@PHOJNIKI@?$AAf?$AAa?$AAb?$AAs?$AAf?$AA?$CI?$AAa?$AAr?$AAe?$AAa?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA?4?$AA0?$AA1?$AAf?$AA?$AA@
  008e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008ec	33 c0		 xor	 eax, eax
$LN68@stbtt__fil:
  008ee	33 c0		 xor	 eax, eax
  008f0	85 c0		 test	 eax, eax
  008f2	75 bc		 jne	 SHORT $LN24@stbtt__fil
$LN27@stbtt__fil:

; 3229 :                STBTT_assert(sy1 > y_final-0.01f);

  008f4	f3 0f 10 85 04
	02 00 00	 movss	 xmm0, DWORD PTR y_final$16[rbp]
  008fc	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3c23d70a
  00904	f3 0f 10 8d 04
	01 00 00	 movss	 xmm1, DWORD PTR sy1$8[rbp]
  0090c	0f 2f c8	 comiss	 xmm1, xmm0
  0090f	77 24		 ja	 SHORT $LN69@stbtt__fil
  00911	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z@4JA
  00917	05 8d 00 00 00	 add	 eax, 141		; 0000008dH
  0091c	44 8b c0	 mov	 r8d, eax
  0091f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00926	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@LBLBFJLN@?$AAs?$AAy?$AA1?$AA?5?$AA?$DO?$AA?5?$AAy?$AA_?$AAf?$AAi?$AAn?$AAa?$AAl?$AA?9?$AA0?$AA?4?$AA0?$AA1?$AAf?$AA?$AA@
  0092d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00933	33 c0		 xor	 eax, eax
$LN69@stbtt__fil:
  00935	33 c0		 xor	 eax, eax
  00937	85 c0		 test	 eax, eax
  00939	75 b9		 jne	 SHORT $LN27@stbtt__fil

; 3230 : 
; 3231 :                // area covered in the last pixel is the rectangle from all the pixels to the left,
; 3232 :                // plus the trapezoid filled by the line segment in this pixel all the way to the right edge
; 3233 :                scanline[x2] += area + sign * stbtt__position_trapezoid_area(sy1-y_final, (float) x2, x2+1.0f, x_bottom, x2+1.0f);

  0093b	48 63 85 c4 01
	00 00		 movsxd	 rax, DWORD PTR x2$14[rbp]
  00942	48 89 85 38 05
	00 00		 mov	 QWORD PTR tv299[rbp], rax
  00949	f3 0f 2a 85 c4
	01 00 00	 cvtsi2ss xmm0, DWORD PTR x2$14[rbp]
  00951	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00959	f3 0f 2a 8d c4
	01 00 00	 cvtsi2ss xmm1, DWORD PTR x2$14[rbp]
  00961	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f800000
  00969	f3 0f 2a 95 c4
	01 00 00	 cvtsi2ss xmm2, DWORD PTR x2$14[rbp]
  00971	f3 0f 11 95 40
	05 00 00	 movss	 DWORD PTR tv310[rbp], xmm2
  00979	f3 0f 10 9d 04
	01 00 00	 movss	 xmm3, DWORD PTR sy1$8[rbp]
  00981	f3 0f 5c 9d 04
	02 00 00	 subss	 xmm3, DWORD PTR y_final$16[rbp]
  00989	f3 0f 11 9d 44
	05 00 00	 movss	 DWORD PTR tv312[rbp], xmm3
  00991	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00997	f3 0f 10 9d c4
	00 00 00	 movss	 xmm3, DWORD PTR x_bottom$6[rbp]
  0099f	0f 28 d1	 movaps	 xmm2, xmm1
  009a2	f3 0f 10 85 40
	05 00 00	 movss	 xmm0, DWORD PTR tv310[rbp]
  009aa	0f 28 c8	 movaps	 xmm1, xmm0
  009ad	f3 0f 10 85 44
	05 00 00	 movss	 xmm0, DWORD PTR tv312[rbp]
  009b5	e8 00 00 00 00	 call	 ?stbtt__position_trapezoid_area@@YAMMMMMM@Z ; stbtt__position_trapezoid_area
  009ba	f3 0f 10 8d 44
	02 00 00	 movss	 xmm1, DWORD PTR sign$18[rbp]
  009c2	f3 0f 59 c8	 mulss	 xmm1, xmm0
  009c6	0f 28 c1	 movaps	 xmm0, xmm1
  009c9	f3 0f 10 8d 64
	02 00 00	 movss	 xmm1, DWORD PTR area$19[rbp]
  009d1	f3 0f 58 c8	 addss	 xmm1, xmm0
  009d5	0f 28 c1	 movaps	 xmm0, xmm1
  009d8	48 8b 85 70 05
	00 00		 mov	 rax, QWORD PTR scanline$[rbp]
  009df	48 8b 8d 38 05
	00 00		 mov	 rcx, QWORD PTR tv299[rbp]
  009e6	f3 0f 10 0c 88	 movss	 xmm1, DWORD PTR [rax+rcx*4]
  009eb	f3 0f 58 c8	 addss	 xmm1, xmm0
  009ef	0f 28 c1	 movaps	 xmm0, xmm1
  009f2	48 63 85 c4 01
	00 00		 movsxd	 rax, DWORD PTR x2$14[rbp]
  009f9	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  00a00	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 3234 : 
; 3235 :                // the rest of the line is filled based on the total height of the line segment in this pixel
; 3236 :                scanline_fill[x2] += sign * (sy1-sy0);

  00a05	48 63 85 c4 01
	00 00		 movsxd	 rax, DWORD PTR x2$14[rbp]
  00a0c	f3 0f 10 85 04
	01 00 00	 movss	 xmm0, DWORD PTR sy1$8[rbp]
  00a14	f3 0f 5c 85 e4
	00 00 00	 subss	 xmm0, DWORD PTR sy0$7[rbp]
  00a1c	f3 0f 10 8d 44
	02 00 00	 movss	 xmm1, DWORD PTR sign$18[rbp]
  00a24	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00a28	0f 28 c1	 movaps	 xmm0, xmm1
  00a2b	48 8b 8d 78 05
	00 00		 mov	 rcx, QWORD PTR scanline_fill$[rbp]
  00a32	f3 0f 10 0c 81	 movss	 xmm1, DWORD PTR [rcx+rax*4]
  00a37	f3 0f 58 c8	 addss	 xmm1, xmm0
  00a3b	0f 28 c1	 movaps	 xmm0, xmm1
  00a3e	48 63 85 c4 01
	00 00		 movsxd	 rax, DWORD PTR x2$14[rbp]
  00a45	48 8b 8d 78 05
	00 00		 mov	 rcx, QWORD PTR scanline_fill$[rbp]
  00a4c	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0
$LN43@stbtt__fil:

; 3237 :             }
; 3238 :          } else {

  00a51	e9 1f 06 00 00	 jmp	 $LN41@stbtt__fil
$LN40@stbtt__fil:

; 3239 :             // if edge goes outside of box we're drawing, we require
; 3240 :             // clipping logic. since this does not match the intended use
; 3241 :             // of this library, we use a different, very slow brute
; 3242 :             // force implementation
; 3243 :             // note though that this does happen some of the time because
; 3244 :             // x_top and x_bottom can be extrapolated at the top & bottom of
; 3245 :             // the shape and actually lie outside the bounding box
; 3246 :             int x;
; 3247 :             for (x=0; x < len; ++x) {

  00a56	c7 85 c4 02 00
	00 00 00 00 00	 mov	 DWORD PTR x$22[rbp], 0
  00a60	eb 0e		 jmp	 SHORT $LN30@stbtt__fil
$LN28@stbtt__fil:
  00a62	8b 85 c4 02 00
	00		 mov	 eax, DWORD PTR x$22[rbp]
  00a68	ff c0		 inc	 eax
  00a6a	89 85 c4 02 00
	00		 mov	 DWORD PTR x$22[rbp], eax
$LN30@stbtt__fil:
  00a70	8b 85 80 05 00
	00		 mov	 eax, DWORD PTR len$[rbp]
  00a76	39 85 c4 02 00
	00		 cmp	 DWORD PTR x$22[rbp], eax
  00a7c	0f 8d f3 05 00
	00		 jge	 $LN29@stbtt__fil

; 3248 :                // cases:
; 3249 :                //
; 3250 :                // there can be up to two intersections with the pixel. any intersection
; 3251 :                // with left or right edges can be handled by splitting into two (or three)
; 3252 :                // regions. intersections with top & bottom do not necessitate case-wise logic.
; 3253 :                //
; 3254 :                // the old way of doing this found the intersections with the left & right edges,
; 3255 :                // then used some simple logic to produce up to three segments in sorted order
; 3256 :                // from top-to-bottom. however, this had a problem: if an x edge was epsilon
; 3257 :                // across the x border, then the corresponding y position might not be distinct
; 3258 :                // from the other y segment, and it might ignored as an empty segment. to avoid
; 3259 :                // that, we need to explicitly produce segments based on x positions.
; 3260 : 
; 3261 :                // rename variables to clearly-defined pairs
; 3262 :                float y0 = y_top;

  00a82	f3 0f 10 85 90
	05 00 00	 movss	 xmm0, DWORD PTR y_top$[rbp]
  00a8a	f3 0f 11 85 e4
	02 00 00	 movss	 DWORD PTR y0$23[rbp], xmm0

; 3263 :                float x1 = (float) (x);

  00a92	f3 0f 2a 85 c4
	02 00 00	 cvtsi2ss xmm0, DWORD PTR x$22[rbp]
  00a9a	f3 0f 11 85 04
	03 00 00	 movss	 DWORD PTR x1$24[rbp], xmm0

; 3264 :                float x2 = (float) (x+1);

  00aa2	8b 85 c4 02 00
	00		 mov	 eax, DWORD PTR x$22[rbp]
  00aa8	ff c0		 inc	 eax
  00aaa	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00aae	f3 0f 11 85 24
	03 00 00	 movss	 DWORD PTR x2$25[rbp], xmm0

; 3265 :                float x3 = xb;

  00ab6	f3 0f 10 85 84
	00 00 00	 movss	 xmm0, DWORD PTR xb$4[rbp]
  00abe	f3 0f 11 85 44
	03 00 00	 movss	 DWORD PTR x3$26[rbp], xmm0

; 3266 :                float y3 = y_bottom;

  00ac6	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR y_bottom$[rbp]
  00acb	f3 0f 11 85 64
	03 00 00	 movss	 DWORD PTR y3$27[rbp], xmm0

; 3267 : 
; 3268 :                // x = e->x + e->dx * (y-y_top)
; 3269 :                // (y-y_top) = (x - e->x) / e->dx
; 3270 :                // y = (x - e->x) / e->dx + y_top
; 3271 :                float y1 = (x - x0) / dx + y_top;

  00ad3	f3 0f 2a 85 c4
	02 00 00	 cvtsi2ss xmm0, DWORD PTR x$22[rbp]
  00adb	f3 0f 5c 45 44	 subss	 xmm0, DWORD PTR x0$2[rbp]
  00ae0	f3 0f 5e 45 64	 divss	 xmm0, DWORD PTR dx$3[rbp]
  00ae5	f3 0f 58 85 90
	05 00 00	 addss	 xmm0, DWORD PTR y_top$[rbp]
  00aed	f3 0f 11 85 84
	03 00 00	 movss	 DWORD PTR y1$28[rbp], xmm0

; 3272 :                float y2 = (x+1 - x0) / dx + y_top;

  00af5	8b 85 c4 02 00
	00		 mov	 eax, DWORD PTR x$22[rbp]
  00afb	ff c0		 inc	 eax
  00afd	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00b01	f3 0f 5c 45 44	 subss	 xmm0, DWORD PTR x0$2[rbp]
  00b06	f3 0f 5e 45 64	 divss	 xmm0, DWORD PTR dx$3[rbp]
  00b0b	f3 0f 58 85 90
	05 00 00	 addss	 xmm0, DWORD PTR y_top$[rbp]
  00b13	f3 0f 11 85 a4
	03 00 00	 movss	 DWORD PTR y2$29[rbp], xmm0

; 3273 : 
; 3274 :                if (x0 < x1 && x3 > x2) {         // three segments descending down-right

  00b1b	f3 0f 10 85 04
	03 00 00	 movss	 xmm0, DWORD PTR x1$24[rbp]
  00b23	0f 2f 45 44	 comiss	 xmm0, DWORD PTR x0$2[rbp]
  00b27	0f 86 f8 00 00
	00		 jbe	 $LN48@stbtt__fil
  00b2d	f3 0f 10 85 44
	03 00 00	 movss	 xmm0, DWORD PTR x3$26[rbp]
  00b35	0f 2f 85 24 03
	00 00		 comiss	 xmm0, DWORD PTR x2$25[rbp]
  00b3c	0f 86 e3 00 00
	00		 jbe	 $LN48@stbtt__fil

; 3275 :                   stbtt__handle_clipped_edge(scanline,x,e, x0,y0, x1,y1);

  00b42	f3 0f 10 85 84
	03 00 00	 movss	 xmm0, DWORD PTR y1$28[rbp]
  00b4a	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00b50	f3 0f 10 85 04
	03 00 00	 movss	 xmm0, DWORD PTR x1$24[rbp]
  00b58	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00b5e	f3 0f 10 85 e4
	02 00 00	 movss	 xmm0, DWORD PTR y0$23[rbp]
  00b66	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00b6c	f3 0f 10 5d 44	 movss	 xmm3, DWORD PTR x0$2[rbp]
  00b71	4c 8b 85 88 05
	00 00		 mov	 r8, QWORD PTR e$[rbp]
  00b78	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR x$22[rbp]
  00b7e	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  00b85	e8 00 00 00 00	 call	 ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge

; 3276 :                   stbtt__handle_clipped_edge(scanline,x,e, x1,y1, x2,y2);

  00b8a	f3 0f 10 85 a4
	03 00 00	 movss	 xmm0, DWORD PTR y2$29[rbp]
  00b92	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00b98	f3 0f 10 85 24
	03 00 00	 movss	 xmm0, DWORD PTR x2$25[rbp]
  00ba0	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00ba6	f3 0f 10 85 84
	03 00 00	 movss	 xmm0, DWORD PTR y1$28[rbp]
  00bae	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00bb4	f3 0f 10 9d 04
	03 00 00	 movss	 xmm3, DWORD PTR x1$24[rbp]
  00bbc	4c 8b 85 88 05
	00 00		 mov	 r8, QWORD PTR e$[rbp]
  00bc3	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR x$22[rbp]
  00bc9	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  00bd0	e8 00 00 00 00	 call	 ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge

; 3277 :                   stbtt__handle_clipped_edge(scanline,x,e, x2,y2, x3,y3);

  00bd5	f3 0f 10 85 64
	03 00 00	 movss	 xmm0, DWORD PTR y3$27[rbp]
  00bdd	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00be3	f3 0f 10 85 44
	03 00 00	 movss	 xmm0, DWORD PTR x3$26[rbp]
  00beb	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00bf1	f3 0f 10 85 a4
	03 00 00	 movss	 xmm0, DWORD PTR y2$29[rbp]
  00bf9	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00bff	f3 0f 10 9d 24
	03 00 00	 movss	 xmm3, DWORD PTR x2$25[rbp]
  00c07	4c 8b 85 88 05
	00 00		 mov	 r8, QWORD PTR e$[rbp]
  00c0e	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR x$22[rbp]
  00c14	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  00c1b	e8 00 00 00 00	 call	 ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
  00c20	e9 4b 04 00 00	 jmp	 $LN49@stbtt__fil
$LN48@stbtt__fil:

; 3278 :                } else if (x3 < x1 && x0 > x2) {  // three segments descending down-left

  00c25	f3 0f 10 85 04
	03 00 00	 movss	 xmm0, DWORD PTR x1$24[rbp]
  00c2d	0f 2f 85 44 03
	00 00		 comiss	 xmm0, DWORD PTR x3$26[rbp]
  00c34	0f 86 f5 00 00
	00		 jbe	 $LN50@stbtt__fil
  00c3a	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR x0$2[rbp]
  00c3f	0f 2f 85 24 03
	00 00		 comiss	 xmm0, DWORD PTR x2$25[rbp]
  00c46	0f 86 e3 00 00
	00		 jbe	 $LN50@stbtt__fil

; 3279 :                   stbtt__handle_clipped_edge(scanline,x,e, x0,y0, x2,y2);

  00c4c	f3 0f 10 85 a4
	03 00 00	 movss	 xmm0, DWORD PTR y2$29[rbp]
  00c54	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00c5a	f3 0f 10 85 24
	03 00 00	 movss	 xmm0, DWORD PTR x2$25[rbp]
  00c62	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00c68	f3 0f 10 85 e4
	02 00 00	 movss	 xmm0, DWORD PTR y0$23[rbp]
  00c70	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00c76	f3 0f 10 5d 44	 movss	 xmm3, DWORD PTR x0$2[rbp]
  00c7b	4c 8b 85 88 05
	00 00		 mov	 r8, QWORD PTR e$[rbp]
  00c82	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR x$22[rbp]
  00c88	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  00c8f	e8 00 00 00 00	 call	 ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge

; 3280 :                   stbtt__handle_clipped_edge(scanline,x,e, x2,y2, x1,y1);

  00c94	f3 0f 10 85 84
	03 00 00	 movss	 xmm0, DWORD PTR y1$28[rbp]
  00c9c	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00ca2	f3 0f 10 85 04
	03 00 00	 movss	 xmm0, DWORD PTR x1$24[rbp]
  00caa	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00cb0	f3 0f 10 85 a4
	03 00 00	 movss	 xmm0, DWORD PTR y2$29[rbp]
  00cb8	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00cbe	f3 0f 10 9d 24
	03 00 00	 movss	 xmm3, DWORD PTR x2$25[rbp]
  00cc6	4c 8b 85 88 05
	00 00		 mov	 r8, QWORD PTR e$[rbp]
  00ccd	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR x$22[rbp]
  00cd3	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  00cda	e8 00 00 00 00	 call	 ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge

; 3281 :                   stbtt__handle_clipped_edge(scanline,x,e, x1,y1, x3,y3);

  00cdf	f3 0f 10 85 64
	03 00 00	 movss	 xmm0, DWORD PTR y3$27[rbp]
  00ce7	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00ced	f3 0f 10 85 44
	03 00 00	 movss	 xmm0, DWORD PTR x3$26[rbp]
  00cf5	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00cfb	f3 0f 10 85 84
	03 00 00	 movss	 xmm0, DWORD PTR y1$28[rbp]
  00d03	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00d09	f3 0f 10 9d 04
	03 00 00	 movss	 xmm3, DWORD PTR x1$24[rbp]
  00d11	4c 8b 85 88 05
	00 00		 mov	 r8, QWORD PTR e$[rbp]
  00d18	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR x$22[rbp]
  00d1e	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  00d25	e8 00 00 00 00	 call	 ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
  00d2a	e9 41 03 00 00	 jmp	 $LN51@stbtt__fil
$LN50@stbtt__fil:

; 3282 :                } else if (x0 < x1 && x3 > x1) {  // two segments across x, down-right

  00d2f	f3 0f 10 85 04
	03 00 00	 movss	 xmm0, DWORD PTR x1$24[rbp]
  00d37	0f 2f 45 44	 comiss	 xmm0, DWORD PTR x0$2[rbp]
  00d3b	0f 86 ad 00 00
	00		 jbe	 $LN52@stbtt__fil
  00d41	f3 0f 10 85 44
	03 00 00	 movss	 xmm0, DWORD PTR x3$26[rbp]
  00d49	0f 2f 85 04 03
	00 00		 comiss	 xmm0, DWORD PTR x1$24[rbp]
  00d50	0f 86 98 00 00
	00		 jbe	 $LN52@stbtt__fil

; 3283 :                   stbtt__handle_clipped_edge(scanline,x,e, x0,y0, x1,y1);

  00d56	f3 0f 10 85 84
	03 00 00	 movss	 xmm0, DWORD PTR y1$28[rbp]
  00d5e	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00d64	f3 0f 10 85 04
	03 00 00	 movss	 xmm0, DWORD PTR x1$24[rbp]
  00d6c	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00d72	f3 0f 10 85 e4
	02 00 00	 movss	 xmm0, DWORD PTR y0$23[rbp]
  00d7a	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00d80	f3 0f 10 5d 44	 movss	 xmm3, DWORD PTR x0$2[rbp]
  00d85	4c 8b 85 88 05
	00 00		 mov	 r8, QWORD PTR e$[rbp]
  00d8c	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR x$22[rbp]
  00d92	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  00d99	e8 00 00 00 00	 call	 ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge

; 3284 :                   stbtt__handle_clipped_edge(scanline,x,e, x1,y1, x3,y3);

  00d9e	f3 0f 10 85 64
	03 00 00	 movss	 xmm0, DWORD PTR y3$27[rbp]
  00da6	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00dac	f3 0f 10 85 44
	03 00 00	 movss	 xmm0, DWORD PTR x3$26[rbp]
  00db4	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00dba	f3 0f 10 85 84
	03 00 00	 movss	 xmm0, DWORD PTR y1$28[rbp]
  00dc2	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00dc8	f3 0f 10 9d 04
	03 00 00	 movss	 xmm3, DWORD PTR x1$24[rbp]
  00dd0	4c 8b 85 88 05
	00 00		 mov	 r8, QWORD PTR e$[rbp]
  00dd7	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR x$22[rbp]
  00ddd	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  00de4	e8 00 00 00 00	 call	 ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
  00de9	e9 82 02 00 00	 jmp	 $LN53@stbtt__fil
$LN52@stbtt__fil:

; 3285 :                } else if (x3 < x1 && x0 > x1) {  // two segments across x, down-left

  00dee	f3 0f 10 85 04
	03 00 00	 movss	 xmm0, DWORD PTR x1$24[rbp]
  00df6	0f 2f 85 44 03
	00 00		 comiss	 xmm0, DWORD PTR x3$26[rbp]
  00dfd	0f 86 aa 00 00
	00		 jbe	 $LN54@stbtt__fil
  00e03	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR x0$2[rbp]
  00e08	0f 2f 85 04 03
	00 00		 comiss	 xmm0, DWORD PTR x1$24[rbp]
  00e0f	0f 86 98 00 00
	00		 jbe	 $LN54@stbtt__fil

; 3286 :                   stbtt__handle_clipped_edge(scanline,x,e, x0,y0, x1,y1);

  00e15	f3 0f 10 85 84
	03 00 00	 movss	 xmm0, DWORD PTR y1$28[rbp]
  00e1d	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00e23	f3 0f 10 85 04
	03 00 00	 movss	 xmm0, DWORD PTR x1$24[rbp]
  00e2b	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00e31	f3 0f 10 85 e4
	02 00 00	 movss	 xmm0, DWORD PTR y0$23[rbp]
  00e39	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00e3f	f3 0f 10 5d 44	 movss	 xmm3, DWORD PTR x0$2[rbp]
  00e44	4c 8b 85 88 05
	00 00		 mov	 r8, QWORD PTR e$[rbp]
  00e4b	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR x$22[rbp]
  00e51	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  00e58	e8 00 00 00 00	 call	 ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge

; 3287 :                   stbtt__handle_clipped_edge(scanline,x,e, x1,y1, x3,y3);

  00e5d	f3 0f 10 85 64
	03 00 00	 movss	 xmm0, DWORD PTR y3$27[rbp]
  00e65	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00e6b	f3 0f 10 85 44
	03 00 00	 movss	 xmm0, DWORD PTR x3$26[rbp]
  00e73	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00e79	f3 0f 10 85 84
	03 00 00	 movss	 xmm0, DWORD PTR y1$28[rbp]
  00e81	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00e87	f3 0f 10 9d 04
	03 00 00	 movss	 xmm3, DWORD PTR x1$24[rbp]
  00e8f	4c 8b 85 88 05
	00 00		 mov	 r8, QWORD PTR e$[rbp]
  00e96	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR x$22[rbp]
  00e9c	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  00ea3	e8 00 00 00 00	 call	 ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
  00ea8	e9 c3 01 00 00	 jmp	 $LN55@stbtt__fil
$LN54@stbtt__fil:

; 3288 :                } else if (x0 < x2 && x3 > x2) {  // two segments across x+1, down-right

  00ead	f3 0f 10 85 24
	03 00 00	 movss	 xmm0, DWORD PTR x2$25[rbp]
  00eb5	0f 2f 45 44	 comiss	 xmm0, DWORD PTR x0$2[rbp]
  00eb9	0f 86 ad 00 00
	00		 jbe	 $LN56@stbtt__fil
  00ebf	f3 0f 10 85 44
	03 00 00	 movss	 xmm0, DWORD PTR x3$26[rbp]
  00ec7	0f 2f 85 24 03
	00 00		 comiss	 xmm0, DWORD PTR x2$25[rbp]
  00ece	0f 86 98 00 00
	00		 jbe	 $LN56@stbtt__fil

; 3289 :                   stbtt__handle_clipped_edge(scanline,x,e, x0,y0, x2,y2);

  00ed4	f3 0f 10 85 a4
	03 00 00	 movss	 xmm0, DWORD PTR y2$29[rbp]
  00edc	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00ee2	f3 0f 10 85 24
	03 00 00	 movss	 xmm0, DWORD PTR x2$25[rbp]
  00eea	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00ef0	f3 0f 10 85 e4
	02 00 00	 movss	 xmm0, DWORD PTR y0$23[rbp]
  00ef8	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00efe	f3 0f 10 5d 44	 movss	 xmm3, DWORD PTR x0$2[rbp]
  00f03	4c 8b 85 88 05
	00 00		 mov	 r8, QWORD PTR e$[rbp]
  00f0a	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR x$22[rbp]
  00f10	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  00f17	e8 00 00 00 00	 call	 ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge

; 3290 :                   stbtt__handle_clipped_edge(scanline,x,e, x2,y2, x3,y3);

  00f1c	f3 0f 10 85 64
	03 00 00	 movss	 xmm0, DWORD PTR y3$27[rbp]
  00f24	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00f2a	f3 0f 10 85 44
	03 00 00	 movss	 xmm0, DWORD PTR x3$26[rbp]
  00f32	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00f38	f3 0f 10 85 a4
	03 00 00	 movss	 xmm0, DWORD PTR y2$29[rbp]
  00f40	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00f46	f3 0f 10 9d 24
	03 00 00	 movss	 xmm3, DWORD PTR x2$25[rbp]
  00f4e	4c 8b 85 88 05
	00 00		 mov	 r8, QWORD PTR e$[rbp]
  00f55	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR x$22[rbp]
  00f5b	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  00f62	e8 00 00 00 00	 call	 ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
  00f67	e9 04 01 00 00	 jmp	 $LN57@stbtt__fil
$LN56@stbtt__fil:

; 3291 :                } else if (x3 < x2 && x0 > x2) {  // two segments across x+1, down-left

  00f6c	f3 0f 10 85 24
	03 00 00	 movss	 xmm0, DWORD PTR x2$25[rbp]
  00f74	0f 2f 85 44 03
	00 00		 comiss	 xmm0, DWORD PTR x3$26[rbp]
  00f7b	0f 86 a7 00 00
	00		 jbe	 $LN58@stbtt__fil
  00f81	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR x0$2[rbp]
  00f86	0f 2f 85 24 03
	00 00		 comiss	 xmm0, DWORD PTR x2$25[rbp]
  00f8d	0f 86 95 00 00
	00		 jbe	 $LN58@stbtt__fil

; 3292 :                   stbtt__handle_clipped_edge(scanline,x,e, x0,y0, x2,y2);

  00f93	f3 0f 10 85 a4
	03 00 00	 movss	 xmm0, DWORD PTR y2$29[rbp]
  00f9b	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00fa1	f3 0f 10 85 24
	03 00 00	 movss	 xmm0, DWORD PTR x2$25[rbp]
  00fa9	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00faf	f3 0f 10 85 e4
	02 00 00	 movss	 xmm0, DWORD PTR y0$23[rbp]
  00fb7	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00fbd	f3 0f 10 5d 44	 movss	 xmm3, DWORD PTR x0$2[rbp]
  00fc2	4c 8b 85 88 05
	00 00		 mov	 r8, QWORD PTR e$[rbp]
  00fc9	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR x$22[rbp]
  00fcf	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  00fd6	e8 00 00 00 00	 call	 ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge

; 3293 :                   stbtt__handle_clipped_edge(scanline,x,e, x2,y2, x3,y3);

  00fdb	f3 0f 10 85 64
	03 00 00	 movss	 xmm0, DWORD PTR y3$27[rbp]
  00fe3	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00fe9	f3 0f 10 85 44
	03 00 00	 movss	 xmm0, DWORD PTR x3$26[rbp]
  00ff1	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00ff7	f3 0f 10 85 a4
	03 00 00	 movss	 xmm0, DWORD PTR y2$29[rbp]
  00fff	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01005	f3 0f 10 9d 24
	03 00 00	 movss	 xmm3, DWORD PTR x2$25[rbp]
  0100d	4c 8b 85 88 05
	00 00		 mov	 r8, QWORD PTR e$[rbp]
  01014	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR x$22[rbp]
  0101a	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  01021	e8 00 00 00 00	 call	 ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge

; 3294 :                } else {  // one segment

  01026	eb 48		 jmp	 SHORT $LN59@stbtt__fil
$LN58@stbtt__fil:

; 3295 :                   stbtt__handle_clipped_edge(scanline,x,e, x0,y0, x3,y3);

  01028	f3 0f 10 85 64
	03 00 00	 movss	 xmm0, DWORD PTR y3$27[rbp]
  01030	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  01036	f3 0f 10 85 44
	03 00 00	 movss	 xmm0, DWORD PTR x3$26[rbp]
  0103e	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  01044	f3 0f 10 85 e4
	02 00 00	 movss	 xmm0, DWORD PTR y0$23[rbp]
  0104c	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01052	f3 0f 10 5d 44	 movss	 xmm3, DWORD PTR x0$2[rbp]
  01057	4c 8b 85 88 05
	00 00		 mov	 r8, QWORD PTR e$[rbp]
  0105e	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR x$22[rbp]
  01064	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  0106b	e8 00 00 00 00	 call	 ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
$LN59@stbtt__fil:
$LN57@stbtt__fil:
$LN55@stbtt__fil:
$LN53@stbtt__fil:
$LN51@stbtt__fil:
$LN49@stbtt__fil:

; 3296 :                }
; 3297 :             }

  01070	e9 ed f9 ff ff	 jmp	 $LN28@stbtt__fil
$LN29@stbtt__fil:
$LN41@stbtt__fil:
$LN32@stbtt__fil:

; 3298 :          }
; 3299 :       }
; 3300 :       e = e->next;

  01075	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  0107c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0107f	48 89 85 88 05
	00 00		 mov	 QWORD PTR e$[rbp], rax

; 3301 :    }

  01086	e9 c3 ef ff ff	 jmp	 $LN2@stbtt__fil
$LN3@stbtt__fil:

; 3302 : }

  0108b	48 8d a5 58 05
	00 00		 lea	 rsp, QWORD PTR [rbp+1368]
  01092	5f		 pop	 rdi
  01093	5d		 pop	 rbp
  01094	c3		 ret	 0
?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z ENDP ; stbtt__fill_active_edges_new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__sized_triangle_area@@YAMMM@Z
_TEXT	SEGMENT
height$ = 224
width$ = 232
?stbtt__sized_triangle_area@@YAMMM@Z PROC		; stbtt__sized_triangle_area, COMDAT

; 3083 : {

  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  0000c	55		 push	 rbp
  0000d	57		 push	 rdi
  0000e	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  00015	48 8d 6c 24 10	 lea	 rbp, QWORD PTR [rsp+16]
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd

; 3084 :    return height * width / 2;

  00029	f3 0f 10 85 e0
	00 00 00	 movss	 xmm0, DWORD PTR height$[rbp]
  00031	f3 0f 59 85 e8
	00 00 00	 mulss	 xmm0, DWORD PTR width$[rbp]
  00039	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000

; 3085 : }

  00041	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
?stbtt__sized_triangle_area@@YAMMM@Z ENDP		; stbtt__sized_triangle_area
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__position_trapezoid_area@@YAMMMMMM@Z
_TEXT	SEGMENT
height$ = 224
tx0$ = 232
tx1$ = 240
bx0$ = 248
bx1$ = 256
?stbtt__position_trapezoid_area@@YAMMMMMM@Z PROC	; stbtt__position_trapezoid_area, COMDAT

; 3078 : {

  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00012	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  00018	55		 push	 rbp
  00019	57		 push	 rdi
  0001a	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00021	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00026	48 8b fc	 mov	 rdi, rsp
  00029	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00033	f3 ab		 rep stosd

; 3079 :    return stbtt__sized_trapezoid_area(height, tx1 - tx0, bx1 - bx0);

  00035	f3 0f 10 85 00
	01 00 00	 movss	 xmm0, DWORD PTR bx1$[rbp]
  0003d	f3 0f 5c 85 f8
	00 00 00	 subss	 xmm0, DWORD PTR bx0$[rbp]
  00045	f3 0f 10 8d f0
	00 00 00	 movss	 xmm1, DWORD PTR tx1$[rbp]
  0004d	f3 0f 5c 8d e8
	00 00 00	 subss	 xmm1, DWORD PTR tx0$[rbp]
  00055	0f 28 d0	 movaps	 xmm2, xmm0
  00058	f3 0f 10 85 e0
	00 00 00	 movss	 xmm0, DWORD PTR height$[rbp]
  00060	e8 00 00 00 00	 call	 ?stbtt__sized_trapezoid_area@@YAMMMM@Z ; stbtt__sized_trapezoid_area

; 3080 : }

  00065	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?stbtt__position_trapezoid_area@@YAMMMMMM@Z ENDP	; stbtt__position_trapezoid_area
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__sized_trapezoid_area@@YAMMMM@Z
_TEXT	SEGMENT
height$ = 224
top_width$ = 232
bottom_width$ = 240
?stbtt__sized_trapezoid_area@@YAMMMM@Z PROC		; stbtt__sized_trapezoid_area, COMDAT

; 3071 : {

  00000	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  00006	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  0000c	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  00012	55		 push	 rbp
  00013	57		 push	 rdi
  00014	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001b	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00020	48 8b fc	 mov	 rdi, rsp
  00023	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
$LN4@stbtt__siz:

; 3072 :    STBTT_assert(top_width >= 0);

  0002f	f3 0f 10 85 e8
	00 00 00	 movss	 xmm0, DWORD PTR top_width$[rbp]
  00037	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0003e	73 21		 jae	 SHORT $LN9@stbtt__siz
  00040	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__sized_trapezoid_area@@YAMMMM@Z@4JA
  00046	ff c0		 inc	 eax
  00048	44 8b c0	 mov	 r8d, eax
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00052	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@IKHHJKG@?$AAt?$AAo?$AAp?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00059	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005f	33 c0		 xor	 eax, eax
$LN9@stbtt__siz:
  00061	33 c0		 xor	 eax, eax
  00063	85 c0		 test	 eax, eax
  00065	75 c8		 jne	 SHORT $LN4@stbtt__siz
$LN7@stbtt__siz:

; 3073 :    STBTT_assert(bottom_width >= 0);

  00067	f3 0f 10 85 f0
	00 00 00	 movss	 xmm0, DWORD PTR bottom_width$[rbp]
  0006f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00076	73 22		 jae	 SHORT $LN10@stbtt__siz
  00078	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__sized_trapezoid_area@@YAMMMM@Z@4JA
  0007e	83 c0 02	 add	 eax, 2
  00081	44 8b c0	 mov	 r8d, eax
  00084	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0008b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@HFDPCECH@?$AAb?$AAo?$AAt?$AAt?$AAo?$AAm?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00098	33 c0		 xor	 eax, eax
$LN10@stbtt__siz:
  0009a	33 c0		 xor	 eax, eax
  0009c	85 c0		 test	 eax, eax
  0009e	75 c7		 jne	 SHORT $LN7@stbtt__siz

; 3074 :    return (top_width + bottom_width) / 2.0f * height;

  000a0	f3 0f 10 85 e8
	00 00 00	 movss	 xmm0, DWORD PTR top_width$[rbp]
  000a8	f3 0f 58 85 f0
	00 00 00	 addss	 xmm0, DWORD PTR bottom_width$[rbp]
  000b0	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  000b8	f3 0f 59 85 e0
	00 00 00	 mulss	 xmm0, DWORD PTR height$[rbp]

; 3075 : }

  000c0	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000c7	5f		 pop	 rdi
  000c8	5d		 pop	 rbp
  000c9	c3		 ret	 0
?stbtt__sized_trapezoid_area@@YAMMMM@Z ENDP		; stbtt__sized_trapezoid_area
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z
_TEXT	SEGMENT
scanline$ = 224
x$ = 232
e$ = 240
x0$ = 248
y0$ = 256
x1$ = 264
y1$ = 272
?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z PROC ; stbtt__handle_clipped_edge, COMDAT

; 3034 : {

  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000b	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 3035 :    if (y0 == y1) return;

  00039	f3 0f 10 85 00
	01 00 00	 movss	 xmm0, DWORD PTR y0$[rbp]
  00041	0f 2e 85 10 01
	00 00		 ucomiss xmm0, DWORD PTR y1$[rbp]
  00048	7a 07		 jp	 SHORT $LN26@stbtt__han
  0004a	75 05		 jne	 SHORT $LN26@stbtt__han
  0004c	e9 20 05 00 00	 jmp	 $LN1@stbtt__han
$LN26@stbtt__han:
$LN4@stbtt__han:

; 3036 :    STBTT_assert(y0 < y1);

  00051	f3 0f 10 85 10
	01 00 00	 movss	 xmm0, DWORD PTR y1$[rbp]
  00059	0f 2f 85 00 01
	00 00		 comiss	 xmm0, DWORD PTR y0$[rbp]
  00060	77 22		 ja	 SHORT $LN44@stbtt__han
  00062	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA
  00068	83 c0 02	 add	 eax, 2
  0006b	44 8b c0	 mov	 r8d, eax
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BA@ENLNFFAM@?$AAy?$AA0?$AA?5?$AA?$DM?$AA?5?$AAy?$AA1?$AA?$AA@
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00082	33 c0		 xor	 eax, eax
$LN44@stbtt__han:
  00084	33 c0		 xor	 eax, eax
  00086	85 c0		 test	 eax, eax
  00088	75 c7		 jne	 SHORT $LN4@stbtt__han
$LN7@stbtt__han:

; 3037 :    STBTT_assert(e->sy <= e->ey);

  0008a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  00091	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR e$[rbp]
  00098	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [rax+28]
  0009d	0f 2f 41 18	 comiss	 xmm0, DWORD PTR [rcx+24]
  000a1	73 22		 jae	 SHORT $LN45@stbtt__han
  000a3	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA
  000a9	83 c0 03	 add	 eax, 3
  000ac	44 8b c0	 mov	 r8d, eax
  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@JGPMADBG@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?$AA@
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c3	33 c0		 xor	 eax, eax
$LN45@stbtt__han:
  000c5	33 c0		 xor	 eax, eax
  000c7	85 c0		 test	 eax, eax
  000c9	75 bf		 jne	 SHORT $LN7@stbtt__han

; 3038 :    if (y0 > e->ey) return;

  000cb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  000d2	f3 0f 10 85 00
	01 00 00	 movss	 xmm0, DWORD PTR y0$[rbp]
  000da	0f 2f 40 1c	 comiss	 xmm0, DWORD PTR [rax+28]
  000de	76 05		 jbe	 SHORT $LN27@stbtt__han
  000e0	e9 8c 04 00 00	 jmp	 $LN1@stbtt__han
$LN27@stbtt__han:

; 3039 :    if (y1 < e->sy) return;

  000e5	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  000ec	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [rax+24]
  000f1	0f 2f 85 10 01
	00 00		 comiss	 xmm0, DWORD PTR y1$[rbp]
  000f8	76 05		 jbe	 SHORT $LN28@stbtt__han
  000fa	e9 72 04 00 00	 jmp	 $LN1@stbtt__han
$LN28@stbtt__han:

; 3040 :    if (y0 < e->sy) {

  000ff	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  00106	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [rax+24]
  0010b	0f 2f 85 00 01
	00 00		 comiss	 xmm0, DWORD PTR y0$[rbp]
  00112	76 67		 jbe	 SHORT $LN29@stbtt__han

; 3041 :       x0 += (x1-x0) * (e->sy - y0) / (y1-y0);

  00114	f3 0f 10 85 08
	01 00 00	 movss	 xmm0, DWORD PTR x1$[rbp]
  0011c	f3 0f 5c 85 f8
	00 00 00	 subss	 xmm0, DWORD PTR x0$[rbp]
  00124	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  0012b	f3 0f 10 48 18	 movss	 xmm1, DWORD PTR [rax+24]
  00130	f3 0f 5c 8d 00
	01 00 00	 subss	 xmm1, DWORD PTR y0$[rbp]
  00138	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0013c	f3 0f 10 8d 10
	01 00 00	 movss	 xmm1, DWORD PTR y1$[rbp]
  00144	f3 0f 5c 8d 00
	01 00 00	 subss	 xmm1, DWORD PTR y0$[rbp]
  0014c	f3 0f 5e c1	 divss	 xmm0, xmm1
  00150	f3 0f 10 8d f8
	00 00 00	 movss	 xmm1, DWORD PTR x0$[rbp]
  00158	f3 0f 58 c8	 addss	 xmm1, xmm0
  0015c	0f 28 c1	 movaps	 xmm0, xmm1
  0015f	f3 0f 11 85 f8
	00 00 00	 movss	 DWORD PTR x0$[rbp], xmm0

; 3042 :       y0 = e->sy;

  00167	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  0016e	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [rax+24]
  00173	f3 0f 11 85 00
	01 00 00	 movss	 DWORD PTR y0$[rbp], xmm0
$LN29@stbtt__han:

; 3043 :    }
; 3044 :    if (y1 > e->ey) {

  0017b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  00182	f3 0f 10 85 10
	01 00 00	 movss	 xmm0, DWORD PTR y1$[rbp]
  0018a	0f 2f 40 1c	 comiss	 xmm0, DWORD PTR [rax+28]
  0018e	76 67		 jbe	 SHORT $LN30@stbtt__han

; 3045 :       x1 += (x1-x0) * (e->ey - y1) / (y1-y0);

  00190	f3 0f 10 85 08
	01 00 00	 movss	 xmm0, DWORD PTR x1$[rbp]
  00198	f3 0f 5c 85 f8
	00 00 00	 subss	 xmm0, DWORD PTR x0$[rbp]
  001a0	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  001a7	f3 0f 10 48 1c	 movss	 xmm1, DWORD PTR [rax+28]
  001ac	f3 0f 5c 8d 10
	01 00 00	 subss	 xmm1, DWORD PTR y1$[rbp]
  001b4	f3 0f 59 c1	 mulss	 xmm0, xmm1
  001b8	f3 0f 10 8d 10
	01 00 00	 movss	 xmm1, DWORD PTR y1$[rbp]
  001c0	f3 0f 5c 8d 00
	01 00 00	 subss	 xmm1, DWORD PTR y0$[rbp]
  001c8	f3 0f 5e c1	 divss	 xmm0, xmm1
  001cc	f3 0f 10 8d 08
	01 00 00	 movss	 xmm1, DWORD PTR x1$[rbp]
  001d4	f3 0f 58 c8	 addss	 xmm1, xmm0
  001d8	0f 28 c1	 movaps	 xmm0, xmm1
  001db	f3 0f 11 85 08
	01 00 00	 movss	 DWORD PTR x1$[rbp], xmm0

; 3046 :       y1 = e->ey;

  001e3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  001ea	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [rax+28]
  001ef	f3 0f 11 85 10
	01 00 00	 movss	 DWORD PTR y1$[rbp], xmm0
$LN30@stbtt__han:

; 3047 :    }
; 3048 : 
; 3049 :    if (x0 == x)

  001f7	f3 0f 2a 85 e8
	00 00 00	 cvtsi2ss xmm0, DWORD PTR x$[rbp]
  001ff	f3 0f 10 8d f8
	00 00 00	 movss	 xmm1, DWORD PTR x0$[rbp]
  00207	0f 2e c8	 ucomiss xmm1, xmm0
  0020a	7a 44		 jp	 SHORT $LN31@stbtt__han
  0020c	75 42		 jne	 SHORT $LN31@stbtt__han
$LN10@stbtt__han:

; 3050 :       STBTT_assert(x1 <= x+1);

  0020e	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR x$[rbp]
  00214	ff c0		 inc	 eax
  00216	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0021a	0f 2f 85 08 01
	00 00		 comiss	 xmm0, DWORD PTR x1$[rbp]
  00221	73 22		 jae	 SHORT $LN46@stbtt__han
  00223	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA
  00229	83 c0 10	 add	 eax, 16
  0022c	44 8b c0	 mov	 r8d, eax
  0022f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00236	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@DHAKMBPL@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@
  0023d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00243	33 c0		 xor	 eax, eax
$LN46@stbtt__han:
  00245	33 c0		 xor	 eax, eax
  00247	85 c0		 test	 eax, eax
  00249	75 c3		 jne	 SHORT $LN10@stbtt__han

; 3051 :    else if (x0 == x+1)

  0024b	e9 5a 01 00 00	 jmp	 $LN32@stbtt__han
$LN31@stbtt__han:
  00250	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR x$[rbp]
  00256	ff c0		 inc	 eax
  00258	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0025c	f3 0f 10 8d f8
	00 00 00	 movss	 xmm1, DWORD PTR x0$[rbp]
  00264	0f 2e c8	 ucomiss xmm1, xmm0
  00267	7a 44		 jp	 SHORT $LN33@stbtt__han
  00269	75 42		 jne	 SHORT $LN33@stbtt__han
$LN13@stbtt__han:

; 3052 :       STBTT_assert(x1 >= x);

  0026b	f3 0f 2a 85 e8
	00 00 00	 cvtsi2ss xmm0, DWORD PTR x$[rbp]
  00273	f3 0f 10 8d 08
	01 00 00	 movss	 xmm1, DWORD PTR x1$[rbp]
  0027b	0f 2f c8	 comiss	 xmm1, xmm0
  0027e	73 22		 jae	 SHORT $LN47@stbtt__han
  00280	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA
  00286	83 c0 12	 add	 eax, 18
  00289	44 8b c0	 mov	 r8d, eax
  0028c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00293	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BA@FAAMJPKE@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$AA@
  0029a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002a0	33 c0		 xor	 eax, eax
$LN47@stbtt__han:
  002a2	33 c0		 xor	 eax, eax
  002a4	85 c0		 test	 eax, eax
  002a6	75 c3		 jne	 SHORT $LN13@stbtt__han

; 3053 :    else if (x0 <= x)

  002a8	e9 fd 00 00 00	 jmp	 $LN34@stbtt__han
$LN33@stbtt__han:
  002ad	f3 0f 2a 85 e8
	00 00 00	 cvtsi2ss xmm0, DWORD PTR x$[rbp]
  002b5	0f 2f 85 f8 00
	00 00		 comiss	 xmm0, DWORD PTR x0$[rbp]
  002bc	72 3e		 jb	 SHORT $LN35@stbtt__han
$LN16@stbtt__han:

; 3054 :       STBTT_assert(x1 <= x);

  002be	f3 0f 2a 85 e8
	00 00 00	 cvtsi2ss xmm0, DWORD PTR x$[rbp]
  002c6	0f 2f 85 08 01
	00 00		 comiss	 xmm0, DWORD PTR x1$[rbp]
  002cd	73 22		 jae	 SHORT $LN48@stbtt__han
  002cf	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA
  002d5	83 c0 14	 add	 eax, 20
  002d8	44 8b c0	 mov	 r8d, eax
  002db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  002e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BA@FEPJEPJJ@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$AA@
  002e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002ef	33 c0		 xor	 eax, eax
$LN48@stbtt__han:
  002f1	33 c0		 xor	 eax, eax
  002f3	85 c0		 test	 eax, eax
  002f5	75 c7		 jne	 SHORT $LN16@stbtt__han

; 3055 :    else if (x0 >= x+1)

  002f7	e9 ae 00 00 00	 jmp	 $LN36@stbtt__han
$LN35@stbtt__han:
  002fc	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR x$[rbp]
  00302	ff c0		 inc	 eax
  00304	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00308	f3 0f 10 8d f8
	00 00 00	 movss	 xmm1, DWORD PTR x0$[rbp]
  00310	0f 2f c8	 comiss	 xmm1, xmm0
  00313	72 43		 jb	 SHORT $LN37@stbtt__han
$LN19@stbtt__han:

; 3056 :       STBTT_assert(x1 >= x+1);

  00315	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR x$[rbp]
  0031b	ff c0		 inc	 eax
  0031d	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00321	f3 0f 10 8d 08
	01 00 00	 movss	 xmm1, DWORD PTR x1$[rbp]
  00329	0f 2f c8	 comiss	 xmm1, xmm0
  0032c	73 22		 jae	 SHORT $LN49@stbtt__han
  0032e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA
  00334	83 c0 16	 add	 eax, 22
  00337	44 8b c0	 mov	 r8d, eax
  0033a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00341	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@NGGEAFFG@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@
  00348	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0034e	33 c0		 xor	 eax, eax
$LN49@stbtt__han:
  00350	33 c0		 xor	 eax, eax
  00352	85 c0		 test	 eax, eax
  00354	75 bf		 jne	 SHORT $LN19@stbtt__han

; 3057 :    else

  00356	eb 52		 jmp	 SHORT $LN38@stbtt__han
$LN37@stbtt__han:
$LN22@stbtt__han:

; 3058 :       STBTT_assert(x1 >= x && x1 <= x+1);

  00358	f3 0f 2a 85 e8
	00 00 00	 cvtsi2ss xmm0, DWORD PTR x$[rbp]
  00360	f3 0f 10 8d 08
	01 00 00	 movss	 xmm1, DWORD PTR x1$[rbp]
  00368	0f 2f c8	 comiss	 xmm1, xmm0
  0036b	72 15		 jb	 SHORT $LN50@stbtt__han
  0036d	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR x$[rbp]
  00373	ff c0		 inc	 eax
  00375	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00379	0f 2f 85 08 01
	00 00		 comiss	 xmm0, DWORD PTR x1$[rbp]
  00380	73 22		 jae	 SHORT $LN51@stbtt__han
$LN50@stbtt__han:
  00382	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA
  00388	83 c0 18	 add	 eax, 24
  0038b	44 8b c0	 mov	 r8d, eax
  0038e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00395	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@NILBPPPH@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?$AA@
  0039c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003a2	33 c0		 xor	 eax, eax
$LN51@stbtt__han:
  003a4	33 c0		 xor	 eax, eax
  003a6	85 c0		 test	 eax, eax
  003a8	75 ae		 jne	 SHORT $LN22@stbtt__han
$LN38@stbtt__han:
$LN36@stbtt__han:
$LN34@stbtt__han:
$LN32@stbtt__han:

; 3059 : 
; 3060 :    if (x0 <= x && x1 <= x)

  003aa	f3 0f 2a 85 e8
	00 00 00	 cvtsi2ss xmm0, DWORD PTR x$[rbp]
  003b2	0f 2f 85 f8 00
	00 00		 comiss	 xmm0, DWORD PTR x0$[rbp]
  003b9	72 66		 jb	 SHORT $LN39@stbtt__han
  003bb	f3 0f 2a 85 e8
	00 00 00	 cvtsi2ss xmm0, DWORD PTR x$[rbp]
  003c3	0f 2f 85 08 01
	00 00		 comiss	 xmm0, DWORD PTR x1$[rbp]
  003ca	72 55		 jb	 SHORT $LN39@stbtt__han

; 3061 :       scanline[x] += e->direction * (y1-y0);

  003cc	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR x$[rbp]
  003d3	f3 0f 10 85 10
	01 00 00	 movss	 xmm0, DWORD PTR y1$[rbp]
  003db	f3 0f 5c 85 00
	01 00 00	 subss	 xmm0, DWORD PTR y0$[rbp]
  003e3	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR e$[rbp]
  003ea	f3 0f 10 49 14	 movss	 xmm1, DWORD PTR [rcx+20]
  003ef	f3 0f 59 c8	 mulss	 xmm1, xmm0
  003f3	0f 28 c1	 movaps	 xmm0, xmm1
  003f6	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  003fd	f3 0f 10 0c 81	 movss	 xmm1, DWORD PTR [rcx+rax*4]
  00402	f3 0f 58 c8	 addss	 xmm1, xmm0
  00406	0f 28 c1	 movaps	 xmm0, xmm1
  00409	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR x$[rbp]
  00410	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  00417	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0
  0041c	e9 50 01 00 00	 jmp	 $LN40@stbtt__han
$LN39@stbtt__han:

; 3062 :    else if (x0 >= x+1 && x1 >= x+1)

  00421	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR x$[rbp]
  00427	ff c0		 inc	 eax
  00429	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0042d	f3 0f 10 8d f8
	00 00 00	 movss	 xmm1, DWORD PTR x0$[rbp]
  00435	0f 2f c8	 comiss	 xmm1, xmm0
  00438	72 1e		 jb	 SHORT $LN41@stbtt__han
  0043a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR x$[rbp]
  00440	ff c0		 inc	 eax
  00442	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00446	f3 0f 10 8d 08
	01 00 00	 movss	 xmm1, DWORD PTR x1$[rbp]
  0044e	0f 2f c8	 comiss	 xmm1, xmm0
  00451	72 05		 jb	 SHORT $LN41@stbtt__han

; 3063 :       ;
; 3064 :    else {

  00453	e9 19 01 00 00	 jmp	 $LN42@stbtt__han
$LN41@stbtt__han:
$LN25@stbtt__han:

; 3065 :       STBTT_assert(x0 >= x && x0 <= x+1 && x1 >= x && x1 <= x+1);

  00458	f3 0f 2a 85 e8
	00 00 00	 cvtsi2ss xmm0, DWORD PTR x$[rbp]
  00460	f3 0f 10 8d f8
	00 00 00	 movss	 xmm1, DWORD PTR x0$[rbp]
  00468	0f 2f c8	 comiss	 xmm1, xmm0
  0046b	72 3f		 jb	 SHORT $LN52@stbtt__han
  0046d	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR x$[rbp]
  00473	ff c0		 inc	 eax
  00475	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00479	0f 2f 85 f8 00
	00 00		 comiss	 xmm0, DWORD PTR x0$[rbp]
  00480	72 2a		 jb	 SHORT $LN52@stbtt__han
  00482	f3 0f 2a 85 e8
	00 00 00	 cvtsi2ss xmm0, DWORD PTR x$[rbp]
  0048a	f3 0f 10 8d 08
	01 00 00	 movss	 xmm1, DWORD PTR x1$[rbp]
  00492	0f 2f c8	 comiss	 xmm1, xmm0
  00495	72 15		 jb	 SHORT $LN52@stbtt__han
  00497	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR x$[rbp]
  0049d	ff c0		 inc	 eax
  0049f	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  004a3	0f 2f 85 08 01
	00 00		 comiss	 xmm0, DWORD PTR x1$[rbp]
  004aa	73 22		 jae	 SHORT $LN53@stbtt__han
$LN52@stbtt__han:
  004ac	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA
  004b2	83 c0 1f	 add	 eax, 31
  004b5	44 8b c0	 mov	 r8d, eax
  004b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  004bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FK@JPMIPNJF@?$AAx?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA0?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5@
  004c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004cc	33 c0		 xor	 eax, eax
$LN53@stbtt__han:
  004ce	33 c0		 xor	 eax, eax
  004d0	85 c0		 test	 eax, eax
  004d2	75 84		 jne	 SHORT $LN25@stbtt__han

; 3066 :       scanline[x] += e->direction * (y1-y0) * (1-((x0-x)+(x1-x))/2); // coverage = 1 - average x position

  004d4	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR x$[rbp]
  004db	f3 0f 10 85 10
	01 00 00	 movss	 xmm0, DWORD PTR y1$[rbp]
  004e3	f3 0f 5c 85 00
	01 00 00	 subss	 xmm0, DWORD PTR y0$[rbp]
  004eb	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR e$[rbp]
  004f2	f3 0f 10 49 14	 movss	 xmm1, DWORD PTR [rcx+20]
  004f7	f3 0f 59 c8	 mulss	 xmm1, xmm0
  004fb	0f 28 c1	 movaps	 xmm0, xmm1
  004fe	f3 0f 2a 8d e8
	00 00 00	 cvtsi2ss xmm1, DWORD PTR x$[rbp]
  00506	f3 0f 10 95 f8
	00 00 00	 movss	 xmm2, DWORD PTR x0$[rbp]
  0050e	f3 0f 5c d1	 subss	 xmm2, xmm1
  00512	0f 28 ca	 movaps	 xmm1, xmm2
  00515	f3 0f 2a 95 e8
	00 00 00	 cvtsi2ss xmm2, DWORD PTR x$[rbp]
  0051d	f3 0f 10 9d 08
	01 00 00	 movss	 xmm3, DWORD PTR x1$[rbp]
  00525	f3 0f 5c da	 subss	 xmm3, xmm2
  00529	0f 28 d3	 movaps	 xmm2, xmm3
  0052c	f3 0f 58 ca	 addss	 xmm1, xmm2
  00530	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40000000
  00538	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00540	f3 0f 5c d1	 subss	 xmm2, xmm1
  00544	0f 28 ca	 movaps	 xmm1, xmm2
  00547	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0054b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  00552	f3 0f 10 0c 81	 movss	 xmm1, DWORD PTR [rcx+rax*4]
  00557	f3 0f 58 c8	 addss	 xmm1, xmm0
  0055b	0f 28 c1	 movaps	 xmm0, xmm1
  0055e	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR x$[rbp]
  00565	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR scanline$[rbp]
  0056c	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0
$LN42@stbtt__han:
$LN40@stbtt__han:
$LN1@stbtt__han:

; 3067 :    }
; 3068 : }

  00571	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00578	5f		 pop	 rdi
  00579	5d		 pop	 rbp
  0057a	c3		 ret	 0
?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ENDP ; stbtt__handle_clipped_edge
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z
_TEXT	SEGMENT
z$ = 8
dxdy$ = 36
tv133 = 244
tv87 = 244
hh$ = 288
e$ = 296
off_x$ = 304
start_point$ = 312
userdata$ = 320
?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z PROC ; stbtt__new_active, COMDAT

; 2863 : {

  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 2864 :    stbtt__active_edge *z = (stbtt__active_edge *) stbtt__hheap_alloc(hh, sizeof(*z), userdata);

  0003a	4c 8b 85 40 01
	00 00		 mov	 r8, QWORD PTR userdata$[rbp]
  00041	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00046	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR hh$[rbp]
  0004d	e8 00 00 00 00	 call	 ?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z ; stbtt__hheap_alloc
  00052	48 89 45 08	 mov	 QWORD PTR z$[rbp], rax

; 2865 :    float dxdy = (e->x1 - e->x0) / (e->y1 - e->y0);

  00056	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  0005d	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR e$[rbp]
  00064	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  00069	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [rcx]
  0006d	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  00074	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR e$[rbp]
  0007b	f3 0f 10 48 0c	 movss	 xmm1, DWORD PTR [rax+12]
  00080	f3 0f 5c 49 04	 subss	 xmm1, DWORD PTR [rcx+4]
  00085	f3 0f 5e c1	 divss	 xmm0, xmm1
  00089	f3 0f 11 45 24	 movss	 DWORD PTR dxdy$[rbp], xmm0
$LN4@stbtt__new:

; 2866 :    STBTT_assert(z != NULL);

  0008e	48 83 7d 08 00	 cmp	 QWORD PTR z$[rbp], 0
  00093	75 22		 jne	 SHORT $LN7@stbtt__new
  00095	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z@4JA
  0009b	83 c0 03	 add	 eax, 3
  0009e	44 8b c0	 mov	 r8d, eax
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1O@EHPNOHML@?$AAz?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b5	33 c0		 xor	 eax, eax
$LN7@stbtt__new:
  000b7	33 c0		 xor	 eax, eax
  000b9	85 c0		 test	 eax, eax
  000bb	75 d1		 jne	 SHORT $LN4@stbtt__new

; 2867 :    //STBTT_assert(e->y0 <= start_point);
; 2868 :    if (!z) return z;

  000bd	48 83 7d 08 00	 cmp	 QWORD PTR z$[rbp], 0
  000c2	75 09		 jne	 SHORT $LN5@stbtt__new
  000c4	48 8b 45 08	 mov	 rax, QWORD PTR z$[rbp]
  000c8	e9 26 01 00 00	 jmp	 $LN1@stbtt__new
$LN5@stbtt__new:

; 2869 :    z->fdx = dxdy;

  000cd	48 8b 45 08	 mov	 rax, QWORD PTR z$[rbp]
  000d1	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR dxdy$[rbp]
  000d6	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0

; 2870 :    z->fdy = dxdy != 0.0f ? (1.0f/dxdy) : 0.0f;

  000db	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR dxdy$[rbp]
  000e0	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  000e7	7a 02		 jp	 SHORT $LN12@stbtt__new
  000e9	74 17		 je	 SHORT $LN8@stbtt__new
$LN12@stbtt__new:
  000eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000f3	f3 0f 5e 45 24	 divss	 xmm0, DWORD PTR dxdy$[rbp]
  000f8	f3 0f 11 85 f4
	00 00 00	 movss	 DWORD PTR tv87[rbp], xmm0
  00100	eb 0b		 jmp	 SHORT $LN9@stbtt__new
$LN8@stbtt__new:
  00102	0f 57 c0	 xorps	 xmm0, xmm0
  00105	f3 0f 11 85 f4
	00 00 00	 movss	 DWORD PTR tv87[rbp], xmm0
$LN9@stbtt__new:
  0010d	48 8b 45 08	 mov	 rax, QWORD PTR z$[rbp]
  00111	f3 0f 10 85 f4
	00 00 00	 movss	 xmm0, DWORD PTR tv87[rbp]
  00119	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0

; 2871 :    z->fx = e->x0 + dxdy * (start_point - e->y0);

  0011e	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  00125	f3 0f 10 85 38
	01 00 00	 movss	 xmm0, DWORD PTR start_point$[rbp]
  0012d	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [rax+4]
  00132	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR dxdy$[rbp]
  00137	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0013b	0f 28 c1	 movaps	 xmm0, xmm1
  0013e	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  00145	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00149	f3 0f 58 c8	 addss	 xmm1, xmm0
  0014d	0f 28 c1	 movaps	 xmm0, xmm1
  00150	48 8b 45 08	 mov	 rax, QWORD PTR z$[rbp]
  00154	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0

; 2872 :    z->fx -= off_x;

  00159	f3 0f 2a 85 30
	01 00 00	 cvtsi2ss xmm0, DWORD PTR off_x$[rbp]
  00161	48 8b 45 08	 mov	 rax, QWORD PTR z$[rbp]
  00165	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [rax+8]
  0016a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0016e	0f 28 c1	 movaps	 xmm0, xmm1
  00171	48 8b 45 08	 mov	 rax, QWORD PTR z$[rbp]
  00175	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0

; 2873 :    z->direction = e->invert ? 1.0f : -1.0f;

  0017a	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR e$[rbp]
  00181	83 78 10 00	 cmp	 DWORD PTR [rax+16], 0
  00185	74 12		 je	 SHORT $LN10@stbtt__new
  00187	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0018f	f3 0f 11 85 f4
	00 00 00	 movss	 DWORD PTR tv133[rbp], xmm0
  00197	eb 10		 jmp	 SHORT $LN11@stbtt__new
$LN10@stbtt__new:
  00199	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001a1	f3 0f 11 85 f4
	00 00 00	 movss	 DWORD PTR tv133[rbp], xmm0
$LN11@stbtt__new:
  001a9	48 8b 45 08	 mov	 rax, QWORD PTR z$[rbp]
  001ad	f3 0f 10 85 f4
	00 00 00	 movss	 xmm0, DWORD PTR tv133[rbp]
  001b5	f3 0f 11 40 14	 movss	 DWORD PTR [rax+20], xmm0

; 2874 :    z->sy = e->y0;

  001ba	48 8b 45 08	 mov	 rax, QWORD PTR z$[rbp]
  001be	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR e$[rbp]
  001c5	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [rcx+4]
  001ca	f3 0f 11 40 18	 movss	 DWORD PTR [rax+24], xmm0

; 2875 :    z->ey = e->y1;

  001cf	48 8b 45 08	 mov	 rax, QWORD PTR z$[rbp]
  001d3	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR e$[rbp]
  001da	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [rcx+12]
  001df	f3 0f 11 40 1c	 movss	 DWORD PTR [rax+28], xmm0

; 2876 :    z->next = 0;

  001e4	48 8b 45 08	 mov	 rax, QWORD PTR z$[rbp]
  001e8	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 2877 :    return z;

  001ef	48 8b 45 08	 mov	 rax, QWORD PTR z$[rbp]
$LN1@stbtt__new:

; 2878 : }

  001f3	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  001fa	5f		 pop	 rdi
  001fb	5d		 pop	 rbp
  001fc	c3		 ret	 0
?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z ENDP ; stbtt__new_active
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z
_TEXT	SEGMENT
c$ = 8
n$1 = 40
hh$ = 288
userdata$ = 296
?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z PROC	; stbtt__hheap_cleanup, COMDAT

; 2803 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 2804 :    stbtt__hheap_chunk *c = hh->head;

  0002f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR hh$[rbp]
  00036	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00039	48 89 45 08	 mov	 QWORD PTR c$[rbp], rax
$LN2@stbtt__hhe:

; 2805 :    while (c) {

  0003d	48 83 7d 08 00	 cmp	 QWORD PTR c$[rbp], 0
  00042	74 1e		 je	 SHORT $LN3@stbtt__hhe

; 2806 :       stbtt__hheap_chunk *n = c->next;

  00044	48 8b 45 08	 mov	 rax, QWORD PTR c$[rbp]
  00048	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004b	48 89 45 28	 mov	 QWORD PTR n$1[rbp], rax

; 2807 :       STBTT_free(c, userdata);

  0004f	48 8b 4d 08	 mov	 rcx, QWORD PTR c$[rbp]
  00053	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree

; 2808 :       c = n;

  00058	48 8b 45 28	 mov	 rax, QWORD PTR n$1[rbp]
  0005c	48 89 45 08	 mov	 QWORD PTR c$[rbp], rax

; 2809 :    }

  00060	eb db		 jmp	 SHORT $LN2@stbtt__hhe
$LN3@stbtt__hhe:

; 2810 : }

  00062	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00069	5f		 pop	 rdi
  0006a	5d		 pop	 rbp
  0006b	c3		 ret	 0
?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z ENDP	; stbtt__hheap_cleanup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z
_TEXT	SEGMENT
hh$ = 224
p$ = 232
?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z PROC	; stbtt__hheap_free, COMDAT

; 2797 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 2798 :    *(void **) p = hh->first_free;

  0002d	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR p$[rbp]
  00034	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR hh$[rbp]
  0003b	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0003f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2799 :    hh->first_free = p;

  00042	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR hh$[rbp]
  00049	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00050	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2800 : }

  00054	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z ENDP	; stbtt__hheap_free
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z
_TEXT	SEGMENT
p$1 = 8
count$2 = 36
c$3 = 72
tv73 = 276
tv72 = 280
hh$ = 320
size$ = 328
userdata$ = 336
?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z PROC ; stbtt__hheap_alloc, COMDAT

; 2776 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]

; 2777 :    if (hh->first_free) {

  00034	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR hh$[rbp]
  0003b	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00040	74 2f		 je	 SHORT $LN2@stbtt__hhe

; 2778 :       void *p = hh->first_free;

  00042	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR hh$[rbp]
  00049	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004d	48 89 45 08	 mov	 QWORD PTR p$1[rbp], rax

; 2779 :       hh->first_free = * (void **) p;

  00051	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR hh$[rbp]
  00058	48 8b 4d 08	 mov	 rcx, QWORD PTR p$1[rbp]
  0005c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0005f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2780 :       return p;

  00063	48 8b 45 08	 mov	 rax, QWORD PTR p$1[rbp]
  00067	e9 fb 00 00 00	 jmp	 $LN1@stbtt__hhe

; 2781 :    } else {

  0006c	e9 f6 00 00 00	 jmp	 $LN3@stbtt__hhe
$LN2@stbtt__hhe:

; 2782 :       if (hh->num_remaining_in_head_chunk == 0) {

  00071	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR hh$[rbp]
  00078	83 78 10 00	 cmp	 DWORD PTR [rax+16], 0
  0007c	0f 85 a7 00 00
	00		 jne	 $LN4@stbtt__hhe

; 2783 :          int count = (size < 32 ? 2000 : size < 128 ? 800 : 100);

  00082	48 83 bd 48 01
	00 00 20	 cmp	 QWORD PTR size$[rbp], 32 ; 00000020H
  0008a	73 0c		 jae	 SHORT $LN9@stbtt__hhe
  0008c	c7 85 14 01 00
	00 d0 07 00 00	 mov	 DWORD PTR tv73[rbp], 2000 ; 000007d0H
  00096	eb 2f		 jmp	 SHORT $LN10@stbtt__hhe
$LN9@stbtt__hhe:
  00098	48 81 bd 48 01
	00 00 80 00 00
	00		 cmp	 QWORD PTR size$[rbp], 128 ; 00000080H
  000a3	73 0c		 jae	 SHORT $LN7@stbtt__hhe
  000a5	c7 85 18 01 00
	00 20 03 00 00	 mov	 DWORD PTR tv72[rbp], 800 ; 00000320H
  000af	eb 0a		 jmp	 SHORT $LN8@stbtt__hhe
$LN7@stbtt__hhe:
  000b1	c7 85 18 01 00
	00 64 00 00 00	 mov	 DWORD PTR tv72[rbp], 100 ; 00000064H
$LN8@stbtt__hhe:
  000bb	8b 85 18 01 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  000c1	89 85 14 01 00
	00		 mov	 DWORD PTR tv73[rbp], eax
$LN10@stbtt__hhe:
  000c7	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR tv73[rbp]
  000cd	89 45 24	 mov	 DWORD PTR count$2[rbp], eax

; 2784 :          stbtt__hheap_chunk *c = (stbtt__hheap_chunk *) STBTT_malloc(sizeof(stbtt__hheap_chunk) + size * count, userdata);

  000d0	48 63 45 24	 movsxd	 rax, DWORD PTR count$2[rbp]
  000d4	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR size$[rbp]
  000db	48 0f af c8	 imul	 rcx, rax
  000df	48 8b c1	 mov	 rax, rcx
  000e2	48 83 c0 08	 add	 rax, 8
  000e6	48 8b c8	 mov	 rcx, rax
  000e9	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  000ee	48 89 45 48	 mov	 QWORD PTR c$3[rbp], rax

; 2785 :          if (c == NULL)

  000f2	48 83 7d 48 00	 cmp	 QWORD PTR c$3[rbp], 0
  000f7	75 04		 jne	 SHORT $LN5@stbtt__hhe

; 2786 :             return NULL;

  000f9	33 c0		 xor	 eax, eax
  000fb	eb 6a		 jmp	 SHORT $LN1@stbtt__hhe
$LN5@stbtt__hhe:

; 2787 :          c->next = hh->head;

  000fd	48 8b 45 48	 mov	 rax, QWORD PTR c$3[rbp]
  00101	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR hh$[rbp]
  00108	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0010b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2788 :          hh->head = c;

  0010e	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR hh$[rbp]
  00115	48 8b 4d 48	 mov	 rcx, QWORD PTR c$3[rbp]
  00119	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2789 :          hh->num_remaining_in_head_chunk = count;

  0011c	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR hh$[rbp]
  00123	8b 4d 24	 mov	 ecx, DWORD PTR count$2[rbp]
  00126	89 48 10	 mov	 DWORD PTR [rax+16], ecx
$LN4@stbtt__hhe:

; 2790 :       }
; 2791 :       --hh->num_remaining_in_head_chunk;

  00129	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR hh$[rbp]
  00130	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00133	ff c8		 dec	 eax
  00135	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR hh$[rbp]
  0013c	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 2792 :       return (char *) (hh->head) + sizeof(stbtt__hheap_chunk) + size * hh->num_remaining_in_head_chunk;

  0013f	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR hh$[rbp]
  00146	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00149	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR hh$[rbp]
  00150	48 63 49 10	 movsxd	 rcx, DWORD PTR [rcx+16]
  00154	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR size$[rbp]
  0015b	48 0f af d1	 imul	 rdx, rcx
  0015f	48 8b ca	 mov	 rcx, rdx
  00162	48 8d 44 08 08	 lea	 rax, QWORD PTR [rax+rcx+8]
$LN3@stbtt__hhe:
$LN1@stbtt__hhe:

; 2793 :    }
; 2794 : }

  00167	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  0016e	5f		 pop	 rdi
  0016f	5d		 pop	 rbp
  00170	c3		 ret	 0
?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z ENDP ; stbtt__hheap_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
_TEXT	SEGMENT
count_ctx$ = 8
output_ctx$ = 88
__$ArrayPad$ = 344
info$ = 384
glyph_index$ = 392
pvertices$ = 400
?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z PROC ; stbtt__GetGlyphShapeT2, COMDAT

; 2275 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00033	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003a	48 33 c5	 xor	 rax, rbp
  0003d	48 89 85 58 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2276 :    // runs the charstring twice, once to count and once to output (to avoid realloc)
; 2277 :    stbtt__csctx count_ctx = STBTT__CSCTX_INIT(1);

  00044	c7 45 08 01 00
	00 00		 mov	 DWORD PTR count_ctx$[rbp], 1
  0004b	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR count_ctx$[rbp+4], 0
  00052	0f 57 c0	 xorps	 xmm0, xmm0
  00055	f3 0f 11 45 10	 movss	 DWORD PTR count_ctx$[rbp+8], xmm0
  0005a	0f 57 c0	 xorps	 xmm0, xmm0
  0005d	f3 0f 11 45 14	 movss	 DWORD PTR count_ctx$[rbp+12], xmm0
  00062	0f 57 c0	 xorps	 xmm0, xmm0
  00065	f3 0f 11 45 18	 movss	 DWORD PTR count_ctx$[rbp+16], xmm0
  0006a	0f 57 c0	 xorps	 xmm0, xmm0
  0006d	f3 0f 11 45 1c	 movss	 DWORD PTR count_ctx$[rbp+20], xmm0
  00072	c7 45 20 00 00
	00 00		 mov	 DWORD PTR count_ctx$[rbp+24], 0
  00079	c7 45 24 00 00
	00 00		 mov	 DWORD PTR count_ctx$[rbp+28], 0
  00080	c7 45 28 00 00
	00 00		 mov	 DWORD PTR count_ctx$[rbp+32], 0
  00087	c7 45 2c 00 00
	00 00		 mov	 DWORD PTR count_ctx$[rbp+36], 0
  0008e	48 c7 45 30 00
	00 00 00	 mov	 QWORD PTR count_ctx$[rbp+40], 0
  00096	c7 45 38 00 00
	00 00		 mov	 DWORD PTR count_ctx$[rbp+48], 0

; 2278 :    stbtt__csctx output_ctx = STBTT__CSCTX_INIT(0);

  0009d	c7 45 58 00 00
	00 00		 mov	 DWORD PTR output_ctx$[rbp], 0
  000a4	c7 45 5c 00 00
	00 00		 mov	 DWORD PTR output_ctx$[rbp+4], 0
  000ab	0f 57 c0	 xorps	 xmm0, xmm0
  000ae	f3 0f 11 45 60	 movss	 DWORD PTR output_ctx$[rbp+8], xmm0
  000b3	0f 57 c0	 xorps	 xmm0, xmm0
  000b6	f3 0f 11 45 64	 movss	 DWORD PTR output_ctx$[rbp+12], xmm0
  000bb	0f 57 c0	 xorps	 xmm0, xmm0
  000be	f3 0f 11 45 68	 movss	 DWORD PTR output_ctx$[rbp+16], xmm0
  000c3	0f 57 c0	 xorps	 xmm0, xmm0
  000c6	f3 0f 11 45 6c	 movss	 DWORD PTR output_ctx$[rbp+20], xmm0
  000cb	c7 45 70 00 00
	00 00		 mov	 DWORD PTR output_ctx$[rbp+24], 0
  000d2	c7 45 74 00 00
	00 00		 mov	 DWORD PTR output_ctx$[rbp+28], 0
  000d9	c7 45 78 00 00
	00 00		 mov	 DWORD PTR output_ctx$[rbp+32], 0
  000e0	c7 45 7c 00 00
	00 00		 mov	 DWORD PTR output_ctx$[rbp+36], 0
  000e7	48 c7 85 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR output_ctx$[rbp+40], 0
  000f2	c7 85 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR output_ctx$[rbp+48], 0

; 2279 :    if (stbtt__run_charstring(info, glyph_index, &count_ctx)) {

  000fc	4c 8d 45 08	 lea	 r8, QWORD PTR count_ctx$[rbp]
  00100	8b 95 88 01 00
	00		 mov	 edx, DWORD PTR glyph_index$[rbp]
  00106	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  0010d	e8 00 00 00 00	 call	 ?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ; stbtt__run_charstring
  00112	85 c0		 test	 eax, eax
  00114	0f 84 80 00 00
	00		 je	 $LN5@stbtt__Get

; 2280 :       *pvertices = (stbtt_vertex*)STBTT_malloc(count_ctx.num_vertices*sizeof(stbtt_vertex), info->userdata);

  0011a	48 63 45 38	 movsxd	 rax, DWORD PTR count_ctx$[rbp+48]
  0011e	48 6b c0 0e	 imul	 rax, rax, 14
  00122	48 8b c8	 mov	 rcx, rax
  00125	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  0012a	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR pvertices$[rbp]
  00131	48 89 01	 mov	 QWORD PTR [rcx], rax

; 2281 :       output_ctx.pvertices = *pvertices;

  00134	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR pvertices$[rbp]
  0013b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0013e	48 89 85 80 00
	00 00		 mov	 QWORD PTR output_ctx$[rbp+40], rax

; 2282 :       if (stbtt__run_charstring(info, glyph_index, &output_ctx)) {

  00145	4c 8d 45 58	 lea	 r8, QWORD PTR output_ctx$[rbp]
  00149	8b 95 88 01 00
	00		 mov	 edx, DWORD PTR glyph_index$[rbp]
  0014f	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00156	e8 00 00 00 00	 call	 ?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ; stbtt__run_charstring
  0015b	85 c0		 test	 eax, eax
  0015d	74 3b		 je	 SHORT $LN6@stbtt__Get
$LN4@stbtt__Get:

; 2283 :          STBTT_assert(output_ctx.num_vertices == count_ctx.num_vertices);

  0015f	8b 45 38	 mov	 eax, DWORD PTR count_ctx$[rbp+48]
  00162	39 85 88 00 00
	00		 cmp	 DWORD PTR output_ctx$[rbp+48], eax
  00168	74 22		 je	 SHORT $LN8@stbtt__Get
  0016a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z@4JA
  00170	83 c0 08	 add	 eax, 8
  00173	44 8b c0	 mov	 r8d, eax
  00176	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GE@KABFAMEA@?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA_?$AAc?$AAt?$AAx?$AA?4?$AAn?$AAu?$AAm?$AA_?$AAv?$AAe?$AAr?$AAt?$AAi?$AAc?$AAe?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt@
  00184	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0018a	33 c0		 xor	 eax, eax
$LN8@stbtt__Get:
  0018c	33 c0		 xor	 eax, eax
  0018e	85 c0		 test	 eax, eax
  00190	75 cd		 jne	 SHORT $LN4@stbtt__Get

; 2284 :          return output_ctx.num_vertices;

  00192	8b 85 88 00 00
	00		 mov	 eax, DWORD PTR output_ctx$[rbp+48]
  00198	eb 10		 jmp	 SHORT $LN1@stbtt__Get
$LN6@stbtt__Get:
$LN5@stbtt__Get:

; 2285 :       }
; 2286 :    }
; 2287 :    *pvertices = NULL;

  0019a	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR pvertices$[rbp]
  001a1	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 2288 :    return 0;

  001a8	33 c0		 xor	 eax, eax
$LN1@stbtt__Get:

; 2289 : }

  001aa	48 8b f8	 mov	 rdi, rax
  001ad	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  001b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcFrameData
  001b8	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001bd	48 8b c7	 mov	 rax, rdi
  001c0	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001c7	48 33 cd	 xor	 rcx, rbp
  001ca	e8 00 00 00 00	 call	 __security_check_cookie
  001cf	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  001d6	5f		 pop	 rdi
  001d7	5d		 pop	 rbp
  001d8	c3		 ret	 0
?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ENDP ; stbtt__GetGlyphShapeT2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z
_TEXT	SEGMENT
in_header$ = 4
maskbits$ = 36
subr_stack_height$ = 68
sp$ = 100
v$ = 132
i$ = 164
b0$ = 196
has_subrs$ = 228
clear_stack$ = 260
s$ = 304
subr_stack$ = 528
subrs$ = 712
b$ = 760
f$ = 804
dx1$7 = 836
dx2$8 = 868
dx3$9 = 900
dx4$10 = 932
dx5$11 = 964
dx6$12 = 996
dy1$13 = 1028
dy2$14 = 1060
dy3$15 = 1092
dy4$16 = 1124
dy5$17 = 1156
dy6$18 = 1188
dx$19 = 1220
dy$20 = 1252
b1$21 = 1284
$T22 = 2088
$T23 = 2136
$T24 = 2184
$T25 = 2232
$T26 = 2280
$T27 = 2328
$T28 = 2384
$T29 = 2432
tv636 = 2452
tv466 = 2452
tv225 = 2452
tv188 = 2452
tv76 = 2452
tv451 = 2456
__$ArrayPad$ = 2464
info$ = 2512
glyph_index$ = 2520
c$ = 2528
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z PROC ; stbtt__run_charstring, COMDAT

; 2016 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec f0 09
	00 00		 sub	 rsp, 2544		; 000009f0H
  00018	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 7c 02 00 00	 mov	 ecx, 636		; 0000027cH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 18
	0a 00 00	 mov	 rcx, QWORD PTR [rsp+2584]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c5	 xor	 rax, rbp
  0003e	48 89 85 a0 09
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2017 :    int in_header = 1, maskbits = 0, subr_stack_height = 0, sp = 0, v, i, b0;

  00045	c7 45 04 01 00
	00 00		 mov	 DWORD PTR in_header$[rbp], 1
  0004c	c7 45 24 00 00
	00 00		 mov	 DWORD PTR maskbits$[rbp], 0
  00053	c7 45 44 00 00
	00 00		 mov	 DWORD PTR subr_stack_height$[rbp], 0
  0005a	c7 45 64 00 00
	00 00		 mov	 DWORD PTR sp$[rbp], 0

; 2018 :    int has_subrs = 0, clear_stack;

  00061	c7 85 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR has_subrs$[rbp], 0

; 2019 :    float s[48];
; 2020 :    stbtt__buf subr_stack[10], subrs = info->subrs, b;

  0006b	48 8d 85 c8 02
	00 00		 lea	 rax, QWORD PTR subrs$[rbp]
  00072	48 8b 8d d0 09
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00079	48 8b f8	 mov	 rdi, rax
  0007c	48 8d 71 70	 lea	 rsi, QWORD PTR [rcx+112]
  00080	b9 10 00 00 00	 mov	 ecx, 16
  00085	f3 a4		 rep movsb

; 2021 :    float f;
; 2022 : 
; 2023 : #define STBTT__CSERR(s) (0)
; 2024 : 
; 2025 :    // this currently ignores the initial width value, which isn't needed if we have hmtx
; 2026 :    b = stbtt__cff_index_get(info->charstrings, glyph_index);

  00087	48 8d 85 50 09
	00 00		 lea	 rax, QWORD PTR $T28[rbp]
  0008e	48 8b 8d d0 09
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00095	48 8b f8	 mov	 rdi, rax
  00098	48 8d 71 50	 lea	 rsi, QWORD PTR [rcx+80]
  0009c	b9 10 00 00 00	 mov	 ecx, 16
  000a1	f3 a4		 rep movsb
  000a3	44 8b 85 d8 09
	00 00		 mov	 r8d, DWORD PTR glyph_index$[rbp]
  000aa	48 8d 95 50 09
	00 00		 lea	 rdx, QWORD PTR $T28[rbp]
  000b1	48 8d 8d 58 08
	00 00		 lea	 rcx, QWORD PTR $T23[rbp]
  000b8	e8 00 00 00 00	 call	 ?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
  000bd	48 8d 8d 28 08
	00 00		 lea	 rcx, QWORD PTR $T22[rbp]
  000c4	48 8b f9	 mov	 rdi, rcx
  000c7	48 8b f0	 mov	 rsi, rax
  000ca	b9 10 00 00 00	 mov	 ecx, 16
  000cf	f3 a4		 rep movsb
  000d1	48 8d 85 f8 02
	00 00		 lea	 rax, QWORD PTR b$[rbp]
  000d8	48 8d 8d 28 08
	00 00		 lea	 rcx, QWORD PTR $T22[rbp]
  000df	48 8b f8	 mov	 rdi, rax
  000e2	48 8b f1	 mov	 rsi, rcx
  000e5	b9 10 00 00 00	 mov	 ecx, 16
  000ea	f3 a4		 rep movsb
$LN2@stbtt__run:

; 2027 :    while (b.cursor < b.size) {

  000ec	8b 85 04 03 00
	00		 mov	 eax, DWORD PTR b$[rbp+12]
  000f2	39 85 00 03 00
	00		 cmp	 DWORD PTR b$[rbp+8], eax
  000f8	0f 8d 35 13 00
	00		 jge	 $LN3@stbtt__run

; 2028 :       i = 0;

  000fe	c7 85 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR i$[rbp], 0

; 2029 :       clear_stack = 1;

  00108	c7 85 04 01 00
	00 01 00 00 00	 mov	 DWORD PTR clear_stack$[rbp], 1

; 2030 :       b0 = stbtt__buf_get8(&b);

  00112	48 8d 8d f8 02
	00 00		 lea	 rcx, QWORD PTR b$[rbp]
  00119	e8 00 00 00 00	 call	 ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_get8
  0011e	0f b6 c0	 movzx	 eax, al
  00121	89 85 c4 00 00
	00		 mov	 DWORD PTR b0$[rbp], eax

; 2031 :       switch (b0) {

  00127	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR b0$[rbp]
  0012d	89 85 94 09 00
	00		 mov	 DWORD PTR tv76[rbp], eax
  00133	8b 85 94 09 00
	00		 mov	 eax, DWORD PTR tv76[rbp]
  00139	ff c8		 dec	 eax
  0013b	89 85 94 09 00
	00		 mov	 DWORD PTR tv76[rbp], eax
  00141	83 bd 94 09 00
	00 1e		 cmp	 DWORD PTR tv76[rbp], 30
  00148	0f 87 1d 12 00
	00		 ja	 $LN89@stbtt__run
  0014e	48 63 85 94 09
	00 00		 movsxd	 rax, DWORD PTR tv76[rbp]
  00155	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0015c	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN102@stbtt__run[rcx+rax*4]
  00163	48 03 c1	 add	 rax, rcx
  00166	ff e0		 jmp	 rax
$LN29@stbtt__run:

; 2032 :       // @TODO implement hinting
; 2033 :       case 0x13: // hintmask
; 2034 :       case 0x14: // cntrmask
; 2035 :          if (in_header)

  00168	83 7d 04 00	 cmp	 DWORD PTR in_header$[rbp], 0
  0016c	74 12		 je	 SHORT $LN30@stbtt__run

; 2036 :             maskbits += (sp / 2); // implicit "vstem"

  0016e	8b 45 64	 mov	 eax, DWORD PTR sp$[rbp]
  00171	99		 cdq
  00172	2b c2		 sub	 eax, edx
  00174	d1 f8		 sar	 eax, 1
  00176	8b 4d 24	 mov	 ecx, DWORD PTR maskbits$[rbp]
  00179	03 c8		 add	 ecx, eax
  0017b	8b c1		 mov	 eax, ecx
  0017d	89 45 24	 mov	 DWORD PTR maskbits$[rbp], eax
$LN30@stbtt__run:

; 2037 :          in_header = 0;

  00180	c7 45 04 00 00
	00 00		 mov	 DWORD PTR in_header$[rbp], 0

; 2038 :          stbtt__buf_skip(&b, (maskbits + 7) / 8);

  00187	8b 45 24	 mov	 eax, DWORD PTR maskbits$[rbp]
  0018a	83 c0 07	 add	 eax, 7
  0018d	99		 cdq
  0018e	83 e2 07	 and	 edx, 7
  00191	03 c2		 add	 eax, edx
  00193	c1 f8 03	 sar	 eax, 3
  00196	8b d0		 mov	 edx, eax
  00198	48 8d 8d f8 02
	00 00		 lea	 rcx, QWORD PTR b$[rbp]
  0019f	e8 00 00 00 00	 call	 ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip

; 2039 :          break;

  001a4	e9 75 12 00 00	 jmp	 $LN4@stbtt__run
$LN31@stbtt__run:

; 2040 : 
; 2041 :       case 0x01: // hstem
; 2042 :       case 0x03: // vstem
; 2043 :       case 0x12: // hstemhm
; 2044 :       case 0x17: // vstemhm
; 2045 :          maskbits += (sp / 2);

  001a9	8b 45 64	 mov	 eax, DWORD PTR sp$[rbp]
  001ac	99		 cdq
  001ad	2b c2		 sub	 eax, edx
  001af	d1 f8		 sar	 eax, 1
  001b1	8b 4d 24	 mov	 ecx, DWORD PTR maskbits$[rbp]
  001b4	03 c8		 add	 ecx, eax
  001b6	8b c1		 mov	 eax, ecx
  001b8	89 45 24	 mov	 DWORD PTR maskbits$[rbp], eax

; 2046 :          break;

  001bb	e9 5e 12 00 00	 jmp	 $LN4@stbtt__run
$LN32@stbtt__run:

; 2047 : 
; 2048 :       case 0x15: // rmoveto
; 2049 :          in_header = 0;

  001c0	c7 45 04 00 00
	00 00		 mov	 DWORD PTR in_header$[rbp], 0

; 2050 :          if (sp < 2) return STBTT__CSERR("rmoveto stack");

  001c7	83 7d 64 02	 cmp	 DWORD PTR sp$[rbp], 2
  001cb	7d 07		 jge	 SHORT $LN33@stbtt__run
  001cd	33 c0		 xor	 eax, eax
  001cf	e9 61 12 00 00	 jmp	 $LN1@stbtt__run
$LN33@stbtt__run:

; 2051 :          stbtt__csctx_rmove_to(c, s[sp-2], s[sp-1]);

  001d4	8b 45 64	 mov	 eax, DWORD PTR sp$[rbp]
  001d7	ff c8		 dec	 eax
  001d9	48 98		 cdqe
  001db	8b 4d 64	 mov	 ecx, DWORD PTR sp$[rbp]
  001de	83 e9 02	 sub	 ecx, 2
  001e1	48 63 c9	 movsxd	 rcx, ecx
  001e4	f3 0f 10 94 85
	30 01 00 00	 movss	 xmm2, DWORD PTR s$[rbp+rax*4]
  001ed	f3 0f 10 8c 8d
	30 01 00 00	 movss	 xmm1, DWORD PTR s$[rbp+rcx*4]
  001f6	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  001fd	e8 00 00 00 00	 call	 ?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rmove_to

; 2052 :          break;

  00202	e9 17 12 00 00	 jmp	 $LN4@stbtt__run
$LN34@stbtt__run:

; 2053 :       case 0x04: // vmoveto
; 2054 :          in_header = 0;

  00207	c7 45 04 00 00
	00 00		 mov	 DWORD PTR in_header$[rbp], 0

; 2055 :          if (sp < 1) return STBTT__CSERR("vmoveto stack");

  0020e	83 7d 64 01	 cmp	 DWORD PTR sp$[rbp], 1
  00212	7d 07		 jge	 SHORT $LN35@stbtt__run
  00214	33 c0		 xor	 eax, eax
  00216	e9 1a 12 00 00	 jmp	 $LN1@stbtt__run
$LN35@stbtt__run:

; 2056 :          stbtt__csctx_rmove_to(c, 0, s[sp-1]);

  0021b	8b 45 64	 mov	 eax, DWORD PTR sp$[rbp]
  0021e	ff c8		 dec	 eax
  00220	48 98		 cdqe
  00222	f3 0f 10 94 85
	30 01 00 00	 movss	 xmm2, DWORD PTR s$[rbp+rax*4]
  0022b	0f 57 c9	 xorps	 xmm1, xmm1
  0022e	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00235	e8 00 00 00 00	 call	 ?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rmove_to

; 2057 :          break;

  0023a	e9 df 11 00 00	 jmp	 $LN4@stbtt__run
$LN36@stbtt__run:

; 2058 :       case 0x16: // hmoveto
; 2059 :          in_header = 0;

  0023f	c7 45 04 00 00
	00 00		 mov	 DWORD PTR in_header$[rbp], 0

; 2060 :          if (sp < 1) return STBTT__CSERR("hmoveto stack");

  00246	83 7d 64 01	 cmp	 DWORD PTR sp$[rbp], 1
  0024a	7d 07		 jge	 SHORT $LN37@stbtt__run
  0024c	33 c0		 xor	 eax, eax
  0024e	e9 e2 11 00 00	 jmp	 $LN1@stbtt__run
$LN37@stbtt__run:

; 2061 :          stbtt__csctx_rmove_to(c, s[sp-1], 0);

  00253	8b 45 64	 mov	 eax, DWORD PTR sp$[rbp]
  00256	ff c8		 dec	 eax
  00258	48 98		 cdqe
  0025a	0f 57 d2	 xorps	 xmm2, xmm2
  0025d	f3 0f 10 8c 85
	30 01 00 00	 movss	 xmm1, DWORD PTR s$[rbp+rax*4]
  00266	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  0026d	e8 00 00 00 00	 call	 ?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rmove_to

; 2062 :          break;

  00272	e9 a7 11 00 00	 jmp	 $LN4@stbtt__run
$LN38@stbtt__run:

; 2063 : 
; 2064 :       case 0x05: // rlineto
; 2065 :          if (sp < 2) return STBTT__CSERR("rlineto stack");

  00277	83 7d 64 02	 cmp	 DWORD PTR sp$[rbp], 2
  0027b	7d 07		 jge	 SHORT $LN39@stbtt__run
  0027d	33 c0		 xor	 eax, eax
  0027f	e9 b1 11 00 00	 jmp	 $LN1@stbtt__run
$LN39@stbtt__run:

; 2066 :          for (; i + 1 < sp; i += 2)

  00284	eb 0f		 jmp	 SHORT $LN8@stbtt__run
$LN6@stbtt__run:
  00286	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  0028c	83 c0 02	 add	 eax, 2
  0028f	89 85 a4 00 00
	00		 mov	 DWORD PTR i$[rbp], eax
$LN8@stbtt__run:
  00295	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  0029b	ff c0		 inc	 eax
  0029d	3b 45 64	 cmp	 eax, DWORD PTR sp$[rbp]
  002a0	7d 31		 jge	 SHORT $LN7@stbtt__run

; 2067 :             stbtt__csctx_rline_to(c, s[i], s[i+1]);

  002a2	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  002a8	ff c0		 inc	 eax
  002aa	48 98		 cdqe
  002ac	48 63 8d a4 00
	00 00		 movsxd	 rcx, DWORD PTR i$[rbp]
  002b3	f3 0f 10 94 85
	30 01 00 00	 movss	 xmm2, DWORD PTR s$[rbp+rax*4]
  002bc	f3 0f 10 8c 8d
	30 01 00 00	 movss	 xmm1, DWORD PTR s$[rbp+rcx*4]
  002c5	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  002cc	e8 00 00 00 00	 call	 ?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
  002d1	eb b3		 jmp	 SHORT $LN6@stbtt__run
$LN7@stbtt__run:

; 2068 :          break;

  002d3	e9 46 11 00 00	 jmp	 $LN4@stbtt__run
$LN40@stbtt__run:

; 2069 : 
; 2070 :       // hlineto/vlineto and vhcurveto/hvcurveto alternate horizontal and vertical
; 2071 :       // starting from a different place.
; 2072 : 
; 2073 :       case 0x07: // vlineto
; 2074 :          if (sp < 1) return STBTT__CSERR("vlineto stack");

  002d8	83 7d 64 01	 cmp	 DWORD PTR sp$[rbp], 1
  002dc	7d 07		 jge	 SHORT $LN41@stbtt__run
  002de	33 c0		 xor	 eax, eax
  002e0	e9 50 11 00 00	 jmp	 $LN1@stbtt__run
$LN41@stbtt__run:

; 2075 :          goto vlineto;

  002e5	eb 49		 jmp	 SHORT $LN42@stbtt__run
  002e7	eb 47		 jmp	 SHORT $vlineto$103
$LN43@stbtt__run:

; 2076 :       case 0x06: // hlineto
; 2077 :          if (sp < 1) return STBTT__CSERR("hlineto stack");

  002e9	83 7d 64 01	 cmp	 DWORD PTR sp$[rbp], 1
  002ed	7d 07		 jge	 SHORT $LN44@stbtt__run
  002ef	33 c0		 xor	 eax, eax
  002f1	e9 3f 11 00 00	 jmp	 $LN1@stbtt__run
$LN44@stbtt__run:
$LN9@stbtt__run:

; 2078 :          for (;;) {
; 2079 :             if (i >= sp) break;

  002f6	8b 45 64	 mov	 eax, DWORD PTR sp$[rbp]
  002f9	39 85 a4 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  002ff	7c 02		 jl	 SHORT $LN45@stbtt__run
  00301	eb 69		 jmp	 SHORT $LN10@stbtt__run
$LN45@stbtt__run:

; 2080 :             stbtt__csctx_rline_to(c, s[i], 0);

  00303	48 63 85 a4 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0030a	0f 57 d2	 xorps	 xmm2, xmm2
  0030d	f3 0f 10 8c 85
	30 01 00 00	 movss	 xmm1, DWORD PTR s$[rbp+rax*4]
  00316	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  0031d	e8 00 00 00 00	 call	 ?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to

; 2081 :             i++;

  00322	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  00328	ff c0		 inc	 eax
  0032a	89 85 a4 00 00
	00		 mov	 DWORD PTR i$[rbp], eax
$LN42@stbtt__run:
$vlineto$103:

; 2082 :       vlineto:
; 2083 :             if (i >= sp) break;

  00330	8b 45 64	 mov	 eax, DWORD PTR sp$[rbp]
  00333	39 85 a4 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00339	7c 02		 jl	 SHORT $LN46@stbtt__run
  0033b	eb 2f		 jmp	 SHORT $LN10@stbtt__run
$LN46@stbtt__run:

; 2084 :             stbtt__csctx_rline_to(c, 0, s[i]);

  0033d	48 63 85 a4 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  00344	f3 0f 10 94 85
	30 01 00 00	 movss	 xmm2, DWORD PTR s$[rbp+rax*4]
  0034d	0f 57 c9	 xorps	 xmm1, xmm1
  00350	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00357	e8 00 00 00 00	 call	 ?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to

; 2085 :             i++;

  0035c	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  00362	ff c0		 inc	 eax
  00364	89 85 a4 00 00
	00		 mov	 DWORD PTR i$[rbp], eax

; 2086 :          }

  0036a	eb 8a		 jmp	 SHORT $LN9@stbtt__run
$LN10@stbtt__run:

; 2087 :          break;

  0036c	e9 ad 10 00 00	 jmp	 $LN4@stbtt__run
$LN47@stbtt__run:

; 2088 : 
; 2089 :       case 0x1F: // hvcurveto
; 2090 :          if (sp < 4) return STBTT__CSERR("hvcurveto stack");

  00371	83 7d 64 04	 cmp	 DWORD PTR sp$[rbp], 4
  00375	7d 07		 jge	 SHORT $LN48@stbtt__run
  00377	33 c0		 xor	 eax, eax
  00379	e9 b7 10 00 00	 jmp	 $LN1@stbtt__run
$LN48@stbtt__run:

; 2091 :          goto hvcurveto;

  0037e	e9 e5 00 00 00	 jmp	 $LN49@stbtt__run
  00383	e9 e0 00 00 00	 jmp	 $hvcurveto$104
$LN50@stbtt__run:

; 2092 :       case 0x1E: // vhcurveto
; 2093 :          if (sp < 4) return STBTT__CSERR("vhcurveto stack");

  00388	83 7d 64 04	 cmp	 DWORD PTR sp$[rbp], 4
  0038c	7d 07		 jge	 SHORT $LN51@stbtt__run
  0038e	33 c0		 xor	 eax, eax
  00390	e9 a0 10 00 00	 jmp	 $LN1@stbtt__run
$LN51@stbtt__run:
$LN12@stbtt__run:

; 2094 :          for (;;) {
; 2095 :             if (i + 3 >= sp) break;

  00395	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  0039b	83 c0 03	 add	 eax, 3
  0039e	3b 45 64	 cmp	 eax, DWORD PTR sp$[rbp]
  003a1	7c 05		 jl	 SHORT $LN52@stbtt__run
  003a3	e9 98 01 00 00	 jmp	 $LN13@stbtt__run
$LN52@stbtt__run:

; 2096 :             stbtt__csctx_rccurve_to(c, 0, s[i], s[i+1], s[i+2], s[i+3], (sp - i == 5) ? s[i + 4] : 0.0f);

  003a8	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  003ae	8b 4d 64	 mov	 ecx, DWORD PTR sp$[rbp]
  003b1	2b c8		 sub	 ecx, eax
  003b3	8b c1		 mov	 eax, ecx
  003b5	83 f8 05	 cmp	 eax, 5
  003b8	75 1e		 jne	 SHORT $LN96@stbtt__run
  003ba	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  003c0	83 c0 04	 add	 eax, 4
  003c3	48 98		 cdqe
  003c5	f3 0f 10 84 85
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax*4]
  003ce	f3 0f 11 85 94
	09 00 00	 movss	 DWORD PTR tv188[rbp], xmm0
  003d6	eb 0b		 jmp	 SHORT $LN97@stbtt__run
$LN96@stbtt__run:
  003d8	0f 57 c0	 xorps	 xmm0, xmm0
  003db	f3 0f 11 85 94
	09 00 00	 movss	 DWORD PTR tv188[rbp], xmm0
$LN97@stbtt__run:
  003e3	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  003e9	83 c0 03	 add	 eax, 3
  003ec	48 98		 cdqe
  003ee	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR i$[rbp]
  003f4	83 c1 02	 add	 ecx, 2
  003f7	48 63 c9	 movsxd	 rcx, ecx
  003fa	8b 95 a4 00 00
	00		 mov	 edx, DWORD PTR i$[rbp]
  00400	ff c2		 inc	 edx
  00402	48 63 d2	 movsxd	 rdx, edx
  00405	48 63 bd a4 00
	00 00		 movsxd	 rdi, DWORD PTR i$[rbp]
  0040c	f3 0f 10 85 94
	09 00 00	 movss	 xmm0, DWORD PTR tv188[rbp]
  00414	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  0041a	f3 0f 10 84 85
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax*4]
  00423	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00429	f3 0f 10 84 8d
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rcx*4]
  00432	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00438	f3 0f 10 9c 95
	30 01 00 00	 movss	 xmm3, DWORD PTR s$[rbp+rdx*4]
  00441	f3 0f 10 94 bd
	30 01 00 00	 movss	 xmm2, DWORD PTR s$[rbp+rdi*4]
  0044a	0f 57 c9	 xorps	 xmm1, xmm1
  0044d	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00454	e8 00 00 00 00	 call	 ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to

; 2097 :             i += 4;

  00459	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  0045f	83 c0 04	 add	 eax, 4
  00462	89 85 a4 00 00
	00		 mov	 DWORD PTR i$[rbp], eax
$LN49@stbtt__run:
$hvcurveto$104:

; 2098 :       hvcurveto:
; 2099 :             if (i + 3 >= sp) break;

  00468	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  0046e	83 c0 03	 add	 eax, 3
  00471	3b 45 64	 cmp	 eax, DWORD PTR sp$[rbp]
  00474	7c 05		 jl	 SHORT $LN53@stbtt__run
  00476	e9 c5 00 00 00	 jmp	 $LN13@stbtt__run
$LN53@stbtt__run:

; 2100 :             stbtt__csctx_rccurve_to(c, s[i], 0, s[i+1], s[i+2], (sp - i == 5) ? s[i+4] : 0.0f, s[i+3]);

  0047b	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  00481	8b 4d 64	 mov	 ecx, DWORD PTR sp$[rbp]
  00484	2b c8		 sub	 ecx, eax
  00486	8b c1		 mov	 eax, ecx
  00488	83 f8 05	 cmp	 eax, 5
  0048b	75 1e		 jne	 SHORT $LN98@stbtt__run
  0048d	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  00493	83 c0 04	 add	 eax, 4
  00496	48 98		 cdqe
  00498	f3 0f 10 84 85
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax*4]
  004a1	f3 0f 11 85 94
	09 00 00	 movss	 DWORD PTR tv225[rbp], xmm0
  004a9	eb 0b		 jmp	 SHORT $LN99@stbtt__run
$LN98@stbtt__run:
  004ab	0f 57 c0	 xorps	 xmm0, xmm0
  004ae	f3 0f 11 85 94
	09 00 00	 movss	 DWORD PTR tv225[rbp], xmm0
$LN99@stbtt__run:
  004b6	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  004bc	83 c0 03	 add	 eax, 3
  004bf	48 98		 cdqe
  004c1	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR i$[rbp]
  004c7	83 c1 02	 add	 ecx, 2
  004ca	48 63 c9	 movsxd	 rcx, ecx
  004cd	8b 95 a4 00 00
	00		 mov	 edx, DWORD PTR i$[rbp]
  004d3	ff c2		 inc	 edx
  004d5	48 63 d2	 movsxd	 rdx, edx
  004d8	48 63 bd a4 00
	00 00		 movsxd	 rdi, DWORD PTR i$[rbp]
  004df	f3 0f 10 84 85
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax*4]
  004e8	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  004ee	f3 0f 10 85 94
	09 00 00	 movss	 xmm0, DWORD PTR tv225[rbp]
  004f6	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  004fc	f3 0f 10 84 8d
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rcx*4]
  00505	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0050b	f3 0f 10 9c 95
	30 01 00 00	 movss	 xmm3, DWORD PTR s$[rbp+rdx*4]
  00514	0f 57 d2	 xorps	 xmm2, xmm2
  00517	f3 0f 10 8c bd
	30 01 00 00	 movss	 xmm1, DWORD PTR s$[rbp+rdi*4]
  00520	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00527	e8 00 00 00 00	 call	 ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to

; 2101 :             i += 4;

  0052c	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  00532	83 c0 04	 add	 eax, 4
  00535	89 85 a4 00 00
	00		 mov	 DWORD PTR i$[rbp], eax

; 2102 :          }

  0053b	e9 55 fe ff ff	 jmp	 $LN12@stbtt__run
$LN13@stbtt__run:

; 2103 :          break;

  00540	e9 d9 0e 00 00	 jmp	 $LN4@stbtt__run
$LN54@stbtt__run:

; 2104 : 
; 2105 :       case 0x08: // rrcurveto
; 2106 :          if (sp < 6) return STBTT__CSERR("rcurveline stack");

  00545	83 7d 64 06	 cmp	 DWORD PTR sp$[rbp], 6
  00549	7d 07		 jge	 SHORT $LN55@stbtt__run
  0054b	33 c0		 xor	 eax, eax
  0054d	e9 e3 0e 00 00	 jmp	 $LN1@stbtt__run
$LN55@stbtt__run:

; 2107 :          for (; i + 5 < sp; i += 6)

  00552	eb 0f		 jmp	 SHORT $LN17@stbtt__run
$LN15@stbtt__run:
  00554	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  0055a	83 c0 06	 add	 eax, 6
  0055d	89 85 a4 00 00
	00		 mov	 DWORD PTR i$[rbp], eax
$LN17@stbtt__run:
  00563	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  00569	83 c0 05	 add	 eax, 5
  0056c	3b 45 64	 cmp	 eax, DWORD PTR sp$[rbp]
  0056f	0f 8d 9b 00 00
	00		 jge	 $LN16@stbtt__run

; 2108 :             stbtt__csctx_rccurve_to(c, s[i], s[i+1], s[i+2], s[i+3], s[i+4], s[i+5]);

  00575	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  0057b	83 c0 05	 add	 eax, 5
  0057e	48 98		 cdqe
  00580	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR i$[rbp]
  00586	83 c1 04	 add	 ecx, 4
  00589	48 63 c9	 movsxd	 rcx, ecx
  0058c	8b 95 a4 00 00
	00		 mov	 edx, DWORD PTR i$[rbp]
  00592	83 c2 03	 add	 edx, 3
  00595	48 63 d2	 movsxd	 rdx, edx
  00598	8b bd a4 00 00
	00		 mov	 edi, DWORD PTR i$[rbp]
  0059e	83 c7 02	 add	 edi, 2
  005a1	48 63 ff	 movsxd	 rdi, edi
  005a4	8b b5 a4 00 00
	00		 mov	 esi, DWORD PTR i$[rbp]
  005aa	ff c6		 inc	 esi
  005ac	48 63 f6	 movsxd	 rsi, esi
  005af	4c 63 85 a4 00
	00 00		 movsxd	 r8, DWORD PTR i$[rbp]
  005b6	f3 0f 10 84 85
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax*4]
  005bf	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  005c5	f3 0f 10 84 8d
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rcx*4]
  005ce	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  005d4	f3 0f 10 84 95
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rdx*4]
  005dd	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  005e3	f3 0f 10 9c bd
	30 01 00 00	 movss	 xmm3, DWORD PTR s$[rbp+rdi*4]
  005ec	f3 0f 10 94 b5
	30 01 00 00	 movss	 xmm2, DWORD PTR s$[rbp+rsi*4]
  005f5	f3 42 0f 10 8c
	85 30 01 00 00	 movss	 xmm1, DWORD PTR s$[rbp+r8*4]
  005ff	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00606	e8 00 00 00 00	 call	 ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
  0060b	e9 44 ff ff ff	 jmp	 $LN15@stbtt__run
$LN16@stbtt__run:

; 2109 :          break;

  00610	e9 09 0e 00 00	 jmp	 $LN4@stbtt__run
$LN56@stbtt__run:

; 2110 : 
; 2111 :       case 0x18: // rcurveline
; 2112 :          if (sp < 8) return STBTT__CSERR("rcurveline stack");

  00615	83 7d 64 08	 cmp	 DWORD PTR sp$[rbp], 8
  00619	7d 07		 jge	 SHORT $LN57@stbtt__run
  0061b	33 c0		 xor	 eax, eax
  0061d	e9 13 0e 00 00	 jmp	 $LN1@stbtt__run
$LN57@stbtt__run:

; 2113 :          for (; i + 5 < sp - 2; i += 6)

  00622	eb 0f		 jmp	 SHORT $LN20@stbtt__run
$LN18@stbtt__run:
  00624	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  0062a	83 c0 06	 add	 eax, 6
  0062d	89 85 a4 00 00
	00		 mov	 DWORD PTR i$[rbp], eax
$LN20@stbtt__run:
  00633	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  00639	83 c0 05	 add	 eax, 5
  0063c	8b 4d 64	 mov	 ecx, DWORD PTR sp$[rbp]
  0063f	83 e9 02	 sub	 ecx, 2
  00642	3b c1		 cmp	 eax, ecx
  00644	0f 8d 9b 00 00
	00		 jge	 $LN19@stbtt__run

; 2114 :             stbtt__csctx_rccurve_to(c, s[i], s[i+1], s[i+2], s[i+3], s[i+4], s[i+5]);

  0064a	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  00650	83 c0 05	 add	 eax, 5
  00653	48 98		 cdqe
  00655	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR i$[rbp]
  0065b	83 c1 04	 add	 ecx, 4
  0065e	48 63 c9	 movsxd	 rcx, ecx
  00661	8b 95 a4 00 00
	00		 mov	 edx, DWORD PTR i$[rbp]
  00667	83 c2 03	 add	 edx, 3
  0066a	48 63 d2	 movsxd	 rdx, edx
  0066d	8b bd a4 00 00
	00		 mov	 edi, DWORD PTR i$[rbp]
  00673	83 c7 02	 add	 edi, 2
  00676	48 63 ff	 movsxd	 rdi, edi
  00679	8b b5 a4 00 00
	00		 mov	 esi, DWORD PTR i$[rbp]
  0067f	ff c6		 inc	 esi
  00681	48 63 f6	 movsxd	 rsi, esi
  00684	4c 63 85 a4 00
	00 00		 movsxd	 r8, DWORD PTR i$[rbp]
  0068b	f3 0f 10 84 85
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax*4]
  00694	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  0069a	f3 0f 10 84 8d
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rcx*4]
  006a3	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  006a9	f3 0f 10 84 95
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rdx*4]
  006b2	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  006b8	f3 0f 10 9c bd
	30 01 00 00	 movss	 xmm3, DWORD PTR s$[rbp+rdi*4]
  006c1	f3 0f 10 94 b5
	30 01 00 00	 movss	 xmm2, DWORD PTR s$[rbp+rsi*4]
  006ca	f3 42 0f 10 8c
	85 30 01 00 00	 movss	 xmm1, DWORD PTR s$[rbp+r8*4]
  006d4	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  006db	e8 00 00 00 00	 call	 ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
  006e0	e9 3f ff ff ff	 jmp	 $LN18@stbtt__run
$LN19@stbtt__run:

; 2115 :          if (i + 1 >= sp) return STBTT__CSERR("rcurveline stack");

  006e5	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  006eb	ff c0		 inc	 eax
  006ed	3b 45 64	 cmp	 eax, DWORD PTR sp$[rbp]
  006f0	7c 07		 jl	 SHORT $LN58@stbtt__run
  006f2	33 c0		 xor	 eax, eax
  006f4	e9 3c 0d 00 00	 jmp	 $LN1@stbtt__run
$LN58@stbtt__run:

; 2116 :          stbtt__csctx_rline_to(c, s[i], s[i+1]);

  006f9	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  006ff	ff c0		 inc	 eax
  00701	48 98		 cdqe
  00703	48 63 8d a4 00
	00 00		 movsxd	 rcx, DWORD PTR i$[rbp]
  0070a	f3 0f 10 94 85
	30 01 00 00	 movss	 xmm2, DWORD PTR s$[rbp+rax*4]
  00713	f3 0f 10 8c 8d
	30 01 00 00	 movss	 xmm1, DWORD PTR s$[rbp+rcx*4]
  0071c	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00723	e8 00 00 00 00	 call	 ?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to

; 2117 :          break;

  00728	e9 f1 0c 00 00	 jmp	 $LN4@stbtt__run
$LN59@stbtt__run:

; 2118 : 
; 2119 :       case 0x19: // rlinecurve
; 2120 :          if (sp < 8) return STBTT__CSERR("rlinecurve stack");

  0072d	83 7d 64 08	 cmp	 DWORD PTR sp$[rbp], 8
  00731	7d 07		 jge	 SHORT $LN60@stbtt__run
  00733	33 c0		 xor	 eax, eax
  00735	e9 fb 0c 00 00	 jmp	 $LN1@stbtt__run
$LN60@stbtt__run:

; 2121 :          for (; i + 1 < sp - 6; i += 2)

  0073a	eb 0f		 jmp	 SHORT $LN23@stbtt__run
$LN21@stbtt__run:
  0073c	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  00742	83 c0 02	 add	 eax, 2
  00745	89 85 a4 00 00
	00		 mov	 DWORD PTR i$[rbp], eax
$LN23@stbtt__run:
  0074b	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  00751	ff c0		 inc	 eax
  00753	8b 4d 64	 mov	 ecx, DWORD PTR sp$[rbp]
  00756	83 e9 06	 sub	 ecx, 6
  00759	3b c1		 cmp	 eax, ecx
  0075b	7d 31		 jge	 SHORT $LN22@stbtt__run

; 2122 :             stbtt__csctx_rline_to(c, s[i], s[i+1]);

  0075d	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  00763	ff c0		 inc	 eax
  00765	48 98		 cdqe
  00767	48 63 8d a4 00
	00 00		 movsxd	 rcx, DWORD PTR i$[rbp]
  0076e	f3 0f 10 94 85
	30 01 00 00	 movss	 xmm2, DWORD PTR s$[rbp+rax*4]
  00777	f3 0f 10 8c 8d
	30 01 00 00	 movss	 xmm1, DWORD PTR s$[rbp+rcx*4]
  00780	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00787	e8 00 00 00 00	 call	 ?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
  0078c	eb ae		 jmp	 SHORT $LN21@stbtt__run
$LN22@stbtt__run:

; 2123 :          if (i + 5 >= sp) return STBTT__CSERR("rlinecurve stack");

  0078e	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  00794	83 c0 05	 add	 eax, 5
  00797	3b 45 64	 cmp	 eax, DWORD PTR sp$[rbp]
  0079a	7c 07		 jl	 SHORT $LN61@stbtt__run
  0079c	33 c0		 xor	 eax, eax
  0079e	e9 92 0c 00 00	 jmp	 $LN1@stbtt__run
$LN61@stbtt__run:

; 2124 :          stbtt__csctx_rccurve_to(c, s[i], s[i+1], s[i+2], s[i+3], s[i+4], s[i+5]);

  007a3	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  007a9	83 c0 05	 add	 eax, 5
  007ac	48 98		 cdqe
  007ae	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR i$[rbp]
  007b4	83 c1 04	 add	 ecx, 4
  007b7	48 63 c9	 movsxd	 rcx, ecx
  007ba	8b 95 a4 00 00
	00		 mov	 edx, DWORD PTR i$[rbp]
  007c0	83 c2 03	 add	 edx, 3
  007c3	48 63 d2	 movsxd	 rdx, edx
  007c6	8b bd a4 00 00
	00		 mov	 edi, DWORD PTR i$[rbp]
  007cc	83 c7 02	 add	 edi, 2
  007cf	48 63 ff	 movsxd	 rdi, edi
  007d2	8b b5 a4 00 00
	00		 mov	 esi, DWORD PTR i$[rbp]
  007d8	ff c6		 inc	 esi
  007da	48 63 f6	 movsxd	 rsi, esi
  007dd	4c 63 85 a4 00
	00 00		 movsxd	 r8, DWORD PTR i$[rbp]
  007e4	f3 0f 10 84 85
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax*4]
  007ed	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  007f3	f3 0f 10 84 8d
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rcx*4]
  007fc	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00802	f3 0f 10 84 95
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rdx*4]
  0080b	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00811	f3 0f 10 9c bd
	30 01 00 00	 movss	 xmm3, DWORD PTR s$[rbp+rdi*4]
  0081a	f3 0f 10 94 b5
	30 01 00 00	 movss	 xmm2, DWORD PTR s$[rbp+rsi*4]
  00823	f3 42 0f 10 8c
	85 30 01 00 00	 movss	 xmm1, DWORD PTR s$[rbp+r8*4]
  0082d	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00834	e8 00 00 00 00	 call	 ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to

; 2125 :          break;

  00839	e9 e0 0b 00 00	 jmp	 $LN4@stbtt__run
$LN62@stbtt__run:

; 2126 : 
; 2127 :       case 0x1A: // vvcurveto
; 2128 :       case 0x1B: // hhcurveto
; 2129 :          if (sp < 4) return STBTT__CSERR("(vv|hh)curveto stack");

  0083e	83 7d 64 04	 cmp	 DWORD PTR sp$[rbp], 4
  00842	7d 07		 jge	 SHORT $LN63@stbtt__run
  00844	33 c0		 xor	 eax, eax
  00846	e9 ea 0b 00 00	 jmp	 $LN1@stbtt__run
$LN63@stbtt__run:

; 2130 :          f = 0.0;

  0084b	0f 57 c0	 xorps	 xmm0, xmm0
  0084e	f3 0f 11 85 24
	03 00 00	 movss	 DWORD PTR f$[rbp], xmm0

; 2131 :          if (sp & 1) { f = s[i]; i++; }

  00856	8b 45 64	 mov	 eax, DWORD PTR sp$[rbp]
  00859	83 e0 01	 and	 eax, 1
  0085c	85 c0		 test	 eax, eax
  0085e	74 26		 je	 SHORT $LN64@stbtt__run
  00860	48 63 85 a4 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  00867	f3 0f 10 84 85
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax*4]
  00870	f3 0f 11 85 24
	03 00 00	 movss	 DWORD PTR f$[rbp], xmm0
  00878	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  0087e	ff c0		 inc	 eax
  00880	89 85 a4 00 00
	00		 mov	 DWORD PTR i$[rbp], eax
$LN64@stbtt__run:

; 2132 :          for (; i + 3 < sp; i += 4) {

  00886	eb 0f		 jmp	 SHORT $LN26@stbtt__run
$LN24@stbtt__run:
  00888	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  0088e	83 c0 04	 add	 eax, 4
  00891	89 85 a4 00 00
	00		 mov	 DWORD PTR i$[rbp], eax
$LN26@stbtt__run:
  00897	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  0089d	83 c0 03	 add	 eax, 3
  008a0	3b 45 64	 cmp	 eax, DWORD PTR sp$[rbp]
  008a3	0f 8d 07 01 00
	00		 jge	 $LN25@stbtt__run

; 2133 :             if (b0 == 0x1B)

  008a9	83 bd c4 00 00
	00 1b		 cmp	 DWORD PTR b0$[rbp], 27
  008b0	75 78		 jne	 SHORT $LN65@stbtt__run

; 2134 :                stbtt__csctx_rccurve_to(c, s[i], f, s[i+1], s[i+2], s[i+3], 0.0);

  008b2	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  008b8	83 c0 03	 add	 eax, 3
  008bb	48 98		 cdqe
  008bd	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR i$[rbp]
  008c3	83 c1 02	 add	 ecx, 2
  008c6	48 63 c9	 movsxd	 rcx, ecx
  008c9	8b 95 a4 00 00
	00		 mov	 edx, DWORD PTR i$[rbp]
  008cf	ff c2		 inc	 edx
  008d1	48 63 d2	 movsxd	 rdx, edx
  008d4	48 63 bd a4 00
	00 00		 movsxd	 rdi, DWORD PTR i$[rbp]
  008db	0f 57 c0	 xorps	 xmm0, xmm0
  008de	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  008e4	f3 0f 10 84 85
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax*4]
  008ed	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  008f3	f3 0f 10 84 8d
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rcx*4]
  008fc	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00902	f3 0f 10 9c 95
	30 01 00 00	 movss	 xmm3, DWORD PTR s$[rbp+rdx*4]
  0090b	f3 0f 10 95 24
	03 00 00	 movss	 xmm2, DWORD PTR f$[rbp]
  00913	f3 0f 10 8c bd
	30 01 00 00	 movss	 xmm1, DWORD PTR s$[rbp+rdi*4]
  0091c	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00923	e8 00 00 00 00	 call	 ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to

; 2135 :             else

  00928	eb 76		 jmp	 SHORT $LN66@stbtt__run
$LN65@stbtt__run:

; 2136 :                stbtt__csctx_rccurve_to(c, f, s[i], s[i+1], s[i+2], 0.0, s[i+3]);

  0092a	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  00930	83 c0 03	 add	 eax, 3
  00933	48 98		 cdqe
  00935	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR i$[rbp]
  0093b	83 c1 02	 add	 ecx, 2
  0093e	48 63 c9	 movsxd	 rcx, ecx
  00941	8b 95 a4 00 00
	00		 mov	 edx, DWORD PTR i$[rbp]
  00947	ff c2		 inc	 edx
  00949	48 63 d2	 movsxd	 rdx, edx
  0094c	48 63 bd a4 00
	00 00		 movsxd	 rdi, DWORD PTR i$[rbp]
  00953	f3 0f 10 84 85
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax*4]
  0095c	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00962	0f 57 c0	 xorps	 xmm0, xmm0
  00965	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  0096b	f3 0f 10 84 8d
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rcx*4]
  00974	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0097a	f3 0f 10 9c 95
	30 01 00 00	 movss	 xmm3, DWORD PTR s$[rbp+rdx*4]
  00983	f3 0f 10 94 bd
	30 01 00 00	 movss	 xmm2, DWORD PTR s$[rbp+rdi*4]
  0098c	f3 0f 10 8d 24
	03 00 00	 movss	 xmm1, DWORD PTR f$[rbp]
  00994	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  0099b	e8 00 00 00 00	 call	 ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
$LN66@stbtt__run:

; 2137 :             f = 0.0;

  009a0	0f 57 c0	 xorps	 xmm0, xmm0
  009a3	f3 0f 11 85 24
	03 00 00	 movss	 DWORD PTR f$[rbp], xmm0

; 2138 :          }

  009ab	e9 d8 fe ff ff	 jmp	 $LN24@stbtt__run
$LN25@stbtt__run:

; 2139 :          break;

  009b0	e9 69 0a 00 00	 jmp	 $LN4@stbtt__run
$LN67@stbtt__run:

; 2140 : 
; 2141 :       case 0x0A: // callsubr
; 2142 :          if (!has_subrs) {

  009b5	83 bd e4 00 00
	00 00		 cmp	 DWORD PTR has_subrs$[rbp], 0
  009bc	75 63		 jne	 SHORT $LN68@stbtt__run

; 2143 :             if (info->fdselect.size)

  009be	48 8b 85 d0 09
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  009c5	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [rax+156], 0
  009cc	74 49		 je	 SHORT $LN69@stbtt__run

; 2144 :                subrs = stbtt__cid_get_glyph_subrs(info, glyph_index);

  009ce	44 8b 85 d8 09
	00 00		 mov	 r8d, DWORD PTR glyph_index$[rbp]
  009d5	48 8b 95 d0 09
	00 00		 mov	 rdx, QWORD PTR info$[rbp]
  009dc	48 8d 8d b8 08
	00 00		 lea	 rcx, QWORD PTR $T25[rbp]
  009e3	e8 00 00 00 00	 call	 ?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z ; stbtt__cid_get_glyph_subrs
  009e8	48 8d 8d 88 08
	00 00		 lea	 rcx, QWORD PTR $T24[rbp]
  009ef	48 8b f9	 mov	 rdi, rcx
  009f2	48 8b f0	 mov	 rsi, rax
  009f5	b9 10 00 00 00	 mov	 ecx, 16
  009fa	f3 a4		 rep movsb
  009fc	48 8d 85 c8 02
	00 00		 lea	 rax, QWORD PTR subrs$[rbp]
  00a03	48 8d 8d 88 08
	00 00		 lea	 rcx, QWORD PTR $T24[rbp]
  00a0a	48 8b f8	 mov	 rdi, rax
  00a0d	48 8b f1	 mov	 rsi, rcx
  00a10	b9 10 00 00 00	 mov	 ecx, 16
  00a15	f3 a4		 rep movsb
$LN69@stbtt__run:

; 2145 :             has_subrs = 1;

  00a17	c7 85 e4 00 00
	00 01 00 00 00	 mov	 DWORD PTR has_subrs$[rbp], 1
$LN68@stbtt__run:
$LN70@stbtt__run:

; 2146 :          }
; 2147 :          // FALLTHROUGH
; 2148 :       case 0x1D: // callgsubr
; 2149 :          if (sp < 1) return STBTT__CSERR("call(g|)subr stack");

  00a21	83 7d 64 01	 cmp	 DWORD PTR sp$[rbp], 1
  00a25	7d 07		 jge	 SHORT $LN71@stbtt__run
  00a27	33 c0		 xor	 eax, eax
  00a29	e9 07 0a 00 00	 jmp	 $LN1@stbtt__run
$LN71@stbtt__run:

; 2150 :          v = (int) s[--sp];

  00a2e	8b 45 64	 mov	 eax, DWORD PTR sp$[rbp]
  00a31	ff c8		 dec	 eax
  00a33	89 45 64	 mov	 DWORD PTR sp$[rbp], eax
  00a36	48 63 45 64	 movsxd	 rax, DWORD PTR sp$[rbp]
  00a3a	f3 0f 2c 84 85
	30 01 00 00	 cvttss2si eax, DWORD PTR s$[rbp+rax*4]
  00a43	89 85 84 00 00
	00		 mov	 DWORD PTR v$[rbp], eax

; 2151 :          if (subr_stack_height >= 10) return STBTT__CSERR("recursion limit");

  00a49	83 7d 44 0a	 cmp	 DWORD PTR subr_stack_height$[rbp], 10
  00a4d	7c 07		 jl	 SHORT $LN72@stbtt__run
  00a4f	33 c0		 xor	 eax, eax
  00a51	e9 df 09 00 00	 jmp	 $LN1@stbtt__run
$LN72@stbtt__run:

; 2152 :          subr_stack[subr_stack_height++] = b;

  00a56	48 63 45 44	 movsxd	 rax, DWORD PTR subr_stack_height$[rbp]
  00a5a	48 6b c0 10	 imul	 rax, rax, 16
  00a5e	48 8d 8d f8 02
	00 00		 lea	 rcx, QWORD PTR b$[rbp]
  00a65	48 8d bc 05 10
	02 00 00	 lea	 rdi, QWORD PTR subr_stack$[rbp+rax]
  00a6d	48 8b f1	 mov	 rsi, rcx
  00a70	b9 10 00 00 00	 mov	 ecx, 16
  00a75	f3 a4		 rep movsb
  00a77	8b 45 44	 mov	 eax, DWORD PTR subr_stack_height$[rbp]
  00a7a	ff c0		 inc	 eax
  00a7c	89 45 44	 mov	 DWORD PTR subr_stack_height$[rbp], eax

; 2153 :          b = stbtt__get_subr(b0 == 0x0A ? subrs : info->gsubrs, v);

  00a7f	83 bd c4 00 00
	00 0a		 cmp	 DWORD PTR b0$[rbp], 10
  00a86	75 10		 jne	 SHORT $LN100@stbtt__run
  00a88	48 8d 85 c8 02
	00 00		 lea	 rax, QWORD PTR subrs$[rbp]
  00a8f	48 89 85 98 09
	00 00		 mov	 QWORD PTR tv451[rbp], rax
  00a96	eb 12		 jmp	 SHORT $LN101@stbtt__run
$LN100@stbtt__run:
  00a98	48 8b 85 d0 09
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  00a9f	48 83 c0 60	 add	 rax, 96			; 00000060H
  00aa3	48 89 85 98 09
	00 00		 mov	 QWORD PTR tv451[rbp], rax
$LN101@stbtt__run:
  00aaa	48 8d 85 80 09
	00 00		 lea	 rax, QWORD PTR $T29[rbp]
  00ab1	48 8b f8	 mov	 rdi, rax
  00ab4	48 8b b5 98 09
	00 00		 mov	 rsi, QWORD PTR tv451[rbp]
  00abb	b9 10 00 00 00	 mov	 ecx, 16
  00ac0	f3 a4		 rep movsb
  00ac2	44 8b 85 84 00
	00 00		 mov	 r8d, DWORD PTR v$[rbp]
  00ac9	48 8d 95 80 09
	00 00		 lea	 rdx, QWORD PTR $T29[rbp]
  00ad0	48 8d 8d 18 09
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  00ad7	e8 00 00 00 00	 call	 ?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__get_subr
  00adc	48 8d 8d e8 08
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  00ae3	48 8b f9	 mov	 rdi, rcx
  00ae6	48 8b f0	 mov	 rsi, rax
  00ae9	b9 10 00 00 00	 mov	 ecx, 16
  00aee	f3 a4		 rep movsb
  00af0	48 8d 85 f8 02
	00 00		 lea	 rax, QWORD PTR b$[rbp]
  00af7	48 8d 8d e8 08
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  00afe	48 8b f8	 mov	 rdi, rax
  00b01	48 8b f1	 mov	 rsi, rcx
  00b04	b9 10 00 00 00	 mov	 ecx, 16
  00b09	f3 a4		 rep movsb

; 2154 :          if (b.size == 0) return STBTT__CSERR("subr not found");

  00b0b	83 bd 04 03 00
	00 00		 cmp	 DWORD PTR b$[rbp+12], 0
  00b12	75 07		 jne	 SHORT $LN73@stbtt__run
  00b14	33 c0		 xor	 eax, eax
  00b16	e9 1a 09 00 00	 jmp	 $LN1@stbtt__run
$LN73@stbtt__run:

; 2155 :          b.cursor = 0;

  00b1b	c7 85 00 03 00
	00 00 00 00 00	 mov	 DWORD PTR b$[rbp+8], 0

; 2156 :          clear_stack = 0;

  00b25	c7 85 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR clear_stack$[rbp], 0

; 2157 :          break;

  00b2f	e9 ea 08 00 00	 jmp	 $LN4@stbtt__run
$LN74@stbtt__run:

; 2158 : 
; 2159 :       case 0x0B: // return
; 2160 :          if (subr_stack_height <= 0) return STBTT__CSERR("return outside subr");

  00b34	83 7d 44 00	 cmp	 DWORD PTR subr_stack_height$[rbp], 0
  00b38	7f 07		 jg	 SHORT $LN75@stbtt__run
  00b3a	33 c0		 xor	 eax, eax
  00b3c	e9 f4 08 00 00	 jmp	 $LN1@stbtt__run
$LN75@stbtt__run:

; 2161 :          b = subr_stack[--subr_stack_height];

  00b41	8b 45 44	 mov	 eax, DWORD PTR subr_stack_height$[rbp]
  00b44	ff c8		 dec	 eax
  00b46	89 45 44	 mov	 DWORD PTR subr_stack_height$[rbp], eax
  00b49	48 63 45 44	 movsxd	 rax, DWORD PTR subr_stack_height$[rbp]
  00b4d	48 6b c0 10	 imul	 rax, rax, 16
  00b51	48 8d 8d f8 02
	00 00		 lea	 rcx, QWORD PTR b$[rbp]
  00b58	48 8b f9	 mov	 rdi, rcx
  00b5b	48 8d b4 05 10
	02 00 00	 lea	 rsi, QWORD PTR subr_stack$[rbp+rax]
  00b63	b9 10 00 00 00	 mov	 ecx, 16
  00b68	f3 a4		 rep movsb

; 2162 :          clear_stack = 0;

  00b6a	c7 85 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR clear_stack$[rbp], 0

; 2163 :          break;

  00b74	e9 a5 08 00 00	 jmp	 $LN4@stbtt__run
$LN76@stbtt__run:

; 2164 : 
; 2165 :       case 0x0E: // endchar
; 2166 :          stbtt__csctx_close_shape(c);

  00b79	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00b80	e8 00 00 00 00	 call	 ?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z ; stbtt__csctx_close_shape

; 2167 :          return 1;

  00b85	b8 01 00 00 00	 mov	 eax, 1
  00b8a	e9 a6 08 00 00	 jmp	 $LN1@stbtt__run
$LN77@stbtt__run:

; 2168 : 
; 2169 :       case 0x0C: { // two-byte escape
; 2170 :          float dx1, dx2, dx3, dx4, dx5, dx6, dy1, dy2, dy3, dy4, dy5, dy6;
; 2171 :          float dx, dy;
; 2172 :          int b1 = stbtt__buf_get8(&b);

  00b8f	48 8d 8d f8 02
	00 00		 lea	 rcx, QWORD PTR b$[rbp]
  00b96	e8 00 00 00 00	 call	 ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_get8
  00b9b	0f b6 c0	 movzx	 eax, al
  00b9e	89 85 04 05 00
	00		 mov	 DWORD PTR b1$21[rbp], eax

; 2173 :          switch (b1) {

  00ba4	8b 85 04 05 00
	00		 mov	 eax, DWORD PTR b1$21[rbp]
  00baa	89 85 94 09 00
	00		 mov	 DWORD PTR tv466[rbp], eax
  00bb0	83 bd 94 09 00
	00 22		 cmp	 DWORD PTR tv466[rbp], 34 ; 00000022H
  00bb7	74 2c		 je	 SHORT $LN78@stbtt__run
  00bb9	83 bd 94 09 00
	00 23		 cmp	 DWORD PTR tv466[rbp], 35 ; 00000023H
  00bc0	0f 84 76 01 00
	00		 je	 $LN80@stbtt__run
  00bc6	83 bd 94 09 00
	00 24		 cmp	 DWORD PTR tv466[rbp], 36 ; 00000024H
  00bcd	0f 84 4f 03 00
	00		 je	 $LN82@stbtt__run
  00bd3	83 bd 94 09 00
	00 25		 cmp	 DWORD PTR tv466[rbp], 37 ; 00000025H
  00bda	0f 84 e7 04 00
	00		 je	 $LN84@stbtt__run
  00be0	e9 7a 07 00 00	 jmp	 $LN88@stbtt__run
$LN78@stbtt__run:

; 2174 :          // @TODO These "flex" implementations ignore the flex-depth and resolution,
; 2175 :          // and always draw beziers.
; 2176 :          case 0x22: // hflex
; 2177 :             if (sp < 7) return STBTT__CSERR("hflex stack");

  00be5	83 7d 64 07	 cmp	 DWORD PTR sp$[rbp], 7
  00be9	7d 07		 jge	 SHORT $LN79@stbtt__run
  00beb	33 c0		 xor	 eax, eax
  00bed	e9 43 08 00 00	 jmp	 $LN1@stbtt__run
$LN79@stbtt__run:

; 2178 :             dx1 = s[0];

  00bf2	b8 04 00 00 00	 mov	 eax, 4
  00bf7	48 6b c0 00	 imul	 rax, rax, 0
  00bfb	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00c04	f3 0f 11 85 44
	03 00 00	 movss	 DWORD PTR dx1$7[rbp], xmm0

; 2179 :             dx2 = s[1];

  00c0c	b8 04 00 00 00	 mov	 eax, 4
  00c11	48 6b c0 01	 imul	 rax, rax, 1
  00c15	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00c1e	f3 0f 11 85 64
	03 00 00	 movss	 DWORD PTR dx2$8[rbp], xmm0

; 2180 :             dy2 = s[2];

  00c26	b8 04 00 00 00	 mov	 eax, 4
  00c2b	48 6b c0 02	 imul	 rax, rax, 2
  00c2f	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00c38	f3 0f 11 85 24
	04 00 00	 movss	 DWORD PTR dy2$14[rbp], xmm0

; 2181 :             dx3 = s[3];

  00c40	b8 04 00 00 00	 mov	 eax, 4
  00c45	48 6b c0 03	 imul	 rax, rax, 3
  00c49	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00c52	f3 0f 11 85 84
	03 00 00	 movss	 DWORD PTR dx3$9[rbp], xmm0

; 2182 :             dx4 = s[4];

  00c5a	b8 04 00 00 00	 mov	 eax, 4
  00c5f	48 6b c0 04	 imul	 rax, rax, 4
  00c63	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00c6c	f3 0f 11 85 a4
	03 00 00	 movss	 DWORD PTR dx4$10[rbp], xmm0

; 2183 :             dx5 = s[5];

  00c74	b8 04 00 00 00	 mov	 eax, 4
  00c79	48 6b c0 05	 imul	 rax, rax, 5
  00c7d	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00c86	f3 0f 11 85 c4
	03 00 00	 movss	 DWORD PTR dx5$11[rbp], xmm0

; 2184 :             dx6 = s[6];

  00c8e	b8 04 00 00 00	 mov	 eax, 4
  00c93	48 6b c0 06	 imul	 rax, rax, 6
  00c97	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00ca0	f3 0f 11 85 e4
	03 00 00	 movss	 DWORD PTR dx6$12[rbp], xmm0

; 2185 :             stbtt__csctx_rccurve_to(c, dx1, 0, dx2, dy2, dx3, 0);

  00ca8	0f 57 c0	 xorps	 xmm0, xmm0
  00cab	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00cb1	f3 0f 10 85 84
	03 00 00	 movss	 xmm0, DWORD PTR dx3$9[rbp]
  00cb9	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00cbf	f3 0f 10 85 24
	04 00 00	 movss	 xmm0, DWORD PTR dy2$14[rbp]
  00cc7	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00ccd	f3 0f 10 9d 64
	03 00 00	 movss	 xmm3, DWORD PTR dx2$8[rbp]
  00cd5	0f 57 d2	 xorps	 xmm2, xmm2
  00cd8	f3 0f 10 8d 44
	03 00 00	 movss	 xmm1, DWORD PTR dx1$7[rbp]
  00ce0	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00ce7	e8 00 00 00 00	 call	 ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to

; 2186 :             stbtt__csctx_rccurve_to(c, dx4, 0, dx5, -dy2, dx6, 0);

  00cec	f3 0f 10 85 24
	04 00 00	 movss	 xmm0, DWORD PTR dy2$14[rbp]
  00cf4	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00cfb	0f 57 c9	 xorps	 xmm1, xmm1
  00cfe	f3 0f 11 4c 24
	30		 movss	 DWORD PTR [rsp+48], xmm1
  00d04	f3 0f 10 8d e4
	03 00 00	 movss	 xmm1, DWORD PTR dx6$12[rbp]
  00d0c	f3 0f 11 4c 24
	28		 movss	 DWORD PTR [rsp+40], xmm1
  00d12	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00d18	f3 0f 10 9d c4
	03 00 00	 movss	 xmm3, DWORD PTR dx5$11[rbp]
  00d20	0f 57 d2	 xorps	 xmm2, xmm2
  00d23	f3 0f 10 8d a4
	03 00 00	 movss	 xmm1, DWORD PTR dx4$10[rbp]
  00d2b	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00d32	e8 00 00 00 00	 call	 ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to

; 2187 :             break;

  00d37	e9 2a 06 00 00	 jmp	 $LN27@stbtt__run
$LN80@stbtt__run:

; 2188 : 
; 2189 :          case 0x23: // flex
; 2190 :             if (sp < 13) return STBTT__CSERR("flex stack");

  00d3c	83 7d 64 0d	 cmp	 DWORD PTR sp$[rbp], 13
  00d40	7d 07		 jge	 SHORT $LN81@stbtt__run
  00d42	33 c0		 xor	 eax, eax
  00d44	e9 ec 06 00 00	 jmp	 $LN1@stbtt__run
$LN81@stbtt__run:

; 2191 :             dx1 = s[0];

  00d49	b8 04 00 00 00	 mov	 eax, 4
  00d4e	48 6b c0 00	 imul	 rax, rax, 0
  00d52	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00d5b	f3 0f 11 85 44
	03 00 00	 movss	 DWORD PTR dx1$7[rbp], xmm0

; 2192 :             dy1 = s[1];

  00d63	b8 04 00 00 00	 mov	 eax, 4
  00d68	48 6b c0 01	 imul	 rax, rax, 1
  00d6c	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00d75	f3 0f 11 85 04
	04 00 00	 movss	 DWORD PTR dy1$13[rbp], xmm0

; 2193 :             dx2 = s[2];

  00d7d	b8 04 00 00 00	 mov	 eax, 4
  00d82	48 6b c0 02	 imul	 rax, rax, 2
  00d86	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00d8f	f3 0f 11 85 64
	03 00 00	 movss	 DWORD PTR dx2$8[rbp], xmm0

; 2194 :             dy2 = s[3];

  00d97	b8 04 00 00 00	 mov	 eax, 4
  00d9c	48 6b c0 03	 imul	 rax, rax, 3
  00da0	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00da9	f3 0f 11 85 24
	04 00 00	 movss	 DWORD PTR dy2$14[rbp], xmm0

; 2195 :             dx3 = s[4];

  00db1	b8 04 00 00 00	 mov	 eax, 4
  00db6	48 6b c0 04	 imul	 rax, rax, 4
  00dba	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00dc3	f3 0f 11 85 84
	03 00 00	 movss	 DWORD PTR dx3$9[rbp], xmm0

; 2196 :             dy3 = s[5];

  00dcb	b8 04 00 00 00	 mov	 eax, 4
  00dd0	48 6b c0 05	 imul	 rax, rax, 5
  00dd4	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00ddd	f3 0f 11 85 44
	04 00 00	 movss	 DWORD PTR dy3$15[rbp], xmm0

; 2197 :             dx4 = s[6];

  00de5	b8 04 00 00 00	 mov	 eax, 4
  00dea	48 6b c0 06	 imul	 rax, rax, 6
  00dee	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00df7	f3 0f 11 85 a4
	03 00 00	 movss	 DWORD PTR dx4$10[rbp], xmm0

; 2198 :             dy4 = s[7];

  00dff	b8 04 00 00 00	 mov	 eax, 4
  00e04	48 6b c0 07	 imul	 rax, rax, 7
  00e08	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00e11	f3 0f 11 85 64
	04 00 00	 movss	 DWORD PTR dy4$16[rbp], xmm0

; 2199 :             dx5 = s[8];

  00e19	b8 04 00 00 00	 mov	 eax, 4
  00e1e	48 6b c0 08	 imul	 rax, rax, 8
  00e22	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00e2b	f3 0f 11 85 c4
	03 00 00	 movss	 DWORD PTR dx5$11[rbp], xmm0

; 2200 :             dy5 = s[9];

  00e33	b8 04 00 00 00	 mov	 eax, 4
  00e38	48 6b c0 09	 imul	 rax, rax, 9
  00e3c	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00e45	f3 0f 11 85 84
	04 00 00	 movss	 DWORD PTR dy5$17[rbp], xmm0

; 2201 :             dx6 = s[10];

  00e4d	b8 04 00 00 00	 mov	 eax, 4
  00e52	48 6b c0 0a	 imul	 rax, rax, 10
  00e56	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00e5f	f3 0f 11 85 e4
	03 00 00	 movss	 DWORD PTR dx6$12[rbp], xmm0

; 2202 :             dy6 = s[11];

  00e67	b8 04 00 00 00	 mov	 eax, 4
  00e6c	48 6b c0 0b	 imul	 rax, rax, 11
  00e70	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00e79	f3 0f 11 85 a4
	04 00 00	 movss	 DWORD PTR dy6$18[rbp], xmm0

; 2203 :             //fd is s[12]
; 2204 :             stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, dy3);

  00e81	f3 0f 10 85 44
	04 00 00	 movss	 xmm0, DWORD PTR dy3$15[rbp]
  00e89	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00e8f	f3 0f 10 85 84
	03 00 00	 movss	 xmm0, DWORD PTR dx3$9[rbp]
  00e97	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00e9d	f3 0f 10 85 24
	04 00 00	 movss	 xmm0, DWORD PTR dy2$14[rbp]
  00ea5	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00eab	f3 0f 10 9d 64
	03 00 00	 movss	 xmm3, DWORD PTR dx2$8[rbp]
  00eb3	f3 0f 10 95 04
	04 00 00	 movss	 xmm2, DWORD PTR dy1$13[rbp]
  00ebb	f3 0f 10 8d 44
	03 00 00	 movss	 xmm1, DWORD PTR dx1$7[rbp]
  00ec3	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00eca	e8 00 00 00 00	 call	 ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to

; 2205 :             stbtt__csctx_rccurve_to(c, dx4, dy4, dx5, dy5, dx6, dy6);

  00ecf	f3 0f 10 85 a4
	04 00 00	 movss	 xmm0, DWORD PTR dy6$18[rbp]
  00ed7	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00edd	f3 0f 10 85 e4
	03 00 00	 movss	 xmm0, DWORD PTR dx6$12[rbp]
  00ee5	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00eeb	f3 0f 10 85 84
	04 00 00	 movss	 xmm0, DWORD PTR dy5$17[rbp]
  00ef3	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00ef9	f3 0f 10 9d c4
	03 00 00	 movss	 xmm3, DWORD PTR dx5$11[rbp]
  00f01	f3 0f 10 95 64
	04 00 00	 movss	 xmm2, DWORD PTR dy4$16[rbp]
  00f09	f3 0f 10 8d a4
	03 00 00	 movss	 xmm1, DWORD PTR dx4$10[rbp]
  00f11	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00f18	e8 00 00 00 00	 call	 ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to

; 2206 :             break;

  00f1d	e9 44 04 00 00	 jmp	 $LN27@stbtt__run
$LN82@stbtt__run:

; 2207 : 
; 2208 :          case 0x24: // hflex1
; 2209 :             if (sp < 9) return STBTT__CSERR("hflex1 stack");

  00f22	83 7d 64 09	 cmp	 DWORD PTR sp$[rbp], 9
  00f26	7d 07		 jge	 SHORT $LN83@stbtt__run
  00f28	33 c0		 xor	 eax, eax
  00f2a	e9 06 05 00 00	 jmp	 $LN1@stbtt__run
$LN83@stbtt__run:

; 2210 :             dx1 = s[0];

  00f2f	b8 04 00 00 00	 mov	 eax, 4
  00f34	48 6b c0 00	 imul	 rax, rax, 0
  00f38	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00f41	f3 0f 11 85 44
	03 00 00	 movss	 DWORD PTR dx1$7[rbp], xmm0

; 2211 :             dy1 = s[1];

  00f49	b8 04 00 00 00	 mov	 eax, 4
  00f4e	48 6b c0 01	 imul	 rax, rax, 1
  00f52	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00f5b	f3 0f 11 85 04
	04 00 00	 movss	 DWORD PTR dy1$13[rbp], xmm0

; 2212 :             dx2 = s[2];

  00f63	b8 04 00 00 00	 mov	 eax, 4
  00f68	48 6b c0 02	 imul	 rax, rax, 2
  00f6c	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00f75	f3 0f 11 85 64
	03 00 00	 movss	 DWORD PTR dx2$8[rbp], xmm0

; 2213 :             dy2 = s[3];

  00f7d	b8 04 00 00 00	 mov	 eax, 4
  00f82	48 6b c0 03	 imul	 rax, rax, 3
  00f86	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00f8f	f3 0f 11 85 24
	04 00 00	 movss	 DWORD PTR dy2$14[rbp], xmm0

; 2214 :             dx3 = s[4];

  00f97	b8 04 00 00 00	 mov	 eax, 4
  00f9c	48 6b c0 04	 imul	 rax, rax, 4
  00fa0	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00fa9	f3 0f 11 85 84
	03 00 00	 movss	 DWORD PTR dx3$9[rbp], xmm0

; 2215 :             dx4 = s[5];

  00fb1	b8 04 00 00 00	 mov	 eax, 4
  00fb6	48 6b c0 05	 imul	 rax, rax, 5
  00fba	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00fc3	f3 0f 11 85 a4
	03 00 00	 movss	 DWORD PTR dx4$10[rbp], xmm0

; 2216 :             dx5 = s[6];

  00fcb	b8 04 00 00 00	 mov	 eax, 4
  00fd0	48 6b c0 06	 imul	 rax, rax, 6
  00fd4	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00fdd	f3 0f 11 85 c4
	03 00 00	 movss	 DWORD PTR dx5$11[rbp], xmm0

; 2217 :             dy5 = s[7];

  00fe5	b8 04 00 00 00	 mov	 eax, 4
  00fea	48 6b c0 07	 imul	 rax, rax, 7
  00fee	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  00ff7	f3 0f 11 85 84
	04 00 00	 movss	 DWORD PTR dy5$17[rbp], xmm0

; 2218 :             dx6 = s[8];

  00fff	b8 04 00 00 00	 mov	 eax, 4
  01004	48 6b c0 08	 imul	 rax, rax, 8
  01008	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  01011	f3 0f 11 85 e4
	03 00 00	 movss	 DWORD PTR dx6$12[rbp], xmm0

; 2219 :             stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, 0);

  01019	0f 57 c0	 xorps	 xmm0, xmm0
  0101c	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  01022	f3 0f 10 85 84
	03 00 00	 movss	 xmm0, DWORD PTR dx3$9[rbp]
  0102a	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  01030	f3 0f 10 85 24
	04 00 00	 movss	 xmm0, DWORD PTR dy2$14[rbp]
  01038	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0103e	f3 0f 10 9d 64
	03 00 00	 movss	 xmm3, DWORD PTR dx2$8[rbp]
  01046	f3 0f 10 95 04
	04 00 00	 movss	 xmm2, DWORD PTR dy1$13[rbp]
  0104e	f3 0f 10 8d 44
	03 00 00	 movss	 xmm1, DWORD PTR dx1$7[rbp]
  01056	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  0105d	e8 00 00 00 00	 call	 ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to

; 2220 :             stbtt__csctx_rccurve_to(c, dx4, 0, dx5, dy5, dx6, -(dy1+dy2+dy5));

  01062	f3 0f 10 85 04
	04 00 00	 movss	 xmm0, DWORD PTR dy1$13[rbp]
  0106a	f3 0f 58 85 24
	04 00 00	 addss	 xmm0, DWORD PTR dy2$14[rbp]
  01072	f3 0f 58 85 84
	04 00 00	 addss	 xmm0, DWORD PTR dy5$17[rbp]
  0107a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01081	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  01087	f3 0f 10 85 e4
	03 00 00	 movss	 xmm0, DWORD PTR dx6$12[rbp]
  0108f	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  01095	f3 0f 10 85 84
	04 00 00	 movss	 xmm0, DWORD PTR dy5$17[rbp]
  0109d	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  010a3	f3 0f 10 9d c4
	03 00 00	 movss	 xmm3, DWORD PTR dx5$11[rbp]
  010ab	0f 57 d2	 xorps	 xmm2, xmm2
  010ae	f3 0f 10 8d a4
	03 00 00	 movss	 xmm1, DWORD PTR dx4$10[rbp]
  010b6	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  010bd	e8 00 00 00 00	 call	 ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to

; 2221 :             break;

  010c2	e9 9f 02 00 00	 jmp	 $LN27@stbtt__run
$LN84@stbtt__run:

; 2222 : 
; 2223 :          case 0x25: // flex1
; 2224 :             if (sp < 11) return STBTT__CSERR("flex1 stack");

  010c7	83 7d 64 0b	 cmp	 DWORD PTR sp$[rbp], 11
  010cb	7d 07		 jge	 SHORT $LN85@stbtt__run
  010cd	33 c0		 xor	 eax, eax
  010cf	e9 61 03 00 00	 jmp	 $LN1@stbtt__run
$LN85@stbtt__run:

; 2225 :             dx1 = s[0];

  010d4	b8 04 00 00 00	 mov	 eax, 4
  010d9	48 6b c0 00	 imul	 rax, rax, 0
  010dd	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  010e6	f3 0f 11 85 44
	03 00 00	 movss	 DWORD PTR dx1$7[rbp], xmm0

; 2226 :             dy1 = s[1];

  010ee	b8 04 00 00 00	 mov	 eax, 4
  010f3	48 6b c0 01	 imul	 rax, rax, 1
  010f7	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  01100	f3 0f 11 85 04
	04 00 00	 movss	 DWORD PTR dy1$13[rbp], xmm0

; 2227 :             dx2 = s[2];

  01108	b8 04 00 00 00	 mov	 eax, 4
  0110d	48 6b c0 02	 imul	 rax, rax, 2
  01111	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  0111a	f3 0f 11 85 64
	03 00 00	 movss	 DWORD PTR dx2$8[rbp], xmm0

; 2228 :             dy2 = s[3];

  01122	b8 04 00 00 00	 mov	 eax, 4
  01127	48 6b c0 03	 imul	 rax, rax, 3
  0112b	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  01134	f3 0f 11 85 24
	04 00 00	 movss	 DWORD PTR dy2$14[rbp], xmm0

; 2229 :             dx3 = s[4];

  0113c	b8 04 00 00 00	 mov	 eax, 4
  01141	48 6b c0 04	 imul	 rax, rax, 4
  01145	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  0114e	f3 0f 11 85 84
	03 00 00	 movss	 DWORD PTR dx3$9[rbp], xmm0

; 2230 :             dy3 = s[5];

  01156	b8 04 00 00 00	 mov	 eax, 4
  0115b	48 6b c0 05	 imul	 rax, rax, 5
  0115f	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  01168	f3 0f 11 85 44
	04 00 00	 movss	 DWORD PTR dy3$15[rbp], xmm0

; 2231 :             dx4 = s[6];

  01170	b8 04 00 00 00	 mov	 eax, 4
  01175	48 6b c0 06	 imul	 rax, rax, 6
  01179	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  01182	f3 0f 11 85 a4
	03 00 00	 movss	 DWORD PTR dx4$10[rbp], xmm0

; 2232 :             dy4 = s[7];

  0118a	b8 04 00 00 00	 mov	 eax, 4
  0118f	48 6b c0 07	 imul	 rax, rax, 7
  01193	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  0119c	f3 0f 11 85 64
	04 00 00	 movss	 DWORD PTR dy4$16[rbp], xmm0

; 2233 :             dx5 = s[8];

  011a4	b8 04 00 00 00	 mov	 eax, 4
  011a9	48 6b c0 08	 imul	 rax, rax, 8
  011ad	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  011b6	f3 0f 11 85 c4
	03 00 00	 movss	 DWORD PTR dx5$11[rbp], xmm0

; 2234 :             dy5 = s[9];

  011be	b8 04 00 00 00	 mov	 eax, 4
  011c3	48 6b c0 09	 imul	 rax, rax, 9
  011c7	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  011d0	f3 0f 11 85 84
	04 00 00	 movss	 DWORD PTR dy5$17[rbp], xmm0

; 2235 :             dx6 = dy6 = s[10];

  011d8	b8 04 00 00 00	 mov	 eax, 4
  011dd	48 6b c0 0a	 imul	 rax, rax, 10
  011e1	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR s$[rbp+rax]
  011ea	f3 0f 11 85 a4
	04 00 00	 movss	 DWORD PTR dy6$18[rbp], xmm0
  011f2	f3 0f 10 85 a4
	04 00 00	 movss	 xmm0, DWORD PTR dy6$18[rbp]
  011fa	f3 0f 11 85 e4
	03 00 00	 movss	 DWORD PTR dx6$12[rbp], xmm0

; 2236 :             dx = dx1+dx2+dx3+dx4+dx5;

  01202	f3 0f 10 85 44
	03 00 00	 movss	 xmm0, DWORD PTR dx1$7[rbp]
  0120a	f3 0f 58 85 64
	03 00 00	 addss	 xmm0, DWORD PTR dx2$8[rbp]
  01212	f3 0f 58 85 84
	03 00 00	 addss	 xmm0, DWORD PTR dx3$9[rbp]
  0121a	f3 0f 58 85 a4
	03 00 00	 addss	 xmm0, DWORD PTR dx4$10[rbp]
  01222	f3 0f 58 85 c4
	03 00 00	 addss	 xmm0, DWORD PTR dx5$11[rbp]
  0122a	f3 0f 11 85 c4
	04 00 00	 movss	 DWORD PTR dx$19[rbp], xmm0

; 2237 :             dy = dy1+dy2+dy3+dy4+dy5;

  01232	f3 0f 10 85 04
	04 00 00	 movss	 xmm0, DWORD PTR dy1$13[rbp]
  0123a	f3 0f 58 85 24
	04 00 00	 addss	 xmm0, DWORD PTR dy2$14[rbp]
  01242	f3 0f 58 85 44
	04 00 00	 addss	 xmm0, DWORD PTR dy3$15[rbp]
  0124a	f3 0f 58 85 64
	04 00 00	 addss	 xmm0, DWORD PTR dy4$16[rbp]
  01252	f3 0f 58 85 84
	04 00 00	 addss	 xmm0, DWORD PTR dy5$17[rbp]
  0125a	f3 0f 11 85 e4
	04 00 00	 movss	 DWORD PTR dy$20[rbp], xmm0

; 2238 :             if (STBTT_fabs(dx) > STBTT_fabs(dy))

  01262	f3 0f 10 85 c4
	04 00 00	 movss	 xmm0, DWORD PTR dx$19[rbp]
  0126a	e8 00 00 00 00	 call	 fabsf
  0126f	f3 0f 11 85 94
	09 00 00	 movss	 DWORD PTR tv636[rbp], xmm0
  01277	f3 0f 10 85 e4
	04 00 00	 movss	 xmm0, DWORD PTR dy$20[rbp]
  0127f	e8 00 00 00 00	 call	 fabsf
  01284	f3 0f 10 8d 94
	09 00 00	 movss	 xmm1, DWORD PTR tv636[rbp]
  0128c	0f 2f c8	 comiss	 xmm1, xmm0
  0128f	76 19		 jbe	 SHORT $LN86@stbtt__run

; 2239 :                dy6 = -dy;

  01291	f3 0f 10 85 e4
	04 00 00	 movss	 xmm0, DWORD PTR dy$20[rbp]
  01299	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  012a0	f3 0f 11 85 a4
	04 00 00	 movss	 DWORD PTR dy6$18[rbp], xmm0

; 2240 :             else

  012a8	eb 17		 jmp	 SHORT $LN87@stbtt__run
$LN86@stbtt__run:

; 2241 :                dx6 = -dx;

  012aa	f3 0f 10 85 c4
	04 00 00	 movss	 xmm0, DWORD PTR dx$19[rbp]
  012b2	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  012b9	f3 0f 11 85 e4
	03 00 00	 movss	 DWORD PTR dx6$12[rbp], xmm0
$LN87@stbtt__run:

; 2242 :             stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, dy3);

  012c1	f3 0f 10 85 44
	04 00 00	 movss	 xmm0, DWORD PTR dy3$15[rbp]
  012c9	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  012cf	f3 0f 10 85 84
	03 00 00	 movss	 xmm0, DWORD PTR dx3$9[rbp]
  012d7	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  012dd	f3 0f 10 85 24
	04 00 00	 movss	 xmm0, DWORD PTR dy2$14[rbp]
  012e5	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  012eb	f3 0f 10 9d 64
	03 00 00	 movss	 xmm3, DWORD PTR dx2$8[rbp]
  012f3	f3 0f 10 95 04
	04 00 00	 movss	 xmm2, DWORD PTR dy1$13[rbp]
  012fb	f3 0f 10 8d 44
	03 00 00	 movss	 xmm1, DWORD PTR dx1$7[rbp]
  01303	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  0130a	e8 00 00 00 00	 call	 ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to

; 2243 :             stbtt__csctx_rccurve_to(c, dx4, dy4, dx5, dy5, dx6, dy6);

  0130f	f3 0f 10 85 a4
	04 00 00	 movss	 xmm0, DWORD PTR dy6$18[rbp]
  01317	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  0131d	f3 0f 10 85 e4
	03 00 00	 movss	 xmm0, DWORD PTR dx6$12[rbp]
  01325	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  0132b	f3 0f 10 85 84
	04 00 00	 movss	 xmm0, DWORD PTR dy5$17[rbp]
  01333	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01339	f3 0f 10 9d c4
	03 00 00	 movss	 xmm3, DWORD PTR dx5$11[rbp]
  01341	f3 0f 10 95 64
	04 00 00	 movss	 xmm2, DWORD PTR dy4$16[rbp]
  01349	f3 0f 10 8d a4
	03 00 00	 movss	 xmm1, DWORD PTR dx4$10[rbp]
  01351	48 8b 8d e0 09
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  01358	e8 00 00 00 00	 call	 ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to

; 2244 :             break;

  0135d	eb 07		 jmp	 SHORT $LN27@stbtt__run
$LN88@stbtt__run:

; 2245 : 
; 2246 :          default:
; 2247 :             return STBTT__CSERR("unimplemented");

  0135f	33 c0		 xor	 eax, eax
  01361	e9 cf 00 00 00	 jmp	 $LN1@stbtt__run
$LN27@stbtt__run:

; 2248 :          }
; 2249 :       } break;

  01366	e9 b3 00 00 00	 jmp	 $LN4@stbtt__run
$LN89@stbtt__run:

; 2250 : 
; 2251 :       default:
; 2252 :          if (b0 != 255 && b0 != 28 && b0 < 32)

  0136b	81 bd c4 00 00
	00 ff 00 00 00	 cmp	 DWORD PTR b0$[rbp], 255	; 000000ffH
  01375	74 19		 je	 SHORT $LN90@stbtt__run
  01377	83 bd c4 00 00
	00 1c		 cmp	 DWORD PTR b0$[rbp], 28
  0137e	74 10		 je	 SHORT $LN90@stbtt__run
  01380	83 bd c4 00 00
	00 20		 cmp	 DWORD PTR b0$[rbp], 32	; 00000020H
  01387	7d 07		 jge	 SHORT $LN90@stbtt__run

; 2253 :             return STBTT__CSERR("reserved operator");

  01389	33 c0		 xor	 eax, eax
  0138b	e9 a5 00 00 00	 jmp	 $LN1@stbtt__run
$LN90@stbtt__run:

; 2254 : 
; 2255 :          // push immediate
; 2256 :          if (b0 == 255) {

  01390	81 bd c4 00 00
	00 ff 00 00 00	 cmp	 DWORD PTR b0$[rbp], 255	; 000000ffH
  0139a	75 27		 jne	 SHORT $LN91@stbtt__run

; 2257 :             f = (float)(stbtt_int32)stbtt__buf_get32(&b) / 0x10000;

  0139c	ba 04 00 00 00	 mov	 edx, 4
  013a1	48 8d 8d f8 02
	00 00		 lea	 rcx, QWORD PTR b$[rbp]
  013a8	e8 00 00 00 00	 call	 ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z ; stbtt__buf_get
  013ad	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  013b1	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@47800000
  013b9	f3 0f 11 85 24
	03 00 00	 movss	 DWORD PTR f$[rbp], xmm0

; 2258 :          } else {

  013c1	eb 2a		 jmp	 SHORT $LN92@stbtt__run
$LN91@stbtt__run:

; 2259 :             stbtt__buf_skip(&b, -1);

  013c3	ba ff ff ff ff	 mov	 edx, -1
  013c8	48 8d 8d f8 02
	00 00		 lea	 rcx, QWORD PTR b$[rbp]
  013cf	e8 00 00 00 00	 call	 ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip

; 2260 :             f = (float)(stbtt_int16)stbtt__cff_int(&b);

  013d4	48 8d 8d f8 02
	00 00		 lea	 rcx, QWORD PTR b$[rbp]
  013db	e8 00 00 00 00	 call	 ?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z ; stbtt__cff_int
  013e0	98		 cwde
  013e1	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  013e5	f3 0f 11 85 24
	03 00 00	 movss	 DWORD PTR f$[rbp], xmm0
$LN92@stbtt__run:

; 2261 :          }
; 2262 :          if (sp >= 48) return STBTT__CSERR("push stack overflow");

  013ed	83 7d 64 30	 cmp	 DWORD PTR sp$[rbp], 48	; 00000030H
  013f1	7c 04		 jl	 SHORT $LN93@stbtt__run
  013f3	33 c0		 xor	 eax, eax
  013f5	eb 3e		 jmp	 SHORT $LN1@stbtt__run
$LN93@stbtt__run:

; 2263 :          s[sp++] = f;

  013f7	48 63 45 64	 movsxd	 rax, DWORD PTR sp$[rbp]
  013fb	f3 0f 10 85 24
	03 00 00	 movss	 xmm0, DWORD PTR f$[rbp]
  01403	f3 0f 11 84 85
	30 01 00 00	 movss	 DWORD PTR s$[rbp+rax*4], xmm0
  0140c	8b 45 64	 mov	 eax, DWORD PTR sp$[rbp]
  0140f	ff c0		 inc	 eax
  01411	89 45 64	 mov	 DWORD PTR sp$[rbp], eax

; 2264 :          clear_stack = 0;

  01414	c7 85 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR clear_stack$[rbp], 0
$LN4@stbtt__run:

; 2265 :          break;
; 2266 :       }
; 2267 :       if (clear_stack) sp = 0;

  0141e	83 bd 04 01 00
	00 00		 cmp	 DWORD PTR clear_stack$[rbp], 0
  01425	74 07		 je	 SHORT $LN94@stbtt__run
  01427	c7 45 64 00 00
	00 00		 mov	 DWORD PTR sp$[rbp], 0
$LN94@stbtt__run:

; 2268 :    }

  0142e	e9 b9 ec ff ff	 jmp	 $LN2@stbtt__run
$LN3@stbtt__run:

; 2269 :    return STBTT__CSERR("no endchar");

  01433	33 c0		 xor	 eax, eax
$LN1@stbtt__run:

; 2270 : 
; 2271 : #undef STBTT__CSERR
; 2272 : }

  01435	48 8b f8	 mov	 rdi, rax
  01438	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  0143c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcFrameData
  01443	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  01448	48 8b c7	 mov	 rax, rdi
  0144b	48 8b 8d a0 09
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  01452	48 33 cd	 xor	 rcx, rbp
  01455	e8 00 00 00 00	 call	 __security_check_cookie
  0145a	48 8d a5 b0 09
	00 00		 lea	 rsp, QWORD PTR [rbp+2480]
  01461	5f		 pop	 rdi
  01462	5e		 pop	 rsi
  01463	5d		 pop	 rbp
  01464	c3		 ret	 0
  01465	0f 1f 00	 npad	 3
$LN102@stbtt__run:
  01468	00 00 00 00	 DD	 $LN31@stbtt__run
  0146c	00 00 00 00	 DD	 $LN89@stbtt__run
  01470	00 00 00 00	 DD	 $LN31@stbtt__run
  01474	00 00 00 00	 DD	 $LN34@stbtt__run
  01478	00 00 00 00	 DD	 $LN38@stbtt__run
  0147c	00 00 00 00	 DD	 $LN43@stbtt__run
  01480	00 00 00 00	 DD	 $LN40@stbtt__run
  01484	00 00 00 00	 DD	 $LN54@stbtt__run
  01488	00 00 00 00	 DD	 $LN89@stbtt__run
  0148c	00 00 00 00	 DD	 $LN67@stbtt__run
  01490	00 00 00 00	 DD	 $LN74@stbtt__run
  01494	00 00 00 00	 DD	 $LN77@stbtt__run
  01498	00 00 00 00	 DD	 $LN89@stbtt__run
  0149c	00 00 00 00	 DD	 $LN76@stbtt__run
  014a0	00 00 00 00	 DD	 $LN89@stbtt__run
  014a4	00 00 00 00	 DD	 $LN89@stbtt__run
  014a8	00 00 00 00	 DD	 $LN89@stbtt__run
  014ac	00 00 00 00	 DD	 $LN31@stbtt__run
  014b0	00 00 00 00	 DD	 $LN29@stbtt__run
  014b4	00 00 00 00	 DD	 $LN29@stbtt__run
  014b8	00 00 00 00	 DD	 $LN32@stbtt__run
  014bc	00 00 00 00	 DD	 $LN36@stbtt__run
  014c0	00 00 00 00	 DD	 $LN31@stbtt__run
  014c4	00 00 00 00	 DD	 $LN56@stbtt__run
  014c8	00 00 00 00	 DD	 $LN59@stbtt__run
  014cc	00 00 00 00	 DD	 $LN62@stbtt__run
  014d0	00 00 00 00	 DD	 $LN62@stbtt__run
  014d4	00 00 00 00	 DD	 $LN89@stbtt__run
  014d8	00 00 00 00	 DD	 $LN70@stbtt__run
  014dc	00 00 00 00	 DD	 $LN50@stbtt__run
  014e0	00 00 00 00	 DD	 $LN47@stbtt__run
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ENDP ; stbtt__run_charstring
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z
_TEXT	SEGMENT
fdselect$ = 8
nranges$ = 52
start$ = 84
end$ = 116
v$ = 148
fmt$ = 180
fdselector$ = 212
i$ = 244
$T4 = 664
$T5 = 712
$T6 = 760
$T7 = 808
$T8 = 856
$T9 = 904
$T10 = 960
$T11 = 1008
$T12 = 1056
__$ArrayPad$ = 1080
$T13 = 1120
info$ = 1128
glyph_index$ = 1136
?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z PROC ; stbtt__cid_get_glyph_subrs, COMDAT

; 1988 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 60 04
	00 00		 sub	 rsp, 1120		; 00000460H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8b fc	 mov	 rdi, rsp
  00021	b9 18 01 00 00	 mov	 ecx, 280		; 00000118H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 88
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1160]
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 38 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1989 :    stbtt__buf fdselect = info->fdselect;

  00046	48 8d 45 08	 lea	 rax, QWORD PTR fdselect$[rbp]
  0004a	48 8b 8d 68 04
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00051	48 8b f8	 mov	 rdi, rax
  00054	48 8d b1 90 00
	00 00		 lea	 rsi, QWORD PTR [rcx+144]
  0005b	b9 10 00 00 00	 mov	 ecx, 16
  00060	f3 a4		 rep movsb

; 1990 :    int nranges, start, end, v, fmt, fdselector = -1, i;

  00062	c7 85 d4 00 00
	00 ff ff ff ff	 mov	 DWORD PTR fdselector$[rbp], -1

; 1991 : 
; 1992 :    stbtt__buf_seek(&fdselect, 0);

  0006c	33 d2		 xor	 edx, edx
  0006e	48 8d 4d 08	 lea	 rcx, QWORD PTR fdselect$[rbp]
  00072	e8 00 00 00 00	 call	 ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek

; 1993 :    fmt = stbtt__buf_get8(&fdselect);

  00077	48 8d 4d 08	 lea	 rcx, QWORD PTR fdselect$[rbp]
  0007b	e8 00 00 00 00	 call	 ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_get8
  00080	0f b6 c0	 movzx	 eax, al
  00083	89 85 b4 00 00
	00		 mov	 DWORD PTR fmt$[rbp], eax

; 1994 :    if (fmt == 0) {

  00089	83 bd b4 00 00
	00 00		 cmp	 DWORD PTR fmt$[rbp], 0
  00090	75 26		 jne	 SHORT $LN5@stbtt__cid

; 1995 :       // untested
; 1996 :       stbtt__buf_skip(&fdselect, glyph_index);

  00092	8b 95 70 04 00
	00		 mov	 edx, DWORD PTR glyph_index$[rbp]
  00098	48 8d 4d 08	 lea	 rcx, QWORD PTR fdselect$[rbp]
  0009c	e8 00 00 00 00	 call	 ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip

; 1997 :       fdselector = stbtt__buf_get8(&fdselect);

  000a1	48 8d 4d 08	 lea	 rcx, QWORD PTR fdselect$[rbp]
  000a5	e8 00 00 00 00	 call	 ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_get8
  000aa	0f b6 c0	 movzx	 eax, al
  000ad	89 85 d4 00 00
	00		 mov	 DWORD PTR fdselector$[rbp], eax
  000b3	e9 a3 00 00 00	 jmp	 $LN6@stbtt__cid
$LN5@stbtt__cid:

; 1998 :    } else if (fmt == 3) {

  000b8	83 bd b4 00 00
	00 03		 cmp	 DWORD PTR fmt$[rbp], 3
  000bf	0f 85 96 00 00
	00		 jne	 $LN7@stbtt__cid

; 1999 :       nranges = stbtt__buf_get16(&fdselect);

  000c5	ba 02 00 00 00	 mov	 edx, 2
  000ca	48 8d 4d 08	 lea	 rcx, QWORD PTR fdselect$[rbp]
  000ce	e8 00 00 00 00	 call	 ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z ; stbtt__buf_get
  000d3	89 45 34	 mov	 DWORD PTR nranges$[rbp], eax

; 2000 :       start = stbtt__buf_get16(&fdselect);

  000d6	ba 02 00 00 00	 mov	 edx, 2
  000db	48 8d 4d 08	 lea	 rcx, QWORD PTR fdselect$[rbp]
  000df	e8 00 00 00 00	 call	 ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z ; stbtt__buf_get
  000e4	89 45 54	 mov	 DWORD PTR start$[rbp], eax

; 2001 :       for (i = 0; i < nranges; i++) {

  000e7	c7 85 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR i$[rbp], 0
  000f1	eb 0e		 jmp	 SHORT $LN4@stbtt__cid
$LN2@stbtt__cid:
  000f3	8b 85 f4 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  000f9	ff c0		 inc	 eax
  000fb	89 85 f4 00 00
	00		 mov	 DWORD PTR i$[rbp], eax
$LN4@stbtt__cid:
  00101	8b 45 34	 mov	 eax, DWORD PTR nranges$[rbp]
  00104	39 85 f4 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  0010a	7d 4f		 jge	 SHORT $LN3@stbtt__cid

; 2002 :          v = stbtt__buf_get8(&fdselect);

  0010c	48 8d 4d 08	 lea	 rcx, QWORD PTR fdselect$[rbp]
  00110	e8 00 00 00 00	 call	 ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_get8
  00115	0f b6 c0	 movzx	 eax, al
  00118	89 85 94 00 00
	00		 mov	 DWORD PTR v$[rbp], eax

; 2003 :          end = stbtt__buf_get16(&fdselect);

  0011e	ba 02 00 00 00	 mov	 edx, 2
  00123	48 8d 4d 08	 lea	 rcx, QWORD PTR fdselect$[rbp]
  00127	e8 00 00 00 00	 call	 ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z ; stbtt__buf_get
  0012c	89 45 74	 mov	 DWORD PTR end$[rbp], eax

; 2004 :          if (glyph_index >= start && glyph_index < end) {

  0012f	8b 45 54	 mov	 eax, DWORD PTR start$[rbp]
  00132	39 85 70 04 00
	00		 cmp	 DWORD PTR glyph_index$[rbp], eax
  00138	7c 19		 jl	 SHORT $LN8@stbtt__cid
  0013a	8b 45 74	 mov	 eax, DWORD PTR end$[rbp]
  0013d	39 85 70 04 00
	00		 cmp	 DWORD PTR glyph_index$[rbp], eax
  00143	7d 0e		 jge	 SHORT $LN8@stbtt__cid

; 2005 :             fdselector = v;

  00145	8b 85 94 00 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  0014b	89 85 d4 00 00
	00		 mov	 DWORD PTR fdselector$[rbp], eax

; 2006 :             break;

  00151	eb 08		 jmp	 SHORT $LN3@stbtt__cid
$LN8@stbtt__cid:

; 2007 :          }
; 2008 :          start = end;

  00153	8b 45 74	 mov	 eax, DWORD PTR end$[rbp]
  00156	89 45 54	 mov	 DWORD PTR start$[rbp], eax

; 2009 :       }

  00159	eb 98		 jmp	 SHORT $LN2@stbtt__cid
$LN3@stbtt__cid:
$LN7@stbtt__cid:
$LN6@stbtt__cid:

; 2010 :    }
; 2011 :    if (fdselector == -1) return stbtt__new_buf(NULL, 0); // [DEAR IMGUI] fixed, see #6007 and nothings/stb#1422

  0015b	83 bd d4 00 00
	00 ff		 cmp	 DWORD PTR fdselector$[rbp], -1
  00162	75 49		 jne	 SHORT $LN9@stbtt__cid
  00164	45 33 c0	 xor	 r8d, r8d
  00167	33 d2		 xor	 edx, edx
  00169	48 8d 8d c8 02
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00170	e8 00 00 00 00	 call	 ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
  00175	48 8d 8d 98 02
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  0017c	48 8b f9	 mov	 rdi, rcx
  0017f	48 8b f0	 mov	 rsi, rax
  00182	b9 10 00 00 00	 mov	 ecx, 16
  00187	f3 a4		 rep movsb
  00189	48 8d 85 98 02
	00 00		 lea	 rax, QWORD PTR $T4[rbp]
  00190	48 8b bd 60 04
	00 00		 mov	 rdi, QWORD PTR $T13[rbp]
  00197	48 8b f0	 mov	 rsi, rax
  0019a	b9 10 00 00 00	 mov	 ecx, 16
  0019f	f3 a4		 rep movsb
  001a1	48 8b 85 60 04
	00 00		 mov	 rax, QWORD PTR $T13[rbp]
  001a8	e9 d1 00 00 00	 jmp	 $LN1@stbtt__cid
$LN9@stbtt__cid:

; 2012 :    return stbtt__get_subrs(info->cff, stbtt__cff_index_get(info->fontdicts, fdselector));

  001ad	48 8d 85 c0 03
	00 00		 lea	 rax, QWORD PTR $T10[rbp]
  001b4	48 8b 8d 68 04
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  001bb	48 8b f8	 mov	 rdi, rax
  001be	48 8d b1 80 00
	00 00		 lea	 rsi, QWORD PTR [rcx+128]
  001c5	b9 10 00 00 00	 mov	 ecx, 16
  001ca	f3 a4		 rep movsb
  001cc	44 8b 85 d4 00
	00 00		 mov	 r8d, DWORD PTR fdselector$[rbp]
  001d3	48 8d 95 c0 03
	00 00		 lea	 rdx, QWORD PTR $T10[rbp]
  001da	48 8d 8d 58 03
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  001e1	e8 00 00 00 00	 call	 ?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
  001e6	48 8d 8d 28 03
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  001ed	48 8b f9	 mov	 rdi, rcx
  001f0	48 8b f0	 mov	 rsi, rax
  001f3	b9 10 00 00 00	 mov	 ecx, 16
  001f8	f3 a4		 rep movsb
  001fa	48 8d 85 20 04
	00 00		 lea	 rax, QWORD PTR $T12[rbp]
  00201	48 8d 8d 28 03
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00208	48 8b f8	 mov	 rdi, rax
  0020b	48 8b f1	 mov	 rsi, rcx
  0020e	b9 10 00 00 00	 mov	 ecx, 16
  00213	f3 a4		 rep movsb
  00215	48 8d 85 f0 03
	00 00		 lea	 rax, QWORD PTR $T11[rbp]
  0021c	48 8b 8d 68 04
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00223	48 8b f8	 mov	 rdi, rax
  00226	48 8d 71 40	 lea	 rsi, QWORD PTR [rcx+64]
  0022a	b9 10 00 00 00	 mov	 ecx, 16
  0022f	f3 a4		 rep movsb
  00231	4c 8d 85 20 04
	00 00		 lea	 r8, QWORD PTR $T12[rbp]
  00238	48 8d 95 f0 03
	00 00		 lea	 rdx, QWORD PTR $T11[rbp]
  0023f	48 8d 8d 88 03
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  00246	e8 00 00 00 00	 call	 ?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z ; stbtt__get_subrs
  0024b	48 8d 8d f8 02
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00252	48 8b f9	 mov	 rdi, rcx
  00255	48 8b f0	 mov	 rsi, rax
  00258	b9 10 00 00 00	 mov	 ecx, 16
  0025d	f3 a4		 rep movsb
  0025f	48 8d 85 f8 02
	00 00		 lea	 rax, QWORD PTR $T6[rbp]
  00266	48 8b bd 60 04
	00 00		 mov	 rdi, QWORD PTR $T13[rbp]
  0026d	48 8b f0	 mov	 rsi, rax
  00270	b9 10 00 00 00	 mov	 ecx, 16
  00275	f3 a4		 rep movsb
  00277	48 8b 85 60 04
	00 00		 mov	 rax, QWORD PTR $T13[rbp]
$LN1@stbtt__cid:

; 2013 : }

  0027e	48 8b f8	 mov	 rdi, rax
  00281	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00285	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z$rtcFrameData
  0028c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00291	48 8b c7	 mov	 rax, rdi
  00294	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0029b	48 33 cd	 xor	 rcx, rbp
  0029e	e8 00 00 00 00	 call	 __security_check_cookie
  002a3	48 8d a5 40 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1088]
  002aa	5f		 pop	 rdi
  002ab	5e		 pop	 rsi
  002ac	5d		 pop	 rbp
  002ad	c3		 ret	 0
?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z ENDP ; stbtt__cid_get_glyph_subrs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z
_TEXT	SEGMENT
count$ = 4
bias$ = 36
$T1 = 264
$T2 = 312
$T3 = 360
$T4 = 408
$T5 = 464
$T6 = 528
idx$ = 536
n$ = 544
?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z PROC		; stbtt__get_subr, COMDAT

; 1974 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 10 02
	00 00		 sub	 rsp, 528		; 00000210H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8b fc	 mov	 rdi, rsp
  00021	b9 84 00 00 00	 mov	 ecx, 132		; 00000084H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR [rsp+568]

; 1975 :    int count = stbtt__cff_index_count(&idx);

  00035	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR idx$[rbp]
  0003c	e8 00 00 00 00	 call	 ?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z ; stbtt__cff_index_count
  00041	89 45 04	 mov	 DWORD PTR count$[rbp], eax

; 1976 :    int bias = 107;

  00044	c7 45 24 6b 00
	00 00		 mov	 DWORD PTR bias$[rbp], 107 ; 0000006bH

; 1977 :    if (count >= 33900)

  0004b	81 7d 04 6c 84
	00 00		 cmp	 DWORD PTR count$[rbp], 33900 ; 0000846cH
  00052	7c 09		 jl	 SHORT $LN2@stbtt__get

; 1978 :       bias = 32768;

  00054	c7 45 24 00 80
	00 00		 mov	 DWORD PTR bias$[rbp], 32768 ; 00008000H
  0005b	eb 10		 jmp	 SHORT $LN3@stbtt__get
$LN2@stbtt__get:

; 1979 :    else if (count >= 1240)

  0005d	81 7d 04 d8 04
	00 00		 cmp	 DWORD PTR count$[rbp], 1240 ; 000004d8H
  00064	7c 07		 jl	 SHORT $LN4@stbtt__get

; 1980 :       bias = 1131;

  00066	c7 45 24 6b 04
	00 00		 mov	 DWORD PTR bias$[rbp], 1131 ; 0000046bH
$LN4@stbtt__get:
$LN3@stbtt__get:

; 1981 :    n += bias;

  0006d	8b 45 24	 mov	 eax, DWORD PTR bias$[rbp]
  00070	8b 8d 20 02 00
	00		 mov	 ecx, DWORD PTR n$[rbp]
  00076	03 c8		 add	 ecx, eax
  00078	8b c1		 mov	 eax, ecx
  0007a	89 85 20 02 00
	00		 mov	 DWORD PTR n$[rbp], eax

; 1982 :    if (n < 0 || n >= count)

  00080	83 bd 20 02 00
	00 00		 cmp	 DWORD PTR n$[rbp], 0
  00087	7c 0b		 jl	 SHORT $LN6@stbtt__get
  00089	8b 45 04	 mov	 eax, DWORD PTR count$[rbp]
  0008c	39 85 20 02 00
	00		 cmp	 DWORD PTR n$[rbp], eax
  00092	7c 46		 jl	 SHORT $LN5@stbtt__get
$LN6@stbtt__get:

; 1983 :       return stbtt__new_buf(NULL, 0);

  00094	45 33 c0	 xor	 r8d, r8d
  00097	33 d2		 xor	 edx, edx
  00099	48 8d 8d 38 01
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  000a0	e8 00 00 00 00	 call	 ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
  000a5	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  000ac	48 8b f9	 mov	 rdi, rcx
  000af	48 8b f0	 mov	 rsi, rax
  000b2	b9 10 00 00 00	 mov	 ecx, 16
  000b7	f3 a4		 rep movsb
  000b9	48 8d 85 08 01
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  000c0	48 8b bd 10 02
	00 00		 mov	 rdi, QWORD PTR $T6[rbp]
  000c7	48 8b f0	 mov	 rsi, rax
  000ca	b9 10 00 00 00	 mov	 ecx, 16
  000cf	f3 a4		 rep movsb
  000d1	48 8b 85 10 02
	00 00		 mov	 rax, QWORD PTR $T6[rbp]
  000d8	eb 65		 jmp	 SHORT $LN1@stbtt__get
$LN5@stbtt__get:

; 1984 :    return stbtt__cff_index_get(idx, n);

  000da	48 8d 85 d0 01
	00 00		 lea	 rax, QWORD PTR $T5[rbp]
  000e1	48 8b f8	 mov	 rdi, rax
  000e4	48 8b b5 18 02
	00 00		 mov	 rsi, QWORD PTR idx$[rbp]
  000eb	b9 10 00 00 00	 mov	 ecx, 16
  000f0	f3 a4		 rep movsb
  000f2	44 8b 85 20 02
	00 00		 mov	 r8d, DWORD PTR n$[rbp]
  000f9	48 8d 95 d0 01
	00 00		 lea	 rdx, QWORD PTR $T5[rbp]
  00100	48 8d 8d 98 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00107	e8 00 00 00 00	 call	 ?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
  0010c	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  00113	48 8b f9	 mov	 rdi, rcx
  00116	48 8b f0	 mov	 rsi, rax
  00119	b9 10 00 00 00	 mov	 ecx, 16
  0011e	f3 a4		 rep movsb
  00120	48 8d 85 68 01
	00 00		 lea	 rax, QWORD PTR $T3[rbp]
  00127	48 8b bd 10 02
	00 00		 mov	 rdi, QWORD PTR $T6[rbp]
  0012e	48 8b f0	 mov	 rsi, rax
  00131	b9 10 00 00 00	 mov	 ecx, 16
  00136	f3 a4		 rep movsb
  00138	48 8b 85 10 02
	00 00		 mov	 rax, QWORD PTR $T6[rbp]
$LN1@stbtt__get:

; 1985 : }

  0013f	48 8d a5 f0 01
	00 00		 lea	 rsp, QWORD PTR [rbp+496]
  00146	5f		 pop	 rdi
  00147	5e		 pop	 rsi
  00148	5d		 pop	 rbp
  00149	c3		 ret	 0
?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z ENDP		; stbtt__get_subr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z
_TEXT	SEGMENT
cx1$ = 4
cy1$ = 36
cx2$ = 68
cy2$ = 100
ctx$ = 352
dx1$ = 360
dy1$ = 368
dx2$ = 376
dy2$ = 384
dx3$ = 392
dy3$ = 400
?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z PROC ; stbtt__csctx_rccurve_to, COMDAT

; 1963 : {

  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00012	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00017	55		 push	 rbp
  00018	57		 push	 rdi
  00019	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00020	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00025	48 8b fc	 mov	 rdi, rsp
  00028	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  0002d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00032	f3 ab		 rep stosd
  00034	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]

; 1964 :    float cx1 = ctx->x + dx1;

  0003c	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  00043	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  00048	f3 0f 58 85 68
	01 00 00	 addss	 xmm0, DWORD PTR dx1$[rbp]
  00050	f3 0f 11 45 04	 movss	 DWORD PTR cx1$[rbp], xmm0

; 1965 :    float cy1 = ctx->y + dy1;

  00055	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  0005c	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  00061	f3 0f 58 85 70
	01 00 00	 addss	 xmm0, DWORD PTR dy1$[rbp]
  00069	f3 0f 11 45 24	 movss	 DWORD PTR cy1$[rbp], xmm0

; 1966 :    float cx2 = cx1 + dx2;

  0006e	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR cx1$[rbp]
  00073	f3 0f 58 85 78
	01 00 00	 addss	 xmm0, DWORD PTR dx2$[rbp]
  0007b	f3 0f 11 45 44	 movss	 DWORD PTR cx2$[rbp], xmm0

; 1967 :    float cy2 = cy1 + dy2;

  00080	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR cy1$[rbp]
  00085	f3 0f 58 85 80
	01 00 00	 addss	 xmm0, DWORD PTR dy2$[rbp]
  0008d	f3 0f 11 45 64	 movss	 DWORD PTR cy2$[rbp], xmm0

; 1968 :    ctx->x = cx2 + dx3;

  00092	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR cx2$[rbp]
  00097	f3 0f 58 85 88
	01 00 00	 addss	 xmm0, DWORD PTR dx3$[rbp]
  0009f	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  000a6	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0

; 1969 :    ctx->y = cy2 + dy3;

  000ab	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR cy2$[rbp]
  000b0	f3 0f 58 85 90
	01 00 00	 addss	 xmm0, DWORD PTR dy3$[rbp]
  000b8	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  000bf	f3 0f 11 40 14	 movss	 DWORD PTR [rax+20], xmm0

; 1970 :    stbtt__csctx_v(ctx, STBTT_vcubic, (int)ctx->x, (int)ctx->y, (int)cx1, (int)cy1, (int)cx2, (int)cy2);

  000c4	f3 0f 2c 45 64	 cvttss2si eax, DWORD PTR cy2$[rbp]
  000c9	f3 0f 2c 4d 44	 cvttss2si ecx, DWORD PTR cx2$[rbp]
  000ce	f3 0f 2c 55 24	 cvttss2si edx, DWORD PTR cy1$[rbp]
  000d3	f3 44 0f 2c 45
	04		 cvttss2si r8d, DWORD PTR cx1$[rbp]
  000d9	4c 8b 8d 60 01
	00 00		 mov	 r9, QWORD PTR ctx$[rbp]
  000e0	f3 45 0f 2c 49
	14		 cvttss2si r9d, DWORD PTR [r9+20]
  000e6	4c 8b 95 60 01
	00 00		 mov	 r10, QWORD PTR ctx$[rbp]
  000ed	f3 45 0f 2c 52
	10		 cvttss2si r10d, DWORD PTR [r10+16]
  000f3	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  000f7	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  000fb	89 54 24 28	 mov	 DWORD PTR [rsp+40], edx
  000ff	44 89 44 24 20	 mov	 DWORD PTR [rsp+32], r8d
  00104	45 8b c2	 mov	 r8d, r10d
  00107	b2 04		 mov	 dl, 4
  00109	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  00110	e8 00 00 00 00	 call	 ?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v

; 1971 : }

  00115	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  0011c	5f		 pop	 rdi
  0011d	5d		 pop	 rbp
  0011e	c3		 ret	 0
?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ENDP ; stbtt__csctx_rccurve_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z
_TEXT	SEGMENT
ctx$ = 224
dx$ = 232
dy$ = 240
?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z PROC	; stbtt__csctx_rline_to, COMDAT

; 1956 : {

  00000	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  00006	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  0000c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00011	55		 push	 rbp
  00012	57		 push	 rdi
  00013	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001a	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  0001f	48 8b fc	 mov	 rdi, rsp
  00022	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 1957 :    ctx->x += dx;

  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  0003d	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  00042	f3 0f 58 85 e8
	00 00 00	 addss	 xmm0, DWORD PTR dx$[rbp]
  0004a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  00051	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0

; 1958 :    ctx->y += dy;

  00056	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  0005d	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  00062	f3 0f 58 85 f0
	00 00 00	 addss	 xmm0, DWORD PTR dy$[rbp]
  0006a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  00071	f3 0f 11 40 14	 movss	 DWORD PTR [rax+20], xmm0

; 1959 :    stbtt__csctx_v(ctx, STBTT_vline, (int)ctx->x, (int)ctx->y, 0, 0, 0, 0);

  00076	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  0007d	f3 0f 2c 40 14	 cvttss2si eax, DWORD PTR [rax+20]
  00082	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  00089	f3 0f 2c 49 10	 cvttss2si ecx, DWORD PTR [rcx+16]
  0008e	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  00096	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0009e	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  000a6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  000ae	44 8b c8	 mov	 r9d, eax
  000b1	44 8b c1	 mov	 r8d, ecx
  000b4	b2 02		 mov	 dl, 2
  000b6	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  000bd	e8 00 00 00 00	 call	 ?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v

; 1960 : }

  000c2	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000c9	5f		 pop	 rdi
  000ca	5d		 pop	 rbp
  000cb	c3		 ret	 0
?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ENDP	; stbtt__csctx_rline_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z
_TEXT	SEGMENT
tv72 = 192
tv68 = 192
ctx$ = 240
dx$ = 248
dy$ = 256
?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z PROC	; stbtt__csctx_rmove_to, COMDAT

; 1948 : {

  00000	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  00006	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  0000c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00011	55		 push	 rbp
  00012	57		 push	 rdi
  00013	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001a	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  0001f	48 8b fc	 mov	 rdi, rsp
  00022	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]

; 1949 :    stbtt__csctx_close_shape(ctx);

  00036	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  0003d	e8 00 00 00 00	 call	 ?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z ; stbtt__csctx_close_shape

; 1950 :    ctx->first_x = ctx->x = ctx->x + dx;

  00042	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  00049	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  0004e	f3 0f 58 85 f8
	00 00 00	 addss	 xmm0, DWORD PTR dx$[rbp]
  00056	f3 0f 11 85 c0
	00 00 00	 movss	 DWORD PTR tv68[rbp], xmm0
  0005e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  00065	f3 0f 10 85 c0
	00 00 00	 movss	 xmm0, DWORD PTR tv68[rbp]
  0006d	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0
  00072	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  00079	f3 0f 10 85 c0
	00 00 00	 movss	 xmm0, DWORD PTR tv68[rbp]
  00081	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0

; 1951 :    ctx->first_y = ctx->y = ctx->y + dy;

  00086	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  0008d	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  00092	f3 0f 58 85 00
	01 00 00	 addss	 xmm0, DWORD PTR dy$[rbp]
  0009a	f3 0f 11 85 c0
	00 00 00	 movss	 DWORD PTR tv72[rbp], xmm0
  000a2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  000a9	f3 0f 10 85 c0
	00 00 00	 movss	 xmm0, DWORD PTR tv72[rbp]
  000b1	f3 0f 11 40 14	 movss	 DWORD PTR [rax+20], xmm0
  000b6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  000bd	f3 0f 10 85 c0
	00 00 00	 movss	 xmm0, DWORD PTR tv72[rbp]
  000c5	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0

; 1952 :    stbtt__csctx_v(ctx, STBTT_vmove, (int)ctx->x, (int)ctx->y, 0, 0, 0, 0);

  000ca	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  000d1	f3 0f 2c 40 14	 cvttss2si eax, DWORD PTR [rax+20]
  000d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  000dd	f3 0f 2c 49 10	 cvttss2si ecx, DWORD PTR [rcx+16]
  000e2	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  000ea	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  000f2	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  000fa	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00102	44 8b c8	 mov	 r9d, eax
  00105	44 8b c1	 mov	 r8d, ecx
  00108	b2 01		 mov	 dl, 1
  0010a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  00111	e8 00 00 00 00	 call	 ?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v

; 1953 : }

  00116	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0011d	5f		 pop	 rdi
  0011e	5d		 pop	 rbp
  0011f	c3		 ret	 0
?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ENDP	; stbtt__csctx_rmove_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z
_TEXT	SEGMENT
ctx$ = 224
?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z PROC	; stbtt__csctx_close_shape, COMDAT

; 1942 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 1943 :    if (ctx->first_x != ctx->x || ctx->first_y != ctx->y)

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  00031	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  00038	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  0003d	0f 2e 41 10	 ucomiss xmm0, DWORD PTR [rcx+16]
  00041	7a 1d		 jp	 SHORT $LN3@stbtt__csc
  00043	75 1b		 jne	 SHORT $LN3@stbtt__csc
  00045	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  00053	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [rax+12]
  00058	0f 2e 41 14	 ucomiss xmm0, DWORD PTR [rcx+20]
  0005c	7a 02		 jp	 SHORT $LN5@stbtt__csc
  0005e	74 4c		 je	 SHORT $LN2@stbtt__csc
$LN5@stbtt__csc:
$LN3@stbtt__csc:

; 1944 :       stbtt__csctx_v(ctx, STBTT_vline, (int)ctx->first_x, (int)ctx->first_y, 0, 0, 0, 0);

  00060	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  00067	f3 0f 2c 40 0c	 cvttss2si eax, DWORD PTR [rax+12]
  0006c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  00073	f3 0f 2c 49 08	 cvttss2si ecx, DWORD PTR [rcx+8]
  00078	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  00080	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00088	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00090	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00098	44 8b c8	 mov	 r9d, eax
  0009b	44 8b c1	 mov	 r8d, ecx
  0009e	b2 02		 mov	 dl, 2
  000a0	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  000a7	e8 00 00 00 00	 call	 ?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v
$LN2@stbtt__csc:

; 1945 : }

  000ac	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b3	5f		 pop	 rdi
  000b4	5d		 pop	 rbp
  000b5	c3		 ret	 0
?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z ENDP	; stbtt__csctx_close_shape
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z
_TEXT	SEGMENT
c$ = 224
type$ = 232
x$ = 240
y$ = 248
cx$ = 256
cy$ = 264
cx1$ = 272
cy1$ = 280
?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z PROC	; stbtt__csctx_v, COMDAT

; 1926 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001c	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 1927 :    if (c->bounds) {

  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  0003f	83 38 00	 cmp	 DWORD PTR [rax], 0
  00042	74 5c		 je	 SHORT $LN2@stbtt__csc

; 1928 :       stbtt__track_vertex(c, x, y);

  00044	44 8b 85 f8 00
	00 00		 mov	 r8d, DWORD PTR y$[rbp]
  0004b	8b 95 f0 00 00
	00		 mov	 edx, DWORD PTR x$[rbp]
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00058	e8 00 00 00 00	 call	 ?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ; stbtt__track_vertex

; 1929 :       if (type == STBTT_vcubic) {

  0005d	0f b6 85 e8 00
	00 00		 movzx	 eax, BYTE PTR type$[rbp]
  00064	83 f8 04	 cmp	 eax, 4
  00067	75 32		 jne	 SHORT $LN4@stbtt__csc

; 1930 :          stbtt__track_vertex(c, cx, cy);

  00069	44 8b 85 08 01
	00 00		 mov	 r8d, DWORD PTR cy$[rbp]
  00070	8b 95 00 01 00
	00		 mov	 edx, DWORD PTR cx$[rbp]
  00076	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  0007d	e8 00 00 00 00	 call	 ?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ; stbtt__track_vertex

; 1931 :          stbtt__track_vertex(c, cx1, cy1);

  00082	44 8b 85 18 01
	00 00		 mov	 r8d, DWORD PTR cy1$[rbp]
  00089	8b 95 10 01 00
	00		 mov	 edx, DWORD PTR cx1$[rbp]
  0008f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00096	e8 00 00 00 00	 call	 ?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ; stbtt__track_vertex
$LN4@stbtt__csc:

; 1932 :       }
; 1933 :    } else {

  0009b	e9 97 00 00 00	 jmp	 $LN3@stbtt__csc
$LN2@stbtt__csc:

; 1934 :       stbtt_setvertex(&c->pvertices[c->num_vertices], type, x, y, cx, cy);

  000a0	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  000a7	48 63 40 30	 movsxd	 rax, DWORD PTR [rax+48]
  000ab	48 6b c0 0e	 imul	 rax, rax, 14
  000af	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  000b6	48 03 41 28	 add	 rax, QWORD PTR [rcx+40]
  000ba	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR cy$[rbp]
  000c0	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  000c4	8b 8d 00 01 00
	00		 mov	 ecx, DWORD PTR cx$[rbp]
  000ca	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ce	44 8b 8d f8 00
	00 00		 mov	 r9d, DWORD PTR y$[rbp]
  000d5	44 8b 85 f0 00
	00 00		 mov	 r8d, DWORD PTR x$[rbp]
  000dc	0f b6 95 e8 00
	00 00		 movzx	 edx, BYTE PTR type$[rbp]
  000e3	48 8b c8	 mov	 rcx, rax
  000e6	e8 00 00 00 00	 call	 ?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex

; 1935 :       c->pvertices[c->num_vertices].cx1 = (stbtt_int16) cx1;

  000eb	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  000f2	48 63 40 30	 movsxd	 rax, DWORD PTR [rax+48]
  000f6	48 6b c0 0e	 imul	 rax, rax, 14
  000fa	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00101	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  00105	0f b7 95 10 01
	00 00		 movzx	 edx, WORD PTR cx1$[rbp]
  0010c	66 89 54 01 08	 mov	 WORD PTR [rcx+rax+8], dx

; 1936 :       c->pvertices[c->num_vertices].cy1 = (stbtt_int16) cy1;

  00111	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  00118	48 63 40 30	 movsxd	 rax, DWORD PTR [rax+48]
  0011c	48 6b c0 0e	 imul	 rax, rax, 14
  00120	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00127	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  0012b	0f b7 95 18 01
	00 00		 movzx	 edx, WORD PTR cy1$[rbp]
  00132	66 89 54 01 0a	 mov	 WORD PTR [rcx+rax+10], dx
$LN3@stbtt__csc:

; 1937 :    }
; 1938 :    c->num_vertices++;

  00137	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  0013e	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  00141	ff c0		 inc	 eax
  00143	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  0014a	89 41 30	 mov	 DWORD PTR [rcx+48], eax

; 1939 : }

  0014d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00154	5f		 pop	 rdi
  00155	5d		 pop	 rbp
  00156	c3		 ret	 0
?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ENDP	; stbtt__csctx_v
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z
_TEXT	SEGMENT
c$ = 224
x$ = 232
y$ = 240
?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z PROC	; stbtt__track_vertex, COMDAT

; 1917 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00017	48 8b ec	 mov	 rbp, rsp
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 1918 :    if (x > c->max_x || !c->started) c->max_x = x;

  00031	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  00038	8b 40 1c	 mov	 eax, DWORD PTR [rax+28]
  0003b	39 85 e8 00 00
	00		 cmp	 DWORD PTR x$[rbp], eax
  00041	7f 0d		 jg	 SHORT $LN3@stbtt__tra
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  0004a	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  0004e	75 10		 jne	 SHORT $LN2@stbtt__tra
$LN3@stbtt__tra:
  00050	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  00057	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR x$[rbp]
  0005d	89 48 1c	 mov	 DWORD PTR [rax+28], ecx
$LN2@stbtt__tra:

; 1919 :    if (y > c->max_y || !c->started) c->max_y = y;

  00060	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  00067	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  0006a	39 85 f0 00 00
	00		 cmp	 DWORD PTR y$[rbp], eax
  00070	7f 0d		 jg	 SHORT $LN5@stbtt__tra
  00072	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  00079	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  0007d	75 10		 jne	 SHORT $LN4@stbtt__tra
$LN5@stbtt__tra:
  0007f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  00086	8b 8d f0 00 00
	00		 mov	 ecx, DWORD PTR y$[rbp]
  0008c	89 48 24	 mov	 DWORD PTR [rax+36], ecx
$LN4@stbtt__tra:

; 1920 :    if (x < c->min_x || !c->started) c->min_x = x;

  0008f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  00096	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00099	39 85 e8 00 00
	00		 cmp	 DWORD PTR x$[rbp], eax
  0009f	7c 0d		 jl	 SHORT $LN7@stbtt__tra
  000a1	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  000a8	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  000ac	75 10		 jne	 SHORT $LN6@stbtt__tra
$LN7@stbtt__tra:
  000ae	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  000b5	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR x$[rbp]
  000bb	89 48 18	 mov	 DWORD PTR [rax+24], ecx
$LN6@stbtt__tra:

; 1921 :    if (y < c->min_y || !c->started) c->min_y = y;

  000be	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  000c5	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  000c8	39 85 f0 00 00
	00		 cmp	 DWORD PTR y$[rbp], eax
  000ce	7c 0d		 jl	 SHORT $LN9@stbtt__tra
  000d0	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  000d7	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  000db	75 10		 jne	 SHORT $LN8@stbtt__tra
$LN9@stbtt__tra:
  000dd	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  000e4	8b 8d f0 00 00
	00		 mov	 ecx, DWORD PTR y$[rbp]
  000ea	89 48 20	 mov	 DWORD PTR [rax+32], ecx
$LN8@stbtt__tra:

; 1922 :    c->started = 1;

  000ed	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  000f4	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [rax+4], 1

; 1923 : }

  000fb	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00102	5f		 pop	 rdi
  00103	5d		 pop	 rbp
  00104	c3		 ret	 0
?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ENDP	; stbtt__track_vertex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
_TEXT	SEGMENT
numberOfContours$ = 4
endPtsOfContours$ = 40
data$ = 72
vertices$ = 104
num_vertices$ = 132
g$ = 164
flags$5 = 196
flagcount$6 = 228
ins$7 = 260
i$8 = 292
j$9 = 324
m$10 = 356
n$11 = 388
next_move$12 = 420
was_off$13 = 452
off$14 = 484
start_off$15 = 516
x$16 = 548
y$17 = 580
cx$18 = 612
cy$19 = 644
sx$20 = 676
sy$21 = 708
scx$22 = 740
scy$23 = 772
points$24 = 808
dx$25 = 836
dy$26 = 868
more$27 = 900
comp$28 = 936
flags$29 = 964
gidx$30 = 996
comp_num_verts$31 = 1028
i$32 = 1060
comp_verts$33 = 1096
tmp$34 = 1128
mtx$35 = 1160
m$36 = 1204
n$37 = 1236
v$38 = 1272
x$39 = 1300
y$40 = 1332
tv486 = 1924
tv310 = 1924
tv221 = 1924
tv181 = 1924
tv413 = 1928
tv402 = 1928
tv390 = 1928
tv363 = 1928
__$ArrayPad$ = 1936
info$ = 1984
glyph_index$ = 1992
pvertices$ = 2000
?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z PROC ; stbtt__GetGlyphShapeTT, COMDAT

; 1680 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec f8 07
	00 00		 sub	 rsp, 2040		; 000007f8H
  00017	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 fe 01 00 00	 mov	 ecx, 510		; 000001feH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 18
	08 00 00	 mov	 rcx, QWORD PTR [rsp+2072]
  00033	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003a	48 33 c5	 xor	 rax, rbp
  0003d	48 89 85 90 07
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1681 :    stbtt_int16 numberOfContours;
; 1682 :    stbtt_uint8 *endPtsOfContours;
; 1683 :    stbtt_uint8 *data = info->data;

  00044	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  0004b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004f	48 89 45 48	 mov	 QWORD PTR data$[rbp], rax

; 1684 :    stbtt_vertex *vertices=0;

  00053	48 c7 45 68 00
	00 00 00	 mov	 QWORD PTR vertices$[rbp], 0

; 1685 :    int num_vertices=0;

  0005b	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR num_vertices$[rbp], 0

; 1686 :    int g = stbtt__GetGlyfOffset(info, glyph_index);

  00065	8b 95 c8 07 00
	00		 mov	 edx, DWORD PTR glyph_index$[rbp]
  0006b	48 8b 8d c0 07
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00072	e8 00 00 00 00	 call	 ?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z ; stbtt__GetGlyfOffset
  00077	89 85 a4 00 00
	00		 mov	 DWORD PTR g$[rbp], eax

; 1687 : 
; 1688 :    *pvertices = NULL;

  0007d	48 8b 85 d0 07
	00 00		 mov	 rax, QWORD PTR pvertices$[rbp]
  00084	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1689 : 
; 1690 :    if (g < 0) return 0;

  0008b	83 bd a4 00 00
	00 00		 cmp	 DWORD PTR g$[rbp], 0
  00092	7d 07		 jge	 SHORT $LN22@stbtt__Get
  00094	33 c0		 xor	 eax, eax
  00096	e9 09 13 00 00	 jmp	 $LN1@stbtt__Get
$LN22@stbtt__Get:

; 1691 : 
; 1692 :    numberOfContours = ttSHORT(data + g);

  0009b	48 63 85 a4 00
	00 00		 movsxd	 rax, DWORD PTR g$[rbp]
  000a2	48 8b 4d 48	 mov	 rcx, QWORD PTR data$[rbp]
  000a6	48 03 c8	 add	 rcx, rax
  000a9	48 8b c1	 mov	 rax, rcx
  000ac	48 8b c8	 mov	 rcx, rax
  000af	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  000b4	66 89 45 04	 mov	 WORD PTR numberOfContours$[rbp], ax

; 1693 : 
; 1694 :    if (numberOfContours > 0) {

  000b8	0f bf 45 04	 movsx	 eax, WORD PTR numberOfContours$[rbp]
  000bc	85 c0		 test	 eax, eax
  000be	0f 8e c8 09 00
	00		 jle	 $LN23@stbtt__Get

; 1695 :       stbtt_uint8 flags=0,flagcount;

  000c4	c6 85 c4 00 00
	00 00		 mov	 BYTE PTR flags$5[rbp], 0

; 1696 :       stbtt_int32 ins, i,j=0,m,n, next_move, was_off=0, off, start_off=0;

  000cb	c7 85 44 01 00
	00 00 00 00 00	 mov	 DWORD PTR j$9[rbp], 0
  000d5	c7 85 c4 01 00
	00 00 00 00 00	 mov	 DWORD PTR was_off$13[rbp], 0
  000df	c7 85 04 02 00
	00 00 00 00 00	 mov	 DWORD PTR start_off$15[rbp], 0

; 1697 :       stbtt_int32 x,y,cx,cy,sx,sy, scx,scy;
; 1698 :       stbtt_uint8 *points;
; 1699 :       endPtsOfContours = (data + g + 10);

  000e9	48 63 85 a4 00
	00 00		 movsxd	 rax, DWORD PTR g$[rbp]
  000f0	48 8b 4d 48	 mov	 rcx, QWORD PTR data$[rbp]
  000f4	48 8d 44 01 0a	 lea	 rax, QWORD PTR [rcx+rax+10]
  000f9	48 89 45 28	 mov	 QWORD PTR endPtsOfContours$[rbp], rax

; 1700 :       ins = ttUSHORT(data + g + 10 + numberOfContours * 2);

  000fd	48 63 85 a4 00
	00 00		 movsxd	 rax, DWORD PTR g$[rbp]
  00104	48 8b 4d 48	 mov	 rcx, QWORD PTR data$[rbp]
  00108	48 03 c8	 add	 rcx, rax
  0010b	48 8b c1	 mov	 rax, rcx
  0010e	0f bf 4d 04	 movsx	 ecx, WORD PTR numberOfContours$[rbp]
  00112	d1 e1		 shl	 ecx, 1
  00114	48 63 c9	 movsxd	 rcx, ecx
  00117	48 8d 44 08 0a	 lea	 rax, QWORD PTR [rax+rcx+10]
  0011c	48 8b c8	 mov	 rcx, rax
  0011f	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  00124	0f b7 c0	 movzx	 eax, ax
  00127	89 85 04 01 00
	00		 mov	 DWORD PTR ins$7[rbp], eax

; 1701 :       points = data + g + 10 + numberOfContours * 2 + 2 + ins;

  0012d	48 63 85 a4 00
	00 00		 movsxd	 rax, DWORD PTR g$[rbp]
  00134	48 8b 4d 48	 mov	 rcx, QWORD PTR data$[rbp]
  00138	48 03 c8	 add	 rcx, rax
  0013b	48 8b c1	 mov	 rax, rcx
  0013e	0f bf 4d 04	 movsx	 ecx, WORD PTR numberOfContours$[rbp]
  00142	d1 e1		 shl	 ecx, 1
  00144	48 63 c9	 movsxd	 rcx, ecx
  00147	48 8d 44 08 0a	 lea	 rax, QWORD PTR [rax+rcx+10]
  0014c	48 63 8d 04 01
	00 00		 movsxd	 rcx, DWORD PTR ins$7[rbp]
  00153	48 8d 44 08 02	 lea	 rax, QWORD PTR [rax+rcx+2]
  00158	48 89 85 28 03
	00 00		 mov	 QWORD PTR points$24[rbp], rax

; 1702 : 
; 1703 :       n = 1+ttUSHORT(endPtsOfContours + numberOfContours*2-2);

  0015f	0f bf 45 04	 movsx	 eax, WORD PTR numberOfContours$[rbp]
  00163	d1 e0		 shl	 eax, 1
  00165	48 98		 cdqe
  00167	48 8b 4d 28	 mov	 rcx, QWORD PTR endPtsOfContours$[rbp]
  0016b	48 8d 44 01 fe	 lea	 rax, QWORD PTR [rcx+rax-2]
  00170	48 8b c8	 mov	 rcx, rax
  00173	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  00178	0f b7 c0	 movzx	 eax, ax
  0017b	ff c0		 inc	 eax
  0017d	89 85 84 01 00
	00		 mov	 DWORD PTR n$11[rbp], eax

; 1704 : 
; 1705 :       m = n + 2*numberOfContours;  // a loose bound on how many vertices we might need

  00183	0f bf 45 04	 movsx	 eax, WORD PTR numberOfContours$[rbp]
  00187	8b 8d 84 01 00
	00		 mov	 ecx, DWORD PTR n$11[rbp]
  0018d	8d 04 41	 lea	 eax, DWORD PTR [rcx+rax*2]
  00190	89 85 64 01 00
	00		 mov	 DWORD PTR m$10[rbp], eax

; 1706 :       vertices = (stbtt_vertex *) STBTT_malloc(m * sizeof(vertices[0]), info->userdata);

  00196	48 63 85 64 01
	00 00		 movsxd	 rax, DWORD PTR m$10[rbp]
  0019d	48 6b c0 0e	 imul	 rax, rax, 14
  001a1	48 8b c8	 mov	 rcx, rax
  001a4	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  001a9	48 89 45 68	 mov	 QWORD PTR vertices$[rbp], rax

; 1707 :       if (vertices == 0)

  001ad	48 83 7d 68 00	 cmp	 QWORD PTR vertices$[rbp], 0
  001b2	75 07		 jne	 SHORT $LN25@stbtt__Get

; 1708 :          return 0;

  001b4	33 c0		 xor	 eax, eax
  001b6	e9 e9 11 00 00	 jmp	 $LN1@stbtt__Get
$LN25@stbtt__Get:

; 1709 : 
; 1710 :       next_move = 0;

  001bb	c7 85 a4 01 00
	00 00 00 00 00	 mov	 DWORD PTR next_move$12[rbp], 0

; 1711 :       flagcount=0;

  001c5	c6 85 e4 00 00
	00 00		 mov	 BYTE PTR flagcount$6[rbp], 0

; 1712 : 
; 1713 :       // in first pass, we load uninterpreted data into the allocated array
; 1714 :       // above, shifted to the end of the array so we won't overwrite it when
; 1715 :       // we create our final data starting from the front
; 1716 : 
; 1717 :       off = m - n; // starting offset for uninterpreted data, regardless of how m ends up being calculated

  001cc	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR n$11[rbp]
  001d2	8b 8d 64 01 00
	00		 mov	 ecx, DWORD PTR m$10[rbp]
  001d8	2b c8		 sub	 ecx, eax
  001da	8b c1		 mov	 eax, ecx
  001dc	89 85 e4 01 00
	00		 mov	 DWORD PTR off$14[rbp], eax

; 1718 : 
; 1719 :       // first load flags
; 1720 : 
; 1721 :       for (i=0; i < n; ++i) {

  001e2	c7 85 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$8[rbp], 0
  001ec	eb 0e		 jmp	 SHORT $LN4@stbtt__Get
$LN2@stbtt__Get:
  001ee	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR i$8[rbp]
  001f4	ff c0		 inc	 eax
  001f6	89 85 24 01 00
	00		 mov	 DWORD PTR i$8[rbp], eax
$LN4@stbtt__Get:
  001fc	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR n$11[rbp]
  00202	39 85 24 01 00
	00		 cmp	 DWORD PTR i$8[rbp], eax
  00208	0f 8d 96 00 00
	00		 jge	 $LN3@stbtt__Get

; 1722 :          if (flagcount == 0) {

  0020e	0f b6 85 e4 00
	00 00		 movzx	 eax, BYTE PTR flagcount$6[rbp]
  00215	85 c0		 test	 eax, eax
  00217	75 52		 jne	 SHORT $LN26@stbtt__Get

; 1723 :             flags = *points++;

  00219	48 8b 85 28 03
	00 00		 mov	 rax, QWORD PTR points$24[rbp]
  00220	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00223	88 85 c4 00 00
	00		 mov	 BYTE PTR flags$5[rbp], al
  00229	48 8b 85 28 03
	00 00		 mov	 rax, QWORD PTR points$24[rbp]
  00230	48 ff c0	 inc	 rax
  00233	48 89 85 28 03
	00 00		 mov	 QWORD PTR points$24[rbp], rax

; 1724 :             if (flags & 8)

  0023a	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR flags$5[rbp]
  00241	83 e0 08	 and	 eax, 8
  00244	85 c0		 test	 eax, eax
  00246	74 21		 je	 SHORT $LN28@stbtt__Get

; 1725 :                flagcount = *points++;

  00248	48 8b 85 28 03
	00 00		 mov	 rax, QWORD PTR points$24[rbp]
  0024f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00252	88 85 e4 00 00
	00		 mov	 BYTE PTR flagcount$6[rbp], al
  00258	48 8b 85 28 03
	00 00		 mov	 rax, QWORD PTR points$24[rbp]
  0025f	48 ff c0	 inc	 rax
  00262	48 89 85 28 03
	00 00		 mov	 QWORD PTR points$24[rbp], rax
$LN28@stbtt__Get:

; 1726 :          } else

  00269	eb 0f		 jmp	 SHORT $LN27@stbtt__Get
$LN26@stbtt__Get:

; 1727 :             --flagcount;

  0026b	0f b6 85 e4 00
	00 00		 movzx	 eax, BYTE PTR flagcount$6[rbp]
  00272	fe c8		 dec	 al
  00274	88 85 e4 00 00
	00		 mov	 BYTE PTR flagcount$6[rbp], al
$LN27@stbtt__Get:

; 1728 :          vertices[off+i].type = flags;

  0027a	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR i$8[rbp]
  00280	8b 8d e4 01 00
	00		 mov	 ecx, DWORD PTR off$14[rbp]
  00286	03 c8		 add	 ecx, eax
  00288	8b c1		 mov	 eax, ecx
  0028a	48 98		 cdqe
  0028c	48 6b c0 0e	 imul	 rax, rax, 14
  00290	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  00294	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR flags$5[rbp]
  0029b	88 54 01 0c	 mov	 BYTE PTR [rcx+rax+12], dl

; 1729 :       }

  0029f	e9 4a ff ff ff	 jmp	 $LN2@stbtt__Get
$LN3@stbtt__Get:

; 1730 : 
; 1731 :       // now load x coordinates
; 1732 :       x=0;

  002a4	c7 85 24 02 00
	00 00 00 00 00	 mov	 DWORD PTR x$16[rbp], 0

; 1733 :       for (i=0; i < n; ++i) {

  002ae	c7 85 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$8[rbp], 0
  002b8	eb 0e		 jmp	 SHORT $LN7@stbtt__Get
$LN5@stbtt__Get:
  002ba	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR i$8[rbp]
  002c0	ff c0		 inc	 eax
  002c2	89 85 24 01 00
	00		 mov	 DWORD PTR i$8[rbp], eax
$LN7@stbtt__Get:
  002c8	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR n$11[rbp]
  002ce	39 85 24 01 00
	00		 cmp	 DWORD PTR i$8[rbp], eax
  002d4	0f 8d 24 01 00
	00		 jge	 $LN6@stbtt__Get

; 1734 :          flags = vertices[off+i].type;

  002da	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR i$8[rbp]
  002e0	8b 8d e4 01 00
	00		 mov	 ecx, DWORD PTR off$14[rbp]
  002e6	03 c8		 add	 ecx, eax
  002e8	8b c1		 mov	 eax, ecx
  002ea	48 98		 cdqe
  002ec	48 6b c0 0e	 imul	 rax, rax, 14
  002f0	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  002f4	0f b6 44 01 0c	 movzx	 eax, BYTE PTR [rcx+rax+12]
  002f9	88 85 c4 00 00
	00		 mov	 BYTE PTR flags$5[rbp], al

; 1735 :          if (flags & 2) {

  002ff	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR flags$5[rbp]
  00306	83 e0 02	 and	 eax, 2
  00309	85 c0		 test	 eax, eax
  0030b	74 66		 je	 SHORT $LN29@stbtt__Get

; 1736 :             stbtt_int16 dx = *points++;

  0030d	48 8b 85 28 03
	00 00		 mov	 rax, QWORD PTR points$24[rbp]
  00314	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00317	66 89 85 44 03
	00 00		 mov	 WORD PTR dx$25[rbp], ax
  0031e	48 8b 85 28 03
	00 00		 mov	 rax, QWORD PTR points$24[rbp]
  00325	48 ff c0	 inc	 rax
  00328	48 89 85 28 03
	00 00		 mov	 QWORD PTR points$24[rbp], rax

; 1737 :             x += (flags & 16) ? dx : -dx; // ???

  0032f	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR flags$5[rbp]
  00336	83 e0 10	 and	 eax, 16
  00339	85 c0		 test	 eax, eax
  0033b	74 0f		 je	 SHORT $LN65@stbtt__Get
  0033d	0f bf 85 44 03
	00 00		 movsx	 eax, WORD PTR dx$25[rbp]
  00344	89 85 84 07 00
	00		 mov	 DWORD PTR tv181[rbp], eax
  0034a	eb 0f		 jmp	 SHORT $LN66@stbtt__Get
$LN65@stbtt__Get:
  0034c	0f bf 85 44 03
	00 00		 movsx	 eax, WORD PTR dx$25[rbp]
  00353	f7 d8		 neg	 eax
  00355	89 85 84 07 00
	00		 mov	 DWORD PTR tv181[rbp], eax
$LN66@stbtt__Get:
  0035b	8b 85 84 07 00
	00		 mov	 eax, DWORD PTR tv181[rbp]
  00361	8b 8d 24 02 00
	00		 mov	 ecx, DWORD PTR x$16[rbp]
  00367	03 c8		 add	 ecx, eax
  00369	8b c1		 mov	 eax, ecx
  0036b	89 85 24 02 00
	00		 mov	 DWORD PTR x$16[rbp], eax

; 1738 :          } else {

  00371	eb 61		 jmp	 SHORT $LN30@stbtt__Get
$LN29@stbtt__Get:

; 1739 :             if (!(flags & 16)) {

  00373	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR flags$5[rbp]
  0037a	83 e0 10	 and	 eax, 16
  0037d	85 c0		 test	 eax, eax
  0037f	75 53		 jne	 SHORT $LN31@stbtt__Get

; 1740 :                x = x + (stbtt_int16) (points[0]*256 + points[1]);

  00381	b8 01 00 00 00	 mov	 eax, 1
  00386	48 6b c0 00	 imul	 rax, rax, 0
  0038a	48 8b 8d 28 03
	00 00		 mov	 rcx, QWORD PTR points$24[rbp]
  00391	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00395	69 c0 00 01 00
	00		 imul	 eax, eax, 256		; 00000100H
  0039b	b9 01 00 00 00	 mov	 ecx, 1
  003a0	48 6b c9 01	 imul	 rcx, rcx, 1
  003a4	48 8b 95 28 03
	00 00		 mov	 rdx, QWORD PTR points$24[rbp]
  003ab	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  003af	03 c1		 add	 eax, ecx
  003b1	98		 cwde
  003b2	8b 8d 24 02 00
	00		 mov	 ecx, DWORD PTR x$16[rbp]
  003b8	03 c8		 add	 ecx, eax
  003ba	8b c1		 mov	 eax, ecx
  003bc	89 85 24 02 00
	00		 mov	 DWORD PTR x$16[rbp], eax

; 1741 :                points += 2;

  003c2	48 8b 85 28 03
	00 00		 mov	 rax, QWORD PTR points$24[rbp]
  003c9	48 83 c0 02	 add	 rax, 2
  003cd	48 89 85 28 03
	00 00		 mov	 QWORD PTR points$24[rbp], rax
$LN31@stbtt__Get:
$LN30@stbtt__Get:

; 1742 :             }
; 1743 :          }
; 1744 :          vertices[off+i].x = (stbtt_int16) x;

  003d4	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR i$8[rbp]
  003da	8b 8d e4 01 00
	00		 mov	 ecx, DWORD PTR off$14[rbp]
  003e0	03 c8		 add	 ecx, eax
  003e2	8b c1		 mov	 eax, ecx
  003e4	48 98		 cdqe
  003e6	48 6b c0 0e	 imul	 rax, rax, 14
  003ea	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  003ee	0f b7 95 24 02
	00 00		 movzx	 edx, WORD PTR x$16[rbp]
  003f5	66 89 14 01	 mov	 WORD PTR [rcx+rax], dx

; 1745 :       }

  003f9	e9 bc fe ff ff	 jmp	 $LN5@stbtt__Get
$LN6@stbtt__Get:

; 1746 : 
; 1747 :       // now load y coordinates
; 1748 :       y=0;

  003fe	c7 85 44 02 00
	00 00 00 00 00	 mov	 DWORD PTR y$17[rbp], 0

; 1749 :       for (i=0; i < n; ++i) {

  00408	c7 85 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$8[rbp], 0
  00412	eb 0e		 jmp	 SHORT $LN10@stbtt__Get
$LN8@stbtt__Get:
  00414	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR i$8[rbp]
  0041a	ff c0		 inc	 eax
  0041c	89 85 24 01 00
	00		 mov	 DWORD PTR i$8[rbp], eax
$LN10@stbtt__Get:
  00422	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR n$11[rbp]
  00428	39 85 24 01 00
	00		 cmp	 DWORD PTR i$8[rbp], eax
  0042e	0f 8d 25 01 00
	00		 jge	 $LN9@stbtt__Get

; 1750 :          flags = vertices[off+i].type;

  00434	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR i$8[rbp]
  0043a	8b 8d e4 01 00
	00		 mov	 ecx, DWORD PTR off$14[rbp]
  00440	03 c8		 add	 ecx, eax
  00442	8b c1		 mov	 eax, ecx
  00444	48 98		 cdqe
  00446	48 6b c0 0e	 imul	 rax, rax, 14
  0044a	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  0044e	0f b6 44 01 0c	 movzx	 eax, BYTE PTR [rcx+rax+12]
  00453	88 85 c4 00 00
	00		 mov	 BYTE PTR flags$5[rbp], al

; 1751 :          if (flags & 4) {

  00459	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR flags$5[rbp]
  00460	83 e0 04	 and	 eax, 4
  00463	85 c0		 test	 eax, eax
  00465	74 66		 je	 SHORT $LN32@stbtt__Get

; 1752 :             stbtt_int16 dy = *points++;

  00467	48 8b 85 28 03
	00 00		 mov	 rax, QWORD PTR points$24[rbp]
  0046e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00471	66 89 85 64 03
	00 00		 mov	 WORD PTR dy$26[rbp], ax
  00478	48 8b 85 28 03
	00 00		 mov	 rax, QWORD PTR points$24[rbp]
  0047f	48 ff c0	 inc	 rax
  00482	48 89 85 28 03
	00 00		 mov	 QWORD PTR points$24[rbp], rax

; 1753 :             y += (flags & 32) ? dy : -dy; // ???

  00489	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR flags$5[rbp]
  00490	83 e0 20	 and	 eax, 32			; 00000020H
  00493	85 c0		 test	 eax, eax
  00495	74 0f		 je	 SHORT $LN67@stbtt__Get
  00497	0f bf 85 64 03
	00 00		 movsx	 eax, WORD PTR dy$26[rbp]
  0049e	89 85 84 07 00
	00		 mov	 DWORD PTR tv221[rbp], eax
  004a4	eb 0f		 jmp	 SHORT $LN68@stbtt__Get
$LN67@stbtt__Get:
  004a6	0f bf 85 64 03
	00 00		 movsx	 eax, WORD PTR dy$26[rbp]
  004ad	f7 d8		 neg	 eax
  004af	89 85 84 07 00
	00		 mov	 DWORD PTR tv221[rbp], eax
$LN68@stbtt__Get:
  004b5	8b 85 84 07 00
	00		 mov	 eax, DWORD PTR tv221[rbp]
  004bb	8b 8d 44 02 00
	00		 mov	 ecx, DWORD PTR y$17[rbp]
  004c1	03 c8		 add	 ecx, eax
  004c3	8b c1		 mov	 eax, ecx
  004c5	89 85 44 02 00
	00		 mov	 DWORD PTR y$17[rbp], eax

; 1754 :          } else {

  004cb	eb 61		 jmp	 SHORT $LN33@stbtt__Get
$LN32@stbtt__Get:

; 1755 :             if (!(flags & 32)) {

  004cd	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR flags$5[rbp]
  004d4	83 e0 20	 and	 eax, 32			; 00000020H
  004d7	85 c0		 test	 eax, eax
  004d9	75 53		 jne	 SHORT $LN34@stbtt__Get

; 1756 :                y = y + (stbtt_int16) (points[0]*256 + points[1]);

  004db	b8 01 00 00 00	 mov	 eax, 1
  004e0	48 6b c0 00	 imul	 rax, rax, 0
  004e4	48 8b 8d 28 03
	00 00		 mov	 rcx, QWORD PTR points$24[rbp]
  004eb	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  004ef	69 c0 00 01 00
	00		 imul	 eax, eax, 256		; 00000100H
  004f5	b9 01 00 00 00	 mov	 ecx, 1
  004fa	48 6b c9 01	 imul	 rcx, rcx, 1
  004fe	48 8b 95 28 03
	00 00		 mov	 rdx, QWORD PTR points$24[rbp]
  00505	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00509	03 c1		 add	 eax, ecx
  0050b	98		 cwde
  0050c	8b 8d 44 02 00
	00		 mov	 ecx, DWORD PTR y$17[rbp]
  00512	03 c8		 add	 ecx, eax
  00514	8b c1		 mov	 eax, ecx
  00516	89 85 44 02 00
	00		 mov	 DWORD PTR y$17[rbp], eax

; 1757 :                points += 2;

  0051c	48 8b 85 28 03
	00 00		 mov	 rax, QWORD PTR points$24[rbp]
  00523	48 83 c0 02	 add	 rax, 2
  00527	48 89 85 28 03
	00 00		 mov	 QWORD PTR points$24[rbp], rax
$LN34@stbtt__Get:
$LN33@stbtt__Get:

; 1758 :             }
; 1759 :          }
; 1760 :          vertices[off+i].y = (stbtt_int16) y;

  0052e	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR i$8[rbp]
  00534	8b 8d e4 01 00
	00		 mov	 ecx, DWORD PTR off$14[rbp]
  0053a	03 c8		 add	 ecx, eax
  0053c	8b c1		 mov	 eax, ecx
  0053e	48 98		 cdqe
  00540	48 6b c0 0e	 imul	 rax, rax, 14
  00544	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  00548	0f b7 95 44 02
	00 00		 movzx	 edx, WORD PTR y$17[rbp]
  0054f	66 89 54 01 02	 mov	 WORD PTR [rcx+rax+2], dx

; 1761 :       }

  00554	e9 bb fe ff ff	 jmp	 $LN8@stbtt__Get
$LN9@stbtt__Get:

; 1762 : 
; 1763 :       // now convert them to our format
; 1764 :       num_vertices=0;

  00559	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR num_vertices$[rbp], 0

; 1765 :       sx = sy = cx = cy = scx = scy = 0;

  00563	c7 85 04 03 00
	00 00 00 00 00	 mov	 DWORD PTR scy$23[rbp], 0
  0056d	8b 85 04 03 00
	00		 mov	 eax, DWORD PTR scy$23[rbp]
  00573	89 85 e4 02 00
	00		 mov	 DWORD PTR scx$22[rbp], eax
  00579	8b 85 e4 02 00
	00		 mov	 eax, DWORD PTR scx$22[rbp]
  0057f	89 85 84 02 00
	00		 mov	 DWORD PTR cy$19[rbp], eax
  00585	8b 85 84 02 00
	00		 mov	 eax, DWORD PTR cy$19[rbp]
  0058b	89 85 64 02 00
	00		 mov	 DWORD PTR cx$18[rbp], eax
  00591	8b 85 64 02 00
	00		 mov	 eax, DWORD PTR cx$18[rbp]
  00597	89 85 c4 02 00
	00		 mov	 DWORD PTR sy$21[rbp], eax
  0059d	8b 85 c4 02 00
	00		 mov	 eax, DWORD PTR sy$21[rbp]
  005a3	89 85 a4 02 00
	00		 mov	 DWORD PTR sx$20[rbp], eax

; 1766 :       for (i=0; i < n; ++i) {

  005a9	c7 85 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$8[rbp], 0
  005b3	eb 0e		 jmp	 SHORT $LN13@stbtt__Get
$LN11@stbtt__Get:
  005b5	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR i$8[rbp]
  005bb	ff c0		 inc	 eax
  005bd	89 85 24 01 00
	00		 mov	 DWORD PTR i$8[rbp], eax
$LN13@stbtt__Get:
  005c3	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR n$11[rbp]
  005c9	39 85 24 01 00
	00		 cmp	 DWORD PTR i$8[rbp], eax
  005cf	0f 8d 53 04 00
	00		 jge	 $LN12@stbtt__Get

; 1767 :          flags = vertices[off+i].type;

  005d5	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR i$8[rbp]
  005db	8b 8d e4 01 00
	00		 mov	 ecx, DWORD PTR off$14[rbp]
  005e1	03 c8		 add	 ecx, eax
  005e3	8b c1		 mov	 eax, ecx
  005e5	48 98		 cdqe
  005e7	48 6b c0 0e	 imul	 rax, rax, 14
  005eb	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  005ef	0f b6 44 01 0c	 movzx	 eax, BYTE PTR [rcx+rax+12]
  005f4	88 85 c4 00 00
	00		 mov	 BYTE PTR flags$5[rbp], al

; 1768 :          x     = (stbtt_int16) vertices[off+i].x;

  005fa	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR i$8[rbp]
  00600	8b 8d e4 01 00
	00		 mov	 ecx, DWORD PTR off$14[rbp]
  00606	03 c8		 add	 ecx, eax
  00608	8b c1		 mov	 eax, ecx
  0060a	48 98		 cdqe
  0060c	48 6b c0 0e	 imul	 rax, rax, 14
  00610	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  00614	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  00618	89 85 24 02 00
	00		 mov	 DWORD PTR x$16[rbp], eax

; 1769 :          y     = (stbtt_int16) vertices[off+i].y;

  0061e	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR i$8[rbp]
  00624	8b 8d e4 01 00
	00		 mov	 ecx, DWORD PTR off$14[rbp]
  0062a	03 c8		 add	 ecx, eax
  0062c	8b c1		 mov	 eax, ecx
  0062e	48 98		 cdqe
  00630	48 6b c0 0e	 imul	 rax, rax, 14
  00634	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  00638	0f bf 44 01 02	 movsx	 eax, WORD PTR [rcx+rax+2]
  0063d	89 85 44 02 00
	00		 mov	 DWORD PTR y$17[rbp], eax

; 1770 : 
; 1771 :          if (next_move == i) {

  00643	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR i$8[rbp]
  00649	39 85 a4 01 00
	00		 cmp	 DWORD PTR next_move$12[rbp], eax
  0064f	0f 85 51 02 00
	00		 jne	 $LN35@stbtt__Get

; 1772 :             if (i != 0)

  00655	83 bd 24 01 00
	00 00		 cmp	 DWORD PTR i$8[rbp], 0
  0065c	74 5f		 je	 SHORT $LN37@stbtt__Get

; 1773 :                num_vertices = stbtt__close_shape(vertices, num_vertices, was_off, start_off, sx,sy,scx,scy,cx,cy);

  0065e	8b 85 84 02 00
	00		 mov	 eax, DWORD PTR cy$19[rbp]
  00664	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00668	8b 85 64 02 00
	00		 mov	 eax, DWORD PTR cx$18[rbp]
  0066e	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00672	8b 85 04 03 00
	00		 mov	 eax, DWORD PTR scy$23[rbp]
  00678	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0067c	8b 85 e4 02 00
	00		 mov	 eax, DWORD PTR scx$22[rbp]
  00682	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00686	8b 85 c4 02 00
	00		 mov	 eax, DWORD PTR sy$21[rbp]
  0068c	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00690	8b 85 a4 02 00
	00		 mov	 eax, DWORD PTR sx$20[rbp]
  00696	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0069a	44 8b 8d 04 02
	00 00		 mov	 r9d, DWORD PTR start_off$15[rbp]
  006a1	44 8b 85 c4 01
	00 00		 mov	 r8d, DWORD PTR was_off$13[rbp]
  006a8	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR num_vertices$[rbp]
  006ae	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  006b2	e8 00 00 00 00	 call	 ?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z ; stbtt__close_shape
  006b7	89 85 84 00 00
	00		 mov	 DWORD PTR num_vertices$[rbp], eax
$LN37@stbtt__Get:

; 1774 : 
; 1775 :             // now start the new one
; 1776 :             start_off = !(flags & 1);

  006bd	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR flags$5[rbp]
  006c4	83 e0 01	 and	 eax, 1
  006c7	85 c0		 test	 eax, eax
  006c9	75 0c		 jne	 SHORT $LN69@stbtt__Get
  006cb	c7 85 84 07 00
	00 01 00 00 00	 mov	 DWORD PTR tv310[rbp], 1
  006d5	eb 0a		 jmp	 SHORT $LN70@stbtt__Get
$LN69@stbtt__Get:
  006d7	c7 85 84 07 00
	00 00 00 00 00	 mov	 DWORD PTR tv310[rbp], 0
$LN70@stbtt__Get:
  006e1	8b 85 84 07 00
	00		 mov	 eax, DWORD PTR tv310[rbp]
  006e7	89 85 04 02 00
	00		 mov	 DWORD PTR start_off$15[rbp], eax

; 1777 :             if (start_off) {

  006ed	83 bd 04 02 00
	00 00		 cmp	 DWORD PTR start_off$15[rbp], 0
  006f4	0f 84 fa 00 00
	00		 je	 $LN38@stbtt__Get

; 1778 :                // if we start off with an off-curve point, then when we need to find a point on the curve
; 1779 :                // where we can start, and we need to save some state for when we wraparound.
; 1780 :                scx = x;

  006fa	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR x$16[rbp]
  00700	89 85 e4 02 00
	00		 mov	 DWORD PTR scx$22[rbp], eax

; 1781 :                scy = y;

  00706	8b 85 44 02 00
	00		 mov	 eax, DWORD PTR y$17[rbp]
  0070c	89 85 04 03 00
	00		 mov	 DWORD PTR scy$23[rbp], eax

; 1782 :                if (!(vertices[off+i+1].type & 1)) {

  00712	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR off$14[rbp]
  00718	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR i$8[rbp]
  0071e	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00722	48 98		 cdqe
  00724	48 6b c0 0e	 imul	 rax, rax, 14
  00728	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  0072c	0f b6 44 01 0c	 movzx	 eax, BYTE PTR [rcx+rax+12]
  00731	83 e0 01	 and	 eax, 1
  00734	85 c0		 test	 eax, eax
  00736	75 63		 jne	 SHORT $LN40@stbtt__Get

; 1783 :                   // next point is also a curve point, so interpolate an on-point curve
; 1784 :                   sx = (x + (stbtt_int32) vertices[off+i+1].x) >> 1;

  00738	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR off$14[rbp]
  0073e	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR i$8[rbp]
  00744	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00748	48 98		 cdqe
  0074a	48 6b c0 0e	 imul	 rax, rax, 14
  0074e	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  00752	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  00756	8b 8d 24 02 00
	00		 mov	 ecx, DWORD PTR x$16[rbp]
  0075c	03 c8		 add	 ecx, eax
  0075e	8b c1		 mov	 eax, ecx
  00760	d1 f8		 sar	 eax, 1
  00762	89 85 a4 02 00
	00		 mov	 DWORD PTR sx$20[rbp], eax

; 1785 :                   sy = (y + (stbtt_int32) vertices[off+i+1].y) >> 1;

  00768	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR off$14[rbp]
  0076e	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR i$8[rbp]
  00774	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00778	48 98		 cdqe
  0077a	48 6b c0 0e	 imul	 rax, rax, 14
  0077e	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  00782	0f bf 44 01 02	 movsx	 eax, WORD PTR [rcx+rax+2]
  00787	8b 8d 44 02 00
	00		 mov	 ecx, DWORD PTR y$17[rbp]
  0078d	03 c8		 add	 ecx, eax
  0078f	8b c1		 mov	 eax, ecx
  00791	d1 f8		 sar	 eax, 1
  00793	89 85 c4 02 00
	00		 mov	 DWORD PTR sy$21[rbp], eax

; 1786 :                } else {

  00799	eb 57		 jmp	 SHORT $LN41@stbtt__Get
$LN40@stbtt__Get:

; 1787 :                   // otherwise just use the next point as our start point
; 1788 :                   sx = (stbtt_int32) vertices[off+i+1].x;

  0079b	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR off$14[rbp]
  007a1	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR i$8[rbp]
  007a7	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  007ab	48 98		 cdqe
  007ad	48 6b c0 0e	 imul	 rax, rax, 14
  007b1	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  007b5	0f bf 04 01	 movsx	 eax, WORD PTR [rcx+rax]
  007b9	89 85 a4 02 00
	00		 mov	 DWORD PTR sx$20[rbp], eax

; 1789 :                   sy = (stbtt_int32) vertices[off+i+1].y;

  007bf	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR off$14[rbp]
  007c5	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR i$8[rbp]
  007cb	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  007cf	48 98		 cdqe
  007d1	48 6b c0 0e	 imul	 rax, rax, 14
  007d5	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  007d9	0f bf 44 01 02	 movsx	 eax, WORD PTR [rcx+rax+2]
  007de	89 85 c4 02 00
	00		 mov	 DWORD PTR sy$21[rbp], eax

; 1790 :                   ++i; // we're using point i+1 as the starting point, so skip it

  007e4	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR i$8[rbp]
  007ea	ff c0		 inc	 eax
  007ec	89 85 24 01 00
	00		 mov	 DWORD PTR i$8[rbp], eax
$LN41@stbtt__Get:

; 1791 :                }
; 1792 :             } else {

  007f2	eb 18		 jmp	 SHORT $LN39@stbtt__Get
$LN38@stbtt__Get:

; 1793 :                sx = x;

  007f4	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR x$16[rbp]
  007fa	89 85 a4 02 00
	00		 mov	 DWORD PTR sx$20[rbp], eax

; 1794 :                sy = y;

  00800	8b 85 44 02 00
	00		 mov	 eax, DWORD PTR y$17[rbp]
  00806	89 85 c4 02 00
	00		 mov	 DWORD PTR sy$21[rbp], eax
$LN39@stbtt__Get:

; 1795 :             }
; 1796 :             stbtt_setvertex(&vertices[num_vertices++], STBTT_vmove,sx,sy,0,0);

  0080c	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR num_vertices$[rbp]
  00813	48 6b c0 0e	 imul	 rax, rax, 14
  00817	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  0081b	48 03 c8	 add	 rcx, rax
  0081e	48 8b c1	 mov	 rax, rcx
  00821	48 89 85 88 07
	00 00		 mov	 QWORD PTR tv363[rbp], rax
  00828	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR num_vertices$[rbp]
  0082e	ff c0		 inc	 eax
  00830	89 85 84 00 00
	00		 mov	 DWORD PTR num_vertices$[rbp], eax
  00836	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0083e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00846	44 8b 8d c4 02
	00 00		 mov	 r9d, DWORD PTR sy$21[rbp]
  0084d	44 8b 85 a4 02
	00 00		 mov	 r8d, DWORD PTR sx$20[rbp]
  00854	b2 01		 mov	 dl, 1
  00856	48 8b 8d 88 07
	00 00		 mov	 rcx, QWORD PTR tv363[rbp]
  0085d	e8 00 00 00 00	 call	 ?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex

; 1797 :             was_off = 0;

  00862	c7 85 c4 01 00
	00 00 00 00 00	 mov	 DWORD PTR was_off$13[rbp], 0

; 1798 :             next_move = 1 + ttUSHORT(endPtsOfContours+j*2);

  0086c	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR j$9[rbp]
  00872	d1 e0		 shl	 eax, 1
  00874	48 98		 cdqe
  00876	48 8b 4d 28	 mov	 rcx, QWORD PTR endPtsOfContours$[rbp]
  0087a	48 03 c8	 add	 rcx, rax
  0087d	48 8b c1	 mov	 rax, rcx
  00880	48 8b c8	 mov	 rcx, rax
  00883	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  00888	0f b7 c0	 movzx	 eax, ax
  0088b	ff c0		 inc	 eax
  0088d	89 85 a4 01 00
	00		 mov	 DWORD PTR next_move$12[rbp], eax

; 1799 :             ++j;

  00893	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR j$9[rbp]
  00899	ff c0		 inc	 eax
  0089b	89 85 44 01 00
	00		 mov	 DWORD PTR j$9[rbp], eax

; 1800 :          } else {

  008a1	e9 7d 01 00 00	 jmp	 $LN36@stbtt__Get
$LN35@stbtt__Get:

; 1801 :             if (!(flags & 1)) { // if it's a curve

  008a6	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR flags$5[rbp]
  008ad	83 e0 01	 and	 eax, 1
  008b0	85 c0		 test	 eax, eax
  008b2	0f 85 a6 00 00
	00		 jne	 $LN42@stbtt__Get

; 1802 :                if (was_off) // two off-curve control points in a row means interpolate an on-curve midpoint

  008b8	83 bd c4 01 00
	00 00		 cmp	 DWORD PTR was_off$13[rbp], 0
  008bf	74 76		 je	 SHORT $LN44@stbtt__Get

; 1803 :                   stbtt_setvertex(&vertices[num_vertices++], STBTT_vcurve, (cx+x)>>1, (cy+y)>>1, cx, cy);

  008c1	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR num_vertices$[rbp]
  008c8	48 6b c0 0e	 imul	 rax, rax, 14
  008cc	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  008d0	48 03 c8	 add	 rcx, rax
  008d3	48 8b c1	 mov	 rax, rcx
  008d6	48 89 85 88 07
	00 00		 mov	 QWORD PTR tv390[rbp], rax
  008dd	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR num_vertices$[rbp]
  008e3	ff c0		 inc	 eax
  008e5	89 85 84 00 00
	00		 mov	 DWORD PTR num_vertices$[rbp], eax
  008eb	8b 85 44 02 00
	00		 mov	 eax, DWORD PTR y$17[rbp]
  008f1	8b 8d 84 02 00
	00		 mov	 ecx, DWORD PTR cy$19[rbp]
  008f7	03 c8		 add	 ecx, eax
  008f9	8b c1		 mov	 eax, ecx
  008fb	d1 f8		 sar	 eax, 1
  008fd	8b 8d 24 02 00
	00		 mov	 ecx, DWORD PTR x$16[rbp]
  00903	8b 95 64 02 00
	00		 mov	 edx, DWORD PTR cx$18[rbp]
  00909	03 d1		 add	 edx, ecx
  0090b	8b ca		 mov	 ecx, edx
  0090d	d1 f9		 sar	 ecx, 1
  0090f	8b 95 84 02 00
	00		 mov	 edx, DWORD PTR cy$19[rbp]
  00915	89 54 24 28	 mov	 DWORD PTR [rsp+40], edx
  00919	8b 95 64 02 00
	00		 mov	 edx, DWORD PTR cx$18[rbp]
  0091f	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00923	44 8b c8	 mov	 r9d, eax
  00926	44 8b c1	 mov	 r8d, ecx
  00929	b2 03		 mov	 dl, 3
  0092b	48 8b 8d 88 07
	00 00		 mov	 rcx, QWORD PTR tv390[rbp]
  00932	e8 00 00 00 00	 call	 ?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN44@stbtt__Get:

; 1804 :                cx = x;

  00937	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR x$16[rbp]
  0093d	89 85 64 02 00
	00		 mov	 DWORD PTR cx$18[rbp], eax

; 1805 :                cy = y;

  00943	8b 85 44 02 00
	00		 mov	 eax, DWORD PTR y$17[rbp]
  00949	89 85 84 02 00
	00		 mov	 DWORD PTR cy$19[rbp], eax

; 1806 :                was_off = 1;

  0094f	c7 85 c4 01 00
	00 01 00 00 00	 mov	 DWORD PTR was_off$13[rbp], 1

; 1807 :             } else {

  00959	e9 c5 00 00 00	 jmp	 $LN43@stbtt__Get
$LN42@stbtt__Get:

; 1808 :                if (was_off)

  0095e	83 bd c4 01 00
	00 00		 cmp	 DWORD PTR was_off$13[rbp], 0
  00965	74 5c		 je	 SHORT $LN45@stbtt__Get

; 1809 :                   stbtt_setvertex(&vertices[num_vertices++], STBTT_vcurve, x,y, cx, cy);

  00967	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR num_vertices$[rbp]
  0096e	48 6b c0 0e	 imul	 rax, rax, 14
  00972	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  00976	48 03 c8	 add	 rcx, rax
  00979	48 8b c1	 mov	 rax, rcx
  0097c	48 89 85 88 07
	00 00		 mov	 QWORD PTR tv402[rbp], rax
  00983	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR num_vertices$[rbp]
  00989	ff c0		 inc	 eax
  0098b	89 85 84 00 00
	00		 mov	 DWORD PTR num_vertices$[rbp], eax
  00991	8b 85 84 02 00
	00		 mov	 eax, DWORD PTR cy$19[rbp]
  00997	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0099b	8b 85 64 02 00
	00		 mov	 eax, DWORD PTR cx$18[rbp]
  009a1	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  009a5	44 8b 8d 44 02
	00 00		 mov	 r9d, DWORD PTR y$17[rbp]
  009ac	44 8b 85 24 02
	00 00		 mov	 r8d, DWORD PTR x$16[rbp]
  009b3	b2 03		 mov	 dl, 3
  009b5	48 8b 8d 88 07
	00 00		 mov	 rcx, QWORD PTR tv402[rbp]
  009bc	e8 00 00 00 00	 call	 ?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex

; 1810 :                else

  009c1	eb 56		 jmp	 SHORT $LN46@stbtt__Get
$LN45@stbtt__Get:

; 1811 :                   stbtt_setvertex(&vertices[num_vertices++], STBTT_vline, x,y,0,0);

  009c3	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR num_vertices$[rbp]
  009ca	48 6b c0 0e	 imul	 rax, rax, 14
  009ce	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  009d2	48 03 c8	 add	 rcx, rax
  009d5	48 8b c1	 mov	 rax, rcx
  009d8	48 89 85 88 07
	00 00		 mov	 QWORD PTR tv413[rbp], rax
  009df	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR num_vertices$[rbp]
  009e5	ff c0		 inc	 eax
  009e7	89 85 84 00 00
	00		 mov	 DWORD PTR num_vertices$[rbp], eax
  009ed	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  009f5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  009fd	44 8b 8d 44 02
	00 00		 mov	 r9d, DWORD PTR y$17[rbp]
  00a04	44 8b 85 24 02
	00 00		 mov	 r8d, DWORD PTR x$16[rbp]
  00a0b	b2 02		 mov	 dl, 2
  00a0d	48 8b 8d 88 07
	00 00		 mov	 rcx, QWORD PTR tv413[rbp]
  00a14	e8 00 00 00 00	 call	 ?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN46@stbtt__Get:

; 1812 :                was_off = 0;

  00a19	c7 85 c4 01 00
	00 00 00 00 00	 mov	 DWORD PTR was_off$13[rbp], 0
$LN43@stbtt__Get:
$LN36@stbtt__Get:

; 1813 :             }
; 1814 :          }
; 1815 :       }

  00a23	e9 8d fb ff ff	 jmp	 $LN11@stbtt__Get
$LN12@stbtt__Get:

; 1816 :       num_vertices = stbtt__close_shape(vertices, num_vertices, was_off, start_off, sx,sy,scx,scy,cx,cy);

  00a28	8b 85 84 02 00
	00		 mov	 eax, DWORD PTR cy$19[rbp]
  00a2e	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00a32	8b 85 64 02 00
	00		 mov	 eax, DWORD PTR cx$18[rbp]
  00a38	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00a3c	8b 85 04 03 00
	00		 mov	 eax, DWORD PTR scy$23[rbp]
  00a42	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00a46	8b 85 e4 02 00
	00		 mov	 eax, DWORD PTR scx$22[rbp]
  00a4c	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00a50	8b 85 c4 02 00
	00		 mov	 eax, DWORD PTR sy$21[rbp]
  00a56	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00a5a	8b 85 a4 02 00
	00		 mov	 eax, DWORD PTR sx$20[rbp]
  00a60	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00a64	44 8b 8d 04 02
	00 00		 mov	 r9d, DWORD PTR start_off$15[rbp]
  00a6b	44 8b 85 c4 01
	00 00		 mov	 r8d, DWORD PTR was_off$13[rbp]
  00a72	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR num_vertices$[rbp]
  00a78	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  00a7c	e8 00 00 00 00	 call	 ?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z ; stbtt__close_shape
  00a81	89 85 84 00 00
	00		 mov	 DWORD PTR num_vertices$[rbp], eax
  00a87	e9 04 09 00 00	 jmp	 $LN24@stbtt__Get
$LN23@stbtt__Get:

; 1817 :    } else if (numberOfContours < 0) {

  00a8c	0f bf 45 04	 movsx	 eax, WORD PTR numberOfContours$[rbp]
  00a90	85 c0		 test	 eax, eax
  00a92	0f 8d f8 08 00
	00		 jge	 $LN47@stbtt__Get

; 1818 :       // Compound shapes.
; 1819 :       int more = 1;

  00a98	c7 85 84 03 00
	00 01 00 00 00	 mov	 DWORD PTR more$27[rbp], 1

; 1820 :       stbtt_uint8 *comp = data + g + 10;

  00aa2	48 63 85 a4 00
	00 00		 movsxd	 rax, DWORD PTR g$[rbp]
  00aa9	48 8b 4d 48	 mov	 rcx, QWORD PTR data$[rbp]
  00aad	48 8d 44 01 0a	 lea	 rax, QWORD PTR [rcx+rax+10]
  00ab2	48 89 85 a8 03
	00 00		 mov	 QWORD PTR comp$28[rbp], rax

; 1821 :       num_vertices = 0;

  00ab9	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR num_vertices$[rbp], 0

; 1822 :       vertices = 0;

  00ac3	48 c7 45 68 00
	00 00 00	 mov	 QWORD PTR vertices$[rbp], 0
$LN14@stbtt__Get:

; 1823 :       while (more) {

  00acb	83 bd 84 03 00
	00 00		 cmp	 DWORD PTR more$27[rbp], 0
  00ad2	0f 84 b8 08 00
	00		 je	 $LN15@stbtt__Get

; 1824 :          stbtt_uint16 flags, gidx;
; 1825 :          int comp_num_verts = 0, i;

  00ad8	c7 85 04 04 00
	00 00 00 00 00	 mov	 DWORD PTR comp_num_verts$31[rbp], 0

; 1826 :          stbtt_vertex *comp_verts = 0, *tmp = 0;

  00ae2	48 c7 85 48 04
	00 00 00 00 00
	00		 mov	 QWORD PTR comp_verts$33[rbp], 0
  00aed	48 c7 85 68 04
	00 00 00 00 00
	00		 mov	 QWORD PTR tmp$34[rbp], 0

; 1827 :          float mtx[6] = {1,0,0,1,0,0}, m, n;

  00af8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00b00	f3 0f 11 85 88
	04 00 00	 movss	 DWORD PTR mtx$35[rbp], xmm0
  00b08	0f 57 c0	 xorps	 xmm0, xmm0
  00b0b	f3 0f 11 85 8c
	04 00 00	 movss	 DWORD PTR mtx$35[rbp+4], xmm0
  00b13	0f 57 c0	 xorps	 xmm0, xmm0
  00b16	f3 0f 11 85 90
	04 00 00	 movss	 DWORD PTR mtx$35[rbp+8], xmm0
  00b1e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00b26	f3 0f 11 85 94
	04 00 00	 movss	 DWORD PTR mtx$35[rbp+12], xmm0
  00b2e	0f 57 c0	 xorps	 xmm0, xmm0
  00b31	f3 0f 11 85 98
	04 00 00	 movss	 DWORD PTR mtx$35[rbp+16], xmm0
  00b39	0f 57 c0	 xorps	 xmm0, xmm0
  00b3c	f3 0f 11 85 9c
	04 00 00	 movss	 DWORD PTR mtx$35[rbp+20], xmm0

; 1828 : 
; 1829 :          flags = ttSHORT(comp); comp+=2;

  00b44	48 8b 8d a8 03
	00 00		 mov	 rcx, QWORD PTR comp$28[rbp]
  00b4b	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  00b50	66 89 85 c4 03
	00 00		 mov	 WORD PTR flags$29[rbp], ax
  00b57	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR comp$28[rbp]
  00b5e	48 83 c0 02	 add	 rax, 2
  00b62	48 89 85 a8 03
	00 00		 mov	 QWORD PTR comp$28[rbp], rax

; 1830 :          gidx = ttSHORT(comp); comp+=2;

  00b69	48 8b 8d a8 03
	00 00		 mov	 rcx, QWORD PTR comp$28[rbp]
  00b70	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  00b75	66 89 85 e4 03
	00 00		 mov	 WORD PTR gidx$30[rbp], ax
  00b7c	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR comp$28[rbp]
  00b83	48 83 c0 02	 add	 rax, 2
  00b87	48 89 85 a8 03
	00 00		 mov	 QWORD PTR comp$28[rbp], rax

; 1831 : 
; 1832 :          if (flags & 2) { // XY values

  00b8e	0f b7 85 c4 03
	00 00		 movzx	 eax, WORD PTR flags$29[rbp]
  00b95	83 e0 02	 and	 eax, 2
  00b98	85 c0		 test	 eax, eax
  00b9a	0f 84 de 00 00
	00		 je	 $LN49@stbtt__Get

; 1833 :             if (flags & 1) { // shorts

  00ba0	0f b7 85 c4 03
	00 00		 movzx	 eax, WORD PTR flags$29[rbp]
  00ba7	83 e0 01	 and	 eax, 1
  00baa	85 c0		 test	 eax, eax
  00bac	74 6c		 je	 SHORT $LN51@stbtt__Get

; 1834 :                mtx[4] = ttSHORT(comp); comp+=2;

  00bae	48 8b 8d a8 03
	00 00		 mov	 rcx, QWORD PTR comp$28[rbp]
  00bb5	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  00bba	98		 cwde
  00bbb	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00bbf	b8 04 00 00 00	 mov	 eax, 4
  00bc4	48 6b c0 04	 imul	 rax, rax, 4
  00bc8	f3 0f 11 84 05
	88 04 00 00	 movss	 DWORD PTR mtx$35[rbp+rax], xmm0
  00bd1	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR comp$28[rbp]
  00bd8	48 83 c0 02	 add	 rax, 2
  00bdc	48 89 85 a8 03
	00 00		 mov	 QWORD PTR comp$28[rbp], rax

; 1835 :                mtx[5] = ttSHORT(comp); comp+=2;

  00be3	48 8b 8d a8 03
	00 00		 mov	 rcx, QWORD PTR comp$28[rbp]
  00bea	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  00bef	98		 cwde
  00bf0	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00bf4	b8 04 00 00 00	 mov	 eax, 4
  00bf9	48 6b c0 05	 imul	 rax, rax, 5
  00bfd	f3 0f 11 84 05
	88 04 00 00	 movss	 DWORD PTR mtx$35[rbp+rax], xmm0
  00c06	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR comp$28[rbp]
  00c0d	48 83 c0 02	 add	 rax, 2
  00c11	48 89 85 a8 03
	00 00		 mov	 QWORD PTR comp$28[rbp], rax

; 1836 :             } else {

  00c18	eb 62		 jmp	 SHORT $LN52@stbtt__Get
$LN51@stbtt__Get:

; 1837 :                mtx[4] = ttCHAR(comp); comp+=1;

  00c1a	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR comp$28[rbp]
  00c21	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00c24	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00c28	b8 04 00 00 00	 mov	 eax, 4
  00c2d	48 6b c0 04	 imul	 rax, rax, 4
  00c31	f3 0f 11 84 05
	88 04 00 00	 movss	 DWORD PTR mtx$35[rbp+rax], xmm0
  00c3a	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR comp$28[rbp]
  00c41	48 ff c0	 inc	 rax
  00c44	48 89 85 a8 03
	00 00		 mov	 QWORD PTR comp$28[rbp], rax

; 1838 :                mtx[5] = ttCHAR(comp); comp+=1;

  00c4b	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR comp$28[rbp]
  00c52	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00c55	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00c59	b8 04 00 00 00	 mov	 eax, 4
  00c5e	48 6b c0 05	 imul	 rax, rax, 5
  00c62	f3 0f 11 84 05
	88 04 00 00	 movss	 DWORD PTR mtx$35[rbp+rax], xmm0
  00c6b	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR comp$28[rbp]
  00c72	48 ff c0	 inc	 rax
  00c75	48 89 85 a8 03
	00 00		 mov	 QWORD PTR comp$28[rbp], rax
$LN52@stbtt__Get:

; 1839 :             }
; 1840 :          }
; 1841 :          else {

  00c7c	eb 30		 jmp	 SHORT $LN50@stbtt__Get
$LN49@stbtt__Get:
$LN18@stbtt__Get:

; 1842 :             // @TODO handle matching point
; 1843 :             STBTT_assert(0);

  00c7e	33 c0		 xor	 eax, eax
  00c80	85 c0		 test	 eax, eax
  00c82	75 24		 jne	 SHORT $LN71@stbtt__Get
  00c84	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z@4JA
  00c8a	05 a3 00 00 00	 add	 eax, 163		; 000000a3H
  00c8f	44 8b c0	 mov	 r8d, eax
  00c92	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00c99	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  00ca0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00ca6	33 c0		 xor	 eax, eax
$LN71@stbtt__Get:
  00ca8	33 c0		 xor	 eax, eax
  00caa	85 c0		 test	 eax, eax
  00cac	75 d0		 jne	 SHORT $LN18@stbtt__Get
$LN50@stbtt__Get:

; 1844 :          }
; 1845 :          if (flags & (1<<3)) { // WE_HAVE_A_SCALE

  00cae	0f b7 85 c4 03
	00 00		 movzx	 eax, WORD PTR flags$29[rbp]
  00cb5	83 e0 08	 and	 eax, 8
  00cb8	85 c0		 test	 eax, eax
  00cba	0f 84 96 00 00
	00		 je	 $LN53@stbtt__Get

; 1846 :             mtx[0] = mtx[3] = ttSHORT(comp)/16384.0f; comp+=2;

  00cc0	48 8b 8d a8 03
	00 00		 mov	 rcx, QWORD PTR comp$28[rbp]
  00cc7	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  00ccc	98		 cwde
  00ccd	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00cd1	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46800000
  00cd9	f3 0f 11 85 84
	07 00 00	 movss	 DWORD PTR tv486[rbp], xmm0
  00ce1	b8 04 00 00 00	 mov	 eax, 4
  00ce6	48 6b c0 03	 imul	 rax, rax, 3
  00cea	f3 0f 10 85 84
	07 00 00	 movss	 xmm0, DWORD PTR tv486[rbp]
  00cf2	f3 0f 11 84 05
	88 04 00 00	 movss	 DWORD PTR mtx$35[rbp+rax], xmm0
  00cfb	b8 04 00 00 00	 mov	 eax, 4
  00d00	48 6b c0 00	 imul	 rax, rax, 0
  00d04	f3 0f 10 85 84
	07 00 00	 movss	 xmm0, DWORD PTR tv486[rbp]
  00d0c	f3 0f 11 84 05
	88 04 00 00	 movss	 DWORD PTR mtx$35[rbp+rax], xmm0
  00d15	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR comp$28[rbp]
  00d1c	48 83 c0 02	 add	 rax, 2
  00d20	48 89 85 a8 03
	00 00		 mov	 QWORD PTR comp$28[rbp], rax

; 1847 :             mtx[1] = mtx[2] = 0;

  00d27	b8 04 00 00 00	 mov	 eax, 4
  00d2c	48 6b c0 02	 imul	 rax, rax, 2
  00d30	0f 57 c0	 xorps	 xmm0, xmm0
  00d33	f3 0f 11 84 05
	88 04 00 00	 movss	 DWORD PTR mtx$35[rbp+rax], xmm0
  00d3c	b8 04 00 00 00	 mov	 eax, 4
  00d41	48 6b c0 01	 imul	 rax, rax, 1
  00d45	0f 57 c0	 xorps	 xmm0, xmm0
  00d48	f3 0f 11 84 05
	88 04 00 00	 movss	 DWORD PTR mtx$35[rbp+rax], xmm0
  00d51	e9 c3 01 00 00	 jmp	 $LN54@stbtt__Get
$LN53@stbtt__Get:

; 1848 :          } else if (flags & (1<<6)) { // WE_HAVE_AN_X_AND_YSCALE

  00d56	0f b7 85 c4 03
	00 00		 movzx	 eax, WORD PTR flags$29[rbp]
  00d5d	83 e0 40	 and	 eax, 64			; 00000040H
  00d60	85 c0		 test	 eax, eax
  00d62	0f 84 a9 00 00
	00		 je	 $LN55@stbtt__Get

; 1849 :             mtx[0] = ttSHORT(comp)/16384.0f; comp+=2;

  00d68	48 8b 8d a8 03
	00 00		 mov	 rcx, QWORD PTR comp$28[rbp]
  00d6f	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  00d74	98		 cwde
  00d75	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00d79	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46800000
  00d81	b8 04 00 00 00	 mov	 eax, 4
  00d86	48 6b c0 00	 imul	 rax, rax, 0
  00d8a	f3 0f 11 84 05
	88 04 00 00	 movss	 DWORD PTR mtx$35[rbp+rax], xmm0
  00d93	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR comp$28[rbp]
  00d9a	48 83 c0 02	 add	 rax, 2
  00d9e	48 89 85 a8 03
	00 00		 mov	 QWORD PTR comp$28[rbp], rax

; 1850 :             mtx[1] = mtx[2] = 0;

  00da5	b8 04 00 00 00	 mov	 eax, 4
  00daa	48 6b c0 02	 imul	 rax, rax, 2
  00dae	0f 57 c0	 xorps	 xmm0, xmm0
  00db1	f3 0f 11 84 05
	88 04 00 00	 movss	 DWORD PTR mtx$35[rbp+rax], xmm0
  00dba	b8 04 00 00 00	 mov	 eax, 4
  00dbf	48 6b c0 01	 imul	 rax, rax, 1
  00dc3	0f 57 c0	 xorps	 xmm0, xmm0
  00dc6	f3 0f 11 84 05
	88 04 00 00	 movss	 DWORD PTR mtx$35[rbp+rax], xmm0

; 1851 :             mtx[3] = ttSHORT(comp)/16384.0f; comp+=2;

  00dcf	48 8b 8d a8 03
	00 00		 mov	 rcx, QWORD PTR comp$28[rbp]
  00dd6	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  00ddb	98		 cwde
  00ddc	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00de0	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46800000
  00de8	b8 04 00 00 00	 mov	 eax, 4
  00ded	48 6b c0 03	 imul	 rax, rax, 3
  00df1	f3 0f 11 84 05
	88 04 00 00	 movss	 DWORD PTR mtx$35[rbp+rax], xmm0
  00dfa	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR comp$28[rbp]
  00e01	48 83 c0 02	 add	 rax, 2
  00e05	48 89 85 a8 03
	00 00		 mov	 QWORD PTR comp$28[rbp], rax
  00e0c	e9 08 01 00 00	 jmp	 $LN56@stbtt__Get
$LN55@stbtt__Get:

; 1852 :          } else if (flags & (1<<7)) { // WE_HAVE_A_TWO_BY_TWO

  00e11	0f b7 85 c4 03
	00 00		 movzx	 eax, WORD PTR flags$29[rbp]
  00e18	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00e1d	85 c0		 test	 eax, eax
  00e1f	0f 84 f4 00 00
	00		 je	 $LN57@stbtt__Get

; 1853 :             mtx[0] = ttSHORT(comp)/16384.0f; comp+=2;

  00e25	48 8b 8d a8 03
	00 00		 mov	 rcx, QWORD PTR comp$28[rbp]
  00e2c	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  00e31	98		 cwde
  00e32	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00e36	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46800000
  00e3e	b8 04 00 00 00	 mov	 eax, 4
  00e43	48 6b c0 00	 imul	 rax, rax, 0
  00e47	f3 0f 11 84 05
	88 04 00 00	 movss	 DWORD PTR mtx$35[rbp+rax], xmm0
  00e50	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR comp$28[rbp]
  00e57	48 83 c0 02	 add	 rax, 2
  00e5b	48 89 85 a8 03
	00 00		 mov	 QWORD PTR comp$28[rbp], rax

; 1854 :             mtx[1] = ttSHORT(comp)/16384.0f; comp+=2;

  00e62	48 8b 8d a8 03
	00 00		 mov	 rcx, QWORD PTR comp$28[rbp]
  00e69	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  00e6e	98		 cwde
  00e6f	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00e73	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46800000
  00e7b	b8 04 00 00 00	 mov	 eax, 4
  00e80	48 6b c0 01	 imul	 rax, rax, 1
  00e84	f3 0f 11 84 05
	88 04 00 00	 movss	 DWORD PTR mtx$35[rbp+rax], xmm0
  00e8d	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR comp$28[rbp]
  00e94	48 83 c0 02	 add	 rax, 2
  00e98	48 89 85 a8 03
	00 00		 mov	 QWORD PTR comp$28[rbp], rax

; 1855 :             mtx[2] = ttSHORT(comp)/16384.0f; comp+=2;

  00e9f	48 8b 8d a8 03
	00 00		 mov	 rcx, QWORD PTR comp$28[rbp]
  00ea6	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  00eab	98		 cwde
  00eac	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00eb0	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46800000
  00eb8	b8 04 00 00 00	 mov	 eax, 4
  00ebd	48 6b c0 02	 imul	 rax, rax, 2
  00ec1	f3 0f 11 84 05
	88 04 00 00	 movss	 DWORD PTR mtx$35[rbp+rax], xmm0
  00eca	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR comp$28[rbp]
  00ed1	48 83 c0 02	 add	 rax, 2
  00ed5	48 89 85 a8 03
	00 00		 mov	 QWORD PTR comp$28[rbp], rax

; 1856 :             mtx[3] = ttSHORT(comp)/16384.0f; comp+=2;

  00edc	48 8b 8d a8 03
	00 00		 mov	 rcx, QWORD PTR comp$28[rbp]
  00ee3	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  00ee8	98		 cwde
  00ee9	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00eed	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46800000
  00ef5	b8 04 00 00 00	 mov	 eax, 4
  00efa	48 6b c0 03	 imul	 rax, rax, 3
  00efe	f3 0f 11 84 05
	88 04 00 00	 movss	 DWORD PTR mtx$35[rbp+rax], xmm0
  00f07	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR comp$28[rbp]
  00f0e	48 83 c0 02	 add	 rax, 2
  00f12	48 89 85 a8 03
	00 00		 mov	 QWORD PTR comp$28[rbp], rax
$LN57@stbtt__Get:
$LN56@stbtt__Get:
$LN54@stbtt__Get:

; 1857 :          }
; 1858 : 
; 1859 :          // Find transformation scales.
; 1860 :          m = (float) STBTT_sqrt(mtx[0]*mtx[0] + mtx[1]*mtx[1]);

  00f19	b8 04 00 00 00	 mov	 eax, 4
  00f1e	48 6b c0 00	 imul	 rax, rax, 0
  00f22	b9 04 00 00 00	 mov	 ecx, 4
  00f27	48 6b c9 00	 imul	 rcx, rcx, 0
  00f2b	f3 0f 10 84 05
	88 04 00 00	 movss	 xmm0, DWORD PTR mtx$35[rbp+rax]
  00f34	f3 0f 59 84 0d
	88 04 00 00	 mulss	 xmm0, DWORD PTR mtx$35[rbp+rcx]
  00f3d	b8 04 00 00 00	 mov	 eax, 4
  00f42	48 6b c0 01	 imul	 rax, rax, 1
  00f46	b9 04 00 00 00	 mov	 ecx, 4
  00f4b	48 6b c9 01	 imul	 rcx, rcx, 1
  00f4f	f3 0f 10 8c 05
	88 04 00 00	 movss	 xmm1, DWORD PTR mtx$35[rbp+rax]
  00f58	f3 0f 59 8c 0d
	88 04 00 00	 mulss	 xmm1, DWORD PTR mtx$35[rbp+rcx]
  00f61	f3 0f 58 c1	 addss	 xmm0, xmm1
  00f65	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sqrtf
  00f6b	f3 0f 11 85 b4
	04 00 00	 movss	 DWORD PTR m$36[rbp], xmm0

; 1861 :          n = (float) STBTT_sqrt(mtx[2]*mtx[2] + mtx[3]*mtx[3]);

  00f73	b8 04 00 00 00	 mov	 eax, 4
  00f78	48 6b c0 02	 imul	 rax, rax, 2
  00f7c	b9 04 00 00 00	 mov	 ecx, 4
  00f81	48 6b c9 02	 imul	 rcx, rcx, 2
  00f85	f3 0f 10 84 05
	88 04 00 00	 movss	 xmm0, DWORD PTR mtx$35[rbp+rax]
  00f8e	f3 0f 59 84 0d
	88 04 00 00	 mulss	 xmm0, DWORD PTR mtx$35[rbp+rcx]
  00f97	b8 04 00 00 00	 mov	 eax, 4
  00f9c	48 6b c0 03	 imul	 rax, rax, 3
  00fa0	b9 04 00 00 00	 mov	 ecx, 4
  00fa5	48 6b c9 03	 imul	 rcx, rcx, 3
  00fa9	f3 0f 10 8c 05
	88 04 00 00	 movss	 xmm1, DWORD PTR mtx$35[rbp+rax]
  00fb2	f3 0f 59 8c 0d
	88 04 00 00	 mulss	 xmm1, DWORD PTR mtx$35[rbp+rcx]
  00fbb	f3 0f 58 c1	 addss	 xmm0, xmm1
  00fbf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sqrtf
  00fc5	f3 0f 11 85 d4
	04 00 00	 movss	 DWORD PTR n$37[rbp], xmm0

; 1862 : 
; 1863 :          // Get indexed glyph.
; 1864 :          comp_num_verts = stbtt_GetGlyphShape(info, gidx, &comp_verts);

  00fcd	0f b7 85 e4 03
	00 00		 movzx	 eax, WORD PTR gidx$30[rbp]
  00fd4	4c 8d 85 48 04
	00 00		 lea	 r8, QWORD PTR comp_verts$33[rbp]
  00fdb	8b d0		 mov	 edx, eax
  00fdd	48 8b 8d c0 07
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00fe4	e8 00 00 00 00	 call	 stbtt_GetGlyphShape
  00fe9	89 85 04 04 00
	00		 mov	 DWORD PTR comp_num_verts$31[rbp], eax

; 1865 :          if (comp_num_verts > 0) {

  00fef	83 bd 04 04 00
	00 00		 cmp	 DWORD PTR comp_num_verts$31[rbp], 0
  00ff6	0f 8e 7f 03 00
	00		 jle	 $LN58@stbtt__Get

; 1866 :             // Transform vertices.
; 1867 :             for (i = 0; i < comp_num_verts; ++i) {

  00ffc	c7 85 24 04 00
	00 00 00 00 00	 mov	 DWORD PTR i$32[rbp], 0
  01006	eb 0e		 jmp	 SHORT $LN21@stbtt__Get
$LN19@stbtt__Get:
  01008	8b 85 24 04 00
	00		 mov	 eax, DWORD PTR i$32[rbp]
  0100e	ff c0		 inc	 eax
  01010	89 85 24 04 00
	00		 mov	 DWORD PTR i$32[rbp], eax
$LN21@stbtt__Get:
  01016	8b 85 04 04 00
	00		 mov	 eax, DWORD PTR comp_num_verts$31[rbp]
  0101c	39 85 24 04 00
	00		 cmp	 DWORD PTR i$32[rbp], eax
  01022	0f 8d 5a 02 00
	00		 jge	 $LN20@stbtt__Get

; 1868 :                stbtt_vertex* v = &comp_verts[i];

  01028	48 63 85 24 04
	00 00		 movsxd	 rax, DWORD PTR i$32[rbp]
  0102f	48 6b c0 0e	 imul	 rax, rax, 14
  01033	48 8b 8d 48 04
	00 00		 mov	 rcx, QWORD PTR comp_verts$33[rbp]
  0103a	48 03 c8	 add	 rcx, rax
  0103d	48 8b c1	 mov	 rax, rcx
  01040	48 89 85 f8 04
	00 00		 mov	 QWORD PTR v$38[rbp], rax

; 1869 :                stbtt_vertex_type x,y;
; 1870 :                x=v->x; y=v->y;

  01047	48 8b 85 f8 04
	00 00		 mov	 rax, QWORD PTR v$38[rbp]
  0104e	0f b7 00	 movzx	 eax, WORD PTR [rax]
  01051	66 89 85 14 05
	00 00		 mov	 WORD PTR x$39[rbp], ax
  01058	48 8b 85 f8 04
	00 00		 mov	 rax, QWORD PTR v$38[rbp]
  0105f	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  01063	66 89 85 34 05
	00 00		 mov	 WORD PTR y$40[rbp], ax

; 1871 :                v->x = (stbtt_vertex_type)(m * (mtx[0]*x + mtx[2]*y + mtx[4]));

  0106a	b8 04 00 00 00	 mov	 eax, 4
  0106f	48 6b c0 00	 imul	 rax, rax, 0
  01073	0f bf 8d 14 05
	00 00		 movsx	 ecx, WORD PTR x$39[rbp]
  0107a	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0107e	f3 0f 10 8c 05
	88 04 00 00	 movss	 xmm1, DWORD PTR mtx$35[rbp+rax]
  01087	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0108b	0f 28 c1	 movaps	 xmm0, xmm1
  0108e	b8 04 00 00 00	 mov	 eax, 4
  01093	48 6b c0 02	 imul	 rax, rax, 2
  01097	0f bf 8d 34 05
	00 00		 movsx	 ecx, WORD PTR y$40[rbp]
  0109e	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  010a2	f3 0f 10 94 05
	88 04 00 00	 movss	 xmm2, DWORD PTR mtx$35[rbp+rax]
  010ab	f3 0f 59 d1	 mulss	 xmm2, xmm1
  010af	0f 28 ca	 movaps	 xmm1, xmm2
  010b2	f3 0f 58 c1	 addss	 xmm0, xmm1
  010b6	b8 04 00 00 00	 mov	 eax, 4
  010bb	48 6b c0 04	 imul	 rax, rax, 4
  010bf	f3 0f 58 84 05
	88 04 00 00	 addss	 xmm0, DWORD PTR mtx$35[rbp+rax]
  010c8	f3 0f 10 8d b4
	04 00 00	 movss	 xmm1, DWORD PTR m$36[rbp]
  010d0	f3 0f 59 c8	 mulss	 xmm1, xmm0
  010d4	0f 28 c1	 movaps	 xmm0, xmm1
  010d7	f3 0f 2c c0	 cvttss2si eax, xmm0
  010db	48 8b 8d f8 04
	00 00		 mov	 rcx, QWORD PTR v$38[rbp]
  010e2	66 89 01	 mov	 WORD PTR [rcx], ax

; 1872 :                v->y = (stbtt_vertex_type)(n * (mtx[1]*x + mtx[3]*y + mtx[5]));

  010e5	b8 04 00 00 00	 mov	 eax, 4
  010ea	48 6b c0 01	 imul	 rax, rax, 1
  010ee	0f bf 8d 14 05
	00 00		 movsx	 ecx, WORD PTR x$39[rbp]
  010f5	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  010f9	f3 0f 10 8c 05
	88 04 00 00	 movss	 xmm1, DWORD PTR mtx$35[rbp+rax]
  01102	f3 0f 59 c8	 mulss	 xmm1, xmm0
  01106	0f 28 c1	 movaps	 xmm0, xmm1
  01109	b8 04 00 00 00	 mov	 eax, 4
  0110e	48 6b c0 03	 imul	 rax, rax, 3
  01112	0f bf 8d 34 05
	00 00		 movsx	 ecx, WORD PTR y$40[rbp]
  01119	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  0111d	f3 0f 10 94 05
	88 04 00 00	 movss	 xmm2, DWORD PTR mtx$35[rbp+rax]
  01126	f3 0f 59 d1	 mulss	 xmm2, xmm1
  0112a	0f 28 ca	 movaps	 xmm1, xmm2
  0112d	f3 0f 58 c1	 addss	 xmm0, xmm1
  01131	b8 04 00 00 00	 mov	 eax, 4
  01136	48 6b c0 05	 imul	 rax, rax, 5
  0113a	f3 0f 58 84 05
	88 04 00 00	 addss	 xmm0, DWORD PTR mtx$35[rbp+rax]
  01143	f3 0f 10 8d d4
	04 00 00	 movss	 xmm1, DWORD PTR n$37[rbp]
  0114b	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0114f	0f 28 c1	 movaps	 xmm0, xmm1
  01152	f3 0f 2c c0	 cvttss2si eax, xmm0
  01156	48 8b 8d f8 04
	00 00		 mov	 rcx, QWORD PTR v$38[rbp]
  0115d	66 89 41 02	 mov	 WORD PTR [rcx+2], ax

; 1873 :                x=v->cx; y=v->cy;

  01161	48 8b 85 f8 04
	00 00		 mov	 rax, QWORD PTR v$38[rbp]
  01168	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0116c	66 89 85 14 05
	00 00		 mov	 WORD PTR x$39[rbp], ax
  01173	48 8b 85 f8 04
	00 00		 mov	 rax, QWORD PTR v$38[rbp]
  0117a	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0117e	66 89 85 34 05
	00 00		 mov	 WORD PTR y$40[rbp], ax

; 1874 :                v->cx = (stbtt_vertex_type)(m * (mtx[0]*x + mtx[2]*y + mtx[4]));

  01185	b8 04 00 00 00	 mov	 eax, 4
  0118a	48 6b c0 00	 imul	 rax, rax, 0
  0118e	0f bf 8d 14 05
	00 00		 movsx	 ecx, WORD PTR x$39[rbp]
  01195	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  01199	f3 0f 10 8c 05
	88 04 00 00	 movss	 xmm1, DWORD PTR mtx$35[rbp+rax]
  011a2	f3 0f 59 c8	 mulss	 xmm1, xmm0
  011a6	0f 28 c1	 movaps	 xmm0, xmm1
  011a9	b8 04 00 00 00	 mov	 eax, 4
  011ae	48 6b c0 02	 imul	 rax, rax, 2
  011b2	0f bf 8d 34 05
	00 00		 movsx	 ecx, WORD PTR y$40[rbp]
  011b9	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  011bd	f3 0f 10 94 05
	88 04 00 00	 movss	 xmm2, DWORD PTR mtx$35[rbp+rax]
  011c6	f3 0f 59 d1	 mulss	 xmm2, xmm1
  011ca	0f 28 ca	 movaps	 xmm1, xmm2
  011cd	f3 0f 58 c1	 addss	 xmm0, xmm1
  011d1	b8 04 00 00 00	 mov	 eax, 4
  011d6	48 6b c0 04	 imul	 rax, rax, 4
  011da	f3 0f 58 84 05
	88 04 00 00	 addss	 xmm0, DWORD PTR mtx$35[rbp+rax]
  011e3	f3 0f 10 8d b4
	04 00 00	 movss	 xmm1, DWORD PTR m$36[rbp]
  011eb	f3 0f 59 c8	 mulss	 xmm1, xmm0
  011ef	0f 28 c1	 movaps	 xmm0, xmm1
  011f2	f3 0f 2c c0	 cvttss2si eax, xmm0
  011f6	48 8b 8d f8 04
	00 00		 mov	 rcx, QWORD PTR v$38[rbp]
  011fd	66 89 41 04	 mov	 WORD PTR [rcx+4], ax

; 1875 :                v->cy = (stbtt_vertex_type)(n * (mtx[1]*x + mtx[3]*y + mtx[5]));

  01201	b8 04 00 00 00	 mov	 eax, 4
  01206	48 6b c0 01	 imul	 rax, rax, 1
  0120a	0f bf 8d 14 05
	00 00		 movsx	 ecx, WORD PTR x$39[rbp]
  01211	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  01215	f3 0f 10 8c 05
	88 04 00 00	 movss	 xmm1, DWORD PTR mtx$35[rbp+rax]
  0121e	f3 0f 59 c8	 mulss	 xmm1, xmm0
  01222	0f 28 c1	 movaps	 xmm0, xmm1
  01225	b8 04 00 00 00	 mov	 eax, 4
  0122a	48 6b c0 03	 imul	 rax, rax, 3
  0122e	0f bf 8d 34 05
	00 00		 movsx	 ecx, WORD PTR y$40[rbp]
  01235	f3 0f 2a c9	 cvtsi2ss xmm1, ecx
  01239	f3 0f 10 94 05
	88 04 00 00	 movss	 xmm2, DWORD PTR mtx$35[rbp+rax]
  01242	f3 0f 59 d1	 mulss	 xmm2, xmm1
  01246	0f 28 ca	 movaps	 xmm1, xmm2
  01249	f3 0f 58 c1	 addss	 xmm0, xmm1
  0124d	b8 04 00 00 00	 mov	 eax, 4
  01252	48 6b c0 05	 imul	 rax, rax, 5
  01256	f3 0f 58 84 05
	88 04 00 00	 addss	 xmm0, DWORD PTR mtx$35[rbp+rax]
  0125f	f3 0f 10 8d d4
	04 00 00	 movss	 xmm1, DWORD PTR n$37[rbp]
  01267	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0126b	0f 28 c1	 movaps	 xmm0, xmm1
  0126e	f3 0f 2c c0	 cvttss2si eax, xmm0
  01272	48 8b 8d f8 04
	00 00		 mov	 rcx, QWORD PTR v$38[rbp]
  01279	66 89 41 06	 mov	 WORD PTR [rcx+6], ax

; 1876 :             }

  0127d	e9 86 fd ff ff	 jmp	 $LN19@stbtt__Get
$LN20@stbtt__Get:

; 1877 :             // Append vertices.
; 1878 :             tmp = (stbtt_vertex*)STBTT_malloc((num_vertices+comp_num_verts)*sizeof(stbtt_vertex), info->userdata);

  01282	8b 85 04 04 00
	00		 mov	 eax, DWORD PTR comp_num_verts$31[rbp]
  01288	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR num_vertices$[rbp]
  0128e	03 c8		 add	 ecx, eax
  01290	8b c1		 mov	 eax, ecx
  01292	48 98		 cdqe
  01294	48 6b c0 0e	 imul	 rax, rax, 14
  01298	48 8b c8	 mov	 rcx, rax
  0129b	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  012a0	48 89 85 68 04
	00 00		 mov	 QWORD PTR tmp$34[rbp], rax

; 1879 :             if (!tmp) {

  012a7	48 83 bd 68 04
	00 00 00	 cmp	 QWORD PTR tmp$34[rbp], 0
  012af	75 2d		 jne	 SHORT $LN59@stbtt__Get

; 1880 :                if (vertices) STBTT_free(vertices, info->userdata);

  012b1	48 83 7d 68 00	 cmp	 QWORD PTR vertices$[rbp], 0
  012b6	74 09		 je	 SHORT $LN60@stbtt__Get
  012b8	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  012bc	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN60@stbtt__Get:

; 1881 :                if (comp_verts) STBTT_free(comp_verts, info->userdata);

  012c1	48 83 bd 48 04
	00 00 00	 cmp	 QWORD PTR comp_verts$33[rbp], 0
  012c9	74 0c		 je	 SHORT $LN61@stbtt__Get
  012cb	48 8b 8d 48 04
	00 00		 mov	 rcx, QWORD PTR comp_verts$33[rbp]
  012d2	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN61@stbtt__Get:

; 1882 :                return 0;

  012d7	33 c0		 xor	 eax, eax
  012d9	e9 c6 00 00 00	 jmp	 $LN1@stbtt__Get
$LN59@stbtt__Get:

; 1883 :             }
; 1884 :             if (num_vertices > 0 && vertices) STBTT_memcpy(tmp, vertices, num_vertices*sizeof(stbtt_vertex));

  012de	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR num_vertices$[rbp], 0
  012e5	7e 25		 jle	 SHORT $LN62@stbtt__Get
  012e7	48 83 7d 68 00	 cmp	 QWORD PTR vertices$[rbp], 0
  012ec	74 1e		 je	 SHORT $LN62@stbtt__Get
  012ee	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR num_vertices$[rbp]
  012f5	48 6b c0 0e	 imul	 rax, rax, 14
  012f9	4c 8b c0	 mov	 r8, rax
  012fc	48 8b 55 68	 mov	 rdx, QWORD PTR vertices$[rbp]
  01300	48 8b 8d 68 04
	00 00		 mov	 rcx, QWORD PTR tmp$34[rbp]
  01307	e8 00 00 00 00	 call	 memcpy
$LN62@stbtt__Get:

; 1885 :             STBTT_memcpy(tmp+num_vertices, comp_verts, comp_num_verts*sizeof(stbtt_vertex));

  0130c	48 63 85 04 04
	00 00		 movsxd	 rax, DWORD PTR comp_num_verts$31[rbp]
  01313	48 6b c0 0e	 imul	 rax, rax, 14
  01317	48 63 8d 84 00
	00 00		 movsxd	 rcx, DWORD PTR num_vertices$[rbp]
  0131e	48 6b c9 0e	 imul	 rcx, rcx, 14
  01322	48 8b 95 68 04
	00 00		 mov	 rdx, QWORD PTR tmp$34[rbp]
  01329	48 03 d1	 add	 rdx, rcx
  0132c	48 8b ca	 mov	 rcx, rdx
  0132f	4c 8b c0	 mov	 r8, rax
  01332	48 8b 95 48 04
	00 00		 mov	 rdx, QWORD PTR comp_verts$33[rbp]
  01339	e8 00 00 00 00	 call	 memcpy

; 1886 :             if (vertices) STBTT_free(vertices, info->userdata);

  0133e	48 83 7d 68 00	 cmp	 QWORD PTR vertices$[rbp], 0
  01343	74 09		 je	 SHORT $LN63@stbtt__Get
  01345	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  01349	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN63@stbtt__Get:

; 1887 :             vertices = tmp;

  0134e	48 8b 85 68 04
	00 00		 mov	 rax, QWORD PTR tmp$34[rbp]
  01355	48 89 45 68	 mov	 QWORD PTR vertices$[rbp], rax

; 1888 :             STBTT_free(comp_verts, info->userdata);

  01359	48 8b 8d 48 04
	00 00		 mov	 rcx, QWORD PTR comp_verts$33[rbp]
  01360	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree

; 1889 :             num_vertices += comp_num_verts;

  01365	8b 85 04 04 00
	00		 mov	 eax, DWORD PTR comp_num_verts$31[rbp]
  0136b	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR num_vertices$[rbp]
  01371	03 c8		 add	 ecx, eax
  01373	8b c1		 mov	 eax, ecx
  01375	89 85 84 00 00
	00		 mov	 DWORD PTR num_vertices$[rbp], eax
$LN58@stbtt__Get:

; 1890 :          }
; 1891 :          // More components ?
; 1892 :          more = flags & (1<<5);

  0137b	0f b7 85 c4 03
	00 00		 movzx	 eax, WORD PTR flags$29[rbp]
  01382	83 e0 20	 and	 eax, 32			; 00000020H
  01385	89 85 84 03 00
	00		 mov	 DWORD PTR more$27[rbp], eax

; 1893 :       }

  0138b	e9 3b f7 ff ff	 jmp	 $LN14@stbtt__Get
$LN15@stbtt__Get:
$LN47@stbtt__Get:
$LN24@stbtt__Get:

; 1894 :    } else {
; 1895 :       // numberOfCounters == 0, do nothing
; 1896 :    }
; 1897 : 
; 1898 :    *pvertices = vertices;

  01390	48 8b 85 d0 07
	00 00		 mov	 rax, QWORD PTR pvertices$[rbp]
  01397	48 8b 4d 68	 mov	 rcx, QWORD PTR vertices$[rbp]
  0139b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1899 :    return num_vertices;

  0139e	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR num_vertices$[rbp]
$LN1@stbtt__Get:

; 1900 : }

  013a4	48 8b f8	 mov	 rdi, rax
  013a7	48 8d 4d b0	 lea	 rcx, QWORD PTR [rbp-80]
  013ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcFrameData
  013b2	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  013b7	48 8b c7	 mov	 rax, rdi
  013ba	48 8b 8d 90 07
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  013c1	48 33 cd	 xor	 rcx, rbp
  013c4	e8 00 00 00 00	 call	 __security_check_cookie
  013c9	48 8d a5 a8 07
	00 00		 lea	 rsp, QWORD PTR [rbp+1960]
  013d0	5f		 pop	 rdi
  013d1	5d		 pop	 rbp
  013d2	c3		 ret	 0
?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ENDP ; stbtt__GetGlyphShapeTT
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z
_TEXT	SEGMENT
tv145 = 192
tv134 = 192
tv90 = 192
tv79 = 192
vertices$ = 240
num_vertices$ = 248
was_off$ = 256
start_off$ = 264
sx$ = 272
sy$ = 280
scx$ = 288
scy$ = 296
cx$ = 304
cy$ = 312
?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z PROC ; stbtt__close_shape, COMDAT

; 1665 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001c	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 1666 :    if (start_off) {

  00038	83 bd 08 01 00
	00 00		 cmp	 DWORD PTR start_off$[rbp], 0
  0003f	0f 84 e4 00 00
	00		 je	 $LN2@stbtt__clo

; 1667 :       if (was_off)

  00045	83 bd 00 01 00
	00 00		 cmp	 DWORD PTR was_off$[rbp], 0
  0004c	74 79		 je	 SHORT $LN4@stbtt__clo

; 1668 :          stbtt_setvertex(&vertices[num_vertices++], STBTT_vcurve, (cx+scx)>>1, (cy+scy)>>1, cx,cy);

  0004e	48 63 85 f8 00
	00 00		 movsxd	 rax, DWORD PTR num_vertices$[rbp]
  00055	48 6b c0 0e	 imul	 rax, rax, 14
  00059	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  00060	48 03 c8	 add	 rcx, rax
  00063	48 8b c1	 mov	 rax, rcx
  00066	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv79[rbp], rax
  0006d	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR num_vertices$[rbp]
  00073	ff c0		 inc	 eax
  00075	89 85 f8 00 00
	00		 mov	 DWORD PTR num_vertices$[rbp], eax
  0007b	8b 85 28 01 00
	00		 mov	 eax, DWORD PTR scy$[rbp]
  00081	8b 8d 38 01 00
	00		 mov	 ecx, DWORD PTR cy$[rbp]
  00087	03 c8		 add	 ecx, eax
  00089	8b c1		 mov	 eax, ecx
  0008b	d1 f8		 sar	 eax, 1
  0008d	8b 8d 20 01 00
	00		 mov	 ecx, DWORD PTR scx$[rbp]
  00093	8b 95 30 01 00
	00		 mov	 edx, DWORD PTR cx$[rbp]
  00099	03 d1		 add	 edx, ecx
  0009b	8b ca		 mov	 ecx, edx
  0009d	d1 f9		 sar	 ecx, 1
  0009f	8b 95 38 01 00
	00		 mov	 edx, DWORD PTR cy$[rbp]
  000a5	89 54 24 28	 mov	 DWORD PTR [rsp+40], edx
  000a9	8b 95 30 01 00
	00		 mov	 edx, DWORD PTR cx$[rbp]
  000af	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  000b3	44 8b c8	 mov	 r9d, eax
  000b6	44 8b c1	 mov	 r8d, ecx
  000b9	b2 03		 mov	 dl, 3
  000bb	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv79[rbp]
  000c2	e8 00 00 00 00	 call	 ?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN4@stbtt__clo:

; 1669 :       stbtt_setvertex(&vertices[num_vertices++], STBTT_vcurve, sx,sy,scx,scy);

  000c7	48 63 85 f8 00
	00 00		 movsxd	 rax, DWORD PTR num_vertices$[rbp]
  000ce	48 6b c0 0e	 imul	 rax, rax, 14
  000d2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  000d9	48 03 c8	 add	 rcx, rax
  000dc	48 8b c1	 mov	 rax, rcx
  000df	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv90[rbp], rax
  000e6	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR num_vertices$[rbp]
  000ec	ff c0		 inc	 eax
  000ee	89 85 f8 00 00
	00		 mov	 DWORD PTR num_vertices$[rbp], eax
  000f4	8b 85 28 01 00
	00		 mov	 eax, DWORD PTR scy$[rbp]
  000fa	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000fe	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR scx$[rbp]
  00104	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00108	44 8b 8d 18 01
	00 00		 mov	 r9d, DWORD PTR sy$[rbp]
  0010f	44 8b 85 10 01
	00 00		 mov	 r8d, DWORD PTR sx$[rbp]
  00116	b2 03		 mov	 dl, 3
  00118	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv90[rbp]
  0011f	e8 00 00 00 00	 call	 ?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex

; 1670 :    } else {

  00124	e9 c1 00 00 00	 jmp	 $LN3@stbtt__clo
$LN2@stbtt__clo:

; 1671 :       if (was_off)

  00129	83 bd 00 01 00
	00 00		 cmp	 DWORD PTR was_off$[rbp], 0
  00130	74 5f		 je	 SHORT $LN5@stbtt__clo

; 1672 :          stbtt_setvertex(&vertices[num_vertices++], STBTT_vcurve,sx,sy,cx,cy);

  00132	48 63 85 f8 00
	00 00		 movsxd	 rax, DWORD PTR num_vertices$[rbp]
  00139	48 6b c0 0e	 imul	 rax, rax, 14
  0013d	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  00144	48 03 c8	 add	 rcx, rax
  00147	48 8b c1	 mov	 rax, rcx
  0014a	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv134[rbp], rax
  00151	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR num_vertices$[rbp]
  00157	ff c0		 inc	 eax
  00159	89 85 f8 00 00
	00		 mov	 DWORD PTR num_vertices$[rbp], eax
  0015f	8b 85 38 01 00
	00		 mov	 eax, DWORD PTR cy$[rbp]
  00165	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00169	8b 85 30 01 00
	00		 mov	 eax, DWORD PTR cx$[rbp]
  0016f	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00173	44 8b 8d 18 01
	00 00		 mov	 r9d, DWORD PTR sy$[rbp]
  0017a	44 8b 85 10 01
	00 00		 mov	 r8d, DWORD PTR sx$[rbp]
  00181	b2 03		 mov	 dl, 3
  00183	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv134[rbp]
  0018a	e8 00 00 00 00	 call	 ?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex

; 1673 :       else

  0018f	eb 59		 jmp	 SHORT $LN6@stbtt__clo
$LN5@stbtt__clo:

; 1674 :          stbtt_setvertex(&vertices[num_vertices++], STBTT_vline,sx,sy,0,0);

  00191	48 63 85 f8 00
	00 00		 movsxd	 rax, DWORD PTR num_vertices$[rbp]
  00198	48 6b c0 0e	 imul	 rax, rax, 14
  0019c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  001a3	48 03 c8	 add	 rcx, rax
  001a6	48 8b c1	 mov	 rax, rcx
  001a9	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv145[rbp], rax
  001b0	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR num_vertices$[rbp]
  001b6	ff c0		 inc	 eax
  001b8	89 85 f8 00 00
	00		 mov	 DWORD PTR num_vertices$[rbp], eax
  001be	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  001c6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  001ce	44 8b 8d 18 01
	00 00		 mov	 r9d, DWORD PTR sy$[rbp]
  001d5	44 8b 85 10 01
	00 00		 mov	 r8d, DWORD PTR sx$[rbp]
  001dc	b2 02		 mov	 dl, 2
  001de	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv145[rbp]
  001e5	e8 00 00 00 00	 call	 ?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN6@stbtt__clo:
$LN3@stbtt__clo:

; 1675 :    }
; 1676 :    return num_vertices;

  001ea	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR num_vertices$[rbp]

; 1677 : }

  001f0	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  001f7	5f		 pop	 rdi
  001f8	5d		 pop	 rbp
  001f9	c3		 ret	 0
?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z ENDP ; stbtt__close_shape
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z
_TEXT	SEGMENT
c$ = 8
r$ = 84
tv81 = 292
tv79 = 292
tv76 = 292
tv73 = 292
tv70 = 292
__$ArrayPad$ = 296
info$ = 336
glyph_index$ = 344
x0$ = 352
y0$ = 360
x1$ = 368
y1$ = 376
?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z PROC ; stbtt__GetGlyphInfoT2, COMDAT

; 2292 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]
  00038	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003f	48 33 c5	 xor	 rax, rbp
  00042	48 89 85 28 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2293 :    stbtt__csctx c = STBTT__CSCTX_INIT(1);

  00049	c7 45 08 01 00
	00 00		 mov	 DWORD PTR c$[rbp], 1
  00050	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR c$[rbp+4], 0
  00057	0f 57 c0	 xorps	 xmm0, xmm0
  0005a	f3 0f 11 45 10	 movss	 DWORD PTR c$[rbp+8], xmm0
  0005f	0f 57 c0	 xorps	 xmm0, xmm0
  00062	f3 0f 11 45 14	 movss	 DWORD PTR c$[rbp+12], xmm0
  00067	0f 57 c0	 xorps	 xmm0, xmm0
  0006a	f3 0f 11 45 18	 movss	 DWORD PTR c$[rbp+16], xmm0
  0006f	0f 57 c0	 xorps	 xmm0, xmm0
  00072	f3 0f 11 45 1c	 movss	 DWORD PTR c$[rbp+20], xmm0
  00077	c7 45 20 00 00
	00 00		 mov	 DWORD PTR c$[rbp+24], 0
  0007e	c7 45 24 00 00
	00 00		 mov	 DWORD PTR c$[rbp+28], 0
  00085	c7 45 28 00 00
	00 00		 mov	 DWORD PTR c$[rbp+32], 0
  0008c	c7 45 2c 00 00
	00 00		 mov	 DWORD PTR c$[rbp+36], 0
  00093	48 c7 45 30 00
	00 00 00	 mov	 QWORD PTR c$[rbp+40], 0
  0009b	c7 45 38 00 00
	00 00		 mov	 DWORD PTR c$[rbp+48], 0

; 2294 :    int r = stbtt__run_charstring(info, glyph_index, &c);

  000a2	4c 8d 45 08	 lea	 r8, QWORD PTR c$[rbp]
  000a6	8b 95 58 01 00
	00		 mov	 edx, DWORD PTR glyph_index$[rbp]
  000ac	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  000b3	e8 00 00 00 00	 call	 ?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ; stbtt__run_charstring
  000b8	89 45 54	 mov	 DWORD PTR r$[rbp], eax

; 2295 :    if (x0)  *x0 = r ? c.min_x : 0;

  000bb	48 83 bd 60 01
	00 00 00	 cmp	 QWORD PTR x0$[rbp], 0
  000c3	74 2a		 je	 SHORT $LN2@stbtt__Get
  000c5	83 7d 54 00	 cmp	 DWORD PTR r$[rbp], 0
  000c9	74 0b		 je	 SHORT $LN7@stbtt__Get
  000cb	8b 45 20	 mov	 eax, DWORD PTR c$[rbp+24]
  000ce	89 85 24 01 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  000d4	eb 0a		 jmp	 SHORT $LN8@stbtt__Get
$LN7@stbtt__Get:
  000d6	c7 85 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv70[rbp], 0
$LN8@stbtt__Get:
  000e0	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR x0$[rbp]
  000e7	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR tv70[rbp]
  000ed	89 08		 mov	 DWORD PTR [rax], ecx
$LN2@stbtt__Get:

; 2296 :    if (y0)  *y0 = r ? c.min_y : 0;

  000ef	48 83 bd 68 01
	00 00 00	 cmp	 QWORD PTR y0$[rbp], 0
  000f7	74 2a		 je	 SHORT $LN3@stbtt__Get
  000f9	83 7d 54 00	 cmp	 DWORD PTR r$[rbp], 0
  000fd	74 0b		 je	 SHORT $LN9@stbtt__Get
  000ff	8b 45 28	 mov	 eax, DWORD PTR c$[rbp+32]
  00102	89 85 24 01 00
	00		 mov	 DWORD PTR tv73[rbp], eax
  00108	eb 0a		 jmp	 SHORT $LN10@stbtt__Get
$LN9@stbtt__Get:
  0010a	c7 85 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv73[rbp], 0
$LN10@stbtt__Get:
  00114	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR y0$[rbp]
  0011b	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR tv73[rbp]
  00121	89 08		 mov	 DWORD PTR [rax], ecx
$LN3@stbtt__Get:

; 2297 :    if (x1)  *x1 = r ? c.max_x : 0;

  00123	48 83 bd 70 01
	00 00 00	 cmp	 QWORD PTR x1$[rbp], 0
  0012b	74 2a		 je	 SHORT $LN4@stbtt__Get
  0012d	83 7d 54 00	 cmp	 DWORD PTR r$[rbp], 0
  00131	74 0b		 je	 SHORT $LN11@stbtt__Get
  00133	8b 45 24	 mov	 eax, DWORD PTR c$[rbp+28]
  00136	89 85 24 01 00
	00		 mov	 DWORD PTR tv76[rbp], eax
  0013c	eb 0a		 jmp	 SHORT $LN12@stbtt__Get
$LN11@stbtt__Get:
  0013e	c7 85 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv76[rbp], 0
$LN12@stbtt__Get:
  00148	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR x1$[rbp]
  0014f	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR tv76[rbp]
  00155	89 08		 mov	 DWORD PTR [rax], ecx
$LN4@stbtt__Get:

; 2298 :    if (y1)  *y1 = r ? c.max_y : 0;

  00157	48 83 bd 78 01
	00 00 00	 cmp	 QWORD PTR y1$[rbp], 0
  0015f	74 2a		 je	 SHORT $LN5@stbtt__Get
  00161	83 7d 54 00	 cmp	 DWORD PTR r$[rbp], 0
  00165	74 0b		 je	 SHORT $LN13@stbtt__Get
  00167	8b 45 2c	 mov	 eax, DWORD PTR c$[rbp+36]
  0016a	89 85 24 01 00
	00		 mov	 DWORD PTR tv79[rbp], eax
  00170	eb 0a		 jmp	 SHORT $LN14@stbtt__Get
$LN13@stbtt__Get:
  00172	c7 85 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv79[rbp], 0
$LN14@stbtt__Get:
  0017c	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR y1$[rbp]
  00183	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR tv79[rbp]
  00189	89 08		 mov	 DWORD PTR [rax], ecx
$LN5@stbtt__Get:

; 2299 :    return r ? c.num_vertices : 0;

  0018b	83 7d 54 00	 cmp	 DWORD PTR r$[rbp], 0
  0018f	74 0b		 je	 SHORT $LN15@stbtt__Get
  00191	8b 45 38	 mov	 eax, DWORD PTR c$[rbp+48]
  00194	89 85 24 01 00
	00		 mov	 DWORD PTR tv81[rbp], eax
  0019a	eb 0a		 jmp	 SHORT $LN16@stbtt__Get
$LN15@stbtt__Get:
  0019c	c7 85 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv81[rbp], 0
$LN16@stbtt__Get:
  001a6	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR tv81[rbp]

; 2300 : }

  001ac	8b f8		 mov	 edi, eax
  001ae	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  001b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z$rtcFrameData
  001b9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001be	8b c7		 mov	 eax, edi
  001c0	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001c7	48 33 cd	 xor	 rcx, rbp
  001ca	e8 00 00 00 00	 call	 __security_check_cookie
  001cf	48 8d a5 38 01
	00 00		 lea	 rsp, QWORD PTR [rbp+312]
  001d6	5f		 pop	 rdi
  001d7	5d		 pop	 rbp
  001d8	c3		 ret	 0
?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z ENDP ; stbtt__GetGlyphInfoT2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z
_TEXT	SEGMENT
g1$ = 4
g2$ = 36
tv162 = 244
info$ = 288
glyph_index$ = 296
?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z PROC	; stbtt__GetGlyfOffset, COMDAT

; 1609 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
$LN4@stbtt__Get:

; 1610 :    int g1,g2;
; 1611 : 
; 1612 :    STBTT_assert(!info->cff.size);

  0002e	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  00035	83 78 4c 00	 cmp	 DWORD PTR [rax+76], 0
  00039	74 22		 je	 SHORT $LN10@stbtt__Get
  0003b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z@4JA
  00041	83 c0 03	 add	 eax, 3
  00044	44 8b c0	 mov	 r8d, eax
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@MDABGEPC@?$AA?$CB?$AAi?$AAn?$AAf?$AAo?$AA?9?$AA?$DO?$AAc?$AAf?$AAf?$AA?4?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
  00055	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005b	33 c0		 xor	 eax, eax
$LN10@stbtt__Get:
  0005d	33 c0		 xor	 eax, eax
  0005f	85 c0		 test	 eax, eax
  00061	75 cb		 jne	 SHORT $LN4@stbtt__Get

; 1613 : 
; 1614 :    if (glyph_index >= info->numGlyphs) return -1; // glyph index out of range

  00063	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  0006a	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  0006d	39 85 28 01 00
	00		 cmp	 DWORD PTR glyph_index$[rbp], eax
  00073	7c 0a		 jl	 SHORT $LN5@stbtt__Get
  00075	b8 ff ff ff ff	 mov	 eax, -1
  0007a	e9 5e 01 00 00	 jmp	 $LN1@stbtt__Get
$LN5@stbtt__Get:

; 1615 :    if (info->indexToLocFormat >= 2)    return -1; // unknown index->glyph map format

  0007f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  00086	83 78 3c 02	 cmp	 DWORD PTR [rax+60], 2
  0008a	7c 0a		 jl	 SHORT $LN6@stbtt__Get
  0008c	b8 ff ff ff ff	 mov	 eax, -1
  00091	e9 47 01 00 00	 jmp	 $LN1@stbtt__Get
$LN6@stbtt__Get:

; 1616 : 
; 1617 :    if (info->indexToLocFormat == 0) {

  00096	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  0009d	83 78 3c 00	 cmp	 DWORD PTR [rax+60], 0
  000a1	0f 85 91 00 00
	00		 jne	 $LN7@stbtt__Get

; 1618 :       g1 = info->glyf + ttUSHORT(info->data + info->loca + glyph_index * 2) * 2;

  000a7	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  000ae	48 63 40 18	 movsxd	 rax, DWORD PTR [rax+24]
  000b2	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  000b9	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000bd	48 03 c8	 add	 rcx, rax
  000c0	48 8b c1	 mov	 rax, rcx
  000c3	8b 8d 28 01 00
	00		 mov	 ecx, DWORD PTR glyph_index$[rbp]
  000c9	d1 e1		 shl	 ecx, 1
  000cb	48 63 c9	 movsxd	 rcx, ecx
  000ce	48 03 c1	 add	 rax, rcx
  000d1	48 8b c8	 mov	 rcx, rax
  000d4	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  000d9	0f b7 c0	 movzx	 eax, ax
  000dc	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  000e3	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  000e6	8d 04 41	 lea	 eax, DWORD PTR [rcx+rax*2]
  000e9	89 45 04	 mov	 DWORD PTR g1$[rbp], eax

; 1619 :       g2 = info->glyf + ttUSHORT(info->data + info->loca + glyph_index * 2 + 2) * 2;

  000ec	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  000f3	48 63 40 18	 movsxd	 rax, DWORD PTR [rax+24]
  000f7	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  000fe	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00102	48 03 c8	 add	 rcx, rax
  00105	48 8b c1	 mov	 rax, rcx
  00108	8b 8d 28 01 00
	00		 mov	 ecx, DWORD PTR glyph_index$[rbp]
  0010e	d1 e1		 shl	 ecx, 1
  00110	48 63 c9	 movsxd	 rcx, ecx
  00113	48 8d 44 08 02	 lea	 rax, QWORD PTR [rax+rcx+2]
  00118	48 8b c8	 mov	 rcx, rax
  0011b	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  00120	0f b7 c0	 movzx	 eax, ax
  00123	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  0012a	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  0012d	8d 04 41	 lea	 eax, DWORD PTR [rcx+rax*2]
  00130	89 45 24	 mov	 DWORD PTR g2$[rbp], eax

; 1620 :    } else {

  00133	e9 82 00 00 00	 jmp	 $LN8@stbtt__Get
$LN7@stbtt__Get:

; 1621 :       g1 = info->glyf + ttULONG (info->data + info->loca + glyph_index * 4);

  00138	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  0013f	48 63 40 18	 movsxd	 rax, DWORD PTR [rax+24]
  00143	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  0014a	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0014e	48 03 c8	 add	 rcx, rax
  00151	48 8b c1	 mov	 rax, rcx
  00154	8b 8d 28 01 00
	00		 mov	 ecx, DWORD PTR glyph_index$[rbp]
  0015a	c1 e1 02	 shl	 ecx, 2
  0015d	48 63 c9	 movsxd	 rcx, ecx
  00160	48 03 c1	 add	 rax, rcx
  00163	48 8b c8	 mov	 rcx, rax
  00166	e8 00 00 00 00	 call	 ?ttULONG@@YAIPEAE@Z	; ttULONG
  0016b	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00172	03 41 20	 add	 eax, DWORD PTR [rcx+32]
  00175	89 45 04	 mov	 DWORD PTR g1$[rbp], eax

; 1622 :       g2 = info->glyf + ttULONG (info->data + info->loca + glyph_index * 4 + 4);

  00178	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  0017f	48 63 40 18	 movsxd	 rax, DWORD PTR [rax+24]
  00183	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  0018a	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0018e	48 03 c8	 add	 rcx, rax
  00191	48 8b c1	 mov	 rax, rcx
  00194	8b 8d 28 01 00
	00		 mov	 ecx, DWORD PTR glyph_index$[rbp]
  0019a	c1 e1 02	 shl	 ecx, 2
  0019d	48 63 c9	 movsxd	 rcx, ecx
  001a0	48 8d 44 08 04	 lea	 rax, QWORD PTR [rax+rcx+4]
  001a5	48 8b c8	 mov	 rcx, rax
  001a8	e8 00 00 00 00	 call	 ?ttULONG@@YAIPEAE@Z	; ttULONG
  001ad	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  001b4	03 41 20	 add	 eax, DWORD PTR [rcx+32]
  001b7	89 45 24	 mov	 DWORD PTR g2$[rbp], eax
$LN8@stbtt__Get:

; 1623 :    }
; 1624 : 
; 1625 :    return g1==g2 ? -1 : g1; // if length is 0, return -1

  001ba	8b 45 24	 mov	 eax, DWORD PTR g2$[rbp]
  001bd	39 45 04	 cmp	 DWORD PTR g1$[rbp], eax
  001c0	75 0c		 jne	 SHORT $LN11@stbtt__Get
  001c2	c7 85 f4 00 00
	00 ff ff ff ff	 mov	 DWORD PTR tv162[rbp], -1
  001cc	eb 09		 jmp	 SHORT $LN12@stbtt__Get
$LN11@stbtt__Get:
  001ce	8b 45 04	 mov	 eax, DWORD PTR g1$[rbp]
  001d1	89 85 f4 00 00
	00		 mov	 DWORD PTR tv162[rbp], eax
$LN12@stbtt__Get:
  001d7	8b 85 f4 00 00
	00		 mov	 eax, DWORD PTR tv162[rbp]
$LN1@stbtt__Get:

; 1626 : }

  001dd	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  001e4	5f		 pop	 rdi
  001e5	5d		 pop	 rbp
  001e6	c3		 ret	 0
?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z ENDP	; stbtt__GetGlyfOffset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z
_TEXT	SEGMENT
v$ = 224
type$ = 232
x$ = 240
y$ = 248
cx$ = 256
cy$ = 264
?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z PROC	; stbtt_setvertex, COMDAT

; 1600 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0001c	48 8b ec	 mov	 rbp, rsp
  0001f	48 8b fc	 mov	 rdi, rsp
  00022	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 1601 :    v->type = type;

  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  0003d	0f b6 8d e8 00
	00 00		 movzx	 ecx, BYTE PTR type$[rbp]
  00044	88 48 0c	 mov	 BYTE PTR [rax+12], cl

; 1602 :    v->x = (stbtt_int16) x;

  00047	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  0004e	0f b7 8d f0 00
	00 00		 movzx	 ecx, WORD PTR x$[rbp]
  00055	66 89 08	 mov	 WORD PTR [rax], cx

; 1603 :    v->y = (stbtt_int16) y;

  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  0005f	0f b7 8d f8 00
	00 00		 movzx	 ecx, WORD PTR y$[rbp]
  00066	66 89 48 02	 mov	 WORD PTR [rax+2], cx

; 1604 :    v->cx = (stbtt_int16) cx;

  0006a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  00071	0f b7 8d 00 01
	00 00		 movzx	 ecx, WORD PTR cx$[rbp]
  00078	66 89 48 04	 mov	 WORD PTR [rax+4], cx

; 1605 :    v->cy = (stbtt_int16) cy;

  0007c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  00083	0f b7 8d 08 01
	00 00		 movzx	 ecx, WORD PTR cy$[rbp]
  0008a	66 89 48 06	 mov	 WORD PTR [rax+6], cx

; 1606 : }

  0008e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00095	5f		 pop	 rdi
  00096	5d		 pop	 rbp
  00097	c3		 ret	 0
?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ENDP	; stbtt_setvertex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z
_TEXT	SEGMENT
cmap$ = 4
t$ = 36
i$ = 68
numTables$ = 100
b$10 = 136
topdict$11 = 184
topdictidx$12 = 232
cstype$13 = 276
charstrings$14 = 308
fdarrayoff$15 = 340
fdselectoff$16 = 372
cff$17 = 404
encoding_record$18 = 436
$T19 = 1240
$T20 = 1288
$T21 = 1336
$T22 = 1384
$T23 = 1432
$T24 = 1480
$T25 = 1528
$T26 = 1576
$T27 = 1624
$T28 = 1672
$T29 = 1720
$T30 = 1768
$T31 = 1816
$T32 = 1864
$T33 = 1912
$T34 = 1960
$T35 = 2008
$T36 = 2056
$T37 = 2104
$T38 = 2152
$T39 = 2200
$T40 = 2248
$T41 = 2296
$T42 = 2344
$T43 = 2392
$T44 = 2440
$T45 = 2496
$T46 = 2544
$T47 = 2592
tv328 = 2612
tv321 = 2612
__$ArrayPad$ = 2616
info$ = 2656
data$ = 2664
fontstart$ = 2672
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z PROC ; stbtt_InitFont_internal, COMDAT

; 1389 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 60 0a
	00 00		 sub	 rsp, 2656		; 00000a60H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8b fc	 mov	 rdi, rsp
  00021	b9 98 02 00 00	 mov	 ecx, 664		; 00000298H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 88
	0a 00 00	 mov	 rcx, QWORD PTR [rsp+2696]
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 38 0a
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1390 :    stbtt_uint32 cmap, t;
; 1391 :    stbtt_int32 i,numTables;
; 1392 : 
; 1393 :    info->data = data;

  00046	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  0004d	48 8b 8d 68 0a
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00054	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1394 :    info->fontstart = fontstart;

  00058	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  0005f	8b 8d 70 0a 00
	00		 mov	 ecx, DWORD PTR fontstart$[rbp]
  00065	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 1395 :    info->cff = stbtt__new_buf(NULL, 0);

  00068	45 33 c0	 xor	 r8d, r8d
  0006b	33 d2		 xor	 edx, edx
  0006d	48 8d 8d 08 05
	00 00		 lea	 rcx, QWORD PTR $T20[rbp]
  00074	e8 00 00 00 00	 call	 ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
  00079	48 8d 8d d8 04
	00 00		 lea	 rcx, QWORD PTR $T19[rbp]
  00080	48 8b f9	 mov	 rdi, rcx
  00083	48 8b f0	 mov	 rsi, rax
  00086	b9 10 00 00 00	 mov	 ecx, 16
  0008b	f3 a4		 rep movsb
  0008d	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  00094	48 8d 8d d8 04
	00 00		 lea	 rcx, QWORD PTR $T19[rbp]
  0009b	48 8d 78 40	 lea	 rdi, QWORD PTR [rax+64]
  0009f	48 8b f1	 mov	 rsi, rcx
  000a2	b9 10 00 00 00	 mov	 ecx, 16
  000a7	f3 a4		 rep movsb

; 1396 : 
; 1397 :    cmap = stbtt__find_table(data, fontstart, "cmap");       // required

  000a9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04EICJPCEA@cmap?$AA@
  000b0	8b 95 70 0a 00
	00		 mov	 edx, DWORD PTR fontstart$[rbp]
  000b6	48 8b 8d 68 0a
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000bd	e8 00 00 00 00	 call	 ?stbtt__find_table@@YAIPEAEIPEBD@Z ; stbtt__find_table
  000c2	89 45 04	 mov	 DWORD PTR cmap$[rbp], eax

; 1398 :    info->loca = stbtt__find_table(data, fontstart, "loca"); // required

  000c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04DACNFKGE@loca?$AA@
  000cc	8b 95 70 0a 00
	00		 mov	 edx, DWORD PTR fontstart$[rbp]
  000d2	48 8b 8d 68 0a
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000d9	e8 00 00 00 00	 call	 ?stbtt__find_table@@YAIPEAEIPEBD@Z ; stbtt__find_table
  000de	48 8b 8d 60 0a
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  000e5	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 1399 :    info->head = stbtt__find_table(data, fontstart, "head"); // required

  000e8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04NEODDMOL@head?$AA@
  000ef	8b 95 70 0a 00
	00		 mov	 edx, DWORD PTR fontstart$[rbp]
  000f5	48 8b 8d 68 0a
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000fc	e8 00 00 00 00	 call	 ?stbtt__find_table@@YAIPEAEIPEBD@Z ; stbtt__find_table
  00101	48 8b 8d 60 0a
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00108	89 41 1c	 mov	 DWORD PTR [rcx+28], eax

; 1400 :    info->glyf = stbtt__find_table(data, fontstart, "glyf"); // required

  0010b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04LLIHEPK@glyf?$AA@
  00112	8b 95 70 0a 00
	00		 mov	 edx, DWORD PTR fontstart$[rbp]
  00118	48 8b 8d 68 0a
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0011f	e8 00 00 00 00	 call	 ?stbtt__find_table@@YAIPEAEIPEBD@Z ; stbtt__find_table
  00124	48 8b 8d 60 0a
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  0012b	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 1401 :    info->hhea = stbtt__find_table(data, fontstart, "hhea"); // required

  0012e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04FMPHLIKP@hhea?$AA@
  00135	8b 95 70 0a 00
	00		 mov	 edx, DWORD PTR fontstart$[rbp]
  0013b	48 8b 8d 68 0a
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00142	e8 00 00 00 00	 call	 ?stbtt__find_table@@YAIPEAEIPEBD@Z ; stbtt__find_table
  00147	48 8b 8d 60 0a
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  0014e	89 41 24	 mov	 DWORD PTR [rcx+36], eax

; 1402 :    info->hmtx = stbtt__find_table(data, fontstart, "hmtx"); // required

  00151	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04ONMNCIMC@hmtx?$AA@
  00158	8b 95 70 0a 00
	00		 mov	 edx, DWORD PTR fontstart$[rbp]
  0015e	48 8b 8d 68 0a
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00165	e8 00 00 00 00	 call	 ?stbtt__find_table@@YAIPEAEIPEBD@Z ; stbtt__find_table
  0016a	48 8b 8d 60 0a
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00171	89 41 28	 mov	 DWORD PTR [rcx+40], eax

; 1403 :    info->kern = stbtt__find_table(data, fontstart, "kern"); // not required

  00174	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04HHMMLDJI@kern?$AA@
  0017b	8b 95 70 0a 00
	00		 mov	 edx, DWORD PTR fontstart$[rbp]
  00181	48 8b 8d 68 0a
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00188	e8 00 00 00 00	 call	 ?stbtt__find_table@@YAIPEAEIPEBD@Z ; stbtt__find_table
  0018d	48 8b 8d 60 0a
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00194	89 41 2c	 mov	 DWORD PTR [rcx+44], eax

; 1404 :    info->gpos = stbtt__find_table(data, fontstart, "GPOS"); // not required

  00197	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04PCFDEHHD@GPOS?$AA@
  0019e	8b 95 70 0a 00
	00		 mov	 edx, DWORD PTR fontstart$[rbp]
  001a4	48 8b 8d 68 0a
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001ab	e8 00 00 00 00	 call	 ?stbtt__find_table@@YAIPEAEIPEBD@Z ; stbtt__find_table
  001b0	48 8b 8d 60 0a
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  001b7	89 41 30	 mov	 DWORD PTR [rcx+48], eax

; 1405 : 
; 1406 :    if (!cmap || !info->head || !info->hhea || !info->hmtx)

  001ba	83 7d 04 00	 cmp	 DWORD PTR cmap$[rbp], 0
  001be	74 27		 je	 SHORT $LN10@stbtt_Init
  001c0	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  001c7	83 78 1c 00	 cmp	 DWORD PTR [rax+28], 0
  001cb	74 1a		 je	 SHORT $LN10@stbtt_Init
  001cd	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  001d4	83 78 24 00	 cmp	 DWORD PTR [rax+36], 0
  001d8	74 0d		 je	 SHORT $LN10@stbtt_Init
  001da	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  001e1	83 78 28 00	 cmp	 DWORD PTR [rax+40], 0
  001e5	75 07		 jne	 SHORT $LN9@stbtt_Init
$LN10@stbtt_Init:

; 1407 :       return 0;

  001e7	33 c0		 xor	 eax, eax
  001e9	e9 e9 06 00 00	 jmp	 $LN1@stbtt_Init
$LN9@stbtt_Init:

; 1408 :    if (info->glyf) {

  001ee	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  001f5	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  001f9	74 19		 je	 SHORT $LN11@stbtt_Init

; 1409 :       // required for truetype
; 1410 :       if (!info->loca) return 0;

  001fb	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  00202	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  00206	75 07		 jne	 SHORT $LN13@stbtt_Init
  00208	33 c0		 xor	 eax, eax
  0020a	e9 c8 06 00 00	 jmp	 $LN1@stbtt_Init
$LN13@stbtt_Init:

; 1411 :    } else {

  0020f	e9 f6 04 00 00	 jmp	 $LN12@stbtt_Init
$LN11@stbtt_Init:

; 1412 :       // initialization for CFF / Type2 fonts (OTF)
; 1413 :       stbtt__buf b, topdict, topdictidx;
; 1414 :       stbtt_uint32 cstype = 2, charstrings = 0, fdarrayoff = 0, fdselectoff = 0;

  00214	c7 85 14 01 00
	00 02 00 00 00	 mov	 DWORD PTR cstype$13[rbp], 2
  0021e	c7 85 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR charstrings$14[rbp], 0
  00228	c7 85 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR fdarrayoff$15[rbp], 0
  00232	c7 85 74 01 00
	00 00 00 00 00	 mov	 DWORD PTR fdselectoff$16[rbp], 0

; 1415 :       stbtt_uint32 cff;
; 1416 : 
; 1417 :       cff = stbtt__find_table(data, fontstart, "CFF ");

  0023c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04HJGCPIEK@CFF?5?$AA@
  00243	8b 95 70 0a 00
	00		 mov	 edx, DWORD PTR fontstart$[rbp]
  00249	48 8b 8d 68 0a
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00250	e8 00 00 00 00	 call	 ?stbtt__find_table@@YAIPEAEIPEBD@Z ; stbtt__find_table
  00255	89 85 94 01 00
	00		 mov	 DWORD PTR cff$17[rbp], eax

; 1418 :       if (!cff) return 0;

  0025b	83 bd 94 01 00
	00 00		 cmp	 DWORD PTR cff$17[rbp], 0
  00262	75 07		 jne	 SHORT $LN14@stbtt_Init
  00264	33 c0		 xor	 eax, eax
  00266	e9 6c 06 00 00	 jmp	 $LN1@stbtt_Init
$LN14@stbtt_Init:

; 1419 : 
; 1420 :       info->fontdicts = stbtt__new_buf(NULL, 0);

  0026b	45 33 c0	 xor	 r8d, r8d
  0026e	33 d2		 xor	 edx, edx
  00270	48 8d 8d 68 05
	00 00		 lea	 rcx, QWORD PTR $T22[rbp]
  00277	e8 00 00 00 00	 call	 ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
  0027c	48 8d 8d 38 05
	00 00		 lea	 rcx, QWORD PTR $T21[rbp]
  00283	48 8b f9	 mov	 rdi, rcx
  00286	48 8b f0	 mov	 rsi, rax
  00289	b9 10 00 00 00	 mov	 ecx, 16
  0028e	f3 a4		 rep movsb
  00290	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  00297	48 8d 8d 38 05
	00 00		 lea	 rcx, QWORD PTR $T21[rbp]
  0029e	48 8d b8 80 00
	00 00		 lea	 rdi, QWORD PTR [rax+128]
  002a5	48 8b f1	 mov	 rsi, rcx
  002a8	b9 10 00 00 00	 mov	 ecx, 16
  002ad	f3 a4		 rep movsb

; 1421 :       info->fdselect = stbtt__new_buf(NULL, 0);

  002af	45 33 c0	 xor	 r8d, r8d
  002b2	33 d2		 xor	 edx, edx
  002b4	48 8d 8d c8 05
	00 00		 lea	 rcx, QWORD PTR $T24[rbp]
  002bb	e8 00 00 00 00	 call	 ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
  002c0	48 8d 8d 98 05
	00 00		 lea	 rcx, QWORD PTR $T23[rbp]
  002c7	48 8b f9	 mov	 rdi, rcx
  002ca	48 8b f0	 mov	 rsi, rax
  002cd	b9 10 00 00 00	 mov	 ecx, 16
  002d2	f3 a4		 rep movsb
  002d4	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  002db	48 8d 8d 98 05
	00 00		 lea	 rcx, QWORD PTR $T23[rbp]
  002e2	48 8d b8 90 00
	00 00		 lea	 rdi, QWORD PTR [rax+144]
  002e9	48 8b f1	 mov	 rsi, rcx
  002ec	b9 10 00 00 00	 mov	 ecx, 16
  002f1	f3 a4		 rep movsb

; 1422 : 
; 1423 :       // @TODO this should use size from table (not 512MB)
; 1424 :       info->cff = stbtt__new_buf(data+cff, 512*1024*1024);

  002f3	8b 85 94 01 00
	00		 mov	 eax, DWORD PTR cff$17[rbp]
  002f9	48 8b 8d 68 0a
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00300	48 03 c8	 add	 rcx, rax
  00303	48 8b c1	 mov	 rax, rcx
  00306	41 b8 00 00 00
	20		 mov	 r8d, 536870912		; 20000000H
  0030c	48 8b d0	 mov	 rdx, rax
  0030f	48 8d 8d 28 06
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  00316	e8 00 00 00 00	 call	 ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
  0031b	48 8d 8d f8 05
	00 00		 lea	 rcx, QWORD PTR $T25[rbp]
  00322	48 8b f9	 mov	 rdi, rcx
  00325	48 8b f0	 mov	 rsi, rax
  00328	b9 10 00 00 00	 mov	 ecx, 16
  0032d	f3 a4		 rep movsb
  0032f	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  00336	48 8d 8d f8 05
	00 00		 lea	 rcx, QWORD PTR $T25[rbp]
  0033d	48 8d 78 40	 lea	 rdi, QWORD PTR [rax+64]
  00341	48 8b f1	 mov	 rsi, rcx
  00344	b9 10 00 00 00	 mov	 ecx, 16
  00349	f3 a4		 rep movsb

; 1425 :       b = info->cff;

  0034b	48 8d 85 88 00
	00 00		 lea	 rax, QWORD PTR b$10[rbp]
  00352	48 8b 8d 60 0a
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00359	48 8b f8	 mov	 rdi, rax
  0035c	48 8d 71 40	 lea	 rsi, QWORD PTR [rcx+64]
  00360	b9 10 00 00 00	 mov	 ecx, 16
  00365	f3 a4		 rep movsb

; 1426 : 
; 1427 :       // read the header
; 1428 :       stbtt__buf_skip(&b, 2);

  00367	ba 02 00 00 00	 mov	 edx, 2
  0036c	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR b$10[rbp]
  00373	e8 00 00 00 00	 call	 ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip

; 1429 :       stbtt__buf_seek(&b, stbtt__buf_get8(&b)); // hdrsize

  00378	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR b$10[rbp]
  0037f	e8 00 00 00 00	 call	 ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_get8
  00384	0f b6 c0	 movzx	 eax, al
  00387	8b d0		 mov	 edx, eax
  00389	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR b$10[rbp]
  00390	e8 00 00 00 00	 call	 ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek

; 1430 : 
; 1431 :       // @TODO the name INDEX could list multiple fonts,
; 1432 :       // but we just use the first one.
; 1433 :       stbtt__cff_get_index(&b);  // name INDEX

  00395	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR b$10[rbp]
  0039c	48 8d 8d 88 06
	00 00		 lea	 rcx, QWORD PTR $T28[rbp]
  003a3	e8 00 00 00 00	 call	 ?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
  003a8	48 8d 8d 58 06
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  003af	48 8b f9	 mov	 rdi, rcx
  003b2	48 8b f0	 mov	 rsi, rax
  003b5	b9 10 00 00 00	 mov	 ecx, 16
  003ba	f3 a4		 rep movsb

; 1434 :       topdictidx = stbtt__cff_get_index(&b);

  003bc	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR b$10[rbp]
  003c3	48 8d 8d e8 06
	00 00		 lea	 rcx, QWORD PTR $T30[rbp]
  003ca	e8 00 00 00 00	 call	 ?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
  003cf	48 8d 8d b8 06
	00 00		 lea	 rcx, QWORD PTR $T29[rbp]
  003d6	48 8b f9	 mov	 rdi, rcx
  003d9	48 8b f0	 mov	 rsi, rax
  003dc	b9 10 00 00 00	 mov	 ecx, 16
  003e1	f3 a4		 rep movsb
  003e3	48 8d 85 e8 00
	00 00		 lea	 rax, QWORD PTR topdictidx$12[rbp]
  003ea	48 8d 8d b8 06
	00 00		 lea	 rcx, QWORD PTR $T29[rbp]
  003f1	48 8b f8	 mov	 rdi, rax
  003f4	48 8b f1	 mov	 rsi, rcx
  003f7	b9 10 00 00 00	 mov	 ecx, 16
  003fc	f3 a4		 rep movsb

; 1435 :       topdict = stbtt__cff_index_get(topdictidx, 0);

  003fe	48 8d 85 c0 09
	00 00		 lea	 rax, QWORD PTR $T45[rbp]
  00405	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR topdictidx$12[rbp]
  0040c	48 8b f8	 mov	 rdi, rax
  0040f	48 8b f1	 mov	 rsi, rcx
  00412	b9 10 00 00 00	 mov	 ecx, 16
  00417	f3 a4		 rep movsb
  00419	45 33 c0	 xor	 r8d, r8d
  0041c	48 8d 95 c0 09
	00 00		 lea	 rdx, QWORD PTR $T45[rbp]
  00423	48 8d 8d 48 07
	00 00		 lea	 rcx, QWORD PTR $T32[rbp]
  0042a	e8 00 00 00 00	 call	 ?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
  0042f	48 8d 8d 18 07
	00 00		 lea	 rcx, QWORD PTR $T31[rbp]
  00436	48 8b f9	 mov	 rdi, rcx
  00439	48 8b f0	 mov	 rsi, rax
  0043c	b9 10 00 00 00	 mov	 ecx, 16
  00441	f3 a4		 rep movsb
  00443	48 8d 85 b8 00
	00 00		 lea	 rax, QWORD PTR topdict$11[rbp]
  0044a	48 8d 8d 18 07
	00 00		 lea	 rcx, QWORD PTR $T31[rbp]
  00451	48 8b f8	 mov	 rdi, rax
  00454	48 8b f1	 mov	 rsi, rcx
  00457	b9 10 00 00 00	 mov	 ecx, 16
  0045c	f3 a4		 rep movsb

; 1436 :       stbtt__cff_get_index(&b);  // string INDEX

  0045e	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR b$10[rbp]
  00465	48 8d 8d a8 07
	00 00		 lea	 rcx, QWORD PTR $T34[rbp]
  0046c	e8 00 00 00 00	 call	 ?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
  00471	48 8d 8d 78 07
	00 00		 lea	 rcx, QWORD PTR $T33[rbp]
  00478	48 8b f9	 mov	 rdi, rcx
  0047b	48 8b f0	 mov	 rsi, rax
  0047e	b9 10 00 00 00	 mov	 ecx, 16
  00483	f3 a4		 rep movsb

; 1437 :       info->gsubrs = stbtt__cff_get_index(&b);

  00485	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR b$10[rbp]
  0048c	48 8d 8d 08 08
	00 00		 lea	 rcx, QWORD PTR $T36[rbp]
  00493	e8 00 00 00 00	 call	 ?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
  00498	48 8d 8d d8 07
	00 00		 lea	 rcx, QWORD PTR $T35[rbp]
  0049f	48 8b f9	 mov	 rdi, rcx
  004a2	48 8b f0	 mov	 rsi, rax
  004a5	b9 10 00 00 00	 mov	 ecx, 16
  004aa	f3 a4		 rep movsb
  004ac	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  004b3	48 8d 8d d8 07
	00 00		 lea	 rcx, QWORD PTR $T35[rbp]
  004ba	48 8d 78 60	 lea	 rdi, QWORD PTR [rax+96]
  004be	48 8b f1	 mov	 rsi, rcx
  004c1	b9 10 00 00 00	 mov	 ecx, 16
  004c6	f3 a4		 rep movsb

; 1438 : 
; 1439 :       stbtt__dict_get_ints(&topdict, 17, 1, &charstrings);

  004c8	4c 8d 8d 34 01
	00 00		 lea	 r9, QWORD PTR charstrings$14[rbp]
  004cf	41 b8 01 00 00
	00		 mov	 r8d, 1
  004d5	ba 11 00 00 00	 mov	 edx, 17
  004da	48 8d 8d b8 00
	00 00		 lea	 rcx, QWORD PTR topdict$11[rbp]
  004e1	e8 00 00 00 00	 call	 ?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints

; 1440 :       stbtt__dict_get_ints(&topdict, 0x100 | 6, 1, &cstype);

  004e6	4c 8d 8d 14 01
	00 00		 lea	 r9, QWORD PTR cstype$13[rbp]
  004ed	41 b8 01 00 00
	00		 mov	 r8d, 1
  004f3	ba 06 01 00 00	 mov	 edx, 262		; 00000106H
  004f8	48 8d 8d b8 00
	00 00		 lea	 rcx, QWORD PTR topdict$11[rbp]
  004ff	e8 00 00 00 00	 call	 ?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints

; 1441 :       stbtt__dict_get_ints(&topdict, 0x100 | 36, 1, &fdarrayoff);

  00504	4c 8d 8d 54 01
	00 00		 lea	 r9, QWORD PTR fdarrayoff$15[rbp]
  0050b	41 b8 01 00 00
	00		 mov	 r8d, 1
  00511	ba 24 01 00 00	 mov	 edx, 292		; 00000124H
  00516	48 8d 8d b8 00
	00 00		 lea	 rcx, QWORD PTR topdict$11[rbp]
  0051d	e8 00 00 00 00	 call	 ?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints

; 1442 :       stbtt__dict_get_ints(&topdict, 0x100 | 37, 1, &fdselectoff);

  00522	4c 8d 8d 74 01
	00 00		 lea	 r9, QWORD PTR fdselectoff$16[rbp]
  00529	41 b8 01 00 00
	00		 mov	 r8d, 1
  0052f	ba 25 01 00 00	 mov	 edx, 293		; 00000125H
  00534	48 8d 8d b8 00
	00 00		 lea	 rcx, QWORD PTR topdict$11[rbp]
  0053b	e8 00 00 00 00	 call	 ?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints

; 1443 :       info->subrs = stbtt__get_subrs(b, topdict);

  00540	48 8d 85 20 0a
	00 00		 lea	 rax, QWORD PTR $T47[rbp]
  00547	48 8d 8d b8 00
	00 00		 lea	 rcx, QWORD PTR topdict$11[rbp]
  0054e	48 8b f8	 mov	 rdi, rax
  00551	48 8b f1	 mov	 rsi, rcx
  00554	b9 10 00 00 00	 mov	 ecx, 16
  00559	f3 a4		 rep movsb
  0055b	48 8d 85 f0 09
	00 00		 lea	 rax, QWORD PTR $T46[rbp]
  00562	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR b$10[rbp]
  00569	48 8b f8	 mov	 rdi, rax
  0056c	48 8b f1	 mov	 rsi, rcx
  0056f	b9 10 00 00 00	 mov	 ecx, 16
  00574	f3 a4		 rep movsb
  00576	4c 8d 85 20 0a
	00 00		 lea	 r8, QWORD PTR $T47[rbp]
  0057d	48 8d 95 f0 09
	00 00		 lea	 rdx, QWORD PTR $T46[rbp]
  00584	48 8d 8d 68 08
	00 00		 lea	 rcx, QWORD PTR $T38[rbp]
  0058b	e8 00 00 00 00	 call	 ?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z ; stbtt__get_subrs
  00590	48 8d 8d 38 08
	00 00		 lea	 rcx, QWORD PTR $T37[rbp]
  00597	48 8b f9	 mov	 rdi, rcx
  0059a	48 8b f0	 mov	 rsi, rax
  0059d	b9 10 00 00 00	 mov	 ecx, 16
  005a2	f3 a4		 rep movsb
  005a4	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  005ab	48 8d 8d 38 08
	00 00		 lea	 rcx, QWORD PTR $T37[rbp]
  005b2	48 8d 78 70	 lea	 rdi, QWORD PTR [rax+112]
  005b6	48 8b f1	 mov	 rsi, rcx
  005b9	b9 10 00 00 00	 mov	 ecx, 16
  005be	f3 a4		 rep movsb

; 1444 : 
; 1445 :       // we only support Type 2 charstrings
; 1446 :       if (cstype != 2) return 0;

  005c0	83 bd 14 01 00
	00 02		 cmp	 DWORD PTR cstype$13[rbp], 2
  005c7	74 07		 je	 SHORT $LN15@stbtt_Init
  005c9	33 c0		 xor	 eax, eax
  005cb	e9 07 03 00 00	 jmp	 $LN1@stbtt_Init
$LN15@stbtt_Init:

; 1447 :       if (charstrings == 0) return 0;

  005d0	83 bd 34 01 00
	00 00		 cmp	 DWORD PTR charstrings$14[rbp], 0
  005d7	75 07		 jne	 SHORT $LN16@stbtt_Init
  005d9	33 c0		 xor	 eax, eax
  005db	e9 f7 02 00 00	 jmp	 $LN1@stbtt_Init
$LN16@stbtt_Init:

; 1448 : 
; 1449 :       if (fdarrayoff) {

  005e0	83 bd 54 01 00
	00 00		 cmp	 DWORD PTR fdarrayoff$15[rbp], 0
  005e7	0f 84 c8 00 00
	00		 je	 $LN17@stbtt_Init

; 1450 :          // looks like a CID font
; 1451 :          if (!fdselectoff) return 0;

  005ed	83 bd 74 01 00
	00 00		 cmp	 DWORD PTR fdselectoff$16[rbp], 0
  005f4	75 07		 jne	 SHORT $LN18@stbtt_Init
  005f6	33 c0		 xor	 eax, eax
  005f8	e9 da 02 00 00	 jmp	 $LN1@stbtt_Init
$LN18@stbtt_Init:

; 1452 :          stbtt__buf_seek(&b, fdarrayoff);

  005fd	8b 95 54 01 00
	00		 mov	 edx, DWORD PTR fdarrayoff$15[rbp]
  00603	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR b$10[rbp]
  0060a	e8 00 00 00 00	 call	 ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek

; 1453 :          info->fontdicts = stbtt__cff_get_index(&b);

  0060f	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR b$10[rbp]
  00616	48 8d 8d c8 08
	00 00		 lea	 rcx, QWORD PTR $T40[rbp]
  0061d	e8 00 00 00 00	 call	 ?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
  00622	48 8d 8d 98 08
	00 00		 lea	 rcx, QWORD PTR $T39[rbp]
  00629	48 8b f9	 mov	 rdi, rcx
  0062c	48 8b f0	 mov	 rsi, rax
  0062f	b9 10 00 00 00	 mov	 ecx, 16
  00634	f3 a4		 rep movsb
  00636	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  0063d	48 8d 8d 98 08
	00 00		 lea	 rcx, QWORD PTR $T39[rbp]
  00644	48 8d b8 80 00
	00 00		 lea	 rdi, QWORD PTR [rax+128]
  0064b	48 8b f1	 mov	 rsi, rcx
  0064e	b9 10 00 00 00	 mov	 ecx, 16
  00653	f3 a4		 rep movsb

; 1454 :          info->fdselect = stbtt__buf_range(&b, fdselectoff, b.size-fdselectoff);

  00655	8b 85 74 01 00
	00		 mov	 eax, DWORD PTR fdselectoff$16[rbp]
  0065b	8b 8d 94 00 00
	00		 mov	 ecx, DWORD PTR b$10[rbp+12]
  00661	2b c8		 sub	 ecx, eax
  00663	8b c1		 mov	 eax, ecx
  00665	44 8b c8	 mov	 r9d, eax
  00668	44 8b 85 74 01
	00 00		 mov	 r8d, DWORD PTR fdselectoff$16[rbp]
  0066f	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR b$10[rbp]
  00676	48 8d 8d 28 09
	00 00		 lea	 rcx, QWORD PTR $T42[rbp]
  0067d	e8 00 00 00 00	 call	 ?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
  00682	48 8d 8d f8 08
	00 00		 lea	 rcx, QWORD PTR $T41[rbp]
  00689	48 8b f9	 mov	 rdi, rcx
  0068c	48 8b f0	 mov	 rsi, rax
  0068f	b9 10 00 00 00	 mov	 ecx, 16
  00694	f3 a4		 rep movsb
  00696	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  0069d	48 8d 8d f8 08
	00 00		 lea	 rcx, QWORD PTR $T41[rbp]
  006a4	48 8d b8 90 00
	00 00		 lea	 rdi, QWORD PTR [rax+144]
  006ab	48 8b f1	 mov	 rsi, rcx
  006ae	b9 10 00 00 00	 mov	 ecx, 16
  006b3	f3 a4		 rep movsb
$LN17@stbtt_Init:

; 1455 :       }
; 1456 : 
; 1457 :       stbtt__buf_seek(&b, charstrings);

  006b5	8b 95 34 01 00
	00		 mov	 edx, DWORD PTR charstrings$14[rbp]
  006bb	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR b$10[rbp]
  006c2	e8 00 00 00 00	 call	 ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek

; 1458 :       info->charstrings = stbtt__cff_get_index(&b);

  006c7	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR b$10[rbp]
  006ce	48 8d 8d 88 09
	00 00		 lea	 rcx, QWORD PTR $T44[rbp]
  006d5	e8 00 00 00 00	 call	 ?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
  006da	48 8d 8d 58 09
	00 00		 lea	 rcx, QWORD PTR $T43[rbp]
  006e1	48 8b f9	 mov	 rdi, rcx
  006e4	48 8b f0	 mov	 rsi, rax
  006e7	b9 10 00 00 00	 mov	 ecx, 16
  006ec	f3 a4		 rep movsb
  006ee	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  006f5	48 8d 8d 58 09
	00 00		 lea	 rcx, QWORD PTR $T43[rbp]
  006fc	48 8d 78 50	 lea	 rdi, QWORD PTR [rax+80]
  00700	48 8b f1	 mov	 rsi, rcx
  00703	b9 10 00 00 00	 mov	 ecx, 16
  00708	f3 a4		 rep movsb
$LN12@stbtt_Init:

; 1459 :    }
; 1460 : 
; 1461 :    t = stbtt__find_table(data, fontstart, "maxp");

  0070a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04KODIGLGG@maxp?$AA@
  00711	8b 95 70 0a 00
	00		 mov	 edx, DWORD PTR fontstart$[rbp]
  00717	48 8b 8d 68 0a
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0071e	e8 00 00 00 00	 call	 ?stbtt__find_table@@YAIPEAEIPEBD@Z ; stbtt__find_table
  00723	89 45 24	 mov	 DWORD PTR t$[rbp], eax

; 1462 :    if (t)

  00726	83 7d 24 00	 cmp	 DWORD PTR t$[rbp], 0
  0072a	74 26		 je	 SHORT $LN19@stbtt_Init

; 1463 :       info->numGlyphs = ttUSHORT(data+t+4);

  0072c	8b 45 24	 mov	 eax, DWORD PTR t$[rbp]
  0072f	48 8b 8d 68 0a
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00736	48 8d 44 01 04	 lea	 rax, QWORD PTR [rcx+rax+4]
  0073b	48 8b c8	 mov	 rcx, rax
  0073e	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  00743	0f b7 c0	 movzx	 eax, ax
  00746	48 8b 8d 60 0a
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  0074d	89 41 14	 mov	 DWORD PTR [rcx+20], eax

; 1464 :    else

  00750	eb 0e		 jmp	 SHORT $LN20@stbtt_Init
$LN19@stbtt_Init:

; 1465 :       info->numGlyphs = 0xffff;

  00752	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  00759	c7 40 14 ff ff
	00 00		 mov	 DWORD PTR [rax+20], 65535 ; 0000ffffH
$LN20@stbtt_Init:

; 1466 : 
; 1467 :    info->svg = -1;

  00760	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  00767	c7 40 34 ff ff
	ff ff		 mov	 DWORD PTR [rax+52], -1

; 1468 : 
; 1469 :    // find a cmap encoding table we understand *now* to avoid searching
; 1470 :    // later. (todo: could make this installable)
; 1471 :    // the same regardless of glyph.
; 1472 :    numTables = ttUSHORT(data + cmap + 2);

  0076e	8b 45 04	 mov	 eax, DWORD PTR cmap$[rbp]
  00771	48 8b 8d 68 0a
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00778	48 8d 44 01 02	 lea	 rax, QWORD PTR [rcx+rax+2]
  0077d	48 8b c8	 mov	 rcx, rax
  00780	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  00785	0f b7 c0	 movzx	 eax, ax
  00788	89 45 64	 mov	 DWORD PTR numTables$[rbp], eax

; 1473 :    info->index_map = 0;

  0078b	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  00792	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [rax+56], 0

; 1474 :    for (i=0; i < numTables; ++i) {

  00799	c7 45 44 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  007a0	eb 08		 jmp	 SHORT $LN4@stbtt_Init
$LN2@stbtt_Init:
  007a2	8b 45 44	 mov	 eax, DWORD PTR i$[rbp]
  007a5	ff c0		 inc	 eax
  007a7	89 45 44	 mov	 DWORD PTR i$[rbp], eax
$LN4@stbtt_Init:
  007aa	8b 45 64	 mov	 eax, DWORD PTR numTables$[rbp]
  007ad	39 45 44	 cmp	 DWORD PTR i$[rbp], eax
  007b0	0f 8d df 00 00
	00		 jge	 $LN3@stbtt_Init

; 1475 :       stbtt_uint32 encoding_record = cmap + 4 + 8 * i;

  007b6	8b 45 04	 mov	 eax, DWORD PTR cmap$[rbp]
  007b9	8b 4d 44	 mov	 ecx, DWORD PTR i$[rbp]
  007bc	8d 44 c8 04	 lea	 eax, DWORD PTR [rax+rcx*8+4]
  007c0	89 85 b4 01 00
	00		 mov	 DWORD PTR encoding_record$18[rbp], eax

; 1476 :       // find an encoding we understand:
; 1477 :       switch(ttUSHORT(data+encoding_record)) {

  007c6	8b 85 b4 01 00
	00		 mov	 eax, DWORD PTR encoding_record$18[rbp]
  007cc	48 8b 8d 68 0a
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  007d3	48 03 c8	 add	 rcx, rax
  007d6	48 8b c1	 mov	 rax, rcx
  007d9	48 8b c8	 mov	 rcx, rax
  007dc	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  007e1	0f b7 c0	 movzx	 eax, ax
  007e4	89 85 34 0a 00
	00		 mov	 DWORD PTR tv321[rbp], eax
  007ea	83 bd 34 0a 00
	00 00		 cmp	 DWORD PTR tv321[rbp], 0
  007f1	74 72		 je	 SHORT $LN23@stbtt_Init
  007f3	83 bd 34 0a 00
	00 03		 cmp	 DWORD PTR tv321[rbp], 3
  007fa	74 05		 je	 SHORT $LN21@stbtt_Init
  007fc	e9 8f 00 00 00	 jmp	 $LN5@stbtt_Init
$LN21@stbtt_Init:

; 1478 :          case STBTT_PLATFORM_ID_MICROSOFT:
; 1479 :             switch (ttUSHORT(data+encoding_record+2)) {

  00801	8b 85 b4 01 00
	00		 mov	 eax, DWORD PTR encoding_record$18[rbp]
  00807	48 8b 8d 68 0a
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0080e	48 8d 44 01 02	 lea	 rax, QWORD PTR [rcx+rax+2]
  00813	48 8b c8	 mov	 rcx, rax
  00816	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  0081b	0f b7 c0	 movzx	 eax, ax
  0081e	89 85 34 0a 00
	00		 mov	 DWORD PTR tv328[rbp], eax
  00824	83 bd 34 0a 00
	00 01		 cmp	 DWORD PTR tv328[rbp], 1
  0082b	74 0b		 je	 SHORT $LN22@stbtt_Init
  0082d	83 bd 34 0a 00
	00 0a		 cmp	 DWORD PTR tv328[rbp], 10
  00834	74 02		 je	 SHORT $LN22@stbtt_Init
  00836	eb 2b		 jmp	 SHORT $LN7@stbtt_Init
$LN22@stbtt_Init:

; 1480 :                case STBTT_MS_EID_UNICODE_BMP:
; 1481 :                case STBTT_MS_EID_UNICODE_FULL:
; 1482 :                   // MS/Unicode
; 1483 :                   info->index_map = cmap + ttULONG(data+encoding_record+4);

  00838	8b 85 b4 01 00
	00		 mov	 eax, DWORD PTR encoding_record$18[rbp]
  0083e	48 8b 8d 68 0a
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00845	48 8d 44 01 04	 lea	 rax, QWORD PTR [rcx+rax+4]
  0084a	48 8b c8	 mov	 rcx, rax
  0084d	e8 00 00 00 00	 call	 ?ttULONG@@YAIPEAE@Z	; ttULONG
  00852	8b 4d 04	 mov	 ecx, DWORD PTR cmap$[rbp]
  00855	03 c8		 add	 ecx, eax
  00857	8b c1		 mov	 eax, ecx
  00859	48 8b 8d 60 0a
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00860	89 41 38	 mov	 DWORD PTR [rcx+56], eax
$LN7@stbtt_Init:

; 1484 :                   break;
; 1485 :             }
; 1486 :             break;

  00863	eb 2b		 jmp	 SHORT $LN5@stbtt_Init
$LN23@stbtt_Init:

; 1487 :         case STBTT_PLATFORM_ID_UNICODE:
; 1488 :             // Mac/iOS has these
; 1489 :             // all the encodingIDs are unicode, so we don't bother to check it
; 1490 :             info->index_map = cmap + ttULONG(data+encoding_record+4);

  00865	8b 85 b4 01 00
	00		 mov	 eax, DWORD PTR encoding_record$18[rbp]
  0086b	48 8b 8d 68 0a
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00872	48 8d 44 01 04	 lea	 rax, QWORD PTR [rcx+rax+4]
  00877	48 8b c8	 mov	 rcx, rax
  0087a	e8 00 00 00 00	 call	 ?ttULONG@@YAIPEAE@Z	; ttULONG
  0087f	8b 4d 04	 mov	 ecx, DWORD PTR cmap$[rbp]
  00882	03 c8		 add	 ecx, eax
  00884	8b c1		 mov	 eax, ecx
  00886	48 8b 8d 60 0a
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  0088d	89 41 38	 mov	 DWORD PTR [rcx+56], eax
$LN5@stbtt_Init:

; 1491 :             break;
; 1492 :       }
; 1493 :    }

  00890	e9 0d ff ff ff	 jmp	 $LN2@stbtt_Init
$LN3@stbtt_Init:

; 1494 :    if (info->index_map == 0)

  00895	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  0089c	83 78 38 00	 cmp	 DWORD PTR [rax+56], 0
  008a0	75 04		 jne	 SHORT $LN24@stbtt_Init

; 1495 :       return 0;

  008a2	33 c0		 xor	 eax, eax
  008a4	eb 31		 jmp	 SHORT $LN1@stbtt_Init
$LN24@stbtt_Init:

; 1496 : 
; 1497 :    info->indexToLocFormat = ttUSHORT(data+info->head + 50);

  008a6	48 8b 85 60 0a
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  008ad	48 63 40 1c	 movsxd	 rax, DWORD PTR [rax+28]
  008b1	48 8b 8d 68 0a
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  008b8	48 8d 44 01 32	 lea	 rax, QWORD PTR [rcx+rax+50]
  008bd	48 8b c8	 mov	 rcx, rax
  008c0	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  008c5	0f b7 c0	 movzx	 eax, ax
  008c8	48 8b 8d 60 0a
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  008cf	89 41 3c	 mov	 DWORD PTR [rcx+60], eax

; 1498 :    return 1;

  008d2	b8 01 00 00 00	 mov	 eax, 1
$LN1@stbtt_Init:

; 1499 : }

  008d7	48 8b f8	 mov	 rdi, rax
  008da	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  008de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcFrameData
  008e5	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  008ea	48 8b c7	 mov	 rax, rdi
  008ed	48 8b 8d 38 0a
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  008f4	48 33 cd	 xor	 rcx, rbp
  008f7	e8 00 00 00 00	 call	 __security_check_cookie
  008fc	48 8d a5 40 0a
	00 00		 lea	 rsp, QWORD PTR [rbp+2624]
  00903	5f		 pop	 rdi
  00904	5e		 pop	 rsi
  00905	5d		 pop	 rbp
  00906	c3		 ret	 0
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z ENDP ; stbtt_InitFont_internal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z
_TEXT	SEGMENT
subrsoff$ = 4
private_loc$ = 40
pdict$ = 72
$T6 = 312
$T7 = 360
$T8 = 408
$T9 = 456
$T10 = 504
$T11 = 552
$T12 = 600
$T13 = 648
__$ArrayPad$ = 680
$T14 = 720
cff$ = 728
fontdict$ = 736
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z PROC		; stbtt__get_subrs, COMDAT

; 1360 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec d0 02
	00 00		 sub	 rsp, 720		; 000002d0H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8b fc	 mov	 rdi, rsp
  00021	b9 b4 00 00 00	 mov	 ecx, 180		; 000000b4H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 f8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+760]
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 a8 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1361 :    stbtt_uint32 subrsoff = 0, private_loc[2] = { 0, 0 };

  00046	c7 45 04 00 00
	00 00		 mov	 DWORD PTR subrsoff$[rbp], 0
  0004d	c7 45 28 00 00
	00 00		 mov	 DWORD PTR private_loc$[rbp], 0
  00054	c7 45 2c 00 00
	00 00		 mov	 DWORD PTR private_loc$[rbp+4], 0

; 1362 :    stbtt__buf pdict;
; 1363 :    stbtt__dict_get_ints(&fontdict, 18, 2, private_loc);

  0005b	4c 8d 4d 28	 lea	 r9, QWORD PTR private_loc$[rbp]
  0005f	41 b8 02 00 00
	00		 mov	 r8d, 2
  00065	ba 12 00 00 00	 mov	 edx, 18
  0006a	48 8b 8d e0 02
	00 00		 mov	 rcx, QWORD PTR fontdict$[rbp]
  00071	e8 00 00 00 00	 call	 ?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints

; 1364 :    if (!private_loc[1] || !private_loc[0]) return stbtt__new_buf(NULL, 0);

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 01	 imul	 rax, rax, 1
  0007f	83 7c 05 28 00	 cmp	 DWORD PTR private_loc$[rbp+rax], 0
  00084	74 10		 je	 SHORT $LN3@stbtt__get
  00086	b8 04 00 00 00	 mov	 eax, 4
  0008b	48 6b c0 00	 imul	 rax, rax, 0
  0008f	83 7c 05 28 00	 cmp	 DWORD PTR private_loc$[rbp+rax], 0
  00094	75 49		 jne	 SHORT $LN2@stbtt__get
$LN3@stbtt__get:
  00096	45 33 c0	 xor	 r8d, r8d
  00099	33 d2		 xor	 edx, edx
  0009b	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  000a2	e8 00 00 00 00	 call	 ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
  000a7	48 8d 8d 38 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  000ae	48 8b f9	 mov	 rdi, rcx
  000b1	48 8b f0	 mov	 rsi, rax
  000b4	b9 10 00 00 00	 mov	 ecx, 16
  000b9	f3 a4		 rep movsb
  000bb	48 8d 85 38 01
	00 00		 lea	 rax, QWORD PTR $T6[rbp]
  000c2	48 8b bd d0 02
	00 00		 mov	 rdi, QWORD PTR $T14[rbp]
  000c9	48 8b f0	 mov	 rsi, rax
  000cc	b9 10 00 00 00	 mov	 ecx, 16
  000d1	f3 a4		 rep movsb
  000d3	48 8b 85 d0 02
	00 00		 mov	 rax, QWORD PTR $T14[rbp]
  000da	e9 23 01 00 00	 jmp	 $LN1@stbtt__get
$LN2@stbtt__get:

; 1365 :    pdict = stbtt__buf_range(&cff, private_loc[1], private_loc[0]);

  000df	b8 04 00 00 00	 mov	 eax, 4
  000e4	48 6b c0 00	 imul	 rax, rax, 0
  000e8	b9 04 00 00 00	 mov	 ecx, 4
  000ed	48 6b c9 01	 imul	 rcx, rcx, 1
  000f1	44 8b 4c 05 28	 mov	 r9d, DWORD PTR private_loc$[rbp+rax]
  000f6	44 8b 44 0d 28	 mov	 r8d, DWORD PTR private_loc$[rbp+rcx]
  000fb	48 8b 95 d8 02
	00 00		 mov	 rdx, QWORD PTR cff$[rbp]
  00102	48 8d 8d c8 01
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  00109	e8 00 00 00 00	 call	 ?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
  0010e	48 8d 8d 98 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00115	48 8b f9	 mov	 rdi, rcx
  00118	48 8b f0	 mov	 rsi, rax
  0011b	b9 10 00 00 00	 mov	 ecx, 16
  00120	f3 a4		 rep movsb
  00122	48 8d 45 48	 lea	 rax, QWORD PTR pdict$[rbp]
  00126	48 8d 8d 98 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0012d	48 8b f8	 mov	 rdi, rax
  00130	48 8b f1	 mov	 rsi, rcx
  00133	b9 10 00 00 00	 mov	 ecx, 16
  00138	f3 a4		 rep movsb

; 1366 :    stbtt__dict_get_ints(&pdict, 19, 1, &subrsoff);

  0013a	4c 8d 4d 04	 lea	 r9, QWORD PTR subrsoff$[rbp]
  0013e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00144	ba 13 00 00 00	 mov	 edx, 19
  00149	48 8d 4d 48	 lea	 rcx, QWORD PTR pdict$[rbp]
  0014d	e8 00 00 00 00	 call	 ?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints

; 1367 :    if (!subrsoff) return stbtt__new_buf(NULL, 0);

  00152	83 7d 04 00	 cmp	 DWORD PTR subrsoff$[rbp], 0
  00156	75 46		 jne	 SHORT $LN4@stbtt__get
  00158	45 33 c0	 xor	 r8d, r8d
  0015b	33 d2		 xor	 edx, edx
  0015d	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00164	e8 00 00 00 00	 call	 ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
  00169	48 8d 8d f8 01
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00170	48 8b f9	 mov	 rdi, rcx
  00173	48 8b f0	 mov	 rsi, rax
  00176	b9 10 00 00 00	 mov	 ecx, 16
  0017b	f3 a4		 rep movsb
  0017d	48 8d 85 f8 01
	00 00		 lea	 rax, QWORD PTR $T10[rbp]
  00184	48 8b bd d0 02
	00 00		 mov	 rdi, QWORD PTR $T14[rbp]
  0018b	48 8b f0	 mov	 rsi, rax
  0018e	b9 10 00 00 00	 mov	 ecx, 16
  00193	f3 a4		 rep movsb
  00195	48 8b 85 d0 02
	00 00		 mov	 rax, QWORD PTR $T14[rbp]
  0019c	eb 64		 jmp	 SHORT $LN1@stbtt__get
$LN4@stbtt__get:

; 1368 :    stbtt__buf_seek(&cff, private_loc[1]+subrsoff);

  0019e	b8 04 00 00 00	 mov	 eax, 4
  001a3	48 6b c0 01	 imul	 rax, rax, 1
  001a7	8b 44 05 28	 mov	 eax, DWORD PTR private_loc$[rbp+rax]
  001ab	03 45 04	 add	 eax, DWORD PTR subrsoff$[rbp]
  001ae	8b d0		 mov	 edx, eax
  001b0	48 8b 8d d8 02
	00 00		 mov	 rcx, QWORD PTR cff$[rbp]
  001b7	e8 00 00 00 00	 call	 ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek

; 1369 :    return stbtt__cff_get_index(&cff);

  001bc	48 8b 95 d8 02
	00 00		 mov	 rdx, QWORD PTR cff$[rbp]
  001c3	48 8d 8d 88 02
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  001ca	e8 00 00 00 00	 call	 ?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
  001cf	48 8d 8d 58 02
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  001d6	48 8b f9	 mov	 rdi, rcx
  001d9	48 8b f0	 mov	 rsi, rax
  001dc	b9 10 00 00 00	 mov	 ecx, 16
  001e1	f3 a4		 rep movsb
  001e3	48 8d 85 58 02
	00 00		 lea	 rax, QWORD PTR $T12[rbp]
  001ea	48 8b bd d0 02
	00 00		 mov	 rdi, QWORD PTR $T14[rbp]
  001f1	48 8b f0	 mov	 rsi, rax
  001f4	b9 10 00 00 00	 mov	 ecx, 16
  001f9	f3 a4		 rep movsb
  001fb	48 8b 85 d0 02
	00 00		 mov	 rax, QWORD PTR $T14[rbp]
$LN1@stbtt__get:

; 1370 : }

  00202	48 8b f8	 mov	 rdi, rax
  00205	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00209	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcFrameData
  00210	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00215	48 8b c7	 mov	 rax, rdi
  00218	48 8b 8d a8 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0021f	48 33 cd	 xor	 rcx, rbp
  00222	e8 00 00 00 00	 call	 __security_check_cookie
  00227	48 8d a5 b0 02
	00 00		 lea	 rsp, QWORD PTR [rbp+688]
  0022e	5f		 pop	 rdi
  0022f	5e		 pop	 rsi
  00230	5d		 pop	 rbp
  00231	c3		 ret	 0
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z ENDP		; stbtt__get_subrs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z
_TEXT	SEGMENT
n$1 = 4
tv68 = 212
font_collection$ = 256
index$ = 264
?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z PROC	; stbtt_GetFontOffsetForIndex_internal, COMDAT

; 1325 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 1326 :    // if it's just a font, there's only one valid index
; 1327 :    if (stbtt__isfont(font_collection))

  0002e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR font_collection$[rbp]
  00035	e8 00 00 00 00	 call	 ?stbtt__isfont@@YAHPEAE@Z ; stbtt__isfont
  0003a	85 c0		 test	 eax, eax
  0003c	74 2a		 je	 SHORT $LN2@stbtt_GetF

; 1328 :       return index == 0 ? 0 : -1;

  0003e	83 bd 08 01 00
	00 00		 cmp	 DWORD PTR index$[rbp], 0
  00045	75 0c		 jne	 SHORT $LN8@stbtt_GetF
  00047	c7 85 d4 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv68[rbp], 0
  00051	eb 0a		 jmp	 SHORT $LN9@stbtt_GetF
$LN8@stbtt_GetF:
  00053	c7 85 d4 00 00
	00 ff ff ff ff	 mov	 DWORD PTR tv68[rbp], -1
$LN9@stbtt_GetF:
  0005d	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv68[rbp]
  00063	e9 3e 01 00 00	 jmp	 $LN1@stbtt_GetF
$LN2@stbtt_GetF:

; 1329 : 
; 1330 :    // check if it's a TTC
; 1331 :    if (stbtt_tag(font_collection, "ttcf")) {

  00068	b8 01 00 00 00	 mov	 eax, 1
  0006d	48 6b c0 00	 imul	 rax, rax, 0
  00071	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR font_collection$[rbp]
  00078	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0007c	b9 01 00 00 00	 mov	 ecx, 1
  00081	48 6b c9 00	 imul	 rcx, rcx, 0
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KIOEMAHO@ttcf?$AA@
  0008c	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  00090	3b c1		 cmp	 eax, ecx
  00092	0f 85 09 01 00
	00		 jne	 $LN3@stbtt_GetF
  00098	b8 01 00 00 00	 mov	 eax, 1
  0009d	48 6b c0 01	 imul	 rax, rax, 1
  000a1	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR font_collection$[rbp]
  000a8	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000ac	b9 01 00 00 00	 mov	 ecx, 1
  000b1	48 6b c9 01	 imul	 rcx, rcx, 1
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KIOEMAHO@ttcf?$AA@
  000bc	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  000c0	3b c1		 cmp	 eax, ecx
  000c2	0f 85 d9 00 00
	00		 jne	 $LN3@stbtt_GetF
  000c8	b8 01 00 00 00	 mov	 eax, 1
  000cd	48 6b c0 02	 imul	 rax, rax, 2
  000d1	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR font_collection$[rbp]
  000d8	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000dc	b9 01 00 00 00	 mov	 ecx, 1
  000e1	48 6b c9 02	 imul	 rcx, rcx, 2
  000e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KIOEMAHO@ttcf?$AA@
  000ec	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  000f0	3b c1		 cmp	 eax, ecx
  000f2	0f 85 a9 00 00
	00		 jne	 $LN3@stbtt_GetF
  000f8	b8 01 00 00 00	 mov	 eax, 1
  000fd	48 6b c0 03	 imul	 rax, rax, 3
  00101	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR font_collection$[rbp]
  00108	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0010c	b9 01 00 00 00	 mov	 ecx, 1
  00111	48 6b c9 03	 imul	 rcx, rcx, 3
  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KIOEMAHO@ttcf?$AA@
  0011c	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  00120	3b c1		 cmp	 eax, ecx
  00122	75 7d		 jne	 SHORT $LN3@stbtt_GetF

; 1332 :       // version 1?
; 1333 :       if (ttULONG(font_collection+4) == 0x00010000 || ttULONG(font_collection+4) == 0x00020000) {

  00124	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR font_collection$[rbp]
  0012b	48 83 c0 04	 add	 rax, 4
  0012f	48 8b c8	 mov	 rcx, rax
  00132	e8 00 00 00 00	 call	 ?ttULONG@@YAIPEAE@Z	; ttULONG
  00137	3d 00 00 01 00	 cmp	 eax, 65536		; 00010000H
  0013c	74 1a		 je	 SHORT $LN5@stbtt_GetF
  0013e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR font_collection$[rbp]
  00145	48 83 c0 04	 add	 rax, 4
  00149	48 8b c8	 mov	 rcx, rax
  0014c	e8 00 00 00 00	 call	 ?ttULONG@@YAIPEAE@Z	; ttULONG
  00151	3d 00 00 02 00	 cmp	 eax, 131072		; 00020000H
  00156	75 49		 jne	 SHORT $LN4@stbtt_GetF
$LN5@stbtt_GetF:

; 1334 :          stbtt_int32 n = ttLONG(font_collection+8);

  00158	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR font_collection$[rbp]
  0015f	48 83 c0 08	 add	 rax, 8
  00163	48 8b c8	 mov	 rcx, rax
  00166	e8 00 00 00 00	 call	 ?ttLONG@@YAHPEAE@Z	; ttLONG
  0016b	89 45 04	 mov	 DWORD PTR n$1[rbp], eax

; 1335 :          if (index >= n)

  0016e	8b 45 04	 mov	 eax, DWORD PTR n$1[rbp]
  00171	39 85 08 01 00
	00		 cmp	 DWORD PTR index$[rbp], eax
  00177	7c 07		 jl	 SHORT $LN6@stbtt_GetF

; 1336 :             return -1;

  00179	b8 ff ff ff ff	 mov	 eax, -1
  0017e	eb 26		 jmp	 SHORT $LN1@stbtt_GetF
$LN6@stbtt_GetF:

; 1337 :          return ttULONG(font_collection+12+index*4);

  00180	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR index$[rbp]
  00186	c1 e0 02	 shl	 eax, 2
  00189	48 98		 cdqe
  0018b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR font_collection$[rbp]
  00192	48 8d 44 01 0c	 lea	 rax, QWORD PTR [rcx+rax+12]
  00197	48 8b c8	 mov	 rcx, rax
  0019a	e8 00 00 00 00	 call	 ?ttULONG@@YAIPEAE@Z	; ttULONG
  0019f	eb 05		 jmp	 SHORT $LN1@stbtt_GetF
$LN4@stbtt_GetF:
$LN3@stbtt_GetF:

; 1338 :       }
; 1339 :    }
; 1340 :    return -1;

  001a1	b8 ff ff ff ff	 mov	 eax, -1
$LN1@stbtt_GetF:

; 1341 : }

  001a6	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  001ad	5f		 pop	 rdi
  001ae	5d		 pop	 rbp
  001af	c3		 ret	 0
?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z ENDP	; stbtt_GetFontOffsetForIndex_internal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__find_table@@YAIPEAEIPEBD@Z
_TEXT	SEGMENT
num_tables$ = 4
tabledir$ = 36
i$ = 68
loc$1 = 100
data$ = 352
fontstart$ = 360
tag$ = 368
?stbtt__find_table@@YAIPEAEIPEBD@Z PROC			; stbtt__find_table, COMDAT

; 1312 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]

; 1313 :    stbtt_int32 num_tables = ttUSHORT(data+fontstart+4);

  00033	8b 85 68 01 00
	00		 mov	 eax, DWORD PTR fontstart$[rbp]
  00039	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00040	48 8d 44 01 04	 lea	 rax, QWORD PTR [rcx+rax+4]
  00045	48 8b c8	 mov	 rcx, rax
  00048	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  0004d	0f b7 c0	 movzx	 eax, ax
  00050	89 45 04	 mov	 DWORD PTR num_tables$[rbp], eax

; 1314 :    stbtt_uint32 tabledir = fontstart + 12;

  00053	8b 85 68 01 00
	00		 mov	 eax, DWORD PTR fontstart$[rbp]
  00059	83 c0 0c	 add	 eax, 12
  0005c	89 45 24	 mov	 DWORD PTR tabledir$[rbp], eax

; 1315 :    stbtt_int32 i;
; 1316 :    for (i=0; i < num_tables; ++i) {

  0005f	c7 45 44 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00066	eb 08		 jmp	 SHORT $LN4@stbtt__fin
$LN2@stbtt__fin:
  00068	8b 45 44	 mov	 eax, DWORD PTR i$[rbp]
  0006b	ff c0		 inc	 eax
  0006d	89 45 44	 mov	 DWORD PTR i$[rbp], eax
$LN4@stbtt__fin:
  00070	8b 45 04	 mov	 eax, DWORD PTR num_tables$[rbp]
  00073	39 45 44	 cmp	 DWORD PTR i$[rbp], eax
  00076	0f 8d 08 01 00
	00		 jge	 $LN3@stbtt__fin

; 1317 :       stbtt_uint32 loc = tabledir + 16*i;

  0007c	6b 45 44 10	 imul	 eax, DWORD PTR i$[rbp], 16
  00080	8b 4d 24	 mov	 ecx, DWORD PTR tabledir$[rbp]
  00083	03 c8		 add	 ecx, eax
  00085	8b c1		 mov	 eax, ecx
  00087	89 45 64	 mov	 DWORD PTR loc$1[rbp], eax

; 1318 :       if (stbtt_tag(data+loc+0, tag))

  0008a	8b 45 64	 mov	 eax, DWORD PTR loc$1[rbp]
  0008d	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00094	48 03 c8	 add	 rcx, rax
  00097	48 8b c1	 mov	 rax, rcx
  0009a	b9 01 00 00 00	 mov	 ecx, 1
  0009f	48 6b c9 00	 imul	 rcx, rcx, 0
  000a3	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  000a7	b9 01 00 00 00	 mov	 ecx, 1
  000ac	48 6b c9 00	 imul	 rcx, rcx, 0
  000b0	48 8b 95 70 01
	00 00		 mov	 rdx, QWORD PTR tag$[rbp]
  000b7	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  000bb	3b c1		 cmp	 eax, ecx
  000bd	0f 85 bc 00 00
	00		 jne	 $LN5@stbtt__fin
  000c3	8b 45 64	 mov	 eax, DWORD PTR loc$1[rbp]
  000c6	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000cd	48 03 c8	 add	 rcx, rax
  000d0	48 8b c1	 mov	 rax, rcx
  000d3	b9 01 00 00 00	 mov	 ecx, 1
  000d8	48 6b c9 01	 imul	 rcx, rcx, 1
  000dc	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  000e0	b9 01 00 00 00	 mov	 ecx, 1
  000e5	48 6b c9 01	 imul	 rcx, rcx, 1
  000e9	48 8b 95 70 01
	00 00		 mov	 rdx, QWORD PTR tag$[rbp]
  000f0	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  000f4	3b c1		 cmp	 eax, ecx
  000f6	0f 85 83 00 00
	00		 jne	 $LN5@stbtt__fin
  000fc	8b 45 64	 mov	 eax, DWORD PTR loc$1[rbp]
  000ff	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00106	48 03 c8	 add	 rcx, rax
  00109	48 8b c1	 mov	 rax, rcx
  0010c	b9 01 00 00 00	 mov	 ecx, 1
  00111	48 6b c9 02	 imul	 rcx, rcx, 2
  00115	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00119	b9 01 00 00 00	 mov	 ecx, 1
  0011e	48 6b c9 02	 imul	 rcx, rcx, 2
  00122	48 8b 95 70 01
	00 00		 mov	 rdx, QWORD PTR tag$[rbp]
  00129	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  0012d	3b c1		 cmp	 eax, ecx
  0012f	75 4e		 jne	 SHORT $LN5@stbtt__fin
  00131	8b 45 64	 mov	 eax, DWORD PTR loc$1[rbp]
  00134	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0013b	48 03 c8	 add	 rcx, rax
  0013e	48 8b c1	 mov	 rax, rcx
  00141	b9 01 00 00 00	 mov	 ecx, 1
  00146	48 6b c9 03	 imul	 rcx, rcx, 3
  0014a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0014e	b9 01 00 00 00	 mov	 ecx, 1
  00153	48 6b c9 03	 imul	 rcx, rcx, 3
  00157	48 8b 95 70 01
	00 00		 mov	 rdx, QWORD PTR tag$[rbp]
  0015e	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  00162	3b c1		 cmp	 eax, ecx
  00164	75 19		 jne	 SHORT $LN5@stbtt__fin

; 1319 :          return ttULONG(data+loc+8);

  00166	8b 45 64	 mov	 eax, DWORD PTR loc$1[rbp]
  00169	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00170	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  00175	48 8b c8	 mov	 rcx, rax
  00178	e8 00 00 00 00	 call	 ?ttULONG@@YAIPEAE@Z	; ttULONG
  0017d	eb 07		 jmp	 SHORT $LN1@stbtt__fin
$LN5@stbtt__fin:

; 1320 :    }

  0017f	e9 e4 fe ff ff	 jmp	 $LN2@stbtt__fin
$LN3@stbtt__fin:

; 1321 :    return 0;

  00184	33 c0		 xor	 eax, eax
$LN1@stbtt__fin:

; 1322 : }

  00186	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  0018d	5f		 pop	 rdi
  0018e	5d		 pop	 rbp
  0018f	c3		 ret	 0
?stbtt__find_table@@YAIPEAEIPEBD@Z ENDP			; stbtt__find_table
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__isfont@@YAHPEAE@Z
_TEXT	SEGMENT
font$ = 224
?stbtt__isfont@@YAHPEAE@Z PROC				; stbtt__isfont, COMDAT

; 1300 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 1301 :    // check the version number
; 1302 :    if (stbtt_tag4(font, '1',0,0,0))  return 1; // TrueType 1

  00028	b8 01 00 00 00	 mov	 eax, 1
  0002d	48 6b c0 00	 imul	 rax, rax, 0
  00031	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  00038	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0003c	83 f8 31	 cmp	 eax, 49			; 00000031H
  0003f	75 52		 jne	 SHORT $LN2@stbtt__isf
  00041	b8 01 00 00 00	 mov	 eax, 1
  00046	48 6b c0 01	 imul	 rax, rax, 1
  0004a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  00051	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00055	85 c0		 test	 eax, eax
  00057	75 3a		 jne	 SHORT $LN2@stbtt__isf
  00059	b8 01 00 00 00	 mov	 eax, 1
  0005e	48 6b c0 02	 imul	 rax, rax, 2
  00062	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  00069	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0006d	85 c0		 test	 eax, eax
  0006f	75 22		 jne	 SHORT $LN2@stbtt__isf
  00071	b8 01 00 00 00	 mov	 eax, 1
  00076	48 6b c0 03	 imul	 rax, rax, 3
  0007a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  00081	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00085	85 c0		 test	 eax, eax
  00087	75 0a		 jne	 SHORT $LN2@stbtt__isf
  00089	b8 01 00 00 00	 mov	 eax, 1
  0008e	e9 a4 02 00 00	 jmp	 $LN1@stbtt__isf
$LN2@stbtt__isf:

; 1303 :    if (stbtt_tag(font, "typ1"))   return 1; // TrueType with type 1 font -- we don't support this!

  00093	b8 01 00 00 00	 mov	 eax, 1
  00098	48 6b c0 00	 imul	 rax, rax, 0
  0009c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  000a3	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000a7	b9 01 00 00 00	 mov	 ecx, 1
  000ac	48 6b c9 00	 imul	 rcx, rcx, 0
  000b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LBBEMOBJ@typ1?$AA@
  000b7	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  000bb	3b c1		 cmp	 eax, ecx
  000bd	0f 85 8e 00 00
	00		 jne	 $LN3@stbtt__isf
  000c3	b8 01 00 00 00	 mov	 eax, 1
  000c8	48 6b c0 01	 imul	 rax, rax, 1
  000cc	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  000d3	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000d7	b9 01 00 00 00	 mov	 ecx, 1
  000dc	48 6b c9 01	 imul	 rcx, rcx, 1
  000e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LBBEMOBJ@typ1?$AA@
  000e7	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  000eb	3b c1		 cmp	 eax, ecx
  000ed	75 62		 jne	 SHORT $LN3@stbtt__isf
  000ef	b8 01 00 00 00	 mov	 eax, 1
  000f4	48 6b c0 02	 imul	 rax, rax, 2
  000f8	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  000ff	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00103	b9 01 00 00 00	 mov	 ecx, 1
  00108	48 6b c9 02	 imul	 rcx, rcx, 2
  0010c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LBBEMOBJ@typ1?$AA@
  00113	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  00117	3b c1		 cmp	 eax, ecx
  00119	75 36		 jne	 SHORT $LN3@stbtt__isf
  0011b	b8 01 00 00 00	 mov	 eax, 1
  00120	48 6b c0 03	 imul	 rax, rax, 3
  00124	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  0012b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0012f	b9 01 00 00 00	 mov	 ecx, 1
  00134	48 6b c9 03	 imul	 rcx, rcx, 3
  00138	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LBBEMOBJ@typ1?$AA@
  0013f	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  00143	3b c1		 cmp	 eax, ecx
  00145	75 0a		 jne	 SHORT $LN3@stbtt__isf
  00147	b8 01 00 00 00	 mov	 eax, 1
  0014c	e9 e6 01 00 00	 jmp	 $LN1@stbtt__isf
$LN3@stbtt__isf:

; 1304 :    if (stbtt_tag(font, "OTTO"))   return 1; // OpenType with CFF

  00151	b8 01 00 00 00	 mov	 eax, 1
  00156	48 6b c0 00	 imul	 rax, rax, 0
  0015a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  00161	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00165	b9 01 00 00 00	 mov	 ecx, 1
  0016a	48 6b c9 00	 imul	 rcx, rcx, 0
  0016e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LLEFIKCJ@OTTO?$AA@
  00175	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  00179	3b c1		 cmp	 eax, ecx
  0017b	0f 85 8e 00 00
	00		 jne	 $LN4@stbtt__isf
  00181	b8 01 00 00 00	 mov	 eax, 1
  00186	48 6b c0 01	 imul	 rax, rax, 1
  0018a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  00191	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00195	b9 01 00 00 00	 mov	 ecx, 1
  0019a	48 6b c9 01	 imul	 rcx, rcx, 1
  0019e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LLEFIKCJ@OTTO?$AA@
  001a5	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  001a9	3b c1		 cmp	 eax, ecx
  001ab	75 62		 jne	 SHORT $LN4@stbtt__isf
  001ad	b8 01 00 00 00	 mov	 eax, 1
  001b2	48 6b c0 02	 imul	 rax, rax, 2
  001b6	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  001bd	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  001c1	b9 01 00 00 00	 mov	 ecx, 1
  001c6	48 6b c9 02	 imul	 rcx, rcx, 2
  001ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LLEFIKCJ@OTTO?$AA@
  001d1	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  001d5	3b c1		 cmp	 eax, ecx
  001d7	75 36		 jne	 SHORT $LN4@stbtt__isf
  001d9	b8 01 00 00 00	 mov	 eax, 1
  001de	48 6b c0 03	 imul	 rax, rax, 3
  001e2	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  001e9	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  001ed	b9 01 00 00 00	 mov	 ecx, 1
  001f2	48 6b c9 03	 imul	 rcx, rcx, 3
  001f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LLEFIKCJ@OTTO?$AA@
  001fd	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  00201	3b c1		 cmp	 eax, ecx
  00203	75 0a		 jne	 SHORT $LN4@stbtt__isf
  00205	b8 01 00 00 00	 mov	 eax, 1
  0020a	e9 28 01 00 00	 jmp	 $LN1@stbtt__isf
$LN4@stbtt__isf:

; 1305 :    if (stbtt_tag4(font, 0,1,0,0)) return 1; // OpenType 1.0

  0020f	b8 01 00 00 00	 mov	 eax, 1
  00214	48 6b c0 00	 imul	 rax, rax, 0
  00218	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  0021f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00223	85 c0		 test	 eax, eax
  00225	75 53		 jne	 SHORT $LN5@stbtt__isf
  00227	b8 01 00 00 00	 mov	 eax, 1
  0022c	48 6b c0 01	 imul	 rax, rax, 1
  00230	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  00237	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0023b	83 f8 01	 cmp	 eax, 1
  0023e	75 3a		 jne	 SHORT $LN5@stbtt__isf
  00240	b8 01 00 00 00	 mov	 eax, 1
  00245	48 6b c0 02	 imul	 rax, rax, 2
  00249	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  00250	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00254	85 c0		 test	 eax, eax
  00256	75 22		 jne	 SHORT $LN5@stbtt__isf
  00258	b8 01 00 00 00	 mov	 eax, 1
  0025d	48 6b c0 03	 imul	 rax, rax, 3
  00261	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  00268	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0026c	85 c0		 test	 eax, eax
  0026e	75 0a		 jne	 SHORT $LN5@stbtt__isf
  00270	b8 01 00 00 00	 mov	 eax, 1
  00275	e9 bd 00 00 00	 jmp	 $LN1@stbtt__isf
$LN5@stbtt__isf:

; 1306 :    if (stbtt_tag(font, "true"))   return 1; // Apple specification for TrueType fonts

  0027a	b8 01 00 00 00	 mov	 eax, 1
  0027f	48 6b c0 00	 imul	 rax, rax, 0
  00283	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  0028a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0028e	b9 01 00 00 00	 mov	 ecx, 1
  00293	48 6b c9 00	 imul	 rcx, rcx, 0
  00297	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LOAJBDKD@true?$AA@
  0029e	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  002a2	3b c1		 cmp	 eax, ecx
  002a4	0f 85 8b 00 00
	00		 jne	 $LN6@stbtt__isf
  002aa	b8 01 00 00 00	 mov	 eax, 1
  002af	48 6b c0 01	 imul	 rax, rax, 1
  002b3	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  002ba	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  002be	b9 01 00 00 00	 mov	 ecx, 1
  002c3	48 6b c9 01	 imul	 rcx, rcx, 1
  002c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LOAJBDKD@true?$AA@
  002ce	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  002d2	3b c1		 cmp	 eax, ecx
  002d4	75 5f		 jne	 SHORT $LN6@stbtt__isf
  002d6	b8 01 00 00 00	 mov	 eax, 1
  002db	48 6b c0 02	 imul	 rax, rax, 2
  002df	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  002e6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  002ea	b9 01 00 00 00	 mov	 ecx, 1
  002ef	48 6b c9 02	 imul	 rcx, rcx, 2
  002f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LOAJBDKD@true?$AA@
  002fa	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  002fe	3b c1		 cmp	 eax, ecx
  00300	75 33		 jne	 SHORT $LN6@stbtt__isf
  00302	b8 01 00 00 00	 mov	 eax, 1
  00307	48 6b c0 03	 imul	 rax, rax, 3
  0030b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  00312	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00316	b9 01 00 00 00	 mov	 ecx, 1
  0031b	48 6b c9 03	 imul	 rcx, rcx, 3
  0031f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LOAJBDKD@true?$AA@
  00326	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  0032a	3b c1		 cmp	 eax, ecx
  0032c	75 07		 jne	 SHORT $LN6@stbtt__isf
  0032e	b8 01 00 00 00	 mov	 eax, 1
  00333	eb 02		 jmp	 SHORT $LN1@stbtt__isf
$LN6@stbtt__isf:

; 1307 :    return 0;

  00335	33 c0		 xor	 eax, eax
$LN1@stbtt__isf:

; 1308 : }

  00337	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0033e	5f		 pop	 rdi
  0033f	5d		 pop	 rbp
  00340	c3		 ret	 0
?stbtt__isfont@@YAHPEAE@Z ENDP				; stbtt__isfont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?ttLONG@@YAHPEAE@Z
_TEXT	SEGMENT
p$ = 224
?ttLONG@@YAHPEAE@Z PROC					; ttLONG, COMDAT

; 1294 : static stbtt_int32 ttLONG(stbtt_uint8 *p)    { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	b8 01 00 00 00	 mov	 eax, 1
  0002d	48 6b c0 00	 imul	 rax, rax, 0
  00031	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00038	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0003c	c1 e0 18	 shl	 eax, 24
  0003f	b9 01 00 00 00	 mov	 ecx, 1
  00044	48 6b c9 01	 imul	 rcx, rcx, 1
  00048	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  0004f	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00053	c1 e1 10	 shl	 ecx, 16
  00056	03 c1		 add	 eax, ecx
  00058	b9 01 00 00 00	 mov	 ecx, 1
  0005d	48 6b c9 02	 imul	 rcx, rcx, 2
  00061	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  00068	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0006c	c1 e1 08	 shl	 ecx, 8
  0006f	03 c1		 add	 eax, ecx
  00071	b9 01 00 00 00	 mov	 ecx, 1
  00076	48 6b c9 03	 imul	 rcx, rcx, 3
  0007a	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  00081	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00085	03 c1		 add	 eax, ecx
  00087	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0008e	5f		 pop	 rdi
  0008f	5d		 pop	 rbp
  00090	c3		 ret	 0
?ttLONG@@YAHPEAE@Z ENDP					; ttLONG
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?ttULONG@@YAIPEAE@Z
_TEXT	SEGMENT
p$ = 224
?ttULONG@@YAIPEAE@Z PROC				; ttULONG, COMDAT

; 1293 : static stbtt_uint32 ttULONG(stbtt_uint8 *p)  { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	b8 01 00 00 00	 mov	 eax, 1
  0002d	48 6b c0 00	 imul	 rax, rax, 0
  00031	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00038	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0003c	c1 e0 18	 shl	 eax, 24
  0003f	b9 01 00 00 00	 mov	 ecx, 1
  00044	48 6b c9 01	 imul	 rcx, rcx, 1
  00048	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  0004f	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00053	c1 e1 10	 shl	 ecx, 16
  00056	03 c1		 add	 eax, ecx
  00058	b9 01 00 00 00	 mov	 ecx, 1
  0005d	48 6b c9 02	 imul	 rcx, rcx, 2
  00061	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  00068	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0006c	c1 e1 08	 shl	 ecx, 8
  0006f	03 c1		 add	 eax, ecx
  00071	b9 01 00 00 00	 mov	 ecx, 1
  00076	48 6b c9 03	 imul	 rcx, rcx, 3
  0007a	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  00081	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00085	03 c1		 add	 eax, ecx
  00087	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0008e	5f		 pop	 rdi
  0008f	5d		 pop	 rbp
  00090	c3		 ret	 0
?ttULONG@@YAIPEAE@Z ENDP				; ttULONG
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?ttSHORT@@YAFPEAE@Z
_TEXT	SEGMENT
p$ = 224
?ttSHORT@@YAFPEAE@Z PROC				; ttSHORT, COMDAT

; 1292 : static stbtt_int16 ttSHORT(stbtt_uint8 *p)   { return p[0]*256 + p[1]; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	b8 01 00 00 00	 mov	 eax, 1
  0002d	48 6b c0 00	 imul	 rax, rax, 0
  00031	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00038	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0003c	69 c0 00 01 00
	00		 imul	 eax, eax, 256		; 00000100H
  00042	b9 01 00 00 00	 mov	 ecx, 1
  00047	48 6b c9 01	 imul	 rcx, rcx, 1
  0004b	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  00052	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00056	03 c1		 add	 eax, ecx
  00058	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005f	5f		 pop	 rdi
  00060	5d		 pop	 rbp
  00061	c3		 ret	 0
?ttSHORT@@YAFPEAE@Z ENDP				; ttSHORT
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?ttUSHORT@@YAGPEAE@Z
_TEXT	SEGMENT
p$ = 224
?ttUSHORT@@YAGPEAE@Z PROC				; ttUSHORT, COMDAT

; 1291 : static stbtt_uint16 ttUSHORT(stbtt_uint8 *p) { return p[0]*256 + p[1]; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	b8 01 00 00 00	 mov	 eax, 1
  0002d	48 6b c0 00	 imul	 rax, rax, 0
  00031	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00038	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0003c	69 c0 00 01 00
	00		 imul	 eax, eax, 256		; 00000100H
  00042	b9 01 00 00 00	 mov	 ecx, 1
  00047	48 6b c9 01	 imul	 rcx, rcx, 1
  0004b	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  00052	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00056	03 c1		 add	 eax, ecx
  00058	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005f	5f		 pop	 rdi
  00060	5d		 pop	 rbp
  00061	c3		 ret	 0
?ttUSHORT@@YAGPEAE@Z ENDP				; ttUSHORT
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z
_TEXT	SEGMENT
count$ = 4
offsize$ = 36
start$ = 68
end$ = 100
$T1 = 328
$T2 = 376
$T3 = 448
b$ = 456
i$ = 464
?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z PROC	; stbtt__cff_index_get, COMDAT

; 1266 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec c0 01
	00 00		 sub	 rsp, 448		; 000001c0H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8b fc	 mov	 rdi, rsp
  00021	b9 70 00 00 00	 mov	 ecx, 112		; 00000070H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+488]

; 1267 :    int count, offsize, start, end;
; 1268 :    stbtt__buf_seek(&b, 0);

  00035	33 d2		 xor	 edx, edx
  00037	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  0003e	e8 00 00 00 00	 call	 ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek

; 1269 :    count = stbtt__buf_get16(&b);

  00043	ba 02 00 00 00	 mov	 edx, 2
  00048	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  0004f	e8 00 00 00 00	 call	 ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z ; stbtt__buf_get
  00054	89 45 04	 mov	 DWORD PTR count$[rbp], eax

; 1270 :    offsize = stbtt__buf_get8(&b);

  00057	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  0005e	e8 00 00 00 00	 call	 ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_get8
  00063	0f b6 c0	 movzx	 eax, al
  00066	89 45 24	 mov	 DWORD PTR offsize$[rbp], eax
$LN4@stbtt__cff:

; 1271 :    STBTT_assert(i >= 0 && i < count);

  00069	83 bd d0 01 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00070	7c 0b		 jl	 SHORT $LN9@stbtt__cff
  00072	8b 45 04	 mov	 eax, DWORD PTR count$[rbp]
  00075	39 85 d0 01 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  0007b	7c 22		 jl	 SHORT $LN10@stbtt__cff
$LN9@stbtt__cff:
  0007d	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__cff_index_get@@YA?AUstbtt__buf@@U2@H@Z@4JA
  00083	83 c0 05	 add	 eax, 5
  00086	44 8b c0	 mov	 r8d, eax
  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00090	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@PFMEGAIA@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0009d	33 c0		 xor	 eax, eax
$LN10@stbtt__cff:
  0009f	33 c0		 xor	 eax, eax
  000a1	85 c0		 test	 eax, eax
  000a3	75 c4		 jne	 SHORT $LN4@stbtt__cff
$LN7@stbtt__cff:

; 1272 :    STBTT_assert(offsize >= 1 && offsize <= 4);

  000a5	83 7d 24 01	 cmp	 DWORD PTR offsize$[rbp], 1
  000a9	7c 06		 jl	 SHORT $LN11@stbtt__cff
  000ab	83 7d 24 04	 cmp	 DWORD PTR offsize$[rbp], 4
  000af	7e 22		 jle	 SHORT $LN12@stbtt__cff
$LN11@stbtt__cff:
  000b1	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__cff_index_get@@YA?AUstbtt__buf@@U2@H@Z@4JA
  000b7	83 c0 06	 add	 eax, 6
  000ba	44 8b c0	 mov	 r8d, eax
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@IJDIOPHB@?$AAo?$AAf?$AAf?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA4?$AA?$AA@
  000cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000d1	33 c0		 xor	 eax, eax
$LN12@stbtt__cff:
  000d3	33 c0		 xor	 eax, eax
  000d5	85 c0		 test	 eax, eax
  000d7	75 cc		 jne	 SHORT $LN7@stbtt__cff

; 1273 :    stbtt__buf_skip(&b, i*offsize);

  000d9	8b 85 d0 01 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  000df	0f af 45 24	 imul	 eax, DWORD PTR offsize$[rbp]
  000e3	8b d0		 mov	 edx, eax
  000e5	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  000ec	e8 00 00 00 00	 call	 ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip

; 1274 :    start = stbtt__buf_get(&b, offsize);

  000f1	8b 55 24	 mov	 edx, DWORD PTR offsize$[rbp]
  000f4	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  000fb	e8 00 00 00 00	 call	 ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z ; stbtt__buf_get
  00100	89 45 44	 mov	 DWORD PTR start$[rbp], eax

; 1275 :    end = stbtt__buf_get(&b, offsize);

  00103	8b 55 24	 mov	 edx, DWORD PTR offsize$[rbp]
  00106	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  0010d	e8 00 00 00 00	 call	 ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z ; stbtt__buf_get
  00112	89 45 64	 mov	 DWORD PTR end$[rbp], eax

; 1276 :    return stbtt__buf_range(&b, 2+(count+1)*offsize+start, end - start);

  00115	8b 45 44	 mov	 eax, DWORD PTR start$[rbp]
  00118	8b 4d 64	 mov	 ecx, DWORD PTR end$[rbp]
  0011b	2b c8		 sub	 ecx, eax
  0011d	8b c1		 mov	 eax, ecx
  0011f	8b 4d 04	 mov	 ecx, DWORD PTR count$[rbp]
  00122	ff c1		 inc	 ecx
  00124	0f af 4d 24	 imul	 ecx, DWORD PTR offsize$[rbp]
  00128	8b 55 44	 mov	 edx, DWORD PTR start$[rbp]
  0012b	8d 4c 11 02	 lea	 ecx, DWORD PTR [rcx+rdx+2]
  0012f	44 8b c8	 mov	 r9d, eax
  00132	44 8b c1	 mov	 r8d, ecx
  00135	48 8b 95 c8 01
	00 00		 mov	 rdx, QWORD PTR b$[rbp]
  0013c	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  00143	e8 00 00 00 00	 call	 ?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
  00148	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0014f	48 8b f9	 mov	 rdi, rcx
  00152	48 8b f0	 mov	 rsi, rax
  00155	b9 10 00 00 00	 mov	 ecx, 16
  0015a	f3 a4		 rep movsb
  0015c	48 8d 85 48 01
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  00163	48 8b bd c0 01
	00 00		 mov	 rdi, QWORD PTR $T3[rbp]
  0016a	48 8b f0	 mov	 rsi, rax
  0016d	b9 10 00 00 00	 mov	 ecx, 16
  00172	f3 a4		 rep movsb
  00174	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR $T3[rbp]

; 1277 : }

  0017b	48 8d a5 a0 01
	00 00		 lea	 rsp, QWORD PTR [rbp+416]
  00182	5f		 pop	 rdi
  00183	5e		 pop	 rsi
  00184	5d		 pop	 rbp
  00185	c3		 ret	 0
?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ENDP	; stbtt__cff_index_get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z
_TEXT	SEGMENT
b$ = 224
?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z PROC	; stbtt__cff_index_count, COMDAT

; 1260 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1261 :    stbtt__buf_seek(b, 0);

  0002a	33 d2		 xor	 edx, edx
  0002c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  00033	e8 00 00 00 00	 call	 ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek

; 1262 :    return stbtt__buf_get16(b);

  00038	ba 02 00 00 00	 mov	 edx, 2
  0003d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  00044	e8 00 00 00 00	 call	 ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z ; stbtt__buf_get

; 1263 : }

  00049	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z ENDP	; stbtt__cff_index_count
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z
_TEXT	SEGMENT
i$ = 4
operands$ = 40
$T4 = 280
$T5 = 328
__$ArrayPad$ = 360
b$ = 400
key$ = 408
outcount$ = 416
out$ = 424
?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z PROC	; stbtt__dict_get_ints, COMDAT

; 1252 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 90 01
	00 00		 sub	 rsp, 400		; 00000190H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+440]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 68 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1253 :    int i;
; 1254 :    stbtt__buf operands = stbtt__dict_get(b, key);

  0004a	44 8b 85 98 01
	00 00		 mov	 r8d, DWORD PTR key$[rbp]
  00051	48 8b 95 90 01
	00 00		 mov	 rdx, QWORD PTR b$[rbp]
  00058	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  0005f	e8 00 00 00 00	 call	 ?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z ; stbtt__dict_get
  00064	48 8d 8d 18 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  0006b	48 8b f9	 mov	 rdi, rcx
  0006e	48 8b f0	 mov	 rsi, rax
  00071	b9 10 00 00 00	 mov	 ecx, 16
  00076	f3 a4		 rep movsb
  00078	48 8d 45 28	 lea	 rax, QWORD PTR operands$[rbp]
  0007c	48 8d 8d 18 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00083	48 8b f8	 mov	 rdi, rax
  00086	48 8b f1	 mov	 rsi, rcx
  00089	b9 10 00 00 00	 mov	 ecx, 16
  0008e	f3 a4		 rep movsb

; 1255 :    for (i = 0; i < outcount && operands.cursor < operands.size; i++)

  00090	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00097	eb 08		 jmp	 SHORT $LN4@stbtt__dic
$LN2@stbtt__dic:
  00099	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  0009c	ff c0		 inc	 eax
  0009e	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN4@stbtt__dic:
  000a1	8b 85 a0 01 00
	00		 mov	 eax, DWORD PTR outcount$[rbp]
  000a7	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  000aa	7d 21		 jge	 SHORT $LN3@stbtt__dic
  000ac	8b 45 34	 mov	 eax, DWORD PTR operands$[rbp+12]
  000af	39 45 30	 cmp	 DWORD PTR operands$[rbp+8], eax
  000b2	7d 19		 jge	 SHORT $LN3@stbtt__dic

; 1256 :       out[i] = stbtt__cff_int(&operands);

  000b4	48 8d 4d 28	 lea	 rcx, QWORD PTR operands$[rbp]
  000b8	e8 00 00 00 00	 call	 ?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z ; stbtt__cff_int
  000bd	48 63 4d 04	 movsxd	 rcx, DWORD PTR i$[rbp]
  000c1	48 8b 95 a8 01
	00 00		 mov	 rdx, QWORD PTR out$[rbp]
  000c8	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
  000cb	eb cc		 jmp	 SHORT $LN2@stbtt__dic
$LN3@stbtt__dic:

; 1257 : }

  000cd	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z$rtcFrameData
  000d8	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000dd	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000e4	48 33 cd	 xor	 rcx, rbp
  000e7	e8 00 00 00 00	 call	 __security_check_cookie
  000ec	48 8d a5 70 01
	00 00		 lea	 rsp, QWORD PTR [rbp+368]
  000f3	5f		 pop	 rdi
  000f4	5e		 pop	 rsi
  000f5	5d		 pop	 rbp
  000f6	c3		 ret	 0
?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ENDP	; stbtt__dict_get_ints
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z
_TEXT	SEGMENT
start$1 = 4
end$2 = 36
op$3 = 68
$T4 = 296
$T5 = 344
$T6 = 392
$T7 = 440
$T8 = 512
b$ = 520
key$ = 528
?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z PROC	; stbtt__dict_get, COMDAT

; 1237 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 00 02
	00 00		 sub	 rsp, 512		; 00000200H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8b fc	 mov	 rdi, rsp
  00021	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR [rsp+552]

; 1238 :    stbtt__buf_seek(b, 0);

  00035	33 d2		 xor	 edx, edx
  00037	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  0003e	e8 00 00 00 00	 call	 ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
$LN2@stbtt__dic:

; 1239 :    while (b->cursor < b->size) {

  00043	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  0004a	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  00051	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00054	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  00057	0f 8d d3 00 00
	00		 jge	 $LN3@stbtt__dic

; 1240 :       int start = b->cursor, end, op;

  0005d	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  00064	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00067	89 45 04	 mov	 DWORD PTR start$1[rbp], eax
$LN4@stbtt__dic:

; 1241 :       while (stbtt__buf_peek8(b) >= 28)

  0006a	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  00071	e8 00 00 00 00	 call	 ?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_peek8
  00076	0f b6 c0	 movzx	 eax, al
  00079	83 f8 1c	 cmp	 eax, 28
  0007c	7c 0e		 jl	 SHORT $LN5@stbtt__dic

; 1242 :          stbtt__cff_skip_operand(b);

  0007e	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  00085	e8 00 00 00 00	 call	 ?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z ; stbtt__cff_skip_operand
  0008a	eb de		 jmp	 SHORT $LN4@stbtt__dic
$LN5@stbtt__dic:

; 1243 :       end = b->cursor;

  0008c	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  00093	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00096	89 45 24	 mov	 DWORD PTR end$2[rbp], eax

; 1244 :       op = stbtt__buf_get8(b);

  00099	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  000a0	e8 00 00 00 00	 call	 ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_get8
  000a5	0f b6 c0	 movzx	 eax, al
  000a8	89 45 44	 mov	 DWORD PTR op$3[rbp], eax

; 1245 :       if (op == 12)  op = stbtt__buf_get8(b) | 0x100;

  000ab	83 7d 44 0c	 cmp	 DWORD PTR op$3[rbp], 12
  000af	75 16		 jne	 SHORT $LN6@stbtt__dic
  000b1	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  000b8	e8 00 00 00 00	 call	 ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_get8
  000bd	0f b6 c0	 movzx	 eax, al
  000c0	0f ba e8 08	 bts	 eax, 8
  000c4	89 45 44	 mov	 DWORD PTR op$3[rbp], eax
$LN6@stbtt__dic:

; 1246 :       if (op == key) return stbtt__buf_range(b, start, end-start);

  000c7	8b 85 10 02 00
	00		 mov	 eax, DWORD PTR key$[rbp]
  000cd	39 45 44	 cmp	 DWORD PTR op$3[rbp], eax
  000d0	75 59		 jne	 SHORT $LN7@stbtt__dic
  000d2	8b 45 04	 mov	 eax, DWORD PTR start$1[rbp]
  000d5	8b 4d 24	 mov	 ecx, DWORD PTR end$2[rbp]
  000d8	2b c8		 sub	 ecx, eax
  000da	8b c1		 mov	 eax, ecx
  000dc	44 8b c8	 mov	 r9d, eax
  000df	44 8b 45 04	 mov	 r8d, DWORD PTR start$1[rbp]
  000e3	48 8b 95 08 02
	00 00		 mov	 rdx, QWORD PTR b$[rbp]
  000ea	48 8d 8d 58 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  000f1	e8 00 00 00 00	 call	 ?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
  000f6	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  000fd	48 8b f9	 mov	 rdi, rcx
  00100	48 8b f0	 mov	 rsi, rax
  00103	b9 10 00 00 00	 mov	 ecx, 16
  00108	f3 a4		 rep movsb
  0010a	48 8d 85 28 01
	00 00		 lea	 rax, QWORD PTR $T4[rbp]
  00111	48 8b bd 00 02
	00 00		 mov	 rdi, QWORD PTR $T8[rbp]
  00118	48 8b f0	 mov	 rsi, rax
  0011b	b9 10 00 00 00	 mov	 ecx, 16
  00120	f3 a4		 rep movsb
  00122	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR $T8[rbp]
  00129	eb 51		 jmp	 SHORT $LN1@stbtt__dic
$LN7@stbtt__dic:

; 1247 :    }

  0012b	e9 13 ff ff ff	 jmp	 $LN2@stbtt__dic
$LN3@stbtt__dic:

; 1248 :    return stbtt__buf_range(b, 0, 0);

  00130	45 33 c9	 xor	 r9d, r9d
  00133	45 33 c0	 xor	 r8d, r8d
  00136	48 8b 95 08 02
	00 00		 mov	 rdx, QWORD PTR b$[rbp]
  0013d	48 8d 8d b8 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00144	e8 00 00 00 00	 call	 ?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
  00149	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00150	48 8b f9	 mov	 rdi, rcx
  00153	48 8b f0	 mov	 rsi, rax
  00156	b9 10 00 00 00	 mov	 ecx, 16
  0015b	f3 a4		 rep movsb
  0015d	48 8d 85 88 01
	00 00		 lea	 rax, QWORD PTR $T6[rbp]
  00164	48 8b bd 00 02
	00 00		 mov	 rdi, QWORD PTR $T8[rbp]
  0016b	48 8b f0	 mov	 rsi, rax
  0016e	b9 10 00 00 00	 mov	 ecx, 16
  00173	f3 a4		 rep movsb
  00175	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR $T8[rbp]
$LN1@stbtt__dic:

; 1249 : }

  0017c	48 8d a5 e0 01
	00 00		 lea	 rsp, QWORD PTR [rbp+480]
  00183	5f		 pop	 rdi
  00184	5e		 pop	 rsi
  00185	5d		 pop	 rbp
  00186	c3		 ret	 0
?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z ENDP	; stbtt__dict_get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z
_TEXT	SEGMENT
v$ = 4
b0$ = 36
b$ = 288
?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z PROC	; stbtt__cff_skip_operand, COMDAT

; 1221 : static void stbtt__cff_skip_operand(stbtt__buf *b) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 1222 :    int v, b0 = stbtt__buf_peek8(b);

  0002a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  00031	e8 00 00 00 00	 call	 ?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_peek8
  00036	0f b6 c0	 movzx	 eax, al
  00039	89 45 24	 mov	 DWORD PTR b0$[rbp], eax
$LN4@stbtt__cff:

; 1223 :    STBTT_assert(b0 >= 28);

  0003c	83 7d 24 1c	 cmp	 DWORD PTR b0$[rbp], 28
  00040	7d 22		 jge	 SHORT $LN12@stbtt__cff
  00042	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z@4JA
  00048	83 c0 02	 add	 eax, 2
  0004b	44 8b c0	 mov	 r8d, eax
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@KDMJFGHG@?$AAb?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA8?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN12@stbtt__cff:
  00064	33 c0		 xor	 eax, eax
  00066	85 c0		 test	 eax, eax
  00068	75 d2		 jne	 SHORT $LN4@stbtt__cff

; 1224 :    if (b0 == 30) {

  0006a	83 7d 24 1e	 cmp	 DWORD PTR b0$[rbp], 30
  0006e	75 55		 jne	 SHORT $LN7@stbtt__cff

; 1225 :       stbtt__buf_skip(b, 1);

  00070	ba 01 00 00 00	 mov	 edx, 1
  00075	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  0007c	e8 00 00 00 00	 call	 ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
$LN5@stbtt__cff:

; 1226 :       while (b->cursor < b->size) {

  00081	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  00088	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  0008f	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00092	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  00095	7d 2c		 jge	 SHORT $LN6@stbtt__cff

; 1227 :          v = stbtt__buf_get8(b);

  00097	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  0009e	e8 00 00 00 00	 call	 ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_get8
  000a3	0f b6 c0	 movzx	 eax, al
  000a6	89 45 04	 mov	 DWORD PTR v$[rbp], eax

; 1228 :          if ((v & 0xF) == 0xF || (v >> 4) == 0xF)

  000a9	8b 45 04	 mov	 eax, DWORD PTR v$[rbp]
  000ac	83 e0 0f	 and	 eax, 15
  000af	83 f8 0f	 cmp	 eax, 15
  000b2	74 0b		 je	 SHORT $LN10@stbtt__cff
  000b4	8b 45 04	 mov	 eax, DWORD PTR v$[rbp]
  000b7	c1 f8 04	 sar	 eax, 4
  000ba	83 f8 0f	 cmp	 eax, 15
  000bd	75 02		 jne	 SHORT $LN9@stbtt__cff
$LN10@stbtt__cff:

; 1229 :             break;

  000bf	eb 02		 jmp	 SHORT $LN6@stbtt__cff
$LN9@stbtt__cff:

; 1230 :       }

  000c1	eb be		 jmp	 SHORT $LN5@stbtt__cff
$LN6@stbtt__cff:

; 1231 :    } else {

  000c3	eb 0c		 jmp	 SHORT $LN8@stbtt__cff
$LN7@stbtt__cff:

; 1232 :       stbtt__cff_int(b);

  000c5	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  000cc	e8 00 00 00 00	 call	 ?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z ; stbtt__cff_int
$LN8@stbtt__cff:

; 1233 :    }
; 1234 : }

  000d1	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000d8	5f		 pop	 rdi
  000d9	5d		 pop	 rbp
  000da	c3		 ret	 0
?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z ENDP	; stbtt__cff_skip_operand
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z
_TEXT	SEGMENT
b0$ = 4
tv83 = 212
tv73 = 212
b$ = 256
?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z PROC		; stbtt__cff_int, COMDAT

; 1210 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 1211 :    int b0 = stbtt__buf_get8(b);

  0002a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  00031	e8 00 00 00 00	 call	 ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_get8
  00036	0f b6 c0	 movzx	 eax, al
  00039	89 45 04	 mov	 DWORD PTR b0$[rbp], eax

; 1212 :    if (b0 >= 32 && b0 <= 246)       return b0 - 139;

  0003c	83 7d 04 20	 cmp	 DWORD PTR b0$[rbp], 32	; 00000020H
  00040	7c 1b		 jl	 SHORT $LN5@stbtt__cff
  00042	81 7d 04 f6 00
	00 00		 cmp	 DWORD PTR b0$[rbp], 246	; 000000f6H
  00049	7f 12		 jg	 SHORT $LN5@stbtt__cff
  0004b	8b 45 04	 mov	 eax, DWORD PTR b0$[rbp]
  0004e	2d 8b 00 00 00	 sub	 eax, 139		; 0000008bH
  00053	e9 f7 00 00 00	 jmp	 $LN1@stbtt__cff
  00058	e9 c2 00 00 00	 jmp	 $LN6@stbtt__cff
$LN5@stbtt__cff:

; 1213 :    else if (b0 >= 247 && b0 <= 250) return (b0 - 247)*256 + stbtt__buf_get8(b) + 108;

  0005d	81 7d 04 f7 00
	00 00		 cmp	 DWORD PTR b0$[rbp], 247	; 000000f7H
  00064	7c 3d		 jl	 SHORT $LN7@stbtt__cff
  00066	81 7d 04 fa 00
	00 00		 cmp	 DWORD PTR b0$[rbp], 250	; 000000faH
  0006d	7f 34		 jg	 SHORT $LN7@stbtt__cff
  0006f	8b 45 04	 mov	 eax, DWORD PTR b0$[rbp]
  00072	2d f7 00 00 00	 sub	 eax, 247		; 000000f7H
  00077	69 c0 00 01 00
	00		 imul	 eax, eax, 256		; 00000100H
  0007d	89 85 d4 00 00
	00		 mov	 DWORD PTR tv73[rbp], eax
  00083	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  0008a	e8 00 00 00 00	 call	 ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_get8
  0008f	0f b6 c0	 movzx	 eax, al
  00092	8b 8d d4 00 00
	00		 mov	 ecx, DWORD PTR tv73[rbp]
  00098	8d 44 01 6c	 lea	 eax, DWORD PTR [rcx+rax+108]
  0009c	e9 ae 00 00 00	 jmp	 $LN1@stbtt__cff
  000a1	eb 7c		 jmp	 SHORT $LN8@stbtt__cff
$LN7@stbtt__cff:

; 1214 :    else if (b0 >= 251 && b0 <= 254) return -(b0 - 251)*256 - stbtt__buf_get8(b) - 108;

  000a3	81 7d 04 fb 00
	00 00		 cmp	 DWORD PTR b0$[rbp], 251	; 000000fbH
  000aa	7c 3f		 jl	 SHORT $LN9@stbtt__cff
  000ac	81 7d 04 fe 00
	00 00		 cmp	 DWORD PTR b0$[rbp], 254	; 000000feH
  000b3	7f 36		 jg	 SHORT $LN9@stbtt__cff
  000b5	8b 45 04	 mov	 eax, DWORD PTR b0$[rbp]
  000b8	2d fb 00 00 00	 sub	 eax, 251		; 000000fbH
  000bd	f7 d8		 neg	 eax
  000bf	69 c0 00 01 00
	00		 imul	 eax, eax, 256		; 00000100H
  000c5	89 85 d4 00 00
	00		 mov	 DWORD PTR tv83[rbp], eax
  000cb	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  000d2	e8 00 00 00 00	 call	 ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_get8
  000d7	0f b6 c0	 movzx	 eax, al
  000da	8b 8d d4 00 00
	00		 mov	 ecx, DWORD PTR tv83[rbp]
  000e0	2b c8		 sub	 ecx, eax
  000e2	8b c1		 mov	 eax, ecx
  000e4	83 e8 6c	 sub	 eax, 108		; 0000006cH
  000e7	eb 66		 jmp	 SHORT $LN1@stbtt__cff
  000e9	eb 34		 jmp	 SHORT $LN10@stbtt__cff
$LN9@stbtt__cff:

; 1215 :    else if (b0 == 28)               return stbtt__buf_get16(b);

  000eb	83 7d 04 1c	 cmp	 DWORD PTR b0$[rbp], 28
  000ef	75 15		 jne	 SHORT $LN11@stbtt__cff
  000f1	ba 02 00 00 00	 mov	 edx, 2
  000f6	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  000fd	e8 00 00 00 00	 call	 ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z ; stbtt__buf_get
  00102	eb 4b		 jmp	 SHORT $LN1@stbtt__cff
  00104	eb 19		 jmp	 SHORT $LN12@stbtt__cff
$LN11@stbtt__cff:

; 1216 :    else if (b0 == 29)               return stbtt__buf_get32(b);

  00106	83 7d 04 1d	 cmp	 DWORD PTR b0$[rbp], 29
  0010a	75 13		 jne	 SHORT $LN13@stbtt__cff
  0010c	ba 04 00 00 00	 mov	 edx, 4
  00111	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  00118	e8 00 00 00 00	 call	 ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z ; stbtt__buf_get
  0011d	eb 30		 jmp	 SHORT $LN1@stbtt__cff
$LN13@stbtt__cff:
$LN12@stbtt__cff:
$LN10@stbtt__cff:
$LN8@stbtt__cff:
$LN6@stbtt__cff:
$LN4@stbtt__cff:

; 1217 :    STBTT_assert(0);

  0011f	33 c0		 xor	 eax, eax
  00121	85 c0		 test	 eax, eax
  00123	75 22		 jne	 SHORT $LN15@stbtt__cff
  00125	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z@4JA
  0012b	83 c0 07	 add	 eax, 7
  0012e	44 8b c0	 mov	 r8d, eax
  00131	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00138	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  0013f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00145	33 c0		 xor	 eax, eax
$LN15@stbtt__cff:
  00147	33 c0		 xor	 eax, eax
  00149	85 c0		 test	 eax, eax
  0014b	75 d2		 jne	 SHORT $LN4@stbtt__cff

; 1218 :    return 0;

  0014d	33 c0		 xor	 eax, eax
$LN1@stbtt__cff:

; 1219 : }

  0014f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00156	5f		 pop	 rdi
  00157	5d		 pop	 rbp
  00158	c3		 ret	 0
?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z ENDP		; stbtt__cff_int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z
_TEXT	SEGMENT
count$ = 4
start$ = 36
offsize$ = 68
$T1 = 296
$T2 = 344
$T3 = 416
b$ = 424
?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z PROC	; stbtt__cff_get_index, COMDAT

; 1196 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	48 81 ec a0 01
	00 00		 sub	 rsp, 416		; 000001a0H
  00014	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 68 00 00 00	 mov	 ecx, 104		; 00000068H
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+456]

; 1197 :    int count, start, offsize;
; 1198 :    start = b->cursor;

  00030	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  00037	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0003a	89 45 24	 mov	 DWORD PTR start$[rbp], eax

; 1199 :    count = stbtt__buf_get16(b);

  0003d	ba 02 00 00 00	 mov	 edx, 2
  00042	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  00049	e8 00 00 00 00	 call	 ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z ; stbtt__buf_get
  0004e	89 45 04	 mov	 DWORD PTR count$[rbp], eax

; 1200 :    if (count) {

  00051	83 7d 04 00	 cmp	 DWORD PTR count$[rbp], 0
  00055	74 7a		 je	 SHORT $LN5@stbtt__cff

; 1201 :       offsize = stbtt__buf_get8(b);

  00057	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  0005e	e8 00 00 00 00	 call	 ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_get8
  00063	0f b6 c0	 movzx	 eax, al
  00066	89 45 44	 mov	 DWORD PTR offsize$[rbp], eax
$LN4@stbtt__cff:

; 1202 :       STBTT_assert(offsize >= 1 && offsize <= 4);

  00069	83 7d 44 01	 cmp	 DWORD PTR offsize$[rbp], 1
  0006d	7c 06		 jl	 SHORT $LN7@stbtt__cff
  0006f	83 7d 44 04	 cmp	 DWORD PTR offsize$[rbp], 4
  00073	7e 22		 jle	 SHORT $LN8@stbtt__cff
$LN7@stbtt__cff:
  00075	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU2@@Z@4JA
  0007b	83 c0 06	 add	 eax, 6
  0007e	44 8b c0	 mov	 r8d, eax
  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@IJDIOPHB@?$AAo?$AAf?$AAf?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA4?$AA?$AA@
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00095	33 c0		 xor	 eax, eax
$LN8@stbtt__cff:
  00097	33 c0		 xor	 eax, eax
  00099	85 c0		 test	 eax, eax
  0009b	75 cc		 jne	 SHORT $LN4@stbtt__cff

; 1203 :       stbtt__buf_skip(b, offsize * count);

  0009d	8b 45 44	 mov	 eax, DWORD PTR offsize$[rbp]
  000a0	0f af 45 04	 imul	 eax, DWORD PTR count$[rbp]
  000a4	8b d0		 mov	 edx, eax
  000a6	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  000ad	e8 00 00 00 00	 call	 ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip

; 1204 :       stbtt__buf_skip(b, stbtt__buf_get(b, offsize) - 1);

  000b2	8b 55 44	 mov	 edx, DWORD PTR offsize$[rbp]
  000b5	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  000bc	e8 00 00 00 00	 call	 ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z ; stbtt__buf_get
  000c1	ff c8		 dec	 eax
  000c3	8b d0		 mov	 edx, eax
  000c5	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  000cc	e8 00 00 00 00	 call	 ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
$LN5@stbtt__cff:

; 1205 :    }
; 1206 :    return stbtt__buf_range(b, start, b->cursor - start);

  000d1	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  000d8	8b 4d 24	 mov	 ecx, DWORD PTR start$[rbp]
  000db	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  000de	2b c1		 sub	 eax, ecx
  000e0	44 8b c8	 mov	 r9d, eax
  000e3	44 8b 45 24	 mov	 r8d, DWORD PTR start$[rbp]
  000e7	48 8b 95 a8 01
	00 00		 mov	 rdx, QWORD PTR b$[rbp]
  000ee	48 8d 8d 58 01
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  000f5	e8 00 00 00 00	 call	 ?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
  000fa	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00101	48 8b f9	 mov	 rdi, rcx
  00104	48 8b f0	 mov	 rsi, rax
  00107	b9 10 00 00 00	 mov	 ecx, 16
  0010c	f3 a4		 rep movsb
  0010e	48 8d 85 28 01
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  00115	48 8b bd a0 01
	00 00		 mov	 rdi, QWORD PTR $T3[rbp]
  0011c	48 8b f0	 mov	 rsi, rax
  0011f	b9 10 00 00 00	 mov	 ecx, 16
  00124	f3 a4		 rep movsb
  00126	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR $T3[rbp]

; 1207 : }

  0012d	48 8d a5 80 01
	00 00		 lea	 rsp, QWORD PTR [rbp+384]
  00134	5f		 pop	 rdi
  00135	5e		 pop	 rsi
  00136	5d		 pop	 rbp
  00137	c3		 ret	 0
?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ENDP	; stbtt__cff_get_index
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z
_TEXT	SEGMENT
r$ = 8
$T4 = 248
$T5 = 296
$T6 = 368
b$ = 376
o$ = 384
s$ = 392
?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z PROC	; stbtt__buf_range, COMDAT

; 1187 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 70 01
	00 00		 sub	 rsp, 368		; 00000170H
  0001e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 5c 00 00 00	 mov	 ecx, 92			; 0000005cH
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]

; 1188 :    stbtt__buf r = stbtt__new_buf(NULL, 0);

  0003a	45 33 c0	 xor	 r8d, r8d
  0003d	33 d2		 xor	 edx, edx
  0003f	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00046	e8 00 00 00 00	 call	 ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
  0004b	48 8d 8d f8 00
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00052	48 8b f9	 mov	 rdi, rcx
  00055	48 8b f0	 mov	 rsi, rax
  00058	b9 10 00 00 00	 mov	 ecx, 16
  0005d	f3 a4		 rep movsb
  0005f	48 8d 45 08	 lea	 rax, QWORD PTR r$[rbp]
  00063	48 8d 8d f8 00
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  0006a	48 8b f8	 mov	 rdi, rax
  0006d	48 8b f1	 mov	 rsi, rcx
  00070	b9 10 00 00 00	 mov	 ecx, 16
  00075	f3 a4		 rep movsb

; 1189 :    if (o < 0 || s < 0 || o > b->size || s > b->size - o) return r;

  00077	83 bd 80 01 00
	00 00		 cmp	 DWORD PTR o$[rbp], 0
  0007e	7c 35		 jl	 SHORT $LN3@stbtt__buf
  00080	83 bd 88 01 00
	00 00		 cmp	 DWORD PTR s$[rbp], 0
  00087	7c 2c		 jl	 SHORT $LN3@stbtt__buf
  00089	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  00090	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00093	39 85 80 01 00
	00		 cmp	 DWORD PTR o$[rbp], eax
  00099	7f 1a		 jg	 SHORT $LN3@stbtt__buf
  0009b	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  000a2	8b 8d 80 01 00
	00		 mov	 ecx, DWORD PTR o$[rbp]
  000a8	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  000ab	2b c1		 sub	 eax, ecx
  000ad	39 85 88 01 00
	00		 cmp	 DWORD PTR s$[rbp], eax
  000b3	7e 1e		 jle	 SHORT $LN2@stbtt__buf
$LN3@stbtt__buf:
  000b5	48 8d 45 08	 lea	 rax, QWORD PTR r$[rbp]
  000b9	48 8b bd 70 01
	00 00		 mov	 rdi, QWORD PTR $T6[rbp]
  000c0	48 8b f0	 mov	 rsi, rax
  000c3	b9 10 00 00 00	 mov	 ecx, 16
  000c8	f3 a4		 rep movsb
  000ca	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR $T6[rbp]
  000d1	eb 3a		 jmp	 SHORT $LN1@stbtt__buf
$LN2@stbtt__buf:

; 1190 :    r.data = b->data + o;

  000d3	48 63 85 80 01
	00 00		 movsxd	 rax, DWORD PTR o$[rbp]
  000da	48 8b 8d 78 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  000e1	48 03 01	 add	 rax, QWORD PTR [rcx]
  000e4	48 89 45 08	 mov	 QWORD PTR r$[rbp], rax

; 1191 :    r.size = s;

  000e8	8b 85 88 01 00
	00		 mov	 eax, DWORD PTR s$[rbp]
  000ee	89 45 14	 mov	 DWORD PTR r$[rbp+12], eax

; 1192 :    return r;

  000f1	48 8d 45 08	 lea	 rax, QWORD PTR r$[rbp]
  000f5	48 8b bd 70 01
	00 00		 mov	 rdi, QWORD PTR $T6[rbp]
  000fc	48 8b f0	 mov	 rsi, rax
  000ff	b9 10 00 00 00	 mov	 ecx, 16
  00104	f3 a4		 rep movsb
  00106	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR $T6[rbp]
$LN1@stbtt__buf:

; 1193 : }

  0010d	48 8b f8	 mov	 rdi, rax
  00110	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00114	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z$rtcFrameData
  0011b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00120	48 8b c7	 mov	 rax, rdi
  00123	48 8d a5 50 01
	00 00		 lea	 rsp, QWORD PTR [rbp+336]
  0012a	5f		 pop	 rdi
  0012b	5e		 pop	 rsi
  0012c	5d		 pop	 rbp
  0012d	c3		 ret	 0
?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ENDP	; stbtt__buf_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z
_TEXT	SEGMENT
r$ = 8
$T4 = 272
p$ = 280
size$ = 288
?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z PROC		; stbtt__new_buf, COMDAT

; 1174 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8b fc	 mov	 rdi, rsp
  00021	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]
$LN4@stbtt__new:

; 1175 :    stbtt__buf r;
; 1176 :    STBTT_assert(size < 0x40000000);

  00035	48 81 bd 20 01
	00 00 00 00 00
	40		 cmp	 QWORD PTR size$[rbp], 1073741824 ; 40000000H
  00040	72 22		 jb	 SHORT $LN6@stbtt__new
  00042	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z@4JA
  00048	83 c0 02	 add	 eax, 2
  0004b	44 8b c0	 mov	 r8d, eax
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@EPOLDKHI@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AA0?$AAx?$AA4?$AA0?$AA0?$AA0?$AA0?$AA0?$AA0?$AA0?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN6@stbtt__new:
  00064	33 c0		 xor	 eax, eax
  00066	85 c0		 test	 eax, eax
  00068	75 cb		 jne	 SHORT $LN4@stbtt__new

; 1177 :    r.data = (stbtt_uint8*) p;

  0006a	48 8b 85 18 01
	00 00		 mov	 rax, QWORD PTR p$[rbp]
  00071	48 89 45 08	 mov	 QWORD PTR r$[rbp], rax

; 1178 :    r.size = (int) size;

  00075	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR size$[rbp]
  0007b	89 45 14	 mov	 DWORD PTR r$[rbp+12], eax

; 1179 :    r.cursor = 0;

  0007e	c7 45 10 00 00
	00 00		 mov	 DWORD PTR r$[rbp+8], 0

; 1180 :    return r;

  00085	48 8d 45 08	 lea	 rax, QWORD PTR r$[rbp]
  00089	48 8b bd 10 01
	00 00		 mov	 rdi, QWORD PTR $T4[rbp]
  00090	48 8b f0	 mov	 rsi, rax
  00093	b9 10 00 00 00	 mov	 ecx, 16
  00098	f3 a4		 rep movsb
  0009a	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR $T4[rbp]

; 1181 : }

  000a1	48 8b f8	 mov	 rdi, rax
  000a4	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z$rtcFrameData
  000af	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000b4	48 8b c7	 mov	 rax, rdi
  000b7	48 8d a5 f0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+240]
  000be	5f		 pop	 rdi
  000bf	5e		 pop	 rsi
  000c0	5d		 pop	 rbp
  000c1	c3		 ret	 0
?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ENDP		; stbtt__new_buf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z
_TEXT	SEGMENT
v$ = 4
i$ = 36
tv74 = 244
b$ = 288
n$ = 296
?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z PROC		; stbtt__buf_get, COMDAT

; 1164 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 1165 :    stbtt_uint32 v = 0;

  0002e	c7 45 04 00 00
	00 00		 mov	 DWORD PTR v$[rbp], 0
$LN4@stbtt__buf:

; 1166 :    int i;
; 1167 :    STBTT_assert(n >= 1 && n <= 4);

  00035	83 bd 28 01 00
	00 01		 cmp	 DWORD PTR n$[rbp], 1
  0003c	7c 09		 jl	 SHORT $LN9@stbtt__buf
  0003e	83 bd 28 01 00
	00 04		 cmp	 DWORD PTR n$[rbp], 4
  00045	7e 22		 jle	 SHORT $LN10@stbtt__buf
$LN9@stbtt__buf:
  00047	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z@4JA
  0004d	83 c0 03	 add	 eax, 3
  00050	44 8b c0	 mov	 r8d, eax
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@OMFGMKMB@?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA4?$AA?$AA@
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00067	33 c0		 xor	 eax, eax
$LN10@stbtt__buf:
  00069	33 c0		 xor	 eax, eax
  0006b	85 c0		 test	 eax, eax
  0006d	75 c6		 jne	 SHORT $LN4@stbtt__buf

; 1168 :    for (i = 0; i < n; i++)

  0006f	c7 45 24 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00076	eb 08		 jmp	 SHORT $LN7@stbtt__buf
$LN5@stbtt__buf:
  00078	8b 45 24	 mov	 eax, DWORD PTR i$[rbp]
  0007b	ff c0		 inc	 eax
  0007d	89 45 24	 mov	 DWORD PTR i$[rbp], eax
$LN7@stbtt__buf:
  00080	8b 85 28 01 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  00086	39 45 24	 cmp	 DWORD PTR i$[rbp], eax
  00089	7d 2a		 jge	 SHORT $LN6@stbtt__buf

; 1169 :       v = (v << 8) | stbtt__buf_get8(b);

  0008b	8b 45 04	 mov	 eax, DWORD PTR v$[rbp]
  0008e	c1 e0 08	 shl	 eax, 8
  00091	89 85 f4 00 00
	00		 mov	 DWORD PTR tv74[rbp], eax
  00097	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  0009e	e8 00 00 00 00	 call	 ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_get8
  000a3	0f b6 c0	 movzx	 eax, al
  000a6	8b 8d f4 00 00
	00		 mov	 ecx, DWORD PTR tv74[rbp]
  000ac	0b c8		 or	 ecx, eax
  000ae	8b c1		 mov	 eax, ecx
  000b0	89 45 04	 mov	 DWORD PTR v$[rbp], eax
  000b3	eb c3		 jmp	 SHORT $LN5@stbtt__buf
$LN6@stbtt__buf:

; 1170 :    return v;

  000b5	8b 45 04	 mov	 eax, DWORD PTR v$[rbp]

; 1171 : }

  000b8	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000bf	5f		 pop	 rdi
  000c0	5d		 pop	 rbp
  000c1	c3		 ret	 0
?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z ENDP		; stbtt__buf_get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z
_TEXT	SEGMENT
b$ = 224
o$ = 232
?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z PROC		; stbtt__buf_skip, COMDAT

; 1159 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1160 :    stbtt__buf_seek(b, b->cursor + o);

  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  00035	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00038	03 85 e8 00 00
	00		 add	 eax, DWORD PTR o$[rbp]
  0003e	8b d0		 mov	 edx, eax
  00040	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  00047	e8 00 00 00 00	 call	 ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek

; 1161 : }

  0004c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00053	5f		 pop	 rdi
  00054	5d		 pop	 rbp
  00055	c3		 ret	 0
?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ENDP		; stbtt__buf_skip
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z
_TEXT	SEGMENT
tv78 = 192
b$ = 240
o$ = 248
?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z PROC		; stbtt__buf_seek, COMDAT

; 1153 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
$LN4@stbtt__buf:

; 1154 :    STBTT_assert(!(o > b->size || o < 0));

  0002e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  00035	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00038	39 85 f8 00 00
	00		 cmp	 DWORD PTR o$[rbp], eax
  0003e	7f 09		 jg	 SHORT $LN6@stbtt__buf
  00040	83 bd f8 00 00
	00 00		 cmp	 DWORD PTR o$[rbp], 0
  00047	7d 21		 jge	 SHORT $LN7@stbtt__buf
$LN6@stbtt__buf:
  00049	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z@4JA
  0004f	ff c0		 inc	 eax
  00051	44 8b c0	 mov	 r8d, eax
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@CPAEOPEI@?$AA?$CB?$AA?$CI?$AAo?$AA?5?$AA?$DO?$AA?5?$AAb?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAo?$AA?5?$AA?$DM?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00068	33 c0		 xor	 eax, eax
$LN7@stbtt__buf:
  0006a	33 c0		 xor	 eax, eax
  0006c	85 c0		 test	 eax, eax
  0006e	75 be		 jne	 SHORT $LN4@stbtt__buf

; 1155 :    b->cursor = (o > b->size || o < 0) ? b->size : o;

  00070	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  00077	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0007a	39 85 f8 00 00
	00		 cmp	 DWORD PTR o$[rbp], eax
  00080	7f 17		 jg	 SHORT $LN8@stbtt__buf
  00082	83 bd f8 00 00
	00 00		 cmp	 DWORD PTR o$[rbp], 0
  00089	7c 0e		 jl	 SHORT $LN8@stbtt__buf
  0008b	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR o$[rbp]
  00091	89 85 c0 00 00
	00		 mov	 DWORD PTR tv78[rbp], eax
  00097	eb 10		 jmp	 SHORT $LN9@stbtt__buf
$LN8@stbtt__buf:
  00099	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  000a0	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  000a3	89 85 c0 00 00
	00		 mov	 DWORD PTR tv78[rbp], eax
$LN9@stbtt__buf:
  000a9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  000b0	8b 8d c0 00 00
	00		 mov	 ecx, DWORD PTR tv78[rbp]
  000b6	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 1156 : }

  000b9	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000c0	5f		 pop	 rdi
  000c1	5d		 pop	 rbp
  000c2	c3		 ret	 0
?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ENDP		; stbtt__buf_seek
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z
_TEXT	SEGMENT
b$ = 224
?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z PROC		; stbtt__buf_peek8, COMDAT

; 1146 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 1147 :    if (b->cursor >= b->size)

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  0002f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  00036	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00039	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  0003c	7c 04		 jl	 SHORT $LN2@stbtt__buf

; 1148 :       return 0;

  0003e	32 c0		 xor	 al, al
  00040	eb 19		 jmp	 SHORT $LN1@stbtt__buf
$LN2@stbtt__buf:

; 1149 :    return b->data[b->cursor];

  00042	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  00049	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  0004d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  00054	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00057	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
$LN1@stbtt__buf:

; 1150 : }

  0005b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00062	5f		 pop	 rdi
  00063	5d		 pop	 rbp
  00064	c3		 ret	 0
?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z ENDP		; stbtt__buf_peek8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z
_TEXT	SEGMENT
tv75 = 192
b$ = 240
?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z PROC		; stbtt__buf_get8, COMDAT

; 1139 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+248]

; 1140 :    if (b->cursor >= b->size)

  00028	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  0002f	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  00036	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00039	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  0003c	7c 04		 jl	 SHORT $LN2@stbtt__buf

; 1141 :       return 0;

  0003e	32 c0		 xor	 al, al
  00040	eb 3c		 jmp	 SHORT $LN1@stbtt__buf
$LN2@stbtt__buf:

; 1142 :    return b->data[b->cursor++];

  00042	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  00049	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  0004d	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  00054	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00057	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0005b	88 85 c0 00 00
	00		 mov	 BYTE PTR tv75[rbp], al
  00061	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  00068	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0006b	ff c0		 inc	 eax
  0006d	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  00074	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  00077	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv75[rbp]
$LN1@stbtt__buf:

; 1143 : }

  0007e	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00085	5f		 pop	 rdi
  00086	5d		 pop	 rbp
  00087	c3		 ret	 0
?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ENDP		; stbtt__buf_get8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT stbtt_Rasterize
_TEXT	SEGMENT
scale$ = 4
winding_count$ = 36
winding_lengths$ = 72
windings$ = 104
tv65 = 308
__$ArrayPad$ = 312
result$ = 352
flatness_in_pixels$ = 360
vertices$ = 368
num_verts$ = 376
scale_x$ = 384
scale_y$ = 392
shift_x$ = 400
shift_y$ = 408
x_off$ = 416
y_off$ = 424
invert$ = 432
userdata$ = 440
stbtt_Rasterize PROC					; COMDAT

; 3704 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001e	48 8d 6c 24 60	 lea	 rbp, QWORD PTR [rsp+96]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+456]
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3705 :    float scale            = scale_x > scale_y ? scale_y : scale_x;

  0004b	f3 0f 10 85 80
	01 00 00	 movss	 xmm0, DWORD PTR scale_x$[rbp]
  00053	0f 2f 85 88 01
	00 00		 comiss	 xmm0, DWORD PTR scale_y$[rbp]
  0005a	76 12		 jbe	 SHORT $LN4@stbtt_Rast
  0005c	f3 0f 10 85 88
	01 00 00	 movss	 xmm0, DWORD PTR scale_y$[rbp]
  00064	f3 0f 11 85 34
	01 00 00	 movss	 DWORD PTR tv65[rbp], xmm0
  0006c	eb 10		 jmp	 SHORT $LN5@stbtt_Rast
$LN4@stbtt_Rast:
  0006e	f3 0f 10 85 80
	01 00 00	 movss	 xmm0, DWORD PTR scale_x$[rbp]
  00076	f3 0f 11 85 34
	01 00 00	 movss	 DWORD PTR tv65[rbp], xmm0
$LN5@stbtt_Rast:
  0007e	f3 0f 10 85 34
	01 00 00	 movss	 xmm0, DWORD PTR tv65[rbp]
  00086	f3 0f 11 45 04	 movss	 DWORD PTR scale$[rbp], xmm0

; 3706 :    int winding_count      = 0;

  0008b	c7 45 24 00 00
	00 00		 mov	 DWORD PTR winding_count$[rbp], 0

; 3707 :    int *winding_lengths   = NULL;

  00092	48 c7 45 48 00
	00 00 00	 mov	 QWORD PTR winding_lengths$[rbp], 0

; 3708 :    stbtt__point *windings = stbtt_FlattenCurves(vertices, num_verts, flatness_in_pixels / scale, &winding_lengths, &winding_count, userdata);

  0009a	f3 0f 10 85 68
	01 00 00	 movss	 xmm0, DWORD PTR flatness_in_pixels$[rbp]
  000a2	f3 0f 5e 45 04	 divss	 xmm0, DWORD PTR scale$[rbp]
  000a7	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR userdata$[rbp]
  000ae	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000b3	48 8d 45 24	 lea	 rax, QWORD PTR winding_count$[rbp]
  000b7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000bc	4c 8d 4d 48	 lea	 r9, QWORD PTR winding_lengths$[rbp]
  000c0	0f 28 d0	 movaps	 xmm2, xmm0
  000c3	8b 95 78 01 00
	00		 mov	 edx, DWORD PTR num_verts$[rbp]
  000c9	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR vertices$[rbp]
  000d0	e8 00 00 00 00	 call	 ?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z ; stbtt_FlattenCurves
  000d5	48 89 45 68	 mov	 QWORD PTR windings$[rbp], rax

; 3709 :    if (windings) {

  000d9	48 83 7d 68 00	 cmp	 QWORD PTR windings$[rbp], 0
  000de	0f 84 8c 00 00
	00		 je	 $LN2@stbtt_Rast

; 3710 :       stbtt__rasterize(result, windings, winding_lengths, winding_count, scale_x, scale_y, shift_x, shift_y, x_off, y_off, invert, userdata);

  000e4	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR userdata$[rbp]
  000eb	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  000f0	8b 85 b0 01 00
	00		 mov	 eax, DWORD PTR invert$[rbp]
  000f6	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  000fa	8b 85 a8 01 00
	00		 mov	 eax, DWORD PTR y_off$[rbp]
  00100	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00104	8b 85 a0 01 00
	00		 mov	 eax, DWORD PTR x_off$[rbp]
  0010a	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  0010e	f3 0f 10 85 98
	01 00 00	 movss	 xmm0, DWORD PTR shift_y$[rbp]
  00116	f3 0f 11 44 24
	38		 movss	 DWORD PTR [rsp+56], xmm0
  0011c	f3 0f 10 85 90
	01 00 00	 movss	 xmm0, DWORD PTR shift_x$[rbp]
  00124	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  0012a	f3 0f 10 85 88
	01 00 00	 movss	 xmm0, DWORD PTR scale_y$[rbp]
  00132	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00138	f3 0f 10 85 80
	01 00 00	 movss	 xmm0, DWORD PTR scale_x$[rbp]
  00140	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00146	44 8b 4d 24	 mov	 r9d, DWORD PTR winding_count$[rbp]
  0014a	4c 8b 45 48	 mov	 r8, QWORD PTR winding_lengths$[rbp]
  0014e	48 8b 55 68	 mov	 rdx, QWORD PTR windings$[rbp]
  00152	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR result$[rbp]
  00159	e8 00 00 00 00	 call	 ?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z ; stbtt__rasterize

; 3711 :       STBTT_free(winding_lengths, userdata);

  0015e	48 8b 4d 48	 mov	 rcx, QWORD PTR winding_lengths$[rbp]
  00162	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree

; 3712 :       STBTT_free(windings, userdata);

  00167	48 8b 4d 68	 mov	 rcx, QWORD PTR windings$[rbp]
  0016b	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN2@stbtt_Rast:

; 3713 :    }
; 3714 : }

  00170	48 8d 4d a0	 lea	 rcx, QWORD PTR [rbp-96]
  00174	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:stbtt_Rasterize$rtcFrameData
  0017b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00180	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00187	48 33 cd	 xor	 rcx, rbp
  0018a	e8 00 00 00 00	 call	 __security_check_cookie
  0018f	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  00196	5f		 pop	 rdi
  00197	5d		 pop	 rbp
  00198	c3		 ret	 0
stbtt_Rasterize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT stbtt_GetGlyphBitmapBoxSubpixel
_TEXT	SEGMENT
x0$ = 4
y0$ = 36
x1$ = 68
y1$ = 100
__$ArrayPad$ = 312
font$ = 352
glyph$ = 360
scale_x$ = 368
scale_y$ = 376
shift_x$ = 384
shift_y$ = 392
ix0$ = 400
iy0$ = 408
ix1$ = 416
iy1$ = 424
stbtt_GetGlyphBitmapBoxSubpixel PROC			; COMDAT

; 2727 : {

  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  0001e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 5e 00 00 00	 mov	 ecx, 94			; 0000005eH
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2728 :    int x0=0,y0=0,x1,y1; // =0 suppresses compiler warning

  0004b	c7 45 04 00 00
	00 00		 mov	 DWORD PTR x0$[rbp], 0
  00052	c7 45 24 00 00
	00 00		 mov	 DWORD PTR y0$[rbp], 0

; 2729 :    if (!stbtt_GetGlyphBox(font, glyph, &x0,&y0,&x1,&y1)) {

  00059	48 8d 45 64	 lea	 rax, QWORD PTR y1$[rbp]
  0005d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00062	48 8d 45 44	 lea	 rax, QWORD PTR x1$[rbp]
  00066	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006b	4c 8d 4d 24	 lea	 r9, QWORD PTR y0$[rbp]
  0006f	4c 8d 45 04	 lea	 r8, QWORD PTR x0$[rbp]
  00073	8b 95 68 01 00
	00		 mov	 edx, DWORD PTR glyph$[rbp]
  00079	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  00080	e8 00 00 00 00	 call	 stbtt_GetGlyphBox
  00085	85 c0		 test	 eax, eax
  00087	75 61		 jne	 SHORT $LN2@stbtt_GetG

; 2730 :       // e.g. space character
; 2731 :       if (ix0) *ix0 = 0;

  00089	48 83 bd 90 01
	00 00 00	 cmp	 QWORD PTR ix0$[rbp], 0
  00091	74 0d		 je	 SHORT $LN4@stbtt_GetG
  00093	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR ix0$[rbp]
  0009a	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN4@stbtt_GetG:

; 2732 :       if (iy0) *iy0 = 0;

  000a0	48 83 bd 98 01
	00 00 00	 cmp	 QWORD PTR iy0$[rbp], 0
  000a8	74 0d		 je	 SHORT $LN5@stbtt_GetG
  000aa	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR iy0$[rbp]
  000b1	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN5@stbtt_GetG:

; 2733 :       if (ix1) *ix1 = 0;

  000b7	48 83 bd a0 01
	00 00 00	 cmp	 QWORD PTR ix1$[rbp], 0
  000bf	74 0d		 je	 SHORT $LN6@stbtt_GetG
  000c1	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR ix1$[rbp]
  000c8	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN6@stbtt_GetG:

; 2734 :       if (iy1) *iy1 = 0;

  000ce	48 83 bd a8 01
	00 00 00	 cmp	 QWORD PTR iy1$[rbp], 0
  000d6	74 0d		 je	 SHORT $LN7@stbtt_GetG
  000d8	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR iy1$[rbp]
  000df	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN7@stbtt_GetG:

; 2735 :    } else {

  000e5	e9 ce 00 00 00	 jmp	 $LN3@stbtt_GetG
$LN2@stbtt_GetG:

; 2736 :       // move to integral bboxes (treating pixels as little squares, what pixels get touched)?
; 2737 :       if (ix0) *ix0 = STBTT_ifloor( x0 * scale_x + shift_x);

  000ea	48 83 bd 90 01
	00 00 00	 cmp	 QWORD PTR ix0$[rbp], 0
  000f2	74 27		 je	 SHORT $LN8@stbtt_GetG
  000f4	f3 0f 2a 45 04	 cvtsi2ss xmm0, DWORD PTR x0$[rbp]
  000f9	f3 0f 59 85 70
	01 00 00	 mulss	 xmm0, DWORD PTR scale_x$[rbp]
  00101	f3 0f 58 85 80
	01 00 00	 addss	 xmm0, DWORD PTR shift_x$[rbp]
  00109	e8 00 00 00 00	 call	 ?ImFloorSigned@@YAMM@Z	; ImFloorSigned
  0010e	f3 0f 2c c0	 cvttss2si eax, xmm0
  00112	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR ix0$[rbp]
  00119	89 01		 mov	 DWORD PTR [rcx], eax
$LN8@stbtt_GetG:

; 2738 :       if (iy0) *iy0 = STBTT_ifloor(-y1 * scale_y + shift_y);

  0011b	48 83 bd 98 01
	00 00 00	 cmp	 QWORD PTR iy0$[rbp], 0
  00123	74 2b		 je	 SHORT $LN9@stbtt_GetG
  00125	8b 45 64	 mov	 eax, DWORD PTR y1$[rbp]
  00128	f7 d8		 neg	 eax
  0012a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0012e	f3 0f 59 85 78
	01 00 00	 mulss	 xmm0, DWORD PTR scale_y$[rbp]
  00136	f3 0f 58 85 88
	01 00 00	 addss	 xmm0, DWORD PTR shift_y$[rbp]
  0013e	e8 00 00 00 00	 call	 ?ImFloorSigned@@YAMM@Z	; ImFloorSigned
  00143	f3 0f 2c c0	 cvttss2si eax, xmm0
  00147	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR iy0$[rbp]
  0014e	89 01		 mov	 DWORD PTR [rcx], eax
$LN9@stbtt_GetG:

; 2739 :       if (ix1) *ix1 = STBTT_iceil ( x1 * scale_x + shift_x);

  00150	48 83 bd a0 01
	00 00 00	 cmp	 QWORD PTR ix1$[rbp], 0
  00158	74 28		 je	 SHORT $LN10@stbtt_GetG
  0015a	f3 0f 2a 45 44	 cvtsi2ss xmm0, DWORD PTR x1$[rbp]
  0015f	f3 0f 59 85 70
	01 00 00	 mulss	 xmm0, DWORD PTR scale_x$[rbp]
  00167	f3 0f 58 85 80
	01 00 00	 addss	 xmm0, DWORD PTR shift_x$[rbp]
  0016f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ceilf
  00175	f3 0f 2c c0	 cvttss2si eax, xmm0
  00179	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR ix1$[rbp]
  00180	89 01		 mov	 DWORD PTR [rcx], eax
$LN10@stbtt_GetG:

; 2740 :       if (iy1) *iy1 = STBTT_iceil (-y0 * scale_y + shift_y);

  00182	48 83 bd a8 01
	00 00 00	 cmp	 QWORD PTR iy1$[rbp], 0
  0018a	74 2c		 je	 SHORT $LN11@stbtt_GetG
  0018c	8b 45 24	 mov	 eax, DWORD PTR y0$[rbp]
  0018f	f7 d8		 neg	 eax
  00191	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00195	f3 0f 59 85 78
	01 00 00	 mulss	 xmm0, DWORD PTR scale_y$[rbp]
  0019d	f3 0f 58 85 88
	01 00 00	 addss	 xmm0, DWORD PTR shift_y$[rbp]
  001a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ceilf
  001ab	f3 0f 2c c0	 cvttss2si eax, xmm0
  001af	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR iy1$[rbp]
  001b6	89 01		 mov	 DWORD PTR [rcx], eax
$LN11@stbtt_GetG:
$LN3@stbtt_GetG:

; 2741 :    }
; 2742 : }

  001b8	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  001bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:stbtt_GetGlyphBitmapBoxSubpixel$rtcFrameData
  001c3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001c8	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001cf	48 33 cd	 xor	 rcx, rbp
  001d2	e8 00 00 00 00	 call	 __security_check_cookie
  001d7	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  001de	5f		 pop	 rdi
  001df	5d		 pop	 rbp
  001e0	c3		 ret	 0
stbtt_GetGlyphBitmapBoxSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT stbtt_GetGlyphBitmapBox
_TEXT	SEGMENT
font$ = 224
glyph$ = 232
scale_x$ = 240
scale_y$ = 248
ix0$ = 256
iy0$ = 264
ix1$ = 272
iy1$ = 280
stbtt_GetGlyphBitmapBox PROC				; COMDAT

; 2745 : {

  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]

; 2746 :    stbtt_GetGlyphBitmapBoxSubpixel(font, glyph, scale_x, scale_y,0.0f,0.0f, ix0, iy0, ix1, iy1);

  0003a	48 8b 85 18 01
	00 00		 mov	 rax, QWORD PTR iy1$[rbp]
  00041	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00046	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR ix1$[rbp]
  0004d	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00052	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR iy0$[rbp]
  00059	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0005e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR ix0$[rbp]
  00065	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0006a	0f 57 c0	 xorps	 xmm0, xmm0
  0006d	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00073	0f 57 c0	 xorps	 xmm0, xmm0
  00076	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0007c	f3 0f 10 9d f8
	00 00 00	 movss	 xmm3, DWORD PTR scale_y$[rbp]
  00084	f3 0f 10 95 f0
	00 00 00	 movss	 xmm2, DWORD PTR scale_x$[rbp]
  0008c	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR glyph$[rbp]
  00092	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  00099	e8 00 00 00 00	 call	 stbtt_GetGlyphBitmapBoxSubpixel

; 2747 : }

  0009e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000a5	5f		 pop	 rdi
  000a6	5d		 pop	 rbp
  000a7	c3		 ret	 0
stbtt_GetGlyphBitmapBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT stbtt_MakeGlyphBitmapSubpixel
_TEXT	SEGMENT
ix0$ = 4
iy0$ = 36
vertices$ = 72
num_verts$ = 100
gbm$ = 136
__$ArrayPad$ = 360
info$ = 400
output$ = 408
out_w$ = 416
out_h$ = 424
out_stride$ = 432
scale_x$ = 440
scale_y$ = 448
shift_x$ = 456
shift_y$ = 464
glyph$ = 472
stbtt_MakeGlyphBitmapSubpixel PROC			; COMDAT

; 3767 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec d8 01
	00 00		 sub	 rsp, 472		; 000001d8H
  0001d	48 8d 6c 24 60	 lea	 rbp, QWORD PTR [rsp+96]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 76 00 00 00	 mov	 ecx, 118		; 00000076H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+504]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 68 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3768 :    int ix0,iy0;
; 3769 :    stbtt_vertex *vertices;
; 3770 :    int num_verts = stbtt_GetGlyphShape(info, glyph, &vertices);

  0004a	4c 8d 45 48	 lea	 r8, QWORD PTR vertices$[rbp]
  0004e	8b 95 d8 01 00
	00		 mov	 edx, DWORD PTR glyph$[rbp]
  00054	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  0005b	e8 00 00 00 00	 call	 stbtt_GetGlyphShape
  00060	89 45 64	 mov	 DWORD PTR num_verts$[rbp], eax

; 3771 :    stbtt__bitmap gbm;
; 3772 : 
; 3773 :    stbtt_GetGlyphBitmapBoxSubpixel(info, glyph, scale_x, scale_y, shift_x, shift_y, &ix0,&iy0,0,0);

  00063	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  0006c	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  00075	48 8d 45 24	 lea	 rax, QWORD PTR iy0$[rbp]
  00079	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0007e	48 8d 45 04	 lea	 rax, QWORD PTR ix0$[rbp]
  00082	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00087	f3 0f 10 85 d0
	01 00 00	 movss	 xmm0, DWORD PTR shift_y$[rbp]
  0008f	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00095	f3 0f 10 85 c8
	01 00 00	 movss	 xmm0, DWORD PTR shift_x$[rbp]
  0009d	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  000a3	f3 0f 10 9d c0
	01 00 00	 movss	 xmm3, DWORD PTR scale_y$[rbp]
  000ab	f3 0f 10 95 b8
	01 00 00	 movss	 xmm2, DWORD PTR scale_x$[rbp]
  000b3	8b 95 d8 01 00
	00		 mov	 edx, DWORD PTR glyph$[rbp]
  000b9	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  000c0	e8 00 00 00 00	 call	 stbtt_GetGlyphBitmapBoxSubpixel

; 3774 :    gbm.pixels = output;

  000c5	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR output$[rbp]
  000cc	48 89 85 98 00
	00 00		 mov	 QWORD PTR gbm$[rbp+16], rax

; 3775 :    gbm.w = out_w;

  000d3	8b 85 a0 01 00
	00		 mov	 eax, DWORD PTR out_w$[rbp]
  000d9	89 85 88 00 00
	00		 mov	 DWORD PTR gbm$[rbp], eax

; 3776 :    gbm.h = out_h;

  000df	8b 85 a8 01 00
	00		 mov	 eax, DWORD PTR out_h$[rbp]
  000e5	89 85 8c 00 00
	00		 mov	 DWORD PTR gbm$[rbp+4], eax

; 3777 :    gbm.stride = out_stride;

  000eb	8b 85 b0 01 00
	00		 mov	 eax, DWORD PTR out_stride$[rbp]
  000f1	89 85 90 00 00
	00		 mov	 DWORD PTR gbm$[rbp+8], eax

; 3778 : 
; 3779 :    if (gbm.w && gbm.h)

  000f7	83 bd 88 00 00
	00 00		 cmp	 DWORD PTR gbm$[rbp], 0
  000fe	0f 84 82 00 00
	00		 je	 $LN2@stbtt_Make
  00104	83 bd 8c 00 00
	00 00		 cmp	 DWORD PTR gbm$[rbp+4], 0
  0010b	74 79		 je	 SHORT $LN2@stbtt_Make

; 3780 :       stbtt_Rasterize(&gbm, 0.35f, vertices, num_verts, scale_x, scale_y, shift_x, shift_y, ix0,iy0, 1, info->userdata);

  0010d	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  00114	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00117	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  0011c	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR [rsp+80], 1
  00124	8b 45 24	 mov	 eax, DWORD PTR iy0$[rbp]
  00127	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0012b	8b 45 04	 mov	 eax, DWORD PTR ix0$[rbp]
  0012e	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00132	f3 0f 10 85 d0
	01 00 00	 movss	 xmm0, DWORD PTR shift_y$[rbp]
  0013a	f3 0f 11 44 24
	38		 movss	 DWORD PTR [rsp+56], xmm0
  00140	f3 0f 10 85 c8
	01 00 00	 movss	 xmm0, DWORD PTR shift_x$[rbp]
  00148	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  0014e	f3 0f 10 85 c0
	01 00 00	 movss	 xmm0, DWORD PTR scale_y$[rbp]
  00156	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  0015c	f3 0f 10 85 b8
	01 00 00	 movss	 xmm0, DWORD PTR scale_x$[rbp]
  00164	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0016a	44 8b 4d 64	 mov	 r9d, DWORD PTR num_verts$[rbp]
  0016e	4c 8b 45 48	 mov	 r8, QWORD PTR vertices$[rbp]
  00172	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3eb33333
  0017a	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR gbm$[rbp]
  00181	e8 00 00 00 00	 call	 stbtt_Rasterize
$LN2@stbtt_Make:

; 3781 : 
; 3782 :    STBTT_free(vertices, info->userdata);

  00186	48 8b 4d 48	 mov	 rcx, QWORD PTR vertices$[rbp]
  0018a	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree

; 3783 : }

  0018f	48 8d 4d a0	 lea	 rcx, QWORD PTR [rbp-96]
  00193	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:stbtt_MakeGlyphBitmapSubpixel$rtcFrameData
  0019a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0019f	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001a6	48 33 cd	 xor	 rcx, rbp
  001a9	e8 00 00 00 00	 call	 __security_check_cookie
  001ae	48 8d a5 78 01
	00 00		 lea	 rsp, QWORD PTR [rbp+376]
  001b5	5f		 pop	 rdi
  001b6	5d		 pop	 rbp
  001b7	c3		 ret	 0
stbtt_MakeGlyphBitmapSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT stbtt_GetGlyphShape
_TEXT	SEGMENT
info$ = 224
glyph_index$ = 232
pvertices$ = 240
stbtt_GetGlyphShape PROC				; COMDAT

; 2303 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2304 :    if (!info->cff.size)

  00033	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  0003a	83 78 4c 00	 cmp	 DWORD PTR [rax+76], 0
  0003e	75 1d		 jne	 SHORT $LN2@stbtt_GetG

; 2305 :       return stbtt__GetGlyphShapeTT(info, glyph_index, pvertices);

  00040	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR pvertices$[rbp]
  00047	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR glyph_index$[rbp]
  0004d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00054	e8 00 00 00 00	 call	 ?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ; stbtt__GetGlyphShapeTT
  00059	eb 1b		 jmp	 SHORT $LN1@stbtt_GetG

; 2306 :    else

  0005b	eb 19		 jmp	 SHORT $LN3@stbtt_GetG
$LN2@stbtt_GetG:

; 2307 :       return stbtt__GetGlyphShapeT2(info, glyph_index, pvertices);

  0005d	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR pvertices$[rbp]
  00064	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR glyph_index$[rbp]
  0006a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00071	e8 00 00 00 00	 call	 ?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ; stbtt__GetGlyphShapeT2
$LN3@stbtt_GetG:
$LN1@stbtt_GetG:

; 2308 : }

  00076	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0007d	5f		 pop	 rdi
  0007e	5d		 pop	 rbp
  0007f	c3		 ret	 0
stbtt_GetGlyphShape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT stbtt_GetGlyphBox
_TEXT	SEGMENT
g$1 = 4
info$ = 256
glyph_index$ = 264
x0$ = 272
y0$ = 280
x1$ = 288
y1$ = 296
stbtt_GetGlyphBox PROC					; COMDAT

; 1631 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001c	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]

; 1632 :    if (info->cff.size) {

  00038	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  0003f	83 78 4c 00	 cmp	 DWORD PTR [rax+76], 0
  00043	74 3d		 je	 SHORT $LN2@stbtt_GetG

; 1633 :       stbtt__GetGlyphInfoT2(info, glyph_index, x0, y0, x1, y1);

  00045	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR y1$[rbp]
  0004c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00051	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR x1$[rbp]
  00058	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005d	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR y0$[rbp]
  00064	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR x0$[rbp]
  0006b	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR glyph_index$[rbp]
  00071	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00078	e8 00 00 00 00	 call	 ?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z ; stbtt__GetGlyphInfoT2

; 1634 :    } else {

  0007d	e9 e2 00 00 00	 jmp	 $LN3@stbtt_GetG
$LN2@stbtt_GetG:

; 1635 :       int g = stbtt__GetGlyfOffset(info, glyph_index);

  00082	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR glyph_index$[rbp]
  00088	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  0008f	e8 00 00 00 00	 call	 ?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z ; stbtt__GetGlyfOffset
  00094	89 45 04	 mov	 DWORD PTR g$1[rbp], eax

; 1636 :       if (g < 0) return 0;

  00097	83 7d 04 00	 cmp	 DWORD PTR g$1[rbp], 0
  0009b	7d 07		 jge	 SHORT $LN4@stbtt_GetG
  0009d	33 c0		 xor	 eax, eax
  0009f	e9 c5 00 00 00	 jmp	 $LN1@stbtt_GetG
$LN4@stbtt_GetG:

; 1637 : 
; 1638 :       if (x0) *x0 = ttSHORT(info->data + g + 2);

  000a4	48 83 bd 10 01
	00 00 00	 cmp	 QWORD PTR x0$[rbp], 0
  000ac	74 26		 je	 SHORT $LN5@stbtt_GetG
  000ae	48 63 45 04	 movsxd	 rax, DWORD PTR g$1[rbp]
  000b2	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  000b9	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000bd	48 8d 44 01 02	 lea	 rax, QWORD PTR [rcx+rax+2]
  000c2	48 8b c8	 mov	 rcx, rax
  000c5	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  000ca	98		 cwde
  000cb	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR x0$[rbp]
  000d2	89 01		 mov	 DWORD PTR [rcx], eax
$LN5@stbtt_GetG:

; 1639 :       if (y0) *y0 = ttSHORT(info->data + g + 4);

  000d4	48 83 bd 18 01
	00 00 00	 cmp	 QWORD PTR y0$[rbp], 0
  000dc	74 26		 je	 SHORT $LN6@stbtt_GetG
  000de	48 63 45 04	 movsxd	 rax, DWORD PTR g$1[rbp]
  000e2	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  000e9	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000ed	48 8d 44 01 04	 lea	 rax, QWORD PTR [rcx+rax+4]
  000f2	48 8b c8	 mov	 rcx, rax
  000f5	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  000fa	98		 cwde
  000fb	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR y0$[rbp]
  00102	89 01		 mov	 DWORD PTR [rcx], eax
$LN6@stbtt_GetG:

; 1640 :       if (x1) *x1 = ttSHORT(info->data + g + 6);

  00104	48 83 bd 20 01
	00 00 00	 cmp	 QWORD PTR x1$[rbp], 0
  0010c	74 26		 je	 SHORT $LN7@stbtt_GetG
  0010e	48 63 45 04	 movsxd	 rax, DWORD PTR g$1[rbp]
  00112	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00119	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0011d	48 8d 44 01 06	 lea	 rax, QWORD PTR [rcx+rax+6]
  00122	48 8b c8	 mov	 rcx, rax
  00125	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  0012a	98		 cwde
  0012b	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR x1$[rbp]
  00132	89 01		 mov	 DWORD PTR [rcx], eax
$LN7@stbtt_GetG:

; 1641 :       if (y1) *y1 = ttSHORT(info->data + g + 8);

  00134	48 83 bd 28 01
	00 00 00	 cmp	 QWORD PTR y1$[rbp], 0
  0013c	74 26		 je	 SHORT $LN8@stbtt_GetG
  0013e	48 63 45 04	 movsxd	 rax, DWORD PTR g$1[rbp]
  00142	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00149	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0014d	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  00152	48 8b c8	 mov	 rcx, rax
  00155	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  0015a	98		 cwde
  0015b	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR y1$[rbp]
  00162	89 01		 mov	 DWORD PTR [rcx], eax
$LN8@stbtt_GetG:
$LN3@stbtt_GetG:

; 1642 :    }
; 1643 :    return 1;

  00164	b8 01 00 00 00	 mov	 eax, 1
$LN1@stbtt_GetG:

; 1644 : }

  00169	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00170	5f		 pop	 rdi
  00171	5d		 pop	 rbp
  00172	c3		 ret	 0
stbtt_GetGlyphBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT stbtt_GetGlyphHMetrics
_TEXT	SEGMENT
numOfLongHorMetrics$ = 4
info$ = 256
glyph_index$ = 264
advanceWidth$ = 272
leftSideBearing$ = 280
stbtt_GetGlyphHMetrics PROC				; COMDAT

; 2311 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 2312 :    stbtt_uint16 numOfLongHorMetrics = ttUSHORT(info->data+info->hhea + 34);

  00038	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  0003f	48 63 40 24	 movsxd	 rax, DWORD PTR [rax+36]
  00043	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  0004a	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0004e	48 8d 44 01 22	 lea	 rax, QWORD PTR [rcx+rax+34]
  00053	48 8b c8	 mov	 rcx, rax
  00056	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  0005b	66 89 45 04	 mov	 WORD PTR numOfLongHorMetrics$[rbp], ax

; 2313 :    if (glyph_index < numOfLongHorMetrics) {

  0005f	0f b7 45 04	 movzx	 eax, WORD PTR numOfLongHorMetrics$[rbp]
  00063	39 85 08 01 00
	00		 cmp	 DWORD PTR glyph_index$[rbp], eax
  00069	0f 8d 95 00 00
	00		 jge	 $LN2@stbtt_GetG

; 2314 :       if (advanceWidth)     *advanceWidth    = ttSHORT(info->data + info->hmtx + 4*glyph_index);

  0006f	48 83 bd 10 01
	00 00 00	 cmp	 QWORD PTR advanceWidth$[rbp], 0
  00077	74 3d		 je	 SHORT $LN4@stbtt_GetG
  00079	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  00080	48 63 40 28	 movsxd	 rax, DWORD PTR [rax+40]
  00084	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  0008b	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0008f	48 03 c8	 add	 rcx, rax
  00092	48 8b c1	 mov	 rax, rcx
  00095	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR glyph_index$[rbp]
  0009b	c1 e1 02	 shl	 ecx, 2
  0009e	48 63 c9	 movsxd	 rcx, ecx
  000a1	48 03 c1	 add	 rax, rcx
  000a4	48 8b c8	 mov	 rcx, rax
  000a7	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  000ac	98		 cwde
  000ad	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR advanceWidth$[rbp]
  000b4	89 01		 mov	 DWORD PTR [rcx], eax
$LN4@stbtt_GetG:

; 2315 :       if (leftSideBearing)  *leftSideBearing = ttSHORT(info->data + info->hmtx + 4*glyph_index + 2);

  000b6	48 83 bd 18 01
	00 00 00	 cmp	 QWORD PTR leftSideBearing$[rbp], 0
  000be	74 3f		 je	 SHORT $LN5@stbtt_GetG
  000c0	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  000c7	48 63 40 28	 movsxd	 rax, DWORD PTR [rax+40]
  000cb	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  000d2	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000d6	48 03 c8	 add	 rcx, rax
  000d9	48 8b c1	 mov	 rax, rcx
  000dc	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR glyph_index$[rbp]
  000e2	c1 e1 02	 shl	 ecx, 2
  000e5	48 63 c9	 movsxd	 rcx, ecx
  000e8	48 8d 44 08 02	 lea	 rax, QWORD PTR [rax+rcx+2]
  000ed	48 8b c8	 mov	 rcx, rax
  000f0	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  000f5	98		 cwde
  000f6	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR leftSideBearing$[rbp]
  000fd	89 01		 mov	 DWORD PTR [rcx], eax
$LN5@stbtt_GetG:

; 2316 :    } else {

  000ff	e9 a4 00 00 00	 jmp	 $LN3@stbtt_GetG
$LN2@stbtt_GetG:

; 2317 :       if (advanceWidth)     *advanceWidth    = ttSHORT(info->data + info->hmtx + 4*(numOfLongHorMetrics-1));

  00104	48 83 bd 10 01
	00 00 00	 cmp	 QWORD PTR advanceWidth$[rbp], 0
  0010c	74 3f		 je	 SHORT $LN6@stbtt_GetG
  0010e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  00115	48 63 40 28	 movsxd	 rax, DWORD PTR [rax+40]
  00119	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00120	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00124	48 03 c8	 add	 rcx, rax
  00127	48 8b c1	 mov	 rax, rcx
  0012a	0f b7 4d 04	 movzx	 ecx, WORD PTR numOfLongHorMetrics$[rbp]
  0012e	8d 0c 8d fc ff
	ff ff		 lea	 ecx, DWORD PTR [rcx*4-4]
  00135	48 63 c9	 movsxd	 rcx, ecx
  00138	48 03 c1	 add	 rax, rcx
  0013b	48 8b c8	 mov	 rcx, rax
  0013e	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  00143	98		 cwde
  00144	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR advanceWidth$[rbp]
  0014b	89 01		 mov	 DWORD PTR [rcx], eax
$LN6@stbtt_GetG:

; 2318 :       if (leftSideBearing)  *leftSideBearing = ttSHORT(info->data + info->hmtx + 4*numOfLongHorMetrics + 2*(glyph_index - numOfLongHorMetrics));

  0014d	48 83 bd 18 01
	00 00 00	 cmp	 QWORD PTR leftSideBearing$[rbp], 0
  00155	74 51		 je	 SHORT $LN7@stbtt_GetG
  00157	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  0015e	48 63 40 28	 movsxd	 rax, DWORD PTR [rax+40]
  00162	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00169	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0016d	48 03 c8	 add	 rcx, rax
  00170	48 8b c1	 mov	 rax, rcx
  00173	0f b7 4d 04	 movzx	 ecx, WORD PTR numOfLongHorMetrics$[rbp]
  00177	c1 e1 02	 shl	 ecx, 2
  0017a	48 63 c9	 movsxd	 rcx, ecx
  0017d	48 03 c1	 add	 rax, rcx
  00180	0f b7 4d 04	 movzx	 ecx, WORD PTR numOfLongHorMetrics$[rbp]
  00184	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR glyph_index$[rbp]
  0018a	2b d1		 sub	 edx, ecx
  0018c	8b ca		 mov	 ecx, edx
  0018e	d1 e1		 shl	 ecx, 1
  00190	48 63 c9	 movsxd	 rcx, ecx
  00193	48 03 c1	 add	 rax, rcx
  00196	48 8b c8	 mov	 rcx, rax
  00199	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  0019e	98		 cwde
  0019f	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR leftSideBearing$[rbp]
  001a6	89 01		 mov	 DWORD PTR [rcx], eax
$LN7@stbtt_GetG:
$LN3@stbtt_GetG:

; 2319 :    }
; 2320 : }

  001a8	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  001af	5f		 pop	 rdi
  001b0	5d		 pop	 rbp
  001b1	c3		 ret	 0
stbtt_GetGlyphHMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT stbtt_GetFontVMetrics
_TEXT	SEGMENT
info$ = 224
ascent$ = 232
descent$ = 240
lineGap$ = 248
stbtt_GetFontVMetrics PROC				; COMDAT

; 2640 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2641 :    if (ascent ) *ascent  = ttSHORT(info->data+info->hhea + 4);

  00039	48 83 bd e8 00
	00 00 00	 cmp	 QWORD PTR ascent$[rbp], 0
  00041	74 2d		 je	 SHORT $LN2@stbtt_GetF
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  0004a	48 63 40 24	 movsxd	 rax, DWORD PTR [rax+36]
  0004e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00055	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00059	48 8d 44 01 04	 lea	 rax, QWORD PTR [rcx+rax+4]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  00066	98		 cwde
  00067	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR ascent$[rbp]
  0006e	89 01		 mov	 DWORD PTR [rcx], eax
$LN2@stbtt_GetF:

; 2642 :    if (descent) *descent = ttSHORT(info->data+info->hhea + 6);

  00070	48 83 bd f0 00
	00 00 00	 cmp	 QWORD PTR descent$[rbp], 0
  00078	74 2d		 je	 SHORT $LN3@stbtt_GetF
  0007a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  00081	48 63 40 24	 movsxd	 rax, DWORD PTR [rax+36]
  00085	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  0008c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00090	48 8d 44 01 06	 lea	 rax, QWORD PTR [rcx+rax+6]
  00095	48 8b c8	 mov	 rcx, rax
  00098	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  0009d	98		 cwde
  0009e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR descent$[rbp]
  000a5	89 01		 mov	 DWORD PTR [rcx], eax
$LN3@stbtt_GetF:

; 2643 :    if (lineGap) *lineGap = ttSHORT(info->data+info->hhea + 8);

  000a7	48 83 bd f8 00
	00 00 00	 cmp	 QWORD PTR lineGap$[rbp], 0
  000af	74 2d		 je	 SHORT $LN4@stbtt_GetF
  000b1	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  000b8	48 63 40 24	 movsxd	 rax, DWORD PTR [rax+36]
  000bc	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  000c3	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000c7	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  000cc	48 8b c8	 mov	 rcx, rax
  000cf	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  000d4	98		 cwde
  000d5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR lineGap$[rbp]
  000dc	89 01		 mov	 DWORD PTR [rcx], eax
$LN4@stbtt_GetF:

; 2644 : }

  000de	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000e5	5f		 pop	 rdi
  000e6	5d		 pop	 rbp
  000e7	c3		 ret	 0
stbtt_GetFontVMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT stbtt_ScaleForMappingEmToPixels
_TEXT	SEGMENT
unitsPerEm$ = 4
info$ = 256
pixels$ = 264
stbtt_ScaleForMappingEmToPixels PROC			; COMDAT

; 2672 : {

  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000b	55		 push	 rbp
  0000c	57		 push	 rdi
  0000d	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00014	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]

; 2673 :    int unitsPerEm = ttUSHORT(info->data + info->head + 18);

  00030	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  00037	48 63 40 1c	 movsxd	 rax, DWORD PTR [rax+28]
  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00042	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00046	48 8d 44 01 12	 lea	 rax, QWORD PTR [rcx+rax+18]
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  00053	0f b7 c0	 movzx	 eax, ax
  00056	89 45 04	 mov	 DWORD PTR unitsPerEm$[rbp], eax

; 2674 :    return pixels / unitsPerEm;

  00059	f3 0f 2a 45 04	 cvtsi2ss xmm0, DWORD PTR unitsPerEm$[rbp]
  0005e	f3 0f 10 8d 08
	01 00 00	 movss	 xmm1, DWORD PTR pixels$[rbp]
  00066	f3 0f 5e c8	 divss	 xmm1, xmm0
  0006a	0f 28 c1	 movaps	 xmm0, xmm1

; 2675 : }

  0006d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
stbtt_ScaleForMappingEmToPixels ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT stbtt_ScaleForPixelHeight
_TEXT	SEGMENT
fheight$ = 4
tv71 = 212
info$ = 256
height$ = 264
stbtt_ScaleForPixelHeight PROC				; COMDAT

; 2666 : {

  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000b	55		 push	 rbp
  0000c	57		 push	 rdi
  0000d	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00014	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]

; 2667 :    int fheight = ttSHORT(info->data + info->hhea + 4) - ttSHORT(info->data + info->hhea + 6);

  00030	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  00037	48 63 40 24	 movsxd	 rax, DWORD PTR [rax+36]
  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00042	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00046	48 8d 44 01 04	 lea	 rax, QWORD PTR [rcx+rax+4]
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  00053	98		 cwde
  00054	89 85 d4 00 00
	00		 mov	 DWORD PTR tv71[rbp], eax
  0005a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00061	48 63 49 24	 movsxd	 rcx, DWORD PTR [rcx+36]
  00065	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR info$[rbp]
  0006c	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  00070	48 8d 4c 0a 06	 lea	 rcx, QWORD PTR [rdx+rcx+6]
  00075	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  0007a	98		 cwde
  0007b	8b 8d d4 00 00
	00		 mov	 ecx, DWORD PTR tv71[rbp]
  00081	2b c8		 sub	 ecx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	89 45 04	 mov	 DWORD PTR fheight$[rbp], eax

; 2668 :    return (float) height / fheight;

  00088	f3 0f 2a 45 04	 cvtsi2ss xmm0, DWORD PTR fheight$[rbp]
  0008d	f3 0f 10 8d 08
	01 00 00	 movss	 xmm1, DWORD PTR height$[rbp]
  00095	f3 0f 5e c8	 divss	 xmm1, xmm0
  00099	0f 28 c1	 movaps	 xmm0, xmm1

; 2669 : }

  0009c	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000a3	5f		 pop	 rdi
  000a4	5d		 pop	 rbp
  000a5	c3		 ret	 0
stbtt_ScaleForPixelHeight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT stbtt_FindGlyphIndex
_TEXT	SEGMENT
data$ = 8
index_map$ = 36
format$ = 68
bytes$1 = 100
first$2 = 132
count$3 = 164
segcount$4 = 196
searchRange$5 = 228
entrySelector$6 = 260
rangeShift$7 = 292
endCount$8 = 324
search$9 = 356
end$10 = 388
offset$11 = 420
start$12 = 452
last$13 = 484
item$14 = 516
ngroups$15 = 548
low$16 = 580
high$17 = 612
mid$18 = 644
start_char$19 = 676
end_char$20 = 708
start_glyph$21 = 740
info$ = 1184
unicode_codepoint$ = 1192
stbtt_FindGlyphIndex PROC				; COMDAT

; 1502 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec a8 04
	00 00		 sub	 rsp, 1192		; 000004a8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 2a 01 00 00	 mov	 ecx, 298		; 0000012aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 c8
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1224]

; 1503 :    stbtt_uint8 *data = info->data;

  0002e	48 8b 85 a0 04
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  00035	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00039	48 89 45 08	 mov	 QWORD PTR data$[rbp], rax

; 1504 :    stbtt_uint32 index_map = info->index_map;

  0003d	48 8b 85 a0 04
	00 00		 mov	 rax, QWORD PTR info$[rbp]
  00044	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  00047	89 45 24	 mov	 DWORD PTR index_map$[rbp], eax

; 1505 : 
; 1506 :    stbtt_uint16 format = ttUSHORT(data + index_map + 0);

  0004a	8b 45 24	 mov	 eax, DWORD PTR index_map$[rbp]
  0004d	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  00051	48 03 c8	 add	 rcx, rax
  00054	48 8b c1	 mov	 rax, rcx
  00057	48 8b c8	 mov	 rcx, rax
  0005a	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  0005f	66 89 45 44	 mov	 WORD PTR format$[rbp], ax

; 1507 :    if (format == 0) { // apple byte encoding

  00063	0f b7 45 44	 movzx	 eax, WORD PTR format$[rbp]
  00067	85 c0		 test	 eax, eax
  00069	75 52		 jne	 SHORT $LN12@stbtt_Find

; 1508 :       stbtt_int32 bytes = ttUSHORT(data + index_map + 2);

  0006b	8b 45 24	 mov	 eax, DWORD PTR index_map$[rbp]
  0006e	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  00072	48 8d 44 01 02	 lea	 rax, QWORD PTR [rcx+rax+2]
  00077	48 8b c8	 mov	 rcx, rax
  0007a	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  0007f	0f b7 c0	 movzx	 eax, ax
  00082	89 45 64	 mov	 DWORD PTR bytes$1[rbp], eax

; 1509 :       if (unicode_codepoint < bytes-6)

  00085	8b 45 64	 mov	 eax, DWORD PTR bytes$1[rbp]
  00088	83 e8 06	 sub	 eax, 6
  0008b	39 85 a8 04 00
	00		 cmp	 DWORD PTR unicode_codepoint$[rbp], eax
  00091	7d 1e		 jge	 SHORT $LN14@stbtt_Find

; 1510 :          return ttBYTE(data + index_map + 6 + unicode_codepoint);

  00093	8b 45 24	 mov	 eax, DWORD PTR index_map$[rbp]
  00096	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  0009a	48 03 c8	 add	 rcx, rax
  0009d	48 8b c1	 mov	 rax, rcx
  000a0	48 63 8d a8 04
	00 00		 movsxd	 rcx, DWORD PTR unicode_codepoint$[rbp]
  000a7	0f b6 44 08 06	 movzx	 eax, BYTE PTR [rax+rcx+6]
  000ac	e9 d9 05 00 00	 jmp	 $LN1@stbtt_Find
$LN14@stbtt_Find:

; 1511 :       return 0;

  000b1	33 c0		 xor	 eax, eax
  000b3	e9 d2 05 00 00	 jmp	 $LN1@stbtt_Find
  000b8	e9 9d 05 00 00	 jmp	 $LN13@stbtt_Find
$LN12@stbtt_Find:

; 1512 :    } else if (format == 6) {

  000bd	0f b7 45 44	 movzx	 eax, WORD PTR format$[rbp]
  000c1	83 f8 06	 cmp	 eax, 6
  000c4	0f 85 a2 00 00
	00		 jne	 $LN15@stbtt_Find

; 1513 :       stbtt_uint32 first = ttUSHORT(data + index_map + 6);

  000ca	8b 45 24	 mov	 eax, DWORD PTR index_map$[rbp]
  000cd	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  000d1	48 8d 44 01 06	 lea	 rax, QWORD PTR [rcx+rax+6]
  000d6	48 8b c8	 mov	 rcx, rax
  000d9	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  000de	0f b7 c0	 movzx	 eax, ax
  000e1	89 85 84 00 00
	00		 mov	 DWORD PTR first$2[rbp], eax

; 1514 :       stbtt_uint32 count = ttUSHORT(data + index_map + 8);

  000e7	8b 45 24	 mov	 eax, DWORD PTR index_map$[rbp]
  000ea	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  000ee	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  000f3	48 8b c8	 mov	 rcx, rax
  000f6	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  000fb	0f b7 c0	 movzx	 eax, ax
  000fe	89 85 a4 00 00
	00		 mov	 DWORD PTR count$3[rbp], eax

; 1515 :       if ((stbtt_uint32) unicode_codepoint >= first && (stbtt_uint32) unicode_codepoint < first+count)

  00104	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR first$2[rbp]
  0010a	39 85 a8 04 00
	00		 cmp	 DWORD PTR unicode_codepoint$[rbp], eax
  00110	72 4e		 jb	 SHORT $LN17@stbtt_Find
  00112	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR count$3[rbp]
  00118	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR first$2[rbp]
  0011e	03 c8		 add	 ecx, eax
  00120	8b c1		 mov	 eax, ecx
  00122	39 85 a8 04 00
	00		 cmp	 DWORD PTR unicode_codepoint$[rbp], eax
  00128	73 36		 jae	 SHORT $LN17@stbtt_Find

; 1516 :          return ttUSHORT(data + index_map + 10 + (unicode_codepoint - first)*2);

  0012a	8b 45 24	 mov	 eax, DWORD PTR index_map$[rbp]
  0012d	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  00131	48 03 c8	 add	 rcx, rax
  00134	48 8b c1	 mov	 rax, rcx
  00137	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR first$2[rbp]
  0013d	8b 95 a8 04 00
	00		 mov	 edx, DWORD PTR unicode_codepoint$[rbp]
  00143	2b d1		 sub	 edx, ecx
  00145	8b ca		 mov	 ecx, edx
  00147	d1 e1		 shl	 ecx, 1
  00149	8b c9		 mov	 ecx, ecx
  0014b	48 8d 44 08 0a	 lea	 rax, QWORD PTR [rax+rcx+10]
  00150	48 8b c8	 mov	 rcx, rax
  00153	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  00158	0f b7 c0	 movzx	 eax, ax
  0015b	e9 2a 05 00 00	 jmp	 $LN1@stbtt_Find
$LN17@stbtt_Find:

; 1517 :       return 0;

  00160	33 c0		 xor	 eax, eax
  00162	e9 23 05 00 00	 jmp	 $LN1@stbtt_Find
  00167	e9 ee 04 00 00	 jmp	 $LN16@stbtt_Find
$LN15@stbtt_Find:

; 1518 :    } else if (format == 2) {

  0016c	0f b7 45 44	 movzx	 eax, WORD PTR format$[rbp]
  00170	83 f8 02	 cmp	 eax, 2
  00173	75 3a		 jne	 SHORT $LN18@stbtt_Find
$LN4@stbtt_Find:

; 1519 :       STBTT_assert(0); // @TODO: high-byte mapping for japanese/chinese/korean

  00175	33 c0		 xor	 eax, eax
  00177	85 c0		 test	 eax, eax
  00179	75 22		 jne	 SHORT $LN37@stbtt_Find
  0017b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt_FindGlyphIndex@@9@4JA
  00181	83 c0 11	 add	 eax, 17
  00184	44 8b c0	 mov	 r8d, eax
  00187	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  00195	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0019b	33 c0		 xor	 eax, eax
$LN37@stbtt_Find:
  0019d	33 c0		 xor	 eax, eax
  0019f	85 c0		 test	 eax, eax
  001a1	75 d2		 jne	 SHORT $LN4@stbtt_Find

; 1520 :       return 0;

  001a3	33 c0		 xor	 eax, eax
  001a5	e9 e0 04 00 00	 jmp	 $LN1@stbtt_Find
  001aa	e9 ab 04 00 00	 jmp	 $LN19@stbtt_Find
$LN18@stbtt_Find:

; 1521 :    } else if (format == 4) { // standard mapping for windows fonts: binary search collection of ranges

  001af	0f b7 45 44	 movzx	 eax, WORD PTR format$[rbp]
  001b3	83 f8 04	 cmp	 eax, 4
  001b6	0f 85 38 03 00
	00		 jne	 $LN20@stbtt_Find

; 1522 :       stbtt_uint16 segcount = ttUSHORT(data+index_map+6) >> 1;

  001bc	8b 45 24	 mov	 eax, DWORD PTR index_map$[rbp]
  001bf	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  001c3	48 8d 44 01 06	 lea	 rax, QWORD PTR [rcx+rax+6]
  001c8	48 8b c8	 mov	 rcx, rax
  001cb	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  001d0	0f b7 c0	 movzx	 eax, ax
  001d3	d1 f8		 sar	 eax, 1
  001d5	66 89 85 c4 00
	00 00		 mov	 WORD PTR segcount$4[rbp], ax

; 1523 :       stbtt_uint16 searchRange = ttUSHORT(data+index_map+8) >> 1;

  001dc	8b 45 24	 mov	 eax, DWORD PTR index_map$[rbp]
  001df	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  001e3	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  001e8	48 8b c8	 mov	 rcx, rax
  001eb	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  001f0	0f b7 c0	 movzx	 eax, ax
  001f3	d1 f8		 sar	 eax, 1
  001f5	66 89 85 e4 00
	00 00		 mov	 WORD PTR searchRange$5[rbp], ax

; 1524 :       stbtt_uint16 entrySelector = ttUSHORT(data+index_map+10);

  001fc	8b 45 24	 mov	 eax, DWORD PTR index_map$[rbp]
  001ff	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  00203	48 8d 44 01 0a	 lea	 rax, QWORD PTR [rcx+rax+10]
  00208	48 8b c8	 mov	 rcx, rax
  0020b	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  00210	66 89 85 04 01
	00 00		 mov	 WORD PTR entrySelector$6[rbp], ax

; 1525 :       stbtt_uint16 rangeShift = ttUSHORT(data+index_map+12) >> 1;

  00217	8b 45 24	 mov	 eax, DWORD PTR index_map$[rbp]
  0021a	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  0021e	48 8d 44 01 0c	 lea	 rax, QWORD PTR [rcx+rax+12]
  00223	48 8b c8	 mov	 rcx, rax
  00226	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  0022b	0f b7 c0	 movzx	 eax, ax
  0022e	d1 f8		 sar	 eax, 1
  00230	66 89 85 24 01
	00 00		 mov	 WORD PTR rangeShift$7[rbp], ax

; 1526 : 
; 1527 :       // do a binary search of the segments
; 1528 :       stbtt_uint32 endCount = index_map + 14;

  00237	8b 45 24	 mov	 eax, DWORD PTR index_map$[rbp]
  0023a	83 c0 0e	 add	 eax, 14
  0023d	89 85 44 01 00
	00		 mov	 DWORD PTR endCount$8[rbp], eax

; 1529 :       stbtt_uint32 search = endCount;

  00243	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR endCount$8[rbp]
  00249	89 85 64 01 00
	00		 mov	 DWORD PTR search$9[rbp], eax

; 1530 : 
; 1531 :       if (unicode_codepoint > 0xffff)

  0024f	81 bd a8 04 00
	00 ff ff 00 00	 cmp	 DWORD PTR unicode_codepoint$[rbp], 65535 ; 0000ffffH
  00259	7e 07		 jle	 SHORT $LN22@stbtt_Find

; 1532 :          return 0;

  0025b	33 c0		 xor	 eax, eax
  0025d	e9 28 04 00 00	 jmp	 $LN1@stbtt_Find
$LN22@stbtt_Find:

; 1533 : 
; 1534 :       // they lie from endCount .. endCount + segCount
; 1535 :       // but searchRange is the nearest power of two, so...
; 1536 :       if (unicode_codepoint >= ttUSHORT(data + search + rangeShift*2))

  00262	8b 85 64 01 00
	00		 mov	 eax, DWORD PTR search$9[rbp]
  00268	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  0026c	48 03 c8	 add	 rcx, rax
  0026f	48 8b c1	 mov	 rax, rcx
  00272	0f b7 8d 24 01
	00 00		 movzx	 ecx, WORD PTR rangeShift$7[rbp]
  00279	d1 e1		 shl	 ecx, 1
  0027b	48 63 c9	 movsxd	 rcx, ecx
  0027e	48 03 c1	 add	 rax, rcx
  00281	48 8b c8	 mov	 rcx, rax
  00284	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  00289	0f b7 c0	 movzx	 eax, ax
  0028c	39 85 a8 04 00
	00		 cmp	 DWORD PTR unicode_codepoint$[rbp], eax
  00292	7c 16		 jl	 SHORT $LN23@stbtt_Find

; 1537 :          search += rangeShift*2;

  00294	0f b7 85 24 01
	00 00		 movzx	 eax, WORD PTR rangeShift$7[rbp]
  0029b	8b 8d 64 01 00
	00		 mov	 ecx, DWORD PTR search$9[rbp]
  002a1	8d 04 41	 lea	 eax, DWORD PTR [rcx+rax*2]
  002a4	89 85 64 01 00
	00		 mov	 DWORD PTR search$9[rbp], eax
$LN23@stbtt_Find:

; 1538 : 
; 1539 :       // now decrement to bias correctly to find smallest
; 1540 :       search -= 2;

  002aa	8b 85 64 01 00
	00		 mov	 eax, DWORD PTR search$9[rbp]
  002b0	83 e8 02	 sub	 eax, 2
  002b3	89 85 64 01 00
	00		 mov	 DWORD PTR search$9[rbp], eax
$LN5@stbtt_Find:

; 1541 :       while (entrySelector) {

  002b9	0f b7 85 04 01
	00 00		 movzx	 eax, WORD PTR entrySelector$6[rbp]
  002c0	85 c0		 test	 eax, eax
  002c2	74 7a		 je	 SHORT $LN6@stbtt_Find

; 1542 :          stbtt_uint16 end;
; 1543 :          searchRange >>= 1;

  002c4	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR searchRange$5[rbp]
  002cb	66 d1 e8	 shr	 ax, 1
  002ce	66 89 85 e4 00
	00 00		 mov	 WORD PTR searchRange$5[rbp], ax

; 1544 :          end = ttUSHORT(data + search + searchRange*2);

  002d5	8b 85 64 01 00
	00		 mov	 eax, DWORD PTR search$9[rbp]
  002db	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  002df	48 03 c8	 add	 rcx, rax
  002e2	48 8b c1	 mov	 rax, rcx
  002e5	0f b7 8d e4 00
	00 00		 movzx	 ecx, WORD PTR searchRange$5[rbp]
  002ec	d1 e1		 shl	 ecx, 1
  002ee	48 63 c9	 movsxd	 rcx, ecx
  002f1	48 03 c1	 add	 rax, rcx
  002f4	48 8b c8	 mov	 rcx, rax
  002f7	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  002fc	66 89 85 84 01
	00 00		 mov	 WORD PTR end$10[rbp], ax

; 1545 :          if (unicode_codepoint > end)

  00303	0f b7 85 84 01
	00 00		 movzx	 eax, WORD PTR end$10[rbp]
  0030a	39 85 a8 04 00
	00		 cmp	 DWORD PTR unicode_codepoint$[rbp], eax
  00310	7e 16		 jle	 SHORT $LN24@stbtt_Find

; 1546 :             search += searchRange*2;

  00312	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR searchRange$5[rbp]
  00319	8b 8d 64 01 00
	00		 mov	 ecx, DWORD PTR search$9[rbp]
  0031f	8d 04 41	 lea	 eax, DWORD PTR [rcx+rax*2]
  00322	89 85 64 01 00
	00		 mov	 DWORD PTR search$9[rbp], eax
$LN24@stbtt_Find:

; 1547 :          --entrySelector;

  00328	0f b7 85 04 01
	00 00		 movzx	 eax, WORD PTR entrySelector$6[rbp]
  0032f	66 ff c8	 dec	 ax
  00332	66 89 85 04 01
	00 00		 mov	 WORD PTR entrySelector$6[rbp], ax

; 1548 :       }

  00339	e9 7b ff ff ff	 jmp	 $LN5@stbtt_Find
$LN6@stbtt_Find:

; 1549 :       search += 2;

  0033e	8b 85 64 01 00
	00		 mov	 eax, DWORD PTR search$9[rbp]
  00344	83 c0 02	 add	 eax, 2
  00347	89 85 64 01 00
	00		 mov	 DWORD PTR search$9[rbp], eax

; 1550 : 
; 1551 :       {
; 1552 :          stbtt_uint16 offset, start, last;
; 1553 :          stbtt_uint16 item = (stbtt_uint16) ((search - endCount) >> 1);

  0034d	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR endCount$8[rbp]
  00353	8b 8d 64 01 00
	00		 mov	 ecx, DWORD PTR search$9[rbp]
  00359	2b c8		 sub	 ecx, eax
  0035b	8b c1		 mov	 eax, ecx
  0035d	d1 e8		 shr	 eax, 1
  0035f	66 89 85 04 02
	00 00		 mov	 WORD PTR item$14[rbp], ax

; 1554 : 
; 1555 :          start = ttUSHORT(data + index_map + 14 + segcount*2 + 2 + 2*item);

  00366	8b 45 24	 mov	 eax, DWORD PTR index_map$[rbp]
  00369	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  0036d	48 03 c8	 add	 rcx, rax
  00370	48 8b c1	 mov	 rax, rcx
  00373	0f b7 8d c4 00
	00 00		 movzx	 ecx, WORD PTR segcount$4[rbp]
  0037a	d1 e1		 shl	 ecx, 1
  0037c	48 63 c9	 movsxd	 rcx, ecx
  0037f	48 8d 44 08 0e	 lea	 rax, QWORD PTR [rax+rcx+14]
  00384	0f b7 8d 04 02
	00 00		 movzx	 ecx, WORD PTR item$14[rbp]
  0038b	d1 e1		 shl	 ecx, 1
  0038d	48 63 c9	 movsxd	 rcx, ecx
  00390	48 8d 44 08 02	 lea	 rax, QWORD PTR [rax+rcx+2]
  00395	48 8b c8	 mov	 rcx, rax
  00398	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  0039d	66 89 85 c4 01
	00 00		 mov	 WORD PTR start$12[rbp], ax

; 1556 :          last = ttUSHORT(data + endCount + 2*item);

  003a4	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR endCount$8[rbp]
  003aa	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  003ae	48 03 c8	 add	 rcx, rax
  003b1	48 8b c1	 mov	 rax, rcx
  003b4	0f b7 8d 04 02
	00 00		 movzx	 ecx, WORD PTR item$14[rbp]
  003bb	d1 e1		 shl	 ecx, 1
  003bd	48 63 c9	 movsxd	 rcx, ecx
  003c0	48 03 c1	 add	 rax, rcx
  003c3	48 8b c8	 mov	 rcx, rax
  003c6	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  003cb	66 89 85 e4 01
	00 00		 mov	 WORD PTR last$13[rbp], ax

; 1557 :          if (unicode_codepoint < start || unicode_codepoint > last)

  003d2	0f b7 85 c4 01
	00 00		 movzx	 eax, WORD PTR start$12[rbp]
  003d9	39 85 a8 04 00
	00		 cmp	 DWORD PTR unicode_codepoint$[rbp], eax
  003df	7c 0f		 jl	 SHORT $LN26@stbtt_Find
  003e1	0f b7 85 e4 01
	00 00		 movzx	 eax, WORD PTR last$13[rbp]
  003e8	39 85 a8 04 00
	00		 cmp	 DWORD PTR unicode_codepoint$[rbp], eax
  003ee	7e 07		 jle	 SHORT $LN25@stbtt_Find
$LN26@stbtt_Find:

; 1558 :             return 0;

  003f0	33 c0		 xor	 eax, eax
  003f2	e9 93 02 00 00	 jmp	 $LN1@stbtt_Find
$LN25@stbtt_Find:

; 1559 : 
; 1560 :          offset = ttUSHORT(data + index_map + 14 + segcount*6 + 2 + 2*item);

  003f7	8b 45 24	 mov	 eax, DWORD PTR index_map$[rbp]
  003fa	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  003fe	48 03 c8	 add	 rcx, rax
  00401	48 8b c1	 mov	 rax, rcx
  00404	0f b7 8d c4 00
	00 00		 movzx	 ecx, WORD PTR segcount$4[rbp]
  0040b	6b c9 06	 imul	 ecx, ecx, 6
  0040e	48 63 c9	 movsxd	 rcx, ecx
  00411	48 8d 44 08 0e	 lea	 rax, QWORD PTR [rax+rcx+14]
  00416	0f b7 8d 04 02
	00 00		 movzx	 ecx, WORD PTR item$14[rbp]
  0041d	d1 e1		 shl	 ecx, 1
  0041f	48 63 c9	 movsxd	 rcx, ecx
  00422	48 8d 44 08 02	 lea	 rax, QWORD PTR [rax+rcx+2]
  00427	48 8b c8	 mov	 rcx, rax
  0042a	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  0042f	66 89 85 a4 01
	00 00		 mov	 WORD PTR offset$11[rbp], ax

; 1561 :          if (offset == 0)

  00436	0f b7 85 a4 01
	00 00		 movzx	 eax, WORD PTR offset$11[rbp]
  0043d	85 c0		 test	 eax, eax
  0043f	75 4b		 jne	 SHORT $LN27@stbtt_Find

; 1562 :             return (stbtt_uint16) (unicode_codepoint + ttSHORT(data + index_map + 14 + segcount*4 + 2 + 2*item));

  00441	8b 45 24	 mov	 eax, DWORD PTR index_map$[rbp]
  00444	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  00448	48 03 c8	 add	 rcx, rax
  0044b	48 8b c1	 mov	 rax, rcx
  0044e	0f b7 8d c4 00
	00 00		 movzx	 ecx, WORD PTR segcount$4[rbp]
  00455	c1 e1 02	 shl	 ecx, 2
  00458	48 63 c9	 movsxd	 rcx, ecx
  0045b	48 8d 44 08 0e	 lea	 rax, QWORD PTR [rax+rcx+14]
  00460	0f b7 8d 04 02
	00 00		 movzx	 ecx, WORD PTR item$14[rbp]
  00467	d1 e1		 shl	 ecx, 1
  00469	48 63 c9	 movsxd	 rcx, ecx
  0046c	48 8d 44 08 02	 lea	 rax, QWORD PTR [rax+rcx+2]
  00471	48 8b c8	 mov	 rcx, rax
  00474	e8 00 00 00 00	 call	 ?ttSHORT@@YAFPEAE@Z	; ttSHORT
  00479	98		 cwde
  0047a	8b 8d a8 04 00
	00		 mov	 ecx, DWORD PTR unicode_codepoint$[rbp]
  00480	03 c8		 add	 ecx, eax
  00482	8b c1		 mov	 eax, ecx
  00484	0f b7 c0	 movzx	 eax, ax
  00487	e9 fe 01 00 00	 jmp	 $LN1@stbtt_Find
$LN27@stbtt_Find:

; 1563 : 
; 1564 :          return ttUSHORT(data + offset + (unicode_codepoint-start)*2 + index_map + 14 + segcount*6 + 2 + 2*item);

  0048c	0f b7 85 a4 01
	00 00		 movzx	 eax, WORD PTR offset$11[rbp]
  00493	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  00497	48 03 c8	 add	 rcx, rax
  0049a	48 8b c1	 mov	 rax, rcx
  0049d	0f b7 8d c4 01
	00 00		 movzx	 ecx, WORD PTR start$12[rbp]
  004a4	8b 95 a8 04 00
	00		 mov	 edx, DWORD PTR unicode_codepoint$[rbp]
  004aa	2b d1		 sub	 edx, ecx
  004ac	8b ca		 mov	 ecx, edx
  004ae	d1 e1		 shl	 ecx, 1
  004b0	48 63 c9	 movsxd	 rcx, ecx
  004b3	48 03 c1	 add	 rax, rcx
  004b6	8b 4d 24	 mov	 ecx, DWORD PTR index_map$[rbp]
  004b9	48 03 c1	 add	 rax, rcx
  004bc	0f b7 8d c4 00
	00 00		 movzx	 ecx, WORD PTR segcount$4[rbp]
  004c3	6b c9 06	 imul	 ecx, ecx, 6
  004c6	48 63 c9	 movsxd	 rcx, ecx
  004c9	48 8d 44 08 0e	 lea	 rax, QWORD PTR [rax+rcx+14]
  004ce	0f b7 8d 04 02
	00 00		 movzx	 ecx, WORD PTR item$14[rbp]
  004d5	d1 e1		 shl	 ecx, 1
  004d7	48 63 c9	 movsxd	 rcx, ecx
  004da	48 8d 44 08 02	 lea	 rax, QWORD PTR [rax+rcx+2]
  004df	48 8b c8	 mov	 rcx, rax
  004e2	e8 00 00 00 00	 call	 ?ttUSHORT@@YAGPEAE@Z	; ttUSHORT
  004e7	0f b7 c0	 movzx	 eax, ax
  004ea	e9 9b 01 00 00	 jmp	 $LN1@stbtt_Find
  004ef	e9 66 01 00 00	 jmp	 $LN21@stbtt_Find
$LN20@stbtt_Find:

; 1565 :       }
; 1566 :    } else if (format == 12 || format == 13) {

  004f4	0f b7 45 44	 movzx	 eax, WORD PTR format$[rbp]
  004f8	83 f8 0c	 cmp	 eax, 12
  004fb	74 0d		 je	 SHORT $LN29@stbtt_Find
  004fd	0f b7 45 44	 movzx	 eax, WORD PTR format$[rbp]
  00501	83 f8 0d	 cmp	 eax, 13
  00504	0f 85 50 01 00
	00		 jne	 $LN28@stbtt_Find
$LN29@stbtt_Find:

; 1567 :       stbtt_uint32 ngroups = ttULONG(data+index_map+12);

  0050a	8b 45 24	 mov	 eax, DWORD PTR index_map$[rbp]
  0050d	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  00511	48 8d 44 01 0c	 lea	 rax, QWORD PTR [rcx+rax+12]
  00516	48 8b c8	 mov	 rcx, rax
  00519	e8 00 00 00 00	 call	 ?ttULONG@@YAIPEAE@Z	; ttULONG
  0051e	89 85 24 02 00
	00		 mov	 DWORD PTR ngroups$15[rbp], eax

; 1568 :       stbtt_int32 low,high;
; 1569 :       low = 0; high = (stbtt_int32)ngroups;

  00524	c7 85 44 02 00
	00 00 00 00 00	 mov	 DWORD PTR low$16[rbp], 0
  0052e	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR ngroups$15[rbp]
  00534	89 85 64 02 00
	00		 mov	 DWORD PTR high$17[rbp], eax
$LN7@stbtt_Find:

; 1570 :       // Binary search the right group.
; 1571 :       while (low < high) {

  0053a	8b 85 64 02 00
	00		 mov	 eax, DWORD PTR high$17[rbp]
  00540	39 85 44 02 00
	00		 cmp	 DWORD PTR low$16[rbp], eax
  00546	0f 8d 0a 01 00
	00		 jge	 $LN8@stbtt_Find

; 1572 :          stbtt_int32 mid = low + ((high-low) >> 1); // rounds down, so low <= mid < high

  0054c	8b 85 44 02 00
	00		 mov	 eax, DWORD PTR low$16[rbp]
  00552	8b 8d 64 02 00
	00		 mov	 ecx, DWORD PTR high$17[rbp]
  00558	2b c8		 sub	 ecx, eax
  0055a	8b c1		 mov	 eax, ecx
  0055c	d1 f8		 sar	 eax, 1
  0055e	8b 8d 44 02 00
	00		 mov	 ecx, DWORD PTR low$16[rbp]
  00564	03 c8		 add	 ecx, eax
  00566	8b c1		 mov	 eax, ecx
  00568	89 85 84 02 00
	00		 mov	 DWORD PTR mid$18[rbp], eax

; 1573 :          stbtt_uint32 start_char = ttULONG(data+index_map+16+mid*12);

  0056e	8b 45 24	 mov	 eax, DWORD PTR index_map$[rbp]
  00571	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  00575	48 03 c8	 add	 rcx, rax
  00578	48 8b c1	 mov	 rax, rcx
  0057b	6b 8d 84 02 00
	00 0c		 imul	 ecx, DWORD PTR mid$18[rbp], 12
  00582	48 63 c9	 movsxd	 rcx, ecx
  00585	48 8d 44 08 10	 lea	 rax, QWORD PTR [rax+rcx+16]
  0058a	48 8b c8	 mov	 rcx, rax
  0058d	e8 00 00 00 00	 call	 ?ttULONG@@YAIPEAE@Z	; ttULONG
  00592	89 85 a4 02 00
	00		 mov	 DWORD PTR start_char$19[rbp], eax

; 1574 :          stbtt_uint32 end_char = ttULONG(data+index_map+16+mid*12+4);

  00598	8b 45 24	 mov	 eax, DWORD PTR index_map$[rbp]
  0059b	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  0059f	48 03 c8	 add	 rcx, rax
  005a2	48 8b c1	 mov	 rax, rcx
  005a5	6b 8d 84 02 00
	00 0c		 imul	 ecx, DWORD PTR mid$18[rbp], 12
  005ac	48 63 c9	 movsxd	 rcx, ecx
  005af	48 8d 44 08 14	 lea	 rax, QWORD PTR [rax+rcx+20]
  005b4	48 8b c8	 mov	 rcx, rax
  005b7	e8 00 00 00 00	 call	 ?ttULONG@@YAIPEAE@Z	; ttULONG
  005bc	89 85 c4 02 00
	00		 mov	 DWORD PTR end_char$20[rbp], eax

; 1575 :          if ((stbtt_uint32) unicode_codepoint < start_char)

  005c2	8b 85 a4 02 00
	00		 mov	 eax, DWORD PTR start_char$19[rbp]
  005c8	39 85 a8 04 00
	00		 cmp	 DWORD PTR unicode_codepoint$[rbp], eax
  005ce	73 0e		 jae	 SHORT $LN30@stbtt_Find

; 1576 :             high = mid;

  005d0	8b 85 84 02 00
	00		 mov	 eax, DWORD PTR mid$18[rbp]
  005d6	89 85 64 02 00
	00		 mov	 DWORD PTR high$17[rbp], eax
  005dc	eb 73		 jmp	 SHORT $LN31@stbtt_Find
$LN30@stbtt_Find:

; 1577 :          else if ((stbtt_uint32) unicode_codepoint > end_char)

  005de	8b 85 c4 02 00
	00		 mov	 eax, DWORD PTR end_char$20[rbp]
  005e4	39 85 a8 04 00
	00		 cmp	 DWORD PTR unicode_codepoint$[rbp], eax
  005ea	76 10		 jbe	 SHORT $LN32@stbtt_Find

; 1578 :             low = mid+1;

  005ec	8b 85 84 02 00
	00		 mov	 eax, DWORD PTR mid$18[rbp]
  005f2	ff c0		 inc	 eax
  005f4	89 85 44 02 00
	00		 mov	 DWORD PTR low$16[rbp], eax

; 1579 :          else {

  005fa	eb 55		 jmp	 SHORT $LN33@stbtt_Find
$LN32@stbtt_Find:

; 1580 :             stbtt_uint32 start_glyph = ttULONG(data+index_map+16+mid*12+8);

  005fc	8b 45 24	 mov	 eax, DWORD PTR index_map$[rbp]
  005ff	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  00603	48 03 c8	 add	 rcx, rax
  00606	48 8b c1	 mov	 rax, rcx
  00609	6b 8d 84 02 00
	00 0c		 imul	 ecx, DWORD PTR mid$18[rbp], 12
  00610	48 63 c9	 movsxd	 rcx, ecx
  00613	48 8d 44 08 18	 lea	 rax, QWORD PTR [rax+rcx+24]
  00618	48 8b c8	 mov	 rcx, rax
  0061b	e8 00 00 00 00	 call	 ?ttULONG@@YAIPEAE@Z	; ttULONG
  00620	89 85 e4 02 00
	00		 mov	 DWORD PTR start_glyph$21[rbp], eax

; 1581 :             if (format == 12)

  00626	0f b7 45 44	 movzx	 eax, WORD PTR format$[rbp]
  0062a	83 f8 0c	 cmp	 eax, 12
  0062d	75 1a		 jne	 SHORT $LN34@stbtt_Find

; 1582 :                return start_glyph + unicode_codepoint-start_char;

  0062f	8b 85 a8 04 00
	00		 mov	 eax, DWORD PTR unicode_codepoint$[rbp]
  00635	8b 8d e4 02 00
	00		 mov	 ecx, DWORD PTR start_glyph$21[rbp]
  0063b	03 c8		 add	 ecx, eax
  0063d	8b c1		 mov	 eax, ecx
  0063f	2b 85 a4 02 00
	00		 sub	 eax, DWORD PTR start_char$19[rbp]
  00645	eb 43		 jmp	 SHORT $LN1@stbtt_Find

; 1583 :             else // format == 13

  00647	eb 08		 jmp	 SHORT $LN35@stbtt_Find
$LN34@stbtt_Find:

; 1584 :                return start_glyph;

  00649	8b 85 e4 02 00
	00		 mov	 eax, DWORD PTR start_glyph$21[rbp]
  0064f	eb 39		 jmp	 SHORT $LN1@stbtt_Find
$LN35@stbtt_Find:
$LN33@stbtt_Find:
$LN31@stbtt_Find:

; 1585 :          }
; 1586 :       }

  00651	e9 e4 fe ff ff	 jmp	 $LN7@stbtt_Find
$LN8@stbtt_Find:

; 1587 :       return 0; // not found

  00656	33 c0		 xor	 eax, eax
  00658	eb 30		 jmp	 SHORT $LN1@stbtt_Find
$LN28@stbtt_Find:
$LN21@stbtt_Find:
$LN19@stbtt_Find:
$LN16@stbtt_Find:
$LN13@stbtt_Find:
$LN11@stbtt_Find:

; 1588 :    }
; 1589 :    // @TODO
; 1590 :    STBTT_assert(0);

  0065a	33 c0		 xor	 eax, eax
  0065c	85 c0		 test	 eax, eax
  0065e	75 22		 jne	 SHORT $LN38@stbtt_Find
  00660	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbtt_FindGlyphIndex@@9@4JA
  00666	83 c0 58	 add	 eax, 88			; 00000058H
  00669	44 8b c0	 mov	 r8d, eax
  0066c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@KHNACDEL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00673	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  0067a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00680	33 c0		 xor	 eax, eax
$LN38@stbtt_Find:
  00682	33 c0		 xor	 eax, eax
  00684	85 c0		 test	 eax, eax
  00686	75 d2		 jne	 SHORT $LN11@stbtt_Find

; 1591 :    return 0;

  00688	33 c0		 xor	 eax, eax
$LN1@stbtt_Find:

; 1592 : }

  0068a	48 8d a5 88 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1160]
  00691	5f		 pop	 rdi
  00692	5d		 pop	 rbp
  00693	c3		 ret	 0
stbtt_FindGlyphIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT stbtt_InitFont
_TEXT	SEGMENT
info$ = 224
data$ = 232
offset$ = 240
stbtt_InitFont PROC					; COMDAT

; 4961 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 4962 :    return stbtt_InitFont_internal(info, (unsigned char *) data, offset);

  00034	44 8b 85 f0 00
	00 00		 mov	 r8d, DWORD PTR offset$[rbp]
  0003b	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR data$[rbp]
  00042	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00049	e8 00 00 00 00	 call	 ?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z ; stbtt_InitFont_internal

; 4963 : }

  0004e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00055	5f		 pop	 rdi
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
stbtt_InitFont ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT stbtt_GetFontOffsetForIndex
_TEXT	SEGMENT
data$ = 224
index$ = 232
stbtt_GetFontOffsetForIndex PROC			; COMDAT

; 4951 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 4952 :    return stbtt_GetFontOffsetForIndex_internal((unsigned char *) data, index);

  0002e	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR index$[rbp]
  00034	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0003b	e8 00 00 00 00	 call	 ?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z ; stbtt_GetFontOffsetForIndex_internal

; 4953 : }

  00040	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00047	5f		 pop	 rdi
  00048	5d		 pop	 rbp
  00049	c3		 ret	 0
stbtt_GetFontOffsetForIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT stbtt_PackFontRangesRenderIntoRects
_TEXT	SEGMENT
i$ = 4
j$ = 36
k$ = 68
missing_glyph$ = 100
return_value$ = 132
old_h_over$ = 164
old_v_over$ = 196
fh$9 = 228
scale$10 = 260
recip_h$11 = 292
recip_v$12 = 324
sub_x$13 = 356
sub_y$14 = 388
r$15 = 424
bc$16 = 456
advance$17 = 484
lsb$18 = 516
x0$19 = 548
y0$20 = 580
x1$21 = 612
y1$22 = 644
codepoint$23 = 676
glyph$24 = 708
pad$25 = 740
tv176 = 1140
tv80 = 1140
__$ArrayPad$ = 1144
spc$ = 1184
info$ = 1192
ranges$ = 1200
num_ranges$ = 1208
rects$ = 1216
stbtt_PackFontRangesRenderIntoRects PROC		; COMDAT

; 4217 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec d0 04
	00 00		 sub	 rsp, 1232		; 000004d0H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 34 01 00 00	 mov	 ecx, 308		; 00000134H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 f8
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1272]
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 78 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 4218 :    int i,j,k, missing_glyph = -1, return_value = 1;

  0004b	c7 45 64 ff ff
	ff ff		 mov	 DWORD PTR missing_glyph$[rbp], -1
  00052	c7 85 84 00 00
	00 01 00 00 00	 mov	 DWORD PTR return_value$[rbp], 1

; 4219 : 
; 4220 :    // save current values
; 4221 :    int old_h_over = spc->h_oversample;

  0005c	48 8b 85 a0 04
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  00063	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  00066	89 85 a4 00 00
	00		 mov	 DWORD PTR old_h_over$[rbp], eax

; 4222 :    int old_v_over = spc->v_oversample;

  0006c	48 8b 85 a0 04
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  00073	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00076	89 85 c4 00 00
	00		 mov	 DWORD PTR old_v_over$[rbp], eax

; 4223 : 
; 4224 :    k = 0;

  0007c	c7 45 44 00 00
	00 00		 mov	 DWORD PTR k$[rbp], 0

; 4225 :    for (i=0; i < num_ranges; ++i) {

  00083	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  0008a	eb 08		 jmp	 SHORT $LN4@stbtt_Pack
$LN2@stbtt_Pack:
  0008c	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  0008f	ff c0		 inc	 eax
  00091	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN4@stbtt_Pack:
  00094	8b 85 b8 04 00
	00		 mov	 eax, DWORD PTR num_ranges$[rbp]
  0009a	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  0009d	0f 8d 56 07 00
	00		 jge	 $LN3@stbtt_Pack

; 4226 :       float fh = ranges[i].font_size;

  000a3	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  000a7	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  000ab	48 8b 8d b0 04
	00 00		 mov	 rcx, QWORD PTR ranges$[rbp]
  000b2	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [rcx+rax]
  000b7	f3 0f 11 85 e4
	00 00 00	 movss	 DWORD PTR fh$9[rbp], xmm0

; 4227 :       float scale = fh > 0 ? stbtt_ScaleForPixelHeight(info, fh) : stbtt_ScaleForMappingEmToPixels(info, -fh);

  000bf	f3 0f 10 85 e4
	00 00 00	 movss	 xmm0, DWORD PTR fh$9[rbp]
  000c7	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  000ce	76 1e		 jbe	 SHORT $LN18@stbtt_Pack
  000d0	f3 0f 10 8d e4
	00 00 00	 movss	 xmm1, DWORD PTR fh$9[rbp]
  000d8	48 8b 8d a8 04
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  000df	e8 00 00 00 00	 call	 stbtt_ScaleForPixelHeight
  000e4	f3 0f 11 85 74
	04 00 00	 movss	 DWORD PTR tv80[rbp], xmm0
  000ec	eb 26		 jmp	 SHORT $LN19@stbtt_Pack
$LN18@stbtt_Pack:
  000ee	f3 0f 10 85 e4
	00 00 00	 movss	 xmm0, DWORD PTR fh$9[rbp]
  000f6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000fd	0f 28 c8	 movaps	 xmm1, xmm0
  00100	48 8b 8d a8 04
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00107	e8 00 00 00 00	 call	 stbtt_ScaleForMappingEmToPixels
  0010c	f3 0f 11 85 74
	04 00 00	 movss	 DWORD PTR tv80[rbp], xmm0
$LN19@stbtt_Pack:
  00114	f3 0f 10 85 74
	04 00 00	 movss	 xmm0, DWORD PTR tv80[rbp]
  0011c	f3 0f 11 85 04
	01 00 00	 movss	 DWORD PTR scale$10[rbp], xmm0

; 4228 :       float recip_h,recip_v,sub_x,sub_y;
; 4229 :       spc->h_oversample = ranges[i].h_oversample;

  00124	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  00128	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0012c	48 8b 8d b0 04
	00 00		 mov	 rcx, QWORD PTR ranges$[rbp]
  00133	0f b6 44 01 20	 movzx	 eax, BYTE PTR [rcx+rax+32]
  00138	48 8b 8d a0 04
	00 00		 mov	 rcx, QWORD PTR spc$[rbp]
  0013f	89 41 24	 mov	 DWORD PTR [rcx+36], eax

; 4230 :       spc->v_oversample = ranges[i].v_oversample;

  00142	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  00146	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0014a	48 8b 8d b0 04
	00 00		 mov	 rcx, QWORD PTR ranges$[rbp]
  00151	0f b6 44 01 21	 movzx	 eax, BYTE PTR [rcx+rax+33]
  00156	48 8b 8d a0 04
	00 00		 mov	 rcx, QWORD PTR spc$[rbp]
  0015d	89 41 28	 mov	 DWORD PTR [rcx+40], eax

; 4231 :       recip_h = 1.0f / spc->h_oversample;

  00160	48 8b 85 a0 04
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  00167	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  0016a	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  0016f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00177	f3 0f 5e c8	 divss	 xmm1, xmm0
  0017b	0f 28 c1	 movaps	 xmm0, xmm1
  0017e	f3 0f 11 85 24
	01 00 00	 movss	 DWORD PTR recip_h$11[rbp], xmm0

; 4232 :       recip_v = 1.0f / spc->v_oversample;

  00186	48 8b 85 a0 04
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  0018d	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00190	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  00195	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0019d	f3 0f 5e c8	 divss	 xmm1, xmm0
  001a1	0f 28 c1	 movaps	 xmm0, xmm1
  001a4	f3 0f 11 85 44
	01 00 00	 movss	 DWORD PTR recip_v$12[rbp], xmm0

; 4233 :       sub_x = stbtt__oversample_shift(spc->h_oversample);

  001ac	48 8b 85 a0 04
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  001b3	8b 48 24	 mov	 ecx, DWORD PTR [rax+36]
  001b6	e8 00 00 00 00	 call	 ?stbtt__oversample_shift@@YAMH@Z ; stbtt__oversample_shift
  001bb	f3 0f 11 85 64
	01 00 00	 movss	 DWORD PTR sub_x$13[rbp], xmm0

; 4234 :       sub_y = stbtt__oversample_shift(spc->v_oversample);

  001c3	48 8b 85 a0 04
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  001ca	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  001cd	e8 00 00 00 00	 call	 ?stbtt__oversample_shift@@YAMH@Z ; stbtt__oversample_shift
  001d2	f3 0f 11 85 84
	01 00 00	 movss	 DWORD PTR sub_y$14[rbp], xmm0

; 4235 :       for (j=0; j < ranges[i].num_chars; ++j) {

  001da	c7 45 24 00 00
	00 00		 mov	 DWORD PTR j$[rbp], 0
  001e1	eb 08		 jmp	 SHORT $LN7@stbtt_Pack
$LN5@stbtt_Pack:
  001e3	8b 45 24	 mov	 eax, DWORD PTR j$[rbp]
  001e6	ff c0		 inc	 eax
  001e8	89 45 24	 mov	 DWORD PTR j$[rbp], eax
$LN7@stbtt_Pack:
  001eb	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  001ef	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  001f3	48 8b 8d b0 04
	00 00		 mov	 rcx, QWORD PTR ranges$[rbp]
  001fa	8b 44 01 10	 mov	 eax, DWORD PTR [rcx+rax+16]
  001fe	39 45 24	 cmp	 DWORD PTR j$[rbp], eax
  00201	0f 8d ed 05 00
	00		 jge	 $LN6@stbtt_Pack

; 4236 :          stbrp_rect *r = &rects[k];

  00207	48 63 45 44	 movsxd	 rax, DWORD PTR k$[rbp]
  0020b	48 6b c0 18	 imul	 rax, rax, 24
  0020f	48 8b 8d c0 04
	00 00		 mov	 rcx, QWORD PTR rects$[rbp]
  00216	48 03 c8	 add	 rcx, rax
  00219	48 8b c1	 mov	 rax, rcx
  0021c	48 89 85 a8 01
	00 00		 mov	 QWORD PTR r$15[rbp], rax

; 4237 :          if (r->was_packed && r->w != 0 && r->h != 0) {

  00223	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR r$15[rbp]
  0022a	83 78 14 00	 cmp	 DWORD PTR [rax+20], 0
  0022e	0f 84 17 05 00
	00		 je	 $LN8@stbtt_Pack
  00234	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR r$15[rbp]
  0023b	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  0023f	0f 84 06 05 00
	00		 je	 $LN8@stbtt_Pack
  00245	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR r$15[rbp]
  0024c	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  00250	0f 84 f5 04 00
	00		 je	 $LN8@stbtt_Pack

; 4238 :             stbtt_packedchar *bc = &ranges[i].chardata_for_range[j];

  00256	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  0025a	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0025e	48 63 4d 24	 movsxd	 rcx, DWORD PTR j$[rbp]
  00262	48 6b c9 1c	 imul	 rcx, rcx, 28
  00266	48 8b 95 b0 04
	00 00		 mov	 rdx, QWORD PTR ranges$[rbp]
  0026d	48 03 4c 02 18	 add	 rcx, QWORD PTR [rdx+rax+24]
  00272	48 8b c1	 mov	 rax, rcx
  00275	48 89 85 c8 01
	00 00		 mov	 QWORD PTR bc$16[rbp], rax

; 4239 :             int advance, lsb, x0,y0,x1,y1;
; 4240 :             int codepoint = ranges[i].array_of_unicode_codepoints == NULL ? ranges[i].first_unicode_codepoint_in_range + j : ranges[i].array_of_unicode_codepoints[j];

  0027c	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  00280	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00284	48 8b 8d b0 04
	00 00		 mov	 rcx, QWORD PTR ranges$[rbp]
  0028b	48 83 7c 01 08
	00		 cmp	 QWORD PTR [rcx+rax+8], 0
  00291	75 1e		 jne	 SHORT $LN20@stbtt_Pack
  00293	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  00297	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0029b	48 8b 8d b0 04
	00 00		 mov	 rcx, QWORD PTR ranges$[rbp]
  002a2	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  002a6	03 45 24	 add	 eax, DWORD PTR j$[rbp]
  002a9	89 85 74 04 00
	00		 mov	 DWORD PTR tv176[rbp], eax
  002af	eb 21		 jmp	 SHORT $LN21@stbtt_Pack
$LN20@stbtt_Pack:
  002b1	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  002b5	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  002b9	48 63 4d 24	 movsxd	 rcx, DWORD PTR j$[rbp]
  002bd	48 8b 95 b0 04
	00 00		 mov	 rdx, QWORD PTR ranges$[rbp]
  002c4	48 8b 44 02 08	 mov	 rax, QWORD PTR [rdx+rax+8]
  002c9	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  002cc	89 85 74 04 00
	00		 mov	 DWORD PTR tv176[rbp], eax
$LN21@stbtt_Pack:
  002d2	8b 85 74 04 00
	00		 mov	 eax, DWORD PTR tv176[rbp]
  002d8	89 85 a4 02 00
	00		 mov	 DWORD PTR codepoint$23[rbp], eax

; 4241 :             int glyph = stbtt_FindGlyphIndex(info, codepoint);

  002de	8b 95 a4 02 00
	00		 mov	 edx, DWORD PTR codepoint$23[rbp]
  002e4	48 8b 8d a8 04
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  002eb	e8 00 00 00 00	 call	 stbtt_FindGlyphIndex
  002f0	89 85 c4 02 00
	00		 mov	 DWORD PTR glyph$24[rbp], eax

; 4242 :             stbrp_coord pad = (stbrp_coord) spc->padding;

  002f6	48 8b 85 a0 04
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  002fd	8b 40 1c	 mov	 eax, DWORD PTR [rax+28]
  00300	89 85 e4 02 00
	00		 mov	 DWORD PTR pad$25[rbp], eax

; 4243 : 
; 4244 :             // pad on left and top
; 4245 :             r->x += pad;

  00306	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR r$15[rbp]
  0030d	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00310	03 85 e4 02 00
	00		 add	 eax, DWORD PTR pad$25[rbp]
  00316	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR r$15[rbp]
  0031d	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 4246 :             r->y += pad;

  00320	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR r$15[rbp]
  00327	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0032a	03 85 e4 02 00
	00		 add	 eax, DWORD PTR pad$25[rbp]
  00330	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR r$15[rbp]
  00337	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 4247 :             r->w -= pad;

  0033a	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR r$15[rbp]
  00341	8b 8d e4 02 00
	00		 mov	 ecx, DWORD PTR pad$25[rbp]
  00347	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0034a	2b c1		 sub	 eax, ecx
  0034c	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR r$15[rbp]
  00353	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 4248 :             r->h -= pad;

  00356	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR r$15[rbp]
  0035d	8b 8d e4 02 00
	00		 mov	 ecx, DWORD PTR pad$25[rbp]
  00363	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00366	2b c1		 sub	 eax, ecx
  00368	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR r$15[rbp]
  0036f	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 4249 :             stbtt_GetGlyphHMetrics(info, glyph, &advance, &lsb);

  00372	4c 8d 8d 04 02
	00 00		 lea	 r9, QWORD PTR lsb$18[rbp]
  00379	4c 8d 85 e4 01
	00 00		 lea	 r8, QWORD PTR advance$17[rbp]
  00380	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR glyph$24[rbp]
  00386	48 8b 8d a8 04
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  0038d	e8 00 00 00 00	 call	 stbtt_GetGlyphHMetrics

; 4250 :             stbtt_GetGlyphBitmapBox(info, glyph,

  00392	48 8b 85 a0 04
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  00399	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  0039c	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  003a1	f3 0f 10 8d 04
	01 00 00	 movss	 xmm1, DWORD PTR scale$10[rbp]
  003a9	f3 0f 59 c8	 mulss	 xmm1, xmm0
  003ad	0f 28 c1	 movaps	 xmm0, xmm1
  003b0	48 8b 85 a0 04
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  003b7	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  003ba	f3 48 0f 2a c8	 cvtsi2ss xmm1, rax
  003bf	f3 0f 10 95 04
	01 00 00	 movss	 xmm2, DWORD PTR scale$10[rbp]
  003c7	f3 0f 59 d1	 mulss	 xmm2, xmm1
  003cb	0f 28 ca	 movaps	 xmm1, xmm2
  003ce	48 8d 85 84 02
	00 00		 lea	 rax, QWORD PTR y1$22[rbp]
  003d5	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  003da	48 8d 85 64 02
	00 00		 lea	 rax, QWORD PTR x1$21[rbp]
  003e1	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  003e6	48 8d 85 44 02
	00 00		 lea	 rax, QWORD PTR y0$20[rbp]
  003ed	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  003f2	48 8d 85 24 02
	00 00		 lea	 rax, QWORD PTR x0$19[rbp]
  003f9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003fe	0f 28 d8	 movaps	 xmm3, xmm0
  00401	0f 28 d1	 movaps	 xmm2, xmm1
  00404	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR glyph$24[rbp]
  0040a	48 8b 8d a8 04
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00411	e8 00 00 00 00	 call	 stbtt_GetGlyphBitmapBox

; 4251 :                                     scale * spc->h_oversample,
; 4252 :                                     scale * spc->v_oversample,
; 4253 :                                     &x0,&y0,&x1,&y1);
; 4254 :             stbtt_MakeGlyphBitmapSubpixel(info,

  00416	48 8b 85 a0 04
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  0041d	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00420	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  00425	f3 0f 10 8d 04
	01 00 00	 movss	 xmm1, DWORD PTR scale$10[rbp]
  0042d	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00431	0f 28 c1	 movaps	 xmm0, xmm1
  00434	48 8b 85 a0 04
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  0043b	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  0043e	f3 48 0f 2a c8	 cvtsi2ss xmm1, rax
  00443	f3 0f 10 95 04
	01 00 00	 movss	 xmm2, DWORD PTR scale$10[rbp]
  0044b	f3 0f 59 d1	 mulss	 xmm2, xmm1
  0044f	0f 28 ca	 movaps	 xmm1, xmm2
  00452	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR r$15[rbp]
  00459	48 8b 8d a0 04
	00 00		 mov	 rcx, QWORD PTR spc$[rbp]
  00460	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00463	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00466	2b c1		 sub	 eax, ecx
  00468	ff c0		 inc	 eax
  0046a	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR r$15[rbp]
  00471	48 8b 95 a0 04
	00 00		 mov	 rdx, QWORD PTR spc$[rbp]
  00478	8b 52 24	 mov	 edx, DWORD PTR [rdx+36]
  0047b	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  0047e	2b ca		 sub	 ecx, edx
  00480	ff c1		 inc	 ecx
  00482	48 8b 95 a8 01
	00 00		 mov	 rdx, QWORD PTR r$15[rbp]
  00489	48 63 52 0c	 movsxd	 rdx, DWORD PTR [rdx+12]
  0048d	4c 8b 85 a0 04
	00 00		 mov	 r8, QWORD PTR spc$[rbp]
  00494	4d 8b 40 30	 mov	 r8, QWORD PTR [r8+48]
  00498	4c 03 c2	 add	 r8, rdx
  0049b	49 8b d0	 mov	 rdx, r8
  0049e	4c 8b 85 a8 01
	00 00		 mov	 r8, QWORD PTR r$15[rbp]
  004a5	4c 8b 8d a0 04
	00 00		 mov	 r9, QWORD PTR spc$[rbp]
  004ac	45 8b 40 10	 mov	 r8d, DWORD PTR [r8+16]
  004b0	45 0f af 41 18	 imul	 r8d, DWORD PTR [r9+24]
  004b5	4d 63 c0	 movsxd	 r8, r8d
  004b8	49 03 d0	 add	 rdx, r8
  004bb	44 8b 85 c4 02
	00 00		 mov	 r8d, DWORD PTR glyph$24[rbp]
  004c2	44 89 44 24 48	 mov	 DWORD PTR [rsp+72], r8d
  004c7	0f 57 d2	 xorps	 xmm2, xmm2
  004ca	f3 0f 11 54 24
	40		 movss	 DWORD PTR [rsp+64], xmm2
  004d0	0f 57 d2	 xorps	 xmm2, xmm2
  004d3	f3 0f 11 54 24
	38		 movss	 DWORD PTR [rsp+56], xmm2
  004d9	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  004df	f3 0f 11 4c 24
	28		 movss	 DWORD PTR [rsp+40], xmm1
  004e5	4c 8b 85 a0 04
	00 00		 mov	 r8, QWORD PTR spc$[rbp]
  004ec	45 8b 40 18	 mov	 r8d, DWORD PTR [r8+24]
  004f0	44 89 44 24 20	 mov	 DWORD PTR [rsp+32], r8d
  004f5	44 8b c8	 mov	 r9d, eax
  004f8	44 8b c1	 mov	 r8d, ecx
  004fb	48 8b 8d a8 04
	00 00		 mov	 rcx, QWORD PTR info$[rbp]
  00502	e8 00 00 00 00	 call	 stbtt_MakeGlyphBitmapSubpixel

; 4255 :                                           spc->pixels + r->x + r->y*spc->stride_in_bytes,
; 4256 :                                           r->w - spc->h_oversample+1,
; 4257 :                                           r->h - spc->v_oversample+1,
; 4258 :                                           spc->stride_in_bytes,
; 4259 :                                           scale * spc->h_oversample,
; 4260 :                                           scale * spc->v_oversample,
; 4261 :                                           0,0,
; 4262 :                                           glyph);
; 4263 : 
; 4264 :             if (spc->h_oversample > 1)

  00507	48 8b 85 a0 04
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  0050e	83 78 24 01	 cmp	 DWORD PTR [rax+36], 1
  00512	76 6d		 jbe	 SHORT $LN10@stbtt_Pack

; 4265 :                stbtt__h_prefilter(spc->pixels + r->x + r->y*spc->stride_in_bytes,

  00514	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR r$15[rbp]
  0051b	48 63 40 0c	 movsxd	 rax, DWORD PTR [rax+12]
  0051f	48 8b 8d a0 04
	00 00		 mov	 rcx, QWORD PTR spc$[rbp]
  00526	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0052a	48 03 c8	 add	 rcx, rax
  0052d	48 8b c1	 mov	 rax, rcx
  00530	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR r$15[rbp]
  00537	48 8b 95 a0 04
	00 00		 mov	 rdx, QWORD PTR spc$[rbp]
  0053e	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  00541	0f af 4a 18	 imul	 ecx, DWORD PTR [rdx+24]
  00545	48 63 c9	 movsxd	 rcx, ecx
  00548	48 03 c1	 add	 rax, rcx
  0054b	48 8b 8d a0 04
	00 00		 mov	 rcx, QWORD PTR spc$[rbp]
  00552	8b 49 24	 mov	 ecx, DWORD PTR [rcx+36]
  00555	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00559	48 8b 8d a0 04
	00 00		 mov	 rcx, QWORD PTR spc$[rbp]
  00560	44 8b 49 18	 mov	 r9d, DWORD PTR [rcx+24]
  00564	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR r$15[rbp]
  0056b	44 8b 41 08	 mov	 r8d, DWORD PTR [rcx+8]
  0056f	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR r$15[rbp]
  00576	8b 51 04	 mov	 edx, DWORD PTR [rcx+4]
  00579	48 8b c8	 mov	 rcx, rax
  0057c	e8 00 00 00 00	 call	 ?stbtt__h_prefilter@@YAXPEAEHHHI@Z ; stbtt__h_prefilter
$LN10@stbtt_Pack:

; 4266 :                                   r->w, r->h, spc->stride_in_bytes,
; 4267 :                                   spc->h_oversample);
; 4268 : 
; 4269 :             if (spc->v_oversample > 1)

  00581	48 8b 85 a0 04
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  00588	83 78 28 01	 cmp	 DWORD PTR [rax+40], 1
  0058c	76 6d		 jbe	 SHORT $LN11@stbtt_Pack

; 4270 :                stbtt__v_prefilter(spc->pixels + r->x + r->y*spc->stride_in_bytes,

  0058e	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR r$15[rbp]
  00595	48 63 40 0c	 movsxd	 rax, DWORD PTR [rax+12]
  00599	48 8b 8d a0 04
	00 00		 mov	 rcx, QWORD PTR spc$[rbp]
  005a0	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  005a4	48 03 c8	 add	 rcx, rax
  005a7	48 8b c1	 mov	 rax, rcx
  005aa	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR r$15[rbp]
  005b1	48 8b 95 a0 04
	00 00		 mov	 rdx, QWORD PTR spc$[rbp]
  005b8	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  005bb	0f af 4a 18	 imul	 ecx, DWORD PTR [rdx+24]
  005bf	48 63 c9	 movsxd	 rcx, ecx
  005c2	48 03 c1	 add	 rax, rcx
  005c5	48 8b 8d a0 04
	00 00		 mov	 rcx, QWORD PTR spc$[rbp]
  005cc	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  005cf	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  005d3	48 8b 8d a0 04
	00 00		 mov	 rcx, QWORD PTR spc$[rbp]
  005da	44 8b 49 18	 mov	 r9d, DWORD PTR [rcx+24]
  005de	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR r$15[rbp]
  005e5	44 8b 41 08	 mov	 r8d, DWORD PTR [rcx+8]
  005e9	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR r$15[rbp]
  005f0	8b 51 04	 mov	 edx, DWORD PTR [rcx+4]
  005f3	48 8b c8	 mov	 rcx, rax
  005f6	e8 00 00 00 00	 call	 ?stbtt__v_prefilter@@YAXPEAEHHHI@Z ; stbtt__v_prefilter
$LN11@stbtt_Pack:

; 4271 :                                   r->w, r->h, spc->stride_in_bytes,
; 4272 :                                   spc->v_oversample);
; 4273 : 
; 4274 :             bc->x0       = (stbtt_int16)  r->x;

  005fb	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR bc$16[rbp]
  00602	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR r$15[rbp]
  00609	0f b7 49 0c	 movzx	 ecx, WORD PTR [rcx+12]
  0060d	66 89 08	 mov	 WORD PTR [rax], cx

; 4275 :             bc->y0       = (stbtt_int16)  r->y;

  00610	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR bc$16[rbp]
  00617	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR r$15[rbp]
  0061e	0f b7 49 10	 movzx	 ecx, WORD PTR [rcx+16]
  00622	66 89 48 02	 mov	 WORD PTR [rax+2], cx

; 4276 :             bc->x1       = (stbtt_int16) (r->x + r->w);

  00626	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR r$15[rbp]
  0062d	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00630	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR r$15[rbp]
  00637	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  0063a	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR bc$16[rbp]
  00641	66 89 41 04	 mov	 WORD PTR [rcx+4], ax

; 4277 :             bc->y1       = (stbtt_int16) (r->y + r->h);

  00645	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR r$15[rbp]
  0064c	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0064f	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR r$15[rbp]
  00656	03 41 08	 add	 eax, DWORD PTR [rcx+8]
  00659	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR bc$16[rbp]
  00660	66 89 41 06	 mov	 WORD PTR [rcx+6], ax

; 4278 :             bc->xadvance =                scale * advance;

  00664	f3 0f 2a 85 e4
	01 00 00	 cvtsi2ss xmm0, DWORD PTR advance$17[rbp]
  0066c	f3 0f 10 8d 04
	01 00 00	 movss	 xmm1, DWORD PTR scale$10[rbp]
  00674	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00678	0f 28 c1	 movaps	 xmm0, xmm1
  0067b	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR bc$16[rbp]
  00682	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0

; 4279 :             bc->xoff     =       (float)  x0 * recip_h + sub_x;

  00687	f3 0f 2a 85 24
	02 00 00	 cvtsi2ss xmm0, DWORD PTR x0$19[rbp]
  0068f	f3 0f 59 85 24
	01 00 00	 mulss	 xmm0, DWORD PTR recip_h$11[rbp]
  00697	f3 0f 58 85 64
	01 00 00	 addss	 xmm0, DWORD PTR sub_x$13[rbp]
  0069f	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR bc$16[rbp]
  006a6	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0

; 4280 :             bc->yoff     =       (float)  y0 * recip_v + sub_y;

  006ab	f3 0f 2a 85 44
	02 00 00	 cvtsi2ss xmm0, DWORD PTR y0$20[rbp]
  006b3	f3 0f 59 85 44
	01 00 00	 mulss	 xmm0, DWORD PTR recip_v$12[rbp]
  006bb	f3 0f 58 85 84
	01 00 00	 addss	 xmm0, DWORD PTR sub_y$14[rbp]
  006c3	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR bc$16[rbp]
  006ca	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0

; 4281 :             bc->xoff2    =                (x0 + r->w) * recip_h + sub_x;

  006cf	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR r$15[rbp]
  006d6	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  006d9	8b 8d 24 02 00
	00		 mov	 ecx, DWORD PTR x0$19[rbp]
  006df	03 c8		 add	 ecx, eax
  006e1	8b c1		 mov	 eax, ecx
  006e3	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  006e7	f3 0f 59 85 24
	01 00 00	 mulss	 xmm0, DWORD PTR recip_h$11[rbp]
  006ef	f3 0f 58 85 64
	01 00 00	 addss	 xmm0, DWORD PTR sub_x$13[rbp]
  006f7	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR bc$16[rbp]
  006fe	f3 0f 11 40 14	 movss	 DWORD PTR [rax+20], xmm0

; 4282 :             bc->yoff2    =                (y0 + r->h) * recip_v + sub_y;

  00703	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR r$15[rbp]
  0070a	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0070d	8b 8d 44 02 00
	00		 mov	 ecx, DWORD PTR y0$20[rbp]
  00713	03 c8		 add	 ecx, eax
  00715	8b c1		 mov	 eax, ecx
  00717	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0071b	f3 0f 59 85 44
	01 00 00	 mulss	 xmm0, DWORD PTR recip_v$12[rbp]
  00723	f3 0f 58 85 84
	01 00 00	 addss	 xmm0, DWORD PTR sub_y$14[rbp]
  0072b	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR bc$16[rbp]
  00732	f3 0f 11 40 18	 movss	 DWORD PTR [rax+24], xmm0

; 4283 : 
; 4284 :             if (glyph == 0)

  00737	83 bd c4 02 00
	00 00		 cmp	 DWORD PTR glyph$24[rbp], 0
  0073e	75 06		 jne	 SHORT $LN12@stbtt_Pack

; 4285 :                missing_glyph = j;

  00740	8b 45 24	 mov	 eax, DWORD PTR j$[rbp]
  00743	89 45 64	 mov	 DWORD PTR missing_glyph$[rbp], eax
$LN12@stbtt_Pack:

; 4286 :          } else if (spc->skip_missing) {

  00746	e9 9c 00 00 00	 jmp	 $LN9@stbtt_Pack
$LN8@stbtt_Pack:
  0074b	48 8b 85 a0 04
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  00752	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  00756	74 0f		 je	 SHORT $LN13@stbtt_Pack

; 4287 :             return_value = 0;

  00758	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR return_value$[rbp], 0
  00762	e9 80 00 00 00	 jmp	 $LN14@stbtt_Pack
$LN13@stbtt_Pack:

; 4288 :          } else if (r->was_packed && r->w == 0 && r->h == 0 && missing_glyph >= 0) {

  00767	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR r$15[rbp]
  0076e	83 78 14 00	 cmp	 DWORD PTR [rax+20], 0
  00772	74 69		 je	 SHORT $LN15@stbtt_Pack
  00774	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR r$15[rbp]
  0077b	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  0077f	75 5c		 jne	 SHORT $LN15@stbtt_Pack
  00781	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR r$15[rbp]
  00788	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  0078c	75 4f		 jne	 SHORT $LN15@stbtt_Pack
  0078e	83 7d 64 00	 cmp	 DWORD PTR missing_glyph$[rbp], 0
  00792	7c 49		 jl	 SHORT $LN15@stbtt_Pack

; 4289 :             ranges[i].chardata_for_range[j] = ranges[i].chardata_for_range[missing_glyph];

  00794	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  00798	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0079c	48 63 4d 64	 movsxd	 rcx, DWORD PTR missing_glyph$[rbp]
  007a0	48 6b c9 1c	 imul	 rcx, rcx, 28
  007a4	48 8b 95 b0 04
	00 00		 mov	 rdx, QWORD PTR ranges$[rbp]
  007ab	48 8b 44 02 18	 mov	 rax, QWORD PTR [rdx+rax+24]
  007b0	48 63 55 04	 movsxd	 rdx, DWORD PTR i$[rbp]
  007b4	48 6b d2 28	 imul	 rdx, rdx, 40		; 00000028H
  007b8	4c 63 45 24	 movsxd	 r8, DWORD PTR j$[rbp]
  007bc	4d 6b c0 1c	 imul	 r8, r8, 28
  007c0	4c 8b 8d b0 04
	00 00		 mov	 r9, QWORD PTR ranges$[rbp]
  007c7	49 8b 54 11 18	 mov	 rdx, QWORD PTR [r9+rdx+24]
  007cc	4a 8d 3c 02	 lea	 rdi, QWORD PTR [rdx+r8]
  007d0	48 8d 34 08	 lea	 rsi, QWORD PTR [rax+rcx]
  007d4	b9 1c 00 00 00	 mov	 ecx, 28
  007d9	f3 a4		 rep movsb

; 4290 :          } else {

  007db	eb 0a		 jmp	 SHORT $LN16@stbtt_Pack
$LN15@stbtt_Pack:

; 4291 :             return_value = 0; // if any fail, report failure

  007dd	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR return_value$[rbp], 0
$LN16@stbtt_Pack:
$LN14@stbtt_Pack:
$LN9@stbtt_Pack:

; 4292 :          }
; 4293 : 
; 4294 :          ++k;

  007e7	8b 45 44	 mov	 eax, DWORD PTR k$[rbp]
  007ea	ff c0		 inc	 eax
  007ec	89 45 44	 mov	 DWORD PTR k$[rbp], eax

; 4295 :       }

  007ef	e9 ef f9 ff ff	 jmp	 $LN5@stbtt_Pack
$LN6@stbtt_Pack:

; 4296 :    }

  007f4	e9 93 f8 ff ff	 jmp	 $LN2@stbtt_Pack
$LN3@stbtt_Pack:

; 4297 : 
; 4298 :    // restore original values
; 4299 :    spc->h_oversample = old_h_over;

  007f9	48 8b 85 a0 04
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  00800	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR old_h_over$[rbp]
  00806	89 48 24	 mov	 DWORD PTR [rax+36], ecx

; 4300 :    spc->v_oversample = old_v_over;

  00809	48 8b 85 a0 04
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  00810	8b 8d c4 00 00
	00		 mov	 ecx, DWORD PTR old_v_over$[rbp]
  00816	89 48 28	 mov	 DWORD PTR [rax+40], ecx

; 4301 : 
; 4302 :    return return_value;

  00819	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR return_value$[rbp]

; 4303 : }

  0081f	8b f8		 mov	 edi, eax
  00821	48 8d 4d b0	 lea	 rcx, QWORD PTR [rbp-80]
  00825	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:stbtt_PackFontRangesRenderIntoRects$rtcFrameData
  0082c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00831	8b c7		 mov	 eax, edi
  00833	48 8b 8d 78 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0083a	48 33 cd	 xor	 rcx, rbp
  0083d	e8 00 00 00 00	 call	 __security_check_cookie
  00842	48 8d a5 80 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1152]
  00849	5f		 pop	 rdi
  0084a	5e		 pop	 rsi
  0084b	5d		 pop	 rbp
  0084c	c3		 ret	 0
stbtt_PackFontRangesRenderIntoRects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT stbtt_GetPackedQuad
_TEXT	SEGMENT
ipw$ = 4
iph$ = 36
b$ = 72
x$1 = 100
y$2 = 132
chardata$ = 384
pw$ = 392
ph$ = 400
char_index$ = 408
xpos$ = 416
ypos$ = 424
q$ = 432
align_to_integer$ = 440
stbtt_GetPackedQuad PROC				; COMDAT

; 4372 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]

; 4373 :    float ipw = 1.0f / pw, iph = 1.0f / ph;

  00038	f3 0f 2a 85 88
	01 00 00	 cvtsi2ss xmm0, DWORD PTR pw$[rbp]
  00040	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00048	f3 0f 5e c8	 divss	 xmm1, xmm0
  0004c	0f 28 c1	 movaps	 xmm0, xmm1
  0004f	f3 0f 11 45 04	 movss	 DWORD PTR ipw$[rbp], xmm0
  00054	f3 0f 2a 85 90
	01 00 00	 cvtsi2ss xmm0, DWORD PTR ph$[rbp]
  0005c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00064	f3 0f 5e c8	 divss	 xmm1, xmm0
  00068	0f 28 c1	 movaps	 xmm0, xmm1
  0006b	f3 0f 11 45 24	 movss	 DWORD PTR iph$[rbp], xmm0

; 4374 :    const stbtt_packedchar *b = chardata + char_index;

  00070	48 63 85 98 01
	00 00		 movsxd	 rax, DWORD PTR char_index$[rbp]
  00077	48 6b c0 1c	 imul	 rax, rax, 28
  0007b	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR chardata$[rbp]
  00082	48 03 c8	 add	 rcx, rax
  00085	48 8b c1	 mov	 rax, rcx
  00088	48 89 45 48	 mov	 QWORD PTR b$[rbp], rax

; 4375 : 
; 4376 :    if (align_to_integer) {

  0008c	83 bd b8 01 00
	00 00		 cmp	 DWORD PTR align_to_integer$[rbp], 0
  00093	0f 84 ce 00 00
	00		 je	 $LN2@stbtt_GetP

; 4377 :       float x = (float) STBTT_ifloor((*xpos + b->xoff) + 0.5f);

  00099	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR xpos$[rbp]
  000a0	48 8b 4d 48	 mov	 rcx, QWORD PTR b$[rbp]
  000a4	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  000a8	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [rcx+8]
  000ad	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000b5	e8 00 00 00 00	 call	 ?ImFloorSigned@@YAMM@Z	; ImFloorSigned
  000ba	f3 0f 2c c0	 cvttss2si eax, xmm0
  000be	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000c2	f3 0f 11 45 64	 movss	 DWORD PTR x$1[rbp], xmm0

; 4378 :       float y = (float) STBTT_ifloor((*ypos + b->yoff) + 0.5f);

  000c7	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR ypos$[rbp]
  000ce	48 8b 4d 48	 mov	 rcx, QWORD PTR b$[rbp]
  000d2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  000d6	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [rcx+12]
  000db	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000e3	e8 00 00 00 00	 call	 ?ImFloorSigned@@YAMM@Z	; ImFloorSigned
  000e8	f3 0f 2c c0	 cvttss2si eax, xmm0
  000ec	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000f0	f3 0f 11 85 84
	00 00 00	 movss	 DWORD PTR y$2[rbp], xmm0

; 4379 :       q->x0 = x;

  000f8	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  000ff	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR x$1[rbp]
  00104	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 4380 :       q->y0 = y;

  00108	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0010f	f3 0f 10 85 84
	00 00 00	 movss	 xmm0, DWORD PTR y$2[rbp]
  00117	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0

; 4381 :       q->x1 = x + b->xoff2 - b->xoff;

  0011c	48 8b 45 48	 mov	 rax, QWORD PTR b$[rbp]
  00120	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR x$1[rbp]
  00125	f3 0f 58 40 14	 addss	 xmm0, DWORD PTR [rax+20]
  0012a	48 8b 45 48	 mov	 rax, QWORD PTR b$[rbp]
  0012e	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [rax+8]
  00133	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0013a	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0

; 4382 :       q->y1 = y + b->yoff2 - b->yoff;

  0013f	48 8b 45 48	 mov	 rax, QWORD PTR b$[rbp]
  00143	f3 0f 10 85 84
	00 00 00	 movss	 xmm0, DWORD PTR y$2[rbp]
  0014b	f3 0f 58 40 18	 addss	 xmm0, DWORD PTR [rax+24]
  00150	48 8b 45 48	 mov	 rax, QWORD PTR b$[rbp]
  00154	f3 0f 5c 40 0c	 subss	 xmm0, DWORD PTR [rax+12]
  00159	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00160	f3 0f 11 40 14	 movss	 DWORD PTR [rax+20], xmm0

; 4383 :    } else {

  00165	eb 7f		 jmp	 SHORT $LN3@stbtt_GetP
$LN2@stbtt_GetP:

; 4384 :       q->x0 = *xpos + b->xoff;

  00167	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR xpos$[rbp]
  0016e	48 8b 4d 48	 mov	 rcx, QWORD PTR b$[rbp]
  00172	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00176	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [rcx+8]
  0017b	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00182	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 4385 :       q->y0 = *ypos + b->yoff;

  00186	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR ypos$[rbp]
  0018d	48 8b 4d 48	 mov	 rcx, QWORD PTR b$[rbp]
  00191	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00195	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [rcx+12]
  0019a	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  001a1	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0

; 4386 :       q->x1 = *xpos + b->xoff2;

  001a6	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR xpos$[rbp]
  001ad	48 8b 4d 48	 mov	 rcx, QWORD PTR b$[rbp]
  001b1	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  001b5	f3 0f 58 41 14	 addss	 xmm0, DWORD PTR [rcx+20]
  001ba	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  001c1	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0

; 4387 :       q->y1 = *ypos + b->yoff2;

  001c6	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR ypos$[rbp]
  001cd	48 8b 4d 48	 mov	 rcx, QWORD PTR b$[rbp]
  001d1	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  001d5	f3 0f 58 41 18	 addss	 xmm0, DWORD PTR [rcx+24]
  001da	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  001e1	f3 0f 11 40 14	 movss	 DWORD PTR [rax+20], xmm0
$LN3@stbtt_GetP:

; 4388 :    }
; 4389 : 
; 4390 :    q->s0 = b->x0 * ipw;

  001e6	48 8b 45 48	 mov	 rax, QWORD PTR b$[rbp]
  001ea	0f b7 00	 movzx	 eax, WORD PTR [rax]
  001ed	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001f1	f3 0f 59 45 04	 mulss	 xmm0, DWORD PTR ipw$[rbp]
  001f6	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  001fd	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0

; 4391 :    q->t0 = b->y0 * iph;

  00202	48 8b 45 48	 mov	 rax, QWORD PTR b$[rbp]
  00206	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  0020a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0020e	f3 0f 59 45 24	 mulss	 xmm0, DWORD PTR iph$[rbp]
  00213	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0021a	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0

; 4392 :    q->s1 = b->x1 * ipw;

  0021f	48 8b 45 48	 mov	 rax, QWORD PTR b$[rbp]
  00223	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00227	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0022b	f3 0f 59 45 04	 mulss	 xmm0, DWORD PTR ipw$[rbp]
  00230	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00237	f3 0f 11 40 18	 movss	 DWORD PTR [rax+24], xmm0

; 4393 :    q->t1 = b->y1 * iph;

  0023c	48 8b 45 48	 mov	 rax, QWORD PTR b$[rbp]
  00240	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  00244	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00248	f3 0f 59 45 24	 mulss	 xmm0, DWORD PTR iph$[rbp]
  0024d	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00254	f3 0f 11 40 1c	 movss	 DWORD PTR [rax+28], xmm0

; 4394 : 
; 4395 :    *xpos += b->xadvance;

  00259	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR xpos$[rbp]
  00260	48 8b 4d 48	 mov	 rcx, QWORD PTR b$[rbp]
  00264	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00268	f3 0f 58 41 10	 addss	 xmm0, DWORD PTR [rcx+16]
  0026d	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR xpos$[rbp]
  00274	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 4396 : }

  00278	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  0027f	5f		 pop	 rdi
  00280	5d		 pop	 rbp
  00281	c3		 ret	 0
stbtt_GetPackedQuad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT stbtt_PackEnd
_TEXT	SEGMENT
spc$ = 224
stbtt_PackEnd PROC					; COMDAT

; 3998 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 3999 :    STBTT_free(spc->nodes    , spc->user_allocator_context);

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  00031	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00035	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree

; 4000 :    STBTT_free(spc->pack_info, spc->user_allocator_context);

  0003a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  00041	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00045	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree

; 4001 : }

  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
stbtt_PackEnd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_truetype.h
;	COMDAT stbtt_PackBegin
_TEXT	SEGMENT
context$ = 8
num_nodes$ = 36
nodes$ = 72
tv86 = 276
spc$ = 320
pixels$ = 328
pw$ = 336
ph$ = 344
stride_in_bytes$ = 352
padding$ = 360
alloc_context$ = 368
stbtt_PackBegin PROC					; COMDAT

; 3966 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]

; 3967 :    stbrp_context *context = (stbrp_context *) STBTT_malloc(sizeof(*context)            ,alloc_context);

  00039	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  0003e	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00043	48 89 45 08	 mov	 QWORD PTR context$[rbp], rax

; 3968 :    int            num_nodes = pw - padding;

  00047	8b 85 68 01 00
	00		 mov	 eax, DWORD PTR padding$[rbp]
  0004d	8b 8d 50 01 00
	00		 mov	 ecx, DWORD PTR pw$[rbp]
  00053	2b c8		 sub	 ecx, eax
  00055	8b c1		 mov	 eax, ecx
  00057	89 45 24	 mov	 DWORD PTR num_nodes$[rbp], eax

; 3969 :    stbrp_node    *nodes   = (stbrp_node    *) STBTT_malloc(sizeof(*nodes  ) * num_nodes,alloc_context);

  0005a	48 63 45 24	 movsxd	 rax, DWORD PTR num_nodes$[rbp]
  0005e	48 6b c0 10	 imul	 rax, rax, 16
  00062	48 8b c8	 mov	 rcx, rax
  00065	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  0006a	48 89 45 48	 mov	 QWORD PTR nodes$[rbp], rax

; 3970 : 
; 3971 :    if (context == NULL || nodes == NULL) {

  0006e	48 83 7d 08 00	 cmp	 QWORD PTR context$[rbp], 0
  00073	74 07		 je	 SHORT $LN3@stbtt_Pack
  00075	48 83 7d 48 00	 cmp	 QWORD PTR nodes$[rbp], 0
  0007a	75 27		 jne	 SHORT $LN2@stbtt_Pack
$LN3@stbtt_Pack:

; 3972 :       if (context != NULL) STBTT_free(context, alloc_context);

  0007c	48 83 7d 08 00	 cmp	 QWORD PTR context$[rbp], 0
  00081	74 09		 je	 SHORT $LN4@stbtt_Pack
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR context$[rbp]
  00087	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN4@stbtt_Pack:

; 3973 :       if (nodes   != NULL) STBTT_free(nodes  , alloc_context);

  0008c	48 83 7d 48 00	 cmp	 QWORD PTR nodes$[rbp], 0
  00091	74 09		 je	 SHORT $LN5@stbtt_Pack
  00093	48 8b 4d 48	 mov	 rcx, QWORD PTR nodes$[rbp]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN5@stbtt_Pack:

; 3974 :       return 0;

  0009c	33 c0		 xor	 eax, eax
  0009e	e9 36 01 00 00	 jmp	 $LN1@stbtt_Pack
$LN2@stbtt_Pack:

; 3975 :    }
; 3976 : 
; 3977 :    spc->user_allocator_context = alloc_context;

  000a3	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  000aa	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR alloc_context$[rbp]
  000b1	48 89 08	 mov	 QWORD PTR [rax], rcx

; 3978 :    spc->width = pw;

  000b4	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  000bb	8b 8d 50 01 00
	00		 mov	 ecx, DWORD PTR pw$[rbp]
  000c1	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 3979 :    spc->height = ph;

  000c4	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  000cb	8b 8d 58 01 00
	00		 mov	 ecx, DWORD PTR ph$[rbp]
  000d1	89 48 14	 mov	 DWORD PTR [rax+20], ecx

; 3980 :    spc->pixels = pixels;

  000d4	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  000db	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR pixels$[rbp]
  000e2	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 3981 :    spc->pack_info = context;

  000e6	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  000ed	48 8b 4d 08	 mov	 rcx, QWORD PTR context$[rbp]
  000f1	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 3982 :    spc->nodes = nodes;

  000f5	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  000fc	48 8b 4d 48	 mov	 rcx, QWORD PTR nodes$[rbp]
  00100	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx

; 3983 :    spc->padding = padding;

  00104	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  0010b	8b 8d 68 01 00
	00		 mov	 ecx, DWORD PTR padding$[rbp]
  00111	89 48 1c	 mov	 DWORD PTR [rax+28], ecx

; 3984 :    spc->stride_in_bytes = stride_in_bytes != 0 ? stride_in_bytes : pw;

  00114	83 bd 60 01 00
	00 00		 cmp	 DWORD PTR stride_in_bytes$[rbp], 0
  0011b	74 0e		 je	 SHORT $LN8@stbtt_Pack
  0011d	8b 85 60 01 00
	00		 mov	 eax, DWORD PTR stride_in_bytes$[rbp]
  00123	89 85 14 01 00
	00		 mov	 DWORD PTR tv86[rbp], eax
  00129	eb 0c		 jmp	 SHORT $LN9@stbtt_Pack
$LN8@stbtt_Pack:
  0012b	8b 85 50 01 00
	00		 mov	 eax, DWORD PTR pw$[rbp]
  00131	89 85 14 01 00
	00		 mov	 DWORD PTR tv86[rbp], eax
$LN9@stbtt_Pack:
  00137	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  0013e	8b 8d 14 01 00
	00		 mov	 ecx, DWORD PTR tv86[rbp]
  00144	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 3985 :    spc->h_oversample = 1;

  00147	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  0014e	c7 40 24 01 00
	00 00		 mov	 DWORD PTR [rax+36], 1

; 3986 :    spc->v_oversample = 1;

  00155	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  0015c	c7 40 28 01 00
	00 00		 mov	 DWORD PTR [rax+40], 1

; 3987 :    spc->skip_missing = 0;

  00163	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR spc$[rbp]
  0016a	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [rax+32], 0

; 3988 : 
; 3989 :    stbrp_init_target(context, pw-padding, ph-padding, nodes, num_nodes);

  00171	8b 85 68 01 00
	00		 mov	 eax, DWORD PTR padding$[rbp]
  00177	8b 8d 58 01 00
	00		 mov	 ecx, DWORD PTR ph$[rbp]
  0017d	2b c8		 sub	 ecx, eax
  0017f	8b c1		 mov	 eax, ecx
  00181	8b 8d 68 01 00
	00		 mov	 ecx, DWORD PTR padding$[rbp]
  00187	8b 95 50 01 00
	00		 mov	 edx, DWORD PTR pw$[rbp]
  0018d	2b d1		 sub	 edx, ecx
  0018f	8b ca		 mov	 ecx, edx
  00191	8b 55 24	 mov	 edx, DWORD PTR num_nodes$[rbp]
  00194	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00198	4c 8b 4d 48	 mov	 r9, QWORD PTR nodes$[rbp]
  0019c	44 8b c0	 mov	 r8d, eax
  0019f	8b d1		 mov	 edx, ecx
  001a1	48 8b 4d 08	 mov	 rcx, QWORD PTR context$[rbp]
  001a5	e8 00 00 00 00	 call	 stbrp_init_target

; 3990 : 
; 3991 :    if (pixels)

  001aa	48 83 bd 48 01
	00 00 00	 cmp	 QWORD PTR pixels$[rbp], 0
  001b2	74 20		 je	 SHORT $LN6@stbtt_Pack

; 3992 :       STBTT_memset(pixels, 0, pw*ph); // background of 0 around pixels

  001b4	8b 85 50 01 00
	00		 mov	 eax, DWORD PTR pw$[rbp]
  001ba	0f af 85 58 01
	00 00		 imul	 eax, DWORD PTR ph$[rbp]
  001c1	48 98		 cdqe
  001c3	4c 8b c0	 mov	 r8, rax
  001c6	33 d2		 xor	 edx, edx
  001c8	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR pixels$[rbp]
  001cf	e8 00 00 00 00	 call	 memset
$LN6@stbtt_Pack:

; 3993 : 
; 3994 :    return 1;

  001d4	b8 01 00 00 00	 mov	 eax, 1
$LN1@stbtt_Pack:

; 3995 : }

  001d9	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  001e0	5f		 pop	 rdi
  001e1	5d		 pop	 rbp
  001e2	c3		 ret	 0
stbtt_PackBegin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_rectpack.h
;	COMDAT ?rect_original_order@@YAHPEBX0@Z
_TEXT	SEGMENT
p$ = 8
q$ = 40
tv71 = 244
tv70 = 248
a$ = 288
b$ = 296
?rect_original_order@@YAHPEBX0@Z PROC			; rect_original_order, COMDAT

; 540  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 541  :    const stbrp_rect *p = (const stbrp_rect *) a;

  0002d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  00034	48 89 45 08	 mov	 QWORD PTR p$[rbp], rax

; 542  :    const stbrp_rect *q = (const stbrp_rect *) b;

  00038	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  0003f	48 89 45 28	 mov	 QWORD PTR q$[rbp], rax

; 543  :    return (p->was_packed < q->was_packed) ? -1 : (p->was_packed > q->was_packed);

  00043	48 8b 45 08	 mov	 rax, QWORD PTR p$[rbp]
  00047	48 8b 4d 28	 mov	 rcx, QWORD PTR q$[rbp]
  0004b	8b 49 14	 mov	 ecx, DWORD PTR [rcx+20]
  0004e	39 48 14	 cmp	 DWORD PTR [rax+20], ecx
  00051	7d 0c		 jge	 SHORT $LN5@rect_origi
  00053	c7 85 f4 00 00
	00 ff ff ff ff	 mov	 DWORD PTR tv71[rbp], -1
  0005d	eb 32		 jmp	 SHORT $LN6@rect_origi
$LN5@rect_origi:
  0005f	48 8b 45 08	 mov	 rax, QWORD PTR p$[rbp]
  00063	48 8b 4d 28	 mov	 rcx, QWORD PTR q$[rbp]
  00067	8b 49 14	 mov	 ecx, DWORD PTR [rcx+20]
  0006a	39 48 14	 cmp	 DWORD PTR [rax+20], ecx
  0006d	7e 0c		 jle	 SHORT $LN3@rect_origi
  0006f	c7 85 f8 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv70[rbp], 1
  00079	eb 0a		 jmp	 SHORT $LN4@rect_origi
$LN3@rect_origi:
  0007b	c7 85 f8 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv70[rbp], 0
$LN4@rect_origi:
  00085	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0008b	89 85 f4 00 00
	00		 mov	 DWORD PTR tv71[rbp], eax
$LN6@rect_origi:
  00091	8b 85 f4 00 00
	00		 mov	 eax, DWORD PTR tv71[rbp]

; 544  : }

  00097	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0009e	5f		 pop	 rdi
  0009f	5d		 pop	 rbp
  000a0	c3		 ret	 0
?rect_original_order@@YAHPEBX0@Z ENDP			; rect_original_order
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_rectpack.h
;	COMDAT ?rect_height_compare@@YAHPEBX0@Z
_TEXT	SEGMENT
p$ = 8
q$ = 40
tv77 = 244
tv76 = 248
a$ = 288
b$ = 296
?rect_height_compare@@YAHPEBX0@Z PROC			; rect_height_compare, COMDAT

; 529  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 530  :    const stbrp_rect *p = (const stbrp_rect *) a;

  0002d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  00034	48 89 45 08	 mov	 QWORD PTR p$[rbp], rax

; 531  :    const stbrp_rect *q = (const stbrp_rect *) b;

  00038	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  0003f	48 89 45 28	 mov	 QWORD PTR q$[rbp], rax

; 532  :    if (p->h > q->h)

  00043	48 8b 45 08	 mov	 rax, QWORD PTR p$[rbp]
  00047	48 8b 4d 28	 mov	 rcx, QWORD PTR q$[rbp]
  0004b	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  0004e	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  00051	7e 07		 jle	 SHORT $LN2@rect_heigh

; 533  :       return -1;

  00053	b8 ff ff ff ff	 mov	 eax, -1
  00058	eb 6b		 jmp	 SHORT $LN1@rect_heigh
$LN2@rect_heigh:

; 534  :    if (p->h < q->h)

  0005a	48 8b 45 08	 mov	 rax, QWORD PTR p$[rbp]
  0005e	48 8b 4d 28	 mov	 rcx, QWORD PTR q$[rbp]
  00062	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00065	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  00068	7d 07		 jge	 SHORT $LN3@rect_heigh

; 535  :       return  1;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	eb 54		 jmp	 SHORT $LN1@rect_heigh
$LN3@rect_heigh:

; 536  :    return (p->w > q->w) ? -1 : (p->w < q->w);

  00071	48 8b 45 08	 mov	 rax, QWORD PTR p$[rbp]
  00075	48 8b 4d 28	 mov	 rcx, QWORD PTR q$[rbp]
  00079	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  0007c	39 48 04	 cmp	 DWORD PTR [rax+4], ecx
  0007f	7e 0c		 jle	 SHORT $LN7@rect_heigh
  00081	c7 85 f4 00 00
	00 ff ff ff ff	 mov	 DWORD PTR tv77[rbp], -1
  0008b	eb 32		 jmp	 SHORT $LN8@rect_heigh
$LN7@rect_heigh:
  0008d	48 8b 45 08	 mov	 rax, QWORD PTR p$[rbp]
  00091	48 8b 4d 28	 mov	 rcx, QWORD PTR q$[rbp]
  00095	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00098	39 48 04	 cmp	 DWORD PTR [rax+4], ecx
  0009b	7d 0c		 jge	 SHORT $LN5@rect_heigh
  0009d	c7 85 f8 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv76[rbp], 1
  000a7	eb 0a		 jmp	 SHORT $LN6@rect_heigh
$LN5@rect_heigh:
  000a9	c7 85 f8 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv76[rbp], 0
$LN6@rect_heigh:
  000b3	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR tv76[rbp]
  000b9	89 85 f4 00 00
	00		 mov	 DWORD PTR tv77[rbp], eax
$LN8@rect_heigh:
  000bf	8b 85 f4 00 00
	00		 mov	 eax, DWORD PTR tv77[rbp]
$LN1@rect_heigh:

; 537  : }

  000c5	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000cc	5f		 pop	 rdi
  000cd	5d		 pop	 rbp
  000ce	c3		 ret	 0
?rect_height_compare@@YAHPEBX0@Z ENDP			; rect_height_compare
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_rectpack.h
;	COMDAT ?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z
_TEXT	SEGMENT
res$ = 8
node$ = 56
cur$ = 88
next$4 = 120
next$5 = 152
count$6 = 180
$T7 = 408
$T8 = 456
$T9 = 528
context$ = 536
width$ = 544
height$ = 552
?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z PROC ; stbrp__skyline_pack_rectangle, COMDAT

; 450  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 10 02
	00 00		 sub	 rsp, 528		; 00000210H
  0001e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 84 00 00 00	 mov	 ecx, 132		; 00000084H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR [rsp+568]

; 451  :    // find best position according to heuristic
; 452  :    stbrp__findresult res = stbrp__skyline_find_best_pos(context, width, height);

  0003a	44 8b 8d 28 02
	00 00		 mov	 r9d, DWORD PTR height$[rbp]
  00041	44 8b 85 20 02
	00 00		 mov	 r8d, DWORD PTR width$[rbp]
  00048	48 8b 95 18 02
	00 00		 mov	 rdx, QWORD PTR context$[rbp]
  0004f	48 8d 8d c8 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00056	e8 00 00 00 00	 call	 ?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z ; stbrp__skyline_find_best_pos
  0005b	48 8d 8d 98 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00062	48 8b f9	 mov	 rdi, rcx
  00065	48 8b f0	 mov	 rsi, rax
  00068	b9 10 00 00 00	 mov	 ecx, 16
  0006d	f3 a4		 rep movsb
  0006f	48 8d 45 08	 lea	 rax, QWORD PTR res$[rbp]
  00073	48 8d 8d 98 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  0007a	48 8b f8	 mov	 rdi, rax
  0007d	48 8b f1	 mov	 rsi, rcx
  00080	b9 10 00 00 00	 mov	 ecx, 16
  00085	f3 a4		 rep movsb

; 453  :    stbrp_node *node, *cur;
; 454  : 
; 455  :    // bail if:
; 456  :    //    1. it failed
; 457  :    //    2. the best node doesn't fit (we don't always check this)
; 458  :    //    3. we're out of memory
; 459  :    if (res.prev_link == NULL || res.y + height > context->height || context->free_head == NULL) {

  00087	48 83 7d 10 00	 cmp	 QWORD PTR res$[rbp+8], 0
  0008c	74 27		 je	 SHORT $LN20@stbrp__sky
  0008e	8b 85 28 02 00
	00		 mov	 eax, DWORD PTR height$[rbp]
  00094	8b 4d 0c	 mov	 ecx, DWORD PTR res$[rbp+4]
  00097	03 c8		 add	 ecx, eax
  00099	8b c1		 mov	 eax, ecx
  0009b	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR context$[rbp]
  000a2	3b 41 04	 cmp	 eax, DWORD PTR [rcx+4]
  000a5	7f 0e		 jg	 SHORT $LN20@stbrp__sky
  000a7	48 8b 85 18 02
	00 00		 mov	 rax, QWORD PTR context$[rbp]
  000ae	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  000b3	75 29		 jne	 SHORT $LN19@stbrp__sky
$LN20@stbrp__sky:

; 460  :       res.prev_link = NULL;

  000b5	48 c7 45 10 00
	00 00 00	 mov	 QWORD PTR res$[rbp+8], 0

; 461  :       return res;

  000bd	48 8d 45 08	 lea	 rax, QWORD PTR res$[rbp]
  000c1	48 8b bd 10 02
	00 00		 mov	 rdi, QWORD PTR $T9[rbp]
  000c8	48 8b f0	 mov	 rsi, rax
  000cb	b9 10 00 00 00	 mov	 ecx, 16
  000d0	f3 a4		 rep movsb
  000d2	48 8b 85 10 02
	00 00		 mov	 rax, QWORD PTR $T9[rbp]
  000d9	e9 7a 02 00 00	 jmp	 $LN1@stbrp__sky
$LN19@stbrp__sky:

; 462  :    }
; 463  : 
; 464  :    // on success, create new node
; 465  :    node = context->free_head;

  000de	48 8b 85 18 02
	00 00		 mov	 rax, QWORD PTR context$[rbp]
  000e5	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000e9	48 89 45 38	 mov	 QWORD PTR node$[rbp], rax

; 466  :    node->x = (stbrp_coord) res.x;

  000ed	48 8b 45 38	 mov	 rax, QWORD PTR node$[rbp]
  000f1	8b 4d 08	 mov	 ecx, DWORD PTR res$[rbp]
  000f4	89 08		 mov	 DWORD PTR [rax], ecx

; 467  :    node->y = (stbrp_coord) (res.y + height);

  000f6	8b 85 28 02 00
	00		 mov	 eax, DWORD PTR height$[rbp]
  000fc	8b 4d 0c	 mov	 ecx, DWORD PTR res$[rbp+4]
  000ff	03 c8		 add	 ecx, eax
  00101	8b c1		 mov	 eax, ecx
  00103	48 8b 4d 38	 mov	 rcx, QWORD PTR node$[rbp]
  00107	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 468  : 
; 469  :    context->free_head = node->next;

  0010a	48 8b 85 18 02
	00 00		 mov	 rax, QWORD PTR context$[rbp]
  00111	48 8b 4d 38	 mov	 rcx, QWORD PTR node$[rbp]
  00115	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00119	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 470  : 
; 471  :    // insert the new node into the right starting point, and
; 472  :    // let 'cur' point to the remaining nodes needing to be
; 473  :    // stiched back in
; 474  : 
; 475  :    cur = *res.prev_link;

  0011d	48 8b 45 10	 mov	 rax, QWORD PTR res$[rbp+8]
  00121	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00124	48 89 45 58	 mov	 QWORD PTR cur$[rbp], rax

; 476  :    if (cur->x < res.x) {

  00128	48 8b 45 58	 mov	 rax, QWORD PTR cur$[rbp]
  0012c	8b 4d 08	 mov	 ecx, DWORD PTR res$[rbp]
  0012f	39 08		 cmp	 DWORD PTR [rax], ecx
  00131	7d 22		 jge	 SHORT $LN21@stbrp__sky

; 477  :       // preserve the existing one, so start testing with the next one
; 478  :       stbrp_node *next = cur->next;

  00133	48 8b 45 58	 mov	 rax, QWORD PTR cur$[rbp]
  00137	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0013b	48 89 45 78	 mov	 QWORD PTR next$4[rbp], rax

; 479  :       cur->next = node;

  0013f	48 8b 45 58	 mov	 rax, QWORD PTR cur$[rbp]
  00143	48 8b 4d 38	 mov	 rcx, QWORD PTR node$[rbp]
  00147	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 480  :       cur = next;

  0014b	48 8b 45 78	 mov	 rax, QWORD PTR next$4[rbp]
  0014f	48 89 45 58	 mov	 QWORD PTR cur$[rbp], rax

; 481  :    } else {

  00153	eb 0b		 jmp	 SHORT $LN22@stbrp__sky
$LN21@stbrp__sky:

; 482  :       *res.prev_link = node;

  00155	48 8b 45 10	 mov	 rax, QWORD PTR res$[rbp+8]
  00159	48 8b 4d 38	 mov	 rcx, QWORD PTR node$[rbp]
  0015d	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN22@stbrp__sky:
$LN2@stbrp__sky:

; 483  :    }
; 484  : 
; 485  :    // from here, traverse cur and free the nodes, until we get to one
; 486  :    // that shouldn't be freed
; 487  :    while (cur->next && cur->next->x <= res.x + width) {

  00160	48 8b 45 58	 mov	 rax, QWORD PTR cur$[rbp]
  00164	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00169	74 57		 je	 SHORT $LN3@stbrp__sky
  0016b	48 8b 45 58	 mov	 rax, QWORD PTR cur$[rbp]
  0016f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00173	8b 8d 20 02 00
	00		 mov	 ecx, DWORD PTR width$[rbp]
  00179	8b 55 08	 mov	 edx, DWORD PTR res$[rbp]
  0017c	03 d1		 add	 edx, ecx
  0017e	8b ca		 mov	 ecx, edx
  00180	39 08		 cmp	 DWORD PTR [rax], ecx
  00182	7f 3e		 jg	 SHORT $LN3@stbrp__sky

; 488  :       stbrp_node *next = cur->next;

  00184	48 8b 45 58	 mov	 rax, QWORD PTR cur$[rbp]
  00188	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0018c	48 89 85 98 00
	00 00		 mov	 QWORD PTR next$5[rbp], rax

; 489  :       // move the current node to the free list
; 490  :       cur->next = context->free_head;

  00193	48 8b 45 58	 mov	 rax, QWORD PTR cur$[rbp]
  00197	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR context$[rbp]
  0019e	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  001a2	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 491  :       context->free_head = cur;

  001a6	48 8b 85 18 02
	00 00		 mov	 rax, QWORD PTR context$[rbp]
  001ad	48 8b 4d 58	 mov	 rcx, QWORD PTR cur$[rbp]
  001b1	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 492  :       cur = next;

  001b5	48 8b 85 98 00
	00 00		 mov	 rax, QWORD PTR next$5[rbp]
  001bc	48 89 45 58	 mov	 QWORD PTR cur$[rbp], rax

; 493  :    }

  001c0	eb 9e		 jmp	 SHORT $LN2@stbrp__sky
$LN3@stbrp__sky:

; 494  : 
; 495  :    // stitch the list back in
; 496  :    node->next = cur;

  001c2	48 8b 45 38	 mov	 rax, QWORD PTR node$[rbp]
  001c6	48 8b 4d 58	 mov	 rcx, QWORD PTR cur$[rbp]
  001ca	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 497  : 
; 498  :    if (cur->x < res.x + width)

  001ce	8b 85 20 02 00
	00		 mov	 eax, DWORD PTR width$[rbp]
  001d4	8b 4d 08	 mov	 ecx, DWORD PTR res$[rbp]
  001d7	03 c8		 add	 ecx, eax
  001d9	8b c1		 mov	 eax, ecx
  001db	48 8b 4d 58	 mov	 rcx, QWORD PTR cur$[rbp]
  001df	39 01		 cmp	 DWORD PTR [rcx], eax
  001e1	7d 13		 jge	 SHORT $LN23@stbrp__sky

; 499  :       cur->x = (stbrp_coord) (res.x + width);

  001e3	8b 85 20 02 00
	00		 mov	 eax, DWORD PTR width$[rbp]
  001e9	8b 4d 08	 mov	 ecx, DWORD PTR res$[rbp]
  001ec	03 c8		 add	 ecx, eax
  001ee	8b c1		 mov	 eax, ecx
  001f0	48 8b 4d 58	 mov	 rcx, QWORD PTR cur$[rbp]
  001f4	89 01		 mov	 DWORD PTR [rcx], eax
$LN23@stbrp__sky:

; 500  : 
; 501  : #ifdef _DEBUG
; 502  :    cur = context->active_head;

  001f6	48 8b 85 18 02
	00 00		 mov	 rax, QWORD PTR context$[rbp]
  001fd	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00201	48 89 45 58	 mov	 QWORD PTR cur$[rbp], rax
$LN4@stbrp__sky:

; 503  :    while (cur->x < context->width) {

  00205	48 8b 45 58	 mov	 rax, QWORD PTR cur$[rbp]
  00209	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR context$[rbp]
  00210	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00212	39 08		 cmp	 DWORD PTR [rax], ecx
  00214	7d 48		 jge	 SHORT $LN5@stbrp__sky
$LN8@stbrp__sky:

; 504  :       STBRP_ASSERT(cur->x < cur->next->x);

  00216	48 8b 45 58	 mov	 rax, QWORD PTR cur$[rbp]
  0021a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0021e	48 8b 4d 58	 mov	 rcx, QWORD PTR cur$[rbp]
  00222	8b 00		 mov	 eax, DWORD PTR [rax]
  00224	39 01		 cmp	 DWORD PTR [rcx], eax
  00226	7c 22		 jl	 SHORT $LN25@stbrp__sky
  00228	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA
  0022e	83 c0 36	 add	 eax, 54			; 00000036H
  00231	44 8b c0	 mov	 r8d, eax
  00234	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@HGJIAHCP@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NCKIDPDA@?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?5?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?$AA@
  00242	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00248	33 c0		 xor	 eax, eax
$LN25@stbrp__sky:
  0024a	33 c0		 xor	 eax, eax
  0024c	85 c0		 test	 eax, eax
  0024e	75 c6		 jne	 SHORT $LN8@stbrp__sky

; 505  :       cur = cur->next;

  00250	48 8b 45 58	 mov	 rax, QWORD PTR cur$[rbp]
  00254	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00258	48 89 45 58	 mov	 QWORD PTR cur$[rbp], rax

; 506  :    }

  0025c	eb a7		 jmp	 SHORT $LN4@stbrp__sky
$LN5@stbrp__sky:
$LN11@stbrp__sky:

; 507  :    STBRP_ASSERT(cur->next == NULL);

  0025e	48 8b 45 58	 mov	 rax, QWORD PTR cur$[rbp]
  00262	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00267	74 22		 je	 SHORT $LN26@stbrp__sky
  00269	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA
  0026f	83 c0 39	 add	 eax, 57			; 00000039H
  00272	44 8b c0	 mov	 r8d, eax
  00275	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@HGJIAHCP@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0027c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@NJIDGHPD@?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00283	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00289	33 c0		 xor	 eax, eax
$LN26@stbrp__sky:
  0028b	33 c0		 xor	 eax, eax
  0028d	85 c0		 test	 eax, eax
  0028f	75 cd		 jne	 SHORT $LN11@stbrp__sky

; 508  : 
; 509  :    {
; 510  :       int count=0;

  00291	c7 85 b4 00 00
	00 00 00 00 00	 mov	 DWORD PTR count$6[rbp], 0

; 511  :       cur = context->active_head;

  0029b	48 8b 85 18 02
	00 00		 mov	 rax, QWORD PTR context$[rbp]
  002a2	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  002a6	48 89 45 58	 mov	 QWORD PTR cur$[rbp], rax
$LN12@stbrp__sky:

; 512  :       while (cur) {

  002aa	48 83 7d 58 00	 cmp	 QWORD PTR cur$[rbp], 0
  002af	74 1c		 je	 SHORT $LN13@stbrp__sky

; 513  :          cur = cur->next;

  002b1	48 8b 45 58	 mov	 rax, QWORD PTR cur$[rbp]
  002b5	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002b9	48 89 45 58	 mov	 QWORD PTR cur$[rbp], rax

; 514  :          ++count;

  002bd	8b 85 b4 00 00
	00		 mov	 eax, DWORD PTR count$6[rbp]
  002c3	ff c0		 inc	 eax
  002c5	89 85 b4 00 00
	00		 mov	 DWORD PTR count$6[rbp], eax

; 515  :       }

  002cb	eb dd		 jmp	 SHORT $LN12@stbrp__sky
$LN13@stbrp__sky:

; 516  :       cur = context->free_head;

  002cd	48 8b 85 18 02
	00 00		 mov	 rax, QWORD PTR context$[rbp]
  002d4	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  002d8	48 89 45 58	 mov	 QWORD PTR cur$[rbp], rax
$LN14@stbrp__sky:

; 517  :       while (cur) {

  002dc	48 83 7d 58 00	 cmp	 QWORD PTR cur$[rbp], 0
  002e1	74 1c		 je	 SHORT $LN15@stbrp__sky

; 518  :          cur = cur->next;

  002e3	48 8b 45 58	 mov	 rax, QWORD PTR cur$[rbp]
  002e7	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002eb	48 89 45 58	 mov	 QWORD PTR cur$[rbp], rax

; 519  :          ++count;

  002ef	8b 85 b4 00 00
	00		 mov	 eax, DWORD PTR count$6[rbp]
  002f5	ff c0		 inc	 eax
  002f7	89 85 b4 00 00
	00		 mov	 DWORD PTR count$6[rbp], eax

; 520  :       }

  002fd	eb dd		 jmp	 SHORT $LN14@stbrp__sky
$LN15@stbrp__sky:
$LN18@stbrp__sky:

; 521  :       STBRP_ASSERT(count == context->num_nodes+2);

  002ff	48 8b 85 18 02
	00 00		 mov	 rax, QWORD PTR context$[rbp]
  00306	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00309	83 c0 02	 add	 eax, 2
  0030c	39 85 b4 00 00
	00		 cmp	 DWORD PTR count$6[rbp], eax
  00312	74 22		 je	 SHORT $LN27@stbrp__sky
  00314	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA
  0031a	83 c0 47	 add	 eax, 71			; 00000047H
  0031d	44 8b c0	 mov	 r8d, eax
  00320	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@HGJIAHCP@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00327	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@MABMKAHD@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAn?$AAu?$AAm?$AA_?$AAn?$AAo?$AAd?$AAe?$AAs?$AA?$CL?$AA2?$AA?$AA@
  0032e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00334	33 c0		 xor	 eax, eax
$LN27@stbrp__sky:
  00336	33 c0		 xor	 eax, eax
  00338	85 c0		 test	 eax, eax
  0033a	75 c3		 jne	 SHORT $LN18@stbrp__sky

; 522  :    }
; 523  : #endif
; 524  : 
; 525  :    return res;

  0033c	48 8d 45 08	 lea	 rax, QWORD PTR res$[rbp]
  00340	48 8b bd 10 02
	00 00		 mov	 rdi, QWORD PTR $T9[rbp]
  00347	48 8b f0	 mov	 rsi, rax
  0034a	b9 10 00 00 00	 mov	 ecx, 16
  0034f	f3 a4		 rep movsb
  00351	48 8b 85 10 02
	00 00		 mov	 rax, QWORD PTR $T9[rbp]
$LN1@stbrp__sky:

; 526  : }

  00358	48 8b f8	 mov	 rdi, rax
  0035b	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0035f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcFrameData
  00366	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0036b	48 8b c7	 mov	 rax, rdi
  0036e	48 8d a5 f0 01
	00 00		 lea	 rsp, QWORD PTR [rbp+496]
  00375	5f		 pop	 rdi
  00376	5e		 pop	 rsi
  00377	5d		 pop	 rbp
  00378	c3		 ret	 0
?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z ENDP ; stbrp__skyline_pack_rectangle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_rectpack.h
;	COMDAT ?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z
_TEXT	SEGMENT
best_waste$ = 4
best_x$ = 36
best_y$ = 68
fr$ = 104
prev$ = 152
node$ = 184
tail$ = 216
best$ = 248
y$6 = 276
waste$7 = 308
xpos$8 = 340
y$9 = 372
waste$10 = 404
tv141 = 612
__$ArrayPad$ = 616
$T11 = 656
c$ = 664
width$ = 672
height$ = 680
?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z PROC ; stbrp__skyline_find_best_pos, COMDAT

; 348  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec a0 02
	00 00		 sub	 rsp, 672		; 000002a0H
  0001e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 a8 00 00 00	 mov	 ecx, 168		; 000000a8H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 c8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+712]
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 68 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 349  :    int best_waste = (1<<30), best_x, best_y = (1 << 30);

  0004b	c7 45 04 00 00
	00 40		 mov	 DWORD PTR best_waste$[rbp], 1073741824 ; 40000000H
  00052	c7 45 44 00 00
	00 40		 mov	 DWORD PTR best_y$[rbp], 1073741824 ; 40000000H

; 350  :    stbrp__findresult fr;
; 351  :    stbrp_node **prev, *node, *tail, **best = NULL;

  00059	48 c7 85 f8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR best$[rbp], 0

; 352  : 
; 353  :    // align to multiple of c->align
; 354  :    width = (width + c->align - 1);

  00064	48 8b 85 98 02
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  0006b	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0006e	8b 8d a0 02 00
	00		 mov	 ecx, DWORD PTR width$[rbp]
  00074	8d 44 01 ff	 lea	 eax, DWORD PTR [rcx+rax-1]
  00078	89 85 a0 02 00
	00		 mov	 DWORD PTR width$[rbp], eax

; 355  :    width -= width % c->align;

  0007e	8b 85 a0 02 00
	00		 mov	 eax, DWORD PTR width$[rbp]
  00084	99		 cdq
  00085	48 8b 8d 98 02
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  0008c	f7 79 08	 idiv	 DWORD PTR [rcx+8]
  0008f	8b c2		 mov	 eax, edx
  00091	8b 8d a0 02 00
	00		 mov	 ecx, DWORD PTR width$[rbp]
  00097	2b c8		 sub	 ecx, eax
  00099	8b c1		 mov	 eax, ecx
  0009b	89 85 a0 02 00
	00		 mov	 DWORD PTR width$[rbp], eax
$LN4@stbrp__sky:

; 356  :    STBRP_ASSERT(width % c->align == 0);

  000a1	8b 85 a0 02 00
	00		 mov	 eax, DWORD PTR width$[rbp]
  000a7	99		 cdq
  000a8	48 8b 8d 98 02
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  000af	f7 79 08	 idiv	 DWORD PTR [rcx+8]
  000b2	8b c2		 mov	 eax, edx
  000b4	85 c0		 test	 eax, eax
  000b6	74 22		 je	 SHORT $LN33@stbrp__sky
  000b8	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA
  000be	83 c0 08	 add	 eax, 8
  000c1	44 8b c0	 mov	 r8d, eax
  000c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@HGJIAHCP@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  000cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@LEHAODMI@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AAc?$AA?9?$AA?$DO?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000d8	33 c0		 xor	 eax, eax
$LN33@stbrp__sky:
  000da	33 c0		 xor	 eax, eax
  000dc	85 c0		 test	 eax, eax
  000de	75 c1		 jne	 SHORT $LN4@stbrp__sky

; 357  : 
; 358  :    // if it can't possibly fit, bail immediately
; 359  :    if (width > c->width || height > c->height) {

  000e0	48 8b 85 98 02
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  000e7	8b 00		 mov	 eax, DWORD PTR [rax]
  000e9	39 85 a0 02 00
	00		 cmp	 DWORD PTR width$[rbp], eax
  000ef	7f 12		 jg	 SHORT $LN20@stbrp__sky
  000f1	48 8b 85 98 02
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  000f8	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  000fb	39 85 a8 02 00
	00		 cmp	 DWORD PTR height$[rbp], eax
  00101	7e 36		 jle	 SHORT $LN19@stbrp__sky
$LN20@stbrp__sky:

; 360  :       fr.prev_link = NULL;

  00103	48 c7 45 70 00
	00 00 00	 mov	 QWORD PTR fr$[rbp+8], 0

; 361  :       fr.x = fr.y = 0;

  0010b	c7 45 6c 00 00
	00 00		 mov	 DWORD PTR fr$[rbp+4], 0
  00112	8b 45 6c	 mov	 eax, DWORD PTR fr$[rbp+4]
  00115	89 45 68	 mov	 DWORD PTR fr$[rbp], eax

; 362  :       return fr;

  00118	48 8d 45 68	 lea	 rax, QWORD PTR fr$[rbp]
  0011c	48 8b bd 90 02
	00 00		 mov	 rdi, QWORD PTR $T11[rbp]
  00123	48 8b f0	 mov	 rsi, rax
  00126	b9 10 00 00 00	 mov	 ecx, 16
  0012b	f3 a4		 rep movsb
  0012d	48 8b 85 90 02
	00 00		 mov	 rax, QWORD PTR $T11[rbp]
  00134	e9 a4 03 00 00	 jmp	 $LN1@stbrp__sky
$LN19@stbrp__sky:

; 363  :    }
; 364  : 
; 365  :    node = c->active_head;

  00139	48 8b 85 98 02
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  00140	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00144	48 89 85 b8 00
	00 00		 mov	 QWORD PTR node$[rbp], rax

; 366  :    prev = &c->active_head;

  0014b	48 8b 85 98 02
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  00152	48 83 c0 18	 add	 rax, 24
  00156	48 89 85 98 00
	00 00		 mov	 QWORD PTR prev$[rbp], rax
$LN5@stbrp__sky:

; 367  :    while (node->x + width <= c->width) {

  0015d	48 8b 85 b8 00
	00 00		 mov	 rax, QWORD PTR node$[rbp]
  00164	8b 00		 mov	 eax, DWORD PTR [rax]
  00166	03 85 a0 02 00
	00		 add	 eax, DWORD PTR width$[rbp]
  0016c	48 8b 8d 98 02
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  00173	3b 01		 cmp	 eax, DWORD PTR [rcx]
  00175	0f 8f ed 00 00
	00		 jg	 $LN6@stbrp__sky

; 368  :       int y,waste;
; 369  :       y = stbrp__skyline_find_min_y(c, node, node->x, width, &waste);

  0017b	48 8d 85 34 01
	00 00		 lea	 rax, QWORD PTR waste$7[rbp]
  00182	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00187	44 8b 8d a0 02
	00 00		 mov	 r9d, DWORD PTR width$[rbp]
  0018e	48 8b 85 b8 00
	00 00		 mov	 rax, QWORD PTR node$[rbp]
  00195	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  00198	48 8b 95 b8 00
	00 00		 mov	 rdx, QWORD PTR node$[rbp]
  0019f	48 8b 8d 98 02
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  001a6	e8 00 00 00 00	 call	 ?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z ; stbrp__skyline_find_min_y
  001ab	89 85 14 01 00
	00		 mov	 DWORD PTR y$6[rbp], eax

; 370  :       if (c->heuristic == STBRP_HEURISTIC_Skyline_BL_sortHeight) { // actually just want to test BL

  001b1	48 8b 85 98 02
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  001b8	83 78 10 00	 cmp	 DWORD PTR [rax+16], 0
  001bc	75 24		 jne	 SHORT $LN21@stbrp__sky

; 371  :          // bottom left
; 372  :          if (y < best_y) {

  001be	8b 45 44	 mov	 eax, DWORD PTR best_y$[rbp]
  001c1	39 85 14 01 00
	00		 cmp	 DWORD PTR y$6[rbp], eax
  001c7	7d 17		 jge	 SHORT $LN23@stbrp__sky

; 373  :             best_y = y;

  001c9	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR y$6[rbp]
  001cf	89 45 44	 mov	 DWORD PTR best_y$[rbp], eax

; 374  :             best = prev;

  001d2	48 8b 85 98 00
	00 00		 mov	 rax, QWORD PTR prev$[rbp]
  001d9	48 89 85 f8 00
	00 00		 mov	 QWORD PTR best$[rbp], rax
$LN23@stbrp__sky:

; 375  :          }
; 376  :       } else {

  001e0	eb 5d		 jmp	 SHORT $LN22@stbrp__sky
$LN21@stbrp__sky:

; 377  :          // best-fit
; 378  :          if (y + height <= c->height) {

  001e2	8b 85 a8 02 00
	00		 mov	 eax, DWORD PTR height$[rbp]
  001e8	8b 8d 14 01 00
	00		 mov	 ecx, DWORD PTR y$6[rbp]
  001ee	03 c8		 add	 ecx, eax
  001f0	8b c1		 mov	 eax, ecx
  001f2	48 8b 8d 98 02
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  001f9	3b 41 04	 cmp	 eax, DWORD PTR [rcx+4]
  001fc	7f 41		 jg	 SHORT $LN24@stbrp__sky

; 379  :             // can only use it if it first vertically
; 380  :             if (y < best_y || (y == best_y && waste < best_waste)) {

  001fe	8b 45 44	 mov	 eax, DWORD PTR best_y$[rbp]
  00201	39 85 14 01 00
	00		 cmp	 DWORD PTR y$6[rbp], eax
  00207	7c 16		 jl	 SHORT $LN26@stbrp__sky
  00209	8b 45 44	 mov	 eax, DWORD PTR best_y$[rbp]
  0020c	39 85 14 01 00
	00		 cmp	 DWORD PTR y$6[rbp], eax
  00212	75 2b		 jne	 SHORT $LN25@stbrp__sky
  00214	8b 45 04	 mov	 eax, DWORD PTR best_waste$[rbp]
  00217	39 85 34 01 00
	00		 cmp	 DWORD PTR waste$7[rbp], eax
  0021d	7d 20		 jge	 SHORT $LN25@stbrp__sky
$LN26@stbrp__sky:

; 381  :                best_y = y;

  0021f	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR y$6[rbp]
  00225	89 45 44	 mov	 DWORD PTR best_y$[rbp], eax

; 382  :                best_waste = waste;

  00228	8b 85 34 01 00
	00		 mov	 eax, DWORD PTR waste$7[rbp]
  0022e	89 45 04	 mov	 DWORD PTR best_waste$[rbp], eax

; 383  :                best = prev;

  00231	48 8b 85 98 00
	00 00		 mov	 rax, QWORD PTR prev$[rbp]
  00238	48 89 85 f8 00
	00 00		 mov	 QWORD PTR best$[rbp], rax
$LN25@stbrp__sky:
$LN24@stbrp__sky:
$LN22@stbrp__sky:

; 384  :             }
; 385  :          }
; 386  :       }
; 387  :       prev = &node->next;

  0023f	48 8b 85 b8 00
	00 00		 mov	 rax, QWORD PTR node$[rbp]
  00246	48 83 c0 08	 add	 rax, 8
  0024a	48 89 85 98 00
	00 00		 mov	 QWORD PTR prev$[rbp], rax

; 388  :       node = node->next;

  00251	48 8b 85 b8 00
	00 00		 mov	 rax, QWORD PTR node$[rbp]
  00258	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0025c	48 89 85 b8 00
	00 00		 mov	 QWORD PTR node$[rbp], rax

; 389  :    }

  00263	e9 f5 fe ff ff	 jmp	 $LN5@stbrp__sky
$LN6@stbrp__sky:

; 390  : 
; 391  :    best_x = (best == NULL) ? 0 : (*best)->x;

  00268	48 83 bd f8 00
	00 00 00	 cmp	 QWORD PTR best$[rbp], 0
  00270	75 0c		 jne	 SHORT $LN34@stbrp__sky
  00272	c7 85 64 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv141[rbp], 0
  0027c	eb 12		 jmp	 SHORT $LN35@stbrp__sky
$LN34@stbrp__sky:
  0027e	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR best$[rbp]
  00285	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00288	8b 00		 mov	 eax, DWORD PTR [rax]
  0028a	89 85 64 02 00
	00		 mov	 DWORD PTR tv141[rbp], eax
$LN35@stbrp__sky:
  00290	8b 85 64 02 00
	00		 mov	 eax, DWORD PTR tv141[rbp]
  00296	89 45 24	 mov	 DWORD PTR best_x$[rbp], eax

; 392  : 
; 393  :    // if doing best-fit (BF), we also have to try aligning right edge to each node position
; 394  :    //
; 395  :    // e.g, if fitting
; 396  :    //
; 397  :    //     ____________________
; 398  :    //    |____________________|
; 399  :    //
; 400  :    //            into
; 401  :    //
; 402  :    //   |                         |
; 403  :    //   |             ____________|
; 404  :    //   |____________|
; 405  :    //
; 406  :    // then right-aligned reduces waste, but bottom-left BL is always chooses left-aligned
; 407  :    //
; 408  :    // This makes BF take about 2x the time
; 409  : 
; 410  :    if (c->heuristic == STBRP_HEURISTIC_Skyline_BF_sortHeight) {

  00299	48 8b 85 98 02
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  002a0	83 78 10 01	 cmp	 DWORD PTR [rax+16], 1
  002a4	0f 85 00 02 00
	00		 jne	 $LN27@stbrp__sky

; 411  :       tail = c->active_head;

  002aa	48 8b 85 98 02
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  002b1	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  002b5	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tail$[rbp], rax

; 412  :       node = c->active_head;

  002bc	48 8b 85 98 02
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  002c3	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  002c7	48 89 85 b8 00
	00 00		 mov	 QWORD PTR node$[rbp], rax

; 413  :       prev = &c->active_head;

  002ce	48 8b 85 98 02
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  002d5	48 83 c0 18	 add	 rax, 24
  002d9	48 89 85 98 00
	00 00		 mov	 QWORD PTR prev$[rbp], rax
$LN7@stbrp__sky:

; 414  :       // find first node that's admissible
; 415  :       while (tail->x < width)

  002e0	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tail$[rbp]
  002e7	8b 8d a0 02 00
	00		 mov	 ecx, DWORD PTR width$[rbp]
  002ed	39 08		 cmp	 DWORD PTR [rax], ecx
  002ef	7d 14		 jge	 SHORT $LN8@stbrp__sky

; 416  :          tail = tail->next;

  002f1	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tail$[rbp]
  002f8	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002fc	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tail$[rbp], rax
  00303	eb db		 jmp	 SHORT $LN7@stbrp__sky
$LN8@stbrp__sky:
$LN9@stbrp__sky:

; 417  :       while (tail) {

  00305	48 83 bd d8 00
	00 00 00	 cmp	 QWORD PTR tail$[rbp], 0
  0030d	0f 84 97 01 00
	00		 je	 $LN10@stbrp__sky

; 418  :          int xpos = tail->x - width;

  00313	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tail$[rbp]
  0031a	8b 8d a0 02 00
	00		 mov	 ecx, DWORD PTR width$[rbp]
  00320	8b 00		 mov	 eax, DWORD PTR [rax]
  00322	2b c1		 sub	 eax, ecx
  00324	89 85 54 01 00
	00		 mov	 DWORD PTR xpos$8[rbp], eax
$LN13@stbrp__sky:

; 419  :          int y,waste;
; 420  :          STBRP_ASSERT(xpos >= 0);

  0032a	83 bd 54 01 00
	00 00		 cmp	 DWORD PTR xpos$8[rbp], 0
  00331	7d 22		 jge	 SHORT $LN36@stbrp__sky
  00333	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA
  00339	83 c0 48	 add	 eax, 72			; 00000048H
  0033c	44 8b c0	 mov	 r8d, eax
  0033f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@HGJIAHCP@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00346	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@MNLKNDNL@?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  0034d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00353	33 c0		 xor	 eax, eax
$LN36@stbrp__sky:
  00355	33 c0		 xor	 eax, eax
  00357	85 c0		 test	 eax, eax
  00359	75 cf		 jne	 SHORT $LN13@stbrp__sky
$LN14@stbrp__sky:

; 421  :          // find the left position that matches this
; 422  :          while (node->next->x <= xpos) {

  0035b	48 8b 85 b8 00
	00 00		 mov	 rax, QWORD PTR node$[rbp]
  00362	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00366	8b 8d 54 01 00
	00		 mov	 ecx, DWORD PTR xpos$8[rbp]
  0036c	39 08		 cmp	 DWORD PTR [rax], ecx
  0036e	7f 26		 jg	 SHORT $LN15@stbrp__sky

; 423  :             prev = &node->next;

  00370	48 8b 85 b8 00
	00 00		 mov	 rax, QWORD PTR node$[rbp]
  00377	48 83 c0 08	 add	 rax, 8
  0037b	48 89 85 98 00
	00 00		 mov	 QWORD PTR prev$[rbp], rax

; 424  :             node = node->next;

  00382	48 8b 85 b8 00
	00 00		 mov	 rax, QWORD PTR node$[rbp]
  00389	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0038d	48 89 85 b8 00
	00 00		 mov	 QWORD PTR node$[rbp], rax

; 425  :          }

  00394	eb c5		 jmp	 SHORT $LN14@stbrp__sky
$LN15@stbrp__sky:
$LN18@stbrp__sky:

; 426  :          STBRP_ASSERT(node->next->x > xpos && node->x <= xpos);

  00396	48 8b 85 b8 00
	00 00		 mov	 rax, QWORD PTR node$[rbp]
  0039d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  003a1	8b 8d 54 01 00
	00		 mov	 ecx, DWORD PTR xpos$8[rbp]
  003a7	39 08		 cmp	 DWORD PTR [rax], ecx
  003a9	7e 11		 jle	 SHORT $LN37@stbrp__sky
  003ab	48 8b 85 b8 00
	00 00		 mov	 rax, QWORD PTR node$[rbp]
  003b2	8b 8d 54 01 00
	00		 mov	 ecx, DWORD PTR xpos$8[rbp]
  003b8	39 08		 cmp	 DWORD PTR [rax], ecx
  003ba	7e 22		 jle	 SHORT $LN38@stbrp__sky
$LN37@stbrp__sky:
  003bc	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA
  003c2	83 c0 4e	 add	 eax, 78			; 0000004eH
  003c5	44 8b c0	 mov	 r8d, eax
  003c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@HGJIAHCP@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  003cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FA@GPDJEJHP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO?$AA?5?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5@
  003d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003dc	33 c0		 xor	 eax, eax
$LN38@stbrp__sky:
  003de	33 c0		 xor	 eax, eax
  003e0	85 c0		 test	 eax, eax
  003e2	75 b2		 jne	 SHORT $LN18@stbrp__sky

; 427  :          y = stbrp__skyline_find_min_y(c, node, xpos, width, &waste);

  003e4	48 8d 85 94 01
	00 00		 lea	 rax, QWORD PTR waste$10[rbp]
  003eb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003f0	44 8b 8d a0 02
	00 00		 mov	 r9d, DWORD PTR width$[rbp]
  003f7	44 8b 85 54 01
	00 00		 mov	 r8d, DWORD PTR xpos$8[rbp]
  003fe	48 8b 95 b8 00
	00 00		 mov	 rdx, QWORD PTR node$[rbp]
  00405	48 8b 8d 98 02
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  0040c	e8 00 00 00 00	 call	 ?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z ; stbrp__skyline_find_min_y
  00411	89 85 74 01 00
	00		 mov	 DWORD PTR y$9[rbp], eax

; 428  :          if (y + height <= c->height) {

  00417	8b 85 a8 02 00
	00		 mov	 eax, DWORD PTR height$[rbp]
  0041d	8b 8d 74 01 00
	00		 mov	 ecx, DWORD PTR y$9[rbp]
  00423	03 c8		 add	 ecx, eax
  00425	8b c1		 mov	 eax, ecx
  00427	48 8b 8d 98 02
	00 00		 mov	 rcx, QWORD PTR c$[rbp]
  0042e	3b 41 04	 cmp	 eax, DWORD PTR [rcx+4]
  00431	7f 60		 jg	 SHORT $LN28@stbrp__sky

; 429  :             if (y <= best_y) {

  00433	8b 45 44	 mov	 eax, DWORD PTR best_y$[rbp]
  00436	39 85 74 01 00
	00		 cmp	 DWORD PTR y$9[rbp], eax
  0043c	7f 55		 jg	 SHORT $LN29@stbrp__sky

; 430  :                if (y < best_y || waste < best_waste || (waste==best_waste && xpos < best_x)) {

  0043e	8b 45 44	 mov	 eax, DWORD PTR best_y$[rbp]
  00441	39 85 74 01 00
	00		 cmp	 DWORD PTR y$9[rbp], eax
  00447	7c 21		 jl	 SHORT $LN31@stbrp__sky
  00449	8b 45 04	 mov	 eax, DWORD PTR best_waste$[rbp]
  0044c	39 85 94 01 00
	00		 cmp	 DWORD PTR waste$10[rbp], eax
  00452	7c 16		 jl	 SHORT $LN31@stbrp__sky
  00454	8b 45 04	 mov	 eax, DWORD PTR best_waste$[rbp]
  00457	39 85 94 01 00
	00		 cmp	 DWORD PTR waste$10[rbp], eax
  0045d	75 34		 jne	 SHORT $LN30@stbrp__sky
  0045f	8b 45 24	 mov	 eax, DWORD PTR best_x$[rbp]
  00462	39 85 54 01 00
	00		 cmp	 DWORD PTR xpos$8[rbp], eax
  00468	7d 29		 jge	 SHORT $LN30@stbrp__sky
$LN31@stbrp__sky:

; 431  :                   best_x = xpos;

  0046a	8b 85 54 01 00
	00		 mov	 eax, DWORD PTR xpos$8[rbp]
  00470	89 45 24	 mov	 DWORD PTR best_x$[rbp], eax

; 432  :                   //STBRP_ASSERT(y <= best_y); [DEAR IMGUI]
; 433  :                   best_y = y;

  00473	8b 85 74 01 00
	00		 mov	 eax, DWORD PTR y$9[rbp]
  00479	89 45 44	 mov	 DWORD PTR best_y$[rbp], eax

; 434  :                   best_waste = waste;

  0047c	8b 85 94 01 00
	00		 mov	 eax, DWORD PTR waste$10[rbp]
  00482	89 45 04	 mov	 DWORD PTR best_waste$[rbp], eax

; 435  :                   best = prev;

  00485	48 8b 85 98 00
	00 00		 mov	 rax, QWORD PTR prev$[rbp]
  0048c	48 89 85 f8 00
	00 00		 mov	 QWORD PTR best$[rbp], rax
$LN30@stbrp__sky:
$LN29@stbrp__sky:
$LN28@stbrp__sky:

; 436  :                }
; 437  :             }
; 438  :          }
; 439  :          tail = tail->next;

  00493	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tail$[rbp]
  0049a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0049e	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tail$[rbp], rax

; 440  :       }

  004a5	e9 5b fe ff ff	 jmp	 $LN9@stbrp__sky
$LN10@stbrp__sky:
$LN27@stbrp__sky:

; 441  :    }
; 442  : 
; 443  :    fr.prev_link = best;

  004aa	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR best$[rbp]
  004b1	48 89 45 70	 mov	 QWORD PTR fr$[rbp+8], rax

; 444  :    fr.x = best_x;

  004b5	8b 45 24	 mov	 eax, DWORD PTR best_x$[rbp]
  004b8	89 45 68	 mov	 DWORD PTR fr$[rbp], eax

; 445  :    fr.y = best_y;

  004bb	8b 45 44	 mov	 eax, DWORD PTR best_y$[rbp]
  004be	89 45 6c	 mov	 DWORD PTR fr$[rbp+4], eax

; 446  :    return fr;

  004c1	48 8d 45 68	 lea	 rax, QWORD PTR fr$[rbp]
  004c5	48 8b bd 90 02
	00 00		 mov	 rdi, QWORD PTR $T11[rbp]
  004cc	48 8b f0	 mov	 rsi, rax
  004cf	b9 10 00 00 00	 mov	 ecx, 16
  004d4	f3 a4		 rep movsb
  004d6	48 8b 85 90 02
	00 00		 mov	 rax, QWORD PTR $T11[rbp]
$LN1@stbrp__sky:

; 447  : }

  004dd	48 8b f8	 mov	 rdi, rax
  004e0	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  004e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcFrameData
  004eb	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  004f0	48 8b c7	 mov	 rax, rdi
  004f3	48 8b 8d 68 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  004fa	48 33 cd	 xor	 rcx, rbp
  004fd	e8 00 00 00 00	 call	 __security_check_cookie
  00502	48 8d a5 70 02
	00 00		 lea	 rsp, QWORD PTR [rbp+624]
  00509	5f		 pop	 rdi
  0050a	5e		 pop	 rsi
  0050b	5d		 pop	 rbp
  0050c	c3		 ret	 0
?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z ENDP ; stbrp__skyline_find_best_pos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_rectpack.h
;	COMDAT ?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z
_TEXT	SEGMENT
node$ = 8
x1$ = 36
min_y$ = 68
visited_width$ = 100
waste_area$ = 132
under_width$1 = 164
c$ = 416
first$ = 424
x0$ = 432
width$ = 440
pwaste$ = 448
?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z PROC ; stbrp__skyline_find_min_y, COMDAT

; 292  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+456]

; 293  :    stbrp_node *node = first;

  00039	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR first$[rbp]
  00040	48 89 45 08	 mov	 QWORD PTR node$[rbp], rax

; 294  :    int x1 = x0 + width;

  00044	8b 85 b8 01 00
	00		 mov	 eax, DWORD PTR width$[rbp]
  0004a	8b 8d b0 01 00
	00		 mov	 ecx, DWORD PTR x0$[rbp]
  00050	03 c8		 add	 ecx, eax
  00052	8b c1		 mov	 eax, ecx
  00054	89 45 24	 mov	 DWORD PTR x1$[rbp], eax
$LN4@stbrp__sky:

; 295  :    int min_y, visited_width, waste_area;
; 296  : 
; 297  :    STBRP__NOTUSED(c);
; 298  : 
; 299  :    STBRP_ASSERT(first->x <= x0);

  00057	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR first$[rbp]
  0005e	8b 8d b0 01 00
	00		 mov	 ecx, DWORD PTR x0$[rbp]
  00064	39 08		 cmp	 DWORD PTR [rax], ecx
  00066	7e 22		 jle	 SHORT $LN19@stbrp__sky
  00068	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z@4JA
  0006e	83 c0 07	 add	 eax, 7
  00071	44 8b c0	 mov	 r8d, eax
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@HGJIAHCP@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@KBODBKOH@?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0?$AA?$AA@
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00088	33 c0		 xor	 eax, eax
$LN19@stbrp__sky:
  0008a	33 c0		 xor	 eax, eax
  0008c	85 c0		 test	 eax, eax
  0008e	75 c7		 jne	 SHORT $LN4@stbrp__sky
$LN7@stbrp__sky:

; 300  : 
; 301  :    #if 0
; 302  :    // skip in case we're past the node
; 303  :    while (node->next->x <= x0)
; 304  :       ++node;
; 305  :    #else
; 306  :    STBRP_ASSERT(node->next->x > x0); // we ended up handling this in the caller for efficiency

  00090	48 8b 45 08	 mov	 rax, QWORD PTR node$[rbp]
  00094	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00098	8b 8d b0 01 00
	00		 mov	 ecx, DWORD PTR x0$[rbp]
  0009e	39 08		 cmp	 DWORD PTR [rax], ecx
  000a0	7f 22		 jg	 SHORT $LN20@stbrp__sky
  000a2	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z@4JA
  000a8	83 c0 0e	 add	 eax, 14
  000ab	44 8b c0	 mov	 r8d, eax
  000ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@HGJIAHCP@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@BDIGDJGP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO?$AA?5?$AAx?$AA0?$AA?$AA@
  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c2	33 c0		 xor	 eax, eax
$LN20@stbrp__sky:
  000c4	33 c0		 xor	 eax, eax
  000c6	85 c0		 test	 eax, eax
  000c8	75 c6		 jne	 SHORT $LN7@stbrp__sky
$LN10@stbrp__sky:

; 307  :    #endif
; 308  : 
; 309  :    STBRP_ASSERT(node->x <= x0);

  000ca	48 8b 45 08	 mov	 rax, QWORD PTR node$[rbp]
  000ce	8b 8d b0 01 00
	00		 mov	 ecx, DWORD PTR x0$[rbp]
  000d4	39 08		 cmp	 DWORD PTR [rax], ecx
  000d6	7e 22		 jle	 SHORT $LN21@stbrp__sky
  000d8	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z@4JA
  000de	83 c0 11	 add	 eax, 17
  000e1	44 8b c0	 mov	 r8d, eax
  000e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@HGJIAHCP@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  000eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@JHJLEEND@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0?$AA?$AA@
  000f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000f8	33 c0		 xor	 eax, eax
$LN21@stbrp__sky:
  000fa	33 c0		 xor	 eax, eax
  000fc	85 c0		 test	 eax, eax
  000fe	75 ca		 jne	 SHORT $LN10@stbrp__sky

; 310  : 
; 311  :    min_y = 0;

  00100	c7 45 44 00 00
	00 00		 mov	 DWORD PTR min_y$[rbp], 0

; 312  :    waste_area = 0;

  00107	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR waste_area$[rbp], 0

; 313  :    visited_width = 0;

  00111	c7 45 64 00 00
	00 00		 mov	 DWORD PTR visited_width$[rbp], 0
$LN11@stbrp__sky:

; 314  :    while (node->x < x1) {

  00118	48 8b 45 08	 mov	 rax, QWORD PTR node$[rbp]
  0011c	8b 4d 24	 mov	 ecx, DWORD PTR x1$[rbp]
  0011f	39 08		 cmp	 DWORD PTR [rax], ecx
  00121	0f 8d 0e 01 00
	00		 jge	 $LN12@stbrp__sky

; 315  :       if (node->y > min_y) {

  00127	48 8b 45 08	 mov	 rax, QWORD PTR node$[rbp]
  0012b	8b 4d 44	 mov	 ecx, DWORD PTR min_y$[rbp]
  0012e	39 48 04	 cmp	 DWORD PTR [rax+4], ecx
  00131	7e 78		 jle	 SHORT $LN13@stbrp__sky

; 316  :          // raise min_y higher.
; 317  :          // we've accounted for all waste up to min_y,
; 318  :          // but we'll now add more waste for everything we've visted
; 319  :          waste_area += visited_width * (node->y - min_y);

  00133	48 8b 45 08	 mov	 rax, QWORD PTR node$[rbp]
  00137	8b 4d 44	 mov	 ecx, DWORD PTR min_y$[rbp]
  0013a	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0013d	2b c1		 sub	 eax, ecx
  0013f	8b 4d 64	 mov	 ecx, DWORD PTR visited_width$[rbp]
  00142	0f af c8	 imul	 ecx, eax
  00145	8b c1		 mov	 eax, ecx
  00147	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR waste_area$[rbp]
  0014d	03 c8		 add	 ecx, eax
  0014f	8b c1		 mov	 eax, ecx
  00151	89 85 84 00 00
	00		 mov	 DWORD PTR waste_area$[rbp], eax

; 320  :          min_y = node->y;

  00157	48 8b 45 08	 mov	 rax, QWORD PTR node$[rbp]
  0015b	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0015e	89 45 44	 mov	 DWORD PTR min_y$[rbp], eax

; 321  :          // the first time through, visited_width might be reduced
; 322  :          if (node->x < x0)

  00161	48 8b 45 08	 mov	 rax, QWORD PTR node$[rbp]
  00165	8b 8d b0 01 00
	00		 mov	 ecx, DWORD PTR x0$[rbp]
  0016b	39 08		 cmp	 DWORD PTR [rax], ecx
  0016d	7d 1e		 jge	 SHORT $LN15@stbrp__sky

; 323  :             visited_width += node->next->x - x0;

  0016f	48 8b 45 08	 mov	 rax, QWORD PTR node$[rbp]
  00173	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00177	8b 8d b0 01 00
	00		 mov	 ecx, DWORD PTR x0$[rbp]
  0017d	8b 00		 mov	 eax, DWORD PTR [rax]
  0017f	2b c1		 sub	 eax, ecx
  00181	8b 4d 64	 mov	 ecx, DWORD PTR visited_width$[rbp]
  00184	03 c8		 add	 ecx, eax
  00186	8b c1		 mov	 eax, ecx
  00188	89 45 64	 mov	 DWORD PTR visited_width$[rbp], eax

; 324  :          else

  0018b	eb 1c		 jmp	 SHORT $LN16@stbrp__sky
$LN15@stbrp__sky:

; 325  :             visited_width += node->next->x - node->x;

  0018d	48 8b 45 08	 mov	 rax, QWORD PTR node$[rbp]
  00191	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00195	48 8b 4d 08	 mov	 rcx, QWORD PTR node$[rbp]
  00199	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0019b	8b 00		 mov	 eax, DWORD PTR [rax]
  0019d	2b c1		 sub	 eax, ecx
  0019f	8b 4d 64	 mov	 ecx, DWORD PTR visited_width$[rbp]
  001a2	03 c8		 add	 ecx, eax
  001a4	8b c1		 mov	 eax, ecx
  001a6	89 45 64	 mov	 DWORD PTR visited_width$[rbp], eax
$LN16@stbrp__sky:

; 326  :       } else {

  001a9	eb 79		 jmp	 SHORT $LN14@stbrp__sky
$LN13@stbrp__sky:

; 327  :          // add waste area
; 328  :          int under_width = node->next->x - node->x;

  001ab	48 8b 45 08	 mov	 rax, QWORD PTR node$[rbp]
  001af	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001b3	48 8b 4d 08	 mov	 rcx, QWORD PTR node$[rbp]
  001b7	8b 09		 mov	 ecx, DWORD PTR [rcx]
  001b9	8b 00		 mov	 eax, DWORD PTR [rax]
  001bb	2b c1		 sub	 eax, ecx
  001bd	89 85 a4 00 00
	00		 mov	 DWORD PTR under_width$1[rbp], eax

; 329  :          if (under_width + visited_width > width)

  001c3	8b 45 64	 mov	 eax, DWORD PTR visited_width$[rbp]
  001c6	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR under_width$1[rbp]
  001cc	03 c8		 add	 ecx, eax
  001ce	8b c1		 mov	 eax, ecx
  001d0	3b 85 b8 01 00
	00		 cmp	 eax, DWORD PTR width$[rbp]
  001d6	7e 13		 jle	 SHORT $LN17@stbrp__sky

; 330  :             under_width = width - visited_width;

  001d8	8b 45 64	 mov	 eax, DWORD PTR visited_width$[rbp]
  001db	8b 8d b8 01 00
	00		 mov	 ecx, DWORD PTR width$[rbp]
  001e1	2b c8		 sub	 ecx, eax
  001e3	8b c1		 mov	 eax, ecx
  001e5	89 85 a4 00 00
	00		 mov	 DWORD PTR under_width$1[rbp], eax
$LN17@stbrp__sky:

; 331  :          waste_area += under_width * (min_y - node->y);

  001eb	48 8b 45 08	 mov	 rax, QWORD PTR node$[rbp]
  001ef	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  001f2	8b 4d 44	 mov	 ecx, DWORD PTR min_y$[rbp]
  001f5	2b c8		 sub	 ecx, eax
  001f7	8b c1		 mov	 eax, ecx
  001f9	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR under_width$1[rbp]
  001ff	0f af c8	 imul	 ecx, eax
  00202	8b c1		 mov	 eax, ecx
  00204	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR waste_area$[rbp]
  0020a	03 c8		 add	 ecx, eax
  0020c	8b c1		 mov	 eax, ecx
  0020e	89 85 84 00 00
	00		 mov	 DWORD PTR waste_area$[rbp], eax

; 332  :          visited_width += under_width;

  00214	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR under_width$1[rbp]
  0021a	8b 4d 64	 mov	 ecx, DWORD PTR visited_width$[rbp]
  0021d	03 c8		 add	 ecx, eax
  0021f	8b c1		 mov	 eax, ecx
  00221	89 45 64	 mov	 DWORD PTR visited_width$[rbp], eax
$LN14@stbrp__sky:

; 333  :       }
; 334  :       node = node->next;

  00224	48 8b 45 08	 mov	 rax, QWORD PTR node$[rbp]
  00228	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0022c	48 89 45 08	 mov	 QWORD PTR node$[rbp], rax

; 335  :    }

  00230	e9 e3 fe ff ff	 jmp	 $LN11@stbrp__sky
$LN12@stbrp__sky:

; 336  : 
; 337  :    *pwaste = waste_area;

  00235	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR pwaste$[rbp]
  0023c	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR waste_area$[rbp]
  00242	89 08		 mov	 DWORD PTR [rax], ecx

; 338  :    return min_y;

  00244	8b 45 44	 mov	 eax, DWORD PTR min_y$[rbp]

; 339  : }

  00247	48 8d a5 88 01
	00 00		 lea	 rsp, QWORD PTR [rbp+392]
  0024e	5f		 pop	 rdi
  0024f	5d		 pop	 rbp
  00250	c3		 ret	 0
?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z ENDP ; stbrp__skyline_find_min_y
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_rectpack.h
;	COMDAT stbrp_setup_allow_out_of_mem
_TEXT	SEGMENT
context$ = 224
allow_out_of_mem$ = 232
stbrp_setup_allow_out_of_mem PROC			; COMDAT

; 246  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 247  :    if (allow_out_of_mem)

  0002c	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR allow_out_of_mem$[rbp], 0
  00033	74 10		 je	 SHORT $LN2@stbrp_setu

; 248  :       // if it's ok to run out of memory, then don't bother aligning them;
; 249  :       // this gives better packing, but may fail due to OOM (even though
; 250  :       // the rectangles easily fit). @TODO a smarter approach would be to only
; 251  :       // quantize once we've hit OOM, then we could get rid of this parameter.
; 252  :       context->align = 1;

  00035	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR context$[rbp]
  0003c	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1

; 253  :    else {

  00043	eb 2c		 jmp	 SHORT $LN3@stbrp_setu
$LN2@stbrp_setu:

; 254  :       // if it's not ok to run out of memory, then quantize the widths
; 255  :       // so that num_nodes is always enough nodes.
; 256  :       //
; 257  :       // I.e. num_nodes * align >= width
; 258  :       //                  align >= width / num_nodes
; 259  :       //                  align = ceil(width/num_nodes)
; 260  : 
; 261  :       context->align = (context->width + context->num_nodes-1) / context->num_nodes;

  00045	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR context$[rbp]
  0004c	8b 00		 mov	 eax, DWORD PTR [rax]
  0004e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR context$[rbp]
  00055	8b 49 14	 mov	 ecx, DWORD PTR [rcx+20]
  00058	8d 44 08 ff	 lea	 eax, DWORD PTR [rax+rcx-1]
  0005c	99		 cdq
  0005d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR context$[rbp]
  00064	f7 79 14	 idiv	 DWORD PTR [rcx+20]
  00067	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR context$[rbp]
  0006e	89 41 08	 mov	 DWORD PTR [rcx+8], eax
$LN3@stbrp_setu:

; 262  :    }
; 263  : }

  00071	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00078	5f		 pop	 rdi
  00079	5d		 pop	 rbp
  0007a	c3		 ret	 0
stbrp_setup_allow_out_of_mem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_rectpack.h
;	COMDAT stbrp_init_target
_TEXT	SEGMENT
i$ = 4
context$ = 256
width$ = 264
height$ = 272
nodes$ = 280
num_nodes$ = 288
stbrp_init_target PROC					; COMDAT

; 266  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 267  :    int i;
; 268  : 
; 269  :    for (i=0; i < num_nodes-1; ++i)

  00038	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  0003f	eb 08		 jmp	 SHORT $LN4@stbrp_init
$LN2@stbrp_init:
  00041	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  00044	ff c0		 inc	 eax
  00046	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN4@stbrp_init:
  00049	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR num_nodes$[rbp]
  0004f	ff c8		 dec	 eax
  00051	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  00054	7d 2e		 jge	 SHORT $LN3@stbrp_init

; 270  :       nodes[i].next = &nodes[i+1];

  00056	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  00059	ff c0		 inc	 eax
  0005b	48 98		 cdqe
  0005d	48 6b c0 10	 imul	 rax, rax, 16
  00061	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR nodes$[rbp]
  00068	48 03 c8	 add	 rcx, rax
  0006b	48 8b c1	 mov	 rax, rcx
  0006e	48 63 4d 04	 movsxd	 rcx, DWORD PTR i$[rbp]
  00072	48 6b c9 10	 imul	 rcx, rcx, 16
  00076	48 8b 95 18 01
	00 00		 mov	 rdx, QWORD PTR nodes$[rbp]
  0007d	48 89 44 0a 08	 mov	 QWORD PTR [rdx+rcx+8], rax
  00082	eb bd		 jmp	 SHORT $LN2@stbrp_init
$LN3@stbrp_init:

; 271  :    nodes[i].next = NULL;

  00084	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  00088	48 6b c0 10	 imul	 rax, rax, 16
  0008c	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR nodes$[rbp]
  00093	48 c7 44 01 08
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+8], 0

; 272  :    context->init_mode = STBRP__INIT_skyline;

  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR context$[rbp]
  000a3	c7 40 0c 01 00
	00 00		 mov	 DWORD PTR [rax+12], 1

; 273  :    context->heuristic = STBRP_HEURISTIC_Skyline_default;

  000aa	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR context$[rbp]
  000b1	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 274  :    context->free_head = &nodes[0];

  000b8	b8 10 00 00 00	 mov	 eax, 16
  000bd	48 6b c0 00	 imul	 rax, rax, 0
  000c1	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR nodes$[rbp]
  000c8	48 03 c8	 add	 rcx, rax
  000cb	48 8b c1	 mov	 rax, rcx
  000ce	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR context$[rbp]
  000d5	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 275  :    context->active_head = &context->extra[0];

  000d9	b8 10 00 00 00	 mov	 eax, 16
  000de	48 6b c0 00	 imul	 rax, rax, 0
  000e2	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR context$[rbp]
  000e9	48 8d 44 01 28	 lea	 rax, QWORD PTR [rcx+rax+40]
  000ee	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR context$[rbp]
  000f5	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 276  :    context->width = width;

  000f9	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR context$[rbp]
  00100	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR width$[rbp]
  00106	89 08		 mov	 DWORD PTR [rax], ecx

; 277  :    context->height = height;

  00108	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR context$[rbp]
  0010f	8b 8d 10 01 00
	00		 mov	 ecx, DWORD PTR height$[rbp]
  00115	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 278  :    context->num_nodes = num_nodes;

  00118	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR context$[rbp]
  0011f	8b 8d 20 01 00
	00		 mov	 ecx, DWORD PTR num_nodes$[rbp]
  00125	89 48 14	 mov	 DWORD PTR [rax+20], ecx

; 279  :    stbrp_setup_allow_out_of_mem(context, 0);

  00128	33 d2		 xor	 edx, edx
  0012a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR context$[rbp]
  00131	e8 00 00 00 00	 call	 stbrp_setup_allow_out_of_mem

; 280  : 
; 281  :    // node 0 is the full width, node 1 is the sentinel (lets us not store width explicitly)
; 282  :    context->extra[0].x = 0;

  00136	b8 10 00 00 00	 mov	 eax, 16
  0013b	48 6b c0 00	 imul	 rax, rax, 0
  0013f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR context$[rbp]
  00146	c7 44 01 28 00
	00 00 00	 mov	 DWORD PTR [rcx+rax+40], 0

; 283  :    context->extra[0].y = 0;

  0014e	b8 10 00 00 00	 mov	 eax, 16
  00153	48 6b c0 00	 imul	 rax, rax, 0
  00157	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR context$[rbp]
  0015e	c7 44 01 2c 00
	00 00 00	 mov	 DWORD PTR [rcx+rax+44], 0

; 284  :    context->extra[0].next = &context->extra[1];

  00166	b8 10 00 00 00	 mov	 eax, 16
  0016b	48 6b c0 01	 imul	 rax, rax, 1
  0016f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR context$[rbp]
  00176	48 8d 44 01 28	 lea	 rax, QWORD PTR [rcx+rax+40]
  0017b	b9 10 00 00 00	 mov	 ecx, 16
  00180	48 6b c9 00	 imul	 rcx, rcx, 0
  00184	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR context$[rbp]
  0018b	48 89 44 0a 30	 mov	 QWORD PTR [rdx+rcx+48], rax

; 285  :    context->extra[1].x = (stbrp_coord) width;

  00190	b8 10 00 00 00	 mov	 eax, 16
  00195	48 6b c0 01	 imul	 rax, rax, 1
  00199	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR context$[rbp]
  001a0	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR width$[rbp]
  001a6	89 54 01 28	 mov	 DWORD PTR [rcx+rax+40], edx

; 286  :    context->extra[1].y = (1<<30);

  001aa	b8 10 00 00 00	 mov	 eax, 16
  001af	48 6b c0 01	 imul	 rax, rax, 1
  001b3	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR context$[rbp]
  001ba	c7 44 01 2c 00
	00 00 40	 mov	 DWORD PTR [rcx+rax+44], 1073741824 ; 40000000H

; 287  :    context->extra[1].next = NULL;

  001c2	b8 10 00 00 00	 mov	 eax, 16
  001c7	48 6b c0 01	 imul	 rax, rax, 1
  001cb	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR context$[rbp]
  001d2	48 c7 44 01 30
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+48], 0

; 288  : }

  001db	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  001e2	5f		 pop	 rdi
  001e3	5d		 pop	 rbp
  001e4	c3		 ret	 0
stbrp_init_target ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imstb_rectpack.h
;	COMDAT stbrp_pack_rects
_TEXT	SEGMENT
i$ = 4
all_rects_packed$ = 36
fr$4 = 72
$T5 = 312
$T6 = 360
tv179 = 388
context$ = 432
rects$ = 440
num_rects$ = 448
stbrp_pack_rects PROC					; COMDAT

; 547  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec b0 01
	00 00		 sub	 rsp, 432		; 000001b0H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8b fc	 mov	 rdi, rsp
  00021	b9 6c 00 00 00	 mov	 ecx, 108		; 0000006cH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+472]

; 548  :    int i, all_rects_packed = 1;

  00035	c7 45 24 01 00
	00 00		 mov	 DWORD PTR all_rects_packed$[rbp], 1

; 549  : 
; 550  :    // we use the 'was_packed' field internally to allow sorting/unsorting
; 551  :    for (i=0; i < num_rects; ++i) {

  0003c	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00043	eb 08		 jmp	 SHORT $LN4@stbrp_pack
$LN2@stbrp_pack:
  00045	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  00048	ff c0		 inc	 eax
  0004a	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN4@stbrp_pack:
  0004d	8b 85 c0 01 00
	00		 mov	 eax, DWORD PTR num_rects$[rbp]
  00053	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  00056	7d 18		 jge	 SHORT $LN3@stbrp_pack

; 552  :       rects[i].was_packed = i;

  00058	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  0005c	48 6b c0 18	 imul	 rax, rax, 24
  00060	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR rects$[rbp]
  00067	8b 55 04	 mov	 edx, DWORD PTR i$[rbp]
  0006a	89 54 01 14	 mov	 DWORD PTR [rcx+rax+20], edx

; 553  :    }

  0006e	eb d5		 jmp	 SHORT $LN2@stbrp_pack
$LN3@stbrp_pack:

; 554  : 
; 555  :    // sort according to heuristic
; 556  :    STBRP_SORT(rects, num_rects, sizeof(rects[0]), rect_height_compare);

  00070	48 63 85 c0 01
	00 00		 movsxd	 rax, DWORD PTR num_rects$[rbp]
  00077	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?rect_height_compare@@YAHPEBX0@Z ; rect_height_compare
  0007e	41 b8 18 00 00
	00		 mov	 r8d, 24
  00084	48 8b d0	 mov	 rdx, rax
  00087	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR rects$[rbp]
  0008e	e8 00 00 00 00	 call	 ?ImQsort@@YAXPEAX_K1P6AHPEBX2@Z@Z ; ImQsort

; 557  : 
; 558  :    for (i=0; i < num_rects; ++i) {

  00093	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  0009a	eb 08		 jmp	 SHORT $LN7@stbrp_pack
$LN5@stbrp_pack:
  0009c	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  0009f	ff c0		 inc	 eax
  000a1	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN7@stbrp_pack:
  000a4	8b 85 c0 01 00
	00		 mov	 eax, DWORD PTR num_rects$[rbp]
  000aa	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  000ad	0f 8d 2e 01 00
	00		 jge	 $LN6@stbrp_pack

; 559  :       if (rects[i].w == 0 || rects[i].h == 0) {

  000b3	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  000b7	48 6b c0 18	 imul	 rax, rax, 24
  000bb	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR rects$[rbp]
  000c2	83 7c 01 04 00	 cmp	 DWORD PTR [rcx+rax+4], 0
  000c7	74 16		 je	 SHORT $LN13@stbrp_pack
  000c9	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  000cd	48 6b c0 18	 imul	 rax, rax, 24
  000d1	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR rects$[rbp]
  000d8	83 7c 01 08 00	 cmp	 DWORD PTR [rcx+rax+8], 0
  000dd	75 33		 jne	 SHORT $LN11@stbrp_pack
$LN13@stbrp_pack:

; 560  :          rects[i].x = rects[i].y = 0;  // empty rect needs no space

  000df	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  000e3	48 6b c0 18	 imul	 rax, rax, 24
  000e7	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR rects$[rbp]
  000ee	c7 44 01 10 00
	00 00 00	 mov	 DWORD PTR [rcx+rax+16], 0
  000f6	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  000fa	48 6b c0 18	 imul	 rax, rax, 24
  000fe	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR rects$[rbp]
  00105	c7 44 01 0c 00
	00 00 00	 mov	 DWORD PTR [rcx+rax+12], 0

; 561  :       } else {

  0010d	e9 ca 00 00 00	 jmp	 $LN12@stbrp_pack
$LN11@stbrp_pack:

; 562  :          stbrp__findresult fr = stbrp__skyline_pack_rectangle(context, rects[i].w, rects[i].h);

  00112	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  00116	48 6b c0 18	 imul	 rax, rax, 24
  0011a	48 63 4d 04	 movsxd	 rcx, DWORD PTR i$[rbp]
  0011e	48 6b c9 18	 imul	 rcx, rcx, 24
  00122	48 8b 95 b8 01
	00 00		 mov	 rdx, QWORD PTR rects$[rbp]
  00129	44 8b 4c 02 08	 mov	 r9d, DWORD PTR [rdx+rax+8]
  0012e	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR rects$[rbp]
  00135	44 8b 44 08 04	 mov	 r8d, DWORD PTR [rax+rcx+4]
  0013a	48 8b 95 b0 01
	00 00		 mov	 rdx, QWORD PTR context$[rbp]
  00141	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00148	e8 00 00 00 00	 call	 ?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z ; stbrp__skyline_pack_rectangle
  0014d	48 8d 8d 38 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00154	48 8b f9	 mov	 rdi, rcx
  00157	48 8b f0	 mov	 rsi, rax
  0015a	b9 10 00 00 00	 mov	 ecx, 16
  0015f	f3 a4		 rep movsb
  00161	48 8d 45 48	 lea	 rax, QWORD PTR fr$4[rbp]
  00165	48 8d 8d 38 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  0016c	48 8b f8	 mov	 rdi, rax
  0016f	48 8b f1	 mov	 rsi, rcx
  00172	b9 10 00 00 00	 mov	 ecx, 16
  00177	f3 a4		 rep movsb

; 563  :          if (fr.prev_link) {

  00179	48 83 7d 50 00	 cmp	 QWORD PTR fr$4[rbp+8], 0
  0017e	74 2e		 je	 SHORT $LN14@stbrp_pack

; 564  :             rects[i].x = (stbrp_coord) fr.x;

  00180	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  00184	48 6b c0 18	 imul	 rax, rax, 24
  00188	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR rects$[rbp]
  0018f	8b 55 48	 mov	 edx, DWORD PTR fr$4[rbp]
  00192	89 54 01 0c	 mov	 DWORD PTR [rcx+rax+12], edx

; 565  :             rects[i].y = (stbrp_coord) fr.y;

  00196	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  0019a	48 6b c0 18	 imul	 rax, rax, 24
  0019e	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR rects$[rbp]
  001a5	8b 55 4c	 mov	 edx, DWORD PTR fr$4[rbp+4]
  001a8	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 566  :          } else {

  001ac	eb 2e		 jmp	 SHORT $LN15@stbrp_pack
$LN14@stbrp_pack:

; 567  :             rects[i].x = rects[i].y = STBRP__MAXVAL;

  001ae	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  001b2	48 6b c0 18	 imul	 rax, rax, 24
  001b6	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR rects$[rbp]
  001bd	c7 44 01 10 ff
	ff ff 7f	 mov	 DWORD PTR [rcx+rax+16], 2147483647 ; 7fffffffH
  001c5	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  001c9	48 6b c0 18	 imul	 rax, rax, 24
  001cd	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR rects$[rbp]
  001d4	c7 44 01 0c ff
	ff ff 7f	 mov	 DWORD PTR [rcx+rax+12], 2147483647 ; 7fffffffH
$LN15@stbrp_pack:
$LN12@stbrp_pack:

; 568  :          }
; 569  :       }
; 570  :    }

  001dc	e9 bb fe ff ff	 jmp	 $LN5@stbrp_pack
$LN6@stbrp_pack:

; 571  : 
; 572  :    // unsort
; 573  :    STBRP_SORT(rects, num_rects, sizeof(rects[0]), rect_original_order);

  001e1	48 63 85 c0 01
	00 00		 movsxd	 rax, DWORD PTR num_rects$[rbp]
  001e8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?rect_original_order@@YAHPEBX0@Z ; rect_original_order
  001ef	41 b8 18 00 00
	00		 mov	 r8d, 24
  001f5	48 8b d0	 mov	 rdx, rax
  001f8	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR rects$[rbp]
  001ff	e8 00 00 00 00	 call	 ?ImQsort@@YAXPEAX_K1P6AHPEBX2@Z@Z ; ImQsort

; 574  : 
; 575  :    // set was_packed flags and all_rects_packed status
; 576  :    for (i=0; i < num_rects; ++i) {

  00204	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  0020b	eb 08		 jmp	 SHORT $LN10@stbrp_pack
$LN8@stbrp_pack:
  0020d	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  00210	ff c0		 inc	 eax
  00212	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN10@stbrp_pack:
  00215	8b 85 c0 01 00
	00		 mov	 eax, DWORD PTR num_rects$[rbp]
  0021b	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  0021e	0f 8d 83 00 00
	00		 jge	 $LN9@stbrp_pack

; 577  :       rects[i].was_packed = !(rects[i].x == STBRP__MAXVAL && rects[i].y == STBRP__MAXVAL);

  00224	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  00228	48 6b c0 18	 imul	 rax, rax, 24
  0022c	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR rects$[rbp]
  00233	81 7c 01 0c ff
	ff ff 7f	 cmp	 DWORD PTR [rcx+rax+12], 2147483647 ; 7fffffffH
  0023b	75 25		 jne	 SHORT $LN18@stbrp_pack
  0023d	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  00241	48 6b c0 18	 imul	 rax, rax, 24
  00245	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR rects$[rbp]
  0024c	81 7c 01 10 ff
	ff ff 7f	 cmp	 DWORD PTR [rcx+rax+16], 2147483647 ; 7fffffffH
  00254	75 0c		 jne	 SHORT $LN18@stbrp_pack
  00256	c7 85 84 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv179[rbp], 0
  00260	eb 0a		 jmp	 SHORT $LN19@stbrp_pack
$LN18@stbrp_pack:
  00262	c7 85 84 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv179[rbp], 1
$LN19@stbrp_pack:
  0026c	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  00270	48 6b c0 18	 imul	 rax, rax, 24
  00274	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR rects$[rbp]
  0027b	8b 95 84 01 00
	00		 mov	 edx, DWORD PTR tv179[rbp]
  00281	89 54 01 14	 mov	 DWORD PTR [rcx+rax+20], edx

; 578  :       if (!rects[i].was_packed)

  00285	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  00289	48 6b c0 18	 imul	 rax, rax, 24
  0028d	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR rects$[rbp]
  00294	83 7c 01 14 00	 cmp	 DWORD PTR [rcx+rax+20], 0
  00299	75 07		 jne	 SHORT $LN16@stbrp_pack

; 579  :          all_rects_packed = 0;

  0029b	c7 45 24 00 00
	00 00		 mov	 DWORD PTR all_rects_packed$[rbp], 0
$LN16@stbrp_pack:

; 580  :    }

  002a2	e9 66 ff ff ff	 jmp	 $LN8@stbrp_pack
$LN9@stbrp_pack:

; 581  : 
; 582  :    // return the all_rects_packed status
; 583  :    return all_rects_packed;

  002a7	8b 45 24	 mov	 eax, DWORD PTR all_rects_packed$[rbp]

; 584  : }

  002aa	8b f8		 mov	 edi, eax
  002ac	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  002b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:stbrp_pack_rects$rtcFrameData
  002b7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002bc	8b c7		 mov	 eax, edi
  002be	48 8d a5 90 01
	00 00		 lea	 rsp, QWORD PTR [rbp+400]
  002c5	5f		 pop	 rdi
  002c6	5e		 pop	 rsi
  002c7	5d		 pop	 rbp
  002c8	c3		 ret	 0
stbrp_pack_rects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ImFontAtlasBuildMultiplyRectAlpha8@@YAXQEBEPEAEHHHHH@Z
_TEXT	SEGMENT
data$ = 8
j$1 = 36
i$2 = 68
table$ = 320
pixels$ = 328
x$ = 336
y$ = 344
w$ = 352
h$ = 360
stride$ = 368
?ImFontAtlasBuildMultiplyRectAlpha8@@YAXQEBEPEAEHHHHH@Z PROC ; ImFontAtlasBuildMultiplyRectAlpha8, COMDAT

; 2291 : {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001d	48 8b ec	 mov	 rbp, rsp
  00020	48 8b fc	 mov	 rdi, rsp
  00023	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 2292 :     IM_ASSERT_PARANOID(w <= stride);
; 2293 :     unsigned char* data = pixels + x + y * stride;

  00037	48 63 85 50 01
	00 00		 movsxd	 rax, DWORD PTR x$[rbp]
  0003e	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR pixels$[rbp]
  00045	48 03 c8	 add	 rcx, rax
  00048	48 8b c1	 mov	 rax, rcx
  0004b	8b 8d 58 01 00
	00		 mov	 ecx, DWORD PTR y$[rbp]
  00051	0f af 8d 70 01
	00 00		 imul	 ecx, DWORD PTR stride$[rbp]
  00058	48 63 c9	 movsxd	 rcx, ecx
  0005b	48 03 c1	 add	 rax, rcx
  0005e	48 89 45 08	 mov	 QWORD PTR data$[rbp], rax

; 2294 :     for (int j = h; j > 0; j--, data += stride - w)

  00062	8b 85 68 01 00
	00		 mov	 eax, DWORD PTR h$[rbp]
  00068	89 45 24	 mov	 DWORD PTR j$1[rbp], eax
  0006b	eb 28		 jmp	 SHORT $LN4@ImFontAtla
$LN2@ImFontAtla:
  0006d	8b 45 24	 mov	 eax, DWORD PTR j$1[rbp]
  00070	ff c8		 dec	 eax
  00072	89 45 24	 mov	 DWORD PTR j$1[rbp], eax
  00075	8b 85 60 01 00
	00		 mov	 eax, DWORD PTR w$[rbp]
  0007b	8b 8d 70 01 00
	00		 mov	 ecx, DWORD PTR stride$[rbp]
  00081	2b c8		 sub	 ecx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	48 98		 cdqe
  00087	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  0008b	48 03 c8	 add	 rcx, rax
  0008e	48 8b c1	 mov	 rax, rcx
  00091	48 89 45 08	 mov	 QWORD PTR data$[rbp], rax
$LN4@ImFontAtla:
  00095	83 7d 24 00	 cmp	 DWORD PTR j$1[rbp], 0
  00099	7e 40		 jle	 SHORT $LN3@ImFontAtla

; 2295 :         for (int i = w; i > 0; i--, data++)

  0009b	8b 85 60 01 00
	00		 mov	 eax, DWORD PTR w$[rbp]
  000a1	89 45 44	 mov	 DWORD PTR i$2[rbp], eax
  000a4	eb 13		 jmp	 SHORT $LN7@ImFontAtla
$LN5@ImFontAtla:
  000a6	8b 45 44	 mov	 eax, DWORD PTR i$2[rbp]
  000a9	ff c8		 dec	 eax
  000ab	89 45 44	 mov	 DWORD PTR i$2[rbp], eax
  000ae	48 8b 45 08	 mov	 rax, QWORD PTR data$[rbp]
  000b2	48 ff c0	 inc	 rax
  000b5	48 89 45 08	 mov	 QWORD PTR data$[rbp], rax
$LN7@ImFontAtla:
  000b9	83 7d 44 00	 cmp	 DWORD PTR i$2[rbp], 0
  000bd	7e 1a		 jle	 SHORT $LN6@ImFontAtla

; 2296 :             *data = table[*data];

  000bf	48 8b 45 08	 mov	 rax, QWORD PTR data$[rbp]
  000c3	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000c6	48 8b 4d 08	 mov	 rcx, QWORD PTR data$[rbp]
  000ca	48 8b 95 40 01
	00 00		 mov	 rdx, QWORD PTR table$[rbp]
  000d1	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  000d5	88 01		 mov	 BYTE PTR [rcx], al
  000d7	eb cd		 jmp	 SHORT $LN5@ImFontAtla
$LN6@ImFontAtla:
  000d9	eb 92		 jmp	 SHORT $LN2@ImFontAtla
$LN3@ImFontAtla:

; 2297 : }

  000db	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000e2	5f		 pop	 rdi
  000e3	5d		 pop	 rbp
  000e4	c3		 ret	 0
?ImFontAtlasBuildMultiplyRectAlpha8@@YAXQEBEPEAEHHHHH@Z ENDP ; ImFontAtlasBuildMultiplyRectAlpha8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ImFontAtlasBuildMultiplyCalcLookupTable@@YAXQEAEM@Z
_TEXT	SEGMENT
i$1 = 4
value$2 = 36
tv75 = 244
out_table$ = 288
in_brighten_factor$ = 296
?ImFontAtlasBuildMultiplyCalcLookupTable@@YAXQEAEM@Z PROC ; ImFontAtlasBuildMultiplyCalcLookupTable, COMDAT

; 2282 : {

$LN8:
  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000b	55		 push	 rbp
  0000c	57		 push	 rdi
  0000d	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00014	48 8b ec	 mov	 rbp, rsp
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 2283 :     for (unsigned int i = 0; i < 256; i++)

  0002e	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$1[rbp], 0
  00035	eb 08		 jmp	 SHORT $LN4@ImFontAtla
$LN2@ImFontAtla:
  00037	8b 45 04	 mov	 eax, DWORD PTR i$1[rbp]
  0003a	ff c0		 inc	 eax
  0003c	89 45 04	 mov	 DWORD PTR i$1[rbp], eax
$LN4@ImFontAtla:
  0003f	81 7d 04 00 01
	00 00		 cmp	 DWORD PTR i$1[rbp], 256	; 00000100H
  00046	73 51		 jae	 SHORT $LN3@ImFontAtla

; 2284 :     {
; 2285 :         unsigned int value = (unsigned int)(i * in_brighten_factor);

  00048	8b 45 04	 mov	 eax, DWORD PTR i$1[rbp]
  0004b	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  00050	f3 0f 59 85 28
	01 00 00	 mulss	 xmm0, DWORD PTR in_brighten_factor$[rbp]
  00058	f3 48 0f 2c c0	 cvttss2si rax, xmm0
  0005d	89 45 24	 mov	 DWORD PTR value$2[rbp], eax

; 2286 :         out_table[i] = value > 255 ? 255 : (value & 0xFF);

  00060	81 7d 24 ff 00
	00 00		 cmp	 DWORD PTR value$2[rbp], 255 ; 000000ffH
  00067	76 0c		 jbe	 SHORT $LN6@ImFontAtla
  00069	c7 85 f4 00 00
	00 ff 00 00 00	 mov	 DWORD PTR tv75[rbp], 255 ; 000000ffH
  00073	eb 0e		 jmp	 SHORT $LN7@ImFontAtla
$LN6@ImFontAtla:
  00075	8b 45 24	 mov	 eax, DWORD PTR value$2[rbp]
  00078	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0007d	89 85 f4 00 00
	00		 mov	 DWORD PTR tv75[rbp], eax
$LN7@ImFontAtla:
  00083	8b 45 04	 mov	 eax, DWORD PTR i$1[rbp]
  00086	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR out_table$[rbp]
  0008d	0f b6 95 f4 00
	00 00		 movzx	 edx, BYTE PTR tv75[rbp]
  00094	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 2287 :     }

  00097	eb 9e		 jmp	 SHORT $LN2@ImFontAtla
$LN3@ImFontAtla:

; 2288 : }

  00099	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000a0	5f		 pop	 rdi
  000a1	5d		 pop	 rbp
  000a2	c3		 ret	 0
?ImFontAtlasBuildMultiplyCalcLookupTable@@YAXQEAEM@Z ENDP ; ImFontAtlasBuildMultiplyCalcLookupTable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z
_TEXT	SEGMENT
out_pixel$ = 8
off_y$1 = 36
off_x$2 = 68
tv142 = 276
atlas$ = 320
x$ = 328
y$ = 336
w$ = 344
h$ = 352
in_str$ = 360
in_marker_char$ = 368
in_marker_pixel_value$ = 376
?ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z PROC ; ImFontAtlasBuildRender32bppRectFromString, COMDAT

; 2651 : {

$LN15:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]

; 2652 :     IM_ASSERT(x >= 0 && x + w <= atlas->TexWidth);

  00038	83 bd 48 01 00
	00 00		 cmp	 DWORD PTR x$[rbp], 0
  0003f	7c 1c		 jl	 SHORT $LN9@ImFontAtla
  00041	8b 85 58 01 00
	00		 mov	 eax, DWORD PTR w$[rbp]
  00047	8b 8d 48 01 00
	00		 mov	 ecx, DWORD PTR x$[rbp]
  0004d	03 c8		 add	 ecx, eax
  0004f	8b c1		 mov	 eax, ecx
  00051	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  00058	3b 41 40	 cmp	 eax, DWORD PTR [rcx+64]
  0005b	7e 21		 jle	 SHORT $LN10@ImFontAtla
$LN9@ImFontAtla:
  0005d	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z@4JA
  00063	ff c0		 inc	 eax
  00065	44 8b c0	 mov	 r8d, eax
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@KOLNNAOF@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$CL?$AA?5?$AAw?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAW?$AAi?$AAd@
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007c	33 c0		 xor	 eax, eax
$LN10@ImFontAtla:

; 2653 :     IM_ASSERT(y >= 0 && y + h <= atlas->TexHeight);

  0007e	83 bd 50 01 00
	00 00		 cmp	 DWORD PTR y$[rbp], 0
  00085	7c 1c		 jl	 SHORT $LN11@ImFontAtla
  00087	8b 85 60 01 00
	00		 mov	 eax, DWORD PTR h$[rbp]
  0008d	8b 8d 50 01 00
	00		 mov	 ecx, DWORD PTR y$[rbp]
  00093	03 c8		 add	 ecx, eax
  00095	8b c1		 mov	 eax, ecx
  00097	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  0009e	3b 41 44	 cmp	 eax, DWORD PTR [rcx+68]
  000a1	7e 22		 jle	 SHORT $LN12@ImFontAtla
$LN11@ImFontAtla:
  000a3	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z@4JA
  000a9	83 c0 02	 add	 eax, 2
  000ac	44 8b c0	 mov	 r8d, eax
  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@CHFOHLGN@?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy?$AA?5?$AA?$CL?$AA?5?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAH?$AAe?$AAi@
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c3	33 c0		 xor	 eax, eax
$LN12@ImFontAtla:

; 2654 :     unsigned int* out_pixel = atlas->TexPixelsRGBA32 + x + (y * atlas->TexWidth);

  000c5	48 63 85 48 01
	00 00		 movsxd	 rax, DWORD PTR x$[rbp]
  000cc	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  000d3	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  000d7	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  000db	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  000e2	8b 95 50 01 00
	00		 mov	 edx, DWORD PTR y$[rbp]
  000e8	0f af 51 40	 imul	 edx, DWORD PTR [rcx+64]
  000ec	8b ca		 mov	 ecx, edx
  000ee	48 63 c9	 movsxd	 rcx, ecx
  000f1	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  000f5	48 89 45 08	 mov	 QWORD PTR out_pixel$[rbp], rax

; 2655 :     for (int off_y = 0; off_y < h; off_y++, out_pixel += atlas->TexWidth, in_str += w)

  000f9	c7 45 24 00 00
	00 00		 mov	 DWORD PTR off_y$1[rbp], 0
  00100	eb 3a		 jmp	 SHORT $LN4@ImFontAtla
$LN2@ImFontAtla:
  00102	8b 45 24	 mov	 eax, DWORD PTR off_y$1[rbp]
  00105	ff c0		 inc	 eax
  00107	89 45 24	 mov	 DWORD PTR off_y$1[rbp], eax
  0010a	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00111	48 63 40 40	 movsxd	 rax, DWORD PTR [rax+64]
  00115	48 8b 4d 08	 mov	 rcx, QWORD PTR out_pixel$[rbp]
  00119	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0011d	48 89 45 08	 mov	 QWORD PTR out_pixel$[rbp], rax
  00121	48 63 85 58 01
	00 00		 movsxd	 rax, DWORD PTR w$[rbp]
  00128	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR in_str$[rbp]
  0012f	48 03 c8	 add	 rcx, rax
  00132	48 8b c1	 mov	 rax, rcx
  00135	48 89 85 68 01
	00 00		 mov	 QWORD PTR in_str$[rbp], rax
$LN4@ImFontAtla:
  0013c	8b 85 60 01 00
	00		 mov	 eax, DWORD PTR h$[rbp]
  00142	39 45 24	 cmp	 DWORD PTR off_y$1[rbp], eax
  00145	7d 66		 jge	 SHORT $LN3@ImFontAtla

; 2656 :         for (int off_x = 0; off_x < w; off_x++)

  00147	c7 45 44 00 00
	00 00		 mov	 DWORD PTR off_x$2[rbp], 0
  0014e	eb 08		 jmp	 SHORT $LN7@ImFontAtla
$LN5@ImFontAtla:
  00150	8b 45 44	 mov	 eax, DWORD PTR off_x$2[rbp]
  00153	ff c0		 inc	 eax
  00155	89 45 44	 mov	 DWORD PTR off_x$2[rbp], eax
$LN7@ImFontAtla:
  00158	8b 85 58 01 00
	00		 mov	 eax, DWORD PTR w$[rbp]
  0015e	39 45 44	 cmp	 DWORD PTR off_x$2[rbp], eax
  00161	7d 45		 jge	 SHORT $LN6@ImFontAtla

; 2657 :             out_pixel[off_x] = (in_str[off_x] == in_marker_char) ? in_marker_pixel_value : IM_COL32_BLACK_TRANS;

  00163	48 63 45 44	 movsxd	 rax, DWORD PTR off_x$2[rbp]
  00167	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR in_str$[rbp]
  0016e	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00172	0f be 8d 70 01
	00 00		 movsx	 ecx, BYTE PTR in_marker_char$[rbp]
  00179	3b c1		 cmp	 eax, ecx
  0017b	75 0e		 jne	 SHORT $LN13@ImFontAtla
  0017d	8b 85 78 01 00
	00		 mov	 eax, DWORD PTR in_marker_pixel_value$[rbp]
  00183	89 85 14 01 00
	00		 mov	 DWORD PTR tv142[rbp], eax
  00189	eb 0a		 jmp	 SHORT $LN14@ImFontAtla
$LN13@ImFontAtla:
  0018b	c7 85 14 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv142[rbp], 0
$LN14@ImFontAtla:
  00195	48 63 45 44	 movsxd	 rax, DWORD PTR off_x$2[rbp]
  00199	48 8b 4d 08	 mov	 rcx, QWORD PTR out_pixel$[rbp]
  0019d	8b 95 14 01 00
	00		 mov	 edx, DWORD PTR tv142[rbp]
  001a3	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx
  001a6	eb a8		 jmp	 SHORT $LN5@ImFontAtla
$LN6@ImFontAtla:
  001a8	e9 55 ff ff ff	 jmp	 $LN2@ImFontAtla
$LN3@ImFontAtla:

; 2658 : }

  001ad	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  001b4	5f		 pop	 rdi
  001b5	5d		 pop	 rbp
  001b6	c3		 ret	 0
?ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z ENDP ; ImFontAtlasBuildRender32bppRectFromString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z
_TEXT	SEGMENT
out_pixel$ = 8
off_y$1 = 36
off_x$2 = 68
tv140 = 276
atlas$ = 320
x$ = 328
y$ = 336
w$ = 344
h$ = 352
in_str$ = 360
in_marker_char$ = 368
in_marker_pixel_value$ = 376
?ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z PROC ; ImFontAtlasBuildRender8bppRectFromString, COMDAT

; 2641 : {

$LN15:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]

; 2642 :     IM_ASSERT(x >= 0 && x + w <= atlas->TexWidth);

  00038	83 bd 48 01 00
	00 00		 cmp	 DWORD PTR x$[rbp], 0
  0003f	7c 1c		 jl	 SHORT $LN9@ImFontAtla
  00041	8b 85 58 01 00
	00		 mov	 eax, DWORD PTR w$[rbp]
  00047	8b 8d 48 01 00
	00		 mov	 ecx, DWORD PTR x$[rbp]
  0004d	03 c8		 add	 ecx, eax
  0004f	8b c1		 mov	 eax, ecx
  00051	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  00058	3b 41 40	 cmp	 eax, DWORD PTR [rcx+64]
  0005b	7e 21		 jle	 SHORT $LN10@ImFontAtla
$LN9@ImFontAtla:
  0005d	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z@4JA
  00063	ff c0		 inc	 eax
  00065	44 8b c0	 mov	 r8d, eax
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@KOLNNAOF@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$CL?$AA?5?$AAw?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAW?$AAi?$AAd@
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007c	33 c0		 xor	 eax, eax
$LN10@ImFontAtla:

; 2643 :     IM_ASSERT(y >= 0 && y + h <= atlas->TexHeight);

  0007e	83 bd 50 01 00
	00 00		 cmp	 DWORD PTR y$[rbp], 0
  00085	7c 1c		 jl	 SHORT $LN11@ImFontAtla
  00087	8b 85 60 01 00
	00		 mov	 eax, DWORD PTR h$[rbp]
  0008d	8b 8d 50 01 00
	00		 mov	 ecx, DWORD PTR y$[rbp]
  00093	03 c8		 add	 ecx, eax
  00095	8b c1		 mov	 eax, ecx
  00097	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  0009e	3b 41 44	 cmp	 eax, DWORD PTR [rcx+68]
  000a1	7e 22		 jle	 SHORT $LN12@ImFontAtla
$LN11@ImFontAtla:
  000a3	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z@4JA
  000a9	83 c0 02	 add	 eax, 2
  000ac	44 8b c0	 mov	 r8d, eax
  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@CHFOHLGN@?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy?$AA?5?$AA?$CL?$AA?5?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAH?$AAe?$AAi@
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c3	33 c0		 xor	 eax, eax
$LN12@ImFontAtla:

; 2644 :     unsigned char* out_pixel = atlas->TexPixelsAlpha8 + x + (y * atlas->TexWidth);

  000c5	48 63 85 48 01
	00 00		 movsxd	 rax, DWORD PTR x$[rbp]
  000cc	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  000d3	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  000d7	48 03 c8	 add	 rcx, rax
  000da	48 8b c1	 mov	 rax, rcx
  000dd	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  000e4	8b 95 50 01 00
	00		 mov	 edx, DWORD PTR y$[rbp]
  000ea	0f af 51 40	 imul	 edx, DWORD PTR [rcx+64]
  000ee	8b ca		 mov	 ecx, edx
  000f0	48 63 c9	 movsxd	 rcx, ecx
  000f3	48 03 c1	 add	 rax, rcx
  000f6	48 89 45 08	 mov	 QWORD PTR out_pixel$[rbp], rax

; 2645 :     for (int off_y = 0; off_y < h; off_y++, out_pixel += atlas->TexWidth, in_str += w)

  000fa	c7 45 24 00 00
	00 00		 mov	 DWORD PTR off_y$1[rbp], 0
  00101	eb 3c		 jmp	 SHORT $LN4@ImFontAtla
$LN2@ImFontAtla:
  00103	8b 45 24	 mov	 eax, DWORD PTR off_y$1[rbp]
  00106	ff c0		 inc	 eax
  00108	89 45 24	 mov	 DWORD PTR off_y$1[rbp], eax
  0010b	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00112	48 63 40 40	 movsxd	 rax, DWORD PTR [rax+64]
  00116	48 8b 4d 08	 mov	 rcx, QWORD PTR out_pixel$[rbp]
  0011a	48 03 c8	 add	 rcx, rax
  0011d	48 8b c1	 mov	 rax, rcx
  00120	48 89 45 08	 mov	 QWORD PTR out_pixel$[rbp], rax
  00124	48 63 85 58 01
	00 00		 movsxd	 rax, DWORD PTR w$[rbp]
  0012b	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR in_str$[rbp]
  00132	48 03 c8	 add	 rcx, rax
  00135	48 8b c1	 mov	 rax, rcx
  00138	48 89 85 68 01
	00 00		 mov	 QWORD PTR in_str$[rbp], rax
$LN4@ImFontAtla:
  0013f	8b 85 60 01 00
	00		 mov	 eax, DWORD PTR h$[rbp]
  00145	39 45 24	 cmp	 DWORD PTR off_y$1[rbp], eax
  00148	7d 68		 jge	 SHORT $LN3@ImFontAtla

; 2646 :         for (int off_x = 0; off_x < w; off_x++)

  0014a	c7 45 44 00 00
	00 00		 mov	 DWORD PTR off_x$2[rbp], 0
  00151	eb 08		 jmp	 SHORT $LN7@ImFontAtla
$LN5@ImFontAtla:
  00153	8b 45 44	 mov	 eax, DWORD PTR off_x$2[rbp]
  00156	ff c0		 inc	 eax
  00158	89 45 44	 mov	 DWORD PTR off_x$2[rbp], eax
$LN7@ImFontAtla:
  0015b	8b 85 58 01 00
	00		 mov	 eax, DWORD PTR w$[rbp]
  00161	39 45 44	 cmp	 DWORD PTR off_x$2[rbp], eax
  00164	7d 47		 jge	 SHORT $LN6@ImFontAtla

; 2647 :             out_pixel[off_x] = (in_str[off_x] == in_marker_char) ? in_marker_pixel_value : 0x00;

  00166	48 63 45 44	 movsxd	 rax, DWORD PTR off_x$2[rbp]
  0016a	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR in_str$[rbp]
  00171	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00175	0f be 8d 70 01
	00 00		 movsx	 ecx, BYTE PTR in_marker_char$[rbp]
  0017c	3b c1		 cmp	 eax, ecx
  0017e	75 0f		 jne	 SHORT $LN13@ImFontAtla
  00180	0f b6 85 78 01
	00 00		 movzx	 eax, BYTE PTR in_marker_pixel_value$[rbp]
  00187	89 85 14 01 00
	00		 mov	 DWORD PTR tv140[rbp], eax
  0018d	eb 0a		 jmp	 SHORT $LN14@ImFontAtla
$LN13@ImFontAtla:
  0018f	c7 85 14 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv140[rbp], 0
$LN14@ImFontAtla:
  00199	48 63 45 44	 movsxd	 rax, DWORD PTR off_x$2[rbp]
  0019d	48 8b 4d 08	 mov	 rcx, QWORD PTR out_pixel$[rbp]
  001a1	0f b6 95 14 01
	00 00		 movzx	 edx, BYTE PTR tv140[rbp]
  001a8	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  001ab	eb a6		 jmp	 SHORT $LN5@ImFontAtla
$LN6@ImFontAtla:
  001ad	e9 51 ff ff ff	 jmp	 $LN2@ImFontAtla
$LN3@ImFontAtla:

; 2648 : }

  001b2	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  001b9	5f		 pop	 rdi
  001ba	5d		 pop	 rbp
  001bb	c3		 ret	 0
?ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z ENDP ; ImFontAtlasBuildRender8bppRectFromString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z
_TEXT	SEGMENT
i$5 = 4
r$6 = 40
uv0$7 = 72
uv1$8 = 104
i$9 = 132
__$ArrayPad$ = 344
atlas$ = 384
?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z PROC	; ImFontAtlasBuildFinish, COMDAT

; 2774 : {

$LN14:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0000e	48 8d 6c 24 60	 lea	 rbp, QWORD PTR [rsp+96]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+488]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 58 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2775 :     // Render into our custom data blocks
; 2776 :     IM_ASSERT(atlas->TexPixelsAlpha8 != NULL || atlas->TexPixelsRGBA32 != NULL);

  0003b	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00042	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  00047	75 30		 jne	 SHORT $LN12@ImFontAtla
  00049	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00050	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00055	75 22		 jne	 SHORT $LN12@ImFontAtla
  00057	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z@4JA
  0005d	83 c0 02	 add	 eax, 2
  00060	44 8b c0	 mov	 r8d, eax
  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HG@JLCPLJIF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAP?$AAi?$AAx?$AAe?$AAl?$AAs?$AAA?$AAl?$AAp?$AAh?$AAa?$AA8?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAa@
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00077	33 c0		 xor	 eax, eax
$LN12@ImFontAtla:

; 2777 :     ImFontAtlasBuildRenderDefaultTexData(atlas);

  00079	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  00080	e8 00 00 00 00	 call	 ?ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z ; ImFontAtlasBuildRenderDefaultTexData

; 2778 :     ImFontAtlasBuildRenderLinesTexData(atlas);

  00085	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  0008c	e8 00 00 00 00	 call	 ?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z ; ImFontAtlasBuildRenderLinesTexData

; 2779 : 
; 2780 :     // Register custom rectangle glyphs
; 2781 :     for (int i = 0; i < atlas->CustomRects.Size; i++)

  00091	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$5[rbp], 0
  00098	eb 08		 jmp	 SHORT $LN4@ImFontAtla
$LN2@ImFontAtla:
  0009a	8b 45 04	 mov	 eax, DWORD PTR i$5[rbp]
  0009d	ff c0		 inc	 eax
  0009f	89 45 04	 mov	 DWORD PTR i$5[rbp], eax
$LN4@ImFontAtla:
  000a2	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  000a9	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  000ac	39 45 04	 cmp	 DWORD PTR i$5[rbp], eax
  000af	0f 8d 45 01 00
	00		 jge	 $LN3@ImFontAtla

; 2782 :     {
; 2783 :         const ImFontAtlasCustomRect* r = &atlas->CustomRects[i];

  000b5	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  000bc	48 83 c0 68	 add	 rax, 104		; 00000068H
  000c0	8b 55 04	 mov	 edx, DWORD PTR i$5[rbp]
  000c3	48 8b c8	 mov	 rcx, rax
  000c6	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ; ImVector<ImFontAtlasCustomRect>::operator[]
  000cb	48 89 45 28	 mov	 QWORD PTR r$6[rbp], rax

; 2784 :         if (r->Font == NULL || r->GlyphID == 0)

  000cf	48 8b 45 28	 mov	 rax, QWORD PTR r$6[rbp]
  000d3	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  000d8	74 0a		 je	 SHORT $LN9@ImFontAtla
  000da	48 8b 45 28	 mov	 rax, QWORD PTR r$6[rbp]
  000de	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  000e2	75 02		 jne	 SHORT $LN8@ImFontAtla
$LN9@ImFontAtla:

; 2785 :             continue;

  000e4	eb b4		 jmp	 SHORT $LN2@ImFontAtla
$LN8@ImFontAtla:

; 2786 : 
; 2787 :         // Will ignore ImFontConfig settings: GlyphMinAdvanceX, GlyphMinAdvanceY, GlyphExtraSpacing, PixelSnapH
; 2788 :         IM_ASSERT(r->Font->ContainerAtlas == atlas);

  000e6	48 8b 45 28	 mov	 rax, QWORD PTR r$6[rbp]
  000ea	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  000ee	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  000f5	48 39 48 40	 cmp	 QWORD PTR [rax+64], rcx
  000f9	74 22		 je	 SHORT $LN13@ImFontAtla
  000fb	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z@4JA
  00101	83 c0 0e	 add	 eax, 14
  00104	44 8b c0	 mov	 r8d, eax
  00107	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0010e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@BJJINGAO@?$AAr?$AA?9?$AA?$DO?$AAF?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AAA?$AAt?$AAl?$AAa?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAa?$AAt?$AAl?$AAa?$AAs@
  00115	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0011b	33 c0		 xor	 eax, eax
$LN13@ImFontAtla:

; 2789 :         ImVec2 uv0, uv1;

  0011d	48 8d 4d 48	 lea	 rcx, QWORD PTR uv0$7[rbp]
  00121	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@XZ	; ImVec2::ImVec2
  00126	48 8d 4d 68	 lea	 rcx, QWORD PTR uv1$8[rbp]
  0012a	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@XZ	; ImVec2::ImVec2

; 2790 :         atlas->CalcCustomRectUV(r, &uv0, &uv1);

  0012f	4c 8d 4d 68	 lea	 r9, QWORD PTR uv1$8[rbp]
  00133	4c 8d 45 48	 lea	 r8, QWORD PTR uv0$7[rbp]
  00137	48 8b 55 28	 mov	 rdx, QWORD PTR r$6[rbp]
  0013b	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  00142	e8 00 00 00 00	 call	 ?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z ; ImFontAtlas::CalcCustomRectUV

; 2791 :         r->Font->AddGlyph(NULL, (ImWchar)r->GlyphID, r->GlyphOffset.x, r->GlyphOffset.y, r->GlyphOffset.x + r->Width, r->GlyphOffset.y + r->Height, uv0.x, uv0.y, uv1.x, uv1.y, r->GlyphAdvanceX);

  00147	48 8b 45 28	 mov	 rax, QWORD PTR r$6[rbp]
  0014b	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  0014f	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00153	48 8b 45 28	 mov	 rax, QWORD PTR r$6[rbp]
  00157	f3 0f 10 48 14	 movss	 xmm1, DWORD PTR [rax+20]
  0015c	f3 0f 58 c8	 addss	 xmm1, xmm0
  00160	0f 28 c1	 movaps	 xmm0, xmm1
  00163	48 8b 45 28	 mov	 rax, QWORD PTR r$6[rbp]
  00167	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0016a	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  0016e	48 8b 45 28	 mov	 rax, QWORD PTR r$6[rbp]
  00172	f3 0f 10 50 10	 movss	 xmm2, DWORD PTR [rax+16]
  00177	f3 0f 58 d1	 addss	 xmm2, xmm1
  0017b	0f 28 ca	 movaps	 xmm1, xmm2
  0017e	48 8b 45 28	 mov	 rax, QWORD PTR r$6[rbp]
  00182	f3 0f 10 50 0c	 movss	 xmm2, DWORD PTR [rax+12]
  00187	f3 0f 11 54 24
	58		 movss	 DWORD PTR [rsp+88], xmm2
  0018d	f3 0f 10 55 6c	 movss	 xmm2, DWORD PTR uv1$8[rbp+4]
  00192	f3 0f 11 54 24
	50		 movss	 DWORD PTR [rsp+80], xmm2
  00198	f3 0f 10 55 68	 movss	 xmm2, DWORD PTR uv1$8[rbp]
  0019d	f3 0f 11 54 24
	48		 movss	 DWORD PTR [rsp+72], xmm2
  001a3	f3 0f 10 55 4c	 movss	 xmm2, DWORD PTR uv0$7[rbp+4]
  001a8	f3 0f 11 54 24
	40		 movss	 DWORD PTR [rsp+64], xmm2
  001ae	f3 0f 10 55 48	 movss	 xmm2, DWORD PTR uv0$7[rbp]
  001b3	f3 0f 11 54 24
	38		 movss	 DWORD PTR [rsp+56], xmm2
  001b9	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  001bf	f3 0f 11 4c 24
	28		 movss	 DWORD PTR [rsp+40], xmm1
  001c5	48 8b 45 28	 mov	 rax, QWORD PTR r$6[rbp]
  001c9	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  001ce	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  001d4	48 8b 45 28	 mov	 rax, QWORD PTR r$6[rbp]
  001d8	f3 0f 10 58 10	 movss	 xmm3, DWORD PTR [rax+16]
  001dd	48 8b 45 28	 mov	 rax, QWORD PTR r$6[rbp]
  001e1	44 0f b7 40 08	 movzx	 r8d, WORD PTR [rax+8]
  001e6	33 d2		 xor	 edx, edx
  001e8	48 8b 45 28	 mov	 rax, QWORD PTR r$6[rbp]
  001ec	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  001f0	e8 00 00 00 00	 call	 ?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z ; ImFont::AddGlyph

; 2792 :     }

  001f5	e9 a0 fe ff ff	 jmp	 $LN2@ImFontAtla
$LN3@ImFontAtla:

; 2793 : 
; 2794 :     // Build all fonts lookup tables
; 2795 :     for (int i = 0; i < atlas->Fonts.Size; i++)

  001fa	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR i$9[rbp], 0
  00204	eb 0e		 jmp	 SHORT $LN7@ImFontAtla
$LN5@ImFontAtla:
  00206	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR i$9[rbp]
  0020c	ff c0		 inc	 eax
  0020e	89 85 84 00 00
	00		 mov	 DWORD PTR i$9[rbp], eax
$LN7@ImFontAtla:
  00214	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  0021b	8b 40 58	 mov	 eax, DWORD PTR [rax+88]
  0021e	39 85 84 00 00
	00		 cmp	 DWORD PTR i$9[rbp], eax
  00224	7d 47		 jge	 SHORT $LN6@ImFontAtla

; 2796 :         if (atlas->Fonts[i]->DirtyLookupTables)

  00226	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  0022d	48 83 c0 58	 add	 rax, 88			; 00000058H
  00231	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR i$9[rbp]
  00237	48 8b c8	 mov	 rcx, rax
  0023a	e8 00 00 00 00	 call	 ??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ; ImVector<ImFont * __ptr64>::operator[]
  0023f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00242	0f b6 40 60	 movzx	 eax, BYTE PTR [rax+96]
  00246	85 c0		 test	 eax, eax
  00248	74 21		 je	 SHORT $LN10@ImFontAtla

; 2797 :             atlas->Fonts[i]->BuildLookupTable();

  0024a	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00251	48 83 c0 58	 add	 rax, 88			; 00000058H
  00255	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR i$9[rbp]
  0025b	48 8b c8	 mov	 rcx, rax
  0025e	e8 00 00 00 00	 call	 ??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ; ImVector<ImFont * __ptr64>::operator[]
  00263	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00266	e8 00 00 00 00	 call	 ?BuildLookupTable@ImFont@@QEAAXXZ ; ImFont::BuildLookupTable
$LN10@ImFontAtla:

; 2798 : 
; 2799 :     atlas->TexReady = true;

  0026b	eb 99		 jmp	 SHORT $LN5@ImFontAtla
$LN6@ImFontAtla:
  0026d	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00274	c6 40 28 01	 mov	 BYTE PTR [rax+40], 1

; 2800 : }

  00278	48 8d 4d a0	 lea	 rcx, QWORD PTR [rbp-96]
  0027c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z$rtcFrameData
  00283	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00288	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0028f	48 33 cd	 xor	 rcx, rbp
  00292	e8 00 00 00 00	 call	 __security_check_cookie
  00297	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  0029e	5f		 pop	 rdi
  0029f	5d		 pop	 rbp
  002a0	c3		 ret	 0
?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z ENDP	; ImFontAtlasBuildFinish
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z
_TEXT	SEGMENT
pack_context$ = 8
user_rects$ = 40
pack_rects$ = 72
i$4 = 116
i$5 = 148
$T6 = 376
tv142 = 388
tv133 = 388
tv200 = 392
tv173 = 392
tv169 = 392
tv161 = 392
tv183 = 400
__$ArrayPad$ = 408
atlas$ = 448
stbrp_context_opaque$ = 456
?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z PROC ; ImFontAtlasBuildPackCustomRects, COMDAT

; 2614 : {

$LN15:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+488]
  0002f	48 c7 85 78 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T6[rbp], -2
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 98 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2615 :     stbrp_context* pack_context = (stbrp_context*)stbrp_context_opaque;

  0004b	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR stbrp_context_opaque$[rbp]
  00052	48 89 45 08	 mov	 QWORD PTR pack_context$[rbp], rax

; 2616 :     IM_ASSERT(pack_context != NULL);

  00056	48 83 7d 08 00	 cmp	 QWORD PTR pack_context$[rbp], 0
  0005b	75 22		 jne	 SHORT $LN10@ImFontAtla
  0005d	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4JA
  00063	83 c0 02	 add	 eax, 2
  00066	44 8b c0	 mov	 r8d, eax
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00070	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@FMMHMDCM@?$AAp?$AAa?$AAc?$AAk?$AA_?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007d	33 c0		 xor	 eax, eax
$LN10@ImFontAtla:

; 2617 : 
; 2618 :     ImVector<ImFontAtlasCustomRect>& user_rects = atlas->CustomRects;

  0007f	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00086	48 83 c0 68	 add	 rax, 104		; 00000068H
  0008a	48 89 45 28	 mov	 QWORD PTR user_rects$[rbp], rax

; 2619 :     IM_ASSERT(user_rects.Size >= 1); // We expect at least the default custom rects to be registered, else something went wrong.

  0008e	48 8b 45 28	 mov	 rax, QWORD PTR user_rects$[rbp]
  00092	83 38 01	 cmp	 DWORD PTR [rax], 1
  00095	7d 22		 jge	 SHORT $LN11@ImFontAtla
  00097	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4JA
  0009d	83 c0 05	 add	 eax, 5
  000a0	44 8b c0	 mov	 r8d, eax
  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@POMOOFJC@?$AAu?$AAs?$AAe?$AAr?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?$AA@
  000b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b7	33 c0		 xor	 eax, eax
$LN11@ImFontAtla:

; 2620 : 
; 2621 :     ImVector<stbrp_rect> pack_rects;

  000b9	48 8d 4d 48	 lea	 rcx, QWORD PTR pack_rects$[rbp]
  000bd	e8 00 00 00 00	 call	 ??0?$ImVector@Ustbrp_rect@@@@QEAA@XZ ; ImVector<stbrp_rect>::ImVector<stbrp_rect>
  000c2	90		 npad	 1

; 2622 :     pack_rects.resize(user_rects.Size);

  000c3	48 8b 45 28	 mov	 rax, QWORD PTR user_rects$[rbp]
  000c7	8b 10		 mov	 edx, DWORD PTR [rax]
  000c9	48 8d 4d 48	 lea	 rcx, QWORD PTR pack_rects$[rbp]
  000cd	e8 00 00 00 00	 call	 ?resize@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z ; ImVector<stbrp_rect>::resize

; 2623 :     memset(pack_rects.Data, 0, (size_t)pack_rects.size_in_bytes());

  000d2	48 8d 4d 48	 lea	 rcx, QWORD PTR pack_rects$[rbp]
  000d6	e8 00 00 00 00	 call	 ?size_in_bytes@?$ImVector@Ustbrp_rect@@@@QEBAHXZ ; ImVector<stbrp_rect>::size_in_bytes
  000db	48 98		 cdqe
  000dd	4c 8b c0	 mov	 r8, rax
  000e0	33 d2		 xor	 edx, edx
  000e2	48 8b 4d 50	 mov	 rcx, QWORD PTR pack_rects$[rbp+8]
  000e6	e8 00 00 00 00	 call	 memset

; 2624 :     for (int i = 0; i < user_rects.Size; i++)

  000eb	c7 45 74 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  000f2	eb 08		 jmp	 SHORT $LN4@ImFontAtla
$LN2@ImFontAtla:
  000f4	8b 45 74	 mov	 eax, DWORD PTR i$4[rbp]
  000f7	ff c0		 inc	 eax
  000f9	89 45 74	 mov	 DWORD PTR i$4[rbp], eax
$LN4@ImFontAtla:
  000fc	48 8b 45 28	 mov	 rax, QWORD PTR user_rects$[rbp]
  00100	8b 00		 mov	 eax, DWORD PTR [rax]
  00102	39 45 74	 cmp	 DWORD PTR i$4[rbp], eax
  00105	7d 57		 jge	 SHORT $LN3@ImFontAtla

; 2625 :     {
; 2626 :         pack_rects[i].w = user_rects[i].Width;

  00107	8b 55 74	 mov	 edx, DWORD PTR i$4[rbp]
  0010a	48 8b 4d 28	 mov	 rcx, QWORD PTR user_rects$[rbp]
  0010e	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ; ImVector<ImFontAtlasCustomRect>::operator[]
  00113	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00116	89 85 84 01 00
	00		 mov	 DWORD PTR tv133[rbp], eax
  0011c	8b 55 74	 mov	 edx, DWORD PTR i$4[rbp]
  0011f	48 8d 4d 48	 lea	 rcx, QWORD PTR pack_rects$[rbp]
  00123	e8 00 00 00 00	 call	 ??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
  00128	8b 8d 84 01 00
	00		 mov	 ecx, DWORD PTR tv133[rbp]
  0012e	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 2627 :         pack_rects[i].h = user_rects[i].Height;

  00131	8b 55 74	 mov	 edx, DWORD PTR i$4[rbp]
  00134	48 8b 4d 28	 mov	 rcx, QWORD PTR user_rects$[rbp]
  00138	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ; ImVector<ImFontAtlasCustomRect>::operator[]
  0013d	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  00141	89 85 84 01 00
	00		 mov	 DWORD PTR tv142[rbp], eax
  00147	8b 55 74	 mov	 edx, DWORD PTR i$4[rbp]
  0014a	48 8d 4d 48	 lea	 rcx, QWORD PTR pack_rects$[rbp]
  0014e	e8 00 00 00 00	 call	 ??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
  00153	8b 8d 84 01 00
	00		 mov	 ecx, DWORD PTR tv142[rbp]
  00159	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 2628 :     }

  0015c	eb 96		 jmp	 SHORT $LN2@ImFontAtla
$LN3@ImFontAtla:

; 2629 :     stbrp_pack_rects(pack_context, &pack_rects[0], pack_rects.Size);

  0015e	33 d2		 xor	 edx, edx
  00160	48 8d 4d 48	 lea	 rcx, QWORD PTR pack_rects$[rbp]
  00164	e8 00 00 00 00	 call	 ??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
  00169	44 8b 45 48	 mov	 r8d, DWORD PTR pack_rects$[rbp]
  0016d	48 8b d0	 mov	 rdx, rax
  00170	48 8b 4d 08	 mov	 rcx, QWORD PTR pack_context$[rbp]
  00174	e8 00 00 00 00	 call	 stbrp_pack_rects

; 2630 :     for (int i = 0; i < pack_rects.Size; i++)

  00179	c7 85 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR i$5[rbp], 0
  00183	eb 0e		 jmp	 SHORT $LN7@ImFontAtla
$LN5@ImFontAtla:
  00185	8b 85 94 00 00
	00		 mov	 eax, DWORD PTR i$5[rbp]
  0018b	ff c0		 inc	 eax
  0018d	89 85 94 00 00
	00		 mov	 DWORD PTR i$5[rbp], eax
$LN7@ImFontAtla:
  00193	8b 45 48	 mov	 eax, DWORD PTR pack_rects$[rbp]
  00196	39 85 94 00 00
	00		 cmp	 DWORD PTR i$5[rbp], eax
  0019c	0f 8d 60 01 00
	00		 jge	 $LN6@ImFontAtla

; 2631 :         if (pack_rects[i].was_packed)

  001a2	8b 95 94 00 00
	00		 mov	 edx, DWORD PTR i$5[rbp]
  001a8	48 8d 4d 48	 lea	 rcx, QWORD PTR pack_rects$[rbp]
  001ac	e8 00 00 00 00	 call	 ??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
  001b1	83 78 14 00	 cmp	 DWORD PTR [rax+20], 0
  001b5	0f 84 42 01 00
	00		 je	 $LN8@ImFontAtla

; 2632 :         {
; 2633 :             user_rects[i].X = (unsigned short)pack_rects[i].x;

  001bb	8b 95 94 00 00
	00		 mov	 edx, DWORD PTR i$5[rbp]
  001c1	48 8d 4d 48	 lea	 rcx, QWORD PTR pack_rects$[rbp]
  001c5	e8 00 00 00 00	 call	 ??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
  001ca	48 89 85 88 01
	00 00		 mov	 QWORD PTR tv161[rbp], rax
  001d1	8b 95 94 00 00
	00		 mov	 edx, DWORD PTR i$5[rbp]
  001d7	48 8b 4d 28	 mov	 rcx, QWORD PTR user_rects$[rbp]
  001db	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ; ImVector<ImFontAtlasCustomRect>::operator[]
  001e0	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR tv161[rbp]
  001e7	0f b7 49 0c	 movzx	 ecx, WORD PTR [rcx+12]
  001eb	66 89 48 04	 mov	 WORD PTR [rax+4], cx

; 2634 :             user_rects[i].Y = (unsigned short)pack_rects[i].y;

  001ef	8b 95 94 00 00
	00		 mov	 edx, DWORD PTR i$5[rbp]
  001f5	48 8d 4d 48	 lea	 rcx, QWORD PTR pack_rects$[rbp]
  001f9	e8 00 00 00 00	 call	 ??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
  001fe	48 89 85 88 01
	00 00		 mov	 QWORD PTR tv169[rbp], rax
  00205	8b 95 94 00 00
	00		 mov	 edx, DWORD PTR i$5[rbp]
  0020b	48 8b 4d 28	 mov	 rcx, QWORD PTR user_rects$[rbp]
  0020f	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ; ImVector<ImFontAtlasCustomRect>::operator[]
  00214	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR tv169[rbp]
  0021b	0f b7 49 10	 movzx	 ecx, WORD PTR [rcx+16]
  0021f	66 89 48 06	 mov	 WORD PTR [rax+6], cx

; 2635 :             IM_ASSERT(pack_rects[i].w == user_rects[i].Width && pack_rects[i].h == user_rects[i].Height);

  00223	8b 95 94 00 00
	00		 mov	 edx, DWORD PTR i$5[rbp]
  00229	48 8d 4d 48	 lea	 rcx, QWORD PTR pack_rects$[rbp]
  0022d	e8 00 00 00 00	 call	 ??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
  00232	48 89 85 88 01
	00 00		 mov	 QWORD PTR tv173[rbp], rax
  00239	8b 95 94 00 00
	00		 mov	 edx, DWORD PTR i$5[rbp]
  0023f	48 8b 4d 28	 mov	 rcx, QWORD PTR user_rects$[rbp]
  00243	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ; ImVector<ImFontAtlasCustomRect>::operator[]
  00248	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0024b	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR tv173[rbp]
  00252	39 41 04	 cmp	 DWORD PTR [rcx+4], eax
  00255	75 35		 jne	 SHORT $LN12@ImFontAtla
  00257	8b 95 94 00 00
	00		 mov	 edx, DWORD PTR i$5[rbp]
  0025d	48 8d 4d 48	 lea	 rcx, QWORD PTR pack_rects$[rbp]
  00261	e8 00 00 00 00	 call	 ??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
  00266	48 89 85 90 01
	00 00		 mov	 QWORD PTR tv183[rbp], rax
  0026d	8b 95 94 00 00
	00		 mov	 edx, DWORD PTR i$5[rbp]
  00273	48 8b 4d 28	 mov	 rcx, QWORD PTR user_rects$[rbp]
  00277	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ; ImVector<ImFontAtlasCustomRect>::operator[]
  0027c	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  00280	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR tv183[rbp]
  00287	39 41 08	 cmp	 DWORD PTR [rcx+8], eax
  0028a	74 22		 je	 SHORT $LN13@ImFontAtla
$LN12@ImFontAtla:
  0028c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4JA
  00292	83 c0 15	 add	 eax, 21
  00295	44 8b c0	 mov	 r8d, eax
  00298	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0029f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1KE@CBAIECN@?$AAp?$AAa?$AAc?$AAk?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?4?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAu?$AAs?$AAe?$AAr?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?$FL?$AAi?$AA?$FN@
  002a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002ac	33 c0		 xor	 eax, eax
$LN13@ImFontAtla:

; 2636 :             atlas->TexHeight = ImMax(atlas->TexHeight, pack_rects[i].y + pack_rects[i].h);

  002ae	8b 95 94 00 00
	00		 mov	 edx, DWORD PTR i$5[rbp]
  002b4	48 8d 4d 48	 lea	 rcx, QWORD PTR pack_rects$[rbp]
  002b8	e8 00 00 00 00	 call	 ??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
  002bd	48 89 85 88 01
	00 00		 mov	 QWORD PTR tv200[rbp], rax
  002c4	8b 95 94 00 00
	00		 mov	 edx, DWORD PTR i$5[rbp]
  002ca	48 8d 4d 48	 lea	 rcx, QWORD PTR pack_rects$[rbp]
  002ce	e8 00 00 00 00	 call	 ??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
  002d3	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR tv200[rbp]
  002da	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  002dd	03 48 08	 add	 ecx, DWORD PTR [rax+8]
  002e0	8b c1		 mov	 eax, ecx
  002e2	8b d0		 mov	 edx, eax
  002e4	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  002eb	8b 48 44	 mov	 ecx, DWORD PTR [rax+68]
  002ee	e8 00 00 00 00	 call	 ??$ImMax@H@@YAHHH@Z	; ImMax<int>
  002f3	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  002fa	89 41 44	 mov	 DWORD PTR [rcx+68], eax
$LN8@ImFontAtla:

; 2637 :         }

  002fd	e9 83 fe ff ff	 jmp	 $LN5@ImFontAtla
$LN6@ImFontAtla:

; 2638 : }

  00302	48 8d 4d 48	 lea	 rcx, QWORD PTR pack_rects$[rbp]
  00306	e8 00 00 00 00	 call	 ??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ ; ImVector<stbrp_rect>::~ImVector<stbrp_rect>
  0030b	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0030f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z$rtcFrameData
  00316	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0031b	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00322	48 33 cd	 xor	 rcx, rbp
  00325	e8 00 00 00 00	 call	 __security_check_cookie
  0032a	48 8d a5 a8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+424]
  00331	5f		 pop	 rdi
  00332	5d		 pop	 rbp
  00333	c3		 ret	 0
?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z ENDP ; ImFontAtlasBuildPackCustomRects
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
pack_context$ = 8
user_rects$ = 40
pack_rects$ = 72
i$4 = 116
i$5 = 148
$T6 = 376
tv142 = 388
tv133 = 388
tv200 = 392
tv173 = 392
tv169 = 392
tv161 = 392
tv183 = 400
__$ArrayPad$ = 408
atlas$ = 448
stbrp_context_opaque$ = 456
?dtor$0@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4HA PROC ; `ImFontAtlasBuildPackCustomRects'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR pack_rects$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ ; ImVector<stbrp_rect>::~ImVector<stbrp_rect>
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4HA ENDP ; `ImFontAtlasBuildPackCustomRects'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
pack_context$ = 8
user_rects$ = 40
pack_rects$ = 72
i$4 = 116
i$5 = 148
$T6 = 376
tv142 = 388
tv133 = 388
tv200 = 392
tv173 = 392
tv169 = 392
tv161 = 392
tv183 = 400
__$ArrayPad$ = 408
atlas$ = 448
stbrp_context_opaque$ = 456
?dtor$0@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4HA PROC ; `ImFontAtlasBuildPackCustomRects'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR pack_rects$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ ; ImVector<stbrp_rect>::~ImVector<stbrp_rect>
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4HA ENDP ; `ImFontAtlasBuildPackCustomRects'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ImFontAtlasBuildSetupFont@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontConfig@@MM@Z
_TEXT	SEGMENT
atlas$ = 224
font$ = 232
font_config$ = 240
ascent$ = 248
descent$ = 256
?ImFontAtlasBuildSetupFont@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontConfig@@MM@Z PROC ; ImFontAtlasBuildSetupFont, COMDAT

; 2599 : {

$LN4:
  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2600 :     if (!font_config->MergeMode)

  0003a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR font_config$[rbp]
  00041	0f b6 40 48	 movzx	 eax, BYTE PTR [rax+72]
  00045	85 c0		 test	 eax, eax
  00047	75 7d		 jne	 SHORT $LN2@ImFontAtla

; 2601 :     {
; 2602 :         font->ClearOutputData();

  00049	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  00050	e8 00 00 00 00	 call	 ?ClearOutputData@ImFont@@QEAAXXZ ; ImFont::ClearOutputData

; 2603 :         font->FontSize = font_config->SizePixels;

  00055	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR font$[rbp]
  0005c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR font_config$[rbp]
  00063	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [rcx+20]
  00068	f3 0f 11 40 14	 movss	 DWORD PTR [rax+20], xmm0

; 2604 :         font->ConfigData = font_config;

  0006d	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR font$[rbp]
  00074	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR font_config$[rbp]
  0007b	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx

; 2605 :         font->ConfigDataCount = 0;

  0007f	33 c0		 xor	 eax, eax
  00081	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  00088	66 89 41 50	 mov	 WORD PTR [rcx+80], ax

; 2606 :         font->ContainerAtlas = atlas;

  0008c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR font$[rbp]
  00093	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  0009a	48 89 48 40	 mov	 QWORD PTR [rax+64], rcx

; 2607 :         font->Ascent = ascent;

  0009e	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR font$[rbp]
  000a5	f3 0f 10 85 f8
	00 00 00	 movss	 xmm0, DWORD PTR ascent$[rbp]
  000ad	f3 0f 11 40 68	 movss	 DWORD PTR [rax+104], xmm0

; 2608 :         font->Descent = descent;

  000b2	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR font$[rbp]
  000b9	f3 0f 10 85 00
	01 00 00	 movss	 xmm0, DWORD PTR descent$[rbp]
  000c1	f3 0f 11 40 6c	 movss	 DWORD PTR [rax+108], xmm0
$LN2@ImFontAtla:

; 2609 :     }
; 2610 :     font->ConfigDataCount++;

  000c6	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR font$[rbp]
  000cd	0f b7 40 50	 movzx	 eax, WORD PTR [rax+80]
  000d1	66 ff c0	 inc	 ax
  000d4	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  000db	66 89 41 50	 mov	 WORD PTR [rcx+80], ax

; 2611 : }

  000df	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000e6	5f		 pop	 rdi
  000e7	5d		 pop	 rbp
  000e8	c3		 ret	 0
?ImFontAtlasBuildSetupFont@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontConfig@@MM@Z ENDP ; ImFontAtlasBuildSetupFont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ImFontAtlasBuildInit@@YAXPEAUImFontAtlas@@@Z
_TEXT	SEGMENT
atlas$ = 224
?ImFontAtlasBuildInit@@YAXPEAUImFontAtlas@@@Z PROC	; ImFontAtlasBuildInit, COMDAT

; 2753 : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2754 :     // Register texture region for mouse cursors or standard white pixels
; 2755 :     if (atlas->PackIdMouseCursors < 0)

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00031	83 b8 94 04 00
	00 00		 cmp	 DWORD PTR [rax+1172], 0
  00038	7d 5a		 jge	 SHORT $LN2@ImFontAtla

; 2756 :     {
; 2757 :         if (!(atlas->Flags & ImFontAtlasFlags_NoMouseCursors))

  0003a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  00041	8b 00		 mov	 eax, DWORD PTR [rax]
  00043	83 e0 02	 and	 eax, 2
  00046	85 c0		 test	 eax, eax
  00048	75 26		 jne	 SHORT $LN3@ImFontAtla

; 2758 :             atlas->PackIdMouseCursors = atlas->AddCustomRectRegular(FONT_ATLAS_DEFAULT_TEX_DATA_W * 2 + 1, FONT_ATLAS_DEFAULT_TEX_DATA_H);

  0004a	41 b8 1b 00 00
	00		 mov	 r8d, 27
  00050	ba f5 00 00 00	 mov	 edx, 245		; 000000f5H
  00055	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  0005c	e8 00 00 00 00	 call	 ?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z ; ImFontAtlas::AddCustomRectRegular
  00061	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  00068	89 81 94 04 00
	00		 mov	 DWORD PTR [rcx+1172], eax

; 2759 :         else

  0006e	eb 24		 jmp	 SHORT $LN4@ImFontAtla
$LN3@ImFontAtla:

; 2760 :             atlas->PackIdMouseCursors = atlas->AddCustomRectRegular(2, 2);

  00070	41 b8 02 00 00
	00		 mov	 r8d, 2
  00076	ba 02 00 00 00	 mov	 edx, 2
  0007b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  00082	e8 00 00 00 00	 call	 ?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z ; ImFontAtlas::AddCustomRectRegular
  00087	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  0008e	89 81 94 04 00
	00		 mov	 DWORD PTR [rcx+1172], eax
$LN4@ImFontAtla:
$LN2@ImFontAtla:

; 2761 :     }
; 2762 : 
; 2763 :     // Register texture region for thick lines
; 2764 :     // The +2 here is to give space for the end caps, whilst height +1 is to accommodate the fact we have a zero-width row
; 2765 :     if (atlas->PackIdLines < 0)

  00094	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  0009b	83 b8 98 04 00
	00 00		 cmp	 DWORD PTR [rax+1176], 0
  000a2	7d 34		 jge	 SHORT $LN5@ImFontAtla

; 2766 :     {
; 2767 :         if (!(atlas->Flags & ImFontAtlasFlags_NoBakedLines))

  000a4	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR atlas$[rbp]
  000ab	8b 00		 mov	 eax, DWORD PTR [rax]
  000ad	83 e0 04	 and	 eax, 4
  000b0	85 c0		 test	 eax, eax
  000b2	75 24		 jne	 SHORT $LN6@ImFontAtla

; 2768 :             atlas->PackIdLines = atlas->AddCustomRectRegular(IM_DRAWLIST_TEX_LINES_WIDTH_MAX + 2, IM_DRAWLIST_TEX_LINES_WIDTH_MAX + 1);

  000b4	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  000ba	ba 41 00 00 00	 mov	 edx, 65			; 00000041H
  000bf	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  000c6	e8 00 00 00 00	 call	 ?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z ; ImFontAtlas::AddCustomRectRegular
  000cb	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR atlas$[rbp]
  000d2	89 81 98 04 00
	00		 mov	 DWORD PTR [rcx+1176], eax
$LN6@ImFontAtla:
$LN5@ImFontAtla:

; 2769 :     }
; 2770 : }

  000d8	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000df	5f		 pop	 rdi
  000e0	5d		 pop	 rbp
  000e1	c3		 ret	 0
?ImFontAtlasBuildInit@@YAXPEAUImFontAtlas@@@Z ENDP	; ImFontAtlasBuildInit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ
_TEXT	SEGMENT
?ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ PROC ; ImFontAtlasGetBuilderForStbTruetype, COMDAT

; 2590 : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000a	48 8b ec	 mov	 rbp, rsp
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd

; 2591 :     static ImFontBuilderIO io;
; 2592 :     io.FontBuilder_Build = ImFontAtlasBuildWithStbTruetype;

  0001c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z ; ImFontAtlasBuildWithStbTruetype
  00023	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?io@?1??ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ@4U2@A, rax

; 2593 :     return &io;

  0002a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?io@?1??ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ@4U2@A

; 2594 : }

  00031	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00038	5f		 pop	 rdi
  00039	5d		 pop	 rbp
  0003a	c3		 ret	 0
?ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ ENDP ; ImFontAtlasGetBuilderForStbTruetype
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z
_TEXT	SEGMENT
size$ = 8
uv_size$ = 40
scale$ = 72
vert_start$ = 104
vert_end$ = 136
min$8 = 168
max$9 = 200
vertex$10 = 232
vertex$11 = 264
$T12 = 676
$T13 = 708
$T14 = 740
$T15 = 772
$T16 = 804
$T17 = 836
$T18 = 868
$T19 = 900
$T20 = 932
tv74 = 948
tv78 = 952
__$ArrayPad$ = 960
draw_list$ = 1008
vert_start_idx$ = 1016
vert_end_idx$ = 1024
a$ = 1032
b$ = 1040
uv_a$ = 1048
uv_b$ = 1056
clamp$ = 1064
?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z PROC ; ImGui::ShadeVertsLinearUV, COMDAT

; 1875 : {

$LN17:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec f8 03
	00 00		 sub	 rsp, 1016		; 000003f8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 fe 00 00 00	 mov	 ecx, 254		; 000000feH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 18
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1048]
  00038	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003f	48 33 c5	 xor	 rax, rbp
  00042	48 89 85 c0 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1876 :     const ImVec2 size = b - a;

  00049	4c 8b 85 08 04
	00 00		 mov	 r8, QWORD PTR a$[rbp]
  00050	48 8b 95 10 04
	00 00		 mov	 rdx, QWORD PTR b$[rbp]
  00057	48 8d 4d 08	 lea	 rcx, QWORD PTR size$[rbp]
  0005b	e8 00 00 00 00	 call	 ??G@YA?AUImVec2@@AEBU0@0@Z ; operator-

; 1877 :     const ImVec2 uv_size = uv_b - uv_a;

  00060	4c 8b 85 18 04
	00 00		 mov	 r8, QWORD PTR uv_a$[rbp]
  00067	48 8b 95 20 04
	00 00		 mov	 rdx, QWORD PTR uv_b$[rbp]
  0006e	48 8d 4d 28	 lea	 rcx, QWORD PTR uv_size$[rbp]
  00072	e8 00 00 00 00	 call	 ??G@YA?AUImVec2@@AEBU0@0@Z ; operator-

; 1878 :     const ImVec2 scale = ImVec2(

  00077	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR size$[rbp+4]
  0007c	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00083	7a 02		 jp	 SHORT $LN16@ShadeVerts
  00085	74 14		 je	 SHORT $LN11@ShadeVerts
$LN16@ShadeVerts:
  00087	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR uv_size$[rbp+4]
  0008c	f3 0f 5e 45 0c	 divss	 xmm0, DWORD PTR size$[rbp+4]
  00091	f3 0f 11 85 b4
	03 00 00	 movss	 DWORD PTR tv74[rbp], xmm0
  00099	eb 0b		 jmp	 SHORT $LN12@ShadeVerts
$LN11@ShadeVerts:
  0009b	0f 57 c0	 xorps	 xmm0, xmm0
  0009e	f3 0f 11 85 b4
	03 00 00	 movss	 DWORD PTR tv74[rbp], xmm0
$LN12@ShadeVerts:
  000a6	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR size$[rbp]
  000ab	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  000b2	7a 02		 jp	 SHORT $LN15@ShadeVerts
  000b4	74 14		 je	 SHORT $LN13@ShadeVerts
$LN15@ShadeVerts:
  000b6	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR uv_size$[rbp]
  000bb	f3 0f 5e 45 08	 divss	 xmm0, DWORD PTR size$[rbp]
  000c0	f3 0f 11 85 b8
	03 00 00	 movss	 DWORD PTR tv78[rbp], xmm0
  000c8	eb 0b		 jmp	 SHORT $LN14@ShadeVerts
$LN13@ShadeVerts:
  000ca	0f 57 c0	 xorps	 xmm0, xmm0
  000cd	f3 0f 11 85 b8
	03 00 00	 movss	 DWORD PTR tv78[rbp], xmm0
$LN14@ShadeVerts:
  000d5	f3 0f 10 95 b4
	03 00 00	 movss	 xmm2, DWORD PTR tv74[rbp]
  000dd	f3 0f 10 8d b8
	03 00 00	 movss	 xmm1, DWORD PTR tv78[rbp]
  000e5	48 8d 4d 48	 lea	 rcx, QWORD PTR scale$[rbp]
  000e9	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 1879 :         size.x != 0.0f ? (uv_size.x / size.x) : 0.0f,
; 1880 :         size.y != 0.0f ? (uv_size.y / size.y) : 0.0f);
; 1881 : 
; 1882 :     ImDrawVert* vert_start = draw_list->VtxBuffer.Data + vert_start_idx;

  000ee	48 63 85 f8 03
	00 00		 movsxd	 rax, DWORD PTR vert_start_idx$[rbp]
  000f5	48 6b c0 14	 imul	 rax, rax, 20
  000f9	48 8b 8d f0 03
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00100	48 03 41 28	 add	 rax, QWORD PTR [rcx+40]
  00104	48 89 45 68	 mov	 QWORD PTR vert_start$[rbp], rax

; 1883 :     ImDrawVert* vert_end = draw_list->VtxBuffer.Data + vert_end_idx;

  00108	48 63 85 00 04
	00 00		 movsxd	 rax, DWORD PTR vert_end_idx$[rbp]
  0010f	48 6b c0 14	 imul	 rax, rax, 20
  00113	48 8b 8d f0 03
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  0011a	48 03 41 28	 add	 rax, QWORD PTR [rcx+40]
  0011e	48 89 85 88 00
	00 00		 mov	 QWORD PTR vert_end$[rbp], rax

; 1884 :     if (clamp)

  00125	0f b6 85 28 04
	00 00		 movzx	 eax, BYTE PTR clamp$[rbp]
  0012c	85 c0		 test	 eax, eax
  0012e	0f 84 fe 00 00
	00		 je	 $LN8@ShadeVerts

; 1885 :     {
; 1886 :         const ImVec2 min = ImMin(uv_a, uv_b);

  00134	4c 8b 85 20 04
	00 00		 mov	 r8, QWORD PTR uv_b$[rbp]
  0013b	48 8b 95 18 04
	00 00		 mov	 rdx, QWORD PTR uv_a$[rbp]
  00142	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR min$8[rbp]
  00149	e8 00 00 00 00	 call	 ?ImMin@@YA?AUImVec2@@AEBU1@0@Z ; ImMin

; 1887 :         const ImVec2 max = ImMax(uv_a, uv_b);

  0014e	4c 8b 85 20 04
	00 00		 mov	 r8, QWORD PTR uv_b$[rbp]
  00155	48 8b 95 18 04
	00 00		 mov	 rdx, QWORD PTR uv_a$[rbp]
  0015c	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR max$9[rbp]
  00163	e8 00 00 00 00	 call	 ?ImMax@@YA?AUImVec2@@AEBU1@0@Z ; ImMax

; 1888 :         for (ImDrawVert* vertex = vert_start; vertex < vert_end; ++vertex)

  00168	48 8b 45 68	 mov	 rax, QWORD PTR vert_start$[rbp]
  0016c	48 89 85 e8 00
	00 00		 mov	 QWORD PTR vertex$10[rbp], rax
  00173	eb 12		 jmp	 SHORT $LN4@ShadeVerts
$LN2@ShadeVerts:
  00175	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR vertex$10[rbp]
  0017c	48 83 c0 14	 add	 rax, 20
  00180	48 89 85 e8 00
	00 00		 mov	 QWORD PTR vertex$10[rbp], rax
$LN4@ShadeVerts:
  00187	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR vert_end$[rbp]
  0018e	48 39 85 e8 00
	00 00		 cmp	 QWORD PTR vertex$10[rbp], rax
  00195	0f 83 92 00 00
	00		 jae	 $LN3@ShadeVerts

; 1889 :             vertex->uv = ImClamp(uv_a + ImMul(ImVec2(vertex->pos.x, vertex->pos.y) - a, scale), min, max);

  0019b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR vertex$10[rbp]
  001a2	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  001a7	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR vertex$10[rbp]
  001ae	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  001b2	48 8d 8d a4 02
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  001b9	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001be	4c 8b 85 08 04
	00 00		 mov	 r8, QWORD PTR a$[rbp]
  001c5	48 8b d0	 mov	 rdx, rax
  001c8	48 8d 8d c4 02
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  001cf	e8 00 00 00 00	 call	 ??G@YA?AUImVec2@@AEBU0@0@Z ; operator-
  001d4	4c 8d 45 48	 lea	 r8, QWORD PTR scale$[rbp]
  001d8	48 8b d0	 mov	 rdx, rax
  001db	48 8d 8d e4 02
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  001e2	e8 00 00 00 00	 call	 ?ImMul@@YA?AUImVec2@@AEBU1@0@Z ; ImMul
  001e7	4c 8b c0	 mov	 r8, rax
  001ea	48 8b 95 18 04
	00 00		 mov	 rdx, QWORD PTR uv_a$[rbp]
  001f1	48 8d 8d 04 03
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  001f8	e8 00 00 00 00	 call	 ??H@YA?AUImVec2@@AEBU0@0@Z ; operator+
  001fd	4c 8b 8d c8 00
	00 00		 mov	 r9, QWORD PTR max$9[rbp]
  00204	4c 8d 85 a8 00
	00 00		 lea	 r8, QWORD PTR min$8[rbp]
  0020b	48 8b d0	 mov	 rdx, rax
  0020e	48 8d 8d 24 03
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  00215	e8 00 00 00 00	 call	 ?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z ; ImClamp
  0021a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0021d	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR vertex$10[rbp]
  00224	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00228	e9 48 ff ff ff	 jmp	 $LN2@ShadeVerts
$LN3@ShadeVerts:

; 1890 :     }
; 1891 :     else

  0022d	e9 a4 00 00 00	 jmp	 $LN9@ShadeVerts
$LN8@ShadeVerts:

; 1892 :     {
; 1893 :         for (ImDrawVert* vertex = vert_start; vertex < vert_end; ++vertex)

  00232	48 8b 45 68	 mov	 rax, QWORD PTR vert_start$[rbp]
  00236	48 89 85 08 01
	00 00		 mov	 QWORD PTR vertex$11[rbp], rax
  0023d	eb 12		 jmp	 SHORT $LN7@ShadeVerts
$LN5@ShadeVerts:
  0023f	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR vertex$11[rbp]
  00246	48 83 c0 14	 add	 rax, 20
  0024a	48 89 85 08 01
	00 00		 mov	 QWORD PTR vertex$11[rbp], rax
$LN7@ShadeVerts:
  00251	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR vert_end$[rbp]
  00258	48 39 85 08 01
	00 00		 cmp	 QWORD PTR vertex$11[rbp], rax
  0025f	73 75		 jae	 SHORT $LN6@ShadeVerts

; 1894 :             vertex->uv = uv_a + ImMul(ImVec2(vertex->pos.x, vertex->pos.y) - a, scale);

  00261	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR vertex$11[rbp]
  00268	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  0026d	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR vertex$11[rbp]
  00274	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00278	48 8d 8d 44 03
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  0027f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00284	4c 8b 85 08 04
	00 00		 mov	 r8, QWORD PTR a$[rbp]
  0028b	48 8b d0	 mov	 rdx, rax
  0028e	48 8d 8d 64 03
	00 00		 lea	 rcx, QWORD PTR $T18[rbp]
  00295	e8 00 00 00 00	 call	 ??G@YA?AUImVec2@@AEBU0@0@Z ; operator-
  0029a	4c 8d 45 48	 lea	 r8, QWORD PTR scale$[rbp]
  0029e	48 8b d0	 mov	 rdx, rax
  002a1	48 8d 8d 84 03
	00 00		 lea	 rcx, QWORD PTR $T19[rbp]
  002a8	e8 00 00 00 00	 call	 ?ImMul@@YA?AUImVec2@@AEBU1@0@Z ; ImMul
  002ad	4c 8b c0	 mov	 r8, rax
  002b0	48 8b 95 18 04
	00 00		 mov	 rdx, QWORD PTR uv_a$[rbp]
  002b7	48 8d 8d a4 03
	00 00		 lea	 rcx, QWORD PTR $T20[rbp]
  002be	e8 00 00 00 00	 call	 ??H@YA?AUImVec2@@AEBU0@0@Z ; operator+
  002c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002c6	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR vertex$11[rbp]
  002cd	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  002d1	e9 69 ff ff ff	 jmp	 $LN5@ShadeVerts
$LN6@ShadeVerts:
$LN9@ShadeVerts:

; 1895 :     }
; 1896 : }

  002d6	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  002da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcFrameData
  002e1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002e6	48 8b 8d c0 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  002ed	48 33 cd	 xor	 rcx, rbp
  002f0	e8 00 00 00 00	 call	 __security_check_cookie
  002f5	48 8d a5 d8 03
	00 00		 lea	 rsp, QWORD PTR [rbp+984]
  002fc	5f		 pop	 rdi
  002fd	5d		 pop	 rbp
  002fe	c3		 ret	 0
?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z ENDP ; ImGui::ShadeVertsLinearUV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z
_TEXT	SEGMENT
gradient_extent$ = 8
gradient_inv_length2$ = 36
vert_start$ = 72
vert_end$ = 104
col0_r$ = 132
col0_g$ = 164
col0_b$ = 196
col_delta_r$ = 228
col_delta_g$ = 260
col_delta_b$ = 292
vert$4 = 328
d$5 = 356
t$6 = 388
r$7 = 420
g$8 = 452
b$9 = 484
$T10 = 900
__$ArrayPad$ = 920
draw_list$ = 960
vert_start_idx$ = 968
vert_end_idx$ = 976
gradient_p0$ = 984
gradient_p1$ = 992
col0$ = 1000
col1$ = 1008
?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z PROC ; ImGui::ShadeVertsLinearColorGradientKeepAlpha, COMDAT

; 1851 : {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec c8 03
	00 00		 sub	 rsp, 968		; 000003c8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 f2 00 00 00	 mov	 ecx, 242		; 000000f2H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 e8
	03 00 00	 mov	 rcx, QWORD PTR [rsp+1000]
  00038	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003f	48 33 c5	 xor	 rax, rbp
  00042	48 89 85 98 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1852 :     ImVec2 gradient_extent = gradient_p1 - gradient_p0;

  00049	4c 8d 85 d8 03
	00 00		 lea	 r8, QWORD PTR gradient_p0$[rbp]
  00050	48 8d 95 e0 03
	00 00		 lea	 rdx, QWORD PTR gradient_p1$[rbp]
  00057	48 8d 4d 08	 lea	 rcx, QWORD PTR gradient_extent$[rbp]
  0005b	e8 00 00 00 00	 call	 ??G@YA?AUImVec2@@AEBU0@0@Z ; operator-

; 1853 :     float gradient_inv_length2 = 1.0f / ImLengthSqr(gradient_extent);

  00060	48 8d 4d 08	 lea	 rcx, QWORD PTR gradient_extent$[rbp]
  00064	e8 00 00 00 00	 call	 ?ImLengthSqr@@YAMAEBUImVec2@@@Z ; ImLengthSqr
  00069	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00071	f3 0f 5e c8	 divss	 xmm1, xmm0
  00075	0f 28 c1	 movaps	 xmm0, xmm1
  00078	f3 0f 11 45 24	 movss	 DWORD PTR gradient_inv_length2$[rbp], xmm0

; 1854 :     ImDrawVert* vert_start = draw_list->VtxBuffer.Data + vert_start_idx;

  0007d	48 63 85 c8 03
	00 00		 movsxd	 rax, DWORD PTR vert_start_idx$[rbp]
  00084	48 6b c0 14	 imul	 rax, rax, 20
  00088	48 8b 8d c0 03
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  0008f	48 03 41 28	 add	 rax, QWORD PTR [rcx+40]
  00093	48 89 45 48	 mov	 QWORD PTR vert_start$[rbp], rax

; 1855 :     ImDrawVert* vert_end = draw_list->VtxBuffer.Data + vert_end_idx;

  00097	48 63 85 d0 03
	00 00		 movsxd	 rax, DWORD PTR vert_end_idx$[rbp]
  0009e	48 6b c0 14	 imul	 rax, rax, 20
  000a2	48 8b 8d c0 03
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  000a9	48 03 41 28	 add	 rax, QWORD PTR [rcx+40]
  000ad	48 89 45 68	 mov	 QWORD PTR vert_end$[rbp], rax

; 1856 :     const int col0_r = (int)(col0 >> IM_COL32_R_SHIFT) & 0xFF;

  000b1	8b 85 e8 03 00
	00		 mov	 eax, DWORD PTR col0$[rbp]
  000b7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000bc	89 85 84 00 00
	00		 mov	 DWORD PTR col0_r$[rbp], eax

; 1857 :     const int col0_g = (int)(col0 >> IM_COL32_G_SHIFT) & 0xFF;

  000c2	8b 85 e8 03 00
	00		 mov	 eax, DWORD PTR col0$[rbp]
  000c8	c1 e8 08	 shr	 eax, 8
  000cb	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000d0	89 85 a4 00 00
	00		 mov	 DWORD PTR col0_g$[rbp], eax

; 1858 :     const int col0_b = (int)(col0 >> IM_COL32_B_SHIFT) & 0xFF;

  000d6	8b 85 e8 03 00
	00		 mov	 eax, DWORD PTR col0$[rbp]
  000dc	c1 e8 10	 shr	 eax, 16
  000df	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000e4	89 85 c4 00 00
	00		 mov	 DWORD PTR col0_b$[rbp], eax

; 1859 :     const int col_delta_r = ((int)(col1 >> IM_COL32_R_SHIFT) & 0xFF) - col0_r;

  000ea	8b 85 f0 03 00
	00		 mov	 eax, DWORD PTR col1$[rbp]
  000f0	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000f5	2b 85 84 00 00
	00		 sub	 eax, DWORD PTR col0_r$[rbp]
  000fb	89 85 e4 00 00
	00		 mov	 DWORD PTR col_delta_r$[rbp], eax

; 1860 :     const int col_delta_g = ((int)(col1 >> IM_COL32_G_SHIFT) & 0xFF) - col0_g;

  00101	8b 85 f0 03 00
	00		 mov	 eax, DWORD PTR col1$[rbp]
  00107	c1 e8 08	 shr	 eax, 8
  0010a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0010f	2b 85 a4 00 00
	00		 sub	 eax, DWORD PTR col0_g$[rbp]
  00115	89 85 04 01 00
	00		 mov	 DWORD PTR col_delta_g$[rbp], eax

; 1861 :     const int col_delta_b = ((int)(col1 >> IM_COL32_B_SHIFT) & 0xFF) - col0_b;

  0011b	8b 85 f0 03 00
	00		 mov	 eax, DWORD PTR col1$[rbp]
  00121	c1 e8 10	 shr	 eax, 16
  00124	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00129	2b 85 c4 00 00
	00		 sub	 eax, DWORD PTR col0_b$[rbp]
  0012f	89 85 24 01 00
	00		 mov	 DWORD PTR col_delta_b$[rbp], eax

; 1862 :     for (ImDrawVert* vert = vert_start; vert < vert_end; vert++)

  00135	48 8b 45 48	 mov	 rax, QWORD PTR vert_start$[rbp]
  00139	48 89 85 48 01
	00 00		 mov	 QWORD PTR vert$4[rbp], rax
  00140	eb 12		 jmp	 SHORT $LN4@ShadeVerts
$LN2@ShadeVerts:
  00142	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR vert$4[rbp]
  00149	48 83 c0 14	 add	 rax, 20
  0014d	48 89 85 48 01
	00 00		 mov	 QWORD PTR vert$4[rbp], rax
$LN4@ShadeVerts:
  00154	48 8b 45 68	 mov	 rax, QWORD PTR vert_end$[rbp]
  00158	48 39 85 48 01
	00 00		 cmp	 QWORD PTR vert$4[rbp], rax
  0015f	0f 83 07 01 00
	00		 jae	 $LN3@ShadeVerts

; 1863 :     {
; 1864 :         float d = ImDot(vert->pos - gradient_p0, gradient_extent);

  00165	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR vert$4[rbp]
  0016c	4c 8d 85 d8 03
	00 00		 lea	 r8, QWORD PTR gradient_p0$[rbp]
  00173	48 8b d0	 mov	 rdx, rax
  00176	48 8d 8d 84 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  0017d	e8 00 00 00 00	 call	 ??G@YA?AUImVec2@@AEBU0@0@Z ; operator-
  00182	48 8d 55 08	 lea	 rdx, QWORD PTR gradient_extent$[rbp]
  00186	48 8b c8	 mov	 rcx, rax
  00189	e8 00 00 00 00	 call	 ?ImDot@@YAMAEBUImVec2@@0@Z ; ImDot
  0018e	f3 0f 11 85 64
	01 00 00	 movss	 DWORD PTR d$5[rbp], xmm0

; 1865 :         float t = ImClamp(d * gradient_inv_length2, 0.0f, 1.0f);

  00196	f3 0f 10 85 64
	01 00 00	 movss	 xmm0, DWORD PTR d$5[rbp]
  0019e	f3 0f 59 45 24	 mulss	 xmm0, DWORD PTR gradient_inv_length2$[rbp]
  001a3	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  001ab	0f 57 c9	 xorps	 xmm1, xmm1
  001ae	e8 00 00 00 00	 call	 ??$ImClamp@M@@YAMMMM@Z	; ImClamp<float>
  001b3	f3 0f 11 85 84
	01 00 00	 movss	 DWORD PTR t$6[rbp], xmm0

; 1866 :         int r = (int)(col0_r + col_delta_r * t);

  001bb	f3 0f 2a 85 84
	00 00 00	 cvtsi2ss xmm0, DWORD PTR col0_r$[rbp]
  001c3	f3 0f 2a 8d e4
	00 00 00	 cvtsi2ss xmm1, DWORD PTR col_delta_r$[rbp]
  001cb	f3 0f 59 8d 84
	01 00 00	 mulss	 xmm1, DWORD PTR t$6[rbp]
  001d3	f3 0f 58 c1	 addss	 xmm0, xmm1
  001d7	f3 0f 2c c0	 cvttss2si eax, xmm0
  001db	89 85 a4 01 00
	00		 mov	 DWORD PTR r$7[rbp], eax

; 1867 :         int g = (int)(col0_g + col_delta_g * t);

  001e1	f3 0f 2a 85 a4
	00 00 00	 cvtsi2ss xmm0, DWORD PTR col0_g$[rbp]
  001e9	f3 0f 2a 8d 04
	01 00 00	 cvtsi2ss xmm1, DWORD PTR col_delta_g$[rbp]
  001f1	f3 0f 59 8d 84
	01 00 00	 mulss	 xmm1, DWORD PTR t$6[rbp]
  001f9	f3 0f 58 c1	 addss	 xmm0, xmm1
  001fd	f3 0f 2c c0	 cvttss2si eax, xmm0
  00201	89 85 c4 01 00
	00		 mov	 DWORD PTR g$8[rbp], eax

; 1868 :         int b = (int)(col0_b + col_delta_b * t);

  00207	f3 0f 2a 85 c4
	00 00 00	 cvtsi2ss xmm0, DWORD PTR col0_b$[rbp]
  0020f	f3 0f 2a 8d 24
	01 00 00	 cvtsi2ss xmm1, DWORD PTR col_delta_b$[rbp]
  00217	f3 0f 59 8d 84
	01 00 00	 mulss	 xmm1, DWORD PTR t$6[rbp]
  0021f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00223	f3 0f 2c c0	 cvttss2si eax, xmm0
  00227	89 85 e4 01 00
	00		 mov	 DWORD PTR b$9[rbp], eax

; 1869 :         vert->col = (r << IM_COL32_R_SHIFT) | (g << IM_COL32_G_SHIFT) | (b << IM_COL32_B_SHIFT) | (vert->col & IM_COL32_A_MASK);

  0022d	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR g$8[rbp]
  00233	c1 e0 08	 shl	 eax, 8
  00236	8b 8d a4 01 00
	00		 mov	 ecx, DWORD PTR r$7[rbp]
  0023c	0b c8		 or	 ecx, eax
  0023e	8b c1		 mov	 eax, ecx
  00240	8b 8d e4 01 00
	00		 mov	 ecx, DWORD PTR b$9[rbp]
  00246	c1 e1 10	 shl	 ecx, 16
  00249	0b c1		 or	 eax, ecx
  0024b	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR vert$4[rbp]
  00252	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  00255	81 e1 00 00 00
	ff		 and	 ecx, -16777216		; ff000000H
  0025b	0b c1		 or	 eax, ecx
  0025d	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR vert$4[rbp]
  00264	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 1870 :     }

  00267	e9 d6 fe ff ff	 jmp	 $LN2@ShadeVerts
$LN3@ShadeVerts:

; 1871 : }

  0026c	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00270	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z$rtcFrameData
  00277	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0027c	48 8b 8d 98 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00283	48 33 cd	 xor	 rcx, rbp
  00286	e8 00 00 00 00	 call	 __security_check_cookie
  0028b	48 8d a5 a8 03
	00 00		 lea	 rsp, QWORD PTR [rbp+936]
  00292	5f		 pop	 rdi
  00293	5d		 pop	 rbp
  00294	c3		 ret	 0
?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z ENDP ; ImGui::ShadeVertsLinearColorGradientKeepAlpha
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?RenderRectFilledWithHole@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@1IM@Z
_TEXT	SEGMENT
fill_L$ = 4
fill_R$ = 36
fill_U$ = 68
fill_D$ = 100
$T1 = 516
$T2 = 548
$T3 = 580
$T4 = 612
$T5 = 644
$T6 = 676
$T7 = 708
$T8 = 740
$T9 = 772
$T10 = 804
$T11 = 836
$T12 = 868
$T13 = 900
$T14 = 932
$T15 = 964
$T16 = 996
tv221 = 1012
tv189 = 1012
tv157 = 1012
tv93 = 1012
tv87 = 1012
tv81 = 1012
tv75 = 1012
tv69 = 1012
tv335 = 1016
tv309 = 1016
tv283 = 1016
tv257 = 1016
tv225 = 1016
tv193 = 1016
tv161 = 1016
tv129 = 1016
tv226 = 1020
tv194 = 1020
tv162 = 1020
tv130 = 1020
tv231 = 1024
tv199 = 1024
tv167 = 1024
tv135 = 1024
draw_list$ = 1072
outer$ = 1080
inner$ = 1088
col$ = 1096
rounding$ = 1104
?RenderRectFilledWithHole@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@1IM@Z PROC ; ImGui::RenderRectFilledWithHole, COMDAT

; 3890 : {

$LN35:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 48 04
	00 00		 sub	 rsp, 1096		; 00000448H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 12 01 00 00	 mov	 ecx, 274		; 00000112H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 68
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1128]

; 3891 :     const bool fill_L = (inner.Min.x > outer.Min.x);

  00039	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR inner$[rbp]
  00040	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR outer$[rbp]
  00047	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  0004b	0f 2f 01	 comiss	 xmm0, DWORD PTR [rcx]
  0004e	76 09		 jbe	 SHORT $LN11@RenderRect
  00050	c6 85 f4 03 00
	00 01		 mov	 BYTE PTR tv69[rbp], 1
  00057	eb 07		 jmp	 SHORT $LN12@RenderRect
$LN11@RenderRect:
  00059	c6 85 f4 03 00
	00 00		 mov	 BYTE PTR tv69[rbp], 0
$LN12@RenderRect:
  00060	0f b6 85 f4 03
	00 00		 movzx	 eax, BYTE PTR tv69[rbp]
  00067	88 45 04	 mov	 BYTE PTR fill_L$[rbp], al

; 3892 :     const bool fill_R = (inner.Max.x < outer.Max.x);

  0006a	48 8b 85 38 04
	00 00		 mov	 rax, QWORD PTR outer$[rbp]
  00071	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR inner$[rbp]
  00078	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  0007d	0f 2f 41 08	 comiss	 xmm0, DWORD PTR [rcx+8]
  00081	76 09		 jbe	 SHORT $LN13@RenderRect
  00083	c6 85 f4 03 00
	00 01		 mov	 BYTE PTR tv75[rbp], 1
  0008a	eb 07		 jmp	 SHORT $LN14@RenderRect
$LN13@RenderRect:
  0008c	c6 85 f4 03 00
	00 00		 mov	 BYTE PTR tv75[rbp], 0
$LN14@RenderRect:
  00093	0f b6 85 f4 03
	00 00		 movzx	 eax, BYTE PTR tv75[rbp]
  0009a	88 45 24	 mov	 BYTE PTR fill_R$[rbp], al

; 3893 :     const bool fill_U = (inner.Min.y > outer.Min.y);

  0009d	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR inner$[rbp]
  000a4	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR outer$[rbp]
  000ab	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  000b0	0f 2f 41 04	 comiss	 xmm0, DWORD PTR [rcx+4]
  000b4	76 09		 jbe	 SHORT $LN15@RenderRect
  000b6	c6 85 f4 03 00
	00 01		 mov	 BYTE PTR tv81[rbp], 1
  000bd	eb 07		 jmp	 SHORT $LN16@RenderRect
$LN15@RenderRect:
  000bf	c6 85 f4 03 00
	00 00		 mov	 BYTE PTR tv81[rbp], 0
$LN16@RenderRect:
  000c6	0f b6 85 f4 03
	00 00		 movzx	 eax, BYTE PTR tv81[rbp]
  000cd	88 45 44	 mov	 BYTE PTR fill_U$[rbp], al

; 3894 :     const bool fill_D = (inner.Max.y < outer.Max.y);

  000d0	48 8b 85 38 04
	00 00		 mov	 rax, QWORD PTR outer$[rbp]
  000d7	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR inner$[rbp]
  000de	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [rax+12]
  000e3	0f 2f 41 0c	 comiss	 xmm0, DWORD PTR [rcx+12]
  000e7	76 09		 jbe	 SHORT $LN17@RenderRect
  000e9	c6 85 f4 03 00
	00 01		 mov	 BYTE PTR tv87[rbp], 1
  000f0	eb 07		 jmp	 SHORT $LN18@RenderRect
$LN17@RenderRect:
  000f2	c6 85 f4 03 00
	00 00		 mov	 BYTE PTR tv87[rbp], 0
$LN18@RenderRect:
  000f9	0f b6 85 f4 03
	00 00		 movzx	 eax, BYTE PTR tv87[rbp]
  00100	88 45 64	 mov	 BYTE PTR fill_D$[rbp], al

; 3895 :     if (fill_L) draw_list->AddRectFilled(ImVec2(outer.Min.x, inner.Min.y), ImVec2(inner.Min.x, inner.Max.y), col, rounding, ImDrawFlags_RoundCornersNone | (fill_U ? 0 : ImDrawFlags_RoundCornersTopLeft)    | (fill_D ? 0 : ImDrawFlags_RoundCornersBottomLeft));

  00103	0f b6 45 04	 movzx	 eax, BYTE PTR fill_L$[rbp]
  00107	85 c0		 test	 eax, eax
  00109	0f 84 d7 00 00
	00		 je	 $LN2@RenderRect
  0010f	0f b6 45 44	 movzx	 eax, BYTE PTR fill_U$[rbp]
  00113	85 c0		 test	 eax, eax
  00115	74 0c		 je	 SHORT $LN19@RenderRect
  00117	c7 85 f4 03 00
	00 00 00 00 00	 mov	 DWORD PTR tv93[rbp], 0
  00121	eb 0a		 jmp	 SHORT $LN20@RenderRect
$LN19@RenderRect:
  00123	c7 85 f4 03 00
	00 10 00 00 00	 mov	 DWORD PTR tv93[rbp], 16
$LN20@RenderRect:
  0012d	0f b6 45 64	 movzx	 eax, BYTE PTR fill_D$[rbp]
  00131	85 c0		 test	 eax, eax
  00133	74 0c		 je	 SHORT $LN21@RenderRect
  00135	c7 85 f8 03 00
	00 00 00 00 00	 mov	 DWORD PTR tv129[rbp], 0
  0013f	eb 0a		 jmp	 SHORT $LN22@RenderRect
$LN21@RenderRect:
  00141	c7 85 f8 03 00
	00 40 00 00 00	 mov	 DWORD PTR tv129[rbp], 64 ; 00000040H
$LN22@RenderRect:
  0014b	8b 85 f4 03 00
	00		 mov	 eax, DWORD PTR tv93[rbp]
  00151	0f ba e8 08	 bts	 eax, 8
  00155	0b 85 f8 03 00
	00		 or	 eax, DWORD PTR tv129[rbp]
  0015b	89 85 fc 03 00
	00		 mov	 DWORD PTR tv130[rbp], eax
  00161	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR inner$[rbp]
  00168	f3 0f 10 51 0c	 movss	 xmm2, DWORD PTR [rcx+12]
  0016d	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR inner$[rbp]
  00174	f3 0f 10 09	 movss	 xmm1, DWORD PTR [rcx]
  00178	48 8d 8d 04 02
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0017f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00184	48 89 85 00 04
	00 00		 mov	 QWORD PTR tv135[rbp], rax
  0018b	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR inner$[rbp]
  00192	f3 0f 10 51 04	 movss	 xmm2, DWORD PTR [rcx+4]
  00197	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR outer$[rbp]
  0019e	f3 0f 10 09	 movss	 xmm1, DWORD PTR [rcx]
  001a2	48 8d 8d 24 02
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  001a9	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001ae	8b 8d fc 03 00
	00		 mov	 ecx, DWORD PTR tv130[rbp]
  001b4	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  001b8	f3 0f 10 85 50
	04 00 00	 movss	 xmm0, DWORD PTR rounding$[rbp]
  001c0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  001c6	44 8b 8d 48 04
	00 00		 mov	 r9d, DWORD PTR col$[rbp]
  001cd	48 8b 8d 00 04
	00 00		 mov	 rcx, QWORD PTR tv135[rbp]
  001d4	4c 8b c1	 mov	 r8, rcx
  001d7	48 8b d0	 mov	 rdx, rax
  001da	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  001e1	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN2@RenderRect:

; 3896 :     if (fill_R) draw_list->AddRectFilled(ImVec2(inner.Max.x, inner.Min.y), ImVec2(outer.Max.x, inner.Max.y), col, rounding, ImDrawFlags_RoundCornersNone | (fill_U ? 0 : ImDrawFlags_RoundCornersTopRight)   | (fill_D ? 0 : ImDrawFlags_RoundCornersBottomRight));

  001e6	0f b6 45 24	 movzx	 eax, BYTE PTR fill_R$[rbp]
  001ea	85 c0		 test	 eax, eax
  001ec	0f 84 d9 00 00
	00		 je	 $LN3@RenderRect
  001f2	0f b6 45 44	 movzx	 eax, BYTE PTR fill_U$[rbp]
  001f6	85 c0		 test	 eax, eax
  001f8	74 0c		 je	 SHORT $LN23@RenderRect
  001fa	c7 85 f4 03 00
	00 00 00 00 00	 mov	 DWORD PTR tv157[rbp], 0
  00204	eb 0a		 jmp	 SHORT $LN24@RenderRect
$LN23@RenderRect:
  00206	c7 85 f4 03 00
	00 20 00 00 00	 mov	 DWORD PTR tv157[rbp], 32 ; 00000020H
$LN24@RenderRect:
  00210	0f b6 45 64	 movzx	 eax, BYTE PTR fill_D$[rbp]
  00214	85 c0		 test	 eax, eax
  00216	74 0c		 je	 SHORT $LN25@RenderRect
  00218	c7 85 f8 03 00
	00 00 00 00 00	 mov	 DWORD PTR tv161[rbp], 0
  00222	eb 0a		 jmp	 SHORT $LN26@RenderRect
$LN25@RenderRect:
  00224	c7 85 f8 03 00
	00 80 00 00 00	 mov	 DWORD PTR tv161[rbp], 128 ; 00000080H
$LN26@RenderRect:
  0022e	8b 85 f4 03 00
	00		 mov	 eax, DWORD PTR tv157[rbp]
  00234	0f ba e8 08	 bts	 eax, 8
  00238	0b 85 f8 03 00
	00		 or	 eax, DWORD PTR tv161[rbp]
  0023e	89 85 fc 03 00
	00		 mov	 DWORD PTR tv162[rbp], eax
  00244	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR inner$[rbp]
  0024b	f3 0f 10 51 0c	 movss	 xmm2, DWORD PTR [rcx+12]
  00250	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR outer$[rbp]
  00257	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [rcx+8]
  0025c	48 8d 8d 44 02
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  00263	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00268	48 89 85 00 04
	00 00		 mov	 QWORD PTR tv167[rbp], rax
  0026f	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR inner$[rbp]
  00276	f3 0f 10 51 04	 movss	 xmm2, DWORD PTR [rcx+4]
  0027b	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR inner$[rbp]
  00282	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [rcx+8]
  00287	48 8d 8d 64 02
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  0028e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00293	8b 8d fc 03 00
	00		 mov	 ecx, DWORD PTR tv162[rbp]
  00299	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  0029d	f3 0f 10 85 50
	04 00 00	 movss	 xmm0, DWORD PTR rounding$[rbp]
  002a5	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  002ab	44 8b 8d 48 04
	00 00		 mov	 r9d, DWORD PTR col$[rbp]
  002b2	48 8b 8d 00 04
	00 00		 mov	 rcx, QWORD PTR tv167[rbp]
  002b9	4c 8b c1	 mov	 r8, rcx
  002bc	48 8b d0	 mov	 rdx, rax
  002bf	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  002c6	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN3@RenderRect:

; 3897 :     if (fill_U) draw_list->AddRectFilled(ImVec2(inner.Min.x, outer.Min.y), ImVec2(inner.Max.x, inner.Min.y), col, rounding, ImDrawFlags_RoundCornersNone | (fill_L ? 0 : ImDrawFlags_RoundCornersTopLeft)    | (fill_R ? 0 : ImDrawFlags_RoundCornersTopRight));

  002cb	0f b6 45 44	 movzx	 eax, BYTE PTR fill_U$[rbp]
  002cf	85 c0		 test	 eax, eax
  002d1	0f 84 d8 00 00
	00		 je	 $LN4@RenderRect
  002d7	0f b6 45 04	 movzx	 eax, BYTE PTR fill_L$[rbp]
  002db	85 c0		 test	 eax, eax
  002dd	74 0c		 je	 SHORT $LN27@RenderRect
  002df	c7 85 f4 03 00
	00 00 00 00 00	 mov	 DWORD PTR tv189[rbp], 0
  002e9	eb 0a		 jmp	 SHORT $LN28@RenderRect
$LN27@RenderRect:
  002eb	c7 85 f4 03 00
	00 10 00 00 00	 mov	 DWORD PTR tv189[rbp], 16
$LN28@RenderRect:
  002f5	0f b6 45 24	 movzx	 eax, BYTE PTR fill_R$[rbp]
  002f9	85 c0		 test	 eax, eax
  002fb	74 0c		 je	 SHORT $LN29@RenderRect
  002fd	c7 85 f8 03 00
	00 00 00 00 00	 mov	 DWORD PTR tv193[rbp], 0
  00307	eb 0a		 jmp	 SHORT $LN30@RenderRect
$LN29@RenderRect:
  00309	c7 85 f8 03 00
	00 20 00 00 00	 mov	 DWORD PTR tv193[rbp], 32 ; 00000020H
$LN30@RenderRect:
  00313	8b 85 f4 03 00
	00		 mov	 eax, DWORD PTR tv189[rbp]
  00319	0f ba e8 08	 bts	 eax, 8
  0031d	0b 85 f8 03 00
	00		 or	 eax, DWORD PTR tv193[rbp]
  00323	89 85 fc 03 00
	00		 mov	 DWORD PTR tv194[rbp], eax
  00329	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR inner$[rbp]
  00330	f3 0f 10 51 04	 movss	 xmm2, DWORD PTR [rcx+4]
  00335	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR inner$[rbp]
  0033c	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [rcx+8]
  00341	48 8d 8d 84 02
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00348	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0034d	48 89 85 00 04
	00 00		 mov	 QWORD PTR tv199[rbp], rax
  00354	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR outer$[rbp]
  0035b	f3 0f 10 51 04	 movss	 xmm2, DWORD PTR [rcx+4]
  00360	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR inner$[rbp]
  00367	f3 0f 10 09	 movss	 xmm1, DWORD PTR [rcx]
  0036b	48 8d 8d a4 02
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00372	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00377	8b 8d fc 03 00
	00		 mov	 ecx, DWORD PTR tv194[rbp]
  0037d	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00381	f3 0f 10 85 50
	04 00 00	 movss	 xmm0, DWORD PTR rounding$[rbp]
  00389	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0038f	44 8b 8d 48 04
	00 00		 mov	 r9d, DWORD PTR col$[rbp]
  00396	48 8b 8d 00 04
	00 00		 mov	 rcx, QWORD PTR tv199[rbp]
  0039d	4c 8b c1	 mov	 r8, rcx
  003a0	48 8b d0	 mov	 rdx, rax
  003a3	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  003aa	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN4@RenderRect:

; 3898 :     if (fill_D) draw_list->AddRectFilled(ImVec2(inner.Min.x, inner.Max.y), ImVec2(inner.Max.x, outer.Max.y), col, rounding, ImDrawFlags_RoundCornersNone | (fill_L ? 0 : ImDrawFlags_RoundCornersBottomLeft) | (fill_R ? 0 : ImDrawFlags_RoundCornersBottomRight));

  003af	0f b6 45 64	 movzx	 eax, BYTE PTR fill_D$[rbp]
  003b3	85 c0		 test	 eax, eax
  003b5	0f 84 d8 00 00
	00		 je	 $LN5@RenderRect
  003bb	0f b6 45 04	 movzx	 eax, BYTE PTR fill_L$[rbp]
  003bf	85 c0		 test	 eax, eax
  003c1	74 0c		 je	 SHORT $LN31@RenderRect
  003c3	c7 85 f4 03 00
	00 00 00 00 00	 mov	 DWORD PTR tv221[rbp], 0
  003cd	eb 0a		 jmp	 SHORT $LN32@RenderRect
$LN31@RenderRect:
  003cf	c7 85 f4 03 00
	00 40 00 00 00	 mov	 DWORD PTR tv221[rbp], 64 ; 00000040H
$LN32@RenderRect:
  003d9	0f b6 45 24	 movzx	 eax, BYTE PTR fill_R$[rbp]
  003dd	85 c0		 test	 eax, eax
  003df	74 0c		 je	 SHORT $LN33@RenderRect
  003e1	c7 85 f8 03 00
	00 00 00 00 00	 mov	 DWORD PTR tv225[rbp], 0
  003eb	eb 0a		 jmp	 SHORT $LN34@RenderRect
$LN33@RenderRect:
  003ed	c7 85 f8 03 00
	00 80 00 00 00	 mov	 DWORD PTR tv225[rbp], 128 ; 00000080H
$LN34@RenderRect:
  003f7	8b 85 f4 03 00
	00		 mov	 eax, DWORD PTR tv221[rbp]
  003fd	0f ba e8 08	 bts	 eax, 8
  00401	0b 85 f8 03 00
	00		 or	 eax, DWORD PTR tv225[rbp]
  00407	89 85 fc 03 00
	00		 mov	 DWORD PTR tv226[rbp], eax
  0040d	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR outer$[rbp]
  00414	f3 0f 10 51 0c	 movss	 xmm2, DWORD PTR [rcx+12]
  00419	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR inner$[rbp]
  00420	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [rcx+8]
  00425	48 8d 8d c4 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  0042c	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00431	48 89 85 00 04
	00 00		 mov	 QWORD PTR tv231[rbp], rax
  00438	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR inner$[rbp]
  0043f	f3 0f 10 51 0c	 movss	 xmm2, DWORD PTR [rcx+12]
  00444	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR inner$[rbp]
  0044b	f3 0f 10 09	 movss	 xmm1, DWORD PTR [rcx]
  0044f	48 8d 8d e4 02
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00456	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0045b	8b 8d fc 03 00
	00		 mov	 ecx, DWORD PTR tv226[rbp]
  00461	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00465	f3 0f 10 85 50
	04 00 00	 movss	 xmm0, DWORD PTR rounding$[rbp]
  0046d	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00473	44 8b 8d 48 04
	00 00		 mov	 r9d, DWORD PTR col$[rbp]
  0047a	48 8b 8d 00 04
	00 00		 mov	 rcx, QWORD PTR tv231[rbp]
  00481	4c 8b c1	 mov	 r8, rcx
  00484	48 8b d0	 mov	 rdx, rax
  00487	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  0048e	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN5@RenderRect:

; 3899 :     if (fill_L && fill_U) draw_list->AddRectFilled(ImVec2(outer.Min.x, outer.Min.y), ImVec2(inner.Min.x, inner.Min.y), col, rounding, ImDrawFlags_RoundCornersTopLeft);

  00493	0f b6 45 04	 movzx	 eax, BYTE PTR fill_L$[rbp]
  00497	85 c0		 test	 eax, eax
  00499	0f 84 8f 00 00
	00		 je	 $LN6@RenderRect
  0049f	0f b6 45 44	 movzx	 eax, BYTE PTR fill_U$[rbp]
  004a3	85 c0		 test	 eax, eax
  004a5	0f 84 83 00 00
	00		 je	 $LN6@RenderRect
  004ab	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR inner$[rbp]
  004b2	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  004b7	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR inner$[rbp]
  004be	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  004c2	48 8d 8d 04 03
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  004c9	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  004ce	48 89 85 f8 03
	00 00		 mov	 QWORD PTR tv257[rbp], rax
  004d5	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR outer$[rbp]
  004dc	f3 0f 10 51 04	 movss	 xmm2, DWORD PTR [rcx+4]
  004e1	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR outer$[rbp]
  004e8	f3 0f 10 09	 movss	 xmm1, DWORD PTR [rcx]
  004ec	48 8d 8d 24 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  004f3	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  004f8	c7 44 24 28 10
	00 00 00	 mov	 DWORD PTR [rsp+40], 16
  00500	f3 0f 10 85 50
	04 00 00	 movss	 xmm0, DWORD PTR rounding$[rbp]
  00508	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0050e	44 8b 8d 48 04
	00 00		 mov	 r9d, DWORD PTR col$[rbp]
  00515	48 8b 8d f8 03
	00 00		 mov	 rcx, QWORD PTR tv257[rbp]
  0051c	4c 8b c1	 mov	 r8, rcx
  0051f	48 8b d0	 mov	 rdx, rax
  00522	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00529	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN6@RenderRect:

; 3900 :     if (fill_R && fill_U) draw_list->AddRectFilled(ImVec2(inner.Max.x, outer.Min.y), ImVec2(outer.Max.x, inner.Min.y), col, rounding, ImDrawFlags_RoundCornersTopRight);

  0052e	0f b6 45 24	 movzx	 eax, BYTE PTR fill_R$[rbp]
  00532	85 c0		 test	 eax, eax
  00534	0f 84 91 00 00
	00		 je	 $LN7@RenderRect
  0053a	0f b6 45 44	 movzx	 eax, BYTE PTR fill_U$[rbp]
  0053e	85 c0		 test	 eax, eax
  00540	0f 84 85 00 00
	00		 je	 $LN7@RenderRect
  00546	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR inner$[rbp]
  0054d	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  00552	48 8b 85 38 04
	00 00		 mov	 rax, QWORD PTR outer$[rbp]
  00559	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [rax+8]
  0055e	48 8d 8d 44 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00565	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0056a	48 89 85 f8 03
	00 00		 mov	 QWORD PTR tv283[rbp], rax
  00571	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR outer$[rbp]
  00578	f3 0f 10 51 04	 movss	 xmm2, DWORD PTR [rcx+4]
  0057d	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR inner$[rbp]
  00584	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [rcx+8]
  00589	48 8d 8d 64 03
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  00590	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00595	c7 44 24 28 20
	00 00 00	 mov	 DWORD PTR [rsp+40], 32	; 00000020H
  0059d	f3 0f 10 85 50
	04 00 00	 movss	 xmm0, DWORD PTR rounding$[rbp]
  005a5	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  005ab	44 8b 8d 48 04
	00 00		 mov	 r9d, DWORD PTR col$[rbp]
  005b2	48 8b 8d f8 03
	00 00		 mov	 rcx, QWORD PTR tv283[rbp]
  005b9	4c 8b c1	 mov	 r8, rcx
  005bc	48 8b d0	 mov	 rdx, rax
  005bf	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  005c6	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN7@RenderRect:

; 3901 :     if (fill_L && fill_D) draw_list->AddRectFilled(ImVec2(outer.Min.x, inner.Max.y), ImVec2(inner.Min.x, outer.Max.y), col, rounding, ImDrawFlags_RoundCornersBottomLeft);

  005cb	0f b6 45 04	 movzx	 eax, BYTE PTR fill_L$[rbp]
  005cf	85 c0		 test	 eax, eax
  005d1	0f 84 8f 00 00
	00		 je	 $LN8@RenderRect
  005d7	0f b6 45 64	 movzx	 eax, BYTE PTR fill_D$[rbp]
  005db	85 c0		 test	 eax, eax
  005dd	0f 84 83 00 00
	00		 je	 $LN8@RenderRect
  005e3	48 8b 85 38 04
	00 00		 mov	 rax, QWORD PTR outer$[rbp]
  005ea	f3 0f 10 50 0c	 movss	 xmm2, DWORD PTR [rax+12]
  005ef	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR inner$[rbp]
  005f6	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  005fa	48 8d 8d 84 03
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  00601	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00606	48 89 85 f8 03
	00 00		 mov	 QWORD PTR tv309[rbp], rax
  0060d	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR inner$[rbp]
  00614	f3 0f 10 51 0c	 movss	 xmm2, DWORD PTR [rcx+12]
  00619	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR outer$[rbp]
  00620	f3 0f 10 09	 movss	 xmm1, DWORD PTR [rcx]
  00624	48 8d 8d a4 03
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  0062b	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00630	c7 44 24 28 40
	00 00 00	 mov	 DWORD PTR [rsp+40], 64	; 00000040H
  00638	f3 0f 10 85 50
	04 00 00	 movss	 xmm0, DWORD PTR rounding$[rbp]
  00640	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00646	44 8b 8d 48 04
	00 00		 mov	 r9d, DWORD PTR col$[rbp]
  0064d	48 8b 8d f8 03
	00 00		 mov	 rcx, QWORD PTR tv309[rbp]
  00654	4c 8b c1	 mov	 r8, rcx
  00657	48 8b d0	 mov	 rdx, rax
  0065a	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00661	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN8@RenderRect:

; 3902 :     if (fill_R && fill_D) draw_list->AddRectFilled(ImVec2(inner.Max.x, inner.Max.y), ImVec2(outer.Max.x, outer.Max.y), col, rounding, ImDrawFlags_RoundCornersBottomRight);

  00666	0f b6 45 24	 movzx	 eax, BYTE PTR fill_R$[rbp]
  0066a	85 c0		 test	 eax, eax
  0066c	0f 84 91 00 00
	00		 je	 $LN9@RenderRect
  00672	0f b6 45 64	 movzx	 eax, BYTE PTR fill_D$[rbp]
  00676	85 c0		 test	 eax, eax
  00678	0f 84 85 00 00
	00		 je	 $LN9@RenderRect
  0067e	48 8b 85 38 04
	00 00		 mov	 rax, QWORD PTR outer$[rbp]
  00685	f3 0f 10 50 0c	 movss	 xmm2, DWORD PTR [rax+12]
  0068a	48 8b 85 38 04
	00 00		 mov	 rax, QWORD PTR outer$[rbp]
  00691	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [rax+8]
  00696	48 8d 8d c4 03
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  0069d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  006a2	48 89 85 f8 03
	00 00		 mov	 QWORD PTR tv335[rbp], rax
  006a9	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR inner$[rbp]
  006b0	f3 0f 10 51 0c	 movss	 xmm2, DWORD PTR [rcx+12]
  006b5	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR inner$[rbp]
  006bc	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [rcx+8]
  006c1	48 8d 8d e4 03
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  006c8	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  006cd	c7 44 24 28 80
	00 00 00	 mov	 DWORD PTR [rsp+40], 128	; 00000080H
  006d5	f3 0f 10 85 50
	04 00 00	 movss	 xmm0, DWORD PTR rounding$[rbp]
  006dd	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  006e3	44 8b 8d 48 04
	00 00		 mov	 r9d, DWORD PTR col$[rbp]
  006ea	48 8b 8d f8 03
	00 00		 mov	 rcx, QWORD PTR tv335[rbp]
  006f1	4c 8b c1	 mov	 r8, rcx
  006f4	48 8b d0	 mov	 rdx, rax
  006f7	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  006fe	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN9@RenderRect:

; 3903 : }

  00703	48 8d a5 18 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1048]
  0070a	5f		 pop	 rdi
  0070b	5d		 pop	 rbp
  0070c	c3		 ret	 0
?RenderRectFilledWithHole@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@1IM@Z ENDP ; ImGui::RenderRectFilledWithHole
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z
_TEXT	SEGMENT
p0$ = 8
p1$ = 40
inv_rounding$ = 68
arc0_b$ = 100
arc0_e$ = 132
half_pi$ = 164
x0$ = 196
arc1_b$5 = 228
arc1_e$6 = 260
x1$7 = 292
$T8 = 708
$T9 = 740
$T10 = 772
$T11 = 804
$T12 = 836
$T13 = 868
$T14 = 900
$T15 = 932
$T16 = 964
$T17 = 996
$T18 = 1028
$T19 = 1060
tv328 = 1076
tv224 = 1076
tv211 = 1076
tv149 = 1076
tv330 = 1080
tv226 = 1080
tv213 = 1080
__$ArrayPad$ = 1088
draw_list$ = 1136
rect$ = 1144
col$ = 1152
x_start_norm$ = 1160
x_end_norm$ = 1168
rounding$ = 1176
?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z PROC ; ImGui::RenderRectFilledRangeH, COMDAT

; 3830 : {

$LN15:
  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec 88 04
	00 00		 sub	 rsp, 1160		; 00000488H
  0001e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 22 01 00 00	 mov	 ecx, 290		; 00000122H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 a8
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1192]
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 40 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3831 :     if (x_end_norm == x_start_norm)

  0004b	f3 0f 10 85 90
	04 00 00	 movss	 xmm0, DWORD PTR x_end_norm$[rbp]
  00053	0f 2e 85 88 04
	00 00		 ucomiss xmm0, DWORD PTR x_start_norm$[rbp]
  0005a	7a 07		 jp	 SHORT $LN2@RenderRect
  0005c	75 05		 jne	 SHORT $LN2@RenderRect

; 3832 :         return;

  0005e	e9 10 07 00 00	 jmp	 $LN1@RenderRect
$LN2@RenderRect:

; 3833 :     if (x_start_norm > x_end_norm)

  00063	f3 0f 10 85 88
	04 00 00	 movss	 xmm0, DWORD PTR x_start_norm$[rbp]
  0006b	0f 2f 85 90 04
	00 00		 comiss	 xmm0, DWORD PTR x_end_norm$[rbp]
  00072	76 13		 jbe	 SHORT $LN3@RenderRect

; 3834 :         ImSwap(x_start_norm, x_end_norm);

  00074	48 8d 95 90 04
	00 00		 lea	 rdx, QWORD PTR x_end_norm$[rbp]
  0007b	48 8d 8d 88 04
	00 00		 lea	 rcx, QWORD PTR x_start_norm$[rbp]
  00082	e8 00 00 00 00	 call	 ??$ImSwap@M@@YAXAEAM0@Z	; ImSwap<float>
$LN3@RenderRect:

; 3835 : 
; 3836 :     ImVec2 p0 = ImVec2(ImLerp(rect.Min.x, rect.Max.x, x_start_norm), rect.Min.y);

  00087	f3 0f 10 95 88
	04 00 00	 movss	 xmm2, DWORD PTR x_start_norm$[rbp]
  0008f	48 8b 85 78 04
	00 00		 mov	 rax, QWORD PTR rect$[rbp]
  00096	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [rax+8]
  0009b	48 8b 85 78 04
	00 00		 mov	 rax, QWORD PTR rect$[rbp]
  000a2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  000a6	e8 00 00 00 00	 call	 ??$ImLerp@M@@YAMMMM@Z	; ImLerp<float>
  000ab	48 8b 85 78 04
	00 00		 mov	 rax, QWORD PTR rect$[rbp]
  000b2	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  000b7	0f 28 c8	 movaps	 xmm1, xmm0
  000ba	48 8d 4d 08	 lea	 rcx, QWORD PTR p0$[rbp]
  000be	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 3837 :     ImVec2 p1 = ImVec2(ImLerp(rect.Min.x, rect.Max.x, x_end_norm), rect.Max.y);

  000c3	f3 0f 10 95 90
	04 00 00	 movss	 xmm2, DWORD PTR x_end_norm$[rbp]
  000cb	48 8b 85 78 04
	00 00		 mov	 rax, QWORD PTR rect$[rbp]
  000d2	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [rax+8]
  000d7	48 8b 85 78 04
	00 00		 mov	 rax, QWORD PTR rect$[rbp]
  000de	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  000e2	e8 00 00 00 00	 call	 ??$ImLerp@M@@YAMMMM@Z	; ImLerp<float>
  000e7	48 8b 85 78 04
	00 00		 mov	 rax, QWORD PTR rect$[rbp]
  000ee	f3 0f 10 50 0c	 movss	 xmm2, DWORD PTR [rax+12]
  000f3	0f 28 c8	 movaps	 xmm1, xmm0
  000f6	48 8d 4d 28	 lea	 rcx, QWORD PTR p1$[rbp]
  000fa	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 3838 :     if (rounding == 0.0f)

  000ff	f3 0f 10 85 98
	04 00 00	 movss	 xmm0, DWORD PTR rounding$[rbp]
  00107	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0010e	7a 33		 jp	 SHORT $LN4@RenderRect
  00110	75 31		 jne	 SHORT $LN4@RenderRect

; 3839 :     {
; 3840 :         draw_list->AddRectFilled(p0, p1, col, 0.0f);

  00112	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0011a	0f 57 c0	 xorps	 xmm0, xmm0
  0011d	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00123	44 8b 8d 80 04
	00 00		 mov	 r9d, DWORD PTR col$[rbp]
  0012a	4c 8d 45 28	 lea	 r8, QWORD PTR p1$[rbp]
  0012e	48 8d 55 08	 lea	 rdx, QWORD PTR p0$[rbp]
  00132	48 8b 8d 70 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00139	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled

; 3841 :         return;

  0013e	e9 30 06 00 00	 jmp	 $LN1@RenderRect
$LN4@RenderRect:

; 3842 :     }
; 3843 : 
; 3844 :     rounding = ImClamp(ImMin((rect.Max.x - rect.Min.x) * 0.5f, (rect.Max.y - rect.Min.y) * 0.5f) - 1.0f, 0.0f, rounding);

  00143	48 8b 85 78 04
	00 00		 mov	 rax, QWORD PTR rect$[rbp]
  0014a	48 8b 8d 78 04
	00 00		 mov	 rcx, QWORD PTR rect$[rbp]
  00151	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [rax+12]
  00156	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [rcx+4]
  0015b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00163	48 8b 85 78 04
	00 00		 mov	 rax, QWORD PTR rect$[rbp]
  0016a	48 8b 8d 78 04
	00 00		 mov	 rcx, QWORD PTR rect$[rbp]
  00171	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [rax+8]
  00176	f3 0f 5c 09	 subss	 xmm1, DWORD PTR [rcx]
  0017a	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  00182	f3 0f 11 8d 34
	04 00 00	 movss	 DWORD PTR tv149[rbp], xmm1
  0018a	0f 28 c8	 movaps	 xmm1, xmm0
  0018d	f3 0f 10 85 34
	04 00 00	 movss	 xmm0, DWORD PTR tv149[rbp]
  00195	e8 00 00 00 00	 call	 ??$ImMin@M@@YAMMM@Z	; ImMin<float>
  0019a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  001a2	f3 0f 10 95 98
	04 00 00	 movss	 xmm2, DWORD PTR rounding$[rbp]
  001aa	0f 57 c9	 xorps	 xmm1, xmm1
  001ad	e8 00 00 00 00	 call	 ??$ImClamp@M@@YAMMMM@Z	; ImClamp<float>
  001b2	f3 0f 11 85 98
	04 00 00	 movss	 DWORD PTR rounding$[rbp], xmm0

; 3845 :     const float inv_rounding = 1.0f / rounding;

  001ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001c2	f3 0f 5e 85 98
	04 00 00	 divss	 xmm0, DWORD PTR rounding$[rbp]
  001ca	f3 0f 11 45 44	 movss	 DWORD PTR inv_rounding$[rbp], xmm0

; 3846 :     const float arc0_b = ImAcos01(1.0f - (p0.x - rect.Min.x) * inv_rounding);

  001cf	48 8b 85 78 04
	00 00		 mov	 rax, QWORD PTR rect$[rbp]
  001d6	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR p0$[rbp]
  001db	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [rax]
  001df	f3 0f 59 45 44	 mulss	 xmm0, DWORD PTR inv_rounding$[rbp]
  001e4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  001ec	f3 0f 5c c8	 subss	 xmm1, xmm0
  001f0	0f 28 c1	 movaps	 xmm0, xmm1
  001f3	e8 00 00 00 00	 call	 ?ImAcos01@@YAMM@Z	; ImAcos01
  001f8	f3 0f 11 45 64	 movss	 DWORD PTR arc0_b$[rbp], xmm0

; 3847 :     const float arc0_e = ImAcos01(1.0f - (p1.x - rect.Min.x) * inv_rounding);

  001fd	48 8b 85 78 04
	00 00		 mov	 rax, QWORD PTR rect$[rbp]
  00204	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR p1$[rbp]
  00209	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [rax]
  0020d	f3 0f 59 45 44	 mulss	 xmm0, DWORD PTR inv_rounding$[rbp]
  00212	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0021a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0021e	0f 28 c1	 movaps	 xmm0, xmm1
  00221	e8 00 00 00 00	 call	 ?ImAcos01@@YAMM@Z	; ImAcos01
  00226	f3 0f 11 85 84
	00 00 00	 movss	 DWORD PTR arc0_e$[rbp], xmm0

; 3848 :     const float half_pi = IM_PI * 0.5f; // We will == compare to this because we know this is the exact value ImAcos01 can return.

  0022e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00236	f3 0f 11 85 a4
	00 00 00	 movss	 DWORD PTR half_pi$[rbp], xmm0

; 3849 :     const float x0 = ImMax(p0.x, rect.Min.x + rounding);

  0023e	48 8b 85 78 04
	00 00		 mov	 rax, QWORD PTR rect$[rbp]
  00245	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00249	f3 0f 58 85 98
	04 00 00	 addss	 xmm0, DWORD PTR rounding$[rbp]
  00251	0f 28 c8	 movaps	 xmm1, xmm0
  00254	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR p0$[rbp]
  00259	e8 00 00 00 00	 call	 ??$ImMax@M@@YAMMM@Z	; ImMax<float>
  0025e	f3 0f 11 85 c4
	00 00 00	 movss	 DWORD PTR x0$[rbp], xmm0

; 3850 :     if (arc0_b == arc0_e)

  00266	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR arc0_b$[rbp]
  0026b	0f 2e 85 84 00
	00 00		 ucomiss xmm0, DWORD PTR arc0_e$[rbp]
  00272	7a 57		 jp	 SHORT $LN5@RenderRect
  00274	75 55		 jne	 SHORT $LN5@RenderRect

; 3851 :     {
; 3852 :         draw_list->PathLineTo(ImVec2(x0, p1.y));

  00276	f3 0f 10 55 2c	 movss	 xmm2, DWORD PTR p1$[rbp+4]
  0027b	f3 0f 10 8d c4
	00 00 00	 movss	 xmm1, DWORD PTR x0$[rbp]
  00283	48 8d 8d c4 02
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0028a	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0028f	48 8b d0	 mov	 rdx, rax
  00292	48 8b 8d 70 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00299	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 3853 :         draw_list->PathLineTo(ImVec2(x0, p0.y));

  0029e	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR p0$[rbp+4]
  002a3	f3 0f 10 8d c4
	00 00 00	 movss	 xmm1, DWORD PTR x0$[rbp]
  002ab	48 8d 8d e4 02
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  002b2	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  002b7	48 8b d0	 mov	 rdx, rax
  002ba	48 8b 8d 70 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  002c1	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
  002c6	e9 d6 01 00 00	 jmp	 $LN6@RenderRect
$LN5@RenderRect:

; 3854 :     }
; 3855 :     else if (arc0_b == 0.0f && arc0_e == half_pi)

  002cb	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR arc0_b$[rbp]
  002d0	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  002d7	0f 8a b8 00 00
	00		 jp	 $LN7@RenderRect
  002dd	0f 85 b2 00 00
	00		 jne	 $LN7@RenderRect
  002e3	f3 0f 10 85 84
	00 00 00	 movss	 xmm0, DWORD PTR arc0_e$[rbp]
  002eb	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3fc90fdb
  002f2	0f 8a 9d 00 00
	00		 jp	 $LN7@RenderRect
  002f8	0f 85 97 00 00
	00		 jne	 $LN7@RenderRect

; 3856 :     {
; 3857 :         draw_list->PathArcToFast(ImVec2(x0, p1.y - rounding), rounding, 3, 6); // BL

  002fe	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR p1$[rbp+4]
  00303	f3 0f 5c 85 98
	04 00 00	 subss	 xmm0, DWORD PTR rounding$[rbp]
  0030b	0f 28 d0	 movaps	 xmm2, xmm0
  0030e	f3 0f 10 8d c4
	00 00 00	 movss	 xmm1, DWORD PTR x0$[rbp]
  00316	48 8d 8d 04 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  0031d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00322	c7 44 24 20 06
	00 00 00	 mov	 DWORD PTR [rsp+32], 6
  0032a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00330	f3 0f 10 95 98
	04 00 00	 movss	 xmm2, DWORD PTR rounding$[rbp]
  00338	48 8b d0	 mov	 rdx, rax
  0033b	48 8b 8d 70 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00342	e8 00 00 00 00	 call	 ?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast

; 3858 :         draw_list->PathArcToFast(ImVec2(x0, p0.y + rounding), rounding, 6, 9); // TR

  00347	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR p0$[rbp+4]
  0034c	f3 0f 58 85 98
	04 00 00	 addss	 xmm0, DWORD PTR rounding$[rbp]
  00354	0f 28 d0	 movaps	 xmm2, xmm0
  00357	f3 0f 10 8d c4
	00 00 00	 movss	 xmm1, DWORD PTR x0$[rbp]
  0035f	48 8d 8d 24 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00366	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0036b	c7 44 24 20 09
	00 00 00	 mov	 DWORD PTR [rsp+32], 9
  00373	41 b9 06 00 00
	00		 mov	 r9d, 6
  00379	f3 0f 10 95 98
	04 00 00	 movss	 xmm2, DWORD PTR rounding$[rbp]
  00381	48 8b d0	 mov	 rdx, rax
  00384	48 8b 8d 70 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  0038b	e8 00 00 00 00	 call	 ?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast

; 3859 :     }
; 3860 :     else

  00390	e9 0c 01 00 00	 jmp	 $LN8@RenderRect
$LN7@RenderRect:

; 3861 :     {
; 3862 :         draw_list->PathArcTo(ImVec2(x0, p1.y - rounding), rounding, IM_PI - arc0_e, IM_PI - arc0_b, 3); // BL

  00395	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40490fdb
  0039d	f3 0f 5c 45 64	 subss	 xmm0, DWORD PTR arc0_b$[rbp]
  003a2	f3 0f 11 85 34
	04 00 00	 movss	 DWORD PTR tv211[rbp], xmm0
  003aa	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40490fdb
  003b2	f3 0f 5c 8d 84
	00 00 00	 subss	 xmm1, DWORD PTR arc0_e$[rbp]
  003ba	f3 0f 11 8d 38
	04 00 00	 movss	 DWORD PTR tv213[rbp], xmm1
  003c2	f3 0f 10 55 2c	 movss	 xmm2, DWORD PTR p1$[rbp+4]
  003c7	f3 0f 5c 95 98
	04 00 00	 subss	 xmm2, DWORD PTR rounding$[rbp]
  003cf	f3 0f 10 8d c4
	00 00 00	 movss	 xmm1, DWORD PTR x0$[rbp]
  003d7	48 8d 8d 44 03
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  003de	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  003e3	c7 44 24 28 03
	00 00 00	 mov	 DWORD PTR [rsp+40], 3
  003eb	f3 0f 10 85 34
	04 00 00	 movss	 xmm0, DWORD PTR tv211[rbp]
  003f3	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  003f9	f3 0f 10 85 38
	04 00 00	 movss	 xmm0, DWORD PTR tv213[rbp]
  00401	0f 28 d8	 movaps	 xmm3, xmm0
  00404	f3 0f 10 95 98
	04 00 00	 movss	 xmm2, DWORD PTR rounding$[rbp]
  0040c	48 8b d0	 mov	 rdx, rax
  0040f	48 8b 8d 70 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00416	e8 00 00 00 00	 call	 ?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::PathArcTo

; 3863 :         draw_list->PathArcTo(ImVec2(x0, p0.y + rounding), rounding, IM_PI + arc0_b, IM_PI + arc0_e, 3); // TR

  0041b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40490fdb
  00423	f3 0f 58 85 84
	00 00 00	 addss	 xmm0, DWORD PTR arc0_e$[rbp]
  0042b	f3 0f 11 85 34
	04 00 00	 movss	 DWORD PTR tv224[rbp], xmm0
  00433	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40490fdb
  0043b	f3 0f 58 4d 64	 addss	 xmm1, DWORD PTR arc0_b$[rbp]
  00440	f3 0f 11 8d 38
	04 00 00	 movss	 DWORD PTR tv226[rbp], xmm1
  00448	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR p0$[rbp+4]
  0044d	f3 0f 58 95 98
	04 00 00	 addss	 xmm2, DWORD PTR rounding$[rbp]
  00455	f3 0f 10 8d c4
	00 00 00	 movss	 xmm1, DWORD PTR x0$[rbp]
  0045d	48 8d 8d 64 03
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  00464	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00469	c7 44 24 28 03
	00 00 00	 mov	 DWORD PTR [rsp+40], 3
  00471	f3 0f 10 85 34
	04 00 00	 movss	 xmm0, DWORD PTR tv224[rbp]
  00479	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0047f	f3 0f 10 85 38
	04 00 00	 movss	 xmm0, DWORD PTR tv226[rbp]
  00487	0f 28 d8	 movaps	 xmm3, xmm0
  0048a	f3 0f 10 95 98
	04 00 00	 movss	 xmm2, DWORD PTR rounding$[rbp]
  00492	48 8b d0	 mov	 rdx, rax
  00495	48 8b 8d 70 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  0049c	e8 00 00 00 00	 call	 ?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::PathArcTo
$LN8@RenderRect:
$LN6@RenderRect:

; 3864 :     }
; 3865 :     if (p1.x > rect.Min.x + rounding)

  004a1	48 8b 85 78 04
	00 00		 mov	 rax, QWORD PTR rect$[rbp]
  004a8	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  004ac	f3 0f 58 85 98
	04 00 00	 addss	 xmm0, DWORD PTR rounding$[rbp]
  004b4	f3 0f 10 4d 28	 movss	 xmm1, DWORD PTR p1$[rbp]
  004b9	0f 2f c8	 comiss	 xmm1, xmm0
  004bc	0f 86 9f 02 00
	00		 jbe	 $LN9@RenderRect

; 3866 :     {
; 3867 :         const float arc1_b = ImAcos01(1.0f - (rect.Max.x - p1.x) * inv_rounding);

  004c2	48 8b 85 78 04
	00 00		 mov	 rax, QWORD PTR rect$[rbp]
  004c9	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  004ce	f3 0f 5c 45 28	 subss	 xmm0, DWORD PTR p1$[rbp]
  004d3	f3 0f 59 45 44	 mulss	 xmm0, DWORD PTR inv_rounding$[rbp]
  004d8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  004e0	f3 0f 5c c8	 subss	 xmm1, xmm0
  004e4	0f 28 c1	 movaps	 xmm0, xmm1
  004e7	e8 00 00 00 00	 call	 ?ImAcos01@@YAMM@Z	; ImAcos01
  004ec	f3 0f 11 85 e4
	00 00 00	 movss	 DWORD PTR arc1_b$5[rbp], xmm0

; 3868 :         const float arc1_e = ImAcos01(1.0f - (rect.Max.x - p0.x) * inv_rounding);

  004f4	48 8b 85 78 04
	00 00		 mov	 rax, QWORD PTR rect$[rbp]
  004fb	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  00500	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR p0$[rbp]
  00505	f3 0f 59 45 44	 mulss	 xmm0, DWORD PTR inv_rounding$[rbp]
  0050a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00512	f3 0f 5c c8	 subss	 xmm1, xmm0
  00516	0f 28 c1	 movaps	 xmm0, xmm1
  00519	e8 00 00 00 00	 call	 ?ImAcos01@@YAMM@Z	; ImAcos01
  0051e	f3 0f 11 85 04
	01 00 00	 movss	 DWORD PTR arc1_e$6[rbp], xmm0

; 3869 :         const float x1 = ImMin(p1.x, rect.Max.x - rounding);

  00526	48 8b 85 78 04
	00 00		 mov	 rax, QWORD PTR rect$[rbp]
  0052d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  00532	f3 0f 5c 85 98
	04 00 00	 subss	 xmm0, DWORD PTR rounding$[rbp]
  0053a	0f 28 c8	 movaps	 xmm1, xmm0
  0053d	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR p1$[rbp]
  00542	e8 00 00 00 00	 call	 ??$ImMin@M@@YAMMM@Z	; ImMin<float>
  00547	f3 0f 11 85 24
	01 00 00	 movss	 DWORD PTR x1$7[rbp], xmm0

; 3870 :         if (arc1_b == arc1_e)

  0054f	f3 0f 10 85 e4
	00 00 00	 movss	 xmm0, DWORD PTR arc1_b$5[rbp]
  00557	0f 2e 85 04 01
	00 00		 ucomiss xmm0, DWORD PTR arc1_e$6[rbp]
  0055e	7a 57		 jp	 SHORT $LN10@RenderRect
  00560	75 55		 jne	 SHORT $LN10@RenderRect

; 3871 :         {
; 3872 :             draw_list->PathLineTo(ImVec2(x1, p0.y));

  00562	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR p0$[rbp+4]
  00567	f3 0f 10 8d 24
	01 00 00	 movss	 xmm1, DWORD PTR x1$7[rbp]
  0056f	48 8d 8d 84 03
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  00576	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0057b	48 8b d0	 mov	 rdx, rax
  0057e	48 8b 8d 70 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00585	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 3873 :             draw_list->PathLineTo(ImVec2(x1, p1.y));

  0058a	f3 0f 10 55 2c	 movss	 xmm2, DWORD PTR p1$[rbp+4]
  0058f	f3 0f 10 8d 24
	01 00 00	 movss	 xmm1, DWORD PTR x1$7[rbp]
  00597	48 8d 8d a4 03
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  0059e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  005a3	48 8b d0	 mov	 rdx, rax
  005a6	48 8b 8d 70 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  005ad	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
  005b2	e9 aa 01 00 00	 jmp	 $LN11@RenderRect
$LN10@RenderRect:

; 3874 :         }
; 3875 :         else if (arc1_b == 0.0f && arc1_e == half_pi)

  005b7	f3 0f 10 85 e4
	00 00 00	 movss	 xmm0, DWORD PTR arc1_b$5[rbp]
  005bf	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  005c6	0f 8a b5 00 00
	00		 jp	 $LN12@RenderRect
  005cc	0f 85 af 00 00
	00		 jne	 $LN12@RenderRect
  005d2	f3 0f 10 85 04
	01 00 00	 movss	 xmm0, DWORD PTR arc1_e$6[rbp]
  005da	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3fc90fdb
  005e1	0f 8a 9a 00 00
	00		 jp	 $LN12@RenderRect
  005e7	0f 85 94 00 00
	00		 jne	 $LN12@RenderRect

; 3876 :         {
; 3877 :             draw_list->PathArcToFast(ImVec2(x1, p0.y + rounding), rounding, 9, 12); // TR

  005ed	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR p0$[rbp+4]
  005f2	f3 0f 58 85 98
	04 00 00	 addss	 xmm0, DWORD PTR rounding$[rbp]
  005fa	0f 28 d0	 movaps	 xmm2, xmm0
  005fd	f3 0f 10 8d 24
	01 00 00	 movss	 xmm1, DWORD PTR x1$7[rbp]
  00605	48 8d 8d c4 03
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  0060c	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00611	c7 44 24 20 0c
	00 00 00	 mov	 DWORD PTR [rsp+32], 12
  00619	41 b9 09 00 00
	00		 mov	 r9d, 9
  0061f	f3 0f 10 95 98
	04 00 00	 movss	 xmm2, DWORD PTR rounding$[rbp]
  00627	48 8b d0	 mov	 rdx, rax
  0062a	48 8b 8d 70 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00631	e8 00 00 00 00	 call	 ?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast

; 3878 :             draw_list->PathArcToFast(ImVec2(x1, p1.y - rounding), rounding, 0, 3);  // BR

  00636	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR p1$[rbp+4]
  0063b	f3 0f 5c 85 98
	04 00 00	 subss	 xmm0, DWORD PTR rounding$[rbp]
  00643	0f 28 d0	 movaps	 xmm2, xmm0
  00646	f3 0f 10 8d 24
	01 00 00	 movss	 xmm1, DWORD PTR x1$7[rbp]
  0064e	48 8d 8d e4 03
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  00655	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0065a	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR [rsp+32], 3
  00662	45 33 c9	 xor	 r9d, r9d
  00665	f3 0f 10 95 98
	04 00 00	 movss	 xmm2, DWORD PTR rounding$[rbp]
  0066d	48 8b d0	 mov	 rdx, rax
  00670	48 8b 8d 70 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00677	e8 00 00 00 00	 call	 ?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast

; 3879 :         }
; 3880 :         else

  0067c	e9 e0 00 00 00	 jmp	 $LN13@RenderRect
$LN12@RenderRect:

; 3881 :         {
; 3882 :             draw_list->PathArcTo(ImVec2(x1, p0.y + rounding), rounding, -arc1_e, -arc1_b, 3); // TR

  00681	f3 0f 10 85 e4
	00 00 00	 movss	 xmm0, DWORD PTR arc1_b$5[rbp]
  00689	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00690	f3 0f 11 85 34
	04 00 00	 movss	 DWORD PTR tv328[rbp], xmm0
  00698	f3 0f 10 8d 04
	01 00 00	 movss	 xmm1, DWORD PTR arc1_e$6[rbp]
  006a0	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  006a7	f3 0f 11 8d 38
	04 00 00	 movss	 DWORD PTR tv330[rbp], xmm1
  006af	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR p0$[rbp+4]
  006b4	f3 0f 58 95 98
	04 00 00	 addss	 xmm2, DWORD PTR rounding$[rbp]
  006bc	f3 0f 10 8d 24
	01 00 00	 movss	 xmm1, DWORD PTR x1$7[rbp]
  006c4	48 8d 8d 04 04
	00 00		 lea	 rcx, QWORD PTR $T18[rbp]
  006cb	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  006d0	c7 44 24 28 03
	00 00 00	 mov	 DWORD PTR [rsp+40], 3
  006d8	f3 0f 10 85 34
	04 00 00	 movss	 xmm0, DWORD PTR tv328[rbp]
  006e0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  006e6	f3 0f 10 85 38
	04 00 00	 movss	 xmm0, DWORD PTR tv330[rbp]
  006ee	0f 28 d8	 movaps	 xmm3, xmm0
  006f1	f3 0f 10 95 98
	04 00 00	 movss	 xmm2, DWORD PTR rounding$[rbp]
  006f9	48 8b d0	 mov	 rdx, rax
  006fc	48 8b 8d 70 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00703	e8 00 00 00 00	 call	 ?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::PathArcTo

; 3883 :             draw_list->PathArcTo(ImVec2(x1, p1.y - rounding), rounding, +arc1_b, +arc1_e, 3); // BR

  00708	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR p1$[rbp+4]
  0070d	f3 0f 5c 85 98
	04 00 00	 subss	 xmm0, DWORD PTR rounding$[rbp]
  00715	0f 28 d0	 movaps	 xmm2, xmm0
  00718	f3 0f 10 8d 24
	01 00 00	 movss	 xmm1, DWORD PTR x1$7[rbp]
  00720	48 8d 8d 24 04
	00 00		 lea	 rcx, QWORD PTR $T19[rbp]
  00727	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0072c	c7 44 24 28 03
	00 00 00	 mov	 DWORD PTR [rsp+40], 3
  00734	f3 0f 10 85 04
	01 00 00	 movss	 xmm0, DWORD PTR arc1_e$6[rbp]
  0073c	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00742	f3 0f 10 9d e4
	00 00 00	 movss	 xmm3, DWORD PTR arc1_b$5[rbp]
  0074a	f3 0f 10 95 98
	04 00 00	 movss	 xmm2, DWORD PTR rounding$[rbp]
  00752	48 8b d0	 mov	 rdx, rax
  00755	48 8b 8d 70 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  0075c	e8 00 00 00 00	 call	 ?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::PathArcTo
$LN13@RenderRect:
$LN11@RenderRect:
$LN9@RenderRect:

; 3884 :         }
; 3885 :     }
; 3886 :     draw_list->PathFillConvex(col);

  00761	8b 95 80 04 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  00767	48 8b 8d 70 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  0076e	e8 00 00 00 00	 call	 ?PathFillConvex@ImDrawList@@QEAAXI@Z ; ImDrawList::PathFillConvex
$LN1@RenderRect:

; 3887 : }

  00773	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00777	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z$rtcFrameData
  0077e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00783	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0078a	48 33 cd	 xor	 rcx, rbp
  0078d	e8 00 00 00 00	 call	 __security_check_cookie
  00792	48 8d a5 58 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1112]
  00799	5f		 pop	 rdi
  0079a	5d		 pop	 rbp
  0079b	c3		 ret	 0
?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z ENDP ; ImGui::RenderRectFilledRangeH
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
$T4 = 292
$T5 = 324
$T6 = 356
$T7 = 388
$T8 = 420
tv64 = 436
tv152 = 440
tv135 = 440
tv86 = 440
tv69 = 440
draw_list$ = 480
pos$ = 488
half_sz$ = 496
direction$ = 504
col$ = 512
?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z PROC ; ImGui::RenderArrowPointingAt, COMDAT

; 3809 : {

$LN10:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 01
	00 00		 sub	 rsp, 504		; 000001f8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 7e 00 00 00	 mov	 ecx, 126		; 0000007eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR [rsp+536]

; 3810 :     switch (direction)

  00039	8b 85 f8 01 00
	00		 mov	 eax, DWORD PTR direction$[rbp]
  0003f	89 85 b4 01 00
	00		 mov	 DWORD PTR tv64[rbp], eax
  00045	83 bd b4 01 00
	00 00		 cmp	 DWORD PTR tv64[rbp], 0
  0004c	74 2c		 je	 SHORT $LN4@RenderArro
  0004e	83 bd b4 01 00
	00 01		 cmp	 DWORD PTR tv64[rbp], 1
  00055	0f 84 b3 00 00
	00		 je	 $LN5@RenderArro
  0005b	83 bd b4 01 00
	00 02		 cmp	 DWORD PTR tv64[rbp], 2
  00062	0f 84 3a 01 00
	00		 je	 $LN6@RenderArro
  00068	83 bd b4 01 00
	00 03		 cmp	 DWORD PTR tv64[rbp], 3
  0006f	0f 84 c1 01 00
	00		 je	 $LN7@RenderArro
  00075	e9 4b 02 00 00	 jmp	 $LN2@RenderArro
$LN4@RenderArro:

; 3811 :     {
; 3812 :     case ImGuiDir_Left:  draw_list->AddTriangleFilled(ImVec2(pos.x + half_sz.x, pos.y - half_sz.y), ImVec2(pos.x + half_sz.x, pos.y + half_sz.y), pos, col); return;

  0007a	f3 0f 10 85 ec
	01 00 00	 movss	 xmm0, DWORD PTR pos$[rbp+4]
  00082	f3 0f 58 85 f4
	01 00 00	 addss	 xmm0, DWORD PTR half_sz$[rbp+4]
  0008a	f3 0f 10 8d e8
	01 00 00	 movss	 xmm1, DWORD PTR pos$[rbp]
  00092	f3 0f 58 8d f0
	01 00 00	 addss	 xmm1, DWORD PTR half_sz$[rbp]
  0009a	0f 28 d0	 movaps	 xmm2, xmm0
  0009d	48 8d 8d c4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  000a4	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000a9	48 89 85 b8 01
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  000b0	f3 0f 10 85 ec
	01 00 00	 movss	 xmm0, DWORD PTR pos$[rbp+4]
  000b8	f3 0f 5c 85 f4
	01 00 00	 subss	 xmm0, DWORD PTR half_sz$[rbp+4]
  000c0	f3 0f 10 8d e8
	01 00 00	 movss	 xmm1, DWORD PTR pos$[rbp]
  000c8	f3 0f 58 8d f0
	01 00 00	 addss	 xmm1, DWORD PTR half_sz$[rbp]
  000d0	0f 28 d0	 movaps	 xmm2, xmm0
  000d3	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  000da	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000df	8b 8d 00 02 00
	00		 mov	 ecx, DWORD PTR col$[rbp]
  000e5	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e9	4c 8d 8d e8 01
	00 00		 lea	 r9, QWORD PTR pos$[rbp]
  000f0	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR tv69[rbp]
  000f7	4c 8b c1	 mov	 r8, rcx
  000fa	48 8b d0	 mov	 rdx, rax
  000fd	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00104	e8 00 00 00 00	 call	 ?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z ; ImDrawList::AddTriangleFilled
  00109	e9 b7 01 00 00	 jmp	 $LN1@RenderArro
$LN5@RenderArro:

; 3813 :     case ImGuiDir_Right: draw_list->AddTriangleFilled(ImVec2(pos.x - half_sz.x, pos.y + half_sz.y), ImVec2(pos.x - half_sz.x, pos.y - half_sz.y), pos, col); return;

  0010e	f3 0f 10 85 ec
	01 00 00	 movss	 xmm0, DWORD PTR pos$[rbp+4]
  00116	f3 0f 5c 85 f4
	01 00 00	 subss	 xmm0, DWORD PTR half_sz$[rbp+4]
  0011e	f3 0f 10 8d e8
	01 00 00	 movss	 xmm1, DWORD PTR pos$[rbp]
  00126	f3 0f 5c 8d f0
	01 00 00	 subss	 xmm1, DWORD PTR half_sz$[rbp]
  0012e	0f 28 d0	 movaps	 xmm2, xmm0
  00131	48 8d 8d 04 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  00138	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0013d	48 89 85 b8 01
	00 00		 mov	 QWORD PTR tv86[rbp], rax
  00144	f3 0f 10 85 ec
	01 00 00	 movss	 xmm0, DWORD PTR pos$[rbp+4]
  0014c	f3 0f 58 85 f4
	01 00 00	 addss	 xmm0, DWORD PTR half_sz$[rbp+4]
  00154	f3 0f 10 8d e8
	01 00 00	 movss	 xmm1, DWORD PTR pos$[rbp]
  0015c	f3 0f 5c 8d f0
	01 00 00	 subss	 xmm1, DWORD PTR half_sz$[rbp]
  00164	0f 28 d0	 movaps	 xmm2, xmm0
  00167	48 8d 8d 24 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  0016e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00173	8b 8d 00 02 00
	00		 mov	 ecx, DWORD PTR col$[rbp]
  00179	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0017d	4c 8d 8d e8 01
	00 00		 lea	 r9, QWORD PTR pos$[rbp]
  00184	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR tv86[rbp]
  0018b	4c 8b c1	 mov	 r8, rcx
  0018e	48 8b d0	 mov	 rdx, rax
  00191	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00198	e8 00 00 00 00	 call	 ?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z ; ImDrawList::AddTriangleFilled
  0019d	e9 23 01 00 00	 jmp	 $LN1@RenderArro
$LN6@RenderArro:

; 3814 :     case ImGuiDir_Up:    draw_list->AddTriangleFilled(ImVec2(pos.x + half_sz.x, pos.y + half_sz.y), ImVec2(pos.x - half_sz.x, pos.y + half_sz.y), pos, col); return;

  001a2	f3 0f 10 85 ec
	01 00 00	 movss	 xmm0, DWORD PTR pos$[rbp+4]
  001aa	f3 0f 58 85 f4
	01 00 00	 addss	 xmm0, DWORD PTR half_sz$[rbp+4]
  001b2	f3 0f 10 8d e8
	01 00 00	 movss	 xmm1, DWORD PTR pos$[rbp]
  001ba	f3 0f 5c 8d f0
	01 00 00	 subss	 xmm1, DWORD PTR half_sz$[rbp]
  001c2	0f 28 d0	 movaps	 xmm2, xmm0
  001c5	48 8d 8d 44 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  001cc	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001d1	48 89 85 b8 01
	00 00		 mov	 QWORD PTR tv135[rbp], rax
  001d8	f3 0f 10 85 ec
	01 00 00	 movss	 xmm0, DWORD PTR pos$[rbp+4]
  001e0	f3 0f 58 85 f4
	01 00 00	 addss	 xmm0, DWORD PTR half_sz$[rbp+4]
  001e8	f3 0f 10 8d e8
	01 00 00	 movss	 xmm1, DWORD PTR pos$[rbp]
  001f0	f3 0f 58 8d f0
	01 00 00	 addss	 xmm1, DWORD PTR half_sz$[rbp]
  001f8	0f 28 d0	 movaps	 xmm2, xmm0
  001fb	48 8d 8d 64 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00202	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00207	8b 8d 00 02 00
	00		 mov	 ecx, DWORD PTR col$[rbp]
  0020d	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00211	4c 8d 8d e8 01
	00 00		 lea	 r9, QWORD PTR pos$[rbp]
  00218	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR tv135[rbp]
  0021f	4c 8b c1	 mov	 r8, rcx
  00222	48 8b d0	 mov	 rdx, rax
  00225	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  0022c	e8 00 00 00 00	 call	 ?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z ; ImDrawList::AddTriangleFilled
  00231	e9 8f 00 00 00	 jmp	 $LN1@RenderArro
$LN7@RenderArro:

; 3815 :     case ImGuiDir_Down:  draw_list->AddTriangleFilled(ImVec2(pos.x - half_sz.x, pos.y - half_sz.y), ImVec2(pos.x + half_sz.x, pos.y - half_sz.y), pos, col); return;

  00236	f3 0f 10 85 ec
	01 00 00	 movss	 xmm0, DWORD PTR pos$[rbp+4]
  0023e	f3 0f 5c 85 f4
	01 00 00	 subss	 xmm0, DWORD PTR half_sz$[rbp+4]
  00246	f3 0f 10 8d e8
	01 00 00	 movss	 xmm1, DWORD PTR pos$[rbp]
  0024e	f3 0f 58 8d f0
	01 00 00	 addss	 xmm1, DWORD PTR half_sz$[rbp]
  00256	0f 28 d0	 movaps	 xmm2, xmm0
  00259	48 8d 8d 84 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00260	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00265	48 89 85 b8 01
	00 00		 mov	 QWORD PTR tv152[rbp], rax
  0026c	f3 0f 10 85 ec
	01 00 00	 movss	 xmm0, DWORD PTR pos$[rbp+4]
  00274	f3 0f 5c 85 f4
	01 00 00	 subss	 xmm0, DWORD PTR half_sz$[rbp+4]
  0027c	f3 0f 10 8d e8
	01 00 00	 movss	 xmm1, DWORD PTR pos$[rbp]
  00284	f3 0f 5c 8d f0
	01 00 00	 subss	 xmm1, DWORD PTR half_sz$[rbp]
  0028c	0f 28 d0	 movaps	 xmm2, xmm0
  0028f	48 8d 8d a4 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00296	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0029b	8b 8d 00 02 00
	00		 mov	 ecx, DWORD PTR col$[rbp]
  002a1	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  002a5	4c 8d 8d e8 01
	00 00		 lea	 r9, QWORD PTR pos$[rbp]
  002ac	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR tv152[rbp]
  002b3	4c 8b c1	 mov	 r8, rcx
  002b6	48 8b d0	 mov	 rdx, rax
  002b9	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  002c0	e8 00 00 00 00	 call	 ?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z ; ImDrawList::AddTriangleFilled
$LN2@RenderArro:
$LN1@RenderArro:

; 3816 :     case ImGuiDir_None: case ImGuiDir_COUNT: break; // Fix warnings
; 3817 :     }
; 3818 : }

  002c5	48 8d a5 c8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+456]
  002cc	5f		 pop	 rdi
  002cd	5d		 pop	 rbp
  002ce	c3		 ret	 0
?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z ENDP ; ImGui::RenderArrowPointingAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?RenderCheckMark@ImGui@@YAXPEAUImDrawList@@UImVec2@@IM@Z
_TEXT	SEGMENT
thickness$ = 4
third$ = 36
bx$ = 68
by$ = 100
$T1 = 324
$T2 = 356
$T3 = 388
$T4 = 420
draw_list$ = 480
pos$ = 488
col$ = 496
sz$ = 504
?RenderCheckMark@ImGui@@YAXPEAUImDrawList@@UImVec2@@IM@Z PROC ; ImGui::RenderCheckMark, COMDAT

; 3793 : {

$LN3:
  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec e8 01
	00 00		 sub	 rsp, 488		; 000001e8H
  0001e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR [rsp+520]

; 3794 :     float thickness = ImMax(sz / 5.0f, 1.0f);

  0003a	f3 0f 10 85 f8
	01 00 00	 movss	 xmm0, DWORD PTR sz$[rbp]
  00042	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40a00000
  0004a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00052	e8 00 00 00 00	 call	 ??$ImMax@M@@YAMMM@Z	; ImMax<float>
  00057	f3 0f 11 45 04	 movss	 DWORD PTR thickness$[rbp], xmm0

; 3795 :     sz -= thickness * 0.5f;

  0005c	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR thickness$[rbp]
  00061	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00069	f3 0f 10 8d f8
	01 00 00	 movss	 xmm1, DWORD PTR sz$[rbp]
  00071	f3 0f 5c c8	 subss	 xmm1, xmm0
  00075	0f 28 c1	 movaps	 xmm0, xmm1
  00078	f3 0f 11 85 f8
	01 00 00	 movss	 DWORD PTR sz$[rbp], xmm0

; 3796 :     pos += ImVec2(thickness * 0.25f, thickness * 0.25f);

  00080	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR thickness$[rbp]
  00085	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  0008d	f3 0f 10 4d 04	 movss	 xmm1, DWORD PTR thickness$[rbp]
  00092	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3e800000
  0009a	0f 28 d0	 movaps	 xmm2, xmm0
  0009d	48 8d 8d 44 01
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  000a4	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000a9	48 8b d0	 mov	 rdx, rax
  000ac	48 8d 8d e8 01
	00 00		 lea	 rcx, QWORD PTR pos$[rbp]
  000b3	e8 00 00 00 00	 call	 ??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z ; operator+=

; 3797 : 
; 3798 :     float third = sz / 3.0f;

  000b8	f3 0f 10 85 f8
	01 00 00	 movss	 xmm0, DWORD PTR sz$[rbp]
  000c0	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40400000
  000c8	f3 0f 11 45 24	 movss	 DWORD PTR third$[rbp], xmm0

; 3799 :     float bx = pos.x + third;

  000cd	f3 0f 10 85 e8
	01 00 00	 movss	 xmm0, DWORD PTR pos$[rbp]
  000d5	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR third$[rbp]
  000da	f3 0f 11 45 44	 movss	 DWORD PTR bx$[rbp], xmm0

; 3800 :     float by = pos.y + sz - third * 0.5f;

  000df	f3 0f 10 85 ec
	01 00 00	 movss	 xmm0, DWORD PTR pos$[rbp+4]
  000e7	f3 0f 58 85 f8
	01 00 00	 addss	 xmm0, DWORD PTR sz$[rbp]
  000ef	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR third$[rbp]
  000f4	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  000fc	f3 0f 5c c1	 subss	 xmm0, xmm1
  00100	f3 0f 11 45 64	 movss	 DWORD PTR by$[rbp], xmm0

; 3801 :     draw_list->PathLineTo(ImVec2(bx - third, by - third));

  00105	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR by$[rbp]
  0010a	f3 0f 5c 45 24	 subss	 xmm0, DWORD PTR third$[rbp]
  0010f	f3 0f 10 4d 44	 movss	 xmm1, DWORD PTR bx$[rbp]
  00114	f3 0f 5c 4d 24	 subss	 xmm1, DWORD PTR third$[rbp]
  00119	0f 28 d0	 movaps	 xmm2, xmm0
  0011c	48 8d 8d 64 01
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  00123	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00128	48 8b d0	 mov	 rdx, rax
  0012b	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00132	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 3802 :     draw_list->PathLineTo(ImVec2(bx, by));

  00137	f3 0f 10 55 64	 movss	 xmm2, DWORD PTR by$[rbp]
  0013c	f3 0f 10 4d 44	 movss	 xmm1, DWORD PTR bx$[rbp]
  00141	48 8d 8d 84 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  00148	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0014d	48 8b d0	 mov	 rdx, rax
  00150	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00157	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 3803 :     draw_list->PathLineTo(ImVec2(bx + third * 2.0f, by - third * 2.0f));

  0015c	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR third$[rbp]
  00161	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00169	f3 0f 10 4d 64	 movss	 xmm1, DWORD PTR by$[rbp]
  0016e	f3 0f 5c c8	 subss	 xmm1, xmm0
  00172	0f 28 c1	 movaps	 xmm0, xmm1
  00175	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR third$[rbp]
  0017a	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  00182	f3 0f 10 55 44	 movss	 xmm2, DWORD PTR bx$[rbp]
  00187	f3 0f 58 d1	 addss	 xmm2, xmm1
  0018b	0f 28 ca	 movaps	 xmm1, xmm2
  0018e	0f 28 d0	 movaps	 xmm2, xmm0
  00191	48 8d 8d a4 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00198	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0019d	48 8b d0	 mov	 rdx, rax
  001a0	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  001a7	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 3804 :     draw_list->PathStroke(col, 0, thickness);

  001ac	f3 0f 10 5d 04	 movss	 xmm3, DWORD PTR thickness$[rbp]
  001b1	45 33 c0	 xor	 r8d, r8d
  001b4	8b 95 f0 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  001ba	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  001c1	e8 00 00 00 00	 call	 ?PathStroke@ImDrawList@@QEAAXIHM@Z ; ImDrawList::PathStroke

; 3805 : }

  001c6	48 8d a5 c8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+456]
  001cd	5f		 pop	 rdi
  001ce	5d		 pop	 rbp
  001cf	c3		 ret	 0
?RenderCheckMark@ImGui@@YAXPEAUImDrawList@@UImVec2@@IM@Z ENDP ; ImGui::RenderCheckMark
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z
_TEXT	SEGMENT
draw_list$ = 224
pos$ = 232
col$ = 240
?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z PROC ; ImGui::RenderBullet, COMDAT

; 3788 : {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 3789 :     draw_list->AddCircleFilled(pos, draw_list->_Data->FontSize * 0.20f, col, 8);

  00034	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  0003b	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0003f	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  00044	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e4ccccd
  0004c	c7 44 24 20 08
	00 00 00	 mov	 DWORD PTR [rsp+32], 8
  00054	44 8b 8d f0 00
	00 00		 mov	 r9d, DWORD PTR col$[rbp]
  0005b	0f 28 d0	 movaps	 xmm2, xmm0
  0005e	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR pos$[rbp]
  00065	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  0006c	e8 00 00 00 00	 call	 ?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z ; ImDrawList::AddCircleFilled

; 3790 : }

  00071	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00078	5f		 pop	 rdi
  00079	5d		 pop	 rbp
  0007a	c3		 ret	 0
?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z ENDP ; ImGui::RenderBullet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z
_TEXT	SEGMENT
h$ = 4
r$ = 36
center$ = 72
a$ = 104
b$ = 136
c$ = 168
$T7 = 580
$T8 = 612
$T9 = 644
$T10 = 676
$T11 = 708
$T12 = 740
$T13 = 772
$T14 = 804
$T15 = 836
$T16 = 868
$T17 = 900
$T18 = 932
$T19 = 964
$T20 = 996
$T21 = 1028
$T22 = 1060
tv82 = 1076
tv183 = 1080
tv188 = 1088
__$ArrayPad$ = 1096
draw_list$ = 1136
pos$ = 1144
col$ = 1152
dir$ = 1160
scale$ = 1168
?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z PROC ; ImGui::RenderArrow, COMDAT

; 3757 : {

$LN12:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 88 04
	00 00		 sub	 rsp, 1160		; 00000488H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 22 01 00 00	 mov	 ecx, 290		; 00000122H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 a8
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1192]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 48 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3758 :     const float h = draw_list->_Data->FontSize * 1.00f;

  0004a	48 8b 85 70 04
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  00051	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00055	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  0005a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f800000
  00062	f3 0f 11 45 04	 movss	 DWORD PTR h$[rbp], xmm0

; 3759 :     float r = h * 0.40f * scale;

  00067	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR h$[rbp]
  0006c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ecccccd
  00074	f3 0f 59 85 90
	04 00 00	 mulss	 xmm0, DWORD PTR scale$[rbp]
  0007c	f3 0f 11 45 24	 movss	 DWORD PTR r$[rbp], xmm0

; 3760 :     ImVec2 center = pos + ImVec2(h * 0.50f, h * 0.50f * scale);

  00081	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR h$[rbp]
  00086	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0008e	f3 0f 59 85 90
	04 00 00	 mulss	 xmm0, DWORD PTR scale$[rbp]
  00096	f3 0f 10 4d 04	 movss	 xmm1, DWORD PTR h$[rbp]
  0009b	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  000a3	0f 28 d0	 movaps	 xmm2, xmm0
  000a6	48 8d 8d 44 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  000ad	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000b2	4c 8b c0	 mov	 r8, rax
  000b5	48 8d 95 78 04
	00 00		 lea	 rdx, QWORD PTR pos$[rbp]
  000bc	48 8d 4d 48	 lea	 rcx, QWORD PTR center$[rbp]
  000c0	e8 00 00 00 00	 call	 ??H@YA?AUImVec2@@AEBU0@0@Z ; operator+

; 3761 : 
; 3762 :     ImVec2 a, b, c;

  000c5	48 8d 4d 68	 lea	 rcx, QWORD PTR a$[rbp]
  000c9	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@XZ	; ImVec2::ImVec2
  000ce	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR b$[rbp]
  000d5	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@XZ	; ImVec2::ImVec2
  000da	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR c$[rbp]
  000e1	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@XZ	; ImVec2::ImVec2

; 3763 :     switch (dir)

  000e6	8b 85 88 04 00
	00		 mov	 eax, DWORD PTR dir$[rbp]
  000ec	89 85 34 04 00
	00		 mov	 DWORD PTR tv82[rbp], eax
  000f2	8b 85 34 04 00
	00		 mov	 eax, DWORD PTR tv82[rbp]
  000f8	ff c0		 inc	 eax
  000fa	89 85 34 04 00
	00		 mov	 DWORD PTR tv82[rbp], eax
  00100	83 bd 34 04 00
	00 05		 cmp	 DWORD PTR tv82[rbp], 5
  00107	0f 87 c9 01 00
	00		 ja	 $LN2@RenderArro
  0010d	48 63 85 34 04
	00 00		 movsxd	 rax, DWORD PTR tv82[rbp]
  00114	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0011b	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN11@RenderArro[rcx+rax*4]
  00122	48 03 c1	 add	 rax, rcx
  00125	ff e0		 jmp	 rax
$LN4@RenderArro:

; 3764 :     {
; 3765 :     case ImGuiDir_Up:
; 3766 :     case ImGuiDir_Down:
; 3767 :         if (dir == ImGuiDir_Up) r = -r;

  00127	83 bd 88 04 00
	00 02		 cmp	 DWORD PTR dir$[rbp], 2
  0012e	75 11		 jne	 SHORT $LN5@RenderArro
  00130	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR r$[rbp]
  00135	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0013c	f3 0f 11 45 24	 movss	 DWORD PTR r$[rbp], xmm0
$LN5@RenderArro:

; 3768 :         a = ImVec2(+0.000f, +0.750f) * r;

  00141	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f400000
  00149	0f 57 c9	 xorps	 xmm1, xmm1
  0014c	48 8d 8d 64 02
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00153	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00158	f3 0f 10 55 24	 movss	 xmm2, DWORD PTR r$[rbp]
  0015d	48 8b d0	 mov	 rdx, rax
  00160	48 8d 8d 84 02
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  00167	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@M@Z ; operator*
  0016c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0016f	48 89 45 68	 mov	 QWORD PTR a$[rbp], rax

; 3769 :         b = ImVec2(-0.866f, -0.750f) * r;

  00173	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf400000
  0017b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf5db22d
  00183	48 8d 8d a4 02
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  0018a	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0018f	f3 0f 10 55 24	 movss	 xmm2, DWORD PTR r$[rbp]
  00194	48 8b d0	 mov	 rdx, rax
  00197	48 8d 8d c4 02
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  0019e	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@M@Z ; operator*
  001a3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001a6	48 89 85 88 00
	00 00		 mov	 QWORD PTR b$[rbp], rax

; 3770 :         c = ImVec2(+0.866f, -0.750f) * r;

  001ad	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf400000
  001b5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f5db22d
  001bd	48 8d 8d e4 02
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  001c4	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001c9	f3 0f 10 55 24	 movss	 xmm2, DWORD PTR r$[rbp]
  001ce	48 8b d0	 mov	 rdx, rax
  001d1	48 8d 8d 04 03
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  001d8	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@M@Z ; operator*
  001dd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001e0	48 89 85 a8 00
	00 00		 mov	 QWORD PTR c$[rbp], rax

; 3771 :         break;

  001e7	e9 ea 00 00 00	 jmp	 $LN2@RenderArro
$LN6@RenderArro:

; 3772 :     case ImGuiDir_Left:
; 3773 :     case ImGuiDir_Right:
; 3774 :         if (dir == ImGuiDir_Left) r = -r;

  001ec	83 bd 88 04 00
	00 00		 cmp	 DWORD PTR dir$[rbp], 0
  001f3	75 11		 jne	 SHORT $LN7@RenderArro
  001f5	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR r$[rbp]
  001fa	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00201	f3 0f 11 45 24	 movss	 DWORD PTR r$[rbp], xmm0
$LN7@RenderArro:

; 3775 :         a = ImVec2(+0.750f, +0.000f) * r;

  00206	0f 57 d2	 xorps	 xmm2, xmm2
  00209	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f400000
  00211	48 8d 8d 24 03
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  00218	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0021d	f3 0f 10 55 24	 movss	 xmm2, DWORD PTR r$[rbp]
  00222	48 8b d0	 mov	 rdx, rax
  00225	48 8d 8d 44 03
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  0022c	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@M@Z ; operator*
  00231	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00234	48 89 45 68	 mov	 QWORD PTR a$[rbp], rax

; 3776 :         b = ImVec2(-0.750f, +0.866f) * r;

  00238	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f5db22d
  00240	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf400000
  00248	48 8d 8d 64 03
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  0024f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00254	f3 0f 10 55 24	 movss	 xmm2, DWORD PTR r$[rbp]
  00259	48 8b d0	 mov	 rdx, rax
  0025c	48 8d 8d 84 03
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  00263	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@M@Z ; operator*
  00268	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0026b	48 89 85 88 00
	00 00		 mov	 QWORD PTR b$[rbp], rax

; 3777 :         c = ImVec2(-0.750f, -0.866f) * r;

  00272	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf5db22d
  0027a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf400000
  00282	48 8d 8d a4 03
	00 00		 lea	 rcx, QWORD PTR $T18[rbp]
  00289	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0028e	f3 0f 10 55 24	 movss	 xmm2, DWORD PTR r$[rbp]
  00293	48 8b d0	 mov	 rdx, rax
  00296	48 8d 8d c4 03
	00 00		 lea	 rcx, QWORD PTR $T19[rbp]
  0029d	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@M@Z ; operator*
  002a2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002a5	48 89 85 a8 00
	00 00		 mov	 QWORD PTR c$[rbp], rax

; 3778 :         break;

  002ac	eb 28		 jmp	 SHORT $LN2@RenderArro
$LN8@RenderArro:

; 3779 :     case ImGuiDir_None:
; 3780 :     case ImGuiDir_COUNT:
; 3781 :         IM_ASSERT(0);

  002ae	33 c0		 xor	 eax, eax
  002b0	85 c0		 test	 eax, eax
  002b2	75 22		 jne	 SHORT $LN10@RenderArro
  002b4	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z@4JA
  002ba	83 c0 18	 add	 eax, 24
  002bd	44 8b c0	 mov	 r8d, eax
  002c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  002c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  002ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002d4	33 c0		 xor	 eax, eax
$LN10@RenderArro:
$LN2@RenderArro:

; 3782 :         break;
; 3783 :     }
; 3784 :     draw_list->AddTriangleFilled(center + a, center + b, center + c, col);

  002d6	4c 8d 85 a8 00
	00 00		 lea	 r8, QWORD PTR c$[rbp]
  002dd	48 8d 55 48	 lea	 rdx, QWORD PTR center$[rbp]
  002e1	48 8d 8d e4 03
	00 00		 lea	 rcx, QWORD PTR $T20[rbp]
  002e8	e8 00 00 00 00	 call	 ??H@YA?AUImVec2@@AEBU0@0@Z ; operator+
  002ed	48 89 85 38 04
	00 00		 mov	 QWORD PTR tv183[rbp], rax
  002f4	4c 8d 85 88 00
	00 00		 lea	 r8, QWORD PTR b$[rbp]
  002fb	48 8d 55 48	 lea	 rdx, QWORD PTR center$[rbp]
  002ff	48 8d 8d 04 04
	00 00		 lea	 rcx, QWORD PTR $T21[rbp]
  00306	e8 00 00 00 00	 call	 ??H@YA?AUImVec2@@AEBU0@0@Z ; operator+
  0030b	48 89 85 40 04
	00 00		 mov	 QWORD PTR tv188[rbp], rax
  00312	4c 8d 45 68	 lea	 r8, QWORD PTR a$[rbp]
  00316	48 8d 55 48	 lea	 rdx, QWORD PTR center$[rbp]
  0031a	48 8d 8d 24 04
	00 00		 lea	 rcx, QWORD PTR $T22[rbp]
  00321	e8 00 00 00 00	 call	 ??H@YA?AUImVec2@@AEBU0@0@Z ; operator+
  00326	8b 8d 80 04 00
	00		 mov	 ecx, DWORD PTR col$[rbp]
  0032c	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00330	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR tv183[rbp]
  00337	4c 8b c9	 mov	 r9, rcx
  0033a	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR tv188[rbp]
  00341	4c 8b c1	 mov	 r8, rcx
  00344	48 8b d0	 mov	 rdx, rax
  00347	48 8b 8d 70 04
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  0034e	e8 00 00 00 00	 call	 ?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z ; ImDrawList::AddTriangleFilled

; 3785 : }

  00353	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00357	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcFrameData
  0035e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00363	48 8b 8d 48 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0036a	48 33 cd	 xor	 rcx, rbp
  0036d	e8 00 00 00 00	 call	 __security_check_cookie
  00372	48 8d a5 58 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1112]
  00379	5f		 pop	 rdi
  0037a	5d		 pop	 rbp
  0037b	c3		 ret	 0
$LN11@RenderArro:
  0037c	00 00 00 00	 DD	 $LN8@RenderArro
  00380	00 00 00 00	 DD	 $LN6@RenderArro
  00384	00 00 00 00	 DD	 $LN6@RenderArro
  00388	00 00 00 00	 DD	 $LN4@RenderArro
  0038c	00 00 00 00	 DD	 $LN4@RenderArro
  00390	00 00 00 00	 DD	 $LN8@RenderArro
?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z ENDP ; ImGui::RenderArrow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z
_TEXT	SEGMENT
col_bg1$1 = 4
col_bg2$2 = 36
yi$3 = 68
y$4 = 100
y1$5 = 132
y2$6 = 164
x$7 = 196
x1$8 = 228
x2$9 = 260
cell_flags$10 = 292
$T11 = 516
$T12 = 548
tv160 = 564
tv166 = 568
draw_list$ = 608
p_min$ = 616
p_max$ = 624
col$ = 632
grid_step$ = 640
grid_off$ = 648
rounding$ = 656
flags$ = 664
?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z PROC ; ImGui::RenderColorRectWithAlphaCheckerboard, COMDAT

; 3910 : {

$LN22:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 78 02
	00 00		 sub	 rsp, 632		; 00000278H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 9e 00 00 00	 mov	 ecx, 158		; 0000009eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR [rsp+664]

; 3911 :     if ((flags & ImDrawFlags_RoundCornersMask_) == 0)

  00039	8b 85 98 02 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  0003f	25 f0 01 00 00	 and	 eax, 496		; 000001f0H
  00044	85 c0		 test	 eax, eax
  00046	75 0a		 jne	 SHORT $LN8@RenderColo

; 3912 :         flags = ImDrawFlags_RoundCornersDefault_;

  00048	c7 85 98 02 00
	00 f0 00 00 00	 mov	 DWORD PTR flags$[rbp], 240 ; 000000f0H
$LN8@RenderColo:

; 3913 :     if (((col & IM_COL32_A_MASK) >> IM_COL32_A_SHIFT) < 0xFF)

  00052	8b 85 78 02 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  00058	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  0005d	c1 e8 18	 shr	 eax, 24
  00060	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00065	0f 83 4d 03 00
	00		 jae	 $LN9@RenderColo

; 3914 :     {
; 3915 :         ImU32 col_bg1 = GetColorU32(ImAlphaBlendColors(IM_COL32(204, 204, 204, 255), col));

  0006b	8b 95 78 02 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  00071	b9 cc cc cc ff	 mov	 ecx, -3355444		; ffccccccH
  00076	e8 00 00 00 00	 call	 ?ImAlphaBlendColors@@YAIII@Z ; ImAlphaBlendColors
  0007b	8b c8		 mov	 ecx, eax
  0007d	e8 00 00 00 00	 call	 ?GetColorU32@ImGui@@YAII@Z ; ImGui::GetColorU32
  00082	89 45 04	 mov	 DWORD PTR col_bg1$1[rbp], eax

; 3916 :         ImU32 col_bg2 = GetColorU32(ImAlphaBlendColors(IM_COL32(128, 128, 128, 255), col));

  00085	8b 95 78 02 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  0008b	b9 80 80 80 ff	 mov	 ecx, -8355712		; ff808080H
  00090	e8 00 00 00 00	 call	 ?ImAlphaBlendColors@@YAIII@Z ; ImAlphaBlendColors
  00095	8b c8		 mov	 ecx, eax
  00097	e8 00 00 00 00	 call	 ?GetColorU32@ImGui@@YAII@Z ; ImGui::GetColorU32
  0009c	89 45 24	 mov	 DWORD PTR col_bg2$2[rbp], eax

; 3917 :         draw_list->AddRectFilled(p_min, p_max, col_bg1, rounding, flags);

  0009f	8b 85 98 02 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  000a5	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000a9	f3 0f 10 85 90
	02 00 00	 movss	 xmm0, DWORD PTR rounding$[rbp]
  000b1	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  000b7	44 8b 4d 04	 mov	 r9d, DWORD PTR col_bg1$1[rbp]
  000bb	4c 8d 85 70 02
	00 00		 lea	 r8, QWORD PTR p_max$[rbp]
  000c2	48 8d 95 68 02
	00 00		 lea	 rdx, QWORD PTR p_min$[rbp]
  000c9	48 8b 8d 60 02
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  000d0	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled

; 3918 : 
; 3919 :         int yi = 0;

  000d5	c7 45 44 00 00
	00 00		 mov	 DWORD PTR yi$3[rbp], 0

; 3920 :         for (float y = p_min.y + grid_off.y; y < p_max.y; y += grid_step, yi++)

  000dc	f3 0f 10 85 6c
	02 00 00	 movss	 xmm0, DWORD PTR p_min$[rbp+4]
  000e4	f3 0f 58 85 8c
	02 00 00	 addss	 xmm0, DWORD PTR grid_off$[rbp+4]
  000ec	f3 0f 11 45 64	 movss	 DWORD PTR y$4[rbp], xmm0
  000f1	eb 1a		 jmp	 SHORT $LN4@RenderColo
$LN2@RenderColo:
  000f3	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR y$4[rbp]
  000f8	f3 0f 58 85 80
	02 00 00	 addss	 xmm0, DWORD PTR grid_step$[rbp]
  00100	f3 0f 11 45 64	 movss	 DWORD PTR y$4[rbp], xmm0
  00105	8b 45 44	 mov	 eax, DWORD PTR yi$3[rbp]
  00108	ff c0		 inc	 eax
  0010a	89 45 44	 mov	 DWORD PTR yi$3[rbp], eax
$LN4@RenderColo:
  0010d	f3 0f 10 85 74
	02 00 00	 movss	 xmm0, DWORD PTR p_max$[rbp+4]
  00115	0f 2f 45 64	 comiss	 xmm0, DWORD PTR y$4[rbp]
  00119	0f 86 97 02 00
	00		 jbe	 $LN3@RenderColo

; 3921 :         {
; 3922 :             float y1 = ImClamp(y, p_min.y, p_max.y), y2 = ImMin(y + grid_step, p_max.y);

  0011f	f3 0f 10 95 74
	02 00 00	 movss	 xmm2, DWORD PTR p_max$[rbp+4]
  00127	f3 0f 10 8d 6c
	02 00 00	 movss	 xmm1, DWORD PTR p_min$[rbp+4]
  0012f	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR y$4[rbp]
  00134	e8 00 00 00 00	 call	 ??$ImClamp@M@@YAMMMM@Z	; ImClamp<float>
  00139	f3 0f 11 85 84
	00 00 00	 movss	 DWORD PTR y1$5[rbp], xmm0
  00141	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR y$4[rbp]
  00146	f3 0f 58 85 80
	02 00 00	 addss	 xmm0, DWORD PTR grid_step$[rbp]
  0014e	f3 0f 10 8d 74
	02 00 00	 movss	 xmm1, DWORD PTR p_max$[rbp+4]
  00156	e8 00 00 00 00	 call	 ??$ImMin@M@@YAMMM@Z	; ImMin<float>
  0015b	f3 0f 11 85 a4
	00 00 00	 movss	 DWORD PTR y2$6[rbp], xmm0

; 3923 :             if (y2 <= y1)

  00163	f3 0f 10 85 84
	00 00 00	 movss	 xmm0, DWORD PTR y1$5[rbp]
  0016b	0f 2f 85 a4 00
	00 00		 comiss	 xmm0, DWORD PTR y2$6[rbp]
  00172	72 05		 jb	 SHORT $LN11@RenderColo

; 3924 :                 continue;

  00174	e9 7a ff ff ff	 jmp	 $LN2@RenderColo
$LN11@RenderColo:

; 3925 :             for (float x = p_min.x + grid_off.x + (yi & 1) * grid_step; x < p_max.x; x += grid_step * 2.0f)

  00179	f3 0f 10 85 68
	02 00 00	 movss	 xmm0, DWORD PTR p_min$[rbp]
  00181	f3 0f 58 85 88
	02 00 00	 addss	 xmm0, DWORD PTR grid_off$[rbp]
  00189	8b 45 44	 mov	 eax, DWORD PTR yi$3[rbp]
  0018c	83 e0 01	 and	 eax, 1
  0018f	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00193	f3 0f 59 8d 80
	02 00 00	 mulss	 xmm1, DWORD PTR grid_step$[rbp]
  0019b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0019f	f3 0f 11 85 c4
	00 00 00	 movss	 DWORD PTR x$7[rbp], xmm0
  001a7	eb 27		 jmp	 SHORT $LN7@RenderColo
$LN5@RenderColo:
  001a9	f3 0f 10 85 80
	02 00 00	 movss	 xmm0, DWORD PTR grid_step$[rbp]
  001b1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  001b9	f3 0f 10 8d c4
	00 00 00	 movss	 xmm1, DWORD PTR x$7[rbp]
  001c1	f3 0f 58 c8	 addss	 xmm1, xmm0
  001c5	0f 28 c1	 movaps	 xmm0, xmm1
  001c8	f3 0f 11 85 c4
	00 00 00	 movss	 DWORD PTR x$7[rbp], xmm0
$LN7@RenderColo:
  001d0	f3 0f 10 85 70
	02 00 00	 movss	 xmm0, DWORD PTR p_max$[rbp]
  001d8	0f 2f 85 c4 00
	00 00		 comiss	 xmm0, DWORD PTR x$7[rbp]
  001df	0f 86 cc 01 00
	00		 jbe	 $LN6@RenderColo

; 3926 :             {
; 3927 :                 float x1 = ImClamp(x, p_min.x, p_max.x), x2 = ImMin(x + grid_step, p_max.x);

  001e5	f3 0f 10 95 70
	02 00 00	 movss	 xmm2, DWORD PTR p_max$[rbp]
  001ed	f3 0f 10 8d 68
	02 00 00	 movss	 xmm1, DWORD PTR p_min$[rbp]
  001f5	f3 0f 10 85 c4
	00 00 00	 movss	 xmm0, DWORD PTR x$7[rbp]
  001fd	e8 00 00 00 00	 call	 ??$ImClamp@M@@YAMMMM@Z	; ImClamp<float>
  00202	f3 0f 11 85 e4
	00 00 00	 movss	 DWORD PTR x1$8[rbp], xmm0
  0020a	f3 0f 10 85 c4
	00 00 00	 movss	 xmm0, DWORD PTR x$7[rbp]
  00212	f3 0f 58 85 80
	02 00 00	 addss	 xmm0, DWORD PTR grid_step$[rbp]
  0021a	f3 0f 10 8d 70
	02 00 00	 movss	 xmm1, DWORD PTR p_max$[rbp]
  00222	e8 00 00 00 00	 call	 ??$ImMin@M@@YAMMM@Z	; ImMin<float>
  00227	f3 0f 11 85 04
	01 00 00	 movss	 DWORD PTR x2$9[rbp], xmm0

; 3928 :                 if (x2 <= x1)

  0022f	f3 0f 10 85 e4
	00 00 00	 movss	 xmm0, DWORD PTR x1$8[rbp]
  00237	0f 2f 85 04 01
	00 00		 comiss	 xmm0, DWORD PTR x2$9[rbp]
  0023e	72 05		 jb	 SHORT $LN12@RenderColo

; 3929 :                     continue;

  00240	e9 64 ff ff ff	 jmp	 $LN5@RenderColo
$LN12@RenderColo:

; 3930 :                 ImDrawFlags cell_flags = ImDrawFlags_RoundCornersNone;

  00245	c7 85 24 01 00
	00 00 01 00 00	 mov	 DWORD PTR cell_flags$10[rbp], 256 ; 00000100H

; 3931 :                 if (y1 <= p_min.y) { if (x1 <= p_min.x) cell_flags |= ImDrawFlags_RoundCornersTopLeft; if (x2 >= p_max.x) cell_flags |= ImDrawFlags_RoundCornersTopRight; }

  0024f	f3 0f 10 85 6c
	02 00 00	 movss	 xmm0, DWORD PTR p_min$[rbp+4]
  00257	0f 2f 85 84 00
	00 00		 comiss	 xmm0, DWORD PTR y1$5[rbp]
  0025e	72 40		 jb	 SHORT $LN13@RenderColo
  00260	f3 0f 10 85 68
	02 00 00	 movss	 xmm0, DWORD PTR p_min$[rbp]
  00268	0f 2f 85 e4 00
	00 00		 comiss	 xmm0, DWORD PTR x1$8[rbp]
  0026f	72 0f		 jb	 SHORT $LN14@RenderColo
  00271	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR cell_flags$10[rbp]
  00277	83 c8 10	 or	 eax, 16
  0027a	89 85 24 01 00
	00		 mov	 DWORD PTR cell_flags$10[rbp], eax
$LN14@RenderColo:
  00280	f3 0f 10 85 04
	01 00 00	 movss	 xmm0, DWORD PTR x2$9[rbp]
  00288	0f 2f 85 70 02
	00 00		 comiss	 xmm0, DWORD PTR p_max$[rbp]
  0028f	72 0f		 jb	 SHORT $LN15@RenderColo
  00291	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR cell_flags$10[rbp]
  00297	83 c8 20	 or	 eax, 32			; 00000020H
  0029a	89 85 24 01 00
	00		 mov	 DWORD PTR cell_flags$10[rbp], eax
$LN15@RenderColo:
$LN13@RenderColo:

; 3932 :                 if (y2 >= p_max.y) { if (x1 <= p_min.x) cell_flags |= ImDrawFlags_RoundCornersBottomLeft; if (x2 >= p_max.x) cell_flags |= ImDrawFlags_RoundCornersBottomRight; }

  002a0	f3 0f 10 85 a4
	00 00 00	 movss	 xmm0, DWORD PTR y2$6[rbp]
  002a8	0f 2f 85 74 02
	00 00		 comiss	 xmm0, DWORD PTR p_max$[rbp+4]
  002af	72 41		 jb	 SHORT $LN16@RenderColo
  002b1	f3 0f 10 85 68
	02 00 00	 movss	 xmm0, DWORD PTR p_min$[rbp]
  002b9	0f 2f 85 e4 00
	00 00		 comiss	 xmm0, DWORD PTR x1$8[rbp]
  002c0	72 0f		 jb	 SHORT $LN17@RenderColo
  002c2	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR cell_flags$10[rbp]
  002c8	83 c8 40	 or	 eax, 64			; 00000040H
  002cb	89 85 24 01 00
	00		 mov	 DWORD PTR cell_flags$10[rbp], eax
$LN17@RenderColo:
  002d1	f3 0f 10 85 04
	01 00 00	 movss	 xmm0, DWORD PTR x2$9[rbp]
  002d9	0f 2f 85 70 02
	00 00		 comiss	 xmm0, DWORD PTR p_max$[rbp]
  002e0	72 10		 jb	 SHORT $LN18@RenderColo
  002e2	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR cell_flags$10[rbp]
  002e8	0f ba e8 07	 bts	 eax, 7
  002ec	89 85 24 01 00
	00		 mov	 DWORD PTR cell_flags$10[rbp], eax
$LN18@RenderColo:
$LN16@RenderColo:

; 3933 : 
; 3934 :                 // Combine flags
; 3935 :                 cell_flags = (flags == ImDrawFlags_RoundCornersNone || cell_flags == ImDrawFlags_RoundCornersNone) ? ImDrawFlags_RoundCornersNone : (cell_flags & flags);

  002f2	81 bd 98 02 00
	00 00 01 00 00	 cmp	 DWORD PTR flags$[rbp], 256 ; 00000100H
  002fc	74 24		 je	 SHORT $LN20@RenderColo
  002fe	81 bd 24 01 00
	00 00 01 00 00	 cmp	 DWORD PTR cell_flags$10[rbp], 256 ; 00000100H
  00308	74 18		 je	 SHORT $LN20@RenderColo
  0030a	8b 85 98 02 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  00310	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR cell_flags$10[rbp]
  00316	23 c8		 and	 ecx, eax
  00318	8b c1		 mov	 eax, ecx
  0031a	89 85 34 02 00
	00		 mov	 DWORD PTR tv160[rbp], eax
  00320	eb 0a		 jmp	 SHORT $LN21@RenderColo
$LN20@RenderColo:
  00322	c7 85 34 02 00
	00 00 01 00 00	 mov	 DWORD PTR tv160[rbp], 256 ; 00000100H
$LN21@RenderColo:
  0032c	8b 85 34 02 00
	00		 mov	 eax, DWORD PTR tv160[rbp]
  00332	89 85 24 01 00
	00		 mov	 DWORD PTR cell_flags$10[rbp], eax

; 3936 :                 draw_list->AddRectFilled(ImVec2(x1, y1), ImVec2(x2, y2), col_bg2, rounding, cell_flags);

  00338	f3 0f 10 95 a4
	00 00 00	 movss	 xmm2, DWORD PTR y2$6[rbp]
  00340	f3 0f 10 8d 04
	01 00 00	 movss	 xmm1, DWORD PTR x2$9[rbp]
  00348	48 8d 8d 04 02
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  0034f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00354	48 89 85 38 02
	00 00		 mov	 QWORD PTR tv166[rbp], rax
  0035b	f3 0f 10 95 84
	00 00 00	 movss	 xmm2, DWORD PTR y1$5[rbp]
  00363	f3 0f 10 8d e4
	00 00 00	 movss	 xmm1, DWORD PTR x1$8[rbp]
  0036b	48 8d 8d 24 02
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  00372	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00377	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR cell_flags$10[rbp]
  0037d	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00381	f3 0f 10 85 90
	02 00 00	 movss	 xmm0, DWORD PTR rounding$[rbp]
  00389	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0038f	44 8b 4d 24	 mov	 r9d, DWORD PTR col_bg2$2[rbp]
  00393	48 8b 8d 38 02
	00 00		 mov	 rcx, QWORD PTR tv166[rbp]
  0039a	4c 8b c1	 mov	 r8, rcx
  0039d	48 8b d0	 mov	 rdx, rax
  003a0	48 8b 8d 60 02
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  003a7	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled

; 3937 :             }

  003ac	e9 f8 fd ff ff	 jmp	 $LN5@RenderColo
$LN6@RenderColo:

; 3938 :         }

  003b1	e9 3d fd ff ff	 jmp	 $LN2@RenderColo
$LN3@RenderColo:

; 3939 :     }
; 3940 :     else

  003b6	eb 39		 jmp	 SHORT $LN10@RenderColo
$LN9@RenderColo:

; 3941 :     {
; 3942 :         draw_list->AddRectFilled(p_min, p_max, col, rounding, flags);

  003b8	8b 85 98 02 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  003be	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  003c2	f3 0f 10 85 90
	02 00 00	 movss	 xmm0, DWORD PTR rounding$[rbp]
  003ca	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  003d0	44 8b 8d 78 02
	00 00		 mov	 r9d, DWORD PTR col$[rbp]
  003d7	4c 8d 85 70 02
	00 00		 lea	 r8, QWORD PTR p_max$[rbp]
  003de	48 8d 95 68 02
	00 00		 lea	 rdx, QWORD PTR p_min$[rbp]
  003e5	48 8b 8d 60 02
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  003ec	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN10@RenderColo:

; 3943 :     }
; 3944 : }

  003f1	48 8d a5 48 02
	00 00		 lea	 rsp, QWORD PTR [rbp+584]
  003f8	5f		 pop	 rdi
  003f9	5d		 pop	 rbp
  003fa	c3		 ret	 0
?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z ENDP ; ImGui::RenderColorRectWithAlphaCheckerboard
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z
_TEXT	SEGMENT
i$1 = 4
radius$2 = 36
tv133 = 244
this$ = 288
max_error$ = 296
?SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z PROC ; ImDrawListSharedData::SetCircleTessellationMaxError, COMDAT

; 371  : {

$LN10:
  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000b	55		 push	 rbp
  0000c	57		 push	 rdi
  0000d	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00014	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 372  :     if (CircleSegmentMaxError == max_error)

  00030	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00037	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [rax+24]
  0003c	0f 2e 85 28 01
	00 00		 ucomiss xmm0, DWORD PTR max_error$[rbp]
  00043	7a 07		 jp	 SHORT $LN5@SetCircleT
  00045	75 05		 jne	 SHORT $LN5@SetCircleT

; 373  :         return;

  00047	e9 61 01 00 00	 jmp	 $LN1@SetCircleT
$LN5@SetCircleT:

; 374  : 
; 375  :     IM_ASSERT(max_error > 0.0f);

  0004c	f3 0f 10 85 28
	01 00 00	 movss	 xmm0, DWORD PTR max_error$[rbp]
  00054	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0005b	77 22		 ja	 SHORT $LN7@SetCircleT
  0005d	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z@4JA
  00063	83 c0 04	 add	 eax, 4
  00066	44 8b c0	 mov	 r8d, eax
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00070	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@JCMOPDC@?$AAm?$AAa?$AAx?$AA_?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AAf?$AA?$AA@
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007d	33 c0		 xor	 eax, eax
$LN7@SetCircleT:

; 376  :     CircleSegmentMaxError = max_error;

  0007f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00086	f3 0f 10 85 28
	01 00 00	 movss	 xmm0, DWORD PTR max_error$[rbp]
  0008e	f3 0f 11 40 18	 movss	 DWORD PTR [rax+24], xmm0

; 377  :     for (int i = 0; i < IM_ARRAYSIZE(CircleSegmentCounts); i++)

  00093	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$1[rbp], 0
  0009a	eb 08		 jmp	 SHORT $LN4@SetCircleT
$LN2@SetCircleT:
  0009c	8b 45 04	 mov	 eax, DWORD PTR i$1[rbp]
  0009f	ff c0		 inc	 eax
  000a1	89 45 04	 mov	 DWORD PTR i$1[rbp], eax
$LN4@SetCircleT:
  000a4	83 7d 04 40	 cmp	 DWORD PTR i$1[rbp], 64	; 00000040H
  000a8	0f 8d a4 00 00
	00		 jge	 $LN3@SetCircleT

; 378  :     {
; 379  :         const float radius = (float)i;

  000ae	f3 0f 2a 45 04	 cvtsi2ss xmm0, DWORD PTR i$1[rbp]
  000b3	f3 0f 11 45 24	 movss	 DWORD PTR radius$2[rbp], xmm0

; 380  :         CircleSegmentCounts[i] = (ImU8)((i > 0) ? IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC(radius, CircleSegmentMaxError) : IM_DRAWLIST_ARCFAST_SAMPLE_MAX);

  000b8	83 7d 04 00	 cmp	 DWORD PTR i$1[rbp], 0
  000bc	7e 6c		 jle	 SHORT $LN8@SetCircleT
  000be	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c5	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [rax+24]
  000ca	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR radius$2[rbp]
  000cf	e8 00 00 00 00	 call	 ??$ImMin@M@@YAMMM@Z	; ImMin<float>
  000d4	f3 0f 5e 45 24	 divss	 xmm0, DWORD PTR radius$2[rbp]
  000d9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  000e1	f3 0f 5c c8	 subss	 xmm1, xmm0
  000e5	0f 28 c1	 movaps	 xmm0, xmm1
  000e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_acosf
  000ee	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40490fdb
  000f6	f3 0f 5e c8	 divss	 xmm1, xmm0
  000fa	0f 28 c1	 movaps	 xmm0, xmm1
  000fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ceilf
  00103	f3 0f 2c c0	 cvttss2si eax, xmm0
  00107	ff c0		 inc	 eax
  00109	99		 cdq
  0010a	2b c2		 sub	 eax, edx
  0010c	d1 f8		 sar	 eax, 1
  0010e	d1 e0		 shl	 eax, 1
  00110	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  00116	ba 04 00 00 00	 mov	 edx, 4
  0011b	8b c8		 mov	 ecx, eax
  0011d	e8 00 00 00 00	 call	 ??$ImClamp@H@@YAHHHH@Z	; ImClamp<int>
  00122	89 85 f4 00 00
	00		 mov	 DWORD PTR tv133[rbp], eax
  00128	eb 0a		 jmp	 SHORT $LN9@SetCircleT
$LN8@SetCircleT:
  0012a	c7 85 f4 00 00
	00 30 00 00 00	 mov	 DWORD PTR tv133[rbp], 48 ; 00000030H
$LN9@SetCircleT:
  00134	48 63 45 04	 movsxd	 rax, DWORD PTR i$1[rbp]
  00138	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0013f	0f b6 95 f4 00
	00 00		 movzx	 edx, BYTE PTR tv133[rbp]
  00146	88 94 01 c4 01
	00 00		 mov	 BYTE PTR [rcx+rax+452], dl

; 381  :     }

  0014d	e9 4a ff ff ff	 jmp	 $LN2@SetCircleT
$LN3@SetCircleT:

; 382  :     ArcFastRadiusCutoff = IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_R(IM_DRAWLIST_ARCFAST_SAMPLE_MAX, CircleSegmentMaxError);

  00152	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40490fdb
  0015a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42400000
  00162	e8 00 00 00 00	 call	 ??$ImMax@M@@YAMMM@Z	; ImMax<float>
  00167	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40490fdb
  0016f	f3 0f 5e c8	 divss	 xmm1, xmm0
  00173	0f 28 c1	 movaps	 xmm0, xmm1
  00176	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cosf
  0017c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00184	f3 0f 5c c8	 subss	 xmm1, xmm0
  00188	0f 28 c1	 movaps	 xmm0, xmm1
  0018b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00192	f3 0f 10 48 18	 movss	 xmm1, DWORD PTR [rax+24]
  00197	f3 0f 5e c8	 divss	 xmm1, xmm0
  0019b	0f 28 c1	 movaps	 xmm0, xmm1
  0019e	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001a5	f3 0f 11 80 c0
	01 00 00	 movss	 DWORD PTR [rax+448], xmm0
$LN1@SetCircleT:

; 383  : }

  001ad	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  001b4	5f		 pop	 rdi
  001b5	5d		 pop	 rbp
  001b6	c3		 ret	 0
?SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z ENDP ; ImDrawListSharedData::SetCircleTessellationMaxError
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ??0ImDrawListSharedData@@QEAA@XZ
_TEXT	SEGMENT
i$1 = 4
a$2 = 36
$T3 = 260
$T4 = 296
tv93 = 308
this$ = 352
??0ImDrawListSharedData@@QEAA@XZ PROC			; ImDrawListSharedData::ImDrawListSharedData, COMDAT

; 360  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  0002a	48 c7 85 28 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T4[rbp], -2
  00035	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 8b c8	 mov	 rcx, rax
  0003f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@XZ	; ImVec2::ImVec2
  00044	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	48 83 c0 1c	 add	 rax, 28
  0004f	48 8b c8	 mov	 rcx, rax
  00052	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@XZ	; ImVec4::ImVec4
  00057	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005e	48 83 c0 30	 add	 rax, 48			; 00000030H
  00062	48 8b c8	 mov	 rcx, rax
  00065	e8 00 00 00 00	 call	 ??0?$ImVector@UImVec2@@@@QEAA@XZ ; ImVector<ImVec2>::ImVector<ImVec2>
  0006a	90		 npad	 1
  0006b	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 83 c0 40	 add	 rax, 64			; 00000040H
  00076	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??0ImVec2@@QEAA@XZ ; ImVec2::ImVec2
  0007d	41 b8 30 00 00
	00		 mov	 r8d, 48			; 00000030H
  00083	ba 08 00 00 00	 mov	 edx, 8
  00088	48 8b c8	 mov	 rcx, rax
  0008b	e8 00 00 00 00	 call	 ??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 361  :     memset(this, 0, sizeof(*this));

  00090	41 b8 10 02 00
	00		 mov	 r8d, 528		; 00000210H
  00096	33 d2		 xor	 edx, edx
  00098	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009f	e8 00 00 00 00	 call	 memset

; 362  :     for (int i = 0; i < IM_ARRAYSIZE(ArcFastVtx); i++)

  000a4	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$1[rbp], 0
  000ab	eb 08		 jmp	 SHORT $LN4@ImDrawList
$LN2@ImDrawList:
  000ad	8b 45 04	 mov	 eax, DWORD PTR i$1[rbp]
  000b0	ff c0		 inc	 eax
  000b2	89 45 04	 mov	 DWORD PTR i$1[rbp], eax
$LN4@ImDrawList:
  000b5	83 7d 04 30	 cmp	 DWORD PTR i$1[rbp], 48	; 00000030H
  000b9	7d 6f		 jge	 SHORT $LN3@ImDrawList

; 363  :     {
; 364  :         const float a = ((float)i * 2 * IM_PI) / (float)IM_ARRAYSIZE(ArcFastVtx);

  000bb	f3 0f 2a 45 04	 cvtsi2ss xmm0, DWORD PTR i$1[rbp]
  000c0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  000c8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40490fdb
  000d0	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42400000
  000d8	f3 0f 11 45 24	 movss	 DWORD PTR a$2[rbp], xmm0

; 365  :         ArcFastVtx[i] = ImVec2(ImCos(a), ImSin(a));

  000dd	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR a$2[rbp]
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sinf
  000e8	f3 0f 11 85 34
	01 00 00	 movss	 DWORD PTR tv93[rbp], xmm0
  000f0	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR a$2[rbp]
  000f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cosf
  000fb	f3 0f 10 8d 34
	01 00 00	 movss	 xmm1, DWORD PTR tv93[rbp]
  00103	0f 28 d1	 movaps	 xmm2, xmm1
  00106	0f 28 c8	 movaps	 xmm1, xmm0
  00109	48 8d 8d 04 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  00110	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00115	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00118	48 63 4d 04	 movsxd	 rcx, DWORD PTR i$1[rbp]
  0011c	48 8b 95 60 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00123	48 89 44 ca 40	 mov	 QWORD PTR [rdx+rcx*8+64], rax

; 366  :     }

  00128	eb 83		 jmp	 SHORT $LN2@ImDrawList
$LN3@ImDrawList:

; 367  :     ArcFastRadiusCutoff = IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_R(IM_DRAWLIST_ARCFAST_SAMPLE_MAX, CircleSegmentMaxError);

  0012a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40490fdb
  00132	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42400000
  0013a	e8 00 00 00 00	 call	 ??$ImMax@M@@YAMMM@Z	; ImMax<float>
  0013f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40490fdb
  00147	f3 0f 5e c8	 divss	 xmm1, xmm0
  0014b	0f 28 c1	 movaps	 xmm0, xmm1
  0014e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cosf
  00154	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0015c	f3 0f 5c c8	 subss	 xmm1, xmm0
  00160	0f 28 c1	 movaps	 xmm0, xmm1
  00163	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0016a	f3 0f 10 48 18	 movss	 xmm1, DWORD PTR [rax+24]
  0016f	f3 0f 5e c8	 divss	 xmm1, xmm0
  00173	0f 28 c1	 movaps	 xmm0, xmm1
  00176	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0017d	f3 0f 11 80 c0
	01 00 00	 movss	 DWORD PTR [rax+448], xmm0

; 368  : }

  00185	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0018c	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  00193	5f		 pop	 rdi
  00194	5d		 pop	 rbp
  00195	c3		 ret	 0
??0ImDrawListSharedData@@QEAA@XZ ENDP			; ImDrawListSharedData::ImDrawListSharedData
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
i$1 = 4
a$2 = 36
$T3 = 260
$T4 = 296
tv93 = 308
this$ = 352
?dtor$0@?0???0ImDrawListSharedData@@QEAA@XZ@4HA PROC	; `ImDrawListSharedData::ImDrawListSharedData'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 83 c1 30	 add	 rcx, 48			; 00000030H
  0001f	e8 00 00 00 00	 call	 ??1?$ImVector@UImVec2@@@@QEAA@XZ ; ImVector<ImVec2>::~ImVector<ImVec2>
  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	5f		 pop	 rdi
  00029	5d		 pop	 rbp
  0002a	c3		 ret	 0
?dtor$0@?0???0ImDrawListSharedData@@QEAA@XZ@4HA ENDP	; `ImDrawListSharedData::ImDrawListSharedData'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
i$1 = 4
a$2 = 36
$T3 = 260
$T4 = 296
tv93 = 308
this$ = 352
?dtor$0@?0???0ImDrawListSharedData@@QEAA@XZ@4HA PROC	; `ImDrawListSharedData::ImDrawListSharedData'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 83 c1 30	 add	 rcx, 48			; 00000030H
  0001f	e8 00 00 00 00	 call	 ??1?$ImVector@UImVec2@@@@QEAA@XZ ; ImVector<ImVec2>::~ImVector<ImVec2>
  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	5f		 pop	 rdi
  00029	5d		 pop	 rbp
  0002a	c3		 ret	 0
?dtor$0@?0???0ImDrawListSharedData@@QEAA@XZ@4HA ENDP	; `ImDrawListSharedData::ImDrawListSharedData'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@H@@QEAAXAEBH@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@H@@QEAAXAEBH@Z PROC		; ImVector<int>::push_back, COMDAT

; 1807 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00040	39 08		 cmp	 DWORD PTR [rax], ecx
  00042	75 27		 jne	 SHORT $LN2@push_back
  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	8b 00		 mov	 eax, DWORD PTR [rax]
  0004d	ff c0		 inc	 eax
  0004f	8b d0		 mov	 edx, eax
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@H@@QEBAHH@Z ; ImVector<int>::_grow_capacity
  0005d	8b d0		 mov	 edx, eax
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?reserve@?$ImVector@H@@QEAAXH@Z ; ImVector<int>::reserve
$LN2@push_back:
  0006b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00075	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00080	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00084	41 b8 04 00 00
	00		 mov	 r8d, 4
  0008a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00091	48 8b c8	 mov	 rcx, rax
  00094	e8 00 00 00 00	 call	 memcpy
  00099	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a0	8b 00		 mov	 eax, DWORD PTR [rax]
  000a2	ff c0		 inc	 eax
  000a4	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	89 01		 mov	 DWORD PTR [rcx], eax
  000ad	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b4	5f		 pop	 rdi
  000b5	5d		 pop	 rbp
  000b6	c3		 ret	 0
?push_back@?$ImVector@H@@QEAAXAEBH@Z ENDP		; ImVector<int>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@H@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@H@@QEAAXH@Z PROC			; ImVector<int>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 c1 e0 02	 shl	 rax, 2
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 c1 e0 02	 shl	 rax, 2
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@H@@QEAAXH@Z ENDP			; ImVector<int>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@H@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@H@@QEBAHH@Z PROC		; ImVector<int>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@H@@QEBAHH@Z ENDP		; ImVector<int>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@H@@QEAAAEAHH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@H@@QEAAAEAHH@Z PROC			; ImVector<int>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00076	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@H@@QEAAAEAHH@Z ENDP			; ImVector<int>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@H@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@H@@QEAA@XZ PROC				; ImVector<int>::~ImVector<int>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@H@@QEAA@XZ ENDP				; ImVector<int>::~ImVector<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ImBitVector@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1ImBitVector@@QEAA@XZ PROC				; ImBitVector::~ImBitVector, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ??1?$ImVector@I@@QEAA@XZ ; ImVector<unsigned int>::~ImVector<unsigned int>
  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
??1ImBitVector@@QEAA@XZ ENDP				; ImBitVector::~ImBitVector
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?SetBit@ImBitVector@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 80
n$ = 88
?SetBit@ImBitVector@@QEAAXH@Z PROC			; ImBitVector::SetBit, COMDAT

; 599  :     void            SetBit(int n)               { IM_ASSERT(n < (Storage.Size << 5)); ImBitArraySetBit(Storage.Data, n); }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00017	8b 00		 mov	 eax, DWORD PTR [rax]
  00019	c1 e0 05	 shl	 eax, 5
  0001c	39 45 58	 cmp	 DWORD PTR n$[rbp], eax
  0001f	7c 1c		 jl	 SHORT $LN3@SetBit
  00021	41 b8 57 02 00
	00		 mov	 r8d, 599		; 00000257H
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@FAIKKLKG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@HCNHOFJN@?$AAn?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAS?$AAt?$AAo?$AAr?$AAa?$AAg?$AAe?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DM?$AA?5?$AA5?$AA?$CJ?$AA?$AA@
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003b	33 c0		 xor	 eax, eax
$LN3@SetBit:
  0003d	8b 55 58	 mov	 edx, DWORD PTR n$[rbp]
  00040	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00048	e8 00 00 00 00	 call	 ?ImBitArraySetBit@@YAXPEAIH@Z ; ImBitArraySetBit
  0004d	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
?SetBit@ImBitVector@@QEAAXH@Z ENDP			; ImBitVector::SetBit
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?TestBit@ImBitVector@@QEBA_NH@Z
_TEXT	SEGMENT
tv84 = 64
tv82 = 72
this$ = 96
n$ = 104
?TestBit@ImBitVector@@QEBA_NH@Z PROC			; ImBitVector::TestBit, COMDAT

; 598  :     bool            TestBit(int n) const        { IM_ASSERT(n < (Storage.Size << 5)); return IM_BITARRAY_TESTBIT(Storage.Data, n); }

$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  00017	8b 00		 mov	 eax, DWORD PTR [rax]
  00019	c1 e0 05	 shl	 eax, 5
  0001c	39 45 68	 cmp	 DWORD PTR n$[rbp], eax
  0001f	7c 1c		 jl	 SHORT $LN3@TestBit
  00021	41 b8 56 02 00
	00		 mov	 r8d, 598		; 00000256H
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GA@FAIKKLKG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@HCNHOFJN@?$AAn?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAS?$AAt?$AAo?$AAr?$AAa?$AAg?$AAe?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DM?$AA?5?$AA5?$AA?$CJ?$AA?$AA@
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003b	33 c0		 xor	 eax, eax
$LN3@TestBit:
  0003d	8b 45 68	 mov	 eax, DWORD PTR n$[rbp]
  00040	c1 f8 05	 sar	 eax, 5
  00043	48 98		 cdqe
  00045	48 8b 4d 60	 mov	 rcx, QWORD PTR this$[rbp]
  00049	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0004d	48 89 4d 40	 mov	 QWORD PTR tv84[rbp], rcx
  00051	8b 55 68	 mov	 edx, DWORD PTR n$[rbp]
  00054	83 e2 1f	 and	 edx, 31
  00057	41 b8 01 00 00
	00		 mov	 r8d, 1
  0005d	0f b6 ca	 movzx	 ecx, dl
  00060	41 8b d0	 mov	 edx, r8d
  00063	d3 e2		 shl	 edx, cl
  00065	8b ca		 mov	 ecx, edx
  00067	48 8b 55 40	 mov	 rdx, QWORD PTR tv84[rbp]
  0006b	8b 04 82	 mov	 eax, DWORD PTR [rdx+rax*4]
  0006e	23 c1		 and	 eax, ecx
  00070	85 c0		 test	 eax, eax
  00072	74 09		 je	 SHORT $LN4@TestBit
  00074	c7 45 48 01 00
	00 00		 mov	 DWORD PTR tv82[rbp], 1
  0007b	eb 07		 jmp	 SHORT $LN5@TestBit
$LN4@TestBit:
  0007d	c7 45 48 00 00
	00 00		 mov	 DWORD PTR tv82[rbp], 0
$LN5@TestBit:
  00084	0f b6 45 48	 movzx	 eax, BYTE PTR tv82[rbp]
  00088	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  0008c	5d		 pop	 rbp
  0008d	c3		 ret	 0
?TestBit@ImBitVector@@QEBA_NH@Z ENDP			; ImBitVector::TestBit
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?Clear@ImBitVector@@QEAAXXZ
_TEXT	SEGMENT
this$ = 80
?Clear@ImBitVector@@QEAAXXZ PROC			; ImBitVector::Clear, COMDAT

; 597  :     void            Clear()                     { Storage.clear(); }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ?clear@?$ImVector@I@@QEAAXXZ ; ImVector<unsigned int>::clear
  0001b	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0001f	5d		 pop	 rbp
  00020	c3		 ret	 0
?Clear@ImBitVector@@QEAAXXZ ENDP			; ImBitVector::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?Create@ImBitVector@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 80
sz$ = 88
?Create@ImBitVector@@QEAAXH@Z PROC			; ImBitVector::Create, COMDAT

; 596  :     void            Create(int sz)              { Storage.resize((sz + 31) >> 5); memset(Storage.Data, 0, (size_t)Storage.Size * sizeof(Storage.Data[0])); }

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	8b 45 58	 mov	 eax, DWORD PTR sz$[rbp]
  00016	83 c0 1f	 add	 eax, 31
  00019	c1 f8 05	 sar	 eax, 5
  0001c	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  00020	8b d0		 mov	 edx, eax
  00022	e8 00 00 00 00	 call	 ?resize@?$ImVector@I@@QEAAXH@Z ; ImVector<unsigned int>::resize
  00027	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0002e	48 c1 e0 02	 shl	 rax, 2
  00032	4c 8b c0	 mov	 r8, rax
  00035	33 d2		 xor	 edx, edx
  00037	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0003b	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0003f	e8 00 00 00 00	 call	 memset
  00044	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00048	5d		 pop	 rbp
  00049	c3		 ret	 0
?Create@ImBitVector@@QEAAXH@Z ENDP			; ImBitVector::Create
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?ImBitArraySetBit@@YAXPEAIH@Z
_TEXT	SEGMENT
mask$ = 0
tv78 = 68
arr$ = 96
n$ = 104
?ImBitArraySetBit@@YAXPEAIH@Z PROC			; ImBitArraySetBit, COMDAT

; 559  : inline void     ImBitArraySetBit(ImU32* arr, int n)             { ImU32 mask = (ImU32)1 << (n & 31); arr[n >> 5] |= mask; }

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	8b 45 68	 mov	 eax, DWORD PTR n$[rbp]
  00014	83 e0 1f	 and	 eax, 31
  00017	b9 01 00 00 00	 mov	 ecx, 1
  0001c	89 4d 44	 mov	 DWORD PTR tv78[rbp], ecx
  0001f	0f b6 c8	 movzx	 ecx, al
  00022	8b 45 44	 mov	 eax, DWORD PTR tv78[rbp]
  00025	d3 e0		 shl	 eax, cl
  00027	89 45 00	 mov	 DWORD PTR mask$[rbp], eax
  0002a	8b 45 68	 mov	 eax, DWORD PTR n$[rbp]
  0002d	c1 f8 05	 sar	 eax, 5
  00030	48 98		 cdqe
  00032	48 8b 4d 60	 mov	 rcx, QWORD PTR arr$[rbp]
  00036	8b 55 00	 mov	 edx, DWORD PTR mask$[rbp]
  00039	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0003c	0b c2		 or	 eax, edx
  0003e	8b 4d 68	 mov	 ecx, DWORD PTR n$[rbp]
  00041	c1 f9 05	 sar	 ecx, 5
  00044	48 63 c9	 movsxd	 rcx, ecx
  00047	48 8b 55 60	 mov	 rdx, QWORD PTR arr$[rbp]
  0004b	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
  0004e	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
?ImBitArraySetBit@@YAXPEAIH@Z ENDP			; ImBitArraySetBit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ImBezierQuadraticCalc@@YA?AUImVec2@@AEBU1@00M@Z
_TEXT	SEGMENT
u$ = 4
w1$ = 36
w2$ = 68
w3$ = 100
__$ReturnUdt$ = 352
p1$ = 360
p2$ = 368
p3$ = 376
t$ = 384
?ImBezierQuadraticCalc@@YA?AUImVec2@@AEBU1@00M@Z PROC	; ImBezierQuadraticCalc, COMDAT

; 1229 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]

; 1230 :     float u = 1.0f - t;

  00039	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00041	f3 0f 5c 85 80
	01 00 00	 subss	 xmm0, DWORD PTR t$[rbp]
  00049	f3 0f 11 45 04	 movss	 DWORD PTR u$[rbp], xmm0

; 1231 :     float w1 = u * u;

  0004e	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR u$[rbp]
  00053	f3 0f 59 45 04	 mulss	 xmm0, DWORD PTR u$[rbp]
  00058	f3 0f 11 45 24	 movss	 DWORD PTR w1$[rbp], xmm0

; 1232 :     float w2 = 2 * u * t;

  0005d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00065	f3 0f 59 45 04	 mulss	 xmm0, DWORD PTR u$[rbp]
  0006a	f3 0f 59 85 80
	01 00 00	 mulss	 xmm0, DWORD PTR t$[rbp]
  00072	f3 0f 11 45 44	 movss	 DWORD PTR w2$[rbp], xmm0

; 1233 :     float w3 = t * t;

  00077	f3 0f 10 85 80
	01 00 00	 movss	 xmm0, DWORD PTR t$[rbp]
  0007f	f3 0f 59 85 80
	01 00 00	 mulss	 xmm0, DWORD PTR t$[rbp]
  00087	f3 0f 11 45 64	 movss	 DWORD PTR w3$[rbp], xmm0

; 1234 :     return ImVec2(w1 * p1.x + w2 * p2.x + w3 * p3.x, w1 * p1.y + w2 * p2.y + w3 * p3.y);

  0008c	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR p1$[rbp]
  00093	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR w1$[rbp]
  00098	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [rax+4]
  0009d	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR p2$[rbp]
  000a4	f3 0f 10 4d 44	 movss	 xmm1, DWORD PTR w2$[rbp]
  000a9	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [rax+4]
  000ae	f3 0f 58 c1	 addss	 xmm0, xmm1
  000b2	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR p3$[rbp]
  000b9	f3 0f 10 4d 64	 movss	 xmm1, DWORD PTR w3$[rbp]
  000be	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [rax+4]
  000c3	f3 0f 58 c1	 addss	 xmm0, xmm1
  000c7	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR p1$[rbp]
  000ce	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR w1$[rbp]
  000d3	f3 0f 59 08	 mulss	 xmm1, DWORD PTR [rax]
  000d7	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR p2$[rbp]
  000de	f3 0f 10 55 44	 movss	 xmm2, DWORD PTR w2$[rbp]
  000e3	f3 0f 59 10	 mulss	 xmm2, DWORD PTR [rax]
  000e7	f3 0f 58 ca	 addss	 xmm1, xmm2
  000eb	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR p3$[rbp]
  000f2	f3 0f 10 55 64	 movss	 xmm2, DWORD PTR w3$[rbp]
  000f7	f3 0f 59 10	 mulss	 xmm2, DWORD PTR [rax]
  000fb	f3 0f 58 ca	 addss	 xmm1, xmm2
  000ff	0f 28 d0	 movaps	 xmm2, xmm0
  00102	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00109	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0010e	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 1235 : }

  00115	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  0011c	5f		 pop	 rdi
  0011d	5d		 pop	 rbp
  0011e	c3		 ret	 0
?ImBezierQuadraticCalc@@YA?AUImVec2@@AEBU1@00M@Z ENDP	; ImBezierQuadraticCalc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ImBezierCubicCalc@@YA?AUImVec2@@AEBU1@000M@Z
_TEXT	SEGMENT
u$ = 4
w1$ = 36
w2$ = 68
w3$ = 100
w4$ = 132
__$ReturnUdt$ = 384
p1$ = 392
p2$ = 400
p3$ = 408
p4$ = 416
t$ = 424
?ImBezierCubicCalc@@YA?AUImVec2@@AEBU1@000M@Z PROC	; ImBezierCubicCalc, COMDAT

; 1219 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]

; 1220 :     float u = 1.0f - t;

  00039	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00041	f3 0f 5c 85 a8
	01 00 00	 subss	 xmm0, DWORD PTR t$[rbp]
  00049	f3 0f 11 45 04	 movss	 DWORD PTR u$[rbp], xmm0

; 1221 :     float w1 = u * u * u;

  0004e	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR u$[rbp]
  00053	f3 0f 59 45 04	 mulss	 xmm0, DWORD PTR u$[rbp]
  00058	f3 0f 59 45 04	 mulss	 xmm0, DWORD PTR u$[rbp]
  0005d	f3 0f 11 45 24	 movss	 DWORD PTR w1$[rbp], xmm0

; 1222 :     float w2 = 3 * u * u * t;

  00062	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  0006a	f3 0f 59 45 04	 mulss	 xmm0, DWORD PTR u$[rbp]
  0006f	f3 0f 59 45 04	 mulss	 xmm0, DWORD PTR u$[rbp]
  00074	f3 0f 59 85 a8
	01 00 00	 mulss	 xmm0, DWORD PTR t$[rbp]
  0007c	f3 0f 11 45 44	 movss	 DWORD PTR w2$[rbp], xmm0

; 1223 :     float w3 = 3 * u * t * t;

  00081	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  00089	f3 0f 59 45 04	 mulss	 xmm0, DWORD PTR u$[rbp]
  0008e	f3 0f 59 85 a8
	01 00 00	 mulss	 xmm0, DWORD PTR t$[rbp]
  00096	f3 0f 59 85 a8
	01 00 00	 mulss	 xmm0, DWORD PTR t$[rbp]
  0009e	f3 0f 11 45 64	 movss	 DWORD PTR w3$[rbp], xmm0

; 1224 :     float w4 = t * t * t;

  000a3	f3 0f 10 85 a8
	01 00 00	 movss	 xmm0, DWORD PTR t$[rbp]
  000ab	f3 0f 59 85 a8
	01 00 00	 mulss	 xmm0, DWORD PTR t$[rbp]
  000b3	f3 0f 59 85 a8
	01 00 00	 mulss	 xmm0, DWORD PTR t$[rbp]
  000bb	f3 0f 11 85 84
	00 00 00	 movss	 DWORD PTR w4$[rbp], xmm0

; 1225 :     return ImVec2(w1 * p1.x + w2 * p2.x + w3 * p3.x + w4 * p4.x, w1 * p1.y + w2 * p2.y + w3 * p3.y + w4 * p4.y);

  000c3	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR p1$[rbp]
  000ca	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR w1$[rbp]
  000cf	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [rax+4]
  000d4	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR p2$[rbp]
  000db	f3 0f 10 4d 44	 movss	 xmm1, DWORD PTR w2$[rbp]
  000e0	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [rax+4]
  000e5	f3 0f 58 c1	 addss	 xmm0, xmm1
  000e9	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR p3$[rbp]
  000f0	f3 0f 10 4d 64	 movss	 xmm1, DWORD PTR w3$[rbp]
  000f5	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [rax+4]
  000fa	f3 0f 58 c1	 addss	 xmm0, xmm1
  000fe	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR p4$[rbp]
  00105	f3 0f 10 8d 84
	00 00 00	 movss	 xmm1, DWORD PTR w4$[rbp]
  0010d	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [rax+4]
  00112	f3 0f 58 c1	 addss	 xmm0, xmm1
  00116	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR p1$[rbp]
  0011d	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR w1$[rbp]
  00122	f3 0f 59 08	 mulss	 xmm1, DWORD PTR [rax]
  00126	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR p2$[rbp]
  0012d	f3 0f 10 55 44	 movss	 xmm2, DWORD PTR w2$[rbp]
  00132	f3 0f 59 10	 mulss	 xmm2, DWORD PTR [rax]
  00136	f3 0f 58 ca	 addss	 xmm1, xmm2
  0013a	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR p3$[rbp]
  00141	f3 0f 10 55 64	 movss	 xmm2, DWORD PTR w3$[rbp]
  00146	f3 0f 59 10	 mulss	 xmm2, DWORD PTR [rax]
  0014a	f3 0f 58 ca	 addss	 xmm1, xmm2
  0014e	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR p4$[rbp]
  00155	f3 0f 10 95 84
	00 00 00	 movss	 xmm2, DWORD PTR w4$[rbp]
  0015d	f3 0f 59 10	 mulss	 xmm2, DWORD PTR [rax]
  00161	f3 0f 58 ca	 addss	 xmm1, xmm2
  00165	0f 28 d0	 movaps	 xmm2, xmm0
  00168	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  0016f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00174	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 1226 : }

  0017b	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  00182	5f		 pop	 rdi
  00183	5d		 pop	 rbp
  00184	c3		 ret	 0
?ImBezierCubicCalc@@YA?AUImVec2@@AEBU1@000M@Z ENDP	; ImBezierCubicCalc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?ImMul@@YA?AUImVec2@@AEBU1@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
lhs$ = 88
rhs$ = 96
?ImMul@@YA?AUImVec2@@AEBU1@0@Z PROC			; ImMul, COMDAT

; 478  : static inline ImVec2 ImMul(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(lhs.x * rhs.x, lhs.y * rhs.y); }

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00014	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00019	48 8b 45 58	 mov	 rax, QWORD PTR lhs$[rbp]
  0001d	48 8b 4d 60	 mov	 rcx, QWORD PTR rhs$[rbp]
  00021	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00026	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [rcx+4]
  0002b	48 8b 45 58	 mov	 rax, QWORD PTR lhs$[rbp]
  0002f	48 8b 4d 60	 mov	 rcx, QWORD PTR rhs$[rbp]
  00033	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00037	f3 0f 59 09	 mulss	 xmm1, DWORD PTR [rcx]
  0003b	0f 28 d0	 movaps	 xmm2, xmm0
  0003e	48 8b 4d 50	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00042	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00047	48 8b 45 50	 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  0004b	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0004f	5d		 pop	 rbp
  00050	c3		 ret	 0
?ImMul@@YA?AUImVec2@@AEBU1@0@Z ENDP			; ImMul
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ??$ImMax@M@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 192
lhs$ = 240
rhs$ = 248
??$ImMax@M@@YAMMM@Z PROC				; ImMax<float>, COMDAT

; 453  : template<typename T> static inline T ImMax(T lhs, T rhs)                        { return lhs >= rhs ? lhs : rhs; }

  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  0000c	55		 push	 rbp
  0000d	57		 push	 rdi
  0000e	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00015	48 8d 6c 24 10	 lea	 rbp, QWORD PTR [rsp+16]
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	f3 0f 10 85 f0
	00 00 00	 movss	 xmm0, DWORD PTR lhs$[rbp]
  00031	0f 2f 85 f8 00
	00 00		 comiss	 xmm0, DWORD PTR rhs$[rbp]
  00038	72 12		 jb	 SHORT $LN3@ImMax
  0003a	f3 0f 10 85 f0
	00 00 00	 movss	 xmm0, DWORD PTR lhs$[rbp]
  00042	f3 0f 11 85 c0
	00 00 00	 movss	 DWORD PTR tv65[rbp], xmm0
  0004a	eb 10		 jmp	 SHORT $LN4@ImMax
$LN3@ImMax:
  0004c	f3 0f 10 85 f8
	00 00 00	 movss	 xmm0, DWORD PTR rhs$[rbp]
  00054	f3 0f 11 85 c0
	00 00 00	 movss	 DWORD PTR tv65[rbp], xmm0
$LN4@ImMax:
  0005c	f3 0f 10 85 c0
	00 00 00	 movss	 xmm0, DWORD PTR tv65[rbp]
  00064	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0006b	5f		 pop	 rdi
  0006c	5d		 pop	 rbp
  0006d	c3		 ret	 0
??$ImMax@M@@YAMMM@Z ENDP				; ImMax<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ??$ImMin@M@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 192
lhs$ = 240
rhs$ = 248
??$ImMin@M@@YAMMM@Z PROC				; ImMin<float>, COMDAT

; 452  : template<typename T> static inline T ImMin(T lhs, T rhs)                        { return lhs < rhs ? lhs : rhs; }

  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  0000c	55		 push	 rbp
  0000d	57		 push	 rdi
  0000e	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00015	48 8d 6c 24 10	 lea	 rbp, QWORD PTR [rsp+16]
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	f3 0f 10 85 f8
	00 00 00	 movss	 xmm0, DWORD PTR rhs$[rbp]
  00031	0f 2f 85 f0 00
	00 00		 comiss	 xmm0, DWORD PTR lhs$[rbp]
  00038	76 12		 jbe	 SHORT $LN3@ImMin
  0003a	f3 0f 10 85 f0
	00 00 00	 movss	 xmm0, DWORD PTR lhs$[rbp]
  00042	f3 0f 11 85 c0
	00 00 00	 movss	 DWORD PTR tv65[rbp], xmm0
  0004a	eb 10		 jmp	 SHORT $LN4@ImMin
$LN3@ImMin:
  0004c	f3 0f 10 85 f8
	00 00 00	 movss	 xmm0, DWORD PTR rhs$[rbp]
  00054	f3 0f 11 85 c0
	00 00 00	 movss	 DWORD PTR tv65[rbp], xmm0
$LN4@ImMin:
  0005c	f3 0f 10 85 c0
	00 00 00	 movss	 xmm0, DWORD PTR tv65[rbp]
  00064	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0006b	5f		 pop	 rdi
  0006c	5d		 pop	 rbp
  0006d	c3		 ret	 0
??$ImMin@M@@YAMMM@Z ENDP				; ImMin<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?ImDot@@YAMAEBUImVec2@@0@Z
_TEXT	SEGMENT
a$ = 80
b$ = 88
?ImDot@@YAMAEBUImVec2@@0@Z PROC				; ImDot, COMDAT

; 475  : static inline float  ImDot(const ImVec2& a, const ImVec2& b)                    { return a.x * b.x + a.y * b.y; }

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b ec	 mov	 rbp, rsp
  00012	48 8b 45 50	 mov	 rax, QWORD PTR a$[rbp]
  00016	48 8b 4d 58	 mov	 rcx, QWORD PTR b$[rbp]
  0001a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  0001e	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [rcx]
  00022	48 8b 45 50	 mov	 rax, QWORD PTR a$[rbp]
  00026	48 8b 4d 58	 mov	 rcx, QWORD PTR b$[rbp]
  0002a	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [rax+4]
  0002f	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [rcx+4]
  00034	f3 0f 58 c1	 addss	 xmm0, xmm1
  00038	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
?ImDot@@YAMAEBUImVec2@@0@Z ENDP				; ImDot
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?ImFloorSigned@@YAMM@Z
_TEXT	SEGMENT
tv71 = 64
f$ = 96
?ImFloorSigned@@YAMM@Z PROC				; ImFloorSigned, COMDAT

; 471  : static inline float  ImFloorSigned(float f)                                     { return (float)((f >= 0 || (float)(int)f == f) ? (int)f : (int)f - 1); } // Decent replacement for floorf()

  00000	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  00006	55		 push	 rbp
  00007	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000b	48 8b ec	 mov	 rbp, rsp
  0000e	f3 0f 10 45 60	 movss	 xmm0, DWORD PTR f$[rbp]
  00013	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0001a	73 1d		 jae	 SHORT $LN3@ImFloorSig
  0001c	f3 0f 2c 45 60	 cvttss2si eax, DWORD PTR f$[rbp]
  00021	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00025	0f 2e 45 60	 ucomiss xmm0, DWORD PTR f$[rbp]
  00029	7a 02		 jp	 SHORT $LN5@ImFloorSig
  0002b	74 0c		 je	 SHORT $LN3@ImFloorSig
$LN5@ImFloorSig:
  0002d	f3 0f 2c 45 60	 cvttss2si eax, DWORD PTR f$[rbp]
  00032	ff c8		 dec	 eax
  00034	89 45 40	 mov	 DWORD PTR tv71[rbp], eax
  00037	eb 08		 jmp	 SHORT $LN4@ImFloorSig
$LN3@ImFloorSig:
  00039	f3 0f 2c 45 60	 cvttss2si eax, DWORD PTR f$[rbp]
  0003e	89 45 40	 mov	 DWORD PTR tv71[rbp], eax
$LN4@ImFloorSig:
  00041	f3 0f 2a 45 40	 cvtsi2ss xmm0, DWORD PTR tv71[rbp]
  00046	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
?ImFloorSigned@@YAMM@Z ENDP				; ImFloorSigned
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?ImFloor@@YAMM@Z
_TEXT	SEGMENT
f$ = 80
?ImFloor@@YAMM@Z PROC					; ImFloor, COMDAT

; 470  : static inline float  ImFloor(float f)                                           { return (float)(int)(f); }

  00000	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  00006	55		 push	 rbp
  00007	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000b	48 8b ec	 mov	 rbp, rsp
  0000e	f3 0f 2c 45 50	 cvttss2si eax, DWORD PTR f$[rbp]
  00013	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00017	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0001b	5d		 pop	 rbp
  0001c	c3		 ret	 0
?ImFloor@@YAMM@Z ENDP					; ImFloor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?ImLengthSqr@@YAMAEBUImVec2@@@Z
_TEXT	SEGMENT
lhs$ = 80
?ImLengthSqr@@YAMAEBUImVec2@@@Z PROC			; ImLengthSqr, COMDAT

; 467  : static inline float  ImLengthSqr(const ImVec2& lhs)                             { return (lhs.x * lhs.x) + (lhs.y * lhs.y); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b ec	 mov	 rbp, rsp
  0000d	48 8b 45 50	 mov	 rax, QWORD PTR lhs$[rbp]
  00011	48 8b 4d 50	 mov	 rcx, QWORD PTR lhs$[rbp]
  00015	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00019	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [rcx]
  0001d	48 8b 45 50	 mov	 rax, QWORD PTR lhs$[rbp]
  00021	48 8b 4d 50	 mov	 rcx, QWORD PTR lhs$[rbp]
  00025	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [rax+4]
  0002a	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [rcx+4]
  0002f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00033	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
?ImLengthSqr@@YAMAEBUImVec2@@@Z ENDP			; ImLengthSqr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z
_TEXT	SEGMENT
tv92 = 64
__$ReturnUdt$ = 96
a$ = 104
b$ = 112
t$ = 120
?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z PROC			; ImLerp, COMDAT

; 465  : static inline ImVec4 ImLerp(const ImVec4& a, const ImVec4& b, float t)          { return ImVec4(a.x + (b.x - a.x) * t, a.y + (b.y - a.y) * t, a.z + (b.z - a.z) * t, a.w + (b.w - a.w) * t); }

  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b 45 70	 mov	 rax, QWORD PTR b$[rbp]
  00026	48 8b 4d 68	 mov	 rcx, QWORD PTR a$[rbp]
  0002a	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [rax+12]
  0002f	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [rcx+12]
  00034	f3 0f 59 45 78	 mulss	 xmm0, DWORD PTR t$[rbp]
  00039	48 8b 45 68	 mov	 rax, QWORD PTR a$[rbp]
  0003d	f3 0f 10 48 0c	 movss	 xmm1, DWORD PTR [rax+12]
  00042	f3 0f 58 c8	 addss	 xmm1, xmm0
  00046	0f 28 c1	 movaps	 xmm0, xmm1
  00049	48 8b 45 70	 mov	 rax, QWORD PTR b$[rbp]
  0004d	48 8b 4d 68	 mov	 rcx, QWORD PTR a$[rbp]
  00051	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [rax+8]
  00056	f3 0f 5c 49 08	 subss	 xmm1, DWORD PTR [rcx+8]
  0005b	f3 0f 59 4d 78	 mulss	 xmm1, DWORD PTR t$[rbp]
  00060	48 8b 45 68	 mov	 rax, QWORD PTR a$[rbp]
  00064	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [rax+8]
  00069	f3 0f 58 d1	 addss	 xmm2, xmm1
  0006d	0f 28 ca	 movaps	 xmm1, xmm2
  00070	48 8b 45 70	 mov	 rax, QWORD PTR b$[rbp]
  00074	48 8b 4d 68	 mov	 rcx, QWORD PTR a$[rbp]
  00078	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  0007d	f3 0f 5c 51 04	 subss	 xmm2, DWORD PTR [rcx+4]
  00082	f3 0f 59 55 78	 mulss	 xmm2, DWORD PTR t$[rbp]
  00087	48 8b 45 68	 mov	 rax, QWORD PTR a$[rbp]
  0008b	f3 0f 10 58 04	 movss	 xmm3, DWORD PTR [rax+4]
  00090	f3 0f 58 da	 addss	 xmm3, xmm2
  00094	0f 28 d3	 movaps	 xmm2, xmm3
  00097	48 8b 45 70	 mov	 rax, QWORD PTR b$[rbp]
  0009b	48 8b 4d 68	 mov	 rcx, QWORD PTR a$[rbp]
  0009f	f3 0f 10 18	 movss	 xmm3, DWORD PTR [rax]
  000a3	f3 0f 5c 19	 subss	 xmm3, DWORD PTR [rcx]
  000a7	f3 0f 59 5d 78	 mulss	 xmm3, DWORD PTR t$[rbp]
  000ac	48 8b 45 68	 mov	 rax, QWORD PTR a$[rbp]
  000b0	f3 0f 10 20	 movss	 xmm4, DWORD PTR [rax]
  000b4	f3 0f 58 e3	 addss	 xmm4, xmm3
  000b8	0f 28 dc	 movaps	 xmm3, xmm4
  000bb	f3 0f 11 5d 40	 movss	 DWORD PTR tv92[rbp], xmm3
  000c0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  000c6	0f 28 d9	 movaps	 xmm3, xmm1
  000c9	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR tv92[rbp]
  000ce	0f 28 c8	 movaps	 xmm1, xmm0
  000d1	48 8b 4d 60	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  000d5	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  000da	48 8b 45 60	 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  000de	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  000e2	5d		 pop	 rbp
  000e3	c3		 ret	 0
?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z ENDP			; ImLerp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z
_TEXT	SEGMENT
tv74 = 64
tv73 = 68
tv84 = 72
tv83 = 76
__$ReturnUdt$ = 96
v$ = 104
mn$ = 112
mx$ = 120
?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z PROC		; ImClamp, COMDAT

; 462  : static inline ImVec2 ImClamp(const ImVec2& v, const ImVec2& mn, ImVec2 mx)      { return ImVec2((v.x < mn.x) ? mn.x : (v.x > mx.x) ? mx.x : v.x, (v.y < mn.y) ? mn.y : (v.y > mx.y) ? mx.y : v.y); }

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8b 45 70	 mov	 rax, QWORD PTR mn$[rbp]
  00022	48 8b 4d 68	 mov	 rcx, QWORD PTR v$[rbp]
  00026	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  0002b	0f 2f 41 04	 comiss	 xmm0, DWORD PTR [rcx+4]
  0002f	76 10		 jbe	 SHORT $LN5@ImClamp
  00031	48 8b 45 70	 mov	 rax, QWORD PTR mn$[rbp]
  00035	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  0003a	f3 0f 11 45 40	 movss	 DWORD PTR tv74[rbp], xmm0
  0003f	eb 33		 jmp	 SHORT $LN6@ImClamp
$LN5@ImClamp:
  00041	48 8b 45 68	 mov	 rax, QWORD PTR v$[rbp]
  00045	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  0004a	0f 2f 45 7c	 comiss	 xmm0, DWORD PTR mx$[rbp+4]
  0004e	76 0c		 jbe	 SHORT $LN3@ImClamp
  00050	f3 0f 10 45 7c	 movss	 xmm0, DWORD PTR mx$[rbp+4]
  00055	f3 0f 11 45 44	 movss	 DWORD PTR tv73[rbp], xmm0
  0005a	eb 0e		 jmp	 SHORT $LN4@ImClamp
$LN3@ImClamp:
  0005c	48 8b 45 68	 mov	 rax, QWORD PTR v$[rbp]
  00060	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00065	f3 0f 11 45 44	 movss	 DWORD PTR tv73[rbp], xmm0
$LN4@ImClamp:
  0006a	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR tv73[rbp]
  0006f	f3 0f 11 45 40	 movss	 DWORD PTR tv74[rbp], xmm0
$LN6@ImClamp:
  00074	48 8b 45 70	 mov	 rax, QWORD PTR mn$[rbp]
  00078	48 8b 4d 68	 mov	 rcx, QWORD PTR v$[rbp]
  0007c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00080	0f 2f 01	 comiss	 xmm0, DWORD PTR [rcx]
  00083	76 0f		 jbe	 SHORT $LN9@ImClamp
  00085	48 8b 45 70	 mov	 rax, QWORD PTR mn$[rbp]
  00089	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  0008d	f3 0f 11 45 48	 movss	 DWORD PTR tv84[rbp], xmm0
  00092	eb 31		 jmp	 SHORT $LN10@ImClamp
$LN9@ImClamp:
  00094	48 8b 45 68	 mov	 rax, QWORD PTR v$[rbp]
  00098	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  0009c	0f 2f 45 78	 comiss	 xmm0, DWORD PTR mx$[rbp]
  000a0	76 0c		 jbe	 SHORT $LN7@ImClamp
  000a2	f3 0f 10 45 78	 movss	 xmm0, DWORD PTR mx$[rbp]
  000a7	f3 0f 11 45 4c	 movss	 DWORD PTR tv83[rbp], xmm0
  000ac	eb 0d		 jmp	 SHORT $LN8@ImClamp
$LN7@ImClamp:
  000ae	48 8b 45 68	 mov	 rax, QWORD PTR v$[rbp]
  000b2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  000b6	f3 0f 11 45 4c	 movss	 DWORD PTR tv83[rbp], xmm0
$LN8@ImClamp:
  000bb	f3 0f 10 45 4c	 movss	 xmm0, DWORD PTR tv83[rbp]
  000c0	f3 0f 11 45 48	 movss	 DWORD PTR tv84[rbp], xmm0
$LN10@ImClamp:
  000c5	f3 0f 10 55 40	 movss	 xmm2, DWORD PTR tv74[rbp]
  000ca	f3 0f 10 4d 48	 movss	 xmm1, DWORD PTR tv84[rbp]
  000cf	48 8b 4d 60	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  000d3	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000d8	48 8b 45 60	 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  000dc	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  000e0	5d		 pop	 rbp
  000e1	c3		 ret	 0
?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z ENDP		; ImClamp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?ImMax@@YA?AUImVec2@@AEBU1@0@Z
_TEXT	SEGMENT
tv71 = 64
tv78 = 68
__$ReturnUdt$ = 96
lhs$ = 104
rhs$ = 112
?ImMax@@YA?AUImVec2@@AEBU1@0@Z PROC			; ImMax, COMDAT

; 461  : static inline ImVec2 ImMax(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(lhs.x >= rhs.x ? lhs.x : rhs.x, lhs.y >= rhs.y ? lhs.y : rhs.y); }

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00014	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00019	48 8b 45 68	 mov	 rax, QWORD PTR lhs$[rbp]
  0001d	48 8b 4d 70	 mov	 rcx, QWORD PTR rhs$[rbp]
  00021	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00026	0f 2f 41 04	 comiss	 xmm0, DWORD PTR [rcx+4]
  0002a	72 10		 jb	 SHORT $LN3@ImMax
  0002c	48 8b 45 68	 mov	 rax, QWORD PTR lhs$[rbp]
  00030	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00035	f3 0f 11 45 40	 movss	 DWORD PTR tv71[rbp], xmm0
  0003a	eb 0e		 jmp	 SHORT $LN4@ImMax
$LN3@ImMax:
  0003c	48 8b 45 70	 mov	 rax, QWORD PTR rhs$[rbp]
  00040	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00045	f3 0f 11 45 40	 movss	 DWORD PTR tv71[rbp], xmm0
$LN4@ImMax:
  0004a	48 8b 45 68	 mov	 rax, QWORD PTR lhs$[rbp]
  0004e	48 8b 4d 70	 mov	 rcx, QWORD PTR rhs$[rbp]
  00052	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00056	0f 2f 01	 comiss	 xmm0, DWORD PTR [rcx]
  00059	72 0f		 jb	 SHORT $LN5@ImMax
  0005b	48 8b 45 68	 mov	 rax, QWORD PTR lhs$[rbp]
  0005f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00063	f3 0f 11 45 44	 movss	 DWORD PTR tv78[rbp], xmm0
  00068	eb 0d		 jmp	 SHORT $LN6@ImMax
$LN5@ImMax:
  0006a	48 8b 45 70	 mov	 rax, QWORD PTR rhs$[rbp]
  0006e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00072	f3 0f 11 45 44	 movss	 DWORD PTR tv78[rbp], xmm0
$LN6@ImMax:
  00077	f3 0f 10 55 40	 movss	 xmm2, DWORD PTR tv71[rbp]
  0007c	f3 0f 10 4d 44	 movss	 xmm1, DWORD PTR tv78[rbp]
  00081	48 8b 4d 60	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00085	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0008a	48 8b 45 60	 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  0008e	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  00092	5d		 pop	 rbp
  00093	c3		 ret	 0
?ImMax@@YA?AUImVec2@@AEBU1@0@Z ENDP			; ImMax
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?ImMin@@YA?AUImVec2@@AEBU1@0@Z
_TEXT	SEGMENT
tv71 = 64
tv78 = 68
__$ReturnUdt$ = 96
lhs$ = 104
rhs$ = 112
?ImMin@@YA?AUImVec2@@AEBU1@0@Z PROC			; ImMin, COMDAT

; 460  : static inline ImVec2 ImMin(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(lhs.x < rhs.x ? lhs.x : rhs.x, lhs.y < rhs.y ? lhs.y : rhs.y); }

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00014	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00019	48 8b 45 70	 mov	 rax, QWORD PTR rhs$[rbp]
  0001d	48 8b 4d 68	 mov	 rcx, QWORD PTR lhs$[rbp]
  00021	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00026	0f 2f 41 04	 comiss	 xmm0, DWORD PTR [rcx+4]
  0002a	76 10		 jbe	 SHORT $LN3@ImMin
  0002c	48 8b 45 68	 mov	 rax, QWORD PTR lhs$[rbp]
  00030	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00035	f3 0f 11 45 40	 movss	 DWORD PTR tv71[rbp], xmm0
  0003a	eb 0e		 jmp	 SHORT $LN4@ImMin
$LN3@ImMin:
  0003c	48 8b 45 70	 mov	 rax, QWORD PTR rhs$[rbp]
  00040	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00045	f3 0f 11 45 40	 movss	 DWORD PTR tv71[rbp], xmm0
$LN4@ImMin:
  0004a	48 8b 45 70	 mov	 rax, QWORD PTR rhs$[rbp]
  0004e	48 8b 4d 68	 mov	 rcx, QWORD PTR lhs$[rbp]
  00052	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00056	0f 2f 01	 comiss	 xmm0, DWORD PTR [rcx]
  00059	76 0f		 jbe	 SHORT $LN5@ImMin
  0005b	48 8b 45 68	 mov	 rax, QWORD PTR lhs$[rbp]
  0005f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00063	f3 0f 11 45 44	 movss	 DWORD PTR tv78[rbp], xmm0
  00068	eb 0d		 jmp	 SHORT $LN6@ImMin
$LN5@ImMin:
  0006a	48 8b 45 70	 mov	 rax, QWORD PTR rhs$[rbp]
  0006e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00072	f3 0f 11 45 44	 movss	 DWORD PTR tv78[rbp], xmm0
$LN6@ImMin:
  00077	f3 0f 10 55 40	 movss	 xmm2, DWORD PTR tv71[rbp]
  0007c	f3 0f 10 4d 44	 movss	 xmm1, DWORD PTR tv78[rbp]
  00081	48 8b 4d 60	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00085	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0008a	48 8b 45 60	 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  0008e	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  00092	5d		 pop	 rbp
  00093	c3		 ret	 0
?ImMin@@YA?AUImVec2@@AEBU1@0@Z ENDP			; ImMin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?ImRsqrt@@YAMM@Z
_TEXT	SEGMENT
$T1 = 64
$T2 = 80
tv70 = 96
x$ = 128
?ImRsqrt@@YAMM@Z PROC					; ImRsqrt, COMDAT

; 444  : static inline float  ImRsqrt(float x)           { return _mm_cvtss_f32(_mm_rsqrt_ss(_mm_set_ss(x))); }

  00000	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  00006	55		 push	 rbp
  00007	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000b	48 8b ec	 mov	 rbp, rsp
  0000e	f3 0f 10 85 80
	00 00 00	 movss	 xmm0, DWORD PTR x$[rbp]
  00016	0f 57 c9	 xorps	 xmm1, xmm1
  00019	f3 0f 10 c8	 movss	 xmm1, xmm0
  0001d	0f 28 c1	 movaps	 xmm0, xmm1
  00020	0f 29 45 50	 movaps	 XMMWORD PTR $T2[rbp], xmm0
  00024	0f 28 45 50	 movaps	 xmm0, XMMWORD PTR $T2[rbp]
  00028	f3 0f 52 c0	 rsqrtss xmm0, xmm0
  0002c	0f 29 45 40	 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00030	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  00034	f3 0f 11 45 60	 movss	 DWORD PTR tv70[rbp], xmm0
  00039	f3 0f 10 45 60	 movss	 xmm0, DWORD PTR tv70[rbp]
  0003e	48 8d 65 70	 lea	 rsp, QWORD PTR [rbp+112]
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?ImRsqrt@@YAMM@Z ENDP					; ImRsqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?ImAbs@@YAMM@Z
_TEXT	SEGMENT
x$ = 80
?ImAbs@@YAMM@Z PROC					; ImAbs, COMDAT

; 439  : static inline float  ImAbs(float x)             { return fabsf(x); }

  00000	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  00006	55		 push	 rbp
  00007	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000b	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00010	f3 0f 10 45 50	 movss	 xmm0, DWORD PTR x$[rbp]
  00015	e8 00 00 00 00	 call	 fabsf
  0001a	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0001e	5d		 pop	 rbp
  0001f	c3		 ret	 0
?ImAbs@@YAMM@Z ENDP					; ImAbs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?ImAbs@@YAHH@Z
_TEXT	SEGMENT
tv66 = 64
x$ = 96
?ImAbs@@YAHH@Z PROC					; ImAbs, COMDAT

; 438  : static inline int    ImAbs(int x)               { return x < 0 ? -x : x; }

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00009	48 8b ec	 mov	 rbp, rsp
  0000c	83 7d 60 00	 cmp	 DWORD PTR x$[rbp], 0
  00010	7d 0a		 jge	 SHORT $LN3@ImAbs
  00012	8b 45 60	 mov	 eax, DWORD PTR x$[rbp]
  00015	f7 d8		 neg	 eax
  00017	89 45 40	 mov	 DWORD PTR tv66[rbp], eax
  0001a	eb 06		 jmp	 SHORT $LN4@ImAbs
$LN3@ImAbs:
  0001c	8b 45 60	 mov	 eax, DWORD PTR x$[rbp]
  0001f	89 45 40	 mov	 DWORD PTR tv66[rbp], eax
$LN4@ImAbs:
  00022	8b 45 40	 mov	 eax, DWORD PTR tv66[rbp]
  00025	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  00029	5d		 pop	 rbp
  0002a	c3		 ret	 0
?ImAbs@@YAHH@Z ENDP					; ImAbs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z
_TEXT	SEGMENT
lhs$ = 80
rhs$ = 88
??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z PROC			; operator+=, COMDAT

; 388  : static inline ImVec2& operator+=(ImVec2& lhs, const ImVec2& rhs)                { lhs.x += rhs.x; lhs.y += rhs.y; return lhs; }

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b ec	 mov	 rbp, rsp
  00012	48 8b 45 50	 mov	 rax, QWORD PTR lhs$[rbp]
  00016	48 8b 4d 58	 mov	 rcx, QWORD PTR rhs$[rbp]
  0001a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  0001e	f3 0f 58 01	 addss	 xmm0, DWORD PTR [rcx]
  00022	48 8b 45 50	 mov	 rax, QWORD PTR lhs$[rbp]
  00026	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  0002a	48 8b 45 50	 mov	 rax, QWORD PTR lhs$[rbp]
  0002e	48 8b 4d 58	 mov	 rcx, QWORD PTR rhs$[rbp]
  00032	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00037	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [rcx+4]
  0003c	48 8b 45 50	 mov	 rax, QWORD PTR lhs$[rbp]
  00040	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  00045	48 8b 45 50	 mov	 rax, QWORD PTR lhs$[rbp]
  00049	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z ENDP			; operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ??D@YA?AUImVec2@@AEBU0@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
lhs$ = 88
rhs$ = 96
??D@YA?AUImVec2@@AEBU0@0@Z PROC				; operator*, COMDAT

; 384  : static inline ImVec2 operator*(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(lhs.x * rhs.x, lhs.y * rhs.y); }

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00014	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00019	48 8b 45 58	 mov	 rax, QWORD PTR lhs$[rbp]
  0001d	48 8b 4d 60	 mov	 rcx, QWORD PTR rhs$[rbp]
  00021	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00026	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [rcx+4]
  0002b	48 8b 45 58	 mov	 rax, QWORD PTR lhs$[rbp]
  0002f	48 8b 4d 60	 mov	 rcx, QWORD PTR rhs$[rbp]
  00033	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00037	f3 0f 59 09	 mulss	 xmm1, DWORD PTR [rcx]
  0003b	0f 28 d0	 movaps	 xmm2, xmm0
  0003e	48 8b 4d 50	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00042	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00047	48 8b 45 50	 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  0004b	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0004f	5d		 pop	 rbp
  00050	c3		 ret	 0
??D@YA?AUImVec2@@AEBU0@0@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ??G@YA?AUImVec2@@AEBU0@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
lhs$ = 88
rhs$ = 96
??G@YA?AUImVec2@@AEBU0@0@Z PROC				; operator-, COMDAT

; 383  : static inline ImVec2 operator-(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(lhs.x - rhs.x, lhs.y - rhs.y); }

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00014	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00019	48 8b 45 58	 mov	 rax, QWORD PTR lhs$[rbp]
  0001d	48 8b 4d 60	 mov	 rcx, QWORD PTR rhs$[rbp]
  00021	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00026	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [rcx+4]
  0002b	48 8b 45 58	 mov	 rax, QWORD PTR lhs$[rbp]
  0002f	48 8b 4d 60	 mov	 rcx, QWORD PTR rhs$[rbp]
  00033	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00037	f3 0f 5c 09	 subss	 xmm1, DWORD PTR [rcx]
  0003b	0f 28 d0	 movaps	 xmm2, xmm0
  0003e	48 8b 4d 50	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00042	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00047	48 8b 45 50	 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  0004b	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0004f	5d		 pop	 rbp
  00050	c3		 ret	 0
??G@YA?AUImVec2@@AEBU0@0@Z ENDP				; operator-
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ??H@YA?AUImVec2@@AEBU0@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
lhs$ = 88
rhs$ = 96
??H@YA?AUImVec2@@AEBU0@0@Z PROC				; operator+, COMDAT

; 382  : static inline ImVec2 operator+(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(lhs.x + rhs.x, lhs.y + rhs.y); }

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00014	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00019	48 8b 45 58	 mov	 rax, QWORD PTR lhs$[rbp]
  0001d	48 8b 4d 60	 mov	 rcx, QWORD PTR rhs$[rbp]
  00021	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00026	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [rcx+4]
  0002b	48 8b 45 58	 mov	 rax, QWORD PTR lhs$[rbp]
  0002f	48 8b 4d 60	 mov	 rcx, QWORD PTR rhs$[rbp]
  00033	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00037	f3 0f 58 09	 addss	 xmm1, DWORD PTR [rcx]
  0003b	0f 28 d0	 movaps	 xmm2, xmm0
  0003e	48 8b 4d 50	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00042	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00047	48 8b 45 50	 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  0004b	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0004f	5d		 pop	 rbp
  00050	c3		 ret	 0
??H@YA?AUImVec2@@AEBU0@0@Z ENDP				; operator+
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ??D@YA?AUImVec2@@AEBU0@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
lhs$ = 88
rhs$ = 96
??D@YA?AUImVec2@@AEBU0@M@Z PROC				; operator*, COMDAT

; 380  : static inline ImVec2 operator*(const ImVec2& lhs, const float rhs)              { return ImVec2(lhs.x * rhs, lhs.y * rhs); }

  00000	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  00006	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00010	55		 push	 rbp
  00011	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00015	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001a	48 8b 45 58	 mov	 rax, QWORD PTR lhs$[rbp]
  0001e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00023	f3 0f 59 45 60	 mulss	 xmm0, DWORD PTR rhs$[rbp]
  00028	48 8b 45 58	 mov	 rax, QWORD PTR lhs$[rbp]
  0002c	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00030	f3 0f 59 4d 60	 mulss	 xmm1, DWORD PTR rhs$[rbp]
  00035	0f 28 d0	 movaps	 xmm2, xmm0
  00038	48 8b 4d 50	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  0003c	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00041	48 8b 45 50	 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00045	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
??D@YA?AUImVec2@@AEBU0@M@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?ImCharIsBlankW@@YA_NI@Z
_TEXT	SEGMENT
tv67 = 64
c$ = 96
?ImCharIsBlankW@@YA_NI@Z PROC				; ImCharIsBlankW, COMDAT

; 351  : static inline bool      ImCharIsBlankW(unsigned int c)  { return c == ' ' || c == '\t' || c == 0x3000; }

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00009	48 8b ec	 mov	 rbp, rsp
  0000c	83 7d 60 20	 cmp	 DWORD PTR c$[rbp], 32	; 00000020H
  00010	74 18		 je	 SHORT $LN3@ImCharIsBl
  00012	83 7d 60 09	 cmp	 DWORD PTR c$[rbp], 9
  00016	74 12		 je	 SHORT $LN3@ImCharIsBl
  00018	81 7d 60 00 30
	00 00		 cmp	 DWORD PTR c$[rbp], 12288 ; 00003000H
  0001f	74 09		 je	 SHORT $LN3@ImCharIsBl
  00021	c7 45 40 00 00
	00 00		 mov	 DWORD PTR tv67[rbp], 0
  00028	eb 07		 jmp	 SHORT $LN4@ImCharIsBl
$LN3@ImCharIsBl:
  0002a	c7 45 40 01 00
	00 00		 mov	 DWORD PTR tv67[rbp], 1
$LN4@ImCharIsBl:
  00031	0f b6 45 40	 movzx	 eax, BYTE PTR tv67[rbp]
  00035	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  00039	5d		 pop	 rbp
  0003a	c3		 ret	 0
?ImCharIsBlankW@@YA_NI@Z ENDP				; ImCharIsBlankW
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?ImCharIsBlankA@@YA_ND@Z
_TEXT	SEGMENT
tv68 = 64
c$ = 96
?ImCharIsBlankA@@YA_ND@Z PROC				; ImCharIsBlankA, COMDAT

; 350  : static inline bool      ImCharIsBlankA(char c)          { return c == ' ' || c == '\t'; }

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	55		 push	 rbp
  00005	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00009	48 8b ec	 mov	 rbp, rsp
  0000c	0f be 45 60	 movsx	 eax, BYTE PTR c$[rbp]
  00010	83 f8 20	 cmp	 eax, 32			; 00000020H
  00013	74 12		 je	 SHORT $LN3@ImCharIsBl
  00015	0f be 45 60	 movsx	 eax, BYTE PTR c$[rbp]
  00019	83 f8 09	 cmp	 eax, 9
  0001c	74 09		 je	 SHORT $LN3@ImCharIsBl
  0001e	c7 45 40 00 00
	00 00		 mov	 DWORD PTR tv68[rbp], 0
  00025	eb 07		 jmp	 SHORT $LN4@ImCharIsBl
$LN3@ImCharIsBl:
  00027	c7 45 40 01 00
	00 00		 mov	 DWORD PTR tv68[rbp], 1
$LN4@ImCharIsBl:
  0002e	0f b6 45 40	 movzx	 eax, BYTE PTR tv68[rbp]
  00032	48 8d 65 50	 lea	 rsp, QWORD PTR [rbp+80]
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?ImCharIsBlankA@@YA_ND@Z ENDP				; ImCharIsBlankA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?ImUpperPowerOfTwo@@YAHH@Z
_TEXT	SEGMENT
v$ = 224
?ImUpperPowerOfTwo@@YAHH@Z PROC				; ImUpperPowerOfTwo, COMDAT

; 333  : static inline int       ImUpperPowerOfTwo(int v)        { v--; v |= v >> 1; v |= v >> 2; v |= v >> 4; v |= v >> 8; v |= v >> 16; v++; return v; }

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000d	48 8b ec	 mov	 rbp, rsp
  00010	48 8b fc	 mov	 rdi, rsp
  00013	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR [rsp+232]
  00026	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  0002c	ff c8		 dec	 eax
  0002e	89 85 e0 00 00
	00		 mov	 DWORD PTR v$[rbp], eax
  00034	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  0003a	d1 f8		 sar	 eax, 1
  0003c	8b 8d e0 00 00
	00		 mov	 ecx, DWORD PTR v$[rbp]
  00042	0b c8		 or	 ecx, eax
  00044	8b c1		 mov	 eax, ecx
  00046	89 85 e0 00 00
	00		 mov	 DWORD PTR v$[rbp], eax
  0004c	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  00052	c1 f8 02	 sar	 eax, 2
  00055	8b 8d e0 00 00
	00		 mov	 ecx, DWORD PTR v$[rbp]
  0005b	0b c8		 or	 ecx, eax
  0005d	8b c1		 mov	 eax, ecx
  0005f	89 85 e0 00 00
	00		 mov	 DWORD PTR v$[rbp], eax
  00065	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  0006b	c1 f8 04	 sar	 eax, 4
  0006e	8b 8d e0 00 00
	00		 mov	 ecx, DWORD PTR v$[rbp]
  00074	0b c8		 or	 ecx, eax
  00076	8b c1		 mov	 eax, ecx
  00078	89 85 e0 00 00
	00		 mov	 DWORD PTR v$[rbp], eax
  0007e	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  00084	c1 f8 08	 sar	 eax, 8
  00087	8b 8d e0 00 00
	00		 mov	 ecx, DWORD PTR v$[rbp]
  0008d	0b c8		 or	 ecx, eax
  0008f	8b c1		 mov	 eax, ecx
  00091	89 85 e0 00 00
	00		 mov	 DWORD PTR v$[rbp], eax
  00097	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  0009d	c1 f8 10	 sar	 eax, 16
  000a0	8b 8d e0 00 00
	00		 mov	 ecx, DWORD PTR v$[rbp]
  000a6	0b c8		 or	 ecx, eax
  000a8	8b c1		 mov	 eax, ecx
  000aa	89 85 e0 00 00
	00		 mov	 DWORD PTR v$[rbp], eax
  000b0	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  000b6	ff c0		 inc	 eax
  000b8	89 85 e0 00 00
	00		 mov	 DWORD PTR v$[rbp], eax
  000be	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  000c4	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000cb	5f		 pop	 rdi
  000cc	5d		 pop	 rbp
  000cd	c3		 ret	 0
?ImUpperPowerOfTwo@@YAHH@Z ENDP				; ImUpperPowerOfTwo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_internal.h
;	COMDAT ?ImQsort@@YAXPEAX_K1P6AHPEBX2@Z@Z
_TEXT	SEGMENT
base$ = 224
count$ = 232
size_of_element$ = 240
compare_func$ = 248
?ImQsort@@YAXPEAX_K1P6AHPEBX2@Z@Z PROC			; ImQsort, COMDAT

; 324  : static inline void      ImQsort(void* base, size_t count, size_t size_of_element, int(IMGUI_CDECL *compare_func)(void const*, void const*)) { if (count > 1) qsort(base, count, size_of_element, compare_func); }

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  00039	48 83 bd e8 00
	00 00 01	 cmp	 QWORD PTR count$[rbp], 1
  00041	76 22		 jbe	 SHORT $LN2@ImQsort
  00043	4c 8b 8d f8 00
	00 00		 mov	 r9, QWORD PTR compare_func$[rbp]
  0004a	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR size_of_element$[rbp]
  00051	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR count$[rbp]
  00058	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR base$[rbp]
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort
$LN2@ImQsort:
  00065	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?ImQsort@@YAXPEAX_K1P6AHPEBX2@Z@Z ENDP			; ImQsort
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
;	COMDAT fabsf
_TEXT	SEGMENT
_X$ = 224
fabsf	PROC						; COMDAT

; 657  :     {

$LN3:
  00000	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  00006	55		 push	 rbp
  00007	57		 push	 rdi
  00008	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000f	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd

; 658  :         return (float)fabs(_X);

  00023	f3 0f 5a 85 e0
	00 00 00	 cvtss2sd xmm0, DWORD PTR _X$[rbp]
  0002b	e8 00 00 00 00	 call	 fabs
  00030	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0

; 659  :     }

  00034	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003b	5f		 pop	 rdi
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GImFont@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GImFont@@QEAAPEAXI@Z PROC				; ImFont::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1ImFont@@QEAA@XZ	; ImFont::~ImFont
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 78 00 00 00	 mov	 edx, 120		; 00000078H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_GImFont@@QEAAPEAXI@Z ENDP				; ImFont::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?IsGlyphRangeUnused@ImFont@@QEAA_NII@Z
_TEXT	SEGMENT
page_begin$ = 4
page_last$ = 36
page_n$1 = 68
this$ = 320
c_begin$ = 328
c_last$ = 336
?IsGlyphRangeUnused@ImFont@@QEAA_NII@Z PROC		; ImFont::IsGlyphRangeUnused, COMDAT

; 3242 : {

$LN8:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00017	48 8b ec	 mov	 rbp, rsp
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 3243 :     unsigned int page_begin = (c_begin / 4096);

  00031	33 d2		 xor	 edx, edx
  00033	8b 85 48 01 00
	00		 mov	 eax, DWORD PTR c_begin$[rbp]
  00039	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  0003e	f7 f1		 div	 ecx
  00040	89 45 04	 mov	 DWORD PTR page_begin$[rbp], eax

; 3244 :     unsigned int page_last = (c_last / 4096);

  00043	33 d2		 xor	 edx, edx
  00045	8b 85 50 01 00
	00		 mov	 eax, DWORD PTR c_last$[rbp]
  0004b	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00050	f7 f1		 div	 ecx
  00052	89 45 24	 mov	 DWORD PTR page_last$[rbp], eax

; 3245 :     for (unsigned int page_n = page_begin; page_n <= page_last; page_n++)

  00055	8b 45 04	 mov	 eax, DWORD PTR page_begin$[rbp]
  00058	89 45 44	 mov	 DWORD PTR page_n$1[rbp], eax
  0005b	eb 08		 jmp	 SHORT $LN4@IsGlyphRan
$LN2@IsGlyphRan:
  0005d	8b 45 44	 mov	 eax, DWORD PTR page_n$1[rbp]
  00060	ff c0		 inc	 eax
  00062	89 45 44	 mov	 DWORD PTR page_n$1[rbp], eax
$LN4@IsGlyphRan:
  00065	8b 45 24	 mov	 eax, DWORD PTR page_last$[rbp]
  00068	39 45 44	 cmp	 DWORD PTR page_n$1[rbp], eax
  0006b	77 3d		 ja	 SHORT $LN3@IsGlyphRan

; 3246 :         if ((page_n >> 3) < sizeof(Used4kPagesMap))

  0006d	8b 45 44	 mov	 eax, DWORD PTR page_n$1[rbp]
  00070	c1 e8 03	 shr	 eax, 3
  00073	8b c0		 mov	 eax, eax
  00075	48 83 f8 02	 cmp	 rax, 2
  00079	73 2d		 jae	 SHORT $LN5@IsGlyphRan

; 3247 :             if (Used4kPagesMap[page_n >> 3] & (1 << (page_n & 7)))

  0007b	8b 45 44	 mov	 eax, DWORD PTR page_n$1[rbp]
  0007e	c1 e8 03	 shr	 eax, 3
  00081	8b c0		 mov	 eax, eax
  00083	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008a	0f b6 44 01 74	 movzx	 eax, BYTE PTR [rcx+rax+116]
  0008f	8b 4d 44	 mov	 ecx, DWORD PTR page_n$1[rbp]
  00092	83 e1 07	 and	 ecx, 7
  00095	ba 01 00 00 00	 mov	 edx, 1
  0009a	d3 e2		 shl	 edx, cl
  0009c	8b ca		 mov	 ecx, edx
  0009e	23 c1		 and	 eax, ecx
  000a0	85 c0		 test	 eax, eax
  000a2	74 04		 je	 SHORT $LN6@IsGlyphRan

; 3248 :                 return false;

  000a4	32 c0		 xor	 al, al
  000a6	eb 04		 jmp	 SHORT $LN1@IsGlyphRan
$LN6@IsGlyphRan:
$LN5@IsGlyphRan:

; 3249 :     return true;

  000a8	eb b3		 jmp	 SHORT $LN2@IsGlyphRan
$LN3@IsGlyphRan:
  000aa	b0 01		 mov	 al, 1
$LN1@IsGlyphRan:

; 3250 : }

  000ac	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000b3	5f		 pop	 rdi
  000b4	5d		 pop	 rbp
  000b5	c3		 ret	 0
?IsGlyphRangeUnused@ImFont@@QEAA_NII@Z ENDP		; ImFont::IsGlyphRangeUnused
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?SetGlyphVisible@ImFont@@QEAAXG_N@Z
_TEXT	SEGMENT
glyph$1 = 8
tv71 = 212
this$ = 256
c$ = 264
visible$ = 272
?SetGlyphVisible@ImFont@@QEAAXG_N@Z PROC		; ImFont::SetGlyphVisible, COMDAT

; 3253 : {

$LN6:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 3254 :     if (ImFontGlyph* glyph = (ImFontGlyph*)(void*)FindGlyph((ImWchar)c))

  00034	0f b7 95 08 01
	00 00		 movzx	 edx, WORD PTR c$[rbp]
  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	e8 00 00 00 00	 call	 ?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyph
  00047	48 89 45 08	 mov	 QWORD PTR glyph$1[rbp], rax
  0004b	48 83 7d 08 00	 cmp	 QWORD PTR glyph$1[rbp], 0
  00050	74 3f		 je	 SHORT $LN2@SetGlyphVi

; 3255 :         glyph->Visible = visible ? 1 : 0;

  00052	0f b6 85 10 01
	00 00		 movzx	 eax, BYTE PTR visible$[rbp]
  00059	85 c0		 test	 eax, eax
  0005b	74 0c		 je	 SHORT $LN4@SetGlyphVi
  0005d	c7 85 d4 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv71[rbp], 1
  00067	eb 0a		 jmp	 SHORT $LN5@SetGlyphVi
$LN4@SetGlyphVi:
  00069	c7 85 d4 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv71[rbp], 0
$LN5@SetGlyphVi:
  00073	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv71[rbp]
  00079	83 e0 01	 and	 eax, 1
  0007c	d1 e0		 shl	 eax, 1
  0007e	48 8b 4d 08	 mov	 rcx, QWORD PTR glyph$1[rbp]
  00082	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00084	83 e1 fd	 and	 ecx, -3			; fffffffdH
  00087	0b c8		 or	 ecx, eax
  00089	8b c1		 mov	 eax, ecx
  0008b	48 8b 4d 08	 mov	 rcx, QWORD PTR glyph$1[rbp]
  0008f	89 01		 mov	 DWORD PTR [rcx], eax
$LN2@SetGlyphVi:

; 3256 : }

  00091	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00098	5f		 pop	 rdi
  00099	5d		 pop	 rbp
  0009a	c3		 ret	 0
?SetGlyphVisible@ImFont@@QEAAXG_N@Z ENDP		; ImFont::SetGlyphVisible
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddRemapChar@ImFont@@QEAAXGG_N@Z
_TEXT	SEGMENT
index_size$ = 4
tv150 = 212
tv137 = 212
this$ = 256
dst$ = 264
src$ = 272
overwrite_dst$ = 280
?AddRemapChar@ImFont@@QEAAXGG_N@Z PROC			; ImFont::AddRemapChar, COMDAT

; 3315 : {

$LN10:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  0000b	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 3316 :     IM_ASSERT(IndexLookup.Size > 0);    // Currently this can only be called AFTER the font has been built, aka after calling ImFontAtlas::GetTexDataAs*() function.

  0003a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  00045	7f 21		 jg	 SHORT $LN5@AddRemapCh
  00047	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??AddRemapChar@ImFont@@QEAAXGG_N@Z@4JA
  0004d	ff c0		 inc	 eax
  0004f	44 8b c0	 mov	 r8d, eax
  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00059	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@OHOOGJPG@?$AAI?$AAn?$AAd?$AAe?$AAx?$AAL?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00066	33 c0		 xor	 eax, eax
$LN5@AddRemapCh:

; 3317 :     unsigned int index_size = (unsigned int)IndexLookup.Size;

  00068	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006f	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00072	89 45 04	 mov	 DWORD PTR index_size$[rbp], eax

; 3318 : 
; 3319 :     if (dst < index_size && IndexLookup.Data[dst] == (ImWchar)-1 && !overwrite_dst) // 'dst' already exists

  00075	0f b7 85 08 01
	00 00		 movzx	 eax, WORD PTR dst$[rbp]
  0007c	3b 45 04	 cmp	 eax, DWORD PTR index_size$[rbp]
  0007f	73 2d		 jae	 SHORT $LN2@AddRemapCh
  00081	0f b7 85 08 01
	00 00		 movzx	 eax, WORD PTR dst$[rbp]
  00088	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008f	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00093	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00097	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0009c	75 10		 jne	 SHORT $LN2@AddRemapCh
  0009e	0f b6 85 18 01
	00 00		 movzx	 eax, BYTE PTR overwrite_dst$[rbp]
  000a5	85 c0		 test	 eax, eax
  000a7	75 05		 jne	 SHORT $LN2@AddRemapCh

; 3320 :         return;

  000a9	e9 ec 00 00 00	 jmp	 $LN1@AddRemapCh
$LN2@AddRemapCh:

; 3321 :     if (src >= index_size && dst >= index_size) // both 'dst' and 'src' don't exist -> no-op

  000ae	0f b7 85 10 01
	00 00		 movzx	 eax, WORD PTR src$[rbp]
  000b5	3b 45 04	 cmp	 eax, DWORD PTR index_size$[rbp]
  000b8	72 11		 jb	 SHORT $LN3@AddRemapCh
  000ba	0f b7 85 08 01
	00 00		 movzx	 eax, WORD PTR dst$[rbp]
  000c1	3b 45 04	 cmp	 eax, DWORD PTR index_size$[rbp]
  000c4	72 05		 jb	 SHORT $LN3@AddRemapCh

; 3322 :         return;

  000c6	e9 cf 00 00 00	 jmp	 $LN1@AddRemapCh
$LN3@AddRemapCh:

; 3323 : 
; 3324 :     GrowIndex(dst + 1);

  000cb	0f b7 85 08 01
	00 00		 movzx	 eax, WORD PTR dst$[rbp]
  000d2	ff c0		 inc	 eax
  000d4	8b d0		 mov	 edx, eax
  000d6	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000dd	e8 00 00 00 00	 call	 ?GrowIndex@ImFont@@QEAAXH@Z ; ImFont::GrowIndex

; 3325 :     IndexLookup[dst] = (src < index_size) ? IndexLookup.Data[src] : (ImWchar)-1;

  000e2	0f b7 85 10 01
	00 00		 movzx	 eax, WORD PTR src$[rbp]
  000e9	3b 45 04	 cmp	 eax, DWORD PTR index_size$[rbp]
  000ec	73 1f		 jae	 SHORT $LN6@AddRemapCh
  000ee	0f b7 85 10 01
	00 00		 movzx	 eax, WORD PTR src$[rbp]
  000f5	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fc	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00100	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00104	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv137[rbp], ax
  0010b	eb 0c		 jmp	 SHORT $LN7@AddRemapCh
$LN6@AddRemapCh:
  0010d	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00112	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv137[rbp], ax
$LN7@AddRemapCh:
  00119	0f b7 85 08 01
	00 00		 movzx	 eax, WORD PTR dst$[rbp]
  00120	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00127	48 83 c1 18	 add	 rcx, 24
  0012b	8b d0		 mov	 edx, eax
  0012d	e8 00 00 00 00	 call	 ??A?$ImVector@G@@QEAAAEAGH@Z ; ImVector<unsigned short>::operator[]
  00132	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv137[rbp]
  00139	66 89 08	 mov	 WORD PTR [rax], cx

; 3326 :     IndexAdvanceX[dst] = (src < index_size) ? IndexAdvanceX.Data[src] : 1.0f;

  0013c	0f b7 85 10 01
	00 00		 movzx	 eax, WORD PTR src$[rbp]
  00143	3b 45 04	 cmp	 eax, DWORD PTR index_size$[rbp]
  00146	73 21		 jae	 SHORT $LN8@AddRemapCh
  00148	0f b7 85 10 01
	00 00		 movzx	 eax, WORD PTR src$[rbp]
  0014f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00156	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0015a	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  0015f	f3 0f 11 85 d4
	00 00 00	 movss	 DWORD PTR tv150[rbp], xmm0
  00167	eb 10		 jmp	 SHORT $LN9@AddRemapCh
$LN8@AddRemapCh:
  00169	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00171	f3 0f 11 85 d4
	00 00 00	 movss	 DWORD PTR tv150[rbp], xmm0
$LN9@AddRemapCh:
  00179	0f b7 85 08 01
	00 00		 movzx	 eax, WORD PTR dst$[rbp]
  00180	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00187	8b d0		 mov	 edx, eax
  00189	e8 00 00 00 00	 call	 ??A?$ImVector@M@@QEAAAEAMH@Z ; ImVector<float>::operator[]
  0018e	f3 0f 10 85 d4
	00 00 00	 movss	 xmm0, DWORD PTR tv150[rbp]
  00196	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
$LN1@AddRemapCh:

; 3327 : }

  0019a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  001a1	5f		 pop	 rdi
  001a2	5d		 pop	 rbp
  001a3	c3		 ret	 0
?AddRemapChar@ImFont@@QEAAXGG_N@Z ENDP			; ImFont::AddRemapChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z
_TEXT	SEGMENT
advance_x_original$1 = 4
char_off_x$2 = 36
glyph$ = 72
pad$ = 100
tv145 = 308
tv81 = 308
this$ = 352
cfg$ = 360
codepoint$ = 368
x0$ = 376
y0$ = 384
x1$ = 392
y1$ = 400
u0$ = 408
v0$ = 416
u1$ = 424
v1$ = 432
advance_x$ = 440
?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z PROC ; ImFont::AddGlyph, COMDAT

; 3271 : {

$LN13:
  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  0000c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00011	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00016	55		 push	 rbp
  00017	57		 push	 rdi
  00018	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0001f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00024	48 8b fc	 mov	 rdi, rsp
  00027	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]

; 3272 :     if (cfg != NULL)

  0003b	48 83 bd 68 01
	00 00 00	 cmp	 QWORD PTR cfg$[rbp], 0
  00043	0f 84 20 01 00
	00		 je	 $LN2@AddGlyph

; 3273 :     {
; 3274 :         // Clamp & recenter if needed
; 3275 :         const float advance_x_original = advance_x;

  00049	f3 0f 10 85 b8
	01 00 00	 movss	 xmm0, DWORD PTR advance_x$[rbp]
  00051	f3 0f 11 45 04	 movss	 DWORD PTR advance_x_original$1[rbp], xmm0

; 3276 :         advance_x = ImClamp(advance_x, cfg->GlyphMinAdvanceX, cfg->GlyphMaxAdvanceX);

  00056	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR cfg$[rbp]
  0005d	f3 0f 10 50 44	 movss	 xmm2, DWORD PTR [rax+68]
  00062	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR cfg$[rbp]
  00069	f3 0f 10 48 40	 movss	 xmm1, DWORD PTR [rax+64]
  0006e	f3 0f 10 85 b8
	01 00 00	 movss	 xmm0, DWORD PTR advance_x$[rbp]
  00076	e8 00 00 00 00	 call	 ??$ImClamp@M@@YAMMMM@Z	; ImClamp<float>
  0007b	f3 0f 11 85 b8
	01 00 00	 movss	 DWORD PTR advance_x$[rbp], xmm0

; 3277 :         if (advance_x != advance_x_original)

  00083	f3 0f 10 85 b8
	01 00 00	 movss	 xmm0, DWORD PTR advance_x$[rbp]
  0008b	0f 2e 45 04	 ucomiss xmm0, DWORD PTR advance_x_original$1[rbp]
  0008f	7a 06		 jp	 SHORT $LN12@AddGlyph
  00091	0f 84 87 00 00
	00		 je	 $LN3@AddGlyph
$LN12@AddGlyph:

; 3278 :         {
; 3279 :             float char_off_x = cfg->PixelSnapH ? ImFloor((advance_x - advance_x_original) * 0.5f) : (advance_x - advance_x_original) * 0.5f;

  00097	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR cfg$[rbp]
  0009e	0f b6 40 20	 movzx	 eax, BYTE PTR [rax+32]
  000a2	85 c0		 test	 eax, eax
  000a4	74 24		 je	 SHORT $LN6@AddGlyph
  000a6	f3 0f 10 85 b8
	01 00 00	 movss	 xmm0, DWORD PTR advance_x$[rbp]
  000ae	f3 0f 5c 45 04	 subss	 xmm0, DWORD PTR advance_x_original$1[rbp]
  000b3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  000bb	e8 00 00 00 00	 call	 ?ImFloor@@YAMM@Z	; ImFloor
  000c0	f3 0f 11 85 34
	01 00 00	 movss	 DWORD PTR tv81[rbp], xmm0
  000c8	eb 1d		 jmp	 SHORT $LN7@AddGlyph
$LN6@AddGlyph:
  000ca	f3 0f 10 85 b8
	01 00 00	 movss	 xmm0, DWORD PTR advance_x$[rbp]
  000d2	f3 0f 5c 45 04	 subss	 xmm0, DWORD PTR advance_x_original$1[rbp]
  000d7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  000df	f3 0f 11 85 34
	01 00 00	 movss	 DWORD PTR tv81[rbp], xmm0
$LN7@AddGlyph:
  000e7	f3 0f 10 85 34
	01 00 00	 movss	 xmm0, DWORD PTR tv81[rbp]
  000ef	f3 0f 11 45 24	 movss	 DWORD PTR char_off_x$2[rbp], xmm0

; 3280 :             x0 += char_off_x;

  000f4	f3 0f 10 85 78
	01 00 00	 movss	 xmm0, DWORD PTR x0$[rbp]
  000fc	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR char_off_x$2[rbp]
  00101	f3 0f 11 85 78
	01 00 00	 movss	 DWORD PTR x0$[rbp], xmm0

; 3281 :             x1 += char_off_x;

  00109	f3 0f 10 85 88
	01 00 00	 movss	 xmm0, DWORD PTR x1$[rbp]
  00111	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR char_off_x$2[rbp]
  00116	f3 0f 11 85 88
	01 00 00	 movss	 DWORD PTR x1$[rbp], xmm0
$LN3@AddGlyph:

; 3282 :         }
; 3283 : 
; 3284 :         // Snap to pixel
; 3285 :         if (cfg->PixelSnapH)

  0011e	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR cfg$[rbp]
  00125	0f b6 40 20	 movzx	 eax, BYTE PTR [rax+32]
  00129	85 c0		 test	 eax, eax
  0012b	74 20		 je	 SHORT $LN4@AddGlyph

; 3286 :             advance_x = IM_ROUND(advance_x);

  0012d	f3 0f 10 85 b8
	01 00 00	 movss	 xmm0, DWORD PTR advance_x$[rbp]
  00135	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0013d	f3 0f 2c c0	 cvttss2si eax, xmm0
  00141	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00145	f3 0f 11 85 b8
	01 00 00	 movss	 DWORD PTR advance_x$[rbp], xmm0
$LN4@AddGlyph:

; 3287 : 
; 3288 :         // Bake spacing
; 3289 :         advance_x += cfg->GlyphExtraSpacing.x;

  0014d	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR cfg$[rbp]
  00154	f3 0f 10 85 b8
	01 00 00	 movss	 xmm0, DWORD PTR advance_x$[rbp]
  0015c	f3 0f 58 40 24	 addss	 xmm0, DWORD PTR [rax+36]
  00161	f3 0f 11 85 b8
	01 00 00	 movss	 DWORD PTR advance_x$[rbp], xmm0
$LN2@AddGlyph:

; 3290 :     }
; 3291 : 
; 3292 :     Glyphs.resize(Glyphs.Size + 1);

  00169	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00170	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00173	ff c0		 inc	 eax
  00175	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017c	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00180	8b d0		 mov	 edx, eax
  00182	e8 00 00 00 00	 call	 ?resize@?$ImVector@UImFontGlyph@@@@QEAAXH@Z ; ImVector<ImFontGlyph>::resize

; 3293 :     ImFontGlyph& glyph = Glyphs.back();

  00187	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0018e	48 83 c0 28	 add	 rax, 40			; 00000028H
  00192	48 8b c8	 mov	 rcx, rax
  00195	e8 00 00 00 00	 call	 ?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ ; ImVector<ImFontGlyph>::back
  0019a	48 89 45 48	 mov	 QWORD PTR glyph$[rbp], rax

; 3294 :     glyph.Codepoint = (unsigned int)codepoint;

  0019e	0f b7 85 70 01
	00 00		 movzx	 eax, WORD PTR codepoint$[rbp]
  001a5	25 ff ff ff 3f	 and	 eax, 1073741823		; 3fffffffH
  001aa	c1 e0 02	 shl	 eax, 2
  001ad	48 8b 4d 48	 mov	 rcx, QWORD PTR glyph$[rbp]
  001b1	8b 09		 mov	 ecx, DWORD PTR [rcx]
  001b3	83 e1 03	 and	 ecx, 3
  001b6	0b c8		 or	 ecx, eax
  001b8	8b c1		 mov	 eax, ecx
  001ba	48 8b 4d 48	 mov	 rcx, QWORD PTR glyph$[rbp]
  001be	89 01		 mov	 DWORD PTR [rcx], eax

; 3295 :     glyph.Visible = (x0 != x1) && (y0 != y1);

  001c0	f3 0f 10 85 78
	01 00 00	 movss	 xmm0, DWORD PTR x0$[rbp]
  001c8	0f 2e 85 88 01
	00 00		 ucomiss xmm0, DWORD PTR x1$[rbp]
  001cf	7a 02		 jp	 SHORT $LN11@AddGlyph
  001d1	74 1f		 je	 SHORT $LN8@AddGlyph
$LN11@AddGlyph:
  001d3	f3 0f 10 85 80
	01 00 00	 movss	 xmm0, DWORD PTR y0$[rbp]
  001db	0f 2e 85 90 01
	00 00		 ucomiss xmm0, DWORD PTR y1$[rbp]
  001e2	7a 02		 jp	 SHORT $LN10@AddGlyph
  001e4	74 0c		 je	 SHORT $LN8@AddGlyph
$LN10@AddGlyph:
  001e6	c7 85 34 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv145[rbp], 1
  001f0	eb 0a		 jmp	 SHORT $LN9@AddGlyph
$LN8@AddGlyph:
  001f2	c7 85 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv145[rbp], 0
$LN9@AddGlyph:
  001fc	8b 85 34 01 00
	00		 mov	 eax, DWORD PTR tv145[rbp]
  00202	83 e0 01	 and	 eax, 1
  00205	d1 e0		 shl	 eax, 1
  00207	48 8b 4d 48	 mov	 rcx, QWORD PTR glyph$[rbp]
  0020b	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0020d	83 e1 fd	 and	 ecx, -3			; fffffffdH
  00210	0b c8		 or	 ecx, eax
  00212	8b c1		 mov	 eax, ecx
  00214	48 8b 4d 48	 mov	 rcx, QWORD PTR glyph$[rbp]
  00218	89 01		 mov	 DWORD PTR [rcx], eax

; 3296 :     glyph.Colored = false;

  0021a	48 8b 45 48	 mov	 rax, QWORD PTR glyph$[rbp]
  0021e	8b 00		 mov	 eax, DWORD PTR [rax]
  00220	83 e0 fe	 and	 eax, -2			; fffffffeH
  00223	48 8b 4d 48	 mov	 rcx, QWORD PTR glyph$[rbp]
  00227	89 01		 mov	 DWORD PTR [rcx], eax

; 3297 :     glyph.X0 = x0;

  00229	48 8b 45 48	 mov	 rax, QWORD PTR glyph$[rbp]
  0022d	f3 0f 10 85 78
	01 00 00	 movss	 xmm0, DWORD PTR x0$[rbp]
  00235	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0

; 3298 :     glyph.Y0 = y0;

  0023a	48 8b 45 48	 mov	 rax, QWORD PTR glyph$[rbp]
  0023e	f3 0f 10 85 80
	01 00 00	 movss	 xmm0, DWORD PTR y0$[rbp]
  00246	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0

; 3299 :     glyph.X1 = x1;

  0024b	48 8b 45 48	 mov	 rax, QWORD PTR glyph$[rbp]
  0024f	f3 0f 10 85 88
	01 00 00	 movss	 xmm0, DWORD PTR x1$[rbp]
  00257	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0

; 3300 :     glyph.Y1 = y1;

  0025c	48 8b 45 48	 mov	 rax, QWORD PTR glyph$[rbp]
  00260	f3 0f 10 85 90
	01 00 00	 movss	 xmm0, DWORD PTR y1$[rbp]
  00268	f3 0f 11 40 14	 movss	 DWORD PTR [rax+20], xmm0

; 3301 :     glyph.U0 = u0;

  0026d	48 8b 45 48	 mov	 rax, QWORD PTR glyph$[rbp]
  00271	f3 0f 10 85 98
	01 00 00	 movss	 xmm0, DWORD PTR u0$[rbp]
  00279	f3 0f 11 40 18	 movss	 DWORD PTR [rax+24], xmm0

; 3302 :     glyph.V0 = v0;

  0027e	48 8b 45 48	 mov	 rax, QWORD PTR glyph$[rbp]
  00282	f3 0f 10 85 a0
	01 00 00	 movss	 xmm0, DWORD PTR v0$[rbp]
  0028a	f3 0f 11 40 1c	 movss	 DWORD PTR [rax+28], xmm0

; 3303 :     glyph.U1 = u1;

  0028f	48 8b 45 48	 mov	 rax, QWORD PTR glyph$[rbp]
  00293	f3 0f 10 85 a8
	01 00 00	 movss	 xmm0, DWORD PTR u1$[rbp]
  0029b	f3 0f 11 40 20	 movss	 DWORD PTR [rax+32], xmm0

; 3304 :     glyph.V1 = v1;

  002a0	48 8b 45 48	 mov	 rax, QWORD PTR glyph$[rbp]
  002a4	f3 0f 10 85 b0
	01 00 00	 movss	 xmm0, DWORD PTR v1$[rbp]
  002ac	f3 0f 11 40 24	 movss	 DWORD PTR [rax+36], xmm0

; 3305 :     glyph.AdvanceX = advance_x;

  002b1	48 8b 45 48	 mov	 rax, QWORD PTR glyph$[rbp]
  002b5	f3 0f 10 85 b8
	01 00 00	 movss	 xmm0, DWORD PTR advance_x$[rbp]
  002bd	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0

; 3306 : 
; 3307 :     // Compute rough surface usage metrics (+1 to account for average padding, +0.99 to round)
; 3308 :     // We use (U1-U0)*TexWidth instead of X1-X0 to account for oversampling.
; 3309 :     float pad = ContainerAtlas->TexGlyphPadding + 0.99f;

  002c2	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002c9	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  002cd	f3 0f 2a 40 14	 cvtsi2ss xmm0, DWORD PTR [rax+20]
  002d2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f7d70a4
  002da	f3 0f 11 45 64	 movss	 DWORD PTR pad$[rbp], xmm0

; 3310 :     DirtyLookupTables = true;

  002df	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002e6	c6 40 60 01	 mov	 BYTE PTR [rax+96], 1

; 3311 :     MetricsTotalSurface += (int)((glyph.U1 - glyph.U0) * ContainerAtlas->TexWidth + pad) * (int)((glyph.V1 - glyph.V0) * ContainerAtlas->TexHeight + pad);

  002ea	48 8b 45 48	 mov	 rax, QWORD PTR glyph$[rbp]
  002ee	48 8b 4d 48	 mov	 rcx, QWORD PTR glyph$[rbp]
  002f2	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [rax+32]
  002f7	f3 0f 5c 41 18	 subss	 xmm0, DWORD PTR [rcx+24]
  002fc	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00303	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00307	f3 0f 2a 48 40	 cvtsi2ss xmm1, DWORD PTR [rax+64]
  0030c	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00310	f3 0f 58 45 64	 addss	 xmm0, DWORD PTR pad$[rbp]
  00315	f3 0f 2c c0	 cvttss2si eax, xmm0
  00319	48 8b 4d 48	 mov	 rcx, QWORD PTR glyph$[rbp]
  0031d	48 8b 55 48	 mov	 rdx, QWORD PTR glyph$[rbp]
  00321	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [rcx+36]
  00326	f3 0f 5c 42 1c	 subss	 xmm0, DWORD PTR [rdx+28]
  0032b	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00332	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00336	f3 0f 2a 49 44	 cvtsi2ss xmm1, DWORD PTR [rcx+68]
  0033b	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0033f	f3 0f 58 45 64	 addss	 xmm0, DWORD PTR pad$[rbp]
  00344	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00348	0f af c1	 imul	 eax, ecx
  0034b	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00352	03 41 70	 add	 eax, DWORD PTR [rcx+112]
  00355	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0035c	89 41 70	 mov	 DWORD PTR [rcx+112], eax

; 3312 : }

  0035f	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  00366	5f		 pop	 rdi
  00367	5d		 pop	 rbp
  00368	c3		 ret	 0
?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z ENDP ; ImFont::AddGlyph
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?GrowIndex@ImFont@@QEAAXH@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
this$ = 288
new_size$ = 296
?GrowIndex@ImFont@@QEAAXH@Z PROC			; ImFont::GrowIndex, COMDAT

; 3259 : {

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 3260 :     IM_ASSERT(IndexAdvanceX.Size == IndexLookup.Size);

  0002e	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  0003f	39 08		 cmp	 DWORD PTR [rax], ecx
  00041	74 21		 je	 SHORT $LN4@GrowIndex
  00043	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??GrowIndex@ImFont@@QEAAXH@Z@4JA
  00049	ff c0		 inc	 eax
  0004b	44 8b c0	 mov	 r8d, eax
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@HLFAHELG@?$AAI?$AAn?$AAd?$AAe?$AAx?$AAA?$AAd?$AAv?$AAa?$AAn?$AAc?$AAe?$AAX?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAI?$AAn?$AAd?$AAe?$AAx?$AAL?$AAo?$AAo?$AAk?$AAu@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@GrowIndex:

; 3261 :     if (new_size <= IndexLookup.Size)

  00064	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006b	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  0006e	39 85 28 01 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  00074	7f 02		 jg	 SHORT $LN2@GrowIndex

; 3262 :         return;

  00076	eb 58		 jmp	 SHORT $LN1@GrowIndex
$LN2@GrowIndex:

; 3263 :     IndexAdvanceX.resize(new_size, -1.0f);

  00078	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00080	f3 0f 11 85 c4
	00 00 00	 movss	 DWORD PTR $T1[rbp], xmm0
  00088	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008f	4c 8d 85 c4 00
	00 00		 lea	 r8, QWORD PTR $T1[rbp]
  00096	8b 95 28 01 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  0009c	48 8b c8	 mov	 rcx, rax
  0009f	e8 00 00 00 00	 call	 ?resize@?$ImVector@M@@QEAAXHAEBM@Z ; ImVector<float>::resize

; 3264 :     IndexLookup.resize(new_size, (ImWchar)-1);

  000a4	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  000a9	66 89 85 e4 00
	00 00		 mov	 WORD PTR $T2[rbp], ax
  000b0	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b7	48 83 c0 18	 add	 rax, 24
  000bb	4c 8d 85 e4 00
	00 00		 lea	 r8, QWORD PTR $T2[rbp]
  000c2	8b 95 28 01 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  000c8	48 8b c8	 mov	 rcx, rax
  000cb	e8 00 00 00 00	 call	 ?resize@?$ImVector@G@@QEAAXHAEBG@Z ; ImVector<unsigned short>::resize
$LN1@GrowIndex:

; 3265 : }

  000d0	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000d7	5f		 pop	 rdi
  000d8	5d		 pop	 rbp
  000d9	c3		 ret	 0
?GrowIndex@ImFont@@QEAAXH@Z ENDP			; ImFont::GrowIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ClearOutputData@ImFont@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?ClearOutputData@ImFont@@QEAAXXZ PROC			; ImFont::ClearOutputData, COMDAT

; 3134 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 3135 :     FontSize = 0.0f;

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	0f 57 c0	 xorps	 xmm0, xmm0
  00034	f3 0f 11 40 14	 movss	 DWORD PTR [rax+20], xmm0

; 3136 :     FallbackAdvanceX = 0.0f;

  00039	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	0f 57 c0	 xorps	 xmm0, xmm0
  00043	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0

; 3137 :     Glyphs.clear();

  00048	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004f	48 83 c0 28	 add	 rax, 40			; 00000028H
  00053	48 8b c8	 mov	 rcx, rax
  00056	e8 00 00 00 00	 call	 ?clear@?$ImVector@UImFontGlyph@@@@QEAAXXZ ; ImVector<ImFontGlyph>::clear

; 3138 :     IndexAdvanceX.clear();

  0005b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 8b c8	 mov	 rcx, rax
  00065	e8 00 00 00 00	 call	 ?clear@?$ImVector@M@@QEAAXXZ ; ImVector<float>::clear

; 3139 :     IndexLookup.clear();

  0006a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 83 c0 18	 add	 rax, 24
  00075	48 8b c8	 mov	 rcx, rax
  00078	e8 00 00 00 00	 call	 ?clear@?$ImVector@G@@QEAAXXZ ; ImVector<unsigned short>::clear

; 3140 :     FallbackGlyph = NULL;

  0007d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00084	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 3141 :     ContainerAtlas = NULL;

  0008c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0

; 3142 :     DirtyLookupTables = true;

  0009b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a2	c6 40 60 01	 mov	 BYTE PTR [rax+96], 1

; 3143 :     Ascent = Descent = 0.0f;

  000a6	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ad	0f 57 c0	 xorps	 xmm0, xmm0
  000b0	f3 0f 11 40 6c	 movss	 DWORD PTR [rax+108], xmm0
  000b5	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bc	0f 57 c0	 xorps	 xmm0, xmm0
  000bf	f3 0f 11 40 68	 movss	 DWORD PTR [rax+104], xmm0

; 3144 :     MetricsTotalSurface = 0;

  000c4	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000cb	c7 40 70 00 00
	00 00		 mov	 DWORD PTR [rax+112], 0

; 3145 : }

  000d2	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000d9	5f		 pop	 rdi
  000da	5d		 pop	 rbp
  000db	c3		 ret	 0
?ClearOutputData@ImFont@@QEAAXXZ ENDP			; ImFont::ClearOutputData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?BuildLookupTable@ImFont@@QEAAXXZ
_TEXT	SEGMENT
max_codepoint$ = 4
i$6 = 36
i$7 = 68
codepoint$8 = 100
page_n$9 = 132
tab_glyph$10 = 168
ellipsis_chars$ = 196
dots_chars$ = 228
dot_char$ = 260
glyph$11 = 296
fallback_chars$ = 324
i$12 = 356
tv218 = 564
tv209 = 568
tv147 = 568
__$ArrayPad$ = 576
this$ = 624
?BuildLookupTable@ImFont@@QEAAXXZ PROC			; ImFont::BuildLookupTable, COMDAT

; 3156 : {

$LN22:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec 70 02
	00 00		 sub	 rsp, 624		; 00000270H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 9c 00 00 00	 mov	 ecx, 156		; 0000009cH
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR [rsp+664]
  0002b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00032	48 33 c5	 xor	 rax, rbp
  00035	48 89 85 40 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3157 :     int max_codepoint = 0;

  0003c	c7 45 04 00 00
	00 00		 mov	 DWORD PTR max_codepoint$[rbp], 0

; 3158 :     for (int i = 0; i != Glyphs.Size; i++)

  00043	c7 45 24 00 00
	00 00		 mov	 DWORD PTR i$6[rbp], 0
  0004a	eb 08		 jmp	 SHORT $LN4@BuildLooku
$LN2@BuildLooku:
  0004c	8b 45 24	 mov	 eax, DWORD PTR i$6[rbp]
  0004f	ff c0		 inc	 eax
  00051	89 45 24	 mov	 DWORD PTR i$6[rbp], eax
$LN4@BuildLooku:
  00054	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005b	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  0005e	39 45 24	 cmp	 DWORD PTR i$6[rbp], eax
  00061	74 2f		 je	 SHORT $LN3@BuildLooku

; 3159 :         max_codepoint = ImMax(max_codepoint, (int)Glyphs[i].Codepoint);

  00063	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 83 c0 28	 add	 rax, 40			; 00000028H
  0006e	8b 55 24	 mov	 edx, DWORD PTR i$6[rbp]
  00071	48 8b c8	 mov	 rcx, rax
  00074	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z ; ImVector<ImFontGlyph>::operator[]
  00079	8b 00		 mov	 eax, DWORD PTR [rax]
  0007b	c1 e8 02	 shr	 eax, 2
  0007e	25 ff ff ff 3f	 and	 eax, 1073741823		; 3fffffffH
  00083	8b d0		 mov	 edx, eax
  00085	8b 4d 04	 mov	 ecx, DWORD PTR max_codepoint$[rbp]
  00088	e8 00 00 00 00	 call	 ??$ImMax@H@@YAHHH@Z	; ImMax<int>
  0008d	89 45 04	 mov	 DWORD PTR max_codepoint$[rbp], eax
  00090	eb ba		 jmp	 SHORT $LN2@BuildLooku
$LN3@BuildLooku:

; 3160 : 
; 3161 :     // Build lookup table
; 3162 :     IM_ASSERT(Glyphs.Size < 0xFFFF); // -1 is reserved

  00092	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00099	81 78 28 ff ff
	00 00		 cmp	 DWORD PTR [rax+40], 65535 ; 0000ffffH
  000a0	7c 22		 jl	 SHORT $LN21@BuildLooku
  000a2	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??BuildLookupTable@ImFont@@QEAAXXZ@4JA
  000a8	83 c0 06	 add	 eax, 6
  000ab	44 8b c0	 mov	 r8d, eax
  000ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@FHBHHKB@?$AAG?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AA0?$AAx?$AAF?$AAF?$AAF?$AAF?$AA?$AA@
  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c2	33 c0		 xor	 eax, eax
$LN21@BuildLooku:

; 3163 :     IndexAdvanceX.clear();

  000c4	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000cb	48 8b c8	 mov	 rcx, rax
  000ce	e8 00 00 00 00	 call	 ?clear@?$ImVector@M@@QEAAXXZ ; ImVector<float>::clear

; 3164 :     IndexLookup.clear();

  000d3	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000da	48 83 c0 18	 add	 rax, 24
  000de	48 8b c8	 mov	 rcx, rax
  000e1	e8 00 00 00 00	 call	 ?clear@?$ImVector@G@@QEAAXXZ ; ImVector<unsigned short>::clear

; 3165 :     DirtyLookupTables = false;

  000e6	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ed	c6 40 60 00	 mov	 BYTE PTR [rax+96], 0

; 3166 :     memset(Used4kPagesMap, 0, sizeof(Used4kPagesMap));

  000f1	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f8	48 83 c0 74	 add	 rax, 116		; 00000074H
  000fc	41 b8 02 00 00
	00		 mov	 r8d, 2
  00102	33 d2		 xor	 edx, edx
  00104	48 8b c8	 mov	 rcx, rax
  00107	e8 00 00 00 00	 call	 memset

; 3167 :     GrowIndex(max_codepoint + 1);

  0010c	8b 45 04	 mov	 eax, DWORD PTR max_codepoint$[rbp]
  0010f	ff c0		 inc	 eax
  00111	8b d0		 mov	 edx, eax
  00113	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011a	e8 00 00 00 00	 call	 ?GrowIndex@ImFont@@QEAAXH@Z ; ImFont::GrowIndex

; 3168 :     for (int i = 0; i < Glyphs.Size; i++)

  0011f	c7 45 44 00 00
	00 00		 mov	 DWORD PTR i$7[rbp], 0
  00126	eb 08		 jmp	 SHORT $LN7@BuildLooku
$LN5@BuildLooku:
  00128	8b 45 44	 mov	 eax, DWORD PTR i$7[rbp]
  0012b	ff c0		 inc	 eax
  0012d	89 45 44	 mov	 DWORD PTR i$7[rbp], eax
$LN7@BuildLooku:
  00130	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00137	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  0013a	39 45 44	 cmp	 DWORD PTR i$7[rbp], eax
  0013d	0f 8d d8 00 00
	00		 jge	 $LN6@BuildLooku

; 3169 :     {
; 3170 :         int codepoint = (int)Glyphs[i].Codepoint;

  00143	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0014a	48 83 c0 28	 add	 rax, 40			; 00000028H
  0014e	8b 55 44	 mov	 edx, DWORD PTR i$7[rbp]
  00151	48 8b c8	 mov	 rcx, rax
  00154	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z ; ImVector<ImFontGlyph>::operator[]
  00159	8b 00		 mov	 eax, DWORD PTR [rax]
  0015b	c1 e8 02	 shr	 eax, 2
  0015e	25 ff ff ff 3f	 and	 eax, 1073741823		; 3fffffffH
  00163	89 45 64	 mov	 DWORD PTR codepoint$8[rbp], eax

; 3171 :         IndexAdvanceX[codepoint] = Glyphs[i].AdvanceX;

  00166	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0016d	48 83 c0 28	 add	 rax, 40			; 00000028H
  00171	8b 55 44	 mov	 edx, DWORD PTR i$7[rbp]
  00174	48 8b c8	 mov	 rcx, rax
  00177	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z ; ImVector<ImFontGlyph>::operator[]
  0017c	48 89 85 38 02
	00 00		 mov	 QWORD PTR tv147[rbp], rax
  00183	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0018a	8b 55 64	 mov	 edx, DWORD PTR codepoint$8[rbp]
  0018d	e8 00 00 00 00	 call	 ??A?$ImVector@M@@QEAAAEAMH@Z ; ImVector<float>::operator[]
  00192	48 8b 8d 38 02
	00 00		 mov	 rcx, QWORD PTR tv147[rbp]
  00199	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [rcx+4]
  0019e	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 3172 :         IndexLookup[codepoint] = (ImWchar)i;

  001a2	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001a9	48 83 c0 18	 add	 rax, 24
  001ad	8b 55 64	 mov	 edx, DWORD PTR codepoint$8[rbp]
  001b0	48 8b c8	 mov	 rcx, rax
  001b3	e8 00 00 00 00	 call	 ??A?$ImVector@G@@QEAAAEAGH@Z ; ImVector<unsigned short>::operator[]
  001b8	0f b7 4d 44	 movzx	 ecx, WORD PTR i$7[rbp]
  001bc	66 89 08	 mov	 WORD PTR [rax], cx

; 3173 : 
; 3174 :         // Mark 4K page as used
; 3175 :         const int page_n = codepoint / 4096;

  001bf	8b 45 64	 mov	 eax, DWORD PTR codepoint$8[rbp]
  001c2	99		 cdq
  001c3	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  001c9	03 c2		 add	 eax, edx
  001cb	c1 f8 0c	 sar	 eax, 12
  001ce	89 85 84 00 00
	00		 mov	 DWORD PTR page_n$9[rbp], eax

; 3176 :         Used4kPagesMap[page_n >> 3] |= 1 << (page_n & 7);

  001d4	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR page_n$9[rbp]
  001da	c1 f8 03	 sar	 eax, 3
  001dd	48 98		 cdqe
  001df	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR page_n$9[rbp]
  001e5	83 e1 07	 and	 ecx, 7
  001e8	ba 01 00 00 00	 mov	 edx, 1
  001ed	d3 e2		 shl	 edx, cl
  001ef	8b ca		 mov	 ecx, edx
  001f1	48 8b 95 70 02
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  001f8	0f b6 44 02 74	 movzx	 eax, BYTE PTR [rdx+rax+116]
  001fd	0b c1		 or	 eax, ecx
  001ff	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR page_n$9[rbp]
  00205	c1 f9 03	 sar	 ecx, 3
  00208	48 63 c9	 movsxd	 rcx, ecx
  0020b	48 8b 95 70 02
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00212	88 44 0a 74	 mov	 BYTE PTR [rdx+rcx+116], al

; 3177 :     }

  00216	e9 0d ff ff ff	 jmp	 $LN5@BuildLooku
$LN6@BuildLooku:

; 3178 : 
; 3179 :     // Create a glyph to handle TAB
; 3180 :     // FIXME: Needs proper TAB handling but it needs to be contextualized (or we could arbitrary say that each string starts at "column 0" ?)
; 3181 :     if (FindGlyph((ImWchar)' '))

  0021b	66 ba 20 00	 mov	 dx, 32			; 00000020H
  0021f	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00226	e8 00 00 00 00	 call	 ?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyph
  0022b	48 85 c0	 test	 rax, rax
  0022e	0f 84 2f 01 00
	00		 je	 $LN11@BuildLooku

; 3182 :     {
; 3183 :         if (Glyphs.back().Codepoint != '\t')   // So we can call this function multiple times (FIXME: Flaky)

  00234	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0023b	48 83 c0 28	 add	 rax, 40			; 00000028H
  0023f	48 8b c8	 mov	 rcx, rax
  00242	e8 00 00 00 00	 call	 ?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ ; ImVector<ImFontGlyph>::back
  00247	8b 00		 mov	 eax, DWORD PTR [rax]
  00249	c1 e8 02	 shr	 eax, 2
  0024c	25 ff ff ff 3f	 and	 eax, 1073741823		; 3fffffffH
  00251	83 f8 09	 cmp	 eax, 9
  00254	74 1e		 je	 SHORT $LN12@BuildLooku

; 3184 :             Glyphs.resize(Glyphs.Size + 1);

  00256	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0025d	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00260	ff c0		 inc	 eax
  00262	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00269	48 83 c1 28	 add	 rcx, 40			; 00000028H
  0026d	8b d0		 mov	 edx, eax
  0026f	e8 00 00 00 00	 call	 ?resize@?$ImVector@UImFontGlyph@@@@QEAAXH@Z ; ImVector<ImFontGlyph>::resize
$LN12@BuildLooku:

; 3185 :         ImFontGlyph& tab_glyph = Glyphs.back();

  00274	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0027b	48 83 c0 28	 add	 rax, 40			; 00000028H
  0027f	48 8b c8	 mov	 rcx, rax
  00282	e8 00 00 00 00	 call	 ?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ ; ImVector<ImFontGlyph>::back
  00287	48 89 85 a8 00
	00 00		 mov	 QWORD PTR tab_glyph$10[rbp], rax

; 3186 :         tab_glyph = *FindGlyph((ImWchar)' ');

  0028e	66 ba 20 00	 mov	 dx, 32			; 00000020H
  00292	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00299	e8 00 00 00 00	 call	 ?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyph
  0029e	48 8b bd a8 00
	00 00		 mov	 rdi, QWORD PTR tab_glyph$10[rbp]
  002a5	48 8b f0	 mov	 rsi, rax
  002a8	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  002ad	f3 a4		 rep movsb

; 3187 :         tab_glyph.Codepoint = '\t';

  002af	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR tab_glyph$10[rbp]
  002b6	8b 00		 mov	 eax, DWORD PTR [rax]
  002b8	83 e0 03	 and	 eax, 3
  002bb	83 c8 24	 or	 eax, 36			; 00000024H
  002be	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR tab_glyph$10[rbp]
  002c5	89 01		 mov	 DWORD PTR [rcx], eax

; 3188 :         tab_glyph.AdvanceX *= IM_TABSIZE;

  002c7	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR tab_glyph$10[rbp]
  002ce	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  002d3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40800000
  002db	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR tab_glyph$10[rbp]
  002e2	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0

; 3189 :         IndexAdvanceX[(int)tab_glyph.Codepoint] = (float)tab_glyph.AdvanceX;

  002e7	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR tab_glyph$10[rbp]
  002ee	8b 00		 mov	 eax, DWORD PTR [rax]
  002f0	c1 e8 02	 shr	 eax, 2
  002f3	25 ff ff ff 3f	 and	 eax, 1073741823		; 3fffffffH
  002f8	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002ff	8b d0		 mov	 edx, eax
  00301	e8 00 00 00 00	 call	 ??A?$ImVector@M@@QEAAAEAMH@Z ; ImVector<float>::operator[]
  00306	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR tab_glyph$10[rbp]
  0030d	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [rcx+4]
  00312	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 3190 :         IndexLookup[(int)tab_glyph.Codepoint] = (ImWchar)(Glyphs.Size - 1);

  00316	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0031d	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00320	ff c8		 dec	 eax
  00322	89 85 34 02 00
	00		 mov	 DWORD PTR tv218[rbp], eax
  00328	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR tab_glyph$10[rbp]
  0032f	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00331	c1 e9 02	 shr	 ecx, 2
  00334	81 e1 ff ff ff
	3f		 and	 ecx, 1073741823		; 3fffffffH
  0033a	48 8b 95 70 02
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00341	48 83 c2 18	 add	 rdx, 24
  00345	48 89 95 38 02
	00 00		 mov	 QWORD PTR tv209[rbp], rdx
  0034c	8b d1		 mov	 edx, ecx
  0034e	48 8b 8d 38 02
	00 00		 mov	 rcx, QWORD PTR tv209[rbp]
  00355	e8 00 00 00 00	 call	 ??A?$ImVector@G@@QEAAAEAGH@Z ; ImVector<unsigned short>::operator[]
  0035a	8b 8d 34 02 00
	00		 mov	 ecx, DWORD PTR tv218[rbp]
  00360	66 89 08	 mov	 WORD PTR [rax], cx
$LN11@BuildLooku:

; 3191 :     }
; 3192 : 
; 3193 :     // Mark special glyphs as not visible (note that AddGlyph already mark as non-visible glyphs with zero-size polygons)
; 3194 :     SetGlyphVisible((ImWchar)' ', false);

  00363	45 33 c0	 xor	 r8d, r8d
  00366	66 ba 20 00	 mov	 dx, 32			; 00000020H
  0036a	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00371	e8 00 00 00 00	 call	 ?SetGlyphVisible@ImFont@@QEAAXG_N@Z ; ImFont::SetGlyphVisible

; 3195 :     SetGlyphVisible((ImWchar)'\t', false);

  00376	45 33 c0	 xor	 r8d, r8d
  00379	66 ba 09 00	 mov	 dx, 9
  0037d	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00384	e8 00 00 00 00	 call	 ?SetGlyphVisible@ImFont@@QEAAXG_N@Z ; ImFont::SetGlyphVisible

; 3196 : 
; 3197 :     // Ellipsis character is required for rendering elided text. We prefer using U+2026 (horizontal ellipsis).
; 3198 :     // However some old fonts may contain ellipsis at U+0085. Here we auto-detect most suitable ellipsis character.
; 3199 :     // FIXME: Note that 0x2026 is rarely included in our font ranges. Because of this we are more likely to use three individual dots.
; 3200 :     const ImWchar ellipsis_chars[] = { (ImWchar)0x2026, (ImWchar)0x0085 };

  00389	b8 26 20 00 00	 mov	 eax, 8230		; 00002026H
  0038e	66 89 85 c4 00
	00 00		 mov	 WORD PTR ellipsis_chars$[rbp], ax
  00395	b8 85 00 00 00	 mov	 eax, 133		; 00000085H
  0039a	66 89 85 c6 00
	00 00		 mov	 WORD PTR ellipsis_chars$[rbp+2], ax

; 3201 :     const ImWchar dots_chars[] = { (ImWchar)'.', (ImWchar)0xFF0E };

  003a1	b8 2e 00 00 00	 mov	 eax, 46			; 0000002eH
  003a6	66 89 85 e4 00
	00 00		 mov	 WORD PTR dots_chars$[rbp], ax
  003ad	b8 0e ff 00 00	 mov	 eax, 65294		; 0000ff0eH
  003b2	66 89 85 e6 00
	00 00		 mov	 WORD PTR dots_chars$[rbp+2], ax

; 3202 :     if (EllipsisChar == (ImWchar)-1)

  003b9	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  003c0	0f b7 40 54	 movzx	 eax, WORD PTR [rax+84]
  003c4	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  003c9	75 24		 jne	 SHORT $LN13@BuildLooku

; 3203 :         EllipsisChar = FindFirstExistingGlyph(this, ellipsis_chars, IM_ARRAYSIZE(ellipsis_chars));

  003cb	41 b8 02 00 00
	00		 mov	 r8d, 2
  003d1	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR ellipsis_chars$[rbp]
  003d8	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003df	e8 00 00 00 00	 call	 ?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z ; FindFirstExistingGlyph
  003e4	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003eb	66 89 41 54	 mov	 WORD PTR [rcx+84], ax
$LN13@BuildLooku:

; 3204 :     const ImWchar dot_char = FindFirstExistingGlyph(this, dots_chars, IM_ARRAYSIZE(dots_chars));

  003ef	41 b8 02 00 00
	00		 mov	 r8d, 2
  003f5	48 8d 95 e4 00
	00 00		 lea	 rdx, QWORD PTR dots_chars$[rbp]
  003fc	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00403	e8 00 00 00 00	 call	 ?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z ; FindFirstExistingGlyph
  00408	66 89 85 04 01
	00 00		 mov	 WORD PTR dot_char$[rbp], ax

; 3205 :     if (EllipsisChar != (ImWchar)-1)

  0040f	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00416	0f b7 40 54	 movzx	 eax, WORD PTR [rax+84]
  0041a	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0041f	74 55		 je	 SHORT $LN14@BuildLooku

; 3206 :     {
; 3207 :         EllipsisCharCount = 1;

  00421	b8 01 00 00 00	 mov	 eax, 1
  00426	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0042d	66 89 41 56	 mov	 WORD PTR [rcx+86], ax

; 3208 :         EllipsisWidth = EllipsisCharStep = FindGlyph(EllipsisChar)->X1;

  00431	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00438	0f b7 50 54	 movzx	 edx, WORD PTR [rax+84]
  0043c	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00443	e8 00 00 00 00	 call	 ?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyph
  00448	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0044f	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  00454	f3 0f 11 41 5c	 movss	 DWORD PTR [rcx+92], xmm0
  00459	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00460	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00467	f3 0f 10 41 5c	 movss	 xmm0, DWORD PTR [rcx+92]
  0046c	f3 0f 11 40 58	 movss	 DWORD PTR [rax+88], xmm0
  00471	e9 a2 00 00 00	 jmp	 $LN15@BuildLooku
$LN14@BuildLooku:

; 3209 :     }
; 3210 :     else if (dot_char != (ImWchar)-1)

  00476	0f b7 85 04 01
	00 00		 movzx	 eax, WORD PTR dot_char$[rbp]
  0047d	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00482	0f 84 90 00 00
	00		 je	 $LN16@BuildLooku

; 3211 :     {
; 3212 :         const ImFontGlyph* glyph = FindGlyph(dot_char);

  00488	0f b7 95 04 01
	00 00		 movzx	 edx, WORD PTR dot_char$[rbp]
  0048f	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00496	e8 00 00 00 00	 call	 ?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyph
  0049b	48 89 85 28 01
	00 00		 mov	 QWORD PTR glyph$11[rbp], rax

; 3213 :         EllipsisChar = dot_char;

  004a2	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  004a9	0f b7 8d 04 01
	00 00		 movzx	 ecx, WORD PTR dot_char$[rbp]
  004b0	66 89 48 54	 mov	 WORD PTR [rax+84], cx

; 3214 :         EllipsisCharCount = 3;

  004b4	b8 03 00 00 00	 mov	 eax, 3
  004b9	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004c0	66 89 41 56	 mov	 WORD PTR [rcx+86], ax

; 3215 :         EllipsisCharStep = (glyph->X1 - glyph->X0) + 1.0f;

  004c4	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR glyph$11[rbp]
  004cb	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR glyph$11[rbp]
  004d2	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  004d7	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [rcx+8]
  004dc	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  004e4	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  004eb	f3 0f 11 40 5c	 movss	 DWORD PTR [rax+92], xmm0

; 3216 :         EllipsisWidth = EllipsisCharStep * 3.0f - 1.0f;

  004f0	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  004f7	f3 0f 10 40 5c	 movss	 xmm0, DWORD PTR [rax+92]
  004fc	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40400000
  00504	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0050c	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00513	f3 0f 11 40 58	 movss	 DWORD PTR [rax+88], xmm0
$LN16@BuildLooku:
$LN15@BuildLooku:

; 3217 :     }
; 3218 : 
; 3219 :     // Setup fallback character
; 3220 :     const ImWchar fallback_chars[] = { (ImWchar)IM_UNICODE_CODEPOINT_INVALID, (ImWchar)'?', (ImWchar)' ' };

  00518	b8 fd ff 00 00	 mov	 eax, 65533		; 0000fffdH
  0051d	66 89 85 44 01
	00 00		 mov	 WORD PTR fallback_chars$[rbp], ax
  00524	b8 3f 00 00 00	 mov	 eax, 63			; 0000003fH
  00529	66 89 85 46 01
	00 00		 mov	 WORD PTR fallback_chars$[rbp+2], ax
  00530	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00535	66 89 85 48 01
	00 00		 mov	 WORD PTR fallback_chars$[rbp+4], ax

; 3221 :     FallbackGlyph = FindGlyphNoFallback(FallbackChar);

  0053c	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00543	0f b7 50 52	 movzx	 edx, WORD PTR [rax+82]
  00547	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0054e	e8 00 00 00 00	 call	 ?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyphNoFallback
  00553	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0055a	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 3222 :     if (FallbackGlyph == NULL)

  0055e	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00565	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0056a	0f 85 92 00 00
	00		 jne	 $LN17@BuildLooku

; 3223 :     {
; 3224 :         FallbackChar = FindFirstExistingGlyph(this, fallback_chars, IM_ARRAYSIZE(fallback_chars));

  00570	41 b8 03 00 00
	00		 mov	 r8d, 3
  00576	48 8d 95 44 01
	00 00		 lea	 rdx, QWORD PTR fallback_chars$[rbp]
  0057d	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00584	e8 00 00 00 00	 call	 ?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z ; FindFirstExistingGlyph
  00589	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00590	66 89 41 52	 mov	 WORD PTR [rcx+82], ax

; 3225 :         FallbackGlyph = FindGlyphNoFallback(FallbackChar);

  00594	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0059b	0f b7 50 52	 movzx	 edx, WORD PTR [rax+82]
  0059f	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005a6	e8 00 00 00 00	 call	 ?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyphNoFallback
  005ab	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005b2	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 3226 :         if (FallbackGlyph == NULL)

  005b6	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  005bd	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  005c2	75 3e		 jne	 SHORT $LN18@BuildLooku

; 3227 :         {
; 3228 :             FallbackGlyph = &Glyphs.back();

  005c4	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  005cb	48 83 c0 28	 add	 rax, 40			; 00000028H
  005cf	48 8b c8	 mov	 rcx, rax
  005d2	e8 00 00 00 00	 call	 ?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ ; ImVector<ImFontGlyph>::back
  005d7	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005de	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 3229 :             FallbackChar = (ImWchar)FallbackGlyph->Codepoint;

  005e2	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  005e9	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  005ed	8b 00		 mov	 eax, DWORD PTR [rax]
  005ef	c1 e8 02	 shr	 eax, 2
  005f2	25 ff ff ff 3f	 and	 eax, 1073741823		; 3fffffffH
  005f7	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005fe	66 89 41 52	 mov	 WORD PTR [rcx+82], ax
$LN18@BuildLooku:
$LN17@BuildLooku:

; 3230 :         }
; 3231 :     }
; 3232 : 
; 3233 :     FallbackAdvanceX = FallbackGlyph->AdvanceX;

  00602	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00609	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0060d	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00614	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00619	f3 0f 11 41 10	 movss	 DWORD PTR [rcx+16], xmm0

; 3234 :     for (int i = 0; i < max_codepoint + 1; i++)

  0061e	c7 85 64 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$12[rbp], 0
  00628	eb 0e		 jmp	 SHORT $LN10@BuildLooku
$LN8@BuildLooku:
  0062a	8b 85 64 01 00
	00		 mov	 eax, DWORD PTR i$12[rbp]
  00630	ff c0		 inc	 eax
  00632	89 85 64 01 00
	00		 mov	 DWORD PTR i$12[rbp], eax
$LN10@BuildLooku:
  00638	8b 45 04	 mov	 eax, DWORD PTR max_codepoint$[rbp]
  0063b	ff c0		 inc	 eax
  0063d	39 85 64 01 00
	00		 cmp	 DWORD PTR i$12[rbp], eax
  00643	7d 44		 jge	 SHORT $LN9@BuildLooku

; 3235 :         if (IndexAdvanceX[i] < 0.0f)

  00645	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0064c	8b 95 64 01 00
	00		 mov	 edx, DWORD PTR i$12[rbp]
  00652	48 8b c8	 mov	 rcx, rax
  00655	e8 00 00 00 00	 call	 ??A?$ImVector@M@@QEAAAEAMH@Z ; ImVector<float>::operator[]
  0065a	0f 57 c0	 xorps	 xmm0, xmm0
  0065d	0f 2f 00	 comiss	 xmm0, DWORD PTR [rax]
  00660	76 25		 jbe	 SHORT $LN19@BuildLooku

; 3236 :             IndexAdvanceX[i] = FallbackAdvanceX;

  00662	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00669	8b 95 64 01 00
	00		 mov	 edx, DWORD PTR i$12[rbp]
  0066f	48 8b c8	 mov	 rcx, rax
  00672	e8 00 00 00 00	 call	 ??A?$ImVector@M@@QEAAAEAMH@Z ; ImVector<float>::operator[]
  00677	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0067e	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [rcx+16]
  00683	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
$LN19@BuildLooku:

; 3237 : }

  00687	eb a1		 jmp	 SHORT $LN8@BuildLooku
$LN9@BuildLooku:
  00689	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0068d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?BuildLookupTable@ImFont@@QEAAXXZ$rtcFrameData
  00694	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00699	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  006a0	48 33 cd	 xor	 rcx, rbp
  006a3	e8 00 00 00 00	 call	 __security_check_cookie
  006a8	48 8d a5 50 02
	00 00		 lea	 rsp, QWORD PTR [rbp+592]
  006af	5f		 pop	 rdi
  006b0	5e		 pop	 rsi
  006b1	5d		 pop	 rbp
  006b2	c3		 ret	 0
?BuildLookupTable@ImFont@@QEAAXXZ ENDP			; ImFont::BuildLookupTable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?RenderText@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IAEBUImVec4@@PEBD3M_N@Z
_TEXT	SEGMENT
x$ = 4
y$ = 36
start_x$ = 68
scale$ = 100
line_height$ = 132
word_wrap_enabled$ = 164
s$ = 200
line_end$4 = 232
s_end$5 = 264
y_end$6 = 292
vtx_count_max$ = 324
idx_count_max$ = 356
idx_expected_size$ = 388
vtx_write$ = 424
idx_write$ = 456
vtx_index$ = 484
col_untinted$ = 516
word_wrap_eol$ = 552
c$7 = 580
glyph$8 = 616
char_width$9 = 644
x1$10 = 676
x2$11 = 708
y1$12 = 740
y2$13 = 772
u1$14 = 804
v1$15 = 836
u2$16 = 868
v2$17 = 900
glyph_col$18 = 932
tv318 = 1332
tv83 = 1332
tv444 = 1336
tv156 = 1336
__$ArrayPad$ = 1344
this$ = 1392
draw_list$ = 1400
size$ = 1408
pos$ = 1416
col$ = 1424
clip_rect$ = 1432
text_begin$ = 1440
text_end$ = 1448
wrap_width$ = 1456
cpu_fine_clip$ = 1464
?RenderText@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IAEBUImVec4@@PEBD3M_N@Z PROC ; ImFont::RenderText, COMDAT

; 3555 : {

$LN46:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec 88 05
	00 00		 sub	 rsp, 1416		; 00000588H
  0001e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 62 01 00 00	 mov	 ecx, 354		; 00000162H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 a8
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1448]
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 40 05
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3556 :     if (!text_end)

  0004b	48 83 bd a8 05
	00 00 00	 cmp	 QWORD PTR text_end$[rbp], 0
  00053	75 20		 jne	 SHORT $LN8@RenderText

; 3557 :         text_end = text_begin + strlen(text_begin); // ImGui:: functions generally already provides a valid text_end, so this is merely to handle direct calls.

  00055	48 8b 8d a0 05
	00 00		 mov	 rcx, QWORD PTR text_begin$[rbp]
  0005c	e8 00 00 00 00	 call	 strlen
  00061	48 8b 8d a0 05
	00 00		 mov	 rcx, QWORD PTR text_begin$[rbp]
  00068	48 03 c8	 add	 rcx, rax
  0006b	48 8b c1	 mov	 rax, rcx
  0006e	48 89 85 a8 05
	00 00		 mov	 QWORD PTR text_end$[rbp], rax
$LN8@RenderText:

; 3558 : 
; 3559 :     // Align to be pixel perfect
; 3560 :     float x = IM_FLOOR(pos.x);

  00075	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR pos$[rbp]
  0007c	f3 0f 2c 00	 cvttss2si eax, DWORD PTR [rax]
  00080	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00084	f3 0f 11 45 04	 movss	 DWORD PTR x$[rbp], xmm0

; 3561 :     float y = IM_FLOOR(pos.y);

  00089	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR pos$[rbp]
  00090	f3 0f 2c 40 04	 cvttss2si eax, DWORD PTR [rax+4]
  00095	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00099	f3 0f 11 45 24	 movss	 DWORD PTR y$[rbp], xmm0

; 3562 :     if (y > clip_rect.w)

  0009e	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR clip_rect$[rbp]
  000a5	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR y$[rbp]
  000aa	0f 2f 40 0c	 comiss	 xmm0, DWORD PTR [rax+12]
  000ae	76 05		 jbe	 SHORT $LN9@RenderText

; 3563 :         return;

  000b0	e9 e2 0c 00 00	 jmp	 $LN1@RenderText
$LN9@RenderText:

; 3564 : 
; 3565 :     const float start_x = x;

  000b5	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR x$[rbp]
  000ba	f3 0f 11 45 44	 movss	 DWORD PTR start_x$[rbp], xmm0

; 3566 :     const float scale = size / FontSize;

  000bf	48 8b 85 70 05
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c6	f3 0f 10 85 80
	05 00 00	 movss	 xmm0, DWORD PTR size$[rbp]
  000ce	f3 0f 5e 40 14	 divss	 xmm0, DWORD PTR [rax+20]
  000d3	f3 0f 11 45 64	 movss	 DWORD PTR scale$[rbp], xmm0

; 3567 :     const float line_height = FontSize * scale;

  000d8	48 8b 85 70 05
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000df	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  000e4	f3 0f 59 45 64	 mulss	 xmm0, DWORD PTR scale$[rbp]
  000e9	f3 0f 11 85 84
	00 00 00	 movss	 DWORD PTR line_height$[rbp], xmm0

; 3568 :     const bool word_wrap_enabled = (wrap_width > 0.0f);

  000f1	f3 0f 10 85 b0
	05 00 00	 movss	 xmm0, DWORD PTR wrap_width$[rbp]
  000f9	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00100	76 09		 jbe	 SHORT $LN35@RenderText
  00102	c6 85 34 05 00
	00 01		 mov	 BYTE PTR tv83[rbp], 1
  00109	eb 07		 jmp	 SHORT $LN36@RenderText
$LN35@RenderText:
  0010b	c6 85 34 05 00
	00 00		 mov	 BYTE PTR tv83[rbp], 0
$LN36@RenderText:
  00112	0f b6 85 34 05
	00 00		 movzx	 eax, BYTE PTR tv83[rbp]
  00119	88 85 a4 00 00
	00		 mov	 BYTE PTR word_wrap_enabled$[rbp], al

; 3569 : 
; 3570 :     // Fast-forward to first visible line
; 3571 :     const char* s = text_begin;

  0011f	48 8b 85 a0 05
	00 00		 mov	 rax, QWORD PTR text_begin$[rbp]
  00126	48 89 85 c8 00
	00 00		 mov	 QWORD PTR s$[rbp], rax

; 3572 :     if (y + line_height < clip_rect.y)

  0012d	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR y$[rbp]
  00132	f3 0f 58 85 84
	00 00 00	 addss	 xmm0, DWORD PTR line_height$[rbp]
  0013a	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR clip_rect$[rbp]
  00141	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [rax+4]
  00146	0f 2f c8	 comiss	 xmm1, xmm0
  00149	0f 86 01 01 00
	00		 jbe	 $LN10@RenderText
$LN2@RenderText:

; 3573 :         while (y + line_height < clip_rect.y && s < text_end)

  0014f	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR y$[rbp]
  00154	f3 0f 58 85 84
	00 00 00	 addss	 xmm0, DWORD PTR line_height$[rbp]
  0015c	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR clip_rect$[rbp]
  00163	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [rax+4]
  00168	0f 2f c8	 comiss	 xmm1, xmm0
  0016b	0f 86 df 00 00
	00		 jbe	 $LN3@RenderText
  00171	48 8b 85 a8 05
	00 00		 mov	 rax, QWORD PTR text_end$[rbp]
  00178	48 39 85 c8 00
	00 00		 cmp	 QWORD PTR s$[rbp], rax
  0017f	0f 83 cb 00 00
	00		 jae	 $LN3@RenderText

; 3574 :         {
; 3575 :             const char* line_end = (const char*)memchr(s, '\n', text_end - s);

  00185	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR s$[rbp]
  0018c	48 8b 8d a8 05
	00 00		 mov	 rcx, QWORD PTR text_end$[rbp]
  00193	48 2b c8	 sub	 rcx, rax
  00196	48 8b c1	 mov	 rax, rcx
  00199	4c 8b c0	 mov	 r8, rax
  0019c	ba 0a 00 00 00	 mov	 edx, 10
  001a1	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  001a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  001ae	48 89 85 e8 00
	00 00		 mov	 QWORD PTR line_end$4[rbp], rax

; 3576 :             if (!line_end)

  001b5	48 83 bd e8 00
	00 00 00	 cmp	 QWORD PTR line_end$4[rbp], 0
  001bd	75 0e		 jne	 SHORT $LN11@RenderText

; 3577 :                 line_end = text_end;

  001bf	48 8b 85 a8 05
	00 00		 mov	 rax, QWORD PTR text_end$[rbp]
  001c6	48 89 85 e8 00
	00 00		 mov	 QWORD PTR line_end$4[rbp], rax
$LN11@RenderText:

; 3578 :             if (word_wrap_enabled)

  001cd	0f b6 85 a4 00
	00 00		 movzx	 eax, BYTE PTR word_wrap_enabled$[rbp]
  001d4	85 c0		 test	 eax, eax
  001d6	74 50		 je	 SHORT $LN12@RenderText

; 3579 :             {
; 3580 :                 // FIXME-OPT: This is not optimal as do first do a search for \n before calling CalcWordWrapPositionA().
; 3581 :                 // If the specs for CalcWordWrapPositionA() were reworked to optionally return on \n we could combine both.
; 3582 :                 // However it is still better than nothing performing the fast-forward!
; 3583 :                 s = CalcWordWrapPositionA(scale, s, line_end, wrap_width);

  001d8	f3 0f 10 85 b0
	05 00 00	 movss	 xmm0, DWORD PTR wrap_width$[rbp]
  001e0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  001e6	4c 8b 8d e8 00
	00 00		 mov	 r9, QWORD PTR line_end$4[rbp]
  001ed	4c 8b 85 c8 00
	00 00		 mov	 r8, QWORD PTR s$[rbp]
  001f4	f3 0f 10 4d 64	 movss	 xmm1, DWORD PTR scale$[rbp]
  001f9	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00200	e8 00 00 00 00	 call	 ?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z ; ImFont::CalcWordWrapPositionA
  00205	48 89 85 c8 00
	00 00		 mov	 QWORD PTR s$[rbp], rax

; 3584 :                 s = CalcWordWrapNextLineStartA(s, text_end);

  0020c	48 8b 95 a8 05
	00 00		 mov	 rdx, QWORD PTR text_end$[rbp]
  00213	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  0021a	e8 00 00 00 00	 call	 ?CalcWordWrapNextLineStartA@@YAPEBDPEBD0@Z ; CalcWordWrapNextLineStartA
  0021f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR s$[rbp], rax

; 3585 :             }
; 3586 :             else

  00226	eb 11		 jmp	 SHORT $LN13@RenderText
$LN12@RenderText:

; 3587 :             {
; 3588 :                 s = line_end + 1;

  00228	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR line_end$4[rbp]
  0022f	48 ff c0	 inc	 rax
  00232	48 89 85 c8 00
	00 00		 mov	 QWORD PTR s$[rbp], rax
$LN13@RenderText:

; 3589 :             }
; 3590 :             y += line_height;

  00239	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR y$[rbp]
  0023e	f3 0f 58 85 84
	00 00 00	 addss	 xmm0, DWORD PTR line_height$[rbp]
  00246	f3 0f 11 45 24	 movss	 DWORD PTR y$[rbp], xmm0

; 3591 :         }

  0024b	e9 ff fe ff ff	 jmp	 $LN2@RenderText
$LN3@RenderText:
$LN10@RenderText:

; 3592 : 
; 3593 :     // For large text, scan for the last visible line in order to avoid over-reserving in the call to PrimReserve()
; 3594 :     // Note that very large horizontal line will still be affected by the issue (e.g. a one megabyte string buffer without a newline will likely crash atm)
; 3595 :     if (text_end - s > 10000 && !word_wrap_enabled)

  00250	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR s$[rbp]
  00257	48 8b 8d a8 05
	00 00		 mov	 rcx, QWORD PTR text_end$[rbp]
  0025e	48 2b c8	 sub	 rcx, rax
  00261	48 8b c1	 mov	 rax, rcx
  00264	48 3d 10 27 00
	00		 cmp	 rax, 10000		; 00002710H
  0026a	0f 8e eb 00 00
	00		 jle	 $LN14@RenderText
  00270	0f b6 85 a4 00
	00 00		 movzx	 eax, BYTE PTR word_wrap_enabled$[rbp]
  00277	85 c0		 test	 eax, eax
  00279	0f 85 dc 00 00
	00		 jne	 $LN14@RenderText

; 3596 :     {
; 3597 :         const char* s_end = s;

  0027f	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR s$[rbp]
  00286	48 89 85 08 01
	00 00		 mov	 QWORD PTR s_end$5[rbp], rax

; 3598 :         float y_end = y;

  0028d	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR y$[rbp]
  00292	f3 0f 11 85 24
	01 00 00	 movss	 DWORD PTR y_end$6[rbp], xmm0
$LN4@RenderText:

; 3599 :         while (y_end < clip_rect.w && s_end < text_end)

  0029a	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR clip_rect$[rbp]
  002a1	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [rax+12]
  002a6	0f 2f 85 24 01
	00 00		 comiss	 xmm0, DWORD PTR y_end$6[rbp]
  002ad	0f 86 9a 00 00
	00		 jbe	 $LN5@RenderText
  002b3	48 8b 85 a8 05
	00 00		 mov	 rax, QWORD PTR text_end$[rbp]
  002ba	48 39 85 08 01
	00 00		 cmp	 QWORD PTR s_end$5[rbp], rax
  002c1	0f 83 86 00 00
	00		 jae	 $LN5@RenderText

; 3600 :         {
; 3601 :             s_end = (const char*)memchr(s_end, '\n', text_end - s_end);

  002c7	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR s_end$5[rbp]
  002ce	48 8b 8d a8 05
	00 00		 mov	 rcx, QWORD PTR text_end$[rbp]
  002d5	48 2b c8	 sub	 rcx, rax
  002d8	48 8b c1	 mov	 rax, rcx
  002db	4c 8b c0	 mov	 r8, rax
  002de	ba 0a 00 00 00	 mov	 edx, 10
  002e3	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR s_end$5[rbp]
  002ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  002f0	48 89 85 08 01
	00 00		 mov	 QWORD PTR s_end$5[rbp], rax

; 3602 :             s_end = s_end ? s_end + 1 : text_end;

  002f7	48 83 bd 08 01
	00 00 00	 cmp	 QWORD PTR s_end$5[rbp], 0
  002ff	74 13		 je	 SHORT $LN37@RenderText
  00301	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR s_end$5[rbp]
  00308	48 ff c0	 inc	 rax
  0030b	48 89 85 38 05
	00 00		 mov	 QWORD PTR tv156[rbp], rax
  00312	eb 0e		 jmp	 SHORT $LN38@RenderText
$LN37@RenderText:
  00314	48 8b 85 a8 05
	00 00		 mov	 rax, QWORD PTR text_end$[rbp]
  0031b	48 89 85 38 05
	00 00		 mov	 QWORD PTR tv156[rbp], rax
$LN38@RenderText:
  00322	48 8b 85 38 05
	00 00		 mov	 rax, QWORD PTR tv156[rbp]
  00329	48 89 85 08 01
	00 00		 mov	 QWORD PTR s_end$5[rbp], rax

; 3603 :             y_end += line_height;

  00330	f3 0f 10 85 24
	01 00 00	 movss	 xmm0, DWORD PTR y_end$6[rbp]
  00338	f3 0f 58 85 84
	00 00 00	 addss	 xmm0, DWORD PTR line_height$[rbp]
  00340	f3 0f 11 85 24
	01 00 00	 movss	 DWORD PTR y_end$6[rbp], xmm0

; 3604 :         }

  00348	e9 4d ff ff ff	 jmp	 $LN4@RenderText
$LN5@RenderText:

; 3605 :         text_end = s_end;

  0034d	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR s_end$5[rbp]
  00354	48 89 85 a8 05
	00 00		 mov	 QWORD PTR text_end$[rbp], rax
$LN14@RenderText:

; 3606 :     }
; 3607 :     if (s == text_end)

  0035b	48 8b 85 a8 05
	00 00		 mov	 rax, QWORD PTR text_end$[rbp]
  00362	48 39 85 c8 00
	00 00		 cmp	 QWORD PTR s$[rbp], rax
  00369	75 05		 jne	 SHORT $LN15@RenderText

; 3608 :         return;

  0036b	e9 27 0a 00 00	 jmp	 $LN1@RenderText
$LN15@RenderText:

; 3609 : 
; 3610 :     // Reserve vertices for remaining worse case (over-reserving is useful and easily amortized)
; 3611 :     const int vtx_count_max = (int)(text_end - s) * 4;

  00370	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR s$[rbp]
  00377	48 8b 8d a8 05
	00 00		 mov	 rcx, QWORD PTR text_end$[rbp]
  0037e	48 2b c8	 sub	 rcx, rax
  00381	48 8b c1	 mov	 rax, rcx
  00384	c1 e0 02	 shl	 eax, 2
  00387	89 85 44 01 00
	00		 mov	 DWORD PTR vtx_count_max$[rbp], eax

; 3612 :     const int idx_count_max = (int)(text_end - s) * 6;

  0038d	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR s$[rbp]
  00394	48 8b 8d a8 05
	00 00		 mov	 rcx, QWORD PTR text_end$[rbp]
  0039b	48 2b c8	 sub	 rcx, rax
  0039e	48 8b c1	 mov	 rax, rcx
  003a1	6b c0 06	 imul	 eax, eax, 6
  003a4	89 85 64 01 00
	00		 mov	 DWORD PTR idx_count_max$[rbp], eax

; 3613 :     const int idx_expected_size = draw_list->IdxBuffer.Size + idx_count_max;

  003aa	48 8b 85 78 05
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  003b1	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  003b4	03 85 64 01 00
	00		 add	 eax, DWORD PTR idx_count_max$[rbp]
  003ba	89 85 84 01 00
	00		 mov	 DWORD PTR idx_expected_size$[rbp], eax

; 3614 :     draw_list->PrimReserve(idx_count_max, vtx_count_max);

  003c0	44 8b 85 44 01
	00 00		 mov	 r8d, DWORD PTR vtx_count_max$[rbp]
  003c7	8b 95 64 01 00
	00		 mov	 edx, DWORD PTR idx_count_max$[rbp]
  003cd	48 8b 8d 78 05
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  003d4	e8 00 00 00 00	 call	 ?PrimReserve@ImDrawList@@QEAAXHH@Z ; ImDrawList::PrimReserve

; 3615 :     ImDrawVert*  vtx_write = draw_list->_VtxWritePtr;

  003d9	48 8b 85 78 05
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  003e0	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  003e4	48 89 85 a8 01
	00 00		 mov	 QWORD PTR vtx_write$[rbp], rax

; 3616 :     ImDrawIdx*   idx_write = draw_list->_IdxWritePtr;

  003eb	48 8b 85 78 05
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  003f2	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  003f6	48 89 85 c8 01
	00 00		 mov	 QWORD PTR idx_write$[rbp], rax

; 3617 :     unsigned int vtx_index = draw_list->_VtxCurrentIdx;

  003fd	48 8b 85 78 05
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  00404	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  00407	89 85 e4 01 00
	00		 mov	 DWORD PTR vtx_index$[rbp], eax

; 3618 : 
; 3619 :     const ImU32 col_untinted = col | ~IM_COL32_A_MASK;

  0040d	8b 85 90 05 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  00413	0d ff ff ff 00	 or	 eax, 16777215		; 00ffffffH
  00418	89 85 04 02 00
	00		 mov	 DWORD PTR col_untinted$[rbp], eax

; 3620 :     const char* word_wrap_eol = NULL;

  0041e	48 c7 85 28 02
	00 00 00 00 00
	00		 mov	 QWORD PTR word_wrap_eol$[rbp], 0
$LN45@RenderText:
$LN44@RenderText:
$LN43@RenderText:
$LN42@RenderText:
$LN41@RenderText:
$LN6@RenderText:

; 3621 : 
; 3622 :     while (s < text_end)

  00429	48 8b 85 a8 05
	00 00		 mov	 rax, QWORD PTR text_end$[rbp]
  00430	48 39 85 c8 00
	00 00		 cmp	 QWORD PTR s$[rbp], rax
  00437	0f 83 87 08 00
	00		 jae	 $LN7@RenderText

; 3623 :     {
; 3624 :         if (word_wrap_enabled)

  0043d	0f b6 85 a4 00
	00 00		 movzx	 eax, BYTE PTR word_wrap_enabled$[rbp]
  00444	85 c0		 test	 eax, eax
  00446	0f 84 a5 00 00
	00		 je	 $LN16@RenderText

; 3625 :         {
; 3626 :             // Calculate how far we can render. Requires two passes on the string data but keeps the code simple and not intrusive for what's essentially an uncommon feature.
; 3627 :             if (!word_wrap_eol)

  0044c	48 83 bd 28 02
	00 00 00	 cmp	 QWORD PTR word_wrap_eol$[rbp], 0
  00454	75 45		 jne	 SHORT $LN17@RenderText

; 3628 :                 word_wrap_eol = CalcWordWrapPositionA(scale, s, text_end, wrap_width - (x - start_x));

  00456	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR x$[rbp]
  0045b	f3 0f 5c 45 44	 subss	 xmm0, DWORD PTR start_x$[rbp]
  00460	f3 0f 10 8d b0
	05 00 00	 movss	 xmm1, DWORD PTR wrap_width$[rbp]
  00468	f3 0f 5c c8	 subss	 xmm1, xmm0
  0046c	0f 28 c1	 movaps	 xmm0, xmm1
  0046f	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00475	4c 8b 8d a8 05
	00 00		 mov	 r9, QWORD PTR text_end$[rbp]
  0047c	4c 8b 85 c8 00
	00 00		 mov	 r8, QWORD PTR s$[rbp]
  00483	f3 0f 10 4d 64	 movss	 xmm1, DWORD PTR scale$[rbp]
  00488	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0048f	e8 00 00 00 00	 call	 ?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z ; ImFont::CalcWordWrapPositionA
  00494	48 89 85 28 02
	00 00		 mov	 QWORD PTR word_wrap_eol$[rbp], rax
$LN17@RenderText:

; 3629 : 
; 3630 :             if (s >= word_wrap_eol)

  0049b	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR word_wrap_eol$[rbp]
  004a2	48 39 85 c8 00
	00 00		 cmp	 QWORD PTR s$[rbp], rax
  004a9	72 46		 jb	 SHORT $LN18@RenderText

; 3631 :             {
; 3632 :                 x = start_x;

  004ab	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR start_x$[rbp]
  004b0	f3 0f 11 45 04	 movss	 DWORD PTR x$[rbp], xmm0

; 3633 :                 y += line_height;

  004b5	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR y$[rbp]
  004ba	f3 0f 58 85 84
	00 00 00	 addss	 xmm0, DWORD PTR line_height$[rbp]
  004c2	f3 0f 11 45 24	 movss	 DWORD PTR y$[rbp], xmm0

; 3634 :                 word_wrap_eol = NULL;

  004c7	48 c7 85 28 02
	00 00 00 00 00
	00		 mov	 QWORD PTR word_wrap_eol$[rbp], 0

; 3635 :                 s = CalcWordWrapNextLineStartA(s, text_end); // Wrapping skips upcoming blanks

  004d2	48 8b 95 a8 05
	00 00		 mov	 rdx, QWORD PTR text_end$[rbp]
  004d9	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  004e0	e8 00 00 00 00	 call	 ?CalcWordWrapNextLineStartA@@YAPEBDPEBD0@Z ; CalcWordWrapNextLineStartA
  004e5	48 89 85 c8 00
	00 00		 mov	 QWORD PTR s$[rbp], rax

; 3636 :                 continue;

  004ec	e9 38 ff ff ff	 jmp	 $LN6@RenderText
$LN18@RenderText:
$LN16@RenderText:

; 3637 :             }
; 3638 :         }
; 3639 : 
; 3640 :         // Decode and advance source
; 3641 :         unsigned int c = (unsigned int)*s;

  004f1	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR s$[rbp]
  004f8	0f be 00	 movsx	 eax, BYTE PTR [rax]
  004fb	89 85 44 02 00
	00		 mov	 DWORD PTR c$7[rbp], eax

; 3642 :         if (c < 0x80)

  00501	81 bd 44 02 00
	00 80 00 00 00	 cmp	 DWORD PTR c$7[rbp], 128	; 00000080H
  0050b	73 13		 jae	 SHORT $LN19@RenderText

; 3643 :             s += 1;

  0050d	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR s$[rbp]
  00514	48 ff c0	 inc	 rax
  00517	48 89 85 c8 00
	00 00		 mov	 QWORD PTR s$[rbp], rax

; 3644 :         else

  0051e	eb 30		 jmp	 SHORT $LN20@RenderText
$LN19@RenderText:

; 3645 :             s += ImTextCharFromUtf8(&c, s, text_end);

  00520	4c 8b 85 a8 05
	00 00		 mov	 r8, QWORD PTR text_end$[rbp]
  00527	48 8b 95 c8 00
	00 00		 mov	 rdx, QWORD PTR s$[rbp]
  0052e	48 8d 8d 44 02
	00 00		 lea	 rcx, QWORD PTR c$7[rbp]
  00535	e8 00 00 00 00	 call	 ?ImTextCharFromUtf8@@YAHPEAIPEBD1@Z ; ImTextCharFromUtf8
  0053a	48 98		 cdqe
  0053c	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  00543	48 03 c8	 add	 rcx, rax
  00546	48 8b c1	 mov	 rax, rcx
  00549	48 89 85 c8 00
	00 00		 mov	 QWORD PTR s$[rbp], rax
$LN20@RenderText:

; 3646 : 
; 3647 :         if (c < 32)

  00550	83 bd 44 02 00
	00 20		 cmp	 DWORD PTR c$7[rbp], 32	; 00000020H
  00557	73 4f		 jae	 SHORT $LN21@RenderText

; 3648 :         {
; 3649 :             if (c == '\n')

  00559	83 bd 44 02 00
	00 0a		 cmp	 DWORD PTR c$7[rbp], 10
  00560	75 38		 jne	 SHORT $LN22@RenderText

; 3650 :             {
; 3651 :                 x = start_x;

  00562	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR start_x$[rbp]
  00567	f3 0f 11 45 04	 movss	 DWORD PTR x$[rbp], xmm0

; 3652 :                 y += line_height;

  0056c	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR y$[rbp]
  00571	f3 0f 58 85 84
	00 00 00	 addss	 xmm0, DWORD PTR line_height$[rbp]
  00579	f3 0f 11 45 24	 movss	 DWORD PTR y$[rbp], xmm0

; 3653 :                 if (y > clip_rect.w)

  0057e	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR clip_rect$[rbp]
  00585	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR y$[rbp]
  0058a	0f 2f 40 0c	 comiss	 xmm0, DWORD PTR [rax+12]
  0058e	76 05		 jbe	 SHORT $LN23@RenderText

; 3654 :                     break; // break out of main loop

  00590	e9 2f 07 00 00	 jmp	 $LN7@RenderText
$LN23@RenderText:

; 3655 :                 continue;

  00595	e9 8f fe ff ff	 jmp	 $LN41@RenderText
$LN22@RenderText:

; 3656 :             }
; 3657 :             if (c == '\r')

  0059a	83 bd 44 02 00
	00 0d		 cmp	 DWORD PTR c$7[rbp], 13
  005a1	75 05		 jne	 SHORT $LN24@RenderText

; 3658 :                 continue;

  005a3	e9 81 fe ff ff	 jmp	 $LN42@RenderText
$LN24@RenderText:
$LN21@RenderText:

; 3659 :         }
; 3660 : 
; 3661 :         const ImFontGlyph* glyph = FindGlyph((ImWchar)c);

  005a8	0f b7 95 44 02
	00 00		 movzx	 edx, WORD PTR c$7[rbp]
  005af	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005b6	e8 00 00 00 00	 call	 ?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyph
  005bb	48 89 85 68 02
	00 00		 mov	 QWORD PTR glyph$8[rbp], rax

; 3662 :         if (glyph == NULL)

  005c2	48 83 bd 68 02
	00 00 00	 cmp	 QWORD PTR glyph$8[rbp], 0
  005ca	75 05		 jne	 SHORT $LN25@RenderText

; 3663 :             continue;

  005cc	e9 58 fe ff ff	 jmp	 $LN43@RenderText
$LN25@RenderText:

; 3664 : 
; 3665 :         float char_width = glyph->AdvanceX * scale;

  005d1	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR glyph$8[rbp]
  005d8	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  005dd	f3 0f 59 45 64	 mulss	 xmm0, DWORD PTR scale$[rbp]
  005e2	f3 0f 11 85 84
	02 00 00	 movss	 DWORD PTR char_width$9[rbp], xmm0

; 3666 :         if (glyph->Visible)

  005ea	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR glyph$8[rbp]
  005f1	8b 00		 mov	 eax, DWORD PTR [rax]
  005f3	d1 e8		 shr	 eax, 1
  005f5	83 e0 01	 and	 eax, 1
  005f8	85 c0		 test	 eax, eax
  005fa	0f 84 ad 06 00
	00		 je	 $LN26@RenderText

; 3667 :         {
; 3668 :             // We don't do a second finer clipping test on the Y axis as we've already skipped anything before clip_rect.y and exit once we pass clip_rect.w
; 3669 :             float x1 = x + glyph->X0 * scale;

  00600	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR glyph$8[rbp]
  00607	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  0060c	f3 0f 59 45 64	 mulss	 xmm0, DWORD PTR scale$[rbp]
  00611	f3 0f 10 4d 04	 movss	 xmm1, DWORD PTR x$[rbp]
  00616	f3 0f 58 c8	 addss	 xmm1, xmm0
  0061a	0f 28 c1	 movaps	 xmm0, xmm1
  0061d	f3 0f 11 85 a4
	02 00 00	 movss	 DWORD PTR x1$10[rbp], xmm0

; 3670 :             float x2 = x + glyph->X1 * scale;

  00625	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR glyph$8[rbp]
  0062c	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  00631	f3 0f 59 45 64	 mulss	 xmm0, DWORD PTR scale$[rbp]
  00636	f3 0f 10 4d 04	 movss	 xmm1, DWORD PTR x$[rbp]
  0063b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0063f	0f 28 c1	 movaps	 xmm0, xmm1
  00642	f3 0f 11 85 c4
	02 00 00	 movss	 DWORD PTR x2$11[rbp], xmm0

; 3671 :             float y1 = y + glyph->Y0 * scale;

  0064a	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR glyph$8[rbp]
  00651	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [rax+12]
  00656	f3 0f 59 45 64	 mulss	 xmm0, DWORD PTR scale$[rbp]
  0065b	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR y$[rbp]
  00660	f3 0f 58 c8	 addss	 xmm1, xmm0
  00664	0f 28 c1	 movaps	 xmm0, xmm1
  00667	f3 0f 11 85 e4
	02 00 00	 movss	 DWORD PTR y1$12[rbp], xmm0

; 3672 :             float y2 = y + glyph->Y1 * scale;

  0066f	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR glyph$8[rbp]
  00676	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  0067b	f3 0f 59 45 64	 mulss	 xmm0, DWORD PTR scale$[rbp]
  00680	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR y$[rbp]
  00685	f3 0f 58 c8	 addss	 xmm1, xmm0
  00689	0f 28 c1	 movaps	 xmm0, xmm1
  0068c	f3 0f 11 85 04
	03 00 00	 movss	 DWORD PTR y2$13[rbp], xmm0

; 3673 :             if (x1 <= clip_rect.z && x2 >= clip_rect.x)

  00694	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR clip_rect$[rbp]
  0069b	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  006a0	0f 2f 85 a4 02
	00 00		 comiss	 xmm0, DWORD PTR x1$10[rbp]
  006a7	0f 82 00 06 00
	00		 jb	 $LN27@RenderText
  006ad	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR clip_rect$[rbp]
  006b4	f3 0f 10 85 c4
	02 00 00	 movss	 xmm0, DWORD PTR x2$11[rbp]
  006bc	0f 2f 00	 comiss	 xmm0, DWORD PTR [rax]
  006bf	0f 82 e8 05 00
	00		 jb	 $LN27@RenderText

; 3674 :             {
; 3675 :                 // Render a character
; 3676 :                 float u1 = glyph->U0;

  006c5	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR glyph$8[rbp]
  006cc	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [rax+24]
  006d1	f3 0f 11 85 24
	03 00 00	 movss	 DWORD PTR u1$14[rbp], xmm0

; 3677 :                 float v1 = glyph->V0;

  006d9	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR glyph$8[rbp]
  006e0	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [rax+28]
  006e5	f3 0f 11 85 44
	03 00 00	 movss	 DWORD PTR v1$15[rbp], xmm0

; 3678 :                 float u2 = glyph->U1;

  006ed	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR glyph$8[rbp]
  006f4	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [rax+32]
  006f9	f3 0f 11 85 64
	03 00 00	 movss	 DWORD PTR u2$16[rbp], xmm0

; 3679 :                 float v2 = glyph->V1;

  00701	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR glyph$8[rbp]
  00708	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [rax+36]
  0070d	f3 0f 11 85 84
	03 00 00	 movss	 DWORD PTR v2$17[rbp], xmm0

; 3680 : 
; 3681 :                 // CPU side clipping used to fit text in their frame when the frame is too small. Only does clipping for axis aligned quads.
; 3682 :                 if (cpu_fine_clip)

  00715	0f b6 85 b8 05
	00 00		 movzx	 eax, BYTE PTR cpu_fine_clip$[rbp]
  0071c	85 c0		 test	 eax, eax
  0071e	0f 84 33 02 00
	00		 je	 $LN28@RenderText

; 3683 :                 {
; 3684 :                     if (x1 < clip_rect.x)

  00724	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR clip_rect$[rbp]
  0072b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  0072f	0f 2f 85 a4 02
	00 00		 comiss	 xmm0, DWORD PTR x1$10[rbp]
  00736	76 74		 jbe	 SHORT $LN29@RenderText

; 3685 :                     {
; 3686 :                         u1 = u1 + (1.0f - (x2 - clip_rect.x) / (x2 - x1)) * (u2 - u1);

  00738	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR clip_rect$[rbp]
  0073f	f3 0f 10 85 c4
	02 00 00	 movss	 xmm0, DWORD PTR x2$11[rbp]
  00747	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [rax]
  0074b	f3 0f 10 8d c4
	02 00 00	 movss	 xmm1, DWORD PTR x2$11[rbp]
  00753	f3 0f 5c 8d a4
	02 00 00	 subss	 xmm1, DWORD PTR x1$10[rbp]
  0075b	f3 0f 5e c1	 divss	 xmm0, xmm1
  0075f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00767	f3 0f 5c c8	 subss	 xmm1, xmm0
  0076b	0f 28 c1	 movaps	 xmm0, xmm1
  0076e	f3 0f 10 8d 64
	03 00 00	 movss	 xmm1, DWORD PTR u2$16[rbp]
  00776	f3 0f 5c 8d 24
	03 00 00	 subss	 xmm1, DWORD PTR u1$14[rbp]
  0077e	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00782	f3 0f 10 8d 24
	03 00 00	 movss	 xmm1, DWORD PTR u1$14[rbp]
  0078a	f3 0f 58 c8	 addss	 xmm1, xmm0
  0078e	0f 28 c1	 movaps	 xmm0, xmm1
  00791	f3 0f 11 85 24
	03 00 00	 movss	 DWORD PTR u1$14[rbp], xmm0

; 3687 :                         x1 = clip_rect.x;

  00799	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR clip_rect$[rbp]
  007a0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  007a4	f3 0f 11 85 a4
	02 00 00	 movss	 DWORD PTR x1$10[rbp], xmm0
$LN29@RenderText:

; 3688 :                     }
; 3689 :                     if (y1 < clip_rect.y)

  007ac	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR clip_rect$[rbp]
  007b3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  007b8	0f 2f 85 e4 02
	00 00		 comiss	 xmm0, DWORD PTR y1$12[rbp]
  007bf	76 76		 jbe	 SHORT $LN30@RenderText

; 3690 :                     {
; 3691 :                         v1 = v1 + (1.0f - (y2 - clip_rect.y) / (y2 - y1)) * (v2 - v1);

  007c1	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR clip_rect$[rbp]
  007c8	f3 0f 10 85 04
	03 00 00	 movss	 xmm0, DWORD PTR y2$13[rbp]
  007d0	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [rax+4]
  007d5	f3 0f 10 8d 04
	03 00 00	 movss	 xmm1, DWORD PTR y2$13[rbp]
  007dd	f3 0f 5c 8d e4
	02 00 00	 subss	 xmm1, DWORD PTR y1$12[rbp]
  007e5	f3 0f 5e c1	 divss	 xmm0, xmm1
  007e9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  007f1	f3 0f 5c c8	 subss	 xmm1, xmm0
  007f5	0f 28 c1	 movaps	 xmm0, xmm1
  007f8	f3 0f 10 8d 84
	03 00 00	 movss	 xmm1, DWORD PTR v2$17[rbp]
  00800	f3 0f 5c 8d 44
	03 00 00	 subss	 xmm1, DWORD PTR v1$15[rbp]
  00808	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0080c	f3 0f 10 8d 44
	03 00 00	 movss	 xmm1, DWORD PTR v1$15[rbp]
  00814	f3 0f 58 c8	 addss	 xmm1, xmm0
  00818	0f 28 c1	 movaps	 xmm0, xmm1
  0081b	f3 0f 11 85 44
	03 00 00	 movss	 DWORD PTR v1$15[rbp], xmm0

; 3692 :                         y1 = clip_rect.y;

  00823	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR clip_rect$[rbp]
  0082a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  0082f	f3 0f 11 85 e4
	02 00 00	 movss	 DWORD PTR y1$12[rbp], xmm0
$LN30@RenderText:

; 3693 :                     }
; 3694 :                     if (x2 > clip_rect.z)

  00837	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR clip_rect$[rbp]
  0083e	f3 0f 10 85 c4
	02 00 00	 movss	 xmm0, DWORD PTR x2$11[rbp]
  00846	0f 2f 40 08	 comiss	 xmm0, DWORD PTR [rax+8]
  0084a	76 67		 jbe	 SHORT $LN31@RenderText

; 3695 :                     {
; 3696 :                         u2 = u1 + ((clip_rect.z - x1) / (x2 - x1)) * (u2 - u1);

  0084c	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR clip_rect$[rbp]
  00853	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  00858	f3 0f 5c 85 a4
	02 00 00	 subss	 xmm0, DWORD PTR x1$10[rbp]
  00860	f3 0f 10 8d c4
	02 00 00	 movss	 xmm1, DWORD PTR x2$11[rbp]
  00868	f3 0f 5c 8d a4
	02 00 00	 subss	 xmm1, DWORD PTR x1$10[rbp]
  00870	f3 0f 5e c1	 divss	 xmm0, xmm1
  00874	f3 0f 10 8d 64
	03 00 00	 movss	 xmm1, DWORD PTR u2$16[rbp]
  0087c	f3 0f 5c 8d 24
	03 00 00	 subss	 xmm1, DWORD PTR u1$14[rbp]
  00884	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00888	f3 0f 10 8d 24
	03 00 00	 movss	 xmm1, DWORD PTR u1$14[rbp]
  00890	f3 0f 58 c8	 addss	 xmm1, xmm0
  00894	0f 28 c1	 movaps	 xmm0, xmm1
  00897	f3 0f 11 85 64
	03 00 00	 movss	 DWORD PTR u2$16[rbp], xmm0

; 3697 :                         x2 = clip_rect.z;

  0089f	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR clip_rect$[rbp]
  008a6	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  008ab	f3 0f 11 85 c4
	02 00 00	 movss	 DWORD PTR x2$11[rbp], xmm0
$LN31@RenderText:

; 3698 :                     }
; 3699 :                     if (y2 > clip_rect.w)

  008b3	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR clip_rect$[rbp]
  008ba	f3 0f 10 85 04
	03 00 00	 movss	 xmm0, DWORD PTR y2$13[rbp]
  008c2	0f 2f 40 0c	 comiss	 xmm0, DWORD PTR [rax+12]
  008c6	76 67		 jbe	 SHORT $LN32@RenderText

; 3700 :                     {
; 3701 :                         v2 = v1 + ((clip_rect.w - y1) / (y2 - y1)) * (v2 - v1);

  008c8	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR clip_rect$[rbp]
  008cf	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [rax+12]
  008d4	f3 0f 5c 85 e4
	02 00 00	 subss	 xmm0, DWORD PTR y1$12[rbp]
  008dc	f3 0f 10 8d 04
	03 00 00	 movss	 xmm1, DWORD PTR y2$13[rbp]
  008e4	f3 0f 5c 8d e4
	02 00 00	 subss	 xmm1, DWORD PTR y1$12[rbp]
  008ec	f3 0f 5e c1	 divss	 xmm0, xmm1
  008f0	f3 0f 10 8d 84
	03 00 00	 movss	 xmm1, DWORD PTR v2$17[rbp]
  008f8	f3 0f 5c 8d 44
	03 00 00	 subss	 xmm1, DWORD PTR v1$15[rbp]
  00900	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00904	f3 0f 10 8d 44
	03 00 00	 movss	 xmm1, DWORD PTR v1$15[rbp]
  0090c	f3 0f 58 c8	 addss	 xmm1, xmm0
  00910	0f 28 c1	 movaps	 xmm0, xmm1
  00913	f3 0f 11 85 84
	03 00 00	 movss	 DWORD PTR v2$17[rbp], xmm0

; 3702 :                         y2 = clip_rect.w;

  0091b	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR clip_rect$[rbp]
  00922	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [rax+12]
  00927	f3 0f 11 85 04
	03 00 00	 movss	 DWORD PTR y2$13[rbp], xmm0
$LN32@RenderText:

; 3703 :                     }
; 3704 :                     if (y1 >= y2)

  0092f	f3 0f 10 85 e4
	02 00 00	 movss	 xmm0, DWORD PTR y1$12[rbp]
  00937	0f 2f 85 04 03
	00 00		 comiss	 xmm0, DWORD PTR y2$13[rbp]
  0093e	72 17		 jb	 SHORT $LN33@RenderText

; 3705 :                     {
; 3706 :                         x += char_width;

  00940	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR x$[rbp]
  00945	f3 0f 58 85 84
	02 00 00	 addss	 xmm0, DWORD PTR char_width$9[rbp]
  0094d	f3 0f 11 45 04	 movss	 DWORD PTR x$[rbp], xmm0

; 3707 :                         continue;

  00952	e9 d2 fa ff ff	 jmp	 $LN44@RenderText
$LN33@RenderText:
$LN28@RenderText:

; 3708 :                     }
; 3709 :                 }
; 3710 : 
; 3711 :                 // Support for untinted glyphs
; 3712 :                 ImU32 glyph_col = glyph->Colored ? col_untinted : col;

  00957	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR glyph$8[rbp]
  0095e	8b 00		 mov	 eax, DWORD PTR [rax]
  00960	83 e0 01	 and	 eax, 1
  00963	85 c0		 test	 eax, eax
  00965	74 0e		 je	 SHORT $LN39@RenderText
  00967	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR col_untinted$[rbp]
  0096d	89 85 34 05 00
	00		 mov	 DWORD PTR tv318[rbp], eax
  00973	eb 0c		 jmp	 SHORT $LN40@RenderText
$LN39@RenderText:
  00975	8b 85 90 05 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  0097b	89 85 34 05 00
	00		 mov	 DWORD PTR tv318[rbp], eax
$LN40@RenderText:
  00981	8b 85 34 05 00
	00		 mov	 eax, DWORD PTR tv318[rbp]
  00987	89 85 a4 03 00
	00		 mov	 DWORD PTR glyph_col$18[rbp], eax

; 3713 : 
; 3714 :                 // We are NOT calling PrimRectUV() here because non-inlined causes too much overhead in a debug builds. Inlined here:
; 3715 :                 {
; 3716 :                     vtx_write[0].pos.x = x1; vtx_write[0].pos.y = y1; vtx_write[0].col = glyph_col; vtx_write[0].uv.x = u1; vtx_write[0].uv.y = v1;

  0098d	b8 14 00 00 00	 mov	 eax, 20
  00992	48 6b c0 00	 imul	 rax, rax, 0
  00996	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  0099d	f3 0f 10 85 a4
	02 00 00	 movss	 xmm0, DWORD PTR x1$10[rbp]
  009a5	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0
  009aa	b8 14 00 00 00	 mov	 eax, 20
  009af	48 6b c0 00	 imul	 rax, rax, 0
  009b3	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  009ba	f3 0f 10 85 e4
	02 00 00	 movss	 xmm0, DWORD PTR y1$12[rbp]
  009c2	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0
  009c8	b8 14 00 00 00	 mov	 eax, 20
  009cd	48 6b c0 00	 imul	 rax, rax, 0
  009d1	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  009d8	8b 95 a4 03 00
	00		 mov	 edx, DWORD PTR glyph_col$18[rbp]
  009de	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx
  009e2	b8 14 00 00 00	 mov	 eax, 20
  009e7	48 6b c0 00	 imul	 rax, rax, 0
  009eb	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  009f2	f3 0f 10 85 24
	03 00 00	 movss	 xmm0, DWORD PTR u1$14[rbp]
  009fa	f3 0f 11 44 01
	08		 movss	 DWORD PTR [rcx+rax+8], xmm0
  00a00	b8 14 00 00 00	 mov	 eax, 20
  00a05	48 6b c0 00	 imul	 rax, rax, 0
  00a09	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  00a10	f3 0f 10 85 44
	03 00 00	 movss	 xmm0, DWORD PTR v1$15[rbp]
  00a18	f3 0f 11 44 01
	0c		 movss	 DWORD PTR [rcx+rax+12], xmm0

; 3717 :                     vtx_write[1].pos.x = x2; vtx_write[1].pos.y = y1; vtx_write[1].col = glyph_col; vtx_write[1].uv.x = u2; vtx_write[1].uv.y = v1;

  00a1e	b8 14 00 00 00	 mov	 eax, 20
  00a23	48 6b c0 01	 imul	 rax, rax, 1
  00a27	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  00a2e	f3 0f 10 85 c4
	02 00 00	 movss	 xmm0, DWORD PTR x2$11[rbp]
  00a36	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0
  00a3b	b8 14 00 00 00	 mov	 eax, 20
  00a40	48 6b c0 01	 imul	 rax, rax, 1
  00a44	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  00a4b	f3 0f 10 85 e4
	02 00 00	 movss	 xmm0, DWORD PTR y1$12[rbp]
  00a53	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0
  00a59	b8 14 00 00 00	 mov	 eax, 20
  00a5e	48 6b c0 01	 imul	 rax, rax, 1
  00a62	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  00a69	8b 95 a4 03 00
	00		 mov	 edx, DWORD PTR glyph_col$18[rbp]
  00a6f	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx
  00a73	b8 14 00 00 00	 mov	 eax, 20
  00a78	48 6b c0 01	 imul	 rax, rax, 1
  00a7c	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  00a83	f3 0f 10 85 64
	03 00 00	 movss	 xmm0, DWORD PTR u2$16[rbp]
  00a8b	f3 0f 11 44 01
	08		 movss	 DWORD PTR [rcx+rax+8], xmm0
  00a91	b8 14 00 00 00	 mov	 eax, 20
  00a96	48 6b c0 01	 imul	 rax, rax, 1
  00a9a	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  00aa1	f3 0f 10 85 44
	03 00 00	 movss	 xmm0, DWORD PTR v1$15[rbp]
  00aa9	f3 0f 11 44 01
	0c		 movss	 DWORD PTR [rcx+rax+12], xmm0

; 3718 :                     vtx_write[2].pos.x = x2; vtx_write[2].pos.y = y2; vtx_write[2].col = glyph_col; vtx_write[2].uv.x = u2; vtx_write[2].uv.y = v2;

  00aaf	b8 14 00 00 00	 mov	 eax, 20
  00ab4	48 6b c0 02	 imul	 rax, rax, 2
  00ab8	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  00abf	f3 0f 10 85 c4
	02 00 00	 movss	 xmm0, DWORD PTR x2$11[rbp]
  00ac7	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0
  00acc	b8 14 00 00 00	 mov	 eax, 20
  00ad1	48 6b c0 02	 imul	 rax, rax, 2
  00ad5	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  00adc	f3 0f 10 85 04
	03 00 00	 movss	 xmm0, DWORD PTR y2$13[rbp]
  00ae4	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0
  00aea	b8 14 00 00 00	 mov	 eax, 20
  00aef	48 6b c0 02	 imul	 rax, rax, 2
  00af3	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  00afa	8b 95 a4 03 00
	00		 mov	 edx, DWORD PTR glyph_col$18[rbp]
  00b00	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx
  00b04	b8 14 00 00 00	 mov	 eax, 20
  00b09	48 6b c0 02	 imul	 rax, rax, 2
  00b0d	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  00b14	f3 0f 10 85 64
	03 00 00	 movss	 xmm0, DWORD PTR u2$16[rbp]
  00b1c	f3 0f 11 44 01
	08		 movss	 DWORD PTR [rcx+rax+8], xmm0
  00b22	b8 14 00 00 00	 mov	 eax, 20
  00b27	48 6b c0 02	 imul	 rax, rax, 2
  00b2b	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  00b32	f3 0f 10 85 84
	03 00 00	 movss	 xmm0, DWORD PTR v2$17[rbp]
  00b3a	f3 0f 11 44 01
	0c		 movss	 DWORD PTR [rcx+rax+12], xmm0

; 3719 :                     vtx_write[3].pos.x = x1; vtx_write[3].pos.y = y2; vtx_write[3].col = glyph_col; vtx_write[3].uv.x = u1; vtx_write[3].uv.y = v2;

  00b40	b8 14 00 00 00	 mov	 eax, 20
  00b45	48 6b c0 03	 imul	 rax, rax, 3
  00b49	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  00b50	f3 0f 10 85 a4
	02 00 00	 movss	 xmm0, DWORD PTR x1$10[rbp]
  00b58	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0
  00b5d	b8 14 00 00 00	 mov	 eax, 20
  00b62	48 6b c0 03	 imul	 rax, rax, 3
  00b66	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  00b6d	f3 0f 10 85 04
	03 00 00	 movss	 xmm0, DWORD PTR y2$13[rbp]
  00b75	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0
  00b7b	b8 14 00 00 00	 mov	 eax, 20
  00b80	48 6b c0 03	 imul	 rax, rax, 3
  00b84	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  00b8b	8b 95 a4 03 00
	00		 mov	 edx, DWORD PTR glyph_col$18[rbp]
  00b91	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx
  00b95	b8 14 00 00 00	 mov	 eax, 20
  00b9a	48 6b c0 03	 imul	 rax, rax, 3
  00b9e	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  00ba5	f3 0f 10 85 24
	03 00 00	 movss	 xmm0, DWORD PTR u1$14[rbp]
  00bad	f3 0f 11 44 01
	08		 movss	 DWORD PTR [rcx+rax+8], xmm0
  00bb3	b8 14 00 00 00	 mov	 eax, 20
  00bb8	48 6b c0 03	 imul	 rax, rax, 3
  00bbc	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  00bc3	f3 0f 10 85 84
	03 00 00	 movss	 xmm0, DWORD PTR v2$17[rbp]
  00bcb	f3 0f 11 44 01
	0c		 movss	 DWORD PTR [rcx+rax+12], xmm0

; 3720 :                     idx_write[0] = (ImDrawIdx)(vtx_index); idx_write[1] = (ImDrawIdx)(vtx_index + 1); idx_write[2] = (ImDrawIdx)(vtx_index + 2);

  00bd1	b8 02 00 00 00	 mov	 eax, 2
  00bd6	48 6b c0 00	 imul	 rax, rax, 0
  00bda	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR idx_write$[rbp]
  00be1	0f b7 95 e4 01
	00 00		 movzx	 edx, WORD PTR vtx_index$[rbp]
  00be8	66 89 14 01	 mov	 WORD PTR [rcx+rax], dx
  00bec	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR vtx_index$[rbp]
  00bf2	ff c0		 inc	 eax
  00bf4	b9 02 00 00 00	 mov	 ecx, 2
  00bf9	48 6b c9 01	 imul	 rcx, rcx, 1
  00bfd	48 8b 95 c8 01
	00 00		 mov	 rdx, QWORD PTR idx_write$[rbp]
  00c04	66 89 04 0a	 mov	 WORD PTR [rdx+rcx], ax
  00c08	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR vtx_index$[rbp]
  00c0e	83 c0 02	 add	 eax, 2
  00c11	b9 02 00 00 00	 mov	 ecx, 2
  00c16	48 6b c9 02	 imul	 rcx, rcx, 2
  00c1a	48 8b 95 c8 01
	00 00		 mov	 rdx, QWORD PTR idx_write$[rbp]
  00c21	66 89 04 0a	 mov	 WORD PTR [rdx+rcx], ax

; 3721 :                     idx_write[3] = (ImDrawIdx)(vtx_index); idx_write[4] = (ImDrawIdx)(vtx_index + 2); idx_write[5] = (ImDrawIdx)(vtx_index + 3);

  00c25	b8 02 00 00 00	 mov	 eax, 2
  00c2a	48 6b c0 03	 imul	 rax, rax, 3
  00c2e	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR idx_write$[rbp]
  00c35	0f b7 95 e4 01
	00 00		 movzx	 edx, WORD PTR vtx_index$[rbp]
  00c3c	66 89 14 01	 mov	 WORD PTR [rcx+rax], dx
  00c40	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR vtx_index$[rbp]
  00c46	83 c0 02	 add	 eax, 2
  00c49	b9 02 00 00 00	 mov	 ecx, 2
  00c4e	48 6b c9 04	 imul	 rcx, rcx, 4
  00c52	48 8b 95 c8 01
	00 00		 mov	 rdx, QWORD PTR idx_write$[rbp]
  00c59	66 89 04 0a	 mov	 WORD PTR [rdx+rcx], ax
  00c5d	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR vtx_index$[rbp]
  00c63	83 c0 03	 add	 eax, 3
  00c66	b9 02 00 00 00	 mov	 ecx, 2
  00c6b	48 6b c9 05	 imul	 rcx, rcx, 5
  00c6f	48 8b 95 c8 01
	00 00		 mov	 rdx, QWORD PTR idx_write$[rbp]
  00c76	66 89 04 0a	 mov	 WORD PTR [rdx+rcx], ax

; 3722 :                     vtx_write += 4;

  00c7a	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR vtx_write$[rbp]
  00c81	48 83 c0 50	 add	 rax, 80			; 00000050H
  00c85	48 89 85 a8 01
	00 00		 mov	 QWORD PTR vtx_write$[rbp], rax

; 3723 :                     vtx_index += 4;

  00c8c	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR vtx_index$[rbp]
  00c92	83 c0 04	 add	 eax, 4
  00c95	89 85 e4 01 00
	00		 mov	 DWORD PTR vtx_index$[rbp], eax

; 3724 :                     idx_write += 6;

  00c9b	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR idx_write$[rbp]
  00ca2	48 83 c0 0c	 add	 rax, 12
  00ca6	48 89 85 c8 01
	00 00		 mov	 QWORD PTR idx_write$[rbp], rax
$LN27@RenderText:
$LN26@RenderText:

; 3725 :                 }
; 3726 :             }
; 3727 :         }
; 3728 :         x += char_width;

  00cad	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR x$[rbp]
  00cb2	f3 0f 58 85 84
	02 00 00	 addss	 xmm0, DWORD PTR char_width$9[rbp]
  00cba	f3 0f 11 45 04	 movss	 DWORD PTR x$[rbp], xmm0

; 3729 :     }

  00cbf	e9 65 f7 ff ff	 jmp	 $LN45@RenderText
$LN7@RenderText:

; 3730 : 
; 3731 :     // Give back unused vertices (clipped ones, blanks) ~ this is essentially a PrimUnreserve() action.
; 3732 :     draw_list->VtxBuffer.Size = (int)(vtx_write - draw_list->VtxBuffer.Data); // Same as calling shrink()

  00cc4	48 8b 85 78 05
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  00ccb	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00ccf	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  00cd6	48 2b c8	 sub	 rcx, rax
  00cd9	48 8b c1	 mov	 rax, rcx
  00cdc	48 99		 cdq
  00cde	b9 14 00 00 00	 mov	 ecx, 20
  00ce3	48 f7 f9	 idiv	 rcx
  00ce6	48 8b 8d 78 05
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00ced	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 3733 :     draw_list->IdxBuffer.Size = (int)(idx_write - draw_list->IdxBuffer.Data);

  00cf0	48 8b 85 78 05
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  00cf7	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00cfb	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR idx_write$[rbp]
  00d02	48 2b c8	 sub	 rcx, rax
  00d05	48 8b c1	 mov	 rax, rcx
  00d08	48 d1 f8	 sar	 rax, 1
  00d0b	48 8b 8d 78 05
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00d12	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 3734 :     draw_list->CmdBuffer[draw_list->CmdBuffer.Size - 1].ElemCount -= (idx_expected_size - draw_list->IdxBuffer.Size);

  00d15	48 8b 85 78 05
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  00d1c	8b 00		 mov	 eax, DWORD PTR [rax]
  00d1e	ff c8		 dec	 eax
  00d20	48 8b 8d 78 05
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00d27	8b d0		 mov	 edx, eax
  00d29	e8 00 00 00 00	 call	 ??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z ; ImVector<ImDrawCmd>::operator[]
  00d2e	48 83 c0 20	 add	 rax, 32			; 00000020H
  00d32	48 89 85 38 05
	00 00		 mov	 QWORD PTR tv444[rbp], rax
  00d39	48 8b 85 78 05
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  00d40	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00d43	8b 8d 84 01 00
	00		 mov	 ecx, DWORD PTR idx_expected_size$[rbp]
  00d49	2b c8		 sub	 ecx, eax
  00d4b	8b c1		 mov	 eax, ecx
  00d4d	48 8b 8d 38 05
	00 00		 mov	 rcx, QWORD PTR tv444[rbp]
  00d54	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00d56	2b c8		 sub	 ecx, eax
  00d58	8b c1		 mov	 eax, ecx
  00d5a	48 8b 8d 38 05
	00 00		 mov	 rcx, QWORD PTR tv444[rbp]
  00d61	89 01		 mov	 DWORD PTR [rcx], eax

; 3735 :     draw_list->_VtxWritePtr = vtx_write;

  00d63	48 8b 85 78 05
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  00d6a	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR vtx_write$[rbp]
  00d71	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx

; 3736 :     draw_list->_IdxWritePtr = idx_write;

  00d75	48 8b 85 78 05
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  00d7c	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR idx_write$[rbp]
  00d83	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 3737 :     draw_list->_VtxCurrentIdx = vtx_index;

  00d87	48 8b 85 78 05
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  00d8e	8b 8d e4 01 00
	00		 mov	 ecx, DWORD PTR vtx_index$[rbp]
  00d94	89 48 34	 mov	 DWORD PTR [rax+52], ecx
$LN1@RenderText:

; 3738 : }

  00d97	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00d9b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?RenderText@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IAEBUImVec4@@PEBD3M_N@Z$rtcFrameData
  00da2	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00da7	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00dae	48 33 cd	 xor	 rcx, rbp
  00db1	e8 00 00 00 00	 call	 __security_check_cookie
  00db6	48 8d a5 58 05
	00 00		 lea	 rsp, QWORD PTR [rbp+1368]
  00dbd	5f		 pop	 rdi
  00dbe	5d		 pop	 rbp
  00dbf	c3		 ret	 0
?RenderText@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IAEBUImVec4@@PEBD3M_N@Z ENDP ; ImFont::RenderText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?RenderChar@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IG@Z
_TEXT	SEGMENT
glyph$ = 8
scale$ = 36
x$ = 68
y$ = 100
$T1 = 324
$T2 = 356
$T3 = 388
$T4 = 420
tv79 = 436
tv94 = 440
tv133 = 448
tv140 = 456
this$ = 496
draw_list$ = 504
size$ = 512
pos$ = 520
col$ = 528
c$ = 536
?RenderChar@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IG@Z PROC ; ImFont::RenderChar, COMDAT

; 3540 : {

$LN8:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec 08 02
	00 00		 sub	 rsp, 520		; 00000208H
  0001e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR [rsp+552]

; 3541 :     const ImFontGlyph* glyph = FindGlyph(c);

  0003a	0f b7 95 18 02
	00 00		 movzx	 edx, WORD PTR c$[rbp]
  00041	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00048	e8 00 00 00 00	 call	 ?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyph
  0004d	48 89 45 08	 mov	 QWORD PTR glyph$[rbp], rax

; 3542 :     if (!glyph || !glyph->Visible)

  00051	48 83 7d 08 00	 cmp	 QWORD PTR glyph$[rbp], 0
  00056	74 0f		 je	 SHORT $LN3@RenderChar
  00058	48 8b 45 08	 mov	 rax, QWORD PTR glyph$[rbp]
  0005c	8b 00		 mov	 eax, DWORD PTR [rax]
  0005e	d1 e8		 shr	 eax, 1
  00060	83 e0 01	 and	 eax, 1
  00063	85 c0		 test	 eax, eax
  00065	75 05		 jne	 SHORT $LN2@RenderChar
$LN3@RenderChar:

; 3543 :         return;

  00067	e9 ba 01 00 00	 jmp	 $LN1@RenderChar
$LN2@RenderChar:

; 3544 :     if (glyph->Colored)

  0006c	48 8b 45 08	 mov	 rax, QWORD PTR glyph$[rbp]
  00070	8b 00		 mov	 eax, DWORD PTR [rax]
  00072	83 e0 01	 and	 eax, 1
  00075	85 c0		 test	 eax, eax
  00077	74 11		 je	 SHORT $LN4@RenderChar

; 3545 :         col |= ~IM_COL32_A_MASK;

  00079	8b 85 10 02 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  0007f	0d ff ff ff 00	 or	 eax, 16777215		; 00ffffffH
  00084	89 85 10 02 00
	00		 mov	 DWORD PTR col$[rbp], eax
$LN4@RenderChar:

; 3546 :     float scale = (size >= 0.0f) ? (size / FontSize) : 1.0f;

  0008a	f3 0f 10 85 00
	02 00 00	 movss	 xmm0, DWORD PTR size$[rbp]
  00092	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00099	72 1e		 jb	 SHORT $LN6@RenderChar
  0009b	48 8b 85 f0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a2	f3 0f 10 85 00
	02 00 00	 movss	 xmm0, DWORD PTR size$[rbp]
  000aa	f3 0f 5e 40 14	 divss	 xmm0, DWORD PTR [rax+20]
  000af	f3 0f 11 85 b4
	01 00 00	 movss	 DWORD PTR tv79[rbp], xmm0
  000b7	eb 10		 jmp	 SHORT $LN7@RenderChar
$LN6@RenderChar:
  000b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000c1	f3 0f 11 85 b4
	01 00 00	 movss	 DWORD PTR tv79[rbp], xmm0
$LN7@RenderChar:
  000c9	f3 0f 10 85 b4
	01 00 00	 movss	 xmm0, DWORD PTR tv79[rbp]
  000d1	f3 0f 11 45 24	 movss	 DWORD PTR scale$[rbp], xmm0

; 3547 :     float x = IM_FLOOR(pos.x);

  000d6	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR pos$[rbp]
  000dd	f3 0f 2c 00	 cvttss2si eax, DWORD PTR [rax]
  000e1	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000e5	f3 0f 11 45 44	 movss	 DWORD PTR x$[rbp], xmm0

; 3548 :     float y = IM_FLOOR(pos.y);

  000ea	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR pos$[rbp]
  000f1	f3 0f 2c 40 04	 cvttss2si eax, DWORD PTR [rax+4]
  000f6	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000fa	f3 0f 11 45 64	 movss	 DWORD PTR y$[rbp], xmm0

; 3549 :     draw_list->PrimReserve(6, 4);

  000ff	41 b8 04 00 00
	00		 mov	 r8d, 4
  00105	ba 06 00 00 00	 mov	 edx, 6
  0010a	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00111	e8 00 00 00 00	 call	 ?PrimReserve@ImDrawList@@QEAAXHH@Z ; ImDrawList::PrimReserve

; 3550 :     draw_list->PrimRectUV(ImVec2(x + glyph->X0 * scale, y + glyph->Y0 * scale), ImVec2(x + glyph->X1 * scale, y + glyph->Y1 * scale), ImVec2(glyph->U0, glyph->V0), ImVec2(glyph->U1, glyph->V1), col);

  00116	48 8b 45 08	 mov	 rax, QWORD PTR glyph$[rbp]
  0011a	f3 0f 10 50 24	 movss	 xmm2, DWORD PTR [rax+36]
  0011f	48 8b 45 08	 mov	 rax, QWORD PTR glyph$[rbp]
  00123	f3 0f 10 48 20	 movss	 xmm1, DWORD PTR [rax+32]
  00128	48 8d 8d 44 01
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0012f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00134	48 89 85 b8 01
	00 00		 mov	 QWORD PTR tv94[rbp], rax
  0013b	48 8b 4d 08	 mov	 rcx, QWORD PTR glyph$[rbp]
  0013f	f3 0f 10 51 1c	 movss	 xmm2, DWORD PTR [rcx+28]
  00144	48 8b 4d 08	 mov	 rcx, QWORD PTR glyph$[rbp]
  00148	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [rcx+24]
  0014d	48 8d 8d 64 01
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  00154	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00159	48 89 85 c0 01
	00 00		 mov	 QWORD PTR tv133[rbp], rax
  00160	48 8b 4d 08	 mov	 rcx, QWORD PTR glyph$[rbp]
  00164	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [rcx+20]
  00169	f3 0f 59 45 24	 mulss	 xmm0, DWORD PTR scale$[rbp]
  0016e	f3 0f 10 4d 64	 movss	 xmm1, DWORD PTR y$[rbp]
  00173	f3 0f 58 c8	 addss	 xmm1, xmm0
  00177	0f 28 c1	 movaps	 xmm0, xmm1
  0017a	48 8b 4d 08	 mov	 rcx, QWORD PTR glyph$[rbp]
  0017e	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [rcx+16]
  00183	f3 0f 59 4d 24	 mulss	 xmm1, DWORD PTR scale$[rbp]
  00188	f3 0f 10 55 44	 movss	 xmm2, DWORD PTR x$[rbp]
  0018d	f3 0f 58 d1	 addss	 xmm2, xmm1
  00191	0f 28 ca	 movaps	 xmm1, xmm2
  00194	0f 28 d0	 movaps	 xmm2, xmm0
  00197	48 8d 8d 84 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  0019e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001a3	48 89 85 c8 01
	00 00		 mov	 QWORD PTR tv140[rbp], rax
  001aa	48 8b 4d 08	 mov	 rcx, QWORD PTR glyph$[rbp]
  001ae	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [rcx+12]
  001b3	f3 0f 59 45 24	 mulss	 xmm0, DWORD PTR scale$[rbp]
  001b8	f3 0f 10 4d 64	 movss	 xmm1, DWORD PTR y$[rbp]
  001bd	f3 0f 58 c8	 addss	 xmm1, xmm0
  001c1	0f 28 c1	 movaps	 xmm0, xmm1
  001c4	48 8b 4d 08	 mov	 rcx, QWORD PTR glyph$[rbp]
  001c8	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [rcx+8]
  001cd	f3 0f 59 4d 24	 mulss	 xmm1, DWORD PTR scale$[rbp]
  001d2	f3 0f 10 55 44	 movss	 xmm2, DWORD PTR x$[rbp]
  001d7	f3 0f 58 d1	 addss	 xmm2, xmm1
  001db	0f 28 ca	 movaps	 xmm1, xmm2
  001de	0f 28 d0	 movaps	 xmm2, xmm0
  001e1	48 8d 8d a4 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  001e8	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001ed	8b 8d 10 02 00
	00		 mov	 ecx, DWORD PTR col$[rbp]
  001f3	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  001f7	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR tv94[rbp]
  001fe	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00203	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR tv133[rbp]
  0020a	4c 8b c9	 mov	 r9, rcx
  0020d	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR tv140[rbp]
  00214	4c 8b c1	 mov	 r8, rcx
  00217	48 8b d0	 mov	 rdx, rax
  0021a	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00221	e8 00 00 00 00	 call	 ?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z ; ImDrawList::PrimRectUV
$LN1@RenderChar:

; 3551 : }

  00226	48 8d a5 d8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+472]
  0022d	5f		 pop	 rdi
  0022e	5d		 pop	 rbp
  0022f	c3		 ret	 0
?RenderChar@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IG@Z ENDP ; ImFont::RenderChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z
_TEXT	SEGMENT
line_width$ = 4
word_width$ = 36
blank_width$ = 68
word_end$ = 104
prev_word_end$ = 136
inside_word$ = 164
s$ = 200
c$4 = 228
next_s$5 = 264
char_width$6 = 292
tv145 = 500
tv93 = 500
tv151 = 504
__$ArrayPad$ = 512
this$ = 560
scale$ = 568
text$ = 576
text_end$ = 584
wrap_width$ = 592
?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z PROC	; ImFont::CalcWordWrapPositionA, COMDAT

; 3363 : {

$LN27:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  0001e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 8e 00 00 00	 mov	 ecx, 142		; 0000008eH
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR [rsp+600]
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 00 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3364 :     // For references, possible wrap point marked with ^
; 3365 :     //  "aaa bbb, ccc,ddd. eee   fff. ggg!"
; 3366 :     //      ^    ^    ^   ^   ^__    ^    ^
; 3367 : 
; 3368 :     // List of hardcoded separators: .,;!?'"
; 3369 : 
; 3370 :     // Skip extra blanks after a line returns (that includes not counting them in width computation)
; 3371 :     // e.g. "Hello    world" --> "Hello" "World"
; 3372 : 
; 3373 :     // Cut words that cannot possibly fit within one line.
; 3374 :     // e.g.: "The tropical fish" with ~5 characters worth of width --> "The tr" "opical" "fish"
; 3375 :     float line_width = 0.0f;

  0004b	0f 57 c0	 xorps	 xmm0, xmm0
  0004e	f3 0f 11 45 04	 movss	 DWORD PTR line_width$[rbp], xmm0

; 3376 :     float word_width = 0.0f;

  00053	0f 57 c0	 xorps	 xmm0, xmm0
  00056	f3 0f 11 45 24	 movss	 DWORD PTR word_width$[rbp], xmm0

; 3377 :     float blank_width = 0.0f;

  0005b	0f 57 c0	 xorps	 xmm0, xmm0
  0005e	f3 0f 11 45 44	 movss	 DWORD PTR blank_width$[rbp], xmm0

; 3378 :     wrap_width /= scale; // We work with unscaled widths to avoid scaling every characters

  00063	f3 0f 10 85 50
	02 00 00	 movss	 xmm0, DWORD PTR wrap_width$[rbp]
  0006b	f3 0f 5e 85 38
	02 00 00	 divss	 xmm0, DWORD PTR scale$[rbp]
  00073	f3 0f 11 85 50
	02 00 00	 movss	 DWORD PTR wrap_width$[rbp], xmm0

; 3379 : 
; 3380 :     const char* word_end = text;

  0007b	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR text$[rbp]
  00082	48 89 45 68	 mov	 QWORD PTR word_end$[rbp], rax

; 3381 :     const char* prev_word_end = NULL;

  00086	48 c7 85 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR prev_word_end$[rbp], 0

; 3382 :     bool inside_word = true;

  00091	c6 85 a4 00 00
	00 01		 mov	 BYTE PTR inside_word$[rbp], 1

; 3383 : 
; 3384 :     const char* s = text;

  00098	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR text$[rbp]
  0009f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR s$[rbp], rax

; 3385 :     IM_ASSERT(text_end != NULL);

  000a6	48 83 bd 48 02
	00 00 00	 cmp	 QWORD PTR text_end$[rbp], 0
  000ae	75 22		 jne	 SHORT $LN18@CalcWordWr
  000b0	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z@4JA
  000b6	83 c0 16	 add	 eax, 22
  000b9	44 8b c0	 mov	 r8d, eax
  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@KGJCABG@?$AAt?$AAe?$AAx?$AAt?$AA_?$AAe?$AAn?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000d0	33 c0		 xor	 eax, eax
$LN18@CalcWordWr:
$LN26@CalcWordWr:
$LN25@CalcWordWr:
$LN2@CalcWordWr:

; 3386 :     while (s < text_end)

  000d2	48 8b 85 48 02
	00 00		 mov	 rax, QWORD PTR text_end$[rbp]
  000d9	48 39 85 c8 00
	00 00		 cmp	 QWORD PTR s$[rbp], rax
  000e0	0f 83 99 02 00
	00		 jae	 $LN3@CalcWordWr

; 3387 :     {
; 3388 :         unsigned int c = (unsigned int)*s;

  000e6	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR s$[rbp]
  000ed	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000f0	89 85 e4 00 00
	00		 mov	 DWORD PTR c$4[rbp], eax

; 3389 :         const char* next_s;
; 3390 :         if (c < 0x80)

  000f6	81 bd e4 00 00
	00 80 00 00 00	 cmp	 DWORD PTR c$4[rbp], 128	; 00000080H
  00100	73 13		 jae	 SHORT $LN4@CalcWordWr

; 3391 :             next_s = s + 1;

  00102	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR s$[rbp]
  00109	48 ff c0	 inc	 rax
  0010c	48 89 85 08 01
	00 00		 mov	 QWORD PTR next_s$5[rbp], rax

; 3392 :         else

  00113	eb 30		 jmp	 SHORT $LN5@CalcWordWr
$LN4@CalcWordWr:

; 3393 :             next_s = s + ImTextCharFromUtf8(&c, s, text_end);

  00115	4c 8b 85 48 02
	00 00		 mov	 r8, QWORD PTR text_end$[rbp]
  0011c	48 8b 95 c8 00
	00 00		 mov	 rdx, QWORD PTR s$[rbp]
  00123	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR c$4[rbp]
  0012a	e8 00 00 00 00	 call	 ?ImTextCharFromUtf8@@YAHPEAIPEBD1@Z ; ImTextCharFromUtf8
  0012f	48 98		 cdqe
  00131	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  00138	48 03 c8	 add	 rcx, rax
  0013b	48 8b c1	 mov	 rax, rcx
  0013e	48 89 85 08 01
	00 00		 mov	 QWORD PTR next_s$5[rbp], rax
$LN5@CalcWordWr:

; 3394 : 
; 3395 :         if (c < 32)

  00145	83 bd e4 00 00
	00 20		 cmp	 DWORD PTR c$4[rbp], 32	; 00000020H
  0014c	73 5b		 jae	 SHORT $LN6@CalcWordWr

; 3396 :         {
; 3397 :             if (c == '\n')

  0014e	83 bd e4 00 00
	00 0a		 cmp	 DWORD PTR c$4[rbp], 10
  00155	75 36		 jne	 SHORT $LN7@CalcWordWr

; 3398 :             {
; 3399 :                 line_width = word_width = blank_width = 0.0f;

  00157	0f 57 c0	 xorps	 xmm0, xmm0
  0015a	f3 0f 11 45 44	 movss	 DWORD PTR blank_width$[rbp], xmm0
  0015f	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR blank_width$[rbp]
  00164	f3 0f 11 45 24	 movss	 DWORD PTR word_width$[rbp], xmm0
  00169	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR word_width$[rbp]
  0016e	f3 0f 11 45 04	 movss	 DWORD PTR line_width$[rbp], xmm0

; 3400 :                 inside_word = true;

  00173	c6 85 a4 00 00
	00 01		 mov	 BYTE PTR inside_word$[rbp], 1

; 3401 :                 s = next_s;

  0017a	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR next_s$5[rbp]
  00181	48 89 85 c8 00
	00 00		 mov	 QWORD PTR s$[rbp], rax

; 3402 :                 continue;

  00188	e9 45 ff ff ff	 jmp	 $LN2@CalcWordWr
$LN7@CalcWordWr:

; 3403 :             }
; 3404 :             if (c == '\r')

  0018d	83 bd e4 00 00
	00 0d		 cmp	 DWORD PTR c$4[rbp], 13
  00194	75 13		 jne	 SHORT $LN8@CalcWordWr

; 3405 :             {
; 3406 :                 s = next_s;

  00196	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR next_s$5[rbp]
  0019d	48 89 85 c8 00
	00 00		 mov	 QWORD PTR s$[rbp], rax

; 3407 :                 continue;

  001a4	e9 29 ff ff ff	 jmp	 $LN25@CalcWordWr
$LN8@CalcWordWr:
$LN6@CalcWordWr:

; 3408 :             }
; 3409 :         }
; 3410 : 
; 3411 :         const float char_width = ((int)c < IndexAdvanceX.Size ? IndexAdvanceX.Data[c] : FallbackAdvanceX);

  001a9	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001b0	8b 00		 mov	 eax, DWORD PTR [rax]
  001b2	39 85 e4 00 00
	00		 cmp	 DWORD PTR c$4[rbp], eax
  001b8	7d 20		 jge	 SHORT $LN19@CalcWordWr
  001ba	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR c$4[rbp]
  001c0	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c7	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  001cb	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  001d0	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv93[rbp], xmm0
  001d8	eb 14		 jmp	 SHORT $LN20@CalcWordWr
$LN19@CalcWordWr:
  001da	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001e1	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  001e6	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv93[rbp], xmm0
$LN20@CalcWordWr:
  001ee	f3 0f 10 85 f4
	01 00 00	 movss	 xmm0, DWORD PTR tv93[rbp]
  001f6	f3 0f 11 85 24
	01 00 00	 movss	 DWORD PTR char_width$6[rbp], xmm0

; 3412 :         if (ImCharIsBlankW(c))

  001fe	8b 8d e4 00 00
	00		 mov	 ecx, DWORD PTR c$4[rbp]
  00204	e8 00 00 00 00	 call	 ?ImCharIsBlankW@@YA_NI@Z ; ImCharIsBlankW
  00209	0f b6 c0	 movzx	 eax, al
  0020c	85 c0		 test	 eax, eax
  0020e	74 4b		 je	 SHORT $LN9@CalcWordWr

; 3413 :         {
; 3414 :             if (inside_word)

  00210	0f b6 85 a4 00
	00 00		 movzx	 eax, BYTE PTR inside_word$[rbp]
  00217	85 c0		 test	 eax, eax
  00219	74 22		 je	 SHORT $LN11@CalcWordWr

; 3415 :             {
; 3416 :                 line_width += blank_width;

  0021b	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR line_width$[rbp]
  00220	f3 0f 58 45 44	 addss	 xmm0, DWORD PTR blank_width$[rbp]
  00225	f3 0f 11 45 04	 movss	 DWORD PTR line_width$[rbp], xmm0

; 3417 :                 blank_width = 0.0f;

  0022a	0f 57 c0	 xorps	 xmm0, xmm0
  0022d	f3 0f 11 45 44	 movss	 DWORD PTR blank_width$[rbp], xmm0

; 3418 :                 word_end = s;

  00232	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR s$[rbp]
  00239	48 89 45 68	 mov	 QWORD PTR word_end$[rbp], rax
$LN11@CalcWordWr:

; 3419 :             }
; 3420 :             blank_width += char_width;

  0023d	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR blank_width$[rbp]
  00242	f3 0f 58 85 24
	01 00 00	 addss	 xmm0, DWORD PTR char_width$6[rbp]
  0024a	f3 0f 11 45 44	 movss	 DWORD PTR blank_width$[rbp], xmm0

; 3421 :             inside_word = false;

  0024f	c6 85 a4 00 00
	00 00		 mov	 BYTE PTR inside_word$[rbp], 0

; 3422 :         }
; 3423 :         else

  00256	e9 bb 00 00 00	 jmp	 $LN10@CalcWordWr
$LN9@CalcWordWr:

; 3424 :         {
; 3425 :             word_width += char_width;

  0025b	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR word_width$[rbp]
  00260	f3 0f 58 85 24
	01 00 00	 addss	 xmm0, DWORD PTR char_width$6[rbp]
  00268	f3 0f 11 45 24	 movss	 DWORD PTR word_width$[rbp], xmm0

; 3426 :             if (inside_word)

  0026d	0f b6 85 a4 00
	00 00		 movzx	 eax, BYTE PTR inside_word$[rbp]
  00274	85 c0		 test	 eax, eax
  00276	74 0d		 je	 SHORT $LN12@CalcWordWr

; 3427 :             {
; 3428 :                 word_end = next_s;

  00278	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR next_s$5[rbp]
  0027f	48 89 45 68	 mov	 QWORD PTR word_end$[rbp], rax

; 3429 :             }
; 3430 :             else

  00283	eb 38		 jmp	 SHORT $LN13@CalcWordWr
$LN12@CalcWordWr:

; 3431 :             {
; 3432 :                 prev_word_end = word_end;

  00285	48 8b 45 68	 mov	 rax, QWORD PTR word_end$[rbp]
  00289	48 89 85 88 00
	00 00		 mov	 QWORD PTR prev_word_end$[rbp], rax

; 3433 :                 line_width += word_width + blank_width;

  00290	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR word_width$[rbp]
  00295	f3 0f 58 45 44	 addss	 xmm0, DWORD PTR blank_width$[rbp]
  0029a	f3 0f 10 4d 04	 movss	 xmm1, DWORD PTR line_width$[rbp]
  0029f	f3 0f 58 c8	 addss	 xmm1, xmm0
  002a3	0f 28 c1	 movaps	 xmm0, xmm1
  002a6	f3 0f 11 45 04	 movss	 DWORD PTR line_width$[rbp], xmm0

; 3434 :                 word_width = blank_width = 0.0f;

  002ab	0f 57 c0	 xorps	 xmm0, xmm0
  002ae	f3 0f 11 45 44	 movss	 DWORD PTR blank_width$[rbp], xmm0
  002b3	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR blank_width$[rbp]
  002b8	f3 0f 11 45 24	 movss	 DWORD PTR word_width$[rbp], xmm0
$LN13@CalcWordWr:

; 3435 :             }
; 3436 : 
; 3437 :             // Allow wrapping after punctuation.
; 3438 :             inside_word = (c != '.' && c != ',' && c != ';' && c != '!' && c != '?' && c != '\"');

  002bd	83 bd e4 00 00
	00 2e		 cmp	 DWORD PTR c$4[rbp], 46	; 0000002eH
  002c4	74 39		 je	 SHORT $LN21@CalcWordWr
  002c6	83 bd e4 00 00
	00 2c		 cmp	 DWORD PTR c$4[rbp], 44	; 0000002cH
  002cd	74 30		 je	 SHORT $LN21@CalcWordWr
  002cf	83 bd e4 00 00
	00 3b		 cmp	 DWORD PTR c$4[rbp], 59	; 0000003bH
  002d6	74 27		 je	 SHORT $LN21@CalcWordWr
  002d8	83 bd e4 00 00
	00 21		 cmp	 DWORD PTR c$4[rbp], 33	; 00000021H
  002df	74 1e		 je	 SHORT $LN21@CalcWordWr
  002e1	83 bd e4 00 00
	00 3f		 cmp	 DWORD PTR c$4[rbp], 63	; 0000003fH
  002e8	74 15		 je	 SHORT $LN21@CalcWordWr
  002ea	83 bd e4 00 00
	00 22		 cmp	 DWORD PTR c$4[rbp], 34	; 00000022H
  002f1	74 0c		 je	 SHORT $LN21@CalcWordWr
  002f3	c7 85 f4 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv145[rbp], 1
  002fd	eb 0a		 jmp	 SHORT $LN22@CalcWordWr
$LN21@CalcWordWr:
  002ff	c7 85 f4 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv145[rbp], 0
$LN22@CalcWordWr:
  00309	0f b6 85 f4 01
	00 00		 movzx	 eax, BYTE PTR tv145[rbp]
  00310	88 85 a4 00 00
	00		 mov	 BYTE PTR inside_word$[rbp], al
$LN10@CalcWordWr:

; 3439 :         }
; 3440 : 
; 3441 :         // We ignore blank width at the end of the line (they can be skipped)
; 3442 :         if (line_width + word_width > wrap_width)

  00316	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR line_width$[rbp]
  0031b	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR word_width$[rbp]
  00320	0f 2f 85 50 02
	00 00		 comiss	 xmm0, DWORD PTR wrap_width$[rbp]
  00327	76 43		 jbe	 SHORT $LN14@CalcWordWr

; 3443 :         {
; 3444 :             // Words that cannot possibly fit within an entire line will be cut anywhere.
; 3445 :             if (word_width < wrap_width)

  00329	f3 0f 10 85 50
	02 00 00	 movss	 xmm0, DWORD PTR wrap_width$[rbp]
  00331	0f 2f 45 24	 comiss	 xmm0, DWORD PTR word_width$[rbp]
  00335	76 33		 jbe	 SHORT $LN15@CalcWordWr

; 3446 :                 s = prev_word_end ? prev_word_end : word_end;

  00337	48 83 bd 88 00
	00 00 00	 cmp	 QWORD PTR prev_word_end$[rbp], 0
  0033f	74 10		 je	 SHORT $LN23@CalcWordWr
  00341	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR prev_word_end$[rbp]
  00348	48 89 85 f8 01
	00 00		 mov	 QWORD PTR tv151[rbp], rax
  0034f	eb 0b		 jmp	 SHORT $LN24@CalcWordWr
$LN23@CalcWordWr:
  00351	48 8b 45 68	 mov	 rax, QWORD PTR word_end$[rbp]
  00355	48 89 85 f8 01
	00 00		 mov	 QWORD PTR tv151[rbp], rax
$LN24@CalcWordWr:
  0035c	48 8b 85 f8 01
	00 00		 mov	 rax, QWORD PTR tv151[rbp]
  00363	48 89 85 c8 00
	00 00		 mov	 QWORD PTR s$[rbp], rax
$LN15@CalcWordWr:

; 3447 :             break;

  0036a	eb 13		 jmp	 SHORT $LN3@CalcWordWr
$LN14@CalcWordWr:

; 3448 :         }
; 3449 : 
; 3450 :         s = next_s;

  0036c	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR next_s$5[rbp]
  00373	48 89 85 c8 00
	00 00		 mov	 QWORD PTR s$[rbp], rax

; 3451 :     }

  0037a	e9 53 fd ff ff	 jmp	 $LN26@CalcWordWr
$LN3@CalcWordWr:

; 3452 : 
; 3453 :     // Wrap_width is too small to fit anything. Force displaying 1 character to minimize the height discontinuity.
; 3454 :     // +1 may not be a character start point in UTF-8 but it's ok because caller loops use (text >= word_wrap_eol).
; 3455 :     if (s == text && text < text_end)

  0037f	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR text$[rbp]
  00386	48 39 85 c8 00
	00 00		 cmp	 QWORD PTR s$[rbp], rax
  0038d	75 1c		 jne	 SHORT $LN16@CalcWordWr
  0038f	48 8b 85 48 02
	00 00		 mov	 rax, QWORD PTR text_end$[rbp]
  00396	48 39 85 40 02
	00 00		 cmp	 QWORD PTR text$[rbp], rax
  0039d	73 0c		 jae	 SHORT $LN16@CalcWordWr

; 3456 :         return s + 1;

  0039f	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR s$[rbp]
  003a6	48 ff c0	 inc	 rax
  003a9	eb 07		 jmp	 SHORT $LN1@CalcWordWr
$LN16@CalcWordWr:

; 3457 :     return s;

  003ab	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR s$[rbp]
$LN1@CalcWordWr:

; 3458 : }

  003b2	48 8b f8	 mov	 rdi, rax
  003b5	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  003b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z$rtcFrameData
  003c0	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  003c5	48 8b c7	 mov	 rax, rdi
  003c8	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  003cf	48 33 cd	 xor	 rcx, rbp
  003d2	e8 00 00 00 00	 call	 __security_check_cookie
  003d7	48 8d a5 18 02
	00 00		 lea	 rsp, QWORD PTR [rbp+536]
  003de	5f		 pop	 rdi
  003df	5d		 pop	 rbp
  003e0	c3		 ret	 0
?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z ENDP	; ImFont::CalcWordWrapPositionA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z
_TEXT	SEGMENT
line_height$ = 4
scale$ = 36
text_size$ = 72
line_width$ = 100
word_wrap_enabled$ = 132
word_wrap_eol$ = 168
s$ = 200
prev_s$5 = 232
c$6 = 260
char_width$7 = 292
tv149 = 500
tv74 = 500
__$ArrayPad$ = 504
this$ = 544
__$ReturnUdt$ = 552
size$ = 560
max_width$ = 568
wrap_width$ = 576
text_begin$ = 584
text_end$ = 592
remaining$ = 600
?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z PROC ; ImFont::CalcTextSizeA, COMDAT

; 3461 : {

$LN27:
  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00011	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00016	55		 push	 rbp
  00017	57		 push	 rdi
  00018	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  0001f	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00024	48 8b fc	 mov	 rdi, rsp
  00027	b9 8e 00 00 00	 mov	 ecx, 142		; 0000008eH
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR [rsp+600]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 f8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3462 :     if (!text_end)

  0004c	48 83 bd 50 02
	00 00 00	 cmp	 QWORD PTR text_end$[rbp], 0
  00054	75 20		 jne	 SHORT $LN4@CalcTextSi

; 3463 :         text_end = text_begin + strlen(text_begin); // FIXME-OPT: Need to avoid this.

  00056	48 8b 8d 48 02
	00 00		 mov	 rcx, QWORD PTR text_begin$[rbp]
  0005d	e8 00 00 00 00	 call	 strlen
  00062	48 8b 8d 48 02
	00 00		 mov	 rcx, QWORD PTR text_begin$[rbp]
  00069	48 03 c8	 add	 rcx, rax
  0006c	48 8b c1	 mov	 rax, rcx
  0006f	48 89 85 50 02
	00 00		 mov	 QWORD PTR text_end$[rbp], rax
$LN4@CalcTextSi:

; 3464 : 
; 3465 :     const float line_height = size;

  00076	f3 0f 10 85 30
	02 00 00	 movss	 xmm0, DWORD PTR size$[rbp]
  0007e	f3 0f 11 45 04	 movss	 DWORD PTR line_height$[rbp], xmm0

; 3466 :     const float scale = size / FontSize;

  00083	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008a	f3 0f 10 85 30
	02 00 00	 movss	 xmm0, DWORD PTR size$[rbp]
  00092	f3 0f 5e 40 14	 divss	 xmm0, DWORD PTR [rax+20]
  00097	f3 0f 11 45 24	 movss	 DWORD PTR scale$[rbp], xmm0

; 3467 : 
; 3468 :     ImVec2 text_size = ImVec2(0, 0);

  0009c	0f 57 d2	 xorps	 xmm2, xmm2
  0009f	0f 57 c9	 xorps	 xmm1, xmm1
  000a2	48 8d 4d 48	 lea	 rcx, QWORD PTR text_size$[rbp]
  000a6	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 3469 :     float line_width = 0.0f;

  000ab	0f 57 c0	 xorps	 xmm0, xmm0
  000ae	f3 0f 11 45 64	 movss	 DWORD PTR line_width$[rbp], xmm0

; 3470 : 
; 3471 :     const bool word_wrap_enabled = (wrap_width > 0.0f);

  000b3	f3 0f 10 85 40
	02 00 00	 movss	 xmm0, DWORD PTR wrap_width$[rbp]
  000bb	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  000c2	76 09		 jbe	 SHORT $LN20@CalcTextSi
  000c4	c6 85 f4 01 00
	00 01		 mov	 BYTE PTR tv74[rbp], 1
  000cb	eb 07		 jmp	 SHORT $LN21@CalcTextSi
$LN20@CalcTextSi:
  000cd	c6 85 f4 01 00
	00 00		 mov	 BYTE PTR tv74[rbp], 0
$LN21@CalcTextSi:
  000d4	0f b6 85 f4 01
	00 00		 movzx	 eax, BYTE PTR tv74[rbp]
  000db	88 85 84 00 00
	00		 mov	 BYTE PTR word_wrap_enabled$[rbp], al

; 3472 :     const char* word_wrap_eol = NULL;

  000e1	48 c7 85 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR word_wrap_eol$[rbp], 0

; 3473 : 
; 3474 :     const char* s = text_begin;

  000ec	48 8b 85 48 02
	00 00		 mov	 rax, QWORD PTR text_begin$[rbp]
  000f3	48 89 85 c8 00
	00 00		 mov	 QWORD PTR s$[rbp], rax
$LN26@CalcTextSi:
$LN25@CalcTextSi:
$LN24@CalcTextSi:
$LN2@CalcTextSi:

; 3475 :     while (s < text_end)

  000fa	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR text_end$[rbp]
  00101	48 39 85 c8 00
	00 00		 cmp	 QWORD PTR s$[rbp], rax
  00108	0f 83 0c 02 00
	00		 jae	 $LN3@CalcTextSi

; 3476 :     {
; 3477 :         if (word_wrap_enabled)

  0010e	0f b6 85 84 00
	00 00		 movzx	 eax, BYTE PTR word_wrap_enabled$[rbp]
  00115	85 c0		 test	 eax, eax
  00117	0f 84 a9 00 00
	00		 je	 $LN5@CalcTextSi

; 3478 :         {
; 3479 :             // Calculate how far we can render. Requires two passes on the string data but keeps the code simple and not intrusive for what's essentially an uncommon feature.
; 3480 :             if (!word_wrap_eol)

  0011d	48 83 bd a8 00
	00 00 00	 cmp	 QWORD PTR word_wrap_eol$[rbp], 0
  00125	75 39		 jne	 SHORT $LN6@CalcTextSi

; 3481 :                 word_wrap_eol = CalcWordWrapPositionA(scale, s, text_end, wrap_width - line_width);

  00127	f3 0f 10 85 40
	02 00 00	 movss	 xmm0, DWORD PTR wrap_width$[rbp]
  0012f	f3 0f 5c 45 64	 subss	 xmm0, DWORD PTR line_width$[rbp]
  00134	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0013a	4c 8b 8d 50 02
	00 00		 mov	 r9, QWORD PTR text_end$[rbp]
  00141	4c 8b 85 c8 00
	00 00		 mov	 r8, QWORD PTR s$[rbp]
  00148	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR scale$[rbp]
  0014d	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00154	e8 00 00 00 00	 call	 ?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z ; ImFont::CalcWordWrapPositionA
  00159	48 89 85 a8 00
	00 00		 mov	 QWORD PTR word_wrap_eol$[rbp], rax
$LN6@CalcTextSi:

; 3482 : 
; 3483 :             if (s >= word_wrap_eol)

  00160	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR word_wrap_eol$[rbp]
  00167	48 39 85 c8 00
	00 00		 cmp	 QWORD PTR s$[rbp], rax
  0016e	72 56		 jb	 SHORT $LN7@CalcTextSi

; 3484 :             {
; 3485 :                 if (text_size.x < line_width)

  00170	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR line_width$[rbp]
  00175	0f 2f 45 48	 comiss	 xmm0, DWORD PTR text_size$[rbp]
  00179	76 0a		 jbe	 SHORT $LN8@CalcTextSi

; 3486 :                     text_size.x = line_width;

  0017b	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR line_width$[rbp]
  00180	f3 0f 11 45 48	 movss	 DWORD PTR text_size$[rbp], xmm0
$LN8@CalcTextSi:

; 3487 :                 text_size.y += line_height;

  00185	f3 0f 10 45 4c	 movss	 xmm0, DWORD PTR text_size$[rbp+4]
  0018a	f3 0f 58 45 04	 addss	 xmm0, DWORD PTR line_height$[rbp]
  0018f	f3 0f 11 45 4c	 movss	 DWORD PTR text_size$[rbp+4], xmm0

; 3488 :                 line_width = 0.0f;

  00194	0f 57 c0	 xorps	 xmm0, xmm0
  00197	f3 0f 11 45 64	 movss	 DWORD PTR line_width$[rbp], xmm0

; 3489 :                 word_wrap_eol = NULL;

  0019c	48 c7 85 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR word_wrap_eol$[rbp], 0

; 3490 :                 s = CalcWordWrapNextLineStartA(s, text_end); // Wrapping skips upcoming blanks

  001a7	48 8b 95 50 02
	00 00		 mov	 rdx, QWORD PTR text_end$[rbp]
  001ae	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  001b5	e8 00 00 00 00	 call	 ?CalcWordWrapNextLineStartA@@YAPEBDPEBD0@Z ; CalcWordWrapNextLineStartA
  001ba	48 89 85 c8 00
	00 00		 mov	 QWORD PTR s$[rbp], rax

; 3491 :                 continue;

  001c1	e9 34 ff ff ff	 jmp	 $LN2@CalcTextSi
$LN7@CalcTextSi:
$LN5@CalcTextSi:

; 3492 :             }
; 3493 :         }
; 3494 : 
; 3495 :         // Decode and advance source
; 3496 :         const char* prev_s = s;

  001c6	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR s$[rbp]
  001cd	48 89 85 e8 00
	00 00		 mov	 QWORD PTR prev_s$5[rbp], rax

; 3497 :         unsigned int c = (unsigned int)*s;

  001d4	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR s$[rbp]
  001db	0f be 00	 movsx	 eax, BYTE PTR [rax]
  001de	89 85 04 01 00
	00		 mov	 DWORD PTR c$6[rbp], eax

; 3498 :         if (c < 0x80)

  001e4	81 bd 04 01 00
	00 80 00 00 00	 cmp	 DWORD PTR c$6[rbp], 128	; 00000080H
  001ee	73 13		 jae	 SHORT $LN9@CalcTextSi

; 3499 :             s += 1;

  001f0	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR s$[rbp]
  001f7	48 ff c0	 inc	 rax
  001fa	48 89 85 c8 00
	00 00		 mov	 QWORD PTR s$[rbp], rax

; 3500 :         else

  00201	eb 30		 jmp	 SHORT $LN10@CalcTextSi
$LN9@CalcTextSi:

; 3501 :             s += ImTextCharFromUtf8(&c, s, text_end);

  00203	4c 8b 85 50 02
	00 00		 mov	 r8, QWORD PTR text_end$[rbp]
  0020a	48 8b 95 c8 00
	00 00		 mov	 rdx, QWORD PTR s$[rbp]
  00211	48 8d 8d 04 01
	00 00		 lea	 rcx, QWORD PTR c$6[rbp]
  00218	e8 00 00 00 00	 call	 ?ImTextCharFromUtf8@@YAHPEAIPEBD1@Z ; ImTextCharFromUtf8
  0021d	48 98		 cdqe
  0021f	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  00226	48 03 c8	 add	 rcx, rax
  00229	48 8b c1	 mov	 rax, rcx
  0022c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR s$[rbp], rax
$LN10@CalcTextSi:

; 3502 : 
; 3503 :         if (c < 32)

  00233	83 bd 04 01 00
	00 20		 cmp	 DWORD PTR c$6[rbp], 32	; 00000020H
  0023a	73 47		 jae	 SHORT $LN11@CalcTextSi

; 3504 :         {
; 3505 :             if (c == '\n')

  0023c	83 bd 04 01 00
	00 0a		 cmp	 DWORD PTR c$6[rbp], 10
  00243	75 30		 jne	 SHORT $LN12@CalcTextSi

; 3506 :             {
; 3507 :                 text_size.x = ImMax(text_size.x, line_width);

  00245	f3 0f 10 4d 64	 movss	 xmm1, DWORD PTR line_width$[rbp]
  0024a	f3 0f 10 45 48	 movss	 xmm0, DWORD PTR text_size$[rbp]
  0024f	e8 00 00 00 00	 call	 ??$ImMax@M@@YAMMM@Z	; ImMax<float>
  00254	f3 0f 11 45 48	 movss	 DWORD PTR text_size$[rbp], xmm0

; 3508 :                 text_size.y += line_height;

  00259	f3 0f 10 45 4c	 movss	 xmm0, DWORD PTR text_size$[rbp+4]
  0025e	f3 0f 58 45 04	 addss	 xmm0, DWORD PTR line_height$[rbp]
  00263	f3 0f 11 45 4c	 movss	 DWORD PTR text_size$[rbp+4], xmm0

; 3509 :                 line_width = 0.0f;

  00268	0f 57 c0	 xorps	 xmm0, xmm0
  0026b	f3 0f 11 45 64	 movss	 DWORD PTR line_width$[rbp], xmm0

; 3510 :                 continue;

  00270	e9 85 fe ff ff	 jmp	 $LN24@CalcTextSi
$LN12@CalcTextSi:

; 3511 :             }
; 3512 :             if (c == '\r')

  00275	83 bd 04 01 00
	00 0d		 cmp	 DWORD PTR c$6[rbp], 13
  0027c	75 05		 jne	 SHORT $LN13@CalcTextSi

; 3513 :                 continue;

  0027e	e9 77 fe ff ff	 jmp	 $LN25@CalcTextSi
$LN13@CalcTextSi:
$LN11@CalcTextSi:

; 3514 :         }
; 3515 : 
; 3516 :         const float char_width = ((int)c < IndexAdvanceX.Size ? IndexAdvanceX.Data[c] : FallbackAdvanceX) * scale;

  00283	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0028a	8b 00		 mov	 eax, DWORD PTR [rax]
  0028c	39 85 04 01 00
	00		 cmp	 DWORD PTR c$6[rbp], eax
  00292	7d 20		 jge	 SHORT $LN22@CalcTextSi
  00294	8b 85 04 01 00
	00		 mov	 eax, DWORD PTR c$6[rbp]
  0029a	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  002a5	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [rcx+rax*4]
  002aa	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv149[rbp], xmm0
  002b2	eb 14		 jmp	 SHORT $LN23@CalcTextSi
$LN22@CalcTextSi:
  002b4	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002bb	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  002c0	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv149[rbp], xmm0
$LN23@CalcTextSi:
  002c8	f3 0f 10 85 f4
	01 00 00	 movss	 xmm0, DWORD PTR tv149[rbp]
  002d0	f3 0f 59 45 24	 mulss	 xmm0, DWORD PTR scale$[rbp]
  002d5	f3 0f 11 85 24
	01 00 00	 movss	 DWORD PTR char_width$7[rbp], xmm0

; 3517 :         if (line_width + char_width >= max_width)

  002dd	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR line_width$[rbp]
  002e2	f3 0f 58 85 24
	01 00 00	 addss	 xmm0, DWORD PTR char_width$7[rbp]
  002ea	0f 2f 85 38 02
	00 00		 comiss	 xmm0, DWORD PTR max_width$[rbp]
  002f1	72 10		 jb	 SHORT $LN14@CalcTextSi

; 3518 :         {
; 3519 :             s = prev_s;

  002f3	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR prev_s$5[rbp]
  002fa	48 89 85 c8 00
	00 00		 mov	 QWORD PTR s$[rbp], rax

; 3520 :             break;

  00301	eb 17		 jmp	 SHORT $LN3@CalcTextSi
$LN14@CalcTextSi:

; 3521 :         }
; 3522 : 
; 3523 :         line_width += char_width;

  00303	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR line_width$[rbp]
  00308	f3 0f 58 85 24
	01 00 00	 addss	 xmm0, DWORD PTR char_width$7[rbp]
  00310	f3 0f 11 45 64	 movss	 DWORD PTR line_width$[rbp], xmm0

; 3524 :     }

  00315	e9 e0 fd ff ff	 jmp	 $LN26@CalcTextSi
$LN3@CalcTextSi:

; 3525 : 
; 3526 :     if (text_size.x < line_width)

  0031a	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR line_width$[rbp]
  0031f	0f 2f 45 48	 comiss	 xmm0, DWORD PTR text_size$[rbp]
  00323	76 0a		 jbe	 SHORT $LN15@CalcTextSi

; 3527 :         text_size.x = line_width;

  00325	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR line_width$[rbp]
  0032a	f3 0f 11 45 48	 movss	 DWORD PTR text_size$[rbp], xmm0
$LN15@CalcTextSi:

; 3528 : 
; 3529 :     if (line_width > 0 || text_size.y == 0.0f)

  0032f	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR line_width$[rbp]
  00334	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0033b	77 10		 ja	 SHORT $LN17@CalcTextSi
  0033d	f3 0f 10 45 4c	 movss	 xmm0, DWORD PTR text_size$[rbp+4]
  00342	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00349	7a 11		 jp	 SHORT $LN16@CalcTextSi
  0034b	75 0f		 jne	 SHORT $LN16@CalcTextSi
$LN17@CalcTextSi:

; 3530 :         text_size.y += line_height;

  0034d	f3 0f 10 45 4c	 movss	 xmm0, DWORD PTR text_size$[rbp+4]
  00352	f3 0f 58 45 04	 addss	 xmm0, DWORD PTR line_height$[rbp]
  00357	f3 0f 11 45 4c	 movss	 DWORD PTR text_size$[rbp+4], xmm0
$LN16@CalcTextSi:

; 3531 : 
; 3532 :     if (remaining)

  0035c	48 83 bd 58 02
	00 00 00	 cmp	 QWORD PTR remaining$[rbp], 0
  00364	74 11		 je	 SHORT $LN18@CalcTextSi

; 3533 :         *remaining = s;

  00366	48 8b 85 58 02
	00 00		 mov	 rax, QWORD PTR remaining$[rbp]
  0036d	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  00374	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN18@CalcTextSi:

; 3534 : 
; 3535 :     return text_size;

  00377	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  0037e	48 8b 4d 48	 mov	 rcx, QWORD PTR text_size$[rbp]
  00382	48 89 08	 mov	 QWORD PTR [rax], rcx
  00385	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 3536 : }

  0038c	48 8b f8	 mov	 rdi, rax
  0038f	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00393	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z$rtcFrameData
  0039a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0039f	48 8b c7	 mov	 rax, rdi
  003a2	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  003a9	48 33 cd	 xor	 rcx, rbp
  003ac	e8 00 00 00 00	 call	 __security_check_cookie
  003b1	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  003b8	5f		 pop	 rdi
  003b9	5d		 pop	 rbp
  003ba	c3		 ret	 0
?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z ENDP ; ImFont::CalcTextSizeA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?IsLoaded@ImFont@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?IsLoaded@ImFont@@QEBA_NXZ PROC				; ImFont::IsLoaded, COMDAT

; 2878 :     bool                        IsLoaded() const                    { return ContainerAtlas != NULL; }

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+248]
  00028	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  00034	74 0c		 je	 SHORT $LN3@IsLoaded
  00036	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv66[rbp], 1
  00040	eb 0a		 jmp	 SHORT $LN4@IsLoaded
$LN3@IsLoaded:
  00042	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv66[rbp], 0
$LN4@IsLoaded:
  0004c	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv66[rbp]
  00053	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0005a	5f		 pop	 rdi
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
?IsLoaded@ImFont@@QEBA_NXZ ENDP				; ImFont::IsLoaded
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z
_TEXT	SEGMENT
i$ = 4
this$ = 256
c$ = 264
?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z PROC ; ImFont::FindGlyphNoFallback, COMDAT

; 3340 : {

$LN5:
  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 3341 :     if (c >= (size_t)IndexLookup.Size)

  0002d	0f b7 85 08 01
	00 00		 movzx	 eax, WORD PTR c$[rbp]
  00034	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003b	48 63 49 18	 movsxd	 rcx, DWORD PTR [rcx+24]
  0003f	48 3b c1	 cmp	 rax, rcx
  00042	72 04		 jb	 SHORT $LN2@FindGlyphN

; 3342 :         return NULL;

  00044	33 c0		 xor	 eax, eax
  00046	eb 3c		 jmp	 SHORT $LN1@FindGlyphN
$LN2@FindGlyphN:

; 3343 :     const ImWchar i = IndexLookup.Data[c];

  00048	0f b7 85 08 01
	00 00		 movzx	 eax, WORD PTR c$[rbp]
  0004f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00056	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0005a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0005e	66 89 45 04	 mov	 WORD PTR i$[rbp], ax

; 3344 :     if (i == (ImWchar)-1)

  00062	0f b7 45 04	 movzx	 eax, WORD PTR i$[rbp]
  00066	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0006b	75 04		 jne	 SHORT $LN3@FindGlyphN

; 3345 :         return NULL;

  0006d	33 c0		 xor	 eax, eax
  0006f	eb 13		 jmp	 SHORT $LN1@FindGlyphN
$LN3@FindGlyphN:

; 3346 :     return &Glyphs.Data[i];

  00071	0f b7 45 04	 movzx	 eax, WORD PTR i$[rbp]
  00075	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00079	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00080	48 03 41 30	 add	 rax, QWORD PTR [rcx+48]
$LN1@FindGlyphN:

; 3347 : }

  00084	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008b	5f		 pop	 rdi
  0008c	5d		 pop	 rbp
  0008d	c3		 ret	 0
?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z ENDP ; ImFont::FindGlyphNoFallback
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z
_TEXT	SEGMENT
i$ = 4
this$ = 256
c$ = 264
?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z PROC	; ImFont::FindGlyph, COMDAT

; 3330 : {

$LN5:
  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 3331 :     if (c >= (size_t)IndexLookup.Size)

  0002d	0f b7 85 08 01
	00 00		 movzx	 eax, WORD PTR c$[rbp]
  00034	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003b	48 63 49 18	 movsxd	 rcx, DWORD PTR [rcx+24]
  0003f	48 3b c1	 cmp	 rax, rcx
  00042	72 0d		 jb	 SHORT $LN2@FindGlyph

; 3332 :         return FallbackGlyph;

  00044	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0004f	eb 45		 jmp	 SHORT $LN1@FindGlyph
$LN2@FindGlyph:

; 3333 :     const ImWchar i = IndexLookup.Data[c];

  00051	0f b7 85 08 01
	00 00		 movzx	 eax, WORD PTR c$[rbp]
  00058	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005f	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00063	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00067	66 89 45 04	 mov	 WORD PTR i$[rbp], ax

; 3334 :     if (i == (ImWchar)-1)

  0006b	0f b7 45 04	 movzx	 eax, WORD PTR i$[rbp]
  0006f	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00074	75 0d		 jne	 SHORT $LN3@FindGlyph

; 3335 :         return FallbackGlyph;

  00076	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007d	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00081	eb 13		 jmp	 SHORT $LN1@FindGlyph
$LN3@FindGlyph:

; 3336 :     return &Glyphs.Data[i];

  00083	0f b7 45 04	 movzx	 eax, WORD PTR i$[rbp]
  00087	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0008b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00092	48 03 41 30	 add	 rax, QWORD PTR [rcx+48]
$LN1@FindGlyph:

; 3337 : }

  00096	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009d	5f		 pop	 rdi
  0009e	5d		 pop	 rbp
  0009f	c3		 ret	 0
?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z ENDP	; ImFont::FindGlyph
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ??1ImFont@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1ImFont@@QEAA@XZ PROC					; ImFont::~ImFont, COMDAT

; 3129 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 3130 :     ClearOutputData();

  00035	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ?ClearOutputData@ImFont@@QEAAXXZ ; ImFont::ClearOutputData
  00041	90		 npad	 1

; 3131 : }

  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 83 c0 28	 add	 rax, 40			; 00000028H
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ??1?$ImVector@UImFontGlyph@@@@QEAA@XZ ; ImVector<ImFontGlyph>::~ImVector<ImFontGlyph>
  00055	90		 npad	 1
  00056	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005d	48 83 c0 18	 add	 rax, 24
  00061	48 8b c8	 mov	 rcx, rax
  00064	e8 00 00 00 00	 call	 ??1?$ImVector@G@@QEAA@XZ ; ImVector<unsigned short>::~ImVector<unsigned short>
  00069	90		 npad	 1
  0006a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 8b c8	 mov	 rcx, rax
  00074	e8 00 00 00 00	 call	 ??1?$ImVector@M@@QEAA@XZ ; ImVector<float>::~ImVector<float>
  00079	90		 npad	 1
  0007a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??1ImFont@@QEAA@XZ ENDP					; ImFont::~ImFont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ??0ImFont@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0ImFont@@QEAA@XZ PROC					; ImFont::ImFont, COMDAT

; 3110 : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 8b c8	 mov	 rcx, rax
  0003f	e8 00 00 00 00	 call	 ??0?$ImVector@M@@QEAA@XZ ; ImVector<float>::ImVector<float>
  00044	90		 npad	 1
  00045	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004c	48 83 c0 18	 add	 rax, 24
  00050	48 8b c8	 mov	 rcx, rax
  00053	e8 00 00 00 00	 call	 ??0?$ImVector@G@@QEAA@XZ ; ImVector<unsigned short>::ImVector<unsigned short>
  00058	90		 npad	 1
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 c0 28	 add	 rax, 40			; 00000028H
  00064	48 8b c8	 mov	 rcx, rax
  00067	e8 00 00 00 00	 call	 ??0?$ImVector@UImFontGlyph@@@@QEAA@XZ ; ImVector<ImFontGlyph>::ImVector<ImFontGlyph>

; 3111 :     FontSize = 0.0f;

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	0f 57 c0	 xorps	 xmm0, xmm0
  00076	f3 0f 11 40 14	 movss	 DWORD PTR [rax+20], xmm0

; 3112 :     FallbackAdvanceX = 0.0f;

  0007b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00082	0f 57 c0	 xorps	 xmm0, xmm0
  00085	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0

; 3113 :     FallbackChar = (ImWchar)-1;

  0008a	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0008f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00096	66 89 41 52	 mov	 WORD PTR [rcx+82], ax

; 3114 :     EllipsisChar = (ImWchar)-1;

  0009a	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0009f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a6	66 89 41 54	 mov	 WORD PTR [rcx+84], ax

; 3115 :     EllipsisWidth = EllipsisCharStep = 0.0f;

  000aa	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b1	0f 57 c0	 xorps	 xmm0, xmm0
  000b4	f3 0f 11 40 5c	 movss	 DWORD PTR [rax+92], xmm0
  000b9	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c0	0f 57 c0	 xorps	 xmm0, xmm0
  000c3	f3 0f 11 40 58	 movss	 DWORD PTR [rax+88], xmm0

; 3116 :     EllipsisCharCount = 0;

  000c8	33 c0		 xor	 eax, eax
  000ca	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d1	66 89 41 56	 mov	 WORD PTR [rcx+86], ax

; 3117 :     FallbackGlyph = NULL;

  000d5	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000dc	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 3118 :     ContainerAtlas = NULL;

  000e4	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000eb	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0

; 3119 :     ConfigData = NULL;

  000f3	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fa	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0

; 3120 :     ConfigDataCount = 0;

  00102	33 c0		 xor	 eax, eax
  00104	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0010b	66 89 41 50	 mov	 WORD PTR [rcx+80], ax

; 3121 :     DirtyLookupTables = false;

  0010f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00116	c6 40 60 00	 mov	 BYTE PTR [rax+96], 0

; 3122 :     Scale = 1.0f;

  0011a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00121	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00129	f3 0f 11 40 64	 movss	 DWORD PTR [rax+100], xmm0

; 3123 :     Ascent = Descent = 0.0f;

  0012e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00135	0f 57 c0	 xorps	 xmm0, xmm0
  00138	f3 0f 11 40 6c	 movss	 DWORD PTR [rax+108], xmm0
  0013d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00144	0f 57 c0	 xorps	 xmm0, xmm0
  00147	f3 0f 11 40 68	 movss	 DWORD PTR [rax+104], xmm0

; 3124 :     MetricsTotalSurface = 0;

  0014c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00153	c7 40 70 00 00
	00 00		 mov	 DWORD PTR [rax+112], 0

; 3125 :     memset(Used4kPagesMap, 0, sizeof(Used4kPagesMap));

  0015a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00161	48 83 c0 74	 add	 rax, 116		; 00000074H
  00165	41 b8 02 00 00
	00		 mov	 r8d, 2
  0016b	33 d2		 xor	 edx, edx
  0016d	48 8b c8	 mov	 rcx, rax
  00170	e8 00 00 00 00	 call	 memset
  00175	90		 npad	 1

; 3126 : }

  00176	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0017d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00184	5f		 pop	 rdi
  00185	5d		 pop	 rbp
  00186	c3		 ret	 0
??0ImFont@@QEAA@XZ ENDP					; ImFont::ImFont
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0ImFont@@QEAA@XZ@4HA PROC			; `ImFont::ImFont'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$ImVector@M@@QEAA@XZ ; ImVector<float>::~ImVector<float>
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ImFont@@QEAA@XZ@4HA ENDP			; `ImFont::ImFont'::`1'::dtor$0
$T1 = 200
this$ = 256
?dtor$1@?0???0ImFont@@QEAA@XZ@4HA PROC			; `ImFont::ImFont'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	48 83 c1 18	 add	 rcx, 24
  00046	e8 00 00 00 00	 call	 ??1?$ImVector@G@@QEAA@XZ ; ImVector<unsigned short>::~ImVector<unsigned short>
  0004b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
?dtor$1@?0???0ImFont@@QEAA@XZ@4HA ENDP			; `ImFont::ImFont'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0ImFont@@QEAA@XZ@4HA PROC			; `ImFont::ImFont'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$ImVector@M@@QEAA@XZ ; ImVector<float>::~ImVector<float>
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ImFont@@QEAA@XZ@4HA ENDP			; `ImFont::ImFont'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$1@?0???0ImFont@@QEAA@XZ@4HA PROC			; `ImFont::ImFont'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	48 83 c1 18	 add	 rcx, 24
  00046	e8 00 00 00 00	 call	 ??1?$ImVector@G@@QEAA@XZ ; ImVector<unsigned short>::~ImVector<unsigned short>
  0004b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
?dtor$1@?0???0ImFont@@QEAA@XZ@4HA ENDP			; `ImFont::ImFont'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@UImFontGlyph@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImFontGlyph@@@@QEAAXH@Z PROC	; ImVector<ImFontGlyph>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@UImFontGlyph@@@@QEAAXH@Z ENDP	; ImVector<ImFontGlyph>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?resize@?$ImVector@UImFontGlyph@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImFontGlyph@@@@QEAAXH@Z PROC	; ImVector<ImFontGlyph>::resize, COMDAT

; 1800 :     inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 e8 00 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  0003e	7e 20		 jle	 SHORT $LN2@resize
  00040	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  00046	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@UImFontGlyph@@@@QEBAHH@Z ; ImVector<ImFontGlyph>::_grow_capacity
  00052	8b d0		 mov	 edx, eax
  00054	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UImFontGlyph@@@@QEAAXH@Z ; ImVector<ImFontGlyph>::reserve
$LN2@resize:
  00060	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  0006d	89 08		 mov	 DWORD PTR [rax], ecx
  0006f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
?resize@?$ImVector@UImFontGlyph@@@@QEAAXH@Z ENDP	; ImVector<ImFontGlyph>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@UImFontGlyph@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImFontGlyph@@@@QEBAHH@Z PROC ; ImVector<ImFontGlyph>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@UImFontGlyph@@@@QEBAHH@Z ENDP ; ImVector<ImFontGlyph>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ PROC ; ImVector<ImFontGlyph>::back, COMDAT

; 1795 :     inline T&           back()                              { IM_ASSERT(Size > 0); return Data[Size - 1]; }

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	83 38 00	 cmp	 DWORD PTR [rax], 0
  00034	7f 1c		 jg	 SHORT $LN3@back
  00036	41 b8 03 07 00
	00		 mov	 r8d, 1795		; 00000703H
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00050	33 c0		 xor	 eax, eax
$LN3@back:
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	8b 00		 mov	 eax, DWORD PTR [rax]
  0005b	ff c8		 dec	 eax
  0005d	48 98		 cdqe
  0005f	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00063	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0006e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00075	5f		 pop	 rdi
  00076	5d		 pop	 rbp
  00077	c3		 ret	 0
?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ ENDP ; ImVector<ImFontGlyph>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z PROC ; ImVector<ImFontGlyph>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0006f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z ENDP ; ImVector<ImFontGlyph>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@UImFontGlyph@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImFontGlyph@@@@QEAAXXZ PROC		; ImVector<ImFontGlyph>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@UImFontGlyph@@@@QEAAXXZ ENDP		; ImVector<ImFontGlyph>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@UImFontGlyph@@@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@UImFontGlyph@@@@QEAA@XZ PROC		; ImVector<ImFontGlyph>::~ImVector<ImFontGlyph>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@UImFontGlyph@@@@QEAA@XZ ENDP		; ImVector<ImFontGlyph>::~ImVector<ImFontGlyph>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@UImFontGlyph@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImFontGlyph@@@@QEAA@XZ PROC		; ImVector<ImFontGlyph>::ImVector<ImFontGlyph>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@UImFontGlyph@@@@QEAA@XZ ENDP		; ImVector<ImFontGlyph>::ImVector<ImFontGlyph>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@M@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@M@@QEAAXH@Z PROC			; ImVector<float>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 c1 e0 02	 shl	 rax, 2
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 c1 e0 02	 shl	 rax, 2
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@M@@QEAAXH@Z ENDP			; ImVector<float>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?resize@?$ImVector@M@@QEAAXHAEBM@Z
_TEXT	SEGMENT
n$1 = 4
this$ = 256
new_size$ = 264
v$ = 272
?resize@?$ImVector@M@@QEAAXHAEBM@Z PROC			; ImVector<float>::resize, COMDAT

; 1801 :     inline void         resize(int new_size, const T& v)    { if (new_size > Capacity) reserve(_grow_capacity(new_size)); if (new_size > Size) for (int n = Size; n < new_size; n++) memcpy(&Data[n], &v, sizeof(v)); Size = new_size; }

$LN8:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00033	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003a	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0003d	39 85 08 01 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  00043	7e 20		 jle	 SHORT $LN5@resize
  00045	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  0004b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00052	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@M@@QEBAHH@Z ; ImVector<float>::_grow_capacity
  00057	8b d0		 mov	 edx, eax
  00059	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00060	e8 00 00 00 00	 call	 ?reserve@?$ImVector@M@@QEAAXH@Z ; ImVector<float>::reserve
$LN5@resize:
  00065	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006c	8b 00		 mov	 eax, DWORD PTR [rax]
  0006e	39 85 08 01 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  00074	7e 4b		 jle	 SHORT $LN6@resize
  00076	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007d	8b 00		 mov	 eax, DWORD PTR [rax]
  0007f	89 45 04	 mov	 DWORD PTR n$1[rbp], eax
  00082	eb 08		 jmp	 SHORT $LN4@resize
$LN2@resize:
  00084	8b 45 04	 mov	 eax, DWORD PTR n$1[rbp]
  00087	ff c0		 inc	 eax
  00089	89 45 04	 mov	 DWORD PTR n$1[rbp], eax
$LN4@resize:
  0008c	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR new_size$[rbp]
  00092	39 45 04	 cmp	 DWORD PTR n$1[rbp], eax
  00095	7d 2a		 jge	 SHORT $LN3@resize
  00097	48 63 45 04	 movsxd	 rax, DWORD PTR n$1[rbp]
  0009b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a2	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000a6	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  000aa	41 b8 04 00 00
	00		 mov	 r8d, 4
  000b0	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  000b7	48 8b c8	 mov	 rcx, rax
  000ba	e8 00 00 00 00	 call	 memcpy
  000bf	eb c3		 jmp	 SHORT $LN2@resize
$LN3@resize:
$LN6@resize:
  000c1	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c8	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  000ce	89 08		 mov	 DWORD PTR [rax], ecx
  000d0	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000d7	5f		 pop	 rdi
  000d8	5d		 pop	 rbp
  000d9	c3		 ret	 0
?resize@?$ImVector@M@@QEAAXHAEBM@Z ENDP			; ImVector<float>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@M@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@M@@QEBAHH@Z PROC		; ImVector<float>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@M@@QEBAHH@Z ENDP		; ImVector<float>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@M@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@M@@QEAAAEAMH@Z PROC			; ImVector<float>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00076	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@M@@QEAAAEAMH@Z ENDP			; ImVector<float>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@M@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@M@@QEAAXXZ PROC			; ImVector<float>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@M@@QEAAXXZ ENDP			; ImVector<float>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@M@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@M@@QEAA@XZ PROC				; ImVector<float>::~ImVector<float>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@M@@QEAA@XZ ENDP				; ImVector<float>::~ImVector<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@M@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@M@@QEAA@XZ PROC				; ImVector<float>::ImVector<float>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@M@@QEAA@XZ ENDP				; ImVector<float>::ImVector<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@UImFontConfig@@@@QEAAXAEBUImFontConfig@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@UImFontConfig@@@@QEAAXAEBUImFontConfig@@@Z PROC ; ImVector<ImFontConfig>::push_back, COMDAT

; 1807 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00040	39 08		 cmp	 DWORD PTR [rax], ecx
  00042	75 27		 jne	 SHORT $LN2@push_back
  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	8b 00		 mov	 eax, DWORD PTR [rax]
  0004d	ff c0		 inc	 eax
  0004f	8b d0		 mov	 edx, eax
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@UImFontConfig@@@@QEBAHH@Z ; ImVector<ImFontConfig>::_grow_capacity
  0005d	8b d0		 mov	 edx, eax
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UImFontConfig@@@@QEAAXH@Z ; ImVector<ImFontConfig>::reserve
$LN2@push_back:
  0006b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00075	48 69 c0 88 00
	00 00		 imul	 rax, rax, 136		; 00000088H
  0007c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00083	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00087	41 b8 88 00 00
	00		 mov	 r8d, 136		; 00000088H
  0008d	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00094	48 8b c8	 mov	 rcx, rax
  00097	e8 00 00 00 00	 call	 memcpy
  0009c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	8b 00		 mov	 eax, DWORD PTR [rax]
  000a5	ff c0		 inc	 eax
  000a7	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ae	89 01		 mov	 DWORD PTR [rcx], eax
  000b0	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b7	5f		 pop	 rdi
  000b8	5d		 pop	 rbp
  000b9	c3		 ret	 0
?push_back@?$ImVector@UImFontConfig@@@@QEAAXAEBUImFontConfig@@@Z ENDP ; ImVector<ImFontConfig>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@UImFontConfig@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImFontConfig@@@@QEAAXH@Z PROC	; ImVector<ImFontConfig>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 7f		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 69 c0 88 00
	00 00		 imul	 rax, rax, 136		; 00000088H
  00050	48 8b c8	 mov	 rcx, rax
  00053	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00058	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  0005c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00063	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00068	74 38		 je	 SHORT $LN3@reserve
  0006a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00074	48 69 c0 88 00
	00 00		 imul	 rax, rax, 136		; 00000088H
  0007b	4c 8b c0	 mov	 r8, rax
  0007e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00085	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00089	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  0008d	e8 00 00 00 00	 call	 memcpy
  00092	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00099	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0009d	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  000a2	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a9	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000ad	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000b1	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b8	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000be	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000c1	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c8	5f		 pop	 rdi
  000c9	5d		 pop	 rbp
  000ca	c3		 ret	 0
?reserve@?$ImVector@UImFontConfig@@@@QEAAXH@Z ENDP	; ImVector<ImFontConfig>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@UImFontConfig@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImFontConfig@@@@QEBAHH@Z PROC ; ImVector<ImFontConfig>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@UImFontConfig@@@@QEBAHH@Z ENDP ; ImVector<ImFontConfig>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?back@?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@XZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@XZ PROC ; ImVector<ImFontConfig>::back, COMDAT

; 1795 :     inline T&           back()                              { IM_ASSERT(Size > 0); return Data[Size - 1]; }

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	83 38 00	 cmp	 DWORD PTR [rax], 0
  00034	7f 1c		 jg	 SHORT $LN3@back
  00036	41 b8 03 07 00
	00		 mov	 r8d, 1795		; 00000703H
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00050	33 c0		 xor	 eax, eax
$LN3@back:
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	8b 00		 mov	 eax, DWORD PTR [rax]
  0005b	ff c8		 dec	 eax
  0005d	48 98		 cdqe
  0005f	48 69 c0 88 00
	00 00		 imul	 rax, rax, 136		; 00000088H
  00066	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006d	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00071	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00078	5f		 pop	 rdi
  00079	5d		 pop	 rbp
  0007a	c3		 ret	 0
?back@?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@XZ ENDP ; ImVector<ImFontConfig>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z PROC ; ImVector<ImFontConfig>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 69 c0 88 00
	00 00		 imul	 rax, rax, 136		; 00000088H
  00072	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00079	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0007d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00084	5f		 pop	 rdi
  00085	5d		 pop	 rbp
  00086	c3		 ret	 0
??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ENDP ; ImVector<ImFontConfig>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@UImFontConfig@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImFontConfig@@@@QEAAXXZ PROC		; ImVector<ImFontConfig>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@UImFontConfig@@@@QEAAXXZ ENDP		; ImVector<ImFontConfig>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@UImFontConfig@@@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@UImFontConfig@@@@QEAA@XZ PROC		; ImVector<ImFontConfig>::~ImVector<ImFontConfig>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@UImFontConfig@@@@QEAA@XZ ENDP		; ImVector<ImFontConfig>::~ImVector<ImFontConfig>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@UImFontConfig@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImFontConfig@@@@QEAA@XZ PROC		; ImVector<ImFontConfig>::ImVector<ImFontConfig>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@UImFontConfig@@@@QEAA@XZ ENDP		; ImVector<ImFontConfig>::ImVector<ImFontConfig>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXAEBUImFontAtlasCustomRect@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXAEBUImFontAtlasCustomRect@@@Z PROC ; ImVector<ImFontAtlasCustomRect>::push_back, COMDAT

; 1807 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00040	39 08		 cmp	 DWORD PTR [rax], ecx
  00042	75 27		 jne	 SHORT $LN2@push_back
  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	8b 00		 mov	 eax, DWORD PTR [rax]
  0004d	ff c0		 inc	 eax
  0004f	8b d0		 mov	 edx, eax
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@UImFontAtlasCustomRect@@@@QEBAHH@Z ; ImVector<ImFontAtlasCustomRect>::_grow_capacity
  0005d	8b d0		 mov	 edx, eax
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXH@Z ; ImVector<ImFontAtlasCustomRect>::reserve
$LN2@push_back:
  0006b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00075	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00079	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00080	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00084	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  0008a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00091	48 8b c8	 mov	 rcx, rax
  00094	e8 00 00 00 00	 call	 memcpy
  00099	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a0	8b 00		 mov	 eax, DWORD PTR [rax]
  000a2	ff c0		 inc	 eax
  000a4	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	89 01		 mov	 DWORD PTR [rcx], eax
  000ad	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b4	5f		 pop	 rdi
  000b5	5d		 pop	 rbp
  000b6	c3		 ret	 0
?push_back@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXAEBUImFontAtlasCustomRect@@@Z ENDP ; ImVector<ImFontAtlasCustomRect>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXH@Z PROC ; ImVector<ImFontAtlasCustomRect>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXH@Z ENDP ; ImVector<ImFontAtlasCustomRect>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@UImFontAtlasCustomRect@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImFontAtlasCustomRect@@@@QEBAHH@Z PROC ; ImVector<ImFontAtlasCustomRect>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@UImFontAtlasCustomRect@@@@QEBAHH@Z ENDP ; ImVector<ImFontAtlasCustomRect>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z PROC ; ImVector<ImFontAtlasCustomRect>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0006f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ENDP ; ImVector<ImFontAtlasCustomRect>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXXZ PROC ; ImVector<ImFontAtlasCustomRect>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXXZ ENDP ; ImVector<ImFontAtlasCustomRect>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ PROC	; ImVector<ImFontAtlasCustomRect>::~ImVector<ImFontAtlasCustomRect>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ ENDP	; ImVector<ImFontAtlasCustomRect>::~ImVector<ImFontAtlasCustomRect>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ PROC	; ImVector<ImFontAtlasCustomRect>::ImVector<ImFontAtlasCustomRect>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ ENDP	; ImVector<ImFontAtlasCustomRect>::ImVector<ImFontAtlasCustomRect>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@PEAUImFont@@@@QEAAXAEBQEAUImFont@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@PEAUImFont@@@@QEAAXAEBQEAUImFont@@@Z PROC ; ImVector<ImFont * __ptr64>::push_back, COMDAT

; 1807 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00040	39 08		 cmp	 DWORD PTR [rax], ecx
  00042	75 27		 jne	 SHORT $LN2@push_back
  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	8b 00		 mov	 eax, DWORD PTR [rax]
  0004d	ff c0		 inc	 eax
  0004f	8b d0		 mov	 edx, eax
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@PEAUImFont@@@@QEBAHH@Z ; ImVector<ImFont * __ptr64>::_grow_capacity
  0005d	8b d0		 mov	 edx, eax
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?reserve@?$ImVector@PEAUImFont@@@@QEAAXH@Z ; ImVector<ImFont * __ptr64>::reserve
$LN2@push_back:
  0006b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00075	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00080	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00084	41 b8 08 00 00
	00		 mov	 r8d, 8
  0008a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00091	48 8b c8	 mov	 rcx, rax
  00094	e8 00 00 00 00	 call	 memcpy
  00099	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a0	8b 00		 mov	 eax, DWORD PTR [rax]
  000a2	ff c0		 inc	 eax
  000a4	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	89 01		 mov	 DWORD PTR [rcx], eax
  000ad	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b4	5f		 pop	 rdi
  000b5	5d		 pop	 rbp
  000b6	c3		 ret	 0
?push_back@?$ImVector@PEAUImFont@@@@QEAAXAEBQEAUImFont@@@Z ENDP ; ImVector<ImFont * __ptr64>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@PEAUImFont@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@PEAUImFont@@@@QEAAXH@Z PROC		; ImVector<ImFont * __ptr64>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 c1 e0 03	 shl	 rax, 3
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 c1 e0 03	 shl	 rax, 3
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@PEAUImFont@@@@QEAAXH@Z ENDP		; ImVector<ImFont * __ptr64>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@PEAUImFont@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@PEAUImFont@@@@QEBAHH@Z PROC	; ImVector<ImFont * __ptr64>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@PEAUImFont@@@@QEBAHH@Z ENDP	; ImVector<ImFont * __ptr64>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?back@?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@XZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@XZ PROC ; ImVector<ImFont * __ptr64>::back, COMDAT

; 1795 :     inline T&           back()                              { IM_ASSERT(Size > 0); return Data[Size - 1]; }

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	83 38 00	 cmp	 DWORD PTR [rax], 0
  00034	7f 1c		 jg	 SHORT $LN3@back
  00036	41 b8 03 07 00
	00		 mov	 r8d, 1795		; 00000703H
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00050	33 c0		 xor	 eax, eax
$LN3@back:
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	8b 00		 mov	 eax, DWORD PTR [rax]
  0005b	ff c8		 dec	 eax
  0005d	48 98		 cdqe
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0006a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0006e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00075	5f		 pop	 rdi
  00076	5d		 pop	 rbp
  00077	c3		 ret	 0
?back@?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@XZ ENDP ; ImVector<ImFont * __ptr64>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z PROC	; ImVector<ImFont * __ptr64>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ENDP	; ImVector<ImFont * __ptr64>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?empty@?$ImVector@PEAUImFont@@@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?empty@?$ImVector@PEAUImFont@@@@QEBA_NXZ PROC		; ImVector<ImFont * __ptr64>::empty, COMDAT

; 1781 :     inline bool         empty() const                       { return Size == 0; }

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+248]
  00028	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	83 38 00	 cmp	 DWORD PTR [rax], 0
  00032	75 0c		 jne	 SHORT $LN3@empty
  00034	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv66[rbp], 1
  0003e	eb 0a		 jmp	 SHORT $LN4@empty
$LN3@empty:
  00040	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv66[rbp], 0
$LN4@empty:
  0004a	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv66[rbp]
  00051	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
?empty@?$ImVector@PEAUImFont@@@@QEBA_NXZ ENDP		; ImVector<ImFont * __ptr64>::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear_delete@?$ImVector@PEAUImFont@@@@QEAAXXZ
_TEXT	SEGMENT
n$1 = 4
this$ = 256
?clear_delete@?$ImVector@PEAUImFont@@@@QEAAXXZ PROC	; ImVector<ImFont * __ptr64>::clear_delete, COMDAT

; 1778 :     inline void         clear_delete()                      { for (int n = 0; n < Size; n++) IM_DELETE(Data[n]); clear(); }     // Important: never called automatically! always explicit.

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	c7 45 04 00 00
	00 00		 mov	 DWORD PTR n$1[rbp], 0
  00031	eb 08		 jmp	 SHORT $LN4@clear_dele
$LN2@clear_dele:
  00033	8b 45 04	 mov	 eax, DWORD PTR n$1[rbp]
  00036	ff c0		 inc	 eax
  00038	89 45 04	 mov	 DWORD PTR n$1[rbp], eax
$LN4@clear_dele:
  0003b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	39 45 04	 cmp	 DWORD PTR n$1[rbp], eax
  00047	7d 1a		 jge	 SHORT $LN3@clear_dele
  00049	48 63 45 04	 movsxd	 rax, DWORD PTR n$1[rbp]
  0004d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00054	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00058	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0005c	e8 00 00 00 00	 call	 ??$IM_DELETE@UImFont@@@@YAXPEAUImFont@@@Z ; IM_DELETE<ImFont>
  00061	eb d0		 jmp	 SHORT $LN2@clear_dele
$LN3@clear_dele:
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?clear@?$ImVector@PEAUImFont@@@@QEAAXXZ ; ImVector<ImFont * __ptr64>::clear
  0006f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
?clear_delete@?$ImVector@PEAUImFont@@@@QEAAXXZ ENDP	; ImVector<ImFont * __ptr64>::clear_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@PEAUImFont@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@PEAUImFont@@@@QEAAXXZ PROC		; ImVector<ImFont * __ptr64>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@PEAUImFont@@@@QEAAXXZ ENDP		; ImVector<ImFont * __ptr64>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@PEAUImFont@@@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@PEAUImFont@@@@QEAA@XZ PROC		; ImVector<ImFont * __ptr64>::~ImVector<ImFont * __ptr64>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@PEAUImFont@@@@QEAA@XZ ENDP		; ImVector<ImFont * __ptr64>::~ImVector<ImFont * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@PEAUImFont@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@PEAUImFont@@@@QEAA@XZ PROC		; ImVector<ImFont * __ptr64>::ImVector<ImFont * __ptr64>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@PEAUImFont@@@@QEAA@XZ ENDP		; ImVector<ImFont * __ptr64>::ImVector<ImFont * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z
_TEXT	SEGMENT
r$ = 8
pos$ = 40
size$ = 72
$T5 = 292
$T6 = 324
$T7 = 356
$T8 = 388
$T9 = 420
$T10 = 452
$T11 = 484
tv174 = 504
tv153 = 504
__$ArrayPad$ = 512
this$ = 560
cursor_type$ = 568
out_offset$ = 576
out_size$ = 584
out_uv_border$ = 592
out_uv_fill$ = 600
?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z PROC ; ImFontAtlas::GetMouseCursorTexData, COMDAT

; 2232 : {

$LN7:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 8e 00 00 00	 mov	 ecx, 142		; 0000008eH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR [rsp+600]
  00038	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003f	48 33 c5	 xor	 rax, rbp
  00042	48 89 85 00 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2233 :     if (cursor_type <= ImGuiMouseCursor_None || cursor_type >= ImGuiMouseCursor_COUNT)

  00049	83 bd 38 02 00
	00 ff		 cmp	 DWORD PTR cursor_type$[rbp], -1
  00050	7e 09		 jle	 SHORT $LN3@GetMouseCu
  00052	83 bd 38 02 00
	00 09		 cmp	 DWORD PTR cursor_type$[rbp], 9
  00059	7c 07		 jl	 SHORT $LN2@GetMouseCu
$LN3@GetMouseCu:

; 2234 :         return false;

  0005b	32 c0		 xor	 al, al
  0005d	e9 50 02 00 00	 jmp	 $LN1@GetMouseCu
$LN2@GetMouseCu:

; 2235 :     if (Flags & ImFontAtlasFlags_NoMouseCursors)

  00062	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00069	8b 00		 mov	 eax, DWORD PTR [rax]
  0006b	83 e0 02	 and	 eax, 2
  0006e	85 c0		 test	 eax, eax
  00070	74 07		 je	 SHORT $LN4@GetMouseCu

; 2236 :         return false;

  00072	32 c0		 xor	 al, al
  00074	e9 39 02 00 00	 jmp	 $LN1@GetMouseCu
$LN4@GetMouseCu:

; 2237 : 
; 2238 :     IM_ASSERT(PackIdMouseCursors != -1);

  00079	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00080	83 b8 94 04 00
	00 ff		 cmp	 DWORD PTR [rax+1172], -1
  00087	75 22		 jne	 SHORT $LN6@GetMouseCu
  00089	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU3@1@Z@4JA
  0008f	83 c0 06	 add	 eax, 6
  00092	44 8b c0	 mov	 r8d, eax
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@JHOLDEIK@?$AAP?$AAa?$AAc?$AAk?$AAI?$AAd?$AAM?$AAo?$AAu?$AAs?$AAe?$AAC?$AAu?$AAr?$AAs?$AAo?$AAr?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a9	33 c0		 xor	 eax, eax
$LN6@GetMouseCu:

; 2239 :     ImFontAtlasCustomRect* r = GetCustomRectByIndex(PackIdMouseCursors);

  000ab	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 90 94 04 00
	00		 mov	 edx, DWORD PTR [rax+1172]
  000b8	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000bf	e8 00 00 00 00	 call	 ?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z ; ImFontAtlas::GetCustomRectByIndex
  000c4	48 89 45 08	 mov	 QWORD PTR r$[rbp], rax

; 2240 :     ImVec2 pos = FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA[cursor_type][0] + ImVec2((float)r->X, (float)r->Y);

  000c8	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  000cc	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  000d0	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000d4	48 8b 45 08	 mov	 rax, QWORD PTR r$[rbp]
  000d8	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  000dc	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  000e0	0f 28 d0	 movaps	 xmm2, xmm0
  000e3	48 8d 8d 24 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  000ea	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000ef	48 63 8d 38 02
	00 00		 movsxd	 rcx, DWORD PTR cursor_type$[rbp]
  000f6	48 6b c9 18	 imul	 rcx, rcx, 24
  000fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A
  00101	48 03 d1	 add	 rdx, rcx
  00104	48 8b ca	 mov	 rcx, rdx
  00107	ba 08 00 00 00	 mov	 edx, 8
  0010c	48 6b d2 00	 imul	 rdx, rdx, 0
  00110	48 03 ca	 add	 rcx, rdx
  00113	4c 8b c0	 mov	 r8, rax
  00116	48 8b d1	 mov	 rdx, rcx
  00119	48 8d 4d 28	 lea	 rcx, QWORD PTR pos$[rbp]
  0011d	e8 00 00 00 00	 call	 ??H@YA?AUImVec2@@AEBU0@0@Z ; operator+

; 2241 :     ImVec2 size = FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA[cursor_type][1];

  00122	48 63 85 38 02
	00 00		 movsxd	 rax, DWORD PTR cursor_type$[rbp]
  00129	48 6b c0 18	 imul	 rax, rax, 24
  0012d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A
  00134	48 03 c8	 add	 rcx, rax
  00137	48 8b c1	 mov	 rax, rcx
  0013a	b9 08 00 00 00	 mov	 ecx, 8
  0013f	48 6b c9 01	 imul	 rcx, rcx, 1
  00143	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00147	48 89 45 48	 mov	 QWORD PTR size$[rbp], rax

; 2242 :     *out_size = size;

  0014b	48 8b 85 48 02
	00 00		 mov	 rax, QWORD PTR out_size$[rbp]
  00152	48 8b 4d 48	 mov	 rcx, QWORD PTR size$[rbp]
  00156	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2243 :     *out_offset = FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA[cursor_type][2];

  00159	48 63 85 38 02
	00 00		 movsxd	 rax, DWORD PTR cursor_type$[rbp]
  00160	48 6b c0 18	 imul	 rax, rax, 24
  00164	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A
  0016b	48 03 c8	 add	 rcx, rax
  0016e	48 8b c1	 mov	 rax, rcx
  00171	b9 08 00 00 00	 mov	 ecx, 8
  00176	48 6b c9 02	 imul	 rcx, rcx, 2
  0017a	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0017e	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR out_offset$[rbp]
  00185	48 89 01	 mov	 QWORD PTR [rcx], rax

; 2244 :     out_uv_border[0] = (pos) * TexUvScale;

  00188	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0018f	48 83 c0 48	 add	 rax, 72			; 00000048H
  00193	4c 8b c0	 mov	 r8, rax
  00196	48 8d 55 28	 lea	 rdx, QWORD PTR pos$[rbp]
  0019a	48 8d 8d 44 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  001a1	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@0@Z ; operator*
  001a6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001a9	b9 08 00 00 00	 mov	 ecx, 8
  001ae	48 6b c9 00	 imul	 rcx, rcx, 0
  001b2	48 8b 95 50 02
	00 00		 mov	 rdx, QWORD PTR out_uv_border$[rbp]
  001b9	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax

; 2245 :     out_uv_border[1] = (pos + size) * TexUvScale;

  001bd	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001c4	48 83 c0 48	 add	 rax, 72			; 00000048H
  001c8	48 89 85 f8 01
	00 00		 mov	 QWORD PTR tv153[rbp], rax
  001cf	4c 8d 45 48	 lea	 r8, QWORD PTR size$[rbp]
  001d3	48 8d 55 28	 lea	 rdx, QWORD PTR pos$[rbp]
  001d7	48 8d 8d 64 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  001de	e8 00 00 00 00	 call	 ??H@YA?AUImVec2@@AEBU0@0@Z ; operator+
  001e3	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR tv153[rbp]
  001ea	4c 8b c1	 mov	 r8, rcx
  001ed	48 8b d0	 mov	 rdx, rax
  001f0	48 8d 8d 84 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  001f7	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@0@Z ; operator*
  001fc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ff	b9 08 00 00 00	 mov	 ecx, 8
  00204	48 6b c9 01	 imul	 rcx, rcx, 1
  00208	48 8b 95 50 02
	00 00		 mov	 rdx, QWORD PTR out_uv_border$[rbp]
  0020f	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax

; 2246 :     pos.x += FONT_ATLAS_DEFAULT_TEX_DATA_W + 1;

  00213	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR pos$[rbp]
  00218	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@42f60000
  00220	f3 0f 11 45 28	 movss	 DWORD PTR pos$[rbp], xmm0

; 2247 :     out_uv_fill[0] = (pos) * TexUvScale;

  00225	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0022c	48 83 c0 48	 add	 rax, 72			; 00000048H
  00230	4c 8b c0	 mov	 r8, rax
  00233	48 8d 55 28	 lea	 rdx, QWORD PTR pos$[rbp]
  00237	48 8d 8d a4 01
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  0023e	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@0@Z ; operator*
  00243	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00246	b9 08 00 00 00	 mov	 ecx, 8
  0024b	48 6b c9 00	 imul	 rcx, rcx, 0
  0024f	48 8b 95 58 02
	00 00		 mov	 rdx, QWORD PTR out_uv_fill$[rbp]
  00256	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax

; 2248 :     out_uv_fill[1] = (pos + size) * TexUvScale;

  0025a	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00261	48 83 c0 48	 add	 rax, 72			; 00000048H
  00265	48 89 85 f8 01
	00 00		 mov	 QWORD PTR tv174[rbp], rax
  0026c	4c 8d 45 48	 lea	 r8, QWORD PTR size$[rbp]
  00270	48 8d 55 28	 lea	 rdx, QWORD PTR pos$[rbp]
  00274	48 8d 8d c4 01
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  0027b	e8 00 00 00 00	 call	 ??H@YA?AUImVec2@@AEBU0@0@Z ; operator+
  00280	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR tv174[rbp]
  00287	4c 8b c1	 mov	 r8, rcx
  0028a	48 8b d0	 mov	 rdx, rax
  0028d	48 8d 8d e4 01
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00294	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@0@Z ; operator*
  00299	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0029c	b9 08 00 00 00	 mov	 ecx, 8
  002a1	48 6b c9 01	 imul	 rcx, rcx, 1
  002a5	48 8b 95 58 02
	00 00		 mov	 rdx, QWORD PTR out_uv_fill$[rbp]
  002ac	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax

; 2249 :     return true;

  002b0	b0 01		 mov	 al, 1
$LN1@GetMouseCu:

; 2250 : }

  002b2	48 8b f8	 mov	 rdi, rax
  002b5	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  002b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z$rtcFrameData
  002c0	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002c5	48 8b c7	 mov	 rax, rdi
  002c8	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  002cf	48 33 cd	 xor	 rcx, rbp
  002d2	e8 00 00 00 00	 call	 __security_check_cookie
  002d7	48 8d a5 18 02
	00 00		 lea	 rsp, QWORD PTR [rbp+536]
  002de	5f		 pop	 rdi
  002df	5d		 pop	 rbp
  002e0	c3		 ret	 0
?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z ENDP ; ImFontAtlas::GetMouseCursorTexData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
this$ = 288
rect$ = 296
out_uv_min$ = 304
out_uv_max$ = 312
?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z PROC ; ImFontAtlas::CalcCustomRectUV, COMDAT

; 2224 : {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 2225 :     IM_ASSERT(TexWidth > 0 && TexHeight > 0);   // Font atlas needs to be built before we can calculate UV coordinates

  00039	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	83 78 40 00	 cmp	 DWORD PTR [rax+64], 0
  00044	7e 0d		 jle	 SHORT $LN3@CalcCustom
  00046	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	83 78 44 00	 cmp	 DWORD PTR [rax+68], 0
  00051	7f 21		 jg	 SHORT $LN4@CalcCustom
$LN3@CalcCustom:
  00053	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z@4JA
  00059	ff c0		 inc	 eax
  0005b	44 8b c0	 mov	 r8d, eax
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@CMBJAGBP@?$AAT?$AAe?$AAx?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAT?$AAe?$AAx?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00072	33 c0		 xor	 eax, eax
$LN4@CalcCustom:

; 2226 :     IM_ASSERT(rect->IsPacked());                // Make sure the rectangle has been packed

  00074	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR rect$[rbp]
  0007b	e8 00 00 00 00	 call	 ?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ ; ImFontAtlasCustomRect::IsPacked
  00080	0f b6 c0	 movzx	 eax, al
  00083	85 c0		 test	 eax, eax
  00085	75 22		 jne	 SHORT $LN5@CalcCustom
  00087	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z@4JA
  0008d	83 c0 02	 add	 eax, 2
  00090	44 8b c0	 mov	 r8d, eax
  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DEJIAPCP@?$AAr?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAI?$AAs?$AAP?$AAa?$AAc?$AAk?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  000a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a7	33 c0		 xor	 eax, eax
$LN5@CalcCustom:

; 2227 :     *out_uv_min = ImVec2((float)rect->X * TexUvScale.x, (float)rect->Y * TexUvScale.y);

  000a9	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR rect$[rbp]
  000b0	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  000b4	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000b8	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bf	f3 0f 59 40 4c	 mulss	 xmm0, DWORD PTR [rax+76]
  000c4	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR rect$[rbp]
  000cb	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  000cf	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  000d3	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000da	f3 0f 59 48 48	 mulss	 xmm1, DWORD PTR [rax+72]
  000df	0f 28 d0	 movaps	 xmm2, xmm0
  000e2	48 8d 8d c4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  000e9	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000ee	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f1	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR out_uv_min$[rbp]
  000f8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 2228 :     *out_uv_max = ImVec2((float)(rect->X + rect->Width) * TexUvScale.x, (float)(rect->Y + rect->Height) * TexUvScale.y);

  000fb	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR rect$[rbp]
  00102	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  00106	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR rect$[rbp]
  0010d	0f b7 49 02	 movzx	 ecx, WORD PTR [rcx+2]
  00111	03 c1		 add	 eax, ecx
  00113	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00117	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0011e	f3 0f 59 40 4c	 mulss	 xmm0, DWORD PTR [rax+76]
  00123	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR rect$[rbp]
  0012a	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0012e	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR rect$[rbp]
  00135	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  00138	03 c1		 add	 eax, ecx
  0013a	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  0013e	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00145	f3 0f 59 48 48	 mulss	 xmm1, DWORD PTR [rax+72]
  0014a	0f 28 d0	 movaps	 xmm2, xmm0
  0014d	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  00154	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00159	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0015c	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR out_uv_max$[rbp]
  00163	48 89 01	 mov	 QWORD PTR [rcx], rax

; 2229 : }

  00166	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0016d	5f		 pop	 rdi
  0016e	5d		 pop	 rbp
  0016f	c3		 ret	 0
?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z ENDP ; ImFontAtlas::CalcCustomRectUV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z
_TEXT	SEGMENT
this$ = 224
index$ = 232
?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z PROC ; ImFontAtlas::GetCustomRectByIndex, COMDAT

; 2798 :     ImFontAtlasCustomRect*      GetCustomRectByIndex(int index) { IM_ASSERT(index >= 0); return &CustomRects[index]; }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR index$[rbp], 0
  00035	7d 1c		 jge	 SHORT $LN3@GetCustomR
  00037	41 b8 ee 0a 00
	00		 mov	 r8d, 2798		; 00000aeeH
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BG@HMJJDGFN@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00051	33 c0		 xor	 eax, eax
$LN3@GetCustomR:
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 83 c0 68	 add	 rax, 104		; 00000068H
  0005e	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR index$[rbp]
  00064	48 8b c8	 mov	 rcx, rax
  00067	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ; ImVector<ImFontAtlasCustomRect>::operator[]
  0006c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00073	5f		 pop	 rdi
  00074	5d		 pop	 rbp
  00075	c3		 ret	 0
?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z ENDP ; ImFontAtlas::GetCustomRectByIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z
_TEXT	SEGMENT
r$ = 8
__$ArrayPad$ = 248
this$ = 288
font$ = 296
id$ = 304
width$ = 312
height$ = 320
advance_x$ = 328
offset$ = 336
?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z PROC ; ImFontAtlas::AddCustomRectFontGlyph, COMDAT

; 2205 : {

$LN8:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 f8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2206 : #ifdef IMGUI_USE_WCHAR32
; 2207 :     IM_ASSERT(id <= IM_UNICODE_CODEPOINT_MAX);
; 2208 : #endif
; 2209 :     IM_ASSERT(font != NULL);

  0004b	48 83 bd 28 01
	00 00 00	 cmp	 QWORD PTR font$[rbp], 0
  00053	75 22		 jne	 SHORT $LN3@AddCustomR
  00055	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z@4JA
  0005b	83 c0 04	 add	 eax, 4
  0005e	44 8b c0	 mov	 r8d, eax
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@PBFICKNN@?$AAf?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  0006f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00075	33 c0		 xor	 eax, eax
$LN3@AddCustomR:

; 2210 :     IM_ASSERT(width > 0 && width <= 0xFFFF);

  00077	83 bd 38 01 00
	00 00		 cmp	 DWORD PTR width$[rbp], 0
  0007e	7e 0c		 jle	 SHORT $LN4@AddCustomR
  00080	81 bd 38 01 00
	00 ff ff 00 00	 cmp	 DWORD PTR width$[rbp], 65535 ; 0000ffffH
  0008a	7e 22		 jle	 SHORT $LN5@AddCustomR
$LN4@AddCustomR:
  0008c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z@4JA
  00092	83 c0 05	 add	 eax, 5
  00095	44 8b c0	 mov	 r8d, eax
  00098	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@GHLOFHKF@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAF?$AAF?$AAF?$AAF?$AA?$AA@
  000a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ac	33 c0		 xor	 eax, eax
$LN5@AddCustomR:

; 2211 :     IM_ASSERT(height > 0 && height <= 0xFFFF);

  000ae	83 bd 40 01 00
	00 00		 cmp	 DWORD PTR height$[rbp], 0
  000b5	7e 0c		 jle	 SHORT $LN6@AddCustomR
  000b7	81 bd 40 01 00
	00 ff ff 00 00	 cmp	 DWORD PTR height$[rbp], 65535 ; 0000ffffH
  000c1	7e 22		 jle	 SHORT $LN7@AddCustomR
$LN6@AddCustomR:
  000c3	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z@4JA
  000c9	83 c0 06	 add	 eax, 6
  000cc	44 8b c0	 mov	 r8d, eax
  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  000d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@CAIIJEKF@?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAF?$AAF?$AAF?$AAF?$AA?$AA@
  000dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e3	33 c0		 xor	 eax, eax
$LN7@AddCustomR:

; 2212 :     ImFontAtlasCustomRect r;

  000e5	48 8d 4d 08	 lea	 rcx, QWORD PTR r$[rbp]
  000e9	e8 00 00 00 00	 call	 ??0ImFontAtlasCustomRect@@QEAA@XZ ; ImFontAtlasCustomRect::ImFontAtlasCustomRect

; 2213 :     r.Width = (unsigned short)width;

  000ee	0f b7 85 38 01
	00 00		 movzx	 eax, WORD PTR width$[rbp]
  000f5	66 89 45 08	 mov	 WORD PTR r$[rbp], ax

; 2214 :     r.Height = (unsigned short)height;

  000f9	0f b7 85 40 01
	00 00		 movzx	 eax, WORD PTR height$[rbp]
  00100	66 89 45 0a	 mov	 WORD PTR r$[rbp+2], ax

; 2215 :     r.GlyphID = id;

  00104	0f b7 85 30 01
	00 00		 movzx	 eax, WORD PTR id$[rbp]
  0010b	89 45 10	 mov	 DWORD PTR r$[rbp+8], eax

; 2216 :     r.GlyphAdvanceX = advance_x;

  0010e	f3 0f 10 85 48
	01 00 00	 movss	 xmm0, DWORD PTR advance_x$[rbp]
  00116	f3 0f 11 45 14	 movss	 DWORD PTR r$[rbp+12], xmm0

; 2217 :     r.GlyphOffset = offset;

  0011b	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR offset$[rbp]
  00122	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00125	48 89 45 18	 mov	 QWORD PTR r$[rbp+16], rax

; 2218 :     r.Font = font;

  00129	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR font$[rbp]
  00130	48 89 45 20	 mov	 QWORD PTR r$[rbp+24], rax

; 2219 :     CustomRects.push_back(r);

  00134	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0013b	48 83 c0 68	 add	 rax, 104		; 00000068H
  0013f	48 8d 55 08	 lea	 rdx, QWORD PTR r$[rbp]
  00143	48 8b c8	 mov	 rcx, rax
  00146	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXAEBUImFontAtlasCustomRect@@@Z ; ImVector<ImFontAtlasCustomRect>::push_back

; 2220 :     return CustomRects.Size - 1; // Return index

  0014b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00152	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  00155	ff c8		 dec	 eax

; 2221 : }

  00157	8b f8		 mov	 edi, eax
  00159	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0015d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z$rtcFrameData
  00164	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00169	8b c7		 mov	 eax, edi
  0016b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00172	48 33 cd	 xor	 rcx, rbp
  00175	e8 00 00 00 00	 call	 __security_check_cookie
  0017a	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00181	5f		 pop	 rdi
  00182	5d		 pop	 rbp
  00183	c3		 ret	 0
?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z ENDP ; ImFontAtlas::AddCustomRectFontGlyph
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z
_TEXT	SEGMENT
r$ = 8
__$ArrayPad$ = 248
this$ = 288
width$ = 296
height$ = 304
?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z PROC	; ImFontAtlas::AddCustomRectRegular, COMDAT

; 2194 : {

$LN7:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00033	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003a	48 33 c5	 xor	 rax, rbp
  0003d	48 89 85 f8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2195 :     IM_ASSERT(width > 0 && width <= 0xFFFF);

  00044	83 bd 28 01 00
	00 00		 cmp	 DWORD PTR width$[rbp], 0
  0004b	7e 0c		 jle	 SHORT $LN3@AddCustomR
  0004d	81 bd 28 01 00
	00 ff ff 00 00	 cmp	 DWORD PTR width$[rbp], 65535 ; 0000ffffH
  00057	7e 21		 jle	 SHORT $LN4@AddCustomR
$LN3@AddCustomR:
  00059	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z@4JA
  0005f	ff c0		 inc	 eax
  00061	44 8b c0	 mov	 r8d, eax
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@GHLOFHKF@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAF?$AAF?$AAF?$AAF?$AA?$AA@
  00072	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00078	33 c0		 xor	 eax, eax
$LN4@AddCustomR:

; 2196 :     IM_ASSERT(height > 0 && height <= 0xFFFF);

  0007a	83 bd 30 01 00
	00 00		 cmp	 DWORD PTR height$[rbp], 0
  00081	7e 0c		 jle	 SHORT $LN5@AddCustomR
  00083	81 bd 30 01 00
	00 ff ff 00 00	 cmp	 DWORD PTR height$[rbp], 65535 ; 0000ffffH
  0008d	7e 22		 jle	 SHORT $LN6@AddCustomR
$LN5@AddCustomR:
  0008f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z@4JA
  00095	83 c0 02	 add	 eax, 2
  00098	44 8b c0	 mov	 r8d, eax
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@CAIIJEKF@?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAF?$AAF?$AAF?$AAF?$AA?$AA@
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000af	33 c0		 xor	 eax, eax
$LN6@AddCustomR:

; 2197 :     ImFontAtlasCustomRect r;

  000b1	48 8d 4d 08	 lea	 rcx, QWORD PTR r$[rbp]
  000b5	e8 00 00 00 00	 call	 ??0ImFontAtlasCustomRect@@QEAA@XZ ; ImFontAtlasCustomRect::ImFontAtlasCustomRect

; 2198 :     r.Width = (unsigned short)width;

  000ba	0f b7 85 28 01
	00 00		 movzx	 eax, WORD PTR width$[rbp]
  000c1	66 89 45 08	 mov	 WORD PTR r$[rbp], ax

; 2199 :     r.Height = (unsigned short)height;

  000c5	0f b7 85 30 01
	00 00		 movzx	 eax, WORD PTR height$[rbp]
  000cc	66 89 45 0a	 mov	 WORD PTR r$[rbp+2], ax

; 2200 :     CustomRects.push_back(r);

  000d0	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d7	48 83 c0 68	 add	 rax, 104		; 00000068H
  000db	48 8d 55 08	 lea	 rdx, QWORD PTR r$[rbp]
  000df	48 8b c8	 mov	 rcx, rax
  000e2	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXAEBUImFontAtlasCustomRect@@@Z ; ImVector<ImFontAtlasCustomRect>::push_back

; 2201 :     return CustomRects.Size - 1; // Return index

  000e7	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ee	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  000f1	ff c8		 dec	 eax

; 2202 : }

  000f3	8b f8		 mov	 edi, eax
  000f5	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z$rtcFrameData
  00100	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00105	8b c7		 mov	 eax, edi
  00107	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0010e	48 33 cd	 xor	 rcx, rbp
  00111	e8 00 00 00 00	 call	 __security_check_cookie
  00116	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0011d	5f		 pop	 rdi
  0011e	5d		 pop	 rbp
  0011f	c3		 ret	 0
?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z ENDP	; ImFontAtlas::AddCustomRectRegular
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ
_TEXT	SEGMENT
this$ = 224
?GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ PROC	; ImFontAtlas::GetGlyphRangesVietnamese, COMDAT

; 3051 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 3052 :     static const ImWchar ranges[] =
; 3053 :     {
; 3054 :         0x0020, 0x00FF, // Basic Latin
; 3055 :         0x0102, 0x0103,
; 3056 :         0x0110, 0x0111,
; 3057 :         0x0128, 0x0129,
; 3058 :         0x0168, 0x0169,
; 3059 :         0x01A0, 0x01A1,
; 3060 :         0x01AF, 0x01B0,
; 3061 :         0x1EA0, 0x1EF9,
; 3062 :         0,
; 3063 :     };
; 3064 :     return &ranges[0];

  00028	b8 02 00 00 00	 mov	 eax, 2
  0002d	48 6b c0 00	 imul	 rax, rax, 0
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?ranges@?1??GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ@4QBGB
  00038	48 03 c8	 add	 rcx, rax
  0003b	48 8b c1	 mov	 rax, rcx

; 3065 : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ ENDP	; ImFontAtlas::GetGlyphRangesVietnamese
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ
_TEXT	SEGMENT
this$ = 224
?GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ PROC	; ImFontAtlas::GetGlyphRangesThai, COMDAT

; 3039 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 3040 :     static const ImWchar ranges[] =
; 3041 :     {
; 3042 :         0x0020, 0x00FF, // Basic Latin
; 3043 :         0x2010, 0x205E, // Punctuations
; 3044 :         0x0E00, 0x0E7F, // Thai
; 3045 :         0,
; 3046 :     };
; 3047 :     return &ranges[0];

  00028	b8 02 00 00 00	 mov	 eax, 2
  0002d	48 6b c0 00	 imul	 rax, rax, 0
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?ranges@?1??GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ@4QBGB
  00038	48 03 c8	 add	 rcx, rax
  0003b	48 8b c1	 mov	 rax, rcx

; 3048 : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ ENDP	; ImFontAtlas::GetGlyphRangesThai
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ
_TEXT	SEGMENT
this$ = 224
?GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ PROC	; ImFontAtlas::GetGlyphRangesCyrillic, COMDAT

; 3026 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 3027 :     static const ImWchar ranges[] =
; 3028 :     {
; 3029 :         0x0020, 0x00FF, // Basic Latin + Latin Supplement
; 3030 :         0x0400, 0x052F, // Cyrillic + Cyrillic Supplement
; 3031 :         0x2DE0, 0x2DFF, // Cyrillic Extended-A
; 3032 :         0xA640, 0xA69F, // Cyrillic Extended-B
; 3033 :         0,
; 3034 :     };
; 3035 :     return &ranges[0];

  00028	b8 02 00 00 00	 mov	 eax, 2
  0002d	48 6b c0 00	 imul	 rax, rax, 0
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?ranges@?1??GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ@4QBGB
  00038	48 03 c8	 add	 rcx, rax
  0003b	48 8b c1	 mov	 rax, rcx

; 3036 : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ ENDP	; ImFontAtlas::GetGlyphRangesCyrillic
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ
_TEXT	SEGMENT
this$ = 224
?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ PROC ; ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon, COMDAT

; 2868 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2869 :     // Store 2500 regularly used characters for Simplified Chinese.
; 2870 :     // Sourced from https://zh.wiktionary.org/wiki/%E9%99%84%E5%BD%95:%E7%8E%B0%E4%BB%A3%E6%B1%89%E8%AF%AD%E5%B8%B8%E7%94%A8%E5%AD%97%E8%A1%A8
; 2871 :     // This table covers 97.97% of all characters used during the month in July, 1987.
; 2872 :     // You can use ImFontGlyphRangesBuilder to create your own ranges derived from this, by merging existing ranges or adding new characters.
; 2873 :     // (Stored as accumulative offsets from the initial unicode codepoint 0x4E00. This encoding is designed to helps us compact the source code size.)
; 2874 :     static const short accumulative_offsets_from_0x4E00[] =
; 2875 :     {
; 2876 :         0,1,2,4,1,1,1,1,2,1,3,2,1,2,2,1,1,1,1,1,5,2,1,2,3,3,3,2,2,4,1,1,1,2,1,5,2,3,1,2,1,2,1,1,2,1,1,2,2,1,4,1,1,1,1,5,10,1,2,19,2,1,2,1,2,1,2,1,2,
; 2877 :         1,5,1,6,3,2,1,2,2,1,1,1,4,8,5,1,1,4,1,1,3,1,2,1,5,1,2,1,1,1,10,1,1,5,2,4,6,1,4,2,2,2,12,2,1,1,6,1,1,1,4,1,1,4,6,5,1,4,2,2,4,10,7,1,1,4,2,4,
; 2878 :         2,1,4,3,6,10,12,5,7,2,14,2,9,1,1,6,7,10,4,7,13,1,5,4,8,4,1,1,2,28,5,6,1,1,5,2,5,20,2,2,9,8,11,2,9,17,1,8,6,8,27,4,6,9,20,11,27,6,68,2,2,1,1,
; 2879 :         1,2,1,2,2,7,6,11,3,3,1,1,3,1,2,1,1,1,1,1,3,1,1,8,3,4,1,5,7,2,1,4,4,8,4,2,1,2,1,1,4,5,6,3,6,2,12,3,1,3,9,2,4,3,4,1,5,3,3,1,3,7,1,5,1,1,1,1,2,
; 2880 :         3,4,5,2,3,2,6,1,1,2,1,7,1,7,3,4,5,15,2,2,1,5,3,22,19,2,1,1,1,1,2,5,1,1,1,6,1,1,12,8,2,9,18,22,4,1,1,5,1,16,1,2,7,10,15,1,1,6,2,4,1,2,4,1,6,
; 2881 :         1,1,3,2,4,1,6,4,5,1,2,1,1,2,1,10,3,1,3,2,1,9,3,2,5,7,2,19,4,3,6,1,1,1,1,1,4,3,2,1,1,1,2,5,3,1,1,1,2,2,1,1,2,1,1,2,1,3,1,1,1,3,7,1,4,1,1,2,1,
; 2882 :         1,2,1,2,4,4,3,8,1,1,1,2,1,3,5,1,3,1,3,4,6,2,2,14,4,6,6,11,9,1,15,3,1,28,5,2,5,5,3,1,3,4,5,4,6,14,3,2,3,5,21,2,7,20,10,1,2,19,2,4,28,28,2,3,
; 2883 :         2,1,14,4,1,26,28,42,12,40,3,52,79,5,14,17,3,2,2,11,3,4,6,3,1,8,2,23,4,5,8,10,4,2,7,3,5,1,1,6,3,1,2,2,2,5,28,1,1,7,7,20,5,3,29,3,17,26,1,8,4,
; 2884 :         27,3,6,11,23,5,3,4,6,13,24,16,6,5,10,25,35,7,3,2,3,3,14,3,6,2,6,1,4,2,3,8,2,1,1,3,3,3,4,1,1,13,2,2,4,5,2,1,14,14,1,2,2,1,4,5,2,3,1,14,3,12,
; 2885 :         3,17,2,16,5,1,2,1,8,9,3,19,4,2,2,4,17,25,21,20,28,75,1,10,29,103,4,1,2,1,1,4,2,4,1,2,3,24,2,2,2,1,1,2,1,3,8,1,1,1,2,1,1,3,1,1,1,6,1,5,3,1,1,
; 2886 :         1,3,4,1,1,5,2,1,5,6,13,9,16,1,1,1,1,3,2,3,2,4,5,2,5,2,2,3,7,13,7,2,2,1,1,1,1,2,3,3,2,1,6,4,9,2,1,14,2,14,2,1,18,3,4,14,4,11,41,15,23,15,23,
; 2887 :         176,1,3,4,1,1,1,1,5,3,1,2,3,7,3,1,1,2,1,2,4,4,6,2,4,1,9,7,1,10,5,8,16,29,1,1,2,2,3,1,3,5,2,4,5,4,1,1,2,2,3,3,7,1,6,10,1,17,1,44,4,6,2,1,1,6,
; 2888 :         5,4,2,10,1,6,9,2,8,1,24,1,2,13,7,8,8,2,1,4,1,3,1,3,3,5,2,5,10,9,4,9,12,2,1,6,1,10,1,1,7,7,4,10,8,3,1,13,4,3,1,6,1,3,5,2,1,2,17,16,5,2,16,6,
; 2889 :         1,4,2,1,3,3,6,8,5,11,11,1,3,3,2,4,6,10,9,5,7,4,7,4,7,1,1,4,2,1,3,6,8,7,1,6,11,5,5,3,24,9,4,2,7,13,5,1,8,82,16,61,1,1,1,4,2,2,16,10,3,8,1,1,
; 2890 :         6,4,2,1,3,1,1,1,4,3,8,4,2,2,1,1,1,1,1,6,3,5,1,1,4,6,9,2,1,1,1,2,1,7,2,1,6,1,5,4,4,3,1,8,1,3,3,1,3,2,2,2,2,3,1,6,1,2,1,2,1,3,7,1,8,2,1,2,1,5,
; 2891 :         2,5,3,5,10,1,2,1,1,3,2,5,11,3,9,3,5,1,1,5,9,1,2,1,5,7,9,9,8,1,3,3,3,6,8,2,3,2,1,1,32,6,1,2,15,9,3,7,13,1,3,10,13,2,14,1,13,10,2,1,3,10,4,15,
; 2892 :         2,15,15,10,1,3,9,6,9,32,25,26,47,7,3,2,3,1,6,3,4,3,2,8,5,4,1,9,4,2,2,19,10,6,2,3,8,1,2,2,4,2,1,9,4,4,4,6,4,8,9,2,3,1,1,1,1,3,5,5,1,3,8,4,6,
; 2893 :         2,1,4,12,1,5,3,7,13,2,5,8,1,6,1,2,5,14,6,1,5,2,4,8,15,5,1,23,6,62,2,10,1,1,8,1,2,2,10,4,2,2,9,2,1,1,3,2,3,1,5,3,3,2,1,3,8,1,1,1,11,3,1,1,4,
; 2894 :         3,7,1,14,1,2,3,12,5,2,5,1,6,7,5,7,14,11,1,3,1,8,9,12,2,1,11,8,4,4,2,6,10,9,13,1,1,3,1,5,1,3,2,4,4,1,18,2,3,14,11,4,29,4,2,7,1,3,13,9,2,2,5,
; 2895 :         3,5,20,7,16,8,5,72,34,6,4,22,12,12,28,45,36,9,7,39,9,191,1,1,1,4,11,8,4,9,2,3,22,1,1,1,1,4,17,1,7,7,1,11,31,10,2,4,8,2,3,2,1,4,2,16,4,32,2,
; 2896 :         3,19,13,4,9,1,5,2,14,8,1,1,3,6,19,6,5,1,16,6,2,10,8,5,1,2,3,1,5,5,1,11,6,6,1,3,3,2,6,3,8,1,1,4,10,7,5,7,7,5,8,9,2,1,3,4,1,1,3,1,3,3,2,6,16,
; 2897 :         1,4,6,3,1,10,6,1,3,15,2,9,2,10,25,13,9,16,6,2,2,10,11,4,3,9,1,2,6,6,5,4,30,40,1,10,7,12,14,33,6,3,6,7,3,1,3,1,11,14,4,9,5,12,11,49,18,51,31,
; 2898 :         140,31,2,2,1,5,1,8,1,10,1,4,4,3,24,1,10,1,3,6,6,16,3,4,5,2,1,4,2,57,10,6,22,2,22,3,7,22,6,10,11,36,18,16,33,36,2,5,5,1,1,1,4,10,1,4,13,2,7,
; 2899 :         5,2,9,3,4,1,7,43,3,7,3,9,14,7,9,1,11,1,1,3,7,4,18,13,1,14,1,3,6,10,73,2,2,30,6,1,11,18,19,13,22,3,46,42,37,89,7,3,16,34,2,2,3,9,1,7,1,1,1,2,
; 2900 :         2,4,10,7,3,10,3,9,5,28,9,2,6,13,7,3,1,3,10,2,7,2,11,3,6,21,54,85,2,1,4,2,2,1,39,3,21,2,2,5,1,1,1,4,1,1,3,4,15,1,3,2,4,4,2,3,8,2,20,1,8,7,13,
; 2901 :         4,1,26,6,2,9,34,4,21,52,10,4,4,1,5,12,2,11,1,7,2,30,12,44,2,30,1,1,3,6,16,9,17,39,82,2,2,24,7,1,7,3,16,9,14,44,2,1,2,1,2,3,5,2,4,1,6,7,5,3,
; 2902 :         2,6,1,11,5,11,2,1,18,19,8,1,3,24,29,2,1,3,5,2,2,1,13,6,5,1,46,11,3,5,1,1,5,8,2,10,6,12,6,3,7,11,2,4,16,13,2,5,1,1,2,2,5,2,28,5,2,23,10,8,4,
; 2903 :         4,22,39,95,38,8,14,9,5,1,13,5,4,3,13,12,11,1,9,1,27,37,2,5,4,4,63,211,95,2,2,2,1,3,5,2,1,1,2,2,1,1,1,3,2,4,1,2,1,1,5,2,2,1,1,2,3,1,3,1,1,1,
; 2904 :         3,1,4,2,1,3,6,1,1,3,7,15,5,3,2,5,3,9,11,4,2,22,1,6,3,8,7,1,4,28,4,16,3,3,25,4,4,27,27,1,4,1,2,2,7,1,3,5,2,28,8,2,14,1,8,6,16,25,3,3,3,14,3,
; 2905 :         3,1,1,2,1,4,6,3,8,4,1,1,1,2,3,6,10,6,2,3,18,3,2,5,5,4,3,1,5,2,5,4,23,7,6,12,6,4,17,11,9,5,1,1,10,5,12,1,1,11,26,33,7,3,6,1,17,7,1,5,12,1,11,
; 2906 :         2,4,1,8,14,17,23,1,2,1,7,8,16,11,9,6,5,2,6,4,16,2,8,14,1,11,8,9,1,1,1,9,25,4,11,19,7,2,15,2,12,8,52,7,5,19,2,16,4,36,8,1,16,8,24,26,4,6,2,9,
; 2907 :         5,4,36,3,28,12,25,15,37,27,17,12,59,38,5,32,127,1,2,9,17,14,4,1,2,1,1,8,11,50,4,14,2,19,16,4,17,5,4,5,26,12,45,2,23,45,104,30,12,8,3,10,2,2,
; 2908 :         3,3,1,4,20,7,2,9,6,15,2,20,1,3,16,4,11,15,6,134,2,5,59,1,2,2,2,1,9,17,3,26,137,10,211,59,1,2,4,1,4,1,1,1,2,6,2,3,1,1,2,3,2,3,1,3,4,4,2,3,3,
; 2909 :         1,4,3,1,7,2,2,3,1,2,1,3,3,3,2,2,3,2,1,3,14,6,1,3,2,9,6,15,27,9,34,145,1,1,2,1,1,1,1,2,1,1,1,1,2,2,2,3,1,2,1,1,1,2,3,5,8,3,5,2,4,1,3,2,2,2,12,
; 2910 :         4,1,1,1,10,4,5,1,20,4,16,1,15,9,5,12,2,9,2,5,4,2,26,19,7,1,26,4,30,12,15,42,1,6,8,172,1,1,4,2,1,1,11,2,2,4,2,1,2,1,10,8,1,2,1,4,5,1,2,5,1,8,
; 2911 :         4,1,3,4,2,1,6,2,1,3,4,1,2,1,1,1,1,12,5,7,2,4,3,1,1,1,3,3,6,1,2,2,3,3,3,2,1,2,12,14,11,6,6,4,12,2,8,1,7,10,1,35,7,4,13,15,4,3,23,21,28,52,5,
; 2912 :         26,5,6,1,7,10,2,7,53,3,2,1,1,1,2,163,532,1,10,11,1,3,3,4,8,2,8,6,2,2,23,22,4,2,2,4,2,1,3,1,3,3,5,9,8,2,1,2,8,1,10,2,12,21,20,15,105,2,3,1,1,
; 2913 :         3,2,3,1,1,2,5,1,4,15,11,19,1,1,1,1,5,4,5,1,1,2,5,3,5,12,1,2,5,1,11,1,1,15,9,1,4,5,3,26,8,2,1,3,1,1,15,19,2,12,1,2,5,2,7,2,19,2,20,6,26,7,5,
; 2914 :         2,2,7,34,21,13,70,2,128,1,1,2,1,1,2,1,1,3,2,2,2,15,1,4,1,3,4,42,10,6,1,49,85,8,1,2,1,1,4,4,2,3,6,1,5,7,4,3,211,4,1,2,1,2,5,1,2,4,2,2,6,5,6,
; 2915 :         10,3,4,48,100,6,2,16,296,5,27,387,2,2,3,7,16,8,5,38,15,39,21,9,10,3,7,59,13,27,21,47,5,21,6
; 2916 :     };
; 2917 :     static ImWchar base_ranges[] = // not zero-terminated
; 2918 :     {
; 2919 :         0x0020, 0x00FF, // Basic Latin + Latin Supplement
; 2920 :         0x2000, 0x206F, // General Punctuation
; 2921 :         0x3000, 0x30FF, // CJK Symbols and Punctuations, Hiragana, Katakana
; 2922 :         0x31F0, 0x31FF, // Katakana Phonetic Extensions
; 2923 :         0xFF00, 0xFFEF, // Half-width characters
; 2924 :         0xFFFD, 0xFFFD  // Invalid
; 2925 :     };
; 2926 :     static ImWchar full_ranges[IM_ARRAYSIZE(base_ranges) + IM_ARRAYSIZE(accumulative_offsets_from_0x4E00) * 2 + 1] = { 0 };
; 2927 :     if (!full_ranges[0])

  0002a	b8 02 00 00 00	 mov	 eax, 2
  0002f	48 6b c0 00	 imul	 rax, rax, 0
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?full_ranges@?1??GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ@4PAGA
  0003a	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  0003e	85 c0		 test	 eax, eax
  00040	75 3e		 jne	 SHORT $LN2@GetGlyphRa

; 2928 :     {
; 2929 :         memcpy(full_ranges, base_ranges, sizeof(base_ranges));

  00042	41 b8 18 00 00
	00		 mov	 r8d, 24
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?base_ranges@?1??GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ@4PAGA
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?full_ranges@?1??GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ@4PAGA
  00056	e8 00 00 00 00	 call	 memcpy

; 2930 :         UnpackAccumulativeOffsetsIntoRanges(0x4E00, accumulative_offsets_from_0x4E00, IM_ARRAYSIZE(accumulative_offsets_from_0x4E00), full_ranges + IM_ARRAYSIZE(base_ranges));

  0005b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?full_ranges@?1??GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ@4PAGA
  00062	48 83 c0 18	 add	 rax, 24
  00066	4c 8b c8	 mov	 r9, rax
  00069	41 b8 c4 09 00
	00		 mov	 r8d, 2500		; 000009c4H
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?accumulative_offsets_from_0x4E00@?1??GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ@4QBFB
  00076	b9 00 4e 00 00	 mov	 ecx, 19968		; 00004e00H
  0007b	e8 00 00 00 00	 call	 ?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z ; UnpackAccumulativeOffsetsIntoRanges
$LN2@GetGlyphRa:

; 2931 :     }
; 2932 :     return &full_ranges[0];

  00080	b8 02 00 00 00	 mov	 eax, 2
  00085	48 6b c0 00	 imul	 rax, rax, 0
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?full_ranges@?1??GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ@4PAGA
  00090	48 03 c8	 add	 rcx, rax
  00093	48 8b c1	 mov	 rax, rcx

; 2933 : }

  00096	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0009d	5f		 pop	 rdi
  0009e	5d		 pop	 rbp
  0009f	c3		 ret	 0
?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ ENDP ; ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ
_TEXT	SEGMENT
this$ = 224
?GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ PROC	; ImFontAtlas::GetGlyphRangesChineseFull, COMDAT

; 2838 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 2839 :     static const ImWchar ranges[] =
; 2840 :     {
; 2841 :         0x0020, 0x00FF, // Basic Latin + Latin Supplement
; 2842 :         0x2000, 0x206F, // General Punctuation
; 2843 :         0x3000, 0x30FF, // CJK Symbols and Punctuations, Hiragana, Katakana
; 2844 :         0x31F0, 0x31FF, // Katakana Phonetic Extensions
; 2845 :         0xFF00, 0xFFEF, // Half-width characters
; 2846 :         0xFFFD, 0xFFFD, // Invalid
; 2847 :         0x4e00, 0x9FAF, // CJK Ideograms
; 2848 :         0,
; 2849 :     };
; 2850 :     return &ranges[0];

  00028	b8 02 00 00 00	 mov	 eax, 2
  0002d	48 6b c0 00	 imul	 rax, rax, 0
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?ranges@?1??GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ@4QBGB
  00038	48 03 c8	 add	 rcx, rax
  0003b	48 8b c1	 mov	 rax, rcx

; 2851 : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ ENDP	; ImFontAtlas::GetGlyphRangesChineseFull
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ
_TEXT	SEGMENT
this$ = 224
?GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ PROC	; ImFontAtlas::GetGlyphRangesJapanese, COMDAT

; 2936 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2937 :     // 2999 ideograms code points for Japanese
; 2938 :     // - 2136 Joyo (meaning "for regular use" or "for common use") Kanji code points
; 2939 :     // - 863 Jinmeiyo (meaning "for personal name") Kanji code points
; 2940 :     // - Sourced from official information provided by the government agencies of Japan:
; 2941 :     //   - List of Joyo Kanji by the Agency for Cultural Affairs
; 2942 :     //     - https://www.bunka.go.jp/kokugo_nihongo/sisaku/joho/joho/kijun/naikaku/kanji/
; 2943 :     //   - List of Jinmeiyo Kanji by the Ministry of Justice
; 2944 :     //     - http://www.moj.go.jp/MINJI/minji86.html
; 2945 :     //   - Available under the terms of the Creative Commons Attribution 4.0 International (CC BY 4.0).
; 2946 :     //     - https://creativecommons.org/licenses/by/4.0/legalcode
; 2947 :     // - You can generate this code by the script at:
; 2948 :     //   - https://github.com/vaiorabbit/everyday_use_kanji
; 2949 :     // - References:
; 2950 :     //   - List of Joyo Kanji
; 2951 :     //     - (Wikipedia) https://en.wikipedia.org/wiki/List_of_j%C5%8Dy%C5%8D_kanji
; 2952 :     //   - List of Jinmeiyo Kanji
; 2953 :     //     - (Wikipedia) https://en.wikipedia.org/wiki/Jinmeiy%C5%8D_kanji
; 2954 :     // - Missing 1 Joyo Kanji: U+20B9F (Kun'yomi: Shikaru, On'yomi: Shitsu,shichi), see https://github.com/ocornut/imgui/pull/3627 for details.
; 2955 :     // You can use ImFontGlyphRangesBuilder to create your own ranges derived from this, by merging existing ranges or adding new characters.
; 2956 :     // (Stored as accumulative offsets from the initial unicode codepoint 0x4E00. This encoding is designed to helps us compact the source code size.)
; 2957 :     static const short accumulative_offsets_from_0x4E00[] =
; 2958 :     {
; 2959 :         0,1,2,4,1,1,1,1,2,1,3,3,2,2,1,5,3,5,7,5,6,1,2,1,7,2,6,3,1,8,1,1,4,1,1,18,2,11,2,6,2,1,2,1,5,1,2,1,3,1,2,1,2,3,3,1,1,2,3,1,1,1,12,7,9,1,4,5,1,
; 2960 :         1,2,1,10,1,1,9,2,2,4,5,6,9,3,1,1,1,1,9,3,18,5,2,2,2,2,1,6,3,7,1,1,1,1,2,2,4,2,1,23,2,10,4,3,5,2,4,10,2,4,13,1,6,1,9,3,1,1,6,6,7,6,3,1,2,11,3,
; 2961 :         2,2,3,2,15,2,2,5,4,3,6,4,1,2,5,2,12,16,6,13,9,13,2,1,1,7,16,4,7,1,19,1,5,1,2,2,7,7,8,2,6,5,4,9,18,7,4,5,9,13,11,8,15,2,1,1,1,2,1,2,2,1,2,2,8,
; 2962 :         2,9,3,3,1,1,4,4,1,1,1,4,9,1,4,3,5,5,2,7,5,3,4,8,2,1,13,2,3,3,1,14,1,1,4,5,1,3,6,1,5,2,1,1,3,3,3,3,1,1,2,7,6,6,7,1,4,7,6,1,1,1,1,1,12,3,3,9,5,
; 2963 :         2,6,1,5,6,1,2,3,18,2,4,14,4,1,3,6,1,1,6,3,5,5,3,2,2,2,2,12,3,1,4,2,3,2,3,11,1,7,4,1,2,1,3,17,1,9,1,24,1,1,4,2,2,4,1,2,7,1,1,1,3,1,2,2,4,15,1,
; 2964 :         1,2,1,1,2,1,5,2,5,20,2,5,9,1,10,8,7,6,1,1,1,1,1,1,6,2,1,2,8,1,1,1,1,5,1,1,3,1,1,1,1,3,1,1,12,4,1,3,1,1,1,1,1,10,3,1,7,5,13,1,2,3,4,6,1,1,30,
; 2965 :         2,9,9,1,15,38,11,3,1,8,24,7,1,9,8,10,2,1,9,31,2,13,6,2,9,4,49,5,2,15,2,1,10,2,1,1,1,2,2,6,15,30,35,3,14,18,8,1,16,10,28,12,19,45,38,1,3,2,3,
; 2966 :         13,2,1,7,3,6,5,3,4,3,1,5,7,8,1,5,3,18,5,3,6,1,21,4,24,9,24,40,3,14,3,21,3,2,1,2,4,2,3,1,15,15,6,5,1,1,3,1,5,6,1,9,7,3,3,2,1,4,3,8,21,5,16,4,
; 2967 :         5,2,10,11,11,3,6,3,2,9,3,6,13,1,2,1,1,1,1,11,12,6,6,1,4,2,6,5,2,1,1,3,3,6,13,3,1,1,5,1,2,3,3,14,2,1,2,2,2,5,1,9,5,1,1,6,12,3,12,3,4,13,2,14,
; 2968 :         2,8,1,17,5,1,16,4,2,2,21,8,9,6,23,20,12,25,19,9,38,8,3,21,40,25,33,13,4,3,1,4,1,2,4,1,2,5,26,2,1,1,2,1,3,6,2,1,1,1,1,1,1,2,3,1,1,1,9,2,3,1,1,
; 2969 :         1,3,6,3,2,1,1,6,6,1,8,2,2,2,1,4,1,2,3,2,7,3,2,4,1,2,1,2,2,1,1,1,1,1,3,1,2,5,4,10,9,4,9,1,1,1,1,1,1,5,3,2,1,6,4,9,6,1,10,2,31,17,8,3,7,5,40,1,
; 2970 :         7,7,1,6,5,2,10,7,8,4,15,39,25,6,28,47,18,10,7,1,3,1,1,2,1,1,1,3,3,3,1,1,1,3,4,2,1,4,1,3,6,10,7,8,6,2,2,1,3,3,2,5,8,7,9,12,2,15,1,1,4,1,2,1,1,
; 2971 :         1,3,2,1,3,3,5,6,2,3,2,10,1,4,2,8,1,1,1,11,6,1,21,4,16,3,1,3,1,4,2,3,6,5,1,3,1,1,3,3,4,6,1,1,10,4,2,7,10,4,7,4,2,9,4,3,1,1,1,4,1,8,3,4,1,3,1,
; 2972 :         6,1,4,2,1,4,7,2,1,8,1,4,5,1,1,2,2,4,6,2,7,1,10,1,1,3,4,11,10,8,21,4,6,1,3,5,2,1,2,28,5,5,2,3,13,1,2,3,1,4,2,1,5,20,3,8,11,1,3,3,3,1,8,10,9,2,
; 2973 :         10,9,2,3,1,1,2,4,1,8,3,6,1,7,8,6,11,1,4,29,8,4,3,1,2,7,13,1,4,1,6,2,6,12,12,2,20,3,2,3,6,4,8,9,2,7,34,5,1,18,6,1,1,4,4,5,7,9,1,2,2,4,3,4,1,7,
; 2974 :         2,2,2,6,2,3,25,5,3,6,1,4,6,7,4,2,1,4,2,13,6,4,4,3,1,5,3,4,4,3,2,1,1,4,1,2,1,1,3,1,11,1,6,3,1,7,3,6,2,8,8,6,9,3,4,11,3,2,10,12,2,5,11,1,6,4,5,
; 2975 :         3,1,8,5,4,6,6,3,5,1,1,3,2,1,2,2,6,17,12,1,10,1,6,12,1,6,6,19,9,6,16,1,13,4,4,15,7,17,6,11,9,15,12,6,7,2,1,2,2,15,9,3,21,4,6,49,18,7,3,2,3,1,
; 2976 :         6,8,2,2,6,2,9,1,3,6,4,4,1,2,16,2,5,2,1,6,2,3,5,3,1,2,5,1,2,1,9,3,1,8,6,4,8,11,3,1,1,1,1,3,1,13,8,4,1,3,2,2,1,4,1,11,1,5,2,1,5,2,5,8,6,1,1,7,
; 2977 :         4,3,8,3,2,7,2,1,5,1,5,2,4,7,6,2,8,5,1,11,4,5,3,6,18,1,2,13,3,3,1,21,1,1,4,1,4,1,1,1,8,1,2,2,7,1,2,4,2,2,9,2,1,1,1,4,3,6,3,12,5,1,1,1,5,6,3,2,
; 2978 :         4,8,2,2,4,2,7,1,8,9,5,2,3,2,1,3,2,13,7,14,6,5,1,1,2,1,4,2,23,2,1,1,6,3,1,4,1,15,3,1,7,3,9,14,1,3,1,4,1,1,5,8,1,3,8,3,8,15,11,4,14,4,4,2,5,5,
; 2979 :         1,7,1,6,14,7,7,8,5,15,4,8,6,5,6,2,1,13,1,20,15,11,9,2,5,6,2,11,2,6,2,5,1,5,8,4,13,19,25,4,1,1,11,1,34,2,5,9,14,6,2,2,6,1,1,14,1,3,14,13,1,6,
; 2980 :         12,21,14,14,6,32,17,8,32,9,28,1,2,4,11,8,3,1,14,2,5,15,1,1,1,1,3,6,4,1,3,4,11,3,1,1,11,30,1,5,1,4,1,5,8,1,1,3,2,4,3,17,35,2,6,12,17,3,1,6,2,
; 2981 :         1,1,12,2,7,3,3,2,1,16,2,8,3,6,5,4,7,3,3,8,1,9,8,5,1,2,1,3,2,8,1,2,9,12,1,1,2,3,8,3,24,12,4,3,7,5,8,3,3,3,3,3,3,1,23,10,3,1,2,2,6,3,1,16,1,16,
; 2982 :         22,3,10,4,11,6,9,7,7,3,6,2,2,2,4,10,2,1,1,2,8,7,1,6,4,1,3,3,3,5,10,12,12,2,3,12,8,15,1,1,16,6,6,1,5,9,11,4,11,4,2,6,12,1,17,5,13,1,4,9,5,1,11,
; 2983 :         2,1,8,1,5,7,28,8,3,5,10,2,17,3,38,22,1,2,18,12,10,4,38,18,1,4,44,19,4,1,8,4,1,12,1,4,31,12,1,14,7,75,7,5,10,6,6,13,3,2,11,11,3,2,5,28,15,6,18,
; 2984 :         18,5,6,4,3,16,1,7,18,7,36,3,5,3,1,7,1,9,1,10,7,2,4,2,6,2,9,7,4,3,32,12,3,7,10,2,23,16,3,1,12,3,31,4,11,1,3,8,9,5,1,30,15,6,12,3,2,2,11,19,9,
; 2985 :         14,2,6,2,3,19,13,17,5,3,3,25,3,14,1,1,1,36,1,3,2,19,3,13,36,9,13,31,6,4,16,34,2,5,4,2,3,3,5,1,1,1,4,3,1,17,3,2,3,5,3,1,3,2,3,5,6,3,12,11,1,3,
; 2986 :         1,2,26,7,12,7,2,14,3,3,7,7,11,25,25,28,16,4,36,1,2,1,6,2,1,9,3,27,17,4,3,4,13,4,1,3,2,2,1,10,4,2,4,6,3,8,2,1,18,1,1,24,2,2,4,33,2,3,63,7,1,6,
; 2987 :         40,7,3,4,4,2,4,15,18,1,16,1,1,11,2,41,14,1,3,18,13,3,2,4,16,2,17,7,15,24,7,18,13,44,2,2,3,6,1,1,7,5,1,7,1,4,3,3,5,10,8,2,3,1,8,1,1,27,4,2,1,
; 2988 :         12,1,2,1,10,6,1,6,7,5,2,3,7,11,5,11,3,6,6,2,3,15,4,9,1,1,2,1,2,11,2,8,12,8,5,4,2,3,1,5,2,2,1,14,1,12,11,4,1,11,17,17,4,3,2,5,5,7,3,1,5,9,9,8,
; 2989 :         2,5,6,6,13,13,2,1,2,6,1,2,2,49,4,9,1,2,10,16,7,8,4,3,2,23,4,58,3,29,1,14,19,19,11,11,2,7,5,1,3,4,6,2,18,5,12,12,17,17,3,3,2,4,1,6,2,3,4,3,1,
; 2990 :         1,1,1,5,1,1,9,1,3,1,3,6,1,8,1,1,2,6,4,14,3,1,4,11,4,1,3,32,1,2,4,13,4,1,2,4,2,1,3,1,11,1,4,2,1,4,4,6,3,5,1,6,5,7,6,3,23,3,5,3,5,3,3,13,3,9,10,
; 2991 :         1,12,10,2,3,18,13,7,160,52,4,2,2,3,2,14,5,4,12,4,6,4,1,20,4,11,6,2,12,27,1,4,1,2,2,7,4,5,2,28,3,7,25,8,3,19,3,6,10,2,2,1,10,2,5,4,1,3,4,1,5,
; 2992 :         3,2,6,9,3,6,2,16,3,3,16,4,5,5,3,2,1,2,16,15,8,2,6,21,2,4,1,22,5,8,1,1,21,11,2,1,11,11,19,13,12,4,2,3,2,3,6,1,8,11,1,4,2,9,5,2,1,11,2,9,1,1,2,
; 2993 :         14,31,9,3,4,21,14,4,8,1,7,2,2,2,5,1,4,20,3,3,4,10,1,11,9,8,2,1,4,5,14,12,14,2,17,9,6,31,4,14,1,20,13,26,5,2,7,3,6,13,2,4,2,19,6,2,2,18,9,3,5,
; 2994 :         12,12,14,4,6,2,3,6,9,5,22,4,5,25,6,4,8,5,2,6,27,2,35,2,16,3,7,8,8,6,6,5,9,17,2,20,6,19,2,13,3,1,1,1,4,17,12,2,14,7,1,4,18,12,38,33,2,10,1,1,
; 2995 :         2,13,14,17,11,50,6,33,20,26,74,16,23,45,50,13,38,33,6,6,7,4,4,2,1,3,2,5,8,7,8,9,3,11,21,9,13,1,3,10,6,7,1,2,2,18,5,5,1,9,9,2,68,9,19,13,2,5,
; 2996 :         1,4,4,7,4,13,3,9,10,21,17,3,26,2,1,5,2,4,5,4,1,7,4,7,3,4,2,1,6,1,1,20,4,1,9,2,2,1,3,3,2,3,2,1,1,1,20,2,3,1,6,2,3,6,2,4,8,1,3,2,10,3,5,3,4,4,
; 2997 :         3,4,16,1,6,1,10,2,4,2,1,1,2,10,11,2,2,3,1,24,31,4,10,10,2,5,12,16,164,15,4,16,7,9,15,19,17,1,2,1,1,5,1,1,1,1,1,3,1,4,3,1,3,1,3,1,2,1,1,3,3,7,
; 2998 :         2,8,1,2,2,2,1,3,4,3,7,8,12,92,2,10,3,1,3,14,5,25,16,42,4,7,7,4,2,21,5,27,26,27,21,25,30,31,2,1,5,13,3,22,5,6,6,11,9,12,1,5,9,7,5,5,22,60,3,5,
; 2999 :         13,1,1,8,1,1,3,3,2,1,9,3,3,18,4,1,2,3,7,6,3,1,2,3,9,1,3,1,3,2,1,3,1,1,1,2,1,11,3,1,6,9,1,3,2,3,1,2,1,5,1,1,4,3,4,1,2,2,4,4,1,7,2,1,2,2,3,5,13,
; 3000 :         18,3,4,14,9,9,4,16,3,7,5,8,2,6,48,28,3,1,1,4,2,14,8,2,9,2,1,15,2,4,3,2,10,16,12,8,7,1,1,3,1,1,1,2,7,4,1,6,4,38,39,16,23,7,15,15,3,2,12,7,21,
; 3001 :         37,27,6,5,4,8,2,10,8,8,6,5,1,2,1,3,24,1,16,17,9,23,10,17,6,1,51,55,44,13,294,9,3,6,2,4,2,2,15,1,1,1,13,21,17,68,14,8,9,4,1,4,9,3,11,7,1,1,1,
; 3002 :         5,6,3,2,1,1,1,2,3,8,1,2,2,4,1,5,5,2,1,4,3,7,13,4,1,4,1,3,1,1,1,5,5,10,1,6,1,5,2,1,5,2,4,1,4,5,7,3,18,2,9,11,32,4,3,3,2,4,7,11,16,9,11,8,13,38,
; 3003 :         32,8,4,2,1,1,2,1,2,4,4,1,1,1,4,1,21,3,11,1,16,1,1,6,1,3,2,4,9,8,57,7,44,1,3,3,13,3,10,1,1,7,5,2,7,21,47,63,3,15,4,7,1,16,1,1,2,8,2,3,42,15,4,
; 3004 :         1,29,7,22,10,3,78,16,12,20,18,4,67,11,5,1,3,15,6,21,31,32,27,18,13,71,35,5,142,4,10,1,2,50,19,33,16,35,37,16,19,27,7,1,133,19,1,4,8,7,20,1,4,
; 3005 :         4,1,10,3,1,6,1,2,51,5,40,15,24,43,22928,11,1,13,154,70,3,1,1,7,4,10,1,2,1,1,2,1,2,1,2,2,1,1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,
; 3006 :         3,2,1,1,1,1,2,1,1,
; 3007 :     };
; 3008 :     static ImWchar base_ranges[] = // not zero-terminated
; 3009 :     {
; 3010 :         0x0020, 0x00FF, // Basic Latin + Latin Supplement
; 3011 :         0x3000, 0x30FF, // CJK Symbols and Punctuations, Hiragana, Katakana
; 3012 :         0x31F0, 0x31FF, // Katakana Phonetic Extensions
; 3013 :         0xFF00, 0xFFEF, // Half-width characters
; 3014 :         0xFFFD, 0xFFFD  // Invalid
; 3015 :     };
; 3016 :     static ImWchar full_ranges[IM_ARRAYSIZE(base_ranges) + IM_ARRAYSIZE(accumulative_offsets_from_0x4E00)*2 + 1] = { 0 };
; 3017 :     if (!full_ranges[0])

  0002a	b8 02 00 00 00	 mov	 eax, 2
  0002f	48 6b c0 00	 imul	 rax, rax, 0
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?full_ranges@?1??GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ@4PAGA
  0003a	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  0003e	85 c0		 test	 eax, eax
  00040	75 3e		 jne	 SHORT $LN2@GetGlyphRa

; 3018 :     {
; 3019 :         memcpy(full_ranges, base_ranges, sizeof(base_ranges));

  00042	41 b8 14 00 00
	00		 mov	 r8d, 20
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?base_ranges@?1??GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ@4PAGA
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?full_ranges@?1??GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ@4PAGA
  00056	e8 00 00 00 00	 call	 memcpy

; 3020 :         UnpackAccumulativeOffsetsIntoRanges(0x4E00, accumulative_offsets_from_0x4E00, IM_ARRAYSIZE(accumulative_offsets_from_0x4E00), full_ranges + IM_ARRAYSIZE(base_ranges));

  0005b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?full_ranges@?1??GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ@4PAGA
  00062	48 83 c0 14	 add	 rax, 20
  00066	4c 8b c8	 mov	 r9, rax
  00069	41 b8 b7 0b 00
	00		 mov	 r8d, 2999		; 00000bb7H
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?accumulative_offsets_from_0x4E00@?1??GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ@4QBFB
  00076	b9 00 4e 00 00	 mov	 ecx, 19968		; 00004e00H
  0007b	e8 00 00 00 00	 call	 ?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z ; UnpackAccumulativeOffsetsIntoRanges
$LN2@GetGlyphRa:

; 3021 :     }
; 3022 :     return &full_ranges[0];

  00080	b8 02 00 00 00	 mov	 eax, 2
  00085	48 6b c0 00	 imul	 rax, rax, 0
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?full_ranges@?1??GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ@4PAGA
  00090	48 03 c8	 add	 rcx, rax
  00093	48 8b c1	 mov	 rax, rcx

; 3023 : }

  00096	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0009d	5f		 pop	 rdi
  0009e	5d		 pop	 rbp
  0009f	c3		 ret	 0
?GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ ENDP	; ImFontAtlas::GetGlyphRangesJapanese
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ
_TEXT	SEGMENT
this$ = 224
?GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ PROC	; ImFontAtlas::GetGlyphRangesKorean, COMDAT

; 2825 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 2826 :     static const ImWchar ranges[] =
; 2827 :     {
; 2828 :         0x0020, 0x00FF, // Basic Latin + Latin Supplement
; 2829 :         0x3131, 0x3163, // Korean alphabets
; 2830 :         0xAC00, 0xD7A3, // Korean characters
; 2831 :         0xFFFD, 0xFFFD, // Invalid
; 2832 :         0,
; 2833 :     };
; 2834 :     return &ranges[0];

  00028	b8 02 00 00 00	 mov	 eax, 2
  0002d	48 6b c0 00	 imul	 rax, rax, 0
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?ranges@?1??GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ@4QBGB
  00038	48 03 c8	 add	 rcx, rax
  0003b	48 8b c1	 mov	 rax, rcx

; 2835 : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ ENDP	; ImFontAtlas::GetGlyphRangesKorean
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?GetGlyphRangesGreek@ImFontAtlas@@QEAAPEBGXZ
_TEXT	SEGMENT
this$ = 224
?GetGlyphRangesGreek@ImFontAtlas@@QEAAPEBGXZ PROC	; ImFontAtlas::GetGlyphRangesGreek, COMDAT

; 2814 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 2815 :     static const ImWchar ranges[] =
; 2816 :     {
; 2817 :         0x0020, 0x00FF, // Basic Latin + Latin Supplement
; 2818 :         0x0370, 0x03FF, // Greek and Coptic
; 2819 :         0,
; 2820 :     };
; 2821 :     return &ranges[0];

  00028	b8 02 00 00 00	 mov	 eax, 2
  0002d	48 6b c0 00	 imul	 rax, rax, 0
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?ranges@?1??GetGlyphRangesGreek@ImFontAtlas@@QEAAPEBGXZ@4QBGB
  00038	48 03 c8	 add	 rcx, rax
  0003b	48 8b c1	 mov	 rax, rcx

; 2822 : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?GetGlyphRangesGreek@ImFontAtlas@@QEAAPEBGXZ ENDP	; ImFontAtlas::GetGlyphRangesGreek
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ
_TEXT	SEGMENT
this$ = 224
?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ PROC	; ImFontAtlas::GetGlyphRangesDefault, COMDAT

; 2804 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 2805 :     static const ImWchar ranges[] =
; 2806 :     {
; 2807 :         0x0020, 0x00FF, // Basic Latin + Latin Supplement
; 2808 :         0,
; 2809 :     };
; 2810 :     return &ranges[0];

  00028	b8 02 00 00 00	 mov	 eax, 2
  0002d	48 6b c0 00	 imul	 rax, rax, 0
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?ranges@?1??GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ@4QBGB
  00038	48 03 c8	 add	 rcx, rax
  0003b	48 8b c1	 mov	 rax, rcx

; 2811 : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ ENDP	; ImFontAtlas::GetGlyphRangesDefault
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z
_TEXT	SEGMENT
pixels$4 = 8
src$5 = 40
dst$6 = 72
n$7 = 100
__$ArrayPad$ = 312
this$ = 352
out_pixels$ = 360
out_width$ = 368
out_height$ = 376
out_bytes_per_pixel$ = 384
?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z PROC ; ImFontAtlas::GetTexDataAsRGBA32, COMDAT

; 2043 : {

$LN11:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 5e 00 00 00	 mov	 ecx, 94			; 0000005eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2044 :     // Convert to RGBA32 format on demand
; 2045 :     // Although it is likely to be the most commonly used format, our font rendering is 1 channel / 8 bpp
; 2046 :     if (!TexPixelsRGBA32)

  0004a	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00051	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00056	0f 85 da 00 00
	00		 jne	 $LN5@GetTexData

; 2047 :     {
; 2048 :         unsigned char* pixels = NULL;

  0005c	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR pixels$4[rbp], 0

; 2049 :         GetTexDataAsAlpha8(&pixels, NULL, NULL);

  00064	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0006d	45 33 c9	 xor	 r9d, r9d
  00070	45 33 c0	 xor	 r8d, r8d
  00073	48 8d 55 08	 lea	 rdx, QWORD PTR pixels$4[rbp]
  00077	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007e	e8 00 00 00 00	 call	 ?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z ; ImFontAtlas::GetTexDataAsAlpha8

; 2050 :         if (pixels)

  00083	48 83 7d 08 00	 cmp	 QWORD PTR pixels$4[rbp], 0
  00088	0f 84 a8 00 00
	00		 je	 $LN6@GetTexData

; 2051 :         {
; 2052 :             TexPixelsRGBA32 = (unsigned int*)IM_ALLOC((size_t)TexWidth * (size_t)TexHeight * 4);

  0008e	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00095	48 63 40 40	 movsxd	 rax, DWORD PTR [rax+64]
  00099	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a0	48 63 49 44	 movsxd	 rcx, DWORD PTR [rcx+68]
  000a4	48 0f af c1	 imul	 rax, rcx
  000a8	48 c1 e0 02	 shl	 rax, 2
  000ac	48 8b c8	 mov	 rcx, rax
  000af	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  000b4	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000bb	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 2053 :             const unsigned char* src = pixels;

  000bf	48 8b 45 08	 mov	 rax, QWORD PTR pixels$4[rbp]
  000c3	48 89 45 28	 mov	 QWORD PTR src$5[rbp], rax

; 2054 :             unsigned int* dst = TexPixelsRGBA32;

  000c7	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ce	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  000d2	48 89 45 48	 mov	 QWORD PTR dst$6[rbp], rax

; 2055 :             for (int n = TexWidth * TexHeight; n > 0; n--)

  000d6	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000dd	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e4	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  000e7	0f af 41 44	 imul	 eax, DWORD PTR [rcx+68]
  000eb	89 45 64	 mov	 DWORD PTR n$7[rbp], eax
  000ee	eb 08		 jmp	 SHORT $LN4@GetTexData
$LN2@GetTexData:
  000f0	8b 45 64	 mov	 eax, DWORD PTR n$7[rbp]
  000f3	ff c8		 dec	 eax
  000f5	89 45 64	 mov	 DWORD PTR n$7[rbp], eax
$LN4@GetTexData:
  000f8	83 7d 64 00	 cmp	 DWORD PTR n$7[rbp], 0
  000fc	7e 38		 jle	 SHORT $LN3@GetTexData

; 2056 :                 *dst++ = IM_COL32(255, 255, 255, (unsigned int)(*src++));

  000fe	48 8b 45 28	 mov	 rax, QWORD PTR src$5[rbp]
  00102	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00105	c1 e0 18	 shl	 eax, 24
  00108	0d 00 00 ff 00	 or	 eax, 16711680		; 00ff0000H
  0010d	0d 00 ff 00 00	 or	 eax, 65280		; 0000ff00H
  00112	0d ff 00 00 00	 or	 eax, 255		; 000000ffH
  00117	48 8b 4d 48	 mov	 rcx, QWORD PTR dst$6[rbp]
  0011b	89 01		 mov	 DWORD PTR [rcx], eax
  0011d	48 8b 45 48	 mov	 rax, QWORD PTR dst$6[rbp]
  00121	48 83 c0 04	 add	 rax, 4
  00125	48 89 45 48	 mov	 QWORD PTR dst$6[rbp], rax
  00129	48 8b 45 28	 mov	 rax, QWORD PTR src$5[rbp]
  0012d	48 ff c0	 inc	 rax
  00130	48 89 45 28	 mov	 QWORD PTR src$5[rbp], rax
  00134	eb ba		 jmp	 SHORT $LN2@GetTexData
$LN3@GetTexData:
$LN6@GetTexData:
$LN5@GetTexData:

; 2057 :         }
; 2058 :     }
; 2059 : 
; 2060 :     *out_pixels = (unsigned char*)TexPixelsRGBA32;

  00136	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR out_pixels$[rbp]
  0013d	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00144	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00148	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2061 :     if (out_width) *out_width = TexWidth;

  0014b	48 83 bd 70 01
	00 00 00	 cmp	 QWORD PTR out_width$[rbp], 0
  00153	74 13		 je	 SHORT $LN7@GetTexData
  00155	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR out_width$[rbp]
  0015c	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00163	8b 49 40	 mov	 ecx, DWORD PTR [rcx+64]
  00166	89 08		 mov	 DWORD PTR [rax], ecx
$LN7@GetTexData:

; 2062 :     if (out_height) *out_height = TexHeight;

  00168	48 83 bd 78 01
	00 00 00	 cmp	 QWORD PTR out_height$[rbp], 0
  00170	74 13		 je	 SHORT $LN8@GetTexData
  00172	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR out_height$[rbp]
  00179	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00180	8b 49 44	 mov	 ecx, DWORD PTR [rcx+68]
  00183	89 08		 mov	 DWORD PTR [rax], ecx
$LN8@GetTexData:

; 2063 :     if (out_bytes_per_pixel) *out_bytes_per_pixel = 4;

  00185	48 83 bd 80 01
	00 00 00	 cmp	 QWORD PTR out_bytes_per_pixel$[rbp], 0
  0018d	74 0d		 je	 SHORT $LN9@GetTexData
  0018f	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR out_bytes_per_pixel$[rbp]
  00196	c7 00 04 00 00
	00		 mov	 DWORD PTR [rax], 4
$LN9@GetTexData:

; 2064 : }

  0019c	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  001a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z$rtcFrameData
  001a7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001ac	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001b3	48 33 cd	 xor	 rcx, rbp
  001b6	e8 00 00 00 00	 call	 __security_check_cookie
  001bb	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  001c2	5f		 pop	 rdi
  001c3	5d		 pop	 rbp
  001c4	c3		 ret	 0
?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z ENDP ; ImFontAtlas::GetTexDataAsRGBA32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z
_TEXT	SEGMENT
this$ = 224
out_pixels$ = 232
out_width$ = 240
out_height$ = 248
out_bytes_per_pixel$ = 256
?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z PROC ; ImFontAtlas::GetTexDataAsAlpha8, COMDAT

; 2031 : {

$LN7:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2032 :     // Build atlas on demand
; 2033 :     if (TexPixelsAlpha8 == NULL)

  00039	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  00045	75 0c		 jne	 SHORT $LN2@GetTexData

; 2034 :         Build();

  00047	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	e8 00 00 00 00	 call	 ?Build@ImFontAtlas@@QEAA_NXZ ; ImFontAtlas::Build
$LN2@GetTexData:

; 2035 : 
; 2036 :     *out_pixels = TexPixelsAlpha8;

  00053	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR out_pixels$[rbp]
  0005a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00061	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00065	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2037 :     if (out_width) *out_width = TexWidth;

  00068	48 83 bd f0 00
	00 00 00	 cmp	 QWORD PTR out_width$[rbp], 0
  00070	74 13		 je	 SHORT $LN3@GetTexData
  00072	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR out_width$[rbp]
  00079	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00080	8b 49 40	 mov	 ecx, DWORD PTR [rcx+64]
  00083	89 08		 mov	 DWORD PTR [rax], ecx
$LN3@GetTexData:

; 2038 :     if (out_height) *out_height = TexHeight;

  00085	48 83 bd f8 00
	00 00 00	 cmp	 QWORD PTR out_height$[rbp], 0
  0008d	74 13		 je	 SHORT $LN4@GetTexData
  0008f	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR out_height$[rbp]
  00096	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	8b 49 44	 mov	 ecx, DWORD PTR [rcx+68]
  000a0	89 08		 mov	 DWORD PTR [rax], ecx
$LN4@GetTexData:

; 2039 :     if (out_bytes_per_pixel) *out_bytes_per_pixel = 1;

  000a2	48 83 bd 00 01
	00 00 00	 cmp	 QWORD PTR out_bytes_per_pixel$[rbp], 0
  000aa	74 0d		 je	 SHORT $LN5@GetTexData
  000ac	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR out_bytes_per_pixel$[rbp]
  000b3	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1
$LN5@GetTexData:

; 2040 : }

  000b9	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000c0	5f		 pop	 rdi
  000c1	5d		 pop	 rbp
  000c2	c3		 ret	 0
?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z ENDP ; ImFontAtlas::GetTexDataAsAlpha8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?Build@ImFontAtlas@@QEAA_NXZ
_TEXT	SEGMENT
builder_io$ = 8
this$ = 256
?Build@ImFontAtlas@@QEAA_NXZ PROC			; ImFontAtlas::Build, COMDAT

; 2253 : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 2254 :     IM_ASSERT(!Locked && "Cannot modify a locked ImFontAtlas between NewFrame() and EndFrame/Render()!");

  0002a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  00035	85 c0		 test	 eax, eax
  00037	75 0c		 jne	 SHORT $LN5@Build
  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAtl@
  00040	48 85 c0	 test	 rax, rax
  00043	75 21		 jne	 SHORT $LN6@Build
$LN5@Build:
  00045	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??Build@ImFontAtlas@@QEAA_NXZ@4JA
  0004b	ff c0		 inc	 eax
  0004d	44 8b c0	 mov	 r8d, eax
  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAm?$AAo?$AAd?$AAi?$AAf?$AAy?$AA?5?$AAa?$AA?5?$AAl?$AAo?$AAc?$AAk@
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00064	33 c0		 xor	 eax, eax
$LN6@Build:

; 2255 : 
; 2256 :     // Default font is none are specified
; 2257 :     if (ConfigData.Size == 0)

  00066	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006d	83 78 78 00	 cmp	 DWORD PTR [rax+120], 0
  00071	75 0e		 jne	 SHORT $LN2@Build

; 2258 :         AddFontDefault();

  00073	33 d2		 xor	 edx, edx
  00075	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007c	e8 00 00 00 00	 call	 ?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z ; ImFontAtlas::AddFontDefault
$LN2@Build:

; 2259 : 
; 2260 :     // Select builder
; 2261 :     // - Note that we do not reassign to atlas->FontBuilderIO, since it is likely to point to static data which
; 2262 :     //   may mess with some hot-reloading schemes. If you need to assign to this (for dynamic selection) AND are
; 2263 :     //   using a hot-reloading scheme that messes up static data, store your own instance of ImFontBuilderIO somewhere
; 2264 :     //   and point to it instead of pointing directly to return value of the GetBuilderXXX functions.
; 2265 :     const ImFontBuilderIO* builder_io = FontBuilderIO;

  00081	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00088	48 8b 80 88 04
	00 00		 mov	 rax, QWORD PTR [rax+1160]
  0008f	48 89 45 08	 mov	 QWORD PTR builder_io$[rbp], rax

; 2266 :     if (builder_io == NULL)

  00093	48 83 7d 08 00	 cmp	 QWORD PTR builder_io$[rbp], 0
  00098	75 09		 jne	 SHORT $LN3@Build

; 2267 :     {
; 2268 : #ifdef IMGUI_ENABLE_FREETYPE
; 2269 :         builder_io = ImGuiFreeType::GetBuilderForFreeType();
; 2270 : #elif defined(IMGUI_ENABLE_STB_TRUETYPE)
; 2271 :         builder_io = ImFontAtlasGetBuilderForStbTruetype();

  0009a	e8 00 00 00 00	 call	 ?ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ ; ImFontAtlasGetBuilderForStbTruetype
  0009f	48 89 45 08	 mov	 QWORD PTR builder_io$[rbp], rax
$LN3@Build:

; 2272 : #else
; 2273 :         IM_ASSERT(0); // Invalid Build function
; 2274 : #endif
; 2275 :     }
; 2276 : 
; 2277 :     // Build
; 2278 :     return builder_io->FontBuilder_Build(this);

  000a3	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000aa	48 8b 45 08	 mov	 rax, QWORD PTR builder_io$[rbp]
  000ae	ff 10		 call	 QWORD PTR [rax]

; 2279 : }

  000b0	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000b7	5f		 pop	 rdi
  000b8	5d		 pop	 rbp
  000b9	c3		 ret	 0
?Build@ImFontAtlas@@QEAA_NXZ ENDP			; ImFontAtlas::Build
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?Clear@ImFontAtlas@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?Clear@ImFontAtlas@@QEAAXXZ PROC			; ImFontAtlas::Clear, COMDAT

; 2024 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2025 :     ClearInputData();

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?ClearInputData@ImFontAtlas@@QEAAXXZ ; ImFontAtlas::ClearInputData

; 2026 :     ClearTexData();

  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ?ClearTexData@ImFontAtlas@@QEAAXXZ ; ImFontAtlas::ClearTexData

; 2027 :     ClearFonts();

  00042	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?ClearFonts@ImFontAtlas@@QEAAXXZ ; ImFontAtlas::ClearFonts

; 2028 : }

  0004e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00055	5f		 pop	 rdi
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
?Clear@ImFontAtlas@@QEAAXXZ ENDP			; ImFontAtlas::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ClearFonts@ImFontAtlas@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?ClearFonts@ImFontAtlas@@QEAAXXZ PROC			; ImFontAtlas::ClearFonts, COMDAT

; 2017 : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2018 :     IM_ASSERT(!Locked && "Cannot modify a locked ImFontAtlas between NewFrame() and EndFrame/Render()!");

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  00035	85 c0		 test	 eax, eax
  00037	75 0c		 jne	 SHORT $LN3@ClearFonts
  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAtl@
  00040	48 85 c0	 test	 rax, rax
  00043	75 21		 jne	 SHORT $LN4@ClearFonts
$LN3@ClearFonts:
  00045	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ClearFonts@ImFontAtlas@@QEAAXXZ@4JA
  0004b	ff c0		 inc	 eax
  0004d	44 8b c0	 mov	 r8d, eax
  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAm?$AAo?$AAd?$AAi?$AAf?$AAy?$AA?5?$AAa?$AA?5?$AAl?$AAo?$AAc?$AAk@
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00064	33 c0		 xor	 eax, eax
$LN4@ClearFonts:

; 2019 :     Fonts.clear_delete();

  00066	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006d	48 83 c0 58	 add	 rax, 88			; 00000058H
  00071	48 8b c8	 mov	 rcx, rax
  00074	e8 00 00 00 00	 call	 ?clear_delete@?$ImVector@PEAUImFont@@@@QEAAXXZ ; ImVector<ImFont * __ptr64>::clear_delete

; 2020 :     TexReady = false;

  00079	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00080	c6 40 28 00	 mov	 BYTE PTR [rax+40], 0

; 2021 : }

  00084	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0008b	5f		 pop	 rdi
  0008c	5d		 pop	 rbp
  0008d	c3		 ret	 0
?ClearFonts@ImFontAtlas@@QEAAXXZ ENDP			; ImFontAtlas::ClearFonts
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ClearTexData@ImFontAtlas@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?ClearTexData@ImFontAtlas@@QEAAXXZ PROC			; ImFontAtlas::ClearTexData, COMDAT

; 2004 : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2005 :     IM_ASSERT(!Locked && "Cannot modify a locked ImFontAtlas between NewFrame() and EndFrame/Render()!");

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  00035	85 c0		 test	 eax, eax
  00037	75 0c		 jne	 SHORT $LN5@ClearTexDa
  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAtl@
  00040	48 85 c0	 test	 rax, rax
  00043	75 21		 jne	 SHORT $LN6@ClearTexDa
$LN5@ClearTexDa:
  00045	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ClearTexData@ImFontAtlas@@QEAAXXZ@4JA
  0004b	ff c0		 inc	 eax
  0004d	44 8b c0	 mov	 r8d, eax
  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAm?$AAo?$AAd?$AAi?$AAf?$AAy?$AA?5?$AAa?$AA?5?$AAl?$AAo?$AAc?$AAk@
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00064	33 c0		 xor	 eax, eax
$LN6@ClearTexDa:

; 2006 :     if (TexPixelsAlpha8)

  00066	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006d	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  00072	74 10		 je	 SHORT $LN2@ClearTexDa

; 2007 :         IM_FREE(TexPixelsAlpha8);

  00074	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007b	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0007f	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN2@ClearTexDa:

; 2008 :     if (TexPixelsRGBA32)

  00084	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008b	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00090	74 10		 je	 SHORT $LN3@ClearTexDa

; 2009 :         IM_FREE(TexPixelsRGBA32);

  00092	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00099	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0009d	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@ClearTexDa:

; 2010 :     TexPixelsAlpha8 = NULL;

  000a2	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a9	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0

; 2011 :     TexPixelsRGBA32 = NULL;

  000b1	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b8	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 2012 :     TexPixelsUseColors = false;

  000c0	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c7	c6 40 29 00	 mov	 BYTE PTR [rax+41], 0

; 2013 :     // Important: we leave TexReady untouched
; 2014 : }

  000cb	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000d2	5f		 pop	 rdi
  000d3	5d		 pop	 rbp
  000d4	c3		 ret	 0
?ClearTexData@ImFontAtlas@@QEAAXXZ ENDP			; ImFontAtlas::ClearTexData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ClearInputData@ImFontAtlas@@QEAAXXZ
_TEXT	SEGMENT
i$1 = 4
i$2 = 36
this$ = 288
?ClearInputData@ImFontAtlas@@QEAAXXZ PROC		; ImFontAtlas::ClearInputData, COMDAT

; 1981 : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 1982 :     IM_ASSERT(!Locked && "Cannot modify a locked ImFontAtlas between NewFrame() and EndFrame/Render()!");

  0002a	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  00035	85 c0		 test	 eax, eax
  00037	75 0c		 jne	 SHORT $LN11@ClearInput
  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAtl@
  00040	48 85 c0	 test	 rax, rax
  00043	75 21		 jne	 SHORT $LN12@ClearInput
$LN11@ClearInput:
  00045	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ClearInputData@ImFontAtlas@@QEAAXXZ@4JA
  0004b	ff c0		 inc	 eax
  0004d	44 8b c0	 mov	 r8d, eax
  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAm?$AAo?$AAd?$AAi?$AAf?$AAy?$AA?5?$AAa?$AA?5?$AAl?$AAo?$AAc?$AAk@
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00064	33 c0		 xor	 eax, eax
$LN12@ClearInput:

; 1983 :     for (int i = 0; i < ConfigData.Size; i++)

  00066	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$1[rbp], 0
  0006d	eb 08		 jmp	 SHORT $LN4@ClearInput
$LN2@ClearInput:
  0006f	8b 45 04	 mov	 eax, DWORD PTR i$1[rbp]
  00072	ff c0		 inc	 eax
  00074	89 45 04	 mov	 DWORD PTR i$1[rbp], eax
$LN4@ClearInput:
  00077	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007e	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00081	39 45 04	 cmp	 DWORD PTR i$1[rbp], eax
  00084	7d 7a		 jge	 SHORT $LN3@ClearInput

; 1984 :         if (ConfigData[i].FontData && ConfigData[i].FontDataOwnedByAtlas)

  00086	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008d	48 83 c0 78	 add	 rax, 120		; 00000078H
  00091	8b 55 04	 mov	 edx, DWORD PTR i$1[rbp]
  00094	48 8b c8	 mov	 rcx, rax
  00097	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ; ImVector<ImFontConfig>::operator[]
  0009c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000a0	74 59		 je	 SHORT $LN8@ClearInput
  000a2	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a9	48 83 c0 78	 add	 rax, 120		; 00000078H
  000ad	8b 55 04	 mov	 edx, DWORD PTR i$1[rbp]
  000b0	48 8b c8	 mov	 rcx, rax
  000b3	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ; ImVector<ImFontConfig>::operator[]
  000b8	0f b6 40 0c	 movzx	 eax, BYTE PTR [rax+12]
  000bc	85 c0		 test	 eax, eax
  000be	74 3b		 je	 SHORT $LN8@ClearInput

; 1985 :         {
; 1986 :             IM_FREE(ConfigData[i].FontData);

  000c0	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c7	48 83 c0 78	 add	 rax, 120		; 00000078H
  000cb	8b 55 04	 mov	 edx, DWORD PTR i$1[rbp]
  000ce	48 8b c8	 mov	 rcx, rax
  000d1	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ; ImVector<ImFontConfig>::operator[]
  000d6	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000d9	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree

; 1987 :             ConfigData[i].FontData = NULL;

  000de	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e5	48 83 c0 78	 add	 rax, 120		; 00000078H
  000e9	8b 55 04	 mov	 edx, DWORD PTR i$1[rbp]
  000ec	48 8b c8	 mov	 rcx, rax
  000ef	e8 00 00 00 00	 call	 ??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ; ImVector<ImFontConfig>::operator[]
  000f4	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN8@ClearInput:

; 1988 :         }

  000fb	e9 6f ff ff ff	 jmp	 $LN2@ClearInput
$LN3@ClearInput:

; 1989 : 
; 1990 :     // When clearing this we lose access to the font name and other information used to build the font.
; 1991 :     for (int i = 0; i < Fonts.Size; i++)

  00100	c7 45 24 00 00
	00 00		 mov	 DWORD PTR i$2[rbp], 0
  00107	eb 08		 jmp	 SHORT $LN7@ClearInput
$LN5@ClearInput:
  00109	8b 45 24	 mov	 eax, DWORD PTR i$2[rbp]
  0010c	ff c0		 inc	 eax
  0010e	89 45 24	 mov	 DWORD PTR i$2[rbp], eax
$LN7@ClearInput:
  00111	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00118	8b 40 58	 mov	 eax, DWORD PTR [rax+88]
  0011b	39 45 24	 cmp	 DWORD PTR i$2[rbp], eax
  0011e	0f 8d b1 00 00
	00		 jge	 $LN6@ClearInput

; 1992 :         if (Fonts[i]->ConfigData >= ConfigData.Data && Fonts[i]->ConfigData < ConfigData.Data + ConfigData.Size)

  00124	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0012b	48 83 c0 58	 add	 rax, 88			; 00000058H
  0012f	8b 55 24	 mov	 edx, DWORD PTR i$2[rbp]
  00132	48 8b c8	 mov	 rcx, rax
  00135	e8 00 00 00 00	 call	 ??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ; ImVector<ImFont * __ptr64>::operator[]
  0013a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0013d	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00144	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  0014b	48 39 48 48	 cmp	 QWORD PTR [rax+72], rcx
  0014f	72 7f		 jb	 SHORT $LN9@ClearInput
  00151	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00158	48 83 c0 58	 add	 rax, 88			; 00000058H
  0015c	8b 55 24	 mov	 edx, DWORD PTR i$2[rbp]
  0015f	48 8b c8	 mov	 rcx, rax
  00162	e8 00 00 00 00	 call	 ??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ; ImVector<ImFont * __ptr64>::operator[]
  00167	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0016a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00171	48 63 49 78	 movsxd	 rcx, DWORD PTR [rcx+120]
  00175	48 69 c9 88 00
	00 00		 imul	 rcx, rcx, 136		; 00000088H
  0017c	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00183	48 03 8a 80 00
	00 00		 add	 rcx, QWORD PTR [rdx+128]
  0018a	48 39 48 48	 cmp	 QWORD PTR [rax+72], rcx
  0018e	73 40		 jae	 SHORT $LN9@ClearInput

; 1993 :         {
; 1994 :             Fonts[i]->ConfigData = NULL;

  00190	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00197	48 83 c0 58	 add	 rax, 88			; 00000058H
  0019b	8b 55 24	 mov	 edx, DWORD PTR i$2[rbp]
  0019e	48 8b c8	 mov	 rcx, rax
  001a1	e8 00 00 00 00	 call	 ??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ; ImVector<ImFont * __ptr64>::operator[]
  001a6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001a9	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0

; 1995 :             Fonts[i]->ConfigDataCount = 0;

  001b1	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001b8	48 83 c0 58	 add	 rax, 88			; 00000058H
  001bc	8b 55 24	 mov	 edx, DWORD PTR i$2[rbp]
  001bf	48 8b c8	 mov	 rcx, rax
  001c2	e8 00 00 00 00	 call	 ??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ; ImVector<ImFont * __ptr64>::operator[]
  001c7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ca	33 c9		 xor	 ecx, ecx
  001cc	66 89 48 50	 mov	 WORD PTR [rax+80], cx
$LN9@ClearInput:

; 1996 :         }

  001d0	e9 34 ff ff ff	 jmp	 $LN5@ClearInput
$LN6@ClearInput:

; 1997 :     ConfigData.clear();

  001d5	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001dc	48 83 c0 78	 add	 rax, 120		; 00000078H
  001e0	48 8b c8	 mov	 rcx, rax
  001e3	e8 00 00 00 00	 call	 ?clear@?$ImVector@UImFontConfig@@@@QEAAXXZ ; ImVector<ImFontConfig>::clear

; 1998 :     CustomRects.clear();

  001e8	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001ef	48 83 c0 68	 add	 rax, 104		; 00000068H
  001f3	48 8b c8	 mov	 rcx, rax
  001f6	e8 00 00 00 00	 call	 ?clear@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXXZ ; ImVector<ImFontAtlasCustomRect>::clear

; 1999 :     PackIdMouseCursors = PackIdLines = -1;

  001fb	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00202	c7 80 98 04 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+1176], -1
  0020c	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00213	c7 80 94 04 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+1172], -1

; 2000 :     // Important: we leave TexReady untouched
; 2001 : }

  0021d	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00224	5f		 pop	 rdi
  00225	5d		 pop	 rbp
  00226	c3		 ret	 0
?ClearInputData@ImFontAtlas@@QEAAXXZ ENDP		; ImFontAtlas::ClearInputData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z
_TEXT	SEGMENT
compressed_ttf_size$ = 4
compressed_ttf$ = 40
font$ = 72
this$ = 320
compressed_ttf_data_base85$ = 328
size_pixels$ = 336
font_cfg$ = 344
glyph_ranges$ = 352
?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z PROC ; ImFontAtlas::AddFontFromMemoryCompressedBase85TTF, COMDAT

; 2184 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]

; 2185 :     int compressed_ttf_size = (((int)strlen(compressed_ttf_data_base85) + 4) / 5) * 4;

  0003a	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR compressed_ttf_data_base85$[rbp]
  00041	e8 00 00 00 00	 call	 strlen
  00046	83 c0 04	 add	 eax, 4
  00049	99		 cdq
  0004a	b9 05 00 00 00	 mov	 ecx, 5
  0004f	f7 f9		 idiv	 ecx
  00051	c1 e0 02	 shl	 eax, 2
  00054	89 45 04	 mov	 DWORD PTR compressed_ttf_size$[rbp], eax

; 2186 :     void* compressed_ttf = IM_ALLOC((size_t)compressed_ttf_size);

  00057	48 63 45 04	 movsxd	 rax, DWORD PTR compressed_ttf_size$[rbp]
  0005b	48 8b c8	 mov	 rcx, rax
  0005e	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00063	48 89 45 28	 mov	 QWORD PTR compressed_ttf$[rbp], rax

; 2187 :     Decode85((const unsigned char*)compressed_ttf_data_base85, (unsigned char*)compressed_ttf);

  00067	48 8b 55 28	 mov	 rdx, QWORD PTR compressed_ttf$[rbp]
  0006b	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR compressed_ttf_data_base85$[rbp]
  00072	e8 00 00 00 00	 call	 ?Decode85@@YAXPEBEPEAE@Z ; Decode85

; 2188 :     ImFont* font = AddFontFromMemoryCompressedTTF(compressed_ttf, compressed_ttf_size, size_pixels, font_cfg, glyph_ranges);

  00077	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR glyph_ranges$[rbp]
  0007e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00083	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR font_cfg$[rbp]
  0008a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0008f	f3 0f 10 9d 50
	01 00 00	 movss	 xmm3, DWORD PTR size_pixels$[rbp]
  00097	44 8b 45 04	 mov	 r8d, DWORD PTR compressed_ttf_size$[rbp]
  0009b	48 8b 55 28	 mov	 rdx, QWORD PTR compressed_ttf$[rbp]
  0009f	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a6	e8 00 00 00 00	 call	 ?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z ; ImFontAtlas::AddFontFromMemoryCompressedTTF
  000ab	48 89 45 48	 mov	 QWORD PTR font$[rbp], rax

; 2189 :     IM_FREE(compressed_ttf);

  000af	48 8b 4d 28	 mov	 rcx, QWORD PTR compressed_ttf$[rbp]
  000b3	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree

; 2190 :     return font;

  000b8	48 8b 45 48	 mov	 rax, QWORD PTR font$[rbp]

; 2191 : }

  000bc	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000c3	5f		 pop	 rdi
  000c4	5d		 pop	 rbp
  000c5	c3		 ret	 0
?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z ENDP ; ImFontAtlas::AddFontFromMemoryCompressedBase85TTF
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z
_TEXT	SEGMENT
buf_decompressed_size$ = 4
buf_decompressed_data$ = 40
font_cfg$ = 80
$T4 = 632
$T5 = 672
$T6 = 848
tv76 = 1000
__$ArrayPad$ = 1008
this$ = 1056
compressed_ttf_data$ = 1064
compressed_ttf_size$ = 1072
size_pixels$ = 1080
font_cfg_template$ = 1088
glyph_ranges$ = 1096
?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z PROC ; ImFontAtlas::AddFontFromMemoryCompressedTTF, COMDAT

; 2172 : {

$LN6:
  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	56		 push	 rsi
  00017	57		 push	 rdi
  00018	48 81 ec 30 04
	00 00		 sub	 rsp, 1072		; 00000430H
  0001f	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00024	48 8b fc	 mov	 rdi, rsp
  00027	b9 0c 01 00 00	 mov	 ecx, 268		; 0000010cH
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1112]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 f0 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2173 :     const unsigned int buf_decompressed_size = stb_decompress_length((const unsigned char*)compressed_ttf_data);

  0004c	48 8b 8d 28 04
	00 00		 mov	 rcx, QWORD PTR compressed_ttf_data$[rbp]
  00053	e8 00 00 00 00	 call	 ?stb_decompress_length@@YAIPEBE@Z ; stb_decompress_length
  00058	89 45 04	 mov	 DWORD PTR buf_decompressed_size$[rbp], eax

; 2174 :     unsigned char* buf_decompressed_data = (unsigned char*)IM_ALLOC(buf_decompressed_size);

  0005b	8b 45 04	 mov	 eax, DWORD PTR buf_decompressed_size$[rbp]
  0005e	8b c8		 mov	 ecx, eax
  00060	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00065	48 89 45 28	 mov	 QWORD PTR buf_decompressed_data$[rbp], rax

; 2175 :     stb_decompress(buf_decompressed_data, (const unsigned char*)compressed_ttf_data, (unsigned int)compressed_ttf_size);

  00069	44 8b 85 30 04
	00 00		 mov	 r8d, DWORD PTR compressed_ttf_size$[rbp]
  00070	48 8b 95 28 04
	00 00		 mov	 rdx, QWORD PTR compressed_ttf_data$[rbp]
  00077	48 8b 4d 28	 mov	 rcx, QWORD PTR buf_decompressed_data$[rbp]
  0007b	e8 00 00 00 00	 call	 ?stb_decompress@@YAIPEAEPEBEI@Z ; stb_decompress

; 2176 : 
; 2177 :     ImFontConfig font_cfg = font_cfg_template ? *font_cfg_template : ImFontConfig();

  00080	48 83 bd 40 04
	00 00 00	 cmp	 QWORD PTR font_cfg_template$[rbp], 0
  00088	74 28		 je	 SHORT $LN3@AddFontFro
  0008a	48 8d 85 a0 02
	00 00		 lea	 rax, QWORD PTR $T5[rbp]
  00091	48 8b f8	 mov	 rdi, rax
  00094	48 8b b5 40 04
	00 00		 mov	 rsi, QWORD PTR font_cfg_template$[rbp]
  0009b	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  000a0	f3 a4		 rep movsb
  000a2	48 8d 85 a0 02
	00 00		 lea	 rax, QWORD PTR $T5[rbp]
  000a9	48 89 85 e8 03
	00 00		 mov	 QWORD PTR tv76[rbp], rax
  000b0	eb 13		 jmp	 SHORT $LN4@AddFontFro
$LN3@AddFontFro:
  000b2	48 8d 8d 50 03
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  000b9	e8 00 00 00 00	 call	 ??0ImFontConfig@@QEAA@XZ ; ImFontConfig::ImFontConfig
  000be	48 89 85 e8 03
	00 00		 mov	 QWORD PTR tv76[rbp], rax
$LN4@AddFontFro:
  000c5	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR tv76[rbp]
  000cc	48 89 85 78 02
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  000d3	48 8d 45 50	 lea	 rax, QWORD PTR font_cfg$[rbp]
  000d7	48 8b f8	 mov	 rdi, rax
  000da	48 8b b5 78 02
	00 00		 mov	 rsi, QWORD PTR $T4[rbp]
  000e1	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  000e6	f3 a4		 rep movsb

; 2178 :     IM_ASSERT(font_cfg.FontData == NULL);

  000e8	48 83 7d 50 00	 cmp	 QWORD PTR font_cfg$[rbp], 0
  000ed	74 22		 je	 SHORT $LN5@AddFontFro
  000ef	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z@4JA
  000f5	83 c0 06	 add	 eax, 6
  000f8	44 8b c0	 mov	 r8d, eax
  000fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00102	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@ODFMNMML@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?4?$AAF?$AAo?$AAn?$AAt?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010f	33 c0		 xor	 eax, eax
$LN5@AddFontFro:

; 2179 :     font_cfg.FontDataOwnedByAtlas = true;

  00111	c6 45 5c 01	 mov	 BYTE PTR font_cfg$[rbp+12], 1

; 2180 :     return AddFontFromMemoryTTF(buf_decompressed_data, (int)buf_decompressed_size, size_pixels, &font_cfg, glyph_ranges);

  00115	48 8b 85 48 04
	00 00		 mov	 rax, QWORD PTR glyph_ranges$[rbp]
  0011c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00121	48 8d 45 50	 lea	 rax, QWORD PTR font_cfg$[rbp]
  00125	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0012a	f3 0f 10 9d 38
	04 00 00	 movss	 xmm3, DWORD PTR size_pixels$[rbp]
  00132	44 8b 45 04	 mov	 r8d, DWORD PTR buf_decompressed_size$[rbp]
  00136	48 8b 55 28	 mov	 rdx, QWORD PTR buf_decompressed_data$[rbp]
  0013a	48 8b 8d 20 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00141	e8 00 00 00 00	 call	 ?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z ; ImFontAtlas::AddFontFromMemoryTTF

; 2181 : }

  00146	48 8b f8	 mov	 rdi, rax
  00149	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  0014d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z$rtcFrameData
  00154	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00159	48 8b c7	 mov	 rax, rdi
  0015c	48 8b 8d f0 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00163	48 33 cd	 xor	 rcx, rbp
  00166	e8 00 00 00 00	 call	 __security_check_cookie
  0016b	48 8d a5 00 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1024]
  00172	5f		 pop	 rdi
  00173	5e		 pop	 rsi
  00174	5d		 pop	 rbp
  00175	c3		 ret	 0
?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z ENDP ; ImFontAtlas::AddFontFromMemoryCompressedTTF
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z
_TEXT	SEGMENT
font_cfg$ = 16
$T4 = 568
$T5 = 608
$T6 = 784
tv86 = 932
tv77 = 936
__$ArrayPad$ = 944
this$ = 992
ttf_data$ = 1000
ttf_size$ = 1008
size_pixels$ = 1016
font_cfg_template$ = 1024
glyph_ranges$ = 1032
?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z PROC ; ImFontAtlas::AddFontFromMemoryTTF, COMDAT

; 2159 : {

$LN11:
  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	56		 push	 rsi
  00017	57		 push	 rdi
  00018	48 81 ec e0 03
	00 00		 sub	 rsp, 992		; 000003e0H
  0001f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00024	48 8b fc	 mov	 rdi, rsp
  00027	b9 f8 00 00 00	 mov	 ecx, 248		; 000000f8H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 08
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1032]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 b0 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2160 :     IM_ASSERT(!Locked && "Cannot modify a locked ImFontAtlas between NewFrame() and EndFrame/Render()!");

  0004c	48 8b 85 e0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  00057	85 c0		 test	 eax, eax
  00059	75 0c		 jne	 SHORT $LN4@AddFontFro
  0005b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAtl@
  00062	48 85 c0	 test	 rax, rax
  00065	75 21		 jne	 SHORT $LN5@AddFontFro
$LN4@AddFontFro:
  00067	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z@4JA
  0006d	ff c0		 inc	 eax
  0006f	44 8b c0	 mov	 r8d, eax
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAm?$AAo?$AAd?$AAi?$AAf?$AAy?$AA?5?$AAa?$AA?5?$AAl?$AAo?$AAc?$AAk@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00086	33 c0		 xor	 eax, eax
$LN5@AddFontFro:

; 2161 :     ImFontConfig font_cfg = font_cfg_template ? *font_cfg_template : ImFontConfig();

  00088	48 83 bd 00 04
	00 00 00	 cmp	 QWORD PTR font_cfg_template$[rbp], 0
  00090	74 28		 je	 SHORT $LN6@AddFontFro
  00092	48 8d 85 60 02
	00 00		 lea	 rax, QWORD PTR $T5[rbp]
  00099	48 8b f8	 mov	 rdi, rax
  0009c	48 8b b5 00 04
	00 00		 mov	 rsi, QWORD PTR font_cfg_template$[rbp]
  000a3	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  000a8	f3 a4		 rep movsb
  000aa	48 8d 85 60 02
	00 00		 lea	 rax, QWORD PTR $T5[rbp]
  000b1	48 89 85 a8 03
	00 00		 mov	 QWORD PTR tv77[rbp], rax
  000b8	eb 13		 jmp	 SHORT $LN7@AddFontFro
$LN6@AddFontFro:
  000ba	48 8d 8d 10 03
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  000c1	e8 00 00 00 00	 call	 ??0ImFontConfig@@QEAA@XZ ; ImFontConfig::ImFontConfig
  000c6	48 89 85 a8 03
	00 00		 mov	 QWORD PTR tv77[rbp], rax
$LN7@AddFontFro:
  000cd	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR tv77[rbp]
  000d4	48 89 85 38 02
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  000db	48 8d 45 10	 lea	 rax, QWORD PTR font_cfg$[rbp]
  000df	48 8b f8	 mov	 rdi, rax
  000e2	48 8b b5 38 02
	00 00		 mov	 rsi, QWORD PTR $T4[rbp]
  000e9	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  000ee	f3 a4		 rep movsb

; 2162 :     IM_ASSERT(font_cfg.FontData == NULL);

  000f0	48 83 7d 10 00	 cmp	 QWORD PTR font_cfg$[rbp], 0
  000f5	74 22		 je	 SHORT $LN8@AddFontFro
  000f7	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z@4JA
  000fd	83 c0 03	 add	 eax, 3
  00100	44 8b c0	 mov	 r8d, eax
  00103	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0010a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@ODFMNMML@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?4?$AAF?$AAo?$AAn?$AAt?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00117	33 c0		 xor	 eax, eax
$LN8@AddFontFro:

; 2163 :     font_cfg.FontData = ttf_data;

  00119	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR ttf_data$[rbp]
  00120	48 89 45 10	 mov	 QWORD PTR font_cfg$[rbp], rax

; 2164 :     font_cfg.FontDataSize = ttf_size;

  00124	8b 85 f0 03 00
	00		 mov	 eax, DWORD PTR ttf_size$[rbp]
  0012a	89 45 18	 mov	 DWORD PTR font_cfg$[rbp+8], eax

; 2165 :     font_cfg.SizePixels = size_pixels > 0.0f ? size_pixels : font_cfg.SizePixels;

  0012d	f3 0f 10 85 f8
	03 00 00	 movss	 xmm0, DWORD PTR size_pixels$[rbp]
  00135	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0013c	76 12		 jbe	 SHORT $LN9@AddFontFro
  0013e	f3 0f 10 85 f8
	03 00 00	 movss	 xmm0, DWORD PTR size_pixels$[rbp]
  00146	f3 0f 11 85 a4
	03 00 00	 movss	 DWORD PTR tv86[rbp], xmm0
  0014e	eb 0d		 jmp	 SHORT $LN10@AddFontFro
$LN9@AddFontFro:
  00150	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR font_cfg$[rbp+20]
  00155	f3 0f 11 85 a4
	03 00 00	 movss	 DWORD PTR tv86[rbp], xmm0
$LN10@AddFontFro:
  0015d	f3 0f 10 85 a4
	03 00 00	 movss	 xmm0, DWORD PTR tv86[rbp]
  00165	f3 0f 11 45 24	 movss	 DWORD PTR font_cfg$[rbp+20], xmm0

; 2166 :     if (glyph_ranges)

  0016a	48 83 bd 08 04
	00 00 00	 cmp	 QWORD PTR glyph_ranges$[rbp], 0
  00172	74 0b		 je	 SHORT $LN2@AddFontFro

; 2167 :         font_cfg.GlyphRanges = glyph_ranges;

  00174	48 8b 85 08 04
	00 00		 mov	 rax, QWORD PTR glyph_ranges$[rbp]
  0017b	48 89 45 48	 mov	 QWORD PTR font_cfg$[rbp+56], rax
$LN2@AddFontFro:

; 2168 :     return AddFont(&font_cfg);

  0017f	48 8d 55 10	 lea	 rdx, QWORD PTR font_cfg$[rbp]
  00183	48 8b 8d e0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0018a	e8 00 00 00 00	 call	 ?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z ; ImFontAtlas::AddFont

; 2169 : }

  0018f	48 8b f8	 mov	 rdi, rax
  00192	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00196	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z$rtcFrameData
  0019d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001a2	48 8b c7	 mov	 rax, rdi
  001a5	48 8b 8d b0 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001ac	48 33 cd	 xor	 rcx, rbp
  001af	e8 00 00 00 00	 call	 __security_check_cookie
  001b4	48 8d a5 c0 03
	00 00		 lea	 rsp, QWORD PTR [rbp+960]
  001bb	5f		 pop	 rdi
  001bc	5e		 pop	 rsi
  001bd	5d		 pop	 rbp
  001be	c3		 ret	 0
?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z ENDP ; ImFontAtlas::AddFontFromMemoryTTF
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z
_TEXT	SEGMENT
data_size$ = 8
data$ = 40
font_cfg$ = 80
p$5 = 248
$T6 = 664
$T7 = 704
$T8 = 880
tv89 = 1032
__$ArrayPad$ = 1040
this$ = 1088
filename$ = 1096
size_pixels$ = 1104
font_cfg_template$ = 1112
glyph_ranges$ = 1120
?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z PROC ; ImFontAtlas::AddFontFromFileTTF, COMDAT

; 2137 : {

$LN13:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	56		 push	 rsi
  00017	57		 push	 rdi
  00018	48 81 ec 50 04
	00 00		 sub	 rsp, 1104		; 00000450H
  0001f	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00024	48 8b fc	 mov	 rdi, rsp
  00027	b9 14 01 00 00	 mov	 ecx, 276		; 00000114H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 78
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1144]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 10 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2138 :     IM_ASSERT(!Locked && "Cannot modify a locked ImFontAtlas between NewFrame() and EndFrame/Render()!");

  0004c	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  00057	85 c0		 test	 eax, eax
  00059	75 0c		 jne	 SHORT $LN8@AddFontFro
  0005b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAtl@
  00062	48 85 c0	 test	 rax, rax
  00065	75 21		 jne	 SHORT $LN9@AddFontFro
$LN8@AddFontFro:
  00067	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z@4JA
  0006d	ff c0		 inc	 eax
  0006f	44 8b c0	 mov	 r8d, eax
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAm?$AAo?$AAd?$AAi?$AAf?$AAy?$AA?5?$AAa?$AA?5?$AAl?$AAo?$AAc?$AAk@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00086	33 c0		 xor	 eax, eax
$LN9@AddFontFro:

; 2139 :     size_t data_size = 0;

  00088	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR data_size$[rbp], 0

; 2140 :     void* data = ImFileLoadToMemory(filename, "rb", &data_size, 0);

  00090	45 33 c9	 xor	 r9d, r9d
  00093	4c 8d 45 08	 lea	 r8, QWORD PTR data_size$[rbp]
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02JDPG@rb?$AA@
  0009e	48 8b 8d 48 04
	00 00		 mov	 rcx, QWORD PTR filename$[rbp]
  000a5	e8 00 00 00 00	 call	 ?ImFileLoadToMemory@@YAPEAXPEBD0PEA_KH@Z ; ImFileLoadToMemory
  000aa	48 89 45 28	 mov	 QWORD PTR data$[rbp], rax

; 2141 :     if (!data)

  000ae	48 83 7d 28 00	 cmp	 QWORD PTR data$[rbp], 0
  000b3	75 2f		 jne	 SHORT $LN5@AddFontFro

; 2142 :     {
; 2143 :         IM_ASSERT_USER_ERROR(0, "Could not load font file!");

  000b5	33 c0		 xor	 eax, eax
  000b7	85 c0		 test	 eax, eax
  000b9	75 22		 jne	 SHORT $LN10@AddFontFro
  000bb	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z@4JA
  000c1	83 c0 06	 add	 eax, 6
  000c4	44 8b c0	 mov	 r8d, eax
  000c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  000ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@KCPDJPKE@?$AA?$CI?$AA0?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAo?$AAn?$AAt?$AA?5?$AAf?$AAi?$AAl?$AAe@
  000d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000db	33 c0		 xor	 eax, eax
$LN10@AddFontFro:

; 2144 :         return NULL;

  000dd	33 c0		 xor	 eax, eax
  000df	e9 56 01 00 00	 jmp	 $LN1@AddFontFro
$LN5@AddFontFro:

; 2145 :     }
; 2146 :     ImFontConfig font_cfg = font_cfg_template ? *font_cfg_template : ImFontConfig();

  000e4	48 83 bd 58 04
	00 00 00	 cmp	 QWORD PTR font_cfg_template$[rbp], 0
  000ec	74 28		 je	 SHORT $LN11@AddFontFro
  000ee	48 8d 85 c0 02
	00 00		 lea	 rax, QWORD PTR $T7[rbp]
  000f5	48 8b f8	 mov	 rdi, rax
  000f8	48 8b b5 58 04
	00 00		 mov	 rsi, QWORD PTR font_cfg_template$[rbp]
  000ff	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  00104	f3 a4		 rep movsb
  00106	48 8d 85 c0 02
	00 00		 lea	 rax, QWORD PTR $T7[rbp]
  0010d	48 89 85 08 04
	00 00		 mov	 QWORD PTR tv89[rbp], rax
  00114	eb 13		 jmp	 SHORT $LN12@AddFontFro
$LN11@AddFontFro:
  00116	48 8d 8d 70 03
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0011d	e8 00 00 00 00	 call	 ??0ImFontConfig@@QEAA@XZ ; ImFontConfig::ImFontConfig
  00122	48 89 85 08 04
	00 00		 mov	 QWORD PTR tv89[rbp], rax
$LN12@AddFontFro:
  00129	48 8b 85 08 04
	00 00		 mov	 rax, QWORD PTR tv89[rbp]
  00130	48 89 85 98 02
	00 00		 mov	 QWORD PTR $T6[rbp], rax
  00137	48 8d 45 50	 lea	 rax, QWORD PTR font_cfg$[rbp]
  0013b	48 8b f8	 mov	 rdi, rax
  0013e	48 8b b5 98 02
	00 00		 mov	 rsi, QWORD PTR $T6[rbp]
  00145	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  0014a	f3 a4		 rep movsb

; 2147 :     if (font_cfg.Name[0] == '\0')

  0014c	b8 01 00 00 00	 mov	 eax, 1
  00151	48 6b c0 00	 imul	 rax, rax, 0
  00155	0f be 84 05 a6
	00 00 00	 movsx	 eax, BYTE PTR font_cfg$[rbp+rax+86]
  0015d	85 c0		 test	 eax, eax
  0015f	0f 85 a4 00 00
	00		 jne	 $LN6@AddFontFro

; 2148 :     {
; 2149 :         // Store a short copy of filename into into the font name for convenience
; 2150 :         const char* p;
; 2151 :         for (p = filename + strlen(filename); p > filename && p[-1] != '/' && p[-1] != '\\'; p--) {}

  00165	48 8b 8d 48 04
	00 00		 mov	 rcx, QWORD PTR filename$[rbp]
  0016c	e8 00 00 00 00	 call	 strlen
  00171	48 8b 8d 48 04
	00 00		 mov	 rcx, QWORD PTR filename$[rbp]
  00178	48 03 c8	 add	 rcx, rax
  0017b	48 8b c1	 mov	 rax, rcx
  0017e	48 89 85 f8 00
	00 00		 mov	 QWORD PTR p$5[rbp], rax
  00185	eb 11		 jmp	 SHORT $LN4@AddFontFro
$LN2@AddFontFro:
  00187	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR p$5[rbp]
  0018e	48 ff c8	 dec	 rax
  00191	48 89 85 f8 00
	00 00		 mov	 QWORD PTR p$5[rbp], rax
$LN4@AddFontFro:
  00198	48 8b 85 48 04
	00 00		 mov	 rax, QWORD PTR filename$[rbp]
  0019f	48 39 85 f8 00
	00 00		 cmp	 QWORD PTR p$5[rbp], rax
  001a6	76 34		 jbe	 SHORT $LN3@AddFontFro
  001a8	b8 01 00 00 00	 mov	 eax, 1
  001ad	48 6b c0 ff	 imul	 rax, rax, -1
  001b1	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR p$5[rbp]
  001b8	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  001bc	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  001bf	74 1b		 je	 SHORT $LN3@AddFontFro
  001c1	b8 01 00 00 00	 mov	 eax, 1
  001c6	48 6b c0 ff	 imul	 rax, rax, -1
  001ca	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR p$5[rbp]
  001d1	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  001d5	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  001d8	74 02		 je	 SHORT $LN3@AddFontFro
  001da	eb ab		 jmp	 SHORT $LN2@AddFontFro
$LN3@AddFontFro:

; 2152 :         ImFormatString(font_cfg.Name, IM_ARRAYSIZE(font_cfg.Name), "%s, %.0fpx", p, size_pixels);

  001dc	f3 0f 5a 85 50
	04 00 00	 cvtss2sd xmm0, DWORD PTR size_pixels$[rbp]
  001e4	f2 0f 11 44 24
	20		 movsd	 QWORD PTR [rsp+32], xmm0
  001ea	4c 8b 8d f8 00
	00 00		 mov	 r9, QWORD PTR p$5[rbp]
  001f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@EPCGLJHG@?$CFs?0?5?$CF?40fpx?$AA@
  001f8	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  001fd	48 8d 8d a6 00
	00 00		 lea	 rcx, QWORD PTR font_cfg$[rbp+86]
  00204	e8 00 00 00 00	 call	 ?ImFormatString@@YAHPEAD_KPEBDZZ ; ImFormatString
$LN6@AddFontFro:

; 2153 :     }
; 2154 :     return AddFontFromMemoryTTF(data, (int)data_size, size_pixels, &font_cfg, glyph_ranges);

  00209	48 8b 85 60 04
	00 00		 mov	 rax, QWORD PTR glyph_ranges$[rbp]
  00210	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00215	48 8d 45 50	 lea	 rax, QWORD PTR font_cfg$[rbp]
  00219	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0021e	f3 0f 10 9d 50
	04 00 00	 movss	 xmm3, DWORD PTR size_pixels$[rbp]
  00226	44 8b 45 08	 mov	 r8d, DWORD PTR data_size$[rbp]
  0022a	48 8b 55 28	 mov	 rdx, QWORD PTR data$[rbp]
  0022e	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00235	e8 00 00 00 00	 call	 ?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z ; ImFontAtlas::AddFontFromMemoryTTF
$LN1@AddFontFro:

; 2155 : }

  0023a	48 8b f8	 mov	 rdi, rax
  0023d	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00241	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z$rtcFrameData
  00248	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0024d	48 8b c7	 mov	 rax, rdi
  00250	48 8b 8d 10 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00257	48 33 cd	 xor	 rcx, rbp
  0025a	e8 00 00 00 00	 call	 __security_check_cookie
  0025f	48 8d a5 20 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1056]
  00266	5f		 pop	 rdi
  00267	5e		 pop	 rsi
  00268	5d		 pop	 rbp
  00269	c3		 ret	 0
?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z ENDP ; ImFontAtlas::AddFontFromFileTTF
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z
_TEXT	SEGMENT
font_cfg$ = 16
ttf_compressed_base85$ = 184
glyph_ranges$ = 216
font$ = 248
$T4 = 664
$T5 = 704
$T6 = 880
tv90 = 1032
tv68 = 1032
__$ArrayPad$ = 1040
this$ = 1088
font_cfg_template$ = 1096
?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z PROC ; ImFontAtlas::AddFontDefault, COMDAT

; 2116 : {

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	48 81 ec 50 04
	00 00		 sub	 rsp, 1104		; 00000450H
  00014	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 14 01 00 00	 mov	 ecx, 276		; 00000114H
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 78
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1144]
  00030	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00037	48 33 c5	 xor	 rax, rbp
  0003a	48 89 85 10 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2117 :     ImFontConfig font_cfg = font_cfg_template ? *font_cfg_template : ImFontConfig();

  00041	48 83 bd 48 04
	00 00 00	 cmp	 QWORD PTR font_cfg_template$[rbp], 0
  00049	74 28		 je	 SHORT $LN6@AddFontDef
  0004b	48 8d 85 c0 02
	00 00		 lea	 rax, QWORD PTR $T5[rbp]
  00052	48 8b f8	 mov	 rdi, rax
  00055	48 8b b5 48 04
	00 00		 mov	 rsi, QWORD PTR font_cfg_template$[rbp]
  0005c	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  00061	f3 a4		 rep movsb
  00063	48 8d 85 c0 02
	00 00		 lea	 rax, QWORD PTR $T5[rbp]
  0006a	48 89 85 08 04
	00 00		 mov	 QWORD PTR tv68[rbp], rax
  00071	eb 13		 jmp	 SHORT $LN7@AddFontDef
$LN6@AddFontDef:
  00073	48 8d 8d 70 03
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  0007a	e8 00 00 00 00	 call	 ??0ImFontConfig@@QEAA@XZ ; ImFontConfig::ImFontConfig
  0007f	48 89 85 08 04
	00 00		 mov	 QWORD PTR tv68[rbp], rax
$LN7@AddFontDef:
  00086	48 8b 85 08 04
	00 00		 mov	 rax, QWORD PTR tv68[rbp]
  0008d	48 89 85 98 02
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  00094	48 8d 45 10	 lea	 rax, QWORD PTR font_cfg$[rbp]
  00098	48 8b f8	 mov	 rdi, rax
  0009b	48 8b b5 98 02
	00 00		 mov	 rsi, QWORD PTR $T4[rbp]
  000a2	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  000a7	f3 a4		 rep movsb

; 2118 :     if (!font_cfg_template)

  000a9	48 83 bd 48 04
	00 00 00	 cmp	 QWORD PTR font_cfg_template$[rbp], 0
  000b1	75 11		 jne	 SHORT $LN2@AddFontDef

; 2119 :     {
; 2120 :         font_cfg.OversampleH = font_cfg.OversampleV = 1;

  000b3	c7 45 2c 01 00
	00 00		 mov	 DWORD PTR font_cfg$[rbp+28], 1
  000ba	8b 45 2c	 mov	 eax, DWORD PTR font_cfg$[rbp+28]
  000bd	89 45 28	 mov	 DWORD PTR font_cfg$[rbp+24], eax

; 2121 :         font_cfg.PixelSnapH = true;

  000c0	c6 45 30 01	 mov	 BYTE PTR font_cfg$[rbp+32], 1
$LN2@AddFontDef:

; 2122 :     }
; 2123 :     if (font_cfg.SizePixels <= 0.0f)

  000c4	0f 57 c0	 xorps	 xmm0, xmm0
  000c7	0f 2f 45 24	 comiss	 xmm0, DWORD PTR font_cfg$[rbp+20]
  000cb	72 0d		 jb	 SHORT $LN3@AddFontDef

; 2124 :         font_cfg.SizePixels = 13.0f * 1.0f;

  000cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41500000
  000d5	f3 0f 11 45 24	 movss	 DWORD PTR font_cfg$[rbp+20], xmm0
$LN3@AddFontDef:

; 2125 :     if (font_cfg.Name[0] == '\0')

  000da	b8 01 00 00 00	 mov	 eax, 1
  000df	48 6b c0 00	 imul	 rax, rax, 0
  000e3	0f be 44 05 66	 movsx	 eax, BYTE PTR font_cfg$[rbp+rax+86]
  000e8	85 c0		 test	 eax, eax
  000ea	75 1d		 jne	 SHORT $LN4@AddFontDef

; 2126 :         ImFormatString(font_cfg.Name, IM_ARRAYSIZE(font_cfg.Name), "ProggyClean.ttf, %dpx", (int)font_cfg.SizePixels);

  000ec	f3 0f 2c 45 24	 cvttss2si eax, DWORD PTR font_cfg$[rbp+20]
  000f1	44 8b c8	 mov	 r9d, eax
  000f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@CONABPA@ProggyClean?4ttf?0?5?$CFdpx?$AA@
  000fb	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00100	48 8d 4d 66	 lea	 rcx, QWORD PTR font_cfg$[rbp+86]
  00104	e8 00 00 00 00	 call	 ?ImFormatString@@YAHPEAD_KPEBDZZ ; ImFormatString
$LN4@AddFontDef:

; 2127 :     font_cfg.EllipsisChar = (ImWchar)0x0085;

  00109	b8 85 00 00 00	 mov	 eax, 133		; 00000085H
  0010e	66 89 45 64	 mov	 WORD PTR font_cfg$[rbp+84], ax

; 2128 :     font_cfg.GlyphOffset.y = 1.0f * IM_FLOOR(font_cfg.SizePixels / 13.0f);  // Add +1 offset per 13 units

  00112	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR font_cfg$[rbp+20]
  00117	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41500000
  0011f	f3 0f 2c c0	 cvttss2si eax, xmm0
  00123	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00127	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0012f	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00133	0f 28 c1	 movaps	 xmm0, xmm1
  00136	f3 0f 11 45 40	 movss	 DWORD PTR font_cfg$[rbp+48], xmm0

; 2129 : 
; 2130 :     const char* ttf_compressed_base85 = GetDefaultCompressedFontDataTTFBase85();

  0013b	e8 00 00 00 00	 call	 ?GetDefaultCompressedFontDataTTFBase85@@YAPEBDXZ ; GetDefaultCompressedFontDataTTFBase85
  00140	48 89 85 b8 00
	00 00		 mov	 QWORD PTR ttf_compressed_base85$[rbp], rax

; 2131 :     const ImWchar* glyph_ranges = font_cfg.GlyphRanges != NULL ? font_cfg.GlyphRanges : GetGlyphRangesDefault();

  00147	48 83 7d 48 00	 cmp	 QWORD PTR font_cfg$[rbp+56], 0
  0014c	74 0d		 je	 SHORT $LN8@AddFontDef
  0014e	48 8b 45 48	 mov	 rax, QWORD PTR font_cfg$[rbp+56]
  00152	48 89 85 08 04
	00 00		 mov	 QWORD PTR tv90[rbp], rax
  00159	eb 13		 jmp	 SHORT $LN9@AddFontDef
$LN8@AddFontDef:
  0015b	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00162	e8 00 00 00 00	 call	 ?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ ; ImFontAtlas::GetGlyphRangesDefault
  00167	48 89 85 08 04
	00 00		 mov	 QWORD PTR tv90[rbp], rax
$LN9@AddFontDef:
  0016e	48 8b 85 08 04
	00 00		 mov	 rax, QWORD PTR tv90[rbp]
  00175	48 89 85 d8 00
	00 00		 mov	 QWORD PTR glyph_ranges$[rbp], rax

; 2132 :     ImFont* font = AddFontFromMemoryCompressedBase85TTF(ttf_compressed_base85, font_cfg.SizePixels, &font_cfg, glyph_ranges);

  0017c	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR glyph_ranges$[rbp]
  00183	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00188	4c 8d 4d 10	 lea	 r9, QWORD PTR font_cfg$[rbp]
  0018c	f3 0f 10 55 24	 movss	 xmm2, DWORD PTR font_cfg$[rbp+20]
  00191	48 8b 95 b8 00
	00 00		 mov	 rdx, QWORD PTR ttf_compressed_base85$[rbp]
  00198	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0019f	e8 00 00 00 00	 call	 ?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z ; ImFontAtlas::AddFontFromMemoryCompressedBase85TTF
  001a4	48 89 85 f8 00
	00 00		 mov	 QWORD PTR font$[rbp], rax

; 2133 :     return font;

  001ab	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR font$[rbp]

; 2134 : }

  001b2	48 8b f8	 mov	 rdi, rax
  001b5	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  001b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z$rtcFrameData
  001c0	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001c5	48 8b c7	 mov	 rax, rdi
  001c8	48 8b 8d 10 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001cf	48 33 cd	 xor	 rcx, rbp
  001d2	e8 00 00 00 00	 call	 __security_check_cookie
  001d7	48 8d a5 20 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1056]
  001de	5f		 pop	 rdi
  001df	5e		 pop	 rsi
  001e0	5d		 pop	 rbp
  001e1	c3		 ret	 0
?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z ENDP ; ImFontAtlas::AddFontDefault
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z
_TEXT	SEGMENT
new_font_cfg$ = 8
$T1 = 232
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 360
$T6 = 388
$T7 = 424
tv142 = 440
this$ = 480
font_cfg$ = 488
?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z PROC ; ImFontAtlas::AddFont, COMDAT

; 2067 : {

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 01
	00 00		 sub	 rsp, 488		; 000001e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR [rsp+520]
  0002f	48 c7 85 a8 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T7[rbp], -2

; 2068 :     IM_ASSERT(!Locked && "Cannot modify a locked ImFontAtlas between NewFrame() and EndFrame/Render()!");

  0003a	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  00045	85 c0		 test	 eax, eax
  00047	75 0c		 jne	 SHORT $LN8@AddFont
  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAtl@
  00050	48 85 c0	 test	 rax, rax
  00053	75 21		 jne	 SHORT $LN9@AddFont
$LN8@AddFont:
  00055	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4JA
  0005b	ff c0		 inc	 eax
  0005d	44 8b c0	 mov	 r8d, eax
  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAm?$AAo?$AAd?$AAi?$AAf?$AAy?$AA?5?$AAa?$AA?5?$AAl?$AAo?$AAc?$AAk@
  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00074	33 c0		 xor	 eax, eax
$LN9@AddFont:

; 2069 :     IM_ASSERT(font_cfg->FontData != NULL && font_cfg->FontDataSize > 0);

  00076	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR font_cfg$[rbp]
  0007d	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00081	74 0d		 je	 SHORT $LN10@AddFont
  00083	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR font_cfg$[rbp]
  0008a	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  0008e	7f 22		 jg	 SHORT $LN11@AddFont
$LN10@AddFont:
  00090	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4JA
  00096	83 c0 02	 add	 eax, 2
  00099	44 8b c0	 mov	 r8d, eax
  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GM@FAHJAOLI@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAF?$AAo?$AAn?$AAt?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAf?$AAo?$AAn?$AAt?$AA_@
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b0	33 c0		 xor	 eax, eax
$LN11@AddFont:

; 2070 :     IM_ASSERT(font_cfg->SizePixels > 0.0f);

  000b2	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR font_cfg$[rbp]
  000b9	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  000be	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  000c5	77 22		 ja	 SHORT $LN12@AddFont
  000c7	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4JA
  000cd	83 c0 03	 add	 eax, 3
  000d0	44 8b c0	 mov	 r8d, eax
  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@LEOIHPJH@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAS?$AAi?$AAz?$AAe?$AAP?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AAf?$AA?$AA@
  000e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e7	33 c0		 xor	 eax, eax
$LN12@AddFont:

; 2071 : 
; 2072 :     // Create new font
; 2073 :     if (!font_cfg->MergeMode)

  000e9	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR font_cfg$[rbp]
  000f0	0f b6 40 48	 movzx	 eax, BYTE PTR [rax+72]
  000f4	85 c0		 test	 eax, eax
  000f6	0f 85 a3 00 00
	00		 jne	 $LN2@AddFont

; 2074 :         Fonts.push_back(IM_NEW(ImFont));

  000fc	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  00101	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00106	48 89 85 48 01
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  0010d	48 8d 85 84 01
	00 00		 lea	 rax, QWORD PTR $T6[rbp]
  00114	48 89 85 68 01
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  0011b	4c 8b 85 48 01
	00 00		 mov	 r8, QWORD PTR $T4[rbp]
  00122	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR $T5[rbp]
  00129	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  0012c	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  00131	e8 00 00 00 00	 call	 ??2@YAPEAX_KUImNewWrapper@@PEAX@Z ; operator new
  00136	48 89 85 28 01
	00 00		 mov	 QWORD PTR $T3[rbp], rax
  0013d	48 83 bd 28 01
	00 00 00	 cmp	 QWORD PTR $T3[rbp], 0
  00145	74 15		 je	 SHORT $LN13@AddFont
  00147	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR $T3[rbp]
  0014e	e8 00 00 00 00	 call	 ??0ImFont@@QEAA@XZ	; ImFont::ImFont
  00153	48 89 85 b8 01
	00 00		 mov	 QWORD PTR tv142[rbp], rax
  0015a	eb 0b		 jmp	 SHORT $LN14@AddFont
$LN13@AddFont:
  0015c	48 c7 85 b8 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv142[rbp], 0
$LN14@AddFont:
  00167	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR tv142[rbp]
  0016e	48 89 85 08 01
	00 00		 mov	 QWORD PTR $T2[rbp], rax
  00175	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR $T2[rbp]
  0017c	48 89 85 e8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00183	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0018a	48 83 c0 58	 add	 rax, 88			; 00000058H
  0018e	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00195	48 8b c8	 mov	 rcx, rax
  00198	e8 00 00 00 00	 call	 ?push_back@?$ImVector@PEAUImFont@@@@QEAAXAEBQEAUImFont@@@Z ; ImVector<ImFont * __ptr64>::push_back

; 2075 :     else

  0019d	eb 48		 jmp	 SHORT $LN3@AddFont
$LN2@AddFont:

; 2076 :         IM_ASSERT(!Fonts.empty() && "Cannot use MergeMode for the first font"); // When using MergeMode make sure that a font has already been added before. You can use ImGui::GetIO().Fonts->AddFontDefault() to add the default imgui font.

  0019f	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001a6	48 83 c0 58	 add	 rax, 88			; 00000058H
  001aa	48 8b c8	 mov	 rcx, rax
  001ad	e8 00 00 00 00	 call	 ?empty@?$ImVector@PEAUImFont@@@@QEBA_NXZ ; ImVector<ImFont * __ptr64>::empty
  001b2	0f b6 c0	 movzx	 eax, al
  001b5	85 c0		 test	 eax, eax
  001b7	75 0c		 jne	 SHORT $LN15@AddFont
  001b9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CI@EDBCHFCN@Cannot?5use?5MergeMode?5for?5the?5fir@
  001c0	48 85 c0	 test	 rax, rax
  001c3	75 22		 jne	 SHORT $LN3@AddFont
$LN15@AddFont:
  001c5	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4JA
  001cb	83 c0 09	 add	 eax, 9
  001ce	44 8b c0	 mov	 r8d, eax
  001d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  001d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HI@KOOOLAEJ@?$AA?$CB?$AAF?$AAo?$AAn?$AAt?$AAs?$AA?4?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAu?$AAs?$AAe?$AA?5?$AAM?$AAe@
  001df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001e5	33 c0		 xor	 eax, eax
$LN3@AddFont:

; 2077 : 
; 2078 :     ConfigData.push_back(*font_cfg);

  001e7	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001ee	48 83 c0 78	 add	 rax, 120		; 00000078H
  001f2	48 8b 95 e8 01
	00 00		 mov	 rdx, QWORD PTR font_cfg$[rbp]
  001f9	48 8b c8	 mov	 rcx, rax
  001fc	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImFontConfig@@@@QEAAXAEBUImFontConfig@@@Z ; ImVector<ImFontConfig>::push_back

; 2079 :     ImFontConfig& new_font_cfg = ConfigData.back();

  00201	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00208	48 83 c0 78	 add	 rax, 120		; 00000078H
  0020c	48 8b c8	 mov	 rcx, rax
  0020f	e8 00 00 00 00	 call	 ?back@?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@XZ ; ImVector<ImFontConfig>::back
  00214	48 89 45 08	 mov	 QWORD PTR new_font_cfg$[rbp], rax

; 2080 :     if (new_font_cfg.DstFont == NULL)

  00218	48 8b 45 08	 mov	 rax, QWORD PTR new_font_cfg$[rbp]
  0021c	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00224	75 21		 jne	 SHORT $LN4@AddFont

; 2081 :         new_font_cfg.DstFont = Fonts.back();

  00226	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0022d	48 83 c0 58	 add	 rax, 88			; 00000058H
  00231	48 8b c8	 mov	 rcx, rax
  00234	e8 00 00 00 00	 call	 ?back@?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@XZ ; ImVector<ImFont * __ptr64>::back
  00239	48 8b 4d 08	 mov	 rcx, QWORD PTR new_font_cfg$[rbp]
  0023d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00240	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax
$LN4@AddFont:

; 2082 :     if (!new_font_cfg.FontDataOwnedByAtlas)

  00247	48 8b 45 08	 mov	 rax, QWORD PTR new_font_cfg$[rbp]
  0024b	0f b6 40 0c	 movzx	 eax, BYTE PTR [rax+12]
  0024f	85 c0		 test	 eax, eax
  00251	75 40		 jne	 SHORT $LN5@AddFont

; 2083 :     {
; 2084 :         new_font_cfg.FontData = IM_ALLOC(new_font_cfg.FontDataSize);

  00253	48 8b 45 08	 mov	 rax, QWORD PTR new_font_cfg$[rbp]
  00257	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  0025b	48 8b c8	 mov	 rcx, rax
  0025e	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00263	48 8b 4d 08	 mov	 rcx, QWORD PTR new_font_cfg$[rbp]
  00267	48 89 01	 mov	 QWORD PTR [rcx], rax

; 2085 :         new_font_cfg.FontDataOwnedByAtlas = true;

  0026a	48 8b 45 08	 mov	 rax, QWORD PTR new_font_cfg$[rbp]
  0026e	c6 40 0c 01	 mov	 BYTE PTR [rax+12], 1

; 2086 :         memcpy(new_font_cfg.FontData, font_cfg->FontData, (size_t)new_font_cfg.FontDataSize);

  00272	48 8b 45 08	 mov	 rax, QWORD PTR new_font_cfg$[rbp]
  00276	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  0027a	4c 8b c0	 mov	 r8, rax
  0027d	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR font_cfg$[rbp]
  00284	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00287	48 8b 45 08	 mov	 rax, QWORD PTR new_font_cfg$[rbp]
  0028b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0028e	e8 00 00 00 00	 call	 memcpy
$LN5@AddFont:

; 2087 :     }
; 2088 : 
; 2089 :     if (new_font_cfg.DstFont->EllipsisChar == (ImWchar)-1)

  00293	48 8b 45 08	 mov	 rax, QWORD PTR new_font_cfg$[rbp]
  00297	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0029e	0f b7 40 54	 movzx	 eax, WORD PTR [rax+84]
  002a2	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  002a7	75 1a		 jne	 SHORT $LN6@AddFont

; 2090 :         new_font_cfg.DstFont->EllipsisChar = font_cfg->EllipsisChar;

  002a9	48 8b 45 08	 mov	 rax, QWORD PTR new_font_cfg$[rbp]
  002ad	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  002b4	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR font_cfg$[rbp]
  002bb	0f b7 49 54	 movzx	 ecx, WORD PTR [rcx+84]
  002bf	66 89 48 54	 mov	 WORD PTR [rax+84], cx
$LN6@AddFont:

; 2091 : 
; 2092 :     // Invalidate texture
; 2093 :     TexReady = false;

  002c3	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002ca	c6 40 28 00	 mov	 BYTE PTR [rax+40], 0

; 2094 :     ClearTexData();

  002ce	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002d5	e8 00 00 00 00	 call	 ?ClearTexData@ImFontAtlas@@QEAAXXZ ; ImFontAtlas::ClearTexData

; 2095 :     return new_font_cfg.DstFont;

  002da	48 8b 45 08	 mov	 rax, QWORD PTR new_font_cfg$[rbp]
  002de	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]

; 2096 : }

  002e5	48 8d a5 c8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+456]
  002ec	5f		 pop	 rdi
  002ed	5d		 pop	 rbp
  002ee	c3		 ret	 0
?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z ENDP ; ImFontAtlas::AddFont
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
new_font_cfg$ = 8
$T1 = 232
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 360
$T6 = 388
$T7 = 424
tv142 = 440
this$ = 480
font_cfg$ = 488
?dtor$0@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4HA PROC ; `ImFontAtlas::AddFont'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	4c 8b 85 48 01
	00 00		 mov	 r8, QWORD PTR $T4[rbp]
  0001b	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR $T5[rbp]
  00022	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00025	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR $T3[rbp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAXUImNewWrapper@@0@Z ; operator delete
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?dtor$0@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4HA ENDP ; `ImFontAtlas::AddFont'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
new_font_cfg$ = 8
$T1 = 232
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 360
$T6 = 388
$T7 = 424
tv142 = 440
this$ = 480
font_cfg$ = 488
?dtor$0@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4HA PROC ; `ImFontAtlas::AddFont'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	4c 8b 85 48 01
	00 00		 mov	 r8, QWORD PTR $T4[rbp]
  0001b	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR $T5[rbp]
  00022	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00025	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR $T3[rbp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAXUImNewWrapper@@0@Z ; operator delete
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?dtor$0@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4HA ENDP ; `ImFontAtlas::AddFont'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ??1ImFontAtlas@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1ImFontAtlas@@QEAA@XZ PROC				; ImFontAtlas::~ImFontAtlas, COMDAT

; 1975 : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 1976 :     IM_ASSERT(!Locked && "Cannot modify a locked ImFontAtlas between NewFrame() and EndFrame/Render()!");

  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  00040	85 c0		 test	 eax, eax
  00042	75 0c		 jne	 SHORT $LN3@ImFontAtla
  00044	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAtl@
  0004b	48 85 c0	 test	 rax, rax
  0004e	75 22		 jne	 SHORT $LN4@ImFontAtla
$LN3@ImFontAtla:
  00050	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0???1ImFontAtlas@@QEAA@XZ@4JA
  00056	ff c0		 inc	 eax
  00058	44 8b c0	 mov	 r8d, eax
  0005b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAm?$AAo?$AAd?$AAi?$AAf?$AAy?$AA?5?$AAa?$AA?5?$AAl?$AAo?$AAc?$AAk@
  00069	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0006f	90		 npad	 1
  00070	33 c0		 xor	 eax, eax
$LN4@ImFontAtla:

; 1977 :     Clear();

  00072	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00079	e8 00 00 00 00	 call	 ?Clear@ImFontAtlas@@QEAAXXZ ; ImFontAtlas::Clear
  0007e	90		 npad	 1

; 1978 : }

  0007f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00086	48 83 c0 78	 add	 rax, 120		; 00000078H
  0008a	48 8b c8	 mov	 rcx, rax
  0008d	e8 00 00 00 00	 call	 ??1?$ImVector@UImFontConfig@@@@QEAA@XZ ; ImVector<ImFontConfig>::~ImVector<ImFontConfig>
  00092	90		 npad	 1
  00093	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009a	48 83 c0 68	 add	 rax, 104		; 00000068H
  0009e	48 8b c8	 mov	 rcx, rax
  000a1	e8 00 00 00 00	 call	 ??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ ; ImVector<ImFontAtlasCustomRect>::~ImVector<ImFontAtlasCustomRect>
  000a6	90		 npad	 1
  000a7	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ae	48 83 c0 58	 add	 rax, 88			; 00000058H
  000b2	48 8b c8	 mov	 rcx, rax
  000b5	e8 00 00 00 00	 call	 ??1?$ImVector@PEAUImFont@@@@QEAA@XZ ; ImVector<ImFont * __ptr64>::~ImVector<ImFont * __ptr64>
  000ba	90		 npad	 1
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
??1ImFontAtlas@@QEAA@XZ ENDP				; ImFontAtlas::~ImFontAtlas
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ??0ImFontAtlas@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0ImFontAtlas@@QEAA@XZ PROC				; ImFontAtlas::ImFontAtlas, COMDAT

; 1968 : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 c0 48	 add	 rax, 72			; 00000048H
  00040	48 8b c8	 mov	 rcx, rax
  00043	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@XZ	; ImVec2::ImVec2
  00048	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004f	48 83 c0 50	 add	 rax, 80			; 00000050H
  00053	48 8b c8	 mov	 rcx, rax
  00056	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@XZ	; ImVec2::ImVec2
  0005b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 83 c0 58	 add	 rax, 88			; 00000058H
  00066	48 8b c8	 mov	 rcx, rax
  00069	e8 00 00 00 00	 call	 ??0?$ImVector@PEAUImFont@@@@QEAA@XZ ; ImVector<ImFont * __ptr64>::ImVector<ImFont * __ptr64>
  0006e	90		 npad	 1
  0006f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00076	48 83 c0 68	 add	 rax, 104		; 00000068H
  0007a	48 8b c8	 mov	 rcx, rax
  0007d	e8 00 00 00 00	 call	 ??0?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ ; ImVector<ImFontAtlasCustomRect>::ImVector<ImFontAtlasCustomRect>
  00082	90		 npad	 1
  00083	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008a	48 83 c0 78	 add	 rax, 120		; 00000078H
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 ??0?$ImVector@UImFontConfig@@@@QEAA@XZ ; ImVector<ImFontConfig>::ImVector<ImFontConfig>
  00096	90		 npad	 1
  00097	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009e	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  000a4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??0ImVec4@@QEAA@XZ ; ImVec4::ImVec4
  000ab	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  000b1	ba 10 00 00 00	 mov	 edx, 16
  000b6	48 8b c8	 mov	 rcx, rax
  000b9	e8 00 00 00 00	 call	 ??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 1969 :     memset(this, 0, sizeof(*this));

  000be	41 b8 a0 04 00
	00		 mov	 r8d, 1184		; 000004a0H
  000c4	33 d2		 xor	 edx, edx
  000c6	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000cd	e8 00 00 00 00	 call	 memset

; 1970 :     TexGlyphPadding = 1;

  000d2	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d9	c7 40 14 01 00
	00 00		 mov	 DWORD PTR [rax+20], 1

; 1971 :     PackIdMouseCursors = PackIdLines = -1;

  000e0	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e7	c7 80 98 04 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+1176], -1
  000f1	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f8	c7 80 94 04 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+1172], -1

; 1972 : }

  00102	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00109	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00110	5f		 pop	 rdi
  00111	5d		 pop	 rbp
  00112	c3		 ret	 0
??0ImFontAtlas@@QEAA@XZ ENDP				; ImFontAtlas::ImFontAtlas
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0ImFontAtlas@@QEAA@XZ@4HA PROC		; `ImFontAtlas::ImFontAtlas'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 83 c1 58	 add	 rcx, 88			; 00000058H
  0001f	e8 00 00 00 00	 call	 ??1?$ImVector@PEAUImFont@@@@QEAA@XZ ; ImVector<ImFont * __ptr64>::~ImVector<ImFont * __ptr64>
  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	5f		 pop	 rdi
  00029	5d		 pop	 rbp
  0002a	c3		 ret	 0
?dtor$0@?0???0ImFontAtlas@@QEAA@XZ@4HA ENDP		; `ImFontAtlas::ImFontAtlas'::`1'::dtor$0
$T1 = 200
this$ = 256
?dtor$1@?0???0ImFontAtlas@@QEAA@XZ@4HA PROC		; `ImFontAtlas::ImFontAtlas'::`1'::dtor$1
  0002b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00030	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00035	55		 push	 rbp
  00036	57		 push	 rdi
  00037	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0003b	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0003f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00046	48 83 c1 68	 add	 rcx, 104		; 00000068H
  0004a	e8 00 00 00 00	 call	 ??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ ; ImVector<ImFontAtlasCustomRect>::~ImVector<ImFontAtlasCustomRect>
  0004f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00053	5f		 pop	 rdi
  00054	5d		 pop	 rbp
  00055	c3		 ret	 0
?dtor$1@?0???0ImFontAtlas@@QEAA@XZ@4HA ENDP		; `ImFontAtlas::ImFontAtlas'::`1'::dtor$1
$T1 = 200
this$ = 256
?dtor$2@?0???0ImFontAtlas@@QEAA@XZ@4HA PROC		; `ImFontAtlas::ImFontAtlas'::`1'::dtor$2
  00056	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0005b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00060	55		 push	 rbp
  00061	57		 push	 rdi
  00062	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00066	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0006a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00071	48 83 c1 78	 add	 rcx, 120		; 00000078H
  00075	e8 00 00 00 00	 call	 ??1?$ImVector@UImFontConfig@@@@QEAA@XZ ; ImVector<ImFontConfig>::~ImVector<ImFontConfig>
  0007a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007e	5f		 pop	 rdi
  0007f	5d		 pop	 rbp
  00080	c3		 ret	 0
?dtor$2@?0???0ImFontAtlas@@QEAA@XZ@4HA ENDP		; `ImFontAtlas::ImFontAtlas'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0ImFontAtlas@@QEAA@XZ@4HA PROC		; `ImFontAtlas::ImFontAtlas'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 83 c1 58	 add	 rcx, 88			; 00000058H
  0001f	e8 00 00 00 00	 call	 ??1?$ImVector@PEAUImFont@@@@QEAA@XZ ; ImVector<ImFont * __ptr64>::~ImVector<ImFont * __ptr64>
  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	5f		 pop	 rdi
  00029	5d		 pop	 rbp
  0002a	c3		 ret	 0
?dtor$0@?0???0ImFontAtlas@@QEAA@XZ@4HA ENDP		; `ImFontAtlas::ImFontAtlas'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$1@?0???0ImFontAtlas@@QEAA@XZ@4HA PROC		; `ImFontAtlas::ImFontAtlas'::`1'::dtor$1
  0002b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00030	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00035	55		 push	 rbp
  00036	57		 push	 rdi
  00037	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0003b	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0003f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00046	48 83 c1 68	 add	 rcx, 104		; 00000068H
  0004a	e8 00 00 00 00	 call	 ??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ ; ImVector<ImFontAtlasCustomRect>::~ImVector<ImFontAtlasCustomRect>
  0004f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00053	5f		 pop	 rdi
  00054	5d		 pop	 rbp
  00055	c3		 ret	 0
?dtor$1@?0???0ImFontAtlas@@QEAA@XZ@4HA ENDP		; `ImFontAtlas::ImFontAtlas'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$2@?0???0ImFontAtlas@@QEAA@XZ@4HA PROC		; `ImFontAtlas::ImFontAtlas'::`1'::dtor$2
  00056	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0005b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00060	55		 push	 rbp
  00061	57		 push	 rdi
  00062	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00066	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0006a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00071	48 83 c1 78	 add	 rcx, 120		; 00000078H
  00075	e8 00 00 00 00	 call	 ??1?$ImVector@UImFontConfig@@@@QEAA@XZ ; ImVector<ImFontConfig>::~ImVector<ImFontConfig>
  0007a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007e	5f		 pop	 rdi
  0007f	5d		 pop	 rbp
  00080	c3		 ret	 0
?dtor$2@?0???0ImFontAtlas@@QEAA@XZ@4HA ENDP		; `ImFontAtlas::ImFontAtlas'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ
_TEXT	SEGMENT
tv67 = 192
this$ = 240
?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ PROC		; ImFontAtlasCustomRect::IsPacked, COMDAT

; 2713 :     bool IsPacked() const           { return X != 0xFFFF; }

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+248]
  00028	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00033	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00038	74 0c		 je	 SHORT $LN3@IsPacked
  0003a	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv67[rbp], 1
  00044	eb 0a		 jmp	 SHORT $LN4@IsPacked
$LN3@IsPacked:
  00046	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv67[rbp], 0
$LN4@IsPacked:
  00050	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv67[rbp]
  00057	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0005e	5f		 pop	 rdi
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ ENDP		; ImFontAtlasCustomRect::IsPacked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0ImFontAtlasCustomRect@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 196
this$ = 256
??0ImFontAtlasCustomRect@@QEAA@XZ PROC			; ImFontAtlasCustomRect::ImFontAtlasCustomRect, COMDAT

; 2712 :     ImFontAtlasCustomRect()         { Width = Height = 0; X = Y = 0xFFFF; GlyphID = 0; GlyphAdvanceX = 0.0f; GlyphOffset = ImVec2(0, 0); Font = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 c0 10	 add	 rax, 16
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@XZ	; ImVec2::ImVec2
  0003d	33 c0		 xor	 eax, eax
  0003f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00046	66 89 41 02	 mov	 WORD PTR [rcx+2], ax
  0004a	33 c0		 xor	 eax, eax
  0004c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	66 89 01	 mov	 WORD PTR [rcx], ax
  00056	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0005b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00062	66 89 41 06	 mov	 WORD PTR [rcx+6], ax
  00066	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0006b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	66 89 41 04	 mov	 WORD PTR [rcx+4], ax
  00076	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007d	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [rax+8], 0
  00084	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008b	0f 57 c0	 xorps	 xmm0, xmm0
  0008e	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0
  00093	0f 57 d2	 xorps	 xmm2, xmm2
  00096	0f 57 c9	 xorps	 xmm1, xmm1
  00099	48 8d 8d c4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  000a0	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000a5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a8	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000af	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
  000b3	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ba	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
  000c2	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c9	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000d0	5f		 pop	 rdi
  000d1	5d		 pop	 rbp
  000d2	c3		 ret	 0
??0ImFontAtlasCustomRect@@QEAA@XZ ENDP			; ImFontAtlasCustomRect::ImFontAtlasCustomRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?BuildRanges@ImFontGlyphRangesBuilder@@QEAAXPEAU?$ImVector@G@@@Z
_TEXT	SEGMENT
max_codepoint$ = 4
n$1 = 36
$T2 = 260
$T3 = 292
$T4 = 324
this$ = 384
out_ranges$ = 392
?BuildRanges@ImFontGlyphRangesBuilder@@QEAAXPEAU?$ImVector@G@@@Z PROC ; ImFontGlyphRangesBuilder::BuildRanges, COMDAT

; 3092 : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]

; 3093 :     const int max_codepoint = IM_UNICODE_CODEPOINT_MAX;

  0002f	c7 45 04 ff ff
	00 00		 mov	 DWORD PTR max_codepoint$[rbp], 65535 ; 0000ffffH

; 3094 :     for (int n = 0; n <= max_codepoint; n++)

  00036	c7 45 24 00 00
	00 00		 mov	 DWORD PTR n$1[rbp], 0
  0003d	eb 08		 jmp	 SHORT $LN4@BuildRange
$LN2@BuildRange:
  0003f	8b 45 24	 mov	 eax, DWORD PTR n$1[rbp]
  00042	ff c0		 inc	 eax
  00044	89 45 24	 mov	 DWORD PTR n$1[rbp], eax
$LN4@BuildRange:
  00047	81 7d 24 ff ff
	00 00		 cmp	 DWORD PTR n$1[rbp], 65535 ; 0000ffffH
  0004e	0f 8f 8b 00 00
	00		 jg	 $LN3@BuildRange

; 3095 :         if (GetBit(n))

  00054	48 63 45 24	 movsxd	 rax, DWORD PTR n$1[rbp]
  00058	48 8b d0	 mov	 rdx, rax
  0005b	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00062	e8 00 00 00 00	 call	 ?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z ; ImFontGlyphRangesBuilder::GetBit
  00067	0f b6 c0	 movzx	 eax, al
  0006a	85 c0		 test	 eax, eax
  0006c	74 6c		 je	 SHORT $LN7@BuildRange

; 3096 :         {
; 3097 :             out_ranges->push_back((ImWchar)n);

  0006e	0f b7 45 24	 movzx	 eax, WORD PTR n$1[rbp]
  00072	66 89 85 04 01
	00 00		 mov	 WORD PTR $T2[rbp], ax
  00079	48 8d 95 04 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  00080	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR out_ranges$[rbp]
  00087	e8 00 00 00 00	 call	 ?push_back@?$ImVector@G@@QEAAXAEBG@Z ; ImVector<unsigned short>::push_back
$LN5@BuildRange:

; 3098 :             while (n < max_codepoint && GetBit(n + 1))

  0008c	81 7d 24 ff ff
	00 00		 cmp	 DWORD PTR n$1[rbp], 65535 ; 0000ffffH
  00093	7d 27		 jge	 SHORT $LN6@BuildRange
  00095	8b 45 24	 mov	 eax, DWORD PTR n$1[rbp]
  00098	ff c0		 inc	 eax
  0009a	48 98		 cdqe
  0009c	48 8b d0	 mov	 rdx, rax
  0009f	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a6	e8 00 00 00 00	 call	 ?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z ; ImFontGlyphRangesBuilder::GetBit
  000ab	0f b6 c0	 movzx	 eax, al
  000ae	85 c0		 test	 eax, eax
  000b0	74 0a		 je	 SHORT $LN6@BuildRange

; 3099 :                 n++;

  000b2	8b 45 24	 mov	 eax, DWORD PTR n$1[rbp]
  000b5	ff c0		 inc	 eax
  000b7	89 45 24	 mov	 DWORD PTR n$1[rbp], eax
  000ba	eb d0		 jmp	 SHORT $LN5@BuildRange
$LN6@BuildRange:

; 3100 :             out_ranges->push_back((ImWchar)n);

  000bc	0f b7 45 24	 movzx	 eax, WORD PTR n$1[rbp]
  000c0	66 89 85 24 01
	00 00		 mov	 WORD PTR $T3[rbp], ax
  000c7	48 8d 95 24 01
	00 00		 lea	 rdx, QWORD PTR $T3[rbp]
  000ce	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR out_ranges$[rbp]
  000d5	e8 00 00 00 00	 call	 ?push_back@?$ImVector@G@@QEAAXAEBG@Z ; ImVector<unsigned short>::push_back
$LN7@BuildRange:

; 3101 :         }

  000da	e9 60 ff ff ff	 jmp	 $LN2@BuildRange
$LN3@BuildRange:

; 3102 :     out_ranges->push_back(0);

  000df	33 c0		 xor	 eax, eax
  000e1	66 89 85 44 01
	00 00		 mov	 WORD PTR $T4[rbp], ax
  000e8	48 8d 95 44 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  000ef	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR out_ranges$[rbp]
  000f6	e8 00 00 00 00	 call	 ?push_back@?$ImVector@G@@QEAAXAEBG@Z ; ImVector<unsigned short>::push_back

; 3103 : }

  000fb	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  00102	5f		 pop	 rdi
  00103	5d		 pop	 rbp
  00104	c3		 ret	 0
?BuildRanges@ImFontGlyphRangesBuilder@@QEAAXPEAU?$ImVector@G@@@Z ENDP ; ImFontGlyphRangesBuilder::BuildRanges
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddRanges@ImFontGlyphRangesBuilder@@QEAAXPEBG@Z
_TEXT	SEGMENT
c$1 = 4
this$ = 256
ranges$ = 264
?AddRanges@ImFontGlyphRangesBuilder@@QEAAXPEBG@Z PROC	; ImFontGlyphRangesBuilder::AddRanges, COMDAT

; 3085 : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 3086 :     for (; ranges[0]; ranges += 2)

  0002f	eb 12		 jmp	 SHORT $LN4@AddRanges
$LN2@AddRanges:
  00031	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ranges$[rbp]
  00038	48 83 c0 04	 add	 rax, 4
  0003c	48 89 85 08 01
	00 00		 mov	 QWORD PTR ranges$[rbp], rax
$LN4@AddRanges:
  00043	b8 02 00 00 00	 mov	 eax, 2
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR ranges$[rbp]
  00053	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  00057	85 c0		 test	 eax, eax
  00059	74 5a		 je	 SHORT $LN3@AddRanges

; 3087 :         for (unsigned int c = ranges[0]; c <= ranges[1] && c <= IM_UNICODE_CODEPOINT_MAX; c++) //-V560

  0005b	b8 02 00 00 00	 mov	 eax, 2
  00060	48 6b c0 00	 imul	 rax, rax, 0
  00064	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR ranges$[rbp]
  0006b	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  0006f	89 45 04	 mov	 DWORD PTR c$1[rbp], eax
  00072	eb 08		 jmp	 SHORT $LN7@AddRanges
$LN5@AddRanges:
  00074	8b 45 04	 mov	 eax, DWORD PTR c$1[rbp]
  00077	ff c0		 inc	 eax
  00079	89 45 04	 mov	 DWORD PTR c$1[rbp], eax
$LN7@AddRanges:
  0007c	b8 02 00 00 00	 mov	 eax, 2
  00081	48 6b c0 01	 imul	 rax, rax, 1
  00085	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR ranges$[rbp]
  0008c	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  00090	39 45 04	 cmp	 DWORD PTR c$1[rbp], eax
  00093	77 1b		 ja	 SHORT $LN6@AddRanges
  00095	81 7d 04 ff ff
	00 00		 cmp	 DWORD PTR c$1[rbp], 65535 ; 0000ffffH
  0009c	77 12		 ja	 SHORT $LN6@AddRanges

; 3088 :             AddChar((ImWchar)c);

  0009e	0f b7 55 04	 movzx	 edx, WORD PTR c$1[rbp]
  000a2	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	e8 00 00 00 00	 call	 ?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z ; ImFontGlyphRangesBuilder::AddChar
  000ae	eb c4		 jmp	 SHORT $LN5@AddRanges
$LN6@AddRanges:
  000b0	e9 7c ff ff ff	 jmp	 $LN2@AddRanges
$LN3@AddRanges:

; 3089 : }

  000b5	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000bc	5f		 pop	 rdi
  000bd	5d		 pop	 rbp
  000be	c3		 ret	 0
?AddRanges@ImFontGlyphRangesBuilder@@QEAAXPEBG@Z ENDP	; ImFontGlyphRangesBuilder::AddRanges
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z
_TEXT	SEGMENT
c$4 = 4
c_len$5 = 36
tv65 = 244
tv68 = 248
__$ArrayPad$ = 256
this$ = 304
text$ = 312
text_end$ = 320
?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z PROC	; ImFontGlyphRangesBuilder::AddText, COMDAT

; 3072 : {

$LN10:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR [rsp+344]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c5	 xor	 rax, rbp
  0003e	48 89 85 00 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
$LN2@AddText:

; 3073 :     while (text_end ? (text < text_end) : *text)

  00045	48 83 bd 40 01
	00 00 00	 cmp	 QWORD PTR text_end$[rbp], 0
  0004d	74 34		 je	 SHORT $LN8@AddText
  0004f	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR text_end$[rbp]
  00056	48 39 85 38 01
	00 00		 cmp	 QWORD PTR text$[rbp], rax
  0005d	73 0c		 jae	 SHORT $LN6@AddText
  0005f	c7 85 f4 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv65[rbp], 1
  00069	eb 0a		 jmp	 SHORT $LN7@AddText
$LN6@AddText:
  0006b	c7 85 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv65[rbp], 0
$LN7@AddText:
  00075	8b 85 f4 00 00
	00		 mov	 eax, DWORD PTR tv65[rbp]
  0007b	89 85 f8 00 00
	00		 mov	 DWORD PTR tv68[rbp], eax
  00081	eb 10		 jmp	 SHORT $LN9@AddText
$LN8@AddText:
  00083	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR text$[rbp]
  0008a	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0008d	89 85 f8 00 00
	00		 mov	 DWORD PTR tv68[rbp], eax
$LN9@AddText:
  00093	83 bd f8 00 00
	00 00		 cmp	 DWORD PTR tv68[rbp], 0
  0009a	74 56		 je	 SHORT $LN3@AddText

; 3074 :     {
; 3075 :         unsigned int c = 0;

  0009c	c7 45 04 00 00
	00 00		 mov	 DWORD PTR c$4[rbp], 0

; 3076 :         int c_len = ImTextCharFromUtf8(&c, text, text_end);

  000a3	4c 8b 85 40 01
	00 00		 mov	 r8, QWORD PTR text_end$[rbp]
  000aa	48 8b 95 38 01
	00 00		 mov	 rdx, QWORD PTR text$[rbp]
  000b1	48 8d 4d 04	 lea	 rcx, QWORD PTR c$4[rbp]
  000b5	e8 00 00 00 00	 call	 ?ImTextCharFromUtf8@@YAHPEAIPEBD1@Z ; ImTextCharFromUtf8
  000ba	89 45 24	 mov	 DWORD PTR c_len$5[rbp], eax

; 3077 :         text += c_len;

  000bd	48 63 45 24	 movsxd	 rax, DWORD PTR c_len$5[rbp]
  000c1	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR text$[rbp]
  000c8	48 03 c8	 add	 rcx, rax
  000cb	48 8b c1	 mov	 rax, rcx
  000ce	48 89 85 38 01
	00 00		 mov	 QWORD PTR text$[rbp], rax

; 3078 :         if (c_len == 0)

  000d5	83 7d 24 00	 cmp	 DWORD PTR c_len$5[rbp], 0
  000d9	75 02		 jne	 SHORT $LN4@AddText

; 3079 :             break;

  000db	eb 15		 jmp	 SHORT $LN3@AddText
$LN4@AddText:

; 3080 :         AddChar((ImWchar)c);

  000dd	0f b7 55 04	 movzx	 edx, WORD PTR c$4[rbp]
  000e1	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e8	e8 00 00 00 00	 call	 ?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z ; ImFontGlyphRangesBuilder::AddChar

; 3081 :     }

  000ed	e9 53 ff ff ff	 jmp	 $LN2@AddText
$LN3@AddText:

; 3082 : }

  000f2	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z$rtcFrameData
  000fd	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00102	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00109	48 33 cd	 xor	 rcx, rbp
  0010c	e8 00 00 00 00	 call	 __security_check_cookie
  00111	48 8d a5 18 01
	00 00		 lea	 rsp, QWORD PTR [rbp+280]
  00118	5f		 pop	 rdi
  00119	5d		 pop	 rbp
  0011a	c3		 ret	 0
?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z ENDP	; ImFontGlyphRangesBuilder::AddText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z
_TEXT	SEGMENT
this$ = 224
c$ = 232
?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z PROC	; ImFontGlyphRangesBuilder::AddChar, COMDAT

; 2697 :     inline void     AddChar(ImWchar c)      { SetBit(c); }                      // Add character

$LN3:
  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	0f b7 85 e8 00
	00 00		 movzx	 eax, WORD PTR c$[rbp]
  00036	8b d0		 mov	 edx, eax
  00038	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003f	e8 00 00 00 00	 call	 ?SetBit@ImFontGlyphRangesBuilder@@QEAAX_K@Z ; ImFontGlyphRangesBuilder::SetBit
  00044	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z ENDP	; ImFontGlyphRangesBuilder::AddChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?SetBit@ImFontGlyphRangesBuilder@@QEAAX_K@Z
_TEXT	SEGMENT
off$ = 4
mask$ = 36
tv79 = 244
tv72 = 248
this$ = 288
n$ = 296
?SetBit@ImFontGlyphRangesBuilder@@QEAAX_K@Z PROC	; ImFontGlyphRangesBuilder::SetBit, COMDAT

; 2696 :     inline void     SetBit(size_t n)        { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 31); UsedChars[off] |= mask; }               // Set bit n in the array

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002f	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR n$[rbp]
  00036	48 c1 e8 05	 shr	 rax, 5
  0003a	89 45 04	 mov	 DWORD PTR off$[rbp], eax
  0003d	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR n$[rbp]
  00044	48 83 e0 1f	 and	 rax, 31
  00048	b9 01 00 00 00	 mov	 ecx, 1
  0004d	89 8d f4 00 00
	00		 mov	 DWORD PTR tv79[rbp], ecx
  00053	0f b6 c8	 movzx	 ecx, al
  00056	8b 85 f4 00 00
	00		 mov	 eax, DWORD PTR tv79[rbp]
  0005c	d3 e0		 shl	 eax, cl
  0005e	89 45 24	 mov	 DWORD PTR mask$[rbp], eax
  00061	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00068	8b 55 04	 mov	 edx, DWORD PTR off$[rbp]
  0006b	48 8b c8	 mov	 rcx, rax
  0006e	e8 00 00 00 00	 call	 ??A?$ImVector@I@@QEAAAEAIH@Z ; ImVector<unsigned int>::operator[]
  00073	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  0007a	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR tv72[rbp]
  00081	8b 4d 24	 mov	 ecx, DWORD PTR mask$[rbp]
  00084	8b 00		 mov	 eax, DWORD PTR [rax]
  00086	0b c1		 or	 eax, ecx
  00088	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR tv72[rbp]
  0008f	89 01		 mov	 DWORD PTR [rcx], eax
  00091	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00098	5f		 pop	 rdi
  00099	5d		 pop	 rbp
  0009a	c3		 ret	 0
?SetBit@ImFontGlyphRangesBuilder@@QEAAX_K@Z ENDP	; ImFontGlyphRangesBuilder::SetBit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z
_TEXT	SEGMENT
off$ = 4
mask$ = 36
tv81 = 244
tv74 = 244
this$ = 288
n$ = 296
?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z PROC	; ImFontGlyphRangesBuilder::GetBit, COMDAT

; 2695 :     inline bool     GetBit(size_t n) const  { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 31); return (UsedChars[off] & mask) != 0; }  // Get bit n in the array

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002f	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR n$[rbp]
  00036	48 c1 e8 05	 shr	 rax, 5
  0003a	89 45 04	 mov	 DWORD PTR off$[rbp], eax
  0003d	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR n$[rbp]
  00044	48 83 e0 1f	 and	 rax, 31
  00048	b9 01 00 00 00	 mov	 ecx, 1
  0004d	89 8d f4 00 00
	00		 mov	 DWORD PTR tv81[rbp], ecx
  00053	0f b6 c8	 movzx	 ecx, al
  00056	8b 85 f4 00 00
	00		 mov	 eax, DWORD PTR tv81[rbp]
  0005c	d3 e0		 shl	 eax, cl
  0005e	89 45 24	 mov	 DWORD PTR mask$[rbp], eax
  00061	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00068	8b 55 04	 mov	 edx, DWORD PTR off$[rbp]
  0006b	48 8b c8	 mov	 rcx, rax
  0006e	e8 00 00 00 00	 call	 ??A?$ImVector@I@@QEBAAEBIH@Z ; ImVector<unsigned int>::operator[]
  00073	8b 4d 24	 mov	 ecx, DWORD PTR mask$[rbp]
  00076	8b 00		 mov	 eax, DWORD PTR [rax]
  00078	23 c1		 and	 eax, ecx
  0007a	85 c0		 test	 eax, eax
  0007c	74 0c		 je	 SHORT $LN3@GetBit
  0007e	c7 85 f4 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv74[rbp], 1
  00088	eb 0a		 jmp	 SHORT $LN4@GetBit
$LN3@GetBit:
  0008a	c7 85 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv74[rbp], 0
$LN4@GetBit:
  00094	0f b6 85 f4 00
	00 00		 movzx	 eax, BYTE PTR tv74[rbp]
  0009b	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000a2	5f		 pop	 rdi
  000a3	5d		 pop	 rbp
  000a4	c3		 ret	 0
?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z ENDP	; ImFontGlyphRangesBuilder::GetBit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@I@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@I@@QEAAXH@Z PROC			; ImVector<unsigned int>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 c1 e0 02	 shl	 rax, 2
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 c1 e0 02	 shl	 rax, 2
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@I@@QEAAXH@Z ENDP			; ImVector<unsigned int>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?resize@?$ImVector@I@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@I@@QEAAXH@Z PROC			; ImVector<unsigned int>::resize, COMDAT

; 1800 :     inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 e8 00 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  0003e	7e 20		 jle	 SHORT $LN2@resize
  00040	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  00046	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@I@@QEBAHH@Z ; ImVector<unsigned int>::_grow_capacity
  00052	8b d0		 mov	 edx, eax
  00054	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	e8 00 00 00 00	 call	 ?reserve@?$ImVector@I@@QEAAXH@Z ; ImVector<unsigned int>::reserve
$LN2@resize:
  00060	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  0006d	89 08		 mov	 DWORD PTR [rax], ecx
  0006f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
?resize@?$ImVector@I@@QEAAXH@Z ENDP			; ImVector<unsigned int>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@I@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@I@@QEBAHH@Z PROC		; ImVector<unsigned int>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@I@@QEBAHH@Z ENDP		; ImVector<unsigned int>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?end@?$ImVector@I@@QEBAPEBIXZ
_TEXT	SEGMENT
this$ = 224
?end@?$ImVector@I@@QEBAPEBIXZ PROC			; ImVector<unsigned int>::end, COMDAT

; 1792 :     inline const T*     end() const                         { return Data + Size; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00032	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00039	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0003d	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00041	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
?end@?$ImVector@I@@QEBAPEBIXZ ENDP			; ImVector<unsigned int>::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?begin@?$ImVector@I@@QEBAPEBIXZ
_TEXT	SEGMENT
this$ = 224
?begin@?$ImVector@I@@QEBAPEBIXZ PROC			; ImVector<unsigned int>::begin, COMDAT

; 1790 :     inline const T*     begin() const                       { return Data; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00033	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003a	5f		 pop	 rdi
  0003b	5d		 pop	 rbp
  0003c	c3		 ret	 0
?begin@?$ImVector@I@@QEBAPEBIXZ ENDP			; ImVector<unsigned int>::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@I@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@I@@QEBAAEBIH@Z PROC			; ImVector<unsigned int>::operator[], COMDAT

; 1787 :     inline const T&     operator[](int i) const             { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fb 06 00
	00		 mov	 r8d, 1787		; 000006fbH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00076	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@I@@QEBAAEBIH@Z ENDP			; ImVector<unsigned int>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@I@@QEAAAEAIH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@I@@QEAAAEAIH@Z PROC			; ImVector<unsigned int>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00076	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@I@@QEAAAEAIH@Z ENDP			; ImVector<unsigned int>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?empty@?$ImVector@I@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?empty@?$ImVector@I@@QEBA_NXZ PROC			; ImVector<unsigned int>::empty, COMDAT

; 1781 :     inline bool         empty() const                       { return Size == 0; }

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+248]
  00028	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	83 38 00	 cmp	 DWORD PTR [rax], 0
  00032	75 0c		 jne	 SHORT $LN3@empty
  00034	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv66[rbp], 1
  0003e	eb 0a		 jmp	 SHORT $LN4@empty
$LN3@empty:
  00040	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv66[rbp], 0
$LN4@empty:
  0004a	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv66[rbp]
  00051	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
?empty@?$ImVector@I@@QEBA_NXZ ENDP			; ImVector<unsigned int>::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@I@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@I@@QEAAXXZ PROC			; ImVector<unsigned int>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@I@@QEAAXXZ ENDP			; ImVector<unsigned int>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@I@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@I@@QEAA@XZ PROC				; ImVector<unsigned int>::~ImVector<unsigned int>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@I@@QEAA@XZ ENDP				; ImVector<unsigned int>::~ImVector<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ??0ImFontConfig@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImFontConfig@@QEAA@XZ PROC				; ImFontConfig::ImFontConfig, COMDAT

; 1903 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 c0 24	 add	 rax, 36			; 00000024H
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@XZ	; ImVec2::ImVec2
  0003d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  00048	48 8b c8	 mov	 rcx, rax
  0004b	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@XZ	; ImVec2::ImVec2

; 1904 :     memset(this, 0, sizeof(*this));

  00050	41 b8 88 00 00
	00		 mov	 r8d, 136		; 00000088H
  00056	33 d2		 xor	 edx, edx
  00058	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005f	e8 00 00 00 00	 call	 memset

; 1905 :     FontDataOwnedByAtlas = true;

  00064	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006b	c6 40 0c 01	 mov	 BYTE PTR [rax+12], 1

; 1906 :     OversampleH = 3; // FIXME: 2 may be a better default?

  0006f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00076	c7 40 18 03 00
	00 00		 mov	 DWORD PTR [rax+24], 3

; 1907 :     OversampleV = 1;

  0007d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00084	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [rax+28], 1

; 1908 :     GlyphMaxAdvanceX = FLT_MAX;

  0008b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00092	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  0009a	f3 0f 11 40 44	 movss	 DWORD PTR [rax+68], xmm0

; 1909 :     RasterizerMultiply = 1.0f;

  0009f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000ae	f3 0f 11 40 50	 movss	 DWORD PTR [rax+80], xmm0

; 1910 :     EllipsisChar = (ImWchar)-1;

  000b3	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  000b8	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000bf	66 89 41 54	 mov	 WORD PTR [rcx+84], ax

; 1911 : }

  000c3	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ca	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000d1	5f		 pop	 rdi
  000d2	5d		 pop	 rbp
  000d3	c3		 ret	 0
??0ImFontConfig@@QEAA@XZ ENDP				; ImFontConfig::ImFontConfig
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ScaleClipRects@ImDrawData@@QEAAXAEBUImVec2@@@Z
_TEXT	SEGMENT
i$1 = 4
cmd_list$2 = 40
cmd_i$3 = 68
cmd$4 = 104
$T5 = 324
tv132 = 356
this$ = 400
fb_scale$ = 408
?ScaleClipRects@ImDrawData@@QEAAXAEBUImVec2@@@Z PROC	; ImDrawData::ScaleClipRects, COMDAT

; 1833 : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	48 81 ec a0 01
	00 00		 sub	 rsp, 416		; 000001a0H
  00014	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 68 00 00 00	 mov	 ecx, 104		; 00000068H
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+456]

; 1834 :     for (int i = 0; i < CmdListsCount; i++)

  00030	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$1[rbp], 0
  00037	eb 08		 jmp	 SHORT $LN4@ScaleClipR
$LN2@ScaleClipR:
  00039	8b 45 04	 mov	 eax, DWORD PTR i$1[rbp]
  0003c	ff c0		 inc	 eax
  0003e	89 45 04	 mov	 DWORD PTR i$1[rbp], eax
$LN4@ScaleClipR:
  00041	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0004b	39 45 04	 cmp	 DWORD PTR i$1[rbp], eax
  0004e	0f 8d db 00 00
	00		 jge	 $LN3@ScaleClipR

; 1835 :     {
; 1836 :         ImDrawList* cmd_list = CmdLists[i];

  00054	48 63 45 04	 movsxd	 rax, DWORD PTR i$1[rbp]
  00058	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005f	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00063	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00067	48 89 45 28	 mov	 QWORD PTR cmd_list$2[rbp], rax

; 1837 :         for (int cmd_i = 0; cmd_i < cmd_list->CmdBuffer.Size; cmd_i++)

  0006b	c7 45 44 00 00
	00 00		 mov	 DWORD PTR cmd_i$3[rbp], 0
  00072	eb 08		 jmp	 SHORT $LN7@ScaleClipR
$LN5@ScaleClipR:
  00074	8b 45 44	 mov	 eax, DWORD PTR cmd_i$3[rbp]
  00077	ff c0		 inc	 eax
  00079	89 45 44	 mov	 DWORD PTR cmd_i$3[rbp], eax
$LN7@ScaleClipR:
  0007c	48 8b 45 28	 mov	 rax, QWORD PTR cmd_list$2[rbp]
  00080	8b 00		 mov	 eax, DWORD PTR [rax]
  00082	39 45 44	 cmp	 DWORD PTR cmd_i$3[rbp], eax
  00085	0f 8d 9f 00 00
	00		 jge	 $LN6@ScaleClipR

; 1838 :         {
; 1839 :             ImDrawCmd* cmd = &cmd_list->CmdBuffer[cmd_i];

  0008b	48 8b 45 28	 mov	 rax, QWORD PTR cmd_list$2[rbp]
  0008f	8b 55 44	 mov	 edx, DWORD PTR cmd_i$3[rbp]
  00092	48 8b c8	 mov	 rcx, rax
  00095	e8 00 00 00 00	 call	 ??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z ; ImVector<ImDrawCmd>::operator[]
  0009a	48 89 45 68	 mov	 QWORD PTR cmd$4[rbp], rax

; 1840 :             cmd->ClipRect = ImVec4(cmd->ClipRect.x * fb_scale.x, cmd->ClipRect.y * fb_scale.y, cmd->ClipRect.z * fb_scale.x, cmd->ClipRect.w * fb_scale.y);

  0009e	48 8b 45 68	 mov	 rax, QWORD PTR cmd$4[rbp]
  000a2	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR fb_scale$[rbp]
  000a9	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [rax+12]
  000ae	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [rcx+4]
  000b3	48 8b 45 68	 mov	 rax, QWORD PTR cmd$4[rbp]
  000b7	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR fb_scale$[rbp]
  000be	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [rax+8]
  000c3	f3 0f 59 09	 mulss	 xmm1, DWORD PTR [rcx]
  000c7	48 8b 45 68	 mov	 rax, QWORD PTR cmd$4[rbp]
  000cb	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR fb_scale$[rbp]
  000d2	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  000d7	f3 0f 59 51 04	 mulss	 xmm2, DWORD PTR [rcx+4]
  000dc	48 8b 45 68	 mov	 rax, QWORD PTR cmd$4[rbp]
  000e0	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR fb_scale$[rbp]
  000e7	f3 0f 10 18	 movss	 xmm3, DWORD PTR [rax]
  000eb	f3 0f 59 19	 mulss	 xmm3, DWORD PTR [rcx]
  000ef	f3 0f 11 9d 64
	01 00 00	 movss	 DWORD PTR tv132[rbp], xmm3
  000f7	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  000fd	0f 28 d9	 movaps	 xmm3, xmm1
  00100	f3 0f 10 85 64
	01 00 00	 movss	 xmm0, DWORD PTR tv132[rbp]
  00108	0f 28 c8	 movaps	 xmm1, xmm0
  0010b	48 8d 8d 44 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00112	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00117	48 8b 7d 68	 mov	 rdi, QWORD PTR cmd$4[rbp]
  0011b	48 8b f0	 mov	 rsi, rax
  0011e	b9 10 00 00 00	 mov	 ecx, 16
  00123	f3 a4		 rep movsb

; 1841 :         }

  00125	e9 4a ff ff ff	 jmp	 $LN5@ScaleClipR
$LN6@ScaleClipR:

; 1842 :     }

  0012a	e9 0a ff ff ff	 jmp	 $LN2@ScaleClipR
$LN3@ScaleClipR:

; 1843 : }

  0012f	48 8d a5 70 01
	00 00		 lea	 rsp, QWORD PTR [rbp+368]
  00136	5f		 pop	 rdi
  00137	5e		 pop	 rsi
  00138	5d		 pop	 rbp
  00139	c3		 ret	 0
?ScaleClipRects@ImDrawData@@QEAAXAEBUImVec2@@@Z ENDP	; ImDrawData::ScaleClipRects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?DeIndexAllBuffers@ImDrawData@@QEAAXXZ
_TEXT	SEGMENT
new_vtx_buffer$ = 8
i$4 = 52
cmd_list$5 = 88
j$6 = 116
$T7 = 344
tv94 = 360
__$ArrayPad$ = 368
this$ = 416
?DeIndexAllBuffers@ImDrawData@@QEAAXXZ PROC		; ImDrawData::DeIndexAllBuffers, COMDAT

; 1812 : {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec a0 01
	00 00		 sub	 rsp, 416		; 000001a0H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 68 00 00 00	 mov	 ecx, 104		; 00000068H
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+456]
  0002b	48 c7 85 58 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T7[rbp], -2
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 70 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1813 :     ImVector<ImDrawVert> new_vtx_buffer;

  00047	48 8d 4d 08	 lea	 rcx, QWORD PTR new_vtx_buffer$[rbp]
  0004b	e8 00 00 00 00	 call	 ??0?$ImVector@UImDrawVert@@@@QEAA@XZ ; ImVector<ImDrawVert>::ImVector<ImDrawVert>
  00050	90		 npad	 1

; 1814 :     TotalVtxCount = TotalIdxCount = 0;

  00051	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00058	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [rax+8], 0
  0005f	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00066	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [rax+12], 0

; 1815 :     for (int i = 0; i < CmdListsCount; i++)

  0006d	c7 45 34 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  00074	eb 08		 jmp	 SHORT $LN4@DeIndexAll
$LN2@DeIndexAll:
  00076	8b 45 34	 mov	 eax, DWORD PTR i$4[rbp]
  00079	ff c0		 inc	 eax
  0007b	89 45 34	 mov	 DWORD PTR i$4[rbp], eax
$LN4@DeIndexAll:
  0007e	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00085	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00088	39 45 34	 cmp	 DWORD PTR i$4[rbp], eax
  0008b	0f 8d f1 00 00
	00		 jge	 $LN3@DeIndexAll

; 1816 :     {
; 1817 :         ImDrawList* cmd_list = CmdLists[i];

  00091	48 63 45 34	 movsxd	 rax, DWORD PTR i$4[rbp]
  00095	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009c	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000a0	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  000a4	48 89 45 58	 mov	 QWORD PTR cmd_list$5[rbp], rax

; 1818 :         if (cmd_list->IdxBuffer.empty())

  000a8	48 8b 45 58	 mov	 rax, QWORD PTR cmd_list$5[rbp]
  000ac	48 83 c0 10	 add	 rax, 16
  000b0	48 8b c8	 mov	 rcx, rax
  000b3	e8 00 00 00 00	 call	 ?empty@?$ImVector@G@@QEBA_NXZ ; ImVector<unsigned short>::empty
  000b8	0f b6 c0	 movzx	 eax, al
  000bb	85 c0		 test	 eax, eax
  000bd	74 02		 je	 SHORT $LN8@DeIndexAll

; 1819 :             continue;

  000bf	eb b5		 jmp	 SHORT $LN2@DeIndexAll
$LN8@DeIndexAll:

; 1820 :         new_vtx_buffer.resize(cmd_list->IdxBuffer.Size);

  000c1	48 8b 45 58	 mov	 rax, QWORD PTR cmd_list$5[rbp]
  000c5	8b 50 10	 mov	 edx, DWORD PTR [rax+16]
  000c8	48 8d 4d 08	 lea	 rcx, QWORD PTR new_vtx_buffer$[rbp]
  000cc	e8 00 00 00 00	 call	 ?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z ; ImVector<ImDrawVert>::resize

; 1821 :         for (int j = 0; j < cmd_list->IdxBuffer.Size; j++)

  000d1	c7 45 74 00 00
	00 00		 mov	 DWORD PTR j$6[rbp], 0
  000d8	eb 08		 jmp	 SHORT $LN7@DeIndexAll
$LN5@DeIndexAll:
  000da	8b 45 74	 mov	 eax, DWORD PTR j$6[rbp]
  000dd	ff c0		 inc	 eax
  000df	89 45 74	 mov	 DWORD PTR j$6[rbp], eax
$LN7@DeIndexAll:
  000e2	48 8b 45 58	 mov	 rax, QWORD PTR cmd_list$5[rbp]
  000e6	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  000e9	39 45 74	 cmp	 DWORD PTR j$6[rbp], eax
  000ec	7d 4e		 jge	 SHORT $LN6@DeIndexAll

; 1822 :             new_vtx_buffer[j] = cmd_list->VtxBuffer[cmd_list->IdxBuffer[j]];

  000ee	48 8b 45 58	 mov	 rax, QWORD PTR cmd_list$5[rbp]
  000f2	48 83 c0 10	 add	 rax, 16
  000f6	8b 55 74	 mov	 edx, DWORD PTR j$6[rbp]
  000f9	48 8b c8	 mov	 rcx, rax
  000fc	e8 00 00 00 00	 call	 ??A?$ImVector@G@@QEAAAEAGH@Z ; ImVector<unsigned short>::operator[]
  00101	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00104	48 8b 4d 58	 mov	 rcx, QWORD PTR cmd_list$5[rbp]
  00108	48 83 c1 20	 add	 rcx, 32			; 00000020H
  0010c	8b d0		 mov	 edx, eax
  0010e	e8 00 00 00 00	 call	 ??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z ; ImVector<ImDrawVert>::operator[]
  00113	48 89 85 68 01
	00 00		 mov	 QWORD PTR tv94[rbp], rax
  0011a	8b 55 74	 mov	 edx, DWORD PTR j$6[rbp]
  0011d	48 8d 4d 08	 lea	 rcx, QWORD PTR new_vtx_buffer$[rbp]
  00121	e8 00 00 00 00	 call	 ??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z ; ImVector<ImDrawVert>::operator[]
  00126	48 8b f8	 mov	 rdi, rax
  00129	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR tv94[rbp]
  00130	48 8b f0	 mov	 rsi, rax
  00133	b9 14 00 00 00	 mov	 ecx, 20
  00138	f3 a4		 rep movsb
  0013a	eb 9e		 jmp	 SHORT $LN5@DeIndexAll
$LN6@DeIndexAll:

; 1823 :         cmd_list->VtxBuffer.swap(new_vtx_buffer);

  0013c	48 8b 45 58	 mov	 rax, QWORD PTR cmd_list$5[rbp]
  00140	48 83 c0 20	 add	 rax, 32			; 00000020H
  00144	48 8d 55 08	 lea	 rdx, QWORD PTR new_vtx_buffer$[rbp]
  00148	48 8b c8	 mov	 rcx, rax
  0014b	e8 00 00 00 00	 call	 ?swap@?$ImVector@UImDrawVert@@@@QEAAXAEAU1@@Z ; ImVector<ImDrawVert>::swap

; 1824 :         cmd_list->IdxBuffer.resize(0);

  00150	48 8b 45 58	 mov	 rax, QWORD PTR cmd_list$5[rbp]
  00154	48 83 c0 10	 add	 rax, 16
  00158	33 d2		 xor	 edx, edx
  0015a	48 8b c8	 mov	 rcx, rax
  0015d	e8 00 00 00 00	 call	 ?resize@?$ImVector@G@@QEAAXH@Z ; ImVector<unsigned short>::resize

; 1825 :         TotalVtxCount += cmd_list->VtxBuffer.Size;

  00162	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00169	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0016c	48 8b 4d 58	 mov	 rcx, QWORD PTR cmd_list$5[rbp]
  00170	03 41 20	 add	 eax, DWORD PTR [rcx+32]
  00173	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017a	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 1826 :     }

  0017d	e9 f4 fe ff ff	 jmp	 $LN2@DeIndexAll
$LN3@DeIndexAll:

; 1827 : }

  00182	48 8d 4d 08	 lea	 rcx, QWORD PTR new_vtx_buffer$[rbp]
  00186	e8 00 00 00 00	 call	 ??1?$ImVector@UImDrawVert@@@@QEAA@XZ ; ImVector<ImDrawVert>::~ImVector<ImDrawVert>
  0018b	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0018f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?DeIndexAllBuffers@ImDrawData@@QEAAXXZ$rtcFrameData
  00196	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0019b	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001a2	48 33 cd	 xor	 rcx, rbp
  001a5	e8 00 00 00 00	 call	 __security_check_cookie
  001aa	48 8d a5 80 01
	00 00		 lea	 rsp, QWORD PTR [rbp+384]
  001b1	5f		 pop	 rdi
  001b2	5e		 pop	 rsi
  001b3	5d		 pop	 rbp
  001b4	c3		 ret	 0
?DeIndexAllBuffers@ImDrawData@@QEAAXXZ ENDP		; ImDrawData::DeIndexAllBuffers
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
new_vtx_buffer$ = 8
i$4 = 52
cmd_list$5 = 88
j$6 = 116
$T7 = 344
tv94 = 360
__$ArrayPad$ = 368
this$ = 416
?dtor$0@?0??DeIndexAllBuffers@ImDrawData@@QEAAXXZ@4HA PROC ; `ImDrawData::DeIndexAllBuffers'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR new_vtx_buffer$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$ImVector@UImDrawVert@@@@QEAA@XZ ; ImVector<ImDrawVert>::~ImVector<ImDrawVert>
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??DeIndexAllBuffers@ImDrawData@@QEAAXXZ@4HA ENDP ; `ImDrawData::DeIndexAllBuffers'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
new_vtx_buffer$ = 8
i$4 = 52
cmd_list$5 = 88
j$6 = 116
$T7 = 344
tv94 = 360
__$ArrayPad$ = 368
this$ = 416
?dtor$0@?0??DeIndexAllBuffers@ImDrawData@@QEAAXXZ@4HA PROC ; `ImDrawData::DeIndexAllBuffers'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR new_vtx_buffer$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$ImVector@UImDrawVert@@@@QEAA@XZ ; ImVector<ImDrawVert>::~ImVector<ImDrawVert>
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??DeIndexAllBuffers@ImDrawData@@QEAAXXZ@4HA ENDP ; `ImDrawData::DeIndexAllBuffers'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z
_TEXT	SEGMENT
i$1 = 4
a$2 = 36
$T3 = 260
tv91 = 276
this$ = 320
center$ = 328
radius$ = 336
a_min$ = 344
a_max$ = 352
num_segments$ = 360
?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z PROC	; ImDrawList::_PathArcToN, COMDAT

; 1140 : {

$LN7:
  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00011	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00016	55		 push	 rbp
  00017	57		 push	 rdi
  00018	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00024	48 8b fc	 mov	 rdi, rsp
  00027	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]

; 1141 :     if (radius < 0.5f)

  0003b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00043	0f 2f 85 50 01
	00 00		 comiss	 xmm0, DWORD PTR radius$[rbp]
  0004a	76 1f		 jbe	 SHORT $LN5@PathArcToN

; 1142 :     {
; 1143 :         _Path.push_back(center);

  0004c	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 83 c0 78	 add	 rax, 120		; 00000078H
  00057	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR center$[rbp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back

; 1144 :         return;

  00066	e9 04 01 00 00	 jmp	 $LN1@PathArcToN
$LN5@PathArcToN:

; 1145 :     }
; 1146 : 
; 1147 :     // Note that we are adding a point at both a_min and a_max.
; 1148 :     // If you are trying to draw a full closed circle you don't want the overlapping points!
; 1149 :     _Path.reserve(_Path.Size + (num_segments + 1));

  0006b	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00075	8b 8d 68 01 00
	00		 mov	 ecx, DWORD PTR num_segments$[rbp]
  0007b	8d 44 01 01	 lea	 eax, DWORD PTR [rcx+rax+1]
  0007f	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00086	48 83 c1 78	 add	 rcx, 120		; 00000078H
  0008a	8b d0		 mov	 edx, eax
  0008c	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z ; ImVector<ImVec2>::reserve

; 1150 :     for (int i = 0; i <= num_segments; i++)

  00091	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$1[rbp], 0
  00098	eb 08		 jmp	 SHORT $LN4@PathArcToN
$LN2@PathArcToN:
  0009a	8b 45 04	 mov	 eax, DWORD PTR i$1[rbp]
  0009d	ff c0		 inc	 eax
  0009f	89 45 04	 mov	 DWORD PTR i$1[rbp], eax
$LN4@PathArcToN:
  000a2	8b 85 68 01 00
	00		 mov	 eax, DWORD PTR num_segments$[rbp]
  000a8	39 45 04	 cmp	 DWORD PTR i$1[rbp], eax
  000ab	0f 8f be 00 00
	00		 jg	 $LN3@PathArcToN

; 1151 :     {
; 1152 :         const float a = a_min + ((float)i / (float)num_segments) * (a_max - a_min);

  000b1	f3 0f 2a 45 04	 cvtsi2ss xmm0, DWORD PTR i$1[rbp]
  000b6	f3 0f 2a 8d 68
	01 00 00	 cvtsi2ss xmm1, DWORD PTR num_segments$[rbp]
  000be	f3 0f 5e c1	 divss	 xmm0, xmm1
  000c2	f3 0f 10 8d 60
	01 00 00	 movss	 xmm1, DWORD PTR a_max$[rbp]
  000ca	f3 0f 5c 8d 58
	01 00 00	 subss	 xmm1, DWORD PTR a_min$[rbp]
  000d2	f3 0f 59 c1	 mulss	 xmm0, xmm1
  000d6	f3 0f 10 8d 58
	01 00 00	 movss	 xmm1, DWORD PTR a_min$[rbp]
  000de	f3 0f 58 c8	 addss	 xmm1, xmm0
  000e2	0f 28 c1	 movaps	 xmm0, xmm1
  000e5	f3 0f 11 45 24	 movss	 DWORD PTR a$2[rbp], xmm0

; 1153 :         _Path.push_back(ImVec2(center.x + ImCos(a) * radius, center.y + ImSin(a) * radius));

  000ea	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR a$2[rbp]
  000ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sinf
  000f5	f3 0f 59 85 50
	01 00 00	 mulss	 xmm0, DWORD PTR radius$[rbp]
  000fd	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR center$[rbp]
  00104	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [rax+4]
  00109	f3 0f 58 c8	 addss	 xmm1, xmm0
  0010d	0f 28 c1	 movaps	 xmm0, xmm1
  00110	f3 0f 11 85 14
	01 00 00	 movss	 DWORD PTR tv91[rbp], xmm0
  00118	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR a$2[rbp]
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cosf
  00123	f3 0f 59 85 50
	01 00 00	 mulss	 xmm0, DWORD PTR radius$[rbp]
  0012b	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR center$[rbp]
  00132	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00136	f3 0f 58 c8	 addss	 xmm1, xmm0
  0013a	0f 28 c1	 movaps	 xmm0, xmm1
  0013d	f3 0f 10 8d 14
	01 00 00	 movss	 xmm1, DWORD PTR tv91[rbp]
  00145	0f 28 d1	 movaps	 xmm2, xmm1
  00148	0f 28 c8	 movaps	 xmm1, xmm0
  0014b	48 8d 8d 04 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  00152	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00157	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0015e	48 83 c1 78	 add	 rcx, 120		; 00000078H
  00162	48 8b d0	 mov	 rdx, rax
  00165	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back

; 1154 :     }

  0016a	e9 2b ff ff ff	 jmp	 $LN2@PathArcToN
$LN3@PathArcToN:
$LN1@PathArcToN:

; 1155 : }

  0016f	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00176	5f		 pop	 rdi
  00177	5d		 pop	 rbp
  00178	c3		 ret	 0
?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ENDP	; ImDrawList::_PathArcToN
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z
_TEXT	SEGMENT
sample_range$ = 4
a_next_step$ = 36
samples$ = 68
extra_max_sample$ = 100
overstep$6 = 132
out_ptr$ = 168
sample_index$ = 196
a$7 = 228
s$8 = 264
a$9 = 292
s$10 = 328
normalized_max_sample$11 = 356
s$12 = 392
tv70 = 596
__$ArrayPad$ = 600
this$ = 640
center$ = 648
radius$ = 656
a_min_sample$ = 664
a_max_sample$ = 672
a_step$ = 680
?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z PROC ; ImDrawList::_PathArcToFastEx, COMDAT

; 1048 : {

$LN23:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec 88 02
	00 00		 sub	 rsp, 648		; 00000288H
  0001e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+680]
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 58 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1049 :     if (radius < 0.5f)

  0004b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00053	0f 2f 85 90 02
	00 00		 comiss	 xmm0, DWORD PTR radius$[rbp]
  0005a	76 1f		 jbe	 SHORT $LN8@PathArcToF

; 1050 :     {
; 1051 :         _Path.push_back(center);

  0005c	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00063	48 83 c0 78	 add	 rax, 120		; 00000078H
  00067	48 8b 95 88 02
	00 00		 mov	 rdx, QWORD PTR center$[rbp]
  0006e	48 8b c8	 mov	 rcx, rax
  00071	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back

; 1052 :         return;

  00076	e9 5a 04 00 00	 jmp	 $LN1@PathArcToF
$LN8@PathArcToF:

; 1053 :     }
; 1054 : 
; 1055 :     // Calculate arc auto segment step size
; 1056 :     if (a_step <= 0)

  0007b	83 bd a8 02 00
	00 00		 cmp	 DWORD PTR a_step$[rbp], 0
  00082	7f 2e		 jg	 SHORT $LN9@PathArcToF

; 1057 :         a_step = IM_DRAWLIST_ARCFAST_SAMPLE_MAX / _CalcCircleAutoSegmentCount(radius);

  00084	f3 0f 10 8d 90
	02 00 00	 movss	 xmm1, DWORD PTR radius$[rbp]
  0008c	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00093	e8 00 00 00 00	 call	 ?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z ; ImDrawList::_CalcCircleAutoSegmentCount
  00098	89 85 54 02 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  0009e	b8 30 00 00 00	 mov	 eax, 48			; 00000030H
  000a3	99		 cdq
  000a4	8b 8d 54 02 00
	00		 mov	 ecx, DWORD PTR tv70[rbp]
  000aa	f7 f9		 idiv	 ecx
  000ac	89 85 a8 02 00
	00		 mov	 DWORD PTR a_step$[rbp], eax
$LN9@PathArcToF:

; 1058 : 
; 1059 :     // Make sure we never do steps larger than one quarter of the circle
; 1060 :     a_step = ImClamp(a_step, 1, IM_DRAWLIST_ARCFAST_TABLE_SIZE / 4);

  000b2	41 b8 0c 00 00
	00		 mov	 r8d, 12
  000b8	ba 01 00 00 00	 mov	 edx, 1
  000bd	8b 8d a8 02 00
	00		 mov	 ecx, DWORD PTR a_step$[rbp]
  000c3	e8 00 00 00 00	 call	 ??$ImClamp@H@@YAHHHH@Z	; ImClamp<int>
  000c8	89 85 a8 02 00
	00		 mov	 DWORD PTR a_step$[rbp], eax

; 1061 : 
; 1062 :     const int sample_range = ImAbs(a_max_sample - a_min_sample);

  000ce	8b 85 98 02 00
	00		 mov	 eax, DWORD PTR a_min_sample$[rbp]
  000d4	8b 8d a0 02 00
	00		 mov	 ecx, DWORD PTR a_max_sample$[rbp]
  000da	2b c8		 sub	 ecx, eax
  000dc	8b c1		 mov	 eax, ecx
  000de	8b c8		 mov	 ecx, eax
  000e0	e8 00 00 00 00	 call	 ?ImAbs@@YAHH@Z		; ImAbs
  000e5	89 45 04	 mov	 DWORD PTR sample_range$[rbp], eax

; 1063 :     const int a_next_step = a_step;

  000e8	8b 85 a8 02 00
	00		 mov	 eax, DWORD PTR a_step$[rbp]
  000ee	89 45 24	 mov	 DWORD PTR a_next_step$[rbp], eax

; 1064 : 
; 1065 :     int samples = sample_range + 1;

  000f1	8b 45 04	 mov	 eax, DWORD PTR sample_range$[rbp]
  000f4	ff c0		 inc	 eax
  000f6	89 45 44	 mov	 DWORD PTR samples$[rbp], eax

; 1066 :     bool extra_max_sample = false;

  000f9	c6 45 64 00	 mov	 BYTE PTR extra_max_sample$[rbp], 0

; 1067 :     if (a_step > 1)

  000fd	83 bd a8 02 00
	00 01		 cmp	 DWORD PTR a_step$[rbp], 1
  00104	7e 61		 jle	 SHORT $LN10@PathArcToF

; 1068 :     {
; 1069 :         samples            = sample_range / a_step + 1;

  00106	8b 45 04	 mov	 eax, DWORD PTR sample_range$[rbp]
  00109	99		 cdq
  0010a	f7 bd a8 02 00
	00		 idiv	 DWORD PTR a_step$[rbp]
  00110	ff c0		 inc	 eax
  00112	89 45 44	 mov	 DWORD PTR samples$[rbp], eax

; 1070 :         const int overstep = sample_range % a_step;

  00115	8b 45 04	 mov	 eax, DWORD PTR sample_range$[rbp]
  00118	99		 cdq
  00119	f7 bd a8 02 00
	00		 idiv	 DWORD PTR a_step$[rbp]
  0011f	8b c2		 mov	 eax, edx
  00121	89 85 84 00 00
	00		 mov	 DWORD PTR overstep$6[rbp], eax

; 1071 : 
; 1072 :         if (overstep > 0)

  00127	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR overstep$6[rbp], 0
  0012e	7e 37		 jle	 SHORT $LN11@PathArcToF

; 1073 :         {
; 1074 :             extra_max_sample = true;

  00130	c6 45 64 01	 mov	 BYTE PTR extra_max_sample$[rbp], 1

; 1075 :             samples++;

  00134	8b 45 44	 mov	 eax, DWORD PTR samples$[rbp]
  00137	ff c0		 inc	 eax
  00139	89 45 44	 mov	 DWORD PTR samples$[rbp], eax

; 1076 : 
; 1077 :             // When we have overstep to avoid awkwardly looking one long line and one tiny one at the end,
; 1078 :             // distribute first step range evenly between them by reducing first step size.
; 1079 :             if (sample_range > 0)

  0013c	83 7d 04 00	 cmp	 DWORD PTR sample_range$[rbp], 0
  00140	7e 25		 jle	 SHORT $LN12@PathArcToF

; 1080 :                 a_step -= (a_step - overstep) / 2;

  00142	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR overstep$6[rbp]
  00148	8b 8d a8 02 00
	00		 mov	 ecx, DWORD PTR a_step$[rbp]
  0014e	2b c8		 sub	 ecx, eax
  00150	8b c1		 mov	 eax, ecx
  00152	99		 cdq
  00153	2b c2		 sub	 eax, edx
  00155	d1 f8		 sar	 eax, 1
  00157	8b 8d a8 02 00
	00		 mov	 ecx, DWORD PTR a_step$[rbp]
  0015d	2b c8		 sub	 ecx, eax
  0015f	8b c1		 mov	 eax, ecx
  00161	89 85 a8 02 00
	00		 mov	 DWORD PTR a_step$[rbp], eax
$LN12@PathArcToF:
$LN11@PathArcToF:
$LN10@PathArcToF:

; 1081 :         }
; 1082 :     }
; 1083 : 
; 1084 :     _Path.resize(_Path.Size + samples);

  00167	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0016e	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00171	03 45 44	 add	 eax, DWORD PTR samples$[rbp]
  00174	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017b	48 83 c1 78	 add	 rcx, 120		; 00000078H
  0017f	8b d0		 mov	 edx, eax
  00181	e8 00 00 00 00	 call	 ?resize@?$ImVector@UImVec2@@@@QEAAXH@Z ; ImVector<ImVec2>::resize

; 1085 :     ImVec2* out_ptr = _Path.Data + (_Path.Size - samples);

  00186	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0018d	8b 4d 44	 mov	 ecx, DWORD PTR samples$[rbp]
  00190	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00193	2b c1		 sub	 eax, ecx
  00195	48 98		 cdqe
  00197	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0019e	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  001a5	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001a9	48 89 85 a8 00
	00 00		 mov	 QWORD PTR out_ptr$[rbp], rax

; 1086 : 
; 1087 :     int sample_index = a_min_sample;

  001b0	8b 85 98 02 00
	00		 mov	 eax, DWORD PTR a_min_sample$[rbp]
  001b6	89 85 c4 00 00
	00		 mov	 DWORD PTR sample_index$[rbp], eax

; 1088 :     if (sample_index < 0 || sample_index >= IM_DRAWLIST_ARCFAST_SAMPLE_MAX)

  001bc	83 bd c4 00 00
	00 00		 cmp	 DWORD PTR sample_index$[rbp], 0
  001c3	7c 09		 jl	 SHORT $LN14@PathArcToF
  001c5	83 bd c4 00 00
	00 30		 cmp	 DWORD PTR sample_index$[rbp], 48 ; 00000030H
  001cc	7c 2e		 jl	 SHORT $LN13@PathArcToF
$LN14@PathArcToF:

; 1089 :     {
; 1090 :         sample_index = sample_index % IM_DRAWLIST_ARCFAST_SAMPLE_MAX;

  001ce	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR sample_index$[rbp]
  001d4	99		 cdq
  001d5	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  001da	f7 f9		 idiv	 ecx
  001dc	8b c2		 mov	 eax, edx
  001de	89 85 c4 00 00
	00		 mov	 DWORD PTR sample_index$[rbp], eax

; 1091 :         if (sample_index < 0)

  001e4	83 bd c4 00 00
	00 00		 cmp	 DWORD PTR sample_index$[rbp], 0
  001eb	7d 0f		 jge	 SHORT $LN15@PathArcToF

; 1092 :             sample_index += IM_DRAWLIST_ARCFAST_SAMPLE_MAX;

  001ed	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR sample_index$[rbp]
  001f3	83 c0 30	 add	 eax, 48			; 00000030H
  001f6	89 85 c4 00 00
	00		 mov	 DWORD PTR sample_index$[rbp], eax
$LN15@PathArcToF:
$LN13@PathArcToF:

; 1093 :     }
; 1094 : 
; 1095 :     if (a_max_sample >= a_min_sample)

  001fc	8b 85 98 02 00
	00		 mov	 eax, DWORD PTR a_min_sample$[rbp]
  00202	39 85 a0 02 00
	00		 cmp	 DWORD PTR a_max_sample$[rbp], eax
  00208	0f 8c 03 01 00
	00		 jl	 $LN16@PathArcToF

; 1096 :     {
; 1097 :         for (int a = a_min_sample; a <= a_max_sample; a += a_step, sample_index += a_step, a_step = a_next_step)

  0020e	8b 85 98 02 00
	00		 mov	 eax, DWORD PTR a_min_sample$[rbp]
  00214	89 85 e4 00 00
	00		 mov	 DWORD PTR a$7[rbp], eax
  0021a	eb 35		 jmp	 SHORT $LN4@PathArcToF
$LN2@PathArcToF:
  0021c	8b 85 a8 02 00
	00		 mov	 eax, DWORD PTR a_step$[rbp]
  00222	8b 8d e4 00 00
	00		 mov	 ecx, DWORD PTR a$7[rbp]
  00228	03 c8		 add	 ecx, eax
  0022a	8b c1		 mov	 eax, ecx
  0022c	89 85 e4 00 00
	00		 mov	 DWORD PTR a$7[rbp], eax
  00232	8b 85 a8 02 00
	00		 mov	 eax, DWORD PTR a_step$[rbp]
  00238	8b 8d c4 00 00
	00		 mov	 ecx, DWORD PTR sample_index$[rbp]
  0023e	03 c8		 add	 ecx, eax
  00240	8b c1		 mov	 eax, ecx
  00242	89 85 c4 00 00
	00		 mov	 DWORD PTR sample_index$[rbp], eax
  00248	8b 45 24	 mov	 eax, DWORD PTR a_next_step$[rbp]
  0024b	89 85 a8 02 00
	00		 mov	 DWORD PTR a_step$[rbp], eax
$LN4@PathArcToF:
  00251	8b 85 a0 02 00
	00		 mov	 eax, DWORD PTR a_max_sample$[rbp]
  00257	39 85 e4 00 00
	00		 cmp	 DWORD PTR a$7[rbp], eax
  0025d	0f 8f a9 00 00
	00		 jg	 $LN3@PathArcToF

; 1098 :         {
; 1099 :             // a_step is clamped to IM_DRAWLIST_ARCFAST_SAMPLE_MAX, so we have guaranteed that it will not wrap over range twice or more
; 1100 :             if (sample_index >= IM_DRAWLIST_ARCFAST_SAMPLE_MAX)

  00263	83 bd c4 00 00
	00 30		 cmp	 DWORD PTR sample_index$[rbp], 48 ; 00000030H
  0026a	7c 0f		 jl	 SHORT $LN18@PathArcToF

; 1101 :                 sample_index -= IM_DRAWLIST_ARCFAST_SAMPLE_MAX;

  0026c	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR sample_index$[rbp]
  00272	83 e8 30	 sub	 eax, 48			; 00000030H
  00275	89 85 c4 00 00
	00		 mov	 DWORD PTR sample_index$[rbp], eax
$LN18@PathArcToF:

; 1102 : 
; 1103 :             const ImVec2 s = _Data->ArcFastVtx[sample_index];

  0027b	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00282	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00286	48 63 8d c4 00
	00 00		 movsxd	 rcx, DWORD PTR sample_index$[rbp]
  0028d	48 8b 44 c8 40	 mov	 rax, QWORD PTR [rax+rcx*8+64]
  00292	48 89 85 08 01
	00 00		 mov	 QWORD PTR s$8[rbp], rax

; 1104 :             out_ptr->x = center.x + s.x * radius;

  00299	f3 0f 10 85 08
	01 00 00	 movss	 xmm0, DWORD PTR s$8[rbp]
  002a1	f3 0f 59 85 90
	02 00 00	 mulss	 xmm0, DWORD PTR radius$[rbp]
  002a9	48 8b 85 88 02
	00 00		 mov	 rax, QWORD PTR center$[rbp]
  002b0	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  002b4	f3 0f 58 c8	 addss	 xmm1, xmm0
  002b8	0f 28 c1	 movaps	 xmm0, xmm1
  002bb	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR out_ptr$[rbp]
  002c2	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 1105 :             out_ptr->y = center.y + s.y * radius;

  002c6	f3 0f 10 85 0c
	01 00 00	 movss	 xmm0, DWORD PTR s$8[rbp+4]
  002ce	f3 0f 59 85 90
	02 00 00	 mulss	 xmm0, DWORD PTR radius$[rbp]
  002d6	48 8b 85 88 02
	00 00		 mov	 rax, QWORD PTR center$[rbp]
  002dd	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [rax+4]
  002e2	f3 0f 58 c8	 addss	 xmm1, xmm0
  002e6	0f 28 c1	 movaps	 xmm0, xmm1
  002e9	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR out_ptr$[rbp]
  002f0	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0

; 1106 :             out_ptr++;

  002f5	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR out_ptr$[rbp]
  002fc	48 83 c0 08	 add	 rax, 8
  00300	48 89 85 a8 00
	00 00		 mov	 QWORD PTR out_ptr$[rbp], rax

; 1107 :         }

  00307	e9 10 ff ff ff	 jmp	 $LN2@PathArcToF
$LN3@PathArcToF:

; 1108 :     }
; 1109 :     else

  0030c	e9 fe 00 00 00	 jmp	 $LN17@PathArcToF
$LN16@PathArcToF:

; 1110 :     {
; 1111 :         for (int a = a_min_sample; a >= a_max_sample; a -= a_step, sample_index -= a_step, a_step = a_next_step)

  00311	8b 85 98 02 00
	00		 mov	 eax, DWORD PTR a_min_sample$[rbp]
  00317	89 85 24 01 00
	00		 mov	 DWORD PTR a$9[rbp], eax
  0031d	eb 35		 jmp	 SHORT $LN7@PathArcToF
$LN5@PathArcToF:
  0031f	8b 85 a8 02 00
	00		 mov	 eax, DWORD PTR a_step$[rbp]
  00325	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR a$9[rbp]
  0032b	2b c8		 sub	 ecx, eax
  0032d	8b c1		 mov	 eax, ecx
  0032f	89 85 24 01 00
	00		 mov	 DWORD PTR a$9[rbp], eax
  00335	8b 85 a8 02 00
	00		 mov	 eax, DWORD PTR a_step$[rbp]
  0033b	8b 8d c4 00 00
	00		 mov	 ecx, DWORD PTR sample_index$[rbp]
  00341	2b c8		 sub	 ecx, eax
  00343	8b c1		 mov	 eax, ecx
  00345	89 85 c4 00 00
	00		 mov	 DWORD PTR sample_index$[rbp], eax
  0034b	8b 45 24	 mov	 eax, DWORD PTR a_next_step$[rbp]
  0034e	89 85 a8 02 00
	00		 mov	 DWORD PTR a_step$[rbp], eax
$LN7@PathArcToF:
  00354	8b 85 a0 02 00
	00		 mov	 eax, DWORD PTR a_max_sample$[rbp]
  0035a	39 85 24 01 00
	00		 cmp	 DWORD PTR a$9[rbp], eax
  00360	0f 8c a9 00 00
	00		 jl	 $LN6@PathArcToF

; 1112 :         {
; 1113 :             // a_step is clamped to IM_DRAWLIST_ARCFAST_SAMPLE_MAX, so we have guaranteed that it will not wrap over range twice or more
; 1114 :             if (sample_index < 0)

  00366	83 bd c4 00 00
	00 00		 cmp	 DWORD PTR sample_index$[rbp], 0
  0036d	7d 0f		 jge	 SHORT $LN19@PathArcToF

; 1115 :                 sample_index += IM_DRAWLIST_ARCFAST_SAMPLE_MAX;

  0036f	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR sample_index$[rbp]
  00375	83 c0 30	 add	 eax, 48			; 00000030H
  00378	89 85 c4 00 00
	00		 mov	 DWORD PTR sample_index$[rbp], eax
$LN19@PathArcToF:

; 1116 : 
; 1117 :             const ImVec2 s = _Data->ArcFastVtx[sample_index];

  0037e	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00385	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00389	48 63 8d c4 00
	00 00		 movsxd	 rcx, DWORD PTR sample_index$[rbp]
  00390	48 8b 44 c8 40	 mov	 rax, QWORD PTR [rax+rcx*8+64]
  00395	48 89 85 48 01
	00 00		 mov	 QWORD PTR s$10[rbp], rax

; 1118 :             out_ptr->x = center.x + s.x * radius;

  0039c	f3 0f 10 85 48
	01 00 00	 movss	 xmm0, DWORD PTR s$10[rbp]
  003a4	f3 0f 59 85 90
	02 00 00	 mulss	 xmm0, DWORD PTR radius$[rbp]
  003ac	48 8b 85 88 02
	00 00		 mov	 rax, QWORD PTR center$[rbp]
  003b3	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  003b7	f3 0f 58 c8	 addss	 xmm1, xmm0
  003bb	0f 28 c1	 movaps	 xmm0, xmm1
  003be	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR out_ptr$[rbp]
  003c5	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 1119 :             out_ptr->y = center.y + s.y * radius;

  003c9	f3 0f 10 85 4c
	01 00 00	 movss	 xmm0, DWORD PTR s$10[rbp+4]
  003d1	f3 0f 59 85 90
	02 00 00	 mulss	 xmm0, DWORD PTR radius$[rbp]
  003d9	48 8b 85 88 02
	00 00		 mov	 rax, QWORD PTR center$[rbp]
  003e0	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [rax+4]
  003e5	f3 0f 58 c8	 addss	 xmm1, xmm0
  003e9	0f 28 c1	 movaps	 xmm0, xmm1
  003ec	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR out_ptr$[rbp]
  003f3	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0

; 1120 :             out_ptr++;

  003f8	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR out_ptr$[rbp]
  003ff	48 83 c0 08	 add	 rax, 8
  00403	48 89 85 a8 00
	00 00		 mov	 QWORD PTR out_ptr$[rbp], rax

; 1121 :         }

  0040a	e9 10 ff ff ff	 jmp	 $LN5@PathArcToF
$LN6@PathArcToF:
$LN17@PathArcToF:

; 1122 :     }
; 1123 : 
; 1124 :     if (extra_max_sample)

  0040f	0f b6 45 64	 movzx	 eax, BYTE PTR extra_max_sample$[rbp]
  00413	85 c0		 test	 eax, eax
  00415	0f 84 ba 00 00
	00		 je	 $LN20@PathArcToF

; 1125 :     {
; 1126 :         int normalized_max_sample = a_max_sample % IM_DRAWLIST_ARCFAST_SAMPLE_MAX;

  0041b	8b 85 a0 02 00
	00		 mov	 eax, DWORD PTR a_max_sample$[rbp]
  00421	99		 cdq
  00422	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00427	f7 f9		 idiv	 ecx
  00429	8b c2		 mov	 eax, edx
  0042b	89 85 64 01 00
	00		 mov	 DWORD PTR normalized_max_sample$11[rbp], eax

; 1127 :         if (normalized_max_sample < 0)

  00431	83 bd 64 01 00
	00 00		 cmp	 DWORD PTR normalized_max_sample$11[rbp], 0
  00438	7d 0f		 jge	 SHORT $LN21@PathArcToF

; 1128 :             normalized_max_sample += IM_DRAWLIST_ARCFAST_SAMPLE_MAX;

  0043a	8b 85 64 01 00
	00		 mov	 eax, DWORD PTR normalized_max_sample$11[rbp]
  00440	83 c0 30	 add	 eax, 48			; 00000030H
  00443	89 85 64 01 00
	00		 mov	 DWORD PTR normalized_max_sample$11[rbp], eax
$LN21@PathArcToF:

; 1129 : 
; 1130 :         const ImVec2 s = _Data->ArcFastVtx[normalized_max_sample];

  00449	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00450	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00454	48 63 8d 64 01
	00 00		 movsxd	 rcx, DWORD PTR normalized_max_sample$11[rbp]
  0045b	48 8b 44 c8 40	 mov	 rax, QWORD PTR [rax+rcx*8+64]
  00460	48 89 85 88 01
	00 00		 mov	 QWORD PTR s$12[rbp], rax

; 1131 :         out_ptr->x = center.x + s.x * radius;

  00467	f3 0f 10 85 88
	01 00 00	 movss	 xmm0, DWORD PTR s$12[rbp]
  0046f	f3 0f 59 85 90
	02 00 00	 mulss	 xmm0, DWORD PTR radius$[rbp]
  00477	48 8b 85 88 02
	00 00		 mov	 rax, QWORD PTR center$[rbp]
  0047e	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00482	f3 0f 58 c8	 addss	 xmm1, xmm0
  00486	0f 28 c1	 movaps	 xmm0, xmm1
  00489	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR out_ptr$[rbp]
  00490	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 1132 :         out_ptr->y = center.y + s.y * radius;

  00494	f3 0f 10 85 8c
	01 00 00	 movss	 xmm0, DWORD PTR s$12[rbp+4]
  0049c	f3 0f 59 85 90
	02 00 00	 mulss	 xmm0, DWORD PTR radius$[rbp]
  004a4	48 8b 85 88 02
	00 00		 mov	 rax, QWORD PTR center$[rbp]
  004ab	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [rax+4]
  004b0	f3 0f 58 c8	 addss	 xmm1, xmm0
  004b4	0f 28 c1	 movaps	 xmm0, xmm1
  004b7	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR out_ptr$[rbp]
  004be	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0

; 1133 :         out_ptr++;

  004c3	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR out_ptr$[rbp]
  004ca	48 83 c0 08	 add	 rax, 8
  004ce	48 89 85 a8 00
	00 00		 mov	 QWORD PTR out_ptr$[rbp], rax
$LN20@PathArcToF:
$LN1@PathArcToF:

; 1134 :     }
; 1135 : 
; 1136 :     IM_ASSERT_PARANOID(_Path.Data + _Path.Size == out_ptr);
; 1137 : }

  004d5	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  004d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcFrameData
  004e0	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  004e5	48 8b 8d 58 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  004ec	48 33 cd	 xor	 rcx, rbp
  004ef	e8 00 00 00 00	 call	 __security_check_cookie
  004f4	48 8d a5 68 02
	00 00		 lea	 rsp, QWORD PTR [rbp+616]
  004fb	5f		 pop	 rdi
  004fc	5d		 pop	 rbp
  004fd	c3		 ret	 0
?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z ENDP ; ImDrawList::_PathArcToFastEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z
_TEXT	SEGMENT
radius_idx$ = 4
this$ = 256
radius$ = 264
?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z PROC	; ImDrawList::_CalcCircleAutoSegmentCount, COMDAT

; 559  : {

$LN5:
  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000b	55		 push	 rbp
  0000c	57		 push	 rdi
  0000d	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00014	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 560  :     // Automatic segment count
; 561  :     const int radius_idx = (int)(radius + 0.999999f); // ceil to never reduce accuracy

  00030	f3 0f 10 85 08
	01 00 00	 movss	 xmm0, DWORD PTR radius$[rbp]
  00038	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f7fffef
  00040	f3 0f 2c c0	 cvttss2si eax, xmm0
  00044	89 45 04	 mov	 DWORD PTR radius_idx$[rbp], eax

; 562  :     if (radius_idx < IM_ARRAYSIZE(_Data->CircleSegmentCounts))

  00047	83 7d 04 40	 cmp	 DWORD PTR radius_idx$[rbp], 64 ; 00000040H
  0004b	7d 1b		 jge	 SHORT $LN2@CalcCircle

; 563  :         return _Data->CircleSegmentCounts[radius_idx]; // Use cached value

  0004d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00054	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00058	48 63 4d 04	 movsxd	 rcx, DWORD PTR radius_idx$[rbp]
  0005c	0f b6 84 08 c4
	01 00 00	 movzx	 eax, BYTE PTR [rax+rcx+452]
  00064	eb 70		 jmp	 SHORT $LN1@CalcCircle

; 564  :     else

  00066	eb 6e		 jmp	 SHORT $LN3@CalcCircle
$LN2@CalcCircle:

; 565  :         return IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC(radius, _Data->CircleSegmentMaxError);

  00068	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006f	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00073	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [rax+24]
  00078	f3 0f 10 8d 08
	01 00 00	 movss	 xmm1, DWORD PTR radius$[rbp]
  00080	e8 00 00 00 00	 call	 ??$ImMin@M@@YAMMM@Z	; ImMin<float>
  00085	f3 0f 5e 85 08
	01 00 00	 divss	 xmm0, DWORD PTR radius$[rbp]
  0008d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00095	f3 0f 5c c8	 subss	 xmm1, xmm0
  00099	0f 28 c1	 movaps	 xmm0, xmm1
  0009c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_acosf
  000a2	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40490fdb
  000aa	f3 0f 5e c8	 divss	 xmm1, xmm0
  000ae	0f 28 c1	 movaps	 xmm0, xmm1
  000b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ceilf
  000b7	f3 0f 2c c0	 cvttss2si eax, xmm0
  000bb	ff c0		 inc	 eax
  000bd	99		 cdq
  000be	2b c2		 sub	 eax, edx
  000c0	d1 f8		 sar	 eax, 1
  000c2	d1 e0		 shl	 eax, 1
  000c4	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  000ca	ba 04 00 00 00	 mov	 edx, 4
  000cf	8b c8		 mov	 ecx, eax
  000d1	e8 00 00 00 00	 call	 ??$ImClamp@H@@YAHHHH@Z	; ImClamp<int>
$LN3@CalcCircle:
$LN1@CalcCircle:

; 566  : }

  000d6	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000dd	5f		 pop	 rdi
  000de	5d		 pop	 rbp
  000df	c3		 ret	 0
?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z ENDP	; ImDrawList::_CalcCircleAutoSegmentCount
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
curr_cmd$ = 8
this$ = 256
?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ PROC		; ImDrawList::_OnChangedVtxOffset, COMDAT

; 543  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 544  :     // We don't need to compare curr_cmd->VtxOffset != _CmdHeader.VtxOffset because we know it'll be different at the time we call this.
; 545  :     _VtxCurrentIdx = 0;

  0002a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [rax+52], 0

; 546  :     IM_ASSERT_PARANOID(CmdBuffer.Size > 0);
; 547  :     ImDrawCmd* curr_cmd = &CmdBuffer.Data[CmdBuffer.Size - 1];

  00038	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	8b 00		 mov	 eax, DWORD PTR [rax]
  00041	ff c8		 dec	 eax
  00043	48 98		 cdqe
  00045	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  00049	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00050	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00054	48 89 45 08	 mov	 QWORD PTR curr_cmd$[rbp], rax

; 548  :     //IM_ASSERT(curr_cmd->VtxOffset != _CmdHeader.VtxOffset); // See #3349
; 549  :     if (curr_cmd->ElemCount != 0)

  00058	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  0005c	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  00060	74 0e		 je	 SHORT $LN2@OnChangedV

; 550  :     {
; 551  :         AddDrawCmd();

  00062	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00069	e8 00 00 00 00	 call	 ?AddDrawCmd@ImDrawList@@QEAAXXZ ; ImDrawList::AddDrawCmd

; 552  :         return;

  0006e	eb 41		 jmp	 SHORT $LN1@OnChangedV
$LN2@OnChangedV:

; 553  :     }
; 554  :     IM_ASSERT(curr_cmd->UserCallback == NULL);

  00070	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  00074	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  00079	74 22		 je	 SHORT $LN4@OnChangedV
  0007b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_OnChangedVtxOffset@ImDrawList@@QEAAXXZ@4JA
  00081	83 c0 0b	 add	 eax, 11
  00084	44 8b c0	 mov	 r8d, eax
  00087	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@FGNNAPCK@?$AAc?$AAu?$AAr?$AAr?$AA_?$AAc?$AAm?$AAd?$AA?9?$AA?$DO?$AAU?$AAs?$AAe?$AAr?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00095	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0009b	33 c0		 xor	 eax, eax
$LN4@OnChangedV:

; 555  :     curr_cmd->VtxOffset = _CmdHeader.VtxOffset;

  0009d	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  000a1	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a8	8b 89 a0 00 00
	00		 mov	 ecx, DWORD PTR [rcx+160]
  000ae	89 48 18	 mov	 DWORD PTR [rax+24], ecx
$LN1@OnChangedV:

; 556  : }

  000b1	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000b8	5f		 pop	 rdi
  000b9	5d		 pop	 rbp
  000ba	c3		 ret	 0
?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ ENDP		; ImDrawList::_OnChangedVtxOffset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?_OnChangedTextureID@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
curr_cmd$ = 8
prev_cmd$ = 40
this$ = 288
?_OnChangedTextureID@ImDrawList@@QEAAXXZ PROC		; ImDrawList::_OnChangedTextureID, COMDAT

; 520  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 521  :     // If current command is used with different settings we need to add a new command
; 522  :     IM_ASSERT_PARANOID(CmdBuffer.Size > 0);
; 523  :     ImDrawCmd* curr_cmd = &CmdBuffer.Data[CmdBuffer.Size - 1];

  0002a	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	8b 00		 mov	 eax, DWORD PTR [rax]
  00033	ff c8		 dec	 eax
  00035	48 98		 cdqe
  00037	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  0003b	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00046	48 89 45 08	 mov	 QWORD PTR curr_cmd$[rbp], rax

; 524  :     if (curr_cmd->ElemCount != 0 && curr_cmd->TextureId != _CmdHeader.TextureId)

  0004a	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  0004e	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  00052	74 29		 je	 SHORT $LN2@OnChangedT
  00054	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  00058	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005f	48 8b 89 98 00
	00 00		 mov	 rcx, QWORD PTR [rcx+152]
  00066	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  0006a	74 11		 je	 SHORT $LN2@OnChangedT

; 525  :     {
; 526  :         AddDrawCmd();

  0006c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?AddDrawCmd@ImDrawList@@QEAAXXZ ; ImDrawList::AddDrawCmd

; 527  :         return;

  00078	e9 bb 00 00 00	 jmp	 $LN1@OnChangedT
$LN2@OnChangedT:

; 528  :     }
; 529  :     IM_ASSERT(curr_cmd->UserCallback == NULL);

  0007d	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  00081	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  00086	74 22		 je	 SHORT $LN5@OnChangedT
  00088	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_OnChangedTextureID@ImDrawList@@QEAAXXZ@4JA
  0008e	83 c0 09	 add	 eax, 9
  00091	44 8b c0	 mov	 r8d, eax
  00094	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@FGNNAPCK@?$AAc?$AAu?$AAr?$AAr?$AA_?$AAc?$AAm?$AAd?$AA?9?$AA?$DO?$AAU?$AAs?$AAe?$AAr?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a8	33 c0		 xor	 eax, eax
$LN5@OnChangedT:

; 530  : 
; 531  :     // Try to merge with previous command if it matches, else use current command
; 532  :     ImDrawCmd* prev_cmd = curr_cmd - 1;

  000aa	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  000ae	48 83 e8 38	 sub	 rax, 56			; 00000038H
  000b2	48 89 45 28	 mov	 QWORD PTR prev_cmd$[rbp], rax

; 533  :     if (curr_cmd->ElemCount == 0 && CmdBuffer.Size > 1 && ImDrawCmd_HeaderCompare(&_CmdHeader, prev_cmd) == 0 && ImDrawCmd_AreSequentialIdxOffset(prev_cmd, curr_cmd) && prev_cmd->UserCallback == NULL)

  000b6	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  000ba	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  000be	75 62		 jne	 SHORT $LN3@OnChangedT
  000c0	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c7	83 38 01	 cmp	 DWORD PTR [rax], 1
  000ca	7e 56		 jle	 SHORT $LN3@OnChangedT
  000cc	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d3	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  000d9	41 b8 1c 00 00
	00		 mov	 r8d, 28
  000df	48 8b 55 28	 mov	 rdx, QWORD PTR prev_cmd$[rbp]
  000e3	48 8b c8	 mov	 rcx, rax
  000e6	e8 00 00 00 00	 call	 memcmp
  000eb	85 c0		 test	 eax, eax
  000ed	75 33		 jne	 SHORT $LN3@OnChangedT
  000ef	48 8b 45 28	 mov	 rax, QWORD PTR prev_cmd$[rbp]
  000f3	8b 40 1c	 mov	 eax, DWORD PTR [rax+28]
  000f6	48 8b 4d 28	 mov	 rcx, QWORD PTR prev_cmd$[rbp]
  000fa	03 41 20	 add	 eax, DWORD PTR [rcx+32]
  000fd	48 8b 4d 08	 mov	 rcx, QWORD PTR curr_cmd$[rbp]
  00101	3b 41 1c	 cmp	 eax, DWORD PTR [rcx+28]
  00104	75 1c		 jne	 SHORT $LN3@OnChangedT
  00106	48 8b 45 28	 mov	 rax, QWORD PTR prev_cmd$[rbp]
  0010a	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  0010f	75 11		 jne	 SHORT $LN3@OnChangedT

; 534  :     {
; 535  :         CmdBuffer.pop_back();

  00111	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00118	48 8b c8	 mov	 rcx, rax
  0011b	e8 00 00 00 00	 call	 ?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ ; ImVector<ImDrawCmd>::pop_back

; 536  :         return;

  00120	eb 16		 jmp	 SHORT $LN1@OnChangedT
$LN3@OnChangedT:

; 537  :     }
; 538  : 
; 539  :     curr_cmd->TextureId = _CmdHeader.TextureId;

  00122	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  00126	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012d	48 8b 89 98 00
	00 00		 mov	 rcx, QWORD PTR [rcx+152]
  00134	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN1@OnChangedT:

; 540  : }

  00138	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0013f	5f		 pop	 rdi
  00140	5d		 pop	 rbp
  00141	c3		 ret	 0
?_OnChangedTextureID@ImDrawList@@QEAAXXZ ENDP		; ImDrawList::_OnChangedTextureID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?_OnChangedClipRect@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
curr_cmd$ = 8
prev_cmd$ = 40
this$ = 288
?_OnChangedClipRect@ImDrawList@@QEAAXXZ PROC		; ImDrawList::_OnChangedClipRect, COMDAT

; 497  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec 20 01
	00 00		 sub	 rsp, 288		; 00000120H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 498  :     // If current command is used with different settings we need to add a new command
; 499  :     IM_ASSERT_PARANOID(CmdBuffer.Size > 0);
; 500  :     ImDrawCmd* curr_cmd = &CmdBuffer.Data[CmdBuffer.Size - 1];

  0002b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00032	8b 00		 mov	 eax, DWORD PTR [rax]
  00034	ff c8		 dec	 eax
  00036	48 98		 cdqe
  00038	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  0003c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00043	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00047	48 89 45 08	 mov	 QWORD PTR curr_cmd$[rbp], rax

; 501  :     if (curr_cmd->ElemCount != 0 && memcmp(&curr_cmd->ClipRect, &_CmdHeader.ClipRect, sizeof(ImVec4)) != 0)

  0004b	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  0004f	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  00053	74 34		 je	 SHORT $LN2@OnChangedC
  00055	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005c	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00062	48 8b 4d 08	 mov	 rcx, QWORD PTR curr_cmd$[rbp]
  00066	41 b8 10 00 00
	00		 mov	 r8d, 16
  0006c	48 8b d0	 mov	 rdx, rax
  0006f	e8 00 00 00 00	 call	 memcmp
  00074	85 c0		 test	 eax, eax
  00076	74 11		 je	 SHORT $LN2@OnChangedC

; 502  :     {
; 503  :         AddDrawCmd();

  00078	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	e8 00 00 00 00	 call	 ?AddDrawCmd@ImDrawList@@QEAAXXZ ; ImDrawList::AddDrawCmd

; 504  :         return;

  00084	e9 be 00 00 00	 jmp	 $LN1@OnChangedC
$LN2@OnChangedC:

; 505  :     }
; 506  :     IM_ASSERT(curr_cmd->UserCallback == NULL);

  00089	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  0008d	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  00092	74 22		 je	 SHORT $LN5@OnChangedC
  00094	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_OnChangedClipRect@ImDrawList@@QEAAXXZ@4JA
  0009a	83 c0 09	 add	 eax, 9
  0009d	44 8b c0	 mov	 r8d, eax
  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  000a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@FGNNAPCK@?$AAc?$AAu?$AAr?$AAr?$AA_?$AAc?$AAm?$AAd?$AA?9?$AA?$DO?$AAU?$AAs?$AAe?$AAr?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b4	33 c0		 xor	 eax, eax
$LN5@OnChangedC:

; 507  : 
; 508  :     // Try to merge with previous command if it matches, else use current command
; 509  :     ImDrawCmd* prev_cmd = curr_cmd - 1;

  000b6	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  000ba	48 83 e8 38	 sub	 rax, 56			; 00000038H
  000be	48 89 45 28	 mov	 QWORD PTR prev_cmd$[rbp], rax

; 510  :     if (curr_cmd->ElemCount == 0 && CmdBuffer.Size > 1 && ImDrawCmd_HeaderCompare(&_CmdHeader, prev_cmd) == 0 && ImDrawCmd_AreSequentialIdxOffset(prev_cmd, curr_cmd) && prev_cmd->UserCallback == NULL)

  000c2	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  000c6	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  000ca	75 62		 jne	 SHORT $LN3@OnChangedC
  000cc	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d3	83 38 01	 cmp	 DWORD PTR [rax], 1
  000d6	7e 56		 jle	 SHORT $LN3@OnChangedC
  000d8	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000df	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  000e5	41 b8 1c 00 00
	00		 mov	 r8d, 28
  000eb	48 8b 55 28	 mov	 rdx, QWORD PTR prev_cmd$[rbp]
  000ef	48 8b c8	 mov	 rcx, rax
  000f2	e8 00 00 00 00	 call	 memcmp
  000f7	85 c0		 test	 eax, eax
  000f9	75 33		 jne	 SHORT $LN3@OnChangedC
  000fb	48 8b 45 28	 mov	 rax, QWORD PTR prev_cmd$[rbp]
  000ff	8b 40 1c	 mov	 eax, DWORD PTR [rax+28]
  00102	48 8b 4d 28	 mov	 rcx, QWORD PTR prev_cmd$[rbp]
  00106	03 41 20	 add	 eax, DWORD PTR [rcx+32]
  00109	48 8b 4d 08	 mov	 rcx, QWORD PTR curr_cmd$[rbp]
  0010d	3b 41 1c	 cmp	 eax, DWORD PTR [rcx+28]
  00110	75 1c		 jne	 SHORT $LN3@OnChangedC
  00112	48 8b 45 28	 mov	 rax, QWORD PTR prev_cmd$[rbp]
  00116	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  0011b	75 11		 jne	 SHORT $LN3@OnChangedC

; 511  :     {
; 512  :         CmdBuffer.pop_back();

  0011d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00124	48 8b c8	 mov	 rcx, rax
  00127	e8 00 00 00 00	 call	 ?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ ; ImVector<ImDrawCmd>::pop_back

; 513  :         return;

  0012c	eb 19		 jmp	 SHORT $LN1@OnChangedC
$LN3@OnChangedC:

; 514  :     }
; 515  : 
; 516  :     curr_cmd->ClipRect = _CmdHeader.ClipRect;

  0012e	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00135	48 8b 7d 08	 mov	 rdi, QWORD PTR curr_cmd$[rbp]
  00139	48 8d b0 88 00
	00 00		 lea	 rsi, QWORD PTR [rax+136]
  00140	b9 10 00 00 00	 mov	 ecx, 16
  00145	f3 a4		 rep movsb
$LN1@OnChangedC:

; 517  : }

  00147	48 8d a5 00 01
	00 00		 lea	 rsp, QWORD PTR [rbp+256]
  0014e	5f		 pop	 rdi
  0014f	5e		 pop	 rsi
  00150	5d		 pop	 rbp
  00151	c3		 ret	 0
?_OnChangedClipRect@ImDrawList@@QEAAXXZ ENDP		; ImDrawList::_OnChangedClipRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
curr_cmd$ = 8
prev_cmd$ = 40
this$ = 288
?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ PROC		; ImDrawList::_TryMergeDrawCmds, COMDAT

; 483  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 484  :     IM_ASSERT_PARANOID(CmdBuffer.Size > 0);
; 485  :     ImDrawCmd* curr_cmd = &CmdBuffer.Data[CmdBuffer.Size - 1];

  0002a	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	8b 00		 mov	 eax, DWORD PTR [rax]
  00033	ff c8		 dec	 eax
  00035	48 98		 cdqe
  00037	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  0003b	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00046	48 89 45 08	 mov	 QWORD PTR curr_cmd$[rbp], rax

; 486  :     ImDrawCmd* prev_cmd = curr_cmd - 1;

  0004a	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  0004e	48 83 e8 38	 sub	 rax, 56			; 00000038H
  00052	48 89 45 28	 mov	 QWORD PTR prev_cmd$[rbp], rax

; 487  :     if (ImDrawCmd_HeaderCompare(curr_cmd, prev_cmd) == 0 && ImDrawCmd_AreSequentialIdxOffset(prev_cmd, curr_cmd) && curr_cmd->UserCallback == NULL && prev_cmd->UserCallback == NULL)

  00056	41 b8 1c 00 00
	00		 mov	 r8d, 28
  0005c	48 8b 55 28	 mov	 rdx, QWORD PTR prev_cmd$[rbp]
  00060	48 8b 4d 08	 mov	 rcx, QWORD PTR curr_cmd$[rbp]
  00064	e8 00 00 00 00	 call	 memcmp
  00069	85 c0		 test	 eax, eax
  0006b	75 51		 jne	 SHORT $LN2@TryMergeDr
  0006d	48 8b 45 28	 mov	 rax, QWORD PTR prev_cmd$[rbp]
  00071	8b 40 1c	 mov	 eax, DWORD PTR [rax+28]
  00074	48 8b 4d 28	 mov	 rcx, QWORD PTR prev_cmd$[rbp]
  00078	03 41 20	 add	 eax, DWORD PTR [rcx+32]
  0007b	48 8b 4d 08	 mov	 rcx, QWORD PTR curr_cmd$[rbp]
  0007f	3b 41 1c	 cmp	 eax, DWORD PTR [rcx+28]
  00082	75 3a		 jne	 SHORT $LN2@TryMergeDr
  00084	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  00088	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  0008d	75 2f		 jne	 SHORT $LN2@TryMergeDr
  0008f	48 8b 45 28	 mov	 rax, QWORD PTR prev_cmd$[rbp]
  00093	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  00098	75 24		 jne	 SHORT $LN2@TryMergeDr

; 488  :     {
; 489  :         prev_cmd->ElemCount += curr_cmd->ElemCount;

  0009a	48 8b 45 28	 mov	 rax, QWORD PTR prev_cmd$[rbp]
  0009e	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  000a1	48 8b 4d 08	 mov	 rcx, QWORD PTR curr_cmd$[rbp]
  000a5	03 41 20	 add	 eax, DWORD PTR [rcx+32]
  000a8	48 8b 4d 28	 mov	 rcx, QWORD PTR prev_cmd$[rbp]
  000ac	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 490  :         CmdBuffer.pop_back();

  000af	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b6	48 8b c8	 mov	 rcx, rax
  000b9	e8 00 00 00 00	 call	 ?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ ; ImVector<ImDrawCmd>::pop_back
$LN2@TryMergeDr:

; 491  :     }
; 492  : }

  000be	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000c5	5f		 pop	 rdi
  000c6	5d		 pop	 rbp
  000c7	c3		 ret	 0
?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ ENDP		; ImDrawList::_TryMergeDrawCmds
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
curr_cmd$1 = 8
this$ = 256
?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ PROC		; ImDrawList::_PopUnusedDrawCmd, COMDAT

; 449  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
$LN2@PopUnusedD:

; 450  :     while (CmdBuffer.Size > 0)

  0002a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	83 38 00	 cmp	 DWORD PTR [rax], 0
  00034	7e 48		 jle	 SHORT $LN3@PopUnusedD

; 451  :     {
; 452  :         ImDrawCmd* curr_cmd = &CmdBuffer.Data[CmdBuffer.Size - 1];

  00036	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	8b 00		 mov	 eax, DWORD PTR [rax]
  0003f	ff c8		 dec	 eax
  00041	48 98		 cdqe
  00043	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  00047	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00052	48 89 45 08	 mov	 QWORD PTR curr_cmd$1[rbp], rax

; 453  :         if (curr_cmd->ElemCount != 0 || curr_cmd->UserCallback != NULL)

  00056	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$1[rbp]
  0005a	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  0005e	75 0b		 jne	 SHORT $LN5@PopUnusedD
  00060	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$1[rbp]
  00064	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  00069	74 02		 je	 SHORT $LN4@PopUnusedD
$LN5@PopUnusedD:

; 454  :             return;// break;

  0006b	eb 11		 jmp	 SHORT $LN1@PopUnusedD
$LN4@PopUnusedD:

; 455  :         CmdBuffer.pop_back();

  0006d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00074	48 8b c8	 mov	 rcx, rax
  00077	e8 00 00 00 00	 call	 ?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ ; ImVector<ImDrawCmd>::pop_back

; 456  :     }

  0007c	eb ac		 jmp	 SHORT $LN2@PopUnusedD
$LN3@PopUnusedD:
$LN1@PopUnusedD:

; 457  : }

  0007e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00085	5f		 pop	 rdi
  00086	5d		 pop	 rbp
  00087	c3		 ret	 0
?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ ENDP		; ImDrawList::_PopUnusedDrawCmd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?_ClearFreeMemory@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_ClearFreeMemory@ImDrawList@@QEAAXXZ PROC		; ImDrawList::_ClearFreeMemory, COMDAT

; 410  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 411  :     CmdBuffer.clear();

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ ; ImVector<ImDrawCmd>::clear

; 412  :     IdxBuffer.clear();

  00039	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	48 83 c0 10	 add	 rax, 16
  00044	48 8b c8	 mov	 rcx, rax
  00047	e8 00 00 00 00	 call	 ?clear@?$ImVector@G@@QEAAXXZ ; ImVector<unsigned short>::clear

; 413  :     VtxBuffer.clear();

  0004c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 83 c0 20	 add	 rax, 32			; 00000020H
  00057	48 8b c8	 mov	 rcx, rax
  0005a	e8 00 00 00 00	 call	 ?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ ; ImVector<ImDrawVert>::clear

; 414  :     Flags = ImDrawListFlags_None;

  0005f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00066	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [rax+48], 0

; 415  :     _VtxCurrentIdx = 0;

  0006d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00074	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [rax+52], 0

; 416  :     _VtxWritePtr = NULL;

  0007b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00082	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0

; 417  :     _IdxWritePtr = NULL;

  0008a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00091	48 c7 40 50 00
	00 00 00	 mov	 QWORD PTR [rax+80], 0

; 418  :     _ClipRectStack.clear();

  00099	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a0	48 83 c0 58	 add	 rax, 88			; 00000058H
  000a4	48 8b c8	 mov	 rcx, rax
  000a7	e8 00 00 00 00	 call	 ?clear@?$ImVector@UImVec4@@@@QEAAXXZ ; ImVector<ImVec4>::clear

; 419  :     _TextureIdStack.clear();

  000ac	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b3	48 83 c0 68	 add	 rax, 104		; 00000068H
  000b7	48 8b c8	 mov	 rcx, rax
  000ba	e8 00 00 00 00	 call	 ?clear@?$ImVector@PEAX@@QEAAXXZ ; ImVector<void * __ptr64>::clear

; 420  :     _Path.clear();

  000bf	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c6	48 83 c0 78	 add	 rax, 120		; 00000078H
  000ca	48 8b c8	 mov	 rcx, rax
  000cd	e8 00 00 00 00	 call	 ?clear@?$ImVector@UImVec2@@@@QEAAXXZ ; ImVector<ImVec2>::clear

; 421  :     _Splitter.ClearFreeMemory();

  000d2	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d9	48 05 a8 00 00
	00		 add	 rax, 168		; 000000a8H
  000df	48 8b c8	 mov	 rcx, rax
  000e2	e8 00 00 00 00	 call	 ?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ ; ImDrawListSplitter::ClearFreeMemory

; 422  : }

  000e7	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000ee	5f		 pop	 rdi
  000ef	5d		 pop	 rbp
  000f0	c3		 ret	 0
?_ClearFreeMemory@ImDrawList@@QEAAXXZ ENDP		; ImDrawList::_ClearFreeMemory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?_ResetForNewFrame@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
$T1 = 200
this$ = 304
?_ResetForNewFrame@ImDrawList@@QEAAXXZ PROC		; ImDrawList::_ResetForNewFrame, COMDAT

; 387  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR [rsp+344]

; 388  :     // Verify that the ImDrawCmd fields we want to memcmp() are contiguous in memory.
; 389  :     IM_STATIC_ASSERT(IM_OFFSETOF(ImDrawCmd, ClipRect) == 0);
; 390  :     IM_STATIC_ASSERT(IM_OFFSETOF(ImDrawCmd, TextureId) == sizeof(ImVec4));
; 391  :     IM_STATIC_ASSERT(IM_OFFSETOF(ImDrawCmd, VtxOffset) == sizeof(ImVec4) + sizeof(ImTextureID));
; 392  : 
; 393  :     CmdBuffer.resize(0);

  0002a	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	33 d2		 xor	 edx, edx
  00033	48 8b c8	 mov	 rcx, rax
  00036	e8 00 00 00 00	 call	 ?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z ; ImVector<ImDrawCmd>::resize

; 394  :     IdxBuffer.resize(0);

  0003b	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 83 c0 10	 add	 rax, 16
  00046	33 d2		 xor	 edx, edx
  00048	48 8b c8	 mov	 rcx, rax
  0004b	e8 00 00 00 00	 call	 ?resize@?$ImVector@G@@QEAAXH@Z ; ImVector<unsigned short>::resize

; 395  :     VtxBuffer.resize(0);

  00050	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 83 c0 20	 add	 rax, 32			; 00000020H
  0005b	33 d2		 xor	 edx, edx
  0005d	48 8b c8	 mov	 rcx, rax
  00060	e8 00 00 00 00	 call	 ?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z ; ImVector<ImDrawVert>::resize

; 396  :     Flags = _Data->InitialFlags;

  00065	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006c	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00070	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00077	8b 40 2c	 mov	 eax, DWORD PTR [rax+44]
  0007a	89 41 30	 mov	 DWORD PTR [rcx+48], eax

; 397  :     memset(&_CmdHeader, 0, sizeof(_CmdHeader));

  0007d	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00084	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  0008a	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00090	33 d2		 xor	 edx, edx
  00092	48 8b c8	 mov	 rcx, rax
  00095	e8 00 00 00 00	 call	 memset

; 398  :     _VtxCurrentIdx = 0;

  0009a	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a1	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [rax+52], 0

; 399  :     _VtxWritePtr = NULL;

  000a8	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000af	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0

; 400  :     _IdxWritePtr = NULL;

  000b7	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000be	48 c7 40 50 00
	00 00 00	 mov	 QWORD PTR [rax+80], 0

; 401  :     _ClipRectStack.resize(0);

  000c6	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000cd	48 83 c0 58	 add	 rax, 88			; 00000058H
  000d1	33 d2		 xor	 edx, edx
  000d3	48 8b c8	 mov	 rcx, rax
  000d6	e8 00 00 00 00	 call	 ?resize@?$ImVector@UImVec4@@@@QEAAXH@Z ; ImVector<ImVec4>::resize

; 402  :     _TextureIdStack.resize(0);

  000db	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e2	48 83 c0 68	 add	 rax, 104		; 00000068H
  000e6	33 d2		 xor	 edx, edx
  000e8	48 8b c8	 mov	 rcx, rax
  000eb	e8 00 00 00 00	 call	 ?resize@?$ImVector@PEAX@@QEAAXH@Z ; ImVector<void * __ptr64>::resize

; 403  :     _Path.resize(0);

  000f0	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f7	48 83 c0 78	 add	 rax, 120		; 00000078H
  000fb	33 d2		 xor	 edx, edx
  000fd	48 8b c8	 mov	 rcx, rax
  00100	e8 00 00 00 00	 call	 ?resize@?$ImVector@UImVec2@@@@QEAAXH@Z ; ImVector<ImVec2>::resize

; 404  :     _Splitter.Clear();

  00105	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0010c	48 05 a8 00 00
	00		 add	 rax, 168		; 000000a8H
  00112	48 8b c8	 mov	 rcx, rax
  00115	e8 00 00 00 00	 call	 ?Clear@ImDrawListSplitter@@QEAAXXZ ; ImDrawListSplitter::Clear

; 405  :     CmdBuffer.push_back(ImDrawCmd());

  0011a	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00121	e8 00 00 00 00	 call	 ??0ImDrawCmd@@QEAA@XZ	; ImDrawCmd::ImDrawCmd
  00126	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012d	48 8b d0	 mov	 rdx, rax
  00130	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z ; ImVector<ImDrawCmd>::push_back

; 406  :     _FringeScale = 1.0f;

  00135	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0013c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00144	f3 0f 11 80 c0
	00 00 00	 movss	 DWORD PTR [rax+192], xmm0

; 407  : }

  0014c	48 8d a5 18 01
	00 00		 lea	 rsp, QWORD PTR [rbp+280]
  00153	5f		 pop	 rdi
  00154	5d		 pop	 rbp
  00155	c3		 ret	 0
?_ResetForNewFrame@ImDrawList@@QEAAXXZ ENDP		; ImDrawList::_ResetForNewFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?PrimWriteIdx@ImDrawList@@QEAAXG@Z
_TEXT	SEGMENT
this$ = 224
idx$ = 232
?PrimWriteIdx@ImDrawList@@QEAAXG@Z PROC			; ImDrawList::PrimWriteIdx, COMDAT

; 2602 :     inline    void  PrimWriteIdx(ImDrawIdx idx)                                     { *_IdxWritePtr = idx; _IdxWritePtr++; }

$LN3:
  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  0002d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00038	0f b7 8d e8 00
	00 00		 movzx	 ecx, WORD PTR idx$[rbp]
  0003f	66 89 08	 mov	 WORD PTR [rax], cx
  00042	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  0004d	48 83 c0 02	 add	 rax, 2
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
  0005c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00063	5f		 pop	 rdi
  00064	5d		 pop	 rbp
  00065	c3		 ret	 0
?PrimWriteIdx@ImDrawList@@QEAAXG@Z ENDP			; ImDrawList::PrimWriteIdx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z
_TEXT	SEGMENT
this$ = 224
pos$ = 232
uv$ = 240
col$ = 248
?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z PROC	; ImDrawList::PrimWriteVtx, COMDAT

; 2601 :     inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)    { _VtxWritePtr->pos = pos; _VtxWritePtr->uv = uv; _VtxWritePtr->col = col; _VtxWritePtr++; _VtxCurrentIdx++; }

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0001d	48 8b ec	 mov	 rbp, rsp
  00020	48 8b fc	 mov	 rdi, rsp
  00023	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00037	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR pos$[rbp]
  0003e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00041	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00048	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  0004c	48 89 01	 mov	 QWORD PTR [rcx], rax
  0004f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR uv$[rbp]
  00056	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00059	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00060	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00064	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00068	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006f	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00073	8b 8d f8 00 00
	00		 mov	 ecx, DWORD PTR col$[rbp]
  00079	89 48 10	 mov	 DWORD PTR [rax+16], ecx
  0007c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00083	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00087	48 83 c0 14	 add	 rax, 20
  0008b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00092	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax
  00096	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009d	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  000a0	ff c0		 inc	 eax
  000a2	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	89 41 34	 mov	 DWORD PTR [rcx+52], eax
  000ac	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b3	5f		 pop	 rdi
  000b4	5d		 pop	 rbp
  000b5	c3		 ret	 0
?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ENDP	; ImDrawList::PrimWriteVtx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z
_TEXT	SEGMENT
idx$ = 4
this$ = 256
a$ = 264
b$ = 272
c$ = 280
d$ = 288
uv_a$ = 296
uv_b$ = 304
uv_c$ = 312
uv_d$ = 320
col$ = 328
?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z PROC ; ImDrawList::PrimQuadUV, COMDAT

; 685  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8b ec	 mov	 rbp, rsp
  00020	48 8b fc	 mov	 rdi, rsp
  00023	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 686  :     ImDrawIdx idx = (ImDrawIdx)_VtxCurrentIdx;

  00037	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	0f b7 40 34	 movzx	 eax, WORD PTR [rax+52]
  00042	66 89 45 04	 mov	 WORD PTR idx$[rbp], ax

; 687  :     _IdxWritePtr[0] = idx; _IdxWritePtr[1] = (ImDrawIdx)(idx+1); _IdxWritePtr[2] = (ImDrawIdx)(idx+2);

  00046	b8 02 00 00 00	 mov	 eax, 2
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00056	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  0005a	0f b7 55 04	 movzx	 edx, WORD PTR idx$[rbp]
  0005e	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx
  00062	0f b7 45 04	 movzx	 eax, WORD PTR idx$[rbp]
  00066	ff c0		 inc	 eax
  00068	b9 02 00 00 00	 mov	 ecx, 2
  0006d	48 6b c9 01	 imul	 rcx, rcx, 1
  00071	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00078	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  0007c	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  00080	0f b7 45 04	 movzx	 eax, WORD PTR idx$[rbp]
  00084	83 c0 02	 add	 eax, 2
  00087	b9 02 00 00 00	 mov	 ecx, 2
  0008c	48 6b c9 02	 imul	 rcx, rcx, 2
  00090	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00097	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  0009b	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 688  :     _IdxWritePtr[3] = idx; _IdxWritePtr[4] = (ImDrawIdx)(idx+2); _IdxWritePtr[5] = (ImDrawIdx)(idx+3);

  0009f	b8 02 00 00 00	 mov	 eax, 2
  000a4	48 6b c0 03	 imul	 rax, rax, 3
  000a8	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000af	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  000b3	0f b7 55 04	 movzx	 edx, WORD PTR idx$[rbp]
  000b7	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx
  000bb	0f b7 45 04	 movzx	 eax, WORD PTR idx$[rbp]
  000bf	83 c0 02	 add	 eax, 2
  000c2	b9 02 00 00 00	 mov	 ecx, 2
  000c7	48 6b c9 04	 imul	 rcx, rcx, 4
  000cb	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  000d2	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  000d6	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  000da	0f b7 45 04	 movzx	 eax, WORD PTR idx$[rbp]
  000de	83 c0 03	 add	 eax, 3
  000e1	b9 02 00 00 00	 mov	 ecx, 2
  000e6	48 6b c9 05	 imul	 rcx, rcx, 5
  000ea	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  000f1	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  000f5	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 689  :     _VtxWritePtr[0].pos = a; _VtxWritePtr[0].uv = uv_a; _VtxWritePtr[0].col = col;

  000f9	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  00100	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00103	b9 14 00 00 00	 mov	 ecx, 20
  00108	48 6b c9 00	 imul	 rcx, rcx, 0
  0010c	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00113	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  00117	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  0011b	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR uv_a$[rbp]
  00122	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00125	b9 14 00 00 00	 mov	 ecx, 20
  0012a	48 6b c9 00	 imul	 rcx, rcx, 0
  0012e	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00135	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  00139	48 89 44 0a 08	 mov	 QWORD PTR [rdx+rcx+8], rax
  0013e	b8 14 00 00 00	 mov	 eax, 20
  00143	48 6b c0 00	 imul	 rax, rax, 0
  00147	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0014e	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00152	8b 95 48 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  00158	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 690  :     _VtxWritePtr[1].pos = b; _VtxWritePtr[1].uv = uv_b; _VtxWritePtr[1].col = col;

  0015c	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  00163	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00166	b9 14 00 00 00	 mov	 ecx, 20
  0016b	48 6b c9 01	 imul	 rcx, rcx, 1
  0016f	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00176	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  0017a	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  0017e	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR uv_b$[rbp]
  00185	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00188	b9 14 00 00 00	 mov	 ecx, 20
  0018d	48 6b c9 01	 imul	 rcx, rcx, 1
  00191	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00198	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  0019c	48 89 44 0a 08	 mov	 QWORD PTR [rdx+rcx+8], rax
  001a1	b8 14 00 00 00	 mov	 eax, 20
  001a6	48 6b c0 01	 imul	 rax, rax, 1
  001aa	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001b1	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  001b5	8b 95 48 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  001bb	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 691  :     _VtxWritePtr[2].pos = c; _VtxWritePtr[2].uv = uv_c; _VtxWritePtr[2].col = col;

  001bf	48 8b 85 18 01
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  001c6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001c9	b9 14 00 00 00	 mov	 ecx, 20
  001ce	48 6b c9 02	 imul	 rcx, rcx, 2
  001d2	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  001d9	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  001dd	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  001e1	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR uv_c$[rbp]
  001e8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001eb	b9 14 00 00 00	 mov	 ecx, 20
  001f0	48 6b c9 02	 imul	 rcx, rcx, 2
  001f4	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  001fb	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  001ff	48 89 44 0a 08	 mov	 QWORD PTR [rdx+rcx+8], rax
  00204	b8 14 00 00 00	 mov	 eax, 20
  00209	48 6b c0 02	 imul	 rax, rax, 2
  0020d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00214	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00218	8b 95 48 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  0021e	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 692  :     _VtxWritePtr[3].pos = d; _VtxWritePtr[3].uv = uv_d; _VtxWritePtr[3].col = col;

  00222	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR d$[rbp]
  00229	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0022c	b9 14 00 00 00	 mov	 ecx, 20
  00231	48 6b c9 03	 imul	 rcx, rcx, 3
  00235	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0023c	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  00240	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  00244	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR uv_d$[rbp]
  0024b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0024e	b9 14 00 00 00	 mov	 ecx, 20
  00253	48 6b c9 03	 imul	 rcx, rcx, 3
  00257	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0025e	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  00262	48 89 44 0a 08	 mov	 QWORD PTR [rdx+rcx+8], rax
  00267	b8 14 00 00 00	 mov	 eax, 20
  0026c	48 6b c0 03	 imul	 rax, rax, 3
  00270	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00277	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  0027b	8b 95 48 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  00281	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 693  :     _VtxWritePtr += 4;

  00285	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0028c	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00290	48 83 c0 50	 add	 rax, 80			; 00000050H
  00294	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0029b	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 694  :     _VtxCurrentIdx += 4;

  0029f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002a6	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  002a9	83 c0 04	 add	 eax, 4
  002ac	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002b3	89 41 34	 mov	 DWORD PTR [rcx+52], eax

; 695  :     _IdxWritePtr += 6;

  002b6	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002bd	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  002c1	48 83 c0 0c	 add	 rax, 12
  002c5	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cc	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 696  : }

  002d0	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  002d7	5f		 pop	 rdi
  002d8	5d		 pop	 rbp
  002d9	c3		 ret	 0
?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z ENDP ; ImDrawList::PrimQuadUV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z
_TEXT	SEGMENT
b$ = 8
d$ = 40
uv_b$ = 72
uv_d$ = 104
idx$ = 132
__$ArrayPad$ = 344
this$ = 384
a$ = 392
c$ = 400
uv_a$ = 408
uv_c$ = 416
col$ = 424
?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z PROC	; ImDrawList::PrimRectUV, COMDAT

; 670  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 58 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 671  :     ImVec2 b(c.x, a.y), d(a.x, c.y), uv_b(uv_c.x, uv_a.y), uv_d(uv_a.x, uv_c.y);

  0004a	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  00051	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  00056	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  0005d	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00061	48 8d 4d 08	 lea	 rcx, QWORD PTR b$[rbp]
  00065	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0006a	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  00071	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  00076	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  0007d	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00081	48 8d 4d 28	 lea	 rcx, QWORD PTR d$[rbp]
  00085	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0008a	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR uv_a$[rbp]
  00091	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  00096	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR uv_c$[rbp]
  0009d	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  000a1	48 8d 4d 48	 lea	 rcx, QWORD PTR uv_b$[rbp]
  000a5	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000aa	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR uv_c$[rbp]
  000b1	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  000b6	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR uv_a$[rbp]
  000bd	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  000c1	48 8d 4d 68	 lea	 rcx, QWORD PTR uv_d$[rbp]
  000c5	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 672  :     ImDrawIdx idx = (ImDrawIdx)_VtxCurrentIdx;

  000ca	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d1	0f b7 40 34	 movzx	 eax, WORD PTR [rax+52]
  000d5	66 89 85 84 00
	00 00		 mov	 WORD PTR idx$[rbp], ax

; 673  :     _IdxWritePtr[0] = idx; _IdxWritePtr[1] = (ImDrawIdx)(idx+1); _IdxWritePtr[2] = (ImDrawIdx)(idx+2);

  000dc	b8 02 00 00 00	 mov	 eax, 2
  000e1	48 6b c0 00	 imul	 rax, rax, 0
  000e5	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ec	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  000f0	0f b7 95 84 00
	00 00		 movzx	 edx, WORD PTR idx$[rbp]
  000f7	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx
  000fb	0f b7 85 84 00
	00 00		 movzx	 eax, WORD PTR idx$[rbp]
  00102	ff c0		 inc	 eax
  00104	b9 02 00 00 00	 mov	 ecx, 2
  00109	48 6b c9 01	 imul	 rcx, rcx, 1
  0010d	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00114	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00118	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  0011c	0f b7 85 84 00
	00 00		 movzx	 eax, WORD PTR idx$[rbp]
  00123	83 c0 02	 add	 eax, 2
  00126	b9 02 00 00 00	 mov	 ecx, 2
  0012b	48 6b c9 02	 imul	 rcx, rcx, 2
  0012f	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00136	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  0013a	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 674  :     _IdxWritePtr[3] = idx; _IdxWritePtr[4] = (ImDrawIdx)(idx+2); _IdxWritePtr[5] = (ImDrawIdx)(idx+3);

  0013e	b8 02 00 00 00	 mov	 eax, 2
  00143	48 6b c0 03	 imul	 rax, rax, 3
  00147	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0014e	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  00152	0f b7 95 84 00
	00 00		 movzx	 edx, WORD PTR idx$[rbp]
  00159	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx
  0015d	0f b7 85 84 00
	00 00		 movzx	 eax, WORD PTR idx$[rbp]
  00164	83 c0 02	 add	 eax, 2
  00167	b9 02 00 00 00	 mov	 ecx, 2
  0016c	48 6b c9 04	 imul	 rcx, rcx, 4
  00170	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00177	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  0017b	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  0017f	0f b7 85 84 00
	00 00		 movzx	 eax, WORD PTR idx$[rbp]
  00186	83 c0 03	 add	 eax, 3
  00189	b9 02 00 00 00	 mov	 ecx, 2
  0018e	48 6b c9 05	 imul	 rcx, rcx, 5
  00192	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00199	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  0019d	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 675  :     _VtxWritePtr[0].pos = a; _VtxWritePtr[0].uv = uv_a; _VtxWritePtr[0].col = col;

  001a1	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  001a8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ab	b9 14 00 00 00	 mov	 ecx, 20
  001b0	48 6b c9 00	 imul	 rcx, rcx, 0
  001b4	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  001bb	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  001bf	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  001c3	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR uv_a$[rbp]
  001ca	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001cd	b9 14 00 00 00	 mov	 ecx, 20
  001d2	48 6b c9 00	 imul	 rcx, rcx, 0
  001d6	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  001dd	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  001e1	48 89 44 0a 08	 mov	 QWORD PTR [rdx+rcx+8], rax
  001e6	b8 14 00 00 00	 mov	 eax, 20
  001eb	48 6b c0 00	 imul	 rax, rax, 0
  001ef	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f6	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  001fa	8b 95 a8 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  00200	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 676  :     _VtxWritePtr[1].pos = b; _VtxWritePtr[1].uv = uv_b; _VtxWritePtr[1].col = col;

  00204	b8 14 00 00 00	 mov	 eax, 20
  00209	48 6b c0 01	 imul	 rax, rax, 1
  0020d	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00214	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00218	48 8b 55 08	 mov	 rdx, QWORD PTR b$[rbp]
  0021c	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
  00220	b8 14 00 00 00	 mov	 eax, 20
  00225	48 6b c0 01	 imul	 rax, rax, 1
  00229	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00230	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00234	48 8b 55 48	 mov	 rdx, QWORD PTR uv_b$[rbp]
  00238	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  0023d	b8 14 00 00 00	 mov	 eax, 20
  00242	48 6b c0 01	 imul	 rax, rax, 1
  00246	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0024d	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00251	8b 95 a8 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  00257	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 677  :     _VtxWritePtr[2].pos = c; _VtxWritePtr[2].uv = uv_c; _VtxWritePtr[2].col = col;

  0025b	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  00262	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00265	b9 14 00 00 00	 mov	 ecx, 20
  0026a	48 6b c9 02	 imul	 rcx, rcx, 2
  0026e	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00275	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  00279	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  0027d	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR uv_c$[rbp]
  00284	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00287	b9 14 00 00 00	 mov	 ecx, 20
  0028c	48 6b c9 02	 imul	 rcx, rcx, 2
  00290	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00297	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  0029b	48 89 44 0a 08	 mov	 QWORD PTR [rdx+rcx+8], rax
  002a0	b8 14 00 00 00	 mov	 eax, 20
  002a5	48 6b c0 02	 imul	 rax, rax, 2
  002a9	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002b0	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  002b4	8b 95 a8 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  002ba	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 678  :     _VtxWritePtr[3].pos = d; _VtxWritePtr[3].uv = uv_d; _VtxWritePtr[3].col = col;

  002be	b8 14 00 00 00	 mov	 eax, 20
  002c3	48 6b c0 03	 imul	 rax, rax, 3
  002c7	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002ce	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  002d2	48 8b 55 28	 mov	 rdx, QWORD PTR d$[rbp]
  002d6	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
  002da	b8 14 00 00 00	 mov	 eax, 20
  002df	48 6b c0 03	 imul	 rax, rax, 3
  002e3	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002ea	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  002ee	48 8b 55 68	 mov	 rdx, QWORD PTR uv_d$[rbp]
  002f2	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  002f7	b8 14 00 00 00	 mov	 eax, 20
  002fc	48 6b c0 03	 imul	 rax, rax, 3
  00300	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00307	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  0030b	8b 95 a8 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  00311	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 679  :     _VtxWritePtr += 4;

  00315	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0031c	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00320	48 83 c0 50	 add	 rax, 80			; 00000050H
  00324	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0032b	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 680  :     _VtxCurrentIdx += 4;

  0032f	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00336	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  00339	83 c0 04	 add	 eax, 4
  0033c	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00343	89 41 34	 mov	 DWORD PTR [rcx+52], eax

; 681  :     _IdxWritePtr += 6;

  00346	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0034d	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00351	48 83 c0 0c	 add	 rax, 12
  00355	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0035c	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 682  : }

  00360	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00364	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcFrameData
  0036b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00370	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00377	48 33 cd	 xor	 rcx, rbp
  0037a	e8 00 00 00 00	 call	 __security_check_cookie
  0037f	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  00386	5f		 pop	 rdi
  00387	5d		 pop	 rbp
  00388	c3		 ret	 0
?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z ENDP	; ImDrawList::PrimRectUV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z
_TEXT	SEGMENT
b$ = 8
d$ = 40
uv$ = 72
idx$ = 100
__$ArrayPad$ = 312
this$ = 352
a$ = 360
c$ = 368
col$ = 376
?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z PROC	; ImDrawList::PrimRect, COMDAT

; 655  : {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 656  :     ImVec2 b(c.x, a.y), d(a.x, c.y), uv(_Data->TexUvWhitePixel);

  0004a	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  00051	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  00056	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  0005d	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00061	48 8d 4d 08	 lea	 rcx, QWORD PTR b$[rbp]
  00065	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0006a	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  00071	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  00076	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  0007d	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00081	48 8d 4d 28	 lea	 rcx, QWORD PTR d$[rbp]
  00085	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0008a	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00091	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 89 45 48	 mov	 QWORD PTR uv$[rbp], rax

; 657  :     ImDrawIdx idx = (ImDrawIdx)_VtxCurrentIdx;

  0009c	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	0f b7 40 34	 movzx	 eax, WORD PTR [rax+52]
  000a7	66 89 45 64	 mov	 WORD PTR idx$[rbp], ax

; 658  :     _IdxWritePtr[0] = idx; _IdxWritePtr[1] = (ImDrawIdx)(idx+1); _IdxWritePtr[2] = (ImDrawIdx)(idx+2);

  000ab	b8 02 00 00 00	 mov	 eax, 2
  000b0	48 6b c0 00	 imul	 rax, rax, 0
  000b4	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000bb	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  000bf	0f b7 55 64	 movzx	 edx, WORD PTR idx$[rbp]
  000c3	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx
  000c7	0f b7 45 64	 movzx	 eax, WORD PTR idx$[rbp]
  000cb	ff c0		 inc	 eax
  000cd	b9 02 00 00 00	 mov	 ecx, 2
  000d2	48 6b c9 01	 imul	 rcx, rcx, 1
  000d6	48 8b 95 60 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  000dd	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  000e1	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  000e5	0f b7 45 64	 movzx	 eax, WORD PTR idx$[rbp]
  000e9	83 c0 02	 add	 eax, 2
  000ec	b9 02 00 00 00	 mov	 ecx, 2
  000f1	48 6b c9 02	 imul	 rcx, rcx, 2
  000f5	48 8b 95 60 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  000fc	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00100	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 659  :     _IdxWritePtr[3] = idx; _IdxWritePtr[4] = (ImDrawIdx)(idx+2); _IdxWritePtr[5] = (ImDrawIdx)(idx+3);

  00104	b8 02 00 00 00	 mov	 eax, 2
  00109	48 6b c0 03	 imul	 rax, rax, 3
  0010d	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00114	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  00118	0f b7 55 64	 movzx	 edx, WORD PTR idx$[rbp]
  0011c	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx
  00120	0f b7 45 64	 movzx	 eax, WORD PTR idx$[rbp]
  00124	83 c0 02	 add	 eax, 2
  00127	b9 02 00 00 00	 mov	 ecx, 2
  0012c	48 6b c9 04	 imul	 rcx, rcx, 4
  00130	48 8b 95 60 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00137	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  0013b	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  0013f	0f b7 45 64	 movzx	 eax, WORD PTR idx$[rbp]
  00143	83 c0 03	 add	 eax, 3
  00146	b9 02 00 00 00	 mov	 ecx, 2
  0014b	48 6b c9 05	 imul	 rcx, rcx, 5
  0014f	48 8b 95 60 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00156	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  0015a	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 660  :     _VtxWritePtr[0].pos = a; _VtxWritePtr[0].uv = uv; _VtxWritePtr[0].col = col;

  0015e	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  00165	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00168	b9 14 00 00 00	 mov	 ecx, 20
  0016d	48 6b c9 00	 imul	 rcx, rcx, 0
  00171	48 8b 95 60 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00178	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  0017c	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  00180	b8 14 00 00 00	 mov	 eax, 20
  00185	48 6b c0 00	 imul	 rax, rax, 0
  00189	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00190	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00194	48 8b 55 48	 mov	 rdx, QWORD PTR uv$[rbp]
  00198	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  0019d	b8 14 00 00 00	 mov	 eax, 20
  001a2	48 6b c0 00	 imul	 rax, rax, 0
  001a6	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ad	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  001b1	8b 95 78 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  001b7	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 661  :     _VtxWritePtr[1].pos = b; _VtxWritePtr[1].uv = uv; _VtxWritePtr[1].col = col;

  001bb	b8 14 00 00 00	 mov	 eax, 20
  001c0	48 6b c0 01	 imul	 rax, rax, 1
  001c4	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cb	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  001cf	48 8b 55 08	 mov	 rdx, QWORD PTR b$[rbp]
  001d3	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
  001d7	b8 14 00 00 00	 mov	 eax, 20
  001dc	48 6b c0 01	 imul	 rax, rax, 1
  001e0	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001e7	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  001eb	48 8b 55 48	 mov	 rdx, QWORD PTR uv$[rbp]
  001ef	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  001f4	b8 14 00 00 00	 mov	 eax, 20
  001f9	48 6b c0 01	 imul	 rax, rax, 1
  001fd	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00204	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00208	8b 95 78 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  0020e	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 662  :     _VtxWritePtr[2].pos = c; _VtxWritePtr[2].uv = uv; _VtxWritePtr[2].col = col;

  00212	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR c$[rbp]
  00219	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0021c	b9 14 00 00 00	 mov	 ecx, 20
  00221	48 6b c9 02	 imul	 rcx, rcx, 2
  00225	48 8b 95 60 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0022c	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  00230	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  00234	b8 14 00 00 00	 mov	 eax, 20
  00239	48 6b c0 02	 imul	 rax, rax, 2
  0023d	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00244	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00248	48 8b 55 48	 mov	 rdx, QWORD PTR uv$[rbp]
  0024c	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  00251	b8 14 00 00 00	 mov	 eax, 20
  00256	48 6b c0 02	 imul	 rax, rax, 2
  0025a	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00261	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00265	8b 95 78 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  0026b	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 663  :     _VtxWritePtr[3].pos = d; _VtxWritePtr[3].uv = uv; _VtxWritePtr[3].col = col;

  0026f	b8 14 00 00 00	 mov	 eax, 20
  00274	48 6b c0 03	 imul	 rax, rax, 3
  00278	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0027f	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00283	48 8b 55 28	 mov	 rdx, QWORD PTR d$[rbp]
  00287	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
  0028b	b8 14 00 00 00	 mov	 eax, 20
  00290	48 6b c0 03	 imul	 rax, rax, 3
  00294	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0029b	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  0029f	48 8b 55 48	 mov	 rdx, QWORD PTR uv$[rbp]
  002a3	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  002a8	b8 14 00 00 00	 mov	 eax, 20
  002ad	48 6b c0 03	 imul	 rax, rax, 3
  002b1	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002b8	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  002bc	8b 95 78 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  002c2	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 664  :     _VtxWritePtr += 4;

  002c6	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002cd	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  002d1	48 83 c0 50	 add	 rax, 80			; 00000050H
  002d5	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002dc	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 665  :     _VtxCurrentIdx += 4;

  002e0	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002e7	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  002ea	83 c0 04	 add	 eax, 4
  002ed	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f4	89 41 34	 mov	 DWORD PTR [rcx+52], eax

; 666  :     _IdxWritePtr += 6;

  002f7	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002fe	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00302	48 83 c0 0c	 add	 rax, 12
  00306	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0030d	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 667  : }

  00311	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00315	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcFrameData
  0031c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00321	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00328	48 33 cd	 xor	 rcx, rbp
  0032b	e8 00 00 00 00	 call	 __security_check_cookie
  00330	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  00337	5f		 pop	 rdi
  00338	5d		 pop	 rbp
  00339	c3		 ret	 0
?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ENDP	; ImDrawList::PrimRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?PrimUnreserve@ImDrawList@@QEAAXHH@Z
_TEXT	SEGMENT
draw_cmd$ = 8
this$ = 256
idx_count$ = 264
vtx_count$ = 272
?PrimUnreserve@ImDrawList@@QEAAXHH@Z PROC		; ImDrawList::PrimUnreserve, COMDAT

; 644  : {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 645  :     IM_ASSERT_PARANOID(idx_count >= 0 && vtx_count >= 0);
; 646  : 
; 647  :     ImDrawCmd* draw_cmd = &CmdBuffer.Data[CmdBuffer.Size - 1];

  00033	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003a	8b 00		 mov	 eax, DWORD PTR [rax]
  0003c	ff c8		 dec	 eax
  0003e	48 98		 cdqe
  00040	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  00044	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004b	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0004f	48 89 45 08	 mov	 QWORD PTR draw_cmd$[rbp], rax

; 648  :     draw_cmd->ElemCount -= idx_count;

  00053	48 8b 45 08	 mov	 rax, QWORD PTR draw_cmd$[rbp]
  00057	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR idx_count$[rbp]
  0005d	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  00060	2b c1		 sub	 eax, ecx
  00062	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_cmd$[rbp]
  00066	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 649  :     VtxBuffer.shrink(VtxBuffer.Size - vtx_count);

  00069	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00070	8b 8d 10 01 00
	00		 mov	 ecx, DWORD PTR vtx_count$[rbp]
  00076	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  00079	2b c1		 sub	 eax, ecx
  0007b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00082	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00086	8b d0		 mov	 edx, eax
  00088	e8 00 00 00 00	 call	 ?shrink@?$ImVector@UImDrawVert@@@@QEAAXH@Z ; ImVector<ImDrawVert>::shrink

; 650  :     IdxBuffer.shrink(IdxBuffer.Size - idx_count);

  0008d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00094	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR idx_count$[rbp]
  0009a	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0009d	2b c1		 sub	 eax, ecx
  0009f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a6	48 83 c1 10	 add	 rcx, 16
  000aa	8b d0		 mov	 edx, eax
  000ac	e8 00 00 00 00	 call	 ?shrink@?$ImVector@G@@QEAAXH@Z ; ImVector<unsigned short>::shrink

; 651  : }

  000b1	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000b8	5f		 pop	 rdi
  000b9	5d		 pop	 rbp
  000ba	c3		 ret	 0
?PrimUnreserve@ImDrawList@@QEAAXHH@Z ENDP		; ImDrawList::PrimUnreserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?PrimReserve@ImDrawList@@QEAAXHH@Z
_TEXT	SEGMENT
draw_cmd$ = 8
vtx_buffer_old_size$ = 36
idx_buffer_old_size$ = 68
this$ = 320
idx_count$ = 328
vtx_count$ = 336
?PrimReserve@ImDrawList@@QEAAXHH@Z PROC			; ImDrawList::PrimReserve, COMDAT

; 618  : {

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]

; 619  :     // Large mesh support (when enabled)
; 620  :     IM_ASSERT_PARANOID(idx_count >= 0 && vtx_count >= 0);
; 621  :     if (sizeof(ImDrawIdx) == 2 && (_VtxCurrentIdx + vtx_count >= (1 << 16)) && (Flags & ImDrawListFlags_AllowVtxOffset))

  00033	33 c0		 xor	 eax, eax
  00035	83 f8 01	 cmp	 eax, 1
  00038	74 4b		 je	 SHORT $LN2@PrimReserv
  0003a	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  00044	03 85 50 01 00
	00		 add	 eax, DWORD PTR vtx_count$[rbp]
  0004a	3d 00 00 01 00	 cmp	 eax, 65536		; 00010000H
  0004f	72 34		 jb	 SHORT $LN2@PrimReserv
  00051	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00058	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  0005b	83 e0 08	 and	 eax, 8
  0005e	85 c0		 test	 eax, eax
  00060	74 23		 je	 SHORT $LN2@PrimReserv

; 622  :     {
; 623  :         // FIXME: In theory we should be testing that vtx_count <64k here.
; 624  :         // In practice, RenderText() relies on reserving ahead for a worst case scenario so it is currently useful for us
; 625  :         // to not make that check until we rework the text functions to handle clipping and large horizontal lines better.
; 626  :         _CmdHeader.VtxOffset = VtxBuffer.Size;

  00062	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00069	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00070	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  00073	89 88 a0 00 00
	00		 mov	 DWORD PTR [rax+160], ecx

; 627  :         _OnChangedVtxOffset();

  00079	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00080	e8 00 00 00 00	 call	 ?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ ; ImDrawList::_OnChangedVtxOffset
$LN2@PrimReserv:

; 628  :     }
; 629  : 
; 630  :     ImDrawCmd* draw_cmd = &CmdBuffer.Data[CmdBuffer.Size - 1];

  00085	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	8b 00		 mov	 eax, DWORD PTR [rax]
  0008e	ff c8		 dec	 eax
  00090	48 98		 cdqe
  00092	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  00096	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  000a1	48 89 45 08	 mov	 QWORD PTR draw_cmd$[rbp], rax

; 631  :     draw_cmd->ElemCount += idx_count;

  000a5	48 8b 45 08	 mov	 rax, QWORD PTR draw_cmd$[rbp]
  000a9	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  000ac	03 85 48 01 00
	00		 add	 eax, DWORD PTR idx_count$[rbp]
  000b2	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_cmd$[rbp]
  000b6	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 632  : 
; 633  :     int vtx_buffer_old_size = VtxBuffer.Size;

  000b9	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c0	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  000c3	89 45 24	 mov	 DWORD PTR vtx_buffer_old_size$[rbp], eax

; 634  :     VtxBuffer.resize(vtx_buffer_old_size + vtx_count);

  000c6	8b 85 50 01 00
	00		 mov	 eax, DWORD PTR vtx_count$[rbp]
  000cc	8b 4d 24	 mov	 ecx, DWORD PTR vtx_buffer_old_size$[rbp]
  000cf	03 c8		 add	 ecx, eax
  000d1	8b c1		 mov	 eax, ecx
  000d3	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000da	48 83 c1 20	 add	 rcx, 32			; 00000020H
  000de	8b d0		 mov	 edx, eax
  000e0	e8 00 00 00 00	 call	 ?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z ; ImVector<ImDrawVert>::resize

; 635  :     _VtxWritePtr = VtxBuffer.Data + vtx_buffer_old_size;

  000e5	48 63 45 24	 movsxd	 rax, DWORD PTR vtx_buffer_old_size$[rbp]
  000e9	48 6b c0 14	 imul	 rax, rax, 20
  000ed	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f4	48 03 41 28	 add	 rax, QWORD PTR [rcx+40]
  000f8	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ff	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 636  : 
; 637  :     int idx_buffer_old_size = IdxBuffer.Size;

  00103	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0010a	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0010d	89 45 44	 mov	 DWORD PTR idx_buffer_old_size$[rbp], eax

; 638  :     IdxBuffer.resize(idx_buffer_old_size + idx_count);

  00110	8b 85 48 01 00
	00		 mov	 eax, DWORD PTR idx_count$[rbp]
  00116	8b 4d 44	 mov	 ecx, DWORD PTR idx_buffer_old_size$[rbp]
  00119	03 c8		 add	 ecx, eax
  0011b	8b c1		 mov	 eax, ecx
  0011d	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00124	48 83 c1 10	 add	 rcx, 16
  00128	8b d0		 mov	 edx, eax
  0012a	e8 00 00 00 00	 call	 ?resize@?$ImVector@G@@QEAAXH@Z ; ImVector<unsigned short>::resize

; 639  :     _IdxWritePtr = IdxBuffer.Data + idx_buffer_old_size;

  0012f	48 63 45 44	 movsxd	 rax, DWORD PTR idx_buffer_old_size$[rbp]
  00133	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0013a	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  0013e	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00142	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00149	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 640  : }

  0014d	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00154	5f		 pop	 rdi
  00155	5d		 pop	 rbp
  00156	c3		 ret	 0
?PrimReserve@ImDrawList@@QEAAXHH@Z ENDP			; ImDrawList::PrimReserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?CloneOutput@ImDrawList@@QEBAPEAU1@XZ
_TEXT	SEGMENT
dst$ = 8
$T1 = 232
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 356
$T6 = 392
tv82 = 408
this$ = 448
?CloneOutput@ImDrawList@@QEBAPEAU1@XZ PROC		; ImDrawList::CloneOutput, COMDAT

; 425  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+488]
  0002a	48 c7 85 88 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T6[rbp], -2

; 426  :     ImDrawList* dst = IM_NEW(ImDrawList(_Data));

  00035	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  0003a	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  0003f	48 89 85 28 01
	00 00		 mov	 QWORD PTR $T3[rbp], rax
  00046	48 8d 85 64 01
	00 00		 lea	 rax, QWORD PTR $T5[rbp]
  0004d	48 89 85 48 01
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  00054	4c 8b 85 28 01
	00 00		 mov	 r8, QWORD PTR $T3[rbp]
  0005b	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR $T4[rbp]
  00062	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00065	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  0006a	e8 00 00 00 00	 call	 ??2@YAPEAX_KUImNewWrapper@@PEAX@Z ; operator new
  0006f	48 89 85 08 01
	00 00		 mov	 QWORD PTR $T2[rbp], rax
  00076	48 83 bd 08 01
	00 00 00	 cmp	 QWORD PTR $T2[rbp], 0
  0007e	74 20		 je	 SHORT $LN3@CloneOutpu
  00080	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00087	48 8b 50 38	 mov	 rdx, QWORD PTR [rax+56]
  0008b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR $T2[rbp]
  00092	e8 00 00 00 00	 call	 ??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z ; ImDrawList::ImDrawList
  00097	48 89 85 98 01
	00 00		 mov	 QWORD PTR tv82[rbp], rax
  0009e	eb 0b		 jmp	 SHORT $LN4@CloneOutpu
$LN3@CloneOutpu:
  000a0	48 c7 85 98 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv82[rbp], 0
$LN4@CloneOutpu:
  000ab	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR tv82[rbp]
  000b2	48 89 85 e8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  000b9	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]
  000c0	48 89 45 08	 mov	 QWORD PTR dst$[rbp], rax

; 427  :     dst->CmdBuffer = CmdBuffer;

  000c4	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000cb	48 8b 4d 08	 mov	 rcx, QWORD PTR dst$[rbp]
  000cf	48 8b d0	 mov	 rdx, rax
  000d2	e8 00 00 00 00	 call	 ??4?$ImVector@UImDrawCmd@@@@QEAAAEAU0@AEBU0@@Z ; ImVector<ImDrawCmd>::operator=

; 428  :     dst->IdxBuffer = IdxBuffer;

  000d7	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000de	48 83 c0 10	 add	 rax, 16
  000e2	48 8b 4d 08	 mov	 rcx, QWORD PTR dst$[rbp]
  000e6	48 83 c1 10	 add	 rcx, 16
  000ea	48 8b d0	 mov	 rdx, rax
  000ed	e8 00 00 00 00	 call	 ??4?$ImVector@G@@QEAAAEAU0@AEBU0@@Z ; ImVector<unsigned short>::operator=

; 429  :     dst->VtxBuffer = VtxBuffer;

  000f2	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f9	48 83 c0 20	 add	 rax, 32			; 00000020H
  000fd	48 8b 4d 08	 mov	 rcx, QWORD PTR dst$[rbp]
  00101	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00105	48 8b d0	 mov	 rdx, rax
  00108	e8 00 00 00 00	 call	 ??4?$ImVector@UImDrawVert@@@@QEAAAEAU0@AEBU0@@Z ; ImVector<ImDrawVert>::operator=

; 430  :     dst->Flags = Flags;

  0010d	48 8b 45 08	 mov	 rax, QWORD PTR dst$[rbp]
  00111	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00118	8b 49 30	 mov	 ecx, DWORD PTR [rcx+48]
  0011b	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 431  :     return dst;

  0011e	48 8b 45 08	 mov	 rax, QWORD PTR dst$[rbp]

; 432  : }

  00122	48 8d a5 a8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+424]
  00129	5f		 pop	 rdi
  0012a	5d		 pop	 rbp
  0012b	c3		 ret	 0
?CloneOutput@ImDrawList@@QEBAPEAU1@XZ ENDP		; ImDrawList::CloneOutput
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
dst$ = 8
$T1 = 232
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 356
$T6 = 392
tv82 = 408
this$ = 448
?dtor$0@?0??CloneOutput@ImDrawList@@QEBAPEAU1@XZ@4HA PROC ; `ImDrawList::CloneOutput'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	4c 8b 85 28 01
	00 00		 mov	 r8, QWORD PTR $T3[rbp]
  0001b	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR $T4[rbp]
  00022	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00025	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR $T2[rbp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAXUImNewWrapper@@0@Z ; operator delete
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?dtor$0@?0??CloneOutput@ImDrawList@@QEBAPEAU1@XZ@4HA ENDP ; `ImDrawList::CloneOutput'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
dst$ = 8
$T1 = 232
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 356
$T6 = 392
tv82 = 408
this$ = 448
?dtor$0@?0??CloneOutput@ImDrawList@@QEBAPEAU1@XZ@4HA PROC ; `ImDrawList::CloneOutput'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	4c 8b 85 28 01
	00 00		 mov	 r8, QWORD PTR $T3[rbp]
  0001b	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR $T4[rbp]
  00022	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00025	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR $T2[rbp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAXUImNewWrapper@@0@Z ; operator delete
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?dtor$0@?0??CloneOutput@ImDrawList@@QEBAPEAU1@XZ@4HA ENDP ; `ImDrawList::CloneOutput'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddDrawCmd@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
draw_cmd$ = 8
__$ArrayPad$ = 264
this$ = 304
?AddDrawCmd@ImDrawList@@QEAAXXZ PROC			; ImDrawList::AddDrawCmd, COMDAT

; 435  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR [rsp+344]
  0002b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00032	48 33 c5	 xor	 rax, rbp
  00035	48 89 85 08 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 436  :     ImDrawCmd draw_cmd;

  0003c	48 8d 4d 08	 lea	 rcx, QWORD PTR draw_cmd$[rbp]
  00040	e8 00 00 00 00	 call	 ??0ImDrawCmd@@QEAA@XZ	; ImDrawCmd::ImDrawCmd

; 437  :     draw_cmd.ClipRect = _CmdHeader.ClipRect;    // Same as calling ImDrawCmd_HeaderCopy()

  00045	48 8d 45 08	 lea	 rax, QWORD PTR draw_cmd$[rbp]
  00049	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00050	48 8b f8	 mov	 rdi, rax
  00053	48 8d b1 88 00
	00 00		 lea	 rsi, QWORD PTR [rcx+136]
  0005a	b9 10 00 00 00	 mov	 ecx, 16
  0005f	f3 a4		 rep movsb

; 438  :     draw_cmd.TextureId = _CmdHeader.TextureId;

  00061	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00068	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0006f	48 89 45 18	 mov	 QWORD PTR draw_cmd$[rbp+16], rax

; 439  :     draw_cmd.VtxOffset = _CmdHeader.VtxOffset;

  00073	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007a	8b 80 a0 00 00
	00		 mov	 eax, DWORD PTR [rax+160]
  00080	89 45 20	 mov	 DWORD PTR draw_cmd$[rbp+24], eax

; 440  :     draw_cmd.IdxOffset = IdxBuffer.Size;

  00083	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008a	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0008d	89 45 24	 mov	 DWORD PTR draw_cmd$[rbp+28], eax

; 441  : 
; 442  :     IM_ASSERT(draw_cmd.ClipRect.x <= draw_cmd.ClipRect.z && draw_cmd.ClipRect.y <= draw_cmd.ClipRect.w);

  00090	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR draw_cmd$[rbp+8]
  00095	0f 2f 45 08	 comiss	 xmm0, DWORD PTR draw_cmd$[rbp]
  00099	72 0b		 jb	 SHORT $LN3@AddDrawCmd
  0009b	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR draw_cmd$[rbp+12]
  000a0	0f 2f 45 0c	 comiss	 xmm0, DWORD PTR draw_cmd$[rbp+4]
  000a4	73 22		 jae	 SHORT $LN4@AddDrawCmd
$LN3@AddDrawCmd:
  000a6	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??AddDrawCmd@ImDrawList@@QEAAXXZ@4JA
  000ac	83 c0 07	 add	 eax, 7
  000af	44 8b c0	 mov	 r8d, eax
  000b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1LC@MAEAJCLC@?$AAd?$AAr?$AAa?$AAw?$AA_?$AAc?$AAm?$AAd?$AA?4?$AAC?$AAl?$AAi?$AAp?$AAR?$AAe?$AAc?$AAt?$AA?4?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAd?$AAr?$AAa?$AAw?$AA_?$AAc?$AAm?$AAd?$AA?4@
  000c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c6	33 c0		 xor	 eax, eax
$LN4@AddDrawCmd:

; 443  :     CmdBuffer.push_back(draw_cmd);

  000c8	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000cf	48 8d 55 08	 lea	 rdx, QWORD PTR draw_cmd$[rbp]
  000d3	48 8b c8	 mov	 rcx, rax
  000d6	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z ; ImVector<ImDrawCmd>::push_back

; 444  : }

  000db	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?AddDrawCmd@ImDrawList@@QEAAXXZ$rtcFrameData
  000e6	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000eb	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000f2	48 33 cd	 xor	 rcx, rbp
  000f5	e8 00 00 00 00	 call	 __security_check_cookie
  000fa	48 8d a5 10 01
	00 00		 lea	 rsp, QWORD PTR [rbp+272]
  00101	5f		 pop	 rdi
  00102	5e		 pop	 rsi
  00103	5d		 pop	 rbp
  00104	c3		 ret	 0
?AddDrawCmd@ImDrawList@@QEAAXXZ ENDP			; ImDrawList::AddDrawCmd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddCallback@ImDrawList@@QEAAXP6AXPEBU1@PEBUImDrawCmd@@@ZPEAX@Z
_TEXT	SEGMENT
curr_cmd$ = 8
this$ = 256
callback$ = 264
callback_data$ = 272
?AddCallback@ImDrawList@@QEAAXP6AXPEBU1@PEBUImDrawCmd@@@ZPEAX@Z PROC ; ImDrawList::AddCallback, COMDAT

; 460  : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 461  :     IM_ASSERT_PARANOID(CmdBuffer.Size > 0);
; 462  :     ImDrawCmd* curr_cmd = &CmdBuffer.Data[CmdBuffer.Size - 1];

  00034	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003b	8b 00		 mov	 eax, DWORD PTR [rax]
  0003d	ff c8		 dec	 eax
  0003f	48 98		 cdqe
  00041	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  00045	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004c	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00050	48 89 45 08	 mov	 QWORD PTR curr_cmd$[rbp], rax

; 463  :     IM_ASSERT(curr_cmd->UserCallback == NULL);

  00054	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  00058	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  0005d	74 22		 je	 SHORT $LN4@AddCallbac
  0005f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??AddCallback@ImDrawList@@QEAAXP6AXPEBU2@PEBUImDrawCmd@@@ZPEAX@Z@4JA
  00065	83 c0 03	 add	 eax, 3
  00068	44 8b c0	 mov	 r8d, eax
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@FGNNAPCK@?$AAc?$AAu?$AAr?$AAr?$AA_?$AAc?$AAm?$AAd?$AA?9?$AA?$DO?$AAU?$AAs?$AAe?$AAr?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007f	33 c0		 xor	 eax, eax
$LN4@AddCallbac:

; 464  :     if (curr_cmd->ElemCount != 0)

  00081	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  00085	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  00089	74 2c		 je	 SHORT $LN2@AddCallbac

; 465  :     {
; 466  :         AddDrawCmd();

  0008b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00092	e8 00 00 00 00	 call	 ?AddDrawCmd@ImDrawList@@QEAAXXZ ; ImDrawList::AddDrawCmd

; 467  :         curr_cmd = &CmdBuffer.Data[CmdBuffer.Size - 1];

  00097	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009e	8b 00		 mov	 eax, DWORD PTR [rax]
  000a0	ff c8		 dec	 eax
  000a2	48 98		 cdqe
  000a4	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  000a8	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000af	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  000b3	48 89 45 08	 mov	 QWORD PTR curr_cmd$[rbp], rax
$LN2@AddCallbac:

; 468  :     }
; 469  :     curr_cmd->UserCallback = callback;

  000b7	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  000bb	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR callback$[rbp]
  000c2	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 470  :     curr_cmd->UserCallbackData = callback_data;

  000c6	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  000ca	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR callback_data$[rbp]
  000d1	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 471  : 
; 472  :     AddDrawCmd(); // Force a new command after us (see comment below)

  000d5	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000dc	e8 00 00 00 00	 call	 ?AddDrawCmd@ImDrawList@@QEAAXXZ ; ImDrawList::AddDrawCmd

; 473  : }

  000e1	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000e8	5f		 pop	 rdi
  000e9	5d		 pop	 rbp
  000ea	c3		 ret	 0
?AddCallback@ImDrawList@@QEAAXP6AXPEBU1@PEBUImDrawCmd@@@ZPEAX@Z ENDP ; ImDrawList::AddCallback
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z
_TEXT	SEGMENT
rounding_tl$1 = 4
rounding_tr$2 = 36
rounding_br$3 = 68
rounding_bl$4 = 100
$T5 = 324
$T6 = 356
$T7 = 388
$T8 = 420
$T9 = 452
$T10 = 484
tv162 = 500
tv159 = 500
tv156 = 500
tv153 = 500
tv91 = 500
tv76 = 500
this$ = 544
a$ = 552
b$ = 560
rounding$ = 568
flags$ = 576
?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z PROC	; ImDrawList::PathRect, COMDAT

; 1349 : {

$LN18:
  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  0001e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 8e 00 00 00	 mov	 ecx, 142		; 0000008eH
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR [rsp+600]

; 1350 :     flags = FixRectCornerFlags(flags);

  0003a	8b 8d 40 02 00
	00		 mov	 ecx, DWORD PTR flags$[rbp]
  00040	e8 00 00 00 00	 call	 ?FixRectCornerFlags@@YAHH@Z ; FixRectCornerFlags
  00045	89 85 40 02 00
	00		 mov	 DWORD PTR flags$[rbp], eax

; 1351 :     rounding = ImMin(rounding, ImFabs(b.x - a.x) * ( ((flags & ImDrawFlags_RoundCornersTop)  == ImDrawFlags_RoundCornersTop)  || ((flags & ImDrawFlags_RoundCornersBottom) == ImDrawFlags_RoundCornersBottom) ? 0.5f : 1.0f ) - 1.0f);

  0004b	8b 85 40 02 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  00051	83 e0 30	 and	 eax, 48			; 00000030H
  00054	83 f8 30	 cmp	 eax, 48			; 00000030H
  00057	74 24		 je	 SHORT $LN6@PathRect
  00059	8b 85 40 02 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  0005f	25 c0 00 00 00	 and	 eax, 192		; 000000c0H
  00064	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  00069	74 12		 je	 SHORT $LN6@PathRect
  0006b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00073	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv76[rbp], xmm0
  0007b	eb 10		 jmp	 SHORT $LN7@PathRect
$LN6@PathRect:
  0007d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00085	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv76[rbp], xmm0
$LN7@PathRect:
  0008d	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  00094	48 8b 8d 28 02
	00 00		 mov	 rcx, QWORD PTR a$[rbp]
  0009b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  0009f	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [rcx]
  000a3	e8 00 00 00 00	 call	 fabsf
  000a8	f3 0f 59 85 f4
	01 00 00	 mulss	 xmm0, DWORD PTR tv76[rbp]
  000b0	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000b8	0f 28 c8	 movaps	 xmm1, xmm0
  000bb	f3 0f 10 85 38
	02 00 00	 movss	 xmm0, DWORD PTR rounding$[rbp]
  000c3	e8 00 00 00 00	 call	 ??$ImMin@M@@YAMMM@Z	; ImMin<float>
  000c8	f3 0f 11 85 38
	02 00 00	 movss	 DWORD PTR rounding$[rbp], xmm0

; 1352 :     rounding = ImMin(rounding, ImFabs(b.y - a.y) * ( ((flags & ImDrawFlags_RoundCornersLeft) == ImDrawFlags_RoundCornersLeft) || ((flags & ImDrawFlags_RoundCornersRight)  == ImDrawFlags_RoundCornersRight)  ? 0.5f : 1.0f ) - 1.0f);

  000d0	8b 85 40 02 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  000d6	83 e0 50	 and	 eax, 80			; 00000050H
  000d9	83 f8 50	 cmp	 eax, 80			; 00000050H
  000dc	74 24		 je	 SHORT $LN8@PathRect
  000de	8b 85 40 02 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  000e4	25 a0 00 00 00	 and	 eax, 160		; 000000a0H
  000e9	3d a0 00 00 00	 cmp	 eax, 160		; 000000a0H
  000ee	74 12		 je	 SHORT $LN8@PathRect
  000f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000f8	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv91[rbp], xmm0
  00100	eb 10		 jmp	 SHORT $LN9@PathRect
$LN8@PathRect:
  00102	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0010a	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv91[rbp], xmm0
$LN9@PathRect:
  00112	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  00119	48 8b 8d 28 02
	00 00		 mov	 rcx, QWORD PTR a$[rbp]
  00120	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00125	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [rcx+4]
  0012a	e8 00 00 00 00	 call	 fabsf
  0012f	f3 0f 59 85 f4
	01 00 00	 mulss	 xmm0, DWORD PTR tv91[rbp]
  00137	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0013f	0f 28 c8	 movaps	 xmm1, xmm0
  00142	f3 0f 10 85 38
	02 00 00	 movss	 xmm0, DWORD PTR rounding$[rbp]
  0014a	e8 00 00 00 00	 call	 ??$ImMin@M@@YAMMM@Z	; ImMin<float>
  0014f	f3 0f 11 85 38
	02 00 00	 movss	 DWORD PTR rounding$[rbp], xmm0

; 1353 : 
; 1354 :     if (rounding < 0.5f || (flags & ImDrawFlags_RoundCornersMask_) == ImDrawFlags_RoundCornersNone)

  00157	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0015f	0f 2f 85 38 02
	00 00		 comiss	 xmm0, DWORD PTR rounding$[rbp]
  00166	77 16		 ja	 SHORT $LN4@PathRect
  00168	8b 85 40 02 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  0016e	25 f0 01 00 00	 and	 eax, 496		; 000001f0H
  00173	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00178	0f 85 8f 00 00
	00		 jne	 $LN2@PathRect
$LN4@PathRect:

; 1355 :     {
; 1356 :         PathLineTo(a);

  0017e	48 8b 95 28 02
	00 00		 mov	 rdx, QWORD PTR a$[rbp]
  00185	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0018c	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1357 :         PathLineTo(ImVec2(b.x, a.y));

  00191	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  00198	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  0019d	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  001a4	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  001a8	48 8d 8d 44 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  001af	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001b4	48 8b d0	 mov	 rdx, rax
  001b7	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001be	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1358 :         PathLineTo(b);

  001c3	48 8b 95 30 02
	00 00		 mov	 rdx, QWORD PTR b$[rbp]
  001ca	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001d1	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1359 :         PathLineTo(ImVec2(a.x, b.y));

  001d6	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  001dd	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  001e2	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  001e9	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  001ed	48 8d 8d 64 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  001f4	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001f9	48 8b d0	 mov	 rdx, rax
  001fc	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00203	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1360 :     }
; 1361 :     else

  00208	e9 23 02 00 00	 jmp	 $LN3@PathRect
$LN2@PathRect:

; 1362 :     {
; 1363 :         const float rounding_tl = (flags & ImDrawFlags_RoundCornersTopLeft)     ? rounding : 0.0f;

  0020d	8b 85 40 02 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  00213	83 e0 10	 and	 eax, 16
  00216	85 c0		 test	 eax, eax
  00218	74 12		 je	 SHORT $LN10@PathRect
  0021a	f3 0f 10 85 38
	02 00 00	 movss	 xmm0, DWORD PTR rounding$[rbp]
  00222	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv153[rbp], xmm0
  0022a	eb 0b		 jmp	 SHORT $LN11@PathRect
$LN10@PathRect:
  0022c	0f 57 c0	 xorps	 xmm0, xmm0
  0022f	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv153[rbp], xmm0
$LN11@PathRect:
  00237	f3 0f 10 85 f4
	01 00 00	 movss	 xmm0, DWORD PTR tv153[rbp]
  0023f	f3 0f 11 45 04	 movss	 DWORD PTR rounding_tl$1[rbp], xmm0

; 1364 :         const float rounding_tr = (flags & ImDrawFlags_RoundCornersTopRight)    ? rounding : 0.0f;

  00244	8b 85 40 02 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  0024a	83 e0 20	 and	 eax, 32			; 00000020H
  0024d	85 c0		 test	 eax, eax
  0024f	74 12		 je	 SHORT $LN12@PathRect
  00251	f3 0f 10 85 38
	02 00 00	 movss	 xmm0, DWORD PTR rounding$[rbp]
  00259	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv156[rbp], xmm0
  00261	eb 0b		 jmp	 SHORT $LN13@PathRect
$LN12@PathRect:
  00263	0f 57 c0	 xorps	 xmm0, xmm0
  00266	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv156[rbp], xmm0
$LN13@PathRect:
  0026e	f3 0f 10 85 f4
	01 00 00	 movss	 xmm0, DWORD PTR tv156[rbp]
  00276	f3 0f 11 45 24	 movss	 DWORD PTR rounding_tr$2[rbp], xmm0

; 1365 :         const float rounding_br = (flags & ImDrawFlags_RoundCornersBottomRight) ? rounding : 0.0f;

  0027b	8b 85 40 02 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  00281	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00286	85 c0		 test	 eax, eax
  00288	74 12		 je	 SHORT $LN14@PathRect
  0028a	f3 0f 10 85 38
	02 00 00	 movss	 xmm0, DWORD PTR rounding$[rbp]
  00292	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv159[rbp], xmm0
  0029a	eb 0b		 jmp	 SHORT $LN15@PathRect
$LN14@PathRect:
  0029c	0f 57 c0	 xorps	 xmm0, xmm0
  0029f	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv159[rbp], xmm0
$LN15@PathRect:
  002a7	f3 0f 10 85 f4
	01 00 00	 movss	 xmm0, DWORD PTR tv159[rbp]
  002af	f3 0f 11 45 44	 movss	 DWORD PTR rounding_br$3[rbp], xmm0

; 1366 :         const float rounding_bl = (flags & ImDrawFlags_RoundCornersBottomLeft)  ? rounding : 0.0f;

  002b4	8b 85 40 02 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  002ba	83 e0 40	 and	 eax, 64			; 00000040H
  002bd	85 c0		 test	 eax, eax
  002bf	74 12		 je	 SHORT $LN16@PathRect
  002c1	f3 0f 10 85 38
	02 00 00	 movss	 xmm0, DWORD PTR rounding$[rbp]
  002c9	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv162[rbp], xmm0
  002d1	eb 0b		 jmp	 SHORT $LN17@PathRect
$LN16@PathRect:
  002d3	0f 57 c0	 xorps	 xmm0, xmm0
  002d6	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv162[rbp], xmm0
$LN17@PathRect:
  002de	f3 0f 10 85 f4
	01 00 00	 movss	 xmm0, DWORD PTR tv162[rbp]
  002e6	f3 0f 11 45 64	 movss	 DWORD PTR rounding_bl$4[rbp], xmm0

; 1367 :         PathArcToFast(ImVec2(a.x + rounding_tl, a.y + rounding_tl), rounding_tl, 6, 9);

  002eb	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  002f2	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  002f7	f3 0f 58 45 04	 addss	 xmm0, DWORD PTR rounding_tl$1[rbp]
  002fc	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  00303	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00307	f3 0f 58 4d 04	 addss	 xmm1, DWORD PTR rounding_tl$1[rbp]
  0030c	0f 28 d0	 movaps	 xmm2, xmm0
  0030f	48 8d 8d 84 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00316	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0031b	c7 44 24 20 09
	00 00 00	 mov	 DWORD PTR [rsp+32], 9
  00323	41 b9 06 00 00
	00		 mov	 r9d, 6
  00329	f3 0f 10 55 04	 movss	 xmm2, DWORD PTR rounding_tl$1[rbp]
  0032e	48 8b d0	 mov	 rdx, rax
  00331	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00338	e8 00 00 00 00	 call	 ?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast

; 1368 :         PathArcToFast(ImVec2(b.x - rounding_tr, a.y + rounding_tr), rounding_tr, 9, 12);

  0033d	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  00344	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00349	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR rounding_tr$2[rbp]
  0034e	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  00355	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00359	f3 0f 5c 4d 24	 subss	 xmm1, DWORD PTR rounding_tr$2[rbp]
  0035e	0f 28 d0	 movaps	 xmm2, xmm0
  00361	48 8d 8d a4 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00368	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0036d	c7 44 24 20 0c
	00 00 00	 mov	 DWORD PTR [rsp+32], 12
  00375	41 b9 09 00 00
	00		 mov	 r9d, 9
  0037b	f3 0f 10 55 24	 movss	 xmm2, DWORD PTR rounding_tr$2[rbp]
  00380	48 8b d0	 mov	 rdx, rax
  00383	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0038a	e8 00 00 00 00	 call	 ?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast

; 1369 :         PathArcToFast(ImVec2(b.x - rounding_br, b.y - rounding_br), rounding_br, 0, 3);

  0038f	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  00396	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  0039b	f3 0f 5c 45 44	 subss	 xmm0, DWORD PTR rounding_br$3[rbp]
  003a0	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  003a7	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  003ab	f3 0f 5c 4d 44	 subss	 xmm1, DWORD PTR rounding_br$3[rbp]
  003b0	0f 28 d0	 movaps	 xmm2, xmm0
  003b3	48 8d 8d c4 01
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  003ba	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  003bf	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR [rsp+32], 3
  003c7	45 33 c9	 xor	 r9d, r9d
  003ca	f3 0f 10 55 44	 movss	 xmm2, DWORD PTR rounding_br$3[rbp]
  003cf	48 8b d0	 mov	 rdx, rax
  003d2	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003d9	e8 00 00 00 00	 call	 ?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast

; 1370 :         PathArcToFast(ImVec2(a.x + rounding_bl, b.y - rounding_bl), rounding_bl, 3, 6);

  003de	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  003e5	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  003ea	f3 0f 5c 45 64	 subss	 xmm0, DWORD PTR rounding_bl$4[rbp]
  003ef	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  003f6	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  003fa	f3 0f 58 4d 64	 addss	 xmm1, DWORD PTR rounding_bl$4[rbp]
  003ff	0f 28 d0	 movaps	 xmm2, xmm0
  00402	48 8d 8d e4 01
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00409	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0040e	c7 44 24 20 06
	00 00 00	 mov	 DWORD PTR [rsp+32], 6
  00416	41 b9 03 00 00
	00		 mov	 r9d, 3
  0041c	f3 0f 10 55 64	 movss	 xmm2, DWORD PTR rounding_bl$4[rbp]
  00421	48 8b d0	 mov	 rdx, rax
  00424	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0042b	e8 00 00 00 00	 call	 ?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast
$LN3@PathRect:

; 1371 :     }
; 1372 : }

  00430	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  00437	5f		 pop	 rdi
  00438	5d		 pop	 rbp
  00439	c3		 ret	 0
?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z ENDP	; ImDrawList::PathRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z
_TEXT	SEGMENT
p1$ = 8
t_step$4 = 36
i_step$5 = 68
$T6 = 292
__$ArrayPad$ = 312
this$ = 352
p2$ = 360
p3$ = 368
num_segments$ = 376
?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z PROC ; ImDrawList::PathBezierQuadraticCurveTo, COMDAT

; 1298 : {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 98 01
	00 00		 sub	 rsp, 408		; 00000198H
  0001d	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 66 00 00 00	 mov	 ecx, 102		; 00000066H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+440]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1299 :     ImVec2 p1 = _Path.back();

  0004a	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00051	48 83 c0 78	 add	 rax, 120		; 00000078H
  00055	48 8b c8	 mov	 rcx, rax
  00058	e8 00 00 00 00	 call	 ?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ ; ImVector<ImVec2>::back
  0005d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00060	48 89 45 08	 mov	 QWORD PTR p1$[rbp], rax

; 1300 :     if (num_segments == 0)

  00064	83 bd 78 01 00
	00 00		 cmp	 DWORD PTR num_segments$[rbp], 0
  0006b	0f 85 b8 00 00
	00		 jne	 $LN5@PathBezier

; 1301 :     {
; 1302 :         IM_ASSERT(_Data->CurveTessellationTol > 0.0f);

  00071	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00078	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0007c	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  00081	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00088	77 22		 ja	 SHORT $LN8@PathBezier
  0008a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z@4JA
  00090	83 c0 04	 add	 eax, 4
  00093	44 8b c0	 mov	 r8d, eax
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@DFNGCDMN@?$AA_?$AAD?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAC?$AAu?$AAr?$AAv?$AAe?$AAT?$AAe?$AAs?$AAs?$AAe?$AAl?$AAl?$AAa?$AAt?$AAi?$AAo?$AAn?$AAT?$AAo?$AAl?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4@
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000aa	33 c0		 xor	 eax, eax
$LN8@PathBezier:

; 1303 :         PathBezierQuadraticCurveToCasteljau(&_Path, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, _Data->CurveTessellationTol, 0);// Auto-tessellated

  000ac	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b3	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  000b7	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000be	48 83 c1 78	 add	 rcx, 120		; 00000078H
  000c2	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR [rsp+64], 0
  000ca	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  000cf	f3 0f 11 44 24
	38		 movss	 DWORD PTR [rsp+56], xmm0
  000d5	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR p3$[rbp]
  000dc	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  000e1	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  000e7	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR p3$[rbp]
  000ee	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  000f2	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  000f8	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR p2$[rbp]
  000ff	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00104	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0010a	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR p2$[rbp]
  00111	f3 0f 10 18	 movss	 xmm3, DWORD PTR [rax]
  00115	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR p1$[rbp+4]
  0011a	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR p1$[rbp]
  0011f	e8 00 00 00 00	 call	 ?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z ; PathBezierQuadraticCurveToCasteljau

; 1304 :     }
; 1305 :     else

  00124	e9 82 00 00 00	 jmp	 $LN6@PathBezier
$LN5@PathBezier:

; 1306 :     {
; 1307 :         float t_step = 1.0f / (float)num_segments;

  00129	f3 0f 2a 85 78
	01 00 00	 cvtsi2ss xmm0, DWORD PTR num_segments$[rbp]
  00131	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00139	f3 0f 5e c8	 divss	 xmm1, xmm0
  0013d	0f 28 c1	 movaps	 xmm0, xmm1
  00140	f3 0f 11 45 24	 movss	 DWORD PTR t_step$4[rbp], xmm0

; 1308 :         for (int i_step = 1; i_step <= num_segments; i_step++)

  00145	c7 45 44 01 00
	00 00		 mov	 DWORD PTR i_step$5[rbp], 1
  0014c	eb 08		 jmp	 SHORT $LN4@PathBezier
$LN2@PathBezier:
  0014e	8b 45 44	 mov	 eax, DWORD PTR i_step$5[rbp]
  00151	ff c0		 inc	 eax
  00153	89 45 44	 mov	 DWORD PTR i_step$5[rbp], eax
$LN4@PathBezier:
  00156	8b 85 78 01 00
	00		 mov	 eax, DWORD PTR num_segments$[rbp]
  0015c	39 45 44	 cmp	 DWORD PTR i_step$5[rbp], eax
  0015f	7f 4a		 jg	 SHORT $LN3@PathBezier

; 1309 :             _Path.push_back(ImBezierQuadraticCalc(p1, p2, p3, t_step * i_step));

  00161	f3 0f 2a 45 44	 cvtsi2ss xmm0, DWORD PTR i_step$5[rbp]
  00166	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR t_step$4[rbp]
  0016b	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0016f	0f 28 c1	 movaps	 xmm0, xmm1
  00172	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00178	4c 8b 8d 70 01
	00 00		 mov	 r9, QWORD PTR p3$[rbp]
  0017f	4c 8b 85 68 01
	00 00		 mov	 r8, QWORD PTR p2$[rbp]
  00186	48 8d 55 08	 lea	 rdx, QWORD PTR p1$[rbp]
  0018a	48 8d 8d 24 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00191	e8 00 00 00 00	 call	 ?ImBezierQuadraticCalc@@YA?AUImVec2@@AEBU1@00M@Z ; ImBezierQuadraticCalc
  00196	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0019d	48 83 c1 78	 add	 rcx, 120		; 00000078H
  001a1	48 8b d0	 mov	 rdx, rax
  001a4	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
  001a9	eb a3		 jmp	 SHORT $LN2@PathBezier
$LN3@PathBezier:
$LN6@PathBezier:

; 1310 :     }
; 1311 : }

  001ab	48 8d 4d b0	 lea	 rcx, QWORD PTR [rbp-80]
  001af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z$rtcFrameData
  001b6	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001bb	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001c2	48 33 cd	 xor	 rcx, rbp
  001c5	e8 00 00 00 00	 call	 __security_check_cookie
  001ca	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  001d1	5f		 pop	 rdi
  001d2	5d		 pop	 rbp
  001d3	c3		 ret	 0
?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z ENDP ; ImDrawList::PathBezierQuadraticCurveTo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z
_TEXT	SEGMENT
p1$ = 8
t_step$4 = 36
i_step$5 = 68
$T6 = 292
__$ArrayPad$ = 312
this$ = 352
p2$ = 360
p3$ = 368
p4$ = 376
num_segments$ = 384
?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z PROC ; ImDrawList::PathBezierCubicCurveTo, COMDAT

; 1282 : {

$LN9:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001d	48 8d 6c 24 60	 lea	 rbp, QWORD PTR [rsp+96]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+456]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1283 :     ImVec2 p1 = _Path.back();

  0004a	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00051	48 83 c0 78	 add	 rax, 120		; 00000078H
  00055	48 8b c8	 mov	 rcx, rax
  00058	e8 00 00 00 00	 call	 ?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ ; ImVector<ImVec2>::back
  0005d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00060	48 89 45 08	 mov	 QWORD PTR p1$[rbp], rax

; 1284 :     if (num_segments == 0)

  00064	83 bd 80 01 00
	00 00		 cmp	 DWORD PTR num_segments$[rbp], 0
  0006b	0f 85 db 00 00
	00		 jne	 $LN5@PathBezier

; 1285 :     {
; 1286 :         IM_ASSERT(_Data->CurveTessellationTol > 0.0f);

  00071	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00078	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0007c	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  00081	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00088	77 22		 ja	 SHORT $LN8@PathBezier
  0008a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z@4JA
  00090	83 c0 04	 add	 eax, 4
  00093	44 8b c0	 mov	 r8d, eax
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@DFNGCDMN@?$AA_?$AAD?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAC?$AAu?$AAr?$AAv?$AAe?$AAT?$AAe?$AAs?$AAs?$AAe?$AAl?$AAl?$AAa?$AAt?$AAi?$AAo?$AAn?$AAT?$AAo?$AAl?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4@
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000aa	33 c0		 xor	 eax, eax
$LN8@PathBezier:

; 1287 :         PathBezierCubicCurveToCasteljau(&_Path, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, p4.x, p4.y, _Data->CurveTessellationTol, 0); // Auto-tessellated

  000ac	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b3	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  000b7	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000be	48 83 c1 78	 add	 rcx, 120		; 00000078H
  000c2	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR [rsp+80], 0
  000ca	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  000cf	f3 0f 11 44 24
	48		 movss	 DWORD PTR [rsp+72], xmm0
  000d5	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR p4$[rbp]
  000dc	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  000e1	f3 0f 11 44 24
	40		 movss	 DWORD PTR [rsp+64], xmm0
  000e7	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR p4$[rbp]
  000ee	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  000f2	f3 0f 11 44 24
	38		 movss	 DWORD PTR [rsp+56], xmm0
  000f8	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR p3$[rbp]
  000ff	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00104	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  0010a	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR p3$[rbp]
  00111	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00115	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  0011b	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR p2$[rbp]
  00122	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00127	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0012d	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR p2$[rbp]
  00134	f3 0f 10 18	 movss	 xmm3, DWORD PTR [rax]
  00138	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR p1$[rbp+4]
  0013d	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR p1$[rbp]
  00142	e8 00 00 00 00	 call	 ?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z ; PathBezierCubicCurveToCasteljau

; 1288 :     }
; 1289 :     else

  00147	e9 8e 00 00 00	 jmp	 $LN6@PathBezier
$LN5@PathBezier:

; 1290 :     {
; 1291 :         float t_step = 1.0f / (float)num_segments;

  0014c	f3 0f 2a 85 80
	01 00 00	 cvtsi2ss xmm0, DWORD PTR num_segments$[rbp]
  00154	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0015c	f3 0f 5e c8	 divss	 xmm1, xmm0
  00160	0f 28 c1	 movaps	 xmm0, xmm1
  00163	f3 0f 11 45 24	 movss	 DWORD PTR t_step$4[rbp], xmm0

; 1292 :         for (int i_step = 1; i_step <= num_segments; i_step++)

  00168	c7 45 44 01 00
	00 00		 mov	 DWORD PTR i_step$5[rbp], 1
  0016f	eb 08		 jmp	 SHORT $LN4@PathBezier
$LN2@PathBezier:
  00171	8b 45 44	 mov	 eax, DWORD PTR i_step$5[rbp]
  00174	ff c0		 inc	 eax
  00176	89 45 44	 mov	 DWORD PTR i_step$5[rbp], eax
$LN4@PathBezier:
  00179	8b 85 80 01 00
	00		 mov	 eax, DWORD PTR num_segments$[rbp]
  0017f	39 45 44	 cmp	 DWORD PTR i_step$5[rbp], eax
  00182	7f 56		 jg	 SHORT $LN3@PathBezier

; 1293 :             _Path.push_back(ImBezierCubicCalc(p1, p2, p3, p4, t_step * i_step));

  00184	f3 0f 2a 45 44	 cvtsi2ss xmm0, DWORD PTR i_step$5[rbp]
  00189	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR t_step$4[rbp]
  0018e	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00192	0f 28 c1	 movaps	 xmm0, xmm1
  00195	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  0019b	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR p4$[rbp]
  001a2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a7	4c 8b 8d 70 01
	00 00		 mov	 r9, QWORD PTR p3$[rbp]
  001ae	4c 8b 85 68 01
	00 00		 mov	 r8, QWORD PTR p2$[rbp]
  001b5	48 8d 55 08	 lea	 rdx, QWORD PTR p1$[rbp]
  001b9	48 8d 8d 24 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  001c0	e8 00 00 00 00	 call	 ?ImBezierCubicCalc@@YA?AUImVec2@@AEBU1@000M@Z ; ImBezierCubicCalc
  001c5	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cc	48 83 c1 78	 add	 rcx, 120		; 00000078H
  001d0	48 8b d0	 mov	 rdx, rax
  001d3	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
  001d8	eb 97		 jmp	 SHORT $LN2@PathBezier
$LN3@PathBezier:
$LN6@PathBezier:

; 1294 :     }
; 1295 : }

  001da	48 8d 4d a0	 lea	 rcx, QWORD PTR [rbp-96]
  001de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z$rtcFrameData
  001e5	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001ea	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001f1	48 33 cd	 xor	 rcx, rbp
  001f4	e8 00 00 00 00	 call	 __security_check_cookie
  001f9	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  00200	5f		 pop	 rdi
  00201	5d		 pop	 rbp
  00202	c3		 ret	 0
?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z ENDP ; ImDrawList::PathBezierCubicCurveTo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z
_TEXT	SEGMENT
tv71 = 192
this$ = 240
center$ = 248
radius$ = 256
a_min_of_12$ = 264
a_max_of_12$ = 272
?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z PROC	; ImDrawList::PathArcToFast, COMDAT

; 1159 : {

$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 1160 :     if (radius < 0.5f)

  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00042	0f 2f 85 00 01
	00 00		 comiss	 xmm0, DWORD PTR radius$[rbp]
  00049	76 1c		 jbe	 SHORT $LN2@PathArcToF

; 1161 :     {
; 1162 :         _Path.push_back(center);

  0004b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00052	48 83 c0 78	 add	 rax, 120		; 00000078H
  00056	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR center$[rbp]
  0005d	48 8b c8	 mov	 rcx, rax
  00060	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back

; 1163 :         return;

  00065	eb 56		 jmp	 SHORT $LN1@PathArcToF
$LN2@PathArcToF:

; 1164 :     }
; 1165 :     _PathArcToFastEx(center, radius, a_min_of_12 * IM_DRAWLIST_ARCFAST_SAMPLE_MAX / 12, a_max_of_12 * IM_DRAWLIST_ARCFAST_SAMPLE_MAX / 12, 0);

  00067	6b 85 10 01 00
	00 30		 imul	 eax, DWORD PTR a_max_of_12$[rbp], 48 ; 00000030H
  0006e	99		 cdq
  0006f	b9 0c 00 00 00	 mov	 ecx, 12
  00074	f7 f9		 idiv	 ecx
  00076	89 85 c0 00 00
	00		 mov	 DWORD PTR tv71[rbp], eax
  0007c	6b 8d 08 01 00
	00 30		 imul	 ecx, DWORD PTR a_min_of_12$[rbp], 48 ; 00000030H
  00083	8b c1		 mov	 eax, ecx
  00085	99		 cdq
  00086	b9 0c 00 00 00	 mov	 ecx, 12
  0008b	f7 f9		 idiv	 ecx
  0008d	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00095	8b 8d c0 00 00
	00		 mov	 ecx, DWORD PTR tv71[rbp]
  0009b	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0009f	44 8b c8	 mov	 r9d, eax
  000a2	f3 0f 10 95 00
	01 00 00	 movss	 xmm2, DWORD PTR radius$[rbp]
  000aa	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR center$[rbp]
  000b1	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b8	e8 00 00 00 00	 call	 ?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z ; ImDrawList::_PathArcToFastEx
$LN1@PathArcToF:

; 1166 : }

  000bd	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000c4	5f		 pop	 rdi
  000c5	5d		 pop	 rbp
  000c6	c3		 ret	 0
?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ENDP	; ImDrawList::PathArcToFast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z
_TEXT	SEGMENT
a_is_reverse$1 = 4
a_min_sample_f$2 = 36
a_max_sample_f$3 = 68
a_min_sample$4 = 100
a_max_sample$5 = 132
a_mid_samples$6 = 164
a_min_segment_angle$7 = 196
a_max_segment_angle$8 = 228
a_emit_start$9 = 260
a_emit_end$10 = 292
arc_length$11 = 324
circle_segment_count$12 = 356
arc_segment_count$13 = 388
$T14 = 612
$T15 = 644
tv232 = 660
tv214 = 660
tv188 = 660
tv170 = 660
tv162 = 660
tv157 = 660
tv144 = 660
tv133 = 660
tv92 = 660
tv79 = 660
tv174 = 664
this$ = 704
center$ = 712
radius$ = 720
a_min$ = 728
a_max$ = 736
num_segments$ = 744
?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z PROC	; ImDrawList::PathArcTo, COMDAT

; 1169 : {

$LN26:
  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00011	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00016	55		 push	 rbp
  00017	57		 push	 rdi
  00018	48 81 ec d8 02
	00 00		 sub	 rsp, 728		; 000002d8H
  0001f	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00024	48 8b fc	 mov	 rdi, rsp
  00027	b9 b6 00 00 00	 mov	 ecx, 182		; 000000b6H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 f8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+760]

; 1170 :     if (radius < 0.5f)

  0003b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00043	0f 2f 85 d0 02
	00 00		 comiss	 xmm0, DWORD PTR radius$[rbp]
  0004a	76 1f		 jbe	 SHORT $LN2@PathArcTo

; 1171 :     {
; 1172 :         _Path.push_back(center);

  0004c	48 8b 85 c0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 83 c0 78	 add	 rax, 120		; 00000078H
  00057	48 8b 95 c8 02
	00 00		 mov	 rdx, QWORD PTR center$[rbp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back

; 1173 :         return;

  00066	e9 fa 04 00 00	 jmp	 $LN1@PathArcTo
$LN2@PathArcTo:

; 1174 :     }
; 1175 : 
; 1176 :     if (num_segments > 0)

  0006b	83 bd e8 02 00
	00 00		 cmp	 DWORD PTR num_segments$[rbp], 0
  00072	7e 40		 jle	 SHORT $LN3@PathArcTo

; 1177 :     {
; 1178 :         _PathArcToN(center, radius, a_min, a_max, num_segments);

  00074	8b 85 e8 02 00
	00		 mov	 eax, DWORD PTR num_segments$[rbp]
  0007a	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0007e	f3 0f 10 85 e0
	02 00 00	 movss	 xmm0, DWORD PTR a_max$[rbp]
  00086	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0008c	f3 0f 10 9d d8
	02 00 00	 movss	 xmm3, DWORD PTR a_min$[rbp]
  00094	f3 0f 10 95 d0
	02 00 00	 movss	 xmm2, DWORD PTR radius$[rbp]
  0009c	48 8b 95 c8 02
	00 00		 mov	 rdx, QWORD PTR center$[rbp]
  000a3	48 8b 8d c0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000aa	e8 00 00 00 00	 call	 ?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::_PathArcToN

; 1179 :         return;

  000af	e9 b1 04 00 00	 jmp	 $LN1@PathArcTo
$LN3@PathArcTo:

; 1180 :     }
; 1181 : 
; 1182 :     // Automatic segment count
; 1183 :     if (radius <= _Data->ArcFastRadiusCutoff)

  000b4	48 8b 85 c0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bb	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  000bf	f3 0f 10 80 c0
	01 00 00	 movss	 xmm0, DWORD PTR [rax+448]
  000c7	0f 2f 85 d0 02
	00 00		 comiss	 xmm0, DWORD PTR radius$[rbp]
  000ce	0f 82 ce 03 00
	00		 jb	 $LN4@PathArcTo

; 1184 :     {
; 1185 :         const bool a_is_reverse = a_max < a_min;

  000d4	f3 0f 10 85 d8
	02 00 00	 movss	 xmm0, DWORD PTR a_min$[rbp]
  000dc	0f 2f 85 e0 02
	00 00		 comiss	 xmm0, DWORD PTR a_max$[rbp]
  000e3	76 09		 jbe	 SHORT $LN10@PathArcTo
  000e5	c6 85 94 02 00
	00 01		 mov	 BYTE PTR tv79[rbp], 1
  000ec	eb 07		 jmp	 SHORT $LN11@PathArcTo
$LN10@PathArcTo:
  000ee	c6 85 94 02 00
	00 00		 mov	 BYTE PTR tv79[rbp], 0
$LN11@PathArcTo:
  000f5	0f b6 85 94 02
	00 00		 movzx	 eax, BYTE PTR tv79[rbp]
  000fc	88 45 04	 mov	 BYTE PTR a_is_reverse$1[rbp], al

; 1186 : 
; 1187 :         // We are going to use precomputed values for mid samples.
; 1188 :         // Determine first and last sample in lookup table that belong to the arc.
; 1189 :         const float a_min_sample_f = IM_DRAWLIST_ARCFAST_SAMPLE_MAX * a_min / (IM_PI * 2.0f);

  000ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42400000
  00107	f3 0f 59 85 d8
	02 00 00	 mulss	 xmm0, DWORD PTR a_min$[rbp]
  0010f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40c90fdb
  00117	f3 0f 11 45 24	 movss	 DWORD PTR a_min_sample_f$2[rbp], xmm0

; 1190 :         const float a_max_sample_f = IM_DRAWLIST_ARCFAST_SAMPLE_MAX * a_max / (IM_PI * 2.0f);

  0011c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42400000
  00124	f3 0f 59 85 e0
	02 00 00	 mulss	 xmm0, DWORD PTR a_max$[rbp]
  0012c	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40c90fdb
  00134	f3 0f 11 45 44	 movss	 DWORD PTR a_max_sample_f$3[rbp], xmm0

; 1191 : 
; 1192 :         const int a_min_sample = a_is_reverse ? (int)ImFloorSigned(a_min_sample_f) : (int)ImCeil(a_min_sample_f);

  00139	0f b6 45 04	 movzx	 eax, BYTE PTR a_is_reverse$1[rbp]
  0013d	85 c0		 test	 eax, eax
  0013f	74 16		 je	 SHORT $LN12@PathArcTo
  00141	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR a_min_sample_f$2[rbp]
  00146	e8 00 00 00 00	 call	 ?ImFloorSigned@@YAMM@Z	; ImFloorSigned
  0014b	f3 0f 2c c0	 cvttss2si eax, xmm0
  0014f	89 85 94 02 00
	00		 mov	 DWORD PTR tv92[rbp], eax
  00155	eb 15		 jmp	 SHORT $LN13@PathArcTo
$LN12@PathArcTo:
  00157	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR a_min_sample_f$2[rbp]
  0015c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ceilf
  00162	f3 0f 2c c0	 cvttss2si eax, xmm0
  00166	89 85 94 02 00
	00		 mov	 DWORD PTR tv92[rbp], eax
$LN13@PathArcTo:
  0016c	8b 85 94 02 00
	00		 mov	 eax, DWORD PTR tv92[rbp]
  00172	89 45 64	 mov	 DWORD PTR a_min_sample$4[rbp], eax

; 1193 :         const int a_max_sample = a_is_reverse ? (int)ImCeil(a_max_sample_f) : (int)ImFloorSigned(a_max_sample_f);

  00175	0f b6 45 04	 movzx	 eax, BYTE PTR a_is_reverse$1[rbp]
  00179	85 c0		 test	 eax, eax
  0017b	74 17		 je	 SHORT $LN14@PathArcTo
  0017d	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR a_max_sample_f$3[rbp]
  00182	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ceilf
  00188	f3 0f 2c c0	 cvttss2si eax, xmm0
  0018c	89 85 94 02 00
	00		 mov	 DWORD PTR tv133[rbp], eax
  00192	eb 14		 jmp	 SHORT $LN15@PathArcTo
$LN14@PathArcTo:
  00194	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR a_max_sample_f$3[rbp]
  00199	e8 00 00 00 00	 call	 ?ImFloorSigned@@YAMM@Z	; ImFloorSigned
  0019e	f3 0f 2c c0	 cvttss2si eax, xmm0
  001a2	89 85 94 02 00
	00		 mov	 DWORD PTR tv133[rbp], eax
$LN15@PathArcTo:
  001a8	8b 85 94 02 00
	00		 mov	 eax, DWORD PTR tv133[rbp]
  001ae	89 85 84 00 00
	00		 mov	 DWORD PTR a_max_sample$5[rbp], eax

; 1194 :         const int a_mid_samples = a_is_reverse ? ImMax(a_min_sample - a_max_sample, 0) : ImMax(a_max_sample - a_min_sample, 0);

  001b4	0f b6 45 04	 movzx	 eax, BYTE PTR a_is_reverse$1[rbp]
  001b8	85 c0		 test	 eax, eax
  001ba	74 1e		 je	 SHORT $LN16@PathArcTo
  001bc	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR a_max_sample$5[rbp]
  001c2	8b 4d 64	 mov	 ecx, DWORD PTR a_min_sample$4[rbp]
  001c5	2b c8		 sub	 ecx, eax
  001c7	8b c1		 mov	 eax, ecx
  001c9	33 d2		 xor	 edx, edx
  001cb	8b c8		 mov	 ecx, eax
  001cd	e8 00 00 00 00	 call	 ??$ImMax@H@@YAHHH@Z	; ImMax<int>
  001d2	89 85 94 02 00
	00		 mov	 DWORD PTR tv144[rbp], eax
  001d8	eb 1c		 jmp	 SHORT $LN17@PathArcTo
$LN16@PathArcTo:
  001da	8b 45 64	 mov	 eax, DWORD PTR a_min_sample$4[rbp]
  001dd	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR a_max_sample$5[rbp]
  001e3	2b c8		 sub	 ecx, eax
  001e5	8b c1		 mov	 eax, ecx
  001e7	33 d2		 xor	 edx, edx
  001e9	8b c8		 mov	 ecx, eax
  001eb	e8 00 00 00 00	 call	 ??$ImMax@H@@YAHHH@Z	; ImMax<int>
  001f0	89 85 94 02 00
	00		 mov	 DWORD PTR tv144[rbp], eax
$LN17@PathArcTo:
  001f6	8b 85 94 02 00
	00		 mov	 eax, DWORD PTR tv144[rbp]
  001fc	89 85 a4 00 00
	00		 mov	 DWORD PTR a_mid_samples$6[rbp], eax

; 1195 : 
; 1196 :         const float a_min_segment_angle = a_min_sample * IM_PI * 2.0f / IM_DRAWLIST_ARCFAST_SAMPLE_MAX;

  00202	f3 0f 2a 45 64	 cvtsi2ss xmm0, DWORD PTR a_min_sample$4[rbp]
  00207	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40490fdb
  0020f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00217	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42400000
  0021f	f3 0f 11 85 c4
	00 00 00	 movss	 DWORD PTR a_min_segment_angle$7[rbp], xmm0

; 1197 :         const float a_max_segment_angle = a_max_sample * IM_PI * 2.0f / IM_DRAWLIST_ARCFAST_SAMPLE_MAX;

  00227	f3 0f 2a 85 84
	00 00 00	 cvtsi2ss xmm0, DWORD PTR a_max_sample$5[rbp]
  0022f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40490fdb
  00237	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0023f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42400000
  00247	f3 0f 11 85 e4
	00 00 00	 movss	 DWORD PTR a_max_segment_angle$8[rbp], xmm0

; 1198 :         const bool a_emit_start = ImAbs(a_min_segment_angle - a_min) >= 1e-5f;

  0024f	f3 0f 10 85 c4
	00 00 00	 movss	 xmm0, DWORD PTR a_min_segment_angle$7[rbp]
  00257	f3 0f 5c 85 d8
	02 00 00	 subss	 xmm0, DWORD PTR a_min$[rbp]
  0025f	e8 00 00 00 00	 call	 ?ImAbs@@YAMM@Z		; ImAbs
  00264	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3727c5ac
  0026b	72 09		 jb	 SHORT $LN18@PathArcTo
  0026d	c6 85 94 02 00
	00 01		 mov	 BYTE PTR tv157[rbp], 1
  00274	eb 07		 jmp	 SHORT $LN19@PathArcTo
$LN18@PathArcTo:
  00276	c6 85 94 02 00
	00 00		 mov	 BYTE PTR tv157[rbp], 0
$LN19@PathArcTo:
  0027d	0f b6 85 94 02
	00 00		 movzx	 eax, BYTE PTR tv157[rbp]
  00284	88 85 04 01 00
	00		 mov	 BYTE PTR a_emit_start$9[rbp], al

; 1199 :         const bool a_emit_end = ImAbs(a_max - a_max_segment_angle) >= 1e-5f;

  0028a	f3 0f 10 85 e0
	02 00 00	 movss	 xmm0, DWORD PTR a_max$[rbp]
  00292	f3 0f 5c 85 e4
	00 00 00	 subss	 xmm0, DWORD PTR a_max_segment_angle$8[rbp]
  0029a	e8 00 00 00 00	 call	 ?ImAbs@@YAMM@Z		; ImAbs
  0029f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3727c5ac
  002a6	72 09		 jb	 SHORT $LN20@PathArcTo
  002a8	c6 85 94 02 00
	00 01		 mov	 BYTE PTR tv162[rbp], 1
  002af	eb 07		 jmp	 SHORT $LN21@PathArcTo
$LN20@PathArcTo:
  002b1	c6 85 94 02 00
	00 00		 mov	 BYTE PTR tv162[rbp], 0
$LN21@PathArcTo:
  002b8	0f b6 85 94 02
	00 00		 movzx	 eax, BYTE PTR tv162[rbp]
  002bf	88 85 24 01 00
	00		 mov	 BYTE PTR a_emit_end$10[rbp], al

; 1200 : 
; 1201 :         _Path.reserve(_Path.Size + (a_mid_samples + 1 + (a_emit_start ? 1 : 0) + (a_emit_end ? 1 : 0)));

  002c5	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR a_emit_start$9[rbp]
  002cc	85 c0		 test	 eax, eax
  002ce	74 0c		 je	 SHORT $LN22@PathArcTo
  002d0	c7 85 94 02 00
	00 01 00 00 00	 mov	 DWORD PTR tv170[rbp], 1
  002da	eb 0a		 jmp	 SHORT $LN23@PathArcTo
$LN22@PathArcTo:
  002dc	c7 85 94 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv170[rbp], 0
$LN23@PathArcTo:
  002e6	0f b6 85 24 01
	00 00		 movzx	 eax, BYTE PTR a_emit_end$10[rbp]
  002ed	85 c0		 test	 eax, eax
  002ef	74 0c		 je	 SHORT $LN24@PathArcTo
  002f1	c7 85 98 02 00
	00 01 00 00 00	 mov	 DWORD PTR tv174[rbp], 1
  002fb	eb 0a		 jmp	 SHORT $LN25@PathArcTo
$LN24@PathArcTo:
  002fd	c7 85 98 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv174[rbp], 0
$LN25@PathArcTo:
  00307	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR a_mid_samples$6[rbp]
  0030d	8b 8d 94 02 00
	00		 mov	 ecx, DWORD PTR tv170[rbp]
  00313	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00317	03 85 98 02 00
	00		 add	 eax, DWORD PTR tv174[rbp]
  0031d	48 8b 8d c0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00324	03 41 78	 add	 eax, DWORD PTR [rcx+120]
  00327	48 8b 8d c0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0032e	48 83 c1 78	 add	 rcx, 120		; 00000078H
  00332	8b d0		 mov	 edx, eax
  00334	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z ; ImVector<ImVec2>::reserve

; 1202 :         if (a_emit_start)

  00339	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR a_emit_start$9[rbp]
  00340	85 c0		 test	 eax, eax
  00342	0f 84 86 00 00
	00		 je	 $LN6@PathArcTo

; 1203 :             _Path.push_back(ImVec2(center.x + ImCos(a_min) * radius, center.y + ImSin(a_min) * radius));

  00348	f3 0f 10 85 d8
	02 00 00	 movss	 xmm0, DWORD PTR a_min$[rbp]
  00350	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sinf
  00356	f3 0f 59 85 d0
	02 00 00	 mulss	 xmm0, DWORD PTR radius$[rbp]
  0035e	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR center$[rbp]
  00365	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [rax+4]
  0036a	f3 0f 58 c8	 addss	 xmm1, xmm0
  0036e	0f 28 c1	 movaps	 xmm0, xmm1
  00371	f3 0f 11 85 94
	02 00 00	 movss	 DWORD PTR tv188[rbp], xmm0
  00379	f3 0f 10 85 d8
	02 00 00	 movss	 xmm0, DWORD PTR a_min$[rbp]
  00381	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cosf
  00387	f3 0f 59 85 d0
	02 00 00	 mulss	 xmm0, DWORD PTR radius$[rbp]
  0038f	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR center$[rbp]
  00396	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  0039a	f3 0f 58 c8	 addss	 xmm1, xmm0
  0039e	0f 28 c1	 movaps	 xmm0, xmm1
  003a1	f3 0f 10 8d 94
	02 00 00	 movss	 xmm1, DWORD PTR tv188[rbp]
  003a9	0f 28 d1	 movaps	 xmm2, xmm1
  003ac	0f 28 c8	 movaps	 xmm1, xmm0
  003af	48 8d 8d 64 02
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  003b6	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  003bb	48 8b 8d c0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003c2	48 83 c1 78	 add	 rcx, 120		; 00000078H
  003c6	48 8b d0	 mov	 rdx, rax
  003c9	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
$LN6@PathArcTo:

; 1204 :         if (a_mid_samples > 0)

  003ce	83 bd a4 00 00
	00 00		 cmp	 DWORD PTR a_mid_samples$6[rbp], 0
  003d5	7e 31		 jle	 SHORT $LN7@PathArcTo

; 1205 :             _PathArcToFastEx(center, radius, a_min_sample, a_max_sample, 0);

  003d7	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  003df	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR a_max_sample$5[rbp]
  003e5	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  003e9	44 8b 4d 64	 mov	 r9d, DWORD PTR a_min_sample$4[rbp]
  003ed	f3 0f 10 95 d0
	02 00 00	 movss	 xmm2, DWORD PTR radius$[rbp]
  003f5	48 8b 95 c8 02
	00 00		 mov	 rdx, QWORD PTR center$[rbp]
  003fc	48 8b 8d c0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00403	e8 00 00 00 00	 call	 ?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z ; ImDrawList::_PathArcToFastEx
$LN7@PathArcTo:

; 1206 :         if (a_emit_end)

  00408	0f b6 85 24 01
	00 00		 movzx	 eax, BYTE PTR a_emit_end$10[rbp]
  0040f	85 c0		 test	 eax, eax
  00411	0f 84 86 00 00
	00		 je	 $LN8@PathArcTo

; 1207 :             _Path.push_back(ImVec2(center.x + ImCos(a_max) * radius, center.y + ImSin(a_max) * radius));

  00417	f3 0f 10 85 e0
	02 00 00	 movss	 xmm0, DWORD PTR a_max$[rbp]
  0041f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sinf
  00425	f3 0f 59 85 d0
	02 00 00	 mulss	 xmm0, DWORD PTR radius$[rbp]
  0042d	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR center$[rbp]
  00434	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [rax+4]
  00439	f3 0f 58 c8	 addss	 xmm1, xmm0
  0043d	0f 28 c1	 movaps	 xmm0, xmm1
  00440	f3 0f 11 85 94
	02 00 00	 movss	 DWORD PTR tv214[rbp], xmm0
  00448	f3 0f 10 85 e0
	02 00 00	 movss	 xmm0, DWORD PTR a_max$[rbp]
  00450	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cosf
  00456	f3 0f 59 85 d0
	02 00 00	 mulss	 xmm0, DWORD PTR radius$[rbp]
  0045e	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR center$[rbp]
  00465	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  00469	f3 0f 58 c8	 addss	 xmm1, xmm0
  0046d	0f 28 c1	 movaps	 xmm0, xmm1
  00470	f3 0f 10 8d 94
	02 00 00	 movss	 xmm1, DWORD PTR tv214[rbp]
  00478	0f 28 d1	 movaps	 xmm2, xmm1
  0047b	0f 28 c8	 movaps	 xmm1, xmm0
  0047e	48 8d 8d 84 02
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  00485	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0048a	48 8b 8d c0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00491	48 83 c1 78	 add	 rcx, 120		; 00000078H
  00495	48 8b d0	 mov	 rdx, rax
  00498	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
$LN8@PathArcTo:

; 1208 :     }
; 1209 :     else

  0049d	e9 c3 00 00 00	 jmp	 $LN5@PathArcTo
$LN4@PathArcTo:

; 1210 :     {
; 1211 :         const float arc_length = ImAbs(a_max - a_min);

  004a2	f3 0f 10 85 e0
	02 00 00	 movss	 xmm0, DWORD PTR a_max$[rbp]
  004aa	f3 0f 5c 85 d8
	02 00 00	 subss	 xmm0, DWORD PTR a_min$[rbp]
  004b2	e8 00 00 00 00	 call	 ?ImAbs@@YAMM@Z		; ImAbs
  004b7	f3 0f 11 85 44
	01 00 00	 movss	 DWORD PTR arc_length$11[rbp], xmm0

; 1212 :         const int circle_segment_count = _CalcCircleAutoSegmentCount(radius);

  004bf	f3 0f 10 8d d0
	02 00 00	 movss	 xmm1, DWORD PTR radius$[rbp]
  004c7	48 8b 8d c0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004ce	e8 00 00 00 00	 call	 ?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z ; ImDrawList::_CalcCircleAutoSegmentCount
  004d3	89 85 64 01 00
	00		 mov	 DWORD PTR circle_segment_count$12[rbp], eax

; 1213 :         const int arc_segment_count = ImMax((int)ImCeil(circle_segment_count * arc_length / (IM_PI * 2.0f)), (int)(2.0f * IM_PI / arc_length));

  004d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  004e1	f3 0f 5e 85 44
	01 00 00	 divss	 xmm0, DWORD PTR arc_length$11[rbp]
  004e9	f3 0f 2c c0	 cvttss2si eax, xmm0
  004ed	89 85 94 02 00
	00		 mov	 DWORD PTR tv232[rbp], eax
  004f3	f3 0f 2a 85 64
	01 00 00	 cvtsi2ss xmm0, DWORD PTR circle_segment_count$12[rbp]
  004fb	f3 0f 59 85 44
	01 00 00	 mulss	 xmm0, DWORD PTR arc_length$11[rbp]
  00503	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40c90fdb
  0050b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ceilf
  00511	f3 0f 2c c0	 cvttss2si eax, xmm0
  00515	8b 8d 94 02 00
	00		 mov	 ecx, DWORD PTR tv232[rbp]
  0051b	8b d1		 mov	 edx, ecx
  0051d	8b c8		 mov	 ecx, eax
  0051f	e8 00 00 00 00	 call	 ??$ImMax@H@@YAHHH@Z	; ImMax<int>
  00524	89 85 84 01 00
	00		 mov	 DWORD PTR arc_segment_count$13[rbp], eax

; 1214 :         _PathArcToN(center, radius, a_min, a_max, arc_segment_count);

  0052a	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR arc_segment_count$13[rbp]
  00530	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00534	f3 0f 10 85 e0
	02 00 00	 movss	 xmm0, DWORD PTR a_max$[rbp]
  0053c	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00542	f3 0f 10 9d d8
	02 00 00	 movss	 xmm3, DWORD PTR a_min$[rbp]
  0054a	f3 0f 10 95 d0
	02 00 00	 movss	 xmm2, DWORD PTR radius$[rbp]
  00552	48 8b 95 c8 02
	00 00		 mov	 rdx, QWORD PTR center$[rbp]
  00559	48 8b 8d c0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00560	e8 00 00 00 00	 call	 ?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::_PathArcToN
$LN5@PathArcTo:
$LN1@PathArcTo:

; 1215 :     }
; 1216 : }

  00565	48 8d a5 a8 02
	00 00		 lea	 rsp, QWORD PTR [rbp+680]
  0056c	5f		 pop	 rdi
  0056d	5d		 pop	 rbp
  0056e	c3		 ret	 0
?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ENDP	; ImDrawList::PathArcTo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?PathStroke@ImDrawList@@QEAAXIHM@Z
_TEXT	SEGMENT
this$ = 224
col$ = 232
flags$ = 240
thickness$ = 248
?PathStroke@ImDrawList@@QEAAXIHM@Z PROC			; ImDrawList::PathStroke, COMDAT

; 2571 :     inline    void  PathStroke(ImU32 col, ImDrawFlags flags = 0, float thickness = 1.0f) { AddPolyline(_Path.Data, _Path.Size, col, flags, thickness); _Path.Size = 0; }

$LN3:
  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000b	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  00039	f3 0f 10 85 f8
	00 00 00	 movss	 xmm0, DWORD PTR thickness$[rbp]
  00041	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00047	8b 85 f0 00 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  0004d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00051	44 8b 8d e8 00
	00 00		 mov	 r9d, DWORD PTR col$[rbp]
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	44 8b 40 78	 mov	 r8d, DWORD PTR [rax+120]
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 8b 90 80 00
	00 00		 mov	 rdx, QWORD PTR [rax+128]
  00071	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00078	e8 00 00 00 00	 call	 ?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z ; ImDrawList::AddPolyline
  0007d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00084	c7 40 78 00 00
	00 00		 mov	 DWORD PTR [rax+120], 0
  0008b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00092	5f		 pop	 rdi
  00093	5d		 pop	 rbp
  00094	c3		 ret	 0
?PathStroke@ImDrawList@@QEAAXIHM@Z ENDP			; ImDrawList::PathStroke
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?PathFillConvex@ImDrawList@@QEAAXI@Z
_TEXT	SEGMENT
this$ = 224
col$ = 232
?PathFillConvex@ImDrawList@@QEAAXI@Z PROC		; ImDrawList::PathFillConvex, COMDAT

; 2570 :     inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyFilled(_Path.Data, _Path.Size, col); _Path.Size = 0; }

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	44 8b 8d e8 00
	00 00		 mov	 r9d, DWORD PTR col$[rbp]
  00035	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	44 8b 40 78	 mov	 r8d, DWORD PTR [rax+120]
  00040	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00047	48 8b 90 80 00
	00 00		 mov	 rdx, QWORD PTR [rax+128]
  0004e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z ; ImDrawList::AddConvexPolyFilled
  0005a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00061	c7 40 78 00 00
	00 00		 mov	 DWORD PTR [rax+120], 0
  00068	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006f	5f		 pop	 rdi
  00070	5d		 pop	 rbp
  00071	c3		 ret	 0
?PathFillConvex@ImDrawList@@QEAAXI@Z ENDP		; ImDrawList::PathFillConvex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z
_TEXT	SEGMENT
this$ = 224
pos$ = 232
?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z PROC	; ImDrawList::PathLineTo, COMDAT

; 2568 :     inline    void  PathLineTo(const ImVec2& pos)                               { _Path.push_back(pos); }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 83 c0 78	 add	 rax, 120		; 00000078H
  0003a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR pos$[rbp]
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
  00049	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ENDP	; ImDrawList::PathLineTo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddImageRounded@ImDrawList@@QEAAXPEAXAEBUImVec2@@111IMH@Z
_TEXT	SEGMENT
push_texture_id$ = 4
vert_start_idx$ = 36
vert_end_idx$ = 68
tv81 = 276
this$ = 320
user_texture_id$ = 328
p_min$ = 336
p_max$ = 344
uv_min$ = 352
uv_max$ = 360
col$ = 368
rounding$ = 376
flags$ = 384
?AddImageRounded@ImDrawList@@QEAAXPEAXAEBUImVec2@@111IMH@Z PROC ; ImDrawList::AddImageRounded, COMDAT

; 1635 : {

$LN10:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0001d	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]

; 1636 :     if ((col & IM_COL32_A_MASK) == 0)

  00039	8b 85 70 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  0003f	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00044	85 c0		 test	 eax, eax
  00046	75 05		 jne	 SHORT $LN2@AddImageRo

; 1637 :         return;

  00048	e9 77 01 00 00	 jmp	 $LN1@AddImageRo
$LN2@AddImageRo:

; 1638 : 
; 1639 :     flags = FixRectCornerFlags(flags);

  0004d	8b 8d 80 01 00
	00		 mov	 ecx, DWORD PTR flags$[rbp]
  00053	e8 00 00 00 00	 call	 ?FixRectCornerFlags@@YAHH@Z ; FixRectCornerFlags
  00058	89 85 80 01 00
	00		 mov	 DWORD PTR flags$[rbp], eax

; 1640 :     if (rounding < 0.5f || (flags & ImDrawFlags_RoundCornersMask_) == ImDrawFlags_RoundCornersNone)

  0005e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00066	0f 2f 85 78 01
	00 00		 comiss	 xmm0, DWORD PTR rounding$[rbp]
  0006d	77 12		 ja	 SHORT $LN4@AddImageRo
  0006f	8b 85 80 01 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  00075	25 f0 01 00 00	 and	 eax, 496		; 000001f0H
  0007a	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0007f	75 48		 jne	 SHORT $LN3@AddImageRo
$LN4@AddImageRo:

; 1641 :     {
; 1642 :         AddImage(user_texture_id, p_min, p_max, uv_min, uv_max, col);

  00081	8b 85 70 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  00087	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0008b	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR uv_max$[rbp]
  00092	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00097	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR uv_min$[rbp]
  0009e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a3	4c 8b 8d 58 01
	00 00		 mov	 r9, QWORD PTR p_max$[rbp]
  000aa	4c 8b 85 50 01
	00 00		 mov	 r8, QWORD PTR p_min$[rbp]
  000b1	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR user_texture_id$[rbp]
  000b8	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000bf	e8 00 00 00 00	 call	 ?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z ; ImDrawList::AddImage

; 1643 :         return;

  000c4	e9 fb 00 00 00	 jmp	 $LN1@AddImageRo
$LN3@AddImageRo:

; 1644 :     }
; 1645 : 
; 1646 :     const bool push_texture_id = user_texture_id != _CmdHeader.TextureId;

  000c9	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d0	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  000d7	48 39 85 48 01
	00 00		 cmp	 QWORD PTR user_texture_id$[rbp], rax
  000de	74 09		 je	 SHORT $LN8@AddImageRo
  000e0	c6 85 14 01 00
	00 01		 mov	 BYTE PTR tv81[rbp], 1
  000e7	eb 07		 jmp	 SHORT $LN9@AddImageRo
$LN8@AddImageRo:
  000e9	c6 85 14 01 00
	00 00		 mov	 BYTE PTR tv81[rbp], 0
$LN9@AddImageRo:
  000f0	0f b6 85 14 01
	00 00		 movzx	 eax, BYTE PTR tv81[rbp]
  000f7	88 45 04	 mov	 BYTE PTR push_texture_id$[rbp], al

; 1647 :     if (push_texture_id)

  000fa	0f b6 45 04	 movzx	 eax, BYTE PTR push_texture_id$[rbp]
  000fe	85 c0		 test	 eax, eax
  00100	74 13		 je	 SHORT $LN5@AddImageRo

; 1648 :         PushTextureID(user_texture_id);

  00102	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR user_texture_id$[rbp]
  00109	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00110	e8 00 00 00 00	 call	 ?PushTextureID@ImDrawList@@QEAAXPEAX@Z ; ImDrawList::PushTextureID
$LN5@AddImageRo:

; 1649 : 
; 1650 :     int vert_start_idx = VtxBuffer.Size;

  00115	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0011c	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  0011f	89 45 24	 mov	 DWORD PTR vert_start_idx$[rbp], eax

; 1651 :     PathRect(p_min, p_max, rounding, flags);

  00122	8b 85 80 01 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  00128	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0012c	f3 0f 10 9d 78
	01 00 00	 movss	 xmm3, DWORD PTR rounding$[rbp]
  00134	4c 8b 85 58 01
	00 00		 mov	 r8, QWORD PTR p_max$[rbp]
  0013b	48 8b 95 50 01
	00 00		 mov	 rdx, QWORD PTR p_min$[rbp]
  00142	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00149	e8 00 00 00 00	 call	 ?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z ; ImDrawList::PathRect

; 1652 :     PathFillConvex(col);

  0014e	8b 95 70 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  00154	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0015b	e8 00 00 00 00	 call	 ?PathFillConvex@ImDrawList@@QEAAXI@Z ; ImDrawList::PathFillConvex

; 1653 :     int vert_end_idx = VtxBuffer.Size;

  00160	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00167	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  0016a	89 45 44	 mov	 DWORD PTR vert_end_idx$[rbp], eax

; 1654 :     ImGui::ShadeVertsLinearUV(this, vert_start_idx, vert_end_idx, p_min, p_max, uv_min, uv_max, true);

  0016d	c6 44 24 38 01	 mov	 BYTE PTR [rsp+56], 1
  00172	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR uv_max$[rbp]
  00179	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0017e	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR uv_min$[rbp]
  00185	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0018a	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR p_max$[rbp]
  00191	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00196	4c 8b 8d 50 01
	00 00		 mov	 r9, QWORD PTR p_min$[rbp]
  0019d	44 8b 45 44	 mov	 r8d, DWORD PTR vert_end_idx$[rbp]
  001a1	8b 55 24	 mov	 edx, DWORD PTR vert_start_idx$[rbp]
  001a4	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ab	e8 00 00 00 00	 call	 ?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z ; ImGui::ShadeVertsLinearUV

; 1655 : 
; 1656 :     if (push_texture_id)

  001b0	0f b6 45 04	 movzx	 eax, BYTE PTR push_texture_id$[rbp]
  001b4	85 c0		 test	 eax, eax
  001b6	74 0c		 je	 SHORT $LN6@AddImageRo

; 1657 :         PopTextureID();

  001b8	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001bf	e8 00 00 00 00	 call	 ?PopTextureID@ImDrawList@@QEAAXXZ ; ImDrawList::PopTextureID
$LN6@AddImageRo:
$LN1@AddImageRo:

; 1658 : }

  001c4	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  001cb	5f		 pop	 rdi
  001cc	5d		 pop	 rbp
  001cd	c3		 ret	 0
?AddImageRounded@ImDrawList@@QEAAXPEAXAEBUImVec2@@111IMH@Z ENDP ; ImDrawList::AddImageRounded
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddImageQuad@ImDrawList@@QEAAXPEAXAEBUImVec2@@1111111I@Z
_TEXT	SEGMENT
push_texture_id$ = 4
tv69 = 212
this$ = 256
user_texture_id$ = 264
p1$ = 272
p2$ = 280
p3$ = 288
p4$ = 296
uv1$ = 304
uv2$ = 312
uv3$ = 320
uv4$ = 328
col$ = 336
?AddImageQuad@ImDrawList@@QEAAXPEAXAEBUImVec2@@1111111I@Z PROC ; ImDrawList::AddImageQuad, COMDAT

; 1619 : {

$LN8:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0001d	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR [rsp+344]

; 1620 :     if ((col & IM_COL32_A_MASK) == 0)

  00039	8b 85 50 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  0003f	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00044	85 c0		 test	 eax, eax
  00046	75 05		 jne	 SHORT $LN2@AddImageQu

; 1621 :         return;

  00048	e9 de 00 00 00	 jmp	 $LN1@AddImageQu
$LN2@AddImageQu:

; 1622 : 
; 1623 :     const bool push_texture_id = user_texture_id != _CmdHeader.TextureId;

  0004d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00054	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0005b	48 39 85 08 01
	00 00		 cmp	 QWORD PTR user_texture_id$[rbp], rax
  00062	74 09		 je	 SHORT $LN6@AddImageQu
  00064	c6 85 d4 00 00
	00 01		 mov	 BYTE PTR tv69[rbp], 1
  0006b	eb 07		 jmp	 SHORT $LN7@AddImageQu
$LN6@AddImageQu:
  0006d	c6 85 d4 00 00
	00 00		 mov	 BYTE PTR tv69[rbp], 0
$LN7@AddImageQu:
  00074	0f b6 85 d4 00
	00 00		 movzx	 eax, BYTE PTR tv69[rbp]
  0007b	88 45 04	 mov	 BYTE PTR push_texture_id$[rbp], al

; 1624 :     if (push_texture_id)

  0007e	0f b6 45 04	 movzx	 eax, BYTE PTR push_texture_id$[rbp]
  00082	85 c0		 test	 eax, eax
  00084	74 13		 je	 SHORT $LN3@AddImageQu

; 1625 :         PushTextureID(user_texture_id);

  00086	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR user_texture_id$[rbp]
  0008d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00094	e8 00 00 00 00	 call	 ?PushTextureID@ImDrawList@@QEAAXPEAX@Z ; ImDrawList::PushTextureID
$LN3@AddImageQu:

; 1626 : 
; 1627 :     PrimReserve(6, 4);

  00099	41 b8 04 00 00
	00		 mov	 r8d, 4
  0009f	ba 06 00 00 00	 mov	 edx, 6
  000a4	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	e8 00 00 00 00	 call	 ?PrimReserve@ImDrawList@@QEAAXHH@Z ; ImDrawList::PrimReserve

; 1628 :     PrimQuadUV(p1, p2, p3, p4, uv1, uv2, uv3, uv4, col);

  000b0	8b 85 50 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  000b6	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  000ba	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR uv4$[rbp]
  000c1	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  000c6	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR uv3$[rbp]
  000cd	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000d2	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR uv2$[rbp]
  000d9	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  000de	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR uv1$[rbp]
  000e5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000ea	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR p4$[rbp]
  000f1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f6	4c 8b 8d 20 01
	00 00		 mov	 r9, QWORD PTR p3$[rbp]
  000fd	4c 8b 85 18 01
	00 00		 mov	 r8, QWORD PTR p2$[rbp]
  00104	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR p1$[rbp]
  0010b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00112	e8 00 00 00 00	 call	 ?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z ; ImDrawList::PrimQuadUV

; 1629 : 
; 1630 :     if (push_texture_id)

  00117	0f b6 45 04	 movzx	 eax, BYTE PTR push_texture_id$[rbp]
  0011b	85 c0		 test	 eax, eax
  0011d	74 0c		 je	 SHORT $LN4@AddImageQu

; 1631 :         PopTextureID();

  0011f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00126	e8 00 00 00 00	 call	 ?PopTextureID@ImDrawList@@QEAAXXZ ; ImDrawList::PopTextureID
$LN4@AddImageQu:
$LN1@AddImageQu:

; 1632 : }

  0012b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00132	5f		 pop	 rdi
  00133	5d		 pop	 rbp
  00134	c3		 ret	 0
?AddImageQuad@ImDrawList@@QEAAXPEAXAEBUImVec2@@1111111I@Z ENDP ; ImDrawList::AddImageQuad
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z
_TEXT	SEGMENT
push_texture_id$ = 4
tv69 = 212
this$ = 256
user_texture_id$ = 264
p_min$ = 272
p_max$ = 280
uv_min$ = 288
uv_max$ = 296
col$ = 304
?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z PROC	; ImDrawList::AddImage, COMDAT

; 1603 : {

$LN8:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]

; 1604 :     if ((col & IM_COL32_A_MASK) == 0)

  00039	8b 85 30 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  0003f	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00044	85 c0		 test	 eax, eax
  00046	75 05		 jne	 SHORT $LN2@AddImage

; 1605 :         return;

  00048	e9 ae 00 00 00	 jmp	 $LN1@AddImage
$LN2@AddImage:

; 1606 : 
; 1607 :     const bool push_texture_id = user_texture_id != _CmdHeader.TextureId;

  0004d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00054	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0005b	48 39 85 08 01
	00 00		 cmp	 QWORD PTR user_texture_id$[rbp], rax
  00062	74 09		 je	 SHORT $LN6@AddImage
  00064	c6 85 d4 00 00
	00 01		 mov	 BYTE PTR tv69[rbp], 1
  0006b	eb 07		 jmp	 SHORT $LN7@AddImage
$LN6@AddImage:
  0006d	c6 85 d4 00 00
	00 00		 mov	 BYTE PTR tv69[rbp], 0
$LN7@AddImage:
  00074	0f b6 85 d4 00
	00 00		 movzx	 eax, BYTE PTR tv69[rbp]
  0007b	88 45 04	 mov	 BYTE PTR push_texture_id$[rbp], al

; 1608 :     if (push_texture_id)

  0007e	0f b6 45 04	 movzx	 eax, BYTE PTR push_texture_id$[rbp]
  00082	85 c0		 test	 eax, eax
  00084	74 13		 je	 SHORT $LN3@AddImage

; 1609 :         PushTextureID(user_texture_id);

  00086	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR user_texture_id$[rbp]
  0008d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00094	e8 00 00 00 00	 call	 ?PushTextureID@ImDrawList@@QEAAXPEAX@Z ; ImDrawList::PushTextureID
$LN3@AddImage:

; 1610 : 
; 1611 :     PrimReserve(6, 4);

  00099	41 b8 04 00 00
	00		 mov	 r8d, 4
  0009f	ba 06 00 00 00	 mov	 edx, 6
  000a4	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	e8 00 00 00 00	 call	 ?PrimReserve@ImDrawList@@QEAAXHH@Z ; ImDrawList::PrimReserve

; 1612 :     PrimRectUV(p_min, p_max, uv_min, uv_max, col);

  000b0	8b 85 30 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  000b6	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000ba	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR uv_max$[rbp]
  000c1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c6	4c 8b 8d 20 01
	00 00		 mov	 r9, QWORD PTR uv_min$[rbp]
  000cd	4c 8b 85 18 01
	00 00		 mov	 r8, QWORD PTR p_max$[rbp]
  000d4	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR p_min$[rbp]
  000db	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e2	e8 00 00 00 00	 call	 ?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z ; ImDrawList::PrimRectUV

; 1613 : 
; 1614 :     if (push_texture_id)

  000e7	0f b6 45 04	 movzx	 eax, BYTE PTR push_texture_id$[rbp]
  000eb	85 c0		 test	 eax, eax
  000ed	74 0c		 je	 SHORT $LN4@AddImage

; 1615 :         PopTextureID();

  000ef	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f6	e8 00 00 00 00	 call	 ?PopTextureID@ImDrawList@@QEAAXXZ ; ImDrawList::PopTextureID
$LN4@AddImage:
$LN1@AddImage:

; 1616 : }

  000fb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00102	5f		 pop	 rdi
  00103	5d		 pop	 rbp
  00104	c3		 ret	 0
?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z ENDP	; ImDrawList::AddImage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z
_TEXT	SEGMENT
this$ = 224
p1$ = 232
p2$ = 240
p3$ = 248
col$ = 256
thickness$ = 264
num_segments$ = 272
?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z PROC ; ImDrawList::AddBezierQuadratic, COMDAT

; 1559 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1560 :     if ((col & IM_COL32_A_MASK) == 0)

  00039	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  0003f	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00044	85 c0		 test	 eax, eax
  00046	75 02		 jne	 SHORT $LN2@AddBezierQ

; 1561 :         return;

  00048	eb 51		 jmp	 SHORT $LN1@AddBezierQ
$LN2@AddBezierQ:

; 1562 : 
; 1563 :     PathLineTo(p1);

  0004a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR p1$[rbp]
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1564 :     PathBezierQuadraticCurveTo(p2, p3, num_segments);

  0005d	44 8b 8d 10 01
	00 00		 mov	 r9d, DWORD PTR num_segments$[rbp]
  00064	4c 8b 85 f8 00
	00 00		 mov	 r8, QWORD PTR p3$[rbp]
  0006b	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR p2$[rbp]
  00072	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00079	e8 00 00 00 00	 call	 ?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z ; ImDrawList::PathBezierQuadraticCurveTo

; 1565 :     PathStroke(col, 0, thickness);

  0007e	f3 0f 10 9d 08
	01 00 00	 movss	 xmm3, DWORD PTR thickness$[rbp]
  00086	45 33 c0	 xor	 r8d, r8d
  00089	8b 95 00 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  0008f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00096	e8 00 00 00 00	 call	 ?PathStroke@ImDrawList@@QEAAXIHM@Z ; ImDrawList::PathStroke
$LN1@AddBezierQ:

; 1566 : }

  0009b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000a2	5f		 pop	 rdi
  000a3	5d		 pop	 rbp
  000a4	c3		 ret	 0
?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z ENDP ; ImDrawList::AddBezierQuadratic
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z
_TEXT	SEGMENT
this$ = 224
p1$ = 232
p2$ = 240
p3$ = 248
p4$ = 256
col$ = 264
thickness$ = 272
num_segments$ = 280
?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z PROC ; ImDrawList::AddBezierCubic, COMDAT

; 1548 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 1549 :     if ((col & IM_COL32_A_MASK) == 0)

  00039	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  0003f	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00044	85 c0		 test	 eax, eax
  00046	75 02		 jne	 SHORT $LN2@AddBezierC

; 1550 :         return;

  00048	eb 5b		 jmp	 SHORT $LN1@AddBezierC
$LN2@AddBezierC:

; 1551 : 
; 1552 :     PathLineTo(p1);

  0004a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR p1$[rbp]
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1553 :     PathBezierCubicCurveTo(p2, p3, p4, num_segments);

  0005d	8b 85 18 01 00
	00		 mov	 eax, DWORD PTR num_segments$[rbp]
  00063	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00067	4c 8b 8d 00 01
	00 00		 mov	 r9, QWORD PTR p4$[rbp]
  0006e	4c 8b 85 f8 00
	00 00		 mov	 r8, QWORD PTR p3$[rbp]
  00075	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR p2$[rbp]
  0007c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00083	e8 00 00 00 00	 call	 ?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z ; ImDrawList::PathBezierCubicCurveTo

; 1554 :     PathStroke(col, 0, thickness);

  00088	f3 0f 10 9d 10
	01 00 00	 movss	 xmm3, DWORD PTR thickness$[rbp]
  00090	45 33 c0	 xor	 r8d, r8d
  00093	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  00099	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a0	e8 00 00 00 00	 call	 ?PathStroke@ImDrawList@@QEAAXIHM@Z ; ImDrawList::PathStroke
$LN1@AddBezierC:

; 1555 : }

  000a5	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000ac	5f		 pop	 rdi
  000ad	5d		 pop	 rbp
  000ae	c3		 ret	 0
?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z ENDP ; ImDrawList::AddBezierCubic
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z
_TEXT	SEGMENT
uv$ = 8
AA_SIZE$4 = 36
col_trans$5 = 68
idx_count$6 = 100
vtx_count$7 = 132
vtx_inner_idx$8 = 164
vtx_outer_idx$9 = 196
i$10 = 228
temp_normals$11 = 264
i0$12 = 292
i1$13 = 324
p0$14 = 360
p1$15 = 392
dx$16 = 420
dy$17 = 452
d2$18 = 484
inv_len$19 = 516
i0$20 = 548
i1$21 = 580
n0$22 = 616
n1$23 = 648
dm_x$24 = 676
dm_y$25 = 708
d2$26 = 740
inv_len2$27 = 772
idx_count$28 = 804
vtx_count$29 = 836
i$30 = 868
i$31 = 900
__$ArrayPad$ = 1304
this$ = 1344
points$ = 1352
points_count$ = 1360
col$ = 1368
?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z PROC ; ImDrawList::AddConvexPolyFilled, COMDAT

; 966  : {

$LN25:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 48 05
	00 00		 sub	 rsp, 1352		; 00000548H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 52 01 00 00	 mov	 ecx, 338		; 00000152H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 68
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1384]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 18 05
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 967  :     if (points_count < 3 || (col & IM_COL32_A_MASK) == 0)

  0004a	83 bd 50 05 00
	00 03		 cmp	 DWORD PTR points_count$[rbp], 3
  00051	7c 0f		 jl	 SHORT $LN18@AddConvexP
  00053	8b 85 58 05 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  00059	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  0005e	85 c0		 test	 eax, eax
  00060	75 05		 jne	 SHORT $LN17@AddConvexP
$LN18@AddConvexP:

; 968  :         return;

  00062	e9 10 09 00 00	 jmp	 $LN1@AddConvexP
$LN17@AddConvexP:

; 969  : 
; 970  :     const ImVec2 uv = _Data->TexUvWhitePixel;

  00067	48 8b 85 40 05
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00072	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00075	48 89 45 08	 mov	 QWORD PTR uv$[rbp], rax

; 971  : 
; 972  :     if (Flags & ImDrawListFlags_AntiAliasedFill)

  00079	48 8b 85 40 05
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00080	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  00083	83 e0 04	 and	 eax, 4
  00086	85 c0		 test	 eax, eax
  00088	0f 84 25 07 00
	00		 je	 $LN19@AddConvexP

; 973  :     {
; 974  :         // Anti-aliased Fill
; 975  :         const float AA_SIZE = _FringeScale;

  0008e	48 8b 85 40 05
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00095	f3 0f 10 80 c0
	00 00 00	 movss	 xmm0, DWORD PTR [rax+192]
  0009d	f3 0f 11 45 24	 movss	 DWORD PTR AA_SIZE$4[rbp], xmm0

; 976  :         const ImU32 col_trans = col & ~IM_COL32_A_MASK;

  000a2	8b 85 58 05 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  000a8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000ad	89 45 44	 mov	 DWORD PTR col_trans$5[rbp], eax

; 977  :         const int idx_count = (points_count - 2)*3 + points_count * 6;

  000b0	8b 85 50 05 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  000b6	83 e8 02	 sub	 eax, 2
  000b9	6b c0 03	 imul	 eax, eax, 3
  000bc	6b 8d 50 05 00
	00 06		 imul	 ecx, DWORD PTR points_count$[rbp], 6
  000c3	03 c1		 add	 eax, ecx
  000c5	89 45 64	 mov	 DWORD PTR idx_count$6[rbp], eax

; 978  :         const int vtx_count = (points_count * 2);

  000c8	8b 85 50 05 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  000ce	d1 e0		 shl	 eax, 1
  000d0	89 85 84 00 00
	00		 mov	 DWORD PTR vtx_count$7[rbp], eax

; 979  :         PrimReserve(idx_count, vtx_count);

  000d6	44 8b 85 84 00
	00 00		 mov	 r8d, DWORD PTR vtx_count$7[rbp]
  000dd	8b 55 64	 mov	 edx, DWORD PTR idx_count$6[rbp]
  000e0	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e7	e8 00 00 00 00	 call	 ?PrimReserve@ImDrawList@@QEAAXHH@Z ; ImDrawList::PrimReserve

; 980  : 
; 981  :         // Add indexes for fill
; 982  :         unsigned int vtx_inner_idx = _VtxCurrentIdx;

  000ec	48 8b 85 40 05
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f3	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  000f6	89 85 a4 00 00
	00		 mov	 DWORD PTR vtx_inner_idx$8[rbp], eax

; 983  :         unsigned int vtx_outer_idx = _VtxCurrentIdx + 1;

  000fc	48 8b 85 40 05
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00103	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  00106	ff c0		 inc	 eax
  00108	89 85 c4 00 00
	00		 mov	 DWORD PTR vtx_outer_idx$9[rbp], eax

; 984  :         for (int i = 2; i < points_count; i++)

  0010e	c7 85 e4 00 00
	00 02 00 00 00	 mov	 DWORD PTR i$10[rbp], 2
  00118	eb 0e		 jmp	 SHORT $LN4@AddConvexP
$LN2@AddConvexP:
  0011a	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR i$10[rbp]
  00120	ff c0		 inc	 eax
  00122	89 85 e4 00 00
	00		 mov	 DWORD PTR i$10[rbp], eax
$LN4@AddConvexP:
  00128	8b 85 50 05 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  0012e	39 85 e4 00 00
	00		 cmp	 DWORD PTR i$10[rbp], eax
  00134	0f 8d 8d 00 00
	00		 jge	 $LN3@AddConvexP

; 985  :         {
; 986  :             _IdxWritePtr[0] = (ImDrawIdx)(vtx_inner_idx); _IdxWritePtr[1] = (ImDrawIdx)(vtx_inner_idx + ((i - 1) << 1)); _IdxWritePtr[2] = (ImDrawIdx)(vtx_inner_idx + (i << 1));

  0013a	b8 02 00 00 00	 mov	 eax, 2
  0013f	48 6b c0 00	 imul	 rax, rax, 0
  00143	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0014a	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  0014e	0f b7 95 a4 00
	00 00		 movzx	 edx, WORD PTR vtx_inner_idx$8[rbp]
  00155	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx
  00159	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR vtx_inner_idx$8[rbp]
  0015f	8b 8d e4 00 00
	00		 mov	 ecx, DWORD PTR i$10[rbp]
  00165	8d 44 48 fe	 lea	 eax, DWORD PTR [rax+rcx*2-2]
  00169	b9 02 00 00 00	 mov	 ecx, 2
  0016e	48 6b c9 01	 imul	 rcx, rcx, 1
  00172	48 8b 95 40 05
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00179	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  0017d	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  00181	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR vtx_inner_idx$8[rbp]
  00187	8b 8d e4 00 00
	00		 mov	 ecx, DWORD PTR i$10[rbp]
  0018d	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  00190	b9 02 00 00 00	 mov	 ecx, 2
  00195	48 6b c9 02	 imul	 rcx, rcx, 2
  00199	48 8b 95 40 05
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  001a0	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  001a4	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 987  :             _IdxWritePtr += 3;

  001a8	48 8b 85 40 05
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001af	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  001b3	48 83 c0 06	 add	 rax, 6
  001b7	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001be	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 988  :         }

  001c2	e9 53 ff ff ff	 jmp	 $LN2@AddConvexP
$LN3@AddConvexP:

; 989  : 
; 990  :         // Compute normals
; 991  :         _Data->TempBuffer.reserve_discard(points_count);

  001c7	48 8b 85 40 05
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001ce	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  001d2	48 83 c0 30	 add	 rax, 48			; 00000030H
  001d6	8b 95 50 05 00
	00		 mov	 edx, DWORD PTR points_count$[rbp]
  001dc	48 8b c8	 mov	 rcx, rax
  001df	e8 00 00 00 00	 call	 ?reserve_discard@?$ImVector@UImVec2@@@@QEAAXH@Z ; ImVector<ImVec2>::reserve_discard

; 992  :         ImVec2* temp_normals = _Data->TempBuffer.Data;

  001e4	48 8b 85 40 05
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001eb	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  001ef	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  001f3	48 89 85 08 01
	00 00		 mov	 QWORD PTR temp_normals$11[rbp], rax

; 993  :         for (int i0 = points_count - 1, i1 = 0; i1 < points_count; i0 = i1++)

  001fa	8b 85 50 05 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  00200	ff c8		 dec	 eax
  00202	89 85 24 01 00
	00		 mov	 DWORD PTR i0$12[rbp], eax
  00208	c7 85 44 01 00
	00 00 00 00 00	 mov	 DWORD PTR i1$13[rbp], 0
  00212	eb 1a		 jmp	 SHORT $LN7@AddConvexP
$LN5@AddConvexP:
  00214	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR i1$13[rbp]
  0021a	89 85 24 01 00
	00		 mov	 DWORD PTR i0$12[rbp], eax
  00220	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR i1$13[rbp]
  00226	ff c0		 inc	 eax
  00228	89 85 44 01 00
	00		 mov	 DWORD PTR i1$13[rbp], eax
$LN7@AddConvexP:
  0022e	8b 85 50 05 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  00234	39 85 44 01 00
	00		 cmp	 DWORD PTR i1$13[rbp], eax
  0023a	0f 8d 35 01 00
	00		 jge	 $LN6@AddConvexP

; 994  :         {
; 995  :             const ImVec2& p0 = points[i0];

  00240	48 63 85 24 01
	00 00		 movsxd	 rax, DWORD PTR i0$12[rbp]
  00247	48 8b 8d 48 05
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  0024e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00252	48 89 85 68 01
	00 00		 mov	 QWORD PTR p0$14[rbp], rax

; 996  :             const ImVec2& p1 = points[i1];

  00259	48 63 85 44 01
	00 00		 movsxd	 rax, DWORD PTR i1$13[rbp]
  00260	48 8b 8d 48 05
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  00267	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0026b	48 89 85 88 01
	00 00		 mov	 QWORD PTR p1$15[rbp], rax

; 997  :             float dx = p1.x - p0.x;

  00272	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR p1$15[rbp]
  00279	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR p0$14[rbp]
  00280	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00284	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [rcx]
  00288	f3 0f 11 85 a4
	01 00 00	 movss	 DWORD PTR dx$16[rbp], xmm0

; 998  :             float dy = p1.y - p0.y;

  00290	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR p1$15[rbp]
  00297	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR p0$14[rbp]
  0029e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  002a3	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [rcx+4]
  002a8	f3 0f 11 85 c4
	01 00 00	 movss	 DWORD PTR dy$17[rbp], xmm0

; 999  :             IM_NORMALIZE2F_OVER_ZERO(dx, dy);

  002b0	f3 0f 10 85 a4
	01 00 00	 movss	 xmm0, DWORD PTR dx$16[rbp]
  002b8	f3 0f 59 85 a4
	01 00 00	 mulss	 xmm0, DWORD PTR dx$16[rbp]
  002c0	f3 0f 10 8d c4
	01 00 00	 movss	 xmm1, DWORD PTR dy$17[rbp]
  002c8	f3 0f 59 8d c4
	01 00 00	 mulss	 xmm1, DWORD PTR dy$17[rbp]
  002d0	f3 0f 58 c1	 addss	 xmm0, xmm1
  002d4	f3 0f 11 85 e4
	01 00 00	 movss	 DWORD PTR d2$18[rbp], xmm0
  002dc	f3 0f 10 85 e4
	01 00 00	 movss	 xmm0, DWORD PTR d2$18[rbp]
  002e4	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  002eb	76 45		 jbe	 SHORT $LN21@AddConvexP
  002ed	f3 0f 10 85 e4
	01 00 00	 movss	 xmm0, DWORD PTR d2$18[rbp]
  002f5	e8 00 00 00 00	 call	 ?ImRsqrt@@YAMM@Z	; ImRsqrt
  002fa	f3 0f 11 85 04
	02 00 00	 movss	 DWORD PTR inv_len$19[rbp], xmm0
  00302	f3 0f 10 85 a4
	01 00 00	 movss	 xmm0, DWORD PTR dx$16[rbp]
  0030a	f3 0f 59 85 04
	02 00 00	 mulss	 xmm0, DWORD PTR inv_len$19[rbp]
  00312	f3 0f 11 85 a4
	01 00 00	 movss	 DWORD PTR dx$16[rbp], xmm0
  0031a	f3 0f 10 85 c4
	01 00 00	 movss	 xmm0, DWORD PTR dy$17[rbp]
  00322	f3 0f 59 85 04
	02 00 00	 mulss	 xmm0, DWORD PTR inv_len$19[rbp]
  0032a	f3 0f 11 85 c4
	01 00 00	 movss	 DWORD PTR dy$17[rbp], xmm0
$LN21@AddConvexP:

; 1000 :             temp_normals[i0].x = dy;

  00332	48 63 85 24 01
	00 00		 movsxd	 rax, DWORD PTR i0$12[rbp]
  00339	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$11[rbp]
  00340	f3 0f 10 85 c4
	01 00 00	 movss	 xmm0, DWORD PTR dy$17[rbp]
  00348	f3 0f 11 04 c1	 movss	 DWORD PTR [rcx+rax*8], xmm0

; 1001 :             temp_normals[i0].y = -dx;

  0034d	f3 0f 10 85 a4
	01 00 00	 movss	 xmm0, DWORD PTR dx$16[rbp]
  00355	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0035c	48 63 85 24 01
	00 00		 movsxd	 rax, DWORD PTR i0$12[rbp]
  00363	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$11[rbp]
  0036a	f3 0f 11 44 c1
	04		 movss	 DWORD PTR [rcx+rax*8+4], xmm0

; 1002 :         }

  00370	e9 9f fe ff ff	 jmp	 $LN5@AddConvexP
$LN6@AddConvexP:

; 1003 : 
; 1004 :         for (int i0 = points_count - 1, i1 = 0; i1 < points_count; i0 = i1++)

  00375	8b 85 50 05 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  0037b	ff c8		 dec	 eax
  0037d	89 85 24 02 00
	00		 mov	 DWORD PTR i0$20[rbp], eax
  00383	c7 85 44 02 00
	00 00 00 00 00	 mov	 DWORD PTR i1$21[rbp], 0
  0038d	eb 1a		 jmp	 SHORT $LN10@AddConvexP
$LN8@AddConvexP:
  0038f	8b 85 44 02 00
	00		 mov	 eax, DWORD PTR i1$21[rbp]
  00395	89 85 24 02 00
	00		 mov	 DWORD PTR i0$20[rbp], eax
  0039b	8b 85 44 02 00
	00		 mov	 eax, DWORD PTR i1$21[rbp]
  003a1	ff c0		 inc	 eax
  003a3	89 85 44 02 00
	00		 mov	 DWORD PTR i1$21[rbp], eax
$LN10@AddConvexP:
  003a9	8b 85 50 05 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  003af	39 85 44 02 00
	00		 cmp	 DWORD PTR i1$21[rbp], eax
  003b5	0f 8d d8 03 00
	00		 jge	 $LN9@AddConvexP

; 1005 :         {
; 1006 :             // Average normals
; 1007 :             const ImVec2& n0 = temp_normals[i0];

  003bb	48 63 85 24 02
	00 00		 movsxd	 rax, DWORD PTR i0$20[rbp]
  003c2	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$11[rbp]
  003c9	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003cd	48 89 85 68 02
	00 00		 mov	 QWORD PTR n0$22[rbp], rax

; 1008 :             const ImVec2& n1 = temp_normals[i1];

  003d4	48 63 85 44 02
	00 00		 movsxd	 rax, DWORD PTR i1$21[rbp]
  003db	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$11[rbp]
  003e2	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003e6	48 89 85 88 02
	00 00		 mov	 QWORD PTR n1$23[rbp], rax

; 1009 :             float dm_x = (n0.x + n1.x) * 0.5f;

  003ed	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR n0$22[rbp]
  003f4	48 8b 8d 88 02
	00 00		 mov	 rcx, QWORD PTR n1$23[rbp]
  003fb	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  003ff	f3 0f 58 01	 addss	 xmm0, DWORD PTR [rcx]
  00403	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0040b	f3 0f 11 85 a4
	02 00 00	 movss	 DWORD PTR dm_x$24[rbp], xmm0

; 1010 :             float dm_y = (n0.y + n1.y) * 0.5f;

  00413	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR n0$22[rbp]
  0041a	48 8b 8d 88 02
	00 00		 mov	 rcx, QWORD PTR n1$23[rbp]
  00421	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00426	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [rcx+4]
  0042b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00433	f3 0f 11 85 c4
	02 00 00	 movss	 DWORD PTR dm_y$25[rbp], xmm0

; 1011 :             IM_FIXNORMAL2F(dm_x, dm_y);

  0043b	f3 0f 10 85 a4
	02 00 00	 movss	 xmm0, DWORD PTR dm_x$24[rbp]
  00443	f3 0f 59 85 a4
	02 00 00	 mulss	 xmm0, DWORD PTR dm_x$24[rbp]
  0044b	f3 0f 10 8d c4
	02 00 00	 movss	 xmm1, DWORD PTR dm_y$25[rbp]
  00453	f3 0f 59 8d c4
	02 00 00	 mulss	 xmm1, DWORD PTR dm_y$25[rbp]
  0045b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0045f	f3 0f 11 85 e4
	02 00 00	 movss	 DWORD PTR d2$26[rbp], xmm0
  00467	f3 0f 10 85 e4
	02 00 00	 movss	 xmm0, DWORD PTR d2$26[rbp]
  0046f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@358637bd
  00476	76 69		 jbe	 SHORT $LN22@AddConvexP
  00478	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00480	f3 0f 5e 85 e4
	02 00 00	 divss	 xmm0, DWORD PTR d2$26[rbp]
  00488	f3 0f 11 85 04
	03 00 00	 movss	 DWORD PTR inv_len2$27[rbp], xmm0
  00490	f3 0f 10 85 04
	03 00 00	 movss	 xmm0, DWORD PTR inv_len2$27[rbp]
  00498	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@42c80000
  0049f	76 10		 jbe	 SHORT $LN23@AddConvexP
  004a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  004a9	f3 0f 11 85 04
	03 00 00	 movss	 DWORD PTR inv_len2$27[rbp], xmm0
$LN23@AddConvexP:
  004b1	f3 0f 10 85 a4
	02 00 00	 movss	 xmm0, DWORD PTR dm_x$24[rbp]
  004b9	f3 0f 59 85 04
	03 00 00	 mulss	 xmm0, DWORD PTR inv_len2$27[rbp]
  004c1	f3 0f 11 85 a4
	02 00 00	 movss	 DWORD PTR dm_x$24[rbp], xmm0
  004c9	f3 0f 10 85 c4
	02 00 00	 movss	 xmm0, DWORD PTR dm_y$25[rbp]
  004d1	f3 0f 59 85 04
	03 00 00	 mulss	 xmm0, DWORD PTR inv_len2$27[rbp]
  004d9	f3 0f 11 85 c4
	02 00 00	 movss	 DWORD PTR dm_y$25[rbp], xmm0
$LN22@AddConvexP:

; 1012 :             dm_x *= AA_SIZE * 0.5f;

  004e1	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR AA_SIZE$4[rbp]
  004e6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  004ee	f3 0f 10 8d a4
	02 00 00	 movss	 xmm1, DWORD PTR dm_x$24[rbp]
  004f6	f3 0f 59 c8	 mulss	 xmm1, xmm0
  004fa	0f 28 c1	 movaps	 xmm0, xmm1
  004fd	f3 0f 11 85 a4
	02 00 00	 movss	 DWORD PTR dm_x$24[rbp], xmm0

; 1013 :             dm_y *= AA_SIZE * 0.5f;

  00505	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR AA_SIZE$4[rbp]
  0050a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00512	f3 0f 10 8d c4
	02 00 00	 movss	 xmm1, DWORD PTR dm_y$25[rbp]
  0051a	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0051e	0f 28 c1	 movaps	 xmm0, xmm1
  00521	f3 0f 11 85 c4
	02 00 00	 movss	 DWORD PTR dm_y$25[rbp], xmm0

; 1014 : 
; 1015 :             // Add vertices
; 1016 :             _VtxWritePtr[0].pos.x = (points[i1].x - dm_x); _VtxWritePtr[0].pos.y = (points[i1].y - dm_y); _VtxWritePtr[0].uv = uv; _VtxWritePtr[0].col = col;        // Inner

  00529	48 63 85 44 02
	00 00		 movsxd	 rax, DWORD PTR i1$21[rbp]
  00530	48 8b 8d 48 05
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  00537	f3 0f 10 04 c1	 movss	 xmm0, DWORD PTR [rcx+rax*8]
  0053c	f3 0f 5c 85 a4
	02 00 00	 subss	 xmm0, DWORD PTR dm_x$24[rbp]
  00544	b8 14 00 00 00	 mov	 eax, 20
  00549	48 6b c0 00	 imul	 rax, rax, 0
  0054d	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00554	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00558	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0
  0055d	48 63 85 44 02
	00 00		 movsxd	 rax, DWORD PTR i1$21[rbp]
  00564	48 8b 8d 48 05
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  0056b	f3 0f 10 44 c1
	04		 movss	 xmm0, DWORD PTR [rcx+rax*8+4]
  00571	f3 0f 5c 85 c4
	02 00 00	 subss	 xmm0, DWORD PTR dm_y$25[rbp]
  00579	b8 14 00 00 00	 mov	 eax, 20
  0057e	48 6b c0 00	 imul	 rax, rax, 0
  00582	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00589	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  0058d	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0
  00593	b8 14 00 00 00	 mov	 eax, 20
  00598	48 6b c0 00	 imul	 rax, rax, 0
  0059c	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005a3	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  005a7	48 8b 55 08	 mov	 rdx, QWORD PTR uv$[rbp]
  005ab	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  005b0	b8 14 00 00 00	 mov	 eax, 20
  005b5	48 6b c0 00	 imul	 rax, rax, 0
  005b9	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005c0	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  005c4	8b 95 58 05 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  005ca	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 1017 :             _VtxWritePtr[1].pos.x = (points[i1].x + dm_x); _VtxWritePtr[1].pos.y = (points[i1].y + dm_y); _VtxWritePtr[1].uv = uv; _VtxWritePtr[1].col = col_trans;  // Outer

  005ce	48 63 85 44 02
	00 00		 movsxd	 rax, DWORD PTR i1$21[rbp]
  005d5	48 8b 8d 48 05
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  005dc	f3 0f 10 04 c1	 movss	 xmm0, DWORD PTR [rcx+rax*8]
  005e1	f3 0f 58 85 a4
	02 00 00	 addss	 xmm0, DWORD PTR dm_x$24[rbp]
  005e9	b8 14 00 00 00	 mov	 eax, 20
  005ee	48 6b c0 01	 imul	 rax, rax, 1
  005f2	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005f9	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  005fd	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0
  00602	48 63 85 44 02
	00 00		 movsxd	 rax, DWORD PTR i1$21[rbp]
  00609	48 8b 8d 48 05
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  00610	f3 0f 10 44 c1
	04		 movss	 xmm0, DWORD PTR [rcx+rax*8+4]
  00616	f3 0f 58 85 c4
	02 00 00	 addss	 xmm0, DWORD PTR dm_y$25[rbp]
  0061e	b8 14 00 00 00	 mov	 eax, 20
  00623	48 6b c0 01	 imul	 rax, rax, 1
  00627	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0062e	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00632	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0
  00638	b8 14 00 00 00	 mov	 eax, 20
  0063d	48 6b c0 01	 imul	 rax, rax, 1
  00641	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00648	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  0064c	48 8b 55 08	 mov	 rdx, QWORD PTR uv$[rbp]
  00650	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  00655	b8 14 00 00 00	 mov	 eax, 20
  0065a	48 6b c0 01	 imul	 rax, rax, 1
  0065e	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00665	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00669	8b 55 44	 mov	 edx, DWORD PTR col_trans$5[rbp]
  0066c	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 1018 :             _VtxWritePtr += 2;

  00670	48 8b 85 40 05
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00677	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  0067b	48 83 c0 28	 add	 rax, 40			; 00000028H
  0067f	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00686	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 1019 : 
; 1020 :             // Add indexes for fringes
; 1021 :             _IdxWritePtr[0] = (ImDrawIdx)(vtx_inner_idx + (i1 << 1)); _IdxWritePtr[1] = (ImDrawIdx)(vtx_inner_idx + (i0 << 1)); _IdxWritePtr[2] = (ImDrawIdx)(vtx_outer_idx + (i0 << 1));

  0068a	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR vtx_inner_idx$8[rbp]
  00690	8b 8d 44 02 00
	00		 mov	 ecx, DWORD PTR i1$21[rbp]
  00696	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  00699	b9 02 00 00 00	 mov	 ecx, 2
  0069e	48 6b c9 00	 imul	 rcx, rcx, 0
  006a2	48 8b 95 40 05
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  006a9	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  006ad	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  006b1	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR vtx_inner_idx$8[rbp]
  006b7	8b 8d 24 02 00
	00		 mov	 ecx, DWORD PTR i0$20[rbp]
  006bd	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  006c0	b9 02 00 00 00	 mov	 ecx, 2
  006c5	48 6b c9 01	 imul	 rcx, rcx, 1
  006c9	48 8b 95 40 05
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  006d0	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  006d4	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  006d8	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR vtx_outer_idx$9[rbp]
  006de	8b 8d 24 02 00
	00		 mov	 ecx, DWORD PTR i0$20[rbp]
  006e4	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  006e7	b9 02 00 00 00	 mov	 ecx, 2
  006ec	48 6b c9 02	 imul	 rcx, rcx, 2
  006f0	48 8b 95 40 05
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  006f7	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  006fb	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 1022 :             _IdxWritePtr[3] = (ImDrawIdx)(vtx_outer_idx + (i0 << 1)); _IdxWritePtr[4] = (ImDrawIdx)(vtx_outer_idx + (i1 << 1)); _IdxWritePtr[5] = (ImDrawIdx)(vtx_inner_idx + (i1 << 1));

  006ff	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR vtx_outer_idx$9[rbp]
  00705	8b 8d 24 02 00
	00		 mov	 ecx, DWORD PTR i0$20[rbp]
  0070b	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  0070e	b9 02 00 00 00	 mov	 ecx, 2
  00713	48 6b c9 03	 imul	 rcx, rcx, 3
  00717	48 8b 95 40 05
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0071e	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00722	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  00726	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR vtx_outer_idx$9[rbp]
  0072c	8b 8d 44 02 00
	00		 mov	 ecx, DWORD PTR i1$21[rbp]
  00732	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  00735	b9 02 00 00 00	 mov	 ecx, 2
  0073a	48 6b c9 04	 imul	 rcx, rcx, 4
  0073e	48 8b 95 40 05
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00745	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00749	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  0074d	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR vtx_inner_idx$8[rbp]
  00753	8b 8d 44 02 00
	00		 mov	 ecx, DWORD PTR i1$21[rbp]
  00759	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  0075c	b9 02 00 00 00	 mov	 ecx, 2
  00761	48 6b c9 05	 imul	 rcx, rcx, 5
  00765	48 8b 95 40 05
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0076c	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00770	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 1023 :             _IdxWritePtr += 6;

  00774	48 8b 85 40 05
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0077b	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  0077f	48 83 c0 0c	 add	 rax, 12
  00783	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0078a	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 1024 :         }

  0078e	e9 fc fb ff ff	 jmp	 $LN8@AddConvexP
$LN9@AddConvexP:

; 1025 :         _VtxCurrentIdx += (ImDrawIdx)vtx_count;

  00793	0f b7 85 84 00
	00 00		 movzx	 eax, WORD PTR vtx_count$7[rbp]
  0079a	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007a1	03 41 34	 add	 eax, DWORD PTR [rcx+52]
  007a4	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007ab	89 41 34	 mov	 DWORD PTR [rcx+52], eax

; 1026 :     }
; 1027 :     else

  007ae	e9 c4 01 00 00	 jmp	 $LN20@AddConvexP
$LN19@AddConvexP:

; 1028 :     {
; 1029 :         // Non Anti-aliased Fill
; 1030 :         const int idx_count = (points_count - 2)*3;

  007b3	8b 85 50 05 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  007b9	83 e8 02	 sub	 eax, 2
  007bc	6b c0 03	 imul	 eax, eax, 3
  007bf	89 85 24 03 00
	00		 mov	 DWORD PTR idx_count$28[rbp], eax

; 1031 :         const int vtx_count = points_count;

  007c5	8b 85 50 05 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  007cb	89 85 44 03 00
	00		 mov	 DWORD PTR vtx_count$29[rbp], eax

; 1032 :         PrimReserve(idx_count, vtx_count);

  007d1	44 8b 85 44 03
	00 00		 mov	 r8d, DWORD PTR vtx_count$29[rbp]
  007d8	8b 95 24 03 00
	00		 mov	 edx, DWORD PTR idx_count$28[rbp]
  007de	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007e5	e8 00 00 00 00	 call	 ?PrimReserve@ImDrawList@@QEAAXHH@Z ; ImDrawList::PrimReserve

; 1033 :         for (int i = 0; i < vtx_count; i++)

  007ea	c7 85 64 03 00
	00 00 00 00 00	 mov	 DWORD PTR i$30[rbp], 0
  007f4	eb 0e		 jmp	 SHORT $LN13@AddConvexP
$LN11@AddConvexP:
  007f6	8b 85 64 03 00
	00		 mov	 eax, DWORD PTR i$30[rbp]
  007fc	ff c0		 inc	 eax
  007fe	89 85 64 03 00
	00		 mov	 DWORD PTR i$30[rbp], eax
$LN13@AddConvexP:
  00804	8b 85 44 03 00
	00		 mov	 eax, DWORD PTR vtx_count$29[rbp]
  0080a	39 85 64 03 00
	00		 cmp	 DWORD PTR i$30[rbp], eax
  00810	0f 8d 84 00 00
	00		 jge	 $LN12@AddConvexP

; 1034 :         {
; 1035 :             _VtxWritePtr[0].pos = points[i]; _VtxWritePtr[0].uv = uv; _VtxWritePtr[0].col = col;

  00816	48 63 85 64 03
	00 00		 movsxd	 rax, DWORD PTR i$30[rbp]
  0081d	48 8b 8d 48 05
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  00824	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00828	b9 14 00 00 00	 mov	 ecx, 20
  0082d	48 6b c9 00	 imul	 rcx, rcx, 0
  00831	48 8b 95 40 05
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00838	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  0083c	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  00840	b8 14 00 00 00	 mov	 eax, 20
  00845	48 6b c0 00	 imul	 rax, rax, 0
  00849	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00850	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00854	48 8b 55 08	 mov	 rdx, QWORD PTR uv$[rbp]
  00858	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  0085d	b8 14 00 00 00	 mov	 eax, 20
  00862	48 6b c0 00	 imul	 rax, rax, 0
  00866	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0086d	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00871	8b 95 58 05 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  00877	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 1036 :             _VtxWritePtr++;

  0087b	48 8b 85 40 05
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00882	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00886	48 83 c0 14	 add	 rax, 20
  0088a	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00891	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 1037 :         }

  00895	e9 5c ff ff ff	 jmp	 $LN11@AddConvexP
$LN12@AddConvexP:

; 1038 :         for (int i = 2; i < points_count; i++)

  0089a	c7 85 84 03 00
	00 02 00 00 00	 mov	 DWORD PTR i$31[rbp], 2
  008a4	eb 0e		 jmp	 SHORT $LN16@AddConvexP
$LN14@AddConvexP:
  008a6	8b 85 84 03 00
	00		 mov	 eax, DWORD PTR i$31[rbp]
  008ac	ff c0		 inc	 eax
  008ae	89 85 84 03 00
	00		 mov	 DWORD PTR i$31[rbp], eax
$LN16@AddConvexP:
  008b4	8b 85 50 05 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  008ba	39 85 84 03 00
	00		 cmp	 DWORD PTR i$31[rbp], eax
  008c0	0f 8d 96 00 00
	00		 jge	 $LN15@AddConvexP

; 1039 :         {
; 1040 :             _IdxWritePtr[0] = (ImDrawIdx)(_VtxCurrentIdx); _IdxWritePtr[1] = (ImDrawIdx)(_VtxCurrentIdx + i - 1); _IdxWritePtr[2] = (ImDrawIdx)(_VtxCurrentIdx + i);

  008c6	b8 02 00 00 00	 mov	 eax, 2
  008cb	48 6b c0 00	 imul	 rax, rax, 0
  008cf	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008d6	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  008da	48 8b 95 40 05
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  008e1	0f b7 52 34	 movzx	 edx, WORD PTR [rdx+52]
  008e5	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx
  008e9	48 8b 85 40 05
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  008f0	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  008f3	8b 8d 84 03 00
	00		 mov	 ecx, DWORD PTR i$31[rbp]
  008f9	8d 44 08 ff	 lea	 eax, DWORD PTR [rax+rcx-1]
  008fd	b9 02 00 00 00	 mov	 ecx, 2
  00902	48 6b c9 01	 imul	 rcx, rcx, 1
  00906	48 8b 95 40 05
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0090d	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00911	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  00915	48 8b 85 40 05
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0091c	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  0091f	03 85 84 03 00
	00		 add	 eax, DWORD PTR i$31[rbp]
  00925	b9 02 00 00 00	 mov	 ecx, 2
  0092a	48 6b c9 02	 imul	 rcx, rcx, 2
  0092e	48 8b 95 40 05
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00935	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00939	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 1041 :             _IdxWritePtr += 3;

  0093d	48 8b 85 40 05
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00944	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00948	48 83 c0 06	 add	 rax, 6
  0094c	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00953	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 1042 :         }

  00957	e9 4a ff ff ff	 jmp	 $LN14@AddConvexP
$LN15@AddConvexP:

; 1043 :         _VtxCurrentIdx += (ImDrawIdx)vtx_count;

  0095c	0f b7 85 44 03
	00 00		 movzx	 eax, WORD PTR vtx_count$29[rbp]
  00963	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0096a	03 41 34	 add	 eax, DWORD PTR [rcx+52]
  0096d	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00974	89 41 34	 mov	 DWORD PTR [rcx+52], eax
$LN20@AddConvexP:
$LN1@AddConvexP:

; 1044 :     }
; 1045 : }

  00977	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0097b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z$rtcFrameData
  00982	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00987	48 8b 8d 18 05
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0098e	48 33 cd	 xor	 rcx, rbp
  00991	e8 00 00 00 00	 call	 __security_check_cookie
  00996	48 8d a5 28 05
	00 00		 lea	 rsp, QWORD PTR [rbp+1320]
  0099d	5f		 pop	 rdi
  0099e	5d		 pop	 rbp
  0099f	c3		 ret	 0
?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z ENDP ; ImDrawList::AddConvexPolyFilled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z
_TEXT	SEGMENT
closed$ = 4
opaque_uv$ = 40
count$ = 68
thick_line$ = 100
AA_SIZE$7 = 132
col_trans$8 = 164
integer_thickness$9 = 196
fractional_thickness$10 = 228
use_texture$11 = 260
idx_count$12 = 292
vtx_count$13 = 324
temp_normals$14 = 360
temp_points$15 = 392
i1$16 = 420
i2$17 = 452
dx$18 = 484
dy$19 = 516
d2$20 = 548
inv_len$21 = 580
half_draw_size$22 = 612
idx1$23 = 644
i1$24 = 676
i2$25 = 708
idx2$26 = 740
dm_x$27 = 772
dm_y$28 = 804
d2$29 = 836
inv_len2$30 = 868
out_vtx$31 = 904
tex_uvs$32 = 936
tex_uv0$33 = 984
tex_uv1$34 = 1016
i$35 = 1044
i$36 = 1076
half_inner_thickness$37 = 1108
points_last$38 = 1140
idx1$39 = 1172
i1$40 = 1204
i2$41 = 1236
idx2$42 = 1268
dm_x$43 = 1300
dm_y$44 = 1332
d2$45 = 1364
inv_len2$46 = 1396
dm_out_x$47 = 1428
dm_out_y$48 = 1460
dm_in_x$49 = 1492
dm_in_y$50 = 1524
out_vtx$51 = 1560
i$52 = 1588
idx_count$53 = 1620
vtx_count$54 = 1652
i1$55 = 1684
i2$56 = 1716
p1$57 = 1752
p2$58 = 1784
dx$59 = 1812
dy$60 = 1844
d2$61 = 1876
inv_len$62 = 1908
$T63 = 3092
$T64 = 3124
$T65 = 3156
$T66 = 3188
$T67 = 3220
$T68 = 3252
$T69 = 3284
$T70 = 3316
$T71 = 3348
$T72 = 3380
$T73 = 3412
$T74 = 3444
$T75 = 3476
$T76 = 3508
$T77 = 3540
$T78 = 3572
$T79 = 3604
$T80 = 3636
$T81 = 3668
$T82 = 3700
$T83 = 3732
$T84 = 3764
$T85 = 3796
$T86 = 3828
tv1120 = 3844
tv807 = 3844
tv802 = 3844
tv352 = 3844
tv344 = 3844
tv227 = 3844
tv172 = 3844
tv158 = 3844
tv147 = 3844
tv138 = 3844
tv129 = 3844
tv79 = 3844
tv76 = 3844
tv69 = 3844
tv350 = 3848
tv144 = 3848
tv135 = 3848
__$ArrayPad$ = 3856
this$ = 3904
points$ = 3912
points_count$ = 3920
col$ = 3928
flags$ = 3936
thickness$ = 3944
?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z PROC	; ImDrawList::AddPolyline, COMDAT

; 708  : {

$LN78:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 40 0f
	00 00		 sub	 rsp, 3904		; 00000f40H
  0001e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 d0 03 00 00	 mov	 ecx, 976		; 000003d0H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 68
	0f 00 00	 mov	 rcx, QWORD PTR [rsp+3944]
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 10 0f
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 709  :     if (points_count < 2 || (col & IM_COL32_A_MASK) == 0)

  0004b	83 bd 50 0f 00
	00 02		 cmp	 DWORD PTR points_count$[rbp], 2
  00052	7c 0f		 jl	 SHORT $LN24@AddPolylin
  00054	8b 85 58 0f 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  0005a	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  0005f	85 c0		 test	 eax, eax
  00061	75 05		 jne	 SHORT $LN23@AddPolylin
$LN24@AddPolylin:

; 710  :         return;

  00063	e9 bf 20 00 00	 jmp	 $LN1@AddPolylin
$LN23@AddPolylin:

; 711  : 
; 712  :     const bool closed = (flags & ImDrawFlags_Closed) != 0;

  00068	8b 85 60 0f 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  0006e	83 e0 01	 and	 eax, 1
  00071	85 c0		 test	 eax, eax
  00073	74 09		 je	 SHORT $LN44@AddPolylin
  00075	c6 85 04 0f 00
	00 01		 mov	 BYTE PTR tv69[rbp], 1
  0007c	eb 07		 jmp	 SHORT $LN45@AddPolylin
$LN44@AddPolylin:
  0007e	c6 85 04 0f 00
	00 00		 mov	 BYTE PTR tv69[rbp], 0
$LN45@AddPolylin:
  00085	0f b6 85 04 0f
	00 00		 movzx	 eax, BYTE PTR tv69[rbp]
  0008c	88 45 04	 mov	 BYTE PTR closed$[rbp], al

; 713  :     const ImVec2 opaque_uv = _Data->TexUvWhitePixel;

  0008f	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00096	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	48 89 45 28	 mov	 QWORD PTR opaque_uv$[rbp], rax

; 714  :     const int count = closed ? points_count : points_count - 1; // The number of line segments we need to draw

  000a1	0f b6 45 04	 movzx	 eax, BYTE PTR closed$[rbp]
  000a5	85 c0		 test	 eax, eax
  000a7	74 0e		 je	 SHORT $LN46@AddPolylin
  000a9	8b 85 50 0f 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  000af	89 85 04 0f 00
	00		 mov	 DWORD PTR tv76[rbp], eax
  000b5	eb 0e		 jmp	 SHORT $LN47@AddPolylin
$LN46@AddPolylin:
  000b7	8b 85 50 0f 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  000bd	ff c8		 dec	 eax
  000bf	89 85 04 0f 00
	00		 mov	 DWORD PTR tv76[rbp], eax
$LN47@AddPolylin:
  000c5	8b 85 04 0f 00
	00		 mov	 eax, DWORD PTR tv76[rbp]
  000cb	89 45 44	 mov	 DWORD PTR count$[rbp], eax

; 715  :     const bool thick_line = (thickness > _FringeScale);

  000ce	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d5	f3 0f 10 85 68
	0f 00 00	 movss	 xmm0, DWORD PTR thickness$[rbp]
  000dd	0f 2f 80 c0 00
	00 00		 comiss	 xmm0, DWORD PTR [rax+192]
  000e4	76 09		 jbe	 SHORT $LN48@AddPolylin
  000e6	c6 85 04 0f 00
	00 01		 mov	 BYTE PTR tv79[rbp], 1
  000ed	eb 07		 jmp	 SHORT $LN49@AddPolylin
$LN48@AddPolylin:
  000ef	c6 85 04 0f 00
	00 00		 mov	 BYTE PTR tv79[rbp], 0
$LN49@AddPolylin:
  000f6	0f b6 85 04 0f
	00 00		 movzx	 eax, BYTE PTR tv79[rbp]
  000fd	88 45 64	 mov	 BYTE PTR thick_line$[rbp], al

; 716  : 
; 717  :     if (Flags & ImDrawListFlags_AntiAliasedLines)

  00100	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00107	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  0010a	83 e0 01	 and	 eax, 1
  0010d	85 c0		 test	 eax, eax
  0010f	0f 84 c7 1a 00
	00		 je	 $LN25@AddPolylin

; 718  :     {
; 719  :         // Anti-aliased stroke
; 720  :         const float AA_SIZE = _FringeScale;

  00115	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0011c	f3 0f 10 80 c0
	00 00 00	 movss	 xmm0, DWORD PTR [rax+192]
  00124	f3 0f 11 85 84
	00 00 00	 movss	 DWORD PTR AA_SIZE$7[rbp], xmm0

; 721  :         const ImU32 col_trans = col & ~IM_COL32_A_MASK;

  0012c	8b 85 58 0f 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  00132	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00137	89 85 a4 00 00
	00		 mov	 DWORD PTR col_trans$8[rbp], eax

; 722  : 
; 723  :         // Thicknesses <1.0 should behave like thickness 1.0
; 724  :         thickness = ImMax(thickness, 1.0f);

  0013d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00145	f3 0f 10 85 68
	0f 00 00	 movss	 xmm0, DWORD PTR thickness$[rbp]
  0014d	e8 00 00 00 00	 call	 ??$ImMax@M@@YAMMM@Z	; ImMax<float>
  00152	f3 0f 11 85 68
	0f 00 00	 movss	 DWORD PTR thickness$[rbp], xmm0

; 725  :         const int integer_thickness = (int)thickness;

  0015a	f3 0f 2c 85 68
	0f 00 00	 cvttss2si eax, DWORD PTR thickness$[rbp]
  00162	89 85 c4 00 00
	00		 mov	 DWORD PTR integer_thickness$9[rbp], eax

; 726  :         const float fractional_thickness = thickness - integer_thickness;

  00168	f3 0f 2a 85 c4
	00 00 00	 cvtsi2ss xmm0, DWORD PTR integer_thickness$9[rbp]
  00170	f3 0f 10 8d 68
	0f 00 00	 movss	 xmm1, DWORD PTR thickness$[rbp]
  00178	f3 0f 5c c8	 subss	 xmm1, xmm0
  0017c	0f 28 c1	 movaps	 xmm0, xmm1
  0017f	f3 0f 11 85 e4
	00 00 00	 movss	 DWORD PTR fractional_thickness$10[rbp], xmm0

; 727  : 
; 728  :         // Do we want to draw this line using a texture?
; 729  :         // - For now, only draw integer-width lines using textures to avoid issues with the way scaling occurs, could be improved.
; 730  :         // - If AA_SIZE is not 1.0f we cannot use the texture path.
; 731  :         const bool use_texture = (Flags & ImDrawListFlags_AntiAliasedLinesUseTex) && (integer_thickness < IM_DRAWLIST_TEX_LINES_WIDTH_MAX) && (fractional_thickness <= 0.00001f) && (AA_SIZE == 1.0f);

  00187	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0018e	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  00191	83 e0 02	 and	 eax, 2
  00194	85 c0		 test	 eax, eax
  00196	74 36		 je	 SHORT $LN50@AddPolylin
  00198	83 bd c4 00 00
	00 3f		 cmp	 DWORD PTR integer_thickness$9[rbp], 63 ; 0000003fH
  0019f	7d 2d		 jge	 SHORT $LN50@AddPolylin
  001a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3727c5ac
  001a9	0f 2f 85 e4 00
	00 00		 comiss	 xmm0, DWORD PTR fractional_thickness$10[rbp]
  001b0	72 1c		 jb	 SHORT $LN50@AddPolylin
  001b2	f3 0f 10 85 84
	00 00 00	 movss	 xmm0, DWORD PTR AA_SIZE$7[rbp]
  001ba	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3f800000
  001c1	7a 0b		 jp	 SHORT $LN50@AddPolylin
  001c3	75 09		 jne	 SHORT $LN50@AddPolylin
  001c5	c6 85 04 0f 00
	00 01		 mov	 BYTE PTR tv129[rbp], 1
  001cc	eb 07		 jmp	 SHORT $LN51@AddPolylin
$LN50@AddPolylin:
  001ce	c6 85 04 0f 00
	00 00		 mov	 BYTE PTR tv129[rbp], 0
$LN51@AddPolylin:
  001d5	0f b6 85 04 0f
	00 00		 movzx	 eax, BYTE PTR tv129[rbp]
  001dc	88 85 04 01 00
	00		 mov	 BYTE PTR use_texture$11[rbp], al

; 732  : 
; 733  :         // We should never hit this, because NewFrame() doesn't set ImDrawListFlags_AntiAliasedLinesUseTex unless ImFontAtlasFlags_NoBakedLines is off
; 734  :         IM_ASSERT_PARANOID(!use_texture || !(_Data->Font->ContainerAtlas->Flags & ImFontAtlasFlags_NoBakedLines));
; 735  : 
; 736  :         const int idx_count = use_texture ? (count * 6) : (thick_line ? count * 18 : count * 12);

  001e2	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR use_texture$11[rbp]
  001e9	85 c0		 test	 eax, eax
  001eb	74 0c		 je	 SHORT $LN54@AddPolylin
  001ed	6b 45 44 06	 imul	 eax, DWORD PTR count$[rbp], 6
  001f1	89 85 04 0f 00
	00		 mov	 DWORD PTR tv138[rbp], eax
  001f7	eb 2a		 jmp	 SHORT $LN55@AddPolylin
$LN54@AddPolylin:
  001f9	0f b6 45 64	 movzx	 eax, BYTE PTR thick_line$[rbp]
  001fd	85 c0		 test	 eax, eax
  001ff	74 0c		 je	 SHORT $LN52@AddPolylin
  00201	6b 45 44 12	 imul	 eax, DWORD PTR count$[rbp], 18
  00205	89 85 08 0f 00
	00		 mov	 DWORD PTR tv135[rbp], eax
  0020b	eb 0a		 jmp	 SHORT $LN53@AddPolylin
$LN52@AddPolylin:
  0020d	6b 45 44 0c	 imul	 eax, DWORD PTR count$[rbp], 12
  00211	89 85 08 0f 00
	00		 mov	 DWORD PTR tv135[rbp], eax
$LN53@AddPolylin:
  00217	8b 85 08 0f 00
	00		 mov	 eax, DWORD PTR tv135[rbp]
  0021d	89 85 04 0f 00
	00		 mov	 DWORD PTR tv138[rbp], eax
$LN55@AddPolylin:
  00223	8b 85 04 0f 00
	00		 mov	 eax, DWORD PTR tv138[rbp]
  00229	89 85 24 01 00
	00		 mov	 DWORD PTR idx_count$12[rbp], eax

; 737  :         const int vtx_count = use_texture ? (points_count * 2) : (thick_line ? points_count * 4 : points_count * 3);

  0022f	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR use_texture$11[rbp]
  00236	85 c0		 test	 eax, eax
  00238	74 10		 je	 SHORT $LN58@AddPolylin
  0023a	8b 85 50 0f 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  00240	03 c0		 add	 eax, eax
  00242	89 85 04 0f 00
	00		 mov	 DWORD PTR tv147[rbp], eax
  00248	eb 32		 jmp	 SHORT $LN59@AddPolylin
$LN58@AddPolylin:
  0024a	0f b6 45 64	 movzx	 eax, BYTE PTR thick_line$[rbp]
  0024e	85 c0		 test	 eax, eax
  00250	74 11		 je	 SHORT $LN56@AddPolylin
  00252	8b 85 50 0f 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  00258	c1 e0 02	 shl	 eax, 2
  0025b	89 85 08 0f 00
	00		 mov	 DWORD PTR tv144[rbp], eax
  00261	eb 0d		 jmp	 SHORT $LN57@AddPolylin
$LN56@AddPolylin:
  00263	6b 85 50 0f 00
	00 03		 imul	 eax, DWORD PTR points_count$[rbp], 3
  0026a	89 85 08 0f 00
	00		 mov	 DWORD PTR tv144[rbp], eax
$LN57@AddPolylin:
  00270	8b 85 08 0f 00
	00		 mov	 eax, DWORD PTR tv144[rbp]
  00276	89 85 04 0f 00
	00		 mov	 DWORD PTR tv147[rbp], eax
$LN59@AddPolylin:
  0027c	8b 85 04 0f 00
	00		 mov	 eax, DWORD PTR tv147[rbp]
  00282	89 85 44 01 00
	00		 mov	 DWORD PTR vtx_count$13[rbp], eax

; 738  :         PrimReserve(idx_count, vtx_count);

  00288	44 8b 85 44 01
	00 00		 mov	 r8d, DWORD PTR vtx_count$13[rbp]
  0028f	8b 95 24 01 00
	00		 mov	 edx, DWORD PTR idx_count$12[rbp]
  00295	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0029c	e8 00 00 00 00	 call	 ?PrimReserve@ImDrawList@@QEAAXHH@Z ; ImDrawList::PrimReserve

; 739  : 
; 740  :         // Temporary buffer
; 741  :         // The first <points_count> items are normals at each line point, then after that there are either 2 or 4 temp points for each line point
; 742  :         _Data->TempBuffer.reserve_discard(points_count * ((use_texture || !thick_line) ? 3 : 5));

  002a1	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR use_texture$11[rbp]
  002a8	85 c0		 test	 eax, eax
  002aa	75 14		 jne	 SHORT $LN60@AddPolylin
  002ac	0f b6 45 64	 movzx	 eax, BYTE PTR thick_line$[rbp]
  002b0	85 c0		 test	 eax, eax
  002b2	74 0c		 je	 SHORT $LN60@AddPolylin
  002b4	c7 85 04 0f 00
	00 05 00 00 00	 mov	 DWORD PTR tv158[rbp], 5
  002be	eb 0a		 jmp	 SHORT $LN61@AddPolylin
$LN60@AddPolylin:
  002c0	c7 85 04 0f 00
	00 03 00 00 00	 mov	 DWORD PTR tv158[rbp], 3
$LN61@AddPolylin:
  002ca	8b 85 50 0f 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  002d0	0f af 85 04 0f
	00 00		 imul	 eax, DWORD PTR tv158[rbp]
  002d7	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002de	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  002e2	48 83 c1 30	 add	 rcx, 48			; 00000030H
  002e6	8b d0		 mov	 edx, eax
  002e8	e8 00 00 00 00	 call	 ?reserve_discard@?$ImVector@UImVec2@@@@QEAAXH@Z ; ImVector<ImVec2>::reserve_discard

; 743  :         ImVec2* temp_normals = _Data->TempBuffer.Data;

  002ed	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002f4	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  002f8	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  002fc	48 89 85 68 01
	00 00		 mov	 QWORD PTR temp_normals$14[rbp], rax

; 744  :         ImVec2* temp_points = temp_normals + points_count;

  00303	48 63 85 50 0f
	00 00		 movsxd	 rax, DWORD PTR points_count$[rbp]
  0030a	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$14[rbp]
  00311	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00315	48 89 85 88 01
	00 00		 mov	 QWORD PTR temp_points$15[rbp], rax

; 745  : 
; 746  :         // Calculate normals (tangents) for each line segment
; 747  :         for (int i1 = 0; i1 < count; i1++)

  0031c	c7 85 a4 01 00
	00 00 00 00 00	 mov	 DWORD PTR i1$16[rbp], 0
  00326	eb 0e		 jmp	 SHORT $LN4@AddPolylin
$LN2@AddPolylin:
  00328	8b 85 a4 01 00
	00		 mov	 eax, DWORD PTR i1$16[rbp]
  0032e	ff c0		 inc	 eax
  00330	89 85 a4 01 00
	00		 mov	 DWORD PTR i1$16[rbp], eax
$LN4@AddPolylin:
  00336	8b 45 44	 mov	 eax, DWORD PTR count$[rbp]
  00339	39 85 a4 01 00
	00		 cmp	 DWORD PTR i1$16[rbp], eax
  0033f	0f 8d 5b 01 00
	00		 jge	 $LN3@AddPolylin

; 748  :         {
; 749  :             const int i2 = (i1 + 1) == points_count ? 0 : i1 + 1;

  00345	8b 85 a4 01 00
	00		 mov	 eax, DWORD PTR i1$16[rbp]
  0034b	ff c0		 inc	 eax
  0034d	3b 85 50 0f 00
	00		 cmp	 eax, DWORD PTR points_count$[rbp]
  00353	75 0c		 jne	 SHORT $LN62@AddPolylin
  00355	c7 85 04 0f 00
	00 00 00 00 00	 mov	 DWORD PTR tv172[rbp], 0
  0035f	eb 0e		 jmp	 SHORT $LN63@AddPolylin
$LN62@AddPolylin:
  00361	8b 85 a4 01 00
	00		 mov	 eax, DWORD PTR i1$16[rbp]
  00367	ff c0		 inc	 eax
  00369	89 85 04 0f 00
	00		 mov	 DWORD PTR tv172[rbp], eax
$LN63@AddPolylin:
  0036f	8b 85 04 0f 00
	00		 mov	 eax, DWORD PTR tv172[rbp]
  00375	89 85 c4 01 00
	00		 mov	 DWORD PTR i2$17[rbp], eax

; 750  :             float dx = points[i2].x - points[i1].x;

  0037b	48 63 85 c4 01
	00 00		 movsxd	 rax, DWORD PTR i2$17[rbp]
  00382	48 63 8d a4 01
	00 00		 movsxd	 rcx, DWORD PTR i1$16[rbp]
  00389	48 8b 95 48 0f
	00 00		 mov	 rdx, QWORD PTR points$[rbp]
  00390	4c 8b 85 48 0f
	00 00		 mov	 r8, QWORD PTR points$[rbp]
  00397	f3 0f 10 04 c2	 movss	 xmm0, DWORD PTR [rdx+rax*8]
  0039c	f3 41 0f 5c 04
	c8		 subss	 xmm0, DWORD PTR [r8+rcx*8]
  003a2	f3 0f 11 85 e4
	01 00 00	 movss	 DWORD PTR dx$18[rbp], xmm0

; 751  :             float dy = points[i2].y - points[i1].y;

  003aa	48 63 85 c4 01
	00 00		 movsxd	 rax, DWORD PTR i2$17[rbp]
  003b1	48 63 8d a4 01
	00 00		 movsxd	 rcx, DWORD PTR i1$16[rbp]
  003b8	48 8b 95 48 0f
	00 00		 mov	 rdx, QWORD PTR points$[rbp]
  003bf	4c 8b 85 48 0f
	00 00		 mov	 r8, QWORD PTR points$[rbp]
  003c6	f3 0f 10 44 c2
	04		 movss	 xmm0, DWORD PTR [rdx+rax*8+4]
  003cc	f3 41 0f 5c 44
	c8 04		 subss	 xmm0, DWORD PTR [r8+rcx*8+4]
  003d3	f3 0f 11 85 04
	02 00 00	 movss	 DWORD PTR dy$19[rbp], xmm0

; 752  :             IM_NORMALIZE2F_OVER_ZERO(dx, dy);

  003db	f3 0f 10 85 e4
	01 00 00	 movss	 xmm0, DWORD PTR dx$18[rbp]
  003e3	f3 0f 59 85 e4
	01 00 00	 mulss	 xmm0, DWORD PTR dx$18[rbp]
  003eb	f3 0f 10 8d 04
	02 00 00	 movss	 xmm1, DWORD PTR dy$19[rbp]
  003f3	f3 0f 59 8d 04
	02 00 00	 mulss	 xmm1, DWORD PTR dy$19[rbp]
  003fb	f3 0f 58 c1	 addss	 xmm0, xmm1
  003ff	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR d2$20[rbp], xmm0
  00407	f3 0f 10 85 24
	02 00 00	 movss	 xmm0, DWORD PTR d2$20[rbp]
  0040f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00416	76 45		 jbe	 SHORT $LN27@AddPolylin
  00418	f3 0f 10 85 24
	02 00 00	 movss	 xmm0, DWORD PTR d2$20[rbp]
  00420	e8 00 00 00 00	 call	 ?ImRsqrt@@YAMM@Z	; ImRsqrt
  00425	f3 0f 11 85 44
	02 00 00	 movss	 DWORD PTR inv_len$21[rbp], xmm0
  0042d	f3 0f 10 85 e4
	01 00 00	 movss	 xmm0, DWORD PTR dx$18[rbp]
  00435	f3 0f 59 85 44
	02 00 00	 mulss	 xmm0, DWORD PTR inv_len$21[rbp]
  0043d	f3 0f 11 85 e4
	01 00 00	 movss	 DWORD PTR dx$18[rbp], xmm0
  00445	f3 0f 10 85 04
	02 00 00	 movss	 xmm0, DWORD PTR dy$19[rbp]
  0044d	f3 0f 59 85 44
	02 00 00	 mulss	 xmm0, DWORD PTR inv_len$21[rbp]
  00455	f3 0f 11 85 04
	02 00 00	 movss	 DWORD PTR dy$19[rbp], xmm0
$LN27@AddPolylin:

; 753  :             temp_normals[i1].x = dy;

  0045d	48 63 85 a4 01
	00 00		 movsxd	 rax, DWORD PTR i1$16[rbp]
  00464	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$14[rbp]
  0046b	f3 0f 10 85 04
	02 00 00	 movss	 xmm0, DWORD PTR dy$19[rbp]
  00473	f3 0f 11 04 c1	 movss	 DWORD PTR [rcx+rax*8], xmm0

; 754  :             temp_normals[i1].y = -dx;

  00478	f3 0f 10 85 e4
	01 00 00	 movss	 xmm0, DWORD PTR dx$18[rbp]
  00480	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00487	48 63 85 a4 01
	00 00		 movsxd	 rax, DWORD PTR i1$16[rbp]
  0048e	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$14[rbp]
  00495	f3 0f 11 44 c1
	04		 movss	 DWORD PTR [rcx+rax*8+4], xmm0

; 755  :         }

  0049b	e9 88 fe ff ff	 jmp	 $LN2@AddPolylin
$LN3@AddPolylin:

; 756  :         if (!closed)

  004a0	0f b6 45 04	 movzx	 eax, BYTE PTR closed$[rbp]
  004a4	85 c0		 test	 eax, eax
  004a6	75 2c		 jne	 SHORT $LN28@AddPolylin

; 757  :             temp_normals[points_count - 1] = temp_normals[points_count - 2];

  004a8	8b 85 50 0f 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  004ae	83 e8 02	 sub	 eax, 2
  004b1	48 98		 cdqe
  004b3	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$14[rbp]
  004ba	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  004be	8b 8d 50 0f 00
	00		 mov	 ecx, DWORD PTR points_count$[rbp]
  004c4	ff c9		 dec	 ecx
  004c6	48 63 c9	 movsxd	 rcx, ecx
  004c9	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR temp_normals$14[rbp]
  004d0	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
$LN28@AddPolylin:

; 758  : 
; 759  :         // If we are drawing a one-pixel-wide line without a texture, or a textured line of any width, we only need 2 or 3 vertices per point
; 760  :         if (use_texture || !thick_line)

  004d4	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR use_texture$11[rbp]
  004db	85 c0		 test	 eax, eax
  004dd	75 0c		 jne	 SHORT $LN31@AddPolylin
  004df	0f b6 45 64	 movzx	 eax, BYTE PTR thick_line$[rbp]
  004e3	85 c0		 test	 eax, eax
  004e5	0f 85 c4 0a 00
	00		 jne	 $LN29@AddPolylin
$LN31@AddPolylin:

; 761  :         {
; 762  :             // [PATH 1] Texture-based lines (thick or non-thick)
; 763  :             // [PATH 2] Non texture-based lines (non-thick)
; 764  : 
; 765  :             // The width of the geometry we need to draw - this is essentially <thickness> pixels for the line itself, plus "one pixel" for AA.
; 766  :             // - In the texture-based path, we don't use AA_SIZE here because the +1 is tied to the generated texture
; 767  :             //   (see ImFontAtlasBuildRenderLinesTexData() function), and so alternate values won't work without changes to that code.
; 768  :             // - In the non texture-based paths, we would allow AA_SIZE to potentially be != 1.0f with a patch (e.g. fringe_scale patch to
; 769  :             //   allow scaling geometry while preserving one-screen-pixel AA fringe).
; 770  :             const float half_draw_size = use_texture ? ((thickness * 0.5f) + 1) : AA_SIZE;

  004eb	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR use_texture$11[rbp]
  004f2	85 c0		 test	 eax, eax
  004f4	74 22		 je	 SHORT $LN64@AddPolylin
  004f6	f3 0f 10 85 68
	0f 00 00	 movss	 xmm0, DWORD PTR thickness$[rbp]
  004fe	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00506	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  0050e	f3 0f 11 85 04
	0f 00 00	 movss	 DWORD PTR tv227[rbp], xmm0
  00516	eb 10		 jmp	 SHORT $LN65@AddPolylin
$LN64@AddPolylin:
  00518	f3 0f 10 85 84
	00 00 00	 movss	 xmm0, DWORD PTR AA_SIZE$7[rbp]
  00520	f3 0f 11 85 04
	0f 00 00	 movss	 DWORD PTR tv227[rbp], xmm0
$LN65@AddPolylin:
  00528	f3 0f 10 85 04
	0f 00 00	 movss	 xmm0, DWORD PTR tv227[rbp]
  00530	f3 0f 11 85 64
	02 00 00	 movss	 DWORD PTR half_draw_size$22[rbp], xmm0

; 771  : 
; 772  :             // If line is not closed, the first and last points need to be generated differently as there are no normals to blend
; 773  :             if (!closed)

  00538	0f b6 45 04	 movzx	 eax, BYTE PTR closed$[rbp]
  0053c	85 c0		 test	 eax, eax
  0053e	0f 85 b6 01 00
	00		 jne	 $LN32@AddPolylin

; 774  :             {
; 775  :                 temp_points[0] = points[0] + temp_normals[0] * half_draw_size;

  00544	b8 08 00 00 00	 mov	 eax, 8
  00549	48 6b c0 00	 imul	 rax, rax, 0
  0054d	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$14[rbp]
  00554	48 03 c8	 add	 rcx, rax
  00557	48 8b c1	 mov	 rax, rcx
  0055a	f3 0f 10 95 64
	02 00 00	 movss	 xmm2, DWORD PTR half_draw_size$22[rbp]
  00562	48 8b d0	 mov	 rdx, rax
  00565	48 8d 8d 14 0c
	00 00		 lea	 rcx, QWORD PTR $T63[rbp]
  0056c	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@M@Z ; operator*
  00571	b9 08 00 00 00	 mov	 ecx, 8
  00576	48 6b c9 00	 imul	 rcx, rcx, 0
  0057a	48 8b 95 48 0f
	00 00		 mov	 rdx, QWORD PTR points$[rbp]
  00581	48 03 d1	 add	 rdx, rcx
  00584	48 8b ca	 mov	 rcx, rdx
  00587	4c 8b c0	 mov	 r8, rax
  0058a	48 8b d1	 mov	 rdx, rcx
  0058d	48 8d 8d 34 0c
	00 00		 lea	 rcx, QWORD PTR $T64[rbp]
  00594	e8 00 00 00 00	 call	 ??H@YA?AUImVec2@@AEBU0@0@Z ; operator+
  00599	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0059c	b9 08 00 00 00	 mov	 ecx, 8
  005a1	48 6b c9 00	 imul	 rcx, rcx, 0
  005a5	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR temp_points$15[rbp]
  005ac	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax

; 776  :                 temp_points[1] = points[0] - temp_normals[0] * half_draw_size;

  005b0	b8 08 00 00 00	 mov	 eax, 8
  005b5	48 6b c0 00	 imul	 rax, rax, 0
  005b9	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$14[rbp]
  005c0	48 03 c8	 add	 rcx, rax
  005c3	48 8b c1	 mov	 rax, rcx
  005c6	f3 0f 10 95 64
	02 00 00	 movss	 xmm2, DWORD PTR half_draw_size$22[rbp]
  005ce	48 8b d0	 mov	 rdx, rax
  005d1	48 8d 8d 54 0c
	00 00		 lea	 rcx, QWORD PTR $T65[rbp]
  005d8	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@M@Z ; operator*
  005dd	b9 08 00 00 00	 mov	 ecx, 8
  005e2	48 6b c9 00	 imul	 rcx, rcx, 0
  005e6	48 8b 95 48 0f
	00 00		 mov	 rdx, QWORD PTR points$[rbp]
  005ed	48 03 d1	 add	 rdx, rcx
  005f0	48 8b ca	 mov	 rcx, rdx
  005f3	4c 8b c0	 mov	 r8, rax
  005f6	48 8b d1	 mov	 rdx, rcx
  005f9	48 8d 8d 74 0c
	00 00		 lea	 rcx, QWORD PTR $T66[rbp]
  00600	e8 00 00 00 00	 call	 ??G@YA?AUImVec2@@AEBU0@0@Z ; operator-
  00605	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00608	b9 08 00 00 00	 mov	 ecx, 8
  0060d	48 6b c9 01	 imul	 rcx, rcx, 1
  00611	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR temp_points$15[rbp]
  00618	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax

; 777  :                 temp_points[(points_count-1)*2+0] = points[points_count-1] + temp_normals[points_count-1] * half_draw_size;

  0061c	8b 85 50 0f 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  00622	ff c8		 dec	 eax
  00624	48 98		 cdqe
  00626	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$14[rbp]
  0062d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00631	f3 0f 10 95 64
	02 00 00	 movss	 xmm2, DWORD PTR half_draw_size$22[rbp]
  00639	48 8b d0	 mov	 rdx, rax
  0063c	48 8d 8d 94 0c
	00 00		 lea	 rcx, QWORD PTR $T67[rbp]
  00643	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@M@Z ; operator*
  00648	8b 8d 50 0f 00
	00		 mov	 ecx, DWORD PTR points_count$[rbp]
  0064e	ff c9		 dec	 ecx
  00650	48 63 c9	 movsxd	 rcx, ecx
  00653	48 8b 95 48 0f
	00 00		 mov	 rdx, QWORD PTR points$[rbp]
  0065a	48 8d 0c ca	 lea	 rcx, QWORD PTR [rdx+rcx*8]
  0065e	4c 8b c0	 mov	 r8, rax
  00661	48 8b d1	 mov	 rdx, rcx
  00664	48 8d 8d b4 0c
	00 00		 lea	 rcx, QWORD PTR $T68[rbp]
  0066b	e8 00 00 00 00	 call	 ??H@YA?AUImVec2@@AEBU0@0@Z ; operator+
  00670	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00673	8b 8d 50 0f 00
	00		 mov	 ecx, DWORD PTR points_count$[rbp]
  00679	8d 4c 09 fe	 lea	 ecx, DWORD PTR [rcx+rcx-2]
  0067d	48 63 c9	 movsxd	 rcx, ecx
  00680	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR temp_points$15[rbp]
  00687	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax

; 778  :                 temp_points[(points_count-1)*2+1] = points[points_count-1] - temp_normals[points_count-1] * half_draw_size;

  0068b	8b 85 50 0f 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  00691	ff c8		 dec	 eax
  00693	48 98		 cdqe
  00695	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$14[rbp]
  0069c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  006a0	f3 0f 10 95 64
	02 00 00	 movss	 xmm2, DWORD PTR half_draw_size$22[rbp]
  006a8	48 8b d0	 mov	 rdx, rax
  006ab	48 8d 8d d4 0c
	00 00		 lea	 rcx, QWORD PTR $T69[rbp]
  006b2	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@M@Z ; operator*
  006b7	8b 8d 50 0f 00
	00		 mov	 ecx, DWORD PTR points_count$[rbp]
  006bd	ff c9		 dec	 ecx
  006bf	48 63 c9	 movsxd	 rcx, ecx
  006c2	48 8b 95 48 0f
	00 00		 mov	 rdx, QWORD PTR points$[rbp]
  006c9	48 8d 0c ca	 lea	 rcx, QWORD PTR [rdx+rcx*8]
  006cd	4c 8b c0	 mov	 r8, rax
  006d0	48 8b d1	 mov	 rdx, rcx
  006d3	48 8d 8d f4 0c
	00 00		 lea	 rcx, QWORD PTR $T70[rbp]
  006da	e8 00 00 00 00	 call	 ??G@YA?AUImVec2@@AEBU0@0@Z ; operator-
  006df	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006e2	8b 8d 50 0f 00
	00		 mov	 ecx, DWORD PTR points_count$[rbp]
  006e8	8d 4c 09 ff	 lea	 ecx, DWORD PTR [rcx+rcx-1]
  006ec	48 63 c9	 movsxd	 rcx, ecx
  006ef	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR temp_points$15[rbp]
  006f6	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
$LN32@AddPolylin:

; 779  :             }
; 780  : 
; 781  :             // Generate the indices to form a number of triangles for each line segment, and the vertices for the line edges
; 782  :             // This takes points n and n+1 and writes into n+1, with the first point in a closed line being generated from the final one (as n+1 wraps)
; 783  :             // FIXME-OPT: Merge the different loops, possibly remove the temporary buffer.
; 784  :             unsigned int idx1 = _VtxCurrentIdx; // Vertex index for start of line segment

  006fa	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00701	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  00704	89 85 84 02 00
	00		 mov	 DWORD PTR idx1$23[rbp], eax

; 785  :             for (int i1 = 0; i1 < count; i1++) // i1 is the first point of the line segment

  0070a	c7 85 a4 02 00
	00 00 00 00 00	 mov	 DWORD PTR i1$24[rbp], 0
  00714	eb 0e		 jmp	 SHORT $LN7@AddPolylin
$LN5@AddPolylin:
  00716	8b 85 a4 02 00
	00		 mov	 eax, DWORD PTR i1$24[rbp]
  0071c	ff c0		 inc	 eax
  0071e	89 85 a4 02 00
	00		 mov	 DWORD PTR i1$24[rbp], eax
$LN7@AddPolylin:
  00724	8b 45 44	 mov	 eax, DWORD PTR count$[rbp]
  00727	39 85 a4 02 00
	00		 cmp	 DWORD PTR i1$24[rbp], eax
  0072d	0f 8d 54 05 00
	00		 jge	 $LN6@AddPolylin

; 786  :             {
; 787  :                 const int i2 = (i1 + 1) == points_count ? 0 : i1 + 1; // i2 is the second point of the line segment

  00733	8b 85 a4 02 00
	00		 mov	 eax, DWORD PTR i1$24[rbp]
  00739	ff c0		 inc	 eax
  0073b	3b 85 50 0f 00
	00		 cmp	 eax, DWORD PTR points_count$[rbp]
  00741	75 0c		 jne	 SHORT $LN66@AddPolylin
  00743	c7 85 04 0f 00
	00 00 00 00 00	 mov	 DWORD PTR tv344[rbp], 0
  0074d	eb 0e		 jmp	 SHORT $LN67@AddPolylin
$LN66@AddPolylin:
  0074f	8b 85 a4 02 00
	00		 mov	 eax, DWORD PTR i1$24[rbp]
  00755	ff c0		 inc	 eax
  00757	89 85 04 0f 00
	00		 mov	 DWORD PTR tv344[rbp], eax
$LN67@AddPolylin:
  0075d	8b 85 04 0f 00
	00		 mov	 eax, DWORD PTR tv344[rbp]
  00763	89 85 c4 02 00
	00		 mov	 DWORD PTR i2$25[rbp], eax

; 788  :                 const unsigned int idx2 = ((i1 + 1) == points_count) ? _VtxCurrentIdx : (idx1 + (use_texture ? 2 : 3)); // Vertex index for end of segment

  00769	8b 85 a4 02 00
	00		 mov	 eax, DWORD PTR i1$24[rbp]
  0076f	ff c0		 inc	 eax
  00771	3b 85 50 0f 00
	00		 cmp	 eax, DWORD PTR points_count$[rbp]
  00777	75 12		 jne	 SHORT $LN70@AddPolylin
  00779	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00780	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  00783	89 85 04 0f 00
	00		 mov	 DWORD PTR tv352[rbp], eax
  00789	eb 37		 jmp	 SHORT $LN71@AddPolylin
$LN70@AddPolylin:
  0078b	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR use_texture$11[rbp]
  00792	85 c0		 test	 eax, eax
  00794	74 0c		 je	 SHORT $LN68@AddPolylin
  00796	c7 85 08 0f 00
	00 02 00 00 00	 mov	 DWORD PTR tv350[rbp], 2
  007a0	eb 0a		 jmp	 SHORT $LN69@AddPolylin
$LN68@AddPolylin:
  007a2	c7 85 08 0f 00
	00 03 00 00 00	 mov	 DWORD PTR tv350[rbp], 3
$LN69@AddPolylin:
  007ac	8b 85 08 0f 00
	00		 mov	 eax, DWORD PTR tv350[rbp]
  007b2	8b 8d 84 02 00
	00		 mov	 ecx, DWORD PTR idx1$23[rbp]
  007b8	03 c8		 add	 ecx, eax
  007ba	8b c1		 mov	 eax, ecx
  007bc	89 85 04 0f 00
	00		 mov	 DWORD PTR tv352[rbp], eax
$LN71@AddPolylin:
  007c2	8b 85 04 0f 00
	00		 mov	 eax, DWORD PTR tv352[rbp]
  007c8	89 85 e4 02 00
	00		 mov	 DWORD PTR idx2$26[rbp], eax

; 789  : 
; 790  :                 // Average normals
; 791  :                 float dm_x = (temp_normals[i1].x + temp_normals[i2].x) * 0.5f;

  007ce	48 63 85 a4 02
	00 00		 movsxd	 rax, DWORD PTR i1$24[rbp]
  007d5	48 63 8d c4 02
	00 00		 movsxd	 rcx, DWORD PTR i2$25[rbp]
  007dc	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR temp_normals$14[rbp]
  007e3	4c 8b 85 68 01
	00 00		 mov	 r8, QWORD PTR temp_normals$14[rbp]
  007ea	f3 0f 10 04 c2	 movss	 xmm0, DWORD PTR [rdx+rax*8]
  007ef	f3 41 0f 58 04
	c8		 addss	 xmm0, DWORD PTR [r8+rcx*8]
  007f5	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  007fd	f3 0f 11 85 04
	03 00 00	 movss	 DWORD PTR dm_x$27[rbp], xmm0

; 792  :                 float dm_y = (temp_normals[i1].y + temp_normals[i2].y) * 0.5f;

  00805	48 63 85 a4 02
	00 00		 movsxd	 rax, DWORD PTR i1$24[rbp]
  0080c	48 63 8d c4 02
	00 00		 movsxd	 rcx, DWORD PTR i2$25[rbp]
  00813	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR temp_normals$14[rbp]
  0081a	4c 8b 85 68 01
	00 00		 mov	 r8, QWORD PTR temp_normals$14[rbp]
  00821	f3 0f 10 44 c2
	04		 movss	 xmm0, DWORD PTR [rdx+rax*8+4]
  00827	f3 41 0f 58 44
	c8 04		 addss	 xmm0, DWORD PTR [r8+rcx*8+4]
  0082e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00836	f3 0f 11 85 24
	03 00 00	 movss	 DWORD PTR dm_y$28[rbp], xmm0

; 793  :                 IM_FIXNORMAL2F(dm_x, dm_y);

  0083e	f3 0f 10 85 04
	03 00 00	 movss	 xmm0, DWORD PTR dm_x$27[rbp]
  00846	f3 0f 59 85 04
	03 00 00	 mulss	 xmm0, DWORD PTR dm_x$27[rbp]
  0084e	f3 0f 10 8d 24
	03 00 00	 movss	 xmm1, DWORD PTR dm_y$28[rbp]
  00856	f3 0f 59 8d 24
	03 00 00	 mulss	 xmm1, DWORD PTR dm_y$28[rbp]
  0085e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00862	f3 0f 11 85 44
	03 00 00	 movss	 DWORD PTR d2$29[rbp], xmm0
  0086a	f3 0f 10 85 44
	03 00 00	 movss	 xmm0, DWORD PTR d2$29[rbp]
  00872	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@358637bd
  00879	76 69		 jbe	 SHORT $LN33@AddPolylin
  0087b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00883	f3 0f 5e 85 44
	03 00 00	 divss	 xmm0, DWORD PTR d2$29[rbp]
  0088b	f3 0f 11 85 64
	03 00 00	 movss	 DWORD PTR inv_len2$30[rbp], xmm0
  00893	f3 0f 10 85 64
	03 00 00	 movss	 xmm0, DWORD PTR inv_len2$30[rbp]
  0089b	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@42c80000
  008a2	76 10		 jbe	 SHORT $LN34@AddPolylin
  008a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  008ac	f3 0f 11 85 64
	03 00 00	 movss	 DWORD PTR inv_len2$30[rbp], xmm0
$LN34@AddPolylin:
  008b4	f3 0f 10 85 04
	03 00 00	 movss	 xmm0, DWORD PTR dm_x$27[rbp]
  008bc	f3 0f 59 85 64
	03 00 00	 mulss	 xmm0, DWORD PTR inv_len2$30[rbp]
  008c4	f3 0f 11 85 04
	03 00 00	 movss	 DWORD PTR dm_x$27[rbp], xmm0
  008cc	f3 0f 10 85 24
	03 00 00	 movss	 xmm0, DWORD PTR dm_y$28[rbp]
  008d4	f3 0f 59 85 64
	03 00 00	 mulss	 xmm0, DWORD PTR inv_len2$30[rbp]
  008dc	f3 0f 11 85 24
	03 00 00	 movss	 DWORD PTR dm_y$28[rbp], xmm0
$LN33@AddPolylin:

; 794  :                 dm_x *= half_draw_size; // dm_x, dm_y are offset to the outer edge of the AA area

  008e4	f3 0f 10 85 04
	03 00 00	 movss	 xmm0, DWORD PTR dm_x$27[rbp]
  008ec	f3 0f 59 85 64
	02 00 00	 mulss	 xmm0, DWORD PTR half_draw_size$22[rbp]
  008f4	f3 0f 11 85 04
	03 00 00	 movss	 DWORD PTR dm_x$27[rbp], xmm0

; 795  :                 dm_y *= half_draw_size;

  008fc	f3 0f 10 85 24
	03 00 00	 movss	 xmm0, DWORD PTR dm_y$28[rbp]
  00904	f3 0f 59 85 64
	02 00 00	 mulss	 xmm0, DWORD PTR half_draw_size$22[rbp]
  0090c	f3 0f 11 85 24
	03 00 00	 movss	 DWORD PTR dm_y$28[rbp], xmm0

; 796  : 
; 797  :                 // Add temporary vertexes for the outer edges
; 798  :                 ImVec2* out_vtx = &temp_points[i2 * 2];

  00914	8b 85 c4 02 00
	00		 mov	 eax, DWORD PTR i2$25[rbp]
  0091a	d1 e0		 shl	 eax, 1
  0091c	48 98		 cdqe
  0091e	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR temp_points$15[rbp]
  00925	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00929	48 89 85 88 03
	00 00		 mov	 QWORD PTR out_vtx$31[rbp], rax

; 799  :                 out_vtx[0].x = points[i2].x + dm_x;

  00930	48 63 85 c4 02
	00 00		 movsxd	 rax, DWORD PTR i2$25[rbp]
  00937	48 8b 8d 48 0f
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  0093e	f3 0f 10 04 c1	 movss	 xmm0, DWORD PTR [rcx+rax*8]
  00943	f3 0f 58 85 04
	03 00 00	 addss	 xmm0, DWORD PTR dm_x$27[rbp]
  0094b	b8 08 00 00 00	 mov	 eax, 8
  00950	48 6b c0 00	 imul	 rax, rax, 0
  00954	48 8b 8d 88 03
	00 00		 mov	 rcx, QWORD PTR out_vtx$31[rbp]
  0095b	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0

; 800  :                 out_vtx[0].y = points[i2].y + dm_y;

  00960	48 63 85 c4 02
	00 00		 movsxd	 rax, DWORD PTR i2$25[rbp]
  00967	48 8b 8d 48 0f
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  0096e	f3 0f 10 44 c1
	04		 movss	 xmm0, DWORD PTR [rcx+rax*8+4]
  00974	f3 0f 58 85 24
	03 00 00	 addss	 xmm0, DWORD PTR dm_y$28[rbp]
  0097c	b8 08 00 00 00	 mov	 eax, 8
  00981	48 6b c0 00	 imul	 rax, rax, 0
  00985	48 8b 8d 88 03
	00 00		 mov	 rcx, QWORD PTR out_vtx$31[rbp]
  0098c	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0

; 801  :                 out_vtx[1].x = points[i2].x - dm_x;

  00992	48 63 85 c4 02
	00 00		 movsxd	 rax, DWORD PTR i2$25[rbp]
  00999	48 8b 8d 48 0f
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  009a0	f3 0f 10 04 c1	 movss	 xmm0, DWORD PTR [rcx+rax*8]
  009a5	f3 0f 5c 85 04
	03 00 00	 subss	 xmm0, DWORD PTR dm_x$27[rbp]
  009ad	b8 08 00 00 00	 mov	 eax, 8
  009b2	48 6b c0 01	 imul	 rax, rax, 1
  009b6	48 8b 8d 88 03
	00 00		 mov	 rcx, QWORD PTR out_vtx$31[rbp]
  009bd	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0

; 802  :                 out_vtx[1].y = points[i2].y - dm_y;

  009c2	48 63 85 c4 02
	00 00		 movsxd	 rax, DWORD PTR i2$25[rbp]
  009c9	48 8b 8d 48 0f
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  009d0	f3 0f 10 44 c1
	04		 movss	 xmm0, DWORD PTR [rcx+rax*8+4]
  009d6	f3 0f 5c 85 24
	03 00 00	 subss	 xmm0, DWORD PTR dm_y$28[rbp]
  009de	b8 08 00 00 00	 mov	 eax, 8
  009e3	48 6b c0 01	 imul	 rax, rax, 1
  009e7	48 8b 8d 88 03
	00 00		 mov	 rcx, QWORD PTR out_vtx$31[rbp]
  009ee	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0

; 803  : 
; 804  :                 if (use_texture)

  009f4	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR use_texture$11[rbp]
  009fb	85 c0		 test	 eax, eax
  009fd	0f 84 dc 00 00
	00		 je	 $LN35@AddPolylin

; 805  :                 {
; 806  :                     // Add indices for two triangles
; 807  :                     _IdxWritePtr[0] = (ImDrawIdx)(idx2 + 0); _IdxWritePtr[1] = (ImDrawIdx)(idx1 + 0); _IdxWritePtr[2] = (ImDrawIdx)(idx1 + 1); // Right tri

  00a03	b8 02 00 00 00	 mov	 eax, 2
  00a08	48 6b c0 00	 imul	 rax, rax, 0
  00a0c	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a13	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  00a17	0f b7 95 e4 02
	00 00		 movzx	 edx, WORD PTR idx2$26[rbp]
  00a1e	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx
  00a22	b8 02 00 00 00	 mov	 eax, 2
  00a27	48 6b c0 01	 imul	 rax, rax, 1
  00a2b	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a32	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  00a36	0f b7 95 84 02
	00 00		 movzx	 edx, WORD PTR idx1$23[rbp]
  00a3d	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx
  00a41	8b 85 84 02 00
	00		 mov	 eax, DWORD PTR idx1$23[rbp]
  00a47	ff c0		 inc	 eax
  00a49	b9 02 00 00 00	 mov	 ecx, 2
  00a4e	48 6b c9 02	 imul	 rcx, rcx, 2
  00a52	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00a59	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00a5d	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 808  :                     _IdxWritePtr[3] = (ImDrawIdx)(idx2 + 1); _IdxWritePtr[4] = (ImDrawIdx)(idx1 + 1); _IdxWritePtr[5] = (ImDrawIdx)(idx2 + 0); // Left tri

  00a61	8b 85 e4 02 00
	00		 mov	 eax, DWORD PTR idx2$26[rbp]
  00a67	ff c0		 inc	 eax
  00a69	b9 02 00 00 00	 mov	 ecx, 2
  00a6e	48 6b c9 03	 imul	 rcx, rcx, 3
  00a72	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00a79	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00a7d	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  00a81	8b 85 84 02 00
	00		 mov	 eax, DWORD PTR idx1$23[rbp]
  00a87	ff c0		 inc	 eax
  00a89	b9 02 00 00 00	 mov	 ecx, 2
  00a8e	48 6b c9 04	 imul	 rcx, rcx, 4
  00a92	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00a99	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00a9d	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  00aa1	b8 02 00 00 00	 mov	 eax, 2
  00aa6	48 6b c0 05	 imul	 rax, rax, 5
  00aaa	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ab1	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  00ab5	0f b7 95 e4 02
	00 00		 movzx	 edx, WORD PTR idx2$26[rbp]
  00abc	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx

; 809  :                     _IdxWritePtr += 6;

  00ac0	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00ac7	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00acb	48 83 c0 0c	 add	 rax, 12
  00acf	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ad6	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 810  :                 }
; 811  :                 else

  00ada	e9 97 01 00 00	 jmp	 $LN36@AddPolylin
$LN35@AddPolylin:

; 812  :                 {
; 813  :                     // Add indexes for four triangles
; 814  :                     _IdxWritePtr[0] = (ImDrawIdx)(idx2 + 0); _IdxWritePtr[1] = (ImDrawIdx)(idx1 + 0); _IdxWritePtr[2] = (ImDrawIdx)(idx1 + 2); // Right tri 1

  00adf	b8 02 00 00 00	 mov	 eax, 2
  00ae4	48 6b c0 00	 imul	 rax, rax, 0
  00ae8	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00aef	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  00af3	0f b7 95 e4 02
	00 00		 movzx	 edx, WORD PTR idx2$26[rbp]
  00afa	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx
  00afe	b8 02 00 00 00	 mov	 eax, 2
  00b03	48 6b c0 01	 imul	 rax, rax, 1
  00b07	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b0e	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  00b12	0f b7 95 84 02
	00 00		 movzx	 edx, WORD PTR idx1$23[rbp]
  00b19	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx
  00b1d	8b 85 84 02 00
	00		 mov	 eax, DWORD PTR idx1$23[rbp]
  00b23	83 c0 02	 add	 eax, 2
  00b26	b9 02 00 00 00	 mov	 ecx, 2
  00b2b	48 6b c9 02	 imul	 rcx, rcx, 2
  00b2f	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00b36	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00b3a	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 815  :                     _IdxWritePtr[3] = (ImDrawIdx)(idx1 + 2); _IdxWritePtr[4] = (ImDrawIdx)(idx2 + 2); _IdxWritePtr[5] = (ImDrawIdx)(idx2 + 0); // Right tri 2

  00b3e	8b 85 84 02 00
	00		 mov	 eax, DWORD PTR idx1$23[rbp]
  00b44	83 c0 02	 add	 eax, 2
  00b47	b9 02 00 00 00	 mov	 ecx, 2
  00b4c	48 6b c9 03	 imul	 rcx, rcx, 3
  00b50	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00b57	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00b5b	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  00b5f	8b 85 e4 02 00
	00		 mov	 eax, DWORD PTR idx2$26[rbp]
  00b65	83 c0 02	 add	 eax, 2
  00b68	b9 02 00 00 00	 mov	 ecx, 2
  00b6d	48 6b c9 04	 imul	 rcx, rcx, 4
  00b71	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00b78	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00b7c	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  00b80	b8 02 00 00 00	 mov	 eax, 2
  00b85	48 6b c0 05	 imul	 rax, rax, 5
  00b89	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b90	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  00b94	0f b7 95 e4 02
	00 00		 movzx	 edx, WORD PTR idx2$26[rbp]
  00b9b	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx

; 816  :                     _IdxWritePtr[6] = (ImDrawIdx)(idx2 + 1); _IdxWritePtr[7] = (ImDrawIdx)(idx1 + 1); _IdxWritePtr[8] = (ImDrawIdx)(idx1 + 0); // Left tri 1

  00b9f	8b 85 e4 02 00
	00		 mov	 eax, DWORD PTR idx2$26[rbp]
  00ba5	ff c0		 inc	 eax
  00ba7	b9 02 00 00 00	 mov	 ecx, 2
  00bac	48 6b c9 06	 imul	 rcx, rcx, 6
  00bb0	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00bb7	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00bbb	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  00bbf	8b 85 84 02 00
	00		 mov	 eax, DWORD PTR idx1$23[rbp]
  00bc5	ff c0		 inc	 eax
  00bc7	b9 02 00 00 00	 mov	 ecx, 2
  00bcc	48 6b c9 07	 imul	 rcx, rcx, 7
  00bd0	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00bd7	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00bdb	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  00bdf	b8 02 00 00 00	 mov	 eax, 2
  00be4	48 6b c0 08	 imul	 rax, rax, 8
  00be8	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00bef	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  00bf3	0f b7 95 84 02
	00 00		 movzx	 edx, WORD PTR idx1$23[rbp]
  00bfa	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx

; 817  :                     _IdxWritePtr[9] = (ImDrawIdx)(idx1 + 0); _IdxWritePtr[10] = (ImDrawIdx)(idx2 + 0); _IdxWritePtr[11] = (ImDrawIdx)(idx2 + 1); // Left tri 2

  00bfe	b8 02 00 00 00	 mov	 eax, 2
  00c03	48 6b c0 09	 imul	 rax, rax, 9
  00c07	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c0e	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  00c12	0f b7 95 84 02
	00 00		 movzx	 edx, WORD PTR idx1$23[rbp]
  00c19	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx
  00c1d	b8 02 00 00 00	 mov	 eax, 2
  00c22	48 6b c0 0a	 imul	 rax, rax, 10
  00c26	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c2d	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  00c31	0f b7 95 e4 02
	00 00		 movzx	 edx, WORD PTR idx2$26[rbp]
  00c38	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx
  00c3c	8b 85 e4 02 00
	00		 mov	 eax, DWORD PTR idx2$26[rbp]
  00c42	ff c0		 inc	 eax
  00c44	b9 02 00 00 00	 mov	 ecx, 2
  00c49	48 6b c9 0b	 imul	 rcx, rcx, 11
  00c4d	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00c54	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00c58	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 818  :                     _IdxWritePtr += 12;

  00c5c	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00c63	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00c67	48 83 c0 18	 add	 rax, 24
  00c6b	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c72	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN36@AddPolylin:

; 819  :                 }
; 820  : 
; 821  :                 idx1 = idx2;

  00c76	8b 85 e4 02 00
	00		 mov	 eax, DWORD PTR idx2$26[rbp]
  00c7c	89 85 84 02 00
	00		 mov	 DWORD PTR idx1$23[rbp], eax

; 822  :             }

  00c82	e9 8f fa ff ff	 jmp	 $LN5@AddPolylin
$LN6@AddPolylin:

; 823  : 
; 824  :             // Add vertexes for each point on the line
; 825  :             if (use_texture)

  00c87	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR use_texture$11[rbp]
  00c8e	85 c0		 test	 eax, eax
  00c90	0f 84 92 01 00
	00		 je	 $LN37@AddPolylin

; 826  :             {
; 827  :                 // If we're using textures we only need to emit the left/right edge vertices
; 828  :                 ImVec4 tex_uvs = _Data->TexUvLines[integer_thickness];

  00c96	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00c9d	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00ca1	48 63 8d c4 00
	00 00		 movsxd	 rcx, DWORD PTR integer_thickness$9[rbp]
  00ca8	48 6b c9 10	 imul	 rcx, rcx, 16
  00cac	48 8b 80 08 02
	00 00		 mov	 rax, QWORD PTR [rax+520]
  00cb3	48 8d 95 a8 03
	00 00		 lea	 rdx, QWORD PTR tex_uvs$32[rbp]
  00cba	48 8b fa	 mov	 rdi, rdx
  00cbd	48 8d 34 08	 lea	 rsi, QWORD PTR [rax+rcx]
  00cc1	b9 10 00 00 00	 mov	 ecx, 16
  00cc6	f3 a4		 rep movsb

; 829  :                 /*if (fractional_thickness != 0.0f) // Currently always zero when use_texture==false!
; 830  :                 {
; 831  :                     const ImVec4 tex_uvs_1 = _Data->TexUvLines[integer_thickness + 1];
; 832  :                     tex_uvs.x = tex_uvs.x + (tex_uvs_1.x - tex_uvs.x) * fractional_thickness; // inlined ImLerp()
; 833  :                     tex_uvs.y = tex_uvs.y + (tex_uvs_1.y - tex_uvs.y) * fractional_thickness;
; 834  :                     tex_uvs.z = tex_uvs.z + (tex_uvs_1.z - tex_uvs.z) * fractional_thickness;
; 835  :                     tex_uvs.w = tex_uvs.w + (tex_uvs_1.w - tex_uvs.w) * fractional_thickness;
; 836  :                 }*/
; 837  :                 ImVec2 tex_uv0(tex_uvs.x, tex_uvs.y);

  00cc8	f3 0f 10 95 ac
	03 00 00	 movss	 xmm2, DWORD PTR tex_uvs$32[rbp+4]
  00cd0	f3 0f 10 8d a8
	03 00 00	 movss	 xmm1, DWORD PTR tex_uvs$32[rbp]
  00cd8	48 8d 8d d8 03
	00 00		 lea	 rcx, QWORD PTR tex_uv0$33[rbp]
  00cdf	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 838  :                 ImVec2 tex_uv1(tex_uvs.z, tex_uvs.w);

  00ce4	f3 0f 10 95 b4
	03 00 00	 movss	 xmm2, DWORD PTR tex_uvs$32[rbp+12]
  00cec	f3 0f 10 8d b0
	03 00 00	 movss	 xmm1, DWORD PTR tex_uvs$32[rbp+8]
  00cf4	48 8d 8d f8 03
	00 00		 lea	 rcx, QWORD PTR tex_uv1$34[rbp]
  00cfb	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 839  :                 for (int i = 0; i < points_count; i++)

  00d00	c7 85 14 04 00
	00 00 00 00 00	 mov	 DWORD PTR i$35[rbp], 0
  00d0a	eb 0e		 jmp	 SHORT $LN10@AddPolylin
$LN8@AddPolylin:
  00d0c	8b 85 14 04 00
	00		 mov	 eax, DWORD PTR i$35[rbp]
  00d12	ff c0		 inc	 eax
  00d14	89 85 14 04 00
	00		 mov	 DWORD PTR i$35[rbp], eax
$LN10@AddPolylin:
  00d1a	8b 85 50 0f 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  00d20	39 85 14 04 00
	00		 cmp	 DWORD PTR i$35[rbp], eax
  00d26	0f 8d f7 00 00
	00		 jge	 $LN9@AddPolylin

; 840  :                 {
; 841  :                     _VtxWritePtr[0].pos = temp_points[i * 2 + 0]; _VtxWritePtr[0].uv = tex_uv0; _VtxWritePtr[0].col = col; // Left-side outer edge

  00d2c	8b 85 14 04 00
	00		 mov	 eax, DWORD PTR i$35[rbp]
  00d32	03 c0		 add	 eax, eax
  00d34	48 98		 cdqe
  00d36	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR temp_points$15[rbp]
  00d3d	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00d41	b9 14 00 00 00	 mov	 ecx, 20
  00d46	48 6b c9 00	 imul	 rcx, rcx, 0
  00d4a	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00d51	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  00d55	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  00d59	b8 14 00 00 00	 mov	 eax, 20
  00d5e	48 6b c0 00	 imul	 rax, rax, 0
  00d62	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00d69	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00d6d	48 8b 95 d8 03
	00 00		 mov	 rdx, QWORD PTR tex_uv0$33[rbp]
  00d74	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  00d79	b8 14 00 00 00	 mov	 eax, 20
  00d7e	48 6b c0 00	 imul	 rax, rax, 0
  00d82	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00d89	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00d8d	8b 95 58 0f 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  00d93	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 842  :                     _VtxWritePtr[1].pos = temp_points[i * 2 + 1]; _VtxWritePtr[1].uv = tex_uv1; _VtxWritePtr[1].col = col; // Right-side outer edge

  00d97	8b 85 14 04 00
	00		 mov	 eax, DWORD PTR i$35[rbp]
  00d9d	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  00da1	48 98		 cdqe
  00da3	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR temp_points$15[rbp]
  00daa	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00dae	b9 14 00 00 00	 mov	 ecx, 20
  00db3	48 6b c9 01	 imul	 rcx, rcx, 1
  00db7	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00dbe	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  00dc2	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  00dc6	b8 14 00 00 00	 mov	 eax, 20
  00dcb	48 6b c0 01	 imul	 rax, rax, 1
  00dcf	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00dd6	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00dda	48 8b 95 f8 03
	00 00		 mov	 rdx, QWORD PTR tex_uv1$34[rbp]
  00de1	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  00de6	b8 14 00 00 00	 mov	 eax, 20
  00deb	48 6b c0 01	 imul	 rax, rax, 1
  00def	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00df6	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00dfa	8b 95 58 0f 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  00e00	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 843  :                     _VtxWritePtr += 2;

  00e04	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00e0b	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00e0f	48 83 c0 28	 add	 rax, 40			; 00000028H
  00e13	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00e1a	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 844  :                 }

  00e1e	e9 e9 fe ff ff	 jmp	 $LN8@AddPolylin
$LN9@AddPolylin:

; 845  :             }
; 846  :             else

  00e23	e9 82 01 00 00	 jmp	 $LN38@AddPolylin
$LN37@AddPolylin:

; 847  :             {
; 848  :                 // If we're not using a texture, we need the center vertex as well
; 849  :                 for (int i = 0; i < points_count; i++)

  00e28	c7 85 34 04 00
	00 00 00 00 00	 mov	 DWORD PTR i$36[rbp], 0
  00e32	eb 0e		 jmp	 SHORT $LN13@AddPolylin
$LN11@AddPolylin:
  00e34	8b 85 34 04 00
	00		 mov	 eax, DWORD PTR i$36[rbp]
  00e3a	ff c0		 inc	 eax
  00e3c	89 85 34 04 00
	00		 mov	 DWORD PTR i$36[rbp], eax
$LN13@AddPolylin:
  00e42	8b 85 50 0f 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  00e48	39 85 34 04 00
	00		 cmp	 DWORD PTR i$36[rbp], eax
  00e4e	0f 8d 56 01 00
	00		 jge	 $LN12@AddPolylin

; 850  :                 {
; 851  :                     _VtxWritePtr[0].pos = points[i];              _VtxWritePtr[0].uv = opaque_uv; _VtxWritePtr[0].col = col;       // Center of line

  00e54	48 63 85 34 04
	00 00		 movsxd	 rax, DWORD PTR i$36[rbp]
  00e5b	48 8b 8d 48 0f
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  00e62	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00e66	b9 14 00 00 00	 mov	 ecx, 20
  00e6b	48 6b c9 00	 imul	 rcx, rcx, 0
  00e6f	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00e76	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  00e7a	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  00e7e	b8 14 00 00 00	 mov	 eax, 20
  00e83	48 6b c0 00	 imul	 rax, rax, 0
  00e87	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00e8e	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00e92	48 8b 55 28	 mov	 rdx, QWORD PTR opaque_uv$[rbp]
  00e96	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  00e9b	b8 14 00 00 00	 mov	 eax, 20
  00ea0	48 6b c0 00	 imul	 rax, rax, 0
  00ea4	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00eab	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00eaf	8b 95 58 0f 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  00eb5	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 852  :                     _VtxWritePtr[1].pos = temp_points[i * 2 + 0]; _VtxWritePtr[1].uv = opaque_uv; _VtxWritePtr[1].col = col_trans; // Left-side outer edge

  00eb9	8b 85 34 04 00
	00		 mov	 eax, DWORD PTR i$36[rbp]
  00ebf	03 c0		 add	 eax, eax
  00ec1	48 98		 cdqe
  00ec3	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR temp_points$15[rbp]
  00eca	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00ece	b9 14 00 00 00	 mov	 ecx, 20
  00ed3	48 6b c9 01	 imul	 rcx, rcx, 1
  00ed7	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00ede	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  00ee2	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  00ee6	b8 14 00 00 00	 mov	 eax, 20
  00eeb	48 6b c0 01	 imul	 rax, rax, 1
  00eef	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ef6	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00efa	48 8b 55 28	 mov	 rdx, QWORD PTR opaque_uv$[rbp]
  00efe	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  00f03	b8 14 00 00 00	 mov	 eax, 20
  00f08	48 6b c0 01	 imul	 rax, rax, 1
  00f0c	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00f13	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00f17	8b 95 a4 00 00
	00		 mov	 edx, DWORD PTR col_trans$8[rbp]
  00f1d	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 853  :                     _VtxWritePtr[2].pos = temp_points[i * 2 + 1]; _VtxWritePtr[2].uv = opaque_uv; _VtxWritePtr[2].col = col_trans; // Right-side outer edge

  00f21	8b 85 34 04 00
	00		 mov	 eax, DWORD PTR i$36[rbp]
  00f27	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  00f2b	48 98		 cdqe
  00f2d	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR temp_points$15[rbp]
  00f34	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00f38	b9 14 00 00 00	 mov	 ecx, 20
  00f3d	48 6b c9 02	 imul	 rcx, rcx, 2
  00f41	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00f48	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  00f4c	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  00f50	b8 14 00 00 00	 mov	 eax, 20
  00f55	48 6b c0 02	 imul	 rax, rax, 2
  00f59	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00f60	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00f64	48 8b 55 28	 mov	 rdx, QWORD PTR opaque_uv$[rbp]
  00f68	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  00f6d	b8 14 00 00 00	 mov	 eax, 20
  00f72	48 6b c0 02	 imul	 rax, rax, 2
  00f76	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00f7d	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00f81	8b 95 a4 00 00
	00		 mov	 edx, DWORD PTR col_trans$8[rbp]
  00f87	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 854  :                     _VtxWritePtr += 3;

  00f8b	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00f92	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00f96	48 83 c0 3c	 add	 rax, 60			; 0000003cH
  00f9a	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00fa1	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 855  :                 }

  00fa5	e9 8a fe ff ff	 jmp	 $LN11@AddPolylin
$LN12@AddPolylin:
$LN38@AddPolylin:

; 856  :             }
; 857  :         }
; 858  :         else

  00faa	e9 0d 0c 00 00	 jmp	 $LN30@AddPolylin
$LN29@AddPolylin:

; 859  :         {
; 860  :             // [PATH 2] Non texture-based lines (thick): we need to draw the solid line core and thus require four vertices per point
; 861  :             const float half_inner_thickness = (thickness - AA_SIZE) * 0.5f;

  00faf	f3 0f 10 85 68
	0f 00 00	 movss	 xmm0, DWORD PTR thickness$[rbp]
  00fb7	f3 0f 5c 85 84
	00 00 00	 subss	 xmm0, DWORD PTR AA_SIZE$7[rbp]
  00fbf	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00fc7	f3 0f 11 85 54
	04 00 00	 movss	 DWORD PTR half_inner_thickness$37[rbp], xmm0

; 862  : 
; 863  :             // If line is not closed, the first and last points need to be generated differently as there are no normals to blend
; 864  :             if (!closed)

  00fcf	0f b6 45 04	 movzx	 eax, BYTE PTR closed$[rbp]
  00fd3	85 c0		 test	 eax, eax
  00fd5	0f 85 92 03 00
	00		 jne	 $LN39@AddPolylin

; 865  :             {
; 866  :                 const int points_last = points_count - 1;

  00fdb	8b 85 50 0f 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  00fe1	ff c8		 dec	 eax
  00fe3	89 85 74 04 00
	00		 mov	 DWORD PTR points_last$38[rbp], eax

; 867  :                 temp_points[0] = points[0] + temp_normals[0] * (half_inner_thickness + AA_SIZE);

  00fe9	f3 0f 10 85 54
	04 00 00	 movss	 xmm0, DWORD PTR half_inner_thickness$37[rbp]
  00ff1	f3 0f 58 85 84
	00 00 00	 addss	 xmm0, DWORD PTR AA_SIZE$7[rbp]
  00ff9	b8 08 00 00 00	 mov	 eax, 8
  00ffe	48 6b c0 00	 imul	 rax, rax, 0
  01002	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$14[rbp]
  01009	48 03 c8	 add	 rcx, rax
  0100c	48 8b c1	 mov	 rax, rcx
  0100f	0f 28 d0	 movaps	 xmm2, xmm0
  01012	48 8b d0	 mov	 rdx, rax
  01015	48 8d 8d 14 0d
	00 00		 lea	 rcx, QWORD PTR $T71[rbp]
  0101c	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@M@Z ; operator*
  01021	b9 08 00 00 00	 mov	 ecx, 8
  01026	48 6b c9 00	 imul	 rcx, rcx, 0
  0102a	48 8b 95 48 0f
	00 00		 mov	 rdx, QWORD PTR points$[rbp]
  01031	48 03 d1	 add	 rdx, rcx
  01034	48 8b ca	 mov	 rcx, rdx
  01037	4c 8b c0	 mov	 r8, rax
  0103a	48 8b d1	 mov	 rdx, rcx
  0103d	48 8d 8d 34 0d
	00 00		 lea	 rcx, QWORD PTR $T72[rbp]
  01044	e8 00 00 00 00	 call	 ??H@YA?AUImVec2@@AEBU0@0@Z ; operator+
  01049	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0104c	b9 08 00 00 00	 mov	 ecx, 8
  01051	48 6b c9 00	 imul	 rcx, rcx, 0
  01055	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR temp_points$15[rbp]
  0105c	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax

; 868  :                 temp_points[1] = points[0] + temp_normals[0] * (half_inner_thickness);

  01060	b8 08 00 00 00	 mov	 eax, 8
  01065	48 6b c0 00	 imul	 rax, rax, 0
  01069	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$14[rbp]
  01070	48 03 c8	 add	 rcx, rax
  01073	48 8b c1	 mov	 rax, rcx
  01076	f3 0f 10 95 54
	04 00 00	 movss	 xmm2, DWORD PTR half_inner_thickness$37[rbp]
  0107e	48 8b d0	 mov	 rdx, rax
  01081	48 8d 8d 54 0d
	00 00		 lea	 rcx, QWORD PTR $T73[rbp]
  01088	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@M@Z ; operator*
  0108d	b9 08 00 00 00	 mov	 ecx, 8
  01092	48 6b c9 00	 imul	 rcx, rcx, 0
  01096	48 8b 95 48 0f
	00 00		 mov	 rdx, QWORD PTR points$[rbp]
  0109d	48 03 d1	 add	 rdx, rcx
  010a0	48 8b ca	 mov	 rcx, rdx
  010a3	4c 8b c0	 mov	 r8, rax
  010a6	48 8b d1	 mov	 rdx, rcx
  010a9	48 8d 8d 74 0d
	00 00		 lea	 rcx, QWORD PTR $T74[rbp]
  010b0	e8 00 00 00 00	 call	 ??H@YA?AUImVec2@@AEBU0@0@Z ; operator+
  010b5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  010b8	b9 08 00 00 00	 mov	 ecx, 8
  010bd	48 6b c9 01	 imul	 rcx, rcx, 1
  010c1	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR temp_points$15[rbp]
  010c8	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax

; 869  :                 temp_points[2] = points[0] - temp_normals[0] * (half_inner_thickness);

  010cc	b8 08 00 00 00	 mov	 eax, 8
  010d1	48 6b c0 00	 imul	 rax, rax, 0
  010d5	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$14[rbp]
  010dc	48 03 c8	 add	 rcx, rax
  010df	48 8b c1	 mov	 rax, rcx
  010e2	f3 0f 10 95 54
	04 00 00	 movss	 xmm2, DWORD PTR half_inner_thickness$37[rbp]
  010ea	48 8b d0	 mov	 rdx, rax
  010ed	48 8d 8d 94 0d
	00 00		 lea	 rcx, QWORD PTR $T75[rbp]
  010f4	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@M@Z ; operator*
  010f9	b9 08 00 00 00	 mov	 ecx, 8
  010fe	48 6b c9 00	 imul	 rcx, rcx, 0
  01102	48 8b 95 48 0f
	00 00		 mov	 rdx, QWORD PTR points$[rbp]
  01109	48 03 d1	 add	 rdx, rcx
  0110c	48 8b ca	 mov	 rcx, rdx
  0110f	4c 8b c0	 mov	 r8, rax
  01112	48 8b d1	 mov	 rdx, rcx
  01115	48 8d 8d b4 0d
	00 00		 lea	 rcx, QWORD PTR $T76[rbp]
  0111c	e8 00 00 00 00	 call	 ??G@YA?AUImVec2@@AEBU0@0@Z ; operator-
  01121	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01124	b9 08 00 00 00	 mov	 ecx, 8
  01129	48 6b c9 02	 imul	 rcx, rcx, 2
  0112d	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR temp_points$15[rbp]
  01134	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax

; 870  :                 temp_points[3] = points[0] - temp_normals[0] * (half_inner_thickness + AA_SIZE);

  01138	f3 0f 10 85 54
	04 00 00	 movss	 xmm0, DWORD PTR half_inner_thickness$37[rbp]
  01140	f3 0f 58 85 84
	00 00 00	 addss	 xmm0, DWORD PTR AA_SIZE$7[rbp]
  01148	b8 08 00 00 00	 mov	 eax, 8
  0114d	48 6b c0 00	 imul	 rax, rax, 0
  01151	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$14[rbp]
  01158	48 03 c8	 add	 rcx, rax
  0115b	48 8b c1	 mov	 rax, rcx
  0115e	0f 28 d0	 movaps	 xmm2, xmm0
  01161	48 8b d0	 mov	 rdx, rax
  01164	48 8d 8d d4 0d
	00 00		 lea	 rcx, QWORD PTR $T77[rbp]
  0116b	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@M@Z ; operator*
  01170	b9 08 00 00 00	 mov	 ecx, 8
  01175	48 6b c9 00	 imul	 rcx, rcx, 0
  01179	48 8b 95 48 0f
	00 00		 mov	 rdx, QWORD PTR points$[rbp]
  01180	48 03 d1	 add	 rdx, rcx
  01183	48 8b ca	 mov	 rcx, rdx
  01186	4c 8b c0	 mov	 r8, rax
  01189	48 8b d1	 mov	 rdx, rcx
  0118c	48 8d 8d f4 0d
	00 00		 lea	 rcx, QWORD PTR $T78[rbp]
  01193	e8 00 00 00 00	 call	 ??G@YA?AUImVec2@@AEBU0@0@Z ; operator-
  01198	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0119b	b9 08 00 00 00	 mov	 ecx, 8
  011a0	48 6b c9 03	 imul	 rcx, rcx, 3
  011a4	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR temp_points$15[rbp]
  011ab	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax

; 871  :                 temp_points[points_last * 4 + 0] = points[points_last] + temp_normals[points_last] * (half_inner_thickness + AA_SIZE);

  011af	f3 0f 10 85 54
	04 00 00	 movss	 xmm0, DWORD PTR half_inner_thickness$37[rbp]
  011b7	f3 0f 58 85 84
	00 00 00	 addss	 xmm0, DWORD PTR AA_SIZE$7[rbp]
  011bf	48 63 85 74 04
	00 00		 movsxd	 rax, DWORD PTR points_last$38[rbp]
  011c6	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$14[rbp]
  011cd	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  011d1	0f 28 d0	 movaps	 xmm2, xmm0
  011d4	48 8b d0	 mov	 rdx, rax
  011d7	48 8d 8d 14 0e
	00 00		 lea	 rcx, QWORD PTR $T79[rbp]
  011de	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@M@Z ; operator*
  011e3	48 63 8d 74 04
	00 00		 movsxd	 rcx, DWORD PTR points_last$38[rbp]
  011ea	48 8b 95 48 0f
	00 00		 mov	 rdx, QWORD PTR points$[rbp]
  011f1	48 8d 0c ca	 lea	 rcx, QWORD PTR [rdx+rcx*8]
  011f5	4c 8b c0	 mov	 r8, rax
  011f8	48 8b d1	 mov	 rdx, rcx
  011fb	48 8d 8d 34 0e
	00 00		 lea	 rcx, QWORD PTR $T80[rbp]
  01202	e8 00 00 00 00	 call	 ??H@YA?AUImVec2@@AEBU0@0@Z ; operator+
  01207	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0120a	8b 8d 74 04 00
	00		 mov	 ecx, DWORD PTR points_last$38[rbp]
  01210	c1 e1 02	 shl	 ecx, 2
  01213	48 63 c9	 movsxd	 rcx, ecx
  01216	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR temp_points$15[rbp]
  0121d	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax

; 872  :                 temp_points[points_last * 4 + 1] = points[points_last] + temp_normals[points_last] * (half_inner_thickness);

  01221	48 63 85 74 04
	00 00		 movsxd	 rax, DWORD PTR points_last$38[rbp]
  01228	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$14[rbp]
  0122f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01233	f3 0f 10 95 54
	04 00 00	 movss	 xmm2, DWORD PTR half_inner_thickness$37[rbp]
  0123b	48 8b d0	 mov	 rdx, rax
  0123e	48 8d 8d 54 0e
	00 00		 lea	 rcx, QWORD PTR $T81[rbp]
  01245	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@M@Z ; operator*
  0124a	48 63 8d 74 04
	00 00		 movsxd	 rcx, DWORD PTR points_last$38[rbp]
  01251	48 8b 95 48 0f
	00 00		 mov	 rdx, QWORD PTR points$[rbp]
  01258	48 8d 0c ca	 lea	 rcx, QWORD PTR [rdx+rcx*8]
  0125c	4c 8b c0	 mov	 r8, rax
  0125f	48 8b d1	 mov	 rdx, rcx
  01262	48 8d 8d 74 0e
	00 00		 lea	 rcx, QWORD PTR $T82[rbp]
  01269	e8 00 00 00 00	 call	 ??H@YA?AUImVec2@@AEBU0@0@Z ; operator+
  0126e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01271	8b 8d 74 04 00
	00		 mov	 ecx, DWORD PTR points_last$38[rbp]
  01277	8d 0c 8d 01 00
	00 00		 lea	 ecx, DWORD PTR [rcx*4+1]
  0127e	48 63 c9	 movsxd	 rcx, ecx
  01281	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR temp_points$15[rbp]
  01288	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax

; 873  :                 temp_points[points_last * 4 + 2] = points[points_last] - temp_normals[points_last] * (half_inner_thickness);

  0128c	48 63 85 74 04
	00 00		 movsxd	 rax, DWORD PTR points_last$38[rbp]
  01293	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$14[rbp]
  0129a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0129e	f3 0f 10 95 54
	04 00 00	 movss	 xmm2, DWORD PTR half_inner_thickness$37[rbp]
  012a6	48 8b d0	 mov	 rdx, rax
  012a9	48 8d 8d 94 0e
	00 00		 lea	 rcx, QWORD PTR $T83[rbp]
  012b0	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@M@Z ; operator*
  012b5	48 63 8d 74 04
	00 00		 movsxd	 rcx, DWORD PTR points_last$38[rbp]
  012bc	48 8b 95 48 0f
	00 00		 mov	 rdx, QWORD PTR points$[rbp]
  012c3	48 8d 0c ca	 lea	 rcx, QWORD PTR [rdx+rcx*8]
  012c7	4c 8b c0	 mov	 r8, rax
  012ca	48 8b d1	 mov	 rdx, rcx
  012cd	48 8d 8d b4 0e
	00 00		 lea	 rcx, QWORD PTR $T84[rbp]
  012d4	e8 00 00 00 00	 call	 ??G@YA?AUImVec2@@AEBU0@0@Z ; operator-
  012d9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  012dc	8b 8d 74 04 00
	00		 mov	 ecx, DWORD PTR points_last$38[rbp]
  012e2	8d 0c 8d 02 00
	00 00		 lea	 ecx, DWORD PTR [rcx*4+2]
  012e9	48 63 c9	 movsxd	 rcx, ecx
  012ec	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR temp_points$15[rbp]
  012f3	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax

; 874  :                 temp_points[points_last * 4 + 3] = points[points_last] - temp_normals[points_last] * (half_inner_thickness + AA_SIZE);

  012f7	f3 0f 10 85 54
	04 00 00	 movss	 xmm0, DWORD PTR half_inner_thickness$37[rbp]
  012ff	f3 0f 58 85 84
	00 00 00	 addss	 xmm0, DWORD PTR AA_SIZE$7[rbp]
  01307	48 63 85 74 04
	00 00		 movsxd	 rax, DWORD PTR points_last$38[rbp]
  0130e	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR temp_normals$14[rbp]
  01315	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01319	0f 28 d0	 movaps	 xmm2, xmm0
  0131c	48 8b d0	 mov	 rdx, rax
  0131f	48 8d 8d d4 0e
	00 00		 lea	 rcx, QWORD PTR $T85[rbp]
  01326	e8 00 00 00 00	 call	 ??D@YA?AUImVec2@@AEBU0@M@Z ; operator*
  0132b	48 63 8d 74 04
	00 00		 movsxd	 rcx, DWORD PTR points_last$38[rbp]
  01332	48 8b 95 48 0f
	00 00		 mov	 rdx, QWORD PTR points$[rbp]
  01339	48 8d 0c ca	 lea	 rcx, QWORD PTR [rdx+rcx*8]
  0133d	4c 8b c0	 mov	 r8, rax
  01340	48 8b d1	 mov	 rdx, rcx
  01343	48 8d 8d f4 0e
	00 00		 lea	 rcx, QWORD PTR $T86[rbp]
  0134a	e8 00 00 00 00	 call	 ??G@YA?AUImVec2@@AEBU0@0@Z ; operator-
  0134f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01352	8b 8d 74 04 00
	00		 mov	 ecx, DWORD PTR points_last$38[rbp]
  01358	8d 0c 8d 03 00
	00 00		 lea	 ecx, DWORD PTR [rcx*4+3]
  0135f	48 63 c9	 movsxd	 rcx, ecx
  01362	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR temp_points$15[rbp]
  01369	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
$LN39@AddPolylin:

; 875  :             }
; 876  : 
; 877  :             // Generate the indices to form a number of triangles for each line segment, and the vertices for the line edges
; 878  :             // This takes points n and n+1 and writes into n+1, with the first point in a closed line being generated from the final one (as n+1 wraps)
; 879  :             // FIXME-OPT: Merge the different loops, possibly remove the temporary buffer.
; 880  :             unsigned int idx1 = _VtxCurrentIdx; // Vertex index for start of line segment

  0136d	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01374	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  01377	89 85 94 04 00
	00		 mov	 DWORD PTR idx1$39[rbp], eax

; 881  :             for (int i1 = 0; i1 < count; i1++) // i1 is the first point of the line segment

  0137d	c7 85 b4 04 00
	00 00 00 00 00	 mov	 DWORD PTR i1$40[rbp], 0
  01387	eb 0e		 jmp	 SHORT $LN16@AddPolylin
$LN14@AddPolylin:
  01389	8b 85 b4 04 00
	00		 mov	 eax, DWORD PTR i1$40[rbp]
  0138f	ff c0		 inc	 eax
  01391	89 85 b4 04 00
	00		 mov	 DWORD PTR i1$40[rbp], eax
$LN16@AddPolylin:
  01397	8b 45 44	 mov	 eax, DWORD PTR count$[rbp]
  0139a	39 85 b4 04 00
	00		 cmp	 DWORD PTR i1$40[rbp], eax
  013a0	0f 8d 1b 06 00
	00		 jge	 $LN15@AddPolylin

; 882  :             {
; 883  :                 const int i2 = (i1 + 1) == points_count ? 0 : (i1 + 1); // i2 is the second point of the line segment

  013a6	8b 85 b4 04 00
	00		 mov	 eax, DWORD PTR i1$40[rbp]
  013ac	ff c0		 inc	 eax
  013ae	3b 85 50 0f 00
	00		 cmp	 eax, DWORD PTR points_count$[rbp]
  013b4	75 0c		 jne	 SHORT $LN72@AddPolylin
  013b6	c7 85 04 0f 00
	00 00 00 00 00	 mov	 DWORD PTR tv802[rbp], 0
  013c0	eb 0e		 jmp	 SHORT $LN73@AddPolylin
$LN72@AddPolylin:
  013c2	8b 85 b4 04 00
	00		 mov	 eax, DWORD PTR i1$40[rbp]
  013c8	ff c0		 inc	 eax
  013ca	89 85 04 0f 00
	00		 mov	 DWORD PTR tv802[rbp], eax
$LN73@AddPolylin:
  013d0	8b 85 04 0f 00
	00		 mov	 eax, DWORD PTR tv802[rbp]
  013d6	89 85 d4 04 00
	00		 mov	 DWORD PTR i2$41[rbp], eax

; 884  :                 const unsigned int idx2 = (i1 + 1) == points_count ? _VtxCurrentIdx : (idx1 + 4); // Vertex index for end of segment

  013dc	8b 85 b4 04 00
	00		 mov	 eax, DWORD PTR i1$40[rbp]
  013e2	ff c0		 inc	 eax
  013e4	3b 85 50 0f 00
	00		 cmp	 eax, DWORD PTR points_count$[rbp]
  013ea	75 12		 jne	 SHORT $LN74@AddPolylin
  013ec	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  013f3	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  013f6	89 85 04 0f 00
	00		 mov	 DWORD PTR tv807[rbp], eax
  013fc	eb 0f		 jmp	 SHORT $LN75@AddPolylin
$LN74@AddPolylin:
  013fe	8b 85 94 04 00
	00		 mov	 eax, DWORD PTR idx1$39[rbp]
  01404	83 c0 04	 add	 eax, 4
  01407	89 85 04 0f 00
	00		 mov	 DWORD PTR tv807[rbp], eax
$LN75@AddPolylin:
  0140d	8b 85 04 0f 00
	00		 mov	 eax, DWORD PTR tv807[rbp]
  01413	89 85 f4 04 00
	00		 mov	 DWORD PTR idx2$42[rbp], eax

; 885  : 
; 886  :                 // Average normals
; 887  :                 float dm_x = (temp_normals[i1].x + temp_normals[i2].x) * 0.5f;

  01419	48 63 85 b4 04
	00 00		 movsxd	 rax, DWORD PTR i1$40[rbp]
  01420	48 63 8d d4 04
	00 00		 movsxd	 rcx, DWORD PTR i2$41[rbp]
  01427	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR temp_normals$14[rbp]
  0142e	48 8b bd 68 01
	00 00		 mov	 rdi, QWORD PTR temp_normals$14[rbp]
  01435	f3 0f 10 04 c2	 movss	 xmm0, DWORD PTR [rdx+rax*8]
  0143a	f3 0f 58 04 cf	 addss	 xmm0, DWORD PTR [rdi+rcx*8]
  0143f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  01447	f3 0f 11 85 14
	05 00 00	 movss	 DWORD PTR dm_x$43[rbp], xmm0

; 888  :                 float dm_y = (temp_normals[i1].y + temp_normals[i2].y) * 0.5f;

  0144f	48 63 85 b4 04
	00 00		 movsxd	 rax, DWORD PTR i1$40[rbp]
  01456	48 63 8d d4 04
	00 00		 movsxd	 rcx, DWORD PTR i2$41[rbp]
  0145d	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR temp_normals$14[rbp]
  01464	48 8b bd 68 01
	00 00		 mov	 rdi, QWORD PTR temp_normals$14[rbp]
  0146b	f3 0f 10 44 c2
	04		 movss	 xmm0, DWORD PTR [rdx+rax*8+4]
  01471	f3 0f 58 44 cf
	04		 addss	 xmm0, DWORD PTR [rdi+rcx*8+4]
  01477	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0147f	f3 0f 11 85 34
	05 00 00	 movss	 DWORD PTR dm_y$44[rbp], xmm0

; 889  :                 IM_FIXNORMAL2F(dm_x, dm_y);

  01487	f3 0f 10 85 14
	05 00 00	 movss	 xmm0, DWORD PTR dm_x$43[rbp]
  0148f	f3 0f 59 85 14
	05 00 00	 mulss	 xmm0, DWORD PTR dm_x$43[rbp]
  01497	f3 0f 10 8d 34
	05 00 00	 movss	 xmm1, DWORD PTR dm_y$44[rbp]
  0149f	f3 0f 59 8d 34
	05 00 00	 mulss	 xmm1, DWORD PTR dm_y$44[rbp]
  014a7	f3 0f 58 c1	 addss	 xmm0, xmm1
  014ab	f3 0f 11 85 54
	05 00 00	 movss	 DWORD PTR d2$45[rbp], xmm0
  014b3	f3 0f 10 85 54
	05 00 00	 movss	 xmm0, DWORD PTR d2$45[rbp]
  014bb	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@358637bd
  014c2	76 69		 jbe	 SHORT $LN40@AddPolylin
  014c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  014cc	f3 0f 5e 85 54
	05 00 00	 divss	 xmm0, DWORD PTR d2$45[rbp]
  014d4	f3 0f 11 85 74
	05 00 00	 movss	 DWORD PTR inv_len2$46[rbp], xmm0
  014dc	f3 0f 10 85 74
	05 00 00	 movss	 xmm0, DWORD PTR inv_len2$46[rbp]
  014e4	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@42c80000
  014eb	76 10		 jbe	 SHORT $LN41@AddPolylin
  014ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  014f5	f3 0f 11 85 74
	05 00 00	 movss	 DWORD PTR inv_len2$46[rbp], xmm0
$LN41@AddPolylin:
  014fd	f3 0f 10 85 14
	05 00 00	 movss	 xmm0, DWORD PTR dm_x$43[rbp]
  01505	f3 0f 59 85 74
	05 00 00	 mulss	 xmm0, DWORD PTR inv_len2$46[rbp]
  0150d	f3 0f 11 85 14
	05 00 00	 movss	 DWORD PTR dm_x$43[rbp], xmm0
  01515	f3 0f 10 85 34
	05 00 00	 movss	 xmm0, DWORD PTR dm_y$44[rbp]
  0151d	f3 0f 59 85 74
	05 00 00	 mulss	 xmm0, DWORD PTR inv_len2$46[rbp]
  01525	f3 0f 11 85 34
	05 00 00	 movss	 DWORD PTR dm_y$44[rbp], xmm0
$LN40@AddPolylin:

; 890  :                 float dm_out_x = dm_x * (half_inner_thickness + AA_SIZE);

  0152d	f3 0f 10 85 54
	04 00 00	 movss	 xmm0, DWORD PTR half_inner_thickness$37[rbp]
  01535	f3 0f 58 85 84
	00 00 00	 addss	 xmm0, DWORD PTR AA_SIZE$7[rbp]
  0153d	f3 0f 10 8d 14
	05 00 00	 movss	 xmm1, DWORD PTR dm_x$43[rbp]
  01545	f3 0f 59 c8	 mulss	 xmm1, xmm0
  01549	0f 28 c1	 movaps	 xmm0, xmm1
  0154c	f3 0f 11 85 94
	05 00 00	 movss	 DWORD PTR dm_out_x$47[rbp], xmm0

; 891  :                 float dm_out_y = dm_y * (half_inner_thickness + AA_SIZE);

  01554	f3 0f 10 85 54
	04 00 00	 movss	 xmm0, DWORD PTR half_inner_thickness$37[rbp]
  0155c	f3 0f 58 85 84
	00 00 00	 addss	 xmm0, DWORD PTR AA_SIZE$7[rbp]
  01564	f3 0f 10 8d 34
	05 00 00	 movss	 xmm1, DWORD PTR dm_y$44[rbp]
  0156c	f3 0f 59 c8	 mulss	 xmm1, xmm0
  01570	0f 28 c1	 movaps	 xmm0, xmm1
  01573	f3 0f 11 85 b4
	05 00 00	 movss	 DWORD PTR dm_out_y$48[rbp], xmm0

; 892  :                 float dm_in_x = dm_x * half_inner_thickness;

  0157b	f3 0f 10 85 14
	05 00 00	 movss	 xmm0, DWORD PTR dm_x$43[rbp]
  01583	f3 0f 59 85 54
	04 00 00	 mulss	 xmm0, DWORD PTR half_inner_thickness$37[rbp]
  0158b	f3 0f 11 85 d4
	05 00 00	 movss	 DWORD PTR dm_in_x$49[rbp], xmm0

; 893  :                 float dm_in_y = dm_y * half_inner_thickness;

  01593	f3 0f 10 85 34
	05 00 00	 movss	 xmm0, DWORD PTR dm_y$44[rbp]
  0159b	f3 0f 59 85 54
	04 00 00	 mulss	 xmm0, DWORD PTR half_inner_thickness$37[rbp]
  015a3	f3 0f 11 85 f4
	05 00 00	 movss	 DWORD PTR dm_in_y$50[rbp], xmm0

; 894  : 
; 895  :                 // Add temporary vertices
; 896  :                 ImVec2* out_vtx = &temp_points[i2 * 4];

  015ab	8b 85 d4 04 00
	00		 mov	 eax, DWORD PTR i2$41[rbp]
  015b1	c1 e0 02	 shl	 eax, 2
  015b4	48 98		 cdqe
  015b6	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR temp_points$15[rbp]
  015bd	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  015c1	48 89 85 18 06
	00 00		 mov	 QWORD PTR out_vtx$51[rbp], rax

; 897  :                 out_vtx[0].x = points[i2].x + dm_out_x;

  015c8	48 63 85 d4 04
	00 00		 movsxd	 rax, DWORD PTR i2$41[rbp]
  015cf	48 8b 8d 48 0f
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  015d6	f3 0f 10 04 c1	 movss	 xmm0, DWORD PTR [rcx+rax*8]
  015db	f3 0f 58 85 94
	05 00 00	 addss	 xmm0, DWORD PTR dm_out_x$47[rbp]
  015e3	b8 08 00 00 00	 mov	 eax, 8
  015e8	48 6b c0 00	 imul	 rax, rax, 0
  015ec	48 8b 8d 18 06
	00 00		 mov	 rcx, QWORD PTR out_vtx$51[rbp]
  015f3	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0

; 898  :                 out_vtx[0].y = points[i2].y + dm_out_y;

  015f8	48 63 85 d4 04
	00 00		 movsxd	 rax, DWORD PTR i2$41[rbp]
  015ff	48 8b 8d 48 0f
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  01606	f3 0f 10 44 c1
	04		 movss	 xmm0, DWORD PTR [rcx+rax*8+4]
  0160c	f3 0f 58 85 b4
	05 00 00	 addss	 xmm0, DWORD PTR dm_out_y$48[rbp]
  01614	b8 08 00 00 00	 mov	 eax, 8
  01619	48 6b c0 00	 imul	 rax, rax, 0
  0161d	48 8b 8d 18 06
	00 00		 mov	 rcx, QWORD PTR out_vtx$51[rbp]
  01624	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0

; 899  :                 out_vtx[1].x = points[i2].x + dm_in_x;

  0162a	48 63 85 d4 04
	00 00		 movsxd	 rax, DWORD PTR i2$41[rbp]
  01631	48 8b 8d 48 0f
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  01638	f3 0f 10 04 c1	 movss	 xmm0, DWORD PTR [rcx+rax*8]
  0163d	f3 0f 58 85 d4
	05 00 00	 addss	 xmm0, DWORD PTR dm_in_x$49[rbp]
  01645	b8 08 00 00 00	 mov	 eax, 8
  0164a	48 6b c0 01	 imul	 rax, rax, 1
  0164e	48 8b 8d 18 06
	00 00		 mov	 rcx, QWORD PTR out_vtx$51[rbp]
  01655	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0

; 900  :                 out_vtx[1].y = points[i2].y + dm_in_y;

  0165a	48 63 85 d4 04
	00 00		 movsxd	 rax, DWORD PTR i2$41[rbp]
  01661	48 8b 8d 48 0f
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  01668	f3 0f 10 44 c1
	04		 movss	 xmm0, DWORD PTR [rcx+rax*8+4]
  0166e	f3 0f 58 85 f4
	05 00 00	 addss	 xmm0, DWORD PTR dm_in_y$50[rbp]
  01676	b8 08 00 00 00	 mov	 eax, 8
  0167b	48 6b c0 01	 imul	 rax, rax, 1
  0167f	48 8b 8d 18 06
	00 00		 mov	 rcx, QWORD PTR out_vtx$51[rbp]
  01686	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0

; 901  :                 out_vtx[2].x = points[i2].x - dm_in_x;

  0168c	48 63 85 d4 04
	00 00		 movsxd	 rax, DWORD PTR i2$41[rbp]
  01693	48 8b 8d 48 0f
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  0169a	f3 0f 10 04 c1	 movss	 xmm0, DWORD PTR [rcx+rax*8]
  0169f	f3 0f 5c 85 d4
	05 00 00	 subss	 xmm0, DWORD PTR dm_in_x$49[rbp]
  016a7	b8 08 00 00 00	 mov	 eax, 8
  016ac	48 6b c0 02	 imul	 rax, rax, 2
  016b0	48 8b 8d 18 06
	00 00		 mov	 rcx, QWORD PTR out_vtx$51[rbp]
  016b7	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0

; 902  :                 out_vtx[2].y = points[i2].y - dm_in_y;

  016bc	48 63 85 d4 04
	00 00		 movsxd	 rax, DWORD PTR i2$41[rbp]
  016c3	48 8b 8d 48 0f
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  016ca	f3 0f 10 44 c1
	04		 movss	 xmm0, DWORD PTR [rcx+rax*8+4]
  016d0	f3 0f 5c 85 f4
	05 00 00	 subss	 xmm0, DWORD PTR dm_in_y$50[rbp]
  016d8	b8 08 00 00 00	 mov	 eax, 8
  016dd	48 6b c0 02	 imul	 rax, rax, 2
  016e1	48 8b 8d 18 06
	00 00		 mov	 rcx, QWORD PTR out_vtx$51[rbp]
  016e8	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0

; 903  :                 out_vtx[3].x = points[i2].x - dm_out_x;

  016ee	48 63 85 d4 04
	00 00		 movsxd	 rax, DWORD PTR i2$41[rbp]
  016f5	48 8b 8d 48 0f
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  016fc	f3 0f 10 04 c1	 movss	 xmm0, DWORD PTR [rcx+rax*8]
  01701	f3 0f 5c 85 94
	05 00 00	 subss	 xmm0, DWORD PTR dm_out_x$47[rbp]
  01709	b8 08 00 00 00	 mov	 eax, 8
  0170e	48 6b c0 03	 imul	 rax, rax, 3
  01712	48 8b 8d 18 06
	00 00		 mov	 rcx, QWORD PTR out_vtx$51[rbp]
  01719	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0

; 904  :                 out_vtx[3].y = points[i2].y - dm_out_y;

  0171e	48 63 85 d4 04
	00 00		 movsxd	 rax, DWORD PTR i2$41[rbp]
  01725	48 8b 8d 48 0f
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  0172c	f3 0f 10 44 c1
	04		 movss	 xmm0, DWORD PTR [rcx+rax*8+4]
  01732	f3 0f 5c 85 b4
	05 00 00	 subss	 xmm0, DWORD PTR dm_out_y$48[rbp]
  0173a	b8 08 00 00 00	 mov	 eax, 8
  0173f	48 6b c0 03	 imul	 rax, rax, 3
  01743	48 8b 8d 18 06
	00 00		 mov	 rcx, QWORD PTR out_vtx$51[rbp]
  0174a	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0

; 905  : 
; 906  :                 // Add indexes
; 907  :                 _IdxWritePtr[0]  = (ImDrawIdx)(idx2 + 1); _IdxWritePtr[1]  = (ImDrawIdx)(idx1 + 1); _IdxWritePtr[2]  = (ImDrawIdx)(idx1 + 2);

  01750	8b 85 f4 04 00
	00		 mov	 eax, DWORD PTR idx2$42[rbp]
  01756	ff c0		 inc	 eax
  01758	b9 02 00 00 00	 mov	 ecx, 2
  0175d	48 6b c9 00	 imul	 rcx, rcx, 0
  01761	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  01768	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  0176c	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  01770	8b 85 94 04 00
	00		 mov	 eax, DWORD PTR idx1$39[rbp]
  01776	ff c0		 inc	 eax
  01778	b9 02 00 00 00	 mov	 ecx, 2
  0177d	48 6b c9 01	 imul	 rcx, rcx, 1
  01781	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  01788	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  0178c	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  01790	8b 85 94 04 00
	00		 mov	 eax, DWORD PTR idx1$39[rbp]
  01796	83 c0 02	 add	 eax, 2
  01799	b9 02 00 00 00	 mov	 ecx, 2
  0179e	48 6b c9 02	 imul	 rcx, rcx, 2
  017a2	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  017a9	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  017ad	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 908  :                 _IdxWritePtr[3]  = (ImDrawIdx)(idx1 + 2); _IdxWritePtr[4]  = (ImDrawIdx)(idx2 + 2); _IdxWritePtr[5]  = (ImDrawIdx)(idx2 + 1);

  017b1	8b 85 94 04 00
	00		 mov	 eax, DWORD PTR idx1$39[rbp]
  017b7	83 c0 02	 add	 eax, 2
  017ba	b9 02 00 00 00	 mov	 ecx, 2
  017bf	48 6b c9 03	 imul	 rcx, rcx, 3
  017c3	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  017ca	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  017ce	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  017d2	8b 85 f4 04 00
	00		 mov	 eax, DWORD PTR idx2$42[rbp]
  017d8	83 c0 02	 add	 eax, 2
  017db	b9 02 00 00 00	 mov	 ecx, 2
  017e0	48 6b c9 04	 imul	 rcx, rcx, 4
  017e4	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  017eb	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  017ef	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  017f3	8b 85 f4 04 00
	00		 mov	 eax, DWORD PTR idx2$42[rbp]
  017f9	ff c0		 inc	 eax
  017fb	b9 02 00 00 00	 mov	 ecx, 2
  01800	48 6b c9 05	 imul	 rcx, rcx, 5
  01804	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0180b	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  0180f	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 909  :                 _IdxWritePtr[6]  = (ImDrawIdx)(idx2 + 1); _IdxWritePtr[7]  = (ImDrawIdx)(idx1 + 1); _IdxWritePtr[8]  = (ImDrawIdx)(idx1 + 0);

  01813	8b 85 f4 04 00
	00		 mov	 eax, DWORD PTR idx2$42[rbp]
  01819	ff c0		 inc	 eax
  0181b	b9 02 00 00 00	 mov	 ecx, 2
  01820	48 6b c9 06	 imul	 rcx, rcx, 6
  01824	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0182b	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  0182f	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  01833	8b 85 94 04 00
	00		 mov	 eax, DWORD PTR idx1$39[rbp]
  01839	ff c0		 inc	 eax
  0183b	b9 02 00 00 00	 mov	 ecx, 2
  01840	48 6b c9 07	 imul	 rcx, rcx, 7
  01844	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0184b	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  0184f	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  01853	b8 02 00 00 00	 mov	 eax, 2
  01858	48 6b c0 08	 imul	 rax, rax, 8
  0185c	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01863	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  01867	0f b7 95 94 04
	00 00		 movzx	 edx, WORD PTR idx1$39[rbp]
  0186e	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx

; 910  :                 _IdxWritePtr[9]  = (ImDrawIdx)(idx1 + 0); _IdxWritePtr[10] = (ImDrawIdx)(idx2 + 0); _IdxWritePtr[11] = (ImDrawIdx)(idx2 + 1);

  01872	b8 02 00 00 00	 mov	 eax, 2
  01877	48 6b c0 09	 imul	 rax, rax, 9
  0187b	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01882	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  01886	0f b7 95 94 04
	00 00		 movzx	 edx, WORD PTR idx1$39[rbp]
  0188d	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx
  01891	b8 02 00 00 00	 mov	 eax, 2
  01896	48 6b c0 0a	 imul	 rax, rax, 10
  0189a	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  018a1	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  018a5	0f b7 95 f4 04
	00 00		 movzx	 edx, WORD PTR idx2$42[rbp]
  018ac	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx
  018b0	8b 85 f4 04 00
	00		 mov	 eax, DWORD PTR idx2$42[rbp]
  018b6	ff c0		 inc	 eax
  018b8	b9 02 00 00 00	 mov	 ecx, 2
  018bd	48 6b c9 0b	 imul	 rcx, rcx, 11
  018c1	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  018c8	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  018cc	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 911  :                 _IdxWritePtr[12] = (ImDrawIdx)(idx2 + 2); _IdxWritePtr[13] = (ImDrawIdx)(idx1 + 2); _IdxWritePtr[14] = (ImDrawIdx)(idx1 + 3);

  018d0	8b 85 f4 04 00
	00		 mov	 eax, DWORD PTR idx2$42[rbp]
  018d6	83 c0 02	 add	 eax, 2
  018d9	b9 02 00 00 00	 mov	 ecx, 2
  018de	48 6b c9 0c	 imul	 rcx, rcx, 12
  018e2	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  018e9	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  018ed	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  018f1	8b 85 94 04 00
	00		 mov	 eax, DWORD PTR idx1$39[rbp]
  018f7	83 c0 02	 add	 eax, 2
  018fa	b9 02 00 00 00	 mov	 ecx, 2
  018ff	48 6b c9 0d	 imul	 rcx, rcx, 13
  01903	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0190a	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  0190e	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  01912	8b 85 94 04 00
	00		 mov	 eax, DWORD PTR idx1$39[rbp]
  01918	83 c0 03	 add	 eax, 3
  0191b	b9 02 00 00 00	 mov	 ecx, 2
  01920	48 6b c9 0e	 imul	 rcx, rcx, 14
  01924	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0192b	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  0192f	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 912  :                 _IdxWritePtr[15] = (ImDrawIdx)(idx1 + 3); _IdxWritePtr[16] = (ImDrawIdx)(idx2 + 3); _IdxWritePtr[17] = (ImDrawIdx)(idx2 + 2);

  01933	8b 85 94 04 00
	00		 mov	 eax, DWORD PTR idx1$39[rbp]
  01939	83 c0 03	 add	 eax, 3
  0193c	b9 02 00 00 00	 mov	 ecx, 2
  01941	48 6b c9 0f	 imul	 rcx, rcx, 15
  01945	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0194c	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  01950	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  01954	8b 85 f4 04 00
	00		 mov	 eax, DWORD PTR idx2$42[rbp]
  0195a	83 c0 03	 add	 eax, 3
  0195d	b9 02 00 00 00	 mov	 ecx, 2
  01962	48 6b c9 10	 imul	 rcx, rcx, 16
  01966	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0196d	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  01971	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  01975	8b 85 f4 04 00
	00		 mov	 eax, DWORD PTR idx2$42[rbp]
  0197b	83 c0 02	 add	 eax, 2
  0197e	b9 02 00 00 00	 mov	 ecx, 2
  01983	48 6b c9 11	 imul	 rcx, rcx, 17
  01987	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0198e	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  01992	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 913  :                 _IdxWritePtr += 18;

  01996	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0199d	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  019a1	48 83 c0 24	 add	 rax, 36			; 00000024H
  019a5	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  019ac	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 914  : 
; 915  :                 idx1 = idx2;

  019b0	8b 85 f4 04 00
	00		 mov	 eax, DWORD PTR idx2$42[rbp]
  019b6	89 85 94 04 00
	00		 mov	 DWORD PTR idx1$39[rbp], eax

; 916  :             }

  019bc	e9 c8 f9 ff ff	 jmp	 $LN14@AddPolylin
$LN15@AddPolylin:

; 917  : 
; 918  :             // Add vertices
; 919  :             for (int i = 0; i < points_count; i++)

  019c1	c7 85 34 06 00
	00 00 00 00 00	 mov	 DWORD PTR i$52[rbp], 0
  019cb	eb 0e		 jmp	 SHORT $LN19@AddPolylin
$LN17@AddPolylin:
  019cd	8b 85 34 06 00
	00		 mov	 eax, DWORD PTR i$52[rbp]
  019d3	ff c0		 inc	 eax
  019d5	89 85 34 06 00
	00		 mov	 DWORD PTR i$52[rbp], eax
$LN19@AddPolylin:
  019db	8b 85 50 0f 00
	00		 mov	 eax, DWORD PTR points_count$[rbp]
  019e1	39 85 34 06 00
	00		 cmp	 DWORD PTR i$52[rbp], eax
  019e7	0f 8d cf 01 00
	00		 jge	 $LN18@AddPolylin

; 920  :             {
; 921  :                 _VtxWritePtr[0].pos = temp_points[i * 4 + 0]; _VtxWritePtr[0].uv = opaque_uv; _VtxWritePtr[0].col = col_trans;

  019ed	8b 85 34 06 00
	00		 mov	 eax, DWORD PTR i$52[rbp]
  019f3	c1 e0 02	 shl	 eax, 2
  019f6	48 98		 cdqe
  019f8	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR temp_points$15[rbp]
  019ff	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  01a03	b9 14 00 00 00	 mov	 ecx, 20
  01a08	48 6b c9 00	 imul	 rcx, rcx, 0
  01a0c	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  01a13	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  01a17	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  01a1b	b8 14 00 00 00	 mov	 eax, 20
  01a20	48 6b c0 00	 imul	 rax, rax, 0
  01a24	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01a2b	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01a2f	48 8b 55 28	 mov	 rdx, QWORD PTR opaque_uv$[rbp]
  01a33	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  01a38	b8 14 00 00 00	 mov	 eax, 20
  01a3d	48 6b c0 00	 imul	 rax, rax, 0
  01a41	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01a48	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01a4c	8b 95 a4 00 00
	00		 mov	 edx, DWORD PTR col_trans$8[rbp]
  01a52	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 922  :                 _VtxWritePtr[1].pos = temp_points[i * 4 + 1]; _VtxWritePtr[1].uv = opaque_uv; _VtxWritePtr[1].col = col;

  01a56	8b 85 34 06 00
	00		 mov	 eax, DWORD PTR i$52[rbp]
  01a5c	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [rax*4+1]
  01a63	48 98		 cdqe
  01a65	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR temp_points$15[rbp]
  01a6c	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  01a70	b9 14 00 00 00	 mov	 ecx, 20
  01a75	48 6b c9 01	 imul	 rcx, rcx, 1
  01a79	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  01a80	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  01a84	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  01a88	b8 14 00 00 00	 mov	 eax, 20
  01a8d	48 6b c0 01	 imul	 rax, rax, 1
  01a91	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01a98	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01a9c	48 8b 55 28	 mov	 rdx, QWORD PTR opaque_uv$[rbp]
  01aa0	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  01aa5	b8 14 00 00 00	 mov	 eax, 20
  01aaa	48 6b c0 01	 imul	 rax, rax, 1
  01aae	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01ab5	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01ab9	8b 95 58 0f 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  01abf	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 923  :                 _VtxWritePtr[2].pos = temp_points[i * 4 + 2]; _VtxWritePtr[2].uv = opaque_uv; _VtxWritePtr[2].col = col;

  01ac3	8b 85 34 06 00
	00		 mov	 eax, DWORD PTR i$52[rbp]
  01ac9	8d 04 85 02 00
	00 00		 lea	 eax, DWORD PTR [rax*4+2]
  01ad0	48 98		 cdqe
  01ad2	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR temp_points$15[rbp]
  01ad9	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  01add	b9 14 00 00 00	 mov	 ecx, 20
  01ae2	48 6b c9 02	 imul	 rcx, rcx, 2
  01ae6	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  01aed	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  01af1	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  01af5	b8 14 00 00 00	 mov	 eax, 20
  01afa	48 6b c0 02	 imul	 rax, rax, 2
  01afe	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01b05	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01b09	48 8b 55 28	 mov	 rdx, QWORD PTR opaque_uv$[rbp]
  01b0d	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  01b12	b8 14 00 00 00	 mov	 eax, 20
  01b17	48 6b c0 02	 imul	 rax, rax, 2
  01b1b	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01b22	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01b26	8b 95 58 0f 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  01b2c	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 924  :                 _VtxWritePtr[3].pos = temp_points[i * 4 + 3]; _VtxWritePtr[3].uv = opaque_uv; _VtxWritePtr[3].col = col_trans;

  01b30	8b 85 34 06 00
	00		 mov	 eax, DWORD PTR i$52[rbp]
  01b36	8d 04 85 03 00
	00 00		 lea	 eax, DWORD PTR [rax*4+3]
  01b3d	48 98		 cdqe
  01b3f	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR temp_points$15[rbp]
  01b46	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  01b4a	b9 14 00 00 00	 mov	 ecx, 20
  01b4f	48 6b c9 03	 imul	 rcx, rcx, 3
  01b53	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  01b5a	48 8b 52 48	 mov	 rdx, QWORD PTR [rdx+72]
  01b5e	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  01b62	b8 14 00 00 00	 mov	 eax, 20
  01b67	48 6b c0 03	 imul	 rax, rax, 3
  01b6b	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01b72	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01b76	48 8b 55 28	 mov	 rdx, QWORD PTR opaque_uv$[rbp]
  01b7a	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  01b7f	b8 14 00 00 00	 mov	 eax, 20
  01b84	48 6b c0 03	 imul	 rax, rax, 3
  01b88	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01b8f	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01b93	8b 95 a4 00 00
	00		 mov	 edx, DWORD PTR col_trans$8[rbp]
  01b99	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 925  :                 _VtxWritePtr += 4;

  01b9d	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01ba4	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  01ba8	48 83 c0 50	 add	 rax, 80			; 00000050H
  01bac	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01bb3	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 926  :             }

  01bb7	e9 11 fe ff ff	 jmp	 $LN17@AddPolylin
$LN18@AddPolylin:
$LN30@AddPolylin:

; 927  :         }
; 928  :         _VtxCurrentIdx += (ImDrawIdx)vtx_count;

  01bbc	0f b7 85 44 01
	00 00		 movzx	 eax, WORD PTR vtx_count$13[rbp]
  01bc3	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01bca	03 41 34	 add	 eax, DWORD PTR [rcx+52]
  01bcd	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01bd4	89 41 34	 mov	 DWORD PTR [rcx+52], eax

; 929  :     }
; 930  :     else

  01bd7	e9 4b 05 00 00	 jmp	 $LN26@AddPolylin
$LN25@AddPolylin:

; 931  :     {
; 932  :         // [PATH 4] Non texture-based, Non anti-aliased lines
; 933  :         const int idx_count = count * 6;

  01bdc	6b 45 44 06	 imul	 eax, DWORD PTR count$[rbp], 6
  01be0	89 85 54 06 00
	00		 mov	 DWORD PTR idx_count$53[rbp], eax

; 934  :         const int vtx_count = count * 4;    // FIXME-OPT: Not sharing edges

  01be6	8b 45 44	 mov	 eax, DWORD PTR count$[rbp]
  01be9	c1 e0 02	 shl	 eax, 2
  01bec	89 85 74 06 00
	00		 mov	 DWORD PTR vtx_count$54[rbp], eax

; 935  :         PrimReserve(idx_count, vtx_count);

  01bf2	44 8b 85 74 06
	00 00		 mov	 r8d, DWORD PTR vtx_count$54[rbp]
  01bf9	8b 95 54 06 00
	00		 mov	 edx, DWORD PTR idx_count$53[rbp]
  01bff	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01c06	e8 00 00 00 00	 call	 ?PrimReserve@ImDrawList@@QEAAXHH@Z ; ImDrawList::PrimReserve

; 936  : 
; 937  :         for (int i1 = 0; i1 < count; i1++)

  01c0b	c7 85 94 06 00
	00 00 00 00 00	 mov	 DWORD PTR i1$55[rbp], 0
  01c15	eb 0e		 jmp	 SHORT $LN22@AddPolylin
$LN20@AddPolylin:
  01c17	8b 85 94 06 00
	00		 mov	 eax, DWORD PTR i1$55[rbp]
  01c1d	ff c0		 inc	 eax
  01c1f	89 85 94 06 00
	00		 mov	 DWORD PTR i1$55[rbp], eax
$LN22@AddPolylin:
  01c25	8b 45 44	 mov	 eax, DWORD PTR count$[rbp]
  01c28	39 85 94 06 00
	00		 cmp	 DWORD PTR i1$55[rbp], eax
  01c2e	0f 8d f3 04 00
	00		 jge	 $LN21@AddPolylin

; 938  :         {
; 939  :             const int i2 = (i1 + 1) == points_count ? 0 : i1 + 1;

  01c34	8b 85 94 06 00
	00		 mov	 eax, DWORD PTR i1$55[rbp]
  01c3a	ff c0		 inc	 eax
  01c3c	3b 85 50 0f 00
	00		 cmp	 eax, DWORD PTR points_count$[rbp]
  01c42	75 0c		 jne	 SHORT $LN76@AddPolylin
  01c44	c7 85 04 0f 00
	00 00 00 00 00	 mov	 DWORD PTR tv1120[rbp], 0
  01c4e	eb 0e		 jmp	 SHORT $LN77@AddPolylin
$LN76@AddPolylin:
  01c50	8b 85 94 06 00
	00		 mov	 eax, DWORD PTR i1$55[rbp]
  01c56	ff c0		 inc	 eax
  01c58	89 85 04 0f 00
	00		 mov	 DWORD PTR tv1120[rbp], eax
$LN77@AddPolylin:
  01c5e	8b 85 04 0f 00
	00		 mov	 eax, DWORD PTR tv1120[rbp]
  01c64	89 85 b4 06 00
	00		 mov	 DWORD PTR i2$56[rbp], eax

; 940  :             const ImVec2& p1 = points[i1];

  01c6a	48 63 85 94 06
	00 00		 movsxd	 rax, DWORD PTR i1$55[rbp]
  01c71	48 8b 8d 48 0f
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  01c78	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01c7c	48 89 85 d8 06
	00 00		 mov	 QWORD PTR p1$57[rbp], rax

; 941  :             const ImVec2& p2 = points[i2];

  01c83	48 63 85 b4 06
	00 00		 movsxd	 rax, DWORD PTR i2$56[rbp]
  01c8a	48 8b 8d 48 0f
	00 00		 mov	 rcx, QWORD PTR points$[rbp]
  01c91	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01c95	48 89 85 f8 06
	00 00		 mov	 QWORD PTR p2$58[rbp], rax

; 942  : 
; 943  :             float dx = p2.x - p1.x;

  01c9c	48 8b 85 f8 06
	00 00		 mov	 rax, QWORD PTR p2$58[rbp]
  01ca3	48 8b 8d d8 06
	00 00		 mov	 rcx, QWORD PTR p1$57[rbp]
  01caa	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  01cae	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [rcx]
  01cb2	f3 0f 11 85 14
	07 00 00	 movss	 DWORD PTR dx$59[rbp], xmm0

; 944  :             float dy = p2.y - p1.y;

  01cba	48 8b 85 f8 06
	00 00		 mov	 rax, QWORD PTR p2$58[rbp]
  01cc1	48 8b 8d d8 06
	00 00		 mov	 rcx, QWORD PTR p1$57[rbp]
  01cc8	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  01ccd	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [rcx+4]
  01cd2	f3 0f 11 85 34
	07 00 00	 movss	 DWORD PTR dy$60[rbp], xmm0

; 945  :             IM_NORMALIZE2F_OVER_ZERO(dx, dy);

  01cda	f3 0f 10 85 14
	07 00 00	 movss	 xmm0, DWORD PTR dx$59[rbp]
  01ce2	f3 0f 59 85 14
	07 00 00	 mulss	 xmm0, DWORD PTR dx$59[rbp]
  01cea	f3 0f 10 8d 34
	07 00 00	 movss	 xmm1, DWORD PTR dy$60[rbp]
  01cf2	f3 0f 59 8d 34
	07 00 00	 mulss	 xmm1, DWORD PTR dy$60[rbp]
  01cfa	f3 0f 58 c1	 addss	 xmm0, xmm1
  01cfe	f3 0f 11 85 54
	07 00 00	 movss	 DWORD PTR d2$61[rbp], xmm0
  01d06	f3 0f 10 85 54
	07 00 00	 movss	 xmm0, DWORD PTR d2$61[rbp]
  01d0e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  01d15	76 45		 jbe	 SHORT $LN42@AddPolylin
  01d17	f3 0f 10 85 54
	07 00 00	 movss	 xmm0, DWORD PTR d2$61[rbp]
  01d1f	e8 00 00 00 00	 call	 ?ImRsqrt@@YAMM@Z	; ImRsqrt
  01d24	f3 0f 11 85 74
	07 00 00	 movss	 DWORD PTR inv_len$62[rbp], xmm0
  01d2c	f3 0f 10 85 14
	07 00 00	 movss	 xmm0, DWORD PTR dx$59[rbp]
  01d34	f3 0f 59 85 74
	07 00 00	 mulss	 xmm0, DWORD PTR inv_len$62[rbp]
  01d3c	f3 0f 11 85 14
	07 00 00	 movss	 DWORD PTR dx$59[rbp], xmm0
  01d44	f3 0f 10 85 34
	07 00 00	 movss	 xmm0, DWORD PTR dy$60[rbp]
  01d4c	f3 0f 59 85 74
	07 00 00	 mulss	 xmm0, DWORD PTR inv_len$62[rbp]
  01d54	f3 0f 11 85 34
	07 00 00	 movss	 DWORD PTR dy$60[rbp], xmm0
$LN42@AddPolylin:

; 946  :             dx *= (thickness * 0.5f);

  01d5c	f3 0f 10 85 68
	0f 00 00	 movss	 xmm0, DWORD PTR thickness$[rbp]
  01d64	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  01d6c	f3 0f 10 8d 14
	07 00 00	 movss	 xmm1, DWORD PTR dx$59[rbp]
  01d74	f3 0f 59 c8	 mulss	 xmm1, xmm0
  01d78	0f 28 c1	 movaps	 xmm0, xmm1
  01d7b	f3 0f 11 85 14
	07 00 00	 movss	 DWORD PTR dx$59[rbp], xmm0

; 947  :             dy *= (thickness * 0.5f);

  01d83	f3 0f 10 85 68
	0f 00 00	 movss	 xmm0, DWORD PTR thickness$[rbp]
  01d8b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  01d93	f3 0f 10 8d 34
	07 00 00	 movss	 xmm1, DWORD PTR dy$60[rbp]
  01d9b	f3 0f 59 c8	 mulss	 xmm1, xmm0
  01d9f	0f 28 c1	 movaps	 xmm0, xmm1
  01da2	f3 0f 11 85 34
	07 00 00	 movss	 DWORD PTR dy$60[rbp], xmm0

; 948  : 
; 949  :             _VtxWritePtr[0].pos.x = p1.x + dy; _VtxWritePtr[0].pos.y = p1.y - dx; _VtxWritePtr[0].uv = opaque_uv; _VtxWritePtr[0].col = col;

  01daa	48 8b 85 d8 06
	00 00		 mov	 rax, QWORD PTR p1$57[rbp]
  01db1	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  01db5	f3 0f 58 85 34
	07 00 00	 addss	 xmm0, DWORD PTR dy$60[rbp]
  01dbd	b8 14 00 00 00	 mov	 eax, 20
  01dc2	48 6b c0 00	 imul	 rax, rax, 0
  01dc6	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01dcd	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01dd1	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0
  01dd6	48 8b 85 d8 06
	00 00		 mov	 rax, QWORD PTR p1$57[rbp]
  01ddd	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  01de2	f3 0f 5c 85 14
	07 00 00	 subss	 xmm0, DWORD PTR dx$59[rbp]
  01dea	b8 14 00 00 00	 mov	 eax, 20
  01def	48 6b c0 00	 imul	 rax, rax, 0
  01df3	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01dfa	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01dfe	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0
  01e04	b8 14 00 00 00	 mov	 eax, 20
  01e09	48 6b c0 00	 imul	 rax, rax, 0
  01e0d	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01e14	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01e18	48 8b 55 28	 mov	 rdx, QWORD PTR opaque_uv$[rbp]
  01e1c	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  01e21	b8 14 00 00 00	 mov	 eax, 20
  01e26	48 6b c0 00	 imul	 rax, rax, 0
  01e2a	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01e31	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01e35	8b 95 58 0f 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  01e3b	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 950  :             _VtxWritePtr[1].pos.x = p2.x + dy; _VtxWritePtr[1].pos.y = p2.y - dx; _VtxWritePtr[1].uv = opaque_uv; _VtxWritePtr[1].col = col;

  01e3f	48 8b 85 f8 06
	00 00		 mov	 rax, QWORD PTR p2$58[rbp]
  01e46	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  01e4a	f3 0f 58 85 34
	07 00 00	 addss	 xmm0, DWORD PTR dy$60[rbp]
  01e52	b8 14 00 00 00	 mov	 eax, 20
  01e57	48 6b c0 01	 imul	 rax, rax, 1
  01e5b	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01e62	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01e66	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0
  01e6b	48 8b 85 f8 06
	00 00		 mov	 rax, QWORD PTR p2$58[rbp]
  01e72	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  01e77	f3 0f 5c 85 14
	07 00 00	 subss	 xmm0, DWORD PTR dx$59[rbp]
  01e7f	b8 14 00 00 00	 mov	 eax, 20
  01e84	48 6b c0 01	 imul	 rax, rax, 1
  01e88	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01e8f	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01e93	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0
  01e99	b8 14 00 00 00	 mov	 eax, 20
  01e9e	48 6b c0 01	 imul	 rax, rax, 1
  01ea2	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01ea9	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01ead	48 8b 55 28	 mov	 rdx, QWORD PTR opaque_uv$[rbp]
  01eb1	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  01eb6	b8 14 00 00 00	 mov	 eax, 20
  01ebb	48 6b c0 01	 imul	 rax, rax, 1
  01ebf	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01ec6	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01eca	8b 95 58 0f 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  01ed0	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 951  :             _VtxWritePtr[2].pos.x = p2.x - dy; _VtxWritePtr[2].pos.y = p2.y + dx; _VtxWritePtr[2].uv = opaque_uv; _VtxWritePtr[2].col = col;

  01ed4	48 8b 85 f8 06
	00 00		 mov	 rax, QWORD PTR p2$58[rbp]
  01edb	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  01edf	f3 0f 5c 85 34
	07 00 00	 subss	 xmm0, DWORD PTR dy$60[rbp]
  01ee7	b8 14 00 00 00	 mov	 eax, 20
  01eec	48 6b c0 02	 imul	 rax, rax, 2
  01ef0	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01ef7	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01efb	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0
  01f00	48 8b 85 f8 06
	00 00		 mov	 rax, QWORD PTR p2$58[rbp]
  01f07	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  01f0c	f3 0f 58 85 14
	07 00 00	 addss	 xmm0, DWORD PTR dx$59[rbp]
  01f14	b8 14 00 00 00	 mov	 eax, 20
  01f19	48 6b c0 02	 imul	 rax, rax, 2
  01f1d	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01f24	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01f28	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0
  01f2e	b8 14 00 00 00	 mov	 eax, 20
  01f33	48 6b c0 02	 imul	 rax, rax, 2
  01f37	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01f3e	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01f42	48 8b 55 28	 mov	 rdx, QWORD PTR opaque_uv$[rbp]
  01f46	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  01f4b	b8 14 00 00 00	 mov	 eax, 20
  01f50	48 6b c0 02	 imul	 rax, rax, 2
  01f54	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01f5b	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01f5f	8b 95 58 0f 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  01f65	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 952  :             _VtxWritePtr[3].pos.x = p1.x - dy; _VtxWritePtr[3].pos.y = p1.y + dx; _VtxWritePtr[3].uv = opaque_uv; _VtxWritePtr[3].col = col;

  01f69	48 8b 85 d8 06
	00 00		 mov	 rax, QWORD PTR p1$57[rbp]
  01f70	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  01f74	f3 0f 5c 85 34
	07 00 00	 subss	 xmm0, DWORD PTR dy$60[rbp]
  01f7c	b8 14 00 00 00	 mov	 eax, 20
  01f81	48 6b c0 03	 imul	 rax, rax, 3
  01f85	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01f8c	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01f90	f3 0f 11 04 01	 movss	 DWORD PTR [rcx+rax], xmm0
  01f95	48 8b 85 d8 06
	00 00		 mov	 rax, QWORD PTR p1$57[rbp]
  01f9c	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  01fa1	f3 0f 58 85 14
	07 00 00	 addss	 xmm0, DWORD PTR dx$59[rbp]
  01fa9	b8 14 00 00 00	 mov	 eax, 20
  01fae	48 6b c0 03	 imul	 rax, rax, 3
  01fb2	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01fb9	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01fbd	f3 0f 11 44 01
	04		 movss	 DWORD PTR [rcx+rax+4], xmm0
  01fc3	b8 14 00 00 00	 mov	 eax, 20
  01fc8	48 6b c0 03	 imul	 rax, rax, 3
  01fcc	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01fd3	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01fd7	48 8b 55 28	 mov	 rdx, QWORD PTR opaque_uv$[rbp]
  01fdb	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  01fe0	b8 14 00 00 00	 mov	 eax, 20
  01fe5	48 6b c0 03	 imul	 rax, rax, 3
  01fe9	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01ff0	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  01ff4	8b 95 58 0f 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  01ffa	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 953  :             _VtxWritePtr += 4;

  01ffe	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02005	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  02009	48 83 c0 50	 add	 rax, 80			; 00000050H
  0200d	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  02014	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 954  : 
; 955  :             _IdxWritePtr[0] = (ImDrawIdx)(_VtxCurrentIdx); _IdxWritePtr[1] = (ImDrawIdx)(_VtxCurrentIdx + 1); _IdxWritePtr[2] = (ImDrawIdx)(_VtxCurrentIdx + 2);

  02018	b8 02 00 00 00	 mov	 eax, 2
  0201d	48 6b c0 00	 imul	 rax, rax, 0
  02021	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  02028	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  0202c	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  02033	0f b7 52 34	 movzx	 edx, WORD PTR [rdx+52]
  02037	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx
  0203b	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02042	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  02045	ff c0		 inc	 eax
  02047	b9 02 00 00 00	 mov	 ecx, 2
  0204c	48 6b c9 01	 imul	 rcx, rcx, 1
  02050	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  02057	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  0205b	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  0205f	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02066	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  02069	83 c0 02	 add	 eax, 2
  0206c	b9 02 00 00 00	 mov	 ecx, 2
  02071	48 6b c9 02	 imul	 rcx, rcx, 2
  02075	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0207c	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  02080	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 956  :             _IdxWritePtr[3] = (ImDrawIdx)(_VtxCurrentIdx); _IdxWritePtr[4] = (ImDrawIdx)(_VtxCurrentIdx + 2); _IdxWritePtr[5] = (ImDrawIdx)(_VtxCurrentIdx + 3);

  02084	b8 02 00 00 00	 mov	 eax, 2
  02089	48 6b c0 03	 imul	 rax, rax, 3
  0208d	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  02094	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  02098	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0209f	0f b7 52 34	 movzx	 edx, WORD PTR [rdx+52]
  020a3	66 89 14 08	 mov	 WORD PTR [rax+rcx], dx
  020a7	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  020ae	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  020b1	83 c0 02	 add	 eax, 2
  020b4	b9 02 00 00 00	 mov	 ecx, 2
  020b9	48 6b c9 04	 imul	 rcx, rcx, 4
  020bd	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  020c4	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  020c8	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  020cc	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  020d3	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  020d6	83 c0 03	 add	 eax, 3
  020d9	b9 02 00 00 00	 mov	 ecx, 2
  020de	48 6b c9 05	 imul	 rcx, rcx, 5
  020e2	48 8b 95 40 0f
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  020e9	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  020ed	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax

; 957  :             _IdxWritePtr += 6;

  020f1	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  020f8	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  020fc	48 83 c0 0c	 add	 rax, 12
  02100	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  02107	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 958  :             _VtxCurrentIdx += 4;

  0210b	48 8b 85 40 0f
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02112	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  02115	83 c0 04	 add	 eax, 4
  02118	48 8b 8d 40 0f
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0211f	89 41 34	 mov	 DWORD PTR [rcx+52], eax

; 959  :         }

  02122	e9 f0 fa ff ff	 jmp	 $LN20@AddPolylin
$LN21@AddPolylin:
$LN26@AddPolylin:
$LN1@AddPolylin:

; 960  :     }
; 961  : }

  02127	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0212b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcFrameData
  02132	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  02137	48 8b 8d 10 0f
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0213e	48 33 cd	 xor	 rcx, rbp
  02141	e8 00 00 00 00	 call	 __security_check_cookie
  02146	48 8d a5 20 0f
	00 00		 lea	 rsp, QWORD PTR [rbp+3872]
  0214d	5f		 pop	 rdi
  0214e	5e		 pop	 rsi
  0214f	5d		 pop	 rbp
  02150	c3		 ret	 0
?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z ENDP	; ImDrawList::AddPolyline
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z
_TEXT	SEGMENT
clip_rect$ = 8
tv141 = 228
__$ArrayPad$ = 232
this$ = 272
font$ = 280
font_size$ = 288
pos$ = 296
col$ = 304
text_begin$ = 312
text_end$ = 320
wrap_width$ = 328
cpu_fine_clip_rect$ = 336
?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z PROC ; ImDrawList::AddText, COMDAT

; 1569 : {

$LN12:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	56		 push	 rsi
  00017	57		 push	 rdi
  00018	48 81 ec 40 01
	00 00		 sub	 rsp, 320		; 00000140H
  0001f	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00024	48 8b fc	 mov	 rdi, rsp
  00027	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 e8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1570 :     if ((col & IM_COL32_A_MASK) == 0)

  0004c	8b 85 30 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  00052	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00057	85 c0		 test	 eax, eax
  00059	75 05		 jne	 SHORT $LN2@AddText

; 1571 :         return;

  0005b	e9 dc 01 00 00	 jmp	 $LN1@AddText
$LN2@AddText:

; 1572 : 
; 1573 :     if (text_end == NULL)

  00060	48 83 bd 40 01
	00 00 00	 cmp	 QWORD PTR text_end$[rbp], 0
  00068	75 20		 jne	 SHORT $LN3@AddText

; 1574 :         text_end = text_begin + strlen(text_begin);

  0006a	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR text_begin$[rbp]
  00071	e8 00 00 00 00	 call	 strlen
  00076	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR text_begin$[rbp]
  0007d	48 03 c8	 add	 rcx, rax
  00080	48 8b c1	 mov	 rax, rcx
  00083	48 89 85 40 01
	00 00		 mov	 QWORD PTR text_end$[rbp], rax
$LN3@AddText:

; 1575 :     if (text_begin == text_end)

  0008a	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR text_end$[rbp]
  00091	48 39 85 38 01
	00 00		 cmp	 QWORD PTR text_begin$[rbp], rax
  00098	75 05		 jne	 SHORT $LN4@AddText

; 1576 :         return;

  0009a	e9 9d 01 00 00	 jmp	 $LN1@AddText
$LN4@AddText:

; 1577 : 
; 1578 :     // Pull default font/size from the shared ImDrawListSharedData instance
; 1579 :     if (font == NULL)

  0009f	48 83 bd 18 01
	00 00 00	 cmp	 QWORD PTR font$[rbp], 0
  000a7	75 16		 jne	 SHORT $LN5@AddText

; 1580 :         font = _Data->Font;

  000a9	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b0	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  000b4	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000b8	48 89 85 18 01
	00 00		 mov	 QWORD PTR font$[rbp], rax
$LN5@AddText:

; 1581 :     if (font_size == 0.0f)

  000bf	f3 0f 10 85 20
	01 00 00	 movss	 xmm0, DWORD PTR font_size$[rbp]
  000c7	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  000ce	7a 1a		 jp	 SHORT $LN6@AddText
  000d0	75 18		 jne	 SHORT $LN6@AddText

; 1582 :         font_size = _Data->FontSize;

  000d2	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d9	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  000dd	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  000e2	f3 0f 11 85 20
	01 00 00	 movss	 DWORD PTR font_size$[rbp], xmm0
$LN6@AddText:

; 1583 : 
; 1584 :     IM_ASSERT(font->ContainerAtlas->TexID == _CmdHeader.TextureId);  // Use high-level ImGui::PushFont() or low-level ImDrawList::PushTextureId() to change font.

  000ea	48 8b 85 18 01
	00 00		 mov	 rax, QWORD PTR font$[rbp]
  000f1	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  000f5	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fc	48 8b 89 98 00
	00 00		 mov	 rcx, QWORD PTR [rcx+152]
  00103	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  00107	74 22		 je	 SHORT $LN9@AddText
  00109	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z@4JA
  0010f	83 c0 0f	 add	 eax, 15
  00112	44 8b c0	 mov	 r8d, eax
  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0011c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GI@CIGOLMNM@?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AAA?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAI?$AAD?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_@
  00123	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00129	33 c0		 xor	 eax, eax
$LN9@AddText:

; 1585 : 
; 1586 :     ImVec4 clip_rect = _CmdHeader.ClipRect;

  0012b	48 8d 45 08	 lea	 rax, QWORD PTR clip_rect$[rbp]
  0012f	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00136	48 8b f8	 mov	 rdi, rax
  00139	48 8d b1 88 00
	00 00		 lea	 rsi, QWORD PTR [rcx+136]
  00140	b9 10 00 00 00	 mov	 ecx, 16
  00145	f3 a4		 rep movsb

; 1587 :     if (cpu_fine_clip_rect)

  00147	48 83 bd 50 01
	00 00 00	 cmp	 QWORD PTR cpu_fine_clip_rect$[rbp], 0
  0014f	74 6b		 je	 SHORT $LN7@AddText

; 1588 :     {
; 1589 :         clip_rect.x = ImMax(clip_rect.x, cpu_fine_clip_rect->x);

  00151	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR cpu_fine_clip_rect$[rbp]
  00158	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  0015c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR clip_rect$[rbp]
  00161	e8 00 00 00 00	 call	 ??$ImMax@M@@YAMMM@Z	; ImMax<float>
  00166	f3 0f 11 45 08	 movss	 DWORD PTR clip_rect$[rbp], xmm0

; 1590 :         clip_rect.y = ImMax(clip_rect.y, cpu_fine_clip_rect->y);

  0016b	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR cpu_fine_clip_rect$[rbp]
  00172	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [rax+4]
  00177	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR clip_rect$[rbp+4]
  0017c	e8 00 00 00 00	 call	 ??$ImMax@M@@YAMMM@Z	; ImMax<float>
  00181	f3 0f 11 45 0c	 movss	 DWORD PTR clip_rect$[rbp+4], xmm0

; 1591 :         clip_rect.z = ImMin(clip_rect.z, cpu_fine_clip_rect->z);

  00186	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR cpu_fine_clip_rect$[rbp]
  0018d	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [rax+8]
  00192	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR clip_rect$[rbp+8]
  00197	e8 00 00 00 00	 call	 ??$ImMin@M@@YAMMM@Z	; ImMin<float>
  0019c	f3 0f 11 45 10	 movss	 DWORD PTR clip_rect$[rbp+8], xmm0

; 1592 :         clip_rect.w = ImMin(clip_rect.w, cpu_fine_clip_rect->w);

  001a1	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR cpu_fine_clip_rect$[rbp]
  001a8	f3 0f 10 48 0c	 movss	 xmm1, DWORD PTR [rax+12]
  001ad	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR clip_rect$[rbp+12]
  001b2	e8 00 00 00 00	 call	 ??$ImMin@M@@YAMMM@Z	; ImMin<float>
  001b7	f3 0f 11 45 14	 movss	 DWORD PTR clip_rect$[rbp+12], xmm0
$LN7@AddText:

; 1593 :     }
; 1594 :     font->RenderText(this, font_size, pos, col, clip_rect, text_begin, text_end, wrap_width, cpu_fine_clip_rect != NULL);

  001bc	48 83 bd 50 01
	00 00 00	 cmp	 QWORD PTR cpu_fine_clip_rect$[rbp], 0
  001c4	74 09		 je	 SHORT $LN10@AddText
  001c6	c6 85 e4 00 00
	00 01		 mov	 BYTE PTR tv141[rbp], 1
  001cd	eb 07		 jmp	 SHORT $LN11@AddText
$LN10@AddText:
  001cf	c6 85 e4 00 00
	00 00		 mov	 BYTE PTR tv141[rbp], 0
$LN11@AddText:
  001d6	0f b6 85 e4 00
	00 00		 movzx	 eax, BYTE PTR tv141[rbp]
  001dd	88 44 24 48	 mov	 BYTE PTR [rsp+72], al
  001e1	f3 0f 10 85 48
	01 00 00	 movss	 xmm0, DWORD PTR wrap_width$[rbp]
  001e9	f3 0f 11 44 24
	40		 movss	 DWORD PTR [rsp+64], xmm0
  001ef	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR text_end$[rbp]
  001f6	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  001fb	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR text_begin$[rbp]
  00202	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00207	48 8d 45 08	 lea	 rax, QWORD PTR clip_rect$[rbp]
  0020b	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00210	8b 85 30 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  00216	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0021a	4c 8b 8d 28 01
	00 00		 mov	 r9, QWORD PTR pos$[rbp]
  00221	f3 0f 10 95 20
	01 00 00	 movss	 xmm2, DWORD PTR font_size$[rbp]
  00229	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00230	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR font$[rbp]
  00237	e8 00 00 00 00	 call	 ?RenderText@ImFont@@QEBAXPEAUImDrawList@@MAEBUImVec2@@IAEBUImVec4@@PEBD3M_N@Z ; ImFont::RenderText
$LN1@AddText:

; 1595 : }

  0023c	48 8d 4d b0	 lea	 rcx, QWORD PTR [rbp-80]
  00240	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z$rtcFrameData
  00247	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0024c	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00253	48 33 cd	 xor	 rcx, rbp
  00256	e8 00 00 00 00	 call	 __security_check_cookie
  0025b	48 8d a5 f0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+240]
  00262	5f		 pop	 rdi
  00263	5e		 pop	 rsi
  00264	5d		 pop	 rbp
  00265	c3		 ret	 0
?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z ENDP ; ImDrawList::AddText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z
_TEXT	SEGMENT
this$ = 224
pos$ = 232
col$ = 240
text_begin$ = 248
text_end$ = 256
?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z PROC	; ImDrawList::AddText, COMDAT

; 1598 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001d	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]

; 1599 :     AddText(NULL, 0.0f, pos, col, text_begin, text_end);

  00039	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  00042	0f 57 c0	 xorps	 xmm0, xmm0
  00045	f3 0f 11 44 24
	38		 movss	 DWORD PTR [rsp+56], xmm0
  0004b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR text_end$[rbp]
  00052	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00057	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR text_begin$[rbp]
  0005e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00063	8b 85 f0 00 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  00069	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0006d	4c 8b 8d e8 00
	00 00		 mov	 r9, QWORD PTR pos$[rbp]
  00074	0f 57 d2	 xorps	 xmm2, xmm2
  00077	33 d2		 xor	 edx, edx
  00079	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00080	e8 00 00 00 00	 call	 ?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z ; ImDrawList::AddText

; 1600 : }

  00085	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0008c	5f		 pop	 rdi
  0008d	5d		 pop	 rbp
  0008e	c3		 ret	 0
?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z ENDP	; ImDrawList::AddText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z
_TEXT	SEGMENT
a_max$ = 4
this$ = 256
center$ = 264
radius$ = 272
col$ = 280
num_segments$ = 288
?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z PROC	; ImDrawList::AddNgonFilled, COMDAT

; 1536 : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]

; 1537 :     if ((col & IM_COL32_A_MASK) == 0 || num_segments <= 2)

  0003a	8b 85 18 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  00040	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00045	85 c0		 test	 eax, eax
  00047	74 09		 je	 SHORT $LN3@AddNgonFil
  00049	83 bd 20 01 00
	00 02		 cmp	 DWORD PTR num_segments$[rbp], 2
  00050	7f 02		 jg	 SHORT $LN2@AddNgonFil
$LN3@AddNgonFil:

; 1538 :         return;

  00052	eb 77		 jmp	 SHORT $LN1@AddNgonFil
$LN2@AddNgonFil:

; 1539 : 
; 1540 :     // Because we are filling a closed shape we remove 1 from the count of segments/points
; 1541 :     const float a_max = (IM_PI * 2.0f) * ((float)num_segments - 1.0f) / (float)num_segments;

  00054	f3 0f 2a 85 20
	01 00 00	 cvtsi2ss xmm0, DWORD PTR num_segments$[rbp]
  0005c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00064	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40c90fdb
  0006c	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00070	0f 28 c1	 movaps	 xmm0, xmm1
  00073	f3 0f 2a 8d 20
	01 00 00	 cvtsi2ss xmm1, DWORD PTR num_segments$[rbp]
  0007b	f3 0f 5e c1	 divss	 xmm0, xmm1
  0007f	f3 0f 11 45 04	 movss	 DWORD PTR a_max$[rbp], xmm0

; 1542 :     PathArcTo(center, radius, 0.0f, a_max, num_segments - 1);

  00084	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR num_segments$[rbp]
  0008a	ff c8		 dec	 eax
  0008c	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00090	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR a_max$[rbp]
  00095	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0009b	0f 57 db	 xorps	 xmm3, xmm3
  0009e	f3 0f 10 95 10
	01 00 00	 movss	 xmm2, DWORD PTR radius$[rbp]
  000a6	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR center$[rbp]
  000ad	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b4	e8 00 00 00 00	 call	 ?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::PathArcTo

; 1543 :     PathFillConvex(col);

  000b9	8b 95 18 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  000bf	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c6	e8 00 00 00 00	 call	 ?PathFillConvex@ImDrawList@@QEAAXI@Z ; ImDrawList::PathFillConvex
$LN1@AddNgonFil:

; 1544 : }

  000cb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000d2	5f		 pop	 rdi
  000d3	5d		 pop	 rbp
  000d4	c3		 ret	 0
?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z ENDP	; ImDrawList::AddNgonFilled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z
_TEXT	SEGMENT
a_max$ = 4
this$ = 256
center$ = 264
radius$ = 272
col$ = 280
num_segments$ = 288
thickness$ = 296
?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z PROC	; ImDrawList::AddNgon, COMDAT

; 1524 : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]

; 1525 :     if ((col & IM_COL32_A_MASK) == 0 || num_segments <= 2)

  0003a	8b 85 18 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  00040	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00045	85 c0		 test	 eax, eax
  00047	74 09		 je	 SHORT $LN3@AddNgon
  00049	83 bd 20 01 00
	00 02		 cmp	 DWORD PTR num_segments$[rbp], 2
  00050	7f 05		 jg	 SHORT $LN2@AddNgon
$LN3@AddNgon:

; 1526 :         return;

  00052	e9 90 00 00 00	 jmp	 $LN1@AddNgon
$LN2@AddNgon:

; 1527 : 
; 1528 :     // Because we are filling a closed shape we remove 1 from the count of segments/points
; 1529 :     const float a_max = (IM_PI * 2.0f) * ((float)num_segments - 1.0f) / (float)num_segments;

  00057	f3 0f 2a 85 20
	01 00 00	 cvtsi2ss xmm0, DWORD PTR num_segments$[rbp]
  0005f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00067	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40c90fdb
  0006f	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00073	0f 28 c1	 movaps	 xmm0, xmm1
  00076	f3 0f 2a 8d 20
	01 00 00	 cvtsi2ss xmm1, DWORD PTR num_segments$[rbp]
  0007e	f3 0f 5e c1	 divss	 xmm0, xmm1
  00082	f3 0f 11 45 04	 movss	 DWORD PTR a_max$[rbp], xmm0

; 1530 :     PathArcTo(center, radius - 0.5f, 0.0f, a_max, num_segments - 1);

  00087	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR num_segments$[rbp]
  0008d	ff c8		 dec	 eax
  0008f	f3 0f 10 85 10
	01 00 00	 movss	 xmm0, DWORD PTR radius$[rbp]
  00097	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  0009f	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000a3	f3 0f 10 4d 04	 movss	 xmm1, DWORD PTR a_max$[rbp]
  000a8	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [rsp+32], xmm1
  000ae	0f 57 db	 xorps	 xmm3, xmm3
  000b1	0f 28 d0	 movaps	 xmm2, xmm0
  000b4	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR center$[rbp]
  000bb	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c2	e8 00 00 00 00	 call	 ?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::PathArcTo

; 1531 :     PathStroke(col, ImDrawFlags_Closed, thickness);

  000c7	f3 0f 10 9d 28
	01 00 00	 movss	 xmm3, DWORD PTR thickness$[rbp]
  000cf	41 b8 01 00 00
	00		 mov	 r8d, 1
  000d5	8b 95 18 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  000db	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e2	e8 00 00 00 00	 call	 ?PathStroke@ImDrawList@@QEAAXIHM@Z ; ImDrawList::PathStroke
$LN1@AddNgon:

; 1532 : }

  000e7	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000ee	5f		 pop	 rdi
  000ef	5d		 pop	 rbp
  000f0	c3		 ret	 0
?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z ENDP	; ImDrawList::AddNgon
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z
_TEXT	SEGMENT
a_max$1 = 4
this$ = 256
center$ = 264
radius$ = 272
col$ = 280
num_segments$ = 288
?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z PROC ; ImDrawList::AddCircleFilled, COMDAT

; 1499 : {

$LN7:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]

; 1500 :     if ((col & IM_COL32_A_MASK) == 0 || radius < 0.5f)

  0003a	8b 85 18 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  00040	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00045	85 c0		 test	 eax, eax
  00047	74 11		 je	 SHORT $LN3@AddCircleF
  00049	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00051	0f 2f 85 10 01
	00 00		 comiss	 xmm0, DWORD PTR radius$[rbp]
  00058	76 05		 jbe	 SHORT $LN2@AddCircleF
$LN3@AddCircleF:

; 1501 :         return;

  0005a	e9 e5 00 00 00	 jmp	 $LN1@AddCircleF
$LN2@AddCircleF:

; 1502 : 
; 1503 :     if (num_segments <= 0)

  0005f	83 bd 20 01 00
	00 00		 cmp	 DWORD PTR num_segments$[rbp], 0
  00066	7f 49		 jg	 SHORT $LN4@AddCircleF

; 1504 :     {
; 1505 :         // Use arc with automatic segment count
; 1506 :         _PathArcToFastEx(center, radius, 0, IM_DRAWLIST_ARCFAST_SAMPLE_MAX, 0);

  00068	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00070	c7 44 24 20 30
	00 00 00	 mov	 DWORD PTR [rsp+32], 48	; 00000030H
  00078	45 33 c9	 xor	 r9d, r9d
  0007b	f3 0f 10 95 10
	01 00 00	 movss	 xmm2, DWORD PTR radius$[rbp]
  00083	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR center$[rbp]
  0008a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00091	e8 00 00 00 00	 call	 ?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z ; ImDrawList::_PathArcToFastEx

; 1507 :         _Path.Size--;

  00096	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009d	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  000a0	ff c8		 dec	 eax
  000a2	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	89 41 78	 mov	 DWORD PTR [rcx+120], eax

; 1508 :     }
; 1509 :     else

  000ac	e9 81 00 00 00	 jmp	 $LN5@AddCircleF
$LN4@AddCircleF:

; 1510 :     {
; 1511 :         // Explicit segment count (still clamp to avoid drawing insanely tessellated shapes)
; 1512 :         num_segments = ImClamp(num_segments, 3, IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX);

  000b1	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  000b7	ba 03 00 00 00	 mov	 edx, 3
  000bc	8b 8d 20 01 00
	00		 mov	 ecx, DWORD PTR num_segments$[rbp]
  000c2	e8 00 00 00 00	 call	 ??$ImClamp@H@@YAHHHH@Z	; ImClamp<int>
  000c7	89 85 20 01 00
	00		 mov	 DWORD PTR num_segments$[rbp], eax

; 1513 : 
; 1514 :         // Because we are filling a closed shape we remove 1 from the count of segments/points
; 1515 :         const float a_max = (IM_PI * 2.0f) * ((float)num_segments - 1.0f) / (float)num_segments;

  000cd	f3 0f 2a 85 20
	01 00 00	 cvtsi2ss xmm0, DWORD PTR num_segments$[rbp]
  000d5	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000dd	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40c90fdb
  000e5	f3 0f 59 c8	 mulss	 xmm1, xmm0
  000e9	0f 28 c1	 movaps	 xmm0, xmm1
  000ec	f3 0f 2a 8d 20
	01 00 00	 cvtsi2ss xmm1, DWORD PTR num_segments$[rbp]
  000f4	f3 0f 5e c1	 divss	 xmm0, xmm1
  000f8	f3 0f 11 45 04	 movss	 DWORD PTR a_max$1[rbp], xmm0

; 1516 :         PathArcTo(center, radius, 0.0f, a_max, num_segments - 1);

  000fd	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR num_segments$[rbp]
  00103	ff c8		 dec	 eax
  00105	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00109	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR a_max$1[rbp]
  0010e	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00114	0f 57 db	 xorps	 xmm3, xmm3
  00117	f3 0f 10 95 10
	01 00 00	 movss	 xmm2, DWORD PTR radius$[rbp]
  0011f	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR center$[rbp]
  00126	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012d	e8 00 00 00 00	 call	 ?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::PathArcTo
$LN5@AddCircleF:

; 1517 :     }
; 1518 : 
; 1519 :     PathFillConvex(col);

  00132	8b 95 18 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  00138	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0013f	e8 00 00 00 00	 call	 ?PathFillConvex@ImDrawList@@QEAAXI@Z ; ImDrawList::PathFillConvex
$LN1@AddCircleF:

; 1520 : }

  00144	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0014b	5f		 pop	 rdi
  0014c	5d		 pop	 rbp
  0014d	c3		 ret	 0
?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z ENDP ; ImDrawList::AddCircleFilled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z
_TEXT	SEGMENT
a_max$1 = 4
this$ = 256
center$ = 264
radius$ = 272
col$ = 280
num_segments$ = 288
thickness$ = 296
?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z PROC	; ImDrawList::AddCircle, COMDAT

; 1475 : {

$LN7:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	55		 push	 rbp
  00016	57		 push	 rdi
  00017	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]

; 1476 :     if ((col & IM_COL32_A_MASK) == 0 || radius < 0.5f)

  0003a	8b 85 18 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  00040	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00045	85 c0		 test	 eax, eax
  00047	74 11		 je	 SHORT $LN3@AddCircle
  00049	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00051	0f 2f 85 10 01
	00 00		 comiss	 xmm0, DWORD PTR radius$[rbp]
  00058	76 05		 jbe	 SHORT $LN2@AddCircle
$LN3@AddCircle:

; 1477 :         return;

  0005a	e9 09 01 00 00	 jmp	 $LN1@AddCircle
$LN2@AddCircle:

; 1478 : 
; 1479 :     if (num_segments <= 0)

  0005f	83 bd 20 01 00
	00 00		 cmp	 DWORD PTR num_segments$[rbp], 0
  00066	7f 54		 jg	 SHORT $LN4@AddCircle

; 1480 :     {
; 1481 :         // Use arc with automatic segment count
; 1482 :         _PathArcToFastEx(center, radius - 0.5f, 0, IM_DRAWLIST_ARCFAST_SAMPLE_MAX, 0);

  00068	f3 0f 10 85 10
	01 00 00	 movss	 xmm0, DWORD PTR radius$[rbp]
  00070	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  00078	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00080	c7 44 24 20 30
	00 00 00	 mov	 DWORD PTR [rsp+32], 48	; 00000030H
  00088	45 33 c9	 xor	 r9d, r9d
  0008b	0f 28 d0	 movaps	 xmm2, xmm0
  0008e	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR center$[rbp]
  00095	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009c	e8 00 00 00 00	 call	 ?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z ; ImDrawList::_PathArcToFastEx

; 1483 :         _Path.Size--;

  000a1	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a8	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  000ab	ff c8		 dec	 eax
  000ad	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b4	89 41 78	 mov	 DWORD PTR [rcx+120], eax

; 1484 :     }
; 1485 :     else

  000b7	e9 8c 00 00 00	 jmp	 $LN5@AddCircle
$LN4@AddCircle:

; 1486 :     {
; 1487 :         // Explicit segment count (still clamp to avoid drawing insanely tessellated shapes)
; 1488 :         num_segments = ImClamp(num_segments, 3, IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX);

  000bc	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  000c2	ba 03 00 00 00	 mov	 edx, 3
  000c7	8b 8d 20 01 00
	00		 mov	 ecx, DWORD PTR num_segments$[rbp]
  000cd	e8 00 00 00 00	 call	 ??$ImClamp@H@@YAHHHH@Z	; ImClamp<int>
  000d2	89 85 20 01 00
	00		 mov	 DWORD PTR num_segments$[rbp], eax

; 1489 : 
; 1490 :         // Because we are filling a closed shape we remove 1 from the count of segments/points
; 1491 :         const float a_max = (IM_PI * 2.0f) * ((float)num_segments - 1.0f) / (float)num_segments;

  000d8	f3 0f 2a 85 20
	01 00 00	 cvtsi2ss xmm0, DWORD PTR num_segments$[rbp]
  000e0	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000e8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40c90fdb
  000f0	f3 0f 59 c8	 mulss	 xmm1, xmm0
  000f4	0f 28 c1	 movaps	 xmm0, xmm1
  000f7	f3 0f 2a 8d 20
	01 00 00	 cvtsi2ss xmm1, DWORD PTR num_segments$[rbp]
  000ff	f3 0f 5e c1	 divss	 xmm0, xmm1
  00103	f3 0f 11 45 04	 movss	 DWORD PTR a_max$1[rbp], xmm0

; 1492 :         PathArcTo(center, radius - 0.5f, 0.0f, a_max, num_segments - 1);

  00108	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR num_segments$[rbp]
  0010e	ff c8		 dec	 eax
  00110	f3 0f 10 85 10
	01 00 00	 movss	 xmm0, DWORD PTR radius$[rbp]
  00118	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  00120	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00124	f3 0f 10 4d 04	 movss	 xmm1, DWORD PTR a_max$1[rbp]
  00129	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [rsp+32], xmm1
  0012f	0f 57 db	 xorps	 xmm3, xmm3
  00132	0f 28 d0	 movaps	 xmm2, xmm0
  00135	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR center$[rbp]
  0013c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00143	e8 00 00 00 00	 call	 ?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::PathArcTo
$LN5@AddCircle:

; 1493 :     }
; 1494 : 
; 1495 :     PathStroke(col, ImDrawFlags_Closed, thickness);

  00148	f3 0f 10 9d 28
	01 00 00	 movss	 xmm3, DWORD PTR thickness$[rbp]
  00150	41 b8 01 00 00
	00		 mov	 r8d, 1
  00156	8b 95 18 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  0015c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00163	e8 00 00 00 00	 call	 ?PathStroke@ImDrawList@@QEAAXIHM@Z ; ImDrawList::PathStroke
$LN1@AddCircle:

; 1496 : }

  00168	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0016f	5f		 pop	 rdi
  00170	5d		 pop	 rbp
  00171	c3		 ret	 0
?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z ENDP	; ImDrawList::AddCircle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z
_TEXT	SEGMENT
this$ = 224
p1$ = 232
p2$ = 240
p3$ = 248
col$ = 256
?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z PROC ; ImDrawList::AddTriangleFilled, COMDAT

; 1464 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1465 :     if ((col & IM_COL32_A_MASK) == 0)

  00039	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  0003f	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00044	85 c0		 test	 eax, eax
  00046	75 02		 jne	 SHORT $LN2@AddTriangl

; 1466 :         return;

  00048	eb 4b		 jmp	 SHORT $LN1@AddTriangl
$LN2@AddTriangl:

; 1467 : 
; 1468 :     PathLineTo(p1);

  0004a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR p1$[rbp]
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1469 :     PathLineTo(p2);

  0005d	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR p2$[rbp]
  00064	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006b	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1470 :     PathLineTo(p3);

  00070	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR p3$[rbp]
  00077	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007e	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1471 :     PathFillConvex(col);

  00083	8b 95 00 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  00089	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00090	e8 00 00 00 00	 call	 ?PathFillConvex@ImDrawList@@QEAAXI@Z ; ImDrawList::PathFillConvex
$LN1@AddTriangl:

; 1472 : }

  00095	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z ENDP ; ImDrawList::AddTriangleFilled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z
_TEXT	SEGMENT
this$ = 224
p1$ = 232
p2$ = 240
p3$ = 248
col$ = 256
thickness$ = 264
?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z PROC	; ImDrawList::AddTriangle, COMDAT

; 1453 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1454 :     if ((col & IM_COL32_A_MASK) == 0)

  00039	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  0003f	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00044	85 c0		 test	 eax, eax
  00046	75 02		 jne	 SHORT $LN2@AddTriangl

; 1455 :         return;

  00048	eb 59		 jmp	 SHORT $LN1@AddTriangl
$LN2@AddTriangl:

; 1456 : 
; 1457 :     PathLineTo(p1);

  0004a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR p1$[rbp]
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1458 :     PathLineTo(p2);

  0005d	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR p2$[rbp]
  00064	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006b	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1459 :     PathLineTo(p3);

  00070	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR p3$[rbp]
  00077	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007e	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1460 :     PathStroke(col, ImDrawFlags_Closed, thickness);

  00083	f3 0f 10 9d 08
	01 00 00	 movss	 xmm3, DWORD PTR thickness$[rbp]
  0008b	41 b8 01 00 00
	00		 mov	 r8d, 1
  00091	8b 95 00 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  00097	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009e	e8 00 00 00 00	 call	 ?PathStroke@ImDrawList@@QEAAXIHM@Z ; ImDrawList::PathStroke
$LN1@AddTriangl:

; 1461 : }

  000a3	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000aa	5f		 pop	 rdi
  000ab	5d		 pop	 rbp
  000ac	c3		 ret	 0
?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z ENDP	; ImDrawList::AddTriangle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddQuadFilled@ImDrawList@@QEAAXAEBUImVec2@@000I@Z
_TEXT	SEGMENT
this$ = 224
p1$ = 232
p2$ = 240
p3$ = 248
p4$ = 256
col$ = 264
?AddQuadFilled@ImDrawList@@QEAAXAEBUImVec2@@000I@Z PROC	; ImDrawList::AddQuadFilled, COMDAT

; 1441 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1442 :     if ((col & IM_COL32_A_MASK) == 0)

  00039	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  0003f	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00044	85 c0		 test	 eax, eax
  00046	75 02		 jne	 SHORT $LN2@AddQuadFil

; 1443 :         return;

  00048	eb 5e		 jmp	 SHORT $LN1@AddQuadFil
$LN2@AddQuadFil:

; 1444 : 
; 1445 :     PathLineTo(p1);

  0004a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR p1$[rbp]
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1446 :     PathLineTo(p2);

  0005d	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR p2$[rbp]
  00064	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006b	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1447 :     PathLineTo(p3);

  00070	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR p3$[rbp]
  00077	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007e	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1448 :     PathLineTo(p4);

  00083	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR p4$[rbp]
  0008a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00091	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1449 :     PathFillConvex(col);

  00096	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  0009c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a3	e8 00 00 00 00	 call	 ?PathFillConvex@ImDrawList@@QEAAXI@Z ; ImDrawList::PathFillConvex
$LN1@AddQuadFil:

; 1450 : }

  000a8	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000af	5f		 pop	 rdi
  000b0	5d		 pop	 rbp
  000b1	c3		 ret	 0
?AddQuadFilled@ImDrawList@@QEAAXAEBUImVec2@@000I@Z ENDP	; ImDrawList::AddQuadFilled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddQuad@ImDrawList@@QEAAXAEBUImVec2@@000IM@Z
_TEXT	SEGMENT
this$ = 224
p1$ = 232
p2$ = 240
p3$ = 248
p4$ = 256
col$ = 264
thickness$ = 272
?AddQuad@ImDrawList@@QEAAXAEBUImVec2@@000IM@Z PROC	; ImDrawList::AddQuad, COMDAT

; 1429 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1430 :     if ((col & IM_COL32_A_MASK) == 0)

  00039	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  0003f	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00044	85 c0		 test	 eax, eax
  00046	75 02		 jne	 SHORT $LN2@AddQuad

; 1431 :         return;

  00048	eb 6c		 jmp	 SHORT $LN1@AddQuad
$LN2@AddQuad:

; 1432 : 
; 1433 :     PathLineTo(p1);

  0004a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR p1$[rbp]
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1434 :     PathLineTo(p2);

  0005d	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR p2$[rbp]
  00064	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006b	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1435 :     PathLineTo(p3);

  00070	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR p3$[rbp]
  00077	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007e	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1436 :     PathLineTo(p4);

  00083	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR p4$[rbp]
  0008a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00091	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1437 :     PathStroke(col, ImDrawFlags_Closed, thickness);

  00096	f3 0f 10 9d 10
	01 00 00	 movss	 xmm3, DWORD PTR thickness$[rbp]
  0009e	41 b8 01 00 00
	00		 mov	 r8d, 1
  000a4	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  000aa	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b1	e8 00 00 00 00	 call	 ?PathStroke@ImDrawList@@QEAAXIHM@Z ; ImDrawList::PathStroke
$LN1@AddQuad:

; 1438 : }

  000b6	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000bd	5f		 pop	 rdi
  000be	5d		 pop	 rbp
  000bf	c3		 ret	 0
?AddQuad@ImDrawList@@QEAAXAEBUImVec2@@000IM@Z ENDP	; ImDrawList::AddQuad
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z
_TEXT	SEGMENT
uv$ = 8
$T4 = 228
$T5 = 260
__$ArrayPad$ = 280
this$ = 320
p_min$ = 328
p_max$ = 336
col_upr_left$ = 344
col_upr_right$ = 352
col_bot_right$ = 360
col_bot_left$ = 368
?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z PROC ; ImDrawList::AddRectFilledMultiColor, COMDAT

; 1414 : {

$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 18 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1415 :     if (((col_upr_left | col_upr_right | col_bot_right | col_bot_left) & IM_COL32_A_MASK) == 0)

  0004a	8b 85 60 01 00
	00		 mov	 eax, DWORD PTR col_upr_right$[rbp]
  00050	8b 8d 58 01 00
	00		 mov	 ecx, DWORD PTR col_upr_left$[rbp]
  00056	0b c8		 or	 ecx, eax
  00058	8b c1		 mov	 eax, ecx
  0005a	0b 85 68 01 00
	00		 or	 eax, DWORD PTR col_bot_right$[rbp]
  00060	0b 85 70 01 00
	00		 or	 eax, DWORD PTR col_bot_left$[rbp]
  00066	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  0006b	85 c0		 test	 eax, eax
  0006d	75 05		 jne	 SHORT $LN2@AddRectFil

; 1416 :         return;

  0006f	e9 7c 01 00 00	 jmp	 $LN1@AddRectFil
$LN2@AddRectFil:

; 1417 : 
; 1418 :     const ImVec2 uv = _Data->TexUvWhitePixel;

  00074	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007b	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0007f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00082	48 89 45 08	 mov	 QWORD PTR uv$[rbp], rax

; 1419 :     PrimReserve(6, 4);

  00086	41 b8 04 00 00
	00		 mov	 r8d, 4
  0008c	ba 06 00 00 00	 mov	 edx, 6
  00091	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00098	e8 00 00 00 00	 call	 ?PrimReserve@ImDrawList@@QEAAXHH@Z ; ImDrawList::PrimReserve

; 1420 :     PrimWriteIdx((ImDrawIdx)(_VtxCurrentIdx)); PrimWriteIdx((ImDrawIdx)(_VtxCurrentIdx + 1)); PrimWriteIdx((ImDrawIdx)(_VtxCurrentIdx + 2));

  0009d	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a4	0f b7 50 34	 movzx	 edx, WORD PTR [rax+52]
  000a8	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000af	e8 00 00 00 00	 call	 ?PrimWriteIdx@ImDrawList@@QEAAXG@Z ; ImDrawList::PrimWriteIdx
  000b4	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bb	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  000be	ff c0		 inc	 eax
  000c0	0f b7 d0	 movzx	 edx, ax
  000c3	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ca	e8 00 00 00 00	 call	 ?PrimWriteIdx@ImDrawList@@QEAAXG@Z ; ImDrawList::PrimWriteIdx
  000cf	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d6	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  000d9	83 c0 02	 add	 eax, 2
  000dc	0f b7 d0	 movzx	 edx, ax
  000df	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e6	e8 00 00 00 00	 call	 ?PrimWriteIdx@ImDrawList@@QEAAXG@Z ; ImDrawList::PrimWriteIdx

; 1421 :     PrimWriteIdx((ImDrawIdx)(_VtxCurrentIdx)); PrimWriteIdx((ImDrawIdx)(_VtxCurrentIdx + 2)); PrimWriteIdx((ImDrawIdx)(_VtxCurrentIdx + 3));

  000eb	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f2	0f b7 50 34	 movzx	 edx, WORD PTR [rax+52]
  000f6	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	e8 00 00 00 00	 call	 ?PrimWriteIdx@ImDrawList@@QEAAXG@Z ; ImDrawList::PrimWriteIdx
  00102	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00109	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  0010c	83 c0 02	 add	 eax, 2
  0010f	0f b7 d0	 movzx	 edx, ax
  00112	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00119	e8 00 00 00 00	 call	 ?PrimWriteIdx@ImDrawList@@QEAAXG@Z ; ImDrawList::PrimWriteIdx
  0011e	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00125	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  00128	83 c0 03	 add	 eax, 3
  0012b	0f b7 d0	 movzx	 edx, ax
  0012e	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00135	e8 00 00 00 00	 call	 ?PrimWriteIdx@ImDrawList@@QEAAXG@Z ; ImDrawList::PrimWriteIdx

; 1422 :     PrimWriteVtx(p_min, uv, col_upr_left);

  0013a	44 8b 8d 58 01
	00 00		 mov	 r9d, DWORD PTR col_upr_left$[rbp]
  00141	4c 8d 45 08	 lea	 r8, QWORD PTR uv$[rbp]
  00145	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR p_min$[rbp]
  0014c	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00153	e8 00 00 00 00	 call	 ?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ; ImDrawList::PrimWriteVtx

; 1423 :     PrimWriteVtx(ImVec2(p_max.x, p_min.y), uv, col_upr_right);

  00158	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR p_min$[rbp]
  0015f	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  00164	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR p_max$[rbp]
  0016b	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  0016f	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00176	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0017b	44 8b 8d 60 01
	00 00		 mov	 r9d, DWORD PTR col_upr_right$[rbp]
  00182	4c 8d 45 08	 lea	 r8, QWORD PTR uv$[rbp]
  00186	48 8b d0	 mov	 rdx, rax
  00189	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00190	e8 00 00 00 00	 call	 ?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ; ImDrawList::PrimWriteVtx

; 1424 :     PrimWriteVtx(p_max, uv, col_bot_right);

  00195	44 8b 8d 68 01
	00 00		 mov	 r9d, DWORD PTR col_bot_right$[rbp]
  0019c	4c 8d 45 08	 lea	 r8, QWORD PTR uv$[rbp]
  001a0	48 8b 95 50 01
	00 00		 mov	 rdx, QWORD PTR p_max$[rbp]
  001a7	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ae	e8 00 00 00 00	 call	 ?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ; ImDrawList::PrimWriteVtx

; 1425 :     PrimWriteVtx(ImVec2(p_min.x, p_max.y), uv, col_bot_left);

  001b3	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR p_max$[rbp]
  001ba	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  001bf	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR p_min$[rbp]
  001c6	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  001ca	48 8d 8d 04 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  001d1	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001d6	44 8b 8d 70 01
	00 00		 mov	 r9d, DWORD PTR col_bot_left$[rbp]
  001dd	4c 8d 45 08	 lea	 r8, QWORD PTR uv$[rbp]
  001e1	48 8b d0	 mov	 rdx, rax
  001e4	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001eb	e8 00 00 00 00	 call	 ?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ; ImDrawList::PrimWriteVtx
$LN1@AddRectFil:

; 1426 : }

  001f0	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  001f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z$rtcFrameData
  001fb	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00200	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00207	48 33 cd	 xor	 rcx, rbp
  0020a	e8 00 00 00 00	 call	 __security_check_cookie
  0020f	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00216	5f		 pop	 rdi
  00217	5d		 pop	 rbp
  00218	c3		 ret	 0
?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z ENDP ; ImDrawList::AddRectFilledMultiColor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z
_TEXT	SEGMENT
this$ = 224
p_min$ = 232
p_max$ = 240
col$ = 248
rounding$ = 256
flags$ = 264
?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z PROC	; ImDrawList::AddRectFilled, COMDAT

; 1397 : {

$LN7:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 1398 :     if ((col & IM_COL32_A_MASK) == 0)

  00039	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  0003f	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00044	85 c0		 test	 eax, eax
  00046	75 05		 jne	 SHORT $LN2@AddRectFil

; 1399 :         return;

  00048	e9 9b 00 00 00	 jmp	 $LN1@AddRectFil
$LN2@AddRectFil:

; 1400 :     if (rounding < 0.5f || (flags & ImDrawFlags_RoundCornersMask_) == ImDrawFlags_RoundCornersNone)

  0004d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00055	0f 2f 85 00 01
	00 00		 comiss	 xmm0, DWORD PTR rounding$[rbp]
  0005c	77 12		 ja	 SHORT $LN5@AddRectFil
  0005e	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  00064	25 f0 01 00 00	 and	 eax, 496		; 000001f0H
  00069	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0006e	75 3a		 jne	 SHORT $LN3@AddRectFil
$LN5@AddRectFil:

; 1401 :     {
; 1402 :         PrimReserve(6, 4);

  00070	41 b8 04 00 00
	00		 mov	 r8d, 4
  00076	ba 06 00 00 00	 mov	 edx, 6
  0007b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00082	e8 00 00 00 00	 call	 ?PrimReserve@ImDrawList@@QEAAXHH@Z ; ImDrawList::PrimReserve

; 1403 :         PrimRect(p_min, p_max, col);

  00087	44 8b 8d f8 00
	00 00		 mov	 r9d, DWORD PTR col$[rbp]
  0008e	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR p_max$[rbp]
  00095	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR p_min$[rbp]
  0009c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a3	e8 00 00 00 00	 call	 ?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ; ImDrawList::PrimRect

; 1404 :     }
; 1405 :     else

  000a8	eb 3e		 jmp	 SHORT $LN4@AddRectFil
$LN3@AddRectFil:

; 1406 :     {
; 1407 :         PathRect(p_min, p_max, rounding, flags);

  000aa	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  000b0	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000b4	f3 0f 10 9d 00
	01 00 00	 movss	 xmm3, DWORD PTR rounding$[rbp]
  000bc	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR p_max$[rbp]
  000c3	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR p_min$[rbp]
  000ca	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d1	e8 00 00 00 00	 call	 ?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z ; ImDrawList::PathRect

; 1408 :         PathFillConvex(col);

  000d6	8b 95 f8 00 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  000dc	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e3	e8 00 00 00 00	 call	 ?PathFillConvex@ImDrawList@@QEAAXI@Z ; ImDrawList::PathFillConvex
$LN4@AddRectFil:
$LN1@AddRectFil:

; 1409 :     }
; 1410 : }

  000e8	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000ef	5f		 pop	 rdi
  000f0	5d		 pop	 rbp
  000f1	c3		 ret	 0
?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ENDP	; ImDrawList::AddRectFilled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
$T4 = 292
$T5 = 324
$T6 = 356
$T7 = 388
$T8 = 420
tv93 = 440
tv72 = 440
this$ = 480
p_min$ = 488
p_max$ = 496
col$ = 504
rounding$ = 512
flags$ = 520
thickness$ = 528
?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z PROC	; ImDrawList::AddRect, COMDAT

; 1386 : {

$LN6:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 01
	00 00		 sub	 rsp, 504		; 000001f8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 7e 00 00 00	 mov	 ecx, 126		; 0000007eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR [rsp+536]

; 1387 :     if ((col & IM_COL32_A_MASK) == 0)

  00039	8b 85 f8 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  0003f	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00044	85 c0		 test	 eax, eax
  00046	75 05		 jne	 SHORT $LN2@AddRect

; 1388 :         return;

  00048	e9 66 01 00 00	 jmp	 $LN1@AddRect
$LN2@AddRect:

; 1389 :     if (Flags & ImDrawListFlags_AntiAliasedLines)

  0004d	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00054	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  00057	83 e0 01	 and	 eax, 1
  0005a	85 c0		 test	 eax, eax
  0005c	0f 84 9b 00 00
	00		 je	 $LN3@AddRect

; 1390 :         PathRect(p_min + ImVec2(0.50f, 0.50f), p_max - ImVec2(0.50f, 0.50f), rounding, flags);

  00062	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f000000
  0006a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  00072	48 8d 8d c4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00079	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0007e	4c 8b c0	 mov	 r8, rax
  00081	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR p_max$[rbp]
  00088	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  0008f	e8 00 00 00 00	 call	 ??G@YA?AUImVec2@@AEBU0@0@Z ; operator-
  00094	48 89 85 b8 01
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  0009b	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f000000
  000a3	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  000ab	48 8d 8d 04 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  000b2	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000b7	4c 8b c0	 mov	 r8, rax
  000ba	48 8b 95 e8 01
	00 00		 mov	 rdx, QWORD PTR p_min$[rbp]
  000c1	48 8d 8d 24 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  000c8	e8 00 00 00 00	 call	 ??H@YA?AUImVec2@@AEBU0@0@Z ; operator+
  000cd	8b 8d 08 02 00
	00		 mov	 ecx, DWORD PTR flags$[rbp]
  000d3	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000d7	f3 0f 10 9d 00
	02 00 00	 movss	 xmm3, DWORD PTR rounding$[rbp]
  000df	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR tv72[rbp]
  000e6	4c 8b c1	 mov	 r8, rcx
  000e9	48 8b d0	 mov	 rdx, rax
  000ec	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f3	e8 00 00 00 00	 call	 ?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z ; ImDrawList::PathRect

; 1391 :     else

  000f8	e9 96 00 00 00	 jmp	 $LN4@AddRect
$LN3@AddRect:

; 1392 :         PathRect(p_min + ImVec2(0.50f, 0.50f), p_max - ImVec2(0.49f, 0.49f), rounding, flags); // Better looking lower-right corner and rounded non-AA shapes.

  000fd	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3efae148
  00105	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3efae148
  0010d	48 8d 8d 44 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00114	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00119	4c 8b c0	 mov	 r8, rax
  0011c	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR p_max$[rbp]
  00123	48 8d 8d 64 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  0012a	e8 00 00 00 00	 call	 ??G@YA?AUImVec2@@AEBU0@0@Z ; operator-
  0012f	48 89 85 b8 01
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  00136	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f000000
  0013e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  00146	48 8d 8d 84 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  0014d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00152	4c 8b c0	 mov	 r8, rax
  00155	48 8b 95 e8 01
	00 00		 mov	 rdx, QWORD PTR p_min$[rbp]
  0015c	48 8d 8d a4 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00163	e8 00 00 00 00	 call	 ??H@YA?AUImVec2@@AEBU0@0@Z ; operator+
  00168	8b 8d 08 02 00
	00		 mov	 ecx, DWORD PTR flags$[rbp]
  0016e	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00172	f3 0f 10 9d 00
	02 00 00	 movss	 xmm3, DWORD PTR rounding$[rbp]
  0017a	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR tv93[rbp]
  00181	4c 8b c1	 mov	 r8, rcx
  00184	48 8b d0	 mov	 rdx, rax
  00187	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0018e	e8 00 00 00 00	 call	 ?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z ; ImDrawList::PathRect
$LN4@AddRect:

; 1393 :     PathStroke(col, ImDrawFlags_Closed, thickness);

  00193	f3 0f 10 9d 10
	02 00 00	 movss	 xmm3, DWORD PTR thickness$[rbp]
  0019b	41 b8 01 00 00
	00		 mov	 r8d, 1
  001a1	8b 95 f8 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  001a7	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ae	e8 00 00 00 00	 call	 ?PathStroke@ImDrawList@@QEAAXIHM@Z ; ImDrawList::PathStroke
$LN1@AddRect:

; 1394 : }

  001b3	48 8d a5 c8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+456]
  001ba	5f		 pop	 rdi
  001bb	5d		 pop	 rbp
  001bc	c3		 ret	 0
?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z ENDP	; ImDrawList::AddRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
$T4 = 292
this$ = 352
p1$ = 360
p2$ = 368
col$ = 376
thickness$ = 384
?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z PROC	; ImDrawList::AddLine, COMDAT

; 1375 : {

$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]

; 1376 :     if ((col & IM_COL32_A_MASK) == 0)

  00039	8b 85 78 01 00
	00		 mov	 eax, DWORD PTR col$[rbp]
  0003f	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00044	85 c0		 test	 eax, eax
  00046	75 05		 jne	 SHORT $LN2@AddLine

; 1377 :         return;

  00048	e9 9f 00 00 00	 jmp	 $LN1@AddLine
$LN2@AddLine:

; 1378 :     PathLineTo(p1 + ImVec2(0.5f, 0.5f));

  0004d	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f000000
  00055	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  0005d	48 8d 8d c4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00064	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00069	4c 8b c0	 mov	 r8, rax
  0006c	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR p1$[rbp]
  00073	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  0007a	e8 00 00 00 00	 call	 ??H@YA?AUImVec2@@AEBU0@0@Z ; operator+
  0007f	48 8b d0	 mov	 rdx, rax
  00082	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00089	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1379 :     PathLineTo(p2 + ImVec2(0.5f, 0.5f));

  0008e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f000000
  00096	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  0009e	48 8d 8d 04 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  000a5	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000aa	4c 8b c0	 mov	 r8, rax
  000ad	48 8b 95 70 01
	00 00		 mov	 rdx, QWORD PTR p2$[rbp]
  000b4	48 8d 8d 24 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  000bb	e8 00 00 00 00	 call	 ??H@YA?AUImVec2@@AEBU0@0@Z ; operator+
  000c0	48 8b d0	 mov	 rdx, rax
  000c3	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ca	e8 00 00 00 00	 call	 ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo

; 1380 :     PathStroke(col, 0, thickness);

  000cf	f3 0f 10 9d 80
	01 00 00	 movss	 xmm3, DWORD PTR thickness$[rbp]
  000d7	45 33 c0	 xor	 r8d, r8d
  000da	8b 95 78 01 00
	00		 mov	 edx, DWORD PTR col$[rbp]
  000e0	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e7	e8 00 00 00 00	 call	 ?PathStroke@ImDrawList@@QEAAXIHM@Z ; ImDrawList::PathStroke
$LN1@AddLine:

; 1381 : }

  000ec	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  000f3	5f		 pop	 rdi
  000f4	5d		 pop	 rbp
  000f5	c3		 ret	 0
?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ENDP	; ImDrawList::AddLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?PopTextureID@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
tv80 = 192
this$ = 240
?PopTextureID@ImDrawList@@QEAAXXZ PROC			; ImDrawList::PopTextureID, COMDAT

; 608  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 609  :     _TextureIdStack.pop_back();

  0002a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 c0 68	 add	 rax, 104		; 00000068H
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 ?pop_back@?$ImVector@PEAX@@QEAAXXZ ; ImVector<void * __ptr64>::pop_back

; 610  :     _CmdHeader.TextureId = (_TextureIdStack.Size == 0) ? (ImTextureID)NULL : _TextureIdStack.Data[_TextureIdStack.Size - 1];

  0003d	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00048	75 0d		 jne	 SHORT $LN3@PopTexture
  0004a	48 c7 85 c0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv80[rbp], 0
  00055	eb 24		 jmp	 SHORT $LN4@PopTexture
$LN3@PopTexture:
  00057	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005e	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  00061	ff c8		 dec	 eax
  00063	48 98		 cdqe
  00065	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006c	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00070	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00074	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv80[rbp], rax
$LN4@PopTexture:
  0007b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00082	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv80[rbp]
  00089	48 89 88 98 00
	00 00		 mov	 QWORD PTR [rax+152], rcx

; 611  :     _OnChangedTextureID();

  00090	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00097	e8 00 00 00 00	 call	 ?_OnChangedTextureID@ImDrawList@@QEAAXXZ ; ImDrawList::_OnChangedTextureID

; 612  : }

  0009c	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000a3	5f		 pop	 rdi
  000a4	5d		 pop	 rbp
  000a5	c3		 ret	 0
?PopTextureID@ImDrawList@@QEAAXXZ ENDP			; ImDrawList::PopTextureID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?PushTextureID@ImDrawList@@QEAAXPEAX@Z
_TEXT	SEGMENT
this$ = 224
texture_id$ = 232
?PushTextureID@ImDrawList@@QEAAXPEAX@Z PROC		; ImDrawList::PushTextureID, COMDAT

; 601  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 602  :     _TextureIdStack.push_back(texture_id);

  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 83 c0 68	 add	 rax, 104		; 00000068H
  0003a	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR texture_id$[rbp]
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 ?push_back@?$ImVector@PEAX@@QEAAXAEBQEAX@Z ; ImVector<void * __ptr64>::push_back

; 603  :     _CmdHeader.TextureId = texture_id;

  00049	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00050	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR texture_id$[rbp]
  00057	48 89 88 98 00
	00 00		 mov	 QWORD PTR [rax+152], rcx

; 604  :     _OnChangedTextureID();

  0005e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00065	e8 00 00 00 00	 call	 ?_OnChangedTextureID@ImDrawList@@QEAAXXZ ; ImDrawList::_OnChangedTextureID

; 605  : }

  0006a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00071	5f		 pop	 rdi
  00072	5d		 pop	 rbp
  00073	c3		 ret	 0
?PushTextureID@ImDrawList@@QEAAXPEAX@Z ENDP		; ImDrawList::PushTextureID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?PopClipRect@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
$T1 = 200
tv82 = 216
this$ = 256
?PopClipRect@ImDrawList@@QEAAXXZ PROC			; ImDrawList::PopClipRect, COMDAT

; 594  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec 00 01
	00 00		 sub	 rsp, 256		; 00000100H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 595  :     _ClipRectStack.pop_back();

  0002b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00032	48 83 c0 58	 add	 rax, 88			; 00000058H
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ?pop_back@?$ImVector@UImVec4@@@@QEAAXXZ ; ImVector<ImVec4>::pop_back

; 596  :     _CmdHeader.ClipRect = (_ClipRectStack.Size == 0) ? _Data->ClipRectFullscreen : _ClipRectStack.Data[_ClipRectStack.Size - 1];

  0003e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00045	83 78 58 00	 cmp	 DWORD PTR [rax+88], 0
  00049	75 18		 jne	 SHORT $LN3@PopClipRec
  0004b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00052	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00056	48 83 c0 1c	 add	 rax, 28
  0005a	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv82[rbp], rax
  00061	eb 24		 jmp	 SHORT $LN4@PopClipRec
$LN3@PopClipRec:
  00063	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	8b 40 58	 mov	 eax, DWORD PTR [rax+88]
  0006d	ff c8		 dec	 eax
  0006f	48 98		 cdqe
  00071	48 6b c0 10	 imul	 rax, rax, 16
  00075	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007c	48 03 41 60	 add	 rax, QWORD PTR [rcx+96]
  00080	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv82[rbp], rax
$LN4@PopClipRec:
  00087	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv82[rbp]
  0008e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00095	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009c	48 8d b8 88 00
	00 00		 lea	 rdi, QWORD PTR [rax+136]
  000a3	48 8b b5 c8 00
	00 00		 mov	 rsi, QWORD PTR $T1[rbp]
  000aa	b9 10 00 00 00	 mov	 ecx, 16
  000af	f3 a4		 rep movsb

; 597  :     _OnChangedClipRect();

  000b1	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b8	e8 00 00 00 00	 call	 ?_OnChangedClipRect@ImDrawList@@QEAAXXZ ; ImDrawList::_OnChangedClipRect

; 598  : }

  000bd	48 8d a5 e0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+224]
  000c4	5f		 pop	 rdi
  000c5	5e		 pop	 rsi
  000c6	5d		 pop	 rbp
  000c7	c3		 ret	 0
?PopClipRect@ImDrawList@@QEAAXXZ ENDP			; ImDrawList::PopClipRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?PushClipRectFullScreen@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
tv67 = 248
this$ = 288
?PushClipRectFullScreen@ImDrawList@@QEAAXXZ PROC	; ImDrawList::PushClipRectFullScreen, COMDAT

; 589  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 590  :     PushClipRect(ImVec2(_Data->ClipRectFullscreen.x, _Data->ClipRectFullscreen.y), ImVec2(_Data->ClipRectFullscreen.z, _Data->ClipRectFullscreen.w));

  0002a	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00035	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00040	f3 0f 10 50 28	 movss	 xmm2, DWORD PTR [rax+40]
  00045	f3 0f 10 49 24	 movss	 xmm1, DWORD PTR [rcx+36]
  0004a	48 8d 8d c4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00051	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00056	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv67[rbp], rax
  0005d	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00064	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00068	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0006f	48 8b 52 38	 mov	 rdx, QWORD PTR [rdx+56]
  00073	f3 0f 10 51 20	 movss	 xmm2, DWORD PTR [rcx+32]
  00078	f3 0f 10 4a 1c	 movss	 xmm1, DWORD PTR [rdx+28]
  0007d	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  00084	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00089	45 33 c9	 xor	 r9d, r9d
  0008c	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR tv67[rbp]
  00093	4c 8b c1	 mov	 r8, rcx
  00096	48 8b d0	 mov	 rdx, rax
  00099	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a0	e8 00 00 00 00	 call	 ?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z ; ImDrawList::PushClipRect

; 591  : }

  000a5	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000ac	5f		 pop	 rdi
  000ad	5d		 pop	 rbp
  000ae	c3		 ret	 0
?PushClipRectFullScreen@ImDrawList@@QEAAXXZ ENDP	; ImDrawList::PushClipRectFullScreen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z
_TEXT	SEGMENT
cr$ = 8
current$5 = 56
__$ArrayPad$ = 280
this$ = 320
cr_min$ = 328
cr_max$ = 336
intersect_with_current_clip_rect$ = 344
?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z PROC	; ImDrawList::PushClipRect, COMDAT

; 570  : {

$LN8:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 50 01
	00 00		 sub	 rsp, 336		; 00000150H
  0001e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 54 00 00 00	 mov	 ecx, 84			; 00000054H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 18 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 571  :     ImVec4 cr(cr_min.x, cr_min.y, cr_max.x, cr_max.y);

  0004b	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR cr_max$[rbp]
  00052	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00057	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0005d	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR cr_max$[rbp]
  00064	f3 0f 10 18	 movss	 xmm3, DWORD PTR [rax]
  00068	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR cr_min$[rbp]
  0006f	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  00074	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR cr_min$[rbp]
  0007b	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  0007f	48 8d 4d 08	 lea	 rcx, QWORD PTR cr$[rbp]
  00083	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4

; 572  :     if (intersect_with_current_clip_rect)

  00088	0f b6 85 58 01
	00 00		 movzx	 eax, BYTE PTR intersect_with_current_clip_rect$[rbp]
  0008f	85 c0		 test	 eax, eax
  00091	74 70		 je	 SHORT $LN2@PushClipRe

; 573  :     {
; 574  :         ImVec4 current = _CmdHeader.ClipRect;

  00093	48 8d 45 38	 lea	 rax, QWORD PTR current$5[rbp]
  00097	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009e	48 8b f8	 mov	 rdi, rax
  000a1	48 8d b1 88 00
	00 00		 lea	 rsi, QWORD PTR [rcx+136]
  000a8	b9 10 00 00 00	 mov	 ecx, 16
  000ad	f3 a4		 rep movsb

; 575  :         if (cr.x < current.x) cr.x = current.x;

  000af	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR current$5[rbp]
  000b4	0f 2f 45 08	 comiss	 xmm0, DWORD PTR cr$[rbp]
  000b8	76 0a		 jbe	 SHORT $LN3@PushClipRe
  000ba	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR current$5[rbp]
  000bf	f3 0f 11 45 08	 movss	 DWORD PTR cr$[rbp], xmm0
$LN3@PushClipRe:

; 576  :         if (cr.y < current.y) cr.y = current.y;

  000c4	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR current$5[rbp+4]
  000c9	0f 2f 45 0c	 comiss	 xmm0, DWORD PTR cr$[rbp+4]
  000cd	76 0a		 jbe	 SHORT $LN4@PushClipRe
  000cf	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR current$5[rbp+4]
  000d4	f3 0f 11 45 0c	 movss	 DWORD PTR cr$[rbp+4], xmm0
$LN4@PushClipRe:

; 577  :         if (cr.z > current.z) cr.z = current.z;

  000d9	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR cr$[rbp+8]
  000de	0f 2f 45 40	 comiss	 xmm0, DWORD PTR current$5[rbp+8]
  000e2	76 0a		 jbe	 SHORT $LN5@PushClipRe
  000e4	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR current$5[rbp+8]
  000e9	f3 0f 11 45 10	 movss	 DWORD PTR cr$[rbp+8], xmm0
$LN5@PushClipRe:

; 578  :         if (cr.w > current.w) cr.w = current.w;

  000ee	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR cr$[rbp+12]
  000f3	0f 2f 45 44	 comiss	 xmm0, DWORD PTR current$5[rbp+12]
  000f7	76 0a		 jbe	 SHORT $LN6@PushClipRe
  000f9	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR current$5[rbp+12]
  000fe	f3 0f 11 45 14	 movss	 DWORD PTR cr$[rbp+12], xmm0
$LN6@PushClipRe:
$LN2@PushClipRe:

; 579  :     }
; 580  :     cr.z = ImMax(cr.x, cr.z);

  00103	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR cr$[rbp+8]
  00108	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR cr$[rbp]
  0010d	e8 00 00 00 00	 call	 ??$ImMax@M@@YAMMM@Z	; ImMax<float>
  00112	f3 0f 11 45 10	 movss	 DWORD PTR cr$[rbp+8], xmm0

; 581  :     cr.w = ImMax(cr.y, cr.w);

  00117	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR cr$[rbp+12]
  0011c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR cr$[rbp+4]
  00121	e8 00 00 00 00	 call	 ??$ImMax@M@@YAMMM@Z	; ImMax<float>
  00126	f3 0f 11 45 14	 movss	 DWORD PTR cr$[rbp+12], xmm0

; 582  : 
; 583  :     _ClipRectStack.push_back(cr);

  0012b	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00132	48 83 c0 58	 add	 rax, 88			; 00000058H
  00136	48 8d 55 08	 lea	 rdx, QWORD PTR cr$[rbp]
  0013a	48 8b c8	 mov	 rcx, rax
  0013d	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImVec4@@@@QEAAXAEBUImVec4@@@Z ; ImVector<ImVec4>::push_back

; 584  :     _CmdHeader.ClipRect = cr;

  00142	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00149	48 8d 4d 08	 lea	 rcx, QWORD PTR cr$[rbp]
  0014d	48 8d b8 88 00
	00 00		 lea	 rdi, QWORD PTR [rax+136]
  00154	48 8b f1	 mov	 rsi, rcx
  00157	b9 10 00 00 00	 mov	 ecx, 16
  0015c	f3 a4		 rep movsb

; 585  :     _OnChangedClipRect();

  0015e	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00165	e8 00 00 00 00	 call	 ?_OnChangedClipRect@ImDrawList@@QEAAXXZ ; ImDrawList::_OnChangedClipRect

; 586  : }

  0016a	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  0016e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z$rtcFrameData
  00175	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0017a	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00181	48 33 cd	 xor	 rcx, rbp
  00184	e8 00 00 00 00	 call	 __security_check_cookie
  00189	48 8d a5 20 01
	00 00		 lea	 rsp, QWORD PTR [rbp+288]
  00190	5f		 pop	 rdi
  00191	5e		 pop	 rsi
  00192	5d		 pop	 rbp
  00193	c3		 ret	 0
?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z ENDP	; ImDrawList::PushClipRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
shared_data$ = 264
??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z PROC	; ImDrawList::ImDrawList, COMDAT

; 2520 :     ImDrawList(ImDrawListSharedData* shared_data) { memset(this, 0, sizeof(*this)); _Data = shared_data; }

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 ??0?$ImVector@UImDrawCmd@@@@QEAA@XZ ; ImVector<ImDrawCmd>::ImVector<ImDrawCmd>
  00049	90		 npad	 1
  0004a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00051	48 83 c0 10	 add	 rax, 16
  00055	48 8b c8	 mov	 rcx, rax
  00058	e8 00 00 00 00	 call	 ??0?$ImVector@G@@QEAA@XZ ; ImVector<unsigned short>::ImVector<unsigned short>
  0005d	90		 npad	 1
  0005e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00065	48 83 c0 20	 add	 rax, 32			; 00000020H
  00069	48 8b c8	 mov	 rcx, rax
  0006c	e8 00 00 00 00	 call	 ??0?$ImVector@UImDrawVert@@@@QEAA@XZ ; ImVector<ImDrawVert>::ImVector<ImDrawVert>
  00071	90		 npad	 1
  00072	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00079	48 83 c0 58	 add	 rax, 88			; 00000058H
  0007d	48 8b c8	 mov	 rcx, rax
  00080	e8 00 00 00 00	 call	 ??0?$ImVector@UImVec4@@@@QEAA@XZ ; ImVector<ImVec4>::ImVector<ImVec4>
  00085	90		 npad	 1
  00086	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008d	48 83 c0 68	 add	 rax, 104		; 00000068H
  00091	48 8b c8	 mov	 rcx, rax
  00094	e8 00 00 00 00	 call	 ??0?$ImVector@PEAX@@QEAA@XZ ; ImVector<void * __ptr64>::ImVector<void * __ptr64>
  00099	90		 npad	 1
  0009a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a1	48 83 c0 78	 add	 rax, 120		; 00000078H
  000a5	48 8b c8	 mov	 rcx, rax
  000a8	e8 00 00 00 00	 call	 ??0?$ImVector@UImVec2@@@@QEAA@XZ ; ImVector<ImVec2>::ImVector<ImVec2>
  000ad	90		 npad	 1
  000ae	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b5	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  000bb	48 8b c8	 mov	 rcx, rax
  000be	e8 00 00 00 00	 call	 ??0ImDrawCmdHeader@@QEAA@XZ
  000c3	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ca	48 05 a8 00 00
	00		 add	 rax, 168		; 000000a8H
  000d0	48 8b c8	 mov	 rcx, rax
  000d3	e8 00 00 00 00	 call	 ??0ImDrawListSplitter@@QEAA@XZ ; ImDrawListSplitter::ImDrawListSplitter
  000d8	41 b8 c8 00 00
	00		 mov	 r8d, 200		; 000000c8H
  000de	33 d2		 xor	 edx, edx
  000e0	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e7	e8 00 00 00 00	 call	 memset
  000ec	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f3	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR shared_data$[rbp]
  000fa	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx
  000fe	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00105	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0010c	5f		 pop	 rdi
  0010d	5d		 pop	 rbp
  0010e	c3		 ret	 0
??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z ENDP	; ImDrawList::ImDrawList
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
shared_data$ = 264
?dtor$0@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA PROC ; `ImDrawList::ImDrawList'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$ImVector@UImDrawCmd@@@@QEAA@XZ ; ImVector<ImDrawCmd>::~ImVector<ImDrawCmd>
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA ENDP ; `ImDrawList::ImDrawList'::`1'::dtor$0
$T1 = 200
this$ = 256
shared_data$ = 264
?dtor$1@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA PROC ; `ImDrawList::ImDrawList'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	48 83 c1 10	 add	 rcx, 16
  00046	e8 00 00 00 00	 call	 ??1?$ImVector@G@@QEAA@XZ ; ImVector<unsigned short>::~ImVector<unsigned short>
  0004b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
?dtor$1@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA ENDP ; `ImDrawList::ImDrawList'::`1'::dtor$1
$T1 = 200
this$ = 256
shared_data$ = 264
?dtor$2@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA PROC ; `ImDrawList::ImDrawList'::`1'::dtor$2
  00052	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00057	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0005c	55		 push	 rbp
  0005d	57		 push	 rdi
  0005e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00062	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00066	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006d	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00071	e8 00 00 00 00	 call	 ??1?$ImVector@UImDrawVert@@@@QEAA@XZ ; ImVector<ImDrawVert>::~ImVector<ImDrawVert>
  00076	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
?dtor$2@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA ENDP ; `ImDrawList::ImDrawList'::`1'::dtor$2
$T1 = 200
this$ = 256
shared_data$ = 264
?dtor$3@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA PROC ; `ImDrawList::ImDrawList'::`1'::dtor$3
  0007d	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00082	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00087	55		 push	 rbp
  00088	57		 push	 rdi
  00089	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0008d	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00091	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00098	48 83 c1 58	 add	 rcx, 88			; 00000058H
  0009c	e8 00 00 00 00	 call	 ??1?$ImVector@UImVec4@@@@QEAA@XZ ; ImVector<ImVec4>::~ImVector<ImVec4>
  000a1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000a5	5f		 pop	 rdi
  000a6	5d		 pop	 rbp
  000a7	c3		 ret	 0
?dtor$3@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA ENDP ; `ImDrawList::ImDrawList'::`1'::dtor$3
$T1 = 200
this$ = 256
shared_data$ = 264
?dtor$4@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA PROC ; `ImDrawList::ImDrawList'::`1'::dtor$4
  000a8	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000ad	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000b2	55		 push	 rbp
  000b3	57		 push	 rdi
  000b4	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000b8	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  000bc	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c3	48 83 c1 68	 add	 rcx, 104		; 00000068H
  000c7	e8 00 00 00 00	 call	 ??1?$ImVector@PEAX@@QEAA@XZ ; ImVector<void * __ptr64>::~ImVector<void * __ptr64>
  000cc	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000d0	5f		 pop	 rdi
  000d1	5d		 pop	 rbp
  000d2	c3		 ret	 0
?dtor$4@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA ENDP ; `ImDrawList::ImDrawList'::`1'::dtor$4
$T1 = 200
this$ = 256
shared_data$ = 264
?dtor$5@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA PROC ; `ImDrawList::ImDrawList'::`1'::dtor$5
  000d3	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000d8	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000dd	55		 push	 rbp
  000de	57		 push	 rdi
  000df	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000e3	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  000e7	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ee	48 83 c1 78	 add	 rcx, 120		; 00000078H
  000f2	e8 00 00 00 00	 call	 ??1?$ImVector@UImVec2@@@@QEAA@XZ ; ImVector<ImVec2>::~ImVector<ImVec2>
  000f7	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000fb	5f		 pop	 rdi
  000fc	5d		 pop	 rbp
  000fd	c3		 ret	 0
?dtor$5@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA ENDP ; `ImDrawList::ImDrawList'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
shared_data$ = 264
?dtor$0@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA PROC ; `ImDrawList::ImDrawList'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$ImVector@UImDrawCmd@@@@QEAA@XZ ; ImVector<ImDrawCmd>::~ImVector<ImDrawCmd>
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA ENDP ; `ImDrawList::ImDrawList'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
shared_data$ = 264
?dtor$1@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA PROC ; `ImDrawList::ImDrawList'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	48 83 c1 10	 add	 rcx, 16
  00046	e8 00 00 00 00	 call	 ??1?$ImVector@G@@QEAA@XZ ; ImVector<unsigned short>::~ImVector<unsigned short>
  0004b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
?dtor$1@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA ENDP ; `ImDrawList::ImDrawList'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
shared_data$ = 264
?dtor$2@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA PROC ; `ImDrawList::ImDrawList'::`1'::dtor$2
  00052	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00057	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0005c	55		 push	 rbp
  0005d	57		 push	 rdi
  0005e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00062	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00066	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006d	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00071	e8 00 00 00 00	 call	 ??1?$ImVector@UImDrawVert@@@@QEAA@XZ ; ImVector<ImDrawVert>::~ImVector<ImDrawVert>
  00076	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
?dtor$2@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA ENDP ; `ImDrawList::ImDrawList'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
shared_data$ = 264
?dtor$3@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA PROC ; `ImDrawList::ImDrawList'::`1'::dtor$3
  0007d	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00082	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00087	55		 push	 rbp
  00088	57		 push	 rdi
  00089	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0008d	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00091	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00098	48 83 c1 58	 add	 rcx, 88			; 00000058H
  0009c	e8 00 00 00 00	 call	 ??1?$ImVector@UImVec4@@@@QEAA@XZ ; ImVector<ImVec4>::~ImVector<ImVec4>
  000a1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000a5	5f		 pop	 rdi
  000a6	5d		 pop	 rbp
  000a7	c3		 ret	 0
?dtor$3@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA ENDP ; `ImDrawList::ImDrawList'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
shared_data$ = 264
?dtor$4@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA PROC ; `ImDrawList::ImDrawList'::`1'::dtor$4
  000a8	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000ad	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000b2	55		 push	 rbp
  000b3	57		 push	 rdi
  000b4	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000b8	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  000bc	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c3	48 83 c1 68	 add	 rcx, 104		; 00000068H
  000c7	e8 00 00 00 00	 call	 ??1?$ImVector@PEAX@@QEAA@XZ ; ImVector<void * __ptr64>::~ImVector<void * __ptr64>
  000cc	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000d0	5f		 pop	 rdi
  000d1	5d		 pop	 rbp
  000d2	c3		 ret	 0
?dtor$4@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA ENDP ; `ImDrawList::ImDrawList'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
shared_data$ = 264
?dtor$5@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA PROC ; `ImDrawList::ImDrawList'::`1'::dtor$5
  000d3	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000d8	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000dd	55		 push	 rbp
  000de	57		 push	 rdi
  000df	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000e3	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  000e7	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ee	48 83 c1 78	 add	 rcx, 120		; 00000078H
  000f2	e8 00 00 00 00	 call	 ??1?$ImVector@UImVec2@@@@QEAA@XZ ; ImVector<ImVec2>::~ImVector<ImVec2>
  000f7	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000fb	5f		 pop	 rdi
  000fc	5d		 pop	 rbp
  000fd	c3		 ret	 0
?dtor$5@?0???0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z@4HA ENDP ; `ImDrawList::ImDrawList'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z PROC ; ImVector<ImVec2>::push_back, COMDAT

; 1807 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00040	39 08		 cmp	 DWORD PTR [rax], ecx
  00042	75 27		 jne	 SHORT $LN2@push_back
  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	8b 00		 mov	 eax, DWORD PTR [rax]
  0004d	ff c0		 inc	 eax
  0004f	8b d0		 mov	 edx, eax
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z ; ImVector<ImVec2>::_grow_capacity
  0005d	8b d0		 mov	 edx, eax
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z ; ImVector<ImVec2>::reserve
$LN2@push_back:
  0006b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00075	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00080	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00084	41 b8 08 00 00
	00		 mov	 r8d, 8
  0008a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00091	48 8b c8	 mov	 rcx, rax
  00094	e8 00 00 00 00	 call	 memcpy
  00099	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a0	8b 00		 mov	 eax, DWORD PTR [rax]
  000a2	ff c0		 inc	 eax
  000a4	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	89 01		 mov	 DWORD PTR [rcx], eax
  000ad	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b4	5f		 pop	 rdi
  000b5	5d		 pop	 rbp
  000b6	c3		 ret	 0
?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ENDP ; ImVector<ImVec2>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve_discard@?$ImVector@UImVec2@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_capacity$ = 232
?reserve_discard@?$ImVector@UImVec2@@@@QEAAXH@Z PROC	; ImVector<ImVec2>::reserve_discard, COMDAT

; 1804 :     inline void         reserve_discard(int new_capacity)   { if (new_capacity <= Capacity) return; if (Data) IM_FREE(Data); Data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 e8 00 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve_di
  00040	eb 4c		 jmp	 SHORT $LN1@reserve_di
$LN2@reserve_di:
  00042	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0004e	74 10		 je	 SHORT $LN3@reserve_di
  00050	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005b	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve_di:
  00060	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00067	48 c1 e0 03	 shl	 rax, 3
  0006b	48 8b c8	 mov	 rcx, rax
  0006e	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00073	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007a	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0007e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00085	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  0008b	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve_di:
  0008e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00095	5f		 pop	 rdi
  00096	5d		 pop	 rbp
  00097	c3		 ret	 0
?reserve_discard@?$ImVector@UImVec2@@@@QEAAXH@Z ENDP	; ImVector<ImVec2>::reserve_discard
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z PROC		; ImVector<ImVec2>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 c1 e0 03	 shl	 rax, 3
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 c1 e0 03	 shl	 rax, 3
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z ENDP		; ImVector<ImVec2>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?resize@?$ImVector@UImVec2@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImVec2@@@@QEAAXH@Z PROC		; ImVector<ImVec2>::resize, COMDAT

; 1800 :     inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 e8 00 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  0003e	7e 20		 jle	 SHORT $LN2@resize
  00040	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  00046	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z ; ImVector<ImVec2>::_grow_capacity
  00052	8b d0		 mov	 edx, eax
  00054	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z ; ImVector<ImVec2>::reserve
$LN2@resize:
  00060	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  0006d	89 08		 mov	 DWORD PTR [rax], ecx
  0006f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
?resize@?$ImVector@UImVec2@@@@QEAAXH@Z ENDP		; ImVector<ImVec2>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z PROC	; ImVector<ImVec2>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z ENDP	; ImVector<ImVec2>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ PROC	; ImVector<ImVec2>::back, COMDAT

; 1795 :     inline T&           back()                              { IM_ASSERT(Size > 0); return Data[Size - 1]; }

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	83 38 00	 cmp	 DWORD PTR [rax], 0
  00034	7f 1c		 jg	 SHORT $LN3@back
  00036	41 b8 03 07 00
	00		 mov	 r8d, 1795		; 00000703H
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00050	33 c0		 xor	 eax, eax
$LN3@back:
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	8b 00		 mov	 eax, DWORD PTR [rax]
  0005b	ff c8		 dec	 eax
  0005d	48 98		 cdqe
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0006a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0006e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00075	5f		 pop	 rdi
  00076	5d		 pop	 rbp
  00077	c3		 ret	 0
?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ ENDP	; ImVector<ImVec2>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@UImVec2@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImVec2@@@@QEAAXXZ PROC		; ImVector<ImVec2>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@UImVec2@@@@QEAAXXZ ENDP		; ImVector<ImVec2>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@UImVec2@@@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@UImVec2@@@@QEAA@XZ PROC			; ImVector<ImVec2>::~ImVector<ImVec2>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@UImVec2@@@@QEAA@XZ ENDP			; ImVector<ImVec2>::~ImVector<ImVec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@UImVec2@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImVec2@@@@QEAA@XZ PROC			; ImVector<ImVec2>::ImVector<ImVec2>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@UImVec2@@@@QEAA@XZ ENDP			; ImVector<ImVec2>::ImVector<ImVec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?pop_back@?$ImVector@PEAX@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?pop_back@?$ImVector@PEAX@@QEAAXXZ PROC			; ImVector<void * __ptr64>::pop_back, COMDAT

; 1808 :     inline void         pop_back()                          { IM_ASSERT(Size > 0); Size--; }

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	83 38 00	 cmp	 DWORD PTR [rax], 0
  00034	7f 1c		 jg	 SHORT $LN3@pop_back
  00036	41 b8 10 07 00
	00		 mov	 r8d, 1808		; 00000710H
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00050	33 c0		 xor	 eax, eax
$LN3@pop_back:
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	8b 00		 mov	 eax, DWORD PTR [rax]
  0005b	ff c8		 dec	 eax
  0005d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00064	89 01		 mov	 DWORD PTR [rcx], eax
  00066	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006d	5f		 pop	 rdi
  0006e	5d		 pop	 rbp
  0006f	c3		 ret	 0
?pop_back@?$ImVector@PEAX@@QEAAXXZ ENDP			; ImVector<void * __ptr64>::pop_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@PEAX@@QEAAXAEBQEAX@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@PEAX@@QEAAXAEBQEAX@Z PROC		; ImVector<void * __ptr64>::push_back, COMDAT

; 1807 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00040	39 08		 cmp	 DWORD PTR [rax], ecx
  00042	75 27		 jne	 SHORT $LN2@push_back
  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	8b 00		 mov	 eax, DWORD PTR [rax]
  0004d	ff c0		 inc	 eax
  0004f	8b d0		 mov	 edx, eax
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@PEAX@@QEBAHH@Z ; ImVector<void * __ptr64>::_grow_capacity
  0005d	8b d0		 mov	 edx, eax
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?reserve@?$ImVector@PEAX@@QEAAXH@Z ; ImVector<void * __ptr64>::reserve
$LN2@push_back:
  0006b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00075	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00080	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00084	41 b8 08 00 00
	00		 mov	 r8d, 8
  0008a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00091	48 8b c8	 mov	 rcx, rax
  00094	e8 00 00 00 00	 call	 memcpy
  00099	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a0	8b 00		 mov	 eax, DWORD PTR [rax]
  000a2	ff c0		 inc	 eax
  000a4	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	89 01		 mov	 DWORD PTR [rcx], eax
  000ad	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b4	5f		 pop	 rdi
  000b5	5d		 pop	 rbp
  000b6	c3		 ret	 0
?push_back@?$ImVector@PEAX@@QEAAXAEBQEAX@Z ENDP		; ImVector<void * __ptr64>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@PEAX@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@PEAX@@QEAAXH@Z PROC			; ImVector<void * __ptr64>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 c1 e0 03	 shl	 rax, 3
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 c1 e0 03	 shl	 rax, 3
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@PEAX@@QEAAXH@Z ENDP			; ImVector<void * __ptr64>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?resize@?$ImVector@PEAX@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@PEAX@@QEAAXH@Z PROC			; ImVector<void * __ptr64>::resize, COMDAT

; 1800 :     inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 e8 00 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  0003e	7e 20		 jle	 SHORT $LN2@resize
  00040	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  00046	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@PEAX@@QEBAHH@Z ; ImVector<void * __ptr64>::_grow_capacity
  00052	8b d0		 mov	 edx, eax
  00054	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	e8 00 00 00 00	 call	 ?reserve@?$ImVector@PEAX@@QEAAXH@Z ; ImVector<void * __ptr64>::reserve
$LN2@resize:
  00060	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  0006d	89 08		 mov	 DWORD PTR [rax], ecx
  0006f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
?resize@?$ImVector@PEAX@@QEAAXH@Z ENDP			; ImVector<void * __ptr64>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@PEAX@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@PEAX@@QEBAHH@Z PROC		; ImVector<void * __ptr64>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@PEAX@@QEBAHH@Z ENDP		; ImVector<void * __ptr64>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@PEAX@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@PEAX@@QEAAXXZ PROC			; ImVector<void * __ptr64>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@PEAX@@QEAAXXZ ENDP			; ImVector<void * __ptr64>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@PEAX@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@PEAX@@QEAA@XZ PROC			; ImVector<void * __ptr64>::~ImVector<void * __ptr64>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@PEAX@@QEAA@XZ ENDP			; ImVector<void * __ptr64>::~ImVector<void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@PEAX@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@PEAX@@QEAA@XZ PROC			; ImVector<void * __ptr64>::ImVector<void * __ptr64>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@PEAX@@QEAA@XZ ENDP			; ImVector<void * __ptr64>::ImVector<void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?pop_back@?$ImVector@UImVec4@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?pop_back@?$ImVector@UImVec4@@@@QEAAXXZ PROC		; ImVector<ImVec4>::pop_back, COMDAT

; 1808 :     inline void         pop_back()                          { IM_ASSERT(Size > 0); Size--; }

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	83 38 00	 cmp	 DWORD PTR [rax], 0
  00034	7f 1c		 jg	 SHORT $LN3@pop_back
  00036	41 b8 10 07 00
	00		 mov	 r8d, 1808		; 00000710H
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00050	33 c0		 xor	 eax, eax
$LN3@pop_back:
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	8b 00		 mov	 eax, DWORD PTR [rax]
  0005b	ff c8		 dec	 eax
  0005d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00064	89 01		 mov	 DWORD PTR [rcx], eax
  00066	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006d	5f		 pop	 rdi
  0006e	5d		 pop	 rbp
  0006f	c3		 ret	 0
?pop_back@?$ImVector@UImVec4@@@@QEAAXXZ ENDP		; ImVector<ImVec4>::pop_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@UImVec4@@@@QEAAXAEBUImVec4@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@UImVec4@@@@QEAAXAEBUImVec4@@@Z PROC ; ImVector<ImVec4>::push_back, COMDAT

; 1807 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00040	39 08		 cmp	 DWORD PTR [rax], ecx
  00042	75 27		 jne	 SHORT $LN2@push_back
  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	8b 00		 mov	 eax, DWORD PTR [rax]
  0004d	ff c0		 inc	 eax
  0004f	8b d0		 mov	 edx, eax
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@UImVec4@@@@QEBAHH@Z ; ImVector<ImVec4>::_grow_capacity
  0005d	8b d0		 mov	 edx, eax
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z ; ImVector<ImVec4>::reserve
$LN2@push_back:
  0006b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00075	48 6b c0 10	 imul	 rax, rax, 16
  00079	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00080	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00084	41 b8 10 00 00
	00		 mov	 r8d, 16
  0008a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00091	48 8b c8	 mov	 rcx, rax
  00094	e8 00 00 00 00	 call	 memcpy
  00099	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a0	8b 00		 mov	 eax, DWORD PTR [rax]
  000a2	ff c0		 inc	 eax
  000a4	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	89 01		 mov	 DWORD PTR [rcx], eax
  000ad	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b4	5f		 pop	 rdi
  000b5	5d		 pop	 rbp
  000b6	c3		 ret	 0
?push_back@?$ImVector@UImVec4@@@@QEAAXAEBUImVec4@@@Z ENDP ; ImVector<ImVec4>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z PROC		; ImVector<ImVec4>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 6b c0 10	 imul	 rax, rax, 16
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 6b c0 10	 imul	 rax, rax, 16
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z ENDP		; ImVector<ImVec4>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?resize@?$ImVector@UImVec4@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImVec4@@@@QEAAXH@Z PROC		; ImVector<ImVec4>::resize, COMDAT

; 1800 :     inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 e8 00 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  0003e	7e 20		 jle	 SHORT $LN2@resize
  00040	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  00046	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@UImVec4@@@@QEBAHH@Z ; ImVector<ImVec4>::_grow_capacity
  00052	8b d0		 mov	 edx, eax
  00054	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z ; ImVector<ImVec4>::reserve
$LN2@resize:
  00060	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  0006d	89 08		 mov	 DWORD PTR [rax], ecx
  0006f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
?resize@?$ImVector@UImVec4@@@@QEAAXH@Z ENDP		; ImVector<ImVec4>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@UImVec4@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImVec4@@@@QEBAHH@Z PROC	; ImVector<ImVec4>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@UImVec4@@@@QEBAHH@Z ENDP	; ImVector<ImVec4>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@UImVec4@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImVec4@@@@QEAAXXZ PROC		; ImVector<ImVec4>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@UImVec4@@@@QEAAXXZ ENDP		; ImVector<ImVec4>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@UImVec4@@@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@UImVec4@@@@QEAA@XZ PROC			; ImVector<ImVec4>::~ImVector<ImVec4>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@UImVec4@@@@QEAA@XZ ENDP			; ImVector<ImVec4>::~ImVector<ImVec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@UImVec4@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImVec4@@@@QEAA@XZ PROC			; ImVector<ImVec4>::ImVector<ImVec4>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@UImVec4@@@@QEAA@XZ ENDP			; ImVector<ImVec4>::ImVector<ImVec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@UImDrawVert@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImDrawVert@@@@QEAAXH@Z PROC	; ImVector<ImDrawVert>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 6b c0 14	 imul	 rax, rax, 20
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 6b c0 14	 imul	 rax, rax, 20
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@UImDrawVert@@@@QEAAXH@Z ENDP	; ImVector<ImDrawVert>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?shrink@?$ImVector@UImDrawVert@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?shrink@?$ImVector@UImDrawVert@@@@QEAAXH@Z PROC		; ImVector<ImDrawVert>::shrink, COMDAT

; 1802 :     inline void         shrink(int new_size)                { IM_ASSERT(new_size <= Size); Size = new_size; } // Resize a vector to a smaller size, guaranteed not to cause a reallocation

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 00		 mov	 eax, DWORD PTR [rax]
  00037	39 85 e8 00 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  0003d	7e 1c		 jle	 SHORT $LN3@shrink
  0003f	41 b8 0a 07 00
	00		 mov	 r8d, 1802		; 0000070aH
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@BPLGCGDC@?$AAn?$AAe?$AAw?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00059	33 c0		 xor	 eax, eax
$LN3@shrink:
  0005b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  00068	89 08		 mov	 DWORD PTR [rax], ecx
  0006a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00071	5f		 pop	 rdi
  00072	5d		 pop	 rbp
  00073	c3		 ret	 0
?shrink@?$ImVector@UImDrawVert@@@@QEAAXH@Z ENDP		; ImVector<ImDrawVert>::shrink
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z PROC		; ImVector<ImDrawVert>::resize, COMDAT

; 1800 :     inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 e8 00 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  0003e	7e 20		 jle	 SHORT $LN2@resize
  00040	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  00046	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@UImDrawVert@@@@QEBAHH@Z ; ImVector<ImDrawVert>::_grow_capacity
  00052	8b d0		 mov	 edx, eax
  00054	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UImDrawVert@@@@QEAAXH@Z ; ImVector<ImDrawVert>::reserve
$LN2@resize:
  00060	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  0006d	89 08		 mov	 DWORD PTR [rax], ecx
  0006f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z ENDP		; ImVector<ImDrawVert>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@UImDrawVert@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImDrawVert@@@@QEBAHH@Z PROC	; ImVector<ImDrawVert>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@UImDrawVert@@@@QEBAHH@Z ENDP	; ImVector<ImDrawVert>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?swap@?$ImVector@UImDrawVert@@@@QEAAXAEAU1@@Z
_TEXT	SEGMENT
rhs_size$ = 4
rhs_cap$ = 36
rhs_data$ = 72
this$ = 320
rhs$ = 328
?swap@?$ImVector@UImDrawVert@@@@QEAAXAEAU1@@Z PROC	; ImVector<ImDrawVert>::swap, COMDAT

; 1797 :     inline void         swap(ImVector<T>& rhs)              { int rhs_size = rhs.Size; rhs.Size = Size; Size = rhs_size; int rhs_cap = rhs.Capacity; rhs.Capacity = Capacity; Capacity = rhs_cap; T* rhs_data = rhs.Data; rhs.Data = Data; Data = rhs_data; }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002d	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR rhs$[rbp]
  00034	8b 00		 mov	 eax, DWORD PTR [rax]
  00036	89 45 04	 mov	 DWORD PTR rhs_size$[rbp], eax
  00039	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR rhs$[rbp]
  00040	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00047	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00049	89 08		 mov	 DWORD PTR [rax], ecx
  0004b	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00052	8b 4d 04	 mov	 ecx, DWORD PTR rhs_size$[rbp]
  00055	89 08		 mov	 DWORD PTR [rax], ecx
  00057	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR rhs$[rbp]
  0005e	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00061	89 45 24	 mov	 DWORD PTR rhs_cap$[rbp], eax
  00064	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR rhs$[rbp]
  0006b	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00075	89 48 04	 mov	 DWORD PTR [rax+4], ecx
  00078	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	8b 4d 24	 mov	 ecx, DWORD PTR rhs_cap$[rbp]
  00082	89 48 04	 mov	 DWORD PTR [rax+4], ecx
  00085	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR rhs$[rbp]
  0008c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00090	48 89 45 48	 mov	 QWORD PTR rhs_data$[rbp], rax
  00094	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR rhs$[rbp]
  0009b	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a2	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000a6	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000aa	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b1	48 8b 4d 48	 mov	 rcx, QWORD PTR rhs_data$[rbp]
  000b5	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000b9	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000c0	5f		 pop	 rdi
  000c1	5d		 pop	 rbp
  000c2	c3		 ret	 0
?swap@?$ImVector@UImDrawVert@@@@QEAAXAEAU1@@Z ENDP	; ImVector<ImDrawVert>::swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z PROC ; ImVector<ImDrawVert>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 6b c0 14	 imul	 rax, rax, 20
  0006f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z ENDP ; ImVector<ImDrawVert>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ PROC		; ImVector<ImDrawVert>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ ENDP		; ImVector<ImDrawVert>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@UImDrawVert@@@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@UImDrawVert@@@@QEAA@XZ PROC		; ImVector<ImDrawVert>::~ImVector<ImDrawVert>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@UImDrawVert@@@@QEAA@XZ ENDP		; ImVector<ImDrawVert>::~ImVector<ImDrawVert>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??4?$ImVector@UImDrawVert@@@@QEAAAEAU0@AEBU0@@Z
_TEXT	SEGMENT
this$ = 224
src$ = 232
??4?$ImVector@UImDrawVert@@@@QEAAAEAU0@AEBU0@@Z PROC	; ImVector<ImDrawVert>::operator=, COMDAT

; 1774 :     inline ImVector<T>& operator=(const ImVector<T>& src)   { clear(); resize(src.Size); if (src.Data) memcpy(Data, src.Data, (size_t)Size * sizeof(T)); return *this; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00036	e8 00 00 00 00	 call	 ?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ ; ImVector<ImDrawVert>::clear
  0003b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR src$[rbp]
  00042	8b 10		 mov	 edx, DWORD PTR [rax]
  00044	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004b	e8 00 00 00 00	 call	 ?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z ; ImVector<ImDrawVert>::resize
  00050	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR src$[rbp]
  00057	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0005c	74 2c		 je	 SHORT $LN2@operator
  0005e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00065	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00068	48 6b c0 14	 imul	 rax, rax, 20
  0006c	4c 8b c0	 mov	 r8, rax
  0006f	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR src$[rbp]
  00076	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0007a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00081	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00085	e8 00 00 00 00	 call	 memcpy
$LN2@operator:
  0008a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00091	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00098	5f		 pop	 rdi
  00099	5d		 pop	 rbp
  0009a	c3		 ret	 0
??4?$ImVector@UImDrawVert@@@@QEAAAEAU0@AEBU0@@Z ENDP	; ImVector<ImDrawVert>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@UImDrawVert@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImDrawVert@@@@QEAA@XZ PROC		; ImVector<ImDrawVert>::ImVector<ImDrawVert>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@UImDrawVert@@@@QEAA@XZ ENDP		; ImVector<ImDrawVert>::ImVector<ImDrawVert>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z
_TEXT	SEGMENT
curr_cmd$ = 8
tv170 = 216
this$ = 256
draw_list$ = 264
idx$ = 272
?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z PROC ; ImDrawListSplitter::SetCurrentChannel, COMDAT

; 1783 : {

$LN13:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 1784 :     IM_ASSERT(idx >= 0 && idx < _Count);

  00034	83 bd 10 01 00
	00 00		 cmp	 DWORD PTR idx$[rbp], 0
  0003b	7c 12		 jl	 SHORT $LN9@SetCurrent
  0003d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00047	39 85 10 01 00
	00		 cmp	 DWORD PTR idx$[rbp], eax
  0004d	7c 21		 jl	 SHORT $LN10@SetCurrent
$LN9@SetCurrent:
  0004f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4JA
  00055	ff c0		 inc	 eax
  00057	44 8b c0	 mov	 r8d, eax
  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@ILGGLBID@?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAd?$AAx?$AA?5?$AA?$DM?$AA?5?$AA_?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0006e	33 c0		 xor	 eax, eax
$LN10@SetCurrent:

; 1785 :     if (_Current == idx)

  00070	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00077	8b 8d 10 01 00
	00		 mov	 ecx, DWORD PTR idx$[rbp]
  0007d	39 08		 cmp	 DWORD PTR [rax], ecx
  0007f	75 05		 jne	 SHORT $LN2@SetCurrent

; 1786 :         return;

  00081	e9 ba 01 00 00	 jmp	 $LN1@SetCurrent
$LN2@SetCurrent:

; 1787 : 
; 1788 :     // Overwrite ImVector (12/16 bytes), four times. This is merely a silly optimization instead of doing .swap()
; 1789 :     memcpy(&_Channels.Data[_Current]._CmdBuffer, &draw_list->CmdBuffer, sizeof(draw_list->CmdBuffer));

  00086	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  0008d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00094	48 63 09	 movsxd	 rcx, DWORD PTR [rcx]
  00097	48 6b c9 20	 imul	 rcx, rcx, 32		; 00000020H
  0009b	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  000a2	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  000a6	48 03 d1	 add	 rdx, rcx
  000a9	48 8b ca	 mov	 rcx, rdx
  000ac	41 b8 10 00 00
	00		 mov	 r8d, 16
  000b2	48 8b d0	 mov	 rdx, rax
  000b5	e8 00 00 00 00	 call	 memcpy

; 1790 :     memcpy(&_Channels.Data[_Current]._IdxBuffer, &draw_list->IdxBuffer, sizeof(draw_list->IdxBuffer));

  000ba	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  000c1	48 83 c0 10	 add	 rax, 16
  000c5	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000cc	48 63 09	 movsxd	 rcx, DWORD PTR [rcx]
  000cf	48 6b c9 20	 imul	 rcx, rcx, 32		; 00000020H
  000d3	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  000da	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  000de	48 8d 4c 0a 10	 lea	 rcx, QWORD PTR [rdx+rcx+16]
  000e3	41 b8 10 00 00
	00		 mov	 r8d, 16
  000e9	48 8b d0	 mov	 rdx, rax
  000ec	e8 00 00 00 00	 call	 memcpy

; 1791 :     _Current = idx;

  000f1	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f8	8b 8d 10 01 00
	00		 mov	 ecx, DWORD PTR idx$[rbp]
  000fe	89 08		 mov	 DWORD PTR [rax], ecx

; 1792 :     memcpy(&draw_list->CmdBuffer, &_Channels.Data[idx]._CmdBuffer, sizeof(draw_list->CmdBuffer));

  00100	48 63 85 10 01
	00 00		 movsxd	 rax, DWORD PTR idx$[rbp]
  00107	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0010b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00112	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00116	48 03 c8	 add	 rcx, rax
  00119	48 8b c1	 mov	 rax, rcx
  0011c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00123	41 b8 10 00 00
	00		 mov	 r8d, 16
  00129	48 8b d0	 mov	 rdx, rax
  0012c	e8 00 00 00 00	 call	 memcpy

; 1793 :     memcpy(&draw_list->IdxBuffer, &_Channels.Data[idx]._IdxBuffer, sizeof(draw_list->IdxBuffer));

  00131	48 63 85 10 01
	00 00		 movsxd	 rax, DWORD PTR idx$[rbp]
  00138	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0013c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00143	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00147	48 8d 44 01 10	 lea	 rax, QWORD PTR [rcx+rax+16]
  0014c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00153	48 83 c1 10	 add	 rcx, 16
  00157	41 b8 10 00 00
	00		 mov	 r8d, 16
  0015d	48 8b d0	 mov	 rdx, rax
  00160	e8 00 00 00 00	 call	 memcpy

; 1794 :     draw_list->_IdxWritePtr = draw_list->IdxBuffer.Data + draw_list->IdxBuffer.Size;

  00165	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  0016c	48 63 40 10	 movsxd	 rax, DWORD PTR [rax+16]
  00170	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00177	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  0017b	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0017f	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00186	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 1795 : 
; 1796 :     // If current command is used with different settings we need to add a new command
; 1797 :     ImDrawCmd* curr_cmd = (draw_list->CmdBuffer.Size == 0) ? NULL : &draw_list->CmdBuffer.Data[draw_list->CmdBuffer.Size - 1];

  0018a	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  00191	83 38 00	 cmp	 DWORD PTR [rax], 0
  00194	75 0d		 jne	 SHORT $LN11@SetCurrent
  00196	48 c7 85 d8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv170[rbp], 0
  001a1	eb 23		 jmp	 SHORT $LN12@SetCurrent
$LN11@SetCurrent:
  001a3	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  001aa	8b 00		 mov	 eax, DWORD PTR [rax]
  001ac	ff c8		 dec	 eax
  001ae	48 98		 cdqe
  001b0	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  001b4	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  001bb	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  001bf	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv170[rbp], rax
$LN12@SetCurrent:
  001c6	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv170[rbp]
  001cd	48 89 45 08	 mov	 QWORD PTR curr_cmd$[rbp], rax

; 1798 :     if (curr_cmd == NULL)

  001d1	48 83 7d 08 00	 cmp	 QWORD PTR curr_cmd$[rbp], 0
  001d6	75 0e		 jne	 SHORT $LN3@SetCurrent

; 1799 :         draw_list->AddDrawCmd();

  001d8	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  001df	e8 00 00 00 00	 call	 ?AddDrawCmd@ImDrawList@@QEAAXXZ ; ImDrawList::AddDrawCmd
  001e4	eb 5a		 jmp	 SHORT $LN4@SetCurrent
$LN3@SetCurrent:

; 1800 :     else if (curr_cmd->ElemCount == 0)

  001e6	48 8b 45 08	 mov	 rax, QWORD PTR curr_cmd$[rbp]
  001ea	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  001ee	75 21		 jne	 SHORT $LN5@SetCurrent

; 1801 :         ImDrawCmd_HeaderCopy(curr_cmd, &draw_list->_CmdHeader); // Copy ClipRect, TextureId, VtxOffset

  001f0	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  001f7	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  001fd	41 b8 1c 00 00
	00		 mov	 r8d, 28
  00203	48 8b d0	 mov	 rdx, rax
  00206	48 8b 4d 08	 mov	 rcx, QWORD PTR curr_cmd$[rbp]
  0020a	e8 00 00 00 00	 call	 memcpy
  0020f	eb 2f		 jmp	 SHORT $LN6@SetCurrent
$LN5@SetCurrent:

; 1802 :     else if (ImDrawCmd_HeaderCompare(curr_cmd, &draw_list->_CmdHeader) != 0)

  00211	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  00218	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  0021e	41 b8 1c 00 00
	00		 mov	 r8d, 28
  00224	48 8b d0	 mov	 rdx, rax
  00227	48 8b 4d 08	 mov	 rcx, QWORD PTR curr_cmd$[rbp]
  0022b	e8 00 00 00 00	 call	 memcmp
  00230	85 c0		 test	 eax, eax
  00232	74 0c		 je	 SHORT $LN7@SetCurrent

; 1803 :         draw_list->AddDrawCmd();

  00234	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  0023b	e8 00 00 00 00	 call	 ?AddDrawCmd@ImDrawList@@QEAAXXZ ; ImDrawList::AddDrawCmd
$LN7@SetCurrent:
$LN6@SetCurrent:
$LN4@SetCurrent:
$LN1@SetCurrent:

; 1804 : }

  00240	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00247	5f		 pop	 rdi
  00248	5d		 pop	 rbp
  00249	c3		 ret	 0
?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ENDP ; ImDrawListSplitter::SetCurrentChannel
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z
_TEXT	SEGMENT
new_cmd_buffer_count$ = 4
new_idx_buffer_count$ = 36
last_cmd$ = 72
idx_offset$ = 100
i$1 = 132
ch$2 = 168
next_cmd$3 = 200
cmd_n$4 = 228
cmd_write$ = 264
idx_write$ = 296
i$5 = 324
ch$6 = 360
sz$7 = 388
sz$8 = 420
curr_cmd$ = 456
tv83 = 660
tv78 = 664
this$ = 704
draw_list$ = 712
?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z PROC	; ImDrawListSplitter::Merge, COMDAT

; 1712 : {

$LN28:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 02
	00 00		 sub	 rsp, 712		; 000002c8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 b2 00 00 00	 mov	 ecx, 178		; 000000b2H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 e8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+744]

; 1713 :     // Note that we never use or rely on _Channels.Size because it is merely a buffer that we never shrink back to 0 to keep all sub-buffers ready for use.
; 1714 :     if (_Count <= 1)

  0002f	48 8b 85 c0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	83 78 04 01	 cmp	 DWORD PTR [rax+4], 1
  0003a	7f 05		 jg	 SHORT $LN11@Merge

; 1715 :         return;

  0003c	e9 12 05 00 00	 jmp	 $LN1@Merge
$LN11@Merge:

; 1716 : 
; 1717 :     SetCurrentChannel(draw_list, 0);

  00041	45 33 c0	 xor	 r8d, r8d
  00044	48 8b 95 c8 02
	00 00		 mov	 rdx, QWORD PTR draw_list$[rbp]
  0004b	48 8b 8d c0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00052	e8 00 00 00 00	 call	 ?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::SetCurrentChannel

; 1718 :     draw_list->_PopUnusedDrawCmd();

  00057	48 8b 8d c8 02
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  0005e	e8 00 00 00 00	 call	 ?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ ; ImDrawList::_PopUnusedDrawCmd

; 1719 : 
; 1720 :     // Calculate our final buffer sizes. Also fix the incorrect IdxOffset values in each command.
; 1721 :     int new_cmd_buffer_count = 0;

  00063	c7 45 04 00 00
	00 00		 mov	 DWORD PTR new_cmd_buffer_count$[rbp], 0

; 1722 :     int new_idx_buffer_count = 0;

  0006a	c7 45 24 00 00
	00 00		 mov	 DWORD PTR new_idx_buffer_count$[rbp], 0

; 1723 :     ImDrawCmd* last_cmd = (_Count > 0 && draw_list->CmdBuffer.Size > 0) ? &draw_list->CmdBuffer.back() : NULL;

  00071	48 8b 85 c0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00078	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  0007c	7e 24		 jle	 SHORT $LN24@Merge
  0007e	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  00085	83 38 00	 cmp	 DWORD PTR [rax], 0
  00088	7e 18		 jle	 SHORT $LN24@Merge
  0008a	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  00091	48 8b c8	 mov	 rcx, rax
  00094	e8 00 00 00 00	 call	 ?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ ; ImVector<ImDrawCmd>::back
  00099	48 89 85 98 02
	00 00		 mov	 QWORD PTR tv78[rbp], rax
  000a0	eb 0b		 jmp	 SHORT $LN25@Merge
$LN24@Merge:
  000a2	48 c7 85 98 02
	00 00 00 00 00
	00		 mov	 QWORD PTR tv78[rbp], 0
$LN25@Merge:
  000ad	48 8b 85 98 02
	00 00		 mov	 rax, QWORD PTR tv78[rbp]
  000b4	48 89 45 48	 mov	 QWORD PTR last_cmd$[rbp], rax

; 1724 :     int idx_offset = last_cmd ? last_cmd->IdxOffset + last_cmd->ElemCount : 0;

  000b8	48 83 7d 48 00	 cmp	 QWORD PTR last_cmd$[rbp], 0
  000bd	74 16		 je	 SHORT $LN26@Merge
  000bf	48 8b 45 48	 mov	 rax, QWORD PTR last_cmd$[rbp]
  000c3	8b 40 1c	 mov	 eax, DWORD PTR [rax+28]
  000c6	48 8b 4d 48	 mov	 rcx, QWORD PTR last_cmd$[rbp]
  000ca	03 41 20	 add	 eax, DWORD PTR [rcx+32]
  000cd	89 85 94 02 00
	00		 mov	 DWORD PTR tv83[rbp], eax
  000d3	eb 0a		 jmp	 SHORT $LN27@Merge
$LN26@Merge:
  000d5	c7 85 94 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv83[rbp], 0
$LN27@Merge:
  000df	8b 85 94 02 00
	00		 mov	 eax, DWORD PTR tv83[rbp]
  000e5	89 45 64	 mov	 DWORD PTR idx_offset$[rbp], eax

; 1725 :     for (int i = 1; i < _Count; i++)

  000e8	c7 85 84 00 00
	00 01 00 00 00	 mov	 DWORD PTR i$1[rbp], 1
  000f2	eb 0e		 jmp	 SHORT $LN4@Merge
$LN2@Merge:
  000f4	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR i$1[rbp]
  000fa	ff c0		 inc	 eax
  000fc	89 85 84 00 00
	00		 mov	 DWORD PTR i$1[rbp], eax
$LN4@Merge:
  00102	48 8b 85 c0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00109	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0010c	39 85 84 00 00
	00		 cmp	 DWORD PTR i$1[rbp], eax
  00112	0f 8d cb 01 00
	00		 jge	 $LN3@Merge

; 1726 :     {
; 1727 :         ImDrawChannel& ch = _Channels[i];

  00118	48 8b 85 c0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0011f	48 83 c0 08	 add	 rax, 8
  00123	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR i$1[rbp]
  00129	48 8b c8	 mov	 rcx, rax
  0012c	e8 00 00 00 00	 call	 ??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
  00131	48 89 85 a8 00
	00 00		 mov	 QWORD PTR ch$2[rbp], rax

; 1728 :         if (ch._CmdBuffer.Size > 0 && ch._CmdBuffer.back().ElemCount == 0 && ch._CmdBuffer.back().UserCallback == NULL) // Equivalent of PopUnusedDrawCmd()

  00138	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR ch$2[rbp]
  0013f	83 38 00	 cmp	 DWORD PTR [rax], 0
  00142	7e 3a		 jle	 SHORT $LN12@Merge
  00144	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR ch$2[rbp]
  0014b	48 8b c8	 mov	 rcx, rax
  0014e	e8 00 00 00 00	 call	 ?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ ; ImVector<ImDrawCmd>::back
  00153	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  00157	75 25		 jne	 SHORT $LN12@Merge
  00159	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR ch$2[rbp]
  00160	48 8b c8	 mov	 rcx, rax
  00163	e8 00 00 00 00	 call	 ?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ ; ImVector<ImDrawCmd>::back
  00168	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  0016d	75 0f		 jne	 SHORT $LN12@Merge

; 1729 :             ch._CmdBuffer.pop_back();

  0016f	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR ch$2[rbp]
  00176	48 8b c8	 mov	 rcx, rax
  00179	e8 00 00 00 00	 call	 ?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ ; ImVector<ImDrawCmd>::pop_back
$LN12@Merge:

; 1730 : 
; 1731 :         if (ch._CmdBuffer.Size > 0 && last_cmd != NULL)

  0017e	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR ch$2[rbp]
  00185	83 38 00	 cmp	 DWORD PTR [rax], 0
  00188	0f 8e 9c 00 00
	00		 jle	 $LN13@Merge
  0018e	48 83 7d 48 00	 cmp	 QWORD PTR last_cmd$[rbp], 0
  00193	0f 84 91 00 00
	00		 je	 $LN13@Merge

; 1732 :         {
; 1733 :             // Do not include ImDrawCmd_AreSequentialIdxOffset() in the compare as we rebuild IdxOffset values ourselves.
; 1734 :             // Manipulating IdxOffset (e.g. by reordering draw commands like done by RenderDimmedBackgroundBehindWindow()) is not supported within a splitter.
; 1735 :             ImDrawCmd* next_cmd = &ch._CmdBuffer[0];

  00199	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR ch$2[rbp]
  001a0	33 d2		 xor	 edx, edx
  001a2	48 8b c8	 mov	 rcx, rax
  001a5	e8 00 00 00 00	 call	 ??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z ; ImVector<ImDrawCmd>::operator[]
  001aa	48 89 85 c8 00
	00 00		 mov	 QWORD PTR next_cmd$3[rbp], rax

; 1736 :             if (ImDrawCmd_HeaderCompare(last_cmd, next_cmd) == 0 && last_cmd->UserCallback == NULL && next_cmd->UserCallback == NULL)

  001b1	41 b8 1c 00 00
	00		 mov	 r8d, 28
  001b7	48 8b 95 c8 00
	00 00		 mov	 rdx, QWORD PTR next_cmd$3[rbp]
  001be	48 8b 4d 48	 mov	 rcx, QWORD PTR last_cmd$[rbp]
  001c2	e8 00 00 00 00	 call	 memcmp
  001c7	85 c0		 test	 eax, eax
  001c9	75 5f		 jne	 SHORT $LN14@Merge
  001cb	48 8b 45 48	 mov	 rax, QWORD PTR last_cmd$[rbp]
  001cf	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  001d4	75 54		 jne	 SHORT $LN14@Merge
  001d6	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR next_cmd$3[rbp]
  001dd	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  001e2	75 46		 jne	 SHORT $LN14@Merge

; 1737 :             {
; 1738 :                 // Merge previous channel last draw command with current channel first draw command if matching.
; 1739 :                 last_cmd->ElemCount += next_cmd->ElemCount;

  001e4	48 8b 45 48	 mov	 rax, QWORD PTR last_cmd$[rbp]
  001e8	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  001eb	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR next_cmd$3[rbp]
  001f2	03 41 20	 add	 eax, DWORD PTR [rcx+32]
  001f5	48 8b 4d 48	 mov	 rcx, QWORD PTR last_cmd$[rbp]
  001f9	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 1740 :                 idx_offset += next_cmd->ElemCount;

  001fc	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR next_cmd$3[rbp]
  00203	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  00206	8b 4d 64	 mov	 ecx, DWORD PTR idx_offset$[rbp]
  00209	03 c8		 add	 ecx, eax
  0020b	8b c1		 mov	 eax, ecx
  0020d	89 45 64	 mov	 DWORD PTR idx_offset$[rbp], eax

; 1741 :                 ch._CmdBuffer.erase(ch._CmdBuffer.Data); // FIXME-OPT: Improve for multiple merges.

  00210	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR ch$2[rbp]
  00217	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR ch$2[rbp]
  0021e	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  00222	48 8b c8	 mov	 rcx, rax
  00225	e8 00 00 00 00	 call	 ?erase@?$ImVector@UImDrawCmd@@@@QEAAPEAUImDrawCmd@@PEBU2@@Z ; ImVector<ImDrawCmd>::erase
$LN14@Merge:
$LN13@Merge:

; 1742 :             }
; 1743 :         }
; 1744 :         if (ch._CmdBuffer.Size > 0)

  0022a	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR ch$2[rbp]
  00231	83 38 00	 cmp	 DWORD PTR [rax], 0
  00234	7e 13		 jle	 SHORT $LN15@Merge

; 1745 :             last_cmd = &ch._CmdBuffer.back();

  00236	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR ch$2[rbp]
  0023d	48 8b c8	 mov	 rcx, rax
  00240	e8 00 00 00 00	 call	 ?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ ; ImVector<ImDrawCmd>::back
  00245	48 89 45 48	 mov	 QWORD PTR last_cmd$[rbp], rax
$LN15@Merge:

; 1746 :         new_cmd_buffer_count += ch._CmdBuffer.Size;

  00249	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR ch$2[rbp]
  00250	8b 00		 mov	 eax, DWORD PTR [rax]
  00252	8b 4d 04	 mov	 ecx, DWORD PTR new_cmd_buffer_count$[rbp]
  00255	03 c8		 add	 ecx, eax
  00257	8b c1		 mov	 eax, ecx
  00259	89 45 04	 mov	 DWORD PTR new_cmd_buffer_count$[rbp], eax

; 1747 :         new_idx_buffer_count += ch._IdxBuffer.Size;

  0025c	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR ch$2[rbp]
  00263	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00266	8b 4d 24	 mov	 ecx, DWORD PTR new_idx_buffer_count$[rbp]
  00269	03 c8		 add	 ecx, eax
  0026b	8b c1		 mov	 eax, ecx
  0026d	89 45 24	 mov	 DWORD PTR new_idx_buffer_count$[rbp], eax

; 1748 :         for (int cmd_n = 0; cmd_n < ch._CmdBuffer.Size; cmd_n++)

  00270	c7 85 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR cmd_n$4[rbp], 0
  0027a	eb 0e		 jmp	 SHORT $LN7@Merge
$LN5@Merge:
  0027c	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR cmd_n$4[rbp]
  00282	ff c0		 inc	 eax
  00284	89 85 e4 00 00
	00		 mov	 DWORD PTR cmd_n$4[rbp], eax
$LN7@Merge:
  0028a	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR ch$2[rbp]
  00291	8b 00		 mov	 eax, DWORD PTR [rax]
  00293	39 85 e4 00 00
	00		 cmp	 DWORD PTR cmd_n$4[rbp], eax
  00299	7d 43		 jge	 SHORT $LN6@Merge

; 1749 :         {
; 1750 :             ch._CmdBuffer.Data[cmd_n].IdxOffset = idx_offset;

  0029b	48 63 85 e4 00
	00 00		 movsxd	 rax, DWORD PTR cmd_n$4[rbp]
  002a2	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  002a6	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR ch$2[rbp]
  002ad	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  002b1	8b 55 64	 mov	 edx, DWORD PTR idx_offset$[rbp]
  002b4	89 54 01 1c	 mov	 DWORD PTR [rcx+rax+28], edx

; 1751 :             idx_offset += ch._CmdBuffer.Data[cmd_n].ElemCount;

  002b8	48 63 85 e4 00
	00 00		 movsxd	 rax, DWORD PTR cmd_n$4[rbp]
  002bf	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  002c3	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR ch$2[rbp]
  002ca	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  002ce	8b 44 01 20	 mov	 eax, DWORD PTR [rcx+rax+32]
  002d2	8b 4d 64	 mov	 ecx, DWORD PTR idx_offset$[rbp]
  002d5	03 c8		 add	 ecx, eax
  002d7	8b c1		 mov	 eax, ecx
  002d9	89 45 64	 mov	 DWORD PTR idx_offset$[rbp], eax

; 1752 :         }

  002dc	eb 9e		 jmp	 SHORT $LN5@Merge
$LN6@Merge:

; 1753 :     }

  002de	e9 11 fe ff ff	 jmp	 $LN2@Merge
$LN3@Merge:

; 1754 :     draw_list->CmdBuffer.resize(draw_list->CmdBuffer.Size + new_cmd_buffer_count);

  002e3	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  002ea	8b 00		 mov	 eax, DWORD PTR [rax]
  002ec	03 45 04	 add	 eax, DWORD PTR new_cmd_buffer_count$[rbp]
  002ef	48 8b 8d c8 02
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  002f6	8b d0		 mov	 edx, eax
  002f8	e8 00 00 00 00	 call	 ?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z ; ImVector<ImDrawCmd>::resize

; 1755 :     draw_list->IdxBuffer.resize(draw_list->IdxBuffer.Size + new_idx_buffer_count);

  002fd	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  00304	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00307	03 45 24	 add	 eax, DWORD PTR new_idx_buffer_count$[rbp]
  0030a	48 8b 8d c8 02
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00311	48 83 c1 10	 add	 rcx, 16
  00315	8b d0		 mov	 edx, eax
  00317	e8 00 00 00 00	 call	 ?resize@?$ImVector@G@@QEAAXH@Z ; ImVector<unsigned short>::resize

; 1756 : 
; 1757 :     // Write commands and indices in order (they are fairly small structures, we don't copy vertices only indices)
; 1758 :     ImDrawCmd* cmd_write = draw_list->CmdBuffer.Data + draw_list->CmdBuffer.Size - new_cmd_buffer_count;

  0031c	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  00323	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00326	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  0032a	48 8b 8d c8 02
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00331	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00335	48 03 c8	 add	 rcx, rax
  00338	48 8b c1	 mov	 rax, rcx
  0033b	48 63 4d 04	 movsxd	 rcx, DWORD PTR new_cmd_buffer_count$[rbp]
  0033f	48 6b c9 38	 imul	 rcx, rcx, 56		; 00000038H
  00343	48 2b c1	 sub	 rax, rcx
  00346	48 89 85 08 01
	00 00		 mov	 QWORD PTR cmd_write$[rbp], rax

; 1759 :     ImDrawIdx* idx_write = draw_list->IdxBuffer.Data + draw_list->IdxBuffer.Size - new_idx_buffer_count;

  0034d	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  00354	48 63 40 10	 movsxd	 rax, DWORD PTR [rax+16]
  00358	48 8b 8d c8 02
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  0035f	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00363	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00367	48 63 4d 24	 movsxd	 rcx, DWORD PTR new_idx_buffer_count$[rbp]
  0036b	48 d1 e1	 shl	 rcx, 1
  0036e	48 2b c1	 sub	 rax, rcx
  00371	48 89 85 28 01
	00 00		 mov	 QWORD PTR idx_write$[rbp], rax

; 1760 :     for (int i = 1; i < _Count; i++)

  00378	c7 85 44 01 00
	00 01 00 00 00	 mov	 DWORD PTR i$5[rbp], 1
  00382	eb 0e		 jmp	 SHORT $LN10@Merge
$LN8@Merge:
  00384	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR i$5[rbp]
  0038a	ff c0		 inc	 eax
  0038c	89 85 44 01 00
	00		 mov	 DWORD PTR i$5[rbp], eax
$LN10@Merge:
  00392	48 8b 85 c0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00399	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0039c	39 85 44 01 00
	00		 cmp	 DWORD PTR i$5[rbp], eax
  003a2	0f 8d d7 00 00
	00		 jge	 $LN9@Merge

; 1761 :     {
; 1762 :         ImDrawChannel& ch = _Channels[i];

  003a8	48 8b 85 c0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  003af	48 83 c0 08	 add	 rax, 8
  003b3	8b 95 44 01 00
	00		 mov	 edx, DWORD PTR i$5[rbp]
  003b9	48 8b c8	 mov	 rcx, rax
  003bc	e8 00 00 00 00	 call	 ??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
  003c1	48 89 85 68 01
	00 00		 mov	 QWORD PTR ch$6[rbp], rax

; 1763 :         if (int sz = ch._CmdBuffer.Size) { memcpy(cmd_write, ch._CmdBuffer.Data, sz * sizeof(ImDrawCmd)); cmd_write += sz; }

  003c8	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR ch$6[rbp]
  003cf	8b 00		 mov	 eax, DWORD PTR [rax]
  003d1	89 85 84 01 00
	00		 mov	 DWORD PTR sz$7[rbp], eax
  003d7	83 bd 84 01 00
	00 00		 cmp	 DWORD PTR sz$7[rbp], 0
  003de	74 44		 je	 SHORT $LN16@Merge
  003e0	48 63 85 84 01
	00 00		 movsxd	 rax, DWORD PTR sz$7[rbp]
  003e7	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  003eb	4c 8b c0	 mov	 r8, rax
  003ee	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR ch$6[rbp]
  003f5	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  003f9	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR cmd_write$[rbp]
  00400	e8 00 00 00 00	 call	 memcpy
  00405	48 63 85 84 01
	00 00		 movsxd	 rax, DWORD PTR sz$7[rbp]
  0040c	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  00410	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR cmd_write$[rbp]
  00417	48 03 c8	 add	 rcx, rax
  0041a	48 8b c1	 mov	 rax, rcx
  0041d	48 89 85 08 01
	00 00		 mov	 QWORD PTR cmd_write$[rbp], rax
$LN16@Merge:

; 1764 :         if (int sz = ch._IdxBuffer.Size) { memcpy(idx_write, ch._IdxBuffer.Data, sz * sizeof(ImDrawIdx)); idx_write += sz; }

  00424	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR ch$6[rbp]
  0042b	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0042e	89 85 a4 01 00
	00		 mov	 DWORD PTR sz$8[rbp], eax
  00434	83 bd a4 01 00
	00 00		 cmp	 DWORD PTR sz$8[rbp], 0
  0043b	74 3d		 je	 SHORT $LN17@Merge
  0043d	48 63 85 a4 01
	00 00		 movsxd	 rax, DWORD PTR sz$8[rbp]
  00444	48 d1 e0	 shl	 rax, 1
  00447	4c 8b c0	 mov	 r8, rax
  0044a	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR ch$6[rbp]
  00451	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  00455	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR idx_write$[rbp]
  0045c	e8 00 00 00 00	 call	 memcpy
  00461	48 63 85 a4 01
	00 00		 movsxd	 rax, DWORD PTR sz$8[rbp]
  00468	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR idx_write$[rbp]
  0046f	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00473	48 89 85 28 01
	00 00		 mov	 QWORD PTR idx_write$[rbp], rax
$LN17@Merge:

; 1765 :     }

  0047a	e9 05 ff ff ff	 jmp	 $LN8@Merge
$LN9@Merge:

; 1766 :     draw_list->_IdxWritePtr = idx_write;

  0047f	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  00486	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR idx_write$[rbp]
  0048d	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 1767 : 
; 1768 :     // Ensure there's always a non-callback draw command trailing the command-buffer
; 1769 :     if (draw_list->CmdBuffer.Size == 0 || draw_list->CmdBuffer.back().UserCallback != NULL)

  00491	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  00498	83 38 00	 cmp	 DWORD PTR [rax], 0
  0049b	74 16		 je	 SHORT $LN19@Merge
  0049d	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  004a4	48 8b c8	 mov	 rcx, rax
  004a7	e8 00 00 00 00	 call	 ?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ ; ImVector<ImDrawCmd>::back
  004ac	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  004b1	74 0c		 je	 SHORT $LN18@Merge
$LN19@Merge:

; 1770 :         draw_list->AddDrawCmd();

  004b3	48 8b 8d c8 02
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  004ba	e8 00 00 00 00	 call	 ?AddDrawCmd@ImDrawList@@QEAAXXZ ; ImDrawList::AddDrawCmd
$LN18@Merge:

; 1771 : 
; 1772 :     // If current command is used with different settings we need to add a new command
; 1773 :     ImDrawCmd* curr_cmd = &draw_list->CmdBuffer.Data[draw_list->CmdBuffer.Size - 1];

  004bf	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  004c6	8b 00		 mov	 eax, DWORD PTR [rax]
  004c8	ff c8		 dec	 eax
  004ca	48 98		 cdqe
  004cc	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  004d0	48 8b 8d c8 02
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  004d7	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  004db	48 89 85 c8 01
	00 00		 mov	 QWORD PTR curr_cmd$[rbp], rax

; 1774 :     if (curr_cmd->ElemCount == 0)

  004e2	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR curr_cmd$[rbp]
  004e9	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  004ed	75 24		 jne	 SHORT $LN20@Merge

; 1775 :         ImDrawCmd_HeaderCopy(curr_cmd, &draw_list->_CmdHeader); // Copy ClipRect, TextureId, VtxOffset

  004ef	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  004f6	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  004fc	41 b8 1c 00 00
	00		 mov	 r8d, 28
  00502	48 8b d0	 mov	 rdx, rax
  00505	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR curr_cmd$[rbp]
  0050c	e8 00 00 00 00	 call	 memcpy
  00511	eb 32		 jmp	 SHORT $LN21@Merge
$LN20@Merge:

; 1776 :     else if (ImDrawCmd_HeaderCompare(curr_cmd, &draw_list->_CmdHeader) != 0)

  00513	48 8b 85 c8 02
	00 00		 mov	 rax, QWORD PTR draw_list$[rbp]
  0051a	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00520	41 b8 1c 00 00
	00		 mov	 r8d, 28
  00526	48 8b d0	 mov	 rdx, rax
  00529	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR curr_cmd$[rbp]
  00530	e8 00 00 00 00	 call	 memcmp
  00535	85 c0		 test	 eax, eax
  00537	74 0c		 je	 SHORT $LN22@Merge

; 1777 :         draw_list->AddDrawCmd();

  00539	48 8b 8d c8 02
	00 00		 mov	 rcx, QWORD PTR draw_list$[rbp]
  00540	e8 00 00 00 00	 call	 ?AddDrawCmd@ImDrawList@@QEAAXXZ ; ImDrawList::AddDrawCmd
$LN22@Merge:
$LN21@Merge:

; 1778 : 
; 1779 :     _Count = 1;

  00545	48 8b 85 c0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0054c	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [rax+4], 1
$LN1@Merge:

; 1780 : }

  00553	48 8d a5 a8 02
	00 00		 lea	 rsp, QWORD PTR [rbp+680]
  0055a	5f		 pop	 rdi
  0055b	5d		 pop	 rbp
  0055c	c3		 ret	 0
?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z ENDP	; ImDrawListSplitter::Merge
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z
_TEXT	SEGMENT
old_channels_count$ = 4
i$1 = 36
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 360
$T6 = 388
$T7 = 424
tv142 = 440
this$ = 480
draw_list$ = 488
channels_count$ = 496
?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z PROC ; ImDrawListSplitter::Split, COMDAT

; 1682 : {

$LN14:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 01
	00 00		 sub	 rsp, 488		; 000001e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR [rsp+520]
  00034	48 c7 85 a8 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T7[rbp], -2

; 1683 :     IM_UNUSED(draw_list);
; 1684 :     IM_ASSERT(_Current == 0 && _Count <= 1 && "Nested channel splitting is not supported. Please use separate instances of ImDrawListSplitter.");

  0003f	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00046	83 38 00	 cmp	 DWORD PTR [rax], 0
  00049	75 19		 jne	 SHORT $LN9@Split
  0004b	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00052	83 78 04 01	 cmp	 DWORD PTR [rax+4], 1
  00056	7f 0c		 jg	 SHORT $LN9@Split
  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0GA@FGMHMEOI@Nested?5channel?5splitting?5is?5not?5@
  0005f	48 85 c0	 test	 rax, rax
  00062	75 22		 jne	 SHORT $LN10@Split
$LN9@Split:
  00064	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4JA
  0006a	83 c0 02	 add	 eax, 2
  0006d	44 8b c0	 mov	 r8d, eax
  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@EAJJBPG@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BAE@LAENHIMB@?$AA_?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00084	33 c0		 xor	 eax, eax
$LN10@Split:

; 1685 :     int old_channels_count = _Channels.Size;

  00086	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008d	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00090	89 45 04	 mov	 DWORD PTR old_channels_count$[rbp], eax

; 1686 :     if (old_channels_count < channels_count)

  00093	8b 85 f0 01 00
	00		 mov	 eax, DWORD PTR channels_count$[rbp]
  00099	39 45 04	 cmp	 DWORD PTR old_channels_count$[rbp], eax
  0009c	7d 32		 jge	 SHORT $LN5@Split

; 1687 :     {
; 1688 :         _Channels.reserve(channels_count); // Avoid over reserving since this is likely to stay stable

  0009e	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a5	48 83 c0 08	 add	 rax, 8
  000a9	8b 95 f0 01 00
	00		 mov	 edx, DWORD PTR channels_count$[rbp]
  000af	48 8b c8	 mov	 rcx, rax
  000b2	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z ; ImVector<ImDrawChannel>::reserve

; 1689 :         _Channels.resize(channels_count);

  000b7	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000be	48 83 c0 08	 add	 rax, 8
  000c2	8b 95 f0 01 00
	00		 mov	 edx, DWORD PTR channels_count$[rbp]
  000c8	48 8b c8	 mov	 rcx, rax
  000cb	e8 00 00 00 00	 call	 ?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z ; ImVector<ImDrawChannel>::resize
$LN5@Split:

; 1690 :     }
; 1691 :     _Count = channels_count;

  000d0	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d7	8b 8d f0 01 00
	00		 mov	 ecx, DWORD PTR channels_count$[rbp]
  000dd	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 1692 : 
; 1693 :     // Channels[] (24/32 bytes each) hold storage that we'll swap with draw_list->_CmdBuffer/_IdxBuffer
; 1694 :     // The content of Channels[0] at this point doesn't matter. We clear it to make state tidy in a debugger but we don't strictly need to.
; 1695 :     // When we switch to the next channel, we'll copy draw_list->_CmdBuffer/_IdxBuffer into Channels[0] and then Channels[1] into draw_list->CmdBuffer/_IdxBuffer
; 1696 :     memset(&_Channels[0], 0, sizeof(ImDrawChannel));

  000e0	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e7	48 83 c0 08	 add	 rax, 8
  000eb	33 d2		 xor	 edx, edx
  000ed	48 8b c8	 mov	 rcx, rax
  000f0	e8 00 00 00 00	 call	 ??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
  000f5	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  000fb	33 d2		 xor	 edx, edx
  000fd	48 8b c8	 mov	 rcx, rax
  00100	e8 00 00 00 00	 call	 memset

; 1697 :     for (int i = 1; i < channels_count; i++)

  00105	c7 45 24 01 00
	00 00		 mov	 DWORD PTR i$1[rbp], 1
  0010c	eb 08		 jmp	 SHORT $LN4@Split
$LN2@Split:
  0010e	8b 45 24	 mov	 eax, DWORD PTR i$1[rbp]
  00111	ff c0		 inc	 eax
  00113	89 45 24	 mov	 DWORD PTR i$1[rbp], eax
$LN4@Split:
  00116	8b 85 f0 01 00
	00		 mov	 eax, DWORD PTR channels_count$[rbp]
  0011c	39 45 24	 cmp	 DWORD PTR i$1[rbp], eax
  0011f	0f 8d ec 00 00
	00		 jge	 $LN3@Split

; 1698 :     {
; 1699 :         if (i >= old_channels_count)

  00125	8b 45 04	 mov	 eax, DWORD PTR old_channels_count$[rbp]
  00128	39 45 24	 cmp	 DWORD PTR i$1[rbp], eax
  0012b	0f 8c 97 00 00
	00		 jl	 $LN6@Split

; 1700 :         {
; 1701 :             IM_PLACEMENT_NEW(&_Channels[i]) ImDrawChannel();

  00131	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00138	48 83 c0 08	 add	 rax, 8
  0013c	8b 55 24	 mov	 edx, DWORD PTR i$1[rbp]
  0013f	48 8b c8	 mov	 rcx, rax
  00142	e8 00 00 00 00	 call	 ??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
  00147	48 89 85 48 01
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  0014e	48 8d 85 84 01
	00 00		 lea	 rax, QWORD PTR $T6[rbp]
  00155	48 89 85 68 01
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  0015c	4c 8b 85 48 01
	00 00		 mov	 r8, QWORD PTR $T4[rbp]
  00163	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR $T5[rbp]
  0016a	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  0016d	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00172	e8 00 00 00 00	 call	 ??2@YAPEAX_KUImNewWrapper@@PEAX@Z ; operator new
  00177	48 89 85 28 01
	00 00		 mov	 QWORD PTR $T3[rbp], rax
  0017e	48 83 bd 28 01
	00 00 00	 cmp	 QWORD PTR $T3[rbp], 0
  00186	74 25		 je	 SHORT $LN11@Split
  00188	48 8b bd 28 01
	00 00		 mov	 rdi, QWORD PTR $T3[rbp]
  0018f	33 c0		 xor	 eax, eax
  00191	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00196	f3 aa		 rep stosb
  00198	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR $T3[rbp]
  0019f	e8 00 00 00 00	 call	 ??0ImDrawChannel@@QEAA@XZ
  001a4	48 89 85 b8 01
	00 00		 mov	 QWORD PTR tv142[rbp], rax
  001ab	eb 0b		 jmp	 SHORT $LN12@Split
$LN11@Split:
  001ad	48 c7 85 b8 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv142[rbp], 0
$LN12@Split:
  001b8	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR tv142[rbp]
  001bf	48 89 85 08 01
	00 00		 mov	 QWORD PTR $T2[rbp], rax

; 1702 :         }
; 1703 :         else

  001c6	eb 44		 jmp	 SHORT $LN7@Split
$LN6@Split:

; 1704 :         {
; 1705 :             _Channels[i]._CmdBuffer.resize(0);

  001c8	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001cf	48 83 c0 08	 add	 rax, 8
  001d3	8b 55 24	 mov	 edx, DWORD PTR i$1[rbp]
  001d6	48 8b c8	 mov	 rcx, rax
  001d9	e8 00 00 00 00	 call	 ??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
  001de	33 d2		 xor	 edx, edx
  001e0	48 8b c8	 mov	 rcx, rax
  001e3	e8 00 00 00 00	 call	 ?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z ; ImVector<ImDrawCmd>::resize

; 1706 :             _Channels[i]._IdxBuffer.resize(0);

  001e8	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001ef	48 83 c0 08	 add	 rax, 8
  001f3	8b 55 24	 mov	 edx, DWORD PTR i$1[rbp]
  001f6	48 8b c8	 mov	 rcx, rax
  001f9	e8 00 00 00 00	 call	 ??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
  001fe	48 83 c0 10	 add	 rax, 16
  00202	33 d2		 xor	 edx, edx
  00204	48 8b c8	 mov	 rcx, rax
  00207	e8 00 00 00 00	 call	 ?resize@?$ImVector@G@@QEAAXH@Z ; ImVector<unsigned short>::resize
$LN7@Split:

; 1707 :         }
; 1708 :     }

  0020c	e9 fd fe ff ff	 jmp	 $LN2@Split
$LN3@Split:

; 1709 : }

  00211	48 8d a5 c8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+456]
  00218	5f		 pop	 rdi
  00219	5d		 pop	 rbp
  0021a	c3		 ret	 0
?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ENDP ; ImDrawListSplitter::Split
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
old_channels_count$ = 4
i$1 = 36
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 360
$T6 = 388
$T7 = 424
tv142 = 440
this$ = 480
draw_list$ = 488
channels_count$ = 496
?dtor$0@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4HA PROC ; `ImDrawListSplitter::Split'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	4c 8b 85 48 01
	00 00		 mov	 r8, QWORD PTR $T4[rbp]
  0001b	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR $T5[rbp]
  00022	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00025	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR $T3[rbp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAXUImNewWrapper@@0@Z ; operator delete
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?dtor$0@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4HA ENDP ; `ImDrawListSplitter::Split'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
old_channels_count$ = 4
i$1 = 36
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 360
$T6 = 388
$T7 = 424
tv142 = 440
this$ = 480
draw_list$ = 488
channels_count$ = 496
?dtor$0@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4HA PROC ; `ImDrawListSplitter::Split'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	4c 8b 85 48 01
	00 00		 mov	 r8, QWORD PTR $T4[rbp]
  0001b	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR $T5[rbp]
  00022	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00025	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR $T3[rbp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAXUImNewWrapper@@0@Z ; operator delete
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?dtor$0@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4HA ENDP ; `ImDrawListSplitter::Split'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ
_TEXT	SEGMENT
i$1 = 4
this$ = 256
?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ PROC	; ImDrawListSplitter::ClearFreeMemory, COMDAT

; 1668 : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 1669 :     for (int i = 0; i < _Channels.Size; i++)

  0002a	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$1[rbp], 0
  00031	eb 08		 jmp	 SHORT $LN4@ClearFreeM
$LN2@ClearFreeM:
  00033	8b 45 04	 mov	 eax, DWORD PTR i$1[rbp]
  00036	ff c0		 inc	 eax
  00038	89 45 04	 mov	 DWORD PTR i$1[rbp], eax
$LN4@ClearFreeM:
  0003b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00045	39 45 04	 cmp	 DWORD PTR i$1[rbp], eax
  00048	7d 79		 jge	 SHORT $LN3@ClearFreeM

; 1670 :     {
; 1671 :         if (i == _Current)

  0004a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00051	8b 00		 mov	 eax, DWORD PTR [rax]
  00053	39 45 04	 cmp	 DWORD PTR i$1[rbp], eax
  00056	75 26		 jne	 SHORT $LN5@ClearFreeM

; 1672 :             memset(&_Channels[i], 0, sizeof(_Channels[i]));  // Current channel is a copy of CmdBuffer/IdxBuffer, don't destruct again

  00058	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 83 c0 08	 add	 rax, 8
  00063	8b 55 04	 mov	 edx, DWORD PTR i$1[rbp]
  00066	48 8b c8	 mov	 rcx, rax
  00069	e8 00 00 00 00	 call	 ??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
  0006e	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00074	33 d2		 xor	 edx, edx
  00076	48 8b c8	 mov	 rcx, rax
  00079	e8 00 00 00 00	 call	 memset
$LN5@ClearFreeM:

; 1673 :         _Channels[i]._CmdBuffer.clear();

  0007e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00085	48 83 c0 08	 add	 rax, 8
  00089	8b 55 04	 mov	 edx, DWORD PTR i$1[rbp]
  0008c	48 8b c8	 mov	 rcx, rax
  0008f	e8 00 00 00 00	 call	 ??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
  00094	48 8b c8	 mov	 rcx, rax
  00097	e8 00 00 00 00	 call	 ?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ ; ImVector<ImDrawCmd>::clear

; 1674 :         _Channels[i]._IdxBuffer.clear();

  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 83 c0 08	 add	 rax, 8
  000a7	8b 55 04	 mov	 edx, DWORD PTR i$1[rbp]
  000aa	48 8b c8	 mov	 rcx, rax
  000ad	e8 00 00 00 00	 call	 ??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
  000b2	48 83 c0 10	 add	 rax, 16
  000b6	48 8b c8	 mov	 rcx, rax
  000b9	e8 00 00 00 00	 call	 ?clear@?$ImVector@G@@QEAAXXZ ; ImVector<unsigned short>::clear

; 1675 :     }

  000be	e9 70 ff ff ff	 jmp	 $LN2@ClearFreeM
$LN3@ClearFreeM:

; 1676 :     _Current = 0;

  000c3	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ca	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 1677 :     _Count = 1;

  000d0	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d7	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [rax+4], 1

; 1678 :     _Channels.clear();

  000de	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e5	48 83 c0 08	 add	 rax, 8
  000e9	48 8b c8	 mov	 rcx, rax
  000ec	e8 00 00 00 00	 call	 ?clear@?$ImVector@UImDrawChannel@@@@QEAAXXZ ; ImVector<ImDrawChannel>::clear

; 1679 : }

  000f1	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000f8	5f		 pop	 rdi
  000f9	5d		 pop	 rbp
  000fa	c3		 ret	 0
?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ ENDP	; ImDrawListSplitter::ClearFreeMemory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?Clear@ImDrawListSplitter@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?Clear@ImDrawListSplitter@@QEAAXXZ PROC			; ImDrawListSplitter::Clear, COMDAT

; 2451 :     inline void                 Clear() { _Current = 0; _Count = 1; } // Do not clear Channels[] so our allocations are reused next frame

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00035	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [rax+4], 1
  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
?Clear@ImDrawListSplitter@@QEAAXXZ ENDP			; ImDrawListSplitter::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0ImDrawListSplitter@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImDrawListSplitter@@QEAA@XZ PROC			; ImDrawListSplitter::ImDrawListSplitter, COMDAT

; 2449 :     inline ImDrawListSplitter()  { memset(this, 0, sizeof(*this)); }

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 c0 08	 add	 rax, 8
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 ??0?$ImVector@UImDrawChannel@@@@QEAA@XZ ; ImVector<ImDrawChannel>::ImVector<ImDrawChannel>
  0003d	41 b8 18 00 00
	00		 mov	 r8d, 24
  00043	33 d2		 xor	 edx, edx
  00045	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004c	e8 00 00 00 00	 call	 memset
  00051	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00058	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005f	5f		 pop	 rdi
  00060	5d		 pop	 rbp
  00061	c3		 ret	 0
??0ImDrawListSplitter@@QEAA@XZ ENDP			; ImDrawListSplitter::ImDrawListSplitter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z PROC	; ImVector<ImDrawChannel>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z ENDP	; ImVector<ImDrawChannel>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z PROC	; ImVector<ImDrawChannel>::resize, COMDAT

; 1800 :     inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 e8 00 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  0003e	7e 20		 jle	 SHORT $LN2@resize
  00040	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  00046	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z ; ImVector<ImDrawChannel>::_grow_capacity
  00052	8b d0		 mov	 edx, eax
  00054	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z ; ImVector<ImDrawChannel>::reserve
$LN2@resize:
  00060	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  0006d	89 08		 mov	 DWORD PTR [rax], ecx
  0006f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z ENDP	; ImVector<ImDrawChannel>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z PROC ; ImVector<ImDrawChannel>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z ENDP ; ImVector<ImDrawChannel>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z PROC ; ImVector<ImDrawChannel>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0006f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ENDP ; ImVector<ImDrawChannel>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@UImDrawChannel@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImDrawChannel@@@@QEAAXXZ PROC	; ImVector<ImDrawChannel>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@UImDrawChannel@@@@QEAAXXZ ENDP	; ImVector<ImDrawChannel>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@UImDrawChannel@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImDrawChannel@@@@QEAA@XZ PROC		; ImVector<ImDrawChannel>::ImVector<ImDrawChannel>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@UImDrawChannel@@@@QEAA@XZ ENDP		; ImVector<ImDrawChannel>::ImVector<ImDrawChannel>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImDrawChannel@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0ImDrawChannel@@QEAA@XZ PROC				; ImDrawChannel::ImDrawChannel, COMDAT
$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 8b c8	 mov	 rcx, rax
  0003f	e8 00 00 00 00	 call	 ??0?$ImVector@UImDrawCmd@@@@QEAA@XZ ; ImVector<ImDrawCmd>::ImVector<ImDrawCmd>
  00044	90		 npad	 1
  00045	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004c	48 83 c0 10	 add	 rax, 16
  00050	48 8b c8	 mov	 rcx, rax
  00053	e8 00 00 00 00	 call	 ??0?$ImVector@G@@QEAA@XZ ; ImVector<unsigned short>::ImVector<unsigned short>
  00058	90		 npad	 1
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??0ImDrawChannel@@QEAA@XZ ENDP				; ImDrawChannel::ImDrawChannel
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0ImDrawChannel@@QEAA@XZ@4HA PROC		; `ImDrawChannel::ImDrawChannel'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$ImVector@UImDrawCmd@@@@QEAA@XZ ; ImVector<ImDrawCmd>::~ImVector<ImDrawCmd>
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ImDrawChannel@@QEAA@XZ@4HA ENDP		; `ImDrawChannel::ImDrawChannel'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0ImDrawChannel@@QEAA@XZ@4HA PROC		; `ImDrawChannel::ImDrawChannel'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$ImVector@UImDrawCmd@@@@QEAA@XZ ; ImVector<ImDrawCmd>::~ImVector<ImDrawCmd>
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ImDrawChannel@@QEAA@XZ@4HA ENDP		; `ImDrawChannel::ImDrawChannel'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?erase@?$ImVector@UImDrawCmd@@@@QEAAPEAUImDrawCmd@@PEBU2@@Z
_TEXT	SEGMENT
off$ = 8
tv93 = 216
this$ = 256
it$ = 264
?erase@?$ImVector@UImDrawCmd@@@@QEAAPEAUImDrawCmd@@PEBU2@@Z PROC ; ImVector<ImDrawCmd>::erase, COMDAT

; 1810 :     inline T*           erase(const T* it)                  { IM_ASSERT(it >= Data && it < Data + Size); const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + 1, ((size_t)Size - (size_t)off - 1) * sizeof(T)); Size--; return Data + off; }

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0003a	48 39 85 08 01
	00 00		 cmp	 QWORD PTR it$[rbp], rax
  00041	72 22		 jb	 SHORT $LN3@erase
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0004d	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  00051	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0005c	48 39 85 08 01
	00 00		 cmp	 QWORD PTR it$[rbp], rax
  00063	72 1c		 jb	 SHORT $LN4@erase
$LN3@erase:
  00065	41 b8 12 07 00
	00		 mov	 r8d, 1810		; 00000712H
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@NPHOAPAC@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAt?$AA?5?$AA?$DM?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CL?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007f	33 c0		 xor	 eax, eax
$LN4@erase:
  00081	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00088	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0008c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR it$[rbp]
  00093	48 2b c8	 sub	 rcx, rax
  00096	48 8b c1	 mov	 rax, rcx
  00099	48 99		 cdq
  0009b	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  000a0	48 f7 f9	 idiv	 rcx
  000a3	48 89 45 08	 mov	 QWORD PTR off$[rbp], rax
  000a7	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ae	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  000b1	48 2b 45 08	 sub	 rax, QWORD PTR off$[rbp]
  000b5	48 ff c8	 dec	 rax
  000b8	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  000bc	48 6b 4d 08 38	 imul	 rcx, QWORD PTR off$[rbp], 56 ; 00000038H
  000c1	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  000c8	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  000cc	48 8d 4c 0a 38	 lea	 rcx, QWORD PTR [rdx+rcx+56]
  000d1	48 6b 55 08 38	 imul	 rdx, QWORD PTR off$[rbp], 56 ; 00000038H
  000d6	4c 8b 85 00 01
	00 00		 mov	 r8, QWORD PTR this$[rbp]
  000dd	49 03 50 08	 add	 rdx, QWORD PTR [r8+8]
  000e1	48 89 95 d8 00
	00 00		 mov	 QWORD PTR tv93[rbp], rdx
  000e8	4c 8b c0	 mov	 r8, rax
  000eb	48 8b d1	 mov	 rdx, rcx
  000ee	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv93[rbp]
  000f5	48 8b c8	 mov	 rcx, rax
  000f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memmove
  000fe	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00105	8b 00		 mov	 eax, DWORD PTR [rax]
  00107	ff c8		 dec	 eax
  00109	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00110	89 01		 mov	 DWORD PTR [rcx], eax
  00112	48 6b 45 08 38	 imul	 rax, QWORD PTR off$[rbp], 56 ; 00000038H
  00117	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011e	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00122	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00129	5f		 pop	 rdi
  0012a	5d		 pop	 rbp
  0012b	c3		 ret	 0
?erase@?$ImVector@UImDrawCmd@@@@QEAAPEAUImDrawCmd@@PEBU2@@Z ENDP ; ImVector<ImDrawCmd>::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ PROC		; ImVector<ImDrawCmd>::pop_back, COMDAT

; 1808 :     inline void         pop_back()                          { IM_ASSERT(Size > 0); Size--; }

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	83 38 00	 cmp	 DWORD PTR [rax], 0
  00034	7f 1c		 jg	 SHORT $LN3@pop_back
  00036	41 b8 10 07 00
	00		 mov	 r8d, 1808		; 00000710H
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00050	33 c0		 xor	 eax, eax
$LN3@pop_back:
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	8b 00		 mov	 eax, DWORD PTR [rax]
  0005b	ff c8		 dec	 eax
  0005d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00064	89 01		 mov	 DWORD PTR [rcx], eax
  00066	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006d	5f		 pop	 rdi
  0006e	5d		 pop	 rbp
  0006f	c3		 ret	 0
?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ ENDP		; ImVector<ImDrawCmd>::pop_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z PROC ; ImVector<ImDrawCmd>::push_back, COMDAT

; 1807 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00040	39 08		 cmp	 DWORD PTR [rax], ecx
  00042	75 27		 jne	 SHORT $LN2@push_back
  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	8b 00		 mov	 eax, DWORD PTR [rax]
  0004d	ff c0		 inc	 eax
  0004f	8b d0		 mov	 edx, eax
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEBAHH@Z ; ImVector<ImDrawCmd>::_grow_capacity
  0005d	8b d0		 mov	 edx, eax
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z ; ImVector<ImDrawCmd>::reserve
$LN2@push_back:
  0006b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00075	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  00079	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00080	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00084	41 b8 38 00 00
	00		 mov	 r8d, 56			; 00000038H
  0008a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00091	48 8b c8	 mov	 rcx, rax
  00094	e8 00 00 00 00	 call	 memcpy
  00099	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a0	8b 00		 mov	 eax, DWORD PTR [rax]
  000a2	ff c0		 inc	 eax
  000a4	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	89 01		 mov	 DWORD PTR [rcx], eax
  000ad	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b4	5f		 pop	 rdi
  000b5	5d		 pop	 rbp
  000b6	c3		 ret	 0
?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z ENDP ; ImVector<ImDrawCmd>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z PROC		; ImVector<ImDrawCmd>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z ENDP		; ImVector<ImDrawCmd>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z PROC		; ImVector<ImDrawCmd>::resize, COMDAT

; 1800 :     inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 e8 00 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  0003e	7e 20		 jle	 SHORT $LN2@resize
  00040	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  00046	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEBAHH@Z ; ImVector<ImDrawCmd>::_grow_capacity
  00052	8b d0		 mov	 edx, eax
  00054	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z ; ImVector<ImDrawCmd>::reserve
$LN2@resize:
  00060	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  0006d	89 08		 mov	 DWORD PTR [rax], ecx
  0006f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z ENDP		; ImVector<ImDrawCmd>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEBAHH@Z PROC	; ImVector<ImDrawCmd>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEBAHH@Z ENDP	; ImVector<ImDrawCmd>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ PROC ; ImVector<ImDrawCmd>::back, COMDAT

; 1795 :     inline T&           back()                              { IM_ASSERT(Size > 0); return Data[Size - 1]; }

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	83 38 00	 cmp	 DWORD PTR [rax], 0
  00034	7f 1c		 jg	 SHORT $LN3@back
  00036	41 b8 03 07 00
	00		 mov	 r8d, 1795		; 00000703H
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00050	33 c0		 xor	 eax, eax
$LN3@back:
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	8b 00		 mov	 eax, DWORD PTR [rax]
  0005b	ff c8		 dec	 eax
  0005d	48 98		 cdqe
  0005f	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  00063	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0006e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00075	5f		 pop	 rdi
  00076	5d		 pop	 rbp
  00077	c3		 ret	 0
?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ ENDP ; ImVector<ImDrawCmd>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z PROC	; ImVector<ImDrawCmd>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  0006f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z ENDP	; ImVector<ImDrawCmd>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ PROC		; ImVector<ImDrawCmd>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ ENDP		; ImVector<ImDrawCmd>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@UImDrawCmd@@@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@UImDrawCmd@@@@QEAA@XZ PROC		; ImVector<ImDrawCmd>::~ImVector<ImDrawCmd>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@UImDrawCmd@@@@QEAA@XZ ENDP		; ImVector<ImDrawCmd>::~ImVector<ImDrawCmd>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??4?$ImVector@UImDrawCmd@@@@QEAAAEAU0@AEBU0@@Z
_TEXT	SEGMENT
this$ = 224
src$ = 232
??4?$ImVector@UImDrawCmd@@@@QEAAAEAU0@AEBU0@@Z PROC	; ImVector<ImDrawCmd>::operator=, COMDAT

; 1774 :     inline ImVector<T>& operator=(const ImVector<T>& src)   { clear(); resize(src.Size); if (src.Data) memcpy(Data, src.Data, (size_t)Size * sizeof(T)); return *this; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00036	e8 00 00 00 00	 call	 ?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ ; ImVector<ImDrawCmd>::clear
  0003b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR src$[rbp]
  00042	8b 10		 mov	 edx, DWORD PTR [rax]
  00044	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004b	e8 00 00 00 00	 call	 ?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z ; ImVector<ImDrawCmd>::resize
  00050	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR src$[rbp]
  00057	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0005c	74 2c		 je	 SHORT $LN2@operator
  0005e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00065	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00068	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  0006c	4c 8b c0	 mov	 r8, rax
  0006f	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR src$[rbp]
  00076	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0007a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00081	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00085	e8 00 00 00 00	 call	 memcpy
$LN2@operator:
  0008a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00091	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00098	5f		 pop	 rdi
  00099	5d		 pop	 rbp
  0009a	c3		 ret	 0
??4?$ImVector@UImDrawCmd@@@@QEAAAEAU0@AEBU0@@Z ENDP	; ImVector<ImDrawCmd>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@UImDrawCmd@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImDrawCmd@@@@QEAA@XZ PROC		; ImVector<ImDrawCmd>::ImVector<ImDrawCmd>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@UImDrawCmd@@@@QEAA@XZ ENDP		; ImVector<ImDrawCmd>::ImVector<ImDrawCmd>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImDrawCmdHeader@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImDrawCmdHeader@@QEAA@XZ PROC			; ImDrawCmdHeader::ImDrawCmdHeader, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@XZ	; ImVec4::ImVec4
  00039	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00047	5f		 pop	 rdi
  00048	5d		 pop	 rbp
  00049	c3		 ret	 0
??0ImDrawCmdHeader@@QEAA@XZ ENDP			; ImDrawCmdHeader::ImDrawCmdHeader
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0ImDrawCmd@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImDrawCmd@@QEAA@XZ PROC				; ImDrawCmd::ImDrawCmd, COMDAT

; 2403 :     ImDrawCmd() { memset(this, 0, sizeof(*this)); } // Also ensure our padding fields are zeroed

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@XZ	; ImVec4::ImVec4
  00039	41 b8 38 00 00
	00		 mov	 r8d, 56			; 00000038H
  0003f	33 d2		 xor	 edx, edx
  00041	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00048	e8 00 00 00 00	 call	 memset
  0004d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00054	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??0ImDrawCmd@@QEAA@XZ ENDP				; ImDrawCmd::ImDrawCmd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@G@@QEAAXAEBG@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@G@@QEAAXAEBG@Z PROC		; ImVector<unsigned short>::push_back, COMDAT

; 1807 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00040	39 08		 cmp	 DWORD PTR [rax], ecx
  00042	75 27		 jne	 SHORT $LN2@push_back
  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	8b 00		 mov	 eax, DWORD PTR [rax]
  0004d	ff c0		 inc	 eax
  0004f	8b d0		 mov	 edx, eax
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@G@@QEBAHH@Z ; ImVector<unsigned short>::_grow_capacity
  0005d	8b d0		 mov	 edx, eax
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?reserve@?$ImVector@G@@QEAAXH@Z ; ImVector<unsigned short>::reserve
$LN2@push_back:
  0006b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00075	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00080	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00084	41 b8 02 00 00
	00		 mov	 r8d, 2
  0008a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00091	48 8b c8	 mov	 rcx, rax
  00094	e8 00 00 00 00	 call	 memcpy
  00099	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a0	8b 00		 mov	 eax, DWORD PTR [rax]
  000a2	ff c0		 inc	 eax
  000a4	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	89 01		 mov	 DWORD PTR [rcx], eax
  000ad	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b4	5f		 pop	 rdi
  000b5	5d		 pop	 rbp
  000b6	c3		 ret	 0
?push_back@?$ImVector@G@@QEAAXAEBG@Z ENDP		; ImVector<unsigned short>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@G@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@G@@QEAAXH@Z PROC			; ImVector<unsigned short>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 77		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 d1 e0	 shl	 rax, 1
  0004c	48 8b c8	 mov	 rcx, rax
  0004f	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00054	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00058	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00064	74 34		 je	 SHORT $LN3@reserve
  00066	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006d	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00070	48 d1 e0	 shl	 rax, 1
  00073	4c 8b c0	 mov	 r8, rax
  00076	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007d	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00081	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00085	e8 00 00 00 00	 call	 memcpy
  0008a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00091	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00095	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a1	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a5	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000a9	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b0	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b6	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000b9	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c0	5f		 pop	 rdi
  000c1	5d		 pop	 rbp
  000c2	c3		 ret	 0
?reserve@?$ImVector@G@@QEAAXH@Z ENDP			; ImVector<unsigned short>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?shrink@?$ImVector@G@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?shrink@?$ImVector@G@@QEAAXH@Z PROC			; ImVector<unsigned short>::shrink, COMDAT

; 1802 :     inline void         shrink(int new_size)                { IM_ASSERT(new_size <= Size); Size = new_size; } // Resize a vector to a smaller size, guaranteed not to cause a reallocation

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 00		 mov	 eax, DWORD PTR [rax]
  00037	39 85 e8 00 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  0003d	7e 1c		 jle	 SHORT $LN3@shrink
  0003f	41 b8 0a 07 00
	00		 mov	 r8d, 1802		; 0000070aH
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@BPLGCGDC@?$AAn?$AAe?$AAw?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00059	33 c0		 xor	 eax, eax
$LN3@shrink:
  0005b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  00068	89 08		 mov	 DWORD PTR [rax], ecx
  0006a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00071	5f		 pop	 rdi
  00072	5d		 pop	 rbp
  00073	c3		 ret	 0
?shrink@?$ImVector@G@@QEAAXH@Z ENDP			; ImVector<unsigned short>::shrink
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?resize@?$ImVector@G@@QEAAXHAEBG@Z
_TEXT	SEGMENT
n$1 = 4
this$ = 256
new_size$ = 264
v$ = 272
?resize@?$ImVector@G@@QEAAXHAEBG@Z PROC			; ImVector<unsigned short>::resize, COMDAT

; 1801 :     inline void         resize(int new_size, const T& v)    { if (new_size > Capacity) reserve(_grow_capacity(new_size)); if (new_size > Size) for (int n = Size; n < new_size; n++) memcpy(&Data[n], &v, sizeof(v)); Size = new_size; }

$LN8:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00033	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003a	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0003d	39 85 08 01 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  00043	7e 20		 jle	 SHORT $LN5@resize
  00045	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  0004b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00052	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@G@@QEBAHH@Z ; ImVector<unsigned short>::_grow_capacity
  00057	8b d0		 mov	 edx, eax
  00059	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00060	e8 00 00 00 00	 call	 ?reserve@?$ImVector@G@@QEAAXH@Z ; ImVector<unsigned short>::reserve
$LN5@resize:
  00065	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006c	8b 00		 mov	 eax, DWORD PTR [rax]
  0006e	39 85 08 01 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  00074	7e 4b		 jle	 SHORT $LN6@resize
  00076	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007d	8b 00		 mov	 eax, DWORD PTR [rax]
  0007f	89 45 04	 mov	 DWORD PTR n$1[rbp], eax
  00082	eb 08		 jmp	 SHORT $LN4@resize
$LN2@resize:
  00084	8b 45 04	 mov	 eax, DWORD PTR n$1[rbp]
  00087	ff c0		 inc	 eax
  00089	89 45 04	 mov	 DWORD PTR n$1[rbp], eax
$LN4@resize:
  0008c	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR new_size$[rbp]
  00092	39 45 04	 cmp	 DWORD PTR n$1[rbp], eax
  00095	7d 2a		 jge	 SHORT $LN3@resize
  00097	48 63 45 04	 movsxd	 rax, DWORD PTR n$1[rbp]
  0009b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a2	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000a6	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  000aa	41 b8 02 00 00
	00		 mov	 r8d, 2
  000b0	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  000b7	48 8b c8	 mov	 rcx, rax
  000ba	e8 00 00 00 00	 call	 memcpy
  000bf	eb c3		 jmp	 SHORT $LN2@resize
$LN3@resize:
$LN6@resize:
  000c1	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c8	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  000ce	89 08		 mov	 DWORD PTR [rax], ecx
  000d0	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000d7	5f		 pop	 rdi
  000d8	5d		 pop	 rbp
  000d9	c3		 ret	 0
?resize@?$ImVector@G@@QEAAXHAEBG@Z ENDP			; ImVector<unsigned short>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?resize@?$ImVector@G@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@G@@QEAAXH@Z PROC			; ImVector<unsigned short>::resize, COMDAT

; 1800 :     inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 e8 00 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  0003e	7e 20		 jle	 SHORT $LN2@resize
  00040	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  00046	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@G@@QEBAHH@Z ; ImVector<unsigned short>::_grow_capacity
  00052	8b d0		 mov	 edx, eax
  00054	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	e8 00 00 00 00	 call	 ?reserve@?$ImVector@G@@QEAAXH@Z ; ImVector<unsigned short>::reserve
$LN2@resize:
  00060	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  0006d	89 08		 mov	 DWORD PTR [rax], ecx
  0006f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
?resize@?$ImVector@G@@QEAAXH@Z ENDP			; ImVector<unsigned short>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@G@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@G@@QEBAHH@Z PROC		; ImVector<unsigned short>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@G@@QEBAHH@Z ENDP		; ImVector<unsigned short>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@G@@QEAAAEAGH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@G@@QEAAAEAGH@Z PROC			; ImVector<unsigned short>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00076	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@G@@QEAAAEAGH@Z ENDP			; ImVector<unsigned short>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?empty@?$ImVector@G@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?empty@?$ImVector@G@@QEBA_NXZ PROC			; ImVector<unsigned short>::empty, COMDAT

; 1781 :     inline bool         empty() const                       { return Size == 0; }

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+248]
  00028	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	83 38 00	 cmp	 DWORD PTR [rax], 0
  00032	75 0c		 jne	 SHORT $LN3@empty
  00034	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv66[rbp], 1
  0003e	eb 0a		 jmp	 SHORT $LN4@empty
$LN3@empty:
  00040	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv66[rbp], 0
$LN4@empty:
  0004a	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv66[rbp]
  00051	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
?empty@?$ImVector@G@@QEBA_NXZ ENDP			; ImVector<unsigned short>::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@G@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@G@@QEAAXXZ PROC			; ImVector<unsigned short>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@G@@QEAAXXZ ENDP			; ImVector<unsigned short>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@G@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@G@@QEAA@XZ PROC				; ImVector<unsigned short>::~ImVector<unsigned short>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@G@@QEAA@XZ ENDP				; ImVector<unsigned short>::~ImVector<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??4?$ImVector@G@@QEAAAEAU0@AEBU0@@Z
_TEXT	SEGMENT
this$ = 224
src$ = 232
??4?$ImVector@G@@QEAAAEAU0@AEBU0@@Z PROC		; ImVector<unsigned short>::operator=, COMDAT

; 1774 :     inline ImVector<T>& operator=(const ImVector<T>& src)   { clear(); resize(src.Size); if (src.Data) memcpy(Data, src.Data, (size_t)Size * sizeof(T)); return *this; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00036	e8 00 00 00 00	 call	 ?clear@?$ImVector@G@@QEAAXXZ ; ImVector<unsigned short>::clear
  0003b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR src$[rbp]
  00042	8b 10		 mov	 edx, DWORD PTR [rax]
  00044	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004b	e8 00 00 00 00	 call	 ?resize@?$ImVector@G@@QEAAXH@Z ; ImVector<unsigned short>::resize
  00050	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR src$[rbp]
  00057	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0005c	74 2b		 je	 SHORT $LN2@operator
  0005e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00065	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00068	48 d1 e0	 shl	 rax, 1
  0006b	4c 8b c0	 mov	 r8, rax
  0006e	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR src$[rbp]
  00075	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00079	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00080	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00084	e8 00 00 00 00	 call	 memcpy
$LN2@operator:
  00089	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00090	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00097	5f		 pop	 rdi
  00098	5d		 pop	 rbp
  00099	c3		 ret	 0
??4?$ImVector@G@@QEAAAEAU0@AEBU0@@Z ENDP		; ImVector<unsigned short>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@G@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@G@@QEAA@XZ PROC				; ImVector<unsigned short>::ImVector<unsigned short>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@G@@QEAA@XZ ENDP				; ImVector<unsigned short>::ImVector<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??3@YAXPEAXUImNewWrapper@@0@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
__formal$ = 240
??3@YAXPEAXUImNewWrapper@@0@Z PROC			; operator delete, COMDAT

; 1740 : inline void  operator delete(void*, ImNewWrapper, void*)   {} // This is only required so we can use the symmetrical new()

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00017	48 8b ec	 mov	 rbp, rsp
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00031	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00038	5f		 pop	 rdi
  00039	5d		 pop	 rbp
  0003a	c3		 ret	 0
??3@YAXPEAXUImNewWrapper@@0@Z ENDP			; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??2@YAPEAX_KUImNewWrapper@@PEAX@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
ptr$ = 240
??2@YAPEAX_KUImNewWrapper@@PEAX@Z PROC			; operator new, COMDAT

; 1739 : inline void* operator new(size_t, ImNewWrapper, void* ptr) { return ptr; }

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00017	48 8b ec	 mov	 rbp, rsp
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00031	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR ptr$[rbp]
  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
??2@YAPEAX_KUImNewWrapper@@PEAX@Z ENDP			; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z
_TEXT	SEGMENT
style$ = 8
colors$ = 40
$T1 = 1028
$T2 = 1076
$T3 = 1124
$T4 = 1172
$T5 = 1220
$T6 = 1268
$T7 = 1316
$T8 = 1364
$T9 = 1412
$T10 = 1460
$T11 = 1508
$T12 = 1556
$T13 = 1604
$T14 = 1652
$T15 = 1700
$T16 = 1748
$T17 = 1796
$T18 = 1844
$T19 = 1892
$T20 = 1940
$T21 = 1988
$T22 = 2036
$T23 = 2084
$T24 = 2132
$T25 = 2180
$T26 = 2228
$T27 = 2276
$T28 = 2324
$T29 = 2372
$T30 = 2420
$T31 = 2468
$T32 = 2516
$T33 = 2564
$T34 = 2612
$T35 = 2660
$T36 = 2708
$T37 = 2756
$T38 = 2804
$T39 = 2852
$T40 = 2900
$T41 = 2948
$T42 = 2996
$T43 = 3044
$T44 = 3092
$T45 = 3140
$T46 = 3188
$T47 = 3236
$T48 = 3284
$T49 = 3332
$T50 = 3380
$T51 = 3428
tv1010 = 3464
tv910 = 3464
tv66 = 3464
dst$ = 3504
?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z PROC	; ImGui::StyleColorsClassic, COMDAT

; 235  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec c0 0d
	00 00		 sub	 rsp, 3520		; 00000dc0H
  0000f	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 70 03 00 00	 mov	 ecx, 880		; 00000370H
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 e8
	0d 00 00	 mov	 rcx, QWORD PTR [rsp+3560]

; 236  :     ImGuiStyle* style = dst ? dst : &ImGui::GetStyle();

  0002b	48 83 bd b0 0d
	00 00 00	 cmp	 QWORD PTR dst$[rbp], 0
  00033	74 10		 je	 SHORT $LN3@StyleColor
  00035	48 8b 85 b0 0d
	00 00		 mov	 rax, QWORD PTR dst$[rbp]
  0003c	48 89 85 88 0d
	00 00		 mov	 QWORD PTR tv66[rbp], rax
  00043	eb 0c		 jmp	 SHORT $LN4@StyleColor
$LN3@StyleColor:
  00045	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  0004a	48 89 85 88 0d
	00 00		 mov	 QWORD PTR tv66[rbp], rax
$LN4@StyleColor:
  00051	48 8b 85 88 0d
	00 00		 mov	 rax, QWORD PTR tv66[rbp]
  00058	48 89 45 08	 mov	 QWORD PTR style$[rbp], rax

; 237  :     ImVec4* colors = style->Colors;

  0005c	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00060	48 05 c8 00 00
	00		 add	 rax, 200		; 000000c8H
  00066	48 89 45 28	 mov	 QWORD PTR colors$[rbp], rax

; 238  : 
; 239  :     colors[ImGuiCol_Text]                   = ImVec4(0.90f, 0.90f, 0.90f, 1.00f);

  0006a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00072	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00078	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f666666
  00080	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f666666
  00088	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f666666
  00090	48 8d 8d 04 04
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00097	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0009c	b9 10 00 00 00	 mov	 ecx, 16
  000a1	48 6b c9 00	 imul	 rcx, rcx, 0
  000a5	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  000a9	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  000ad	48 8b f0	 mov	 rsi, rax
  000b0	b9 10 00 00 00	 mov	 ecx, 16
  000b5	f3 a4		 rep movsb

; 240  :     colors[ImGuiCol_TextDisabled]           = ImVec4(0.60f, 0.60f, 0.60f, 1.00f);

  000b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000bf	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  000c5	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f19999a
  000cd	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f19999a
  000d5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f19999a
  000dd	48 8d 8d 34 04
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  000e4	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  000e9	b9 10 00 00 00	 mov	 ecx, 16
  000ee	48 6b c9 01	 imul	 rcx, rcx, 1
  000f2	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  000f6	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  000fa	48 8b f0	 mov	 rsi, rax
  000fd	b9 10 00 00 00	 mov	 ecx, 16
  00102	f3 a4		 rep movsb

; 241  :     colors[ImGuiCol_WindowBg]               = ImVec4(0.00f, 0.00f, 0.00f, 0.85f);

  00104	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  0010c	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00112	0f 57 db	 xorps	 xmm3, xmm3
  00115	0f 57 d2	 xorps	 xmm2, xmm2
  00118	0f 57 c9	 xorps	 xmm1, xmm1
  0011b	48 8d 8d 64 04
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  00122	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00127	b9 10 00 00 00	 mov	 ecx, 16
  0012c	48 6b c9 02	 imul	 rcx, rcx, 2
  00130	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00134	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00138	48 8b f0	 mov	 rsi, rax
  0013b	b9 10 00 00 00	 mov	 ecx, 16
  00140	f3 a4		 rep movsb

; 242  :     colors[ImGuiCol_ChildBg]                = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);

  00142	0f 57 c0	 xorps	 xmm0, xmm0
  00145	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0014b	0f 57 db	 xorps	 xmm3, xmm3
  0014e	0f 57 d2	 xorps	 xmm2, xmm2
  00151	0f 57 c9	 xorps	 xmm1, xmm1
  00154	48 8d 8d 94 04
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  0015b	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00160	b9 10 00 00 00	 mov	 ecx, 16
  00165	48 6b c9 03	 imul	 rcx, rcx, 3
  00169	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0016d	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00171	48 8b f0	 mov	 rsi, rax
  00174	b9 10 00 00 00	 mov	 ecx, 16
  00179	f3 a4		 rep movsb

; 243  :     colors[ImGuiCol_PopupBg]                = ImVec4(0.11f, 0.11f, 0.14f, 0.92f);

  0017b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6b851f
  00183	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00189	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e0f5c29
  00191	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3de147ae
  00199	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3de147ae
  001a1	48 8d 8d c4 04
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  001a8	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  001ad	b9 10 00 00 00	 mov	 ecx, 16
  001b2	48 6b c9 04	 imul	 rcx, rcx, 4
  001b6	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  001ba	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  001be	48 8b f0	 mov	 rsi, rax
  001c1	b9 10 00 00 00	 mov	 ecx, 16
  001c6	f3 a4		 rep movsb

; 244  :     colors[ImGuiCol_Border]                 = ImVec4(0.50f, 0.50f, 0.50f, 0.50f);

  001c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001d0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  001d6	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000
  001de	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f000000
  001e6	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  001ee	48 8d 8d f4 04
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  001f5	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  001fa	b9 10 00 00 00	 mov	 ecx, 16
  001ff	48 6b c9 05	 imul	 rcx, rcx, 5
  00203	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00207	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0020b	48 8b f0	 mov	 rsi, rax
  0020e	b9 10 00 00 00	 mov	 ecx, 16
  00213	f3 a4		 rep movsb

; 245  :     colors[ImGuiCol_BorderShadow]           = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);

  00215	0f 57 c0	 xorps	 xmm0, xmm0
  00218	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0021e	0f 57 db	 xorps	 xmm3, xmm3
  00221	0f 57 d2	 xorps	 xmm2, xmm2
  00224	0f 57 c9	 xorps	 xmm1, xmm1
  00227	48 8d 8d 24 05
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  0022e	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00233	b9 10 00 00 00	 mov	 ecx, 16
  00238	48 6b c9 06	 imul	 rcx, rcx, 6
  0023c	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00240	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00244	48 8b f0	 mov	 rsi, rax
  00247	b9 10 00 00 00	 mov	 ecx, 16
  0024c	f3 a4		 rep movsb

; 246  :     colors[ImGuiCol_FrameBg]                = ImVec4(0.43f, 0.43f, 0.43f, 0.39f);

  0024e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec7ae14
  00256	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0025c	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3edc28f6
  00264	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3edc28f6
  0026c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3edc28f6
  00274	48 8d 8d 54 05
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0027b	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00280	b9 10 00 00 00	 mov	 ecx, 16
  00285	48 6b c9 07	 imul	 rcx, rcx, 7
  00289	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0028d	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00291	48 8b f0	 mov	 rsi, rax
  00294	b9 10 00 00 00	 mov	 ecx, 16
  00299	f3 a4		 rep movsb

; 247  :     colors[ImGuiCol_FrameBgHovered]         = ImVec4(0.47f, 0.47f, 0.69f, 0.40f);

  0029b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  002a3	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  002a9	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f30a3d7
  002b1	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ef0a3d7
  002b9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ef0a3d7
  002c1	48 8d 8d 84 05
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  002c8	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  002cd	b9 10 00 00 00	 mov	 ecx, 16
  002d2	48 6b c9 08	 imul	 rcx, rcx, 8
  002d6	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  002da	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  002de	48 8b f0	 mov	 rsi, rax
  002e1	b9 10 00 00 00	 mov	 ecx, 16
  002e6	f3 a4		 rep movsb

; 248  :     colors[ImGuiCol_FrameBgActive]          = ImVec4(0.42f, 0.41f, 0.64f, 0.69f);

  002e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f30a3d7
  002f0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  002f6	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f23d70a
  002fe	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ed1eb85
  00306	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ed70a3d
  0030e	48 8d 8d b4 05
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00315	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0031a	b9 10 00 00 00	 mov	 ecx, 16
  0031f	48 6b c9 09	 imul	 rcx, rcx, 9
  00323	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00327	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0032b	48 8b f0	 mov	 rsi, rax
  0032e	b9 10 00 00 00	 mov	 ecx, 16
  00333	f3 a4		 rep movsb

; 249  :     colors[ImGuiCol_TitleBg]                = ImVec4(0.27f, 0.27f, 0.54f, 0.83f);

  00335	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f547ae1
  0033d	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00343	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f0a3d71
  0034b	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e8a3d71
  00353	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e8a3d71
  0035b	48 8d 8d e4 05
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00362	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00367	b9 10 00 00 00	 mov	 ecx, 16
  0036c	48 6b c9 0a	 imul	 rcx, rcx, 10
  00370	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00374	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00378	48 8b f0	 mov	 rsi, rax
  0037b	b9 10 00 00 00	 mov	 ecx, 16
  00380	f3 a4		 rep movsb

; 250  :     colors[ImGuiCol_TitleBgActive]          = ImVec4(0.32f, 0.32f, 0.63f, 0.87f);

  00382	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5eb852
  0038a	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00390	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f2147ae
  00398	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ea3d70a
  003a0	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ea3d70a
  003a8	48 8d 8d 14 06
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  003af	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  003b4	b9 10 00 00 00	 mov	 ecx, 16
  003b9	48 6b c9 0b	 imul	 rcx, rcx, 11
  003bd	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  003c1	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  003c5	48 8b f0	 mov	 rsi, rax
  003c8	b9 10 00 00 00	 mov	 ecx, 16
  003cd	f3 a4		 rep movsb

; 251  :     colors[ImGuiCol_TitleBgCollapsed]       = ImVec4(0.40f, 0.40f, 0.80f, 0.20f);

  003cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  003d7	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  003dd	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f4ccccd
  003e5	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ecccccd
  003ed	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ecccccd
  003f5	48 8d 8d 44 06
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  003fc	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00401	b9 10 00 00 00	 mov	 ecx, 16
  00406	48 6b c9 0c	 imul	 rcx, rcx, 12
  0040a	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0040e	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00412	48 8b f0	 mov	 rsi, rax
  00415	b9 10 00 00 00	 mov	 ecx, 16
  0041a	f3 a4		 rep movsb

; 252  :     colors[ImGuiCol_MenuBarBg]              = ImVec4(0.40f, 0.40f, 0.55f, 0.80f);

  0041c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00424	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0042a	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f0ccccd
  00432	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ecccccd
  0043a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ecccccd
  00442	48 8d 8d 74 06
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  00449	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0044e	b9 10 00 00 00	 mov	 ecx, 16
  00453	48 6b c9 0d	 imul	 rcx, rcx, 13
  00457	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0045b	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0045f	48 8b f0	 mov	 rsi, rax
  00462	b9 10 00 00 00	 mov	 ecx, 16
  00467	f3 a4		 rep movsb

; 253  :     colors[ImGuiCol_ScrollbarBg]            = ImVec4(0.20f, 0.25f, 0.30f, 0.60f);

  00469	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00471	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00477	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e99999a
  0047f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e800000
  00487	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e4ccccd
  0048f	48 8d 8d a4 06
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  00496	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0049b	b9 10 00 00 00	 mov	 ecx, 16
  004a0	48 6b c9 0e	 imul	 rcx, rcx, 14
  004a4	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  004a8	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  004ac	48 8b f0	 mov	 rsi, rax
  004af	b9 10 00 00 00	 mov	 ecx, 16
  004b4	f3 a4		 rep movsb

; 254  :     colors[ImGuiCol_ScrollbarGrab]          = ImVec4(0.40f, 0.40f, 0.80f, 0.30f);

  004b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  004be	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  004c4	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f4ccccd
  004cc	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ecccccd
  004d4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ecccccd
  004dc	48 8d 8d d4 06
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  004e3	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  004e8	b9 10 00 00 00	 mov	 ecx, 16
  004ed	48 6b c9 0f	 imul	 rcx, rcx, 15
  004f1	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  004f5	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  004f9	48 8b f0	 mov	 rsi, rax
  004fc	b9 10 00 00 00	 mov	 ecx, 16
  00501	f3 a4		 rep movsb

; 255  :     colors[ImGuiCol_ScrollbarGrabHovered]   = ImVec4(0.40f, 0.40f, 0.80f, 0.40f);

  00503	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  0050b	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00511	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f4ccccd
  00519	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ecccccd
  00521	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ecccccd
  00529	48 8d 8d 04 07
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  00530	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00535	b9 10 00 00 00	 mov	 ecx, 16
  0053a	48 6b c9 10	 imul	 rcx, rcx, 16
  0053e	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00542	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00546	48 8b f0	 mov	 rsi, rax
  00549	b9 10 00 00 00	 mov	 ecx, 16
  0054e	f3 a4		 rep movsb

; 256  :     colors[ImGuiCol_ScrollbarGrabActive]    = ImVec4(0.41f, 0.39f, 0.80f, 0.60f);

  00550	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00558	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0055e	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f4ccccd
  00566	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ec7ae14
  0056e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ed1eb85
  00576	48 8d 8d 34 07
	00 00		 lea	 rcx, QWORD PTR $T18[rbp]
  0057d	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00582	b9 10 00 00 00	 mov	 ecx, 16
  00587	48 6b c9 11	 imul	 rcx, rcx, 17
  0058b	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0058f	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00593	48 8b f0	 mov	 rsi, rax
  00596	b9 10 00 00 00	 mov	 ecx, 16
  0059b	f3 a4		 rep movsb

; 257  :     colors[ImGuiCol_CheckMark]              = ImVec4(0.90f, 0.90f, 0.90f, 0.50f);

  0059d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  005a5	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  005ab	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f666666
  005b3	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f666666
  005bb	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f666666
  005c3	48 8d 8d 64 07
	00 00		 lea	 rcx, QWORD PTR $T19[rbp]
  005ca	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  005cf	b9 10 00 00 00	 mov	 ecx, 16
  005d4	48 6b c9 12	 imul	 rcx, rcx, 18
  005d8	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  005dc	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  005e0	48 8b f0	 mov	 rsi, rax
  005e3	b9 10 00 00 00	 mov	 ecx, 16
  005e8	f3 a4		 rep movsb

; 258  :     colors[ImGuiCol_SliderGrab]             = ImVec4(1.00f, 1.00f, 1.00f, 0.30f);

  005ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  005f2	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  005f8	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00600	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00608	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00610	48 8d 8d 94 07
	00 00		 lea	 rcx, QWORD PTR $T20[rbp]
  00617	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0061c	b9 10 00 00 00	 mov	 ecx, 16
  00621	48 6b c9 13	 imul	 rcx, rcx, 19
  00625	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00629	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0062d	48 8b f0	 mov	 rsi, rax
  00630	b9 10 00 00 00	 mov	 ecx, 16
  00635	f3 a4		 rep movsb

; 259  :     colors[ImGuiCol_SliderGrabActive]       = ImVec4(0.41f, 0.39f, 0.80f, 0.60f);

  00637	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0063f	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00645	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f4ccccd
  0064d	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ec7ae14
  00655	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ed1eb85
  0065d	48 8d 8d c4 07
	00 00		 lea	 rcx, QWORD PTR $T21[rbp]
  00664	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00669	b9 10 00 00 00	 mov	 ecx, 16
  0066e	48 6b c9 14	 imul	 rcx, rcx, 20
  00672	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00676	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0067a	48 8b f0	 mov	 rsi, rax
  0067d	b9 10 00 00 00	 mov	 ecx, 16
  00682	f3 a4		 rep movsb

; 260  :     colors[ImGuiCol_Button]                 = ImVec4(0.35f, 0.40f, 0.61f, 0.62f);

  00684	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f1eb852
  0068c	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00692	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f1c28f6
  0069a	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ecccccd
  006a2	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3eb33333
  006aa	48 8d 8d f4 07
	00 00		 lea	 rcx, QWORD PTR $T22[rbp]
  006b1	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  006b6	b9 10 00 00 00	 mov	 ecx, 16
  006bb	48 6b c9 15	 imul	 rcx, rcx, 21
  006bf	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  006c3	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  006c7	48 8b f0	 mov	 rsi, rax
  006ca	b9 10 00 00 00	 mov	 ecx, 16
  006cf	f3 a4		 rep movsb

; 261  :     colors[ImGuiCol_ButtonHovered]          = ImVec4(0.40f, 0.48f, 0.71f, 0.79f);

  006d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4a3d71
  006d9	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  006df	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f35c28f
  006e7	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ef5c28f
  006ef	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ecccccd
  006f7	48 8d 8d 24 08
	00 00		 lea	 rcx, QWORD PTR $T23[rbp]
  006fe	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00703	b9 10 00 00 00	 mov	 ecx, 16
  00708	48 6b c9 16	 imul	 rcx, rcx, 22
  0070c	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00710	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00714	48 8b f0	 mov	 rsi, rax
  00717	b9 10 00 00 00	 mov	 ecx, 16
  0071c	f3 a4		 rep movsb

; 262  :     colors[ImGuiCol_ButtonActive]           = ImVec4(0.46f, 0.54f, 0.80f, 1.00f);

  0071e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00726	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0072c	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f4ccccd
  00734	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f0a3d71
  0073c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3eeb851f
  00744	48 8d 8d 54 08
	00 00		 lea	 rcx, QWORD PTR $T24[rbp]
  0074b	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00750	b9 10 00 00 00	 mov	 ecx, 16
  00755	48 6b c9 17	 imul	 rcx, rcx, 23
  00759	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0075d	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00761	48 8b f0	 mov	 rsi, rax
  00764	b9 10 00 00 00	 mov	 ecx, 16
  00769	f3 a4		 rep movsb

; 263  :     colors[ImGuiCol_Header]                 = ImVec4(0.40f, 0.40f, 0.90f, 0.45f);

  0076b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  00773	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00779	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f666666
  00781	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ecccccd
  00789	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ecccccd
  00791	48 8d 8d 84 08
	00 00		 lea	 rcx, QWORD PTR $T25[rbp]
  00798	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0079d	b9 10 00 00 00	 mov	 ecx, 16
  007a2	48 6b c9 18	 imul	 rcx, rcx, 24
  007a6	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  007aa	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  007ae	48 8b f0	 mov	 rsi, rax
  007b1	b9 10 00 00 00	 mov	 ecx, 16
  007b6	f3 a4		 rep movsb

; 264  :     colors[ImGuiCol_HeaderHovered]          = ImVec4(0.45f, 0.45f, 0.90f, 0.80f);

  007b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  007c0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  007c6	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f666666
  007ce	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ee66666
  007d6	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ee66666
  007de	48 8d 8d b4 08
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  007e5	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  007ea	b9 10 00 00 00	 mov	 ecx, 16
  007ef	48 6b c9 19	 imul	 rcx, rcx, 25
  007f3	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  007f7	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  007fb	48 8b f0	 mov	 rsi, rax
  007fe	b9 10 00 00 00	 mov	 ecx, 16
  00803	f3 a4		 rep movsb

; 265  :     colors[ImGuiCol_HeaderActive]           = ImVec4(0.53f, 0.53f, 0.87f, 0.80f);

  00805	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0080d	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00813	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f5eb852
  0081b	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f07ae14
  00823	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f07ae14
  0082b	48 8d 8d e4 08
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  00832	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00837	b9 10 00 00 00	 mov	 ecx, 16
  0083c	48 6b c9 1a	 imul	 rcx, rcx, 26
  00840	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00844	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00848	48 8b f0	 mov	 rsi, rax
  0084b	b9 10 00 00 00	 mov	 ecx, 16
  00850	f3 a4		 rep movsb

; 266  :     colors[ImGuiCol_Separator]              = ImVec4(0.50f, 0.50f, 0.50f, 0.60f);

  00852	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0085a	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00860	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000
  00868	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f000000
  00870	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  00878	48 8d 8d 14 09
	00 00		 lea	 rcx, QWORD PTR $T28[rbp]
  0087f	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00884	b9 10 00 00 00	 mov	 ecx, 16
  00889	48 6b c9 1b	 imul	 rcx, rcx, 27
  0088d	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00891	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00895	48 8b f0	 mov	 rsi, rax
  00898	b9 10 00 00 00	 mov	 ecx, 16
  0089d	f3 a4		 rep movsb

; 267  :     colors[ImGuiCol_SeparatorHovered]       = ImVec4(0.60f, 0.60f, 0.70f, 1.00f);

  0089f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008a7	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  008ad	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f333333
  008b5	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f19999a
  008bd	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f19999a
  008c5	48 8d 8d 44 09
	00 00		 lea	 rcx, QWORD PTR $T29[rbp]
  008cc	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  008d1	b9 10 00 00 00	 mov	 ecx, 16
  008d6	48 6b c9 1c	 imul	 rcx, rcx, 28
  008da	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  008de	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  008e2	48 8b f0	 mov	 rsi, rax
  008e5	b9 10 00 00 00	 mov	 ecx, 16
  008ea	f3 a4		 rep movsb

; 268  :     colors[ImGuiCol_SeparatorActive]        = ImVec4(0.70f, 0.70f, 0.90f, 1.00f);

  008ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008f4	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  008fa	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f666666
  00902	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f333333
  0090a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f333333
  00912	48 8d 8d 74 09
	00 00		 lea	 rcx, QWORD PTR $T30[rbp]
  00919	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0091e	b9 10 00 00 00	 mov	 ecx, 16
  00923	48 6b c9 1d	 imul	 rcx, rcx, 29
  00927	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0092b	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0092f	48 8b f0	 mov	 rsi, rax
  00932	b9 10 00 00 00	 mov	 ecx, 16
  00937	f3 a4		 rep movsb

; 269  :     colors[ImGuiCol_ResizeGrip]             = ImVec4(1.00f, 1.00f, 1.00f, 0.10f);

  00939	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00941	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00947	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  0094f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00957	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0095f	48 8d 8d a4 09
	00 00		 lea	 rcx, QWORD PTR $T31[rbp]
  00966	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0096b	b9 10 00 00 00	 mov	 ecx, 16
  00970	48 6b c9 1e	 imul	 rcx, rcx, 30
  00974	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00978	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0097c	48 8b f0	 mov	 rsi, rax
  0097f	b9 10 00 00 00	 mov	 ecx, 16
  00984	f3 a4		 rep movsb

; 270  :     colors[ImGuiCol_ResizeGripHovered]      = ImVec4(0.78f, 0.82f, 1.00f, 0.60f);

  00986	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0098e	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00994	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  0099c	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f51eb85
  009a4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f47ae14
  009ac	48 8d 8d d4 09
	00 00		 lea	 rcx, QWORD PTR $T32[rbp]
  009b3	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  009b8	b9 10 00 00 00	 mov	 ecx, 16
  009bd	48 6b c9 1f	 imul	 rcx, rcx, 31
  009c1	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  009c5	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  009c9	48 8b f0	 mov	 rsi, rax
  009cc	b9 10 00 00 00	 mov	 ecx, 16
  009d1	f3 a4		 rep movsb

; 271  :     colors[ImGuiCol_ResizeGripActive]       = ImVec4(0.78f, 0.82f, 1.00f, 0.90f);

  009d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  009db	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  009e1	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  009e9	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f51eb85
  009f1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f47ae14
  009f9	48 8d 8d 04 0a
	00 00		 lea	 rcx, QWORD PTR $T33[rbp]
  00a00	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00a05	b9 10 00 00 00	 mov	 ecx, 16
  00a0a	48 6b c9 20	 imul	 rcx, rcx, 32		; 00000020H
  00a0e	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00a12	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00a16	48 8b f0	 mov	 rsi, rax
  00a19	b9 10 00 00 00	 mov	 ecx, 16
  00a1e	f3 a4		 rep movsb

; 272  :     colors[ImGuiCol_Tab]                    = ImLerp(colors[ImGuiCol_Header],       colors[ImGuiCol_TitleBgActive], 0.80f);

  00a20	b8 10 00 00 00	 mov	 eax, 16
  00a25	48 6b c0 0b	 imul	 rax, rax, 11
  00a29	48 8b 4d 28	 mov	 rcx, QWORD PTR colors$[rbp]
  00a2d	48 03 c8	 add	 rcx, rax
  00a30	48 8b c1	 mov	 rax, rcx
  00a33	b9 10 00 00 00	 mov	 ecx, 16
  00a38	48 6b c9 18	 imul	 rcx, rcx, 24
  00a3c	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00a40	48 03 d1	 add	 rdx, rcx
  00a43	48 8b ca	 mov	 rcx, rdx
  00a46	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f4ccccd
  00a4e	4c 8b c0	 mov	 r8, rax
  00a51	48 8b d1	 mov	 rdx, rcx
  00a54	48 8d 8d 34 0a
	00 00		 lea	 rcx, QWORD PTR $T34[rbp]
  00a5b	e8 00 00 00 00	 call	 ?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z ; ImLerp
  00a60	b9 10 00 00 00	 mov	 ecx, 16
  00a65	48 6b c9 21	 imul	 rcx, rcx, 33		; 00000021H
  00a69	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00a6d	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00a71	48 8b f0	 mov	 rsi, rax
  00a74	b9 10 00 00 00	 mov	 ecx, 16
  00a79	f3 a4		 rep movsb

; 273  :     colors[ImGuiCol_TabHovered]             = colors[ImGuiCol_HeaderHovered];

  00a7b	b8 10 00 00 00	 mov	 eax, 16
  00a80	48 6b c0 19	 imul	 rax, rax, 25
  00a84	b9 10 00 00 00	 mov	 ecx, 16
  00a89	48 6b c9 22	 imul	 rcx, rcx, 34		; 00000022H
  00a8d	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00a91	48 8b 7d 28	 mov	 rdi, QWORD PTR colors$[rbp]
  00a95	48 89 bd 88 0d
	00 00		 mov	 QWORD PTR tv910[rbp], rdi
  00a9c	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00aa0	48 8b 8d 88 0d
	00 00		 mov	 rcx, QWORD PTR tv910[rbp]
  00aa7	48 8d 34 01	 lea	 rsi, QWORD PTR [rcx+rax]
  00aab	b9 10 00 00 00	 mov	 ecx, 16
  00ab0	f3 a4		 rep movsb

; 274  :     colors[ImGuiCol_TabActive]              = ImLerp(colors[ImGuiCol_HeaderActive], colors[ImGuiCol_TitleBgActive], 0.60f);

  00ab2	b8 10 00 00 00	 mov	 eax, 16
  00ab7	48 6b c0 0b	 imul	 rax, rax, 11
  00abb	48 8b 4d 28	 mov	 rcx, QWORD PTR colors$[rbp]
  00abf	48 03 c8	 add	 rcx, rax
  00ac2	48 8b c1	 mov	 rax, rcx
  00ac5	b9 10 00 00 00	 mov	 ecx, 16
  00aca	48 6b c9 1a	 imul	 rcx, rcx, 26
  00ace	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00ad2	48 03 d1	 add	 rdx, rcx
  00ad5	48 8b ca	 mov	 rcx, rdx
  00ad8	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f19999a
  00ae0	4c 8b c0	 mov	 r8, rax
  00ae3	48 8b d1	 mov	 rdx, rcx
  00ae6	48 8d 8d 64 0a
	00 00		 lea	 rcx, QWORD PTR $T35[rbp]
  00aed	e8 00 00 00 00	 call	 ?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z ; ImLerp
  00af2	b9 10 00 00 00	 mov	 ecx, 16
  00af7	48 6b c9 23	 imul	 rcx, rcx, 35		; 00000023H
  00afb	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00aff	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00b03	48 8b f0	 mov	 rsi, rax
  00b06	b9 10 00 00 00	 mov	 ecx, 16
  00b0b	f3 a4		 rep movsb

; 275  :     colors[ImGuiCol_TabUnfocused]           = ImLerp(colors[ImGuiCol_Tab],          colors[ImGuiCol_TitleBg], 0.80f);

  00b0d	b8 10 00 00 00	 mov	 eax, 16
  00b12	48 6b c0 0a	 imul	 rax, rax, 10
  00b16	48 8b 4d 28	 mov	 rcx, QWORD PTR colors$[rbp]
  00b1a	48 03 c8	 add	 rcx, rax
  00b1d	48 8b c1	 mov	 rax, rcx
  00b20	b9 10 00 00 00	 mov	 ecx, 16
  00b25	48 6b c9 21	 imul	 rcx, rcx, 33		; 00000021H
  00b29	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00b2d	48 03 d1	 add	 rdx, rcx
  00b30	48 8b ca	 mov	 rcx, rdx
  00b33	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f4ccccd
  00b3b	4c 8b c0	 mov	 r8, rax
  00b3e	48 8b d1	 mov	 rdx, rcx
  00b41	48 8d 8d 94 0a
	00 00		 lea	 rcx, QWORD PTR $T36[rbp]
  00b48	e8 00 00 00 00	 call	 ?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z ; ImLerp
  00b4d	b9 10 00 00 00	 mov	 ecx, 16
  00b52	48 6b c9 24	 imul	 rcx, rcx, 36		; 00000024H
  00b56	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00b5a	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00b5e	48 8b f0	 mov	 rsi, rax
  00b61	b9 10 00 00 00	 mov	 ecx, 16
  00b66	f3 a4		 rep movsb

; 276  :     colors[ImGuiCol_TabUnfocusedActive]     = ImLerp(colors[ImGuiCol_TabActive],    colors[ImGuiCol_TitleBg], 0.40f);

  00b68	b8 10 00 00 00	 mov	 eax, 16
  00b6d	48 6b c0 0a	 imul	 rax, rax, 10
  00b71	48 8b 4d 28	 mov	 rcx, QWORD PTR colors$[rbp]
  00b75	48 03 c8	 add	 rcx, rax
  00b78	48 8b c1	 mov	 rax, rcx
  00b7b	b9 10 00 00 00	 mov	 ecx, 16
  00b80	48 6b c9 23	 imul	 rcx, rcx, 35		; 00000023H
  00b84	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00b88	48 03 d1	 add	 rdx, rcx
  00b8b	48 8b ca	 mov	 rcx, rdx
  00b8e	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3ecccccd
  00b96	4c 8b c0	 mov	 r8, rax
  00b99	48 8b d1	 mov	 rdx, rcx
  00b9c	48 8d 8d c4 0a
	00 00		 lea	 rcx, QWORD PTR $T37[rbp]
  00ba3	e8 00 00 00 00	 call	 ?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z ; ImLerp
  00ba8	b9 10 00 00 00	 mov	 ecx, 16
  00bad	48 6b c9 25	 imul	 rcx, rcx, 37		; 00000025H
  00bb1	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00bb5	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00bb9	48 8b f0	 mov	 rsi, rax
  00bbc	b9 10 00 00 00	 mov	 ecx, 16
  00bc1	f3 a4		 rep movsb

; 277  :     colors[ImGuiCol_PlotLines]              = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);

  00bc3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00bcb	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00bd1	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00bd9	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00be1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00be9	48 8d 8d f4 0a
	00 00		 lea	 rcx, QWORD PTR $T38[rbp]
  00bf0	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00bf5	b9 10 00 00 00	 mov	 ecx, 16
  00bfa	48 6b c9 26	 imul	 rcx, rcx, 38		; 00000026H
  00bfe	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00c02	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00c06	48 8b f0	 mov	 rsi, rax
  00c09	b9 10 00 00 00	 mov	 ecx, 16
  00c0e	f3 a4		 rep movsb

; 278  :     colors[ImGuiCol_PlotLinesHovered]       = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);

  00c10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00c18	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00c1e	0f 57 db	 xorps	 xmm3, xmm3
  00c21	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f333333
  00c29	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f666666
  00c31	48 8d 8d 24 0b
	00 00		 lea	 rcx, QWORD PTR $T39[rbp]
  00c38	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00c3d	b9 10 00 00 00	 mov	 ecx, 16
  00c42	48 6b c9 27	 imul	 rcx, rcx, 39		; 00000027H
  00c46	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00c4a	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00c4e	48 8b f0	 mov	 rsi, rax
  00c51	b9 10 00 00 00	 mov	 ecx, 16
  00c56	f3 a4		 rep movsb

; 279  :     colors[ImGuiCol_PlotHistogram]          = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);

  00c58	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00c60	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00c66	0f 57 db	 xorps	 xmm3, xmm3
  00c69	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f333333
  00c71	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f666666
  00c79	48 8d 8d 54 0b
	00 00		 lea	 rcx, QWORD PTR $T40[rbp]
  00c80	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00c85	b9 10 00 00 00	 mov	 ecx, 16
  00c8a	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  00c8e	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00c92	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00c96	48 8b f0	 mov	 rsi, rax
  00c99	b9 10 00 00 00	 mov	 ecx, 16
  00c9e	f3 a4		 rep movsb

; 280  :     colors[ImGuiCol_PlotHistogramHovered]   = ImVec4(1.00f, 0.60f, 0.00f, 1.00f);

  00ca0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ca8	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00cae	0f 57 db	 xorps	 xmm3, xmm3
  00cb1	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f19999a
  00cb9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00cc1	48 8d 8d 84 0b
	00 00		 lea	 rcx, QWORD PTR $T41[rbp]
  00cc8	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00ccd	b9 10 00 00 00	 mov	 ecx, 16
  00cd2	48 6b c9 29	 imul	 rcx, rcx, 41		; 00000029H
  00cd6	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00cda	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00cde	48 8b f0	 mov	 rsi, rax
  00ce1	b9 10 00 00 00	 mov	 ecx, 16
  00ce6	f3 a4		 rep movsb

; 281  :     colors[ImGuiCol_TableHeaderBg]          = ImVec4(0.27f, 0.27f, 0.38f, 1.00f);

  00ce8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00cf0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00cf6	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3ec28f5c
  00cfe	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e8a3d71
  00d06	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e8a3d71
  00d0e	48 8d 8d b4 0b
	00 00		 lea	 rcx, QWORD PTR $T42[rbp]
  00d15	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00d1a	b9 10 00 00 00	 mov	 ecx, 16
  00d1f	48 6b c9 2a	 imul	 rcx, rcx, 42		; 0000002aH
  00d23	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00d27	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00d2b	48 8b f0	 mov	 rsi, rax
  00d2e	b9 10 00 00 00	 mov	 ecx, 16
  00d33	f3 a4		 rep movsb

; 282  :     colors[ImGuiCol_TableBorderStrong]      = ImVec4(0.31f, 0.31f, 0.45f, 1.00f);   // Prefer using Alpha=1.0 here

  00d35	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00d3d	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00d43	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3ee66666
  00d4b	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e9eb852
  00d53	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e9eb852
  00d5b	48 8d 8d e4 0b
	00 00		 lea	 rcx, QWORD PTR $T43[rbp]
  00d62	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00d67	b9 10 00 00 00	 mov	 ecx, 16
  00d6c	48 6b c9 2b	 imul	 rcx, rcx, 43		; 0000002bH
  00d70	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00d74	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00d78	48 8b f0	 mov	 rsi, rax
  00d7b	b9 10 00 00 00	 mov	 ecx, 16
  00d80	f3 a4		 rep movsb

; 283  :     colors[ImGuiCol_TableBorderLight]       = ImVec4(0.26f, 0.26f, 0.28f, 1.00f);   // Prefer using Alpha=1.0 here

  00d82	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00d8a	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00d90	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e8f5c29
  00d98	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e851eb8
  00da0	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  00da8	48 8d 8d 14 0c
	00 00		 lea	 rcx, QWORD PTR $T44[rbp]
  00daf	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00db4	b9 10 00 00 00	 mov	 ecx, 16
  00db9	48 6b c9 2c	 imul	 rcx, rcx, 44		; 0000002cH
  00dbd	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00dc1	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00dc5	48 8b f0	 mov	 rsi, rax
  00dc8	b9 10 00 00 00	 mov	 ecx, 16
  00dcd	f3 a4		 rep movsb

; 284  :     colors[ImGuiCol_TableRowBg]             = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);

  00dcf	0f 57 c0	 xorps	 xmm0, xmm0
  00dd2	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00dd8	0f 57 db	 xorps	 xmm3, xmm3
  00ddb	0f 57 d2	 xorps	 xmm2, xmm2
  00dde	0f 57 c9	 xorps	 xmm1, xmm1
  00de1	48 8d 8d 44 0c
	00 00		 lea	 rcx, QWORD PTR $T45[rbp]
  00de8	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00ded	b9 10 00 00 00	 mov	 ecx, 16
  00df2	48 6b c9 2d	 imul	 rcx, rcx, 45		; 0000002dH
  00df6	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00dfa	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00dfe	48 8b f0	 mov	 rsi, rax
  00e01	b9 10 00 00 00	 mov	 ecx, 16
  00e06	f3 a4		 rep movsb

; 285  :     colors[ImGuiCol_TableRowBgAlt]          = ImVec4(1.00f, 1.00f, 1.00f, 0.07f);

  00e08	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d8f5c29
  00e10	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00e16	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00e1e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00e26	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00e2e	48 8d 8d 74 0c
	00 00		 lea	 rcx, QWORD PTR $T46[rbp]
  00e35	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00e3a	b9 10 00 00 00	 mov	 ecx, 16
  00e3f	48 6b c9 2e	 imul	 rcx, rcx, 46		; 0000002eH
  00e43	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00e47	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00e4b	48 8b f0	 mov	 rsi, rax
  00e4e	b9 10 00 00 00	 mov	 ecx, 16
  00e53	f3 a4		 rep movsb

; 286  :     colors[ImGuiCol_TextSelectedBg]         = ImVec4(0.00f, 0.00f, 1.00f, 0.35f);

  00e55	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  00e5d	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00e63	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00e6b	0f 57 d2	 xorps	 xmm2, xmm2
  00e6e	0f 57 c9	 xorps	 xmm1, xmm1
  00e71	48 8d 8d a4 0c
	00 00		 lea	 rcx, QWORD PTR $T47[rbp]
  00e78	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00e7d	b9 10 00 00 00	 mov	 ecx, 16
  00e82	48 6b c9 2f	 imul	 rcx, rcx, 47		; 0000002fH
  00e86	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00e8a	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00e8e	48 8b f0	 mov	 rsi, rax
  00e91	b9 10 00 00 00	 mov	 ecx, 16
  00e96	f3 a4		 rep movsb

; 287  :     colors[ImGuiCol_DragDropTarget]         = ImVec4(1.00f, 1.00f, 0.00f, 0.90f);

  00e98	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00ea0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00ea6	0f 57 db	 xorps	 xmm3, xmm3
  00ea9	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00eb1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00eb9	48 8d 8d d4 0c
	00 00		 lea	 rcx, QWORD PTR $T48[rbp]
  00ec0	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00ec5	b9 10 00 00 00	 mov	 ecx, 16
  00eca	48 6b c9 30	 imul	 rcx, rcx, 48		; 00000030H
  00ece	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00ed2	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00ed6	48 8b f0	 mov	 rsi, rax
  00ed9	b9 10 00 00 00	 mov	 ecx, 16
  00ede	f3 a4		 rep movsb

; 288  :     colors[ImGuiCol_NavHighlight]           = colors[ImGuiCol_HeaderHovered];

  00ee0	b8 10 00 00 00	 mov	 eax, 16
  00ee5	48 6b c0 19	 imul	 rax, rax, 25
  00ee9	b9 10 00 00 00	 mov	 ecx, 16
  00eee	48 6b c9 31	 imul	 rcx, rcx, 49		; 00000031H
  00ef2	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00ef6	48 8b 7d 28	 mov	 rdi, QWORD PTR colors$[rbp]
  00efa	48 89 bd 88 0d
	00 00		 mov	 QWORD PTR tv1010[rbp], rdi
  00f01	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00f05	48 8b 8d 88 0d
	00 00		 mov	 rcx, QWORD PTR tv1010[rbp]
  00f0c	48 8d 34 01	 lea	 rsi, QWORD PTR [rcx+rax]
  00f10	b9 10 00 00 00	 mov	 ecx, 16
  00f15	f3 a4		 rep movsb

; 289  :     colors[ImGuiCol_NavWindowingHighlight]  = ImVec4(1.00f, 1.00f, 1.00f, 0.70f);

  00f17	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00f1f	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00f25	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00f2d	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00f35	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00f3d	48 8d 8d 04 0d
	00 00		 lea	 rcx, QWORD PTR $T49[rbp]
  00f44	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00f49	b9 10 00 00 00	 mov	 ecx, 16
  00f4e	48 6b c9 32	 imul	 rcx, rcx, 50		; 00000032H
  00f52	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00f56	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00f5a	48 8b f0	 mov	 rsi, rax
  00f5d	b9 10 00 00 00	 mov	 ecx, 16
  00f62	f3 a4		 rep movsb

; 290  :     colors[ImGuiCol_NavWindowingDimBg]      = ImVec4(0.80f, 0.80f, 0.80f, 0.20f);

  00f64	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00f6c	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00f72	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f4ccccd
  00f7a	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f4ccccd
  00f82	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f4ccccd
  00f8a	48 8d 8d 34 0d
	00 00		 lea	 rcx, QWORD PTR $T50[rbp]
  00f91	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00f96	b9 10 00 00 00	 mov	 ecx, 16
  00f9b	48 6b c9 33	 imul	 rcx, rcx, 51		; 00000033H
  00f9f	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00fa3	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00fa7	48 8b f0	 mov	 rsi, rax
  00faa	b9 10 00 00 00	 mov	 ecx, 16
  00faf	f3 a4		 rep movsb

; 291  :     colors[ImGuiCol_ModalWindowDimBg]       = ImVec4(0.20f, 0.20f, 0.20f, 0.35f);

  00fb1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  00fb9	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00fbf	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e4ccccd
  00fc7	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e4ccccd
  00fcf	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e4ccccd
  00fd7	48 8d 8d 64 0d
	00 00		 lea	 rcx, QWORD PTR $T51[rbp]
  00fde	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00fe3	b9 10 00 00 00	 mov	 ecx, 16
  00fe8	48 6b c9 34	 imul	 rcx, rcx, 52		; 00000034H
  00fec	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00ff0	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00ff4	48 8b f0	 mov	 rsi, rax
  00ff7	b9 10 00 00 00	 mov	 ecx, 16
  00ffc	f3 a4		 rep movsb

; 292  : }

  00ffe	48 8d a5 90 0d
	00 00		 lea	 rsp, QWORD PTR [rbp+3472]
  01005	5f		 pop	 rdi
  01006	5e		 pop	 rsi
  01007	5d		 pop	 rbp
  01008	c3		 ret	 0
?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z ENDP	; ImGui::StyleColorsClassic
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z
_TEXT	SEGMENT
style$ = 8
colors$ = 40
$T1 = 1028
$T2 = 1076
$T3 = 1124
$T4 = 1172
$T5 = 1220
$T6 = 1268
$T7 = 1316
$T8 = 1364
$T9 = 1412
$T10 = 1460
$T11 = 1508
$T12 = 1556
$T13 = 1604
$T14 = 1652
$T15 = 1700
$T16 = 1748
$T17 = 1796
$T18 = 1844
$T19 = 1892
$T20 = 1940
$T21 = 1988
$T22 = 2036
$T23 = 2084
$T24 = 2132
$T25 = 2180
$T26 = 2228
$T27 = 2276
$T28 = 2324
$T29 = 2372
$T30 = 2420
$T31 = 2468
$T32 = 2516
$T33 = 2564
$T34 = 2612
$T35 = 2660
$T36 = 2708
$T37 = 2756
$T38 = 2804
$T39 = 2852
$T40 = 2900
$T41 = 2948
$T42 = 2996
$T43 = 3044
$T44 = 3092
$T45 = 3140
$T46 = 3188
$T47 = 3236
$T48 = 3284
$T49 = 3332
$T50 = 3380
$T51 = 3428
tv1010 = 3464
tv878 = 3464
tv66 = 3464
dst$ = 3504
?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z PROC	; ImGui::StyleColorsLight, COMDAT

; 296  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec c0 0d
	00 00		 sub	 rsp, 3520		; 00000dc0H
  0000f	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 70 03 00 00	 mov	 ecx, 880		; 00000370H
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 e8
	0d 00 00	 mov	 rcx, QWORD PTR [rsp+3560]

; 297  :     ImGuiStyle* style = dst ? dst : &ImGui::GetStyle();

  0002b	48 83 bd b0 0d
	00 00 00	 cmp	 QWORD PTR dst$[rbp], 0
  00033	74 10		 je	 SHORT $LN3@StyleColor
  00035	48 8b 85 b0 0d
	00 00		 mov	 rax, QWORD PTR dst$[rbp]
  0003c	48 89 85 88 0d
	00 00		 mov	 QWORD PTR tv66[rbp], rax
  00043	eb 0c		 jmp	 SHORT $LN4@StyleColor
$LN3@StyleColor:
  00045	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  0004a	48 89 85 88 0d
	00 00		 mov	 QWORD PTR tv66[rbp], rax
$LN4@StyleColor:
  00051	48 8b 85 88 0d
	00 00		 mov	 rax, QWORD PTR tv66[rbp]
  00058	48 89 45 08	 mov	 QWORD PTR style$[rbp], rax

; 298  :     ImVec4* colors = style->Colors;

  0005c	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00060	48 05 c8 00 00
	00		 add	 rax, 200		; 000000c8H
  00066	48 89 45 28	 mov	 QWORD PTR colors$[rbp], rax

; 299  : 
; 300  :     colors[ImGuiCol_Text]                   = ImVec4(0.00f, 0.00f, 0.00f, 1.00f);

  0006a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00072	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00078	0f 57 db	 xorps	 xmm3, xmm3
  0007b	0f 57 d2	 xorps	 xmm2, xmm2
  0007e	0f 57 c9	 xorps	 xmm1, xmm1
  00081	48 8d 8d 04 04
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00088	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0008d	b9 10 00 00 00	 mov	 ecx, 16
  00092	48 6b c9 00	 imul	 rcx, rcx, 0
  00096	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0009a	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0009e	48 8b f0	 mov	 rsi, rax
  000a1	b9 10 00 00 00	 mov	 ecx, 16
  000a6	f3 a4		 rep movsb

; 301  :     colors[ImGuiCol_TextDisabled]           = ImVec4(0.60f, 0.60f, 0.60f, 1.00f);

  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000b0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  000b6	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f19999a
  000be	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f19999a
  000c6	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f19999a
  000ce	48 8d 8d 34 04
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  000d5	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  000da	b9 10 00 00 00	 mov	 ecx, 16
  000df	48 6b c9 01	 imul	 rcx, rcx, 1
  000e3	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  000e7	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  000eb	48 8b f0	 mov	 rsi, rax
  000ee	b9 10 00 00 00	 mov	 ecx, 16
  000f3	f3 a4		 rep movsb

; 302  :     colors[ImGuiCol_WindowBg]               = ImVec4(0.94f, 0.94f, 0.94f, 1.00f);

  000f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000fd	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00103	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f70a3d7
  0010b	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f70a3d7
  00113	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f70a3d7
  0011b	48 8d 8d 64 04
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  00122	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00127	b9 10 00 00 00	 mov	 ecx, 16
  0012c	48 6b c9 02	 imul	 rcx, rcx, 2
  00130	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00134	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00138	48 8b f0	 mov	 rsi, rax
  0013b	b9 10 00 00 00	 mov	 ecx, 16
  00140	f3 a4		 rep movsb

; 303  :     colors[ImGuiCol_ChildBg]                = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);

  00142	0f 57 c0	 xorps	 xmm0, xmm0
  00145	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0014b	0f 57 db	 xorps	 xmm3, xmm3
  0014e	0f 57 d2	 xorps	 xmm2, xmm2
  00151	0f 57 c9	 xorps	 xmm1, xmm1
  00154	48 8d 8d 94 04
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  0015b	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00160	b9 10 00 00 00	 mov	 ecx, 16
  00165	48 6b c9 03	 imul	 rcx, rcx, 3
  00169	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0016d	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00171	48 8b f0	 mov	 rsi, rax
  00174	b9 10 00 00 00	 mov	 ecx, 16
  00179	f3 a4		 rep movsb

; 304  :     colors[ImGuiCol_PopupBg]                = ImVec4(1.00f, 1.00f, 1.00f, 0.98f);

  0017b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7ae148
  00183	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00189	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00191	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00199	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  001a1	48 8d 8d c4 04
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  001a8	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  001ad	b9 10 00 00 00	 mov	 ecx, 16
  001b2	48 6b c9 04	 imul	 rcx, rcx, 4
  001b6	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  001ba	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  001be	48 8b f0	 mov	 rsi, rax
  001c1	b9 10 00 00 00	 mov	 ecx, 16
  001c6	f3 a4		 rep movsb

; 305  :     colors[ImGuiCol_Border]                 = ImVec4(0.00f, 0.00f, 0.00f, 0.30f);

  001c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  001d0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  001d6	0f 57 db	 xorps	 xmm3, xmm3
  001d9	0f 57 d2	 xorps	 xmm2, xmm2
  001dc	0f 57 c9	 xorps	 xmm1, xmm1
  001df	48 8d 8d f4 04
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  001e6	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  001eb	b9 10 00 00 00	 mov	 ecx, 16
  001f0	48 6b c9 05	 imul	 rcx, rcx, 5
  001f4	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  001f8	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  001fc	48 8b f0	 mov	 rsi, rax
  001ff	b9 10 00 00 00	 mov	 ecx, 16
  00204	f3 a4		 rep movsb

; 306  :     colors[ImGuiCol_BorderShadow]           = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);

  00206	0f 57 c0	 xorps	 xmm0, xmm0
  00209	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0020f	0f 57 db	 xorps	 xmm3, xmm3
  00212	0f 57 d2	 xorps	 xmm2, xmm2
  00215	0f 57 c9	 xorps	 xmm1, xmm1
  00218	48 8d 8d 24 05
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  0021f	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00224	b9 10 00 00 00	 mov	 ecx, 16
  00229	48 6b c9 06	 imul	 rcx, rcx, 6
  0022d	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00231	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00235	48 8b f0	 mov	 rsi, rax
  00238	b9 10 00 00 00	 mov	 ecx, 16
  0023d	f3 a4		 rep movsb

; 307  :     colors[ImGuiCol_FrameBg]                = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);

  0023f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00247	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0024d	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00255	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  0025d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00265	48 8d 8d 54 05
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0026c	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00271	b9 10 00 00 00	 mov	 ecx, 16
  00276	48 6b c9 07	 imul	 rcx, rcx, 7
  0027a	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0027e	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00282	48 8b f0	 mov	 rsi, rax
  00285	b9 10 00 00 00	 mov	 ecx, 16
  0028a	f3 a4		 rep movsb

; 308  :     colors[ImGuiCol_FrameBgHovered]         = ImVec4(0.26f, 0.59f, 0.98f, 0.40f);

  0028c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  00294	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0029a	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  002a2	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  002aa	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  002b2	48 8d 8d 84 05
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  002b9	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  002be	b9 10 00 00 00	 mov	 ecx, 16
  002c3	48 6b c9 08	 imul	 rcx, rcx, 8
  002c7	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  002cb	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  002cf	48 8b f0	 mov	 rsi, rax
  002d2	b9 10 00 00 00	 mov	 ecx, 16
  002d7	f3 a4		 rep movsb

; 309  :     colors[ImGuiCol_FrameBgActive]          = ImVec4(0.26f, 0.59f, 0.98f, 0.67f);

  002d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2b851f
  002e1	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  002e7	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  002ef	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  002f7	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  002ff	48 8d 8d b4 05
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00306	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0030b	b9 10 00 00 00	 mov	 ecx, 16
  00310	48 6b c9 09	 imul	 rcx, rcx, 9
  00314	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00318	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0031c	48 8b f0	 mov	 rsi, rax
  0031f	b9 10 00 00 00	 mov	 ecx, 16
  00324	f3 a4		 rep movsb

; 310  :     colors[ImGuiCol_TitleBg]                = ImVec4(0.96f, 0.96f, 0.96f, 1.00f);

  00326	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0032e	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00334	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f75c28f
  0033c	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f75c28f
  00344	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f75c28f
  0034c	48 8d 8d e4 05
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00353	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00358	b9 10 00 00 00	 mov	 ecx, 16
  0035d	48 6b c9 0a	 imul	 rcx, rcx, 10
  00361	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00365	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00369	48 8b f0	 mov	 rsi, rax
  0036c	b9 10 00 00 00	 mov	 ecx, 16
  00371	f3 a4		 rep movsb

; 311  :     colors[ImGuiCol_TitleBgActive]          = ImVec4(0.82f, 0.82f, 0.82f, 1.00f);

  00373	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0037b	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00381	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f51eb85
  00389	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f51eb85
  00391	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f51eb85
  00399	48 8d 8d 14 06
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  003a0	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  003a5	b9 10 00 00 00	 mov	 ecx, 16
  003aa	48 6b c9 0b	 imul	 rcx, rcx, 11
  003ae	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  003b2	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  003b6	48 8b f0	 mov	 rsi, rax
  003b9	b9 10 00 00 00	 mov	 ecx, 16
  003be	f3 a4		 rep movsb

; 312  :     colors[ImGuiCol_TitleBgCollapsed]       = ImVec4(1.00f, 1.00f, 1.00f, 0.51f);

  003c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f028f5c
  003c8	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  003ce	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  003d6	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  003de	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  003e6	48 8d 8d 44 06
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  003ed	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  003f2	b9 10 00 00 00	 mov	 ecx, 16
  003f7	48 6b c9 0c	 imul	 rcx, rcx, 12
  003fb	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  003ff	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00403	48 8b f0	 mov	 rsi, rax
  00406	b9 10 00 00 00	 mov	 ecx, 16
  0040b	f3 a4		 rep movsb

; 313  :     colors[ImGuiCol_MenuBarBg]              = ImVec4(0.86f, 0.86f, 0.86f, 1.00f);

  0040d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00415	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0041b	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f5c28f6
  00423	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f5c28f6
  0042b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f5c28f6
  00433	48 8d 8d 74 06
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  0043a	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0043f	b9 10 00 00 00	 mov	 ecx, 16
  00444	48 6b c9 0d	 imul	 rcx, rcx, 13
  00448	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0044c	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00450	48 8b f0	 mov	 rsi, rax
  00453	b9 10 00 00 00	 mov	 ecx, 16
  00458	f3 a4		 rep movsb

; 314  :     colors[ImGuiCol_ScrollbarBg]            = ImVec4(0.98f, 0.98f, 0.98f, 0.53f);

  0045a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f07ae14
  00462	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00468	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  00470	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f7ae148
  00478	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f7ae148
  00480	48 8d 8d a4 06
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  00487	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0048c	b9 10 00 00 00	 mov	 ecx, 16
  00491	48 6b c9 0e	 imul	 rcx, rcx, 14
  00495	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00499	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0049d	48 8b f0	 mov	 rsi, rax
  004a0	b9 10 00 00 00	 mov	 ecx, 16
  004a5	f3 a4		 rep movsb

; 315  :     colors[ImGuiCol_ScrollbarGrab]          = ImVec4(0.69f, 0.69f, 0.69f, 0.80f);

  004a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  004af	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  004b5	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f30a3d7
  004bd	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f30a3d7
  004c5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f30a3d7
  004cd	48 8d 8d d4 06
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  004d4	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  004d9	b9 10 00 00 00	 mov	 ecx, 16
  004de	48 6b c9 0f	 imul	 rcx, rcx, 15
  004e2	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  004e6	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  004ea	48 8b f0	 mov	 rsi, rax
  004ed	b9 10 00 00 00	 mov	 ecx, 16
  004f2	f3 a4		 rep movsb

; 316  :     colors[ImGuiCol_ScrollbarGrabHovered]   = ImVec4(0.49f, 0.49f, 0.49f, 0.80f);

  004f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  004fc	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00502	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3efae148
  0050a	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3efae148
  00512	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3efae148
  0051a	48 8d 8d 04 07
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  00521	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00526	b9 10 00 00 00	 mov	 ecx, 16
  0052b	48 6b c9 10	 imul	 rcx, rcx, 16
  0052f	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00533	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00537	48 8b f0	 mov	 rsi, rax
  0053a	b9 10 00 00 00	 mov	 ecx, 16
  0053f	f3 a4		 rep movsb

; 317  :     colors[ImGuiCol_ScrollbarGrabActive]    = ImVec4(0.49f, 0.49f, 0.49f, 1.00f);

  00541	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00549	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0054f	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3efae148
  00557	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3efae148
  0055f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3efae148
  00567	48 8d 8d 34 07
	00 00		 lea	 rcx, QWORD PTR $T18[rbp]
  0056e	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00573	b9 10 00 00 00	 mov	 ecx, 16
  00578	48 6b c9 11	 imul	 rcx, rcx, 17
  0057c	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00580	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00584	48 8b f0	 mov	 rsi, rax
  00587	b9 10 00 00 00	 mov	 ecx, 16
  0058c	f3 a4		 rep movsb

; 318  :     colors[ImGuiCol_CheckMark]              = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);

  0058e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00596	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0059c	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  005a4	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  005ac	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  005b4	48 8d 8d 64 07
	00 00		 lea	 rcx, QWORD PTR $T19[rbp]
  005bb	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  005c0	b9 10 00 00 00	 mov	 ecx, 16
  005c5	48 6b c9 12	 imul	 rcx, rcx, 18
  005c9	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  005cd	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  005d1	48 8b f0	 mov	 rsi, rax
  005d4	b9 10 00 00 00	 mov	 ecx, 16
  005d9	f3 a4		 rep movsb

; 319  :     colors[ImGuiCol_SliderGrab]             = ImVec4(0.26f, 0.59f, 0.98f, 0.78f);

  005db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f47ae14
  005e3	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  005e9	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  005f1	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  005f9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  00601	48 8d 8d 94 07
	00 00		 lea	 rcx, QWORD PTR $T20[rbp]
  00608	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0060d	b9 10 00 00 00	 mov	 ecx, 16
  00612	48 6b c9 13	 imul	 rcx, rcx, 19
  00616	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0061a	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0061e	48 8b f0	 mov	 rsi, rax
  00621	b9 10 00 00 00	 mov	 ecx, 16
  00626	f3 a4		 rep movsb

; 320  :     colors[ImGuiCol_SliderGrabActive]       = ImVec4(0.46f, 0.54f, 0.80f, 0.60f);

  00628	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00630	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00636	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f4ccccd
  0063e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f0a3d71
  00646	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3eeb851f
  0064e	48 8d 8d c4 07
	00 00		 lea	 rcx, QWORD PTR $T21[rbp]
  00655	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0065a	b9 10 00 00 00	 mov	 ecx, 16
  0065f	48 6b c9 14	 imul	 rcx, rcx, 20
  00663	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00667	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0066b	48 8b f0	 mov	 rsi, rax
  0066e	b9 10 00 00 00	 mov	 ecx, 16
  00673	f3 a4		 rep movsb

; 321  :     colors[ImGuiCol_Button]                 = ImVec4(0.26f, 0.59f, 0.98f, 0.40f);

  00675	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  0067d	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00683	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  0068b	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  00693	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  0069b	48 8d 8d f4 07
	00 00		 lea	 rcx, QWORD PTR $T22[rbp]
  006a2	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  006a7	b9 10 00 00 00	 mov	 ecx, 16
  006ac	48 6b c9 15	 imul	 rcx, rcx, 21
  006b0	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  006b4	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  006b8	48 8b f0	 mov	 rsi, rax
  006bb	b9 10 00 00 00	 mov	 ecx, 16
  006c0	f3 a4		 rep movsb

; 322  :     colors[ImGuiCol_ButtonHovered]          = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);

  006c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006ca	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  006d0	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  006d8	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  006e0	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  006e8	48 8d 8d 24 08
	00 00		 lea	 rcx, QWORD PTR $T23[rbp]
  006ef	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  006f4	b9 10 00 00 00	 mov	 ecx, 16
  006f9	48 6b c9 16	 imul	 rcx, rcx, 22
  006fd	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00701	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00705	48 8b f0	 mov	 rsi, rax
  00708	b9 10 00 00 00	 mov	 ecx, 16
  0070d	f3 a4		 rep movsb

; 323  :     colors[ImGuiCol_ButtonActive]           = ImVec4(0.06f, 0.53f, 0.98f, 1.00f);

  0070f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00717	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0071d	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  00725	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f07ae14
  0072d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3d75c28f
  00735	48 8d 8d 54 08
	00 00		 lea	 rcx, QWORD PTR $T24[rbp]
  0073c	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00741	b9 10 00 00 00	 mov	 ecx, 16
  00746	48 6b c9 17	 imul	 rcx, rcx, 23
  0074a	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0074e	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00752	48 8b f0	 mov	 rsi, rax
  00755	b9 10 00 00 00	 mov	 ecx, 16
  0075a	f3 a4		 rep movsb

; 324  :     colors[ImGuiCol_Header]                 = ImVec4(0.26f, 0.59f, 0.98f, 0.31f);

  0075c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e9eb852
  00764	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0076a	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  00772	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  0077a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  00782	48 8d 8d 84 08
	00 00		 lea	 rcx, QWORD PTR $T25[rbp]
  00789	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0078e	b9 10 00 00 00	 mov	 ecx, 16
  00793	48 6b c9 18	 imul	 rcx, rcx, 24
  00797	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0079b	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0079f	48 8b f0	 mov	 rsi, rax
  007a2	b9 10 00 00 00	 mov	 ecx, 16
  007a7	f3 a4		 rep movsb

; 325  :     colors[ImGuiCol_HeaderHovered]          = ImVec4(0.26f, 0.59f, 0.98f, 0.80f);

  007a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  007b1	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  007b7	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  007bf	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  007c7	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  007cf	48 8d 8d b4 08
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  007d6	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  007db	b9 10 00 00 00	 mov	 ecx, 16
  007e0	48 6b c9 19	 imul	 rcx, rcx, 25
  007e4	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  007e8	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  007ec	48 8b f0	 mov	 rsi, rax
  007ef	b9 10 00 00 00	 mov	 ecx, 16
  007f4	f3 a4		 rep movsb

; 326  :     colors[ImGuiCol_HeaderActive]           = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);

  007f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007fe	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00804	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  0080c	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  00814	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  0081c	48 8d 8d e4 08
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  00823	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00828	b9 10 00 00 00	 mov	 ecx, 16
  0082d	48 6b c9 1a	 imul	 rcx, rcx, 26
  00831	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00835	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00839	48 8b f0	 mov	 rsi, rax
  0083c	b9 10 00 00 00	 mov	 ecx, 16
  00841	f3 a4		 rep movsb

; 327  :     colors[ImGuiCol_Separator]              = ImVec4(0.39f, 0.39f, 0.39f, 0.62f);

  00843	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f1eb852
  0084b	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00851	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3ec7ae14
  00859	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ec7ae14
  00861	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ec7ae14
  00869	48 8d 8d 14 09
	00 00		 lea	 rcx, QWORD PTR $T28[rbp]
  00870	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00875	b9 10 00 00 00	 mov	 ecx, 16
  0087a	48 6b c9 1b	 imul	 rcx, rcx, 27
  0087e	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00882	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00886	48 8b f0	 mov	 rsi, rax
  00889	b9 10 00 00 00	 mov	 ecx, 16
  0088e	f3 a4		 rep movsb

; 328  :     colors[ImGuiCol_SeparatorHovered]       = ImVec4(0.14f, 0.44f, 0.80f, 0.78f);

  00890	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f47ae14
  00898	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0089e	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f4ccccd
  008a6	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ee147ae
  008ae	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e0f5c29
  008b6	48 8d 8d 44 09
	00 00		 lea	 rcx, QWORD PTR $T29[rbp]
  008bd	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  008c2	b9 10 00 00 00	 mov	 ecx, 16
  008c7	48 6b c9 1c	 imul	 rcx, rcx, 28
  008cb	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  008cf	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  008d3	48 8b f0	 mov	 rsi, rax
  008d6	b9 10 00 00 00	 mov	 ecx, 16
  008db	f3 a4		 rep movsb

; 329  :     colors[ImGuiCol_SeparatorActive]        = ImVec4(0.14f, 0.44f, 0.80f, 1.00f);

  008dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008e5	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  008eb	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f4ccccd
  008f3	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ee147ae
  008fb	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e0f5c29
  00903	48 8d 8d 74 09
	00 00		 lea	 rcx, QWORD PTR $T30[rbp]
  0090a	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0090f	b9 10 00 00 00	 mov	 ecx, 16
  00914	48 6b c9 1d	 imul	 rcx, rcx, 29
  00918	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0091c	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00920	48 8b f0	 mov	 rsi, rax
  00923	b9 10 00 00 00	 mov	 ecx, 16
  00928	f3 a4		 rep movsb

; 330  :     colors[ImGuiCol_ResizeGrip]             = ImVec4(0.35f, 0.35f, 0.35f, 0.17f);

  0092a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e2e147b
  00932	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00938	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3eb33333
  00940	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3eb33333
  00948	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3eb33333
  00950	48 8d 8d a4 09
	00 00		 lea	 rcx, QWORD PTR $T31[rbp]
  00957	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0095c	b9 10 00 00 00	 mov	 ecx, 16
  00961	48 6b c9 1e	 imul	 rcx, rcx, 30
  00965	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00969	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0096d	48 8b f0	 mov	 rsi, rax
  00970	b9 10 00 00 00	 mov	 ecx, 16
  00975	f3 a4		 rep movsb

; 331  :     colors[ImGuiCol_ResizeGripHovered]      = ImVec4(0.26f, 0.59f, 0.98f, 0.67f);

  00977	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2b851f
  0097f	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00985	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  0098d	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  00995	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  0099d	48 8d 8d d4 09
	00 00		 lea	 rcx, QWORD PTR $T32[rbp]
  009a4	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  009a9	b9 10 00 00 00	 mov	 ecx, 16
  009ae	48 6b c9 1f	 imul	 rcx, rcx, 31
  009b2	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  009b6	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  009ba	48 8b f0	 mov	 rsi, rax
  009bd	b9 10 00 00 00	 mov	 ecx, 16
  009c2	f3 a4		 rep movsb

; 332  :     colors[ImGuiCol_ResizeGripActive]       = ImVec4(0.26f, 0.59f, 0.98f, 0.95f);

  009c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  009cc	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  009d2	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  009da	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  009e2	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  009ea	48 8d 8d 04 0a
	00 00		 lea	 rcx, QWORD PTR $T33[rbp]
  009f1	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  009f6	b9 10 00 00 00	 mov	 ecx, 16
  009fb	48 6b c9 20	 imul	 rcx, rcx, 32		; 00000020H
  009ff	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00a03	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00a07	48 8b f0	 mov	 rsi, rax
  00a0a	b9 10 00 00 00	 mov	 ecx, 16
  00a0f	f3 a4		 rep movsb

; 333  :     colors[ImGuiCol_Tab]                    = ImLerp(colors[ImGuiCol_Header],       colors[ImGuiCol_TitleBgActive], 0.90f);

  00a11	b8 10 00 00 00	 mov	 eax, 16
  00a16	48 6b c0 0b	 imul	 rax, rax, 11
  00a1a	48 8b 4d 28	 mov	 rcx, QWORD PTR colors$[rbp]
  00a1e	48 03 c8	 add	 rcx, rax
  00a21	48 8b c1	 mov	 rax, rcx
  00a24	b9 10 00 00 00	 mov	 ecx, 16
  00a29	48 6b c9 18	 imul	 rcx, rcx, 24
  00a2d	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00a31	48 03 d1	 add	 rdx, rcx
  00a34	48 8b ca	 mov	 rcx, rdx
  00a37	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f666666
  00a3f	4c 8b c0	 mov	 r8, rax
  00a42	48 8b d1	 mov	 rdx, rcx
  00a45	48 8d 8d 34 0a
	00 00		 lea	 rcx, QWORD PTR $T34[rbp]
  00a4c	e8 00 00 00 00	 call	 ?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z ; ImLerp
  00a51	b9 10 00 00 00	 mov	 ecx, 16
  00a56	48 6b c9 21	 imul	 rcx, rcx, 33		; 00000021H
  00a5a	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00a5e	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00a62	48 8b f0	 mov	 rsi, rax
  00a65	b9 10 00 00 00	 mov	 ecx, 16
  00a6a	f3 a4		 rep movsb

; 334  :     colors[ImGuiCol_TabHovered]             = colors[ImGuiCol_HeaderHovered];

  00a6c	b8 10 00 00 00	 mov	 eax, 16
  00a71	48 6b c0 19	 imul	 rax, rax, 25
  00a75	b9 10 00 00 00	 mov	 ecx, 16
  00a7a	48 6b c9 22	 imul	 rcx, rcx, 34		; 00000022H
  00a7e	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00a82	48 8b 7d 28	 mov	 rdi, QWORD PTR colors$[rbp]
  00a86	48 89 bd 88 0d
	00 00		 mov	 QWORD PTR tv878[rbp], rdi
  00a8d	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00a91	48 8b 8d 88 0d
	00 00		 mov	 rcx, QWORD PTR tv878[rbp]
  00a98	48 8d 34 01	 lea	 rsi, QWORD PTR [rcx+rax]
  00a9c	b9 10 00 00 00	 mov	 ecx, 16
  00aa1	f3 a4		 rep movsb

; 335  :     colors[ImGuiCol_TabActive]              = ImLerp(colors[ImGuiCol_HeaderActive], colors[ImGuiCol_TitleBgActive], 0.60f);

  00aa3	b8 10 00 00 00	 mov	 eax, 16
  00aa8	48 6b c0 0b	 imul	 rax, rax, 11
  00aac	48 8b 4d 28	 mov	 rcx, QWORD PTR colors$[rbp]
  00ab0	48 03 c8	 add	 rcx, rax
  00ab3	48 8b c1	 mov	 rax, rcx
  00ab6	b9 10 00 00 00	 mov	 ecx, 16
  00abb	48 6b c9 1a	 imul	 rcx, rcx, 26
  00abf	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00ac3	48 03 d1	 add	 rdx, rcx
  00ac6	48 8b ca	 mov	 rcx, rdx
  00ac9	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f19999a
  00ad1	4c 8b c0	 mov	 r8, rax
  00ad4	48 8b d1	 mov	 rdx, rcx
  00ad7	48 8d 8d 64 0a
	00 00		 lea	 rcx, QWORD PTR $T35[rbp]
  00ade	e8 00 00 00 00	 call	 ?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z ; ImLerp
  00ae3	b9 10 00 00 00	 mov	 ecx, 16
  00ae8	48 6b c9 23	 imul	 rcx, rcx, 35		; 00000023H
  00aec	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00af0	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00af4	48 8b f0	 mov	 rsi, rax
  00af7	b9 10 00 00 00	 mov	 ecx, 16
  00afc	f3 a4		 rep movsb

; 336  :     colors[ImGuiCol_TabUnfocused]           = ImLerp(colors[ImGuiCol_Tab],          colors[ImGuiCol_TitleBg], 0.80f);

  00afe	b8 10 00 00 00	 mov	 eax, 16
  00b03	48 6b c0 0a	 imul	 rax, rax, 10
  00b07	48 8b 4d 28	 mov	 rcx, QWORD PTR colors$[rbp]
  00b0b	48 03 c8	 add	 rcx, rax
  00b0e	48 8b c1	 mov	 rax, rcx
  00b11	b9 10 00 00 00	 mov	 ecx, 16
  00b16	48 6b c9 21	 imul	 rcx, rcx, 33		; 00000021H
  00b1a	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00b1e	48 03 d1	 add	 rdx, rcx
  00b21	48 8b ca	 mov	 rcx, rdx
  00b24	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f4ccccd
  00b2c	4c 8b c0	 mov	 r8, rax
  00b2f	48 8b d1	 mov	 rdx, rcx
  00b32	48 8d 8d 94 0a
	00 00		 lea	 rcx, QWORD PTR $T36[rbp]
  00b39	e8 00 00 00 00	 call	 ?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z ; ImLerp
  00b3e	b9 10 00 00 00	 mov	 ecx, 16
  00b43	48 6b c9 24	 imul	 rcx, rcx, 36		; 00000024H
  00b47	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00b4b	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00b4f	48 8b f0	 mov	 rsi, rax
  00b52	b9 10 00 00 00	 mov	 ecx, 16
  00b57	f3 a4		 rep movsb

; 337  :     colors[ImGuiCol_TabUnfocusedActive]     = ImLerp(colors[ImGuiCol_TabActive],    colors[ImGuiCol_TitleBg], 0.40f);

  00b59	b8 10 00 00 00	 mov	 eax, 16
  00b5e	48 6b c0 0a	 imul	 rax, rax, 10
  00b62	48 8b 4d 28	 mov	 rcx, QWORD PTR colors$[rbp]
  00b66	48 03 c8	 add	 rcx, rax
  00b69	48 8b c1	 mov	 rax, rcx
  00b6c	b9 10 00 00 00	 mov	 ecx, 16
  00b71	48 6b c9 23	 imul	 rcx, rcx, 35		; 00000023H
  00b75	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00b79	48 03 d1	 add	 rdx, rcx
  00b7c	48 8b ca	 mov	 rcx, rdx
  00b7f	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3ecccccd
  00b87	4c 8b c0	 mov	 r8, rax
  00b8a	48 8b d1	 mov	 rdx, rcx
  00b8d	48 8d 8d c4 0a
	00 00		 lea	 rcx, QWORD PTR $T37[rbp]
  00b94	e8 00 00 00 00	 call	 ?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z ; ImLerp
  00b99	b9 10 00 00 00	 mov	 ecx, 16
  00b9e	48 6b c9 25	 imul	 rcx, rcx, 37		; 00000025H
  00ba2	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00ba6	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00baa	48 8b f0	 mov	 rsi, rax
  00bad	b9 10 00 00 00	 mov	 ecx, 16
  00bb2	f3 a4		 rep movsb

; 338  :     colors[ImGuiCol_PlotLines]              = ImVec4(0.39f, 0.39f, 0.39f, 1.00f);

  00bb4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00bbc	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00bc2	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3ec7ae14
  00bca	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ec7ae14
  00bd2	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ec7ae14
  00bda	48 8d 8d f4 0a
	00 00		 lea	 rcx, QWORD PTR $T38[rbp]
  00be1	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00be6	b9 10 00 00 00	 mov	 ecx, 16
  00beb	48 6b c9 26	 imul	 rcx, rcx, 38		; 00000026H
  00bef	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00bf3	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00bf7	48 8b f0	 mov	 rsi, rax
  00bfa	b9 10 00 00 00	 mov	 ecx, 16
  00bff	f3 a4		 rep movsb

; 339  :     colors[ImGuiCol_PlotLinesHovered]       = ImVec4(1.00f, 0.43f, 0.35f, 1.00f);

  00c01	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00c09	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00c0f	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3eb33333
  00c17	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3edc28f6
  00c1f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00c27	48 8d 8d 24 0b
	00 00		 lea	 rcx, QWORD PTR $T39[rbp]
  00c2e	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00c33	b9 10 00 00 00	 mov	 ecx, 16
  00c38	48 6b c9 27	 imul	 rcx, rcx, 39		; 00000027H
  00c3c	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00c40	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00c44	48 8b f0	 mov	 rsi, rax
  00c47	b9 10 00 00 00	 mov	 ecx, 16
  00c4c	f3 a4		 rep movsb

; 340  :     colors[ImGuiCol_PlotHistogram]          = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);

  00c4e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00c56	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00c5c	0f 57 db	 xorps	 xmm3, xmm3
  00c5f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f333333
  00c67	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f666666
  00c6f	48 8d 8d 54 0b
	00 00		 lea	 rcx, QWORD PTR $T40[rbp]
  00c76	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00c7b	b9 10 00 00 00	 mov	 ecx, 16
  00c80	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  00c84	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00c88	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00c8c	48 8b f0	 mov	 rsi, rax
  00c8f	b9 10 00 00 00	 mov	 ecx, 16
  00c94	f3 a4		 rep movsb

; 341  :     colors[ImGuiCol_PlotHistogramHovered]   = ImVec4(1.00f, 0.45f, 0.00f, 1.00f);

  00c96	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00c9e	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00ca4	0f 57 db	 xorps	 xmm3, xmm3
  00ca7	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ee66666
  00caf	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00cb7	48 8d 8d 84 0b
	00 00		 lea	 rcx, QWORD PTR $T41[rbp]
  00cbe	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00cc3	b9 10 00 00 00	 mov	 ecx, 16
  00cc8	48 6b c9 29	 imul	 rcx, rcx, 41		; 00000029H
  00ccc	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00cd0	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00cd4	48 8b f0	 mov	 rsi, rax
  00cd7	b9 10 00 00 00	 mov	 ecx, 16
  00cdc	f3 a4		 rep movsb

; 342  :     colors[ImGuiCol_TableHeaderBg]          = ImVec4(0.78f, 0.87f, 0.98f, 1.00f);

  00cde	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ce6	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00cec	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  00cf4	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f5eb852
  00cfc	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f47ae14
  00d04	48 8d 8d b4 0b
	00 00		 lea	 rcx, QWORD PTR $T42[rbp]
  00d0b	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00d10	b9 10 00 00 00	 mov	 ecx, 16
  00d15	48 6b c9 2a	 imul	 rcx, rcx, 42		; 0000002aH
  00d19	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00d1d	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00d21	48 8b f0	 mov	 rsi, rax
  00d24	b9 10 00 00 00	 mov	 ecx, 16
  00d29	f3 a4		 rep movsb

; 343  :     colors[ImGuiCol_TableBorderStrong]      = ImVec4(0.57f, 0.57f, 0.64f, 1.00f);   // Prefer using Alpha=1.0 here

  00d2b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00d33	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00d39	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f23d70a
  00d41	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f11eb85
  00d49	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f11eb85
  00d51	48 8d 8d e4 0b
	00 00		 lea	 rcx, QWORD PTR $T43[rbp]
  00d58	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00d5d	b9 10 00 00 00	 mov	 ecx, 16
  00d62	48 6b c9 2b	 imul	 rcx, rcx, 43		; 0000002bH
  00d66	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00d6a	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00d6e	48 8b f0	 mov	 rsi, rax
  00d71	b9 10 00 00 00	 mov	 ecx, 16
  00d76	f3 a4		 rep movsb

; 344  :     colors[ImGuiCol_TableBorderLight]       = ImVec4(0.68f, 0.68f, 0.74f, 1.00f);   // Prefer using Alpha=1.0 here

  00d78	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00d80	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00d86	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f3d70a4
  00d8e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f2e147b
  00d96	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f2e147b
  00d9e	48 8d 8d 14 0c
	00 00		 lea	 rcx, QWORD PTR $T44[rbp]
  00da5	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00daa	b9 10 00 00 00	 mov	 ecx, 16
  00daf	48 6b c9 2c	 imul	 rcx, rcx, 44		; 0000002cH
  00db3	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00db7	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00dbb	48 8b f0	 mov	 rsi, rax
  00dbe	b9 10 00 00 00	 mov	 ecx, 16
  00dc3	f3 a4		 rep movsb

; 345  :     colors[ImGuiCol_TableRowBg]             = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);

  00dc5	0f 57 c0	 xorps	 xmm0, xmm0
  00dc8	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00dce	0f 57 db	 xorps	 xmm3, xmm3
  00dd1	0f 57 d2	 xorps	 xmm2, xmm2
  00dd4	0f 57 c9	 xorps	 xmm1, xmm1
  00dd7	48 8d 8d 44 0c
	00 00		 lea	 rcx, QWORD PTR $T45[rbp]
  00dde	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00de3	b9 10 00 00 00	 mov	 ecx, 16
  00de8	48 6b c9 2d	 imul	 rcx, rcx, 45		; 0000002dH
  00dec	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00df0	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00df4	48 8b f0	 mov	 rsi, rax
  00df7	b9 10 00 00 00	 mov	 ecx, 16
  00dfc	f3 a4		 rep movsb

; 346  :     colors[ImGuiCol_TableRowBgAlt]          = ImVec4(0.30f, 0.30f, 0.30f, 0.09f);

  00dfe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  00e06	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00e0c	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e99999a
  00e14	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e99999a
  00e1c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e99999a
  00e24	48 8d 8d 74 0c
	00 00		 lea	 rcx, QWORD PTR $T46[rbp]
  00e2b	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00e30	b9 10 00 00 00	 mov	 ecx, 16
  00e35	48 6b c9 2e	 imul	 rcx, rcx, 46		; 0000002eH
  00e39	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00e3d	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00e41	48 8b f0	 mov	 rsi, rax
  00e44	b9 10 00 00 00	 mov	 ecx, 16
  00e49	f3 a4		 rep movsb

; 347  :     colors[ImGuiCol_TextSelectedBg]         = ImVec4(0.26f, 0.59f, 0.98f, 0.35f);

  00e4b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  00e53	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00e59	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  00e61	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  00e69	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  00e71	48 8d 8d a4 0c
	00 00		 lea	 rcx, QWORD PTR $T47[rbp]
  00e78	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00e7d	b9 10 00 00 00	 mov	 ecx, 16
  00e82	48 6b c9 2f	 imul	 rcx, rcx, 47		; 0000002fH
  00e86	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00e8a	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00e8e	48 8b f0	 mov	 rsi, rax
  00e91	b9 10 00 00 00	 mov	 ecx, 16
  00e96	f3 a4		 rep movsb

; 348  :     colors[ImGuiCol_DragDropTarget]         = ImVec4(0.26f, 0.59f, 0.98f, 0.95f);

  00e98	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  00ea0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00ea6	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  00eae	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  00eb6	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  00ebe	48 8d 8d d4 0c
	00 00		 lea	 rcx, QWORD PTR $T48[rbp]
  00ec5	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00eca	b9 10 00 00 00	 mov	 ecx, 16
  00ecf	48 6b c9 30	 imul	 rcx, rcx, 48		; 00000030H
  00ed3	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00ed7	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00edb	48 8b f0	 mov	 rsi, rax
  00ede	b9 10 00 00 00	 mov	 ecx, 16
  00ee3	f3 a4		 rep movsb

; 349  :     colors[ImGuiCol_NavHighlight]           = colors[ImGuiCol_HeaderHovered];

  00ee5	b8 10 00 00 00	 mov	 eax, 16
  00eea	48 6b c0 19	 imul	 rax, rax, 25
  00eee	b9 10 00 00 00	 mov	 ecx, 16
  00ef3	48 6b c9 31	 imul	 rcx, rcx, 49		; 00000031H
  00ef7	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00efb	48 8b 7d 28	 mov	 rdi, QWORD PTR colors$[rbp]
  00eff	48 89 bd 88 0d
	00 00		 mov	 QWORD PTR tv1010[rbp], rdi
  00f06	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00f0a	48 8b 8d 88 0d
	00 00		 mov	 rcx, QWORD PTR tv1010[rbp]
  00f11	48 8d 34 01	 lea	 rsi, QWORD PTR [rcx+rax]
  00f15	b9 10 00 00 00	 mov	 ecx, 16
  00f1a	f3 a4		 rep movsb

; 350  :     colors[ImGuiCol_NavWindowingHighlight]  = ImVec4(0.70f, 0.70f, 0.70f, 0.70f);

  00f1c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00f24	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00f2a	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f333333
  00f32	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f333333
  00f3a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f333333
  00f42	48 8d 8d 04 0d
	00 00		 lea	 rcx, QWORD PTR $T49[rbp]
  00f49	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00f4e	b9 10 00 00 00	 mov	 ecx, 16
  00f53	48 6b c9 32	 imul	 rcx, rcx, 50		; 00000032H
  00f57	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00f5b	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00f5f	48 8b f0	 mov	 rsi, rax
  00f62	b9 10 00 00 00	 mov	 ecx, 16
  00f67	f3 a4		 rep movsb

; 351  :     colors[ImGuiCol_NavWindowingDimBg]      = ImVec4(0.20f, 0.20f, 0.20f, 0.20f);

  00f69	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00f71	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00f77	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e4ccccd
  00f7f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e4ccccd
  00f87	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e4ccccd
  00f8f	48 8d 8d 34 0d
	00 00		 lea	 rcx, QWORD PTR $T50[rbp]
  00f96	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00f9b	b9 10 00 00 00	 mov	 ecx, 16
  00fa0	48 6b c9 33	 imul	 rcx, rcx, 51		; 00000033H
  00fa4	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00fa8	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00fac	48 8b f0	 mov	 rsi, rax
  00faf	b9 10 00 00 00	 mov	 ecx, 16
  00fb4	f3 a4		 rep movsb

; 352  :     colors[ImGuiCol_ModalWindowDimBg]       = ImVec4(0.20f, 0.20f, 0.20f, 0.35f);

  00fb6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  00fbe	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00fc4	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e4ccccd
  00fcc	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e4ccccd
  00fd4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e4ccccd
  00fdc	48 8d 8d 64 0d
	00 00		 lea	 rcx, QWORD PTR $T51[rbp]
  00fe3	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00fe8	b9 10 00 00 00	 mov	 ecx, 16
  00fed	48 6b c9 34	 imul	 rcx, rcx, 52		; 00000034H
  00ff1	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00ff5	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00ff9	48 8b f0	 mov	 rsi, rax
  00ffc	b9 10 00 00 00	 mov	 ecx, 16
  01001	f3 a4		 rep movsb

; 353  : }

  01003	48 8d a5 90 0d
	00 00		 lea	 rsp, QWORD PTR [rbp+3472]
  0100a	5f		 pop	 rdi
  0100b	5e		 pop	 rsi
  0100c	5d		 pop	 rbp
  0100d	c3		 ret	 0
?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z ENDP	; ImGui::StyleColorsLight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_draw.cpp
;	COMDAT ?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z
_TEXT	SEGMENT
style$ = 8
colors$ = 40
$T1 = 1028
$T2 = 1076
$T3 = 1124
$T4 = 1172
$T5 = 1220
$T6 = 1268
$T7 = 1316
$T8 = 1364
$T9 = 1412
$T10 = 1460
$T11 = 1508
$T12 = 1556
$T13 = 1604
$T14 = 1652
$T15 = 1700
$T16 = 1748
$T17 = 1796
$T18 = 1844
$T19 = 1892
$T20 = 1940
$T21 = 1988
$T22 = 2036
$T23 = 2084
$T24 = 2132
$T25 = 2180
$T26 = 2228
$T27 = 2276
$T28 = 2324
$T29 = 2372
$T30 = 2420
$T31 = 2468
$T32 = 2516
$T33 = 2564
$T34 = 2612
$T35 = 2660
$T36 = 2708
$T37 = 2756
$T38 = 2804
$T39 = 2852
$T40 = 2900
$T41 = 2948
$T42 = 2996
$T43 = 3044
$T44 = 3092
$T45 = 3140
$T46 = 3188
$T47 = 3236
$T48 = 3284
$T49 = 3332
$T50 = 3380
$T51 = 3428
tv879 = 3464
tv833 = 3464
tv66 = 3464
dst$ = 3504
?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z PROC	; ImGui::StyleColorsDark, COMDAT

; 175  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec c0 0d
	00 00		 sub	 rsp, 3520		; 00000dc0H
  0000f	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 70 03 00 00	 mov	 ecx, 880		; 00000370H
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 e8
	0d 00 00	 mov	 rcx, QWORD PTR [rsp+3560]

; 176  :     ImGuiStyle* style = dst ? dst : &ImGui::GetStyle();

  0002b	48 83 bd b0 0d
	00 00 00	 cmp	 QWORD PTR dst$[rbp], 0
  00033	74 10		 je	 SHORT $LN3@StyleColor
  00035	48 8b 85 b0 0d
	00 00		 mov	 rax, QWORD PTR dst$[rbp]
  0003c	48 89 85 88 0d
	00 00		 mov	 QWORD PTR tv66[rbp], rax
  00043	eb 0c		 jmp	 SHORT $LN4@StyleColor
$LN3@StyleColor:
  00045	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  0004a	48 89 85 88 0d
	00 00		 mov	 QWORD PTR tv66[rbp], rax
$LN4@StyleColor:
  00051	48 8b 85 88 0d
	00 00		 mov	 rax, QWORD PTR tv66[rbp]
  00058	48 89 45 08	 mov	 QWORD PTR style$[rbp], rax

; 177  :     ImVec4* colors = style->Colors;

  0005c	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00060	48 05 c8 00 00
	00		 add	 rax, 200		; 000000c8H
  00066	48 89 45 28	 mov	 QWORD PTR colors$[rbp], rax

; 178  : 
; 179  :     colors[ImGuiCol_Text]                   = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);

  0006a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00072	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00078	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00080	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00088	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00090	48 8d 8d 04 04
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00097	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0009c	b9 10 00 00 00	 mov	 ecx, 16
  000a1	48 6b c9 00	 imul	 rcx, rcx, 0
  000a5	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  000a9	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  000ad	48 8b f0	 mov	 rsi, rax
  000b0	b9 10 00 00 00	 mov	 ecx, 16
  000b5	f3 a4		 rep movsb

; 180  :     colors[ImGuiCol_TextDisabled]           = ImVec4(0.50f, 0.50f, 0.50f, 1.00f);

  000b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000bf	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  000c5	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000
  000cd	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f000000
  000d5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  000dd	48 8d 8d 34 04
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  000e4	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  000e9	b9 10 00 00 00	 mov	 ecx, 16
  000ee	48 6b c9 01	 imul	 rcx, rcx, 1
  000f2	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  000f6	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  000fa	48 8b f0	 mov	 rsi, rax
  000fd	b9 10 00 00 00	 mov	 ecx, 16
  00102	f3 a4		 rep movsb

; 181  :     colors[ImGuiCol_WindowBg]               = ImVec4(0.06f, 0.06f, 0.06f, 0.94f);

  00104	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f70a3d7
  0010c	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00112	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3d75c28f
  0011a	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3d75c28f
  00122	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3d75c28f
  0012a	48 8d 8d 64 04
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  00131	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00136	b9 10 00 00 00	 mov	 ecx, 16
  0013b	48 6b c9 02	 imul	 rcx, rcx, 2
  0013f	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00143	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00147	48 8b f0	 mov	 rsi, rax
  0014a	b9 10 00 00 00	 mov	 ecx, 16
  0014f	f3 a4		 rep movsb

; 182  :     colors[ImGuiCol_ChildBg]                = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);

  00151	0f 57 c0	 xorps	 xmm0, xmm0
  00154	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0015a	0f 57 db	 xorps	 xmm3, xmm3
  0015d	0f 57 d2	 xorps	 xmm2, xmm2
  00160	0f 57 c9	 xorps	 xmm1, xmm1
  00163	48 8d 8d 94 04
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  0016a	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0016f	b9 10 00 00 00	 mov	 ecx, 16
  00174	48 6b c9 03	 imul	 rcx, rcx, 3
  00178	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0017c	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00180	48 8b f0	 mov	 rsi, rax
  00183	b9 10 00 00 00	 mov	 ecx, 16
  00188	f3 a4		 rep movsb

; 183  :     colors[ImGuiCol_PopupBg]                = ImVec4(0.08f, 0.08f, 0.08f, 0.94f);

  0018a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f70a3d7
  00192	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00198	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3da3d70a
  001a0	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3da3d70a
  001a8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3da3d70a
  001b0	48 8d 8d c4 04
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  001b7	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  001bc	b9 10 00 00 00	 mov	 ecx, 16
  001c1	48 6b c9 04	 imul	 rcx, rcx, 4
  001c5	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  001c9	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  001cd	48 8b f0	 mov	 rsi, rax
  001d0	b9 10 00 00 00	 mov	 ecx, 16
  001d5	f3 a4		 rep movsb

; 184  :     colors[ImGuiCol_Border]                 = ImVec4(0.43f, 0.43f, 0.50f, 0.50f);

  001d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001df	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  001e5	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000
  001ed	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3edc28f6
  001f5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3edc28f6
  001fd	48 8d 8d f4 04
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00204	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00209	b9 10 00 00 00	 mov	 ecx, 16
  0020e	48 6b c9 05	 imul	 rcx, rcx, 5
  00212	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00216	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0021a	48 8b f0	 mov	 rsi, rax
  0021d	b9 10 00 00 00	 mov	 ecx, 16
  00222	f3 a4		 rep movsb

; 185  :     colors[ImGuiCol_BorderShadow]           = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);

  00224	0f 57 c0	 xorps	 xmm0, xmm0
  00227	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0022d	0f 57 db	 xorps	 xmm3, xmm3
  00230	0f 57 d2	 xorps	 xmm2, xmm2
  00233	0f 57 c9	 xorps	 xmm1, xmm1
  00236	48 8d 8d 24 05
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  0023d	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00242	b9 10 00 00 00	 mov	 ecx, 16
  00247	48 6b c9 06	 imul	 rcx, rcx, 6
  0024b	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0024f	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00253	48 8b f0	 mov	 rsi, rax
  00256	b9 10 00 00 00	 mov	 ecx, 16
  0025b	f3 a4		 rep movsb

; 186  :     colors[ImGuiCol_FrameBg]                = ImVec4(0.16f, 0.29f, 0.48f, 0.54f);

  0025d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0a3d71
  00265	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0026b	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3ef5c28f
  00273	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e947ae1
  0027b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e23d70a
  00283	48 8d 8d 54 05
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0028a	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0028f	b9 10 00 00 00	 mov	 ecx, 16
  00294	48 6b c9 07	 imul	 rcx, rcx, 7
  00298	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0029c	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  002a0	48 8b f0	 mov	 rsi, rax
  002a3	b9 10 00 00 00	 mov	 ecx, 16
  002a8	f3 a4		 rep movsb

; 187  :     colors[ImGuiCol_FrameBgHovered]         = ImVec4(0.26f, 0.59f, 0.98f, 0.40f);

  002aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  002b2	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  002b8	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  002c0	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  002c8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  002d0	48 8d 8d 84 05
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  002d7	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  002dc	b9 10 00 00 00	 mov	 ecx, 16
  002e1	48 6b c9 08	 imul	 rcx, rcx, 8
  002e5	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  002e9	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  002ed	48 8b f0	 mov	 rsi, rax
  002f0	b9 10 00 00 00	 mov	 ecx, 16
  002f5	f3 a4		 rep movsb

; 188  :     colors[ImGuiCol_FrameBgActive]          = ImVec4(0.26f, 0.59f, 0.98f, 0.67f);

  002f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2b851f
  002ff	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00305	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  0030d	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  00315	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  0031d	48 8d 8d b4 05
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00324	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00329	b9 10 00 00 00	 mov	 ecx, 16
  0032e	48 6b c9 09	 imul	 rcx, rcx, 9
  00332	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00336	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0033a	48 8b f0	 mov	 rsi, rax
  0033d	b9 10 00 00 00	 mov	 ecx, 16
  00342	f3 a4		 rep movsb

; 189  :     colors[ImGuiCol_TitleBg]                = ImVec4(0.04f, 0.04f, 0.04f, 1.00f);

  00344	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0034c	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00352	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3d23d70a
  0035a	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3d23d70a
  00362	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3d23d70a
  0036a	48 8d 8d e4 05
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00371	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00376	b9 10 00 00 00	 mov	 ecx, 16
  0037b	48 6b c9 0a	 imul	 rcx, rcx, 10
  0037f	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00383	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00387	48 8b f0	 mov	 rsi, rax
  0038a	b9 10 00 00 00	 mov	 ecx, 16
  0038f	f3 a4		 rep movsb

; 190  :     colors[ImGuiCol_TitleBgActive]          = ImVec4(0.16f, 0.29f, 0.48f, 1.00f);

  00391	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00399	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0039f	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3ef5c28f
  003a7	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e947ae1
  003af	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e23d70a
  003b7	48 8d 8d 14 06
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  003be	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  003c3	b9 10 00 00 00	 mov	 ecx, 16
  003c8	48 6b c9 0b	 imul	 rcx, rcx, 11
  003cc	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  003d0	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  003d4	48 8b f0	 mov	 rsi, rax
  003d7	b9 10 00 00 00	 mov	 ecx, 16
  003dc	f3 a4		 rep movsb

; 191  :     colors[ImGuiCol_TitleBgCollapsed]       = ImVec4(0.00f, 0.00f, 0.00f, 0.51f);

  003de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f028f5c
  003e6	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  003ec	0f 57 db	 xorps	 xmm3, xmm3
  003ef	0f 57 d2	 xorps	 xmm2, xmm2
  003f2	0f 57 c9	 xorps	 xmm1, xmm1
  003f5	48 8d 8d 44 06
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  003fc	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00401	b9 10 00 00 00	 mov	 ecx, 16
  00406	48 6b c9 0c	 imul	 rcx, rcx, 12
  0040a	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0040e	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00412	48 8b f0	 mov	 rsi, rax
  00415	b9 10 00 00 00	 mov	 ecx, 16
  0041a	f3 a4		 rep movsb

; 192  :     colors[ImGuiCol_MenuBarBg]              = ImVec4(0.14f, 0.14f, 0.14f, 1.00f);

  0041c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00424	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0042a	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e0f5c29
  00432	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e0f5c29
  0043a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e0f5c29
  00442	48 8d 8d 74 06
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  00449	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0044e	b9 10 00 00 00	 mov	 ecx, 16
  00453	48 6b c9 0d	 imul	 rcx, rcx, 13
  00457	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0045b	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0045f	48 8b f0	 mov	 rsi, rax
  00462	b9 10 00 00 00	 mov	 ecx, 16
  00467	f3 a4		 rep movsb

; 193  :     colors[ImGuiCol_ScrollbarBg]            = ImVec4(0.02f, 0.02f, 0.02f, 0.53f);

  00469	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f07ae14
  00471	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00477	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3ca3d70a
  0047f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ca3d70a
  00487	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ca3d70a
  0048f	48 8d 8d a4 06
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  00496	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0049b	b9 10 00 00 00	 mov	 ecx, 16
  004a0	48 6b c9 0e	 imul	 rcx, rcx, 14
  004a4	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  004a8	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  004ac	48 8b f0	 mov	 rsi, rax
  004af	b9 10 00 00 00	 mov	 ecx, 16
  004b4	f3 a4		 rep movsb

; 194  :     colors[ImGuiCol_ScrollbarGrab]          = ImVec4(0.31f, 0.31f, 0.31f, 1.00f);

  004b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004be	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  004c4	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e9eb852
  004cc	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e9eb852
  004d4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e9eb852
  004dc	48 8d 8d d4 06
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  004e3	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  004e8	b9 10 00 00 00	 mov	 ecx, 16
  004ed	48 6b c9 0f	 imul	 rcx, rcx, 15
  004f1	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  004f5	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  004f9	48 8b f0	 mov	 rsi, rax
  004fc	b9 10 00 00 00	 mov	 ecx, 16
  00501	f3 a4		 rep movsb

; 195  :     colors[ImGuiCol_ScrollbarGrabHovered]   = ImVec4(0.41f, 0.41f, 0.41f, 1.00f);

  00503	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0050b	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00511	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3ed1eb85
  00519	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ed1eb85
  00521	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ed1eb85
  00529	48 8d 8d 04 07
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  00530	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00535	b9 10 00 00 00	 mov	 ecx, 16
  0053a	48 6b c9 10	 imul	 rcx, rcx, 16
  0053e	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00542	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00546	48 8b f0	 mov	 rsi, rax
  00549	b9 10 00 00 00	 mov	 ecx, 16
  0054e	f3 a4		 rep movsb

; 196  :     colors[ImGuiCol_ScrollbarGrabActive]    = ImVec4(0.51f, 0.51f, 0.51f, 1.00f);

  00550	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00558	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0055e	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f028f5c
  00566	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f028f5c
  0056e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f028f5c
  00576	48 8d 8d 34 07
	00 00		 lea	 rcx, QWORD PTR $T18[rbp]
  0057d	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00582	b9 10 00 00 00	 mov	 ecx, 16
  00587	48 6b c9 11	 imul	 rcx, rcx, 17
  0058b	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0058f	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00593	48 8b f0	 mov	 rsi, rax
  00596	b9 10 00 00 00	 mov	 ecx, 16
  0059b	f3 a4		 rep movsb

; 197  :     colors[ImGuiCol_CheckMark]              = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);

  0059d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005a5	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  005ab	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  005b3	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  005bb	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  005c3	48 8d 8d 64 07
	00 00		 lea	 rcx, QWORD PTR $T19[rbp]
  005ca	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  005cf	b9 10 00 00 00	 mov	 ecx, 16
  005d4	48 6b c9 12	 imul	 rcx, rcx, 18
  005d8	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  005dc	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  005e0	48 8b f0	 mov	 rsi, rax
  005e3	b9 10 00 00 00	 mov	 ecx, 16
  005e8	f3 a4		 rep movsb

; 198  :     colors[ImGuiCol_SliderGrab]             = ImVec4(0.24f, 0.52f, 0.88f, 1.00f);

  005ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005f2	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  005f8	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f6147ae
  00600	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f051eb8
  00608	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e75c28f
  00610	48 8d 8d 94 07
	00 00		 lea	 rcx, QWORD PTR $T20[rbp]
  00617	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0061c	b9 10 00 00 00	 mov	 ecx, 16
  00621	48 6b c9 13	 imul	 rcx, rcx, 19
  00625	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00629	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0062d	48 8b f0	 mov	 rsi, rax
  00630	b9 10 00 00 00	 mov	 ecx, 16
  00635	f3 a4		 rep movsb

; 199  :     colors[ImGuiCol_SliderGrabActive]       = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);

  00637	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0063f	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00645	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  0064d	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  00655	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  0065d	48 8d 8d c4 07
	00 00		 lea	 rcx, QWORD PTR $T21[rbp]
  00664	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00669	b9 10 00 00 00	 mov	 ecx, 16
  0066e	48 6b c9 14	 imul	 rcx, rcx, 20
  00672	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00676	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  0067a	48 8b f0	 mov	 rsi, rax
  0067d	b9 10 00 00 00	 mov	 ecx, 16
  00682	f3 a4		 rep movsb

; 200  :     colors[ImGuiCol_Button]                 = ImVec4(0.26f, 0.59f, 0.98f, 0.40f);

  00684	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  0068c	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00692	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  0069a	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  006a2	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  006aa	48 8d 8d f4 07
	00 00		 lea	 rcx, QWORD PTR $T22[rbp]
  006b1	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  006b6	b9 10 00 00 00	 mov	 ecx, 16
  006bb	48 6b c9 15	 imul	 rcx, rcx, 21
  006bf	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  006c3	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  006c7	48 8b f0	 mov	 rsi, rax
  006ca	b9 10 00 00 00	 mov	 ecx, 16
  006cf	f3 a4		 rep movsb

; 201  :     colors[ImGuiCol_ButtonHovered]          = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);

  006d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006d9	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  006df	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  006e7	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  006ef	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  006f7	48 8d 8d 24 08
	00 00		 lea	 rcx, QWORD PTR $T23[rbp]
  006fe	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00703	b9 10 00 00 00	 mov	 ecx, 16
  00708	48 6b c9 16	 imul	 rcx, rcx, 22
  0070c	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00710	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00714	48 8b f0	 mov	 rsi, rax
  00717	b9 10 00 00 00	 mov	 ecx, 16
  0071c	f3 a4		 rep movsb

; 202  :     colors[ImGuiCol_ButtonActive]           = ImVec4(0.06f, 0.53f, 0.98f, 1.00f);

  0071e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00726	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0072c	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  00734	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f07ae14
  0073c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3d75c28f
  00744	48 8d 8d 54 08
	00 00		 lea	 rcx, QWORD PTR $T24[rbp]
  0074b	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00750	b9 10 00 00 00	 mov	 ecx, 16
  00755	48 6b c9 17	 imul	 rcx, rcx, 23
  00759	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  0075d	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00761	48 8b f0	 mov	 rsi, rax
  00764	b9 10 00 00 00	 mov	 ecx, 16
  00769	f3 a4		 rep movsb

; 203  :     colors[ImGuiCol_Header]                 = ImVec4(0.26f, 0.59f, 0.98f, 0.31f);

  0076b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e9eb852
  00773	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00779	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  00781	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  00789	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  00791	48 8d 8d 84 08
	00 00		 lea	 rcx, QWORD PTR $T25[rbp]
  00798	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0079d	b9 10 00 00 00	 mov	 ecx, 16
  007a2	48 6b c9 18	 imul	 rcx, rcx, 24
  007a6	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  007aa	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  007ae	48 8b f0	 mov	 rsi, rax
  007b1	b9 10 00 00 00	 mov	 ecx, 16
  007b6	f3 a4		 rep movsb

; 204  :     colors[ImGuiCol_HeaderHovered]          = ImVec4(0.26f, 0.59f, 0.98f, 0.80f);

  007b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  007c0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  007c6	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  007ce	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  007d6	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  007de	48 8d 8d b4 08
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  007e5	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  007ea	b9 10 00 00 00	 mov	 ecx, 16
  007ef	48 6b c9 19	 imul	 rcx, rcx, 25
  007f3	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  007f7	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  007fb	48 8b f0	 mov	 rsi, rax
  007fe	b9 10 00 00 00	 mov	 ecx, 16
  00803	f3 a4		 rep movsb

; 205  :     colors[ImGuiCol_HeaderActive]           = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);

  00805	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0080d	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00813	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  0081b	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  00823	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  0082b	48 8d 8d e4 08
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  00832	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00837	b9 10 00 00 00	 mov	 ecx, 16
  0083c	48 6b c9 1a	 imul	 rcx, rcx, 26
  00840	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00844	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00848	48 8b f0	 mov	 rsi, rax
  0084b	b9 10 00 00 00	 mov	 ecx, 16
  00850	f3 a4		 rep movsb

; 206  :     colors[ImGuiCol_Separator]              = colors[ImGuiCol_Border];

  00852	b8 10 00 00 00	 mov	 eax, 16
  00857	48 6b c0 05	 imul	 rax, rax, 5
  0085b	b9 10 00 00 00	 mov	 ecx, 16
  00860	48 6b c9 1b	 imul	 rcx, rcx, 27
  00864	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00868	48 8b 7d 28	 mov	 rdi, QWORD PTR colors$[rbp]
  0086c	48 89 bd 88 0d
	00 00		 mov	 QWORD PTR tv833[rbp], rdi
  00873	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00877	48 8b 8d 88 0d
	00 00		 mov	 rcx, QWORD PTR tv833[rbp]
  0087e	48 8d 34 01	 lea	 rsi, QWORD PTR [rcx+rax]
  00882	b9 10 00 00 00	 mov	 ecx, 16
  00887	f3 a4		 rep movsb

; 207  :     colors[ImGuiCol_SeparatorHovered]       = ImVec4(0.10f, 0.40f, 0.75f, 0.78f);

  00889	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f47ae14
  00891	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00897	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f400000
  0089f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ecccccd
  008a7	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3dcccccd
  008af	48 8d 8d 14 09
	00 00		 lea	 rcx, QWORD PTR $T28[rbp]
  008b6	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  008bb	b9 10 00 00 00	 mov	 ecx, 16
  008c0	48 6b c9 1c	 imul	 rcx, rcx, 28
  008c4	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  008c8	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  008cc	48 8b f0	 mov	 rsi, rax
  008cf	b9 10 00 00 00	 mov	 ecx, 16
  008d4	f3 a4		 rep movsb

; 208  :     colors[ImGuiCol_SeparatorActive]        = ImVec4(0.10f, 0.40f, 0.75f, 1.00f);

  008d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008de	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  008e4	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f400000
  008ec	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ecccccd
  008f4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3dcccccd
  008fc	48 8d 8d 44 09
	00 00		 lea	 rcx, QWORD PTR $T29[rbp]
  00903	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00908	b9 10 00 00 00	 mov	 ecx, 16
  0090d	48 6b c9 1d	 imul	 rcx, rcx, 29
  00911	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00915	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00919	48 8b f0	 mov	 rsi, rax
  0091c	b9 10 00 00 00	 mov	 ecx, 16
  00921	f3 a4		 rep movsb

; 209  :     colors[ImGuiCol_ResizeGrip]             = ImVec4(0.26f, 0.59f, 0.98f, 0.20f);

  00923	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0092b	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00931	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  00939	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  00941	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  00949	48 8d 8d 74 09
	00 00		 lea	 rcx, QWORD PTR $T30[rbp]
  00950	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00955	b9 10 00 00 00	 mov	 ecx, 16
  0095a	48 6b c9 1e	 imul	 rcx, rcx, 30
  0095e	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00962	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00966	48 8b f0	 mov	 rsi, rax
  00969	b9 10 00 00 00	 mov	 ecx, 16
  0096e	f3 a4		 rep movsb

; 210  :     colors[ImGuiCol_ResizeGripHovered]      = ImVec4(0.26f, 0.59f, 0.98f, 0.67f);

  00970	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2b851f
  00978	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0097e	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  00986	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  0098e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  00996	48 8d 8d a4 09
	00 00		 lea	 rcx, QWORD PTR $T31[rbp]
  0099d	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  009a2	b9 10 00 00 00	 mov	 ecx, 16
  009a7	48 6b c9 1f	 imul	 rcx, rcx, 31
  009ab	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  009af	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  009b3	48 8b f0	 mov	 rsi, rax
  009b6	b9 10 00 00 00	 mov	 ecx, 16
  009bb	f3 a4		 rep movsb

; 211  :     colors[ImGuiCol_ResizeGripActive]       = ImVec4(0.26f, 0.59f, 0.98f, 0.95f);

  009bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  009c5	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  009cb	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  009d3	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  009db	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  009e3	48 8d 8d d4 09
	00 00		 lea	 rcx, QWORD PTR $T32[rbp]
  009ea	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  009ef	b9 10 00 00 00	 mov	 ecx, 16
  009f4	48 6b c9 20	 imul	 rcx, rcx, 32		; 00000020H
  009f8	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  009fc	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00a00	48 8b f0	 mov	 rsi, rax
  00a03	b9 10 00 00 00	 mov	 ecx, 16
  00a08	f3 a4		 rep movsb

; 212  :     colors[ImGuiCol_Tab]                    = ImLerp(colors[ImGuiCol_Header],       colors[ImGuiCol_TitleBgActive], 0.80f);

  00a0a	b8 10 00 00 00	 mov	 eax, 16
  00a0f	48 6b c0 0b	 imul	 rax, rax, 11
  00a13	48 8b 4d 28	 mov	 rcx, QWORD PTR colors$[rbp]
  00a17	48 03 c8	 add	 rcx, rax
  00a1a	48 8b c1	 mov	 rax, rcx
  00a1d	b9 10 00 00 00	 mov	 ecx, 16
  00a22	48 6b c9 18	 imul	 rcx, rcx, 24
  00a26	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00a2a	48 03 d1	 add	 rdx, rcx
  00a2d	48 8b ca	 mov	 rcx, rdx
  00a30	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f4ccccd
  00a38	4c 8b c0	 mov	 r8, rax
  00a3b	48 8b d1	 mov	 rdx, rcx
  00a3e	48 8d 8d 04 0a
	00 00		 lea	 rcx, QWORD PTR $T33[rbp]
  00a45	e8 00 00 00 00	 call	 ?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z ; ImLerp
  00a4a	b9 10 00 00 00	 mov	 ecx, 16
  00a4f	48 6b c9 21	 imul	 rcx, rcx, 33		; 00000021H
  00a53	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00a57	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00a5b	48 8b f0	 mov	 rsi, rax
  00a5e	b9 10 00 00 00	 mov	 ecx, 16
  00a63	f3 a4		 rep movsb

; 213  :     colors[ImGuiCol_TabHovered]             = colors[ImGuiCol_HeaderHovered];

  00a65	b8 10 00 00 00	 mov	 eax, 16
  00a6a	48 6b c0 19	 imul	 rax, rax, 25
  00a6e	b9 10 00 00 00	 mov	 ecx, 16
  00a73	48 6b c9 22	 imul	 rcx, rcx, 34		; 00000022H
  00a77	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00a7b	48 8b 7d 28	 mov	 rdi, QWORD PTR colors$[rbp]
  00a7f	48 89 bd 88 0d
	00 00		 mov	 QWORD PTR tv879[rbp], rdi
  00a86	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00a8a	48 8b 8d 88 0d
	00 00		 mov	 rcx, QWORD PTR tv879[rbp]
  00a91	48 8d 34 01	 lea	 rsi, QWORD PTR [rcx+rax]
  00a95	b9 10 00 00 00	 mov	 ecx, 16
  00a9a	f3 a4		 rep movsb

; 214  :     colors[ImGuiCol_TabActive]              = ImLerp(colors[ImGuiCol_HeaderActive], colors[ImGuiCol_TitleBgActive], 0.60f);

  00a9c	b8 10 00 00 00	 mov	 eax, 16
  00aa1	48 6b c0 0b	 imul	 rax, rax, 11
  00aa5	48 8b 4d 28	 mov	 rcx, QWORD PTR colors$[rbp]
  00aa9	48 03 c8	 add	 rcx, rax
  00aac	48 8b c1	 mov	 rax, rcx
  00aaf	b9 10 00 00 00	 mov	 ecx, 16
  00ab4	48 6b c9 1a	 imul	 rcx, rcx, 26
  00ab8	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00abc	48 03 d1	 add	 rdx, rcx
  00abf	48 8b ca	 mov	 rcx, rdx
  00ac2	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f19999a
  00aca	4c 8b c0	 mov	 r8, rax
  00acd	48 8b d1	 mov	 rdx, rcx
  00ad0	48 8d 8d 34 0a
	00 00		 lea	 rcx, QWORD PTR $T34[rbp]
  00ad7	e8 00 00 00 00	 call	 ?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z ; ImLerp
  00adc	b9 10 00 00 00	 mov	 ecx, 16
  00ae1	48 6b c9 23	 imul	 rcx, rcx, 35		; 00000023H
  00ae5	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00ae9	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00aed	48 8b f0	 mov	 rsi, rax
  00af0	b9 10 00 00 00	 mov	 ecx, 16
  00af5	f3 a4		 rep movsb

; 215  :     colors[ImGuiCol_TabUnfocused]           = ImLerp(colors[ImGuiCol_Tab],          colors[ImGuiCol_TitleBg], 0.80f);

  00af7	b8 10 00 00 00	 mov	 eax, 16
  00afc	48 6b c0 0a	 imul	 rax, rax, 10
  00b00	48 8b 4d 28	 mov	 rcx, QWORD PTR colors$[rbp]
  00b04	48 03 c8	 add	 rcx, rax
  00b07	48 8b c1	 mov	 rax, rcx
  00b0a	b9 10 00 00 00	 mov	 ecx, 16
  00b0f	48 6b c9 21	 imul	 rcx, rcx, 33		; 00000021H
  00b13	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00b17	48 03 d1	 add	 rdx, rcx
  00b1a	48 8b ca	 mov	 rcx, rdx
  00b1d	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f4ccccd
  00b25	4c 8b c0	 mov	 r8, rax
  00b28	48 8b d1	 mov	 rdx, rcx
  00b2b	48 8d 8d 64 0a
	00 00		 lea	 rcx, QWORD PTR $T35[rbp]
  00b32	e8 00 00 00 00	 call	 ?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z ; ImLerp
  00b37	b9 10 00 00 00	 mov	 ecx, 16
  00b3c	48 6b c9 24	 imul	 rcx, rcx, 36		; 00000024H
  00b40	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00b44	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00b48	48 8b f0	 mov	 rsi, rax
  00b4b	b9 10 00 00 00	 mov	 ecx, 16
  00b50	f3 a4		 rep movsb

; 216  :     colors[ImGuiCol_TabUnfocusedActive]     = ImLerp(colors[ImGuiCol_TabActive],    colors[ImGuiCol_TitleBg], 0.40f);

  00b52	b8 10 00 00 00	 mov	 eax, 16
  00b57	48 6b c0 0a	 imul	 rax, rax, 10
  00b5b	48 8b 4d 28	 mov	 rcx, QWORD PTR colors$[rbp]
  00b5f	48 03 c8	 add	 rcx, rax
  00b62	48 8b c1	 mov	 rax, rcx
  00b65	b9 10 00 00 00	 mov	 ecx, 16
  00b6a	48 6b c9 23	 imul	 rcx, rcx, 35		; 00000023H
  00b6e	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00b72	48 03 d1	 add	 rdx, rcx
  00b75	48 8b ca	 mov	 rcx, rdx
  00b78	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3ecccccd
  00b80	4c 8b c0	 mov	 r8, rax
  00b83	48 8b d1	 mov	 rdx, rcx
  00b86	48 8d 8d 94 0a
	00 00		 lea	 rcx, QWORD PTR $T36[rbp]
  00b8d	e8 00 00 00 00	 call	 ?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z ; ImLerp
  00b92	b9 10 00 00 00	 mov	 ecx, 16
  00b97	48 6b c9 25	 imul	 rcx, rcx, 37		; 00000025H
  00b9b	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00b9f	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00ba3	48 8b f0	 mov	 rsi, rax
  00ba6	b9 10 00 00 00	 mov	 ecx, 16
  00bab	f3 a4		 rep movsb

; 217  :     colors[ImGuiCol_PlotLines]              = ImVec4(0.61f, 0.61f, 0.61f, 1.00f);

  00bad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00bb5	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00bbb	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f1c28f6
  00bc3	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f1c28f6
  00bcb	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f1c28f6
  00bd3	48 8d 8d c4 0a
	00 00		 lea	 rcx, QWORD PTR $T37[rbp]
  00bda	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00bdf	b9 10 00 00 00	 mov	 ecx, 16
  00be4	48 6b c9 26	 imul	 rcx, rcx, 38		; 00000026H
  00be8	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00bec	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00bf0	48 8b f0	 mov	 rsi, rax
  00bf3	b9 10 00 00 00	 mov	 ecx, 16
  00bf8	f3 a4		 rep movsb

; 218  :     colors[ImGuiCol_PlotLinesHovered]       = ImVec4(1.00f, 0.43f, 0.35f, 1.00f);

  00bfa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00c02	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00c08	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3eb33333
  00c10	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3edc28f6
  00c18	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00c20	48 8d 8d f4 0a
	00 00		 lea	 rcx, QWORD PTR $T38[rbp]
  00c27	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00c2c	b9 10 00 00 00	 mov	 ecx, 16
  00c31	48 6b c9 27	 imul	 rcx, rcx, 39		; 00000027H
  00c35	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00c39	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00c3d	48 8b f0	 mov	 rsi, rax
  00c40	b9 10 00 00 00	 mov	 ecx, 16
  00c45	f3 a4		 rep movsb

; 219  :     colors[ImGuiCol_PlotHistogram]          = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);

  00c47	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00c4f	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00c55	0f 57 db	 xorps	 xmm3, xmm3
  00c58	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f333333
  00c60	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f666666
  00c68	48 8d 8d 24 0b
	00 00		 lea	 rcx, QWORD PTR $T39[rbp]
  00c6f	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00c74	b9 10 00 00 00	 mov	 ecx, 16
  00c79	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  00c7d	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00c81	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00c85	48 8b f0	 mov	 rsi, rax
  00c88	b9 10 00 00 00	 mov	 ecx, 16
  00c8d	f3 a4		 rep movsb

; 220  :     colors[ImGuiCol_PlotHistogramHovered]   = ImVec4(1.00f, 0.60f, 0.00f, 1.00f);

  00c8f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00c97	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00c9d	0f 57 db	 xorps	 xmm3, xmm3
  00ca0	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f19999a
  00ca8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00cb0	48 8d 8d 54 0b
	00 00		 lea	 rcx, QWORD PTR $T40[rbp]
  00cb7	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00cbc	b9 10 00 00 00	 mov	 ecx, 16
  00cc1	48 6b c9 29	 imul	 rcx, rcx, 41		; 00000029H
  00cc5	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00cc9	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00ccd	48 8b f0	 mov	 rsi, rax
  00cd0	b9 10 00 00 00	 mov	 ecx, 16
  00cd5	f3 a4		 rep movsb

; 221  :     colors[ImGuiCol_TableHeaderBg]          = ImVec4(0.19f, 0.19f, 0.20f, 1.00f);

  00cd7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00cdf	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00ce5	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e4ccccd
  00ced	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e428f5c
  00cf5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e428f5c
  00cfd	48 8d 8d 84 0b
	00 00		 lea	 rcx, QWORD PTR $T41[rbp]
  00d04	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00d09	b9 10 00 00 00	 mov	 ecx, 16
  00d0e	48 6b c9 2a	 imul	 rcx, rcx, 42		; 0000002aH
  00d12	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00d16	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00d1a	48 8b f0	 mov	 rsi, rax
  00d1d	b9 10 00 00 00	 mov	 ecx, 16
  00d22	f3 a4		 rep movsb

; 222  :     colors[ImGuiCol_TableBorderStrong]      = ImVec4(0.31f, 0.31f, 0.35f, 1.00f);   // Prefer using Alpha=1.0 here

  00d24	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00d2c	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00d32	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3eb33333
  00d3a	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e9eb852
  00d42	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e9eb852
  00d4a	48 8d 8d b4 0b
	00 00		 lea	 rcx, QWORD PTR $T42[rbp]
  00d51	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00d56	b9 10 00 00 00	 mov	 ecx, 16
  00d5b	48 6b c9 2b	 imul	 rcx, rcx, 43		; 0000002bH
  00d5f	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00d63	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00d67	48 8b f0	 mov	 rsi, rax
  00d6a	b9 10 00 00 00	 mov	 ecx, 16
  00d6f	f3 a4		 rep movsb

; 223  :     colors[ImGuiCol_TableBorderLight]       = ImVec4(0.23f, 0.23f, 0.25f, 1.00f);   // Prefer using Alpha=1.0 here

  00d71	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00d79	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00d7f	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e800000
  00d87	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e6b851f
  00d8f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e6b851f
  00d97	48 8d 8d e4 0b
	00 00		 lea	 rcx, QWORD PTR $T43[rbp]
  00d9e	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00da3	b9 10 00 00 00	 mov	 ecx, 16
  00da8	48 6b c9 2c	 imul	 rcx, rcx, 44		; 0000002cH
  00dac	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00db0	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00db4	48 8b f0	 mov	 rsi, rax
  00db7	b9 10 00 00 00	 mov	 ecx, 16
  00dbc	f3 a4		 rep movsb

; 224  :     colors[ImGuiCol_TableRowBg]             = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);

  00dbe	0f 57 c0	 xorps	 xmm0, xmm0
  00dc1	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00dc7	0f 57 db	 xorps	 xmm3, xmm3
  00dca	0f 57 d2	 xorps	 xmm2, xmm2
  00dcd	0f 57 c9	 xorps	 xmm1, xmm1
  00dd0	48 8d 8d 14 0c
	00 00		 lea	 rcx, QWORD PTR $T44[rbp]
  00dd7	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00ddc	b9 10 00 00 00	 mov	 ecx, 16
  00de1	48 6b c9 2d	 imul	 rcx, rcx, 45		; 0000002dH
  00de5	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00de9	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00ded	48 8b f0	 mov	 rsi, rax
  00df0	b9 10 00 00 00	 mov	 ecx, 16
  00df5	f3 a4		 rep movsb

; 225  :     colors[ImGuiCol_TableRowBgAlt]          = ImVec4(1.00f, 1.00f, 1.00f, 0.06f);

  00df7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d75c28f
  00dff	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00e05	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00e0d	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00e15	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00e1d	48 8d 8d 44 0c
	00 00		 lea	 rcx, QWORD PTR $T45[rbp]
  00e24	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00e29	b9 10 00 00 00	 mov	 ecx, 16
  00e2e	48 6b c9 2e	 imul	 rcx, rcx, 46		; 0000002eH
  00e32	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00e36	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00e3a	48 8b f0	 mov	 rsi, rax
  00e3d	b9 10 00 00 00	 mov	 ecx, 16
  00e42	f3 a4		 rep movsb

; 226  :     colors[ImGuiCol_TextSelectedBg]         = ImVec4(0.26f, 0.59f, 0.98f, 0.35f);

  00e44	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  00e4c	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00e52	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  00e5a	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  00e62	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  00e6a	48 8d 8d 74 0c
	00 00		 lea	 rcx, QWORD PTR $T46[rbp]
  00e71	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00e76	b9 10 00 00 00	 mov	 ecx, 16
  00e7b	48 6b c9 2f	 imul	 rcx, rcx, 47		; 0000002fH
  00e7f	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00e83	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00e87	48 8b f0	 mov	 rsi, rax
  00e8a	b9 10 00 00 00	 mov	 ecx, 16
  00e8f	f3 a4		 rep movsb

; 227  :     colors[ImGuiCol_DragDropTarget]         = ImVec4(1.00f, 1.00f, 0.00f, 0.90f);

  00e91	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00e99	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00e9f	0f 57 db	 xorps	 xmm3, xmm3
  00ea2	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00eaa	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00eb2	48 8d 8d a4 0c
	00 00		 lea	 rcx, QWORD PTR $T47[rbp]
  00eb9	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00ebe	b9 10 00 00 00	 mov	 ecx, 16
  00ec3	48 6b c9 30	 imul	 rcx, rcx, 48		; 00000030H
  00ec7	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00ecb	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00ecf	48 8b f0	 mov	 rsi, rax
  00ed2	b9 10 00 00 00	 mov	 ecx, 16
  00ed7	f3 a4		 rep movsb

; 228  :     colors[ImGuiCol_NavHighlight]           = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);

  00ed9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ee1	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00ee7	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f7ae148
  00eef	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f170a3d
  00ef7	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e851eb8
  00eff	48 8d 8d d4 0c
	00 00		 lea	 rcx, QWORD PTR $T48[rbp]
  00f06	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00f0b	b9 10 00 00 00	 mov	 ecx, 16
  00f10	48 6b c9 31	 imul	 rcx, rcx, 49		; 00000031H
  00f14	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00f18	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00f1c	48 8b f0	 mov	 rsi, rax
  00f1f	b9 10 00 00 00	 mov	 ecx, 16
  00f24	f3 a4		 rep movsb

; 229  :     colors[ImGuiCol_NavWindowingHighlight]  = ImVec4(1.00f, 1.00f, 1.00f, 0.70f);

  00f26	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00f2e	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00f34	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00f3c	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00f44	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00f4c	48 8d 8d 04 0d
	00 00		 lea	 rcx, QWORD PTR $T49[rbp]
  00f53	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00f58	b9 10 00 00 00	 mov	 ecx, 16
  00f5d	48 6b c9 32	 imul	 rcx, rcx, 50		; 00000032H
  00f61	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00f65	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00f69	48 8b f0	 mov	 rsi, rax
  00f6c	b9 10 00 00 00	 mov	 ecx, 16
  00f71	f3 a4		 rep movsb

; 230  :     colors[ImGuiCol_NavWindowingDimBg]      = ImVec4(0.80f, 0.80f, 0.80f, 0.20f);

  00f73	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00f7b	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00f81	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f4ccccd
  00f89	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f4ccccd
  00f91	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f4ccccd
  00f99	48 8d 8d 34 0d
	00 00		 lea	 rcx, QWORD PTR $T50[rbp]
  00fa0	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00fa5	b9 10 00 00 00	 mov	 ecx, 16
  00faa	48 6b c9 33	 imul	 rcx, rcx, 51		; 00000033H
  00fae	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00fb2	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00fb6	48 8b f0	 mov	 rsi, rax
  00fb9	b9 10 00 00 00	 mov	 ecx, 16
  00fbe	f3 a4		 rep movsb

; 231  :     colors[ImGuiCol_ModalWindowDimBg]       = ImVec4(0.80f, 0.80f, 0.80f, 0.35f);

  00fc0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  00fc8	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00fce	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f4ccccd
  00fd6	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f4ccccd
  00fde	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f4ccccd
  00fe6	48 8d 8d 64 0d
	00 00		 lea	 rcx, QWORD PTR $T51[rbp]
  00fed	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00ff2	b9 10 00 00 00	 mov	 ecx, 16
  00ff7	48 6b c9 34	 imul	 rcx, rcx, 52		; 00000034H
  00ffb	48 8b 55 28	 mov	 rdx, QWORD PTR colors$[rbp]
  00fff	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  01003	48 8b f0	 mov	 rsi, rax
  01006	b9 10 00 00 00	 mov	 ecx, 16
  0100b	f3 a4		 rep movsb

; 232  : }

  0100d	48 8d a5 90 0d
	00 00		 lea	 rsp, QWORD PTR [rbp+3472]
  01014	5f		 pop	 rdi
  01015	5e		 pop	 rsi
  01016	5d		 pop	 rbp
  01017	c3		 ret	 0
?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z ENDP	; ImGui::StyleColorsDark
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0ImVec4@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 80
_x$ = 88
_y$ = 96
_z$ = 104
_w$ = 112
??0ImVec4@@QEAA@MMMM@Z PROC				; ImVec4::ImVec4, COMDAT

; 270  :     constexpr ImVec4(float _x, float _y, float _z, float _w)  : x(_x), y(_y), z(_z), w(_w) { }

$LN3:
  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00012	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00017	55		 push	 rbp
  00018	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0001c	48 8b ec	 mov	 rbp, rsp
  0001f	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00023	f3 0f 10 45 58	 movss	 xmm0, DWORD PTR _x$[rbp]
  00028	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  0002c	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00030	f3 0f 10 45 60	 movss	 xmm0, DWORD PTR _y$[rbp]
  00035	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  0003a	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0003e	f3 0f 10 45 68	 movss	 xmm0, DWORD PTR _z$[rbp]
  00043	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0
  00048	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0004c	f3 0f 10 45 70	 movss	 xmm0, DWORD PTR _w$[rbp]
  00051	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0
  00056	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0005e	5d		 pop	 rbp
  0005f	c3		 ret	 0
??0ImVec4@@QEAA@MMMM@Z ENDP				; ImVec4::ImVec4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0ImVec4@@QEAA@XZ
_TEXT	SEGMENT
this$ = 80
??0ImVec4@@QEAA@XZ PROC					; ImVec4::ImVec4, COMDAT

; 269  :     constexpr ImVec4()                                        : x(0.0f), y(0.0f), z(0.0f), w(0.0f) { }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b ec	 mov	 rbp, rsp
  0000d	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00011	0f 57 c0	 xorps	 xmm0, xmm0
  00014	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  00018	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0001c	0f 57 c0	 xorps	 xmm0, xmm0
  0001f	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  00024	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00028	0f 57 c0	 xorps	 xmm0, xmm0
  0002b	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0
  00030	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00034	0f 57 c0	 xorps	 xmm0, xmm0
  00037	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0
  0003c	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00040	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
??0ImVec4@@QEAA@XZ ENDP					; ImVec4::ImVec4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0ImVec2@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 80
_x$ = 88
_y$ = 96
??0ImVec2@@QEAA@MM@Z PROC				; ImVec2::ImVec2, COMDAT

; 257  :     constexpr ImVec2(float _x, float _y)    : x(_x), y(_y) { }

$LN3:
  00000	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  00006	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  0000c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00011	55		 push	 rbp
  00012	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00016	48 8b ec	 mov	 rbp, rsp
  00019	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0001d	f3 0f 10 45 58	 movss	 xmm0, DWORD PTR _x$[rbp]
  00022	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  00026	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0002a	f3 0f 10 45 60	 movss	 xmm0, DWORD PTR _y$[rbp]
  0002f	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  00034	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00038	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
??0ImVec2@@QEAA@MM@Z ENDP				; ImVec2::ImVec2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0ImVec2@@QEAA@XZ
_TEXT	SEGMENT
this$ = 80
??0ImVec2@@QEAA@XZ PROC					; ImVec2::ImVec2, COMDAT

; 256  :     constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b ec	 mov	 rbp, rsp
  0000d	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00011	0f 57 c0	 xorps	 xmm0, xmm0
  00014	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  00018	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0001c	0f 57 c0	 xorps	 xmm0, xmm0
  0001f	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  00024	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00028	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
??0ImVec2@@QEAA@XZ ENDP					; ImVec2::ImVec2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 192
tv67 = 200
__t$ = 240
__s$ = 248
__n$ = 256
__f$ = 264
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN7:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
$LN2@vector:
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR __n$[rbp]
  00040	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv66[rbp], rax
  00047	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR __n$[rbp]
  0004e	48 ff c8	 dec	 rax
  00051	48 89 85 00 01
	00 00		 mov	 QWORD PTR __n$[rbp], rax
  00058	48 83 bd c0 00
	00 00 00	 cmp	 QWORD PTR tv66[rbp], 0
  00060	76 0c		 jbe	 SHORT $LN5@vector
  00062	c7 85 c8 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv67[rbp], 1
  0006c	eb 0a		 jmp	 SHORT $LN6@vector
$LN5@vector:
  0006e	c7 85 c8 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv67[rbp], 0
$LN6@vector:
  00078	83 bd c8 00 00
	00 00		 cmp	 DWORD PTR tv67[rbp], 0
  0007f	74 2a		 je	 SHORT $LN3@vector
  00081	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR __t$[rbp]
  00088	ff 95 08 01 00
	00		 call	 QWORD PTR __f$[rbp]
  0008e	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR __s$[rbp]
  00095	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR __t$[rbp]
  0009c	48 03 c8	 add	 rcx, rax
  0009f	48 8b c1	 mov	 rax, rcx
  000a2	48 89 85 f0 00
	00 00		 mov	 QWORD PTR __t$[rbp], rax
  000a9	eb 8e		 jmp	 SHORT $LN2@vector
$LN3@vector:
  000ab	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000b2	5f		 pop	 rdi
  000b3	5d		 pop	 rbp
  000b4	c3		 ret	 0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
