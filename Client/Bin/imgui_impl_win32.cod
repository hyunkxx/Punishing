; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24245.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_BSS	SEGMENT
?RtlVerifyVersionInfoFn@?1??_IsWindowsVersionOrGreater@@YAHGGG@Z@4P6AJPEAU_OSVERSIONINFOEXW@@K_K@ZEA DQ 01H DUP (?) ; `_IsWindowsVersionOrGreater'::`2'::RtlVerifyVersionInfoFn
?GetDpiForMonitorFn@?4??ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z@4P6AJPEAUHMONITOR__@@W4MONITOR_DPI_TYPE@@PEAI3@ZEA DQ 01H DUP (?) ; `ImGui_ImplWin32_GetDpiScaleForMonitor'::`5'::GetDpiForMonitorFn
_BSS	ENDS
PUBLIC	??0ImVec2@@QEAA@MM@Z				; ImVec2::ImVec2
PUBLIC	??2@YAPEAX_KUImNewWrapper@@PEAX@Z		; operator new
PUBLIC	??3@YAXPEAXUImNewWrapper@@0@Z			; operator delete
PUBLIC	?ImGui_ImplWin32_Init@@YA_NPEAX@Z		; ImGui_ImplWin32_Init
PUBLIC	?ImGui_ImplWin32_Shutdown@@YAXXZ		; ImGui_ImplWin32_Shutdown
PUBLIC	?ImGui_ImplWin32_NewFrame@@YAXXZ		; ImGui_ImplWin32_NewFrame
PUBLIC	?ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ	; ImGui_ImplWin32_EnableDpiAwareness
PUBLIC	?ImGui_ImplWin32_GetDpiScaleForHwnd@@YAMPEAX@Z	; ImGui_ImplWin32_GetDpiScaleForHwnd
PUBLIC	?ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z ; ImGui_ImplWin32_GetDpiScaleForMonitor
PUBLIC	?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z ; ImGui_ImplWin32_EnableAlphaCompositing
PUBLIC	??0ImGui_ImplWin32_Data@@QEAA@XZ		; ImGui_ImplWin32_Data::ImGui_ImplWin32_Data
PUBLIC	??$IM_DELETE@UImGui_ImplWin32_Data@@@@YAXPEAUImGui_ImplWin32_Data@@@Z ; IM_DELETE<ImGui_ImplWin32_Data>
PUBLIC	?ImGui_ImplWin32_WndProcHandler@@YA_JPEAUHWND__@@I_K_J@Z ; ImGui_ImplWin32_WndProcHandler
PUBLIC	?__LINE__Var@?0??ImGui_ImplWin32_Init@@YA_NPEAX@Z@4JA ; `ImGui_ImplWin32_Init'::`1'::__LINE__Var
PUBLIC	??_C@_0CI@MLMDDGPF@Already?5initialized?5a?5platform?5b@ ; `string'
PUBLIC	??_C@_1GI@EPODBAAL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@ ; `string'
PUBLIC	??_C@_1KG@NFMLHFPC@?$AAi?$AAo?$AA?4?$AAB?$AAa?$AAc?$AAk?$AAe?$AAn?$AAd?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAU?$AAs?$AAe?$AAr?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAu@ ; `string'
PUBLIC	??_C@_0BB@FLGJPPJK@imgui_impl_win32?$AA@	; `string'
PUBLIC	??_C@_0O@LNFLKCMF@xinput1_4?4dll?$AA@		; `string'
PUBLIC	??_C@_0O@KAFOJCHN@xinput1_3?4dll?$AA@		; `string'
PUBLIC	??_C@_0BA@GHGALGFD@xinput9_1_0?4dll?$AA@	; `string'
PUBLIC	??_C@_0O@GLACEBNI@xinput1_2?4dll?$AA@		; `string'
PUBLIC	??_C@_0O@ONJGDDHG@xinput1_1?4dll?$AA@		; `string'
PUBLIC	??_C@_0BG@ELBNFOBA@XInputGetCapabilities?$AA@	; `string'
PUBLIC	??_C@_0P@FCCEJHCC@XInputGetState?$AA@		; `string'
PUBLIC	?__LINE__Var@?0??ImGui_ImplWin32_Shutdown@@YAXXZ@4JA ; `ImGui_ImplWin32_Shutdown'::`1'::__LINE__Var
PUBLIC	??_C@_0DG@FOHIIHPF@No?5platform?5backend?5to?5shutdown?0@ ; `string'
PUBLIC	??_C@_1JC@EOLFHJCH@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAN?$AAo?$AA?5?$AAp?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AA?5?$AAb?$AAa@ ; `string'
PUBLIC	?__LINE__Var@?0??ImGui_ImplWin32_UpdateMouseData@@YAXXZ@4JA ; `ImGui_ImplWin32_UpdateMouseData'::`1'::__LINE__Var
PUBLIC	??_C@_1BM@HCBBDJLO@?$AAb?$AAd?$AA?9?$AA?$DO?$AAh?$AAW?$AAn?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??ImGui_ImplWin32_NewFrame@@YAXXZ@4JA ; `ImGui_ImplWin32_NewFrame'::`1'::__LINE__Var
PUBLIC	??_C@_0CF@IHMCJOCG@Did?5you?5call?5ImGui_ImplWin32_Ini@ ; `string'
PUBLIC	??_C@_1HA@CCCPNAKC@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAD?$AAi?$AAd?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAI@ ; `string'
PUBLIC	??_C@_09FLKFJBLM@ntdll?4dll?$AA@		; `string'
PUBLIC	??_C@_0BF@LOGLPPDD@RtlVerifyVersionInfo?$AA@	; `string'
PUBLIC	??_C@_0L@GMPLCCII@user32?4dll?$AA@		; `string'
PUBLIC	??_C@_0BN@LDKNMGEI@SetThreadDpiAwarenessContext?$AA@ ; `string'
PUBLIC	??_C@_0L@DMFDIJCG@shcore?4dll?$AA@		; `string'
PUBLIC	??_C@_0BH@DGFLCCMF@SetProcessDpiAwareness?$AA@	; `string'
PUBLIC	?__LINE__Var@?0??ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z@4JA ; `ImGui_ImplWin32_GetDpiScaleForMonitor'::`1'::__LINE__Var
PUBLIC	??_C@_0BB@MAMHPNNC@GetDpiForMonitor?$AA@	; `string'
PUBLIC	??_C@_1BK@NLANHJGB@?$AAx?$AAd?$AAp?$AAi?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy?$AAd?$AAp?$AAi?$AA?$AA@ ; `string'
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f800000
PUBLIC	__real@42c00000
PUBLIC	__real@42f00000
PUBLIC	__real@43610000
PUBLIC	__real@46c2ac00
PUBLIC	__real@c6c2ae00
PUBLIC	__real@ff7fffff
EXTRN	_Init_thread_header:PROC
EXTRN	_Init_thread_footer:PROC
EXTRN	memset:PROC
EXTRN	__imp__wassert:PROC
EXTRN	?GetCurrentContext@ImGui@@YAPEAUImGuiContext@@XZ:PROC ; ImGui::GetCurrentContext
EXTRN	?GetIO@ImGui@@YAAEAUImGuiIO@@XZ:PROC		; ImGui::GetIO
EXTRN	?GetMainViewport@ImGui@@YAPEAUImGuiViewport@@XZ:PROC ; ImGui::GetMainViewport
EXTRN	?IsKeyDown@ImGui@@YA_NW4ImGuiKey@@@Z:PROC	; ImGui::IsKeyDown
EXTRN	?GetMouseCursor@ImGui@@YAHXZ:PROC		; ImGui::GetMouseCursor
EXTRN	?MemAlloc@ImGui@@YAPEAX_K@Z:PROC		; ImGui::MemAlloc
EXTRN	?MemFree@ImGui@@YAXPEAX@Z:PROC			; ImGui::MemFree
EXTRN	?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z:PROC ; ImGuiIO::AddKeyEvent
EXTRN	?AddKeyAnalogEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_NM@Z:PROC ; ImGuiIO::AddKeyAnalogEvent
EXTRN	?AddMousePosEvent@ImGuiIO@@QEAAXMM@Z:PROC	; ImGuiIO::AddMousePosEvent
EXTRN	?AddMouseButtonEvent@ImGuiIO@@QEAAXH_N@Z:PROC	; ImGuiIO::AddMouseButtonEvent
EXTRN	?AddMouseWheelEvent@ImGuiIO@@QEAAXMM@Z:PROC	; ImGuiIO::AddMouseWheelEvent
EXTRN	?AddFocusEvent@ImGuiIO@@QEAAX_N@Z:PROC		; ImGuiIO::AddFocusEvent
EXTRN	?AddInputCharacter@ImGuiIO@@QEAAXI@Z:PROC	; ImGuiIO::AddInputCharacter
EXTRN	?AddInputCharacterUTF16@ImGuiIO@@QEAAXG@Z:PROC	; ImGuiIO::AddInputCharacterUTF16
EXTRN	?SetKeyEventNativeData@ImGuiIO@@QEAAXW4ImGuiKey@@HHH@Z:PROC ; ImGuiIO::SetKeyEventNativeData
EXTRN	__imp_VerSetConditionMask:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_FreeLibrary:PROC
EXTRN	__imp_GetModuleHandleA:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_LoadLibraryA:PROC
EXTRN	__imp_CreateRectRgn:PROC
EXTRN	__imp_DeleteObject:PROC
EXTRN	__imp_GetDeviceCaps:PROC
EXTRN	__imp_TrackMouseEvent:PROC
EXTRN	__imp_GetKeyState:PROC
EXTRN	__imp_GetCapture:PROC
EXTRN	__imp_SetCapture:PROC
EXTRN	__imp_ReleaseCapture:PROC
EXTRN	__imp_IsWindowUnicode:PROC
EXTRN	__imp_GetForegroundWindow:PROC
EXTRN	__imp_GetDC:PROC
EXTRN	__imp_ReleaseDC:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__imp_SetCursorPos:PROC
EXTRN	__imp_SetCursor:PROC
EXTRN	__imp_GetCursorPos:PROC
EXTRN	__imp_ClientToScreen:PROC
EXTRN	__imp_ScreenToClient:PROC
EXTRN	__imp_LoadCursorW:PROC
EXTRN	__imp_MonitorFromWindow:PROC
EXTRN	__imp_SetProcessDPIAware:PROC
EXTRN	__imp_MultiByteToWideChar:PROC
EXTRN	__imp_DwmEnableBlurBehindWindow:PROC
EXTRN	__imp_DwmGetColorizationColor:PROC
EXTRN	__imp_DwmIsCompositionEnabled:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	_Init_thread_epoch:DWORD
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
EXTRN	_tls_index:DWORD
_BSS	SEGMENT
?user32_dll@?4??ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ@4PEAUHINSTANCE__@@EA DQ 01H DUP (?) ; `ImGui_ImplWin32_EnableDpiAwareness'::`5'::user32_dll
?$TSS0@?4??ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ@4HA DD 01H DUP (?) ; `ImGui_ImplWin32_EnableDpiAwareness'::`5'::$TSS0
	ALIGN	8

?shcore_dll@?L@??ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ@4PEAUHINSTANCE__@@EA DQ 01H DUP (?) ; `ImGui_ImplWin32_EnableDpiAwareness'::`11'::shcore_dll
?$TSS1@?L@??ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ@4HA DD 01H DUP (?) ; `ImGui_ImplWin32_EnableDpiAwareness'::`11'::$TSS1
	ALIGN	8

?shcore_dll@?4??ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z@4PEAUHINSTANCE__@@EA DQ 01H DUP (?) ; `ImGui_ImplWin32_GetDpiScaleForMonitor'::`5'::shcore_dll
?$TSS0@?4??ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z@4HA DD 01H DUP (?) ; `ImGui_ImplWin32_GetDpiScaleForMonitor'::`5'::$TSS0
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec2@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0ImVec2@@QEAA@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KUImNewWrapper@@PEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??2@YAPEAX_KUImNewWrapper@@PEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??3@YAXPEAXUImNewWrapper@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??3@YAXPEAXUImNewWrapper@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplWin32_Init@@YA_NPEAX@Z DD imagerel $LN14
	DD	imagerel $LN14+723
	DD	imagerel $unwind$?ImGui_ImplWin32_Init@@YA_NPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ImGui_ImplWin32_Init@@YA_NPEAX@Z@4HA DD imagerel ?dtor$0@?0??ImGui_ImplWin32_Init@@YA_NPEAX@Z@4HA
	DD	imagerel ?dtor$0@?0??ImGui_ImplWin32_Init@@YA_NPEAX@Z@4HA+56
	DD	imagerel $unwind$?dtor$0@?0??ImGui_ImplWin32_Init@@YA_NPEAX@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplWin32_Shutdown@@YAXXZ DD imagerel $LN6
	DD	imagerel $LN6+175
	DD	imagerel $unwind$?ImGui_ImplWin32_Shutdown@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplWin32_NewFrame@@YAXXZ DD imagerel $LN8
	DD	imagerel $LN8+429
	DD	imagerel $unwind$?ImGui_ImplWin32_NewFrame@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ DD imagerel $LN9
	DD	imagerel $LN9+359
	DD	imagerel $unwind$?ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplWin32_GetDpiScaleForHwnd@@YAMPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?ImGui_ImplWin32_GetDpiScaleForHwnd@@YAMPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z DD imagerel $LN9
	DD	imagerel $LN9+498
	DD	imagerel $unwind$?ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z DD imagerel $LN9
	DD	imagerel $LN9+349
	DD	imagerel $unwind$?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGui_ImplWin32_Data@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$??0ImGui_ImplWin32_Data@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplWin32_GetBackendData@@YAPEAUImGui_ImplWin32_Data@@XZ DD imagerel ?ImGui_ImplWin32_GetBackendData@@YAPEAUImGui_ImplWin32_Data@@XZ
	DD	imagerel ?ImGui_ImplWin32_GetBackendData@@YAPEAUImGui_ImplWin32_Data@@XZ+89
	DD	imagerel $unwind$?ImGui_ImplWin32_GetBackendData@@YAPEAUImGui_ImplWin32_Data@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$IM_DELETE@UImGui_ImplWin32_Data@@@@YAXPEAUImGui_ImplWin32_Data@@@Z DD imagerel $LN4
	DD	imagerel $LN4+74
	DD	imagerel $unwind$??$IM_DELETE@UImGui_ImplWin32_Data@@@@YAXPEAUImGui_ImplWin32_Data@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplWin32_UpdateMouseCursor@@YA_NXZ DD imagerel ?ImGui_ImplWin32_UpdateMouseCursor@@YA_NXZ
	DD	imagerel ?ImGui_ImplWin32_UpdateMouseCursor@@YA_NXZ+308
	DD	imagerel $unwind$?ImGui_ImplWin32_UpdateMouseCursor@@YA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IsVkDown@@YA_NH@Z DD imagerel ?IsVkDown@@YA_NH@Z
	DD	imagerel ?IsVkDown@@YA_NH@Z+101
	DD	imagerel $unwind$?IsVkDown@@YA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplWin32_AddKeyEvent@@YAXW4ImGuiKey@@_NHH@Z DD imagerel ?ImGui_ImplWin32_AddKeyEvent@@YAXW4ImGuiKey@@_NHH@Z
	DD	imagerel ?ImGui_ImplWin32_AddKeyEvent@@YAXW4ImGuiKey@@_NHH@Z+133
	DD	imagerel $unwind$?ImGui_ImplWin32_AddKeyEvent@@YAXW4ImGuiKey@@_NHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplWin32_ProcessKeyEventsWorkarounds@@YAXXZ DD imagerel ?ImGui_ImplWin32_ProcessKeyEventsWorkarounds@@YAXXZ
	DD	imagerel ?ImGui_ImplWin32_ProcessKeyEventsWorkarounds@@YAXXZ+272
	DD	imagerel $unwind$?ImGui_ImplWin32_ProcessKeyEventsWorkarounds@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplWin32_UpdateKeyModifiers@@YAXXZ DD imagerel ?ImGui_ImplWin32_UpdateKeyModifiers@@YAXXZ
	DD	imagerel ?ImGui_ImplWin32_UpdateKeyModifiers@@YAXXZ+161
	DD	imagerel $unwind$?ImGui_ImplWin32_UpdateKeyModifiers@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplWin32_UpdateMouseData@@YAXXZ DD imagerel ?ImGui_ImplWin32_UpdateMouseData@@YAXXZ
	DD	imagerel ?ImGui_ImplWin32_UpdateMouseData@@YAXXZ+377
	DD	imagerel $unwind$?ImGui_ImplWin32_UpdateMouseData@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplWin32_UpdateGamepads@@YAXXZ DD imagerel ?ImGui_ImplWin32_UpdateGamepads@@YAXXZ
	DD	imagerel ?ImGui_ImplWin32_UpdateGamepads@@YAXXZ+3015
	DD	imagerel $unwind$?ImGui_ImplWin32_UpdateGamepads@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplWin32_VirtualKeyToImGuiKey@@YA?AW4ImGuiKey@@_K@Z DD imagerel ?ImGui_ImplWin32_VirtualKeyToImGuiKey@@YA?AW4ImGuiKey@@_K@Z
	DD	imagerel ?ImGui_ImplWin32_VirtualKeyToImGuiKey@@YA?AW4ImGuiKey@@_K@Z+1806
	DD	imagerel $unwind$?ImGui_ImplWin32_VirtualKeyToImGuiKey@@YA?AW4ImGuiKey@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplWin32_WndProcHandler@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel $LN65
	DD	imagerel $LN65+2475
	DD	imagerel $unwind$?ImGui_ImplWin32_WndProcHandler@@YA_JPEAUHWND__@@I_K_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_IsWindowsVersionOrGreater@@YAHGGG@Z DD imagerel ?_IsWindowsVersionOrGreater@@YAHGGG@Z
	DD	imagerel ?_IsWindowsVersionOrGreater@@YAHGGG@Z+356
	DD	imagerel $unwind$?_IsWindowsVersionOrGreater@@YAHGGG@Z
pdata	ENDS
;	COMDAT __real@ff7fffff
CONST	SEGMENT
__real@ff7fffff DD 0ff7fffffr			; -3.40282e+38
CONST	ENDS
;	COMDAT __real@c6c2ae00
CONST	SEGMENT
__real@c6c2ae00 DD 0c6c2ae00r			; -24919
CONST	ENDS
;	COMDAT __real@46c2ac00
CONST	SEGMENT
__real@46c2ac00 DD 046c2ac00r			; 24918
CONST	ENDS
;	COMDAT __real@43610000
CONST	SEGMENT
__real@43610000 DD 043610000r			; 225
CONST	ENDS
;	COMDAT __real@42f00000
CONST	SEGMENT
__real@42f00000 DD 042f00000r			; 120
CONST	ENDS
;	COMDAT __real@42c00000
CONST	SEGMENT
__real@42c00000 DD 042c00000r			; 96
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1BK@NLANHJGB@?$AAx?$AAd?$AAp?$AAi?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy?$AAd?$AAp?$AAi?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@NLANHJGB@?$AAx?$AAd?$AAp?$AAi?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy?$AAd?$AAp?$AAi?$AA?$AA@ DB 'x'
	DB	00H, 'd', 00H, 'p', 00H, 'i', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 'y', 00H, 'd', 00H, 'p', 00H, 'i', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MAMHPNNC@GetDpiForMonitor?$AA@
CONST	SEGMENT
??_C@_0BB@MAMHPNNC@GetDpiForMonitor?$AA@ DB 'GetDpiForMonitor', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z@4JA DD 02deH ; `ImGui_ImplWin32_GetDpiScaleForMonitor'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BH@DGFLCCMF@SetProcessDpiAwareness?$AA@
CONST	SEGMENT
??_C@_0BH@DGFLCCMF@SetProcessDpiAwareness?$AA@ DB 'SetProcessDpiAwareness'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DMFDIJCG@shcore?4dll?$AA@
CONST	SEGMENT
??_C@_0L@DMFDIJCG@shcore?4dll?$AA@ DB 'shcore.dll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LDKNMGEI@SetThreadDpiAwarenessContext?$AA@
CONST	SEGMENT
??_C@_0BN@LDKNMGEI@SetThreadDpiAwarenessContext?$AA@ DB 'SetThreadDpiAwar'
	DB	'enessContext', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GMPLCCII@user32?4dll?$AA@
CONST	SEGMENT
??_C@_0L@GMPLCCII@user32?4dll?$AA@ DB 'user32.dll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LOGLPPDD@RtlVerifyVersionInfo?$AA@
CONST	SEGMENT
??_C@_0BF@LOGLPPDD@RtlVerifyVersionInfo?$AA@ DB 'RtlVerifyVersionInfo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FLKFJBLM@ntdll?4dll?$AA@
CONST	SEGMENT
??_C@_09FLKFJBLM@ntdll?4dll?$AA@ DB 'ntdll.dll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@CCCPNAKC@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAD?$AAi?$AAd?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAI@
CONST	SEGMENT
??_C@_1HA@CCCPNAKC@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAD?$AAi?$AAd?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAI@ DB 'b'
	DB	00H, 'd', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'n', 00H
	DB	'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't', 00H, 'r', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'D', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'c'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'I', 00H, 'm', 00H
	DB	'G', 00H, 'u', 00H, 'i', 00H, '_', 00H, 'I', 00H, 'm', 00H, 'p'
	DB	00H, 'l', 00H, 'W', 00H, 'i', 00H, 'n', 00H, '3', 00H, '2', 00H
	DB	'_', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, '(', 00H, ')'
	DB	00H, '?', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IHMCJOCG@Did?5you?5call?5ImGui_ImplWin32_Ini@
CONST	SEGMENT
??_C@_0CF@IHMCJOCG@Did?5you?5call?5ImGui_ImplWin32_Ini@ DB 'Did you call '
	DB	'ImGui_ImplWin32_Init()?', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImGui_ImplWin32_NewFrame@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImGui_ImplWin32_NewFrame@@YAXXZ@4JA DD 014fH ; `ImGui_ImplWin32_NewFrame'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BM@HCBBDJLO@?$AAb?$AAd?$AA?9?$AA?$DO?$AAh?$AAW?$AAn?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@HCBBDJLO@?$AAb?$AAd?$AA?9?$AA?$DO?$AAh?$AAW?$AAn?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'b'
	DB	00H, 'd', 00H, '-', 00H, '>', 00H, 'h', 00H, 'W', 00H, 'n', 00H
	DB	'd', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImGui_ImplWin32_UpdateMouseData@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImGui_ImplWin32_UpdateMouseData@@YAXXZ@4JA DD 0fbH ; `ImGui_ImplWin32_UpdateMouseData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1JC@EOLFHJCH@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAN?$AAo?$AA?5?$AAp?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AA?5?$AAb?$AAa@
CONST	SEGMENT
??_C@_1JC@EOLFHJCH@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAN?$AAo?$AA?5?$AAp?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AA?5?$AAb?$AAa@ DB 'b'
	DB	00H, 'd', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'n', 00H
	DB	'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't', 00H, 'r', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'N', 00H, 'o', 00H
	DB	' ', 00H, 'p', 00H, 'l', 00H, 'a', 00H, 't', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, 'm', 00H, ' ', 00H, 'b', 00H, 'a', 00H, 'c', 00H
	DB	'k', 00H, 'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 't', 00H, 'o'
	DB	00H, ' ', 00H, 's', 00H, 'h', 00H, 'u', 00H, 't', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, 'n', 00H, ',', 00H, ' ', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, 'a', 00H, 'l', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	'd', 00H, 'y', 00H, ' ', 00H, 's', 00H, 'h', 00H, 'u', 00H, 't'
	DB	00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, '?', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@FOHIIHPF@No?5platform?5backend?5to?5shutdown?0@
CONST	SEGMENT
??_C@_0DG@FOHIIHPF@No?5platform?5backend?5to?5shutdown?0@ DB 'No platform'
	DB	' backend to shutdown, or already shutdown?', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImGui_ImplWin32_Shutdown@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImGui_ImplWin32_Shutdown@@YAXXZ@4JA DD 0a4H ; `ImGui_ImplWin32_Shutdown'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0P@FCCEJHCC@XInputGetState?$AA@
CONST	SEGMENT
??_C@_0P@FCCEJHCC@XInputGetState?$AA@ DB 'XInputGetState', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ELBNFOBA@XInputGetCapabilities?$AA@
CONST	SEGMENT
??_C@_0BG@ELBNFOBA@XInputGetCapabilities?$AA@ DB 'XInputGetCapabilities', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ONJGDDHG@xinput1_1?4dll?$AA@
CONST	SEGMENT
??_C@_0O@ONJGDDHG@xinput1_1?4dll?$AA@ DB 'xinput1_1.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GLACEBNI@xinput1_2?4dll?$AA@
CONST	SEGMENT
??_C@_0O@GLACEBNI@xinput1_2?4dll?$AA@ DB 'xinput1_2.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GHGALGFD@xinput9_1_0?4dll?$AA@
CONST	SEGMENT
??_C@_0BA@GHGALGFD@xinput9_1_0?4dll?$AA@ DB 'xinput9_1_0.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KAFOJCHN@xinput1_3?4dll?$AA@
CONST	SEGMENT
??_C@_0O@KAFOJCHN@xinput1_3?4dll?$AA@ DB 'xinput1_3.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LNFLKCMF@xinput1_4?4dll?$AA@
CONST	SEGMENT
??_C@_0O@LNFLKCMF@xinput1_4?4dll?$AA@ DB 'xinput1_4.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FLGJPPJK@imgui_impl_win32?$AA@
CONST	SEGMENT
??_C@_0BB@FLGJPPJK@imgui_impl_win32?$AA@ DB 'imgui_impl_win32', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1KG@NFMLHFPC@?$AAi?$AAo?$AA?4?$AAB?$AAa?$AAc?$AAk?$AAe?$AAn?$AAd?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAU?$AAs?$AAe?$AAr?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAu@
CONST	SEGMENT
??_C@_1KG@NFMLHFPC@?$AAi?$AAo?$AA?4?$AAB?$AAa?$AAc?$AAk?$AAe?$AAn?$AAd?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAU?$AAs?$AAe?$AAr?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAu@ DB 'i'
	DB	00H, 'o', 00H, '.', 00H, 'B', 00H, 'a', 00H, 'c', 00H, 'k', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, 'P', 00H, 'l', 00H, 'a', 00H, 't'
	DB	00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'U', 00H, 's', 00H
	DB	'e', 00H, 'r', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H
	DB	'l', 00H, 'p', 00H, 't', 00H, 'r', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '"', 00H, 'A', 00H, 'l', 00H, 'r', 00H, 'e', 00H
	DB	'a', 00H, 'd', 00H, 'y', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'p', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H
	DB	' ', 00H, 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 'n'
	DB	00H, 'd', 00H, '!', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@EPODBAAL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
CONST	SEGMENT
??_C@_1GI@EPODBAAL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'f', 00H, 'r', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, 'w', 00H, 'o', 00H, 'r', 00H, 'k', 00H, '\', 00H
	DB	't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm', 00H
	DB	'g', 00H, 'u', 00H, 'i', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'p'
	DB	00H, 'l', 00H, '_', 00H, 'w', 00H, 'i', 00H, 'n', 00H, '3', 00H
	DB	'2', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@MLMDDGPF@Already?5initialized?5a?5platform?5b@
CONST	SEGMENT
??_C@_0CI@MLMDDGPF@Already?5initialized?5a?5platform?5b@ DB 'Already init'
	DB	'ialized a platform backend!', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImGui_ImplWin32_Init@@YA_NPEAX@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImGui_ImplWin32_Init@@YA_NPEAX@Z@4JA DD 072H ; `ImGui_ImplWin32_Init'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_IsWindowsVersionOrGreater@@YAHGGG@Z DD 025054619H
	DD	0119231eH
	DD	07012004dH
	DD	05011H
	DD	imagerel __GSHandlerCheck
	DD	0258H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_IsWindowsVersionOrGreater@@YAHGGG@Z$rtcName$0 DB 076H	; _IsWindowsVersionOrGreater
	DB	065H
	DB	072H
	DB	073H
	DB	069H
	DB	06fH
	DB	06eH
	DB	049H
	DB	06eH
	DB	066H
	DB	06fH
	DB	00H
	ORG $+4
?_IsWindowsVersionOrGreater@@YAHGGG@Z$rtcVarDesc DD 050H ; _IsWindowsVersionOrGreater
	DD	011cH
	DQ	FLAT:?_IsWindowsVersionOrGreater@@YAHGGG@Z$rtcName$0
	ORG $+48
?_IsWindowsVersionOrGreater@@YAHGGG@Z$rtcFrameData DD 01H ; _IsWindowsVersionOrGreater
	DD	00H
	DQ	FLAT:?_IsWindowsVersionOrGreater@@YAHGGG@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplWin32_WndProcHandler@@YA_JPEAUHWND__@@I_K_J@Z DD 035054919H
	DD	011c3321H
	DD	070150049H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0238H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImGui_ImplWin32_WndProcHandler@@YA_JPEAUHWND__@@I_K_J@Z$rtcName$0 DB 074H ; ImGui_ImplWin32_WndProcHandler
	DB	06dH
	DB	065H
	DB	00H
?ImGui_ImplWin32_WndProcHandler@@YA_JPEAUHWND__@@I_K_J@Z$rtcName$1 DB 077H ; ImGui_ImplWin32_WndProcHandler
	DB	063H
	DB	068H
	DB	00H
	ORG $+8
?ImGui_ImplWin32_WndProcHandler@@YA_JPEAUHWND__@@I_K_J@Z$rtcVarDesc DD 0164H ; ImGui_ImplWin32_WndProcHandler
	DD	02H
	DQ	FLAT:?ImGui_ImplWin32_WndProcHandler@@YA_JPEAUHWND__@@I_K_J@Z$rtcName$1
	DD	078H
	DD	018H
	DQ	FLAT:?ImGui_ImplWin32_WndProcHandler@@YA_JPEAUHWND__@@I_K_J@Z$rtcName$0
	ORG $+96
?ImGui_ImplWin32_WndProcHandler@@YA_JPEAUHWND__@@I_K_J@Z$rtcFrameData DD 02H ; ImGui_ImplWin32_WndProcHandler
	DD	00H
	DQ	FLAT:?ImGui_ImplWin32_WndProcHandler@@YA_JPEAUHWND__@@I_K_J@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplWin32_VirtualKeyToImGuiKey@@YA?AW4ImGuiKey@@_K@Z DD 05052801H
	DD	010e0311H
	DD	07007001bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplWin32_UpdateGamepads@@YAXXZ DD 025052f19H
	DD	010a230fH
	DD	07003005fH
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	02e0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImGui_ImplWin32_UpdateGamepads@@YAXXZ$rtcName$0 DB 063H ; ImGui_ImplWin32_UpdateGamepads
	DB	061H
	DB	070H
	DB	073H
	DB	00H
	ORG $+3
?ImGui_ImplWin32_UpdateGamepads@@YAXXZ$rtcName$1 DB 078H ; ImGui_ImplWin32_UpdateGamepads
	DB	069H
	DB	06eH
	DB	070H
	DB	075H
	DB	074H
	DB	05fH
	DB	073H
	DB	074H
	DB	061H
	DB	074H
	DB	065H
	DB	00H
	ORG $+11
?ImGui_ImplWin32_UpdateGamepads@@YAXXZ$rtcVarDesc DD 098H ; ImGui_ImplWin32_UpdateGamepads
	DD	010H
	DQ	FLAT:?ImGui_ImplWin32_UpdateGamepads@@YAXXZ$rtcName$1
	DD	068H
	DD	014H
	DQ	FLAT:?ImGui_ImplWin32_UpdateGamepads@@YAXXZ$rtcName$0
	ORG $+96
?ImGui_ImplWin32_UpdateGamepads@@YAXXZ$rtcFrameData DD 02H ; ImGui_ImplWin32_UpdateGamepads
	DD	00H
	DQ	FLAT:?ImGui_ImplWin32_UpdateGamepads@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplWin32_UpdateMouseData@@YAXXZ DD 025052f19H
	DD	010a230fH
	DD	070030031H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImGui_ImplWin32_UpdateMouseData@@YAXXZ$rtcName$0 DB 070H ; ImGui_ImplWin32_UpdateMouseData
	DB	06fH
	DB	073H
	DB	00H
?ImGui_ImplWin32_UpdateMouseData@@YAXXZ$rtcName$1 DB 070H ; ImGui_ImplWin32_UpdateMouseData
	DB	06fH
	DB	073H
	DB	00H
	ORG $+8
?ImGui_ImplWin32_UpdateMouseData@@YAXXZ$rtcVarDesc DD 0a8H ; ImGui_ImplWin32_UpdateMouseData
	DD	08H
	DQ	FLAT:?ImGui_ImplWin32_UpdateMouseData@@YAXXZ$rtcName$1
	DD	088H
	DD	08H
	DQ	FLAT:?ImGui_ImplWin32_UpdateMouseData@@YAXXZ$rtcName$0
	ORG $+96
?ImGui_ImplWin32_UpdateMouseData@@YAXXZ$rtcFrameData DD 02H ; ImGui_ImplWin32_UpdateMouseData
	DD	00H
	DQ	FLAT:?ImGui_ImplWin32_UpdateMouseData@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplWin32_UpdateKeyModifiers@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	070030021H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplWin32_ProcessKeyEventsWorkarounds@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplWin32_AddKeyEvent@@YAXW4ImGuiKey@@_NHH@Z DD 035053601H
	DD	011b3320H
	DD	070140023H
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IsVkDown@@YA_NH@Z DD 025052801H
	DD	010d2312H
	DD	07006001fH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplWin32_UpdateMouseCursor@@YA_NXZ DD 025051e01H
	DD	010a230fH
	DD	070030029H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$IM_DELETE@UImGui_ImplWin32_Data@@@@YAXPEAUImGui_ImplWin32_Data@@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplWin32_GetBackendData@@YAPEAUImGui_ImplWin32_Data@@XZ DD 025051e01H
	DD	010a230fH
	DD	07003001fH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGui_ImplWin32_Data@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z DD 025053b19H
	DD	010e2313H
	DD	070070039H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	01b8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z$rtcName$0 DB 063H ; ImGui_ImplWin32_EnableAlphaCompositing
	DB	06fH
	DB	06dH
	DB	070H
	DB	06fH
	DB	073H
	DB	069H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z$rtcName$1 DB 06fH ; ImGui_ImplWin32_EnableAlphaCompositing
	DB	070H
	DB	061H
	DB	071H
	DB	075H
	DB	065H
	DB	00H
	ORG $+1
?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z$rtcName$2 DB 063H ; ImGui_ImplWin32_EnableAlphaCompositing
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	00H
	ORG $+2
?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z$rtcName$3 DB 062H ; ImGui_ImplWin32_EnableAlphaCompositing
	DB	062H
	DB	00H
	ORG $+1
?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z$rtcName$4 DB 062H ; ImGui_ImplWin32_EnableAlphaCompositing
	DB	062H
	DB	00H
	ORG $+5
?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z$rtcFrameData DD 05H ; ImGui_ImplWin32_EnableAlphaCompositing
	DD	00H
	DQ	FLAT:?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z$rtcVarDesc
	ORG $+8
?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z$rtcVarDesc DD 0d8H ; ImGui_ImplWin32_EnableAlphaCompositing
	DD	014H
	DQ	FLAT:?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z$rtcName$4
	DD	0a8H
	DD	014H
	DQ	FLAT:?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z$rtcName$3
	DD	064H
	DD	04H
	DQ	FLAT:?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z$rtcName$2
	DD	044H
	DD	04H
	DQ	FLAT:?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z DD 035053b19H
	DD	010e3313H
	DD	07007002bH
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0148H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z$rtcName$0 DB 078H ; ImGui_ImplWin32_GetDpiScaleForMonitor
	DB	064H
	DB	070H
	DB	069H
	DB	00H
	ORG $+3
?ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z$rtcName$1 DB 079H ; ImGui_ImplWin32_GetDpiScaleForMonitor
	DB	064H
	DB	070H
	DB	069H
	DB	00H
	ORG $+3
?ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z$rtcVarDesc DD 054H ; ImGui_ImplWin32_GetDpiScaleForMonitor
	DD	04H
	DQ	FLAT:?ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z$rtcName$0
	ORG $+96
?ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z$rtcFrameData DD 02H ; ImGui_ImplWin32_GetDpiScaleForMonitor
	DD	00H
	DQ	FLAT:?ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplWin32_GetDpiScaleForHwnd@@YAMPEAX@Z DD 035052a01H
	DD	010e3313H
	DD	070070023H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	070030025H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplWin32_NewFrame@@YAXXZ DD 025052f19H
	DD	010a230fH
	DD	070030037H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	01a8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImGui_ImplWin32_NewFrame@@YAXXZ$rtcName$0 DB 072H	; ImGui_ImplWin32_NewFrame
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+3
?ImGui_ImplWin32_NewFrame@@YAXXZ$rtcName$1 DB 063H	; ImGui_ImplWin32_NewFrame
	DB	075H
	DB	072H
	DB	072H
	DB	065H
	DB	06eH
	DB	074H
	DB	05fH
	DB	074H
	DB	069H
	DB	06dH
	DB	065H
	DB	00H
	ORG $+11
?ImGui_ImplWin32_NewFrame@@YAXXZ$rtcVarDesc DD 098H	; ImGui_ImplWin32_NewFrame
	DD	08H
	DQ	FLAT:?ImGui_ImplWin32_NewFrame@@YAXXZ$rtcName$1
	DD	068H
	DD	010H
	DQ	FLAT:?ImGui_ImplWin32_NewFrame@@YAXXZ$rtcName$0
	ORG $+96
?ImGui_ImplWin32_NewFrame@@YAXXZ$rtcFrameData DD 02H	; ImGui_ImplWin32_NewFrame
	DD	00H
	DQ	FLAT:?ImGui_ImplWin32_NewFrame@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplWin32_Shutdown@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	070030025H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ImGui_ImplWin32_Init@@YA_NPEAX@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ImGui_ImplWin32_Init@@YA_NPEAX@Z DD imagerel ?ImGui_ImplWin32_Init@@YA_NPEAX@Z
	DD	0ffffffffH
	DD	imagerel ?ImGui_ImplWin32_Init@@YA_NPEAX@Z+246
	DD	00H
	DD	imagerel ?ImGui_ImplWin32_Init@@YA_NPEAX@Z+302
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ImGui_ImplWin32_Init@@YA_NPEAX@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??ImGui_ImplWin32_Init@@YA_NPEAX@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplWin32_Init@@YA_NPEAX@Z DD 025054619H
	DD	010e2313H
	DD	070070057H
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?ImGui_ImplWin32_Init@@YA_NPEAX@Z
	DD	02a2H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImGui_ImplWin32_Init@@YA_NPEAX@Z$rtcName$0 DB 070H	; ImGui_ImplWin32_Init
	DB	065H
	DB	072H
	DB	066H
	DB	05fH
	DB	066H
	DB	072H
	DB	065H
	DB	071H
	DB	075H
	DB	065H
	DB	06eH
	DB	063H
	DB	079H
	DB	00H
	ORG $+1
?ImGui_ImplWin32_Init@@YA_NPEAX@Z$rtcName$1 DB 070H	; ImGui_ImplWin32_Init
	DB	065H
	DB	072H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	075H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	00H
	ORG $+3
?ImGui_ImplWin32_Init@@YA_NPEAX@Z$rtcName$2 DB 078H	; ImGui_ImplWin32_Init
	DB	069H
	DB	06eH
	DB	070H
	DB	075H
	DB	074H
	DB	05fH
	DB	064H
	DB	06cH
	DB	06cH
	DB	05fH
	DB	06eH
	DB	061H
	DB	06dH
	DB	065H
	DB	073H
	DB	00H
	ORG $+15
?ImGui_ImplWin32_Init@@YA_NPEAX@Z$rtcVarDesc DD 0a8H	; ImGui_ImplWin32_Init
	DD	028H
	DQ	FLAT:?ImGui_ImplWin32_Init@@YA_NPEAX@Z$rtcName$2
	DD	068H
	DD	08H
	DQ	FLAT:?ImGui_ImplWin32_Init@@YA_NPEAX@Z$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:?ImGui_ImplWin32_Init@@YA_NPEAX@Z$rtcName$0
	ORG $+144
?ImGui_ImplWin32_Init@@YA_NPEAX@Z$rtcFrameData DD 03H	; ImGui_ImplWin32_Init
	DD	00H
	DQ	FLAT:?ImGui_ImplWin32_Init@@YA_NPEAX@Z$rtcVarDesc
$cppxdata$?ImGui_ImplWin32_Init@@YA_NPEAX@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?ImGui_ImplWin32_Init@@YA_NPEAX@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?ImGui_ImplWin32_Init@@YA_NPEAX@Z
	DD	0288H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??3@YAXPEAXUImNewWrapper@@0@Z DD 05053101H
	DD	0117031aH
	DD	070100019H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KUImNewWrapper@@PEAX@Z DD 05053101H
	DD	0117031aH
	DD	070100019H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec2@@QEAA@MM@Z DD 05031901H
	DD	072160319H
	DD	05012H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_impl_win32.cpp
;	COMDAT ?_IsWindowsVersionOrGreater@@YAHGGG@Z
_TEXT	SEGMENT
ntdllModule$4 = 8
versionInfo$ = 48
conditionMask$ = 360
tv91 = 564
__$ArrayPad$ = 568
major$ = 608
minor$ = 616
__formal$ = 624
?_IsWindowsVersionOrGreater@@YAHGGG@Z PROC		; _IsWindowsVersionOrGreater, COMDAT

; 664  : {

  00000	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  00006	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000b	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  00010	55		 push	 rbp
  00011	57		 push	 rdi
  00012	48 81 ec 68 02
	00 00		 sub	 rsp, 616		; 00000268H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8b fc	 mov	 rdi, rsp
  00021	b9 9a 00 00 00	 mov	 ecx, 154		; 0000009aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	0f b7 8c 24 88
	02 00 00	 movzx	 ecx, WORD PTR [rsp+648]
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 38 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 665  :     typedef LONG(WINAPI* PFN_RtlVerifyVersionInfo)(OSVERSIONINFOEXW*, ULONG, ULONGLONG);
; 666  :     static PFN_RtlVerifyVersionInfo RtlVerifyVersionInfoFn = nullptr;
; 667  : 	if (RtlVerifyVersionInfoFn == nullptr)

  00046	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?RtlVerifyVersionInfoFn@?1??_IsWindowsVersionOrGreater@@YAHGGG@Z@4P6AJPEAU_OSVERSIONINFOEXW@@K_K@ZEA, 0
  0004e	75 30		 jne	 SHORT $LN2@IsWindowsV

; 668  : 		if (HMODULE ntdllModule = ::GetModuleHandleA("ntdll.dll"))

  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09FLKFJBLM@ntdll?4dll?$AA@
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleHandleA
  0005d	48 89 45 08	 mov	 QWORD PTR ntdllModule$4[rbp], rax
  00061	48 83 7d 08 00	 cmp	 QWORD PTR ntdllModule$4[rbp], 0
  00066	74 18		 je	 SHORT $LN3@IsWindowsV

; 669  : 			RtlVerifyVersionInfoFn = (PFN_RtlVerifyVersionInfo)GetProcAddress(ntdllModule, "RtlVerifyVersionInfo");

  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@LOGLPPDD@RtlVerifyVersionInfo?$AA@
  0006f	48 8b 4d 08	 mov	 rcx, QWORD PTR ntdllModule$4[rbp]
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00079	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?RtlVerifyVersionInfoFn@?1??_IsWindowsVersionOrGreater@@YAHGGG@Z@4P6AJPEAU_OSVERSIONINFOEXW@@K_K@ZEA, rax
$LN3@IsWindowsV:
$LN2@IsWindowsV:

; 670  :     if (RtlVerifyVersionInfoFn == nullptr)

  00080	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?RtlVerifyVersionInfoFn@?1??_IsWindowsVersionOrGreater@@YAHGGG@Z@4P6AJPEAU_OSVERSIONINFOEXW@@K_K@ZEA, 0
  00088	75 07		 jne	 SHORT $LN4@IsWindowsV

; 671  :         return FALSE;

  0008a	33 c0		 xor	 eax, eax
  0008c	e9 a4 00 00 00	 jmp	 $LN1@IsWindowsV
$LN4@IsWindowsV:

; 672  : 
; 673  :     RTL_OSVERSIONINFOEXW versionInfo = { };

  00091	48 8d 45 30	 lea	 rax, QWORD PTR versionInfo$[rbp]
  00095	48 8b f8	 mov	 rdi, rax
  00098	33 c0		 xor	 eax, eax
  0009a	b9 1c 01 00 00	 mov	 ecx, 284		; 0000011cH
  0009f	f3 aa		 rep stosb

; 674  :     ULONGLONG conditionMask = 0;

  000a1	48 c7 85 68 01
	00 00 00 00 00
	00		 mov	 QWORD PTR conditionMask$[rbp], 0

; 675  :     versionInfo.dwOSVersionInfoSize = sizeof(RTL_OSVERSIONINFOEXW);

  000ac	c7 45 30 1c 01
	00 00		 mov	 DWORD PTR versionInfo$[rbp], 284 ; 0000011cH

; 676  :     versionInfo.dwMajorVersion = major;

  000b3	0f b7 85 60 02
	00 00		 movzx	 eax, WORD PTR major$[rbp]
  000ba	89 45 34	 mov	 DWORD PTR versionInfo$[rbp+4], eax

; 677  : 	versionInfo.dwMinorVersion = minor;

  000bd	0f b7 85 68 02
	00 00		 movzx	 eax, WORD PTR minor$[rbp]
  000c4	89 45 38	 mov	 DWORD PTR versionInfo$[rbp+8], eax

; 678  : 	VER_SET_CONDITION(conditionMask, VER_MAJORVERSION, VER_GREATER_EQUAL);

  000c7	41 b0 03	 mov	 r8b, 3
  000ca	ba 02 00 00 00	 mov	 edx, 2
  000cf	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR conditionMask$[rbp]
  000d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VerSetConditionMask
  000dc	48 89 85 68 01
	00 00		 mov	 QWORD PTR conditionMask$[rbp], rax

; 679  : 	VER_SET_CONDITION(conditionMask, VER_MINORVERSION, VER_GREATER_EQUAL);

  000e3	41 b0 03	 mov	 r8b, 3
  000e6	ba 01 00 00 00	 mov	 edx, 1
  000eb	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR conditionMask$[rbp]
  000f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VerSetConditionMask
  000f8	48 89 85 68 01
	00 00		 mov	 QWORD PTR conditionMask$[rbp], rax

; 680  : 	return (RtlVerifyVersionInfoFn(&versionInfo, VER_MAJORVERSION | VER_MINORVERSION, conditionMask) == 0) ? TRUE : FALSE;

  000ff	4c 8b 85 68 01
	00 00		 mov	 r8, QWORD PTR conditionMask$[rbp]
  00106	ba 03 00 00 00	 mov	 edx, 3
  0010b	48 8d 4d 30	 lea	 rcx, QWORD PTR versionInfo$[rbp]
  0010f	ff 15 00 00 00
	00		 call	 QWORD PTR ?RtlVerifyVersionInfoFn@?1??_IsWindowsVersionOrGreater@@YAHGGG@Z@4P6AJPEAU_OSVERSIONINFOEXW@@K_K@ZEA
  00115	85 c0		 test	 eax, eax
  00117	75 0c		 jne	 SHORT $LN6@IsWindowsV
  00119	c7 85 34 02 00
	00 01 00 00 00	 mov	 DWORD PTR tv91[rbp], 1
  00123	eb 0a		 jmp	 SHORT $LN7@IsWindowsV
$LN6@IsWindowsV:
  00125	c7 85 34 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv91[rbp], 0
$LN7@IsWindowsV:
  0012f	8b 85 34 02 00
	00		 mov	 eax, DWORD PTR tv91[rbp]
$LN1@IsWindowsV:

; 681  : }

  00135	48 8b f8	 mov	 rdi, rax
  00138	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0013c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_IsWindowsVersionOrGreater@@YAHGGG@Z$rtcFrameData
  00143	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00148	48 8b c7	 mov	 rax, rdi
  0014b	48 8b 8d 38 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00152	48 33 cd	 xor	 rcx, rbp
  00155	e8 00 00 00 00	 call	 __security_check_cookie
  0015a	48 8d a5 48 02
	00 00		 lea	 rsp, QWORD PTR [rbp+584]
  00161	5f		 pop	 rdi
  00162	5d		 pop	 rbp
  00163	c3		 ret	 0
?_IsWindowsVersionOrGreater@@YAHGGG@Z ENDP		; _IsWindowsVersionOrGreater
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_impl_win32.cpp
;	COMDAT ?ImGui_ImplWin32_WndProcHandler@@YA_JPEAUHWND__@@I_K_J@Z
_TEXT	SEGMENT
io$ = 8
bd$ = 40
tme$5 = 72
button$6 = 116
button$7 = 148
is_key_down$8 = 180
vk$9 = 212
key$10 = 244
scancode$11 = 276
wch$12 = 308
tv375 = 516
tv366 = 516
tv277 = 516
tv194 = 516
tv161 = 516
tv139 = 516
tv68 = 516
__$ArrayPad$ = 520
hwnd$ = 560
msg$ = 568
wParam$ = 576
lParam$ = 584
?ImGui_ImplWin32_WndProcHandler@@YA_JPEAUHWND__@@I_K_J@Z PROC ; ImGui_ImplWin32_WndProcHandler, COMDAT

; 506  : {

$LN65:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 48 02
	00 00		 sub	 rsp, 584		; 00000248H
  0001c	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 92 00 00 00	 mov	 ecx, 146		; 00000092H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR [rsp+616]
  00038	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003f	48 33 c5	 xor	 rax, rbp
  00042	48 89 85 08 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 507  :     if (ImGui::GetCurrentContext() == nullptr)

  00049	e8 00 00 00 00	 call	 ?GetCurrentContext@ImGui@@YAPEAUImGuiContext@@XZ ; ImGui::GetCurrentContext
  0004e	48 85 c0	 test	 rax, rax
  00051	75 07		 jne	 SHORT $LN4@ImGui_Impl

; 508  :         return 0;

  00053	33 c0		 xor	 eax, eax
  00055	e9 4f 07 00 00	 jmp	 $LN1@ImGui_Impl
$LN4@ImGui_Impl:

; 509  : 
; 510  :     ImGuiIO& io = ImGui::GetIO();

  0005a	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  0005f	48 89 45 08	 mov	 QWORD PTR io$[rbp], rax

; 511  :     ImGui_ImplWin32_Data* bd = ImGui_ImplWin32_GetBackendData();

  00063	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_GetBackendData@@YAPEAUImGui_ImplWin32_Data@@XZ ; ImGui_ImplWin32_GetBackendData
  00068	48 89 45 28	 mov	 QWORD PTR bd$[rbp], rax

; 512  : 
; 513  :     switch (msg)

  0006c	8b 85 38 02 00
	00		 mov	 eax, DWORD PTR msg$[rbp]
  00072	89 85 04 02 00
	00		 mov	 DWORD PTR tv68[rbp], eax
  00078	81 bd 04 02 00
	00 00 02 00 00	 cmp	 DWORD PTR tv68[rbp], 512 ; 00000200H
  00082	77 50		 ja	 SHORT $LN60@ImGui_Impl
  00084	81 bd 04 02 00
	00 00 02 00 00	 cmp	 DWORD PTR tv68[rbp], 512 ; 00000200H
  0008e	0f 84 82 00 00
	00		 je	 $LN5@ImGui_Impl
  00094	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR tv68[rbp]
  0009a	83 e8 07	 sub	 eax, 7
  0009d	89 85 04 02 00
	00		 mov	 DWORD PTR tv68[rbp], eax
  000a3	81 bd 04 02 00
	00 fe 00 00 00	 cmp	 DWORD PTR tv68[rbp], 254 ; 000000feH
  000ad	0f 87 f4 06 00
	00		 ja	 $LN2@ImGui_Impl
  000b3	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR tv68[rbp]
  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  000c0	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN63@ImGui_Impl[rcx+rax]
  000c8	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN64@ImGui_Impl[rcx+rax*4]
  000cf	48 03 c1	 add	 rax, rcx
  000d2	ff e0		 jmp	 rax
$LN60@ImGui_Impl:
  000d4	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR tv68[rbp]
  000da	2d 01 02 00 00	 sub	 eax, 513		; 00000201H
  000df	89 85 04 02 00
	00		 mov	 DWORD PTR tv68[rbp], eax
  000e5	81 bd 04 02 00
	00 a2 00 00 00	 cmp	 DWORD PTR tv68[rbp], 162 ; 000000a2H
  000ef	0f 87 b2 06 00
	00		 ja	 $LN2@ImGui_Impl
  000f5	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR tv68[rbp]
  000fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00102	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN61@ImGui_Impl[rcx+rax]
  0010a	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN62@ImGui_Impl[rcx+rax*4]
  00111	48 03 c1	 add	 rax, rcx
  00114	ff e0		 jmp	 rax
$LN5@ImGui_Impl:

; 514  :     {
; 515  :     case WM_MOUSEMOVE:
; 516  :         // We need to call TrackMouseEvent in order to receive WM_MOUSELEAVE events
; 517  :         bd->MouseHwnd = hwnd;

  00116	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  0011a	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR hwnd$[rbp]
  00121	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 518  :         if (!bd->MouseTracked)

  00125	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  00129	0f b6 40 10	 movzx	 eax, BYTE PTR [rax+16]
  0012d	85 c0		 test	 eax, eax
  0012f	75 32		 jne	 SHORT $LN6@ImGui_Impl

; 519  :         {
; 520  :             TRACKMOUSEEVENT tme = { sizeof(tme), TME_LEAVE, hwnd, 0 };

  00131	c7 45 48 18 00
	00 00		 mov	 DWORD PTR tme$5[rbp], 24
  00138	c7 45 4c 02 00
	00 00		 mov	 DWORD PTR tme$5[rbp+4], 2
  0013f	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR hwnd$[rbp]
  00146	48 89 45 50	 mov	 QWORD PTR tme$5[rbp+8], rax
  0014a	c7 45 58 00 00
	00 00		 mov	 DWORD PTR tme$5[rbp+16], 0

; 521  :             ::TrackMouseEvent(&tme);

  00151	48 8d 4d 48	 lea	 rcx, QWORD PTR tme$5[rbp]
  00155	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TrackMouseEvent

; 522  :             bd->MouseTracked = true;

  0015b	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  0015f	c6 40 10 01	 mov	 BYTE PTR [rax+16], 1
$LN6@ImGui_Impl:

; 523  :         }
; 524  :         io.AddMousePosEvent((float)GET_X_LPARAM(lParam), (float)GET_Y_LPARAM(lParam));

  00163	48 8b 85 48 02
	00 00		 mov	 rax, QWORD PTR lParam$[rbp]
  0016a	48 c1 e8 10	 shr	 rax, 16
  0016e	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  00174	98		 cwde
  00175	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00179	48 8b 85 48 02
	00 00		 mov	 rax, QWORD PTR lParam$[rbp]
  00180	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  00186	98		 cwde
  00187	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  0018b	0f 28 d0	 movaps	 xmm2, xmm0
  0018e	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00192	e8 00 00 00 00	 call	 ?AddMousePosEvent@ImGuiIO@@QEAAXMM@Z ; ImGuiIO::AddMousePosEvent

; 525  :         break;

  00197	e9 0b 06 00 00	 jmp	 $LN2@ImGui_Impl
$LN7@ImGui_Impl:

; 526  :     case WM_MOUSELEAVE:
; 527  :         if (bd->MouseHwnd == hwnd)

  0019c	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  001a0	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR hwnd$[rbp]
  001a7	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  001ab	75 0c		 jne	 SHORT $LN8@ImGui_Impl

; 528  :             bd->MouseHwnd = nullptr;

  001ad	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  001b1	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN8@ImGui_Impl:

; 529  :         bd->MouseTracked = false;

  001b9	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  001bd	c6 40 10 00	 mov	 BYTE PTR [rax+16], 0

; 530  :         io.AddMousePosEvent(-FLT_MAX, -FLT_MAX);

  001c1	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@ff7fffff
  001c9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@ff7fffff
  001d1	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  001d5	e8 00 00 00 00	 call	 ?AddMousePosEvent@ImGuiIO@@QEAAXMM@Z ; ImGuiIO::AddMousePosEvent

; 531  :         break;

  001da	e9 c8 05 00 00	 jmp	 $LN2@ImGui_Impl
$LN9@ImGui_Impl:

; 532  :     case WM_LBUTTONDOWN: case WM_LBUTTONDBLCLK:
; 533  :     case WM_RBUTTONDOWN: case WM_RBUTTONDBLCLK:
; 534  :     case WM_MBUTTONDOWN: case WM_MBUTTONDBLCLK:
; 535  :     case WM_XBUTTONDOWN: case WM_XBUTTONDBLCLK:
; 536  :     {
; 537  :         int button = 0;

  001df	c7 45 74 00 00
	00 00		 mov	 DWORD PTR button$6[rbp], 0

; 538  :         if (msg == WM_LBUTTONDOWN || msg == WM_LBUTTONDBLCLK) { button = 0; }

  001e6	81 bd 38 02 00
	00 01 02 00 00	 cmp	 DWORD PTR msg$[rbp], 513 ; 00000201H
  001f0	74 0c		 je	 SHORT $LN11@ImGui_Impl
  001f2	81 bd 38 02 00
	00 03 02 00 00	 cmp	 DWORD PTR msg$[rbp], 515 ; 00000203H
  001fc	75 07		 jne	 SHORT $LN10@ImGui_Impl
$LN11@ImGui_Impl:
  001fe	c7 45 74 00 00
	00 00		 mov	 DWORD PTR button$6[rbp], 0
$LN10@ImGui_Impl:

; 539  :         if (msg == WM_RBUTTONDOWN || msg == WM_RBUTTONDBLCLK) { button = 1; }

  00205	81 bd 38 02 00
	00 04 02 00 00	 cmp	 DWORD PTR msg$[rbp], 516 ; 00000204H
  0020f	74 0c		 je	 SHORT $LN13@ImGui_Impl
  00211	81 bd 38 02 00
	00 06 02 00 00	 cmp	 DWORD PTR msg$[rbp], 518 ; 00000206H
  0021b	75 07		 jne	 SHORT $LN12@ImGui_Impl
$LN13@ImGui_Impl:
  0021d	c7 45 74 01 00
	00 00		 mov	 DWORD PTR button$6[rbp], 1
$LN12@ImGui_Impl:

; 540  :         if (msg == WM_MBUTTONDOWN || msg == WM_MBUTTONDBLCLK) { button = 2; }

  00224	81 bd 38 02 00
	00 07 02 00 00	 cmp	 DWORD PTR msg$[rbp], 519 ; 00000207H
  0022e	74 0c		 je	 SHORT $LN15@ImGui_Impl
  00230	81 bd 38 02 00
	00 09 02 00 00	 cmp	 DWORD PTR msg$[rbp], 521 ; 00000209H
  0023a	75 07		 jne	 SHORT $LN14@ImGui_Impl
$LN15@ImGui_Impl:
  0023c	c7 45 74 02 00
	00 00		 mov	 DWORD PTR button$6[rbp], 2
$LN14@ImGui_Impl:

; 541  :         if (msg == WM_XBUTTONDOWN || msg == WM_XBUTTONDBLCLK) { button = (GET_XBUTTON_WPARAM(wParam) == XBUTTON1) ? 3 : 4; }

  00243	81 bd 38 02 00
	00 0b 02 00 00	 cmp	 DWORD PTR msg$[rbp], 523 ; 0000020bH
  0024d	74 0c		 je	 SHORT $LN17@ImGui_Impl
  0024f	81 bd 38 02 00
	00 0d 02 00 00	 cmp	 DWORD PTR msg$[rbp], 525 ; 0000020dH
  00259	75 38		 jne	 SHORT $LN16@ImGui_Impl
$LN17@ImGui_Impl:
  0025b	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR wParam$[rbp]
  00262	48 c1 e8 10	 shr	 rax, 16
  00266	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  0026c	0f b7 c0	 movzx	 eax, ax
  0026f	83 f8 01	 cmp	 eax, 1
  00272	75 0c		 jne	 SHORT $LN52@ImGui_Impl
  00274	c7 85 04 02 00
	00 03 00 00 00	 mov	 DWORD PTR tv139[rbp], 3
  0027e	eb 0a		 jmp	 SHORT $LN53@ImGui_Impl
$LN52@ImGui_Impl:
  00280	c7 85 04 02 00
	00 04 00 00 00	 mov	 DWORD PTR tv139[rbp], 4
$LN53@ImGui_Impl:
  0028a	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR tv139[rbp]
  00290	89 45 74	 mov	 DWORD PTR button$6[rbp], eax
$LN16@ImGui_Impl:

; 542  :         if (bd->MouseButtonsDown == 0 && ::GetCapture() == nullptr)

  00293	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  00297	83 78 14 00	 cmp	 DWORD PTR [rax+20], 0
  0029b	75 18		 jne	 SHORT $LN18@ImGui_Impl
  0029d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCapture
  002a3	48 85 c0	 test	 rax, rax
  002a6	75 0d		 jne	 SHORT $LN18@ImGui_Impl

; 543  :             ::SetCapture(hwnd);

  002a8	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR hwnd$[rbp]
  002af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetCapture
$LN18@ImGui_Impl:

; 544  :         bd->MouseButtonsDown |= 1 << button;

  002b5	8b 45 74	 mov	 eax, DWORD PTR button$6[rbp]
  002b8	b9 01 00 00 00	 mov	 ecx, 1
  002bd	89 8d 04 02 00
	00		 mov	 DWORD PTR tv366[rbp], ecx
  002c3	0f b6 c8	 movzx	 ecx, al
  002c6	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR tv366[rbp]
  002cc	d3 e0		 shl	 eax, cl
  002ce	48 8b 4d 28	 mov	 rcx, QWORD PTR bd$[rbp]
  002d2	8b 49 14	 mov	 ecx, DWORD PTR [rcx+20]
  002d5	0b c8		 or	 ecx, eax
  002d7	8b c1		 mov	 eax, ecx
  002d9	48 8b 4d 28	 mov	 rcx, QWORD PTR bd$[rbp]
  002dd	89 41 14	 mov	 DWORD PTR [rcx+20], eax

; 545  :         io.AddMouseButtonEvent(button, true);

  002e0	41 b0 01	 mov	 r8b, 1
  002e3	8b 55 74	 mov	 edx, DWORD PTR button$6[rbp]
  002e6	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  002ea	e8 00 00 00 00	 call	 ?AddMouseButtonEvent@ImGuiIO@@QEAAXH_N@Z ; ImGuiIO::AddMouseButtonEvent

; 546  :         return 0;

  002ef	33 c0		 xor	 eax, eax
  002f1	e9 b3 04 00 00	 jmp	 $LN1@ImGui_Impl
$LN19@ImGui_Impl:

; 547  :     }
; 548  :     case WM_LBUTTONUP:
; 549  :     case WM_RBUTTONUP:
; 550  :     case WM_MBUTTONUP:
; 551  :     case WM_XBUTTONUP:
; 552  :     {
; 553  :         int button = 0;

  002f6	c7 85 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR button$7[rbp], 0

; 554  :         if (msg == WM_LBUTTONUP) { button = 0; }

  00300	81 bd 38 02 00
	00 02 02 00 00	 cmp	 DWORD PTR msg$[rbp], 514 ; 00000202H
  0030a	75 0a		 jne	 SHORT $LN20@ImGui_Impl
  0030c	c7 85 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR button$7[rbp], 0
$LN20@ImGui_Impl:

; 555  :         if (msg == WM_RBUTTONUP) { button = 1; }

  00316	81 bd 38 02 00
	00 05 02 00 00	 cmp	 DWORD PTR msg$[rbp], 517 ; 00000205H
  00320	75 0a		 jne	 SHORT $LN21@ImGui_Impl
  00322	c7 85 94 00 00
	00 01 00 00 00	 mov	 DWORD PTR button$7[rbp], 1
$LN21@ImGui_Impl:

; 556  :         if (msg == WM_MBUTTONUP) { button = 2; }

  0032c	81 bd 38 02 00
	00 08 02 00 00	 cmp	 DWORD PTR msg$[rbp], 520 ; 00000208H
  00336	75 0a		 jne	 SHORT $LN22@ImGui_Impl
  00338	c7 85 94 00 00
	00 02 00 00 00	 mov	 DWORD PTR button$7[rbp], 2
$LN22@ImGui_Impl:

; 557  :         if (msg == WM_XBUTTONUP) { button = (GET_XBUTTON_WPARAM(wParam) == XBUTTON1) ? 3 : 4; }

  00342	81 bd 38 02 00
	00 0c 02 00 00	 cmp	 DWORD PTR msg$[rbp], 524 ; 0000020cH
  0034c	75 3b		 jne	 SHORT $LN23@ImGui_Impl
  0034e	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR wParam$[rbp]
  00355	48 c1 e8 10	 shr	 rax, 16
  00359	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  0035f	0f b7 c0	 movzx	 eax, ax
  00362	83 f8 01	 cmp	 eax, 1
  00365	75 0c		 jne	 SHORT $LN54@ImGui_Impl
  00367	c7 85 04 02 00
	00 03 00 00 00	 mov	 DWORD PTR tv161[rbp], 3
  00371	eb 0a		 jmp	 SHORT $LN55@ImGui_Impl
$LN54@ImGui_Impl:
  00373	c7 85 04 02 00
	00 04 00 00 00	 mov	 DWORD PTR tv161[rbp], 4
$LN55@ImGui_Impl:
  0037d	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR tv161[rbp]
  00383	89 85 94 00 00
	00		 mov	 DWORD PTR button$7[rbp], eax
$LN23@ImGui_Impl:

; 558  :         bd->MouseButtonsDown &= ~(1 << button);

  00389	8b 85 94 00 00
	00		 mov	 eax, DWORD PTR button$7[rbp]
  0038f	b9 01 00 00 00	 mov	 ecx, 1
  00394	89 8d 04 02 00
	00		 mov	 DWORD PTR tv375[rbp], ecx
  0039a	0f b6 c8	 movzx	 ecx, al
  0039d	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR tv375[rbp]
  003a3	d3 e0		 shl	 eax, cl
  003a5	f7 d0		 not	 eax
  003a7	48 8b 4d 28	 mov	 rcx, QWORD PTR bd$[rbp]
  003ab	8b 49 14	 mov	 ecx, DWORD PTR [rcx+20]
  003ae	23 c8		 and	 ecx, eax
  003b0	8b c1		 mov	 eax, ecx
  003b2	48 8b 4d 28	 mov	 rcx, QWORD PTR bd$[rbp]
  003b6	89 41 14	 mov	 DWORD PTR [rcx+20], eax

; 559  :         if (bd->MouseButtonsDown == 0 && ::GetCapture() == hwnd)

  003b9	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  003bd	83 78 14 00	 cmp	 DWORD PTR [rax+20], 0
  003c1	75 15		 jne	 SHORT $LN24@ImGui_Impl
  003c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCapture
  003c9	48 3b 85 30 02
	00 00		 cmp	 rax, QWORD PTR hwnd$[rbp]
  003d0	75 06		 jne	 SHORT $LN24@ImGui_Impl

; 560  :             ::ReleaseCapture();

  003d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseCapture
$LN24@ImGui_Impl:

; 561  :         io.AddMouseButtonEvent(button, false);

  003d8	45 33 c0	 xor	 r8d, r8d
  003db	8b 95 94 00 00
	00		 mov	 edx, DWORD PTR button$7[rbp]
  003e1	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  003e5	e8 00 00 00 00	 call	 ?AddMouseButtonEvent@ImGuiIO@@QEAAXH_N@Z ; ImGuiIO::AddMouseButtonEvent

; 562  :         return 0;

  003ea	33 c0		 xor	 eax, eax
  003ec	e9 b8 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN25@ImGui_Impl:

; 563  :     }
; 564  :     case WM_MOUSEWHEEL:
; 565  :         io.AddMouseWheelEvent(0.0f, (float)GET_WHEEL_DELTA_WPARAM(wParam) / (float)WHEEL_DELTA);

  003f1	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR wParam$[rbp]
  003f8	48 c1 e8 10	 shr	 rax, 16
  003fc	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  00402	98		 cwde
  00403	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00407	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42f00000
  0040f	0f 28 d0	 movaps	 xmm2, xmm0
  00412	0f 57 c9	 xorps	 xmm1, xmm1
  00415	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00419	e8 00 00 00 00	 call	 ?AddMouseWheelEvent@ImGuiIO@@QEAAXMM@Z ; ImGuiIO::AddMouseWheelEvent

; 566  :         return 0;

  0041e	33 c0		 xor	 eax, eax
  00420	e9 84 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN26@ImGui_Impl:

; 567  :     case WM_MOUSEHWHEEL:
; 568  :         io.AddMouseWheelEvent((float)GET_WHEEL_DELTA_WPARAM(wParam) / (float)WHEEL_DELTA, 0.0f);

  00425	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR wParam$[rbp]
  0042c	48 c1 e8 10	 shr	 rax, 16
  00430	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  00436	98		 cwde
  00437	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0043b	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42f00000
  00443	0f 57 d2	 xorps	 xmm2, xmm2
  00446	0f 28 c8	 movaps	 xmm1, xmm0
  00449	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  0044d	e8 00 00 00 00	 call	 ?AddMouseWheelEvent@ImGuiIO@@QEAAXMM@Z ; ImGuiIO::AddMouseWheelEvent

; 569  :         return 0;

  00452	33 c0		 xor	 eax, eax
  00454	e9 50 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN27@ImGui_Impl:

; 570  :     case WM_KEYDOWN:
; 571  :     case WM_KEYUP:
; 572  :     case WM_SYSKEYDOWN:
; 573  :     case WM_SYSKEYUP:
; 574  :     {
; 575  :         const bool is_key_down = (msg == WM_KEYDOWN || msg == WM_SYSKEYDOWN);

  00459	81 bd 38 02 00
	00 00 01 00 00	 cmp	 DWORD PTR msg$[rbp], 256 ; 00000100H
  00463	74 15		 je	 SHORT $LN56@ImGui_Impl
  00465	81 bd 38 02 00
	00 04 01 00 00	 cmp	 DWORD PTR msg$[rbp], 260 ; 00000104H
  0046f	74 09		 je	 SHORT $LN56@ImGui_Impl
  00471	c6 85 04 02 00
	00 00		 mov	 BYTE PTR tv194[rbp], 0
  00478	eb 07		 jmp	 SHORT $LN57@ImGui_Impl
$LN56@ImGui_Impl:
  0047a	c6 85 04 02 00
	00 01		 mov	 BYTE PTR tv194[rbp], 1
$LN57@ImGui_Impl:
  00481	0f b6 85 04 02
	00 00		 movzx	 eax, BYTE PTR tv194[rbp]
  00488	88 85 b4 00 00
	00		 mov	 BYTE PTR is_key_down$8[rbp], al

; 576  :         if (wParam < 256)

  0048e	48 81 bd 40 02
	00 00 00 01 00
	00		 cmp	 QWORD PTR wParam$[rbp], 256 ; 00000100H
  00499	0f 83 09 02 00
	00		 jae	 $LN28@ImGui_Impl

; 577  :         {
; 578  :             // Submit modifiers
; 579  :             ImGui_ImplWin32_UpdateKeyModifiers();

  0049f	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_UpdateKeyModifiers@@YAXXZ ; ImGui_ImplWin32_UpdateKeyModifiers

; 580  : 
; 581  :             // Obtain virtual key code
; 582  :             // (keypad enter doesn't have its own... VK_RETURN with KF_EXTENDED flag means keypad enter, see IM_VK_KEYPAD_ENTER definition for details, it is mapped to ImGuiKey_KeyPadEnter.)
; 583  :             int vk = (int)wParam;

  004a4	8b 85 40 02 00
	00		 mov	 eax, DWORD PTR wParam$[rbp]
  004aa	89 85 d4 00 00
	00		 mov	 DWORD PTR vk$9[rbp], eax

; 584  :             if ((wParam == VK_RETURN) && (HIWORD(lParam) & KF_EXTENDED))

  004b0	48 83 bd 40 02
	00 00 0d	 cmp	 QWORD PTR wParam$[rbp], 13
  004b8	75 27		 jne	 SHORT $LN29@ImGui_Impl
  004ba	48 8b 85 48 02
	00 00		 mov	 rax, QWORD PTR lParam$[rbp]
  004c1	48 c1 e8 10	 shr	 rax, 16
  004c5	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  004cb	0f b7 c0	 movzx	 eax, ax
  004ce	25 00 01 00 00	 and	 eax, 256		; 00000100H
  004d3	85 c0		 test	 eax, eax
  004d5	74 0a		 je	 SHORT $LN29@ImGui_Impl

; 585  :                 vk = IM_VK_KEYPAD_ENTER;

  004d7	c7 85 d4 00 00
	00 0d 01 00 00	 mov	 DWORD PTR vk$9[rbp], 269 ; 0000010dH
$LN29@ImGui_Impl:

; 586  : 
; 587  :             // Submit key event
; 588  :             const ImGuiKey key = ImGui_ImplWin32_VirtualKeyToImGuiKey(vk);

  004e1	48 63 85 d4 00
	00 00		 movsxd	 rax, DWORD PTR vk$9[rbp]
  004e8	48 8b c8	 mov	 rcx, rax
  004eb	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_VirtualKeyToImGuiKey@@YA?AW4ImGuiKey@@_K@Z ; ImGui_ImplWin32_VirtualKeyToImGuiKey
  004f0	89 85 f4 00 00
	00		 mov	 DWORD PTR key$10[rbp], eax

; 589  :             const int scancode = (int)LOBYTE(HIWORD(lParam));

  004f6	48 8b 85 48 02
	00 00		 mov	 rax, QWORD PTR lParam$[rbp]
  004fd	48 c1 e8 10	 shr	 rax, 16
  00501	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  00507	0f b7 c0	 movzx	 eax, ax
  0050a	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00510	0f b6 c0	 movzx	 eax, al
  00513	89 85 14 01 00
	00		 mov	 DWORD PTR scancode$11[rbp], eax

; 590  :             if (key != ImGuiKey_None)

  00519	83 bd f4 00 00
	00 00		 cmp	 DWORD PTR key$10[rbp], 0
  00520	74 20		 je	 SHORT $LN30@ImGui_Impl

; 591  :                 ImGui_ImplWin32_AddKeyEvent(key, is_key_down, vk, scancode);

  00522	44 8b 8d 14 01
	00 00		 mov	 r9d, DWORD PTR scancode$11[rbp]
  00529	44 8b 85 d4 00
	00 00		 mov	 r8d, DWORD PTR vk$9[rbp]
  00530	0f b6 95 b4 00
	00 00		 movzx	 edx, BYTE PTR is_key_down$8[rbp]
  00537	8b 8d f4 00 00
	00		 mov	 ecx, DWORD PTR key$10[rbp]
  0053d	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_AddKeyEvent@@YAXW4ImGuiKey@@_NHH@Z ; ImGui_ImplWin32_AddKeyEvent
$LN30@ImGui_Impl:

; 592  : 
; 593  :             // Submit individual left/right modifier events
; 594  :             if (vk == VK_SHIFT)

  00542	83 bd d4 00 00
	00 10		 cmp	 DWORD PTR vk$9[rbp], 16
  00549	75 71		 jne	 SHORT $LN31@ImGui_Impl

; 595  :             {
; 596  :                 // Important: Shift keys tend to get stuck when pressed together, missing key-up events are corrected in ImGui_ImplWin32_ProcessKeyEventsWorkarounds()
; 597  :                 if (IsVkDown(VK_LSHIFT) == is_key_down) { ImGui_ImplWin32_AddKeyEvent(ImGuiKey_LeftShift, is_key_down, VK_LSHIFT, scancode); }

  0054b	b9 a0 00 00 00	 mov	 ecx, 160		; 000000a0H
  00550	e8 00 00 00 00	 call	 ?IsVkDown@@YA_NH@Z	; IsVkDown
  00555	0f b6 c0	 movzx	 eax, al
  00558	0f b6 8d b4 00
	00 00		 movzx	 ecx, BYTE PTR is_key_down$8[rbp]
  0055f	3b c1		 cmp	 eax, ecx
  00561	75 1e		 jne	 SHORT $LN33@ImGui_Impl
  00563	44 8b 8d 14 01
	00 00		 mov	 r9d, DWORD PTR scancode$11[rbp]
  0056a	41 b8 a0 00 00
	00		 mov	 r8d, 160		; 000000a0H
  00570	0f b6 95 b4 00
	00 00		 movzx	 edx, BYTE PTR is_key_down$8[rbp]
  00577	b9 10 02 00 00	 mov	 ecx, 528		; 00000210H
  0057c	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_AddKeyEvent@@YAXW4ImGuiKey@@_NHH@Z ; ImGui_ImplWin32_AddKeyEvent
$LN33@ImGui_Impl:

; 598  :                 if (IsVkDown(VK_RSHIFT) == is_key_down) { ImGui_ImplWin32_AddKeyEvent(ImGuiKey_RightShift, is_key_down, VK_RSHIFT, scancode); }

  00581	b9 a1 00 00 00	 mov	 ecx, 161		; 000000a1H
  00586	e8 00 00 00 00	 call	 ?IsVkDown@@YA_NH@Z	; IsVkDown
  0058b	0f b6 c0	 movzx	 eax, al
  0058e	0f b6 8d b4 00
	00 00		 movzx	 ecx, BYTE PTR is_key_down$8[rbp]
  00595	3b c1		 cmp	 eax, ecx
  00597	75 1e		 jne	 SHORT $LN34@ImGui_Impl
  00599	44 8b 8d 14 01
	00 00		 mov	 r9d, DWORD PTR scancode$11[rbp]
  005a0	41 b8 a1 00 00
	00		 mov	 r8d, 161		; 000000a1H
  005a6	0f b6 95 b4 00
	00 00		 movzx	 edx, BYTE PTR is_key_down$8[rbp]
  005ad	b9 14 02 00 00	 mov	 ecx, 532		; 00000214H
  005b2	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_AddKeyEvent@@YAXW4ImGuiKey@@_NHH@Z ; ImGui_ImplWin32_AddKeyEvent
$LN34@ImGui_Impl:

; 599  :             }

  005b7	e9 ec 00 00 00	 jmp	 $LN32@ImGui_Impl
$LN31@ImGui_Impl:

; 600  :             else if (vk == VK_CONTROL)

  005bc	83 bd d4 00 00
	00 11		 cmp	 DWORD PTR vk$9[rbp], 17
  005c3	75 6e		 jne	 SHORT $LN35@ImGui_Impl

; 601  :             {
; 602  :                 if (IsVkDown(VK_LCONTROL) == is_key_down) { ImGui_ImplWin32_AddKeyEvent(ImGuiKey_LeftCtrl, is_key_down, VK_LCONTROL, scancode); }

  005c5	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  005ca	e8 00 00 00 00	 call	 ?IsVkDown@@YA_NH@Z	; IsVkDown
  005cf	0f b6 c0	 movzx	 eax, al
  005d2	0f b6 8d b4 00
	00 00		 movzx	 ecx, BYTE PTR is_key_down$8[rbp]
  005d9	3b c1		 cmp	 eax, ecx
  005db	75 1e		 jne	 SHORT $LN37@ImGui_Impl
  005dd	44 8b 8d 14 01
	00 00		 mov	 r9d, DWORD PTR scancode$11[rbp]
  005e4	41 b8 a2 00 00
	00		 mov	 r8d, 162		; 000000a2H
  005ea	0f b6 95 b4 00
	00 00		 movzx	 edx, BYTE PTR is_key_down$8[rbp]
  005f1	b9 0f 02 00 00	 mov	 ecx, 527		; 0000020fH
  005f6	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_AddKeyEvent@@YAXW4ImGuiKey@@_NHH@Z ; ImGui_ImplWin32_AddKeyEvent
$LN37@ImGui_Impl:

; 603  :                 if (IsVkDown(VK_RCONTROL) == is_key_down) { ImGui_ImplWin32_AddKeyEvent(ImGuiKey_RightCtrl, is_key_down, VK_RCONTROL, scancode); }

  005fb	b9 a3 00 00 00	 mov	 ecx, 163		; 000000a3H
  00600	e8 00 00 00 00	 call	 ?IsVkDown@@YA_NH@Z	; IsVkDown
  00605	0f b6 c0	 movzx	 eax, al
  00608	0f b6 8d b4 00
	00 00		 movzx	 ecx, BYTE PTR is_key_down$8[rbp]
  0060f	3b c1		 cmp	 eax, ecx
  00611	75 1e		 jne	 SHORT $LN38@ImGui_Impl
  00613	44 8b 8d 14 01
	00 00		 mov	 r9d, DWORD PTR scancode$11[rbp]
  0061a	41 b8 a3 00 00
	00		 mov	 r8d, 163		; 000000a3H
  00620	0f b6 95 b4 00
	00 00		 movzx	 edx, BYTE PTR is_key_down$8[rbp]
  00627	b9 13 02 00 00	 mov	 ecx, 531		; 00000213H
  0062c	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_AddKeyEvent@@YAXW4ImGuiKey@@_NHH@Z ; ImGui_ImplWin32_AddKeyEvent
$LN38@ImGui_Impl:

; 604  :             }

  00631	eb 75		 jmp	 SHORT $LN36@ImGui_Impl
$LN35@ImGui_Impl:

; 605  :             else if (vk == VK_MENU)

  00633	83 bd d4 00 00
	00 12		 cmp	 DWORD PTR vk$9[rbp], 18
  0063a	75 6c		 jne	 SHORT $LN39@ImGui_Impl

; 606  :             {
; 607  :                 if (IsVkDown(VK_LMENU) == is_key_down) { ImGui_ImplWin32_AddKeyEvent(ImGuiKey_LeftAlt, is_key_down, VK_LMENU, scancode); }

  0063c	b9 a4 00 00 00	 mov	 ecx, 164		; 000000a4H
  00641	e8 00 00 00 00	 call	 ?IsVkDown@@YA_NH@Z	; IsVkDown
  00646	0f b6 c0	 movzx	 eax, al
  00649	0f b6 8d b4 00
	00 00		 movzx	 ecx, BYTE PTR is_key_down$8[rbp]
  00650	3b c1		 cmp	 eax, ecx
  00652	75 1e		 jne	 SHORT $LN40@ImGui_Impl
  00654	44 8b 8d 14 01
	00 00		 mov	 r9d, DWORD PTR scancode$11[rbp]
  0065b	41 b8 a4 00 00
	00		 mov	 r8d, 164		; 000000a4H
  00661	0f b6 95 b4 00
	00 00		 movzx	 edx, BYTE PTR is_key_down$8[rbp]
  00668	b9 11 02 00 00	 mov	 ecx, 529		; 00000211H
  0066d	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_AddKeyEvent@@YAXW4ImGuiKey@@_NHH@Z ; ImGui_ImplWin32_AddKeyEvent
$LN40@ImGui_Impl:

; 608  :                 if (IsVkDown(VK_RMENU) == is_key_down) { ImGui_ImplWin32_AddKeyEvent(ImGuiKey_RightAlt, is_key_down, VK_RMENU, scancode); }

  00672	b9 a5 00 00 00	 mov	 ecx, 165		; 000000a5H
  00677	e8 00 00 00 00	 call	 ?IsVkDown@@YA_NH@Z	; IsVkDown
  0067c	0f b6 c0	 movzx	 eax, al
  0067f	0f b6 8d b4 00
	00 00		 movzx	 ecx, BYTE PTR is_key_down$8[rbp]
  00686	3b c1		 cmp	 eax, ecx
  00688	75 1e		 jne	 SHORT $LN41@ImGui_Impl
  0068a	44 8b 8d 14 01
	00 00		 mov	 r9d, DWORD PTR scancode$11[rbp]
  00691	41 b8 a5 00 00
	00		 mov	 r8d, 165		; 000000a5H
  00697	0f b6 95 b4 00
	00 00		 movzx	 edx, BYTE PTR is_key_down$8[rbp]
  0069e	b9 15 02 00 00	 mov	 ecx, 533		; 00000215H
  006a3	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_AddKeyEvent@@YAXW4ImGuiKey@@_NHH@Z ; ImGui_ImplWin32_AddKeyEvent
$LN41@ImGui_Impl:
$LN39@ImGui_Impl:
$LN36@ImGui_Impl:
$LN32@ImGui_Impl:
$LN28@ImGui_Impl:

; 609  :             }
; 610  :         }
; 611  :         return 0;

  006a8	33 c0		 xor	 eax, eax
  006aa	e9 fa 00 00 00	 jmp	 $LN1@ImGui_Impl
$LN42@ImGui_Impl:

; 612  :     }
; 613  :     case WM_SETFOCUS:
; 614  :     case WM_KILLFOCUS:
; 615  :         io.AddFocusEvent(msg == WM_SETFOCUS);

  006af	83 bd 38 02 00
	00 07		 cmp	 DWORD PTR msg$[rbp], 7
  006b6	75 09		 jne	 SHORT $LN58@ImGui_Impl
  006b8	c6 85 04 02 00
	00 01		 mov	 BYTE PTR tv277[rbp], 1
  006bf	eb 07		 jmp	 SHORT $LN59@ImGui_Impl
$LN58@ImGui_Impl:
  006c1	c6 85 04 02 00
	00 00		 mov	 BYTE PTR tv277[rbp], 0
$LN59@ImGui_Impl:
  006c8	0f b6 95 04 02
	00 00		 movzx	 edx, BYTE PTR tv277[rbp]
  006cf	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  006d3	e8 00 00 00 00	 call	 ?AddFocusEvent@ImGuiIO@@QEAAX_N@Z ; ImGuiIO::AddFocusEvent

; 616  :         return 0;

  006d8	33 c0		 xor	 eax, eax
  006da	e9 ca 00 00 00	 jmp	 $LN1@ImGui_Impl
$LN43@ImGui_Impl:

; 617  :     case WM_CHAR:
; 618  :         if (::IsWindowUnicode(hwnd))

  006df	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR hwnd$[rbp]
  006e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsWindowUnicode
  006ec	85 c0		 test	 eax, eax
  006ee	74 29		 je	 SHORT $LN44@ImGui_Impl

; 619  :         {
; 620  :             // You can also use ToAscii()+GetKeyboardState() to retrieve characters.
; 621  :             if (wParam > 0 && wParam < 0x10000)

  006f0	48 83 bd 40 02
	00 00 00	 cmp	 QWORD PTR wParam$[rbp], 0
  006f8	76 1d		 jbe	 SHORT $LN46@ImGui_Impl
  006fa	48 81 bd 40 02
	00 00 00 00 01
	00		 cmp	 QWORD PTR wParam$[rbp], 65536 ; 00010000H
  00705	73 10		 jae	 SHORT $LN46@ImGui_Impl

; 622  :                 io.AddInputCharacterUTF16((unsigned short)wParam);

  00707	0f b7 95 40 02
	00 00		 movzx	 edx, WORD PTR wParam$[rbp]
  0070e	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00712	e8 00 00 00 00	 call	 ?AddInputCharacterUTF16@ImGuiIO@@QEAAXG@Z ; ImGuiIO::AddInputCharacterUTF16
$LN46@ImGui_Impl:

; 623  :         }
; 624  :         else

  00717	eb 49		 jmp	 SHORT $LN45@ImGui_Impl
$LN44@ImGui_Impl:

; 625  :         {
; 626  :             wchar_t wch = 0;

  00719	33 c0		 xor	 eax, eax
  0071b	66 89 85 34 01
	00 00		 mov	 WORD PTR wch$12[rbp], ax

; 627  :             ::MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (char*)&wParam, 1, &wch, 1);

  00722	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  0072a	48 8d 85 34 01
	00 00		 lea	 rax, QWORD PTR wch$12[rbp]
  00731	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00736	41 b9 01 00 00
	00		 mov	 r9d, 1
  0073c	4c 8d 85 40 02
	00 00		 lea	 r8, QWORD PTR wParam$[rbp]
  00743	ba 01 00 00 00	 mov	 edx, 1
  00748	33 c9		 xor	 ecx, ecx
  0074a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MultiByteToWideChar

; 628  :             io.AddInputCharacter(wch);

  00750	0f b7 85 34 01
	00 00		 movzx	 eax, WORD PTR wch$12[rbp]
  00757	8b d0		 mov	 edx, eax
  00759	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  0075d	e8 00 00 00 00	 call	 ?AddInputCharacter@ImGuiIO@@QEAAXI@Z ; ImGuiIO::AddInputCharacter
$LN45@ImGui_Impl:

; 629  :         }
; 630  :         return 0;

  00762	33 c0		 xor	 eax, eax
  00764	eb 43		 jmp	 SHORT $LN1@ImGui_Impl
$LN47@ImGui_Impl:

; 631  :     case WM_SETCURSOR:
; 632  :         // This is required to restore cursor when transitioning from e.g resize borders to client area.
; 633  :         if (LOWORD(lParam) == HTCLIENT && ImGui_ImplWin32_UpdateMouseCursor())

  00766	48 8b 85 48 02
	00 00		 mov	 rax, QWORD PTR lParam$[rbp]
  0076d	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  00773	0f b7 c0	 movzx	 eax, ax
  00776	83 f8 01	 cmp	 eax, 1
  00779	75 13		 jne	 SHORT $LN48@ImGui_Impl
  0077b	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_UpdateMouseCursor@@YA_NXZ ; ImGui_ImplWin32_UpdateMouseCursor
  00780	0f b6 c0	 movzx	 eax, al
  00783	85 c0		 test	 eax, eax
  00785	74 07		 je	 SHORT $LN48@ImGui_Impl

; 634  :             return 1;

  00787	b8 01 00 00 00	 mov	 eax, 1
  0078c	eb 1b		 jmp	 SHORT $LN1@ImGui_Impl
$LN48@ImGui_Impl:

; 635  :         return 0;

  0078e	33 c0		 xor	 eax, eax
  00790	eb 17		 jmp	 SHORT $LN1@ImGui_Impl
$LN49@ImGui_Impl:

; 636  :     case WM_DEVICECHANGE:
; 637  : #ifndef IMGUI_IMPL_WIN32_DISABLE_GAMEPAD
; 638  :         if ((UINT)wParam == DBT_DEVNODES_CHANGED)

  00792	83 bd 40 02 00
	00 07		 cmp	 DWORD PTR wParam$[rbp], 7
  00799	75 08		 jne	 SHORT $LN50@ImGui_Impl

; 639  :             bd->WantUpdateHasGamepad = true;

  0079b	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  0079f	c6 40 2d 01	 mov	 BYTE PTR [rax+45], 1
$LN50@ImGui_Impl:

; 640  : #endif
; 641  :         return 0;

  007a3	33 c0		 xor	 eax, eax
  007a5	eb 02		 jmp	 SHORT $LN1@ImGui_Impl
$LN2@ImGui_Impl:

; 642  :     }
; 643  :     return 0;

  007a7	33 c0		 xor	 eax, eax
$LN1@ImGui_Impl:

; 644  : }

  007a9	48 8b f8	 mov	 rdi, rax
  007ac	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  007b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ImGui_ImplWin32_WndProcHandler@@YA_JPEAUHWND__@@I_K_J@Z$rtcFrameData
  007b7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  007bc	48 8b c7	 mov	 rax, rdi
  007bf	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  007c6	48 33 cd	 xor	 rcx, rbp
  007c9	e8 00 00 00 00	 call	 __security_check_cookie
  007ce	48 8d a5 18 02
	00 00		 lea	 rsp, QWORD PTR [rbp+536]
  007d5	5f		 pop	 rdi
  007d6	5d		 pop	 rbp
  007d7	c3		 ret	 0
$LN64@ImGui_Impl:
  007d8	00 00 00 00	 DD	 $LN42@ImGui_Impl
  007dc	00 00 00 00	 DD	 $LN47@ImGui_Impl
  007e0	00 00 00 00	 DD	 $LN27@ImGui_Impl
  007e4	00 00 00 00	 DD	 $LN43@ImGui_Impl
  007e8	00 00 00 00	 DD	 $LN2@ImGui_Impl
$LN63@ImGui_Impl:
  007ec	00		 DB	 0
  007ed	00		 DB	 0
  007ee	04		 DB	 4
  007ef	04		 DB	 4
  007f0	04		 DB	 4
  007f1	04		 DB	 4
  007f2	04		 DB	 4
  007f3	04		 DB	 4
  007f4	04		 DB	 4
  007f5	04		 DB	 4
  007f6	04		 DB	 4
  007f7	04		 DB	 4
  007f8	04		 DB	 4
  007f9	04		 DB	 4
  007fa	04		 DB	 4
  007fb	04		 DB	 4
  007fc	04		 DB	 4
  007fd	04		 DB	 4
  007fe	04		 DB	 4
  007ff	04		 DB	 4
  00800	04		 DB	 4
  00801	04		 DB	 4
  00802	04		 DB	 4
  00803	04		 DB	 4
  00804	04		 DB	 4
  00805	01		 DB	 1
  00806	04		 DB	 4
  00807	04		 DB	 4
  00808	04		 DB	 4
  00809	04		 DB	 4
  0080a	04		 DB	 4
  0080b	04		 DB	 4
  0080c	04		 DB	 4
  0080d	04		 DB	 4
  0080e	04		 DB	 4
  0080f	04		 DB	 4
  00810	04		 DB	 4
  00811	04		 DB	 4
  00812	04		 DB	 4
  00813	04		 DB	 4
  00814	04		 DB	 4
  00815	04		 DB	 4
  00816	04		 DB	 4
  00817	04		 DB	 4
  00818	04		 DB	 4
  00819	04		 DB	 4
  0081a	04		 DB	 4
  0081b	04		 DB	 4
  0081c	04		 DB	 4
  0081d	04		 DB	 4
  0081e	04		 DB	 4
  0081f	04		 DB	 4
  00820	04		 DB	 4
  00821	04		 DB	 4
  00822	04		 DB	 4
  00823	04		 DB	 4
  00824	04		 DB	 4
  00825	04		 DB	 4
  00826	04		 DB	 4
  00827	04		 DB	 4
  00828	04		 DB	 4
  00829	04		 DB	 4
  0082a	04		 DB	 4
  0082b	04		 DB	 4
  0082c	04		 DB	 4
  0082d	04		 DB	 4
  0082e	04		 DB	 4
  0082f	04		 DB	 4
  00830	04		 DB	 4
  00831	04		 DB	 4
  00832	04		 DB	 4
  00833	04		 DB	 4
  00834	04		 DB	 4
  00835	04		 DB	 4
  00836	04		 DB	 4
  00837	04		 DB	 4
  00838	04		 DB	 4
  00839	04		 DB	 4
  0083a	04		 DB	 4
  0083b	04		 DB	 4
  0083c	04		 DB	 4
  0083d	04		 DB	 4
  0083e	04		 DB	 4
  0083f	04		 DB	 4
  00840	04		 DB	 4
  00841	04		 DB	 4
  00842	04		 DB	 4
  00843	04		 DB	 4
  00844	04		 DB	 4
  00845	04		 DB	 4
  00846	04		 DB	 4
  00847	04		 DB	 4
  00848	04		 DB	 4
  00849	04		 DB	 4
  0084a	04		 DB	 4
  0084b	04		 DB	 4
  0084c	04		 DB	 4
  0084d	04		 DB	 4
  0084e	04		 DB	 4
  0084f	04		 DB	 4
  00850	04		 DB	 4
  00851	04		 DB	 4
  00852	04		 DB	 4
  00853	04		 DB	 4
  00854	04		 DB	 4
  00855	04		 DB	 4
  00856	04		 DB	 4
  00857	04		 DB	 4
  00858	04		 DB	 4
  00859	04		 DB	 4
  0085a	04		 DB	 4
  0085b	04		 DB	 4
  0085c	04		 DB	 4
  0085d	04		 DB	 4
  0085e	04		 DB	 4
  0085f	04		 DB	 4
  00860	04		 DB	 4
  00861	04		 DB	 4
  00862	04		 DB	 4
  00863	04		 DB	 4
  00864	04		 DB	 4
  00865	04		 DB	 4
  00866	04		 DB	 4
  00867	04		 DB	 4
  00868	04		 DB	 4
  00869	04		 DB	 4
  0086a	04		 DB	 4
  0086b	04		 DB	 4
  0086c	04		 DB	 4
  0086d	04		 DB	 4
  0086e	04		 DB	 4
  0086f	04		 DB	 4
  00870	04		 DB	 4
  00871	04		 DB	 4
  00872	04		 DB	 4
  00873	04		 DB	 4
  00874	04		 DB	 4
  00875	04		 DB	 4
  00876	04		 DB	 4
  00877	04		 DB	 4
  00878	04		 DB	 4
  00879	04		 DB	 4
  0087a	04		 DB	 4
  0087b	04		 DB	 4
  0087c	04		 DB	 4
  0087d	04		 DB	 4
  0087e	04		 DB	 4
  0087f	04		 DB	 4
  00880	04		 DB	 4
  00881	04		 DB	 4
  00882	04		 DB	 4
  00883	04		 DB	 4
  00884	04		 DB	 4
  00885	04		 DB	 4
  00886	04		 DB	 4
  00887	04		 DB	 4
  00888	04		 DB	 4
  00889	04		 DB	 4
  0088a	04		 DB	 4
  0088b	04		 DB	 4
  0088c	04		 DB	 4
  0088d	04		 DB	 4
  0088e	04		 DB	 4
  0088f	04		 DB	 4
  00890	04		 DB	 4
  00891	04		 DB	 4
  00892	04		 DB	 4
  00893	04		 DB	 4
  00894	04		 DB	 4
  00895	04		 DB	 4
  00896	04		 DB	 4
  00897	04		 DB	 4
  00898	04		 DB	 4
  00899	04		 DB	 4
  0089a	04		 DB	 4
  0089b	04		 DB	 4
  0089c	04		 DB	 4
  0089d	04		 DB	 4
  0089e	04		 DB	 4
  0089f	04		 DB	 4
  008a0	04		 DB	 4
  008a1	04		 DB	 4
  008a2	04		 DB	 4
  008a3	04		 DB	 4
  008a4	04		 DB	 4
  008a5	04		 DB	 4
  008a6	04		 DB	 4
  008a7	04		 DB	 4
  008a8	04		 DB	 4
  008a9	04		 DB	 4
  008aa	04		 DB	 4
  008ab	04		 DB	 4
  008ac	04		 DB	 4
  008ad	04		 DB	 4
  008ae	04		 DB	 4
  008af	04		 DB	 4
  008b0	04		 DB	 4
  008b1	04		 DB	 4
  008b2	04		 DB	 4
  008b3	04		 DB	 4
  008b4	04		 DB	 4
  008b5	04		 DB	 4
  008b6	04		 DB	 4
  008b7	04		 DB	 4
  008b8	04		 DB	 4
  008b9	04		 DB	 4
  008ba	04		 DB	 4
  008bb	04		 DB	 4
  008bc	04		 DB	 4
  008bd	04		 DB	 4
  008be	04		 DB	 4
  008bf	04		 DB	 4
  008c0	04		 DB	 4
  008c1	04		 DB	 4
  008c2	04		 DB	 4
  008c3	04		 DB	 4
  008c4	04		 DB	 4
  008c5	04		 DB	 4
  008c6	04		 DB	 4
  008c7	04		 DB	 4
  008c8	04		 DB	 4
  008c9	04		 DB	 4
  008ca	04		 DB	 4
  008cb	04		 DB	 4
  008cc	04		 DB	 4
  008cd	04		 DB	 4
  008ce	04		 DB	 4
  008cf	04		 DB	 4
  008d0	04		 DB	 4
  008d1	04		 DB	 4
  008d2	04		 DB	 4
  008d3	04		 DB	 4
  008d4	04		 DB	 4
  008d5	04		 DB	 4
  008d6	04		 DB	 4
  008d7	04		 DB	 4
  008d8	04		 DB	 4
  008d9	04		 DB	 4
  008da	04		 DB	 4
  008db	04		 DB	 4
  008dc	04		 DB	 4
  008dd	04		 DB	 4
  008de	04		 DB	 4
  008df	04		 DB	 4
  008e0	04		 DB	 4
  008e1	04		 DB	 4
  008e2	04		 DB	 4
  008e3	04		 DB	 4
  008e4	04		 DB	 4
  008e5	02		 DB	 2
  008e6	02		 DB	 2
  008e7	03		 DB	 3
  008e8	04		 DB	 4
  008e9	02		 DB	 2
  008ea	02		 DB	 2
  008eb	90		 npad	 1
$LN62@ImGui_Impl:
  008ec	00 00 00 00	 DD	 $LN9@ImGui_Impl
  008f0	00 00 00 00	 DD	 $LN19@ImGui_Impl
  008f4	00 00 00 00	 DD	 $LN25@ImGui_Impl
  008f8	00 00 00 00	 DD	 $LN26@ImGui_Impl
  008fc	00 00 00 00	 DD	 $LN49@ImGui_Impl
  00900	00 00 00 00	 DD	 $LN7@ImGui_Impl
  00904	00 00 00 00	 DD	 $LN2@ImGui_Impl
$LN61@ImGui_Impl:
  00908	00		 DB	 0
  00909	01		 DB	 1
  0090a	00		 DB	 0
  0090b	00		 DB	 0
  0090c	01		 DB	 1
  0090d	00		 DB	 0
  0090e	00		 DB	 0
  0090f	01		 DB	 1
  00910	00		 DB	 0
  00911	02		 DB	 2
  00912	00		 DB	 0
  00913	01		 DB	 1
  00914	00		 DB	 0
  00915	03		 DB	 3
  00916	06		 DB	 6
  00917	06		 DB	 6
  00918	06		 DB	 6
  00919	06		 DB	 6
  0091a	06		 DB	 6
  0091b	06		 DB	 6
  0091c	06		 DB	 6
  0091d	06		 DB	 6
  0091e	06		 DB	 6
  0091f	06		 DB	 6
  00920	04		 DB	 4
  00921	06		 DB	 6
  00922	06		 DB	 6
  00923	06		 DB	 6
  00924	06		 DB	 6
  00925	06		 DB	 6
  00926	06		 DB	 6
  00927	06		 DB	 6
  00928	06		 DB	 6
  00929	06		 DB	 6
  0092a	06		 DB	 6
  0092b	06		 DB	 6
  0092c	06		 DB	 6
  0092d	06		 DB	 6
  0092e	06		 DB	 6
  0092f	06		 DB	 6
  00930	06		 DB	 6
  00931	06		 DB	 6
  00932	06		 DB	 6
  00933	06		 DB	 6
  00934	06		 DB	 6
  00935	06		 DB	 6
  00936	06		 DB	 6
  00937	06		 DB	 6
  00938	06		 DB	 6
  00939	06		 DB	 6
  0093a	06		 DB	 6
  0093b	06		 DB	 6
  0093c	06		 DB	 6
  0093d	06		 DB	 6
  0093e	06		 DB	 6
  0093f	06		 DB	 6
  00940	06		 DB	 6
  00941	06		 DB	 6
  00942	06		 DB	 6
  00943	06		 DB	 6
  00944	06		 DB	 6
  00945	06		 DB	 6
  00946	06		 DB	 6
  00947	06		 DB	 6
  00948	06		 DB	 6
  00949	06		 DB	 6
  0094a	06		 DB	 6
  0094b	06		 DB	 6
  0094c	06		 DB	 6
  0094d	06		 DB	 6
  0094e	06		 DB	 6
  0094f	06		 DB	 6
  00950	06		 DB	 6
  00951	06		 DB	 6
  00952	06		 DB	 6
  00953	06		 DB	 6
  00954	06		 DB	 6
  00955	06		 DB	 6
  00956	06		 DB	 6
  00957	06		 DB	 6
  00958	06		 DB	 6
  00959	06		 DB	 6
  0095a	06		 DB	 6
  0095b	06		 DB	 6
  0095c	06		 DB	 6
  0095d	06		 DB	 6
  0095e	06		 DB	 6
  0095f	06		 DB	 6
  00960	06		 DB	 6
  00961	06		 DB	 6
  00962	06		 DB	 6
  00963	06		 DB	 6
  00964	06		 DB	 6
  00965	06		 DB	 6
  00966	06		 DB	 6
  00967	06		 DB	 6
  00968	06		 DB	 6
  00969	06		 DB	 6
  0096a	06		 DB	 6
  0096b	06		 DB	 6
  0096c	06		 DB	 6
  0096d	06		 DB	 6
  0096e	06		 DB	 6
  0096f	06		 DB	 6
  00970	06		 DB	 6
  00971	06		 DB	 6
  00972	06		 DB	 6
  00973	06		 DB	 6
  00974	06		 DB	 6
  00975	06		 DB	 6
  00976	06		 DB	 6
  00977	06		 DB	 6
  00978	06		 DB	 6
  00979	06		 DB	 6
  0097a	06		 DB	 6
  0097b	06		 DB	 6
  0097c	06		 DB	 6
  0097d	06		 DB	 6
  0097e	06		 DB	 6
  0097f	06		 DB	 6
  00980	06		 DB	 6
  00981	06		 DB	 6
  00982	06		 DB	 6
  00983	06		 DB	 6
  00984	06		 DB	 6
  00985	06		 DB	 6
  00986	06		 DB	 6
  00987	06		 DB	 6
  00988	06		 DB	 6
  00989	06		 DB	 6
  0098a	06		 DB	 6
  0098b	06		 DB	 6
  0098c	06		 DB	 6
  0098d	06		 DB	 6
  0098e	06		 DB	 6
  0098f	06		 DB	 6
  00990	06		 DB	 6
  00991	06		 DB	 6
  00992	06		 DB	 6
  00993	06		 DB	 6
  00994	06		 DB	 6
  00995	06		 DB	 6
  00996	06		 DB	 6
  00997	06		 DB	 6
  00998	06		 DB	 6
  00999	06		 DB	 6
  0099a	06		 DB	 6
  0099b	06		 DB	 6
  0099c	06		 DB	 6
  0099d	06		 DB	 6
  0099e	06		 DB	 6
  0099f	06		 DB	 6
  009a0	06		 DB	 6
  009a1	06		 DB	 6
  009a2	06		 DB	 6
  009a3	06		 DB	 6
  009a4	06		 DB	 6
  009a5	06		 DB	 6
  009a6	06		 DB	 6
  009a7	06		 DB	 6
  009a8	06		 DB	 6
  009a9	06		 DB	 6
  009aa	05		 DB	 5
?ImGui_ImplWin32_WndProcHandler@@YA_JPEAUHWND__@@I_K_J@Z ENDP ; ImGui_ImplWin32_WndProcHandler
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_impl_win32.cpp
;	COMDAT ?ImGui_ImplWin32_VirtualKeyToImGuiKey@@YA?AW4ImGuiKey@@_K@Z
_TEXT	SEGMENT
tv64 = 192
wParam$ = 240
?ImGui_ImplWin32_VirtualKeyToImGuiKey@@YA?AW4ImGuiKey@@_K@Z PROC ; ImGui_ImplWin32_VirtualKeyToImGuiKey, COMDAT

; 374  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+248]

; 375  :     switch (wParam)

  00028	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR wParam$[rbp]
  0002f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv64[rbp], rax
  00036	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv64[rbp]
  0003d	48 83 e8 08	 sub	 rax, 8
  00041	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv64[rbp], rax
  00048	48 81 bd c0 00
	00 00 05 01 00
	00		 cmp	 QWORD PTR tv64[rbp], 261 ; 00000105H
  00053	0f 87 fc 03 00
	00		 ja	 $LN108@ImGui_Impl
  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:__ImageBase
  00060	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv64[rbp]
  00067	0f b6 8c 08 00
	00 00 00	 movzx	 ecx, BYTE PTR $LN110@ImGui_Impl[rax+rcx]
  0006f	8b 8c 88 00 00
	00 00		 mov	 ecx, DWORD PTR $LN111@ImGui_Impl[rax+rcx*4]
  00076	48 03 c8	 add	 rcx, rax
  00079	ff e1		 jmp	 rcx
$LN4@ImGui_Impl:

; 376  :     {
; 377  :         case VK_TAB: return ImGuiKey_Tab;

  0007b	b8 00 02 00 00	 mov	 eax, 512		; 00000200H
  00080	e9 d2 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN5@ImGui_Impl:

; 378  :         case VK_LEFT: return ImGuiKey_LeftArrow;

  00085	b8 01 02 00 00	 mov	 eax, 513		; 00000201H
  0008a	e9 c8 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN6@ImGui_Impl:

; 379  :         case VK_RIGHT: return ImGuiKey_RightArrow;

  0008f	b8 02 02 00 00	 mov	 eax, 514		; 00000202H
  00094	e9 be 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN7@ImGui_Impl:

; 380  :         case VK_UP: return ImGuiKey_UpArrow;

  00099	b8 03 02 00 00	 mov	 eax, 515		; 00000203H
  0009e	e9 b4 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN8@ImGui_Impl:

; 381  :         case VK_DOWN: return ImGuiKey_DownArrow;

  000a3	b8 04 02 00 00	 mov	 eax, 516		; 00000204H
  000a8	e9 aa 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN9@ImGui_Impl:

; 382  :         case VK_PRIOR: return ImGuiKey_PageUp;

  000ad	b8 05 02 00 00	 mov	 eax, 517		; 00000205H
  000b2	e9 a0 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN10@ImGui_Impl:

; 383  :         case VK_NEXT: return ImGuiKey_PageDown;

  000b7	b8 06 02 00 00	 mov	 eax, 518		; 00000206H
  000bc	e9 96 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN11@ImGui_Impl:

; 384  :         case VK_HOME: return ImGuiKey_Home;

  000c1	b8 07 02 00 00	 mov	 eax, 519		; 00000207H
  000c6	e9 8c 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN12@ImGui_Impl:

; 385  :         case VK_END: return ImGuiKey_End;

  000cb	b8 08 02 00 00	 mov	 eax, 520		; 00000208H
  000d0	e9 82 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN13@ImGui_Impl:

; 386  :         case VK_INSERT: return ImGuiKey_Insert;

  000d5	b8 09 02 00 00	 mov	 eax, 521		; 00000209H
  000da	e9 78 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN14@ImGui_Impl:

; 387  :         case VK_DELETE: return ImGuiKey_Delete;

  000df	b8 0a 02 00 00	 mov	 eax, 522		; 0000020aH
  000e4	e9 6e 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN15@ImGui_Impl:

; 388  :         case VK_BACK: return ImGuiKey_Backspace;

  000e9	b8 0b 02 00 00	 mov	 eax, 523		; 0000020bH
  000ee	e9 64 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN16@ImGui_Impl:

; 389  :         case VK_SPACE: return ImGuiKey_Space;

  000f3	b8 0c 02 00 00	 mov	 eax, 524		; 0000020cH
  000f8	e9 5a 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN17@ImGui_Impl:

; 390  :         case VK_RETURN: return ImGuiKey_Enter;

  000fd	b8 0d 02 00 00	 mov	 eax, 525		; 0000020dH
  00102	e9 50 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN18@ImGui_Impl:

; 391  :         case VK_ESCAPE: return ImGuiKey_Escape;

  00107	b8 0e 02 00 00	 mov	 eax, 526		; 0000020eH
  0010c	e9 46 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN19@ImGui_Impl:

; 392  :         case VK_OEM_7: return ImGuiKey_Apostrophe;

  00111	b8 48 02 00 00	 mov	 eax, 584		; 00000248H
  00116	e9 3c 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN20@ImGui_Impl:

; 393  :         case VK_OEM_COMMA: return ImGuiKey_Comma;

  0011b	b8 49 02 00 00	 mov	 eax, 585		; 00000249H
  00120	e9 32 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN21@ImGui_Impl:

; 394  :         case VK_OEM_MINUS: return ImGuiKey_Minus;

  00125	b8 4a 02 00 00	 mov	 eax, 586		; 0000024aH
  0012a	e9 28 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN22@ImGui_Impl:

; 395  :         case VK_OEM_PERIOD: return ImGuiKey_Period;

  0012f	b8 4b 02 00 00	 mov	 eax, 587		; 0000024bH
  00134	e9 1e 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN23@ImGui_Impl:

; 396  :         case VK_OEM_2: return ImGuiKey_Slash;

  00139	b8 4c 02 00 00	 mov	 eax, 588		; 0000024cH
  0013e	e9 14 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN24@ImGui_Impl:

; 397  :         case VK_OEM_1: return ImGuiKey_Semicolon;

  00143	b8 4d 02 00 00	 mov	 eax, 589		; 0000024dH
  00148	e9 0a 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN25@ImGui_Impl:

; 398  :         case VK_OEM_PLUS: return ImGuiKey_Equal;

  0014d	b8 4e 02 00 00	 mov	 eax, 590		; 0000024eH
  00152	e9 00 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN26@ImGui_Impl:

; 399  :         case VK_OEM_4: return ImGuiKey_LeftBracket;

  00157	b8 4f 02 00 00	 mov	 eax, 591		; 0000024fH
  0015c	e9 f6 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN27@ImGui_Impl:

; 400  :         case VK_OEM_5: return ImGuiKey_Backslash;

  00161	b8 50 02 00 00	 mov	 eax, 592		; 00000250H
  00166	e9 ec 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN28@ImGui_Impl:

; 401  :         case VK_OEM_6: return ImGuiKey_RightBracket;

  0016b	b8 51 02 00 00	 mov	 eax, 593		; 00000251H
  00170	e9 e2 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN29@ImGui_Impl:

; 402  :         case VK_OEM_3: return ImGuiKey_GraveAccent;

  00175	b8 52 02 00 00	 mov	 eax, 594		; 00000252H
  0017a	e9 d8 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN30@ImGui_Impl:

; 403  :         case VK_CAPITAL: return ImGuiKey_CapsLock;

  0017f	b8 53 02 00 00	 mov	 eax, 595		; 00000253H
  00184	e9 ce 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN31@ImGui_Impl:

; 404  :         case VK_SCROLL: return ImGuiKey_ScrollLock;

  00189	b8 54 02 00 00	 mov	 eax, 596		; 00000254H
  0018e	e9 c4 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN32@ImGui_Impl:

; 405  :         case VK_NUMLOCK: return ImGuiKey_NumLock;

  00193	b8 55 02 00 00	 mov	 eax, 597		; 00000255H
  00198	e9 ba 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN33@ImGui_Impl:

; 406  :         case VK_SNAPSHOT: return ImGuiKey_PrintScreen;

  0019d	b8 56 02 00 00	 mov	 eax, 598		; 00000256H
  001a2	e9 b0 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN34@ImGui_Impl:

; 407  :         case VK_PAUSE: return ImGuiKey_Pause;

  001a7	b8 57 02 00 00	 mov	 eax, 599		; 00000257H
  001ac	e9 a6 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN35@ImGui_Impl:

; 408  :         case VK_NUMPAD0: return ImGuiKey_Keypad0;

  001b1	b8 58 02 00 00	 mov	 eax, 600		; 00000258H
  001b6	e9 9c 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN36@ImGui_Impl:

; 409  :         case VK_NUMPAD1: return ImGuiKey_Keypad1;

  001bb	b8 59 02 00 00	 mov	 eax, 601		; 00000259H
  001c0	e9 92 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN37@ImGui_Impl:

; 410  :         case VK_NUMPAD2: return ImGuiKey_Keypad2;

  001c5	b8 5a 02 00 00	 mov	 eax, 602		; 0000025aH
  001ca	e9 88 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN38@ImGui_Impl:

; 411  :         case VK_NUMPAD3: return ImGuiKey_Keypad3;

  001cf	b8 5b 02 00 00	 mov	 eax, 603		; 0000025bH
  001d4	e9 7e 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN39@ImGui_Impl:

; 412  :         case VK_NUMPAD4: return ImGuiKey_Keypad4;

  001d9	b8 5c 02 00 00	 mov	 eax, 604		; 0000025cH
  001de	e9 74 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN40@ImGui_Impl:

; 413  :         case VK_NUMPAD5: return ImGuiKey_Keypad5;

  001e3	b8 5d 02 00 00	 mov	 eax, 605		; 0000025dH
  001e8	e9 6a 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN41@ImGui_Impl:

; 414  :         case VK_NUMPAD6: return ImGuiKey_Keypad6;

  001ed	b8 5e 02 00 00	 mov	 eax, 606		; 0000025eH
  001f2	e9 60 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN42@ImGui_Impl:

; 415  :         case VK_NUMPAD7: return ImGuiKey_Keypad7;

  001f7	b8 5f 02 00 00	 mov	 eax, 607		; 0000025fH
  001fc	e9 56 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN43@ImGui_Impl:

; 416  :         case VK_NUMPAD8: return ImGuiKey_Keypad8;

  00201	b8 60 02 00 00	 mov	 eax, 608		; 00000260H
  00206	e9 4c 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN44@ImGui_Impl:

; 417  :         case VK_NUMPAD9: return ImGuiKey_Keypad9;

  0020b	b8 61 02 00 00	 mov	 eax, 609		; 00000261H
  00210	e9 42 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN45@ImGui_Impl:

; 418  :         case VK_DECIMAL: return ImGuiKey_KeypadDecimal;

  00215	b8 62 02 00 00	 mov	 eax, 610		; 00000262H
  0021a	e9 38 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN46@ImGui_Impl:

; 419  :         case VK_DIVIDE: return ImGuiKey_KeypadDivide;

  0021f	b8 63 02 00 00	 mov	 eax, 611		; 00000263H
  00224	e9 2e 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN47@ImGui_Impl:

; 420  :         case VK_MULTIPLY: return ImGuiKey_KeypadMultiply;

  00229	b8 64 02 00 00	 mov	 eax, 612		; 00000264H
  0022e	e9 24 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN48@ImGui_Impl:

; 421  :         case VK_SUBTRACT: return ImGuiKey_KeypadSubtract;

  00233	b8 65 02 00 00	 mov	 eax, 613		; 00000265H
  00238	e9 1a 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN49@ImGui_Impl:

; 422  :         case VK_ADD: return ImGuiKey_KeypadAdd;

  0023d	b8 66 02 00 00	 mov	 eax, 614		; 00000266H
  00242	e9 10 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN50@ImGui_Impl:

; 423  :         case IM_VK_KEYPAD_ENTER: return ImGuiKey_KeypadEnter;

  00247	b8 67 02 00 00	 mov	 eax, 615		; 00000267H
  0024c	e9 06 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN51@ImGui_Impl:

; 424  :         case VK_LSHIFT: return ImGuiKey_LeftShift;

  00251	b8 10 02 00 00	 mov	 eax, 528		; 00000210H
  00256	e9 fc 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN52@ImGui_Impl:

; 425  :         case VK_LCONTROL: return ImGuiKey_LeftCtrl;

  0025b	b8 0f 02 00 00	 mov	 eax, 527		; 0000020fH
  00260	e9 f2 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN53@ImGui_Impl:

; 426  :         case VK_LMENU: return ImGuiKey_LeftAlt;

  00265	b8 11 02 00 00	 mov	 eax, 529		; 00000211H
  0026a	e9 e8 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN54@ImGui_Impl:

; 427  :         case VK_LWIN: return ImGuiKey_LeftSuper;

  0026f	b8 12 02 00 00	 mov	 eax, 530		; 00000212H
  00274	e9 de 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN55@ImGui_Impl:

; 428  :         case VK_RSHIFT: return ImGuiKey_RightShift;

  00279	b8 14 02 00 00	 mov	 eax, 532		; 00000214H
  0027e	e9 d4 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN56@ImGui_Impl:

; 429  :         case VK_RCONTROL: return ImGuiKey_RightCtrl;

  00283	b8 13 02 00 00	 mov	 eax, 531		; 00000213H
  00288	e9 ca 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN57@ImGui_Impl:

; 430  :         case VK_RMENU: return ImGuiKey_RightAlt;

  0028d	b8 15 02 00 00	 mov	 eax, 533		; 00000215H
  00292	e9 c0 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN58@ImGui_Impl:

; 431  :         case VK_RWIN: return ImGuiKey_RightSuper;

  00297	b8 16 02 00 00	 mov	 eax, 534		; 00000216H
  0029c	e9 b6 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN59@ImGui_Impl:

; 432  :         case VK_APPS: return ImGuiKey_Menu;

  002a1	b8 17 02 00 00	 mov	 eax, 535		; 00000217H
  002a6	e9 ac 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN60@ImGui_Impl:

; 433  :         case '0': return ImGuiKey_0;

  002ab	b8 18 02 00 00	 mov	 eax, 536		; 00000218H
  002b0	e9 a2 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN61@ImGui_Impl:

; 434  :         case '1': return ImGuiKey_1;

  002b5	b8 19 02 00 00	 mov	 eax, 537		; 00000219H
  002ba	e9 98 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN62@ImGui_Impl:

; 435  :         case '2': return ImGuiKey_2;

  002bf	b8 1a 02 00 00	 mov	 eax, 538		; 0000021aH
  002c4	e9 8e 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN63@ImGui_Impl:

; 436  :         case '3': return ImGuiKey_3;

  002c9	b8 1b 02 00 00	 mov	 eax, 539		; 0000021bH
  002ce	e9 84 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN64@ImGui_Impl:

; 437  :         case '4': return ImGuiKey_4;

  002d3	b8 1c 02 00 00	 mov	 eax, 540		; 0000021cH
  002d8	e9 7a 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN65@ImGui_Impl:

; 438  :         case '5': return ImGuiKey_5;

  002dd	b8 1d 02 00 00	 mov	 eax, 541		; 0000021dH
  002e2	e9 70 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN66@ImGui_Impl:

; 439  :         case '6': return ImGuiKey_6;

  002e7	b8 1e 02 00 00	 mov	 eax, 542		; 0000021eH
  002ec	e9 66 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN67@ImGui_Impl:

; 440  :         case '7': return ImGuiKey_7;

  002f1	b8 1f 02 00 00	 mov	 eax, 543		; 0000021fH
  002f6	e9 5c 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN68@ImGui_Impl:

; 441  :         case '8': return ImGuiKey_8;

  002fb	b8 20 02 00 00	 mov	 eax, 544		; 00000220H
  00300	e9 52 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN69@ImGui_Impl:

; 442  :         case '9': return ImGuiKey_9;

  00305	b8 21 02 00 00	 mov	 eax, 545		; 00000221H
  0030a	e9 48 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN70@ImGui_Impl:

; 443  :         case 'A': return ImGuiKey_A;

  0030f	b8 22 02 00 00	 mov	 eax, 546		; 00000222H
  00314	e9 3e 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN71@ImGui_Impl:

; 444  :         case 'B': return ImGuiKey_B;

  00319	b8 23 02 00 00	 mov	 eax, 547		; 00000223H
  0031e	e9 34 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN72@ImGui_Impl:

; 445  :         case 'C': return ImGuiKey_C;

  00323	b8 24 02 00 00	 mov	 eax, 548		; 00000224H
  00328	e9 2a 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN73@ImGui_Impl:

; 446  :         case 'D': return ImGuiKey_D;

  0032d	b8 25 02 00 00	 mov	 eax, 549		; 00000225H
  00332	e9 20 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN74@ImGui_Impl:

; 447  :         case 'E': return ImGuiKey_E;

  00337	b8 26 02 00 00	 mov	 eax, 550		; 00000226H
  0033c	e9 16 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN75@ImGui_Impl:

; 448  :         case 'F': return ImGuiKey_F;

  00341	b8 27 02 00 00	 mov	 eax, 551		; 00000227H
  00346	e9 0c 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN76@ImGui_Impl:

; 449  :         case 'G': return ImGuiKey_G;

  0034b	b8 28 02 00 00	 mov	 eax, 552		; 00000228H
  00350	e9 02 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN77@ImGui_Impl:

; 450  :         case 'H': return ImGuiKey_H;

  00355	b8 29 02 00 00	 mov	 eax, 553		; 00000229H
  0035a	e9 f8 00 00 00	 jmp	 $LN1@ImGui_Impl
$LN78@ImGui_Impl:

; 451  :         case 'I': return ImGuiKey_I;

  0035f	b8 2a 02 00 00	 mov	 eax, 554		; 0000022aH
  00364	e9 ee 00 00 00	 jmp	 $LN1@ImGui_Impl
$LN79@ImGui_Impl:

; 452  :         case 'J': return ImGuiKey_J;

  00369	b8 2b 02 00 00	 mov	 eax, 555		; 0000022bH
  0036e	e9 e4 00 00 00	 jmp	 $LN1@ImGui_Impl
$LN80@ImGui_Impl:

; 453  :         case 'K': return ImGuiKey_K;

  00373	b8 2c 02 00 00	 mov	 eax, 556		; 0000022cH
  00378	e9 da 00 00 00	 jmp	 $LN1@ImGui_Impl
$LN81@ImGui_Impl:

; 454  :         case 'L': return ImGuiKey_L;

  0037d	b8 2d 02 00 00	 mov	 eax, 557		; 0000022dH
  00382	e9 d0 00 00 00	 jmp	 $LN1@ImGui_Impl
$LN82@ImGui_Impl:

; 455  :         case 'M': return ImGuiKey_M;

  00387	b8 2e 02 00 00	 mov	 eax, 558		; 0000022eH
  0038c	e9 c6 00 00 00	 jmp	 $LN1@ImGui_Impl
$LN83@ImGui_Impl:

; 456  :         case 'N': return ImGuiKey_N;

  00391	b8 2f 02 00 00	 mov	 eax, 559		; 0000022fH
  00396	e9 bc 00 00 00	 jmp	 $LN1@ImGui_Impl
$LN84@ImGui_Impl:

; 457  :         case 'O': return ImGuiKey_O;

  0039b	b8 30 02 00 00	 mov	 eax, 560		; 00000230H
  003a0	e9 b2 00 00 00	 jmp	 $LN1@ImGui_Impl
$LN85@ImGui_Impl:

; 458  :         case 'P': return ImGuiKey_P;

  003a5	b8 31 02 00 00	 mov	 eax, 561		; 00000231H
  003aa	e9 a8 00 00 00	 jmp	 $LN1@ImGui_Impl
$LN86@ImGui_Impl:

; 459  :         case 'Q': return ImGuiKey_Q;

  003af	b8 32 02 00 00	 mov	 eax, 562		; 00000232H
  003b4	e9 9e 00 00 00	 jmp	 $LN1@ImGui_Impl
$LN87@ImGui_Impl:

; 460  :         case 'R': return ImGuiKey_R;

  003b9	b8 33 02 00 00	 mov	 eax, 563		; 00000233H
  003be	e9 94 00 00 00	 jmp	 $LN1@ImGui_Impl
$LN88@ImGui_Impl:

; 461  :         case 'S': return ImGuiKey_S;

  003c3	b8 34 02 00 00	 mov	 eax, 564		; 00000234H
  003c8	e9 8a 00 00 00	 jmp	 $LN1@ImGui_Impl
$LN89@ImGui_Impl:

; 462  :         case 'T': return ImGuiKey_T;

  003cd	b8 35 02 00 00	 mov	 eax, 565		; 00000235H
  003d2	e9 80 00 00 00	 jmp	 $LN1@ImGui_Impl
$LN90@ImGui_Impl:

; 463  :         case 'U': return ImGuiKey_U;

  003d7	b8 36 02 00 00	 mov	 eax, 566		; 00000236H
  003dc	eb 79		 jmp	 SHORT $LN1@ImGui_Impl
$LN91@ImGui_Impl:

; 464  :         case 'V': return ImGuiKey_V;

  003de	b8 37 02 00 00	 mov	 eax, 567		; 00000237H
  003e3	eb 72		 jmp	 SHORT $LN1@ImGui_Impl
$LN92@ImGui_Impl:

; 465  :         case 'W': return ImGuiKey_W;

  003e5	b8 38 02 00 00	 mov	 eax, 568		; 00000238H
  003ea	eb 6b		 jmp	 SHORT $LN1@ImGui_Impl
$LN93@ImGui_Impl:

; 466  :         case 'X': return ImGuiKey_X;

  003ec	b8 39 02 00 00	 mov	 eax, 569		; 00000239H
  003f1	eb 64		 jmp	 SHORT $LN1@ImGui_Impl
$LN94@ImGui_Impl:

; 467  :         case 'Y': return ImGuiKey_Y;

  003f3	b8 3a 02 00 00	 mov	 eax, 570		; 0000023aH
  003f8	eb 5d		 jmp	 SHORT $LN1@ImGui_Impl
$LN95@ImGui_Impl:

; 468  :         case 'Z': return ImGuiKey_Z;

  003fa	b8 3b 02 00 00	 mov	 eax, 571		; 0000023bH
  003ff	eb 56		 jmp	 SHORT $LN1@ImGui_Impl
$LN96@ImGui_Impl:

; 469  :         case VK_F1: return ImGuiKey_F1;

  00401	b8 3c 02 00 00	 mov	 eax, 572		; 0000023cH
  00406	eb 4f		 jmp	 SHORT $LN1@ImGui_Impl
$LN97@ImGui_Impl:

; 470  :         case VK_F2: return ImGuiKey_F2;

  00408	b8 3d 02 00 00	 mov	 eax, 573		; 0000023dH
  0040d	eb 48		 jmp	 SHORT $LN1@ImGui_Impl
$LN98@ImGui_Impl:

; 471  :         case VK_F3: return ImGuiKey_F3;

  0040f	b8 3e 02 00 00	 mov	 eax, 574		; 0000023eH
  00414	eb 41		 jmp	 SHORT $LN1@ImGui_Impl
$LN99@ImGui_Impl:

; 472  :         case VK_F4: return ImGuiKey_F4;

  00416	b8 3f 02 00 00	 mov	 eax, 575		; 0000023fH
  0041b	eb 3a		 jmp	 SHORT $LN1@ImGui_Impl
$LN100@ImGui_Impl:

; 473  :         case VK_F5: return ImGuiKey_F5;

  0041d	b8 40 02 00 00	 mov	 eax, 576		; 00000240H
  00422	eb 33		 jmp	 SHORT $LN1@ImGui_Impl
$LN101@ImGui_Impl:

; 474  :         case VK_F6: return ImGuiKey_F6;

  00424	b8 41 02 00 00	 mov	 eax, 577		; 00000241H
  00429	eb 2c		 jmp	 SHORT $LN1@ImGui_Impl
$LN102@ImGui_Impl:

; 475  :         case VK_F7: return ImGuiKey_F7;

  0042b	b8 42 02 00 00	 mov	 eax, 578		; 00000242H
  00430	eb 25		 jmp	 SHORT $LN1@ImGui_Impl
$LN103@ImGui_Impl:

; 476  :         case VK_F8: return ImGuiKey_F8;

  00432	b8 43 02 00 00	 mov	 eax, 579		; 00000243H
  00437	eb 1e		 jmp	 SHORT $LN1@ImGui_Impl
$LN104@ImGui_Impl:

; 477  :         case VK_F9: return ImGuiKey_F9;

  00439	b8 44 02 00 00	 mov	 eax, 580		; 00000244H
  0043e	eb 17		 jmp	 SHORT $LN1@ImGui_Impl
$LN105@ImGui_Impl:

; 478  :         case VK_F10: return ImGuiKey_F10;

  00440	b8 45 02 00 00	 mov	 eax, 581		; 00000245H
  00445	eb 10		 jmp	 SHORT $LN1@ImGui_Impl
$LN106@ImGui_Impl:

; 479  :         case VK_F11: return ImGuiKey_F11;

  00447	b8 46 02 00 00	 mov	 eax, 582		; 00000246H
  0044c	eb 09		 jmp	 SHORT $LN1@ImGui_Impl
$LN107@ImGui_Impl:

; 480  :         case VK_F12: return ImGuiKey_F12;

  0044e	b8 47 02 00 00	 mov	 eax, 583		; 00000247H
  00453	eb 02		 jmp	 SHORT $LN1@ImGui_Impl
$LN108@ImGui_Impl:

; 481  :         default: return ImGuiKey_None;

  00455	33 c0		 xor	 eax, eax
$LN1@ImGui_Impl:

; 482  :     }
; 483  : }

  00457	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0045e	5f		 pop	 rdi
  0045f	5d		 pop	 rbp
  00460	c3		 ret	 0
  00461	0f 1f 00	 npad	 3
$LN111@ImGui_Impl:
  00464	00 00 00 00	 DD	 $LN15@ImGui_Impl
  00468	00 00 00 00	 DD	 $LN4@ImGui_Impl
  0046c	00 00 00 00	 DD	 $LN17@ImGui_Impl
  00470	00 00 00 00	 DD	 $LN34@ImGui_Impl
  00474	00 00 00 00	 DD	 $LN30@ImGui_Impl
  00478	00 00 00 00	 DD	 $LN18@ImGui_Impl
  0047c	00 00 00 00	 DD	 $LN16@ImGui_Impl
  00480	00 00 00 00	 DD	 $LN9@ImGui_Impl
  00484	00 00 00 00	 DD	 $LN10@ImGui_Impl
  00488	00 00 00 00	 DD	 $LN12@ImGui_Impl
  0048c	00 00 00 00	 DD	 $LN11@ImGui_Impl
  00490	00 00 00 00	 DD	 $LN5@ImGui_Impl
  00494	00 00 00 00	 DD	 $LN7@ImGui_Impl
  00498	00 00 00 00	 DD	 $LN6@ImGui_Impl
  0049c	00 00 00 00	 DD	 $LN8@ImGui_Impl
  004a0	00 00 00 00	 DD	 $LN33@ImGui_Impl
  004a4	00 00 00 00	 DD	 $LN13@ImGui_Impl
  004a8	00 00 00 00	 DD	 $LN14@ImGui_Impl
  004ac	00 00 00 00	 DD	 $LN60@ImGui_Impl
  004b0	00 00 00 00	 DD	 $LN61@ImGui_Impl
  004b4	00 00 00 00	 DD	 $LN62@ImGui_Impl
  004b8	00 00 00 00	 DD	 $LN63@ImGui_Impl
  004bc	00 00 00 00	 DD	 $LN64@ImGui_Impl
  004c0	00 00 00 00	 DD	 $LN65@ImGui_Impl
  004c4	00 00 00 00	 DD	 $LN66@ImGui_Impl
  004c8	00 00 00 00	 DD	 $LN67@ImGui_Impl
  004cc	00 00 00 00	 DD	 $LN68@ImGui_Impl
  004d0	00 00 00 00	 DD	 $LN69@ImGui_Impl
  004d4	00 00 00 00	 DD	 $LN70@ImGui_Impl
  004d8	00 00 00 00	 DD	 $LN71@ImGui_Impl
  004dc	00 00 00 00	 DD	 $LN72@ImGui_Impl
  004e0	00 00 00 00	 DD	 $LN73@ImGui_Impl
  004e4	00 00 00 00	 DD	 $LN74@ImGui_Impl
  004e8	00 00 00 00	 DD	 $LN75@ImGui_Impl
  004ec	00 00 00 00	 DD	 $LN76@ImGui_Impl
  004f0	00 00 00 00	 DD	 $LN77@ImGui_Impl
  004f4	00 00 00 00	 DD	 $LN78@ImGui_Impl
  004f8	00 00 00 00	 DD	 $LN79@ImGui_Impl
  004fc	00 00 00 00	 DD	 $LN80@ImGui_Impl
  00500	00 00 00 00	 DD	 $LN81@ImGui_Impl
  00504	00 00 00 00	 DD	 $LN82@ImGui_Impl
  00508	00 00 00 00	 DD	 $LN83@ImGui_Impl
  0050c	00 00 00 00	 DD	 $LN84@ImGui_Impl
  00510	00 00 00 00	 DD	 $LN85@ImGui_Impl
  00514	00 00 00 00	 DD	 $LN86@ImGui_Impl
  00518	00 00 00 00	 DD	 $LN87@ImGui_Impl
  0051c	00 00 00 00	 DD	 $LN88@ImGui_Impl
  00520	00 00 00 00	 DD	 $LN89@ImGui_Impl
  00524	00 00 00 00	 DD	 $LN90@ImGui_Impl
  00528	00 00 00 00	 DD	 $LN91@ImGui_Impl
  0052c	00 00 00 00	 DD	 $LN92@ImGui_Impl
  00530	00 00 00 00	 DD	 $LN93@ImGui_Impl
  00534	00 00 00 00	 DD	 $LN94@ImGui_Impl
  00538	00 00 00 00	 DD	 $LN95@ImGui_Impl
  0053c	00 00 00 00	 DD	 $LN54@ImGui_Impl
  00540	00 00 00 00	 DD	 $LN58@ImGui_Impl
  00544	00 00 00 00	 DD	 $LN59@ImGui_Impl
  00548	00 00 00 00	 DD	 $LN35@ImGui_Impl
  0054c	00 00 00 00	 DD	 $LN36@ImGui_Impl
  00550	00 00 00 00	 DD	 $LN37@ImGui_Impl
  00554	00 00 00 00	 DD	 $LN38@ImGui_Impl
  00558	00 00 00 00	 DD	 $LN39@ImGui_Impl
  0055c	00 00 00 00	 DD	 $LN40@ImGui_Impl
  00560	00 00 00 00	 DD	 $LN41@ImGui_Impl
  00564	00 00 00 00	 DD	 $LN42@ImGui_Impl
  00568	00 00 00 00	 DD	 $LN43@ImGui_Impl
  0056c	00 00 00 00	 DD	 $LN44@ImGui_Impl
  00570	00 00 00 00	 DD	 $LN47@ImGui_Impl
  00574	00 00 00 00	 DD	 $LN49@ImGui_Impl
  00578	00 00 00 00	 DD	 $LN48@ImGui_Impl
  0057c	00 00 00 00	 DD	 $LN45@ImGui_Impl
  00580	00 00 00 00	 DD	 $LN46@ImGui_Impl
  00584	00 00 00 00	 DD	 $LN96@ImGui_Impl
  00588	00 00 00 00	 DD	 $LN97@ImGui_Impl
  0058c	00 00 00 00	 DD	 $LN98@ImGui_Impl
  00590	00 00 00 00	 DD	 $LN99@ImGui_Impl
  00594	00 00 00 00	 DD	 $LN100@ImGui_Impl
  00598	00 00 00 00	 DD	 $LN101@ImGui_Impl
  0059c	00 00 00 00	 DD	 $LN102@ImGui_Impl
  005a0	00 00 00 00	 DD	 $LN103@ImGui_Impl
  005a4	00 00 00 00	 DD	 $LN104@ImGui_Impl
  005a8	00 00 00 00	 DD	 $LN105@ImGui_Impl
  005ac	00 00 00 00	 DD	 $LN106@ImGui_Impl
  005b0	00 00 00 00	 DD	 $LN107@ImGui_Impl
  005b4	00 00 00 00	 DD	 $LN32@ImGui_Impl
  005b8	00 00 00 00	 DD	 $LN31@ImGui_Impl
  005bc	00 00 00 00	 DD	 $LN51@ImGui_Impl
  005c0	00 00 00 00	 DD	 $LN55@ImGui_Impl
  005c4	00 00 00 00	 DD	 $LN52@ImGui_Impl
  005c8	00 00 00 00	 DD	 $LN56@ImGui_Impl
  005cc	00 00 00 00	 DD	 $LN53@ImGui_Impl
  005d0	00 00 00 00	 DD	 $LN57@ImGui_Impl
  005d4	00 00 00 00	 DD	 $LN24@ImGui_Impl
  005d8	00 00 00 00	 DD	 $LN25@ImGui_Impl
  005dc	00 00 00 00	 DD	 $LN20@ImGui_Impl
  005e0	00 00 00 00	 DD	 $LN21@ImGui_Impl
  005e4	00 00 00 00	 DD	 $LN22@ImGui_Impl
  005e8	00 00 00 00	 DD	 $LN23@ImGui_Impl
  005ec	00 00 00 00	 DD	 $LN29@ImGui_Impl
  005f0	00 00 00 00	 DD	 $LN26@ImGui_Impl
  005f4	00 00 00 00	 DD	 $LN27@ImGui_Impl
  005f8	00 00 00 00	 DD	 $LN28@ImGui_Impl
  005fc	00 00 00 00	 DD	 $LN19@ImGui_Impl
  00600	00 00 00 00	 DD	 $LN50@ImGui_Impl
  00604	00 00 00 00	 DD	 $LN108@ImGui_Impl
$LN110@ImGui_Impl:
  00608	00		 DB	 0
  00609	01		 DB	 1
  0060a	68		 DB	 104			; 00000068H
  0060b	68		 DB	 104			; 00000068H
  0060c	68		 DB	 104			; 00000068H
  0060d	02		 DB	 2
  0060e	68		 DB	 104			; 00000068H
  0060f	68		 DB	 104			; 00000068H
  00610	68		 DB	 104			; 00000068H
  00611	68		 DB	 104			; 00000068H
  00612	68		 DB	 104			; 00000068H
  00613	03		 DB	 3
  00614	04		 DB	 4
  00615	68		 DB	 104			; 00000068H
  00616	68		 DB	 104			; 00000068H
  00617	68		 DB	 104			; 00000068H
  00618	68		 DB	 104			; 00000068H
  00619	68		 DB	 104			; 00000068H
  0061a	68		 DB	 104			; 00000068H
  0061b	05		 DB	 5
  0061c	68		 DB	 104			; 00000068H
  0061d	68		 DB	 104			; 00000068H
  0061e	68		 DB	 104			; 00000068H
  0061f	68		 DB	 104			; 00000068H
  00620	06		 DB	 6
  00621	07		 DB	 7
  00622	08		 DB	 8
  00623	09		 DB	 9
  00624	0a		 DB	 10
  00625	0b		 DB	 11
  00626	0c		 DB	 12
  00627	0d		 DB	 13
  00628	0e		 DB	 14
  00629	68		 DB	 104			; 00000068H
  0062a	68		 DB	 104			; 00000068H
  0062b	68		 DB	 104			; 00000068H
  0062c	0f		 DB	 15
  0062d	10		 DB	 16
  0062e	11		 DB	 17
  0062f	68		 DB	 104			; 00000068H
  00630	12		 DB	 18
  00631	13		 DB	 19
  00632	14		 DB	 20
  00633	15		 DB	 21
  00634	16		 DB	 22
  00635	17		 DB	 23
  00636	18		 DB	 24
  00637	19		 DB	 25
  00638	1a		 DB	 26
  00639	1b		 DB	 27
  0063a	68		 DB	 104			; 00000068H
  0063b	68		 DB	 104			; 00000068H
  0063c	68		 DB	 104			; 00000068H
  0063d	68		 DB	 104			; 00000068H
  0063e	68		 DB	 104			; 00000068H
  0063f	68		 DB	 104			; 00000068H
  00640	68		 DB	 104			; 00000068H
  00641	1c		 DB	 28
  00642	1d		 DB	 29
  00643	1e		 DB	 30
  00644	1f		 DB	 31
  00645	20		 DB	 32			; 00000020H
  00646	21		 DB	 33			; 00000021H
  00647	22		 DB	 34			; 00000022H
  00648	23		 DB	 35			; 00000023H
  00649	24		 DB	 36			; 00000024H
  0064a	25		 DB	 37			; 00000025H
  0064b	26		 DB	 38			; 00000026H
  0064c	27		 DB	 39			; 00000027H
  0064d	28		 DB	 40			; 00000028H
  0064e	29		 DB	 41			; 00000029H
  0064f	2a		 DB	 42			; 0000002aH
  00650	2b		 DB	 43			; 0000002bH
  00651	2c		 DB	 44			; 0000002cH
  00652	2d		 DB	 45			; 0000002dH
  00653	2e		 DB	 46			; 0000002eH
  00654	2f		 DB	 47			; 0000002fH
  00655	30		 DB	 48			; 00000030H
  00656	31		 DB	 49			; 00000031H
  00657	32		 DB	 50			; 00000032H
  00658	33		 DB	 51			; 00000033H
  00659	34		 DB	 52			; 00000034H
  0065a	35		 DB	 53			; 00000035H
  0065b	36		 DB	 54			; 00000036H
  0065c	37		 DB	 55			; 00000037H
  0065d	38		 DB	 56			; 00000038H
  0065e	68		 DB	 104			; 00000068H
  0065f	68		 DB	 104			; 00000068H
  00660	39		 DB	 57			; 00000039H
  00661	3a		 DB	 58			; 0000003aH
  00662	3b		 DB	 59			; 0000003bH
  00663	3c		 DB	 60			; 0000003cH
  00664	3d		 DB	 61			; 0000003dH
  00665	3e		 DB	 62			; 0000003eH
  00666	3f		 DB	 63			; 0000003fH
  00667	40		 DB	 64			; 00000040H
  00668	41		 DB	 65			; 00000041H
  00669	42		 DB	 66			; 00000042H
  0066a	43		 DB	 67			; 00000043H
  0066b	44		 DB	 68			; 00000044H
  0066c	68		 DB	 104			; 00000068H
  0066d	45		 DB	 69			; 00000045H
  0066e	46		 DB	 70			; 00000046H
  0066f	47		 DB	 71			; 00000047H
  00670	48		 DB	 72			; 00000048H
  00671	49		 DB	 73			; 00000049H
  00672	4a		 DB	 74			; 0000004aH
  00673	4b		 DB	 75			; 0000004bH
  00674	4c		 DB	 76			; 0000004cH
  00675	4d		 DB	 77			; 0000004dH
  00676	4e		 DB	 78			; 0000004eH
  00677	4f		 DB	 79			; 0000004fH
  00678	50		 DB	 80			; 00000050H
  00679	51		 DB	 81			; 00000051H
  0067a	52		 DB	 82			; 00000052H
  0067b	53		 DB	 83			; 00000053H
  0067c	68		 DB	 104			; 00000068H
  0067d	68		 DB	 104			; 00000068H
  0067e	68		 DB	 104			; 00000068H
  0067f	68		 DB	 104			; 00000068H
  00680	68		 DB	 104			; 00000068H
  00681	68		 DB	 104			; 00000068H
  00682	68		 DB	 104			; 00000068H
  00683	68		 DB	 104			; 00000068H
  00684	68		 DB	 104			; 00000068H
  00685	68		 DB	 104			; 00000068H
  00686	68		 DB	 104			; 00000068H
  00687	68		 DB	 104			; 00000068H
  00688	68		 DB	 104			; 00000068H
  00689	68		 DB	 104			; 00000068H
  0068a	68		 DB	 104			; 00000068H
  0068b	68		 DB	 104			; 00000068H
  0068c	68		 DB	 104			; 00000068H
  0068d	68		 DB	 104			; 00000068H
  0068e	68		 DB	 104			; 00000068H
  0068f	68		 DB	 104			; 00000068H
  00690	54		 DB	 84			; 00000054H
  00691	55		 DB	 85			; 00000055H
  00692	68		 DB	 104			; 00000068H
  00693	68		 DB	 104			; 00000068H
  00694	68		 DB	 104			; 00000068H
  00695	68		 DB	 104			; 00000068H
  00696	68		 DB	 104			; 00000068H
  00697	68		 DB	 104			; 00000068H
  00698	68		 DB	 104			; 00000068H
  00699	68		 DB	 104			; 00000068H
  0069a	68		 DB	 104			; 00000068H
  0069b	68		 DB	 104			; 00000068H
  0069c	68		 DB	 104			; 00000068H
  0069d	68		 DB	 104			; 00000068H
  0069e	68		 DB	 104			; 00000068H
  0069f	68		 DB	 104			; 00000068H
  006a0	56		 DB	 86			; 00000056H
  006a1	57		 DB	 87			; 00000057H
  006a2	58		 DB	 88			; 00000058H
  006a3	59		 DB	 89			; 00000059H
  006a4	5a		 DB	 90			; 0000005aH
  006a5	5b		 DB	 91			; 0000005bH
  006a6	68		 DB	 104			; 00000068H
  006a7	68		 DB	 104			; 00000068H
  006a8	68		 DB	 104			; 00000068H
  006a9	68		 DB	 104			; 00000068H
  006aa	68		 DB	 104			; 00000068H
  006ab	68		 DB	 104			; 00000068H
  006ac	68		 DB	 104			; 00000068H
  006ad	68		 DB	 104			; 00000068H
  006ae	68		 DB	 104			; 00000068H
  006af	68		 DB	 104			; 00000068H
  006b0	68		 DB	 104			; 00000068H
  006b1	68		 DB	 104			; 00000068H
  006b2	68		 DB	 104			; 00000068H
  006b3	68		 DB	 104			; 00000068H
  006b4	68		 DB	 104			; 00000068H
  006b5	68		 DB	 104			; 00000068H
  006b6	68		 DB	 104			; 00000068H
  006b7	68		 DB	 104			; 00000068H
  006b8	68		 DB	 104			; 00000068H
  006b9	68		 DB	 104			; 00000068H
  006ba	5c		 DB	 92			; 0000005cH
  006bb	5d		 DB	 93			; 0000005dH
  006bc	5e		 DB	 94			; 0000005eH
  006bd	5f		 DB	 95			; 0000005fH
  006be	60		 DB	 96			; 00000060H
  006bf	61		 DB	 97			; 00000061H
  006c0	62		 DB	 98			; 00000062H
  006c1	68		 DB	 104			; 00000068H
  006c2	68		 DB	 104			; 00000068H
  006c3	68		 DB	 104			; 00000068H
  006c4	68		 DB	 104			; 00000068H
  006c5	68		 DB	 104			; 00000068H
  006c6	68		 DB	 104			; 00000068H
  006c7	68		 DB	 104			; 00000068H
  006c8	68		 DB	 104			; 00000068H
  006c9	68		 DB	 104			; 00000068H
  006ca	68		 DB	 104			; 00000068H
  006cb	68		 DB	 104			; 00000068H
  006cc	68		 DB	 104			; 00000068H
  006cd	68		 DB	 104			; 00000068H
  006ce	68		 DB	 104			; 00000068H
  006cf	68		 DB	 104			; 00000068H
  006d0	68		 DB	 104			; 00000068H
  006d1	68		 DB	 104			; 00000068H
  006d2	68		 DB	 104			; 00000068H
  006d3	68		 DB	 104			; 00000068H
  006d4	68		 DB	 104			; 00000068H
  006d5	68		 DB	 104			; 00000068H
  006d6	68		 DB	 104			; 00000068H
  006d7	68		 DB	 104			; 00000068H
  006d8	68		 DB	 104			; 00000068H
  006d9	68		 DB	 104			; 00000068H
  006da	68		 DB	 104			; 00000068H
  006db	63		 DB	 99			; 00000063H
  006dc	64		 DB	 100			; 00000064H
  006dd	65		 DB	 101			; 00000065H
  006de	66		 DB	 102			; 00000066H
  006df	68		 DB	 104			; 00000068H
  006e0	68		 DB	 104			; 00000068H
  006e1	68		 DB	 104			; 00000068H
  006e2	68		 DB	 104			; 00000068H
  006e3	68		 DB	 104			; 00000068H
  006e4	68		 DB	 104			; 00000068H
  006e5	68		 DB	 104			; 00000068H
  006e6	68		 DB	 104			; 00000068H
  006e7	68		 DB	 104			; 00000068H
  006e8	68		 DB	 104			; 00000068H
  006e9	68		 DB	 104			; 00000068H
  006ea	68		 DB	 104			; 00000068H
  006eb	68		 DB	 104			; 00000068H
  006ec	68		 DB	 104			; 00000068H
  006ed	68		 DB	 104			; 00000068H
  006ee	68		 DB	 104			; 00000068H
  006ef	68		 DB	 104			; 00000068H
  006f0	68		 DB	 104			; 00000068H
  006f1	68		 DB	 104			; 00000068H
  006f2	68		 DB	 104			; 00000068H
  006f3	68		 DB	 104			; 00000068H
  006f4	68		 DB	 104			; 00000068H
  006f5	68		 DB	 104			; 00000068H
  006f6	68		 DB	 104			; 00000068H
  006f7	68		 DB	 104			; 00000068H
  006f8	68		 DB	 104			; 00000068H
  006f9	68		 DB	 104			; 00000068H
  006fa	68		 DB	 104			; 00000068H
  006fb	68		 DB	 104			; 00000068H
  006fc	68		 DB	 104			; 00000068H
  006fd	68		 DB	 104			; 00000068H
  006fe	68		 DB	 104			; 00000068H
  006ff	68		 DB	 104			; 00000068H
  00700	68		 DB	 104			; 00000068H
  00701	68		 DB	 104			; 00000068H
  00702	68		 DB	 104			; 00000068H
  00703	68		 DB	 104			; 00000068H
  00704	68		 DB	 104			; 00000068H
  00705	68		 DB	 104			; 00000068H
  00706	68		 DB	 104			; 00000068H
  00707	68		 DB	 104			; 00000068H
  00708	68		 DB	 104			; 00000068H
  00709	68		 DB	 104			; 00000068H
  0070a	68		 DB	 104			; 00000068H
  0070b	68		 DB	 104			; 00000068H
  0070c	68		 DB	 104			; 00000068H
  0070d	67		 DB	 103			; 00000067H
?ImGui_ImplWin32_VirtualKeyToImGuiKey@@YA?AW4ImGuiKey@@_K@Z ENDP ; ImGui_ImplWin32_VirtualKeyToImGuiKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_impl_win32.cpp
;	COMDAT ?ImGui_ImplWin32_UpdateGamepads@@YAXXZ
_TEXT	SEGMENT
io$ = 8
bd$ = 40
caps$5 = 72
xinput_state$ = 120
gamepad$ = 168
vn$6 = 196
vn$7 = 228
vn$8 = 260
vn$9 = 292
vn$10 = 324
vn$11 = 356
vn$12 = 388
vn$13 = 420
vn$14 = 452
vn$15 = 484
tv390 = 692
tv375 = 692
tv360 = 692
tv345 = 692
tv330 = 692
tv315 = 692
tv300 = 692
tv285 = 692
tv273 = 692
tv265 = 692
tv254 = 692
tv239 = 692
tv227 = 692
tv219 = 692
tv211 = 692
tv203 = 692
tv195 = 692
tv187 = 692
tv179 = 692
tv171 = 692
tv163 = 692
tv155 = 692
tv147 = 692
tv139 = 692
tv81 = 692
tv389 = 696
tv374 = 696
tv359 = 696
tv344 = 696
tv329 = 696
tv314 = 696
tv299 = 696
tv284 = 696
tv253 = 696
tv238 = 696
tv83 = 696
tv393 = 700
tv378 = 700
tv363 = 700
tv348 = 700
tv333 = 700
tv318 = 700
tv303 = 700
tv288 = 700
tv257 = 700
tv242 = 700
__$ArrayPad$ = 704
?ImGui_ImplWin32_UpdateGamepads@@YAXXZ PROC		; ImGui_ImplWin32_UpdateGamepads, COMDAT

; 279  : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec f8 02
	00 00		 sub	 rsp, 760		; 000002f8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 be 00 00 00	 mov	 ecx, 190		; 000000beH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00025	48 33 c5	 xor	 rax, rbp
  00028	48 89 85 c0 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 280  : #ifndef IMGUI_IMPL_WIN32_DISABLE_GAMEPAD
; 281  :     ImGuiIO& io = ImGui::GetIO();

  0002f	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  00034	48 89 45 08	 mov	 QWORD PTR io$[rbp], rax

; 282  :     ImGui_ImplWin32_Data* bd = ImGui_ImplWin32_GetBackendData();

  00038	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_GetBackendData@@YAPEAUImGui_ImplWin32_Data@@XZ ; ImGui_ImplWin32_GetBackendData
  0003d	48 89 45 28	 mov	 QWORD PTR bd$[rbp], rax

; 283  :     //if ((io.ConfigFlags & ImGuiConfigFlags_NavEnableGamepad) == 0) // FIXME: Technically feeding gamepad shouldn't depend on this now that they are regular inputs.
; 284  :     //    return;
; 285  : 
; 286  :     // Calling XInputGetState() every frame on disconnected gamepads is unfortunately too slow.
; 287  :     // Instead we refresh gamepad availability by calling XInputGetCapabilities() _only_ after receiving WM_DEVICECHANGE.
; 288  :     if (bd->WantUpdateHasGamepad)

  00041	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  00045	0f b6 40 2d	 movzx	 eax, BYTE PTR [rax+45]
  00049	85 c0		 test	 eax, eax
  0004b	74 75		 je	 SHORT $LN2@ImGui_Impl

; 289  :     {
; 290  :         XINPUT_CAPABILITIES caps = {};

  0004d	48 8d 45 48	 lea	 rax, QWORD PTR caps$5[rbp]
  00051	48 8b f8	 mov	 rdi, rax
  00054	33 c0		 xor	 eax, eax
  00056	b9 14 00 00 00	 mov	 ecx, 20
  0005b	f3 aa		 rep stosb

; 291  :         bd->HasGamepad = bd->XInputGetCapabilities ? (bd->XInputGetCapabilities(0, XINPUT_FLAG_GAMEPAD, &caps) == ERROR_SUCCESS) : false;

  0005d	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  00061	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00066	74 3a		 je	 SHORT $LN8@ImGui_Impl
  00068	4c 8d 45 48	 lea	 r8, QWORD PTR caps$5[rbp]
  0006c	ba 01 00 00 00	 mov	 edx, 1
  00071	33 c9		 xor	 ecx, ecx
  00073	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  00077	ff 50 38	 call	 QWORD PTR [rax+56]
  0007a	85 c0		 test	 eax, eax
  0007c	75 0c		 jne	 SHORT $LN6@ImGui_Impl
  0007e	c7 85 b4 02 00
	00 01 00 00 00	 mov	 DWORD PTR tv81[rbp], 1
  00088	eb 0a		 jmp	 SHORT $LN7@ImGui_Impl
$LN6@ImGui_Impl:
  0008a	c7 85 b4 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv81[rbp], 0
$LN7@ImGui_Impl:
  00094	8b 85 b4 02 00
	00		 mov	 eax, DWORD PTR tv81[rbp]
  0009a	89 85 b8 02 00
	00		 mov	 DWORD PTR tv83[rbp], eax
  000a0	eb 0a		 jmp	 SHORT $LN9@ImGui_Impl
$LN8@ImGui_Impl:
  000a2	c7 85 b8 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv83[rbp], 0
$LN9@ImGui_Impl:
  000ac	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  000b0	0f b6 8d b8 02
	00 00		 movzx	 ecx, BYTE PTR tv83[rbp]
  000b7	88 48 2c	 mov	 BYTE PTR [rax+44], cl

; 292  :         bd->WantUpdateHasGamepad = false;

  000ba	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  000be	c6 40 2d 00	 mov	 BYTE PTR [rax+45], 0
$LN2@ImGui_Impl:

; 293  :     }
; 294  : 
; 295  :     io.BackendFlags &= ~ImGuiBackendFlags_HasGamepad;

  000c2	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  000c6	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  000c9	83 e0 fe	 and	 eax, -2
  000cc	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  000d0	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 296  :     XINPUT_STATE xinput_state;
; 297  :     XINPUT_GAMEPAD& gamepad = xinput_state.Gamepad;

  000d3	48 8d 45 7c	 lea	 rax, QWORD PTR xinput_state$[rbp+4]
  000d7	48 89 85 a8 00
	00 00		 mov	 QWORD PTR gamepad$[rbp], rax

; 298  :     if (!bd->HasGamepad || bd->XInputGetState == nullptr || bd->XInputGetState(0, &xinput_state) != ERROR_SUCCESS)

  000de	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  000e2	0f b6 40 2c	 movzx	 eax, BYTE PTR [rax+44]
  000e6	85 c0		 test	 eax, eax
  000e8	74 1c		 je	 SHORT $LN4@ImGui_Impl
  000ea	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  000ee	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  000f3	74 11		 je	 SHORT $LN4@ImGui_Impl
  000f5	48 8d 55 78	 lea	 rdx, QWORD PTR xinput_state$[rbp]
  000f9	33 c9		 xor	 ecx, ecx
  000fb	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  000ff	ff 50 40	 call	 QWORD PTR [rax+64]
  00102	85 c0		 test	 eax, eax
  00104	74 05		 je	 SHORT $LN3@ImGui_Impl
$LN4@ImGui_Impl:

; 299  :         return;

  00106	e9 93 0a 00 00	 jmp	 $LN1@ImGui_Impl
$LN3@ImGui_Impl:

; 300  :     io.BackendFlags |= ImGuiBackendFlags_HasGamepad;

  0010b	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  0010f	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00112	83 c8 01	 or	 eax, 1
  00115	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00119	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 301  : 
; 302  :     #define IM_SATURATE(V)                      (V < 0.0f ? 0.0f : V > 1.0f ? 1.0f : V)
; 303  :     #define MAP_BUTTON(KEY_NO, BUTTON_ENUM)     { io.AddKeyEvent(KEY_NO, (gamepad.wButtons & BUTTON_ENUM) != 0); }
; 304  :     #define MAP_ANALOG(KEY_NO, VALUE, V0, V1)   { float vn = (float)(VALUE - V0) / (float)(V1 - V0); io.AddKeyAnalogEvent(KEY_NO, vn > 0.10f, IM_SATURATE(vn)); }
; 305  :     MAP_BUTTON(ImGuiKey_GamepadStart,           XINPUT_GAMEPAD_START);

  0011c	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  00123	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00126	83 e0 10	 and	 eax, 16
  00129	85 c0		 test	 eax, eax
  0012b	74 09		 je	 SHORT $LN10@ImGui_Impl
  0012d	c6 85 b4 02 00
	00 01		 mov	 BYTE PTR tv139[rbp], 1
  00134	eb 07		 jmp	 SHORT $LN11@ImGui_Impl
$LN10@ImGui_Impl:
  00136	c6 85 b4 02 00
	00 00		 mov	 BYTE PTR tv139[rbp], 0
$LN11@ImGui_Impl:
  0013d	44 0f b6 85 b4
	02 00 00	 movzx	 r8d, BYTE PTR tv139[rbp]
  00145	ba 69 02 00 00	 mov	 edx, 617		; 00000269H
  0014a	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  0014e	e8 00 00 00 00	 call	 ?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z ; ImGuiIO::AddKeyEvent

; 306  :     MAP_BUTTON(ImGuiKey_GamepadBack,            XINPUT_GAMEPAD_BACK);

  00153	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  0015a	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0015d	83 e0 20	 and	 eax, 32			; 00000020H
  00160	85 c0		 test	 eax, eax
  00162	74 09		 je	 SHORT $LN12@ImGui_Impl
  00164	c6 85 b4 02 00
	00 01		 mov	 BYTE PTR tv147[rbp], 1
  0016b	eb 07		 jmp	 SHORT $LN13@ImGui_Impl
$LN12@ImGui_Impl:
  0016d	c6 85 b4 02 00
	00 00		 mov	 BYTE PTR tv147[rbp], 0
$LN13@ImGui_Impl:
  00174	44 0f b6 85 b4
	02 00 00	 movzx	 r8d, BYTE PTR tv147[rbp]
  0017c	ba 6a 02 00 00	 mov	 edx, 618		; 0000026aH
  00181	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00185	e8 00 00 00 00	 call	 ?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z ; ImGuiIO::AddKeyEvent

; 307  :     MAP_BUTTON(ImGuiKey_GamepadFaceLeft,        XINPUT_GAMEPAD_X);

  0018a	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  00191	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00194	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00199	85 c0		 test	 eax, eax
  0019b	74 09		 je	 SHORT $LN14@ImGui_Impl
  0019d	c6 85 b4 02 00
	00 01		 mov	 BYTE PTR tv155[rbp], 1
  001a4	eb 07		 jmp	 SHORT $LN15@ImGui_Impl
$LN14@ImGui_Impl:
  001a6	c6 85 b4 02 00
	00 00		 mov	 BYTE PTR tv155[rbp], 0
$LN15@ImGui_Impl:
  001ad	44 0f b6 85 b4
	02 00 00	 movzx	 r8d, BYTE PTR tv155[rbp]
  001b5	ba 6b 02 00 00	 mov	 edx, 619		; 0000026bH
  001ba	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  001be	e8 00 00 00 00	 call	 ?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z ; ImGuiIO::AddKeyEvent

; 308  :     MAP_BUTTON(ImGuiKey_GamepadFaceRight,       XINPUT_GAMEPAD_B);

  001c3	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  001ca	0f b7 00	 movzx	 eax, WORD PTR [rax]
  001cd	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  001d2	85 c0		 test	 eax, eax
  001d4	74 09		 je	 SHORT $LN16@ImGui_Impl
  001d6	c6 85 b4 02 00
	00 01		 mov	 BYTE PTR tv163[rbp], 1
  001dd	eb 07		 jmp	 SHORT $LN17@ImGui_Impl
$LN16@ImGui_Impl:
  001df	c6 85 b4 02 00
	00 00		 mov	 BYTE PTR tv163[rbp], 0
$LN17@ImGui_Impl:
  001e6	44 0f b6 85 b4
	02 00 00	 movzx	 r8d, BYTE PTR tv163[rbp]
  001ee	ba 6c 02 00 00	 mov	 edx, 620		; 0000026cH
  001f3	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  001f7	e8 00 00 00 00	 call	 ?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z ; ImGuiIO::AddKeyEvent

; 309  :     MAP_BUTTON(ImGuiKey_GamepadFaceUp,          XINPUT_GAMEPAD_Y);

  001fc	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  00203	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00206	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  0020b	85 c0		 test	 eax, eax
  0020d	74 09		 je	 SHORT $LN18@ImGui_Impl
  0020f	c6 85 b4 02 00
	00 01		 mov	 BYTE PTR tv171[rbp], 1
  00216	eb 07		 jmp	 SHORT $LN19@ImGui_Impl
$LN18@ImGui_Impl:
  00218	c6 85 b4 02 00
	00 00		 mov	 BYTE PTR tv171[rbp], 0
$LN19@ImGui_Impl:
  0021f	44 0f b6 85 b4
	02 00 00	 movzx	 r8d, BYTE PTR tv171[rbp]
  00227	ba 6d 02 00 00	 mov	 edx, 621		; 0000026dH
  0022c	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00230	e8 00 00 00 00	 call	 ?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z ; ImGuiIO::AddKeyEvent

; 310  :     MAP_BUTTON(ImGuiKey_GamepadFaceDown,        XINPUT_GAMEPAD_A);

  00235	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  0023c	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0023f	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00244	85 c0		 test	 eax, eax
  00246	74 09		 je	 SHORT $LN20@ImGui_Impl
  00248	c6 85 b4 02 00
	00 01		 mov	 BYTE PTR tv179[rbp], 1
  0024f	eb 07		 jmp	 SHORT $LN21@ImGui_Impl
$LN20@ImGui_Impl:
  00251	c6 85 b4 02 00
	00 00		 mov	 BYTE PTR tv179[rbp], 0
$LN21@ImGui_Impl:
  00258	44 0f b6 85 b4
	02 00 00	 movzx	 r8d, BYTE PTR tv179[rbp]
  00260	ba 6e 02 00 00	 mov	 edx, 622		; 0000026eH
  00265	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00269	e8 00 00 00 00	 call	 ?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z ; ImGuiIO::AddKeyEvent

; 311  :     MAP_BUTTON(ImGuiKey_GamepadDpadLeft,        XINPUT_GAMEPAD_DPAD_LEFT);

  0026e	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  00275	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00278	83 e0 04	 and	 eax, 4
  0027b	85 c0		 test	 eax, eax
  0027d	74 09		 je	 SHORT $LN22@ImGui_Impl
  0027f	c6 85 b4 02 00
	00 01		 mov	 BYTE PTR tv187[rbp], 1
  00286	eb 07		 jmp	 SHORT $LN23@ImGui_Impl
$LN22@ImGui_Impl:
  00288	c6 85 b4 02 00
	00 00		 mov	 BYTE PTR tv187[rbp], 0
$LN23@ImGui_Impl:
  0028f	44 0f b6 85 b4
	02 00 00	 movzx	 r8d, BYTE PTR tv187[rbp]
  00297	ba 6f 02 00 00	 mov	 edx, 623		; 0000026fH
  0029c	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  002a0	e8 00 00 00 00	 call	 ?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z ; ImGuiIO::AddKeyEvent

; 312  :     MAP_BUTTON(ImGuiKey_GamepadDpadRight,       XINPUT_GAMEPAD_DPAD_RIGHT);

  002a5	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  002ac	0f b7 00	 movzx	 eax, WORD PTR [rax]
  002af	83 e0 08	 and	 eax, 8
  002b2	85 c0		 test	 eax, eax
  002b4	74 09		 je	 SHORT $LN24@ImGui_Impl
  002b6	c6 85 b4 02 00
	00 01		 mov	 BYTE PTR tv195[rbp], 1
  002bd	eb 07		 jmp	 SHORT $LN25@ImGui_Impl
$LN24@ImGui_Impl:
  002bf	c6 85 b4 02 00
	00 00		 mov	 BYTE PTR tv195[rbp], 0
$LN25@ImGui_Impl:
  002c6	44 0f b6 85 b4
	02 00 00	 movzx	 r8d, BYTE PTR tv195[rbp]
  002ce	ba 70 02 00 00	 mov	 edx, 624		; 00000270H
  002d3	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  002d7	e8 00 00 00 00	 call	 ?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z ; ImGuiIO::AddKeyEvent

; 313  :     MAP_BUTTON(ImGuiKey_GamepadDpadUp,          XINPUT_GAMEPAD_DPAD_UP);

  002dc	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  002e3	0f b7 00	 movzx	 eax, WORD PTR [rax]
  002e6	83 e0 01	 and	 eax, 1
  002e9	85 c0		 test	 eax, eax
  002eb	74 09		 je	 SHORT $LN26@ImGui_Impl
  002ed	c6 85 b4 02 00
	00 01		 mov	 BYTE PTR tv203[rbp], 1
  002f4	eb 07		 jmp	 SHORT $LN27@ImGui_Impl
$LN26@ImGui_Impl:
  002f6	c6 85 b4 02 00
	00 00		 mov	 BYTE PTR tv203[rbp], 0
$LN27@ImGui_Impl:
  002fd	44 0f b6 85 b4
	02 00 00	 movzx	 r8d, BYTE PTR tv203[rbp]
  00305	ba 71 02 00 00	 mov	 edx, 625		; 00000271H
  0030a	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  0030e	e8 00 00 00 00	 call	 ?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z ; ImGuiIO::AddKeyEvent

; 314  :     MAP_BUTTON(ImGuiKey_GamepadDpadDown,        XINPUT_GAMEPAD_DPAD_DOWN);

  00313	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  0031a	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0031d	83 e0 02	 and	 eax, 2
  00320	85 c0		 test	 eax, eax
  00322	74 09		 je	 SHORT $LN28@ImGui_Impl
  00324	c6 85 b4 02 00
	00 01		 mov	 BYTE PTR tv211[rbp], 1
  0032b	eb 07		 jmp	 SHORT $LN29@ImGui_Impl
$LN28@ImGui_Impl:
  0032d	c6 85 b4 02 00
	00 00		 mov	 BYTE PTR tv211[rbp], 0
$LN29@ImGui_Impl:
  00334	44 0f b6 85 b4
	02 00 00	 movzx	 r8d, BYTE PTR tv211[rbp]
  0033c	ba 72 02 00 00	 mov	 edx, 626		; 00000272H
  00341	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00345	e8 00 00 00 00	 call	 ?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z ; ImGuiIO::AddKeyEvent

; 315  :     MAP_BUTTON(ImGuiKey_GamepadL1,              XINPUT_GAMEPAD_LEFT_SHOULDER);

  0034a	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  00351	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00354	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00359	85 c0		 test	 eax, eax
  0035b	74 09		 je	 SHORT $LN30@ImGui_Impl
  0035d	c6 85 b4 02 00
	00 01		 mov	 BYTE PTR tv219[rbp], 1
  00364	eb 07		 jmp	 SHORT $LN31@ImGui_Impl
$LN30@ImGui_Impl:
  00366	c6 85 b4 02 00
	00 00		 mov	 BYTE PTR tv219[rbp], 0
$LN31@ImGui_Impl:
  0036d	44 0f b6 85 b4
	02 00 00	 movzx	 r8d, BYTE PTR tv219[rbp]
  00375	ba 73 02 00 00	 mov	 edx, 627		; 00000273H
  0037a	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  0037e	e8 00 00 00 00	 call	 ?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z ; ImGuiIO::AddKeyEvent

; 316  :     MAP_BUTTON(ImGuiKey_GamepadR1,              XINPUT_GAMEPAD_RIGHT_SHOULDER);

  00383	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  0038a	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0038d	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00392	85 c0		 test	 eax, eax
  00394	74 09		 je	 SHORT $LN32@ImGui_Impl
  00396	c6 85 b4 02 00
	00 01		 mov	 BYTE PTR tv227[rbp], 1
  0039d	eb 07		 jmp	 SHORT $LN33@ImGui_Impl
$LN32@ImGui_Impl:
  0039f	c6 85 b4 02 00
	00 00		 mov	 BYTE PTR tv227[rbp], 0
$LN33@ImGui_Impl:
  003a6	44 0f b6 85 b4
	02 00 00	 movzx	 r8d, BYTE PTR tv227[rbp]
  003ae	ba 74 02 00 00	 mov	 edx, 628		; 00000274H
  003b3	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  003b7	e8 00 00 00 00	 call	 ?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z ; ImGuiIO::AddKeyEvent

; 317  :     MAP_ANALOG(ImGuiKey_GamepadL2,              gamepad.bLeftTrigger, XINPUT_GAMEPAD_TRIGGER_THRESHOLD, 255);

  003bc	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  003c3	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  003c7	83 e8 1e	 sub	 eax, 30
  003ca	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  003ce	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@43610000
  003d6	f3 0f 11 85 c4
	00 00 00	 movss	 DWORD PTR vn$6[rbp], xmm0
  003de	0f 57 c0	 xorps	 xmm0, xmm0
  003e1	0f 2f 85 c4 00
	00 00		 comiss	 xmm0, DWORD PTR vn$6[rbp]
  003e8	76 0d		 jbe	 SHORT $LN36@ImGui_Impl
  003ea	0f 57 c0	 xorps	 xmm0, xmm0
  003ed	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv239[rbp], xmm0
  003f5	eb 43		 jmp	 SHORT $LN37@ImGui_Impl
$LN36@ImGui_Impl:
  003f7	f3 0f 10 85 c4
	00 00 00	 movss	 xmm0, DWORD PTR vn$6[rbp]
  003ff	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00406	76 12		 jbe	 SHORT $LN34@ImGui_Impl
  00408	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00410	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv238[rbp], xmm0
  00418	eb 10		 jmp	 SHORT $LN35@ImGui_Impl
$LN34@ImGui_Impl:
  0041a	f3 0f 10 85 c4
	00 00 00	 movss	 xmm0, DWORD PTR vn$6[rbp]
  00422	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv238[rbp], xmm0
$LN35@ImGui_Impl:
  0042a	f3 0f 10 85 b8
	02 00 00	 movss	 xmm0, DWORD PTR tv238[rbp]
  00432	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv239[rbp], xmm0
$LN37@ImGui_Impl:
  0043a	f3 0f 10 85 c4
	00 00 00	 movss	 xmm0, DWORD PTR vn$6[rbp]
  00442	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3dcccccd
  00449	76 09		 jbe	 SHORT $LN38@ImGui_Impl
  0044b	c6 85 bc 02 00
	00 01		 mov	 BYTE PTR tv242[rbp], 1
  00452	eb 07		 jmp	 SHORT $LN39@ImGui_Impl
$LN38@ImGui_Impl:
  00454	c6 85 bc 02 00
	00 00		 mov	 BYTE PTR tv242[rbp], 0
$LN39@ImGui_Impl:
  0045b	f3 0f 10 9d b4
	02 00 00	 movss	 xmm3, DWORD PTR tv239[rbp]
  00463	44 0f b6 85 bc
	02 00 00	 movzx	 r8d, BYTE PTR tv242[rbp]
  0046b	ba 75 02 00 00	 mov	 edx, 629		; 00000275H
  00470	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00474	e8 00 00 00 00	 call	 ?AddKeyAnalogEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_NM@Z ; ImGuiIO::AddKeyAnalogEvent

; 318  :     MAP_ANALOG(ImGuiKey_GamepadR2,              gamepad.bRightTrigger, XINPUT_GAMEPAD_TRIGGER_THRESHOLD, 255);

  00479	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  00480	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  00484	83 e8 1e	 sub	 eax, 30
  00487	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0048b	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@43610000
  00493	f3 0f 11 85 e4
	00 00 00	 movss	 DWORD PTR vn$7[rbp], xmm0
  0049b	0f 57 c0	 xorps	 xmm0, xmm0
  0049e	0f 2f 85 e4 00
	00 00		 comiss	 xmm0, DWORD PTR vn$7[rbp]
  004a5	76 0d		 jbe	 SHORT $LN42@ImGui_Impl
  004a7	0f 57 c0	 xorps	 xmm0, xmm0
  004aa	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv254[rbp], xmm0
  004b2	eb 43		 jmp	 SHORT $LN43@ImGui_Impl
$LN42@ImGui_Impl:
  004b4	f3 0f 10 85 e4
	00 00 00	 movss	 xmm0, DWORD PTR vn$7[rbp]
  004bc	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  004c3	76 12		 jbe	 SHORT $LN40@ImGui_Impl
  004c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004cd	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv253[rbp], xmm0
  004d5	eb 10		 jmp	 SHORT $LN41@ImGui_Impl
$LN40@ImGui_Impl:
  004d7	f3 0f 10 85 e4
	00 00 00	 movss	 xmm0, DWORD PTR vn$7[rbp]
  004df	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv253[rbp], xmm0
$LN41@ImGui_Impl:
  004e7	f3 0f 10 85 b8
	02 00 00	 movss	 xmm0, DWORD PTR tv253[rbp]
  004ef	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv254[rbp], xmm0
$LN43@ImGui_Impl:
  004f7	f3 0f 10 85 e4
	00 00 00	 movss	 xmm0, DWORD PTR vn$7[rbp]
  004ff	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3dcccccd
  00506	76 09		 jbe	 SHORT $LN44@ImGui_Impl
  00508	c6 85 bc 02 00
	00 01		 mov	 BYTE PTR tv257[rbp], 1
  0050f	eb 07		 jmp	 SHORT $LN45@ImGui_Impl
$LN44@ImGui_Impl:
  00511	c6 85 bc 02 00
	00 00		 mov	 BYTE PTR tv257[rbp], 0
$LN45@ImGui_Impl:
  00518	f3 0f 10 9d b4
	02 00 00	 movss	 xmm3, DWORD PTR tv254[rbp]
  00520	44 0f b6 85 bc
	02 00 00	 movzx	 r8d, BYTE PTR tv257[rbp]
  00528	ba 76 02 00 00	 mov	 edx, 630		; 00000276H
  0052d	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00531	e8 00 00 00 00	 call	 ?AddKeyAnalogEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_NM@Z ; ImGuiIO::AddKeyAnalogEvent

; 319  :     MAP_BUTTON(ImGuiKey_GamepadL3,              XINPUT_GAMEPAD_LEFT_THUMB);

  00536	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  0053d	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00540	83 e0 40	 and	 eax, 64			; 00000040H
  00543	85 c0		 test	 eax, eax
  00545	74 09		 je	 SHORT $LN46@ImGui_Impl
  00547	c6 85 b4 02 00
	00 01		 mov	 BYTE PTR tv265[rbp], 1
  0054e	eb 07		 jmp	 SHORT $LN47@ImGui_Impl
$LN46@ImGui_Impl:
  00550	c6 85 b4 02 00
	00 00		 mov	 BYTE PTR tv265[rbp], 0
$LN47@ImGui_Impl:
  00557	44 0f b6 85 b4
	02 00 00	 movzx	 r8d, BYTE PTR tv265[rbp]
  0055f	ba 77 02 00 00	 mov	 edx, 631		; 00000277H
  00564	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00568	e8 00 00 00 00	 call	 ?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z ; ImGuiIO::AddKeyEvent

; 320  :     MAP_BUTTON(ImGuiKey_GamepadR3,              XINPUT_GAMEPAD_RIGHT_THUMB);

  0056d	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  00574	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00577	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0057c	85 c0		 test	 eax, eax
  0057e	74 09		 je	 SHORT $LN48@ImGui_Impl
  00580	c6 85 b4 02 00
	00 01		 mov	 BYTE PTR tv273[rbp], 1
  00587	eb 07		 jmp	 SHORT $LN49@ImGui_Impl
$LN48@ImGui_Impl:
  00589	c6 85 b4 02 00
	00 00		 mov	 BYTE PTR tv273[rbp], 0
$LN49@ImGui_Impl:
  00590	44 0f b6 85 b4
	02 00 00	 movzx	 r8d, BYTE PTR tv273[rbp]
  00598	ba 78 02 00 00	 mov	 edx, 632		; 00000278H
  0059d	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  005a1	e8 00 00 00 00	 call	 ?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z ; ImGuiIO::AddKeyEvent

; 321  :     MAP_ANALOG(ImGuiKey_GamepadLStickLeft,      gamepad.sThumbLX, -XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE, -32768);

  005a6	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  005ad	0f bf 40 04	 movsx	 eax, WORD PTR [rax+4]
  005b1	05 a9 1e 00 00	 add	 eax, 7849		; 00001ea9H
  005b6	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  005ba	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@c6c2ae00
  005c2	f3 0f 11 85 04
	01 00 00	 movss	 DWORD PTR vn$8[rbp], xmm0
  005ca	0f 57 c0	 xorps	 xmm0, xmm0
  005cd	0f 2f 85 04 01
	00 00		 comiss	 xmm0, DWORD PTR vn$8[rbp]
  005d4	76 0d		 jbe	 SHORT $LN52@ImGui_Impl
  005d6	0f 57 c0	 xorps	 xmm0, xmm0
  005d9	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv285[rbp], xmm0
  005e1	eb 43		 jmp	 SHORT $LN53@ImGui_Impl
$LN52@ImGui_Impl:
  005e3	f3 0f 10 85 04
	01 00 00	 movss	 xmm0, DWORD PTR vn$8[rbp]
  005eb	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  005f2	76 12		 jbe	 SHORT $LN50@ImGui_Impl
  005f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005fc	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv284[rbp], xmm0
  00604	eb 10		 jmp	 SHORT $LN51@ImGui_Impl
$LN50@ImGui_Impl:
  00606	f3 0f 10 85 04
	01 00 00	 movss	 xmm0, DWORD PTR vn$8[rbp]
  0060e	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv284[rbp], xmm0
$LN51@ImGui_Impl:
  00616	f3 0f 10 85 b8
	02 00 00	 movss	 xmm0, DWORD PTR tv284[rbp]
  0061e	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv285[rbp], xmm0
$LN53@ImGui_Impl:
  00626	f3 0f 10 85 04
	01 00 00	 movss	 xmm0, DWORD PTR vn$8[rbp]
  0062e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3dcccccd
  00635	76 09		 jbe	 SHORT $LN54@ImGui_Impl
  00637	c6 85 bc 02 00
	00 01		 mov	 BYTE PTR tv288[rbp], 1
  0063e	eb 07		 jmp	 SHORT $LN55@ImGui_Impl
$LN54@ImGui_Impl:
  00640	c6 85 bc 02 00
	00 00		 mov	 BYTE PTR tv288[rbp], 0
$LN55@ImGui_Impl:
  00647	f3 0f 10 9d b4
	02 00 00	 movss	 xmm3, DWORD PTR tv285[rbp]
  0064f	44 0f b6 85 bc
	02 00 00	 movzx	 r8d, BYTE PTR tv288[rbp]
  00657	ba 79 02 00 00	 mov	 edx, 633		; 00000279H
  0065c	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00660	e8 00 00 00 00	 call	 ?AddKeyAnalogEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_NM@Z ; ImGuiIO::AddKeyAnalogEvent

; 322  :     MAP_ANALOG(ImGuiKey_GamepadLStickRight,     gamepad.sThumbLX, +XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE, +32767);

  00665	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  0066c	0f bf 40 04	 movsx	 eax, WORD PTR [rax+4]
  00670	2d a9 1e 00 00	 sub	 eax, 7849		; 00001ea9H
  00675	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00679	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46c2ac00
  00681	f3 0f 11 85 24
	01 00 00	 movss	 DWORD PTR vn$9[rbp], xmm0
  00689	0f 57 c0	 xorps	 xmm0, xmm0
  0068c	0f 2f 85 24 01
	00 00		 comiss	 xmm0, DWORD PTR vn$9[rbp]
  00693	76 0d		 jbe	 SHORT $LN58@ImGui_Impl
  00695	0f 57 c0	 xorps	 xmm0, xmm0
  00698	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv300[rbp], xmm0
  006a0	eb 43		 jmp	 SHORT $LN59@ImGui_Impl
$LN58@ImGui_Impl:
  006a2	f3 0f 10 85 24
	01 00 00	 movss	 xmm0, DWORD PTR vn$9[rbp]
  006aa	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  006b1	76 12		 jbe	 SHORT $LN56@ImGui_Impl
  006b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006bb	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv299[rbp], xmm0
  006c3	eb 10		 jmp	 SHORT $LN57@ImGui_Impl
$LN56@ImGui_Impl:
  006c5	f3 0f 10 85 24
	01 00 00	 movss	 xmm0, DWORD PTR vn$9[rbp]
  006cd	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv299[rbp], xmm0
$LN57@ImGui_Impl:
  006d5	f3 0f 10 85 b8
	02 00 00	 movss	 xmm0, DWORD PTR tv299[rbp]
  006dd	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv300[rbp], xmm0
$LN59@ImGui_Impl:
  006e5	f3 0f 10 85 24
	01 00 00	 movss	 xmm0, DWORD PTR vn$9[rbp]
  006ed	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3dcccccd
  006f4	76 09		 jbe	 SHORT $LN60@ImGui_Impl
  006f6	c6 85 bc 02 00
	00 01		 mov	 BYTE PTR tv303[rbp], 1
  006fd	eb 07		 jmp	 SHORT $LN61@ImGui_Impl
$LN60@ImGui_Impl:
  006ff	c6 85 bc 02 00
	00 00		 mov	 BYTE PTR tv303[rbp], 0
$LN61@ImGui_Impl:
  00706	f3 0f 10 9d b4
	02 00 00	 movss	 xmm3, DWORD PTR tv300[rbp]
  0070e	44 0f b6 85 bc
	02 00 00	 movzx	 r8d, BYTE PTR tv303[rbp]
  00716	ba 7a 02 00 00	 mov	 edx, 634		; 0000027aH
  0071b	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  0071f	e8 00 00 00 00	 call	 ?AddKeyAnalogEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_NM@Z ; ImGuiIO::AddKeyAnalogEvent

; 323  :     MAP_ANALOG(ImGuiKey_GamepadLStickUp,        gamepad.sThumbLY, +XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE, +32767);

  00724	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  0072b	0f bf 40 06	 movsx	 eax, WORD PTR [rax+6]
  0072f	2d a9 1e 00 00	 sub	 eax, 7849		; 00001ea9H
  00734	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00738	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46c2ac00
  00740	f3 0f 11 85 44
	01 00 00	 movss	 DWORD PTR vn$10[rbp], xmm0
  00748	0f 57 c0	 xorps	 xmm0, xmm0
  0074b	0f 2f 85 44 01
	00 00		 comiss	 xmm0, DWORD PTR vn$10[rbp]
  00752	76 0d		 jbe	 SHORT $LN64@ImGui_Impl
  00754	0f 57 c0	 xorps	 xmm0, xmm0
  00757	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv315[rbp], xmm0
  0075f	eb 43		 jmp	 SHORT $LN65@ImGui_Impl
$LN64@ImGui_Impl:
  00761	f3 0f 10 85 44
	01 00 00	 movss	 xmm0, DWORD PTR vn$10[rbp]
  00769	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00770	76 12		 jbe	 SHORT $LN62@ImGui_Impl
  00772	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0077a	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv314[rbp], xmm0
  00782	eb 10		 jmp	 SHORT $LN63@ImGui_Impl
$LN62@ImGui_Impl:
  00784	f3 0f 10 85 44
	01 00 00	 movss	 xmm0, DWORD PTR vn$10[rbp]
  0078c	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv314[rbp], xmm0
$LN63@ImGui_Impl:
  00794	f3 0f 10 85 b8
	02 00 00	 movss	 xmm0, DWORD PTR tv314[rbp]
  0079c	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv315[rbp], xmm0
$LN65@ImGui_Impl:
  007a4	f3 0f 10 85 44
	01 00 00	 movss	 xmm0, DWORD PTR vn$10[rbp]
  007ac	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3dcccccd
  007b3	76 09		 jbe	 SHORT $LN66@ImGui_Impl
  007b5	c6 85 bc 02 00
	00 01		 mov	 BYTE PTR tv318[rbp], 1
  007bc	eb 07		 jmp	 SHORT $LN67@ImGui_Impl
$LN66@ImGui_Impl:
  007be	c6 85 bc 02 00
	00 00		 mov	 BYTE PTR tv318[rbp], 0
$LN67@ImGui_Impl:
  007c5	f3 0f 10 9d b4
	02 00 00	 movss	 xmm3, DWORD PTR tv315[rbp]
  007cd	44 0f b6 85 bc
	02 00 00	 movzx	 r8d, BYTE PTR tv318[rbp]
  007d5	ba 7b 02 00 00	 mov	 edx, 635		; 0000027bH
  007da	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  007de	e8 00 00 00 00	 call	 ?AddKeyAnalogEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_NM@Z ; ImGuiIO::AddKeyAnalogEvent

; 324  :     MAP_ANALOG(ImGuiKey_GamepadLStickDown,      gamepad.sThumbLY, -XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE, -32768);

  007e3	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  007ea	0f bf 40 06	 movsx	 eax, WORD PTR [rax+6]
  007ee	05 a9 1e 00 00	 add	 eax, 7849		; 00001ea9H
  007f3	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  007f7	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@c6c2ae00
  007ff	f3 0f 11 85 64
	01 00 00	 movss	 DWORD PTR vn$11[rbp], xmm0
  00807	0f 57 c0	 xorps	 xmm0, xmm0
  0080a	0f 2f 85 64 01
	00 00		 comiss	 xmm0, DWORD PTR vn$11[rbp]
  00811	76 0d		 jbe	 SHORT $LN70@ImGui_Impl
  00813	0f 57 c0	 xorps	 xmm0, xmm0
  00816	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv330[rbp], xmm0
  0081e	eb 43		 jmp	 SHORT $LN71@ImGui_Impl
$LN70@ImGui_Impl:
  00820	f3 0f 10 85 64
	01 00 00	 movss	 xmm0, DWORD PTR vn$11[rbp]
  00828	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0082f	76 12		 jbe	 SHORT $LN68@ImGui_Impl
  00831	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00839	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv329[rbp], xmm0
  00841	eb 10		 jmp	 SHORT $LN69@ImGui_Impl
$LN68@ImGui_Impl:
  00843	f3 0f 10 85 64
	01 00 00	 movss	 xmm0, DWORD PTR vn$11[rbp]
  0084b	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv329[rbp], xmm0
$LN69@ImGui_Impl:
  00853	f3 0f 10 85 b8
	02 00 00	 movss	 xmm0, DWORD PTR tv329[rbp]
  0085b	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv330[rbp], xmm0
$LN71@ImGui_Impl:
  00863	f3 0f 10 85 64
	01 00 00	 movss	 xmm0, DWORD PTR vn$11[rbp]
  0086b	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3dcccccd
  00872	76 09		 jbe	 SHORT $LN72@ImGui_Impl
  00874	c6 85 bc 02 00
	00 01		 mov	 BYTE PTR tv333[rbp], 1
  0087b	eb 07		 jmp	 SHORT $LN73@ImGui_Impl
$LN72@ImGui_Impl:
  0087d	c6 85 bc 02 00
	00 00		 mov	 BYTE PTR tv333[rbp], 0
$LN73@ImGui_Impl:
  00884	f3 0f 10 9d b4
	02 00 00	 movss	 xmm3, DWORD PTR tv330[rbp]
  0088c	44 0f b6 85 bc
	02 00 00	 movzx	 r8d, BYTE PTR tv333[rbp]
  00894	ba 7c 02 00 00	 mov	 edx, 636		; 0000027cH
  00899	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  0089d	e8 00 00 00 00	 call	 ?AddKeyAnalogEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_NM@Z ; ImGuiIO::AddKeyAnalogEvent

; 325  :     MAP_ANALOG(ImGuiKey_GamepadRStickLeft,      gamepad.sThumbRX, -XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE, -32768);

  008a2	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  008a9	0f bf 40 08	 movsx	 eax, WORD PTR [rax+8]
  008ad	05 a9 1e 00 00	 add	 eax, 7849		; 00001ea9H
  008b2	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  008b6	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@c6c2ae00
  008be	f3 0f 11 85 84
	01 00 00	 movss	 DWORD PTR vn$12[rbp], xmm0
  008c6	0f 57 c0	 xorps	 xmm0, xmm0
  008c9	0f 2f 85 84 01
	00 00		 comiss	 xmm0, DWORD PTR vn$12[rbp]
  008d0	76 0d		 jbe	 SHORT $LN76@ImGui_Impl
  008d2	0f 57 c0	 xorps	 xmm0, xmm0
  008d5	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv345[rbp], xmm0
  008dd	eb 43		 jmp	 SHORT $LN77@ImGui_Impl
$LN76@ImGui_Impl:
  008df	f3 0f 10 85 84
	01 00 00	 movss	 xmm0, DWORD PTR vn$12[rbp]
  008e7	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  008ee	76 12		 jbe	 SHORT $LN74@ImGui_Impl
  008f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008f8	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv344[rbp], xmm0
  00900	eb 10		 jmp	 SHORT $LN75@ImGui_Impl
$LN74@ImGui_Impl:
  00902	f3 0f 10 85 84
	01 00 00	 movss	 xmm0, DWORD PTR vn$12[rbp]
  0090a	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv344[rbp], xmm0
$LN75@ImGui_Impl:
  00912	f3 0f 10 85 b8
	02 00 00	 movss	 xmm0, DWORD PTR tv344[rbp]
  0091a	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv345[rbp], xmm0
$LN77@ImGui_Impl:
  00922	f3 0f 10 85 84
	01 00 00	 movss	 xmm0, DWORD PTR vn$12[rbp]
  0092a	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3dcccccd
  00931	76 09		 jbe	 SHORT $LN78@ImGui_Impl
  00933	c6 85 bc 02 00
	00 01		 mov	 BYTE PTR tv348[rbp], 1
  0093a	eb 07		 jmp	 SHORT $LN79@ImGui_Impl
$LN78@ImGui_Impl:
  0093c	c6 85 bc 02 00
	00 00		 mov	 BYTE PTR tv348[rbp], 0
$LN79@ImGui_Impl:
  00943	f3 0f 10 9d b4
	02 00 00	 movss	 xmm3, DWORD PTR tv345[rbp]
  0094b	44 0f b6 85 bc
	02 00 00	 movzx	 r8d, BYTE PTR tv348[rbp]
  00953	ba 7d 02 00 00	 mov	 edx, 637		; 0000027dH
  00958	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  0095c	e8 00 00 00 00	 call	 ?AddKeyAnalogEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_NM@Z ; ImGuiIO::AddKeyAnalogEvent

; 326  :     MAP_ANALOG(ImGuiKey_GamepadRStickRight,     gamepad.sThumbRX, +XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE, +32767);

  00961	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  00968	0f bf 40 08	 movsx	 eax, WORD PTR [rax+8]
  0096c	2d a9 1e 00 00	 sub	 eax, 7849		; 00001ea9H
  00971	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00975	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46c2ac00
  0097d	f3 0f 11 85 a4
	01 00 00	 movss	 DWORD PTR vn$13[rbp], xmm0
  00985	0f 57 c0	 xorps	 xmm0, xmm0
  00988	0f 2f 85 a4 01
	00 00		 comiss	 xmm0, DWORD PTR vn$13[rbp]
  0098f	76 0d		 jbe	 SHORT $LN82@ImGui_Impl
  00991	0f 57 c0	 xorps	 xmm0, xmm0
  00994	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv360[rbp], xmm0
  0099c	eb 43		 jmp	 SHORT $LN83@ImGui_Impl
$LN82@ImGui_Impl:
  0099e	f3 0f 10 85 a4
	01 00 00	 movss	 xmm0, DWORD PTR vn$13[rbp]
  009a6	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  009ad	76 12		 jbe	 SHORT $LN80@ImGui_Impl
  009af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009b7	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv359[rbp], xmm0
  009bf	eb 10		 jmp	 SHORT $LN81@ImGui_Impl
$LN80@ImGui_Impl:
  009c1	f3 0f 10 85 a4
	01 00 00	 movss	 xmm0, DWORD PTR vn$13[rbp]
  009c9	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv359[rbp], xmm0
$LN81@ImGui_Impl:
  009d1	f3 0f 10 85 b8
	02 00 00	 movss	 xmm0, DWORD PTR tv359[rbp]
  009d9	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv360[rbp], xmm0
$LN83@ImGui_Impl:
  009e1	f3 0f 10 85 a4
	01 00 00	 movss	 xmm0, DWORD PTR vn$13[rbp]
  009e9	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3dcccccd
  009f0	76 09		 jbe	 SHORT $LN84@ImGui_Impl
  009f2	c6 85 bc 02 00
	00 01		 mov	 BYTE PTR tv363[rbp], 1
  009f9	eb 07		 jmp	 SHORT $LN85@ImGui_Impl
$LN84@ImGui_Impl:
  009fb	c6 85 bc 02 00
	00 00		 mov	 BYTE PTR tv363[rbp], 0
$LN85@ImGui_Impl:
  00a02	f3 0f 10 9d b4
	02 00 00	 movss	 xmm3, DWORD PTR tv360[rbp]
  00a0a	44 0f b6 85 bc
	02 00 00	 movzx	 r8d, BYTE PTR tv363[rbp]
  00a12	ba 7e 02 00 00	 mov	 edx, 638		; 0000027eH
  00a17	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00a1b	e8 00 00 00 00	 call	 ?AddKeyAnalogEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_NM@Z ; ImGuiIO::AddKeyAnalogEvent

; 327  :     MAP_ANALOG(ImGuiKey_GamepadRStickUp,        gamepad.sThumbRY, +XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE, +32767);

  00a20	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  00a27	0f bf 40 0a	 movsx	 eax, WORD PTR [rax+10]
  00a2b	2d a9 1e 00 00	 sub	 eax, 7849		; 00001ea9H
  00a30	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00a34	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@46c2ac00
  00a3c	f3 0f 11 85 c4
	01 00 00	 movss	 DWORD PTR vn$14[rbp], xmm0
  00a44	0f 57 c0	 xorps	 xmm0, xmm0
  00a47	0f 2f 85 c4 01
	00 00		 comiss	 xmm0, DWORD PTR vn$14[rbp]
  00a4e	76 0d		 jbe	 SHORT $LN88@ImGui_Impl
  00a50	0f 57 c0	 xorps	 xmm0, xmm0
  00a53	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv375[rbp], xmm0
  00a5b	eb 43		 jmp	 SHORT $LN89@ImGui_Impl
$LN88@ImGui_Impl:
  00a5d	f3 0f 10 85 c4
	01 00 00	 movss	 xmm0, DWORD PTR vn$14[rbp]
  00a65	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00a6c	76 12		 jbe	 SHORT $LN86@ImGui_Impl
  00a6e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a76	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv374[rbp], xmm0
  00a7e	eb 10		 jmp	 SHORT $LN87@ImGui_Impl
$LN86@ImGui_Impl:
  00a80	f3 0f 10 85 c4
	01 00 00	 movss	 xmm0, DWORD PTR vn$14[rbp]
  00a88	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv374[rbp], xmm0
$LN87@ImGui_Impl:
  00a90	f3 0f 10 85 b8
	02 00 00	 movss	 xmm0, DWORD PTR tv374[rbp]
  00a98	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv375[rbp], xmm0
$LN89@ImGui_Impl:
  00aa0	f3 0f 10 85 c4
	01 00 00	 movss	 xmm0, DWORD PTR vn$14[rbp]
  00aa8	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3dcccccd
  00aaf	76 09		 jbe	 SHORT $LN90@ImGui_Impl
  00ab1	c6 85 bc 02 00
	00 01		 mov	 BYTE PTR tv378[rbp], 1
  00ab8	eb 07		 jmp	 SHORT $LN91@ImGui_Impl
$LN90@ImGui_Impl:
  00aba	c6 85 bc 02 00
	00 00		 mov	 BYTE PTR tv378[rbp], 0
$LN91@ImGui_Impl:
  00ac1	f3 0f 10 9d b4
	02 00 00	 movss	 xmm3, DWORD PTR tv375[rbp]
  00ac9	44 0f b6 85 bc
	02 00 00	 movzx	 r8d, BYTE PTR tv378[rbp]
  00ad1	ba 7f 02 00 00	 mov	 edx, 639		; 0000027fH
  00ad6	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00ada	e8 00 00 00 00	 call	 ?AddKeyAnalogEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_NM@Z ; ImGuiIO::AddKeyAnalogEvent

; 328  :     MAP_ANALOG(ImGuiKey_GamepadRStickDown,      gamepad.sThumbRY, -XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE, -32768);

  00adf	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR gamepad$[rbp]
  00ae6	0f bf 40 0a	 movsx	 eax, WORD PTR [rax+10]
  00aea	05 a9 1e 00 00	 add	 eax, 7849		; 00001ea9H
  00aef	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00af3	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@c6c2ae00
  00afb	f3 0f 11 85 e4
	01 00 00	 movss	 DWORD PTR vn$15[rbp], xmm0
  00b03	0f 57 c0	 xorps	 xmm0, xmm0
  00b06	0f 2f 85 e4 01
	00 00		 comiss	 xmm0, DWORD PTR vn$15[rbp]
  00b0d	76 0d		 jbe	 SHORT $LN94@ImGui_Impl
  00b0f	0f 57 c0	 xorps	 xmm0, xmm0
  00b12	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv390[rbp], xmm0
  00b1a	eb 43		 jmp	 SHORT $LN95@ImGui_Impl
$LN94@ImGui_Impl:
  00b1c	f3 0f 10 85 e4
	01 00 00	 movss	 xmm0, DWORD PTR vn$15[rbp]
  00b24	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00b2b	76 12		 jbe	 SHORT $LN92@ImGui_Impl
  00b2d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00b35	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv389[rbp], xmm0
  00b3d	eb 10		 jmp	 SHORT $LN93@ImGui_Impl
$LN92@ImGui_Impl:
  00b3f	f3 0f 10 85 e4
	01 00 00	 movss	 xmm0, DWORD PTR vn$15[rbp]
  00b47	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR tv389[rbp], xmm0
$LN93@ImGui_Impl:
  00b4f	f3 0f 10 85 b8
	02 00 00	 movss	 xmm0, DWORD PTR tv389[rbp]
  00b57	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR tv390[rbp], xmm0
$LN95@ImGui_Impl:
  00b5f	f3 0f 10 85 e4
	01 00 00	 movss	 xmm0, DWORD PTR vn$15[rbp]
  00b67	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3dcccccd
  00b6e	76 09		 jbe	 SHORT $LN96@ImGui_Impl
  00b70	c6 85 bc 02 00
	00 01		 mov	 BYTE PTR tv393[rbp], 1
  00b77	eb 07		 jmp	 SHORT $LN97@ImGui_Impl
$LN96@ImGui_Impl:
  00b79	c6 85 bc 02 00
	00 00		 mov	 BYTE PTR tv393[rbp], 0
$LN97@ImGui_Impl:
  00b80	f3 0f 10 9d b4
	02 00 00	 movss	 xmm3, DWORD PTR tv390[rbp]
  00b88	44 0f b6 85 bc
	02 00 00	 movzx	 r8d, BYTE PTR tv393[rbp]
  00b90	ba 80 02 00 00	 mov	 edx, 640		; 00000280H
  00b95	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00b99	e8 00 00 00 00	 call	 ?AddKeyAnalogEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_NM@Z ; ImGuiIO::AddKeyAnalogEvent
$LN1@ImGui_Impl:

; 329  :     #undef MAP_BUTTON
; 330  :     #undef MAP_ANALOG
; 331  : #endif // #ifndef IMGUI_IMPL_WIN32_DISABLE_GAMEPAD
; 332  : }

  00b9e	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00ba2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ImGui_ImplWin32_UpdateGamepads@@YAXXZ$rtcFrameData
  00ba9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00bae	48 8b 8d c0 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00bb5	48 33 cd	 xor	 rcx, rbp
  00bb8	e8 00 00 00 00	 call	 __security_check_cookie
  00bbd	48 8d a5 d8 02
	00 00		 lea	 rsp, QWORD PTR [rbp+728]
  00bc4	5f		 pop	 rdi
  00bc5	5d		 pop	 rbp
  00bc6	c3		 ret	 0
?ImGui_ImplWin32_UpdateGamepads@@YAXXZ ENDP		; ImGui_ImplWin32_UpdateGamepads
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_impl_win32.cpp
;	COMDAT ?ImGui_ImplWin32_UpdateMouseData@@YAXXZ
_TEXT	SEGMENT
bd$ = 8
io$ = 40
is_app_focused$ = 68
pos$5 = 104
pos$6 = 136
tv76 = 340
__$ArrayPad$ = 344
?ImGui_ImplWin32_UpdateMouseData@@YAXXZ PROC		; ImGui_ImplWin32_UpdateMouseData, COMDAT

; 251  : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00025	48 33 c5	 xor	 rax, rbp
  00028	48 89 85 58 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 252  :     ImGui_ImplWin32_Data* bd = ImGui_ImplWin32_GetBackendData();

  0002f	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_GetBackendData@@YAPEAUImGui_ImplWin32_Data@@XZ ; ImGui_ImplWin32_GetBackendData
  00034	48 89 45 08	 mov	 QWORD PTR bd$[rbp], rax

; 253  :     ImGuiIO& io = ImGui::GetIO();

  00038	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  0003d	48 89 45 28	 mov	 QWORD PTR io$[rbp], rax

; 254  :     IM_ASSERT(bd->hWnd != 0);

  00041	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00045	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00049	75 22		 jne	 SHORT $LN8@ImGui_Impl
  0004b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImGui_ImplWin32_UpdateMouseData@@YAXXZ@4JA
  00051	83 c0 03	 add	 eax, 3
  00054	44 8b c0	 mov	 r8d, eax
  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GI@EPODBAAL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@HCBBDJLO@?$AAb?$AAd?$AA?9?$AA?$DO?$AAh?$AAW?$AAn?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0006b	33 c0		 xor	 eax, eax
$LN8@ImGui_Impl:

; 255  : 
; 256  :     const bool is_app_focused = (::GetForegroundWindow() == bd->hWnd);

  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetForegroundWindow
  00073	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  00077	48 3b 01	 cmp	 rax, QWORD PTR [rcx]
  0007a	75 09		 jne	 SHORT $LN9@ImGui_Impl
  0007c	c6 85 54 01 00
	00 01		 mov	 BYTE PTR tv76[rbp], 1
  00083	eb 07		 jmp	 SHORT $LN10@ImGui_Impl
$LN9@ImGui_Impl:
  00085	c6 85 54 01 00
	00 00		 mov	 BYTE PTR tv76[rbp], 0
$LN10@ImGui_Impl:
  0008c	0f b6 85 54 01
	00 00		 movzx	 eax, BYTE PTR tv76[rbp]
  00093	88 45 44	 mov	 BYTE PTR is_app_focused$[rbp], al

; 257  :     if (is_app_focused)

  00096	0f b6 45 44	 movzx	 eax, BYTE PTR is_app_focused$[rbp]
  0009a	85 c0		 test	 eax, eax
  0009c	0f 84 ae 00 00
	00		 je	 $LN2@ImGui_Impl

; 258  :     {
; 259  :         // (Optional) Set OS mouse position from Dear ImGui if requested (rarely used, only when ImGuiConfigFlags_NavEnableSetMousePos is enabled by user)
; 260  :         if (io.WantSetMousePos)

  000a2	48 8b 45 28	 mov	 rax, QWORD PTR io$[rbp]
  000a6	0f b6 80 d3 00
	00 00		 movzx	 eax, BYTE PTR [rax+211]
  000ad	85 c0		 test	 eax, eax
  000af	74 3f		 je	 SHORT $LN3@ImGui_Impl

; 261  :         {
; 262  :             POINT pos = { (int)io.MousePos.x, (int)io.MousePos.y };

  000b1	48 8b 45 28	 mov	 rax, QWORD PTR io$[rbp]
  000b5	f3 0f 2c 80 f4
	0d 00 00	 cvttss2si eax, DWORD PTR [rax+3572]
  000bd	89 45 68	 mov	 DWORD PTR pos$5[rbp], eax
  000c0	48 8b 45 28	 mov	 rax, QWORD PTR io$[rbp]
  000c4	f3 0f 2c 80 f8
	0d 00 00	 cvttss2si eax, DWORD PTR [rax+3576]
  000cc	89 45 6c	 mov	 DWORD PTR pos$5[rbp+4], eax

; 263  :             if (::ClientToScreen(bd->hWnd, &pos))

  000cf	48 8d 55 68	 lea	 rdx, QWORD PTR pos$5[rbp]
  000d3	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  000d7	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ClientToScreen
  000e0	85 c0		 test	 eax, eax
  000e2	74 0c		 je	 SHORT $LN4@ImGui_Impl

; 264  :                 ::SetCursorPos(pos.x, pos.y);

  000e4	8b 55 6c	 mov	 edx, DWORD PTR pos$5[rbp+4]
  000e7	8b 4d 68	 mov	 ecx, DWORD PTR pos$5[rbp]
  000ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetCursorPos
$LN4@ImGui_Impl:
$LN3@ImGui_Impl:

; 265  :         }
; 266  : 
; 267  :         // (Optional) Fallback to provide mouse position when focused (WM_MOUSEMOVE already provides this when hovered or captured)
; 268  :         if (!io.WantSetMousePos && !bd->MouseTracked)

  000f0	48 8b 45 28	 mov	 rax, QWORD PTR io$[rbp]
  000f4	0f b6 80 d3 00
	00 00		 movzx	 eax, BYTE PTR [rax+211]
  000fb	85 c0		 test	 eax, eax
  000fd	75 51		 jne	 SHORT $LN5@ImGui_Impl
  000ff	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00103	0f b6 40 10	 movzx	 eax, BYTE PTR [rax+16]
  00107	85 c0		 test	 eax, eax
  00109	75 45		 jne	 SHORT $LN5@ImGui_Impl

; 269  :         {
; 270  :             POINT pos;
; 271  :             if (::GetCursorPos(&pos) && ::ScreenToClient(bd->hWnd, &pos))

  0010b	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR pos$6[rbp]
  00112	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCursorPos
  00118	85 c0		 test	 eax, eax
  0011a	74 34		 je	 SHORT $LN6@ImGui_Impl
  0011c	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR pos$6[rbp]
  00123	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00127	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0012a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ScreenToClient
  00130	85 c0		 test	 eax, eax
  00132	74 1c		 je	 SHORT $LN6@ImGui_Impl

; 272  :                 io.AddMousePosEvent((float)pos.x, (float)pos.y);

  00134	f3 0f 2a 85 8c
	00 00 00	 cvtsi2ss xmm0, DWORD PTR pos$6[rbp+4]
  0013c	f3 0f 2a 8d 88
	00 00 00	 cvtsi2ss xmm1, DWORD PTR pos$6[rbp]
  00144	0f 28 d0	 movaps	 xmm2, xmm0
  00147	48 8b 4d 28	 mov	 rcx, QWORD PTR io$[rbp]
  0014b	e8 00 00 00 00	 call	 ?AddMousePosEvent@ImGuiIO@@QEAAXMM@Z ; ImGuiIO::AddMousePosEvent
$LN6@ImGui_Impl:
$LN5@ImGui_Impl:
$LN2@ImGui_Impl:

; 273  :         }
; 274  :     }
; 275  : }

  00150	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00154	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ImGui_ImplWin32_UpdateMouseData@@YAXXZ$rtcFrameData
  0015b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00160	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00167	48 33 cd	 xor	 rcx, rbp
  0016a	e8 00 00 00 00	 call	 __security_check_cookie
  0016f	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  00176	5f		 pop	 rdi
  00177	5d		 pop	 rbp
  00178	c3		 ret	 0
?ImGui_ImplWin32_UpdateMouseData@@YAXXZ ENDP		; ImGui_ImplWin32_UpdateMouseData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_impl_win32.cpp
;	COMDAT ?ImGui_ImplWin32_UpdateKeyModifiers@@YAXXZ
_TEXT	SEGMENT
io$ = 8
?ImGui_ImplWin32_UpdateKeyModifiers@@YAXXZ PROC		; ImGui_ImplWin32_UpdateKeyModifiers, COMDAT

; 242  : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 243  :     ImGuiIO& io = ImGui::GetIO();

  0001e	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  00023	48 89 45 08	 mov	 QWORD PTR io$[rbp], rax

; 244  :     io.AddKeyEvent(ImGuiMod_Ctrl, IsVkDown(VK_CONTROL));

  00027	b9 11 00 00 00	 mov	 ecx, 17
  0002c	e8 00 00 00 00	 call	 ?IsVkDown@@YA_NH@Z	; IsVkDown
  00031	44 0f b6 c0	 movzx	 r8d, al
  00035	ba 00 10 00 00	 mov	 edx, 4096		; 00001000H
  0003a	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  0003e	e8 00 00 00 00	 call	 ?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z ; ImGuiIO::AddKeyEvent

; 245  :     io.AddKeyEvent(ImGuiMod_Shift, IsVkDown(VK_SHIFT));

  00043	b9 10 00 00 00	 mov	 ecx, 16
  00048	e8 00 00 00 00	 call	 ?IsVkDown@@YA_NH@Z	; IsVkDown
  0004d	44 0f b6 c0	 movzx	 r8d, al
  00051	ba 00 20 00 00	 mov	 edx, 8192		; 00002000H
  00056	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  0005a	e8 00 00 00 00	 call	 ?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z ; ImGuiIO::AddKeyEvent

; 246  :     io.AddKeyEvent(ImGuiMod_Alt, IsVkDown(VK_MENU));

  0005f	b9 12 00 00 00	 mov	 ecx, 18
  00064	e8 00 00 00 00	 call	 ?IsVkDown@@YA_NH@Z	; IsVkDown
  00069	44 0f b6 c0	 movzx	 r8d, al
  0006d	ba 00 40 00 00	 mov	 edx, 16384		; 00004000H
  00072	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00076	e8 00 00 00 00	 call	 ?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z ; ImGuiIO::AddKeyEvent

; 247  :     io.AddKeyEvent(ImGuiMod_Super, IsVkDown(VK_APPS));

  0007b	b9 5d 00 00 00	 mov	 ecx, 93			; 0000005dH
  00080	e8 00 00 00 00	 call	 ?IsVkDown@@YA_NH@Z	; IsVkDown
  00085	44 0f b6 c0	 movzx	 r8d, al
  00089	ba 00 80 00 00	 mov	 edx, 32768		; 00008000H
  0008e	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00092	e8 00 00 00 00	 call	 ?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z ; ImGuiIO::AddKeyEvent

; 248  : }

  00097	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009e	5f		 pop	 rdi
  0009f	5d		 pop	 rbp
  000a0	c3		 ret	 0
?ImGui_ImplWin32_UpdateKeyModifiers@@YAXXZ ENDP		; ImGui_ImplWin32_UpdateKeyModifiers
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_impl_win32.cpp
;	COMDAT ?ImGui_ImplWin32_ProcessKeyEventsWorkarounds@@YAXXZ
_TEXT	SEGMENT
?ImGui_ImplWin32_ProcessKeyEventsWorkarounds@@YAXXZ PROC ; ImGui_ImplWin32_ProcessKeyEventsWorkarounds, COMDAT

; 227  : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 228  :     // Left & right Shift keys: when both are pressed together, Windows tend to not generate the WM_KEYUP event for the first released one.
; 229  :     if (ImGui::IsKeyDown(ImGuiKey_LeftShift) && !IsVkDown(VK_LSHIFT))

  0001e	b9 10 02 00 00	 mov	 ecx, 528		; 00000210H
  00023	e8 00 00 00 00	 call	 ?IsKeyDown@ImGui@@YA_NW4ImGuiKey@@@Z ; ImGui::IsKeyDown
  00028	0f b6 c0	 movzx	 eax, al
  0002b	85 c0		 test	 eax, eax
  0002d	74 29		 je	 SHORT $LN2@ImGui_Impl
  0002f	b9 a0 00 00 00	 mov	 ecx, 160		; 000000a0H
  00034	e8 00 00 00 00	 call	 ?IsVkDown@@YA_NH@Z	; IsVkDown
  00039	0f b6 c0	 movzx	 eax, al
  0003c	85 c0		 test	 eax, eax
  0003e	75 18		 jne	 SHORT $LN2@ImGui_Impl

; 230  :         ImGui_ImplWin32_AddKeyEvent(ImGuiKey_LeftShift, false, VK_LSHIFT);

  00040	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  00046	41 b8 a0 00 00
	00		 mov	 r8d, 160		; 000000a0H
  0004c	33 d2		 xor	 edx, edx
  0004e	b9 10 02 00 00	 mov	 ecx, 528		; 00000210H
  00053	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_AddKeyEvent@@YAXW4ImGuiKey@@_NHH@Z ; ImGui_ImplWin32_AddKeyEvent
$LN2@ImGui_Impl:

; 231  :     if (ImGui::IsKeyDown(ImGuiKey_RightShift) && !IsVkDown(VK_RSHIFT))

  00058	b9 14 02 00 00	 mov	 ecx, 532		; 00000214H
  0005d	e8 00 00 00 00	 call	 ?IsKeyDown@ImGui@@YA_NW4ImGuiKey@@@Z ; ImGui::IsKeyDown
  00062	0f b6 c0	 movzx	 eax, al
  00065	85 c0		 test	 eax, eax
  00067	74 29		 je	 SHORT $LN3@ImGui_Impl
  00069	b9 a1 00 00 00	 mov	 ecx, 161		; 000000a1H
  0006e	e8 00 00 00 00	 call	 ?IsVkDown@@YA_NH@Z	; IsVkDown
  00073	0f b6 c0	 movzx	 eax, al
  00076	85 c0		 test	 eax, eax
  00078	75 18		 jne	 SHORT $LN3@ImGui_Impl

; 232  :         ImGui_ImplWin32_AddKeyEvent(ImGuiKey_RightShift, false, VK_RSHIFT);

  0007a	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  00080	41 b8 a1 00 00
	00		 mov	 r8d, 161		; 000000a1H
  00086	33 d2		 xor	 edx, edx
  00088	b9 14 02 00 00	 mov	 ecx, 532		; 00000214H
  0008d	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_AddKeyEvent@@YAXW4ImGuiKey@@_NHH@Z ; ImGui_ImplWin32_AddKeyEvent
$LN3@ImGui_Impl:

; 233  : 
; 234  :     // Sometimes WM_KEYUP for Win key is not passed down to the app (e.g. for Win+V on some setups, according to GLFW).
; 235  :     if (ImGui::IsKeyDown(ImGuiKey_LeftSuper) && !IsVkDown(VK_LWIN))

  00092	b9 12 02 00 00	 mov	 ecx, 530		; 00000212H
  00097	e8 00 00 00 00	 call	 ?IsKeyDown@ImGui@@YA_NW4ImGuiKey@@@Z ; ImGui::IsKeyDown
  0009c	0f b6 c0	 movzx	 eax, al
  0009f	85 c0		 test	 eax, eax
  000a1	74 29		 je	 SHORT $LN4@ImGui_Impl
  000a3	b9 5b 00 00 00	 mov	 ecx, 91			; 0000005bH
  000a8	e8 00 00 00 00	 call	 ?IsVkDown@@YA_NH@Z	; IsVkDown
  000ad	0f b6 c0	 movzx	 eax, al
  000b0	85 c0		 test	 eax, eax
  000b2	75 18		 jne	 SHORT $LN4@ImGui_Impl

; 236  :         ImGui_ImplWin32_AddKeyEvent(ImGuiKey_LeftSuper, false, VK_LWIN);

  000b4	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  000ba	41 b8 5b 00 00
	00		 mov	 r8d, 91			; 0000005bH
  000c0	33 d2		 xor	 edx, edx
  000c2	b9 12 02 00 00	 mov	 ecx, 530		; 00000212H
  000c7	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_AddKeyEvent@@YAXW4ImGuiKey@@_NHH@Z ; ImGui_ImplWin32_AddKeyEvent
$LN4@ImGui_Impl:

; 237  :     if (ImGui::IsKeyDown(ImGuiKey_RightSuper) && !IsVkDown(VK_RWIN))

  000cc	b9 16 02 00 00	 mov	 ecx, 534		; 00000216H
  000d1	e8 00 00 00 00	 call	 ?IsKeyDown@ImGui@@YA_NW4ImGuiKey@@@Z ; ImGui::IsKeyDown
  000d6	0f b6 c0	 movzx	 eax, al
  000d9	85 c0		 test	 eax, eax
  000db	74 29		 je	 SHORT $LN5@ImGui_Impl
  000dd	b9 5c 00 00 00	 mov	 ecx, 92			; 0000005cH
  000e2	e8 00 00 00 00	 call	 ?IsVkDown@@YA_NH@Z	; IsVkDown
  000e7	0f b6 c0	 movzx	 eax, al
  000ea	85 c0		 test	 eax, eax
  000ec	75 18		 jne	 SHORT $LN5@ImGui_Impl

; 238  :         ImGui_ImplWin32_AddKeyEvent(ImGuiKey_RightSuper, false, VK_RWIN);

  000ee	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  000f4	41 b8 5c 00 00
	00		 mov	 r8d, 92			; 0000005cH
  000fa	33 d2		 xor	 edx, edx
  000fc	b9 16 02 00 00	 mov	 ecx, 534		; 00000216H
  00101	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_AddKeyEvent@@YAXW4ImGuiKey@@_NHH@Z ; ImGui_ImplWin32_AddKeyEvent
$LN5@ImGui_Impl:

; 239  : }

  00106	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0010d	5f		 pop	 rdi
  0010e	5d		 pop	 rbp
  0010f	c3		 ret	 0
?ImGui_ImplWin32_ProcessKeyEventsWorkarounds@@YAXXZ ENDP ; ImGui_ImplWin32_ProcessKeyEventsWorkarounds
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_impl_win32.cpp
;	COMDAT ?ImGui_ImplWin32_AddKeyEvent@@YAXW4ImGuiKey@@_NHH@Z
_TEXT	SEGMENT
io$ = 8
key$ = 256
down$ = 264
native_keycode$ = 272
native_scancode$ = 280
?ImGui_ImplWin32_AddKeyEvent@@YAXW4ImGuiKey@@_NHH@Z PROC ; ImGui_ImplWin32_AddKeyEvent, COMDAT

; 219  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00012	55		 push	 rbp
  00013	57		 push	 rdi
  00014	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001b	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00020	48 8b fc	 mov	 rdi, rsp
  00023	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR [rsp+312]

; 220  :     ImGuiIO& io = ImGui::GetIO();

  00036	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  0003b	48 89 45 08	 mov	 QWORD PTR io$[rbp], rax

; 221  :     io.AddKeyEvent(key, down);

  0003f	44 0f b6 85 08
	01 00 00	 movzx	 r8d, BYTE PTR down$[rbp]
  00047	8b 95 00 01 00
	00		 mov	 edx, DWORD PTR key$[rbp]
  0004d	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00051	e8 00 00 00 00	 call	 ?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z ; ImGuiIO::AddKeyEvent

; 222  :     io.SetKeyEventNativeData(key, native_keycode, native_scancode); // To support legacy indexing (<1.87 user code)

  00056	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  0005e	44 8b 8d 18 01
	00 00		 mov	 r9d, DWORD PTR native_scancode$[rbp]
  00065	44 8b 85 10 01
	00 00		 mov	 r8d, DWORD PTR native_keycode$[rbp]
  0006c	8b 95 00 01 00
	00		 mov	 edx, DWORD PTR key$[rbp]
  00072	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00076	e8 00 00 00 00	 call	 ?SetKeyEventNativeData@ImGuiIO@@QEAAXW4ImGuiKey@@HHH@Z ; ImGuiIO::SetKeyEventNativeData

; 223  :     IM_UNUSED(native_scancode);
; 224  : }

  0007b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00082	5f		 pop	 rdi
  00083	5d		 pop	 rbp
  00084	c3		 ret	 0
?ImGui_ImplWin32_AddKeyEvent@@YAXW4ImGuiKey@@_NHH@Z ENDP ; ImGui_ImplWin32_AddKeyEvent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_impl_win32.cpp
;	COMDAT ?IsVkDown@@YA_NH@Z
_TEXT	SEGMENT
tv69 = 192
vk$ = 240
?IsVkDown@@YA_NH@Z PROC					; IsVkDown, COMDAT

; 214  : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR [rsp+280]

; 215  :     return (::GetKeyState(vk) & 0x8000) != 0;

  00028	8b 8d f0 00 00
	00		 mov	 ecx, DWORD PTR vk$[rbp]
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetKeyState
  00034	98		 cwde
  00035	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  0003a	85 c0		 test	 eax, eax
  0003c	74 0c		 je	 SHORT $LN3@IsVkDown
  0003e	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv69[rbp], 1
  00048	eb 0a		 jmp	 SHORT $LN4@IsVkDown
$LN3@IsVkDown:
  0004a	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv69[rbp], 0
$LN4@IsVkDown:
  00054	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv69[rbp]

; 216  : }

  0005b	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00062	5f		 pop	 rdi
  00063	5d		 pop	 rbp
  00064	c3		 ret	 0
?IsVkDown@@YA_NH@Z ENDP					; IsVkDown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_impl_win32.cpp
;	COMDAT ?ImGui_ImplWin32_UpdateMouseCursor@@YA_NXZ
_TEXT	SEGMENT
io$ = 8
imgui_cursor$ = 36
win32_cursor$1 = 72
tv73 = 276
?ImGui_ImplWin32_UpdateMouseCursor@@YA_NXZ PROC		; ImGui_ImplWin32_UpdateMouseCursor, COMDAT

; 181  : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 182  :     ImGuiIO& io = ImGui::GetIO();

  0001e	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  00023	48 89 45 08	 mov	 QWORD PTR io$[rbp], rax

; 183  :     if (io.ConfigFlags & ImGuiConfigFlags_NoMouseCursorChange)

  00027	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  0002b	8b 00		 mov	 eax, DWORD PTR [rax]
  0002d	83 e0 20	 and	 eax, 32			; 00000020H
  00030	85 c0		 test	 eax, eax
  00032	74 07		 je	 SHORT $LN4@ImGui_Impl

; 184  :         return false;

  00034	32 c0		 xor	 al, al
  00036	e9 ca 00 00 00	 jmp	 $LN1@ImGui_Impl
$LN4@ImGui_Impl:

; 185  : 
; 186  :     ImGuiMouseCursor imgui_cursor = ImGui::GetMouseCursor();

  0003b	e8 00 00 00 00	 call	 ?GetMouseCursor@ImGui@@YAHXZ ; ImGui::GetMouseCursor
  00040	89 45 24	 mov	 DWORD PTR imgui_cursor$[rbp], eax

; 187  :     if (imgui_cursor == ImGuiMouseCursor_None || io.MouseDrawCursor)

  00043	83 7d 24 ff	 cmp	 DWORD PTR imgui_cursor$[rbp], -1
  00047	74 0c		 je	 SHORT $LN7@ImGui_Impl
  00049	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  0004d	0f b6 40 70	 movzx	 eax, BYTE PTR [rax+112]
  00051	85 c0		 test	 eax, eax
  00053	74 0d		 je	 SHORT $LN5@ImGui_Impl
$LN7@ImGui_Impl:

; 188  :     {
; 189  :         // Hide OS mouse cursor if imgui is drawing it or if it wants no cursor
; 190  :         ::SetCursor(nullptr);

  00055	33 c9		 xor	 ecx, ecx
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetCursor

; 191  :     }
; 192  :     else

  0005d	e9 a1 00 00 00	 jmp	 $LN6@ImGui_Impl
$LN5@ImGui_Impl:

; 193  :     {
; 194  :         // Show OS mouse cursor
; 195  :         LPTSTR win32_cursor = IDC_ARROW;

  00062	48 c7 45 48 00
	7f 00 00	 mov	 QWORD PTR win32_cursor$1[rbp], 32512 ; 00007f00H

; 196  :         switch (imgui_cursor)

  0006a	8b 45 24	 mov	 eax, DWORD PTR imgui_cursor$[rbp]
  0006d	89 85 14 01 00
	00		 mov	 DWORD PTR tv73[rbp], eax
  00073	83 bd 14 01 00
	00 08		 cmp	 DWORD PTR tv73[rbp], 8
  0007a	77 72		 ja	 SHORT $LN2@ImGui_Impl
  0007c	48 63 85 14 01
	00 00		 movsxd	 rax, DWORD PTR tv73[rbp]
  00083	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0008a	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN18@ImGui_Impl[rcx+rax*4]
  00091	48 03 c1	 add	 rax, rcx
  00094	ff e0		 jmp	 rax
$LN8@ImGui_Impl:

; 197  :         {
; 198  :         case ImGuiMouseCursor_Arrow:        win32_cursor = IDC_ARROW; break;

  00096	48 c7 45 48 00
	7f 00 00	 mov	 QWORD PTR win32_cursor$1[rbp], 32512 ; 00007f00H
  0009e	eb 4e		 jmp	 SHORT $LN2@ImGui_Impl
$LN9@ImGui_Impl:

; 199  :         case ImGuiMouseCursor_TextInput:    win32_cursor = IDC_IBEAM; break;

  000a0	48 c7 45 48 01
	7f 00 00	 mov	 QWORD PTR win32_cursor$1[rbp], 32513 ; 00007f01H
  000a8	eb 44		 jmp	 SHORT $LN2@ImGui_Impl
$LN10@ImGui_Impl:

; 200  :         case ImGuiMouseCursor_ResizeAll:    win32_cursor = IDC_SIZEALL; break;

  000aa	48 c7 45 48 86
	7f 00 00	 mov	 QWORD PTR win32_cursor$1[rbp], 32646 ; 00007f86H
  000b2	eb 3a		 jmp	 SHORT $LN2@ImGui_Impl
$LN11@ImGui_Impl:

; 201  :         case ImGuiMouseCursor_ResizeEW:     win32_cursor = IDC_SIZEWE; break;

  000b4	48 c7 45 48 84
	7f 00 00	 mov	 QWORD PTR win32_cursor$1[rbp], 32644 ; 00007f84H
  000bc	eb 30		 jmp	 SHORT $LN2@ImGui_Impl
$LN12@ImGui_Impl:

; 202  :         case ImGuiMouseCursor_ResizeNS:     win32_cursor = IDC_SIZENS; break;

  000be	48 c7 45 48 85
	7f 00 00	 mov	 QWORD PTR win32_cursor$1[rbp], 32645 ; 00007f85H
  000c6	eb 26		 jmp	 SHORT $LN2@ImGui_Impl
$LN13@ImGui_Impl:

; 203  :         case ImGuiMouseCursor_ResizeNESW:   win32_cursor = IDC_SIZENESW; break;

  000c8	48 c7 45 48 83
	7f 00 00	 mov	 QWORD PTR win32_cursor$1[rbp], 32643 ; 00007f83H
  000d0	eb 1c		 jmp	 SHORT $LN2@ImGui_Impl
$LN14@ImGui_Impl:

; 204  :         case ImGuiMouseCursor_ResizeNWSE:   win32_cursor = IDC_SIZENWSE; break;

  000d2	48 c7 45 48 82
	7f 00 00	 mov	 QWORD PTR win32_cursor$1[rbp], 32642 ; 00007f82H
  000da	eb 12		 jmp	 SHORT $LN2@ImGui_Impl
$LN15@ImGui_Impl:

; 205  :         case ImGuiMouseCursor_Hand:         win32_cursor = IDC_HAND; break;

  000dc	48 c7 45 48 89
	7f 00 00	 mov	 QWORD PTR win32_cursor$1[rbp], 32649 ; 00007f89H
  000e4	eb 08		 jmp	 SHORT $LN2@ImGui_Impl
$LN16@ImGui_Impl:

; 206  :         case ImGuiMouseCursor_NotAllowed:   win32_cursor = IDC_NO; break;

  000e6	48 c7 45 48 88
	7f 00 00	 mov	 QWORD PTR win32_cursor$1[rbp], 32648 ; 00007f88H
$LN2@ImGui_Impl:

; 207  :         }
; 208  :         ::SetCursor(::LoadCursor(nullptr, win32_cursor));

  000ee	48 8b 55 48	 mov	 rdx, QWORD PTR win32_cursor$1[rbp]
  000f2	33 c9		 xor	 ecx, ecx
  000f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadCursorW
  000fa	48 8b c8	 mov	 rcx, rax
  000fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetCursor
$LN6@ImGui_Impl:

; 209  :     }
; 210  :     return true;

  00103	b0 01		 mov	 al, 1
$LN1@ImGui_Impl:

; 211  : }

  00105	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  0010c	5f		 pop	 rdi
  0010d	5d		 pop	 rbp
  0010e	c3		 ret	 0
  0010f	90		 npad	 1
$LN18@ImGui_Impl:
  00110	00 00 00 00	 DD	 $LN8@ImGui_Impl
  00114	00 00 00 00	 DD	 $LN9@ImGui_Impl
  00118	00 00 00 00	 DD	 $LN10@ImGui_Impl
  0011c	00 00 00 00	 DD	 $LN12@ImGui_Impl
  00120	00 00 00 00	 DD	 $LN11@ImGui_Impl
  00124	00 00 00 00	 DD	 $LN13@ImGui_Impl
  00128	00 00 00 00	 DD	 $LN14@ImGui_Impl
  0012c	00 00 00 00	 DD	 $LN15@ImGui_Impl
  00130	00 00 00 00	 DD	 $LN16@ImGui_Impl
?ImGui_ImplWin32_UpdateMouseCursor@@YA_NXZ ENDP		; ImGui_ImplWin32_UpdateMouseCursor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??$IM_DELETE@UImGui_ImplWin32_Data@@@@YAXPEAUImGui_ImplWin32_Data@@@Z
_TEXT	SEGMENT
p$ = 224
??$IM_DELETE@UImGui_ImplWin32_Data@@@@YAXPEAUImGui_ImplWin32_Data@@@Z PROC ; IM_DELETE<ImGui_ImplWin32_Data>, COMDAT

; 1745 : template<typename T> void IM_DELETE(T* p)   { if (p) { p->~T(); ImGui::MemFree(p); } }

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 83 bd e0 00
	00 00 00	 cmp	 QWORD PTR p$[rbp], 0
  00032	74 0c		 je	 SHORT $LN2@IM_DELETE
  00034	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  0003b	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN2@IM_DELETE:
  00040	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00047	5f		 pop	 rdi
  00048	5d		 pop	 rbp
  00049	c3		 ret	 0
??$IM_DELETE@UImGui_ImplWin32_Data@@@@YAXPEAUImGui_ImplWin32_Data@@@Z ENDP ; IM_DELETE<ImGui_ImplWin32_Data>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_impl_win32.cpp
;	COMDAT ?ImGui_ImplWin32_GetBackendData@@YAPEAUImGui_ImplWin32_Data@@XZ
_TEXT	SEGMENT
tv68 = 192
?ImGui_ImplWin32_GetBackendData@@YAPEAUImGui_ImplWin32_Data@@XZ PROC ; ImGui_ImplWin32_GetBackendData, COMDAT

; 108  : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 109  :     return ImGui::GetCurrentContext() ? (ImGui_ImplWin32_Data*)ImGui::GetIO().BackendPlatformUserData : nullptr;

  0001e	e8 00 00 00 00	 call	 ?GetCurrentContext@ImGui@@YAPEAUImGuiContext@@XZ ; ImGui::GetCurrentContext
  00023	48 85 c0	 test	 rax, rax
  00026	74 15		 je	 SHORT $LN3@ImGui_Impl
  00028	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  0002d	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00034	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv68[rbp], rax
  0003b	eb 0b		 jmp	 SHORT $LN4@ImGui_Impl
$LN3@ImGui_Impl:
  0003d	48 c7 85 c0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv68[rbp], 0
$LN4@ImGui_Impl:
  00048	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv68[rbp]

; 110  : }

  0004f	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00056	5f		 pop	 rdi
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
?ImGui_ImplWin32_GetBackendData@@YAPEAUImGui_ImplWin32_Data@@XZ ENDP ; ImGui_ImplWin32_GetBackendData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_impl_win32.cpp
;	COMDAT ??0ImGui_ImplWin32_Data@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGui_ImplWin32_Data@@QEAA@XZ PROC			; ImGui_ImplWin32_Data::ImGui_ImplWin32_Data, COMDAT

; 100  :     ImGui_ImplWin32_Data()      { memset((void*)this, 0, sizeof(*this)); }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	41 b8 48 00 00
	00		 mov	 r8d, 72			; 00000048H
  00030	33 d2		 xor	 edx, edx
  00032	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00039	e8 00 00 00 00	 call	 memset
  0003e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00045	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
??0ImGui_ImplWin32_Data@@QEAA@XZ ENDP			; ImGui_ImplWin32_Data::ImGui_ImplWin32_Data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_impl_win32.cpp
;	COMDAT ?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z
_TEXT	SEGMENT
composition$ = 4
opaque$ = 36
color$ = 68
region$8 = 104
bb$9 = 136
bb$10 = 184
__$ArrayPad$ = 408
hwnd$ = 448
?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z PROC	; ImGui_ImplWin32_EnableAlphaCompositing, COMDAT

; 777  : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+488]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 98 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 778  :     if (!_IsWindowsVistaOrGreater())

  0003b	45 33 c0	 xor	 r8d, r8d
  0003e	33 d2		 xor	 edx, edx
  00040	66 b9 06 00	 mov	 cx, 6
  00044	e8 00 00 00 00	 call	 ?_IsWindowsVersionOrGreater@@YAHGGG@Z ; _IsWindowsVersionOrGreater
  00049	85 c0		 test	 eax, eax
  0004b	75 05		 jne	 SHORT $LN2@ImGui_Impl

; 779  :         return;

  0004d	e9 e2 00 00 00	 jmp	 $LN1@ImGui_Impl
$LN2@ImGui_Impl:

; 780  : 
; 781  :     BOOL composition;
; 782  :     if (FAILED(::DwmIsCompositionEnabled(&composition)) || !composition)

  00052	48 8d 4d 04	 lea	 rcx, QWORD PTR composition$[rbp]
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DwmIsCompositionEnabled
  0005c	85 c0		 test	 eax, eax
  0005e	7c 06		 jl	 SHORT $LN4@ImGui_Impl
  00060	83 7d 04 00	 cmp	 DWORD PTR composition$[rbp], 0
  00064	75 05		 jne	 SHORT $LN3@ImGui_Impl
$LN4@ImGui_Impl:

; 783  :         return;

  00066	e9 c9 00 00 00	 jmp	 $LN1@ImGui_Impl
$LN3@ImGui_Impl:

; 784  : 
; 785  :     BOOL opaque;
; 786  :     DWORD color;
; 787  :     if (_IsWindows8OrGreater() || (SUCCEEDED(::DwmGetColorizationColor(&color, &opaque)) && !opaque))

  0006b	45 33 c0	 xor	 r8d, r8d
  0006e	66 ba 02 00	 mov	 dx, 2
  00072	66 b9 06 00	 mov	 cx, 6
  00076	e8 00 00 00 00	 call	 ?_IsWindowsVersionOrGreater@@YAHGGG@Z ; _IsWindowsVersionOrGreater
  0007b	85 c0		 test	 eax, eax
  0007d	75 18		 jne	 SHORT $LN7@ImGui_Impl
  0007f	48 8d 55 24	 lea	 rdx, QWORD PTR opaque$[rbp]
  00083	48 8d 4d 44	 lea	 rcx, QWORD PTR color$[rbp]
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DwmGetColorizationColor
  0008d	85 c0		 test	 eax, eax
  0008f	7c 72		 jl	 SHORT $LN5@ImGui_Impl
  00091	83 7d 24 00	 cmp	 DWORD PTR opaque$[rbp], 0
  00095	75 6c		 jne	 SHORT $LN5@ImGui_Impl
$LN7@ImGui_Impl:

; 788  :     {
; 789  :         HRGN region = ::CreateRectRgn(0, 0, -1, -1);

  00097	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  0009d	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  000a3	33 d2		 xor	 edx, edx
  000a5	33 c9		 xor	 ecx, ecx
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateRectRgn
  000ad	48 89 45 68	 mov	 QWORD PTR region$8[rbp], rax

; 790  :         DWM_BLURBEHIND bb = {};

  000b1	48 8d 85 88 00
	00 00		 lea	 rax, QWORD PTR bb$9[rbp]
  000b8	48 8b f8	 mov	 rdi, rax
  000bb	33 c0		 xor	 eax, eax
  000bd	b9 14 00 00 00	 mov	 ecx, 20
  000c2	f3 aa		 rep stosb

; 791  :         bb.dwFlags = DWM_BB_ENABLE | DWM_BB_BLURREGION;

  000c4	c7 85 88 00 00
	00 03 00 00 00	 mov	 DWORD PTR bb$9[rbp], 3

; 792  :         bb.hRgnBlur = region;

  000ce	48 8b 45 68	 mov	 rax, QWORD PTR region$8[rbp]
  000d2	48 89 85 90 00
	00 00		 mov	 QWORD PTR bb$9[rbp+8], rax

; 793  :         bb.fEnable = TRUE;

  000d9	c7 85 8c 00 00
	00 01 00 00 00	 mov	 DWORD PTR bb$9[rbp+4], 1

; 794  :         ::DwmEnableBlurBehindWindow((HWND)hwnd, &bb);

  000e3	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR bb$9[rbp]
  000ea	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR hwnd$[rbp]
  000f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DwmEnableBlurBehindWindow

; 795  :         ::DeleteObject(region);

  000f7	48 8b 4d 68	 mov	 rcx, QWORD PTR region$8[rbp]
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DeleteObject

; 796  :     }
; 797  :     else

  00101	eb 31		 jmp	 SHORT $LN6@ImGui_Impl
$LN5@ImGui_Impl:

; 798  :     {
; 799  :         DWM_BLURBEHIND bb = {};

  00103	48 8d 85 b8 00
	00 00		 lea	 rax, QWORD PTR bb$10[rbp]
  0010a	48 8b f8	 mov	 rdi, rax
  0010d	33 c0		 xor	 eax, eax
  0010f	b9 14 00 00 00	 mov	 ecx, 20
  00114	f3 aa		 rep stosb

; 800  :         bb.dwFlags = DWM_BB_ENABLE;

  00116	c7 85 b8 00 00
	00 01 00 00 00	 mov	 DWORD PTR bb$10[rbp], 1

; 801  :         ::DwmEnableBlurBehindWindow((HWND)hwnd, &bb);

  00120	48 8d 95 b8 00
	00 00		 lea	 rdx, QWORD PTR bb$10[rbp]
  00127	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR hwnd$[rbp]
  0012e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DwmEnableBlurBehindWindow
$LN6@ImGui_Impl:
$LN1@ImGui_Impl:

; 802  :     }
; 803  : }

  00134	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00138	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z$rtcFrameData
  0013f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00144	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0014b	48 33 cd	 xor	 rcx, rbp
  0014e	e8 00 00 00 00	 call	 __security_check_cookie
  00153	48 8d a5 a8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+424]
  0015a	5f		 pop	 rdi
  0015b	5d		 pop	 rbp
  0015c	c3		 ret	 0
?ImGui_ImplWin32_EnableAlphaCompositing@@YAXPEAX@Z ENDP	; ImGui_ImplWin32_EnableAlphaCompositing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_impl_win32.cpp
;	COMDAT ?ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z
_TEXT	SEGMENT
xdpi$ = 4
ydpi$ = 36
dc$ = 72
__$ArrayPad$ = 280
monitor$ = 320
?ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z PROC	; ImGui_ImplWin32_GetDpiScaleForMonitor, COMDAT

; 734  : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 18 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 735  :     UINT xdpi = 96, ydpi = 96;

  0003b	c7 45 04 60 00
	00 00		 mov	 DWORD PTR xdpi$[rbp], 96 ; 00000060H
  00042	c7 45 24 60 00
	00 00		 mov	 DWORD PTR ydpi$[rbp], 96 ; 00000060H

; 736  :     if (_IsWindows8Point1OrGreater())

  00049	45 33 c0	 xor	 r8d, r8d
  0004c	66 ba 03 00	 mov	 dx, 3
  00050	66 b9 06 00	 mov	 cx, 6
  00054	e8 00 00 00 00	 call	 ?_IsWindowsVersionOrGreater@@YAHGGG@Z ; _IsWindowsVersionOrGreater
  00059	85 c0		 test	 eax, eax
  0005b	0f 84 e6 00 00
	00		 je	 $LN3@ImGui_Impl

; 737  :     {
; 738  : 		static HINSTANCE shcore_dll = ::LoadLibraryA("shcore.dll"); // Reference counted per-process

  00061	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  00066	8b c0		 mov	 eax, eax
  00068	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0006e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00077	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0007b	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  0007e	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS0@?4??ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z@4HA, eax
  00084	7e 35		 jle	 SHORT $LN2@ImGui_Impl
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?4??ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z@4HA
  0008d	e8 00 00 00 00	 call	 _Init_thread_header
  00092	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?4??ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z@4HA, -1
  00099	75 20		 jne	 SHORT $LN2@ImGui_Impl
  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMFDIJCG@shcore?4dll?$AA@
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  000a8	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?shcore_dll@?4??ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z@4PEAUHINSTANCE__@@EA, rax
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?4??ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z@4HA
  000b6	e8 00 00 00 00	 call	 _Init_thread_footer
$LN2@ImGui_Impl:

; 739  : 		static PFN_GetDpiForMonitor GetDpiForMonitorFn = nullptr;
; 740  : 		if (GetDpiForMonitorFn == nullptr && shcore_dll != nullptr)

  000bb	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GetDpiForMonitorFn@?4??ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z@4P6AJPEAUHMONITOR__@@W4MONITOR_DPI_TYPE@@PEAI3@ZEA, 0
  000c3	75 25		 jne	 SHORT $LN4@ImGui_Impl
  000c5	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?shcore_dll@?4??ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z@4PEAUHINSTANCE__@@EA, 0
  000cd	74 1b		 je	 SHORT $LN4@ImGui_Impl

; 741  :             GetDpiForMonitorFn = (PFN_GetDpiForMonitor)::GetProcAddress(shcore_dll, "GetDpiForMonitor");

  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@MAMHPNNC@GetDpiForMonitor?$AA@
  000d6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?shcore_dll@?4??ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z@4PEAUHINSTANCE__@@EA
  000dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  000e3	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?GetDpiForMonitorFn@?4??ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z@4P6AJPEAUHMONITOR__@@W4MONITOR_DPI_TYPE@@PEAI3@ZEA, rax
$LN4@ImGui_Impl:

; 742  : 		if (GetDpiForMonitorFn != nullptr)

  000ea	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GetDpiForMonitorFn@?4??ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z@4P6AJPEAUHMONITOR__@@W4MONITOR_DPI_TYPE@@PEAI3@ZEA, 0
  000f2	74 53		 je	 SHORT $LN5@ImGui_Impl

; 743  : 		{
; 744  : 			GetDpiForMonitorFn((HMONITOR)monitor, MDT_EFFECTIVE_DPI, &xdpi, &ydpi);

  000f4	4c 8d 4d 24	 lea	 r9, QWORD PTR ydpi$[rbp]
  000f8	4c 8d 45 04	 lea	 r8, QWORD PTR xdpi$[rbp]
  000fc	33 d2		 xor	 edx, edx
  000fe	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR monitor$[rbp]
  00105	ff 15 00 00 00
	00		 call	 QWORD PTR ?GetDpiForMonitorFn@?4??ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z@4P6AJPEAUHMONITOR__@@W4MONITOR_DPI_TYPE@@PEAI3@ZEA

; 745  :             IM_ASSERT(xdpi == ydpi); // Please contact me if you hit this assert!

  0010b	8b 45 24	 mov	 eax, DWORD PTR ydpi$[rbp]
  0010e	39 45 04	 cmp	 DWORD PTR xdpi$[rbp], eax
  00111	74 22		 je	 SHORT $LN7@ImGui_Impl
  00113	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z@4JA
  00119	83 c0 0b	 add	 eax, 11
  0011c	44 8b c0	 mov	 r8d, eax
  0011f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GI@EPODBAAL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00126	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@NLANHJGB@?$AAx?$AAd?$AAp?$AAi?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy?$AAd?$AAp?$AAi?$AA?$AA@
  0012d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00133	33 c0		 xor	 eax, eax
$LN7@ImGui_Impl:

; 746  : 			return xdpi / 96.0f;

  00135	8b 45 04	 mov	 eax, DWORD PTR xdpi$[rbp]
  00138	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  0013d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c00000
  00145	eb 76		 jmp	 SHORT $LN1@ImGui_Impl
$LN5@ImGui_Impl:
$LN3@ImGui_Impl:

; 747  : 		}
; 748  :     }
; 749  : #ifndef NOGDI
; 750  :     const HDC dc = ::GetDC(nullptr);

  00147	33 c9		 xor	 ecx, ecx
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  0014f	48 89 45 48	 mov	 QWORD PTR dc$[rbp], rax

; 751  :     xdpi = ::GetDeviceCaps(dc, LOGPIXELSX);

  00153	ba 58 00 00 00	 mov	 edx, 88			; 00000058H
  00158	48 8b 4d 48	 mov	 rcx, QWORD PTR dc$[rbp]
  0015c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDeviceCaps
  00162	89 45 04	 mov	 DWORD PTR xdpi$[rbp], eax

; 752  :     ydpi = ::GetDeviceCaps(dc, LOGPIXELSY);

  00165	ba 5a 00 00 00	 mov	 edx, 90			; 0000005aH
  0016a	48 8b 4d 48	 mov	 rcx, QWORD PTR dc$[rbp]
  0016e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDeviceCaps
  00174	89 45 24	 mov	 DWORD PTR ydpi$[rbp], eax

; 753  :     IM_ASSERT(xdpi == ydpi); // Please contact me if you hit this assert!

  00177	8b 45 24	 mov	 eax, DWORD PTR ydpi$[rbp]
  0017a	39 45 04	 cmp	 DWORD PTR xdpi$[rbp], eax
  0017d	74 22		 je	 SHORT $LN8@ImGui_Impl
  0017f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z@4JA
  00185	83 c0 13	 add	 eax, 19
  00188	44 8b c0	 mov	 r8d, eax
  0018b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GI@EPODBAAL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@NLANHJGB@?$AAx?$AAd?$AAp?$AAi?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy?$AAd?$AAp?$AAi?$AA?$AA@
  00199	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0019f	33 c0		 xor	 eax, eax
$LN8@ImGui_Impl:

; 754  :     ::ReleaseDC(nullptr, dc);

  001a1	48 8b 55 48	 mov	 rdx, QWORD PTR dc$[rbp]
  001a5	33 c9		 xor	 ecx, ecx
  001a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseDC

; 755  : #endif
; 756  :     return xdpi / 96.0f;

  001ad	8b 45 04	 mov	 eax, DWORD PTR xdpi$[rbp]
  001b0	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  001b5	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c00000
$LN1@ImGui_Impl:

; 757  : }

  001bd	f3 0f 7f 44 24
	20		 movdqu	 XMMWORD PTR [rsp+32], xmm0
  001c3	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  001c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z$rtcFrameData
  001ce	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001d3	f3 0f 6f 44 24
	20		 movdqu	 xmm0, XMMWORD PTR [rsp+32]
  001d9	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001e0	48 33 cd	 xor	 rcx, rbp
  001e3	e8 00 00 00 00	 call	 __security_check_cookie
  001e8	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  001ef	5f		 pop	 rdi
  001f0	5d		 pop	 rbp
  001f1	c3		 ret	 0
?ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z ENDP	; ImGui_ImplWin32_GetDpiScaleForMonitor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_impl_win32.cpp
;	COMDAT ?ImGui_ImplWin32_GetDpiScaleForHwnd@@YAMPEAX@Z
_TEXT	SEGMENT
monitor$ = 8
hwnd$ = 256
?ImGui_ImplWin32_GetDpiScaleForHwnd@@YAMPEAX@Z PROC	; ImGui_ImplWin32_GetDpiScaleForHwnd, COMDAT

; 760  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]

; 761  :     HMONITOR monitor = ::MonitorFromWindow((HWND)hwnd, MONITOR_DEFAULTTONEAREST);

  0002a	ba 02 00 00 00	 mov	 edx, 2
  0002f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR hwnd$[rbp]
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MonitorFromWindow
  0003c	48 89 45 08	 mov	 QWORD PTR monitor$[rbp], rax

; 762  :     return ImGui_ImplWin32_GetDpiScaleForMonitor(monitor);

  00040	48 8b 4d 08	 mov	 rcx, QWORD PTR monitor$[rbp]
  00044	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_GetDpiScaleForMonitor@@YAMPEAX@Z ; ImGui_ImplWin32_GetDpiScaleForMonitor

; 763  : }

  00049	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
?ImGui_ImplWin32_GetDpiScaleForHwnd@@YAMPEAX@Z ENDP	; ImGui_ImplWin32_GetDpiScaleForHwnd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_impl_win32.cpp
;	COMDAT ?ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ
_TEXT	SEGMENT
SetThreadDpiAwarenessContextFn$1 = 8
SetProcessDpiAwarenessFn$2 = 40
?ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ PROC		; ImGui_ImplWin32_EnableDpiAwareness, COMDAT

; 705  : {

$LN9:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 706  :     if (_IsWindows10OrGreater())

  0001e	45 33 c0	 xor	 r8d, r8d
  00021	33 d2		 xor	 edx, edx
  00023	66 b9 0a 00	 mov	 cx, 10
  00027	e8 00 00 00 00	 call	 ?_IsWindowsVersionOrGreater@@YAHGGG@Z ; _IsWindowsVersionOrGreater
  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 88 00 00
	00		 je	 $LN4@ImGui_Impl

; 707  :     {
; 708  :         static HINSTANCE user32_dll = ::LoadLibraryA("user32.dll"); // Reference counted per-process

  00034	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  00039	8b c0		 mov	 eax, eax
  0003b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00041	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0004a	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0004e	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  00051	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS0@?4??ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ@4HA, eax
  00057	7e 35		 jle	 SHORT $LN2@ImGui_Impl
  00059	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?4??ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ@4HA
  00060	e8 00 00 00 00	 call	 _Init_thread_header
  00065	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?4??ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ@4HA, -1
  0006c	75 20		 jne	 SHORT $LN2@ImGui_Impl
  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@GMPLCCII@user32?4dll?$AA@
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  0007b	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?user32_dll@?4??ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ@4PEAUHINSTANCE__@@EA, rax
  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?4??ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ@4HA
  00089	e8 00 00 00 00	 call	 _Init_thread_footer
$LN2@ImGui_Impl:

; 709  :         if (PFN_SetThreadDpiAwarenessContext SetThreadDpiAwarenessContextFn = (PFN_SetThreadDpiAwarenessContext)::GetProcAddress(user32_dll, "SetThreadDpiAwarenessContext"))

  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@LDKNMGEI@SetThreadDpiAwarenessContext?$AA@
  00095	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?user32_dll@?4??ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ@4PEAUHINSTANCE__@@EA
  0009c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  000a2	48 89 45 08	 mov	 QWORD PTR SetThreadDpiAwarenessContextFn$1[rbp], rax
  000a6	48 83 7d 08 00	 cmp	 QWORD PTR SetThreadDpiAwarenessContextFn$1[rbp], 0
  000ab	74 0f		 je	 SHORT $LN5@ImGui_Impl

; 710  :         {
; 711  :             SetThreadDpiAwarenessContextFn(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2);

  000ad	48 c7 c1 fc ff
	ff ff		 mov	 rcx, -4
  000b4	ff 55 08	 call	 QWORD PTR SetThreadDpiAwarenessContextFn$1[rbp]

; 712  :             return;

  000b7	e9 a1 00 00 00	 jmp	 $LN1@ImGui_Impl
$LN5@ImGui_Impl:
$LN4@ImGui_Impl:

; 713  :         }
; 714  :     }
; 715  :     if (_IsWindows8Point1OrGreater())

  000bc	45 33 c0	 xor	 r8d, r8d
  000bf	66 ba 03 00	 mov	 dx, 3
  000c3	66 b9 06 00	 mov	 cx, 6
  000c7	e8 00 00 00 00	 call	 ?_IsWindowsVersionOrGreater@@YAHGGG@Z ; _IsWindowsVersionOrGreater
  000cc	85 c0		 test	 eax, eax
  000ce	0f 84 83 00 00
	00		 je	 $LN6@ImGui_Impl

; 716  :     {
; 717  :         static HINSTANCE shcore_dll = ::LoadLibraryA("shcore.dll"); // Reference counted per-process

  000d4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  000d9	8b c0		 mov	 eax, eax
  000db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000e1	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000ea	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  000ee	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  000f1	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS1@?L@??ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ@4HA, eax
  000f7	7e 35		 jle	 SHORT $LN3@ImGui_Impl
  000f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?L@??ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ@4HA
  00100	e8 00 00 00 00	 call	 _Init_thread_header
  00105	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS1@?L@??ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ@4HA, -1
  0010c	75 20		 jne	 SHORT $LN3@ImGui_Impl
  0010e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMFDIJCG@shcore?4dll?$AA@
  00115	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  0011b	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?shcore_dll@?L@??ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ@4PEAUHINSTANCE__@@EA, rax
  00122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?L@??ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ@4HA
  00129	e8 00 00 00 00	 call	 _Init_thread_footer
$LN3@ImGui_Impl:

; 718  :         if (PFN_SetProcessDpiAwareness SetProcessDpiAwarenessFn = (PFN_SetProcessDpiAwareness)::GetProcAddress(shcore_dll, "SetProcessDpiAwareness"))

  0012e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@DGFLCCMF@SetProcessDpiAwareness?$AA@
  00135	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?shcore_dll@?L@??ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ@4PEAUHINSTANCE__@@EA
  0013c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00142	48 89 45 28	 mov	 QWORD PTR SetProcessDpiAwarenessFn$2[rbp], rax
  00146	48 83 7d 28 00	 cmp	 QWORD PTR SetProcessDpiAwarenessFn$2[rbp], 0
  0014b	74 0a		 je	 SHORT $LN7@ImGui_Impl

; 719  :         {
; 720  :             SetProcessDpiAwarenessFn(PROCESS_PER_MONITOR_DPI_AWARE);

  0014d	b9 02 00 00 00	 mov	 ecx, 2
  00152	ff 55 28	 call	 QWORD PTR SetProcessDpiAwarenessFn$2[rbp]

; 721  :             return;

  00155	eb 06		 jmp	 SHORT $LN1@ImGui_Impl
$LN7@ImGui_Impl:
$LN6@ImGui_Impl:

; 722  :         }
; 723  :     }
; 724  : #if _WIN32_WINNT >= 0x0600
; 725  :     ::SetProcessDPIAware();

  00157	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetProcessDPIAware
$LN1@ImGui_Impl:

; 726  : #endif
; 727  : }

  0015d	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00164	5f		 pop	 rdi
  00165	5d		 pop	 rbp
  00166	c3		 ret	 0
?ImGui_ImplWin32_EnableDpiAwareness@@YAXXZ ENDP		; ImGui_ImplWin32_EnableDpiAwareness
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_impl_win32.cpp
;	COMDAT ?ImGui_ImplWin32_NewFrame@@YAXXZ
_TEXT	SEGMENT
io$ = 8
bd$ = 40
rect$ = 72
current_time$ = 120
mouse_cursor$ = 148
$T5 = 372
tv131 = 388
__$ArrayPad$ = 392
?ImGui_ImplWin32_NewFrame@@YAXXZ PROC			; ImGui_ImplWin32_NewFrame, COMDAT

; 335  : {

$LN8:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec b8 01
	00 00		 sub	 rsp, 440		; 000001b8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 6e 00 00 00	 mov	 ecx, 110		; 0000006eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00025	48 33 c5	 xor	 rax, rbp
  00028	48 89 85 88 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 336  :     ImGuiIO& io = ImGui::GetIO();

  0002f	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  00034	48 89 45 08	 mov	 QWORD PTR io$[rbp], rax

; 337  :     ImGui_ImplWin32_Data* bd = ImGui_ImplWin32_GetBackendData();

  00038	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_GetBackendData@@YAPEAUImGui_ImplWin32_Data@@XZ ; ImGui_ImplWin32_GetBackendData
  0003d	48 89 45 28	 mov	 QWORD PTR bd$[rbp], rax

; 338  :     IM_ASSERT(bd != nullptr && "Did you call ImGui_ImplWin32_Init()?");

  00041	48 83 7d 28 00	 cmp	 QWORD PTR bd$[rbp], 0
  00046	74 0c		 je	 SHORT $LN4@ImGui_Impl
  00048	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CF@IHMCJOCG@Did?5you?5call?5ImGui_ImplWin32_Ini@
  0004f	48 85 c0	 test	 rax, rax
  00052	75 22		 jne	 SHORT $LN5@ImGui_Impl
$LN4@ImGui_Impl:
  00054	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImGui_ImplWin32_NewFrame@@YAXXZ@4JA
  0005a	83 c0 03	 add	 eax, 3
  0005d	44 8b c0	 mov	 r8d, eax
  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GI@EPODBAAL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HA@CCCPNAKC@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAD?$AAi?$AAd?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAI@
  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00074	33 c0		 xor	 eax, eax
$LN5@ImGui_Impl:

; 339  : 
; 340  :     // Setup display size (every frame to accommodate for window resizing)
; 341  :     RECT rect = { 0, 0, 0, 0 };

  00076	c7 45 48 00 00
	00 00		 mov	 DWORD PTR rect$[rbp], 0
  0007d	c7 45 4c 00 00
	00 00		 mov	 DWORD PTR rect$[rbp+4], 0
  00084	c7 45 50 00 00
	00 00		 mov	 DWORD PTR rect$[rbp+8], 0
  0008b	c7 45 54 00 00
	00 00		 mov	 DWORD PTR rect$[rbp+12], 0

; 342  :     ::GetClientRect(bd->hWnd, &rect);

  00092	48 8d 55 48	 lea	 rdx, QWORD PTR rect$[rbp]
  00096	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  0009a	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0009d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 343  :     io.DisplaySize = ImVec2((float)(rect.right - rect.left), (float)(rect.bottom - rect.top));

  000a3	8b 45 4c	 mov	 eax, DWORD PTR rect$[rbp+4]
  000a6	8b 4d 54	 mov	 ecx, DWORD PTR rect$[rbp+12]
  000a9	2b c8		 sub	 ecx, eax
  000ab	8b c1		 mov	 eax, ecx
  000ad	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000b1	8b 45 48	 mov	 eax, DWORD PTR rect$[rbp]
  000b4	8b 4d 50	 mov	 ecx, DWORD PTR rect$[rbp+8]
  000b7	2b c8		 sub	 ecx, eax
  000b9	8b c1		 mov	 eax, ecx
  000bb	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  000bf	0f 28 d0	 movaps	 xmm2, xmm0
  000c2	48 8d 8d 74 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  000c9	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000ce	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d1	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  000d5	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 344  : 
; 345  :     // Setup time step
; 346  :     INT64 current_time = 0;

  000d9	48 c7 45 78 00
	00 00 00	 mov	 QWORD PTR current_time$[rbp], 0

; 347  :     ::QueryPerformanceCounter((LARGE_INTEGER*)&current_time);

  000e1	48 8d 4d 78	 lea	 rcx, QWORD PTR current_time$[rbp]
  000e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 348  :     io.DeltaTime = (float)(current_time - bd->Time) / bd->TicksPerSecond;

  000eb	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  000ef	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  000f3	48 8b 4d 78	 mov	 rcx, QWORD PTR current_time$[rbp]
  000f7	48 2b c8	 sub	 rcx, rax
  000fa	48 8b c1	 mov	 rax, rcx
  000fd	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  00102	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  00106	f3 48 0f 2a 48
	20		 cvtsi2ss xmm1, QWORD PTR [rax+32]
  0010c	f3 0f 5e c1	 divss	 xmm0, xmm1
  00110	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  00114	f3 0f 11 40 10	 movss	 DWORD PTR [rax+16], xmm0

; 349  :     bd->Time = current_time;

  00119	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  0011d	48 8b 4d 78	 mov	 rcx, QWORD PTR current_time$[rbp]
  00121	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 350  : 
; 351  :     // Update OS mouse position
; 352  :     ImGui_ImplWin32_UpdateMouseData();

  00125	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_UpdateMouseData@@YAXXZ ; ImGui_ImplWin32_UpdateMouseData

; 353  : 
; 354  :     // Process workarounds for known Windows key handling issues
; 355  :     ImGui_ImplWin32_ProcessKeyEventsWorkarounds();

  0012a	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_ProcessKeyEventsWorkarounds@@YAXXZ ; ImGui_ImplWin32_ProcessKeyEventsWorkarounds

; 356  : 
; 357  :     // Update OS mouse cursor with the cursor requested by imgui
; 358  :     ImGuiMouseCursor mouse_cursor = io.MouseDrawCursor ? ImGuiMouseCursor_None : ImGui::GetMouseCursor();

  0012f	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  00133	0f b6 40 70	 movzx	 eax, BYTE PTR [rax+112]
  00137	85 c0		 test	 eax, eax
  00139	74 0c		 je	 SHORT $LN6@ImGui_Impl
  0013b	c7 85 84 01 00
	00 ff ff ff ff	 mov	 DWORD PTR tv131[rbp], -1
  00145	eb 0b		 jmp	 SHORT $LN7@ImGui_Impl
$LN6@ImGui_Impl:
  00147	e8 00 00 00 00	 call	 ?GetMouseCursor@ImGui@@YAHXZ ; ImGui::GetMouseCursor
  0014c	89 85 84 01 00
	00		 mov	 DWORD PTR tv131[rbp], eax
$LN7@ImGui_Impl:
  00152	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR tv131[rbp]
  00158	89 85 94 00 00
	00		 mov	 DWORD PTR mouse_cursor$[rbp], eax

; 359  :     if (bd->LastMouseCursor != mouse_cursor)

  0015e	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  00162	8b 8d 94 00 00
	00		 mov	 ecx, DWORD PTR mouse_cursor$[rbp]
  00168	39 48 28	 cmp	 DWORD PTR [rax+40], ecx
  0016b	74 12		 je	 SHORT $LN2@ImGui_Impl

; 360  :     {
; 361  :         bd->LastMouseCursor = mouse_cursor;

  0016d	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  00171	8b 8d 94 00 00
	00		 mov	 ecx, DWORD PTR mouse_cursor$[rbp]
  00177	89 48 28	 mov	 DWORD PTR [rax+40], ecx

; 362  :         ImGui_ImplWin32_UpdateMouseCursor();

  0017a	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_UpdateMouseCursor@@YA_NXZ ; ImGui_ImplWin32_UpdateMouseCursor
$LN2@ImGui_Impl:

; 363  :     }
; 364  : 
; 365  :     // Update game controllers (if enabled and available)
; 366  :     ImGui_ImplWin32_UpdateGamepads();

  0017f	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_UpdateGamepads@@YAXXZ ; ImGui_ImplWin32_UpdateGamepads

; 367  : }

  00184	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00188	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ImGui_ImplWin32_NewFrame@@YAXXZ$rtcFrameData
  0018f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00194	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0019b	48 33 cd	 xor	 rcx, rbp
  0019e	e8 00 00 00 00	 call	 __security_check_cookie
  001a3	48 8d a5 98 01
	00 00		 lea	 rsp, QWORD PTR [rbp+408]
  001aa	5f		 pop	 rdi
  001ab	5d		 pop	 rbp
  001ac	c3		 ret	 0
?ImGui_ImplWin32_NewFrame@@YAXXZ ENDP			; ImGui_ImplWin32_NewFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_impl_win32.cpp
;	COMDAT ?ImGui_ImplWin32_Shutdown@@YAXXZ
_TEXT	SEGMENT
bd$ = 8
io$ = 40
?ImGui_ImplWin32_Shutdown@@YAXXZ PROC			; ImGui_ImplWin32_Shutdown, COMDAT

; 164  : {

$LN6:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 165  :     ImGui_ImplWin32_Data* bd = ImGui_ImplWin32_GetBackendData();

  0001e	e8 00 00 00 00	 call	 ?ImGui_ImplWin32_GetBackendData@@YAPEAUImGui_ImplWin32_Data@@XZ ; ImGui_ImplWin32_GetBackendData
  00023	48 89 45 08	 mov	 QWORD PTR bd$[rbp], rax

; 166  :     IM_ASSERT(bd != nullptr && "No platform backend to shutdown, or already shutdown?");

  00027	48 83 7d 08 00	 cmp	 QWORD PTR bd$[rbp], 0
  0002c	74 0c		 je	 SHORT $LN4@ImGui_Impl
  0002e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DG@FOHIIHPF@No?5platform?5backend?5to?5shutdown?0@
  00035	48 85 c0	 test	 rax, rax
  00038	75 22		 jne	 SHORT $LN5@ImGui_Impl
$LN4@ImGui_Impl:
  0003a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImGui_ImplWin32_Shutdown@@YAXXZ@4JA
  00040	83 c0 02	 add	 eax, 2
  00043	44 8b c0	 mov	 r8d, eax
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GI@EPODBAAL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1JC@EOLFHJCH@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAN?$AAo?$AA?5?$AAp?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AA?5?$AAb?$AAa@
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005a	33 c0		 xor	 eax, eax
$LN5@ImGui_Impl:

; 167  :     ImGuiIO& io = ImGui::GetIO();

  0005c	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  00061	48 89 45 28	 mov	 QWORD PTR io$[rbp], rax

; 168  : 
; 169  :     // Unload XInput library
; 170  : #ifndef IMGUI_IMPL_WIN32_DISABLE_GAMEPAD
; 171  :     if (bd->XInputDLL)

  00065	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00069	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  0006e	74 0e		 je	 SHORT $LN2@ImGui_Impl

; 172  :         ::FreeLibrary(bd->XInputDLL);

  00070	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00074	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FreeLibrary
$LN2@ImGui_Impl:

; 173  : #endif // IMGUI_IMPL_WIN32_DISABLE_GAMEPAD
; 174  : 
; 175  :     io.BackendPlatformName = nullptr;

  0007e	48 8b 45 28	 mov	 rax, QWORD PTR io$[rbp]
  00082	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 176  :     io.BackendPlatformUserData = nullptr;

  0008d	48 8b 45 28	 mov	 rax, QWORD PTR io$[rbp]
  00091	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0

; 177  :     IM_DELETE(bd);

  0009c	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  000a0	e8 00 00 00 00	 call	 ??$IM_DELETE@UImGui_ImplWin32_Data@@@@YAXPEAUImGui_ImplWin32_Data@@@Z ; IM_DELETE<ImGui_ImplWin32_Data>

; 178  : }

  000a5	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000ac	5f		 pop	 rdi
  000ad	5d		 pop	 rbp
  000ae	c3		 ret	 0
?ImGui_ImplWin32_Shutdown@@YAXXZ ENDP			; ImGui_ImplWin32_Shutdown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_impl_win32.cpp
;	COMDAT ?ImGui_ImplWin32_Init@@YA_NPEAX@Z
_TEXT	SEGMENT
io$ = 8
perf_frequency$ = 40
perf_counter$ = 72
bd$ = 104
xinput_dll_names$ = 136
n$6 = 196
dll$7 = 232
$T8 = 456
$T9 = 488
$T10 = 520
$T11 = 552
$T12 = 580
$T13 = 616
tv95 = 632
__$ArrayPad$ = 640
hwnd$ = 688
?ImGui_ImplWin32_Init@@YA_NPEAX@Z PROC			; ImGui_ImplWin32_Init, COMDAT

; 114  : {

$LN14:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec b8 02
	00 00		 sub	 rsp, 696		; 000002b8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 ae 00 00 00	 mov	 ecx, 174		; 000000aeH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+728]
  0002a	48 c7 85 68 02
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T13[rbp], -2
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 80 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 115  :     ImGuiIO& io = ImGui::GetIO();

  00046	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  0004b	48 89 45 08	 mov	 QWORD PTR io$[rbp], rax

; 116  :     IM_ASSERT(io.BackendPlatformUserData == nullptr && "Already initialized a platform backend!");

  0004f	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  00053	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  0005b	75 0c		 jne	 SHORT $LN9@ImGui_Impl
  0005d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CI@MLMDDGPF@Already?5initialized?5a?5platform?5b@
  00064	48 85 c0	 test	 rax, rax
  00067	75 22		 jne	 SHORT $LN10@ImGui_Impl
$LN9@ImGui_Impl:
  00069	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImGui_ImplWin32_Init@@YA_NPEAX@Z@4JA
  0006f	83 c0 02	 add	 eax, 2
  00072	44 8b c0	 mov	 r8d, eax
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GI@EPODBAAL@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1KG@NFMLHFPC@?$AAi?$AAo?$AA?4?$AAB?$AAa?$AAc?$AAk?$AAe?$AAn?$AAd?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAU?$AAs?$AAe?$AAr?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAu@
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00089	33 c0		 xor	 eax, eax
$LN10@ImGui_Impl:

; 117  : 
; 118  :     INT64 perf_frequency, perf_counter;
; 119  :     if (!::QueryPerformanceFrequency((LARGE_INTEGER*)&perf_frequency))

  0008b	48 8d 4d 28	 lea	 rcx, QWORD PTR perf_frequency$[rbp]
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceFrequency
  00095	85 c0		 test	 eax, eax
  00097	75 07		 jne	 SHORT $LN5@ImGui_Impl

; 120  :         return false;

  00099	32 c0		 xor	 al, al
  0009b	e9 04 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN5@ImGui_Impl:

; 121  :     if (!::QueryPerformanceCounter((LARGE_INTEGER*)&perf_counter))

  000a0	48 8d 4d 48	 lea	 rcx, QWORD PTR perf_counter$[rbp]
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter
  000aa	85 c0		 test	 eax, eax
  000ac	75 07		 jne	 SHORT $LN6@ImGui_Impl

; 122  :         return false;

  000ae	32 c0		 xor	 al, al
  000b0	e9 ef 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN6@ImGui_Impl:

; 123  : 
; 124  :     // Setup backend capabilities flags
; 125  :     ImGui_ImplWin32_Data* bd = IM_NEW(ImGui_ImplWin32_Data)();

  000b5	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  000ba	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  000bf	48 89 85 08 02
	00 00		 mov	 QWORD PTR $T10[rbp], rax
  000c6	48 8d 85 44 02
	00 00		 lea	 rax, QWORD PTR $T12[rbp]
  000cd	48 89 85 28 02
	00 00		 mov	 QWORD PTR $T11[rbp], rax
  000d4	4c 8b 85 08 02
	00 00		 mov	 r8, QWORD PTR $T10[rbp]
  000db	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR $T11[rbp]
  000e2	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  000e5	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  000ea	e8 00 00 00 00	 call	 ??2@YAPEAX_KUImNewWrapper@@PEAX@Z ; operator new
  000ef	48 89 85 e8 01
	00 00		 mov	 QWORD PTR $T9[rbp], rax
  000f6	48 83 bd e8 01
	00 00 00	 cmp	 QWORD PTR $T9[rbp], 0
  000fe	74 15		 je	 SHORT $LN11@ImGui_Impl
  00100	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR $T9[rbp]
  00107	e8 00 00 00 00	 call	 ??0ImGui_ImplWin32_Data@@QEAA@XZ ; ImGui_ImplWin32_Data::ImGui_ImplWin32_Data
  0010c	48 89 85 78 02
	00 00		 mov	 QWORD PTR tv95[rbp], rax
  00113	eb 0b		 jmp	 SHORT $LN12@ImGui_Impl
$LN11@ImGui_Impl:
  00115	48 c7 85 78 02
	00 00 00 00 00
	00		 mov	 QWORD PTR tv95[rbp], 0
$LN12@ImGui_Impl:
  00120	48 8b 85 78 02
	00 00		 mov	 rax, QWORD PTR tv95[rbp]
  00127	48 89 85 c8 01
	00 00		 mov	 QWORD PTR $T8[rbp], rax
  0012e	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR $T8[rbp]
  00135	48 89 45 68	 mov	 QWORD PTR bd$[rbp], rax

; 126  :     io.BackendPlatformUserData = (void*)bd;

  00139	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  0013d	48 8b 4d 68	 mov	 rcx, QWORD PTR bd$[rbp]
  00141	48 89 88 90 00
	00 00		 mov	 QWORD PTR [rax+144], rcx

; 127  :     io.BackendPlatformName = "imgui_impl_win32";

  00148	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  0014c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@FLGJPPJK@imgui_impl_win32?$AA@
  00153	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 128  :     io.BackendFlags |= ImGuiBackendFlags_HasMouseCursors;         // We can honor GetMouseCursor() values (optional)

  0015a	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  0015e	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00161	83 c8 02	 or	 eax, 2
  00164	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00168	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 129  :     io.BackendFlags |= ImGuiBackendFlags_HasSetMousePos;          // We can honor io.WantSetMousePos requests (optional, rarely used)

  0016b	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  0016f	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00172	83 c8 04	 or	 eax, 4
  00175	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00179	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 130  : 
; 131  :     bd->hWnd = (HWND)hwnd;

  0017c	48 8b 45 68	 mov	 rax, QWORD PTR bd$[rbp]
  00180	48 8b 8d b0 02
	00 00		 mov	 rcx, QWORD PTR hwnd$[rbp]
  00187	48 89 08	 mov	 QWORD PTR [rax], rcx

; 132  :     bd->TicksPerSecond = perf_frequency;

  0018a	48 8b 45 68	 mov	 rax, QWORD PTR bd$[rbp]
  0018e	48 8b 4d 28	 mov	 rcx, QWORD PTR perf_frequency$[rbp]
  00192	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 133  :     bd->Time = perf_counter;

  00196	48 8b 45 68	 mov	 rax, QWORD PTR bd$[rbp]
  0019a	48 8b 4d 48	 mov	 rcx, QWORD PTR perf_counter$[rbp]
  0019e	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 134  :     bd->LastMouseCursor = ImGuiMouseCursor_COUNT;

  001a2	48 8b 45 68	 mov	 rax, QWORD PTR bd$[rbp]
  001a6	c7 40 28 09 00
	00 00		 mov	 DWORD PTR [rax+40], 9

; 135  : 
; 136  :     // Set platform dependent data in viewport
; 137  :     ImGui::GetMainViewport()->PlatformHandleRaw = (void*)hwnd;

  001ad	e8 00 00 00 00	 call	 ?GetMainViewport@ImGui@@YAPEAUImGuiViewport@@XZ ; ImGui::GetMainViewport
  001b2	48 8b 8d b0 02
	00 00		 mov	 rcx, QWORD PTR hwnd$[rbp]
  001b9	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 138  : 
; 139  :     // Dynamically load XInput library
; 140  : #ifndef IMGUI_IMPL_WIN32_DISABLE_GAMEPAD
; 141  :     bd->WantUpdateHasGamepad = true;

  001bd	48 8b 45 68	 mov	 rax, QWORD PTR bd$[rbp]
  001c1	c6 40 2d 01	 mov	 BYTE PTR [rax+45], 1

; 142  :     const char* xinput_dll_names[] =
; 143  :     {
; 144  :         "xinput1_4.dll",   // Windows 8+

  001c5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@LNFLKCMF@xinput1_4?4dll?$AA@
  001cc	48 89 85 88 00
	00 00		 mov	 QWORD PTR xinput_dll_names$[rbp], rax

; 145  :         "xinput1_3.dll",   // DirectX SDK

  001d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@KAFOJCHN@xinput1_3?4dll?$AA@
  001da	48 89 85 90 00
	00 00		 mov	 QWORD PTR xinput_dll_names$[rbp+8], rax

; 146  :         "xinput9_1_0.dll", // Windows Vista, Windows 7

  001e1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BA@GHGALGFD@xinput9_1_0?4dll?$AA@
  001e8	48 89 85 98 00
	00 00		 mov	 QWORD PTR xinput_dll_names$[rbp+16], rax

; 147  :         "xinput1_2.dll",   // DirectX SDK

  001ef	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@GLACEBNI@xinput1_2?4dll?$AA@
  001f6	48 89 85 a0 00
	00 00		 mov	 QWORD PTR xinput_dll_names$[rbp+24], rax

; 148  :         "xinput1_1.dll"    // DirectX SDK

  001fd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@ONJGDDHG@xinput1_1?4dll?$AA@
  00204	48 89 85 a8 00
	00 00		 mov	 QWORD PTR xinput_dll_names$[rbp+32], rax

; 149  :     };
; 150  :     for (int n = 0; n < IM_ARRAYSIZE(xinput_dll_names); n++)

  0020b	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR n$6[rbp], 0
  00215	eb 0e		 jmp	 SHORT $LN4@ImGui_Impl
$LN2@ImGui_Impl:
  00217	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR n$6[rbp]
  0021d	ff c0		 inc	 eax
  0021f	89 85 c4 00 00
	00		 mov	 DWORD PTR n$6[rbp], eax
$LN4@ImGui_Impl:
  00225	83 bd c4 00 00
	00 05		 cmp	 DWORD PTR n$6[rbp], 5
  0022c	7d 74		 jge	 SHORT $LN3@ImGui_Impl

; 151  :         if (HMODULE dll = ::LoadLibraryA(xinput_dll_names[n]))

  0022e	48 63 85 c4 00
	00 00		 movsxd	 rax, DWORD PTR n$6[rbp]
  00235	48 8b 8c c5 88
	00 00 00	 mov	 rcx, QWORD PTR xinput_dll_names$[rbp+rax*8]
  0023d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00243	48 89 85 e8 00
	00 00		 mov	 QWORD PTR dll$7[rbp], rax
  0024a	48 83 bd e8 00
	00 00 00	 cmp	 QWORD PTR dll$7[rbp], 0
  00252	74 49		 je	 SHORT $LN7@ImGui_Impl

; 152  :         {
; 153  :             bd->XInputDLL = dll;

  00254	48 8b 45 68	 mov	 rax, QWORD PTR bd$[rbp]
  00258	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR dll$7[rbp]
  0025f	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 154  :             bd->XInputGetCapabilities = (PFN_XInputGetCapabilities)::GetProcAddress(dll, "XInputGetCapabilities");

  00263	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@ELBNFOBA@XInputGetCapabilities?$AA@
  0026a	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR dll$7[rbp]
  00271	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00277	48 8b 4d 68	 mov	 rcx, QWORD PTR bd$[rbp]
  0027b	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 155  :             bd->XInputGetState = (PFN_XInputGetState)::GetProcAddress(dll, "XInputGetState");

  0027f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@FCCEJHCC@XInputGetState?$AA@
  00286	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR dll$7[rbp]
  0028d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00293	48 8b 4d 68	 mov	 rcx, QWORD PTR bd$[rbp]
  00297	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 156  :             break;

  0029b	eb 05		 jmp	 SHORT $LN3@ImGui_Impl
$LN7@ImGui_Impl:

; 157  :         }

  0029d	e9 75 ff ff ff	 jmp	 $LN2@ImGui_Impl
$LN3@ImGui_Impl:

; 158  : #endif // IMGUI_IMPL_WIN32_DISABLE_GAMEPAD
; 159  : 
; 160  :     return true;

  002a2	b0 01		 mov	 al, 1
$LN1@ImGui_Impl:

; 161  : }

  002a4	48 8b f8	 mov	 rdi, rax
  002a7	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  002ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ImGui_ImplWin32_Init@@YA_NPEAX@Z$rtcFrameData
  002b2	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002b7	48 8b c7	 mov	 rax, rdi
  002ba	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  002c1	48 33 cd	 xor	 rcx, rbp
  002c4	e8 00 00 00 00	 call	 __security_check_cookie
  002c9	48 8d a5 98 02
	00 00		 lea	 rsp, QWORD PTR [rbp+664]
  002d0	5f		 pop	 rdi
  002d1	5d		 pop	 rbp
  002d2	c3		 ret	 0
?ImGui_ImplWin32_Init@@YA_NPEAX@Z ENDP			; ImGui_ImplWin32_Init
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
io$ = 8
perf_frequency$ = 40
perf_counter$ = 72
bd$ = 104
xinput_dll_names$ = 136
n$6 = 196
dll$7 = 232
$T8 = 456
$T9 = 488
$T10 = 520
$T11 = 552
$T12 = 580
$T13 = 616
tv95 = 632
__$ArrayPad$ = 640
hwnd$ = 688
?dtor$0@?0??ImGui_ImplWin32_Init@@YA_NPEAX@Z@4HA PROC	; `ImGui_ImplWin32_Init'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	4c 8b 85 08 02
	00 00		 mov	 r8, QWORD PTR $T10[rbp]
  0001b	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR $T11[rbp]
  00022	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00025	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR $T9[rbp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAXUImNewWrapper@@0@Z ; operator delete
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?dtor$0@?0??ImGui_ImplWin32_Init@@YA_NPEAX@Z@4HA ENDP	; `ImGui_ImplWin32_Init'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
io$ = 8
perf_frequency$ = 40
perf_counter$ = 72
bd$ = 104
xinput_dll_names$ = 136
n$6 = 196
dll$7 = 232
$T8 = 456
$T9 = 488
$T10 = 520
$T11 = 552
$T12 = 580
$T13 = 616
tv95 = 632
__$ArrayPad$ = 640
hwnd$ = 688
?dtor$0@?0??ImGui_ImplWin32_Init@@YA_NPEAX@Z@4HA PROC	; `ImGui_ImplWin32_Init'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	4c 8b 85 08 02
	00 00		 mov	 r8, QWORD PTR $T10[rbp]
  0001b	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR $T11[rbp]
  00022	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00025	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR $T9[rbp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAXUImNewWrapper@@0@Z ; operator delete
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?dtor$0@?0??ImGui_ImplWin32_Init@@YA_NPEAX@Z@4HA ENDP	; `ImGui_ImplWin32_Init'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??3@YAXPEAXUImNewWrapper@@0@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
__formal$ = 240
??3@YAXPEAXUImNewWrapper@@0@Z PROC			; operator delete, COMDAT

; 1740 : inline void  operator delete(void*, ImNewWrapper, void*)   {} // This is only required so we can use the symmetrical new()

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00017	48 8b ec	 mov	 rbp, rsp
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00031	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00038	5f		 pop	 rdi
  00039	5d		 pop	 rbp
  0003a	c3		 ret	 0
??3@YAXPEAXUImNewWrapper@@0@Z ENDP			; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??2@YAPEAX_KUImNewWrapper@@PEAX@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
ptr$ = 240
??2@YAPEAX_KUImNewWrapper@@PEAX@Z PROC			; operator new, COMDAT

; 1739 : inline void* operator new(size_t, ImNewWrapper, void* ptr) { return ptr; }

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00017	48 8b ec	 mov	 rbp, rsp
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00031	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR ptr$[rbp]
  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
??2@YAPEAX_KUImNewWrapper@@PEAX@Z ENDP			; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0ImVec2@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 80
_x$ = 88
_y$ = 96
??0ImVec2@@QEAA@MM@Z PROC				; ImVec2::ImVec2, COMDAT

; 257  :     constexpr ImVec2(float _x, float _y)    : x(_x), y(_y) { }

$LN3:
  00000	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  00006	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  0000c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00011	55		 push	 rbp
  00012	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00016	48 8b ec	 mov	 rbp, rsp
  00019	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0001d	f3 0f 10 45 58	 movss	 xmm0, DWORD PTR _x$[rbp]
  00022	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  00026	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0002a	f3 0f 10 45 60	 movss	 xmm0, DWORD PTR _y$[rbp]
  0002f	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  00034	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00038	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
??0ImVec2@@QEAA@MM@Z ENDP				; ImVec2::ImVec2
_TEXT	ENDS
END
