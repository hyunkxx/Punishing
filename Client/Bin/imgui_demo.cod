; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24245.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04BAJDEDPD@Root?$AA@			; `string'
PUBLIC	??_C@_06HHJDFOK@Folder?$AA@			; `string'
PUBLIC	??_C@_05LMJFOPOI@Music?$AA@			; `string'
PUBLIC	??_C@_08FLHNKADJ@Textures?$AA@			; `string'
PUBLIC	??_C@_0M@NNNKMEPA@desktop?4ini?$AA@		; `string'
PUBLIC	??_C@_0M@IGEMGAFG@System?5file?$AA@		; `string'
PUBLIC	??_C@_0M@EKPJMDEN@File1_a?4wav?$AA@		; `string'
PUBLIC	??_C@_0L@COLMADCA@Audio?5file?$AA@		; `string'
PUBLIC	??_C@_0M@MMGNLBOD@File1_b?4wav?$AA@		; `string'
PUBLIC	??_C@_0N@FHEINFFG@Image001?4png?$AA@		; `string'
PUBLIC	??_C@_0L@FLGLCLEK@Image?5file?$AA@		; `string'
PUBLIC	??_C@_0BF@LIFBAFGM@Copy?5of?5Image001?4png?$AA@	; `string'
PUBLIC	??_C@_0BO@DEMDOGLF@Copy?5of?5Image001?5?$CIFinal2?$CJ?4png?$AA@ ; `string'
PUBLIC	??_C@_0L@KKHKDDPE@Grapefruit?$AA@		; `string'
PUBLIC	??_C@_09HNADIOOI@Blueberry?$AA@			; `string'
PUBLIC	??_C@_04PCFHDAMD@Plum?$AA@			; `string'
PUBLIC	??_C@_07BHKDNCIF@Coconut?$AA@			; `string'
PUBLIC	??_C@_04FJCKHKHL@Pear?$AA@			; `string'
PUBLIC	??_C@_07GAABODDK@Apricot?$AA@			; `string'
PUBLIC	?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA	; GImGuiDemoMarkerCallback
PUBLIC	?GImGuiDemoMarkerCallbackUserData@@3PEAXEA	; GImGuiDemoMarkerCallbackUserData
PUBLIC	?s_current_sort_specs@MyItem@?A0x1ed25892@@2PEBUImGuiTableSortSpecs@@EB ; `anonymous namespace'::MyItem::s_current_sort_specs
PUBLIC	??_C@_07MCAEODGB@Default?$AA@			; `string'
PUBLIC	??_C@_0LF@IILMEFCL@Use?5default?5sizing?5policy?3?6?9?5ImG@ ; `string'
PUBLIC	??_C@_0BP@MPLHLLNP@ImGuiTableFlags_SizingFixedFit?$AA@ ; `string'
PUBLIC	??_C@_0GJ@LHMCJKNJ@Columns?5default?5to?5_WidthFixed?5?$CI@ ; `string'
PUBLIC	??_C@_0CA@HAGKEPPO@ImGuiTableFlags_SizingFixedSame?$AA@ ; `string'
PUBLIC	??_C@_0KD@KKOOHGIJ@Columns?5are?5all?5the?5same?5width?0?5@ ; `string'
PUBLIC	??_C@_0CC@IBLLEAPK@ImGuiTableFlags_SizingStretchPro@ ; `string'
PUBLIC	??_C@_0EM@EAECLPPK@Columns?5default?5to?5_WidthStretch@ ; `string'
PUBLIC	??_C@_0CC@LAIGPACB@ImGuiTableFlags_SizingStretchSam@ ; `string'
PUBLIC	??_C@_0DE@LNEEFNDM@Columns?5default?5to?5_WidthStretch@ ; `string'
PUBLIC	??_C@_05DDEOPHNO@Bobby?$AA@			; `string'
PUBLIC	??_C@_08FLMMIHDE@Beatrice?$AA@			; `string'
PUBLIC	??_C@_05BECHDIPO@Betty?$AA@			; `string'
PUBLIC	??_C@_07OEGNBIJH@Brianna?$AA@			; `string'
PUBLIC	??_C@_05MAEBLNFA@Barry?$AA@			; `string'
PUBLIC	??_C@_07JNHNGBFJ@Bernard?$AA@			; `string'
PUBLIC	??_C@_04KCKMHEOC@Bibi?$AA@			; `string'
PUBLIC	??_C@_06HGIOBEEM@Blaine?$AA@			; `string'
PUBLIC	??_C@_04HKIGHOCK@Bryn?$AA@			; `string'
PUBLIC	??_C@_08HGEMKAAG@Item?5One?$AA@			; `string'
PUBLIC	??_C@_08BIEMAAON@Item?5Two?$AA@			; `string'
PUBLIC	??_C@_0L@PNIFIMNF@Item?5Three?$AA@		; `string'
PUBLIC	??_C@_09FNJGFEIF@Item?5Four?$AA@		; `string'
PUBLIC	??_C@_09HPDIDBJG@Item?5Five?$AA@		; `string'
PUBLIC	??_C@_05EBJDGKGA@Apple?$AA@			; `string'
PUBLIC	??_C@_06OJJIHNKI@Banana?$AA@			; `string'
PUBLIC	??_C@_06MKLLCMPJ@Cherry?$AA@			; `string'
PUBLIC	??_C@_04LFFBHHAI@Kiwi?$AA@			; `string'
PUBLIC	??_C@_05CNKNDDOO@Mango?$AA@			; `string'
PUBLIC	??_C@_06LMIDBFFB@Orange?$AA@			; `string'
PUBLIC	??_C@_09EBEMMGPP@Pineapple?$AA@			; `string'
PUBLIC	??_C@_0L@BNANDFPN@Strawberry?$AA@		; `string'
PUBLIC	??_C@_0L@JJNGHCMI@Watermelon?$AA@		; `string'
_BSS	SEGMENT
?buf1@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 040H DUP (?) ; `ShowDemoWindowWidgets'::`441'::buf1
?buf2@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 040H DUP (?) ; `ShowDemoWindowWidgets'::`441'::buf2
?buf3@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 040H DUP (?) ; `ShowDemoWindowWidgets'::`441'::buf3
?buf4@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 040H DUP (?) ; `ShowDemoWindowWidgets'::`441'::buf4
?buf5@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 040H DUP (?) ; `ShowDemoWindowWidgets'::`441'::buf5
?buf6@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 040H DUP (?) ; `ShowDemoWindowWidgets'::`441'::buf6
?edit_count@?BMD@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`451'::edit_count
?f3@?EI@??ShowDemoWindowInputs@@YAXXZ@4PAMA DD 03H DUP (?) ; `ShowDemoWindowInputs'::`72'::f3
?dummy_f@?BJM@??ShowDemoWindowTables@@YAXXZ@4MA DD 01H DUP (?) ; `ShowDemoWindowTables'::`412'::dummy_f
?column_selected@?BKL@??ShowDemoWindowTables@@YAXXZ@4PA_NA DB 03H DUP (?) ; `ShowDemoWindowTables'::`427'::column_selected
	ALIGN	4

?next_tab_id@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`520'::next_tab_id
?counter@?8??ShowExampleAppLog@@YAXPEA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppLog'::`9'::counter
?show_config_info@?1??ShowAboutWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowAboutWindow'::`2'::show_config_info
	ALIGN	4

?values@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 05aH DUP (?) ; `ShowDemoWindowWidgets'::`556'::values
?values_offset@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`556'::values_offset
?refresh_time@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4NA DQ 01H DUP (?) ; `ShowDemoWindowWidgets'::`556'::refresh_time
?selected@?4??ShowExampleAppLayout@@YAXPEA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppLayout'::`5'::selected
?phase@?CDE@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`564'::phase
?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA DQ 01H DUP (?) ; GImGuiDemoMarkerCallback
?GImGuiDemoMarkerCallbackUserData@@3PEAXEA DQ 01H DUP (?) ; GImGuiDemoMarkerCallbackUserData
?show_app_main_menu_bar@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_main_menu_bar
	ALIGN	4

?show_app_documents@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_documents
	ALIGN	4

?show_app_console@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_console
	ALIGN	4

?show_app_log@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_log
	ALIGN	4

?show_app_layout@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_layout
	ALIGN	4

?show_app_property_editor@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_property_editor
	ALIGN	4

?show_app_long_text@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_long_text
	ALIGN	4

?show_app_auto_resize@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_auto_resize
	ALIGN	4

?show_app_constrained_resize@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_constrained_resize
	ALIGN	4

?show_app_simple_overlay@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_simple_overlay
	ALIGN	4

?show_app_fullscreen@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_fullscreen
	ALIGN	4

?show_app_window_titles@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_window_titles
	ALIGN	4

?show_app_custom_rendering@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_custom_rendering
	ALIGN	4

?show_app_metrics@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_metrics
	ALIGN	4

?row_min_height@?CAP@??ShowDemoWindowTables@@YAXXZ@4MA DD 01H DUP (?) ; `ShowDemoWindowTables'::`527'::row_min_height
?func_type@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`556'::func_type
?show_app_debug_log@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_debug_log
	ALIGN	4

?inner_width_with_scroll@?CAP@??ShowDemoWindowTables@@YAXXZ@4MA DD 01H DUP (?) ; `ShowDemoWindowTables'::`527'::inner_width_with_scroll
?show_app_stack_tool@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_stack_tool
	ALIGN	4

?show_app_about@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_about
	ALIGN	4

?show_wrapped_text@?CAP@??ShowDemoWindowTables@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowTables'::`527'::show_wrapped_text
	ALIGN	4

?show_app_style_editor@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_style_editor
	ALIGN	4

?no_titlebar@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_titlebar
	ALIGN	4

?no_scrollbar@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_scrollbar
	ALIGN	4

?progress@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`556'::progress
?no_menu@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_menu
	ALIGN	4

?no_move@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_move
	ALIGN	4

?no_resize@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_resize
	ALIGN	4

?no_collapse@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_collapse
	ALIGN	4

?dont_ask_me_next_time@?GN@??ShowDemoWindowPopups@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowPopups'::`109'::dont_ask_me_next_time
	ALIGN	4

?no_close@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_close
	ALIGN	4

?no_nav@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_nav
	ALIGN	4

?items_need_sort@?CAP@??ShowDemoWindowTables@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowTables'::`527'::items_need_sort
	ALIGN	4

?no_background@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_background
	ALIGN	4

?no_bring_to_front@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_bring_to_front
	ALIGN	4

?unsaved_document@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::unsaved_document
	ALIGN	4

?alpha_half_preview@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'::`586'::alpha_half_preview
	ALIGN	4

?hdr@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'::`586'::hdr
	ALIGN	4

?test_type@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppLongText'::`2'::test_type
?lines@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppLongText'::`2'::lines
?show_debug_details@?CAP@??ShowDemoWindowTables@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowTables'::`527'::show_debug_details
	ALIGN	4

?output_dest@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA DD 01H DUP (?) ; `ImGui::ShowStyleEditor'::`41'::output_dest
?alpha_flags@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA DD 01H DUP (?) ; `ImGui::ShowStyleEditor'::`41'::alpha_flags
?no_border@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'::`586'::no_border
	ALIGN	4

?ref_color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'::`586'::ref_color
	ALIGN	4

?display_mode@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`586'::display_mode
?picker_mode@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`586'::picker_mode
?flags@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`675'::flags
?auto_resize@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ShowExampleAppConstrainedResize'::`2'::auto_resize
	ALIGN	8

?s_current_sort_specs@MyItem@?A0x1ed25892@@2PEBUImGuiTableSortSpecs@@EB DQ 01H DUP (?) ; `anonymous namespace'::MyItem::s_current_sort_specs
?disable_all@?1??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'::`2'::disable_all
	ALIGN	4

?clicked@?BB@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`17'::clicked
?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'::`689'::drag_clamp
	ALIGN	4

?e@?BB@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`17'::e
?location@?1??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppSimpleOverlay'::`2'::location
?counter@?BB@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`17'::counter
?int_value@?CML@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`715'::int_value
?str1@?EB@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 080H DUP (?) ; `ShowDemoWindowWidgets'::`65'::str1
?n@?CC@??ShowExampleMenuFile@@YAXXZ@4HA DD 01H DUP (?)	; `ShowExampleMenuFile'::`34'::n
?i1@?EP@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`79'::i1
?f2@?EP@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`79'::f2
?angle@?EP@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`79'::angle
?disable_indent@?1??ShowDemoWindowTables@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowTables'::`2'::disable_indent
	ALIGN	4

?mode@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`754'::mode
?disable_mouse_wheel@?P@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`15'::disable_mouse_wheel
	ALIGN	4

?disable_menu@?P@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`15'::disable_menu
	ALIGN	4

?elem@?EP@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`79'::elem
?offset_x@?CE@??ShowDemoWindowLayout@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowLayout'::`36'::offset_x
?item_current@?GB@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`97'::item_current
?display_headers@?DB@??ShowDemoWindowTables@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowTables'::`49'::display_headers
	ALIGN	4

?contents_type@?DB@??ShowDemoWindowTables@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowTables'::`49'::contents_type
?f@?CM@??ShowDemoWindowLayout@@YAXXZ@4MA DD 01H DUP (?)	; `ShowDemoWindowLayout'::`44'::f
?align_label_with_current_x_position@?IJ@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'[::J]::align_label_with_current_x_position
	ALIGN	4

?test_drag_and_drop@?IJ@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'[::J]::test_drag_and_drop
	ALIGN	4

?item_disabled@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'::`816'::item_disabled
	ALIGN	4

?b@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'::`816'::b
	ALIGN	4

?circle_segments_override@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ShowExampleAppCustomRendering'::`15'::circle_segments_override
	ALIGN	4

?str@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 010H DUP (?) ; `ShowDemoWindowWidgets'::`816'::str
?curve_segments_override@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ShowExampleAppCustomRendering'::`15'::curve_segments_override
	ALIGN	4

?c1@?EC@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`66'::c1
	ALIGN	4

?c2@?EC@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`66'::c2
	ALIGN	4

?c3@?EC@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`66'::c3
	ALIGN	4

?c4@?EC@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`66'::c4
	ALIGN	4

?embed_all_inside_a_child_window@?DGN@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'::`877'::embed_all_inside_a_child_window
	ALIGN	4

?test_window@?DGN@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'::`877'::test_window
	ALIGN	4

?show_headers@?JH@??ShowDemoWindowTables@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowTables'::`151'::show_headers
	ALIGN	4

?pressed_count@?OK@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`234'::pressed_count
?enable_extra_decorations@?IE@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'[::E]::enable_extra_decorations
	ALIGN	4

?scroll_to_off_px@?IE@??ShowDemoWindowLayout@@YAXXZ@4MA DD 01H DUP (?) ; `ShowDemoWindowLayout'[::E]::scroll_to_off_px
?adding_line@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA DB 01H DUP (?) ; `ShowExampleAppCustomRendering'::`22'::adding_line
	ALIGN	4

?flags@?BAP@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`271'::flags
?item_current_idx@?BAP@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`271'::item_current_idx
?contents_type@?LK@??ShowDemoWindowTables@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowTables'::`186'::contents_type
?item_current_2@?BAP@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`271'::item_current_2
?text_buf@?MO@??ShowDemoWindowTables@@YAXXZ@4PADA DB 020H DUP (?) ; `ShowDemoWindowTables'::`206'::text_buf
?item_current_4@?BAP@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`271'::item_current_4
?item_current_idx@?BCD@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`291'::item_current_idx
?show_horizontal_contents_size_demo_window@?IE@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'[::E]::show_horizontal_contents_size_demo_window
	ALIGN	4

?column_flags_out@?BAF@??ShowDemoWindowTables@@YAXXZ@4PAHA DD 03H DUP (?) ; `ShowDemoWindowTables'::`261'::column_flags_out
?show_text_wrapped@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`203'::show_text_wrapped
	ALIGN	4

?selection@?BFJ@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA DB 05H DUP (?) ; `ShowDemoWindowWidgets'::`345'::selection
	ALIGN	4

?show_child@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`203'::show_child
	ALIGN	4

?explicit_content_size@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`203'::explicit_content_size
	ALIGN	4

?selected@?BGH@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA DB 03H DUP (?) ; `ShowDemoWindowWidgets'::`359'::selected
	ALIGN	4

?selected@?BGO@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA DB 0aH DUP (?) ; `ShowDemoWindowWidgets'::`366'::selected
	ALIGN	4

?flags2@?BBM@??ShowDemoWindowTables@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowTables'::`284'::flags2
_BSS	ENDS
;	COMDAT ??_C@_0L@JJNGHCMI@Watermelon?$AA@
CONST	SEGMENT
??_C@_0L@JJNGHCMI@Watermelon?$AA@ DB 'Watermelon', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BNANDFPN@Strawberry?$AA@
CONST	SEGMENT
??_C@_0L@BNANDFPN@Strawberry?$AA@ DB 'Strawberry', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EBEMMGPP@Pineapple?$AA@
CONST	SEGMENT
??_C@_09EBEMMGPP@Pineapple?$AA@ DB 'Pineapple', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMIDBFFB@Orange?$AA@
CONST	SEGMENT
??_C@_06LMIDBFFB@Orange?$AA@ DB 'Orange', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CNKNDDOO@Mango?$AA@
CONST	SEGMENT
??_C@_05CNKNDDOO@Mango?$AA@ DB 'Mango', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LFFBHHAI@Kiwi?$AA@
CONST	SEGMENT
??_C@_04LFFBHHAI@Kiwi?$AA@ DB 'Kiwi', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MKLLCMPJ@Cherry?$AA@
CONST	SEGMENT
??_C@_06MKLLCMPJ@Cherry?$AA@ DB 'Cherry', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OJJIHNKI@Banana?$AA@
CONST	SEGMENT
??_C@_06OJJIHNKI@Banana?$AA@ DB 'Banana', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EBJDGKGA@Apple?$AA@
CONST	SEGMENT
??_C@_05EBJDGKGA@Apple?$AA@ DB 'Apple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HPDIDBJG@Item?5Five?$AA@
CONST	SEGMENT
??_C@_09HPDIDBJG@Item?5Five?$AA@ DB 'Item Five', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FNJGFEIF@Item?5Four?$AA@
CONST	SEGMENT
??_C@_09FNJGFEIF@Item?5Four?$AA@ DB 'Item Four', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PNIFIMNF@Item?5Three?$AA@
CONST	SEGMENT
??_C@_0L@PNIFIMNF@Item?5Three?$AA@ DB 'Item Three', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BIEMAAON@Item?5Two?$AA@
CONST	SEGMENT
??_C@_08BIEMAAON@Item?5Two?$AA@ DB 'Item Two', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGEMKAAG@Item?5One?$AA@
CONST	SEGMENT
??_C@_08HGEMKAAG@Item?5One?$AA@ DB 'Item One', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HKIGHOCK@Bryn?$AA@
CONST	SEGMENT
??_C@_04HKIGHOCK@Bryn?$AA@ DB 'Bryn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HGIOBEEM@Blaine?$AA@
CONST	SEGMENT
??_C@_06HGIOBEEM@Blaine?$AA@ DB 'Blaine', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KCKMHEOC@Bibi?$AA@
CONST	SEGMENT
??_C@_04KCKMHEOC@Bibi?$AA@ DB 'Bibi', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JNHNGBFJ@Bernard?$AA@
CONST	SEGMENT
??_C@_07JNHNGBFJ@Bernard?$AA@ DB 'Bernard', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MAEBLNFA@Barry?$AA@
CONST	SEGMENT
??_C@_05MAEBLNFA@Barry?$AA@ DB 'Barry', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OEGNBIJH@Brianna?$AA@
CONST	SEGMENT
??_C@_07OEGNBIJH@Brianna?$AA@ DB 'Brianna', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BECHDIPO@Betty?$AA@
CONST	SEGMENT
??_C@_05BECHDIPO@Betty?$AA@ DB 'Betty', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FLMMIHDE@Beatrice?$AA@
CONST	SEGMENT
??_C@_08FLMMIHDE@Beatrice?$AA@ DB 'Beatrice', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05DDEOPHNO@Bobby?$AA@
CONST	SEGMENT
??_C@_05DDEOPHNO@Bobby?$AA@ DB 'Bobby', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@LNEEFNDM@Columns?5default?5to?5_WidthStretch@
CONST	SEGMENT
??_C@_0DE@LNEEFNDM@Columns?5default?5to?5_WidthStretch@ DB 'Columns defau'
	DB	'lt to _WidthStretch with same weights.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LAIGPACB@ImGuiTableFlags_SizingStretchSam@
CONST	SEGMENT
??_C@_0CC@LAIGPACB@ImGuiTableFlags_SizingStretchSam@ DB 'ImGuiTableFlags_'
	DB	'SizingStretchSame', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@EAECLPPK@Columns?5default?5to?5_WidthStretch@
CONST	SEGMENT
??_C@_0EM@EAECLPPK@Columns?5default?5to?5_WidthStretch@ DB 'Columns defau'
	DB	'lt to _WidthStretch with weights proportional to their widths'
	DB	'.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@IBLLEAPK@ImGuiTableFlags_SizingStretchPro@
CONST	SEGMENT
??_C@_0CC@IBLLEAPK@ImGuiTableFlags_SizingStretchPro@ DB 'ImGuiTableFlags_'
	DB	'SizingStretchProp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0KD@KKOOHGIJ@Columns?5are?5all?5the?5same?5width?0?5@
CONST	SEGMENT
??_C@_0KD@KKOOHGIJ@Columns?5are?5all?5the?5same?5width?0?5@ DB 'Columns a'
	DB	're all the same width, matching the maximum contents width.', 0aH
	DB	'Implicitly disable ImGuiTableFlags_Resizable and enable ImGui'
	DB	'TableFlags_NoKeepColumnsVisible.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HAGKEPPO@ImGuiTableFlags_SizingFixedSame?$AA@
CONST	SEGMENT
??_C@_0CA@HAGKEPPO@ImGuiTableFlags_SizingFixedSame?$AA@ DB 'ImGuiTableFla'
	DB	'gs_SizingFixedSame', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@LHMCJKNJ@Columns?5default?5to?5_WidthFixed?5?$CI@
CONST	SEGMENT
??_C@_0GJ@LHMCJKNJ@Columns?5default?5to?5_WidthFixed?5?$CI@ DB 'Columns d'
	DB	'efault to _WidthFixed (if resizable) or _WidthAuto (if not re'
	DB	'sizable), matching contents width.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MPLHLLNP@ImGuiTableFlags_SizingFixedFit?$AA@
CONST	SEGMENT
??_C@_0BP@MPLHLLNP@ImGuiTableFlags_SizingFixedFit?$AA@ DB 'ImGuiTableFlag'
	DB	's_SizingFixedFit', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0LF@IILMEFCL@Use?5default?5sizing?5policy?3?6?9?5ImG@
CONST	SEGMENT
??_C@_0LF@IILMEFCL@Use?5default?5sizing?5policy?3?6?9?5ImG@ DB 'Use defau'
	DB	'lt sizing policy:', 0aH, '- ImGuiTableFlags_SizingFixedFit if'
	DB	' ScrollX is on or if host window has ImGuiWindowFlags_AlwaysA'
	DB	'utoResize.', 0aH, '- ImGuiTableFlags_SizingStretchSame otherw'
	DB	'ise.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_07MCAEODGB@Default?$AA@
CONST	SEGMENT
??_C@_07MCAEODGB@Default?$AA@ DB 'Default', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GAABODDK@Apricot?$AA@
CONST	SEGMENT
??_C@_07GAABODDK@Apricot?$AA@ DB 'Apricot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FJCKHKHL@Pear?$AA@
CONST	SEGMENT
??_C@_04FJCKHKHL@Pear?$AA@ DB 'Pear', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BHKDNCIF@Coconut?$AA@
CONST	SEGMENT
??_C@_07BHKDNCIF@Coconut?$AA@ DB 'Coconut', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PCFHDAMD@Plum?$AA@
CONST	SEGMENT
??_C@_04PCFHDAMD@Plum?$AA@ DB 'Plum', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HNADIOOI@Blueberry?$AA@
CONST	SEGMENT
??_C@_09HNADIOOI@Blueberry?$AA@ DB 'Blueberry', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KKHKDDPE@Grapefruit?$AA@
CONST	SEGMENT
??_C@_0L@KKHKDDPE@Grapefruit?$AA@ DB 'Grapefruit', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DEMDOGLF@Copy?5of?5Image001?5?$CIFinal2?$CJ?4png?$AA@
CONST	SEGMENT
??_C@_0BO@DEMDOGLF@Copy?5of?5Image001?5?$CIFinal2?$CJ?4png?$AA@ DB 'Copy '
	DB	'of Image001 (Final2).png', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LIFBAFGM@Copy?5of?5Image001?4png?$AA@
CONST	SEGMENT
??_C@_0BF@LIFBAFGM@Copy?5of?5Image001?4png?$AA@ DB 'Copy of Image001.png', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FLGLCLEK@Image?5file?$AA@
CONST	SEGMENT
??_C@_0L@FLGLCLEK@Image?5file?$AA@ DB 'Image file', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FHEINFFG@Image001?4png?$AA@
CONST	SEGMENT
??_C@_0N@FHEINFFG@Image001?4png?$AA@ DB 'Image001.png', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MMGNLBOD@File1_b?4wav?$AA@
CONST	SEGMENT
??_C@_0M@MMGNLBOD@File1_b?4wav?$AA@ DB 'File1_b.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@COLMADCA@Audio?5file?$AA@
CONST	SEGMENT
??_C@_0L@COLMADCA@Audio?5file?$AA@ DB 'Audio file', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EKPJMDEN@File1_a?4wav?$AA@
CONST	SEGMENT
??_C@_0M@EKPJMDEN@File1_a?4wav?$AA@ DB 'File1_a.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IGEMGAFG@System?5file?$AA@
CONST	SEGMENT
??_C@_0M@IGEMGAFG@System?5file?$AA@ DB 'System file', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NNNKMEPA@desktop?4ini?$AA@
CONST	SEGMENT
??_C@_0M@NNNKMEPA@desktop?4ini?$AA@ DB 'desktop.ini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FLHNKADJ@Textures?$AA@
CONST	SEGMENT
??_C@_08FLHNKADJ@Textures?$AA@ DB 'Textures', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LMJFOPOI@Music?$AA@
CONST	SEGMENT
??_C@_05LMJFOPOI@Music?$AA@ DB 'Music', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HHJDFOK@Folder?$AA@
CONST	SEGMENT
??_C@_06HHJDFOK@Folder?$AA@ DB 'Folder', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BAJDEDPD@Root?$AA@
CONST	SEGMENT
??_C@_04BAJDEDPD@Root?$AA@ DB 'Root', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
?nodes@?BIO@??ShowDemoWindowTables@@YAXXZ@4QBUMyTreeNode@?BIO@??1@YAXXZ@B DQ FLAT:??_C@_04BAJDEDPD@Root?$AA@ ; `ShowDemoWindowTables'::`398'::nodes
	DQ	FLAT:??_C@_06HHJDFOK@Folder?$AA@
	DD	0ffffffffH
	DD	01H
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_05LMJFOPOI@Music?$AA@
	DQ	FLAT:??_C@_06HHJDFOK@Folder?$AA@
	DD	0ffffffffH
	DD	04H
	DD	02H
	ORG $+4
	DQ	FLAT:??_C@_08FLHNKADJ@Textures?$AA@
	DQ	FLAT:??_C@_06HHJDFOK@Folder?$AA@
	DD	0ffffffffH
	DD	06H
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0M@NNNKMEPA@desktop?4ini?$AA@
	DQ	FLAT:??_C@_0M@IGEMGAFG@System?5file?$AA@
	DD	0400H
	DD	0ffffffffH
	DD	0ffffffffH
	ORG $+4
	DQ	FLAT:??_C@_0M@EKPJMDEN@File1_a?4wav?$AA@
	DQ	FLAT:??_C@_0L@COLMADCA@Audio?5file?$AA@
	DD	01e078H
	DD	0ffffffffH
	DD	0ffffffffH
	ORG $+4
	DQ	FLAT:??_C@_0M@MMGNLBOD@File1_b?4wav?$AA@
	DQ	FLAT:??_C@_0L@COLMADCA@Audio?5file?$AA@
	DD	06f540H
	DD	0ffffffffH
	DD	0ffffffffH
	ORG $+4
	DQ	FLAT:??_C@_0N@FHEINFFG@Image001?4png?$AA@
	DQ	FLAT:??_C@_0L@FLGLCLEK@Image?5file?$AA@
	DD	031978H
	DD	0ffffffffH
	DD	0ffffffffH
	ORG $+4
	DQ	FLAT:??_C@_0BF@LIFBAFGM@Copy?5of?5Image001?4png?$AA@
	DQ	FLAT:??_C@_0L@FLGLCLEK@Image?5file?$AA@
	DD	0319f8H
	DD	0ffffffffH
	DD	0ffffffffH
	ORG $+4
	DQ	FLAT:??_C@_0BO@DEMDOGLF@Copy?5of?5Image001?5?$CIFinal2?$CJ?4png?$AA@
	DQ	FLAT:??_C@_0L@FLGLCLEK@Image?5file?$AA@
	DD	031af8H
	DD	0ffffffffH
	DD	0ffffffffH
	ORG $+4
?policies@?1??EditTableSizingFlags@@YAXPEAH@Z@4QBUEnumDesc@?1??1@YAX0@Z@B DD 00H ; `EditTableSizingFlags'::`2'::policies
	ORG $+4
	DQ	FLAT:??_C@_07MCAEODGB@Default?$AA@
	DQ	FLAT:??_C@_0LF@IILMEFCL@Use?5default?5sizing?5policy?3?6?9?5ImG@
	DD	02000H
	ORG $+4
	DQ	FLAT:??_C@_0BP@MPLHLLNP@ImGuiTableFlags_SizingFixedFit?$AA@
	DQ	FLAT:??_C@_0GJ@LHMCJKNJ@Columns?5default?5to?5_WidthFixed?5?$CI@
	DD	04000H
	ORG $+4
	DQ	FLAT:??_C@_0CA@HAGKEPPO@ImGuiTableFlags_SizingFixedSame?$AA@
	DQ	FLAT:??_C@_0KD@KKOOHGIJ@Columns?5are?5all?5the?5same?5width?0?5@
	DD	06000H
	ORG $+4
	DQ	FLAT:??_C@_0CC@IBLLEAPK@ImGuiTableFlags_SizingStretchPro@
	DQ	FLAT:??_C@_0EM@EAECLPPK@Columns?5default?5to?5_WidthStretch@
	DD	08000H
	ORG $+4
	DQ	FLAT:??_C@_0CC@LAIGPACB@ImGuiTableFlags_SizingStretchSam@
	DQ	FLAT:??_C@_0DE@LNEEFNDM@Columns?5default?5to?5_WidthStretch@
CONST	ENDS
_DATA	SEGMENT
?flags@?BFH@??ShowDemoWindowTables@@YAXXZ@4HA DD 0127e1H ; `ShowDemoWindowTables'::`343'::flags
?flags@?BLC@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 0400H	; `ShowDemoWindowWidgets'::`434'::flags
?flags@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA DD 040H	; `ShowDemoWindowTables'::`373'::flags
?row_bg_type@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA DD 01H ; `ShowDemoWindowTables'::`373'::row_bg_type
?text@?BLC@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB '/*', 0aH, ' The Penti'
	DB	'um F00F bug, shorthand for F0 0F C7 C8,', 0aH, ' the hexadeci'
	DB	'mal encoding of one offending instruction,', 0aH, ' more form'
	DB	'ally, the invalid operand with locked CMPXCHG8B', 0aH, ' inst'
	DB	'ruction bug, is a design flaw in the majority of', 0aH, ' Int'
	DB	'el Pentium, Pentium MMX, and Pentium OverDrive', 0aH, ' proce'
	DB	'ssors (all in the P5 microarchitecture).', 0aH, '*/', 0aH, 0aH
	DB	'label:', 0aH, 09H, 'lock cmpxchg8b eax', 0aH, 00H ; `ShowDemoWindowWidgets'::`434'::text
	ORG $+16033
?row_bg_target@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA DD 01H ; `ShowDemoWindowTables'::`373'::row_bg_target
?cell_bg_type@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA DD 01H ; `ShowDemoWindowTables'::`373'::cell_bg_type
?flags@?BIL@??ShowDemoWindowTables@@YAXXZ@4HA DD 0f41H	; `ShowDemoWindowTables'::`395'::flags
?capture_override_mouse@?CL@??ShowDemoWindowInputs@@YAXXZ@4HA DD 0ffffffffH ; `ShowDemoWindowInputs'::`43'::capture_override_mouse
?password@?BMA@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 'password123', 00H ; `ShowDemoWindowWidgets'::`448'::password
	ORG $+52
?capture_override_keyboard@?CL@??ShowDemoWindowInputs@@YAXXZ@4HA DD 0ffffffffH ; `ShowDemoWindowInputs'::`43'::capture_override_keyboard
?flags1@?BLK@??ShowDemoWindowTables@@YAXXZ@4HA DD 07a7H	; `ShowDemoWindowTables'::`442'::flags1
?buf@?EB@??ShowDemoWindowInputs@@YAXXZ@4PADA DB 'hello', 00H ; `ShowDemoWindowInputs'::`65'::buf
	ORG $+26
?tab_bar_flags@?BON@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H ; `ShowDemoWindowWidgets'::`493'::tab_bar_flags
?opt_reorderable@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4_NA DB 01H ; `ShowExampleAppDocuments'::`2'::opt_reorderable
?show_leading_button@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowWidgets'::`520'::show_leading_button
?show_trailing_button@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowWidgets'::`520'::show_trailing_button
?animate@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowWidgets'::`556'::animate
?buf@?EI@??ShowDemoWindowInputs@@YAXXZ@4PADA DB 'click on a button to set'
	DB	' focus', 00H				; `ShowDemoWindowInputs'::`72'::buf
	ORG $+97
?opened@?BON@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA DB 01H ; `ShowDemoWindowWidgets'::`493'::opened
	DB	01H
	DB	01H
	DB	01H
?opt_fitting_flags@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA DD 040H ; `ShowExampleAppDocuments'::`2'::opt_fitting_flags
?flags@?BOE@??ShowDemoWindowTables@@YAXXZ@4HA DD 02797H	; `ShowDemoWindowTables'::`484'::flags
?tab_bar_flags@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 043H ; `ShowDemoWindowWidgets'::`520'::tab_bar_flags
?template_items_names@?1??ShowDemoWindowTables@@YAXXZ@4PAPEBDA DQ FLAT:??_C@_06OJJIHNKI@Banana?$AA@ ; `ShowDemoWindowTables'::`2'::template_items_names
	DQ	FLAT:??_C@_05EBJDGKGA@Apple?$AA@
	DQ	FLAT:??_C@_06MKLLCMPJ@Cherry?$AA@
	DQ	FLAT:??_C@_0L@JJNGHCMI@Watermelon?$AA@
	DQ	FLAT:??_C@_0L@KKHKDDPE@Grapefruit?$AA@
	DQ	FLAT:??_C@_0L@BNANDFPN@Strawberry?$AA@
	DQ	FLAT:??_C@_05CNKNDDOO@Mango?$AA@
	DQ	FLAT:??_C@_04LFFBHHAI@Kiwi?$AA@
	DQ	FLAT:??_C@_06LMIDBFFB@Orange?$AA@
	DQ	FLAT:??_C@_09EBEMMGPP@Pineapple?$AA@
	DQ	FLAT:??_C@_09HNADIOOI@Blueberry?$AA@
	DQ	FLAT:??_C@_04PCFHDAMD@Plum?$AA@
	DQ	FLAT:??_C@_07BHKDNCIF@Coconut?$AA@
	DQ	FLAT:??_C@_04FJCKHKHL@Pear?$AA@
	DQ	FLAT:??_C@_07GAABODDK@Apricot?$AA@
?arr@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03f19999ar ; 0.6 ; `ShowDemoWindowWidgets'::`556'::arr
	DD	03dcccccdr			; 0.1
	DD	03f800000r			; 1
	DD	03f000000r			; 0.5
	DD	03f6b851fr			; 0.92
	DD	03dcccccdr			; 0.1
	DD	03e4ccccdr			; 0.2
?flags@?BPE@??ShowDemoWindowTables@@YAXXZ@4HA DD 06000f4fH ; `ShowDemoWindowTables'::`500'::flags
?selected_fish@?P@??ShowDemoWindowPopups@@YAXXZ@4HA DD 0ffffffffH ; `ShowDemoWindowPopups'::`15'::selected_fish
?toggles@?P@??ShowDemoWindowPopups@@YAXXZ@4PA_NA DB 01H	; `ShowDemoWindowPopups'::`15'::toggles
	DB	00H
	DB	00H
	DB	00H
	DB	00H
?outer_size_enabled@?CAP@??ShowDemoWindowTables@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowTables'::`527'::outer_size_enabled
?show_headers@?CAP@??ShowDemoWindowTables@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowTables'::`527'::show_headers
?alpha_preview@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowWidgets'::`586'::alpha_preview
?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA DD 07002fcfH ; `ShowDemoWindowTables'::`527'::flags
?contents_type@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA DD 05H ; `ShowDemoWindowTables'::`527'::contents_type
?freeze_cols@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA DD 01H ; `ShowDemoWindowTables'::`527'::freeze_cols
?freeze_rows@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA DD 01H ; `ShowDemoWindowTables'::`527'::freeze_rows
?items_count@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA DD 01eH ; `ShowDemoWindowTables'::`527'::items_count
?selected@?EG@??ShowDemoWindowPopups@@YAXXZ@4HA DD 0ffffffffH ; `ShowDemoWindowPopups'::`70'::selected
?value@?FC@??ShowDemoWindowPopups@@YAXXZ@4MA DD 03f000000r ; 0.5 ; `ShowDemoWindowPopups'::`82'::value
?display_count@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 046H ; `ShowDemoWindowWidgets'::`556'::display_count
?progress_dir@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 03f800000r ; 1 ; `ShowDemoWindowWidgets'::`556'::progress_dir
?placeholder_members@?4??ShowPlaceholderObject@@YAXPEBDH@Z@4PAMA DD 000000000r ; 0 ; `ShowPlaceholderObject'::`5'::placeholder_members
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	040490ff9r			; 3.1416
	DD	042c80000r			; 100
	DD	04479c000r			; 999
	ORG $+8
?name@?FM@??ShowDemoWindowPopups@@YAXXZ@4PADA DB 'Label1', 00H ; `ShowDemoWindowPopups'::`92'::name
	ORG $+25
?style_idx@?1??ShowStyleSelector@ImGui@@YA_NPEBD@Z@4HA DD 0ffffffffH ; `ImGui::ShowStyleSelector'::`2'::style_idx
?item@?HI@??ShowDemoWindowPopups@@YAXXZ@4HA DD 01H	; `ShowDemoWindowPopups'::`120'::item
?color@?HI@??ShowDemoWindowPopups@@YAXXZ@4PAMA DD 03ecccccdr ; 0.4 ; `ShowDemoWindowPopups'::`120'::color
	DD	03f333333r			; 0.7
	DD	000000000r			; 0
	DD	03f000000r			; 0.5
?drag_and_drop@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowWidgets'::`586'::drag_and_drop
?options_menu@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowWidgets'::`586'::options_menu
?init@?1??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4_NA DB 01H ; `ImGui::ShowStyleEditor'::`2'::init
?saved_palette_init@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowWidgets'::`586'::saved_palette_init
?output_only_modified@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4_NA DB 01H ; `ImGui::ShowStyleEditor'::`41'::output_only_modified
?alpha@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H	; `ShowDemoWindowWidgets'::`586'::alpha
?alpha_bar@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowWidgets'::`586'::alpha_bar
?side_preview@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowWidgets'::`586'::side_preview
?window_scale@?EM@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4MA DD 03f800000r ; 1 ; `ImGui::ShowStyleEditor'::`76'::window_scale
?lines@?1??ShowExampleAppAutoResize@@YAXPEA_N@Z@4HA DD 0aH ; `ShowExampleAppAutoResize'::`2'::lines
?drag_f@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 03f000000r ; 0.5 ; `ShowDemoWindowWidgets'::`675'::drag_f
?drag_i@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 032H	; `ShowDemoWindowWidgets'::`675'::drag_i
?slider_f@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 03f000000r ; 0.5 ; `ShowDemoWindowWidgets'::`675'::slider_f
?slider_i@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 032H ; `ShowDemoWindowWidgets'::`675'::slider_i
?begin@?CKK@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 041200000r ; 10 ; `ShowDemoWindowWidgets'::`682'::begin
?end@?CKK@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 042b40000r ; 90 ; `ShowDemoWindowWidgets'::`682'::end
?begin_i@?CKK@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 064H ; `ShowDemoWindowWidgets'::`682'::begin_i
?window_padding@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4_NA DB 01H ; `ShowExampleAppConstrainedResize'::`2'::window_padding
?s8_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4DA DB 07fH	; `ShowDemoWindowWidgets'::`689'::s8_v
?u8_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4EA DB 0ffH	; `ShowDemoWindowWidgets'::`689'::u8_v
?check@?BB@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H	; `ShowDemoWindowWidgets'::`17'::check
?end_i@?CKK@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 03e8H	; `ShowDemoWindowWidgets'::`682'::end_i
?type@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4HA DD 05H ; `ShowExampleAppConstrainedResize'::`2'::type
?display_lines@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4HA DD 0aH ; `ShowExampleAppConstrainedResize'::`2'::display_lines
?s16_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4FA DW 07fffH ; `ShowDemoWindowWidgets'::`689'::s16_v
?inputs_step@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowWidgets'::`689'::inputs_step
?enabled@?CC@??ShowExampleMenuFile@@YAXXZ@4_NA DB 01H	; `ShowExampleMenuFile'::`34'::enabled
?u16_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4GA DW 0ffffH ; `ShowDemoWindowWidgets'::`689'::u16_v
?use_work_area@?1??ShowExampleAppFullscreen@@YAXPEA_N@Z@4_NA DB 01H ; `ShowExampleAppFullscreen'::`2'::use_work_area
?b@?CP@??ShowExampleMenuFile@@YAXXZ@4_NA DB 01H		; `ShowExampleMenuFile'::`47'::b
?s32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 0ffffffffH ; `ShowDemoWindowWidgets'::`689'::s32_v
?u32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4IA DD 0ffffffffH ; `ShowDemoWindowWidgets'::`689'::u32_v
?f32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 03dfbe76dr ; 0.123 ; `ShowDemoWindowWidgets'::`689'::f32_v
?s64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_JA DQ ffffffffffffffffH ; `ShowDemoWindowWidgets'::`689'::s64_v
?u64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_KA DQ ffffffffffffffffH ; `ShowDemoWindowWidgets'::`689'::u64_v
?f64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4NA DQ 040f5f900329161f2r ; 90000 ; `ShowDemoWindowWidgets'::`689'::f64_v
?vec4f@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03dcccccdr ; 0.1 ; `ShowDemoWindowWidgets'::`708'::vec4f
	DD	03e4ccccdr			; 0.2
	DD	03e99999ar			; 0.3
	DD	03ee147aer			; 0.44
?vec4i@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAHA DD 01H	; `ShowDemoWindowWidgets'::`708'::vec4i
	DD	05H
	DD	064H
	DD	0ffH
?values@?CML@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 000000000r ; 0 ; `ShowDemoWindowWidgets'::`715'::values
	DD	03f19999ar			; 0.6
	DD	03eb33333r			; 0.35
	DD	03f666666r			; 0.9
	DD	03f333333r			; 0.7
	DD	03e4ccccdr			; 0.2
	DD	000000000r			; 0
?i0@?EB@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 07bH	; `ShowDemoWindowWidgets'::`65'::i0
?arr@?DO@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03f19999ar ; 0.6 ; `ShowDemoWindowWidgets'::`62'::arr
	DD	03dcccccdr			; 0.1
	DD	03f800000r			; 1
	DD	03f000000r			; 0.5
	DD	03f6b851fr			; 0.92
	DD	03dcccccdr			; 0.1
	DD	03e4ccccdr			; 0.2
?f0@?EB@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 03a83126fr ; 0.001 ; `ShowDemoWindowWidgets'::`65'::f0
?flags@?1??ShowExampleAppFullscreen@@YAXPEA_N@Z@4HA DD 012fH ; `ShowExampleAppFullscreen'::`2'::flags
?f@?CC@??ShowExampleMenuFile@@YAXXZ@4MA DD 03f000000r ; 0.5 ; `ShowExampleMenuFile'::`34'::f
?str0@?EB@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 'Hello, world!', 00H ; `ShowDemoWindowWidgets'::`65'::str0
	ORG $+114
?values2@?CML@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03e4ccccdr ; 0.2 ; `ShowDemoWindowWidgets'::`715'::values2
	DD	03f4ccccdr			; 0.8
	DD	03ecccccdr			; 0.4
	DD	03e800000r			; 0.25
?d0@?EB@??ShowDemoWindowWidgets@@YAXXZ@4NA DQ 0412e847e00000056r ; 999999 ; `ShowDemoWindowWidgets'::`65'::d0
?f1@?EB@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 0501502f9r ; 1e+10 ; `ShowDemoWindowWidgets'::`65'::f1
?i1@?EK@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 032H	; `ShowDemoWindowWidgets'::`74'::i1
?vec4a@?EB@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03dcccccdr ; 0.1 ; `ShowDemoWindowWidgets'::`65'::vec4a
	DD	03e4ccccdr			; 0.2
	DD	03e99999ar			; 0.3
	DD	03ee147aer			; 0.44
?i2@?EK@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 02aH	; `ShowDemoWindowWidgets'::`74'::i2
?f1@?EK@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 03f800000r ; 1 ; `ShowDemoWindowWidgets'::`74'::f1
?f2@?EK@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 03bdb8bacr ; 0.0067 ; `ShowDemoWindowWidgets'::`74'::f2
?f1@?EP@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 03dfbe76dr ; 0.123 ; `ShowDemoWindowWidgets'::`79'::f1
?col1@?COL@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03f800000r ; 1 ; `ShowDemoWindowWidgets'::`747'::col1
	DD	000000000r			; 0
	DD	03e4ccccdr			; 0.2
?flags@?DB@??ShowDemoWindowTables@@YAXXZ@4HA DD 07c0H	; `ShowDemoWindowTables'::`49'::flags
?col2@?COL@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03ecccccdr ; 0.4 ; `ShowDemoWindowWidgets'::`747'::col2
	DD	03f333333r			; 0.7
	DD	000000000r			; 0
	DD	03f000000r			; 0.5
?names@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4PAPEBDA DQ FLAT:??_C@_05DDEOPHNO@Bobby?$AA@ ; `ShowDemoWindowWidgets'::`754'::names
	DQ	FLAT:??_C@_08FLMMIHDE@Beatrice?$AA@
	DQ	FLAT:??_C@_05BECHDIPO@Betty?$AA@
	DQ	FLAT:??_C@_07OEGNBIJH@Brianna?$AA@
	DQ	FLAT:??_C@_05MAEBLNFA@Barry?$AA@
	DQ	FLAT:??_C@_07JNHNGBFJ@Bernard?$AA@
	DQ	FLAT:??_C@_04KCKMHEOC@Bibi?$AA@
	DQ	FLAT:??_C@_06HGIOBEEM@Blaine?$AA@
	DQ	FLAT:??_C@_04HKIGHOCK@Bryn?$AA@
?col1@?FM@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03f800000r ; 1 ; `ShowDemoWindowWidgets'::`92'::col1
	DD	000000000r			; 0
	DD	03e4ccccdr			; 0.2
?item_current@?GG@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H ; `ShowDemoWindowWidgets'::`102'::item_current
?col2@?FM@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03ecccccdr ; 0.4 ; `ShowDemoWindowWidgets'::`92'::col2
	DD	03f333333r			; 0.7
	DD	000000000r			; 0
	DD	03f000000r			; 0.5
?item_names@?DCB@??ShowDemoWindowWidgets@@YAXXZ@4PAPEBDA DQ FLAT:??_C@_08HGEMKAAG@Item?5One?$AA@ ; `ShowDemoWindowWidgets'::`801'::item_names
	DQ	FLAT:??_C@_08BIEMAAON@Item?5Two?$AA@
	DQ	FLAT:??_C@_0L@PNIFIMNF@Item?5Three?$AA@
	DQ	FLAT:??_C@_09FNJGFEIF@Item?5Four?$AA@
	DQ	FLAT:??_C@_09HPDIDBJG@Item?5Five?$AA@
?show_indented_items@?CM@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowLayout'::`44'::show_indented_items
?closable_group@?LA@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowWidgets'::`176'::closable_group
?show_widget_frame_bg@?JH@??ShowDemoWindowTables@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowTables'::`151'::show_widget_frame_bg
?init@?KJ@??ShowDemoWindowTables@@YAXXZ@4_NA DB 01H	; `ShowDemoWindowTables'::`169'::init
?flags@?EJ@??ShowDemoWindowTables@@YAXXZ@4HA DD 08721H	; `ShowDemoWindowTables'::`73'::flags
?base_flags@?IJ@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 08c0H ; `ShowDemoWindowWidgets'[::J]::base_flags
?item_type@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 04H ; `ShowDemoWindowWidgets'::`816'::item_type
?selection_mask@?IJ@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 04H ; `ShowDemoWindowWidgets'[::J]::selection_mask
?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA DD 042100000r ; 36 ; `ShowExampleAppCustomRendering'::`15'::sz
?thickness@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA DD 040400000r ; 3 ; `ShowExampleAppCustomRendering'::`15'::thickness
?ngon_sides@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA DD 06H ; `ShowExampleAppCustomRendering'::`15'::ngon_sides
?col4f@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03f800000r ; 1 ; `ShowDemoWindowWidgets'::`816'::col4f
	DD	03f000000r			; 0.5
	DD	000000000r			; 0
	DD	03f800000r			; 1
?circle_segments_override_v@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA DD 0cH ; `ShowExampleAppCustomRendering'::`15'::circle_segments_override_v
?flags@?FJ@??ShowDemoWindowTables@@YAXXZ@4HA DD 02721H	; `ShowDemoWindowTables'::`89'::flags
?curve_segments_override_v@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA DD 08H ; `ShowExampleAppCustomRendering'::`15'::curve_segments_override_v
?current@?DGB@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H	; `ShowDemoWindowWidgets'::`865'::current
?f0@?EC@??ShowDemoWindowLayout@@YAXXZ@4MA DD 03f800000r ; 1 ; `ShowDemoWindowLayout'::`66'::f0
?flags@?GJ@??ShowDemoWindowTables@@YAXXZ@4HA DD 027c7H	; `ShowDemoWindowTables'::`105'::flags
?current@?DGE@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H	; `ShowDemoWindowWidgets'::`868'::current
?f1@?EC@??ShowDemoWindowLayout@@YAXXZ@4MA DD 040000000r ; 2 ; `ShowDemoWindowLayout'::`66'::f1
?f2@?EC@??ShowDemoWindowLayout@@YAXXZ@4MA DD 040400000r ; 3 ; `ShowDemoWindowLayout'::`66'::f2
?item@?EC@??ShowDemoWindowLayout@@YAXXZ@4HA DD 0ffffffffH ; `ShowDemoWindowLayout'::`66'::item
?selection@?EC@??ShowDemoWindowLayout@@YAXXZ@4PAHA DD 00H ; `ShowDemoWindowLayout'::`66'::selection
	DD	01H
	DD	02H
	DD	03H
?wrap_width@?NH@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 043480000r ; 200 ; `ShowDemoWindowWidgets'::`215'::wrap_width
?flags@?IA@??ShowDemoWindowTables@@YAXXZ@4HA DD 0707H	; `ShowDemoWindowTables'[::A]::flags
?flags1@?JH@??ShowDemoWindowTables@@YAXXZ@4HA DD 0600H	; `ShowDemoWindowTables'::`151'::flags1
?flags2@?JH@??ShowDemoWindowTables@@YAXXZ@4HA DD 07c0H	; `ShowDemoWindowTables'::`151'::flags2
?buf@?OD@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 0e6H, 097H, 0a5H, 0e6H, 09cH
	DB	0acH, 0e8H, 0aaH, 09eH, 00H			; `ShowDemoWindowWidgets'::`227'::buf
	ORG $+22
?track_item@?IE@??ShowDemoWindowLayout@@YAXXZ@4HA DD 032H ; `ShowDemoWindowLayout'[::E]::track_item
?flags1@?LK@??ShowDemoWindowTables@@YAXXZ@4HA DD 0760H	; `ShowDemoWindowTables'::`186'::flags1
?enable_track@?IE@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowLayout'[::E]::enable_track
?opt_enable_grid@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA DB 01H ; `ShowExampleAppCustomRendering'::`22'::opt_enable_grid
?opt_enable_context_menu@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA DB 01H ; `ShowExampleAppCustomRendering'::`22'::opt_enable_context_menu
?h_borders@?BP@??ShowDemoWindowColumns@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowColumns'::`31'::h_borders
?scroll_to_pos_px@?IE@??ShowDemoWindowLayout@@YAXXZ@4MA DD 043480000r ; 200 ; `ShowDemoWindowLayout'[::E]::scroll_to_pos_px
?sizing_policy_flags@?LK@??ShowDemoWindowTables@@YAXXZ@4PAHA DD 02000H ; `ShowDemoWindowTables'::`186'::sizing_policy_flags
	DD	04000H
	DD	06000H
	DD	08000H
?flags@?LK@??ShowDemoWindowTables@@YAXXZ@4HA DD 020007c1H ; `ShowDemoWindowTables'::`186'::flags
?column_count@?LK@??ShowDemoWindowTables@@YAXXZ@4HA DD 03H ; `ShowDemoWindowTables'::`186'::column_count
?item_current_3@?BAP@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 0ffffffffH ; `ShowDemoWindowWidgets'::`271'::item_current_3
?selected@?P@??ShowDemoWindowColumns@@YAXXZ@4HA DD 0ffffffffH ; `ShowDemoWindowColumns'::`15'::selected
?flags@?NJ@??ShowDemoWindowTables@@YAXXZ@4HA DD 02000747H ; `ShowDemoWindowTables'::`217'::flags
?lines@?IE@??ShowDemoWindowLayout@@YAXXZ@4HA DD 07H	; `ShowDemoWindowLayout'[::E]::lines
?v_borders@?BP@??ShowDemoWindowColumns@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowColumns'::`31'::v_borders
?draw_bg@?DL@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA DB 01H ; `ShowExampleAppCustomRendering'::`59'::draw_bg
?draw_fg@?DL@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA DB 01H ; `ShowExampleAppCustomRendering'::`59'::draw_fg
?show_h_scrollbar@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowLayout'::`203'::show_h_scrollbar
?columns_count@?BP@??ShowDemoWindowColumns@@YAXXZ@4HA DD 04H ; `ShowDemoWindowColumns'::`31'::columns_count
?flags@?OL@??ShowDemoWindowTables@@YAXXZ@4HA DD 03000747H ; `ShowDemoWindowTables'::`235'::flags
?freeze_cols@?OL@??ShowDemoWindowTables@@YAXXZ@4HA DD 01H ; `ShowDemoWindowTables'::`235'::freeze_cols
?freeze_rows@?OL@??ShowDemoWindowTables@@YAXXZ@4HA DD 01H ; `ShowDemoWindowTables'::`235'::freeze_rows
?foo@?CO@??ShowDemoWindowColumns@@YAXXZ@4MA DD 03f800000r ; 1 ; `ShowDemoWindowColumns'::`46'::foo
?bar@?CO@??ShowDemoWindowColumns@@YAXXZ@4MA DD 03f800000r ; 1 ; `ShowDemoWindowColumns'::`46'::bar
?selection@?BED@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA DB 00H ; `ShowDemoWindowWidgets'::`323'::selection
	DB	01H
	DB	00H
	DB	00H
	DB	00H
?show_button@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowLayout'::`203'::show_button
?show_tree_nodes@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowLayout'::`203'::show_tree_nodes
?show_columns@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowLayout'::`203'::show_columns
?flags2@?OL@??ShowDemoWindowTables@@YAXXZ@4HA DD 03008560H ; `ShowDemoWindowTables'::`235'::flags2
?inner_width@?OL@??ShowDemoWindowTables@@YAXXZ@4MA DD 0447a0000r ; 1000 ; `ShowDemoWindowTables'::`235'::inner_width
?selected@?BEO@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 0ffffffffH ; `ShowDemoWindowWidgets'::`334'::selected
?column_flags@?BAF@??ShowDemoWindowTables@@YAXXZ@4PAHA DD 04H ; `ShowDemoWindowTables'::`261'::column_flags
	DD	00H
	DD	02H
?show_tab_bar@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowLayout'::`203'::show_tab_bar
	ORG $+3
?contents_size_x@?ML@??ShowDemoWindowLayout@@YAXXZ@4MA DD 043960000r ; 300 ; `ShowDemoWindowLayout'::`203'::contents_size_x
?flags1@?BBM@??ShowDemoWindowTables@@YAXXZ@4HA DD 01780H ; `ShowDemoWindowTables'::`284'::flags1
?selected@?BHP@??ShowDemoWindowWidgets@@YAXXZ@4PAY03DA DB 01H ; `ShowDemoWindowWidgets'::`383'::selected
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
?selected@?BJO@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA DB 01H ; `ShowDemoWindowWidgets'::`414'::selected
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
_DATA	ENDS
PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?memchr@@YAPEAXPEAXH_K@Z			; memchr
PUBLIC	??0ImVec2@@QEAA@XZ				; ImVec2::ImVec2
PUBLIC	??0ImVec2@@QEAA@MM@Z				; ImVec2::ImVec2
PUBLIC	??0ImVec4@@QEAA@XZ				; ImVec4::ImVec4
PUBLIC	??0ImVec4@@QEAA@MMMM@Z				; ImVec4::ImVec4
PUBLIC	?ShowDemoWindow@ImGui@@YAXPEA_N@Z		; ImGui::ShowDemoWindow
PUBLIC	?ShowAboutWindow@ImGui@@YAXPEA_N@Z		; ImGui::ShowAboutWindow
PUBLIC	?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z	; ImGui::ShowStyleEditor
PUBLIC	?ShowStyleSelector@ImGui@@YA_NPEBD@Z		; ImGui::ShowStyleSelector
PUBLIC	?ShowFontSelector@ImGui@@YAXPEBD@Z		; ImGui::ShowFontSelector
PUBLIC	?ShowUserGuide@ImGui@@YAXXZ			; ImGui::ShowUserGuide
PUBLIC	??A?$ImVector@G@@QEAAAEAGH@Z			; ImVector<unsigned short>::operator[]
PUBLIC	?SelectAll@ImGuiInputTextCallbackData@@QEAAXXZ	; ImGuiInputTextCallbackData::SelectAll
PUBLIC	?IsActive@ImGuiTextFilter@@QEBA_NXZ		; ImGuiTextFilter::IsActive
PUBLIC	??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEAA@XZ ; ImVector<ImGuiTextFilter::ImGuiTextRange>::~ImVector<ImGuiTextFilter::ImGuiTextRange>
PUBLIC	?empty@?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEBA_NXZ ; ImVector<ImGuiTextFilter::ImGuiTextRange>::empty
PUBLIC	??1ImGuiTextFilter@@QEAA@XZ			; ImGuiTextFilter::~ImGuiTextFilter
PUBLIC	??0?$ImVector@D@@QEAA@XZ			; ImVector<char>::ImVector<char>
PUBLIC	??1?$ImVector@D@@QEAA@XZ			; ImVector<char>::~ImVector<char>
PUBLIC	?clear@?$ImVector@D@@QEAAXXZ			; ImVector<char>::clear
PUBLIC	?empty@?$ImVector@D@@QEBA_NXZ			; ImVector<char>::empty
PUBLIC	?size@?$ImVector@D@@QEBAHXZ			; ImVector<char>::size
PUBLIC	?capacity@?$ImVector@D@@QEBAHXZ			; ImVector<char>::capacity
PUBLIC	?begin@?$ImVector@D@@QEAAPEADXZ			; ImVector<char>::begin
PUBLIC	?front@?$ImVector@D@@QEBAAEBDXZ			; ImVector<char>::front
PUBLIC	?back@?$ImVector@D@@QEBAAEBDXZ			; ImVector<char>::back
PUBLIC	?_grow_capacity@?$ImVector@D@@QEBAHH@Z		; ImVector<char>::_grow_capacity
PUBLIC	?resize@?$ImVector@D@@QEAAXH@Z			; ImVector<char>::resize
PUBLIC	?reserve@?$ImVector@D@@QEAAXH@Z			; ImVector<char>::reserve
PUBLIC	?push_back@?$ImVector@D@@QEAAXAEBD@Z		; ImVector<char>::push_back
PUBLIC	??0ImGuiTextBuffer@@QEAA@XZ			; ImGuiTextBuffer::ImGuiTextBuffer
PUBLIC	??AImGuiTextBuffer@@QEBADH@Z			; ImGuiTextBuffer::operator[]
PUBLIC	?begin@ImGuiTextBuffer@@QEBAPEBDXZ		; ImGuiTextBuffer::begin
PUBLIC	?end@ImGuiTextBuffer@@QEBAPEBDXZ		; ImGuiTextBuffer::end
PUBLIC	?size@ImGuiTextBuffer@@QEBAHXZ			; ImGuiTextBuffer::size
PUBLIC	?clear@ImGuiTextBuffer@@QEAAXXZ			; ImGuiTextBuffer::clear
PUBLIC	??1ImGuiTextBuffer@@QEAA@XZ			; ImGuiTextBuffer::~ImGuiTextBuffer
PUBLIC	??0ImColor@@QEAA@MMMM@Z				; ImColor::ImColor
PUBLIC	??0ImColor@@QEAA@AEBUImVec4@@@Z			; ImColor::ImColor
PUBLIC	??BImColor@@QEBAIXZ				; ImColor::operator unsigned int
PUBLIC	??BImColor@@QEBA?AUImVec4@@XZ			; ImColor::operator ImVec4
PUBLIC	?HSV@ImColor@@SA?AU1@MMMM@Z			; ImColor::HSV
PUBLIC	??0?$ImVector@UImVec2@@@@QEAA@XZ		; ImVector<ImVec2>::ImVector<ImVec2>
PUBLIC	??1?$ImVector@UImVec2@@@@QEAA@XZ		; ImVector<ImVec2>::~ImVector<ImVec2>
PUBLIC	?clear@?$ImVector@UImVec2@@@@QEAAXXZ		; ImVector<ImVec2>::clear
PUBLIC	?size@?$ImVector@UImVec2@@@@QEBAHXZ		; ImVector<ImVec2>::size
PUBLIC	??A?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@H@Z	; ImVector<ImVec2>::operator[]
PUBLIC	?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ	; ImVector<ImVec2>::back
PUBLIC	?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z	; ImVector<ImVec2>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImVec2@@@@QEAAXH@Z		; ImVector<ImVec2>::resize
PUBLIC	?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z		; ImVector<ImVec2>::reserve
PUBLIC	?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
PUBLIC	??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ; ImVector<ImFont * __ptr64>::operator[]
PUBLIC	?GetDebugName@ImFont@@QEBAPEBDXZ		; ImFont::GetDebugName
PUBLIC	?GetCenter@ImGuiViewport@@QEBA?AUImVec2@@XZ	; ImGuiViewport::GetCenter
PUBLIC	__local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
PUBLIC	_vsnprintf_l
PUBLIC	_vsnprintf
PUBLIC	_vsprintf_l
PUBLIC	sprintf
PUBLIC	_snprintf
PUBLIC	??0?$ImVector@H@@QEAA@XZ			; ImVector<int>::ImVector<int>
PUBLIC	??1?$ImVector@H@@QEAA@XZ			; ImVector<int>::~ImVector<int>
PUBLIC	?clear@?$ImVector@H@@QEAAXXZ			; ImVector<int>::clear
PUBLIC	??A?$ImVector@H@@QEAAAEAHH@Z			; ImVector<int>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@H@@QEBAHH@Z		; ImVector<int>::_grow_capacity
PUBLIC	?reserve@?$ImVector@H@@QEAAXH@Z			; ImVector<int>::reserve
PUBLIC	?push_back@?$ImVector@H@@QEAAXAEBH@Z		; ImVector<int>::push_back
PUBLIC	?erase@?$ImVector@H@@QEAAPEAHPEBH@Z		; ImVector<int>::erase
PUBLIC	?erase_unsorted@?$ImVector@H@@QEAAPEAHPEBH@Z	; ImVector<int>::erase_unsorted
PUBLIC	?contains@?$ImVector@H@@QEBA_NAEBH@Z		; ImVector<int>::contains
PUBLIC	?find@?$ImVector@H@@QEAAPEAHAEBH@Z		; ImVector<int>::find
PUBLIC	?find_erase_unsorted@?$ImVector@H@@QEAA_NAEBH@Z	; ImVector<int>::find_erase_unsorted
PUBLIC	??0?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ	; ImVector<`anonymous namespace'::MyItem>::ImVector<`anonymous namespace'::MyItem>
PUBLIC	??1?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ	; ImVector<`anonymous namespace'::MyItem>::~ImVector<`anonymous namespace'::MyItem>
PUBLIC	??A?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAAEAUMyItem@?A0x1ed25892@@H@Z ; ImVector<`anonymous namespace'::MyItem>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@UMyItem@?A0x1ed25892@@@@QEBAHH@Z ; ImVector<`anonymous namespace'::MyItem>::_grow_capacity
PUBLIC	?resize@?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAXHAEBUMyItem@?A0x1ed25892@@@Z ; ImVector<`anonymous namespace'::MyItem>::resize
PUBLIC	?reserve@?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAXH@Z ; ImVector<`anonymous namespace'::MyItem>::reserve
PUBLIC	??0?$ImVector@PEAD@@QEAA@XZ			; ImVector<char * __ptr64>::ImVector<char * __ptr64>
PUBLIC	??1?$ImVector@PEAD@@QEAA@XZ			; ImVector<char * __ptr64>::~ImVector<char * __ptr64>
PUBLIC	?clear@?$ImVector@PEAD@@QEAAXXZ			; ImVector<char * __ptr64>::clear
PUBLIC	??A?$ImVector@PEAD@@QEAAAEAPEADH@Z		; ImVector<char * __ptr64>::operator[]
PUBLIC	?begin@?$ImVector@PEAD@@QEAAPEAPEADXZ		; ImVector<char * __ptr64>::begin
PUBLIC	?_grow_capacity@?$ImVector@PEAD@@QEBAHH@Z	; ImVector<char * __ptr64>::_grow_capacity
PUBLIC	?reserve@?$ImVector@PEAD@@QEAAXH@Z		; ImVector<char * __ptr64>::reserve
PUBLIC	?push_back@?$ImVector@PEAD@@QEAAXAEBQEAD@Z	; ImVector<char * __ptr64>::push_back
PUBLIC	?erase@?$ImVector@PEAD@@QEAAPEAPEADPEBQEAD@Z	; ImVector<char * __ptr64>::erase
PUBLIC	??0?$ImVector@PEBD@@QEAA@XZ			; ImVector<char const * __ptr64>::ImVector<char const * __ptr64>
PUBLIC	??1?$ImVector@PEBD@@QEAA@XZ			; ImVector<char const * __ptr64>::~ImVector<char const * __ptr64>
PUBLIC	??A?$ImVector@PEBD@@QEAAAEAPEBDH@Z		; ImVector<char const * __ptr64>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@PEBD@@QEBAHH@Z	; ImVector<char const * __ptr64>::_grow_capacity
PUBLIC	?reserve@?$ImVector@PEBD@@QEAAXH@Z		; ImVector<char const * __ptr64>::reserve
PUBLIC	?push_back@?$ImVector@PEBD@@QEAAXAEBQEBD@Z	; ImVector<char const * __ptr64>::push_back
PUBLIC	??0ExampleAppConsole@@QEAA@XZ			; ExampleAppConsole::ExampleAppConsole
PUBLIC	??1ExampleAppConsole@@QEAA@XZ			; ExampleAppConsole::~ExampleAppConsole
PUBLIC	?Stricmp@ExampleAppConsole@@SAHPEBD0@Z		; ExampleAppConsole::Stricmp
PUBLIC	?Strnicmp@ExampleAppConsole@@SAHPEBD0H@Z	; ExampleAppConsole::Strnicmp
PUBLIC	?Strdup@ExampleAppConsole@@SAPEADPEBD@Z		; ExampleAppConsole::Strdup
PUBLIC	?Strtrim@ExampleAppConsole@@SAXPEAD@Z		; ExampleAppConsole::Strtrim
PUBLIC	?ClearLog@ExampleAppConsole@@QEAAXXZ		; ExampleAppConsole::ClearLog
PUBLIC	?AddLog@ExampleAppConsole@@QEAAXPEBDZZ		; ExampleAppConsole::AddLog
PUBLIC	?Draw@ExampleAppConsole@@QEAAXPEBDPEA_N@Z	; ExampleAppConsole::Draw
PUBLIC	?ExecCommand@ExampleAppConsole@@QEAAXPEBD@Z	; ExampleAppConsole::ExecCommand
PUBLIC	?TextEditCallbackStub@ExampleAppConsole@@SAHPEAUImGuiInputTextCallbackData@@@Z ; ExampleAppConsole::TextEditCallbackStub
PUBLIC	?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z ; ExampleAppConsole::TextEditCallback
PUBLIC	??$__vcrt_va_start_verify_argument_type@PEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64>
PUBLIC	??0ExampleAppLog@@QEAA@XZ			; ExampleAppLog::ExampleAppLog
PUBLIC	?Clear@ExampleAppLog@@QEAAXXZ			; ExampleAppLog::Clear
PUBLIC	?AddLog@ExampleAppLog@@QEAAXPEBDZZ		; ExampleAppLog::AddLog
PUBLIC	?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z		; ExampleAppLog::Draw
PUBLIC	??1ExampleAppLog@@QEAA@XZ			; ExampleAppLog::~ExampleAppLog
PUBLIC	??0MyDocument@@QEAA@PEBD_NAEBUImVec4@@@Z	; MyDocument::MyDocument
PUBLIC	?DoOpen@MyDocument@@QEAAXXZ			; MyDocument::DoOpen
PUBLIC	?DoQueueClose@MyDocument@@QEAAXXZ		; MyDocument::DoQueueClose
PUBLIC	?DoForceClose@MyDocument@@QEAAXXZ		; MyDocument::DoForceClose
PUBLIC	?DoSave@MyDocument@@QEAAXXZ			; MyDocument::DoSave
PUBLIC	?DisplayContents@MyDocument@@SAXPEAU1@@Z	; MyDocument::DisplayContents
PUBLIC	?DisplayContextMenu@MyDocument@@SAXPEAU1@@Z	; MyDocument::DisplayContextMenu
PUBLIC	??0?$ImVector@UMyDocument@@@@QEAA@XZ		; ImVector<MyDocument>::ImVector<MyDocument>
PUBLIC	??1?$ImVector@UMyDocument@@@@QEAA@XZ		; ImVector<MyDocument>::~ImVector<MyDocument>
PUBLIC	??A?$ImVector@UMyDocument@@@@QEAAAEAUMyDocument@@H@Z ; ImVector<MyDocument>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@UMyDocument@@@@QEBAHH@Z ; ImVector<MyDocument>::_grow_capacity
PUBLIC	?reserve@?$ImVector@UMyDocument@@@@QEAAXH@Z	; ImVector<MyDocument>::reserve
PUBLIC	?push_back@?$ImVector@UMyDocument@@@@QEAAXAEBUMyDocument@@@Z ; ImVector<MyDocument>::push_back
PUBLIC	??0ExampleAppDocuments@@QEAA@XZ			; ExampleAppDocuments::ExampleAppDocuments
PUBLIC	??1ExampleAppDocuments@@QEAA@XZ			; ExampleAppDocuments::~ExampleAppDocuments
PUBLIC	??0?$ImVector@PEAUMyDocument@@@@QEAA@XZ		; ImVector<MyDocument * __ptr64>::ImVector<MyDocument * __ptr64>
PUBLIC	??1?$ImVector@PEAUMyDocument@@@@QEAA@XZ		; ImVector<MyDocument * __ptr64>::~ImVector<MyDocument * __ptr64>
PUBLIC	?clear@?$ImVector@PEAUMyDocument@@@@QEAAXXZ	; ImVector<MyDocument * __ptr64>::clear
PUBLIC	?empty@?$ImVector@PEAUMyDocument@@@@QEBA_NXZ	; ImVector<MyDocument * __ptr64>::empty
PUBLIC	??A?$ImVector@PEAUMyDocument@@@@QEAAAEAPEAUMyDocument@@H@Z ; ImVector<MyDocument * __ptr64>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@PEAUMyDocument@@@@QEBAHH@Z ; ImVector<MyDocument * __ptr64>::_grow_capacity
PUBLIC	?reserve@?$ImVector@PEAUMyDocument@@@@QEAAXH@Z	; ImVector<MyDocument * __ptr64>::reserve
PUBLIC	?push_back@?$ImVector@PEAUMyDocument@@@@QEAAXAEBQEAUMyDocument@@@Z ; ImVector<MyDocument * __ptr64>::push_back
PUBLIC	??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@ ; `string'
PUBLIC	??_C@_1BM@COLNJNAB@?$AAB?$AAu?$AAf?$AA?4?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@		; `string'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_03NAEMJKHE@?$CI?$DP?$CJ?$AA@		; `string'
PUBLIC	?__LINE__Var@?0??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4JA ; `ImGui::ShowDemoWindow'::`1'::__LINE__Var
PUBLIC	??_C@_0DD@MGKHNCLH@Missing?5dear?5imgui?5context?4?5Refe@ ; `string'
PUBLIC	??_C@_1FM@DPDGFNDC@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@ ; `string'
PUBLIC	??_C@_1LA@COADBOEK@?$AAI?$AAm?$AAG?$AAu?$AAi?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5@ ; `string'
PUBLIC	??_C@_0BI@DDJBLHAK@Dear?5ImGui?5Style?5Editor?$AA@ ; `string'
PUBLIC	??_C@_0BA@IGMFAKOE@Dear?5ImGui?5Demo?$AA@	; `string'
PUBLIC	??_C@_04IFEHPILC@Menu?$AA@			; `string'
PUBLIC	??_C@_09CENEJNFC@Menu?1File?$AA@		; `string'
PUBLIC	??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@ ; `string'
PUBLIC	??_C@_08KJMBPHGD@Examples?$AA@			; `string'
PUBLIC	??_C@_0O@ILKMGNBH@Menu?1Examples?$AA@		; `string'
PUBLIC	??_C@_0O@ECNFCDDH@Main?5menu?5bar?$AA@		; `string'
PUBLIC	??_C@_07PGLPGHFC@Console?$AA@			; `string'
PUBLIC	??_C@_03GGEOLGBL@Log?$AA@			; `string'
PUBLIC	??_C@_0O@JBJOEMFC@Simple?5layout?$AA@		; `string'
PUBLIC	??_C@_0BA@DNAHAJCI@Property?5editor?$AA@	; `string'
PUBLIC	??_C@_0BC@INJCBODH@Long?5text?5display?$AA@	; `string'
PUBLIC	??_C@_0BF@OHKJAELB@Auto?9resizing?5window?$AA@	; `string'
PUBLIC	??_C@_0BM@CJMMFMCL@Constrained?9resizing?5window?$AA@ ; `string'
PUBLIC	??_C@_0P@IMGHCBNF@Simple?5overlay?$AA@		; `string'
PUBLIC	??_C@_0BC@EPMOEMI@Fullscreen?5window?$AA@	; `string'
PUBLIC	??_C@_0BL@MDGJIIDL@Manipulating?5window?5titles?$AA@ ; `string'
PUBLIC	??_C@_0BB@MLNDPKFI@Custom?5rendering?$AA@	; `string'
PUBLIC	??_C@_09IBGBKIMC@Documents?$AA@			; `string'
PUBLIC	??_C@_05OENKALAF@Tools?$AA@			; `string'
PUBLIC	??_C@_0L@FNGJAMCB@Menu?1Tools?$AA@		; `string'
PUBLIC	??_C@_0BB@DAKIBJMB@Metrics?1Debugger?$AA@	; `string'
PUBLIC	??_C@_09NNILCKOM@Debug?5Log?$AA@		; `string'
PUBLIC	??_C@_0L@DFPCNJKK@Stack?5Tool?$AA@		; `string'
PUBLIC	??_C@_0N@GJBKNEHA@Style?5Editor?$AA@		; `string'
PUBLIC	??_C@_0BB@NKKLPDOL@About?5Dear?5ImGui?$AA@	; `string'
PUBLIC	??_C@_0L@GMOEAHPG@1?489?43?5WIP?$AA@		; `string'
PUBLIC	??_C@_0CB@NIEBLCEF@dear?5imgui?5says?5hello?$CB?5?$CI?$CFs?$CJ?5?$CI?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_04DDFEFHOJ@Help?$AA@			; `string'
PUBLIC	??_C@_0BB@LJBDHCFD@ABOUT?5THIS?5DEMO?3?$AA@	; `string'
PUBLIC	??_C@_0DO@FBJHOIEP@Sections?5below?5are?5demonstrating@ ; `string'
PUBLIC	??_C@_0DH@GKLDFKKO@The?5?$CCExamples?$CC?5menu?5above?5leads?5@ ; `string'
PUBLIC	??_C@_0ID@INLAEEEH@The?5?$CCTools?$CC?5menu?5above?5gives?5acc@ ; `string'
PUBLIC	??_C@_0BC@GECCEBDK@PROGRAMMER?5GUIDE?3?$AA@	; `string'
PUBLIC	??_C@_0EC@GEILMFPK@See?5the?5ShowDemoWindow?$CI?$CJ?5code?5in@ ; `string'
PUBLIC	??_C@_0BL@CMPGJGKF@See?5comments?5in?5imgui?4cpp?4?$AA@ ; `string'
PUBLIC	??_C@_0DC@LILBLMCJ@See?5example?5applications?5in?5the?5@ ; `string'
PUBLIC	??_C@_0CO@IHPGPBLH@Read?5the?5FAQ?5at?5http?3?1?1www?4deari@ ; `string'
PUBLIC	??_C@_0EB@MLAMCLHL@Set?5?8io?4ConfigFlags?5?$HM?$DN?5NavEnable@ ; `string'
PUBLIC	??_C@_0DP@CIADOILL@Set?5?8io?4ConfigFlags?5?$HM?$DN?5NavEnable@ ; `string'
PUBLIC	??_C@_0M@NDGNNOFI@USER?5GUIDE?3?$AA@		; `string'
PUBLIC	??_C@_0O@PIILMNHI@Configuration?$AA@		; `string'
PUBLIC	??_C@_0BB@DLCAGGKD@Configuration?$CD?$CD2?$AA@	; `string'
PUBLIC	??_C@_0CC@MKDHACD@io?4ConfigFlags?3?5NavEnableKeyboar@ ; `string'
PUBLIC	??_C@_0BK@OJOJPPOF@Enable?5keyboard?5controls?4?$AA@ ; `string'
PUBLIC	??_C@_0CB@MCNBOBFF@io?4ConfigFlags?3?5NavEnableGamepad@ ; `string'
PUBLIC	??_C@_0IO@MJIBAPFF@Enable?5gamepad?5controls?4?5Require@ ; `string'
PUBLIC	??_C@_0CF@BBHAMFJD@io?4ConfigFlags?3?5NavEnableSetMous@ ; `string'
PUBLIC	??_C@_0GF@EIFIGBGA@Instruct?5navigation?5to?5move?5the?5@ ; `string'
PUBLIC	??_C@_0BI@FJCAMGFF@io?4ConfigFlags?3?5NoMouse?$AA@ ; `string'
PUBLIC	??_C@_0BL@MKGMHIPJ@?$DM?$DMPRESS?5SPACE?5TO?5DISABLE?$DO?$DO?$AA@ ; `string'
PUBLIC	??_C@_0CE@KNKEEHDL@io?4ConfigFlags?3?5NoMouseCursorCha@ ; `string'
PUBLIC	??_C@_0EB@JJIOMJIM@Instruct?5backend?5to?5not?5alter?5mo@ ; `string'
PUBLIC	??_C@_0CA@FACKLLEL@io?4ConfigInputTrickleEventQueue?$AA@ ; `string'
PUBLIC	??_C@_0LM@IEPLLLKB@Enable?5input?5queue?5trickling?3?5so@ ; `string'
PUBLIC	??_C@_0BO@GBANMLLJ@io?4ConfigInputTextCursorBlink?$AA@ ; `string'
PUBLIC	??_C@_0EP@OGONDEMG@Enable?5blinking?5cursor?5?$CIoptional@ ; `string'
PUBLIC	??_C@_0CC@CDNGJGDB@io?4ConfigInputTextEnterKeepActiv@ ; `string'
PUBLIC	??_C@_0EN@DGPMAAAP@Pressing?5Enter?5will?5keep?5item?5ac@ ; `string'
PUBLIC	??_C@_0BO@DELEKPMI@io?4ConfigDragClickToInputText?$AA@ ; `string'
PUBLIC	??_C@_0GD@MCICHOGF@Enable?5turning?5DragXXX?5widgets?5i@ ; `string'
PUBLIC	??_C@_0CA@IFIIDADM@io?4ConfigWindowsResizeFromEdges?$AA@ ; `string'
PUBLIC	??_C@_0LI@DCCFFPOA@Enable?5resizing?5of?5windows?5from?5@ ; `string'
PUBLIC	??_C@_0CF@PKBLIGGG@io?4ConfigWindowsMoveFromTitleBar@ ; `string'
PUBLIC	??_C@_0BD@PFDMJJAG@io?4MouseDrawCursor?$AA@	; `string'
PUBLIC	??_C@_0BFK@CKDHFBDH@Instruct?5Dear?5ImGui?5to?5render?5a?5@ ; `string'
PUBLIC	??_C@_0DB@KCBPEEMI@Also?5see?5Style?9?$DORendering?5for?5re@ ; `string'
PUBLIC	??_C@_0BM@FFMOEAGC@Configuration?1Backend?5Flags?$AA@ ; `string'
PUBLIC	??_C@_0O@GGPAPCP@Backend?5Flags?$AA@		; `string'
PUBLIC	??_C@_0LE@FBDHIPGL@Those?5flags?5are?5set?5by?5the?5backe@ ; `string'
PUBLIC	??_C@_0BM@KECFJBMD@io?4BackendFlags?3?5HasGamepad?$AA@ ; `string'
PUBLIC	??_C@_0CB@OGFIDKNB@io?4BackendFlags?3?5HasMouseCursors@ ; `string'
PUBLIC	??_C@_0CA@JKLPDGP@io?4BackendFlags?3?5HasSetMousePos?$AA@ ; `string'
PUBLIC	??_C@_0CG@EKAIMAPC@io?4BackendFlags?3?5RendererHasVtxO@ ; `string'
PUBLIC	??_C@_0BE@IHLGIHAH@Configuration?1Style?$AA@	; `string'
PUBLIC	??_C@_05IHAFCALK@Style?$AA@			; `string'
PUBLIC	??_C@_0GJ@COKJKNBB@The?5same?5contents?5can?5be?5accesse@ ; `string'
PUBLIC	??_C@_0BP@HOEFEDAL@Configuration?1Capture?0?5Logging?$AA@ ; `string'
PUBLIC	??_C@_0BA@BMMAIOLM@Capture?1Logging?$AA@	; `string'
PUBLIC	??_C@_0PC@PAKMBOJC@The?5logging?5API?5redirects?5all?5te@ ; `string'
PUBLIC	??_C@_0FK@CDOBPMKK@You?5can?5also?5call?5ImGui?3?3LogText@ ; `string'
PUBLIC	??_C@_0CC@DLICJJEI@Copy?5?$CCHello?0?5world?$CB?$CC?5to?5clipboar@ ; `string'
PUBLIC	??_C@_0O@GEHPLBPJ@Hello?0?5world?$CB?$AA@	; `string'
PUBLIC	??_C@_0P@FBBKILOB@Window?5options?$AA@		; `string'
PUBLIC	??_C@_05EHPMMFBK@split?$AA@			; `string'
PUBLIC	??_C@_0M@EABCFDNG@No?5titlebar?$AA@		; `string'
PUBLIC	??_C@_0N@GGGGKBFF@No?5scrollbar?$AA@		; `string'
PUBLIC	??_C@_07KBMDBGCH@No?5menu?$AA@			; `string'
PUBLIC	??_C@_07JGIJBGNK@No?5move?$AA@			; `string'
PUBLIC	??_C@_09HMNEIDKA@No?5resize?$AA@		; `string'
PUBLIC	??_C@_0M@PFMGNBM@No?5collapse?$AA@		; `string'
PUBLIC	??_C@_08DGAKPBEJ@No?5close?$AA@			; `string'
PUBLIC	??_C@_06KFENEDHJ@No?5nav?$AA@			; `string'
PUBLIC	??_C@_0O@EHIGJHPL@No?5background?$AA@		; `string'
PUBLIC	??_C@_0BC@FKMLNKJL@No?5bring?5to?5front?$AA@	; `string'
PUBLIC	??_C@_0BB@BPJMKDGK@Unsaved?5document?$AA@	; `string'
PUBLIC	?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA ; `ShowDemoWindowWidgets'::`1'::__LINE__Var
PUBLIC	??_C@_05EAJAAGNN@imgui?$AA@			; `string'
PUBLIC	??_C@_02DJGKEECL@?4?4?$AA@			; `string'
PUBLIC	??_C@_0M@GNLHKNNA@Pressed?5Up?$CB?$AA@		; `string'
PUBLIC	??_C@_0O@CDNFAFCH@Pressed?5Down?$CB?$AA@	; `string'
PUBLIC	??_C@_1DK@GBCOMGGK@?$AAm?$AAy?$AA_?$AAs?$AAt?$AAr?$AA?9?$AA?$DO?$AAb?$AAe?$AAg?$AAi?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAB?$AAu?$AAf?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GE@PBHHHBJD@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi?$AAI?$AAn?$AAp?$AAu?$AAt?$AAT?$AAe?$AAx?$AAt?$AAF?$AAl?$AAa?$AAg?$AAs?$AA_?$AAC?$AAa?$AAl@ ; `string'
PUBLIC	??_C@_07DIHFNIOG@Widgets?$AA@			; `string'
PUBLIC	??_C@_0O@KAGKFDNH@Widgets?1Basic?$AA@		; `string'
PUBLIC	??_C@_05NIKDGMHP@Basic?$AA@			; `string'
PUBLIC	??_C@_0BF@ICEAACFD@Widgets?1Basic?1Button?$AA@	; `string'
PUBLIC	??_C@_06LKBCGDFD@Button?$AA@			; `string'
PUBLIC	??_C@_0BI@IPKGBENJ@Thanks?5for?5clicking?5me?$CB?$AA@ ; `string'
PUBLIC	??_C@_0BH@ELBMBOIA@Widgets?1Basic?1Checkbox?$AA@ ; `string'
PUBLIC	??_C@_08PDFIPFLP@checkbox?$AA@			; `string'
PUBLIC	??_C@_0BK@MHILAAII@Widgets?1Basic?1RadioButton?$AA@ ; `string'
PUBLIC	??_C@_07HJMAFCAJ@radio?5a?$AA@			; `string'
PUBLIC	??_C@_07FCONABMK@radio?5b?$AA@			; `string'
PUBLIC	??_C@_07ELPGDAIL@radio?5c?$AA@			; `string'
PUBLIC	??_C@_0CA@HMPFCLAN@Widgets?1Basic?1Buttons?5?$CIColored?$CJ?$AA@ ; `string'
PUBLIC	??_C@_05BBIFMDEO@Click?$AA@			; `string'
PUBLIC	??_C@_0BA@FMOKFMLK@Hold?5to?5repeat?3?$AA@	; `string'
PUBLIC	??_C@_0CC@NDENGMIB@Widgets?1Basic?1Buttons?5?$CIRepeating@ ; `string'
PUBLIC	??_C@_06EKMNOCAF@?$CD?$CDleft?$AA@		; `string'
PUBLIC	??_C@_07GKNPDGAE@?$CD?$CDright?$AA@		; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_0BH@BNGBGPGO@Widgets?1Basic?1Tooltips?$AA@ ; `string'
PUBLIC	??_C@_09HGDNJJEP@Tooltips?3?$AA@		; `string'
PUBLIC	??_C@_0P@HKPBNOOC@I?5am?5a?5tooltip?$AA@	; `string'
PUBLIC	??_C@_05FMPLNOCG@Fancy?$AA@			; `string'
PUBLIC	??_C@_0BF@CIONDOGG@I?5am?5a?5fancy?5tooltip?$AA@ ; `string'
PUBLIC	??_C@_05HPADKKDG@Curve?$AA@			; `string'
PUBLIC	??_C@_0P@IAGOFNGP@Sin?$CItime?$CJ?5?$DN?5?$CFf?$AA@ ; `string'
PUBLIC	??_C@_07GMFKFGGB@Delayed?$AA@			; `string'
PUBLIC	??_C@_0BN@GILFHKEA@I?5am?5a?5tooltip?5with?5a?5delay?4?$AA@ ; `string'
PUBLIC	??_C@_0FB@OEHHDLEI@Tooltip?5are?5created?5by?5using?5the@ ; `string'
PUBLIC	??_C@_05LPIJGKJ@Value?$AA@			; `string'
PUBLIC	??_C@_05IDCCNNGI@label?$AA@			; `string'
PUBLIC	??_C@_0BI@EBJBEBDI@Widgets?1Basic?1InputText?$AA@ ; `string'
PUBLIC	??_C@_0L@GKEMLLGG@input?5text?$AA@		; `string'
PUBLIC	??_C@_0BJJ@PIFHNINF@USER?3?6Hold?5SHIFT?5or?5use?5mouse?5to@ ; `string'
PUBLIC	??_C@_0BA@DCMOPOEB@enter?5text?5here?$AA@	; `string'
PUBLIC	??_C@_0BF@FKMBICKL@input?5text?5?$CIw?1?5hint?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CD@BADBEAE@Widgets?1Basic?1InputInt?0?5InputFlo@ ; `string'
PUBLIC	??_C@_09KJGAAOJL@input?5int?$AA@		; `string'
PUBLIC	??_C@_04GFJLOHHD@?$CF?43f?$AA@			; `string'
PUBLIC	??_C@_0M@HLMFPLHI@input?5float?$AA@		; `string'
PUBLIC	??_C@_04GJMOAIJC@?$CF?48f?$AA@			; `string'
PUBLIC	??_C@_0N@HNPEBCJF@input?5double?$AA@		; `string'
PUBLIC	??_C@_02CGLCDNAE@?$CFe?$AA@			; `string'
PUBLIC	??_C@_0BB@MKDEHDDF@input?5scientific?$AA@	; `string'
PUBLIC	??_C@_0FG@KKFDAGLG@You?5can?5input?5value?5using?5the?5sc@ ; `string'
PUBLIC	??_C@_0N@KKMOFJMF@input?5float3?$AA@		; `string'
PUBLIC	??_C@_0CB@CBDDBCCE@Widgets?1Basic?1DragInt?0?5DragFloat@ ; `string'
PUBLIC	??_C@_08EAMJBIPC@drag?5int?$AA@			; `string'
PUBLIC	??_C@_0HA@JJHPNEPM@Click?5and?5drag?5to?5edit?5value?4?6Ho@ ; `string'
PUBLIC	??_C@_04FCMNJMCO@?$CFd?$CF?$CF?$AA@		; `string'
PUBLIC	??_C@_0BA@MCINAHBB@drag?5int?50?4?4100?$AA@	; `string'
PUBLIC	??_C@_0L@DLCOHHGO@drag?5float?$AA@		; `string'
PUBLIC	??_C@_08LHDHPMPH@?$CF?406f?5ns?$AA@		; `string'
PUBLIC	??_C@_0BB@CIODINPI@drag?5small?5float?$AA@	; `string'
PUBLIC	??_C@_0CF@NOCPNFME@Widgets?1Basic?1SliderInt?0?5SliderF@ ; `string'
PUBLIC	??_C@_0L@INJDAFHM@slider?5int?$AA@		; `string'
PUBLIC	??_C@_0BL@FBJLFMJ@CTRL?$CLclick?5to?5input?5value?4?$AA@ ; `string'
PUBLIC	??_C@_0N@BCCPFMAI@ratio?5?$DN?5?$CF?43f?$AA@	; `string'
PUBLIC	??_C@_0N@PNCIGDCI@slider?5float?$AA@		; `string'
PUBLIC	??_C@_04GANEPBPG@?$CF?44f?$AA@			; `string'
PUBLIC	??_C@_0BD@PPOMGMAE@slider?5float?5?$CIlog?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BK@LMANIBOG@Widgets?1Basic?1SliderAngle?$AA@ ; `string'
PUBLIC	??_C@_08FKIHKODH@?$CF?40f?5deg?$AA@		; `string'
PUBLIC	??_C@_0N@EFIJIFM@slider?5angle?$AA@		; `string'
PUBLIC	??_C@_0BM@MKFJNJNL@Widgets?1Basic?1Slider?5?$CIenum?$CJ?$AA@ ; `string'
PUBLIC	??_C@_04OHLPDOFO@Fire?$AA@			; `string'
PUBLIC	??_C@_05IKBANCEK@Earth?$AA@			; `string'
PUBLIC	??_C@_03KHBMPEGA@Air?$AA@			; `string'
PUBLIC	??_C@_05EMKMBNJK@Water?$AA@			; `string'
PUBLIC	??_C@_07NBCGADJA@Unknown?$AA@			; `string'
PUBLIC	??_C@_0M@ENFPDMMO@slider?5enum?$AA@		; `string'
PUBLIC	??_C@_0FH@BEBFOFKH@Using?5the?5format?5string?5paramete@ ; `string'
PUBLIC	??_C@_0CF@OBBGEKML@Widgets?1Basic?1ColorEdit3?0?5ColorE@ ; `string'
PUBLIC	??_C@_07OCDFLNDK@color?51?$AA@			; `string'
PUBLIC	??_C@_0LM@JNIPGMLP@Click?5on?5the?5color?5square?5to?5ope@ ; `string'
PUBLIC	??_C@_07MJBIOOPJ@color?52?$AA@			; `string'
PUBLIC	??_C@_0BE@DGEKEFFI@Widgets?1Basic?1Combo?$AA@	; `string'
PUBLIC	??_C@_04OHNMNPPA@AAAA?$AA@			; `string'
PUBLIC	??_C@_04JLKCOHFE@BBBB?$AA@			; `string'
PUBLIC	??_C@_04GKHPCPH@CCCC?$AA@			; `string'
PUBLIC	??_C@_04GDFOJGBM@DDDD?$AA@			; `string'
PUBLIC	??_C@_04POFLIDLP@EEEE?$AA@			; `string'
PUBLIC	??_C@_04ICCFLLBL@FFFF?$AA@			; `string'
PUBLIC	??_C@_04BPCAKOLI@GGGG?$AA@			; `string'
PUBLIC	??_C@_04EJNHHCMN@HHHH?$AA@			; `string'
PUBLIC	??_C@_07LIMEPNNC@IIIIIII?$AA@			; `string'
PUBLIC	??_C@_04KIKMFPMK@JJJJ?$AA@			; `string'
PUBLIC	??_C@_07MBMNGHIK@KKKKKKK?$AA@			; `string'
PUBLIC	??_C@_05LLEFIEMM@combo?$AA@			; `string'
PUBLIC	??_C@_0KK@EOPNBDJP@Using?5the?5simplified?5one?9liner?5C@ ; `string'
PUBLIC	??_C@_0BG@OOGNHKFG@Widgets?1Basic?1ListBox?$AA@	; `string'
PUBLIC	??_C@_07LHBBOFFP@listbox?$AA@			; `string'
PUBLIC	??_C@_0LF@POLFDEKB@Using?5the?5simplified?5one?9liner?5L@ ; `string'
PUBLIC	??_C@_0O@GEAPLMHF@Widgets?1Trees?$AA@		; `string'
PUBLIC	??_C@_05BMMGIDNN@Trees?$AA@			; `string'
PUBLIC	??_C@_0BK@OJMACAMF@Widgets?1Trees?1Basic?5trees?$AA@ ; `string'
PUBLIC	??_C@_0M@OABIBGBA@Basic?5trees?$AA@		; `string'
PUBLIC	??_C@_08GPGIPNJB@Child?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_09KGLHLKML@blah?5blah?$AA@		; `string'
PUBLIC	??_C@_06HFKPFKMP@button?$AA@			; `string'
PUBLIC	??_C@_0CO@HKMALMNH@Widgets?1Trees?1Advanced?0?5with?5Sel@ ; `string'
PUBLIC	??_C@_0CA@LDNIBPC@Advanced?0?5with?5Selectable?5nodes?$AA@ ; `string'
PUBLIC	??_C@_0IL@PMAJKNJG@This?5is?5a?5more?5typical?5looking?5t@ ; `string'
PUBLIC	??_C@_0BP@JJAJNCOF@ImGuiTreeNodeFlags_OpenOnArrow?$AA@ ; `string'
PUBLIC	??_C@_0CF@HDMDLLCC@ImGuiTreeNodeFlags_OpenOnDoubleC@ ; `string'
PUBLIC	??_C@_0CC@CLHKBONF@ImGuiTreeNodeFlags_SpanAvailWidt@ ; `string'
PUBLIC	??_C@_0GF@HJHHKMOH@Extend?5hit?5area?5to?5all?5available@ ; `string'
PUBLIC	??_C@_0CB@OHNGGEGD@ImGuiTreeNodeFlags_SpanFullWidth@ ; `string'
PUBLIC	??_C@_0CE@CFMFIOLL@Align?5label?5with?5current?5X?5posit@ ; `string'
PUBLIC	??_C@_0BO@ICNOHPIE@Test?5tree?5node?5as?5drag?5source?$AA@ ; `string'
PUBLIC	??_C@_06KPGIMOHP@Hello?$CB?$AA@			; `string'
PUBLIC	??_C@_0BD@DKDJNGLG@Selectable?5Node?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_09PLFIFPJD@_TREENODE?$AA@			; `string'
PUBLIC	??_C@_0BP@LHBEHNKM@This?5is?5a?5drag?5and?5drop?5source?$AA@ ; `string'
PUBLIC	??_C@_0BE@GJFAIPKG@Blah?5blah?6Blah?5Blah?$AA@	; `string'
PUBLIC	??_C@_0BD@MLABGFOG@Selectable?5Leaf?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0BL@HBCHPPAB@Widgets?1Collapsing?5Headers?$AA@ ; `string'
PUBLIC	??_C@_0BD@GBPHDMGC@Collapsing?5Headers?$AA@	; `string'
PUBLIC	??_C@_0BA@JOCPBPDO@Show?52nd?5header?$AA@	; `string'
PUBLIC	??_C@_06OENKJGA@Header?$AA@			; `string'
PUBLIC	??_C@_0BC@BLAKNONB@IsItemHovered?3?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0BA@PJMPKHOM@Some?5content?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0BL@IHHHIKPE@Header?5with?5a?5close?5button?$AA@ ; `string'
PUBLIC	??_C@_0BA@PEMOHED@More?5content?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0BA@OHGLMBHK@Widgets?1Bullets?$AA@	; `string'
PUBLIC	??_C@_07DHNDKCGP@Bullets?$AA@			; `string'
PUBLIC	??_C@_0P@DEGHIHA@Bullet?5point?51?$AA@		; `string'
PUBLIC	??_C@_0CB@LFMFDEHN@Bullet?5point?52?6On?5multiple?5lines@ ; `string'
PUBLIC	??_C@_09CGOFEACE@Tree?5node?$AA@		; `string'
PUBLIC	??_C@_0BF@FBMIEPNI@Another?5bullet?5point?$AA@	; `string'
PUBLIC	??_C@_0BL@OAFINJBP@Bullet?5point?53?5?$CItwo?5calls?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0N@CHPBOJIK@Widgets?1Text?$AA@		; `string'
PUBLIC	??_C@_04OJAHODMC@Text?$AA@			; `string'
PUBLIC	??_C@_0BK@PPEHIABB@Widgets?1Text?1Colored?5Text?$AA@ ; `string'
PUBLIC	??_C@_0O@HGHOOCPG@Colorful?5Text?$AA@		; `string'
PUBLIC	??_C@_04IDKACLOG@Pink?$AA@			; `string'
PUBLIC	??_C@_06ICCAKDNH@Yellow?$AA@			; `string'
PUBLIC	??_C@_08JGILNPHN@Disabled?$AA@			; `string'
PUBLIC	??_C@_0DA@EPJPAHDI@The?5TextDisabled?5color?5is?5stored@ ; `string'
PUBLIC	??_C@_0BL@NBECCBAN@Widgets?1Text?1Word?5Wrapping?$AA@ ; `string'
PUBLIC	??_C@_0O@CLIMKCMB@Word?5Wrapping?$AA@		; `string'
PUBLIC	??_C@_0LE@LBABKNFA@This?5text?5should?5automatically?5w@ ; `string'
PUBLIC	??_C@_04GHNNFJCK@?$CF?40f?$AA@			; `string'
PUBLIC	??_C@_0L@NHCJIHMI@Wrap?5width?$AA@		; `string'
PUBLIC	??_C@_0BD@IAMDDDPD@Test?5paragraph?5?$CFd?3?$AA@ ; `string'
PUBLIC	??_C@_0JD@HKNKABEJ@The?5lazy?5dog?5is?5a?5good?5dog?4?5This@ ; `string'
PUBLIC	??_C@_0FB@BGHPBDIA@aaaaaaaa?5bbbbbbbb?0?5c?5cccccccc?0dd@ ; `string'
PUBLIC	??_C@_0BI@HMDFOMMC@Widgets?1Text?1UTF?98?5Text?$AA@ ; `string'
PUBLIC	??_C@_0L@KOGPBBGO@UTF?98?5Text?$AA@		; `string'
PUBLIC	??_C@_0MJ@DIENCCGD@CJK?5text?5will?5only?5appear?5if?5the@ ; `string'
PUBLIC	??_C@_0CH@EHCMNMLI@Hiragana?3?5?c?$IB?$IL?c?$IB?$IN?c?$IB?$IP?c?$IB?$JB?c?$IB?$JD?5?$CIkakik@ ; `string'
PUBLIC	??_C@_0BM@BCACPCEP@Kanjis?3?5?f?$JH?$KF?f?$JM?$KM?h?$KK?$JO?5?$CInihongo?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0M@OKLFPIAG@UTF?98?5input?$AA@		; `string'
PUBLIC	??_C@_0P@JHLCFMPD@Widgets?1Images?$AA@		; `string'
PUBLIC	??_C@_06EPMHLOBG@Images?$AA@			; `string'
PUBLIC	??_C@_0OJ@IGJPGIOP@Below?5we?5are?5displaying?5the?5font@ ; `string'
PUBLIC	??_C@_09CLOIPCOK@?$CF?40fx?$CF?40f?$AA@		; `string'
PUBLIC	??_C@_0BC@FICOOKGF@Min?3?5?$CI?$CF?42f?0?5?$CF?42f?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BC@LIIPCIB@Max?3?5?$CI?$CF?42f?0?5?$CF?42f?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CA@CCOONHAL@Widgets?1Images?1Textured?5buttons?$AA@ ; `string'
PUBLIC	??_C@_0CA@KAEHPGML@And?5now?5some?5textured?5buttons?4?4?$AA@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0BC@JGNKDOGB@Pressed?5?$CFd?5times?4?$AA@	; `string'
PUBLIC	??_C@_0O@MECALOFC@Widgets?1Combo?$AA@		; `string'
PUBLIC	??_C@_05LMOJIBPK@Combo?$AA@			; `string'
PUBLIC	??_C@_0BP@KDFGPNLK@ImGuiComboFlags_PopupAlignLeft?$AA@ ; `string'
PUBLIC	??_C@_0DO@LDFFHHPN@Only?5makes?5a?5difference?5if?5the?5p@ ; `string'
PUBLIC	??_C@_0BO@IADJEHHH@ImGuiComboFlags_NoArrowButton?$AA@ ; `string'
PUBLIC	??_C@_0BK@CFAPHAND@ImGuiComboFlags_NoPreview?$AA@ ; `string'
PUBLIC	??_C@_04NENCGHGO@IIII?$AA@			; `string'
PUBLIC	??_C@_04DFKJEKGJ@KKKK?$AA@			; `string'
PUBLIC	??_C@_07HGFDAEEO@LLLLLLL?$AA@			; `string'
PUBLIC	??_C@_04MNFFDLCB@MMMM?$AA@			; `string'
PUBLIC	??_C@_07DDNOFDDK@OOOOOOO?$AA@			; `string'
PUBLIC	??_C@_07HDIKCFGM@combo?51?$AA@			; `string'
PUBLIC	??_C@_0BL@ICCGGBKH@aaaa?$AAbbbb?$AAcccc?$AAdddd?$AAeeee?$AA?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BE@BBBJNHHG@combo?52?5?$CIone?9liner?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BA@MDMKCBHF@combo?53?5?$CIarray?$CJ?$AA@	; `string'
PUBLIC	??_C@_0BD@GDHGAEJD@combo?54?5?$CIfunction?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BD@GHKBDBIA@Widgets?1List?5Boxes?$AA@	; `string'
PUBLIC	??_C@_0L@PBIKFGCH@List?5boxes?$AA@		; `string'
PUBLIC	??_C@_09BDFDKBCP@listbox?51?$AA@		; `string'
PUBLIC	??_C@_0M@CKEICGGI@Full?9width?3?$AA@		; `string'
PUBLIC	??_C@_0M@NAPALMCL@?$CD?$CDlistbox?52?$AA@	; `string'
PUBLIC	??_C@_0BE@OJBNEPEE@Widgets?1Selectables?$AA@	; `string'
PUBLIC	??_C@_0M@GOIEGLPE@Selectables?$AA@		; `string'
PUBLIC	??_C@_0BK@OFEBJINJ@Widgets?1Selectables?1Basic?$AA@ ; `string'
PUBLIC	??_C@_0BD@KCGCFIHN@1?4?5I?5am?5selectable?$AA@	; `string'
PUBLIC	??_C@_0BD@BDENONE@2?4?5I?5am?5selectable?$AA@	; `string'
PUBLIC	??_C@_0BG@EJJBPEFA@?$CII?5am?5not?5selectable?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BD@JMOINFMH@4?4?5I?5am?5selectable?$AA@	; `string'
PUBLIC	??_C@_0BJ@DACNLCFI@5?4?5I?5am?5double?5clickable?$AA@ ; `string'
PUBLIC	??_C@_0CF@EDENHAHK@Widgets?1Selectables?1Single?5Selec@ ; `string'
PUBLIC	??_C@_0CC@NGMIMNBC@Selection?5State?3?5Single?5Selectio@ ; `string'
PUBLIC	??_C@_09IEODADNK@Object?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_0CH@JDDBHIKA@Widgets?1Selectables?1Multiple?5Sel@ ; `string'
PUBLIC	??_C@_0CE@ILMFMDLL@Selection?5State?3?5Multiple?5Select@ ; `string'
PUBLIC	??_C@_0CO@HEGMKIIH@Hold?5CTRL?5and?5click?5to?5select?5mu@ ; `string'
PUBLIC	??_C@_0DL@PHDOHIFN@Widgets?1Selectables?1Rendering?5mo@ ; `string'
PUBLIC	??_C@_0CH@PHBOMNNA@Rendering?5more?5text?5into?5the?5sam@ ; `string'
PUBLIC	??_C@_06HIICBHNJ@main?4c?$AA@			; `string'
PUBLIC	??_C@_0N@NKEFLDLJ@?52?0345?5bytes?$AA@		; `string'
PUBLIC	??_C@_09JJLAOCPC@Hello?4cpp?$AA@		; `string'
PUBLIC	??_C@_0N@LDNEMMOG@12?0345?5bytes?$AA@		; `string'
PUBLIC	??_C@_07GGGNKCPB@Hello?4h?$AA@			; `string'
PUBLIC	??_C@_0BP@KAMGKAKE@Widgets?1Selectables?1In?5columns?$AA@ ; `string'
PUBLIC	??_C@_0L@JGCLAHBC@In?5columns?$AA@		; `string'
PUBLIC	??_C@_06DLHIACAN@split1?$AA@			; `string'
PUBLIC	??_C@_07BCJGKFOL@Item?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_06BAFFFBMO@split2?$AA@			; `string'
PUBLIC	??_C@_0BE@DEADEMHJ@Some?5other?5contents?$AA@	; `string'
PUBLIC	??_C@_06BHEBDDGP@123456?$AA@			; `string'
PUBLIC	??_C@_0BJ@GOMOMLMF@Widgets?1Selectables?1Grid?$AA@ ; `string'
PUBLIC	??_C@_04FEKPLKKA@Grid?$AA@			; `string'
PUBLIC	??_C@_06IFGMFLK@Sailor?$AA@			; `string'
PUBLIC	??_C@_0BO@OOLMIAMJ@Widgets?1Selectables?1Alignment?$AA@ ; `string'
PUBLIC	??_C@_09FBMAGD@Alignment?$AA@			; `string'
PUBLIC	??_C@_0BAK@CHANFCAG@By?5default?0?5Selectables?5uses?5sty@ ; `string'
PUBLIC	??_C@_0M@HCIABIHI@?$CI?$CF?41f?0?$CF?41f?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BD@CKIJKOHG@Widgets?1Text?5Input?$AA@	; `string'
PUBLIC	??_C@_0L@LLAOMMOH@Text?5Input?$AA@		; `string'
PUBLIC	??_C@_0CJ@EJIDMLBN@Widgets?1Text?5Input?1Multi?9line?5Te@ ; `string'
PUBLIC	??_C@_0BG@ENAPIHKE@Multi?9line?5Text?5Input?$AA@ ; `string'
PUBLIC	??_C@_0BAK@IFEHCPKB@You?5can?5use?5the?5ImGuiInputTextFl@ ; `string'
PUBLIC	??_C@_0BN@IHHKAKNM@ImGuiInputTextFlags_ReadOnly?$AA@ ; `string'
PUBLIC	??_C@_0CC@GMDAHFPL@ImGuiInputTextFlags_AllowTabInpu@ ; `string'
PUBLIC	??_C@_0CI@LIKAMPDL@ImGuiInputTextFlags_CtrlEnterFor@ ; `string'
PUBLIC	??_C@_08FDEOKKII@?$CD?$CDsource?$AA@		; `string'
PUBLIC	??_C@_0CH@GBIJGOO@Widgets?1Text?5Input?1Filtered?5Text@ ; `string'
PUBLIC	??_C@_0BE@EABDFJK@Filtered?5Text?5Input?$AA@	; `string'
PUBLIC	??_C@_07DLHCIBDH@default?$AA@			; `string'
PUBLIC	??_C@_07EEKBCPDP@decimal?$AA@			; `string'
PUBLIC	??_C@_0M@PLANEGDO@hexadecimal?$AA@		; `string'
PUBLIC	??_C@_09NMLHJAII@uppercase?$AA@			; `string'
PUBLIC	??_C@_08BFAFMKNB@no?5blank?$AA@			; `string'
PUBLIC	??_C@_0BA@DMKNNKAP@?$CCimgui?$CC?5letters?$AA@	; `string'
PUBLIC	??_C@_0CC@OPLEEAIO@Widgets?1Text?5Input?1Password?5inpu@ ; `string'
PUBLIC	??_C@_0P@CNDCHFGF@Password?5Input?$AA@		; `string'
PUBLIC	??_C@_08NLHBPEGP@password?$AA@			; `string'
PUBLIC	??_C@_0FB@LAANLENK@Display?5all?5characters?5as?5?8?$CK?8?4?6D@ ; `string'
PUBLIC	??_C@_0L@DGGOBGAB@?$DMpassword?$DO?$AA@		; `string'
PUBLIC	??_C@_0BD@DPDFGHAP@password?5?$CIw?1?5hint?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BB@LNABFGG@password?5?$CIclear?$CJ?$AA@	; `string'
PUBLIC	??_C@_0CE@HIDJCAJO@Completion?0?5History?0?5Edit?5Callba@ ; `string'
PUBLIC	??_C@_0L@BMOEBFKJ@Completion?$AA@		; `string'
PUBLIC	??_C@_0IB@POFCECKB@Here?5we?5append?5?$CC?4?4?$CC?5each?5time?5Ta@ ; `string'
PUBLIC	??_C@_07DFKCFAEM@History?$AA@			; `string'
PUBLIC	??_C@_0JC@JNBHNBHO@Here?5we?5replace?5and?5select?5text?5@ ; `string'
PUBLIC	??_C@_04BBNPPDNC@Edit?$AA@			; `string'
PUBLIC	??_C@_0EO@BKNGEHGN@Here?5we?5toggle?5the?5casing?5of?5the@ ; `string'
PUBLIC	??_C@_04FEBIMPDM@?$CI?$CFd?$CJ?$AA@		; `string'
PUBLIC	??_C@_0CD@OOGDFIC@Widgets?1Text?5Input?1Resize?5Callba@ ; `string'
PUBLIC	??_C@_0BA@PGEBLBNL@Resize?5Callback?$AA@	; `string'
PUBLIC	??_C@_0KF@ELKLKFLA@Using?5ImGuiInputTextFlags_Callba@ ; `string'
PUBLIC	??_C@_07MDDMIGJK@?$CD?$CDMyStr?$AA@		; `string'
PUBLIC	??_C@_0BP@HFIMENAP@Data?3?5?$CFp?6Size?3?5?$CFd?6Capacity?3?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0N@PGGDMOLM@Widgets?1Tabs?$AA@		; `string'
PUBLIC	??_C@_04DIJFMEPE@Tabs?$AA@			; `string'
PUBLIC	??_C@_0BD@MJMKJGN@Widgets?1Tabs?1Basic?$AA@	; `string'
PUBLIC	??_C@_08BHPFJKBJ@MyTabBar?$AA@			; `string'
PUBLIC	??_C@_07PJEDDDBE@Avocado?$AA@			; `string'
PUBLIC	??_C@_0DC@GCKNABCK@This?5is?5the?5Avocado?5tab?$CB?6blah?5bl@ ; `string'
PUBLIC	??_C@_08LMFMBPKH@Broccoli?$AA@			; `string'
PUBLIC	??_C@_0DD@MJGBNDMM@This?5is?5the?5Broccoli?5tab?$CB?6blah?5b@ ; `string'
PUBLIC	??_C@_08FIHABPKG@Cucumber?$AA@			; `string'
PUBLIC	??_C@_0DD@CJPLEJGJ@This?5is?5the?5Cucumber?5tab?$CB?6blah?5b@ ; `string'
PUBLIC	??_C@_0CF@NNMDIAIK@Widgets?1Tabs?1Advanced?5?$CG?5Close?5Bu@ ; `string'
PUBLIC	??_C@_0BI@NAEAKGLC@Advanced?5?$CG?5Close?5Button?$AA@ ; `string'
PUBLIC	??_C@_0BN@FKNGBAKI@ImGuiTabBarFlags_Reorderable?$AA@ ; `string'
PUBLIC	??_C@_0CD@CJJDGNCL@ImGuiTabBarFlags_AutoSelectNewTa@ ; `string'
PUBLIC	??_C@_0CE@ODMHCKNA@ImGuiTabBarFlags_TabListPopupBut@ ; `string'
PUBLIC	??_C@_0CO@PEFOKBDP@ImGuiTabBarFlags_NoCloseWithMidd@ ; `string'
PUBLIC	??_C@_0CJ@IIIJDEBN@ImGuiTabBarFlags_FittingPolicyRe@ ; `string'
PUBLIC	??_C@_0CF@NLLNBILH@ImGuiTabBarFlags_FittingPolicySc@ ; `string'
PUBLIC	??_C@_09JNADJLBG@Artichoke?$AA@			; `string'
PUBLIC	??_C@_08NACLCGIP@Beetroot?$AA@			; `string'
PUBLIC	??_C@_06LGPLDCHA@Celery?$AA@			; `string'
PUBLIC	??_C@_06NBIPACBO@Daikon?$AA@			; `string'
PUBLIC	??_C@_0BE@HMOLENGG@This?5is?5the?5?$CFs?5tab?$CB?$AA@ ; `string'
PUBLIC	??_C@_0BB@PAPJGNOM@I?5am?5an?5odd?5tab?4?$AA@	; `string'
PUBLIC	??_C@_0DE@GLBBPDDL@Widgets?1Tabs?1TabItemButton?5?$CG?5Lea@ ; `string'
PUBLIC	??_C@_0CH@FJDGMAFH@TabItemButton?5?$CG?5Leading?1Trailing@ ; `string'
PUBLIC	??_C@_0BN@OJPKMGDH@Show?5Leading?5TabItemButton?$CI?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BO@GMKHPNHK@Show?5Trailing?5TabItemButton?$CI?$CJ?$AA@ ; `string'
PUBLIC	??_C@_01OGPIMHDM@?$DP?$AA@			; `string'
PUBLIC	??_C@_0L@IFBHGAGJ@MyHelpMenu?$AA@		; `string'
PUBLIC	??_C@_01MIFGBAGJ@?$CL?$AA@			; `string'
PUBLIC	??_C@_04OCCELDNI@?$CF04d?$AA@			; `string'
PUBLIC	??_C@_0BB@EOCJNFEM@Widgets?1Plotting?$AA@	; `string'
PUBLIC	??_C@_08CDCEIJME@Plotting?$AA@			; `string'
PUBLIC	??_C@_07CCNCPHDL@Animate?$AA@			; `string'
PUBLIC	??_C@_0CK@MBEHLAAJ@Widgets?1Plotting?1PlotLines?0?5Plot@ ; `string'
PUBLIC	??_C@_0M@LJPKANLB@Frame?5Times?$AA@		; `string'
PUBLIC	??_C@_09NBOAEPFB@Histogram?$AA@			; `string'
PUBLIC	??_C@_06BECIMFEF@avg?5?$CFf?$AA@		; `string'
PUBLIC	??_C@_05DDHCCCLJ@Lines?$AA@			; `string'
PUBLIC	??_C@_08OLJDEBGC@Sin?$AASaw?$AA?$AA@		; `string'
PUBLIC	??_C@_04HPNHAEOP@func?$AA@			; `string'
PUBLIC	??_C@_0N@LHCNOOOP@Sample?5count?$AA@		; `string'
PUBLIC	??_C@_0BN@JJJCOIGD@Widgets?1Plotting?1ProgressBar?$AA@ ; `string'
PUBLIC	??_C@_0N@HDMPBJBE@Progress?5Bar?$AA@		; `string'
PUBLIC	??_C@_05LCKIIOJE@?$CFd?1?$CFd?$AA@		; `string'
PUBLIC	??_C@_0O@ILCICGHI@Widgets?1Color?$AA@		; `string'
PUBLIC	??_C@_0BF@GELOCOAL@Color?1Picker?5Widgets?$AA@	; `string'
PUBLIC	??_C@_0BD@KJCAPGNJ@With?5Alpha?5Preview?$AA@	; `string'
PUBLIC	??_C@_0BI@FJEMIBKC@With?5Half?5Alpha?5Preview?$AA@ ; `string'
PUBLIC	??_C@_0BD@KEFEHFM@With?5Drag?5and?5Drop?$AA@	; `string'
PUBLIC	??_C@_0BC@EJIAMDNC@With?5Options?5Menu?$AA@	; `string'
PUBLIC	??_C@_0DM@KEMLELAP@Right?9click?5on?5the?5individual?5co@ ; `string'
PUBLIC	??_C@_08FMJOEAGN@With?5HDR?$AA@			; `string'
PUBLIC	??_C@_0EI@FHFBEIHN@Currently?5all?5this?5does?5is?5to?5li@ ; `string'
PUBLIC	??_C@_0BI@MDJGKOGL@Widgets?1Color?1ColorEdit?$AA@ ; `string'
PUBLIC	??_C@_0O@NOEDKBGC@Color?5widget?3?$AA@		; `string'
PUBLIC	??_C@_0GG@EFLMCGPH@Click?5on?5the?5color?5square?5to?5ope@ ; `string'
PUBLIC	??_C@_0L@BFFLOOBG@MyColor?$CD?$CD1?$AA@		; `string'
PUBLIC	??_C@_0CK@HAPIFBGC@Widgets?1Color?1ColorEdit?5?$CIHSV?0?5wi@ ; `string'
PUBLIC	??_C@_0BN@GLLLKGMC@Color?5widget?5HSV?5with?5Alpha?3?$AA@ ; `string'
PUBLIC	??_C@_0L@DOHGLNNF@MyColor?$CD?$CD2?$AA@		; `string'
PUBLIC	??_C@_0CI@DKIDAOAB@Widgets?1Color?1ColorEdit?5?$CIfloat?5d@ ; `string'
PUBLIC	??_C@_0CB@GHOEMJO@Color?5widget?5with?5Float?5Display?3@ ; `string'
PUBLIC	??_C@_0M@MFCAJMMH@MyColor?$CD?$CD2f?$AA@	; `string'
PUBLIC	??_C@_0CI@KPPBOEAG@Widgets?1Color?1ColorButton?5?$CIwith?5@ ; `string'
PUBLIC	??_C@_0BK@EFMOKOBO@Color?5button?5with?5Picker?3?$AA@ ; `string'
PUBLIC	??_C@_0NH@CMBOCHE@With?5the?5ImGuiColorEditFlags_NoI@ ; `string'
PUBLIC	??_C@_0L@CHGNIMJE@MyColor?$CD?$CD3?$AA@		; `string'
PUBLIC	??_C@_0DF@LKFAKHKL@Widgets?1Color?1ColorButton?5?$CIwith?5@ ; `string'
PUBLIC	??_C@_0CH@HJNHAHAP@Color?5button?5with?5Custom?5Picker?5@ ; `string'
PUBLIC	??_C@_0M@KAIODDPE@MyColor?$CD?$CD3b?$AA@	; `string'
PUBLIC	??_C@_07GDPBMLLI@Palette?$AA@			; `string'
PUBLIC	??_C@_08KFPGOGIA@mypicker?$AA@			; `string'
PUBLIC	??_C@_0DA@DKOICBGC@MY?5CUSTOM?5COLOR?5PICKER?5WITH?5AN?5A@ ; `string'
PUBLIC	??_C@_08HHEANBBL@?$CD?$CDpicker?$AA@		; `string'
PUBLIC	??_C@_07EDIFFIJI@Current?$AA@			; `string'
PUBLIC	??_C@_09CDENILGE@?$CD?$CDcurrent?$AA@		; `string'
PUBLIC	??_C@_08CAGLMDLD@Previous?$AA@			; `string'
PUBLIC	??_C@_0L@JEAALFFH@?$CD?$CDprevious?$AA@		; `string'
PUBLIC	??_C@_09DDJBIEE@?$CD?$CDpalette?$AA@		; `string'
PUBLIC	??_C@_06LFKNFKEK@_COL3F?$AA@			; `string'
PUBLIC	??_C@_06LAOCEMMP@_COL4F?$AA@			; `string'
PUBLIC	??_C@_0CD@HMBJHACC@Widgets?1Color?1ColorButton?5?$CIsimpl@ ; `string'
PUBLIC	??_C@_0BD@NCDFBPJC@Color?5button?5only?3?$AA@	; `string'
PUBLIC	??_C@_0BN@HLFBDHDP@ImGuiColorEditFlags_NoBorder?$AA@ ; `string'
PUBLIC	??_C@_0M@LJJFACLF@MyColor?$CD?$CD3c?$AA@	; `string'
PUBLIC	??_C@_0BK@CPMABCHF@Widgets?1Color?1ColorPicker?$AA@ ; `string'
PUBLIC	??_C@_0O@IPOAJHA@Color?5picker?3?$AA@		; `string'
PUBLIC	??_C@_0L@EACIJKCC@With?5Alpha?$AA@		; `string'
PUBLIC	??_C@_0P@HFPOLAHI@With?5Alpha?5Bar?$AA@		; `string'
PUBLIC	??_C@_0BC@IIIMIJGF@With?5Side?5Preview?$AA@	; `string'
PUBLIC	??_C@_0P@CEAKBNI@With?5Ref?5Color?$AA@		; `string'
PUBLIC	??_C@_0L@LOHJOGGK@?$CD?$CDRefColor?$AA@		; `string'
PUBLIC	??_C@_0CO@EADBOKOE@Auto?1Current?$AANone?$AARGB?5Only?$AAHSV?5O@ ; `string'
PUBLIC	??_C@_0N@OFPFGAFL@Display?5Mode?$AA@		; `string'
PUBLIC	??_C@_0BBP@JAIDJLF@ColorEdit?5defaults?5to?5displaying@ ; `string'
PUBLIC	??_C@_0GD@OPONKGG@When?5not?5specified?5explicitly?5?$CIA@ ; `string'
PUBLIC	??_C@_0L@GICMBKFD@MyColor?$CD?$CD4?$AA@		; `string'
PUBLIC	??_C@_0BG@PLDANIFM@Set?5defaults?5in?5code?3?$AA@ ; `string'
PUBLIC	??_C@_0BFC@FHNBCNON@SetColorEditOptions?$CI?$CJ?5is?5designe@ ; `string'
PUBLIC	??_C@_0BP@GBPCDFBG@Default?3?5Uint8?5?$CL?5HSV?5?$CL?5Hue?5Bar?$AA@ ; `string'
PUBLIC	??_C@_0CB@BDAOENPB@Default?3?5Float?5?$CL?5HDR?5?$CL?5Hue?5Wheel@ ; `string'
PUBLIC	??_C@_0M@MIAPFBLG@Both?5types?3?$AA@		; `string'
PUBLIC	??_C@_0N@HENPPCEP@?$CD?$CDMyColor?$CD?$CD5?$AA@	; `string'
PUBLIC	??_C@_0N@FPPCKBIM@?$CD?$CDMyColor?$CD?$CD6?$AA@	; `string'
PUBLIC	??_C@_0BD@DKMMPKGG@HSV?5encoded?5colors?$AA@	; `string'
PUBLIC	??_C@_0BDD@IKIAIDKH@By?5default?0?5colors?5are?5given?5to?5@ ; `string'
PUBLIC	??_C@_0BM@EODGJACI@Color?5widget?5with?5InputHSV?3?$AA@ ; `string'
PUBLIC	??_C@_0BE@PEEENKKH@HSV?5shown?5as?5RGB?$CD?$CD1?$AA@ ; `string'
PUBLIC	??_C@_0BE@DKMNGIOI@HSV?5shown?5as?5HSV?$CD?$CD1?$AA@ ; `string'
PUBLIC	??_C@_0P@PMCJHJ@Raw?5HSV?5values?$AA@		; `string'
PUBLIC	??_C@_0BO@ONPGHCKF@Widgets?1Drag?5and?5Slider?5Flags?$AA@ ; `string'
PUBLIC	??_C@_0BC@FOMNFKHB@Drag?1Slider?5Flags?$AA@	; `string'
PUBLIC	??_C@_0BN@OEAGPOC@ImGuiSliderFlags_AlwaysClamp?$AA@ ; `string'
PUBLIC	??_C@_0FD@BLABLEIF@Always?5clamp?5value?5to?5min?1max?5bo@ ; `string'
PUBLIC	??_C@_0BN@HAKIJBBA@ImGuiSliderFlags_Logarithmic?$AA@ ; `string'
PUBLIC	??_C@_0DO@HKODNILP@Enable?5logarithmic?5editing?5?$CImore@ ; `string'
PUBLIC	??_C@_0CB@DOCCIAEK@ImGuiSliderFlags_NoRoundToFormat@ ; `string'
PUBLIC	??_C@_0HM@PJMLMMLP@Disable?5rounding?5underlying?5valu@ ; `string'
PUBLIC	??_C@_0BJ@KFAEJGBN@ImGuiSliderFlags_NoInput?$AA@ ; `string'
PUBLIC	??_C@_0FB@JPLHIJIO@Disable?5CTRL?$CLClick?5or?5Enter?5key?5@ ; `string'
PUBLIC	??_C@_0BL@HLOFLJPB@Underlying?5float?5value?3?5?$CFf?$AA@ ; `string'
PUBLIC	??_C@_0BD@LPIMJICP@DragFloat?5?$CI0?5?9?$DO?51?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BG@EHNMBPIG@DragFloat?5?$CI0?5?9?$DO?5?$CLinf?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BG@GPJPIKGM@DragFloat?5?$CI?9inf?5?9?$DO?51?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BJ@MJEKBNMC@DragFloat?5?$CI?9inf?5?9?$DO?5?$CLinf?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BD@KDPKGLCE@DragInt?5?$CI0?5?9?$DO?5100?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BF@MCKPEGDC@SliderFloat?5?$CI0?5?9?$DO?51?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BF@NONJLFDJ@SliderInt?5?$CI0?5?9?$DO?5100?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BG@EMJJMOGJ@Widgets?1Range?5Widgets?$AA@	; `string'
PUBLIC	??_C@_0O@JEFPADJJ@Range?5Widgets?$AA@		; `string'
PUBLIC	??_C@_0N@IBBLMIOP@Max?3?5?$CF?41f?5?$CF?$CF?$AA@ ; `string'
PUBLIC	??_C@_0N@MBFELAJJ@Min?3?5?$CF?41f?5?$CF?$CF?$AA@ ; `string'
PUBLIC	??_C@_0M@JOPHKMFF@range?5float?$AA@		; `string'
PUBLIC	??_C@_0O@JDOPLCFE@Max?3?5?$CFd?5units?$AA@	; `string'
PUBLIC	??_C@_0O@CKMJCJCF@Min?3?5?$CFd?5units?$AA@	; `string'
PUBLIC	??_C@_09PIGNMEJF@range?5int?$AA@		; `string'
PUBLIC	??_C@_0BG@NFKPCFAN@range?5int?5?$CIno?5bounds?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BD@GBBEGJPM@Widgets?1Data?5Types?$AA@	; `string'
PUBLIC	??_C@_0L@PAJDALGN@Data?5Types?$AA@		; `string'
PUBLIC	??_C@_0BJ@IECCHINH@Widgets?1Data?5Types?1Drags?$AA@ ; `string'
PUBLIC	??_C@_06OFIAEEBG@Drags?3?$AA@			; `string'
PUBLIC	??_C@_0BI@LDAPNGOM@Clamp?5integers?5to?50?4?450?$AA@ ; `string'
PUBLIC	??_C@_0KK@PJCBLLDP@As?5with?5every?5widget?5in?5dear?5img@ ; `string'
PUBLIC	??_C@_07LMCLPNLL@drag?5s8?$AA@			; `string'
PUBLIC	??_C@_05MMEBHIBO@?$CFu?5ms?$AA@			; `string'
PUBLIC	??_C@_07LIKGIBAJ@drag?5u8?$AA@			; `string'
PUBLIC	??_C@_08NKMCOLAD@drag?5s16?$AA@			; `string'
PUBLIC	??_C@_08PPKJLENP@drag?5u16?$AA@			; `string'
PUBLIC	??_C@_08LNCKPKGJ@drag?5s32?$AA@			; `string'
PUBLIC	??_C@_06IMJBDBNO@0x?$CF08X?$AA@			; `string'
PUBLIC	??_C@_0N@LCGPEHEL@drag?5s32?5hex?$AA@		; `string'
PUBLIC	??_C@_08JIEBKFLF@drag?5u32?$AA@			; `string'
PUBLIC	??_C@_08ONLLJPAE@drag?5s64?$AA@			; `string'
PUBLIC	??_C@_08MINAMANI@drag?5u64?$AA@			; `string'
PUBLIC	??_C@_02NJPGOMH@?$CFf?$AA@			; `string'
PUBLIC	??_C@_0P@OJENAICP@drag?5float?5log?$AA@		; `string'
PUBLIC	??_C@_0M@PBAPOGLA@?$CF?410f?5grams?$AA@		; `string'
PUBLIC	??_C@_0M@IJGAEMEI@drag?5double?$AA@		; `string'
PUBLIC	??_C@_0O@PIJBNPDH@0?5?$DM?5?$CF?410f?5?$DM?51?$AA@ ; `string'
PUBLIC	??_C@_0BA@PLPECJH@drag?5double?5log?$AA@	; `string'
PUBLIC	??_C@_0BL@FMNOJHKA@Widgets?1Data?5Types?1Sliders?$AA@ ; `string'
PUBLIC	??_C@_07BBLEOMAH@Sliders?$AA@			; `string'
PUBLIC	??_C@_0P@BGDAIEKI@slider?5s8?5full?$AA@		; `string'
PUBLIC	??_C@_02GMHACPFF@?$CFu?$AA@			; `string'
PUBLIC	??_C@_0P@NAFPINCP@slider?5u8?5full?$AA@		; `string'
PUBLIC	??_C@_0BA@NJECJBBM@slider?5s16?5full?$AA@	; `string'
PUBLIC	??_C@_0BA@KKFIOIJG@slider?5u16?5full?$AA@	; `string'
PUBLIC	??_C@_0P@LPLLDPN@slider?5s32?5low?$AA@		; `string'
PUBLIC	??_C@_0BA@KCOOMONB@slider?5s32?5high?$AA@	; `string'
PUBLIC	??_C@_0BA@GPCILCHC@slider?5s32?5full?$AA@	; `string'
PUBLIC	??_C@_06IFILMILK@0x?$CF04X?$AA@			; `string'
PUBLIC	??_C@_0P@OJGLNLD@slider?5s32?5hex?$AA@		; `string'
PUBLIC	??_C@_0P@MNJELKHK@slider?5u32?5low?$AA@		; `string'
PUBLIC	??_C@_0BA@NBPELHFL@slider?5u32?5high?$AA@	; `string'
PUBLIC	??_C@_0BA@BMDCMLPI@slider?5u32?5full?$AA@	; `string'
PUBLIC	??_C@_05LLAMLEHD@?$CFI64d?$AA@			; `string'
PUBLIC	??_C@_0P@IPJKHPEH@slider?5s64?5low?$AA@		; `string'
PUBLIC	??_C@_0BA@IJNOPFIP@slider?5s64?5high?$AA@	; `string'
PUBLIC	??_C@_0BA@EEBIIJCM@slider?5s64?5full?$AA@	; `string'
PUBLIC	??_C@_08GGAHJCGP@?$CFI64u?5ms?$AA@		; `string'
PUBLIC	??_C@_0P@EJPFHGMA@slider?5u64?5low?$AA@		; `string'
PUBLIC	??_C@_0BA@PKMEIMAF@slider?5u64?5high?$AA@	; `string'
PUBLIC	??_C@_0BA@DHACPAKG@slider?5u64?5full?$AA@	; `string'
PUBLIC	??_C@_0BB@CCICNGDA@slider?5float?5low?$AA@	; `string'
PUBLIC	??_C@_05DIPGONMJ@?$CF?410f?$AA@			; `string'
PUBLIC	??_C@_0BF@HMPMBMMM@slider?5float?5low?5log?$AA@	; `string'
PUBLIC	??_C@_0BC@EHBCAJLJ@slider?5float?5high?$AA@	; `string'
PUBLIC	??_C@_0BC@NEJIDBJN@slider?5double?5low?$AA@	; `string'
PUBLIC	??_C@_0BG@ILKDLGMD@slider?5double?5low?5log?$AA@ ; `string'
PUBLIC	??_C@_08NHECNFJD@?$CFe?5grams?$AA@		; `string'
PUBLIC	??_C@_0BD@OPIDMMAL@slider?5double?5high?$AA@	; `string'
PUBLIC	??_C@_0BC@BGMAPONL@Sliders?5?$CIreverse?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BC@BBCEKAEC@slider?5s8?5reverse?$AA@	; `string'
PUBLIC	??_C@_0BC@PJJBGKAB@slider?5u8?5reverse?$AA@	; `string'
PUBLIC	??_C@_0BD@LEKBJPO@slider?5s32?5reverse?$AA@	; `string'
PUBLIC	??_C@_0BD@OEHHLMBO@slider?5u32?5reverse?$AA@	; `string'
PUBLIC	??_C@_0BD@HHADMFPL@slider?5s64?5reverse?$AA@	; `string'
PUBLIC	??_C@_0BD@JIDOGABL@slider?5u64?5reverse?$AA@	; `string'
PUBLIC	??_C@_0BK@KLDNNLLJ@Widgets?1Data?5Types?1Inputs?$AA@ ; `string'
PUBLIC	??_C@_06HDCHCENJ@Inputs?$AA@			; `string'
PUBLIC	??_C@_0BC@HEADHDLD@Show?5step?5buttons?$AA@	; `string'
PUBLIC	??_C@_08HGJIKBLN@input?5s8?$AA@			; `string'
PUBLIC	??_C@_08HCBFNNAP@input?5u8?$AA@			; `string'
PUBLIC	??_C@_09DDGLPNGK@input?5s16?$AA@		; `string'
PUBLIC	??_C@_09BGAAKCLG@input?5u16?$AA@		; `string'
PUBLIC	??_C@_09FEIDOMAA@input?5s32?$AA@		; `string'
PUBLIC	??_C@_04JBNHMKCH@?$CF04X?$AA@			; `string'
PUBLIC	??_C@_0O@EKPJHNHM@input?5s32?5hex?$AA@		; `string'
PUBLIC	??_C@_09HBOILDNM@input?5u32?$AA@		; `string'
PUBLIC	??_C@_04JIMNDDED@?$CF08X?$AA@			; `string'
PUBLIC	??_C@_0O@IMJGHEPL@input?5u32?5hex?$AA@		; `string'
PUBLIC	??_C@_09EBCIJGN@input?5s64?$AA@			; `string'
PUBLIC	??_C@_09CBHJNGLB@input?5u64?$AA@		; `string'
PUBLIC	??_C@_0CA@DGAGEKBO@Widgets?1Multi?9component?5Widgets?$AA@ ; `string'
PUBLIC	??_C@_0BI@ELCHCBAK@Multi?9component?5Widgets?$AA@ ; `string'
PUBLIC	??_C@_0N@LDNFGIIE@input?5float2?$AA@		; `string'
PUBLIC	??_C@_0M@EHEBDGFJ@drag?5float2?$AA@		; `string'
PUBLIC	??_C@_0O@NIDINEOI@slider?5float2?$AA@		; `string'
PUBLIC	??_C@_0L@IKAEHOLD@input?5int2?$AA@		; `string'
PUBLIC	??_C@_09LOIDAOFJ@drag?5int2?$AA@		; `string'
PUBLIC	??_C@_0M@LEEOPKGD@slider?5int2?$AA@		; `string'
PUBLIC	??_C@_0M@FOFKAHBI@drag?5float3?$AA@		; `string'
PUBLIC	??_C@_0O@MBCDOFKJ@slider?5float3?$AA@		; `string'
PUBLIC	??_C@_0L@JDBPEPPC@input?5int3?$AA@		; `string'
PUBLIC	??_C@_09KHJIDPBI@drag?5int3?$AA@		; `string'
PUBLIC	??_C@_0M@KNFFMLCC@slider?5int3?$AA@		; `string'
PUBLIC	??_C@_0N@OFIPMPAC@input?5float4?$AA@		; `string'
PUBLIC	??_C@_0M@BBBLJBNP@drag?5float4?$AA@		; `string'
PUBLIC	??_C@_0O@IOGCHDGO@slider?5float4?$AA@		; `string'
PUBLIC	??_C@_0L@NMFONJDF@input?5int4?$AA@		; `string'
PUBLIC	??_C@_09OINJKJNP@drag?5int4?$AA@		; `string'
PUBLIC	??_C@_0M@OCBEFNOF@slider?5int4?$AA@		; `string'
PUBLIC	??_C@_0BJ@PJBGHCMF@Widgets?1Vertical?5Sliders?$AA@ ; `string'
PUBLIC	??_C@_0BB@EAIBMPEL@Vertical?5Sliders?$AA@	; `string'
PUBLIC	??_C@_05GFAJOEB@?$CD?$CDint?$AA@		; `string'
PUBLIC	??_C@_04BOPCFCPC@set1?$AA@			; `string'
PUBLIC	??_C@_03CPFCAGPK@?$CD?$CDv?$AA@			; `string'
PUBLIC	??_C@_04DFNPABDB@set2?$AA@			; `string'
PUBLIC	??_C@_04CMMEDAHA@set3?$AA@			; `string'
PUBLIC	??_C@_08OPMLCCJJ@?$CF?42f?6sec?$AA@		; `string'
PUBLIC	??_C@_0BG@MGGGFMDO@Widgets?1Drag?5and?5drop?$AA@ ; `string'
PUBLIC	??_C@_0O@NPGBLOMK@Drag?5and?5Drop?$AA@		; `string'
PUBLIC	??_C@_0CH@JCNBENHC@Widgets?1Drag?5and?5drop?1Standard?5w@ ; `string'
PUBLIC	??_C@_0CC@EPFBCHH@Drag?5and?5drop?5in?5standard?5widget@ ; `string'
PUBLIC	??_C@_0CF@BONKBAOB@You?5can?5drag?5from?5the?5color?5squa@ ; `string'
PUBLIC	??_C@_0CG@ELLGHBBE@Widgets?1Drag?5and?5drop?1Copy?9swap?5@ ; `string'
PUBLIC	??_C@_0CB@EBEBHJBF@Drag?5and?5drop?5to?5copy?1swap?5items@ ; `string'
PUBLIC	??_C@_04OPMHGHMB@Copy?$AA@			; `string'
PUBLIC	??_C@_04LCANPIEP@Move?$AA@			; `string'
PUBLIC	??_C@_04NGKMPNDN@Swap?$AA@			; `string'
PUBLIC	??_C@_0O@IBJLLBID@DND_DEMO_CELL?$AA@		; `string'
PUBLIC	??_C@_07CFHHFHOL@Copy?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_07EDLENMEH@Move?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_07MIGHAHCG@Swap?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_1EC@PPPBDLLH@?$AAp?$AAa?$AAy?$AAl?$AAo?$AAa?$AAd?$AA?9?$AA?$DO?$AAD?$AAa?$AAt?$AAa?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ@ ; `string'
PUBLIC	??_C@_0DF@EMDCONLH@Widgets?1Drag?5and?5Drop?1Drag?5to?5re@ ; `string'
PUBLIC	??_C@_0BP@DIEMEPOM@Drag?5to?5reorder?5items?5?$CIsimple?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0IF@PPHKDPML@We?5don?8t?5use?5the?5drag?5and?5drop?5a@ ; `string'
PUBLIC	??_C@_0DK@EFBKDNNE@Widgets?1Querying?5Item?5Status?5?$CIEd@ ; `string'
PUBLIC	??_C@_0DC@BNAEMHFC@Querying?5Item?5Status?5?$CIEdited?1Act@ ; `string'
PUBLIC	??_C@_0BD@MDBANHDM@Button?5?$CIw?1?5repeat?$CJ?$AA@ ; `string'
PUBLIC	??_C@_08HBKJHHBM@Checkbox?$AA@			; `string'
PUBLIC	??_C@_0M@LOEAKMNB@SliderFloat?$AA@		; `string'
PUBLIC	??_C@_09LIBCCLDO@InputText?$AA@			; `string'
PUBLIC	??_C@_0BD@GFPADHGG@InputTextMultiline?$AA@	; `string'
PUBLIC	??_C@_0L@BOKHHMCO@InputFloat?$AA@		; `string'
PUBLIC	??_C@_0M@CIKDMPID@InputFloat3?$AA@		; `string'
PUBLIC	??_C@_0L@KOIOKOAF@ColorEdit4?$AA@		; `string'
PUBLIC	??_C@_0L@CGGBDDBB@Selectable?$AA@		; `string'
PUBLIC	??_C@_08BLHBLMG@MenuItem?$AA@			; `string'
PUBLIC	??_C@_08IKFIGNAO@TreeNode?$AA@			; `string'
PUBLIC	??_C@_0BL@BMPDCCKO@TreeNode?5?$CIw?1?5double?9click?$CJ?$AA@ ; `string'
PUBLIC	??_C@_07OOFFCIDH@ListBox?$AA@			; `string'
PUBLIC	??_C@_09DBIMNOFJ@Item?5Type?$AA@		; `string'
PUBLIC	??_C@_0MD@CGCEADDG@Testing?5how?5various?5types?5of?5ite@ ; `string'
PUBLIC	??_C@_0O@FAHHGPEA@Item?5Disabled?$AA@		; `string'
PUBLIC	??_C@_0L@HEHKMKDF@ITEM?3?5Text?$AA@		; `string'
PUBLIC	??_C@_0N@KDFNBBDI@ITEM?3?5Button?$AA@		; `string'
PUBLIC	??_C@_0P@EJKLMMCP@ITEM?3?5Checkbox?$AA@		; `string'
PUBLIC	??_C@_0BC@HBFCOBHP@ITEM?3?5SliderFloat?$AA@	; `string'
PUBLIC	??_C@_0BA@HPKEIJD@ITEM?3?5InputText?$AA@	; `string'
PUBLIC	??_C@_0BJ@PFKMLMFF@ITEM?3?5InputTextMultiline?$AA@ ; `string'
PUBLIC	??_C@_0BB@LGHPELBI@ITEM?3?5InputFloat?$AA@	; `string'
PUBLIC	??_C@_0BC@OHLBICCN@ITEM?3?5InputFloat3?$AA@	; `string'
PUBLIC	??_C@_0BB@GFGJJDD@ITEM?3?5ColorEdit4?$AA@	; `string'
PUBLIC	??_C@_0BB@IOLJAECH@ITEM?3?5Selectable?$AA@	; `string'
PUBLIC	??_C@_0P@DJLFKAPF@ITEM?3?5MenuItem?$AA@		; `string'
PUBLIC	??_C@_0P@LCFKNGDN@ITEM?3?5TreeNode?$AA@		; `string'
PUBLIC	??_C@_0DH@BOEHHDDC@ITEM?3?5TreeNode?5w?1?5ImGuiTreeNodeF@ ; `string'
PUBLIC	??_C@_0M@JPKNJLGM@ITEM?3?5Combo?$AA@		; `string'
PUBLIC	??_C@_0O@DECMNPJF@ITEM?3?5ListBox?$AA@		; `string'
PUBLIC	??_C@_0CCH@GLOAKFDB@Return?5value?5?$DN?5?$CFd?6IsItemFocused?$CI@ ; `string'
PUBLIC	??_C@_0DD@FBICNHKB@w?1?5Hovering?5Delay?3?5None?5?$DN?5?$CFd?0?5Fa@ ; `string'
PUBLIC	??_C@_06OJAIHGIC@unused?$AA@			; `string'
PUBLIC	??_C@_0GH@DPFHCGHD@This?5widget?5is?5only?5here?5to?5be?5a@ ; `string'
PUBLIC	??_C@_0DG@IOBCHNLH@Widgets?1Querying?5Window?5Status?5?$CI@ ; `string'
PUBLIC	??_C@_0CO@GHICHHHH@Querying?5Window?5Status?5?$CIFocused?1@ ; `string'
PUBLIC	??_C@_0EF@HEEHLIKF@Embed?5everything?5inside?5a?5child?5@ ; `string'
PUBLIC	??_C@_0M@KCHHLPPE@outer_child?$AA@		; `string'
PUBLIC	??_C@_0BFL@IGCCLIMC@IsWindowFocused?$CI?$CJ?5?$DN?5?$CFd?6IsWindowF@ ; `string'
PUBLIC	??_C@_0BPL@PECCPJNF@IsWindowHovered?$CI?$CJ?5?$DN?5?$CFd?6IsWindowH@ ; `string'
PUBLIC	??_C@_05GPGNDLEK@child?$AA@			; `string'
PUBLIC	??_C@_0EB@JLFLAMNL@This?5is?5another?5child?5window?5for@ ; `string'
PUBLIC	??_C@_0DJ@OKFMLKNH@Hovered?1Active?5tests?5after?5Begin@ ; `string'
PUBLIC	??_C@_0BP@MFKNMHP@Title?5bar?5Hovered?1Active?5tests?$AA@ ; `string'
PUBLIC	??_C@_05LGELBCGM@Close?$AA@			; `string'
PUBLIC	??_C@_0HP@CKBHJIAM@IsItemHovered?$CI?$CJ?5after?5begin?5?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0BG@GMADNJLN@Widgets?1Disable?5Block?$AA@	; `string'
PUBLIC	??_C@_0O@LDGJBBHL@Disable?5block?$AA@		; `string'
PUBLIC	??_C@_0BN@CHNIACDP@Disable?5entire?5section?5above?$AA@ ; `string'
PUBLIC	??_C@_0EF@FEKDLMNJ@Demonstrate?5using?5BeginDisabled?$CI@ ; `string'
PUBLIC	??_C@_0BE@EPEANCCD@Widgets?1Text?5Filter?$AA@	; `string'
PUBLIC	??_C@_0M@MINJPGJD@Text?5Filter?$AA@		; `string'
PUBLIC	??_C@_0GC@CDJPIFKB@Not?5a?5widget?5per?9se?0?5but?5ImGuiTe@ ; `string'
PUBLIC	??_C@_0LH@KANOFBLE@Filter?5usage?3?6?5?5?$CC?$CC?5?5?5?5?5?5?5?5?5displ@ ; `string'
PUBLIC	??_C@_0BC@HPCLFOON@Filter?5?$CIinc?0?9exc?$CJ?$AA@ ; `string'
PUBLIC	??_C@_06BMDMCJJI@aaa1?4c?$AA@			; `string'
PUBLIC	??_C@_06OMOADLHL@bbb1?4c?$AA@			; `string'
PUBLIC	??_C@_06LMKLMKNK@ccc1?4c?$AA@			; `string'
PUBLIC	??_C@_08GHAOHEK@aaa2?4cpp?$AA@			; `string'
PUBLIC	??_C@_08IAJKMGPB@bbb2?4cpp?$AA@			; `string'
PUBLIC	??_C@_08PNDMNJJI@ccc2?4cpp?$AA@			; `string'
PUBLIC	??_C@_05NIADHECG@abc?4h?$AA@			; `string'
PUBLIC	??_C@_0N@OLAOGCLC@hello?0?5world?$AA@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA ; `ShowDemoWindowLayout'::`1'::__LINE__Var
PUBLIC	??_C@_06KMHOJANB@Layout?$AA@			; `string'
PUBLIC	??_C@_0BD@JPJJCKFL@Layout?5?$CG?5Scrolling?$AA@	; `string'
PUBLIC	??_C@_0BF@MLLFPDNJ@Layout?1Child?5windows?$AA@	; `string'
PUBLIC	??_C@_0O@CCLKLEED@Child?5windows?$AA@		; `string'
PUBLIC	??_C@_0GO@NHEDEMHF@Use?5child?5windows?5to?5begin?5into?5@ ; `string'
PUBLIC	??_C@_0BE@DLAKMPBE@Disable?5Mouse?5Wheel?$AA@	; `string'
PUBLIC	??_C@_0N@PGMIMFJH@Disable?5Menu?$AA@		; `string'
PUBLIC	??_C@_06FBHPMCA@ChildL?$AA@			; `string'
PUBLIC	??_C@_0BI@NIHPFDMO@?$CF04d?3?5scrollable?5region?$AA@ ; `string'
PUBLIC	??_C@_06NBFGMDPP@ChildR?$AA@			; `string'
PUBLIC	??_C@_04OHGLKFFN@?$CF03d?$AA@			; `string'
PUBLIC	??_C@_08JECJNGEB@Offset?5X?$AA@			; `string'
PUBLIC	??_C@_03PADCEAKC@Red?$AA@			; `string'
PUBLIC	??_C@_0N@NPCHMHMN@Some?5test?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0M@EMOADGAG@Hovered?3?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_0DB@EENCLFAL@Rect?5of?5child?5window?5is?3?5?$CI?$CF?40f?0?$CF@ ; `string'
PUBLIC	??_C@_0BF@OGICDKID@Layout?1Widgets?5Width?$AA@	; `string'
PUBLIC	??_C@_0O@PINHNBJ@Widgets?5Width?$AA@		; `string'
PUBLIC	??_C@_0BE@LMCIIFLK@Show?5indented?5items?$AA@	; `string'
PUBLIC	??_C@_0CE@LPIOKAFF@SetNextItemWidth?1PushItemWidth?$CI1@ ; `string'
PUBLIC	??_C@_0N@BANGKKCL@Fixed?5width?4?$AA@		; `string'
PUBLIC	??_C@_09IIOGPIBJ@float?$CD?$CD1b?$AA@		; `string'
PUBLIC	??_C@_0BF@IPGFKEDH@float?5?$CIindented?$CJ?$CD?$CD1b?$AA@ ; `string'
PUBLIC	??_C@_0CF@FHLMHJP@SetNextItemWidth?1PushItemWidth?$CI?9@ ; `string'
PUBLIC	??_C@_0BO@IEOHBCBL@Align?5to?5right?5edge?5minus?5100?$AA@ ; `string'
PUBLIC	??_C@_09KBINBFID@float?$CD?$CD2a?$AA@		; `string'
PUBLIC	??_C@_0BF@INCDBKGO@float?5?$CIindented?$CJ?$CD?$CD2b?$AA@ ; `string'
PUBLIC	??_C@_0EB@LHGGMOLL@SetNextItemWidth?1PushItemWidth?$CIG@ ; `string'
PUBLIC	??_C@_0EK@LHEEJHHB@Half?5of?5available?5width?4?6?$CI?$HO?5righ@ ; `string'
PUBLIC	??_C@_09KAEPHPLE@float?$CD?$CD3a?$AA@		; `string'
PUBLIC	??_C@_0BF@IMOBHAFJ@float?5?$CIindented?$CJ?$CD?$CD3b?$AA@ ; `string'
PUBLIC	??_C@_0EC@PNELNOAD@SetNextItemWidth?1PushItemWidth?$CI?9@ ; `string'
PUBLIC	??_C@_0BP@JKFCPAHG@Align?5to?5right?5edge?5minus?5half?$AA@ ; `string'
PUBLIC	??_C@_09KFAAGJDB@float?$CD?$CD4a?$AA@		; `string'
PUBLIC	??_C@_0BF@IJKOGGNM@float?5?$CIindented?$CJ?$CD?$CD4b?$AA@ ; `string'
PUBLIC	??_C@_0CJ@HIOADNAC@SetNextItemWidth?1PushItemWidth?$CI?9@ ; `string'
PUBLIC	??_C@_0BE@CLIHJLDF@Align?5to?5right?5edge?$AA@	; `string'
PUBLIC	??_C@_09LOBKLHLF@?$CD?$CDfloat5a?$AA@		; `string'
PUBLIC	??_C@_0BF@IIGMAMOL@float?5?$CIindented?$CJ?$CD?$CD5b?$AA@ ; `string'
PUBLIC	??_C@_0BP@OIAKENPD@Layout?1Basic?5Horizontal?5Layout?$AA@ ; `string'
PUBLIC	??_C@_0BI@MLGIMKHF@Basic?5Horizontal?5Layout?$AA@ ; `string'
PUBLIC	??_C@_0FA@GPJJJDFK@?$CIUse?5ImGui?3?3SameLine?$CI?$CJ?5to?5keep?5a@ ; `string'
PUBLIC	??_C@_0CI@JJPKKMMM@Layout?1Basic?5Horizontal?5Layout?1S@ ; `string'
PUBLIC	??_C@_0BB@CPONELNL@Two?5items?3?5Hello?$AA@	; `string'
PUBLIC	??_C@_0BE@BBDLDECN@More?5spacing?3?5Hello?$AA@	; `string'
PUBLIC	??_C@_0P@PEKJFFJL@Normal?5buttons?$AA@		; `string'
PUBLIC	??_C@_0M@IAINFGJF@Corniflower?$AA@		; `string'
PUBLIC	??_C@_0O@JIDOKED@Small?5buttons?$AA@		; `string'
PUBLIC	??_C@_0O@DOOOCPOJ@Like?5this?5one?$AA@		; `string'
PUBLIC	??_C@_0BN@FOPDMCKC@can?5fit?5within?5a?5text?5block?4?$AA@ ; `string'
PUBLIC	??_C@_0DG@PNPLOBCG@Layout?1Basic?5Horizontal?5Layout?1S@ ; `string'
PUBLIC	??_C@_07KDGBBGOD@Aligned?$AA@			; `string'
PUBLIC	??_C@_05EFIMCDIL@x?$DN150?$AA@			; `string'
PUBLIC	??_C@_05OJEOCJOL@x?$DN300?$AA@			; `string'
PUBLIC	??_C@_0CP@MGOPNFDK@Layout?1Basic?5Horizontal?5Layout?1S@ ; `string'
PUBLIC	??_C@_02IGABPKMB@My?$AA@			; `string'
PUBLIC	??_C@_06MNPBPLDE@Tailor?$AA@			; `string'
PUBLIC	??_C@_02HLOHLKJH@Is?$AA@			; `string'
PUBLIC	??_C@_04NKJFLIBG@Rich?$AA@			; `string'
PUBLIC	??_C@_01MMEEDKFM@X?$AA@				; `string'
PUBLIC	??_C@_01NFFPALBN@Y?$AA@				; `string'
PUBLIC	??_C@_01POHCFINO@Z?$AA@				; `string'
PUBLIC	??_C@_06OHPCMELK@Lists?3?$AA@			; `string'
PUBLIC	??_C@_0CF@BAJJENJB@Layout?1Basic?5Horizontal?5Layout?1D@ ; `string'
PUBLIC	??_C@_01FHEEJDEE@A?$AA@				; `string'
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	??_C@_0CP@EDHPDNEN@Layout?1Basic?5Horizontal?5Layout?1M@ ; `string'
PUBLIC	??_C@_0BB@EBMAGHCE@Manual?5wrapping?3?$AA@	; `string'
PUBLIC	??_C@_03ELMLMPLG@Box?$AA@			; `string'
PUBLIC	??_C@_0O@KBPNIDDB@Layout?1Groups?$AA@		; `string'
PUBLIC	??_C@_06LCLFDFOL@Groups?$AA@			; `string'
PUBLIC	??_C@_0NJ@BBEJCFPH@BeginGroup?$CI?$CJ?5basically?5locks?5the@ ; `string'
PUBLIC	??_C@_03GFCJIGAI@AAA?$AA@			; `string'
PUBLIC	??_C@_03FOPHMEHM@BBB?$AA@			; `string'
PUBLIC	??_C@_03POJCPIGP@CCC?$AA@			; `string'
PUBLIC	??_C@_03CJELEAJE@DDD?$AA@			; `string'
PUBLIC	??_C@_03IJCOHMIH@EEE?$AA@			; `string'
PUBLIC	??_C@_0BE@GCGPENCF@First?5group?5hovered?$AA@	; `string'
PUBLIC	??_C@_08NDEOOAHA@?$CD?$CDvalues?$AA@		; `string'
PUBLIC	??_C@_06DHJAPAEE@ACTION?$AA@			; `string'
PUBLIC	??_C@_08HBCMJOON@REACTION?$AA@			; `string'
PUBLIC	??_C@_0BC@NCAPIIPH@LEVERAGE?6BUZZWORD?$AA@	; `string'
PUBLIC	??_C@_04PPBEGPNI@List?$AA@			; `string'
PUBLIC	??_C@_08KLEPBNHL@Selected?$AA@			; `string'
PUBLIC	??_C@_0N@FODJADJE@Not?5Selected?$AA@		; `string'
PUBLIC	??_C@_0BP@BPEPNMPK@Layout?1Text?5Baseline?5Alignment?$AA@ ; `string'
PUBLIC	??_C@_0BI@DMCNFLHM@Text?5Baseline?5Alignment?$AA@ ; `string'
PUBLIC	??_C@_0P@FLJDDPLM@Text?5baseline?3?$AA@		; `string'
PUBLIC	??_C@_0MJ@CEINBEPI@This?5is?5testing?5the?5vertical?5ali@ ; `string'
PUBLIC	??_C@_0M@HEDLMKK@KO?5Blahblah?$AA@		; `string'
PUBLIC	??_C@_0BB@GBEAAIAC@Some?5framed?5item?$AA@	; `string'
PUBLIC	??_C@_0DE@PMNLFDAO@Baseline?5of?5button?5will?5look?5mis@ ; `string'
PUBLIC	??_C@_0M@LEJMPEFH@OK?5Blahblah?$AA@		; `string'
PUBLIC	??_C@_0FL@DLOHNEGO@We?5call?5AlignTextToFramePadding?$CI@ ; `string'
PUBLIC	??_C@_07FENKGLPN@TEST?$CD?$CD1?$AA@		; `string'
PUBLIC	??_C@_04OIKJMBFP@TEST?$AA@			; `string'
PUBLIC	??_C@_07HPPHDIDO@TEST?$CD?$CD2?$AA@		; `string'
PUBLIC	??_C@_0BM@CCJJPIAI@Text?5aligned?5to?5framed?5item?$AA@ ; `string'
PUBLIC	??_C@_07MDGCNPKG@Item?$CD?$CD1?$AA@		; `string'
PUBLIC	??_C@_04BGCMBJDA@Item?$AA@			; `string'
PUBLIC	??_C@_07OIEPIMGF@Item?$CD?$CD2?$AA@		; `string'
PUBLIC	??_C@_07PBFELNCE@Item?$CD?$CD3?$AA@		; `string'
PUBLIC	??_C@_0BB@IKLHLLAO@Multi?9line?5text?3?$AA@	; `string'
PUBLIC	??_C@_0O@LPFJLNGJ@One?6Two?6Three?$AA@		; `string'
PUBLIC	??_C@_0M@MEHCJFNA@Hello?6World?$AA@		; `string'
PUBLIC	??_C@_06JNLLJDDG@HOP?$CD?$CD1?$AA@		; `string'
PUBLIC	??_C@_06LGJGMAPF@HOP?$CD?$CD2?$AA@		; `string'
PUBLIC	??_C@_0M@OFIEFPON@Misc?5items?3?$AA@		; `string'
PUBLIC	??_C@_05FMIAGJLC@80x80?$AA@			; `string'
PUBLIC	??_C@_05OIMGOJDP@50x50?$AA@			; `string'
PUBLIC	??_C@_08DHDFAMNE@Button?$CI?$CJ?$AA@		; `string'
PUBLIC	??_C@_0O@DANAPFLN@SmallButton?$CI?$CJ?$AA@	; `string'
PUBLIC	??_C@_09JNECCGKE@Button?$CD?$CD1?$AA@		; `string'
PUBLIC	??_C@_07FHFCIGOP@Node?$CD?$CD1?$AA@		; `string'
PUBLIC	??_C@_09CCOCANBA@Item?5?$CFd?4?4?$AA@		; `string'
PUBLIC	??_C@_07HMHPNFCM@Node?$CD?$CD2?$AA@		; `string'
PUBLIC	??_C@_09LGGPHFGH@Button?$CD?$CD2?$AA@		; `string'
PUBLIC	??_C@_09KPHEEECG@Button?$CD?$CD3?$AA@		; `string'
PUBLIC	??_C@_0M@DABAODPF@Bullet?5text?$AA@		; `string'
PUBLIC	??_C@_04OKAPPFIB@Node?$AA@			; `string'
PUBLIC	??_C@_09OADFNCOB@Button?$CD?$CD4?$AA@		; `string'
PUBLIC	??_C@_0BB@PPJKDLIF@Layout?1Scrolling?$AA@	; `string'
PUBLIC	??_C@_09LFBMELOM@Scrolling?$AA@			; `string'
PUBLIC	??_C@_0BK@KKKEAAFD@Layout?1Scrolling?1Vertical?$AA@ ; `string'
PUBLIC	??_C@_0FE@KFLONGJI@Use?5SetScrollHereY?$CI?$CJ?5or?5SetScrol@ ; `string'
PUBLIC	??_C@_0L@ODNEMNHD@Decoration?$AA@		; `string'
PUBLIC	??_C@_05BFDCPAGB@Track?$AA@			; `string'
PUBLIC	??_C@_09GAMHFGFH@Item?5?$DN?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_06PDMOEKMO@?$CD?$CDitem?$AA@		; `string'
PUBLIC	??_C@_0O@EDOJIGBC@Scroll?5Offset?$AA@		; `string'
PUBLIC	??_C@_08DGGLGIAM@?$CL?$CF?40f?5px?$AA@		; `string'
PUBLIC	??_C@_05FFNMOAPG@?$CD?$CDoff?$AA@		; `string'
PUBLIC	??_C@_0O@CGNNKBMG@Scroll?5To?5Pos?$AA@		; `string'
PUBLIC	??_C@_0O@LJJDDGBB@X?1Y?5?$DN?5?$CF?40f?5px?$AA@	; `string'
PUBLIC	??_C@_05GFMCHKKE@?$CD?$CDpos?$AA@		; `string'
PUBLIC	??_C@_0BE@NILALFMA@?$CD?$CDVerticalScrolling?$AA@ ; `string'
PUBLIC	??_C@_03PGGAENPN@Top?$AA@			; `string'
PUBLIC	??_C@_03EOMKOHFF@25?$CF?$AA@			; `string'
PUBLIC	??_C@_06NOADDNNE@Center?$AA@			; `string'
PUBLIC	??_C@_03HJBEBHGH@75?$CF?$AA@			; `string'
PUBLIC	??_C@_06DDHCBBGN@Bottom?$AA@			; `string'
PUBLIC	??_C@_03FIKCJHKP@abc?$AA@			; `string'
PUBLIC	??_C@_09DKGDMKKF@?$CF?40f?1?$CF?40f?$AA@	; `string'
PUBLIC	??_C@_0BM@CLNONEPI@Layout?1Scrolling?1Horizontal?$AA@ ; `string'
PUBLIC	??_C@_0BDB@LNFKBNGF@Use?5SetScrollHereX?$CI?$CJ?5or?5SetScrol@ ; `string'
PUBLIC	??_C@_0BG@BEAADLOE@?$CD?$CDHorizontalScrolling?$AA@ ; `string'
PUBLIC	??_C@_04KPCPLBPL@Left?$AA@			; `string'
PUBLIC	??_C@_05DADPALEM@Right?$AA@			; `string'
PUBLIC	??_C@_0N@MJLHBHDH@?$CFs?6?$CF?40f?1?$CF?40f?$AA@ ; `string'
PUBLIC	??_C@_0CD@POIINEAC@Layout?1Scrolling?1Horizontal?5?$CImor@ ; `string'
PUBLIC	??_C@_0MM@GGDOLBND@Horizontal?5scrolling?5for?5a?5windo@ ; `string'
PUBLIC	??_C@_09PKEBEIDM@scrolling?$AA@			; `string'
PUBLIC	??_C@_08GLBPKMPD@FizzBuzz?$AA@			; `string'
PUBLIC	??_C@_04CEPGGBHI@Fizz?$AA@			; `string'
PUBLIC	??_C@_04MLLJCPJP@Buzz?$AA@			; `string'
PUBLIC	??_C@_02FODMEDOG@?$DM?$DM?$AA@			; `string'
PUBLIC	??_C@_0BB@HICDBOJF@Scroll?5from?5code?$AA@	; `string'
PUBLIC	??_C@_02GPIOPFAK@?$DO?$DO?$AA@			; `string'
PUBLIC	??_C@_0CK@KHHLOHPL@Show?5Horizontal?5contents?5size?5de@ ; `string'
PUBLIC	??_C@_0CF@OHGKBEFE@Horizontal?5contents?5size?5demo?5wi@ ; `string'
PUBLIC	??_C@_0DG@FFKEOKBG@Layout?1Scrolling?1Horizontal?5cont@ ; `string'
PUBLIC	??_C@_0LE@BCMFBNBD@Test?5of?5different?5widgets?5react?5@ ; `string'
PUBLIC	??_C@_0M@PCJBMDND@H?9scrollbar?$AA@		; `string'
PUBLIC	??_C@_0L@DIDHCLKE@Tree?5nodes?$AA@		; `string'
PUBLIC	??_C@_0N@HDFBIJDK@Text?5wrapped?$AA@		; `string'
PUBLIC	??_C@_07IBCCJKML@Columns?$AA@			; `string'
PUBLIC	??_C@_07CHLOJOEF@Tab?5bar?$AA@			; `string'
PUBLIC	??_C@_05GIMBDOHM@Child?$AA@			; `string'
PUBLIC	??_C@_0BG@GEDBKKBK@Explicit?5content?5size?$AA@	; `string'
PUBLIC	??_C@_0BL@EDCBBBDH@Scroll?5?$CF?41f?1?$CF?41f?5?$CF?41f?1?$CF?41f?$AA@ ; `string'
PUBLIC	??_C@_05NBKGABAK@?$CD?$CDcsx?$AA@		; `string'
PUBLIC	??_C@_0BK@GGAJDBIL@this?5is?5a?5300?9wide?5button?$AA@ ; `string'
PUBLIC	??_C@_0BE@HNGLJJLH@this?5is?5a?5tree?5node?$AA@	; `string'
PUBLIC	??_C@_0CC@FFNCLEGA@another?5one?5of?5those?5tree?5node?4?4@ ; `string'
PUBLIC	??_C@_0BD@GOEDKDLO@Some?5tree?5contents?$AA@	; `string'
PUBLIC	??_C@_0BB@LBMIMLJO@CollapsingHeader?$AA@	; `string'
PUBLIC	??_C@_0EH@ECONPGGJ@This?5text?5should?5automatically?5w@ ; `string'
PUBLIC	??_C@_07GIKBKH@Tables?3?$AA@			; `string'
PUBLIC	??_C@_05LCLENNFI@table?$AA@			; `string'
PUBLIC	??_C@_0L@CDOLGENO@Width?5?$CF?42f?$AA@		; `string'
PUBLIC	??_C@_08CJJOOHNL@Columns?3?$AA@			; `string'
PUBLIC	??_C@_05COLMCDPH@Hello?$AA@			; `string'
PUBLIC	??_C@_09DHLFJNGJ@OneOneOne?$AA@			; `string'
PUBLIC	??_C@_09BMOICMLJ@TwoTwoTwo?$AA@			; `string'
PUBLIC	??_C@_0BA@BGMNPICP@ThreeThreeThree?$AA@		; `string'
PUBLIC	??_C@_0N@GNNAMPMJ@FourFourFour?$AA@		; `string'
PUBLIC	??_C@_0BA@OCHNAOPI@Layout?1Clipping?$AA@	; `string'
PUBLIC	??_C@_08LLKICGJM@Clipping?$AA@			; `string'
PUBLIC	??_C@_04IAGNFIBA@size?$AA@			; `string'
PUBLIC	??_C@_0BL@MNBDPJCG@?$CIClick?5and?5drag?5to?5scroll?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CBB@PALAFPED@?$CILeft?$CJ?5Using?5ImGui?3?3PushClipRect@ ; `string'
PUBLIC	??_C@_08IJNEAHEL@?$CD?$CDcanvas?$AA@		; `string'
PUBLIC	??_C@_0BN@MKAJBHJO@Line?51?5hello?6Line?52?5clip?5me?$CB?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??ShowDemoWindowPopups@@YAXXZ@4JA ; `ShowDemoWindowPopups'::`1'::__LINE__Var
PUBLIC	??_C@_06ENDEIGLN@Popups?$AA@			; `string'
PUBLIC	??_C@_0BH@JODLIHDO@Popups?5?$CG?5Modal?5windows?$AA@ ; `string'
PUBLIC	??_C@_0O@LLGFJBMF@Popups?1Popups?$AA@		; `string'
PUBLIC	??_C@_0HO@LGMOGOO@When?5a?5popup?5is?5active?0?5it?5inhib@ ; `string'
PUBLIC	??_C@_05BKABPFFI@Bream?$AA@			; `string'
PUBLIC	??_C@_07BNGOACBO@Haddock?$AA@			; `string'
PUBLIC	??_C@_08OFLHLLIP@Mackerel?$AA@			; `string'
PUBLIC	??_C@_07DOCMJKHB@Pollock?$AA@			; `string'
PUBLIC	??_C@_08EGAMPFAB@Tilefish?$AA@			; `string'
PUBLIC	??_C@_08NNBGNINF@Select?4?4?$AA@		; `string'
PUBLIC	??_C@_0BA@GGCCCMJM@my_select_popup?$AA@		; `string'
PUBLIC	??_C@_06PHEAPGKB@?$DMNone?$DO?$AA@		; `string'
PUBLIC	??_C@_08IKEIPKBP@Aquarium?$AA@			; `string'
PUBLIC	??_C@_08NINPLAO@Toggle?4?4?$AA@			; `string'
PUBLIC	??_C@_0BA@LJBKGLLI@my_toggle_popup?$AA@		; `string'
PUBLIC	??_C@_08GMNJJNGG@Sub?9menu?$AA@			; `string'
PUBLIC	??_C@_08PPLGDLFG@Click?5me?$AA@			; `string'
PUBLIC	??_C@_0N@IODHFNG@Tooltip?5here?$AA@		; `string'
PUBLIC	??_C@_0BM@HJLGLIOD@I?5am?5a?5tooltip?5over?5a?5popup?$AA@ ; `string'
PUBLIC	??_C@_0O@NAJLJJDJ@Stacked?5Popup?$AA@		; `string'
PUBLIC	??_C@_0O@CMMIFNBD@another?5popup?$AA@		; `string'
PUBLIC	??_C@_0BI@DMMONLJF@I?5am?5the?5last?5one?5here?4?$AA@ ; `string'
PUBLIC	??_C@_0O@CEODEGMM@With?5a?5menu?4?4?$AA@	; `string'
PUBLIC	??_C@_0O@CMFGCCH@my_file_popup?$AA@		; `string'
PUBLIC	??_C@_04PBAHLACE@File?$AA@			; `string'
PUBLIC	??_C@_05JMHIMMIL@Dummy?$AA@			; `string'
PUBLIC	??_C@_0BC@DPOMEOMK@Hello?5from?5popup?$CB?$AA@	; `string'
PUBLIC	??_C@_0BJ@BLLJFPAH@This?5is?5a?5dummy?5button?4?4?$AA@ ; `string'
PUBLIC	??_C@_0BF@CBNGCKHJ@Popups?1Context?5menus?$AA@	; `string'
PUBLIC	??_C@_0O@EGPMCJBG@Context?5menus?$AA@		; `string'
PUBLIC	??_C@_0GC@JCPNKAKN@?$CCContext?$CC?5functions?5are?5simple?5h@ ; `string'
PUBLIC	??_C@_06EKAKPFJJ@Label1?$AA@			; `string'
PUBLIC	??_C@_06GBCHKGFK@Label2?$AA@			; `string'
PUBLIC	??_C@_06HIDMJHBL@Label3?$AA@			; `string'
PUBLIC	??_C@_06DHHNABNM@Label4?$AA@			; `string'
PUBLIC	??_C@_06COGGDAJN@Label5?$AA@			; `string'
PUBLIC	??_C@_0BH@BODNOCMP@This?5a?5popup?5for?5?$CC?$CFs?$CC?$CB?$AA@ ; `string'
PUBLIC	??_C@_0BK@PNAOOLFL@Right?9click?5to?5open?5popup?$AA@ ; `string'
PUBLIC	??_C@_0EJ@OBAEIHGO@Text?$CI?$CJ?5elements?5don?8t?5have?5stabl@ ; `string'
PUBLIC	??_C@_0CL@MINHGHEB@Value?5?$DN?5?$CF?43f?5?$DM?9?9?5?$CI1?$CJ?5right?9click@ ; `string'
PUBLIC	??_C@_08MOACKAAJ@my?5popup?$AA@			; `string'
PUBLIC	??_C@_0M@MLNNLOAO@Set?5to?5zero?$AA@		; `string'
PUBLIC	??_C@_09NJOBBCFG@Set?5to?5PI?$AA@		; `string'
PUBLIC	??_C@_07FGLEKONH@?$CD?$CDValue?$AA@		; `string'
PUBLIC	??_C@_0BN@BDAGDOIM@?$CI2?$CJ?5Or?5right?9click?5this?5text?$AA@ ; `string'
PUBLIC	??_C@_0BJ@DCOFNGHJ@?$CI3?$CJ?5Or?5click?5this?5button?$AA@ ; `string'
PUBLIC	??_C@_0HH@IOGIBFGK@Showcase?5using?5a?5popup?5ID?5linked@ ; `string'
PUBLIC	??_C@_0BE@BJGBOOKP@Button?3?5?$CFs?$CD?$CD?$CDButton?$AA@ ; `string'
PUBLIC	??_C@_0L@MIFJAGAG@Edit?5name?3?$AA@		; `string'
PUBLIC	??_C@_06PEDNKACM@?$CD?$CDedit?$AA@		; `string'
PUBLIC	??_C@_0BH@BPPDJDHF@?$CI?$DM?9?9?5right?9click?5here?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0O@OCELMHFF@Popups?1Modals?$AA@		; `string'
PUBLIC	??_C@_06BEBKNACN@Modals?$AA@			; `string'
PUBLIC	??_C@_0FC@FCFEEIDF@Modal?5windows?5are?5like?5popups?5bu@ ; `string'
PUBLIC	??_C@_08CPNCIMAF@Delete?4?4?$AA@		; `string'
PUBLIC	??_C@_07DCPPKMOD@Delete?$DP?$AA@		; `string'
PUBLIC	??_C@_0EO@GEGEJAML@All?5those?5beautiful?5files?5will?5b@ ; `string'
PUBLIC	??_C@_0BH@BGNANACB@Don?8t?5ask?5me?5next?5time?$AA@ ; `string'
PUBLIC	??_C@_02GIPFHKNO@OK?$AA@			; `string'
PUBLIC	??_C@_06FMBNCPDL@Cancel?$AA@			; `string'
PUBLIC	??_C@_0BB@NNACGNLC@Stacked?5modals?4?4?$AA@	; `string'
PUBLIC	??_C@_09DMLDOIOE@Stacked?51?$AA@		; `string'
PUBLIC	??_C@_0P@LCHDFKKN@Some?5menu?5item?$AA@		; `string'
PUBLIC	??_C@_0FG@FEJJJKAO@Hello?5from?5Stacked?5The?5First?6Usi@ ; `string'
PUBLIC	??_C@_05PEENBMOG@color?$AA@			; `string'
PUBLIC	??_C@_0BE@EOGCGODN@Add?5another?5modal?4?4?$AA@	; `string'
PUBLIC	??_C@_09BHJOLLCH@Stacked?52?$AA@		; `string'
PUBLIC	??_C@_0BP@CPFMAIJ@Hello?5from?5Stacked?5The?5Second?$CB?$AA@ ; `string'
PUBLIC	??_C@_0CF@IOOAIMEM@Popups?1Menus?5inside?5a?5regular?5wi@ ; `string'
PUBLIC	??_C@_0BO@EEOFHCMN@Menus?5inside?5a?5regular?5window?$AA@ ; `string'
PUBLIC	??_C@_0GB@PMDHHLNB@Below?5we?5are?5testing?5adding?5menu@ ; `string'
PUBLIC	??_C@_06GCLBOGOD@CTRL?$CLM?$AA@			; `string'
PUBLIC	??_C@_09PDGIKJJH@Menu?5item?$AA@		; `string'
PUBLIC	??_C@_0BN@MFBALFLF@Menu?5inside?5a?5regular?5window?$AA@ ; `string'
PUBLIC	??_C@_13COJANIEC@?$AA0?$AA?$AA@			; `string'
PUBLIC	??_C@_0BA@PNOLBFOJ@ImGuiTableFlags?$AA@		; `string'
PUBLIC	??_C@_0O@GDABACCD@Sizing?5Policy?$AA@		; `string'
PUBLIC	??_C@_03DKEJHHJP@?$CFs?3?$AA@			; `string'
PUBLIC	??_C@_09NLBHHOGA@_Disabled?$AA@			; `string'
PUBLIC	??_C@_0DC@GLEFNIIN@Master?5disable?5flag?5?$CIalso?5hide?5f@ ; `string'
PUBLIC	??_C@_0N@BKJKKNLB@_DefaultHide?$AA@		; `string'
PUBLIC	??_C@_0N@GDLDKICM@_DefaultSort?$AA@		; `string'
PUBLIC	??_C@_0O@LBJDIKPA@_WidthStretch?$AA@		; `string'
PUBLIC	??_C@_0M@ILFLIFOG@_WidthFixed?$AA@		; `string'
PUBLIC	??_C@_09BODCBGEL@_NoResize?$AA@			; `string'
PUBLIC	??_C@_0L@CPPLPFKF@_NoReorder?$AA@		; `string'
PUBLIC	??_C@_07ICLECFEI@_NoHide?$AA@			; `string'
PUBLIC	??_C@_07PNNHJBCM@_NoClip?$AA@			; `string'
PUBLIC	??_C@_07PLJNCANF@_NoSort?$AA@			; `string'
PUBLIC	??_C@_0BB@BJIHNDPG@_NoSortAscending?$AA@	; `string'
PUBLIC	??_C@_0BC@IGDJILJK@_NoSortDescending?$AA@	; `string'
PUBLIC	??_C@_0P@FAJFNLOA@_NoHeaderLabel?$AA@		; `string'
PUBLIC	??_C@_0P@FFBHDBOG@_NoHeaderWidth?$AA@		; `string'
PUBLIC	??_C@_0BF@BFMFKAGJ@_PreferSortAscending?$AA@	; `string'
PUBLIC	??_C@_0BG@OGIFEHDM@_PreferSortDescending?$AA@	; `string'
PUBLIC	??_C@_0O@IHCPMKPD@_IndentEnable?$AA@		; `string'
PUBLIC	??_C@_0BF@NGNGOPFH@Default?5for?5column?50?$AA@	; `string'
PUBLIC	??_C@_0P@NDAELIGC@_IndentDisable?$AA@		; `string'
PUBLIC	??_C@_0BG@CAABAJEB@Default?5for?5column?5?$DO0?$AA@ ; `string'
PUBLIC	??_C@_0L@HAGMFILL@_IsEnabled?$AA@		; `string'
PUBLIC	??_C@_0L@IICELPIB@_IsVisible?$AA@		; `string'
PUBLIC	??_C@_09MHNJAEMK@_IsSorted?$AA@			; `string'
PUBLIC	??_C@_0L@FBCLIIEB@_IsHovered?$AA@		; `string'
PUBLIC	?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA ; `ShowDemoWindowTables'::`1'::__LINE__Var
PUBLIC	??_C@_02BAABKJLB@?9?9?$AA@			; `string'
PUBLIC	??_C@_06KOKNHOLC@Tables?$AA@			; `string'
PUBLIC	??_C@_0BB@MJGPNNJD@Tables?5?$CG?5Columns?$AA@	; `string'
PUBLIC	??_C@_08JFCDBCPC@Open?5all?$AA@			; `string'
PUBLIC	??_C@_09JFADBGFP@Close?5all?$AA@		; `string'
PUBLIC	??_C@_0BJ@JLFJACII@Disable?5tree?5indentation?$AA@ ; `string'
PUBLIC	??_C@_0FC@FFIEPAOP@Disable?5the?5indenting?5of?5tree?5no@ ; `string'
PUBLIC	??_C@_0N@NCGMCGDE@Tables?1Basic?$AA@		; `string'
PUBLIC	??_C@_0FE@BMEOIPOH@Using?5TableNextRow?$CI?$CJ?5?$CL?5calling?5T@ ; `string'
PUBLIC	??_C@_06KDFPGKKJ@table1?$AA@			; `string'
PUBLIC	??_C@_0BB@IODOONAJ@Row?5?$CFd?5Column?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0EP@POKEAGN@Using?5TableNextRow?$CI?$CJ?5?$CL?5calling?5T@ ; `string'
PUBLIC	??_C@_06IIHCDJGK@table2?$AA@			; `string'
PUBLIC	??_C@_06PLKMNMNJ@Row?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_0O@HOFANGPE@Some?5contents?$AA@		; `string'
PUBLIC	??_C@_07MEKMPKJA@123?4456?$AA@			; `string'
PUBLIC	??_C@_0BAJ@LOLGBBOP@Only?5using?5TableNextColumn?$CI?$CJ?0?5wh@ ; `string'
PUBLIC	??_C@_06JBGJAICL@table3?$AA@			; `string'
PUBLIC	??_C@_0BL@DKPJPGIB@Tables?1Borders?0?5background?$AA@ ; `string'
PUBLIC	??_C@_0BE@HDDFNCPF@Borders?0?5background?$AA@	; `string'
PUBLIC	??_C@_0BG@FNKJINH@ImGuiTableFlags_RowBg?$AA@	; `string'
PUBLIC	??_C@_0BI@KLDEGJMI@ImGuiTableFlags_Borders?$AA@	; `string'
PUBLIC	??_C@_0JM@OCDLGALD@ImGuiTableFlags_Borders?6?5?$DN?5ImGui@ ; `string'
PUBLIC	??_C@_0BJ@KNLELLOG@ImGuiTableFlags_BordersH?$AA@ ; `string'
PUBLIC	??_C@_0BO@EFCOPFHN@ImGuiTableFlags_BordersOuterH?$AA@ ; `string'
PUBLIC	??_C@_0BO@GFLPLNDM@ImGuiTableFlags_BordersInnerH?$AA@ ; `string'
PUBLIC	??_C@_0BJ@HJPFIEDJ@ImGuiTableFlags_BordersV?$AA@ ; `string'
PUBLIC	??_C@_0BO@JBGPMKKC@ImGuiTableFlags_BordersOuterV?$AA@ ; `string'
PUBLIC	??_C@_0BO@LBPOICOD@ImGuiTableFlags_BordersInnerV?$AA@ ; `string'
PUBLIC	??_C@_0BN@IJKOMBIP@ImGuiTableFlags_BordersOuter?$AA@ ; `string'
PUBLIC	??_C@_0BN@HHGDDDPK@ImGuiTableFlags_BordersInner?$AA@ ; `string'
PUBLIC	??_C@_0P@EJGNBOGK@Cell?5contents?3?$AA@		; `string'
PUBLIC	??_C@_0L@GCOFDGJD@FillButton?$AA@		; `string'
PUBLIC	??_C@_0BA@OPBHLGMF@Display?5headers?$AA@	; `string'
PUBLIC	??_C@_0CA@DPINADJM@ImGuiTableFlags_NoBordersInBody?$AA@ ; `string'
PUBLIC	??_C@_0FA@EPKAHHBC@Disable?5vertical?5borders?5in?5colu@ ; `string'
PUBLIC	??_C@_03EHAPBBEA@One?$AA@			; `string'
PUBLIC	??_C@_03CJAPLBKL@Two?$AA@			; `string'
PUBLIC	??_C@_05OHMANGAP@Three?$AA@			; `string'
PUBLIC	??_C@_0M@MKBMKAAH@Hello?5?$CFd?0?$CFd?$AA@	; `string'
PUBLIC	??_C@_0BK@JBACCIOD@Tables?1Resizable?0?5stretch?$AA@ ; `string'
PUBLIC	??_C@_0BD@DEGBBBAF@Resizable?0?5stretch?$AA@	; `string'
PUBLIC	??_C@_0BK@EMJCIFOG@ImGuiTableFlags_Resizable?$AA@ ; `string'
PUBLIC	??_C@_0JI@HEDAGHBG@Using?5the?5_Resizable?5flag?5automa@ ; `string'
PUBLIC	??_C@_0BI@HIOAIGHO@Tables?1Resizable?0?5fixed?$AA@ ; `string'
PUBLIC	??_C@_0BB@PCKPFPON@Resizable?0?5fixed?$AA@	; `string'
PUBLIC	??_C@_0MI@DMACPCHA@Using?5_Resizable?5?$CL?5_SizingFixedF@ ; `string'
PUBLIC	??_C@_0BO@NGJMFDHH@ImGuiTableFlags_NoHostExtendX?$AA@ ; `string'
PUBLIC	??_C@_0BI@BCCHHGLN@Tables?1Resizable?0?5mixed?$AA@ ; `string'
PUBLIC	??_C@_0BB@JIGIKPCO@Resizable?0?5mixed?$AA@	; `string'
PUBLIC	??_C@_0MC@OIEBOKLD@Using?5TableSetupColumn?$CI?$CJ?5to?5alte@ ; `string'
PUBLIC	??_C@_07ENIDNHGB@Stretch?$AA@			; `string'
PUBLIC	??_C@_05OCBIINAK@Fixed?$AA@			; `string'
PUBLIC	??_C@_08NCNCPMHE@?$CFs?5?$CFd?0?$CFd?$AA@	; `string'
PUBLIC	??_C@_03LCPADOPD@FFF?$AA@			; `string'
PUBLIC	??_C@_0CL@HJEJDHOC@Tables?1Reorderable?0?5hideable?0?5wi@ ; `string'
PUBLIC	??_C@_0CE@KCIAIBPM@Reorderable?0?5hideable?0?5with?5head@ ; `string'
PUBLIC	??_C@_0GD@ICCOIMAN@Click?5and?5drag?5column?5headers?5to@ ; `string'
PUBLIC	??_C@_0BM@CEFJIGKC@ImGuiTableFlags_Reorderable?$AA@ ; `string'
PUBLIC	??_C@_0BJ@KDGOANFD@ImGuiTableFlags_Hideable?$AA@ ; `string'
PUBLIC	??_C@_0CL@IIFCHPBH@ImGuiTableFlags_NoBordersInBodyU@ ; `string'
PUBLIC	??_C@_0GK@KONLLEJN@Disable?5vertical?5borders?5in?5colu@ ; `string'
PUBLIC	??_C@_0M@PGLLGKEB@Fixed?5?$CFd?0?$CFd?$AA@	; `string'
PUBLIC	??_C@_0P@LGLCJPIM@Tables?1Padding?$AA@		; `string'
PUBLIC	??_C@_07DDDGKLAD@Padding?$AA@			; `string'
PUBLIC	??_C@_0BMB@HPBFLJOA@We?5often?5want?5outer?5padding?5acti@ ; `string'
PUBLIC	??_C@_0BK@HHEJGEBJ@ImGuiTableFlags_PadOuterX?$AA@ ; `string'
PUBLIC	??_C@_0EM@MKHAEMOD@Enable?5outer?9most?5padding?5?$CIdefau@ ; `string'
PUBLIC	??_C@_0BM@PMBOGJLP@ImGuiTableFlags_NoPadOuterX?$AA@ ; `string'
PUBLIC	??_C@_0FB@OFOCAPDE@Disable?5outer?9most?5padding?5?$CIdefa@ ; `string'
PUBLIC	??_C@_0BM@NMIPCBPO@ImGuiTableFlags_NoPadInnerX?$AA@ ; `string'
PUBLIC	??_C@_0IC@DEFBCLPE@Disable?5inner?5padding?5between?5co@ ; `string'
PUBLIC	??_C@_0N@IJLMIFHN@show_headers?$AA@		; `string'
PUBLIC	??_C@_0O@FKPNOHIF@table_padding?$AA@		; `string'
PUBLIC	??_C@_0L@OKGLPFJF@Avail?5?$CF?42f?$AA@		; `string'
PUBLIC	??_C@_0DG@CDDGEHMI@Setting?5style?4CellPadding?5to?5?$CI0?0@ ; `string'
PUBLIC	??_C@_0BF@GOPEKLPG@show_widget_frame_bg?$AA@	; `string'
PUBLIC	??_C@_0M@DKDDHLDB@CellPadding?$AA@		; `string'
PUBLIC	??_C@_0BA@PCAKHMNE@table_padding_2?$AA@		; `string'
PUBLIC	??_C@_07KGDBJGIN@edit?5me?$AA@			; `string'
PUBLIC	??_C@_06EHBBGIFL@?$CD?$CDcell?$AA@		; `string'
PUBLIC	??_C@_0BH@BDILLJNP@Tables?1Explicit?5widths?$AA@ ; `string'
PUBLIC	??_C@_0BA@MIEBIDIO@Sizing?5policies?$AA@	; `string'
PUBLIC	??_C@_07OBMDJLLM@Oh?5dear?$AA@			; `string'
PUBLIC	??_C@_08LBFBCFMB@BBBBBBBB?$AA@			; `string'
PUBLIC	??_C@_0N@OEOPFKK@CCCCCCCCCCCC?$AA@		; `string'
PUBLIC	??_C@_08IILCFNBD@Advanced?$AA@			; `string'
PUBLIC	??_C@_0JL@GIMGKJDP@This?5section?5allows?5you?5to?5inter@ ; `string'
PUBLIC	??_C@_0DO@GJMCID@Show?5width?$AAShort?5Text?$AALong?5Text?$AA@ ; `string'
PUBLIC	??_C@_08GBNJIMFP@Contents?$AA@			; `string'
PUBLIC	??_C@_0KK@ONILBNCL@Be?5mindful?5that?5using?5right?9alig@ ; `string'
PUBLIC	??_C@_0BO@FCJCGICG@ImGuiTableFlags_PreciseWidths?$AA@ ; `string'
PUBLIC	??_C@_0OP@KCFDFCBF@Disable?5distributing?5remainder?5w@ ; `string'
PUBLIC	??_C@_0BI@LGJFDPIB@ImGuiTableFlags_ScrollX?$AA@	; `string'
PUBLIC	??_C@_0BI@KPIOAOMA@ImGuiTableFlags_ScrollY?$AA@	; `string'
PUBLIC	??_C@_0BH@IJCBPJOC@ImGuiTableFlags_NoClip?$AA@	; `string'
PUBLIC	??_C@_04GOKPGOLB@long?$AA@			; `string'
PUBLIC	??_C@_08GKCNMOBP@longeeer?$AA@			; `string'
PUBLIC	??_C@_0CE@EHNPIEAF@Some?5?$CFs?5text?5?$CFd?0?$CFd?6Over?5two?5line@ ; `string'
PUBLIC	??_C@_07JBEDBOJM@W?3?5?$CF?41f?$AA@		; `string'
PUBLIC	??_C@_02IEBMKJDF@?$CD?$CD?$AA@			; `string'
PUBLIC	??_C@_0CJ@GCIECJKE@Tables?1Vertical?5scrolling?0?5with?5@ ; `string'
PUBLIC	??_C@_0CC@BKCLIGGC@Vertical?5scrolling?0?5with?5clippin@ ; `string'
PUBLIC	??_C@_0MD@ODEEHCKN@Here?5we?5activate?5ScrollY?0?5which?5@ ; `string'
PUBLIC	??_C@_0O@BKJDKFL@table_scrolly?$AA@		; `string'
PUBLIC	??_C@_0BM@FLMIBINL@Tables?1Horizontal?5scrolling?$AA@ ; `string'
PUBLIC	??_C@_0BF@MOJGBNK@Horizontal?5scrolling?$AA@	; `string'
PUBLIC	??_C@_0BJM@LFAMMBOC@When?5ScrollX?5is?5enabled?0?5the?5def@ ; `string'
PUBLIC	??_C@_0M@CFPPLGBE@freeze_cols?$AA@		; `string'
PUBLIC	??_C@_0M@GIAMEELH@freeze_rows?$AA@		; `string'
PUBLIC	??_C@_0O@BILCALBK@table_scrollx?$AA@		; `string'
PUBLIC	??_C@_06GCNNJOIC@Line?5?$CD?$AA@		; `string'
PUBLIC	??_C@_04MCBIPDJB@Four?$AA@			; `string'
PUBLIC	??_C@_04OALGJGIC@Five?$AA@			; `string'
PUBLIC	??_C@_03KHODIDPO@Six?$AA@			; `string'
PUBLIC	??_C@_07GMIONID@Line?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_0BC@OMMFFCFF@Hello?5world?5?$CFd?0?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BC@HLNLGDMF@Stretch?5?$CL?5ScrollX?$AA@	; `string'
PUBLIC	??_C@_0BBE@ODLBHPGG@Showcase?5using?5Stretch?5columns?5?$CL@ ; `string'
PUBLIC	??_C@_06FFLMLEAB@flags3?$AA@			; `string'
PUBLIC	??_C@_04GGBPDDBN@?$CF?41f?$AA@			; `string'
PUBLIC	??_C@_0M@BJNMEEJO@inner_width?$AA@		; `string'
PUBLIC	??_C@_0BF@LDBFKPOJ@Tables?1Columns?5flags?$AA@	; `string'
PUBLIC	??_C@_0O@INJHOPKF@Columns?5flags?$AA@		; `string'
PUBLIC	??_C@_0BP@MNOKCEIF@table_columns_flags_checkboxes?$AA@ ; `string'
PUBLIC	??_C@_04FBKCMAJG@?8?$CFs?8?$AA@			; `string'
PUBLIC	??_C@_0N@FHGGFOEB@Input?5flags?3?$AA@		; `string'
PUBLIC	??_C@_0O@OFGIHDEK@Output?5flags?3?$AA@		; `string'
PUBLIC	??_C@_0BE@CEBHJEEC@table_columns_flags?$AA@	; `string'
PUBLIC	??_C@_08ELEEDBE@Indented?$AA@			; `string'
PUBLIC	??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_0BG@NGCMFIBP@Tables?1Columns?5widths?$AA@	; `string'
PUBLIC	??_C@_0P@KJHINHOE@Columns?5widths?$AA@		; `string'
PUBLIC	??_C@_0DB@BFOOEOFP@Using?5TableSetupColumn?$CI?$CJ?5to?5setu@ ; `string'
PUBLIC	??_C@_03OHDNLOHO@one?$AA@			; `string'
PUBLIC	??_C@_03IJDNBOJF@two?$AA@			; `string'
PUBLIC	??_C@_05OAGMNDDJ@three?$AA@			; `string'
PUBLIC	??_C@_0L@JJDDAIH@?$CIw?3?5?$CF5?41f?$CJ?$AA@	; `string'
PUBLIC	??_C@_0LH@CELOBIGN@Using?5TableSetupColumn?$CI?$CJ?5to?5setu@ ; `string'
PUBLIC	??_C@_0CF@HAPNKCNF@ImGuiTableFlags_NoKeepColumnsVis@ ; `string'
PUBLIC	??_C@_0BF@FIKDGFFI@Tables?1Nested?5tables?$AA@	; `string'
PUBLIC	??_C@_0O@GGCBCFBE@Nested?5tables?$AA@		; `string'
PUBLIC	??_C@_0DN@GIHJANOI@This?5demonstrates?5embedding?5a?5ta@ ; `string'
PUBLIC	??_C@_0O@BCBAIFJC@table_nested1?$AA@		; `string'
PUBLIC	??_C@_02KOKAPHOJ@A0?$AA@			; `string'
PUBLIC	??_C@_02LHLLMGKI@A1?$AA@			; `string'
PUBLIC	??_C@_08NBKIDHKC@A0?5Row?50?$AA@		; `string'
PUBLIC	??_C@_0O@DJDNNGFB@table_nested2?$AA@		; `string'
PUBLIC	??_C@_02KMOGEJLA@B0?$AA@			; `string'
PUBLIC	??_C@_02LFPNHIPB@B1?$AA@			; `string'
PUBLIC	??_C@_08OICFALGH@B0?5Row?50?$AA@		; `string'
PUBLIC	??_C@_08CEIPALPJ@B1?5Row?50?$AA@		; `string'
PUBLIC	??_C@_08PBDODKCG@B0?5Row?51?$AA@		; `string'
PUBLIC	??_C@_08DNJEDKLI@B1?5Row?51?$AA@		; `string'
PUBLIC	??_C@_08BNACDHDM@A1?5Row?50?$AA@		; `string'
PUBLIC	??_C@_08MILDAGOD@A0?5Row?51?$AA@		; `string'
PUBLIC	??_C@_08EBJAGHN@A1?5Row?51?$AA@			; `string'
PUBLIC	??_C@_0BC@JNEADBDA@Tables?1Row?5height?$AA@	; `string'
PUBLIC	??_C@_0L@CGNGNJMG@Row?5height?$AA@		; `string'
PUBLIC	??_C@_0BCL@DDLHCPHA@You?5can?5pass?5a?5?8min_row_height?8?5@ ; `string'
PUBLIC	??_C@_0BB@OGGECGJA@table_row_height?$AA@	; `string'
PUBLIC	??_C@_0BG@PBGJBMCG@min_row_height?5?$DN?5?$CF?42f?$AA@ ; `string'
PUBLIC	??_C@_0BC@IKJBKNNA@Tables?1Outer?5size?$AA@	; `string'
PUBLIC	??_C@_0L@DBAHEFCG@Outer?5size?$AA@		; `string'
PUBLIC	??_C@_0CH@GEPJHBOA@Using?5NoHostExtendX?5and?5NoHostEx@ ; `string'
PUBLIC	??_C@_0JJ@MNEKIKBK@Make?5outer?5width?5auto?9fit?5to?5col@ ; `string'
PUBLIC	??_C@_0BO@MPIHGCDG@ImGuiTableFlags_NoHostExtendY?$AA@ ; `string'
PUBLIC	??_C@_0MH@EOAMIMDE@Make?5outer?5height?5stop?5exactly?5a@ ; `string'
PUBLIC	??_C@_0L@PAJCHPDH@Cell?5?$CFd?0?$CFd?$AA@	; `string'
PUBLIC	??_C@_0BF@KMHJAJHG@Using?5explicit?5size?3?$AA@	; `string'
PUBLIC	??_C@_0BI@OPNKMFLE@Tables?1Background?5color?$AA@ ; `string'
PUBLIC	??_C@_0BB@GFJFBMCH@Background?5color?$AA@	; `string'
PUBLIC	??_C@_0FN@IEBFCIOP@ImGuiTableFlags_RowBg?5automatica@ ; `string'
PUBLIC	??_C@_0BD@FFKBLHFP@None?$AARed?$AAGradient?$AA?$AA@ ; `string'
PUBLIC	??_C@_0M@JEHONGHH@row?5bg?5type?$AA@		; `string'
PUBLIC	??_C@_0P@DAIHOKO@RowBg0?$AARowBg1?$AA?$AA@	; `string'
PUBLIC	??_C@_0O@DFMNKCIK@row?5bg?5target?$AA@		; `string'
PUBLIC	??_C@_0FN@LEKMPDJD@Target?5RowBg0?5to?5override?5the?5al@ ; `string'
PUBLIC	??_C@_0L@DAKPLPKA@None?$AABlue?$AA?$AA@		; `string'
PUBLIC	??_C@_0N@GNMKPIGH@cell?5bg?5type?$AA@		; `string'
PUBLIC	??_C@_0CI@GJIGBOCB@We?5are?5colorizing?5cells?5to?5B1?9?$DOC@ ; `string'
PUBLIC	??_C@_1EK@GEJGPOKK@?$AAr?$AAo?$AAw?$AA_?$AAb?$AAg?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAo?$AAw?$AA_?$AAb?$AAg?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5@ ; `string'
PUBLIC	??_C@_1FC@HBJACPON@?$AAr?$AAo?$AAw?$AA_?$AAb?$AAg?$AA_?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAo?$AAw?$AA_?$AAb?$AAg?$AA_?$AAt?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1EO@JOPKKHHI@?$AAc?$AAe?$AAl?$AAl?$AA_?$AAb?$AAg?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AAe?$AAl?$AAl?$AA_?$AAb?$AAg?$AA_?$AAt?$AAy?$AAp@ ; `string'
PUBLIC	??_C@_04GJDJEMBE@?$CFc?$CFc?$AA@		; `string'
PUBLIC	??_C@_0BB@LHIHCMOK@Tables?1Tree?5view?$AA@	; `string'
PUBLIC	??_C@_09CKCINJFP@Tree?5view?$AA@		; `string'
PUBLIC	??_C@_05FLIJPOAM@3ways?$AA@			; `string'
PUBLIC	??_C@_04FABLJDN@Name?$AA@			; `string'
PUBLIC	??_C@_04EBKMHHBE@Size?$AA@			; `string'
PUBLIC	??_C@_04KOACHJEN@Type?$AA@			; `string'
PUBLIC	??_C@_0BC@CHHDIFEC@Tables?1Item?5width?$AA@	; `string'
PUBLIC	??_C@_0L@JMOFGNLE@Item?5width?$AA@		; `string'
PUBLIC	??_C@_0MP@KOFCKOGB@Showcase?5using?5PushItemWidth?$CI?$CJ?5a@ ; `string'
PUBLIC	??_C@_0BB@DDAHLBBM@table_item_width?$AA@	; `string'
PUBLIC	??_C@_05KJDGBEEG@small?$AA@			; `string'
PUBLIC	??_C@_04GBGPFKGN@half?$AA@			; `string'
PUBLIC	??_C@_0M@FKJABAHD@right?9align?$AA@		; `string'
PUBLIC	??_C@_06OBIFBAPK@float0?$AA@			; `string'
PUBLIC	??_C@_06PIJOCBLL@float1?$AA@			; `string'
PUBLIC	??_C@_08GEFDGCHL@?$CD?$CDfloat2?$AA@		; `string'
PUBLIC	??_C@_0BG@INIBDOJH@Tables?1Custom?5headers?$AA@	; `string'
PUBLIC	??_C@_0P@PCNFLBGM@Custom?5headers?$AA@		; `string'
PUBLIC	??_C@_0BF@JGHIMJPE@table_custom_headers?$AA@	; `string'
PUBLIC	??_C@_0L@PLJPMHBK@?$CD?$CDcheckall?$AA@		; `string'
PUBLIC	??_C@_0BF@HIHOGJFK@Tables?1Context?5menus?$AA@	; `string'
PUBLIC	??_C@_0MD@CMIPBCGH@By?5default?0?5right?9clicking?5over?5@ ; `string'
PUBLIC	??_C@_0CC@DCEKKFEJ@ImGuiTableFlags_ContextMenuInBod@ ; `string'
PUBLIC	??_C@_0BD@GAEOPLMF@table_context_menu?$AA@	; `string'
PUBLIC	??_C@_0IN@GBJFOLPI@Demonstrate?5mixing?5table?5context@ ; `string'
PUBLIC	??_C@_0BF@BGHCFFCN@table_context_menu_2?$AA@	; `string'
PUBLIC	??_C@_0DB@KMDIMPEI@This?5is?5the?5popup?5for?5Button?$CI?$CC?4?4@ ; `string'
PUBLIC	??_C@_07FAGDPJOI@MyPopup?$AA@			; `string'
PUBLIC	??_C@_0DP@GEHELPPM@This?5is?5a?5custom?5popup?5for?5unuse@ ; `string'
PUBLIC	??_C@_0CF@KGFMOBAJ@This?5is?5a?5custom?5popup?5for?5Colum@ ; `string'
PUBLIC	??_C@_0BD@JLLLEHJI@Hovered?5column?3?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BI@EDLGPCJF@Tables?1Synced?5instances?$AA@ ; `string'
PUBLIC	??_C@_0BB@MJPJCLAG@Synced?5instances?$AA@	; `string'
PUBLIC	??_C@_0GC@BAAOPNDB@Multiple?5tables?5with?5the?5same?5id@ ; `string'
PUBLIC	??_C@_0BA@PHDCMLKN@Synced?5Table?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_05LFBINIGO@Table?$AA@			; `string'
PUBLIC	??_C@_0N@CLLFLFPN@this?5cell?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0P@NNGNJFDG@Tables?1Sorting?$AA@		; `string'
PUBLIC	??_C@_07FIOJKBLJ@Sorting?$AA@			; `string'
PUBLIC	??_C@_0BK@COJNFFHG@ImGuiTableFlags_SortMulti?$AA@ ; `string'
PUBLIC	??_C@_0JD@OJLOANPI@When?5sorting?5is?5enabled?3?5hold?5sh@ ; `string'
PUBLIC	??_C@_0BN@MANCMDD@ImGuiTableFlags_SortTristate?$AA@ ; `string'
PUBLIC	??_C@_0IC@CNBEEKGB@When?5sorting?5is?5enabled?3?5allow?5n@ ; `string'
PUBLIC	??_C@_0O@DBCCONDP@table_sorting?$AA@		; `string'
PUBLIC	??_C@_02OLOABKKD@ID?$AA@			; `string'
PUBLIC	??_C@_06PMAGBHAK@Action?$AA@			; `string'
PUBLIC	??_C@_08GACJPEFO@Quantity?$AA@			; `string'
PUBLIC	??_C@_04OHJIHAFH@None?$AA@			; `string'
PUBLIC	??_C@_0BA@PFDAEHJG@Tables?1Advanced?$AA@	; `string'
PUBLIC	??_C@_0M@IPDIIBIL@SmallButton?$AA@		; `string'
PUBLIC	??_C@_0BG@GEMFLDEN@Selectable?5?$CIspan?5row?$CJ?$AA@ ; `string'
PUBLIC	??_C@_07KHIHFBFN@Options?$AA@			; `string'
PUBLIC	??_C@_09DKFIFAAE@Features?3?$AA@		; `string'
PUBLIC	??_C@_0BJ@IHBAKALC@ImGuiTableFlags_Sortable?$AA@ ; `string'
PUBLIC	??_C@_0CA@KBDPDJDH@ImGuiTableFlags_NoSavedSettings?$AA@ ; `string'
PUBLIC	??_C@_0N@JCNJHPJM@Decorations?3?$AA@		; `string'
PUBLIC	??_C@_07NCAJGFPC@Sizing?3?$AA@			; `string'
PUBLIC	??_C@_0HH@KPNOAHGK@In?5the?5Advanced?5demo?5we?5override@ ; `string'
PUBLIC	??_C@_0CH@IHCAENCE@Only?5available?5if?5ScrollX?5is?5dis@ ; `string'
PUBLIC	??_C@_0LK@OOMEMHDH@Disable?5clipping?5rectangle?5for?5e@ ; `string'
PUBLIC	??_C@_08LMJDLJGI@Padding?3?$AA@			; `string'
PUBLIC	??_C@_0L@IMKAGMGB@Scrolling?3?$AA@		; `string'
PUBLIC	??_C@_08JHEMDMPA@Sorting?3?$AA@			; `string'
PUBLIC	??_C@_06JHAFDDDM@Other?3?$AA@			; `string'
PUBLIC	??_C@_0BC@OGOBPDEF@show_wrapped_text?$AA@	; `string'
PUBLIC	??_C@_0M@OOHBCMON@?$CD?$CDOuterSize?$AA@	; `string'
PUBLIC	??_C@_0L@ENOPHFOF@outer_size?$AA@		; `string'
PUBLIC	??_C@_0BIB@EGFLOKNO@If?5scrolling?5is?5disabled?5?$CIScroll@ ; `string'
PUBLIC	??_C@_0CC@HLDPMJL@inner_width?5?$CIwhen?5ScrollX?5active@ ; `string'
PUBLIC	??_C@_0P@KEOGDMAF@row_min_height?$AA@		; `string'
PUBLIC	??_C@_0CH@KLLECOCH@Specify?5height?5of?5the?5Selectable@ ; `string'
PUBLIC	??_C@_0M@NCHDHPIM@items_count?$AA@		; `string'
PUBLIC	??_C@_0BK@DIOLBOIM@items_type?5?$CIfirst?5column?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0P@IMAALAEK@table_advanced?$AA@		; `string'
PUBLIC	??_C@_0M@OHKMKKDH@Description?$AA@		; `string'
PUBLIC	??_C@_06FHBILLDG@Hidden?$AA@			; `string'
PUBLIC	??_C@_04LEKIAAHM@Chop?$AA@			; `string'
PUBLIC	??_C@_03HADHJFAJ@Eat?$AA@			; `string'
PUBLIC	??_C@_0BL@BHBHGIGI@Lorem?5ipsum?5dolor?5sit?5amet?$AA@ ; `string'
PUBLIC	??_C@_04GCLJABMA@1234?$AA@			; `string'
PUBLIC	??_C@_0O@CFGEHKMC@Debug?5details?$AA@		; `string'
PUBLIC	??_C@_0CA@CHDNACKG@?3?5DrawCmd?3?5?$CL?$CFd?5?$CIin?5same?5window?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0DO@LNHNLFPF@?3?5DrawCmd?3?5?$CL?$CFd?5?$CIin?5child?5window?$CJ@ ; `string'
PUBLIC	?__LINE__Var@?0??ShowDemoWindowColumns@@YAXXZ@4JA ; `ShowDemoWindowColumns'::`1'::__LINE__Var
PUBLIC	??_C@_0BF@EOLLCEHP@Columns?5?$CIlegacy?5API?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BD@KMNMCONG@Legacy?5Columns?5API?$AA@	; `string'
PUBLIC	??_C@_0FH@MGFHBBFF@Columns?$CI?$CJ?5is?5an?5old?5API?$CB?5Prefer?5@ ; `string'
PUBLIC	??_C@_0BL@NBCJCENH@Columns?5?$CIlegacy?5API?$CJ?1Basic?$AA@ ; `string'
PUBLIC	??_C@_0BA@KGDHMKCI@Without?5border?3?$AA@	; `string'
PUBLIC	??_C@_0L@GGDPAOBO@mycolumns3?$AA@		; `string'
PUBLIC	??_C@_0N@IEPPLKGA@With?5border?3?$AA@		; `string'
PUBLIC	??_C@_09IGOFLFMM@mycolumns?$AA@			; `string'
PUBLIC	??_C@_04HMIIHGGM@Path?$AA@			; `string'
PUBLIC	??_C@_07BPEJBMFM@Hovered?$AA@			; `string'
PUBLIC	??_C@_09MIFGPDGD@?1path?1one?$AA@		; `string'
PUBLIC	??_C@_09KGFGFDII@?1path?1two?$AA@		; `string'
PUBLIC	??_C@_0M@BHGNKNGD@?1path?1three?$AA@		; `string'
PUBLIC	??_C@_0BN@OHIFMDLO@Columns?5?$CIlegacy?5API?$CJ?1Borders?$AA@ ; `string'
PUBLIC	??_C@_07PJFMDFHH@Borders?$AA@			; `string'
PUBLIC	??_C@_0L@NLMHJDCE@?$CFd?5columns?$AA@		; `string'
PUBLIC	??_C@_0BA@EIBKBIKG@?$CD?$CDcolumns_count?$AA@	; `string'
PUBLIC	??_C@_0L@LMMKHPOB@horizontal?$AA@		; `string'
PUBLIC	??_C@_08NEOMLJGJ@vertical?$AA@			; `string'
PUBLIC	??_C@_06CBJCAPLI@?$CFc?$CFc?$CFc?$AA@		; `string'
PUBLIC	??_C@_0M@LBGPBMDK@Offset?5?$CF?42f?$AA@		; `string'
PUBLIC	??_C@_0CB@CDDJNDCG@Long?5text?5that?5is?5likely?5to?5clip@ ; `string'
PUBLIC	??_C@_0CB@BCLMDBFI@Columns?5?$CIlegacy?5API?$CJ?1Mixed?5items@ ; `string'
PUBLIC	??_C@_0M@CEFNMID@Mixed?5items?$AA@		; `string'
PUBLIC	??_C@_05IPHDHIPP@mixed?$AA@			; `string'
PUBLIC	??_C@_05OHAOKMNF@ImGui?$AA@			; `string'
PUBLIC	??_C@_03FAAAOPJM@red?$AA@			; `string'
PUBLIC	??_C@_0BE@OADKLHKC@An?5extra?5line?5here?4?$AA@	; `string'
PUBLIC	??_C@_04OBGPFBCN@blue?$AA@			; `string'
PUBLIC	??_C@_0L@CDAKMJEM@Category?5A?$AA@		; `string'
PUBLIC	??_C@_0P@CNBMJDEI@Blah?5blah?5blah?$AA@		; `string'
PUBLIC	??_C@_0L@ICHJKIP@Category?5B?$AA@		; `string'
PUBLIC	??_C@_0L@BBDMKLMO@Category?5C?$AA@		; `string'
PUBLIC	??_C@_0CD@OAPEDJDK@Columns?5?$CIlegacy?5API?$CJ?1Word?9wrappi@ ; `string'
PUBLIC	??_C@_0O@FMIDKLNC@Word?9wrapping?$AA@		; `string'
PUBLIC	??_C@_0O@JBOHNDAK@word?9wrapping?$AA@		; `string'
PUBLIC	??_C@_0CN@PEHKNKIL@The?5quick?5brown?5fox?5jumps?5over?5t@ ; `string'
PUBLIC	??_C@_0L@BOIODOOK@Hello?5Left?$AA@		; `string'
PUBLIC	??_C@_0M@FKDOIKDB@Hello?5Right?$AA@		; `string'
PUBLIC	??_C@_0CK@DPADPAMP@Columns?5?$CIlegacy?5API?$CJ?1Horizontal?5@ ; `string'
PUBLIC	??_C@_0BF@EDLEGCAK@Horizontal?5Scrolling?$AA@	; `string'
PUBLIC	??_C@_0BC@OPBMFBNO@?$CD?$CDScrollingRegion?$AA@	; `string'
PUBLIC	??_C@_0BF@OFLPNIGP@Line?5?$CFd?5Column?5?$CFd?4?4?4?$AA@ ; `string'
PUBLIC	??_C@_0BK@FPOKBMNL@Columns?5?$CIlegacy?5API?$CJ?1Tree?$AA@ ; `string'
PUBLIC	??_C@_04GDOOJPNH@Tree?$AA@			; `string'
PUBLIC	??_C@_04KCCPLAND@tree?$AA@			; `string'
PUBLIC	??_C@_06NAFIGPDO@Node?$CFd?$AA@			; `string'
PUBLIC	??_C@_0O@DCLBKAFC@Node?5contents?$AA@		; `string'
PUBLIC	??_C@_09NGNKJEEB@Node?$CFd?4?$CFd?$AA@		; `string'
PUBLIC	??_C@_0BD@MJPJLCIK@Even?5more?5contents?$AA@	; `string'
PUBLIC	??_C@_0P@LKPCNPLG@Tree?5in?5column?$AA@		; `string'
PUBLIC	??_C@_0CM@HCLJNHNJ@The?5quick?5brown?5fox?5jumps?5over?5t@ ; `string'
PUBLIC	?__LINE__Var@?0??ShowDemoWindowInputs@@YAXXZ@4JA ; `ShowDemoWindowInputs'::`1'::__LINE__Var
PUBLIC	??_C@_0P@EJPGNOEJ@Inputs?5?$CG?5Focus?$AA@	; `string'
PUBLIC	??_C@_0BG@OJCNILBN@Inputs?5?$CG?5Focus?1Inputs?$AA@ ; `string'
PUBLIC	??_C@_0HP@GHCMDAED@This?5is?5a?5simplified?5view?4?5See?5m@ ; `string'
PUBLIC	??_C@_0BE@HGGCPGOH@Mouse?5pos?3?5?$CI?$CFg?0?5?$CFg?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BF@BCIGOCNH@Mouse?5pos?3?5?$DMINVALID?$DO?$AA@ ; `string'
PUBLIC	??_C@_0BG@MNNMKHFC@Mouse?5delta?3?5?$CI?$CFg?0?5?$CFg?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0M@HODNMGFJ@Mouse?5down?3?$AA@		; `string'
PUBLIC	??_C@_0BB@BCIHMLII@b?$CFd?5?$CI?$CF?402f?5secs?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BC@CFHNPKHB@Mouse?5wheel?3?5?$CF?41f?$AA@ ; `string'
PUBLIC	??_C@_0L@POLCMIEL@Keys?5down?3?$AA@		; `string'
PUBLIC	??_C@_04OEDFLLKD@?$CC?$CFs?$CC?$AA@		; `string'
PUBLIC	??_C@_07BFJJNFBL@?$CC?$CFs?$CC?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_07ODHCILNN@?$CI?$CF?402f?$CJ?$AA@		; `string'
PUBLIC	??_C@_06ECIIPDFH@SUPER?5?$AA@			; `string'
PUBLIC	??_C@_04HDLNDMFA@ALT?5?$AA@			; `string'
PUBLIC	??_C@_06IGAIMELN@SHIFT?5?$AA@			; `string'
PUBLIC	??_C@_05IHGCNILK@CTRL?5?$AA@			; `string'
PUBLIC	??_C@_0BE@HPBGOMPC@Keys?5mods?3?5?$CFs?$CFs?$CFs?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0N@PKFKOHDJ@Chars?5queue?3?$AA@		; `string'
PUBLIC	??_C@_0O@FLAJMFCG@?8?$CFc?8?5?$CI0x?$CF04X?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BH@CKMJBGFC@Inputs?5?$CG?5Focus?1Outputs?$AA@ ; `string'
PUBLIC	??_C@_07LGFKBKFE@Outputs?$AA@			; `string'
PUBLIC	??_C@_0CAJ@EIJLLMLM@The?5value?5of?5io?4WantCaptureMouse@ ; `string'
PUBLIC	??_C@_0BI@JLMOJHHN@io?4WantCaptureMouse?3?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CI@JIGLLDLJ@io?4WantCaptureMouseUnlessPopupCl@ ; `string'
PUBLIC	??_C@_0BL@GDHLPHDK@io?4WantCaptureKeyboard?3?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BF@NDPHMPCP@io?4WantTextInput?3?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BH@DMBBELLF@io?4WantSetMousePos?3?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CE@CPJFFAGJ@io?4NavActive?3?5?$CFd?0?5io?4NavVisible?3@ ; `string'
PUBLIC	??_C@_0CM@FPPCIOD@Inputs?5?$CG?5Focus?1Outputs?1WantCaptu@ ; `string'
PUBLIC	??_C@_0BF@JGLMCEJO@WantCapture?5override?$AA@	; `string'
PUBLIC	??_C@_0MF@IDABKCNF@Hovering?5the?5colored?5canvas?5will@ ; `string'
PUBLIC	??_C@_0N@NLJHHBMD@Set?5to?5false?$AA@		; `string'
PUBLIC	??_C@_0M@EGIDJBEG@Set?5to?5true?$AA@		; `string'
PUBLIC	??_C@_0CI@CJCOBGKD@SetNextFrameWantCaptureMouse?$CI?$CJ?5o@ ; `string'
PUBLIC	??_C@_0CL@FJJMGFDF@SetNextFrameWantCaptureKeyboard?$CI@ ; `string'
PUBLIC	??_C@_07OAKMJIEO@?$CD?$CDpanel?$AA@		; `string'
PUBLIC	??_C@_0BN@GDPPNLD@Inputs?5?$CG?5Focus?1Mouse?5Cursors?$AA@ ; `string'
PUBLIC	??_C@_0O@EOGKPMHB@Mouse?5Cursors?$AA@		; `string'
PUBLIC	??_C@_05OLOIDPAB@Arrow?$AA@			; `string'
PUBLIC	??_C@_09KBOPCPBA@TextInput?$AA@			; `string'
PUBLIC	??_C@_09NLNHGFHP@ResizeAll?$AA@			; `string'
PUBLIC	??_C@_08HLCKOJFI@ResizeNS?$AA@			; `string'
PUBLIC	??_C@_08BDBDMDLN@ResizeEW?$AA@			; `string'
PUBLIC	??_C@_0L@EFMGKFJD@ResizeNESW?$AA@		; `string'
PUBLIC	??_C@_0L@MHCCEKFE@ResizeNWSE?$AA@		; `string'
PUBLIC	??_C@_04JBBMMDIF@Hand?$AA@			; `string'
PUBLIC	??_C@_0L@OJPFEFMM@NotAllowed?$AA@		; `string'
PUBLIC	??_C@_0BO@CHGMKDBB@Current?5mouse?5cursor?5?$DN?5?$CFd?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BM@MCMILHH@Hover?5to?5see?5mouse?5cursors?3?$AA@ ; `string'
PUBLIC	??_C@_0PC@CDIOEKMA@Your?5application?5can?5render?5a?5di@ ; `string'
PUBLIC	??_C@_0BE@KDPKCDI@Mouse?5cursor?5?$CFd?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BH@HCPGLPEC@Inputs?5?$CG?5Focus?1Tabbing?$AA@ ; `string'
PUBLIC	??_C@_07OOGFLDEE@Tabbing?$AA@			; `string'
PUBLIC	??_C@_0DN@DBMIKJE@Use?5TAB?1SHIFT?$CLTAB?5to?5cycle?5throu@ ; `string'
PUBLIC	??_C@_01HIHLOKLC@1?$AA@				; `string'
PUBLIC	??_C@_01FDFGLJHB@2?$AA@				; `string'
PUBLIC	??_C@_01EKENIIDA@3?$AA@				; `string'
PUBLIC	??_C@_0N@MPCBNDPA@4?5?$CItab?5skip?$CJ?$AA@	; `string'
PUBLIC	??_C@_0DK@EKDPAEPE@Item?5won?8t?5be?5cycled?5through?5whe@ ; `string'
PUBLIC	??_C@_01BMBHCPLG@5?$AA@				; `string'
PUBLIC	??_C@_0BP@HINAMKMF@Inputs?5?$CG?5Focus?1Focus?5from?5code?$AA@ ; `string'
PUBLIC	??_C@_0BA@PGBLAHMK@Focus?5from?5code?$AA@	; `string'
PUBLIC	??_C@_0L@OPJAAOKJ@Focus?5on?51?$AA@		; `string'
PUBLIC	??_C@_0L@MELNFNGK@Focus?5on?52?$AA@		; `string'
PUBLIC	??_C@_0L@NNKGGMCL@Focus?5on?53?$AA@		; `string'
PUBLIC	??_C@_0N@LCFCNFKI@3?5?$CItab?5skip?$CJ?$AA@	; `string'
PUBLIC	??_C@_0BE@PCNBLNDG@Item?5with?5focus?3?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BI@EPMJCFDB@Item?5with?5focus?3?5?$DMnone?$DO?$AA@ ; `string'
PUBLIC	??_C@_0L@FLKPNOEH@Focus?5on?5X?$AA@		; `string'
PUBLIC	??_C@_0L@ECLEOPAG@Focus?5on?5Y?$AA@		; `string'
PUBLIC	??_C@_0L@GJJJLMMF@Focus?5on?5Z?$AA@		; `string'
PUBLIC	??_C@_06FBFHKKF@Float3?$AA@			; `string'
PUBLIC	??_C@_0EN@KGJCPIPJ@NB?3?5Cursor?5?$CG?5selection?5are?5prese@ ; `string'
PUBLIC	??_C@_0BI@KAPLGJKD@Inputs?5?$CG?5Focus?1Dragging?$AA@ ; `string'
PUBLIC	??_C@_08EJAEFPJK@Dragging?$AA@			; `string'
PUBLIC	??_C@_0FH@PFEFFOMN@You?5can?5use?5ImGui?3?3GetMouseDragD@ ; `string'
PUBLIC	??_C@_0BF@KIECDLEM@IsMouseDragging?$CI?$CFd?$CJ?3?$AA@ ; `string'
PUBLIC	??_C@_0BM@OAEENKC@?5?5w?1?5default?5threshold?3?5?$CFd?0?$AA@ ; `string'
PUBLIC	??_C@_0BJ@EKJNKKLN@?5?5w?1?5zero?5threshold?3?5?$CFd?0?$AA@ ; `string'
PUBLIC	??_C@_0BK@IDAIPONC@?5?5w?1?5large?5threshold?3?5?$CFd?0?$AA@ ; `string'
PUBLIC	??_C@_07GELNHEGO@Drag?5Me?$AA@			; `string'
PUBLIC	??_C@_0BG@GNJKBBCP@GetMouseDragDelta?$CI0?$CJ?3?$AA@ ; `string'
PUBLIC	??_C@_0CF@KCDOPHOF@?5?5w?1?5default?5threshold?3?5?$CI?$CF?41f?0?5?$CF@ ; `string'
PUBLIC	??_C@_0CC@LGMLCNKI@?5?5w?1?5zero?5threshold?3?5?$CI?$CF?41f?0?5?$CF?41f@ ; `string'
PUBLIC	??_C@_0BM@LOAJCJGM@io?4MouseDelta?3?5?$CI?$CF?41f?0?5?$CF?41f?$CJ?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??ShowAboutWindow@ImGui@@YAXPEA_N@Z@4JA ; `ImGui::ShowAboutWindow'::`1'::__LINE__Var
PUBLIC	??_C@_0BH@FIOEKAIP@Tools?1About?5Dear?5ImGui?$AA@ ; `string'
PUBLIC	??_C@_0O@NCHBJMJF@Dear?5ImGui?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0DA@LADNBCJ@By?5Omar?5Cornut?5and?5all?5Dear?5ImGu@ ; `string'
PUBLIC	??_C@_0FA@NMHKMBMB@Dear?5ImGui?5is?5licensed?5under?5the@ ; `string'
PUBLIC	??_C@_0BJ@CEAKAMCE@Config?1Build?5Information?$AA@ ; `string'
PUBLIC	??_C@_0BC@JBNIPPJL@Copy?5to?5clipboard?$AA@	; `string'
PUBLIC	??_C@_09FGECHJGB@cfg_infos?$AA@			; `string'
PUBLIC	??_C@_04CJPBKLAG@?$GA?$GA?$GA?6?$AA@		; `string'
PUBLIC	??_C@_0BD@GCCEJBGO@Dear?5ImGui?5?$CFs?5?$CI?$CFd?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0EC@BJAMNCHD@sizeof?$CIsize_t?$CJ?3?5?$CFd?0?5sizeof?$CIImDra@ ; `string'
PUBLIC	??_C@_0BH@KGAJBCNH@define?3?5__cplusplus?$DN?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0P@KFJLIPEJ@define?3?5_WIN32?$AA@		; `string'
PUBLIC	??_C@_0P@PFAKOKCE@define?3?5_WIN64?$AA@		; `string'
PUBLIC	??_C@_0BE@JHNIDJHD@define?3?5_MSC_VER?$DN?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BG@LLKICGOL@define?3?5_MSVC_LANG?$DN?$CFd?$AA@ ; `string'
PUBLIC	??_C@_04HIBGFPH@NULL?$AA@			; `string'
PUBLIC	??_C@_0BL@DHJKNAPN@io?4BackendPlatformName?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BL@HCPCDKOE@io?4BackendRendererName?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BH@DILJIOHM@io?4ConfigFlags?3?50x?$CF08X?$AA@ ; `string'
PUBLIC	??_C@_0BD@CKENCLMO@?5NavEnableKeyboard?$AA@	; `string'
PUBLIC	??_C@_0BC@PFLKKAGF@?5NavEnableGamepad?$AA@	; `string'
PUBLIC	??_C@_0BG@KOLHMNKG@?5NavEnableSetMousePos?$AA@	; `string'
PUBLIC	??_C@_0BG@DGPFDLKM@?5NavNoCaptureKeyboard?$AA@	; `string'
PUBLIC	??_C@_08GAJGGFEK@?5NoMouse?$AA@			; `string'
PUBLIC	??_C@_0BF@LKMNGEAI@?5NoMouseCursorChange?$AA@	; `string'
PUBLIC	??_C@_0BJ@PEAELIMN@io?4ConfigMacOSXBehaviors?$AA@ ; `string'
PUBLIC	??_C@_0CD@LAKMNGBL@io?4ConfigMemoryCompactTimer?5?$DN?5?$CF?4@ ; `string'
PUBLIC	??_C@_0BI@GNGLPDFI@io?4BackendFlags?3?50x?$CF08X?$AA@ ; `string'
PUBLIC	??_C@_0M@MPABENKI@?5HasGamepad?$AA@		; `string'
PUBLIC	??_C@_0BB@NNHFCGPM@?5HasMouseCursors?$AA@	; `string'
PUBLIC	??_C@_0BA@EKJHBGEP@?5HasSetMousePos?$AA@	; `string'
PUBLIC	??_C@_0BG@GFLBPJOL@?5RendererHasVtxOffset?$AA@	; `string'
PUBLIC	??_C@_0DC@CPKPHKKN@io?4Fonts?3?5?$CFd?5fonts?0?5Flags?3?50x?$CF08@ ; `string'
PUBLIC	??_C@_0BK@EIINOCEN@io?4DisplaySize?3?5?$CF?42f?0?$CF?42f?$AA@ ; `string'
PUBLIC	??_C@_0CG@MDJEGDDF@io?4DisplayFramebufferScale?3?5?$CF?42f@ ; `string'
PUBLIC	??_C@_0BP@CFKGJLOD@style?4WindowPadding?3?5?$CF?42f?0?$CF?42f?$AA@ ; `string'
PUBLIC	??_C@_0BN@NGAGEFMI@style?4WindowBorderSize?3?5?$CF?42f?$AA@ ; `string'
PUBLIC	??_C@_0BO@GOMLHPA@style?4FramePadding?3?5?$CF?42f?0?$CF?42f?$AA@ ; `string'
PUBLIC	??_C@_0BK@INLCDPGI@style?4FrameRounding?3?5?$CF?42f?$AA@ ; `string'
PUBLIC	??_C@_0BM@JEFFCPEF@style?4FrameBorderSize?3?5?$CF?42f?$AA@ ; `string'
PUBLIC	??_C@_0BN@DHGOAPDN@style?4ItemSpacing?3?5?$CF?42f?0?$CF?42f?$AA@ ; `string'
PUBLIC	??_C@_0CC@ECALHKFF@style?4ItemInnerSpacing?3?5?$CF?42f?0?$CF?42@ ; `string'
PUBLIC	??_C@_05PPIKNONO@?6?$GA?$GA?$GA?6?$AA@		; `string'
PUBLIC	??_C@_0BCL@DICJLDFC@?9?5Load?5additional?5fonts?5with?5io?4@ ; `string'
PUBLIC	??_C@_0BE@PBMDCJBA@Dark?$AALight?$AAClassic?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4JA ; `ImGui::ShowStyleEditor'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@LNCFKLAK@Tools?1Style?5Editor?$AA@	; `string'
PUBLIC	??_C@_0BB@MDDLAALC@Colors?$CD?$CDSelector?$AA@	; `string'
PUBLIC	??_C@_0BA@OGAKFFL@Fonts?$CD?$CDSelector?$AA@	; `string'
PUBLIC	??_C@_0O@MJEGPPND@FrameRounding?$AA@		; `string'
PUBLIC	??_C@_0N@IABNAJJO@WindowBorder?$AA@		; `string'
PUBLIC	??_C@_0M@LIENHPEL@FrameBorder?$AA@		; `string'
PUBLIC	??_C@_0M@NFCFILGL@PopupBorder?$AA@		; `string'
PUBLIC	??_C@_08EEJHGAPI@Save?5Ref?$AA@			; `string'
PUBLIC	??_C@_0L@KOOMFCFA@Revert?5Ref?$AA@		; `string'
PUBLIC	??_C@_0IE@DBDEKJDM@Save?1Revert?5in?5local?5non?9persist@ ; `string'
PUBLIC	??_C@_06NNHHJHAK@?$CD?$CDtabs?$AA@		; `string'
PUBLIC	??_C@_05BOIJFCDP@Sizes?$AA@			; `string'
PUBLIC	??_C@_04KGFMLCPK@Main?$AA@			; `string'
PUBLIC	??_C@_0O@NJEPBHAL@WindowPadding?$AA@		; `string'
PUBLIC	??_C@_0N@CPMOGBCG@FramePadding?$AA@		; `string'
PUBLIC	??_C@_0M@PJNJGKOI@ItemSpacing?$AA@		; `string'
PUBLIC	??_C@_0BB@FPELPPEM@ItemInnerSpacing?$AA@	; `string'
PUBLIC	??_C@_0BC@CHKNMAIJ@TouchExtraPadding?$AA@	; `string'
PUBLIC	??_C@_0O@FJCIMFNP@IndentSpacing?$AA@		; `string'
PUBLIC	??_C@_0O@DNFCAGJO@ScrollbarSize?$AA@		; `string'
PUBLIC	??_C@_0M@MMBGIFGH@GrabMinSize?$AA@		; `string'
PUBLIC	??_C@_0BB@DIOLDNNC@WindowBorderSize?$AA@	; `string'
PUBLIC	??_C@_0BA@MHPKDBMC@ChildBorderSize?$AA@		; `string'
PUBLIC	??_C@_0BA@GHHMANCJ@PopupBorderSize?$AA@		; `string'
PUBLIC	??_C@_0BA@OLKEIFFB@FrameBorderSize?$AA@		; `string'
PUBLIC	??_C@_0O@MEMGDJEN@TabBorderSize?$AA@		; `string'
PUBLIC	??_C@_08ICFONDFO@Rounding?$AA@			; `string'
PUBLIC	??_C@_0P@IMGPCCNA@WindowRounding?$AA@		; `string'
PUBLIC	??_C@_0O@OLPNJDEC@ChildRounding?$AA@		; `string'
PUBLIC	??_C@_0O@OGBCIABM@PopupRounding?$AA@		; `string'
PUBLIC	??_C@_0BC@IGAFHGEC@ScrollbarRounding?$AA@	; `string'
PUBLIC	??_C@_0N@CHOEJEFP@GrabRounding?$AA@		; `string'
PUBLIC	??_C@_0M@GELHPNFJ@TabRounding?$AA@		; `string'
PUBLIC	??_C@_04GEFJINEE@?$CF?42f?$AA@			; `string'
PUBLIC	??_C@_0BB@IFNMJCJO@WindowTitleAlign?$AA@	; `string'
PUBLIC	??_C@_0BB@ECHPPBJL@None?$AALeft?$AARight?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BJ@INNLFKOF@WindowMenuButtonPosition?$AA@ ; `string'
PUBLIC	??_C@_0M@PMLPANEE@Left?$AARight?$AA?$AA@	; `string'
PUBLIC	??_C@_0BE@HCCCHIDA@ColorButtonPosition?$AA@	; `string'
PUBLIC	??_C@_0BA@PHDMJLFL@ButtonTextAlign?$AA@		; `string'
PUBLIC	??_C@_0EB@KHCCNPEP@Alignment?5applies?5when?5a?5button?5@ ; `string'
PUBLIC	??_C@_0BE@OFFKFPJC@SelectableTextAlign?$AA@	; `string'
PUBLIC	??_C@_0EF@EIJADJPM@Alignment?5applies?5when?5a?5selecta@ ; `string'
PUBLIC	??_C@_0BC@FINEDBHB@Safe?5Area?5Padding?$AA@	; `string'
PUBLIC	??_C@_0GI@OFDAJLLA@Adjust?5if?5you?5cannot?5see?5the?5edg@ ; `string'
PUBLIC	??_C@_0BH@NLJOADCC@DisplaySafeAreaPadding?$AA@	; `string'
PUBLIC	??_C@_0BC@CILLMAJK@LogSliderDeadzone?$AA@	; `string'
PUBLIC	??_C@_06ICDCBJPI@Colors?$AA@			; `string'
PUBLIC	??_C@_06BFGAPCKF@Export?$AA@			; `string'
PUBLIC	??_C@_0CN@IIGPHJOL@ImVec4?$CK?5colors?5?$DN?5ImGui?3?3GetStyle@ ; `string'
PUBLIC	??_C@_0DO@CEAFKMHA@colors?$FLImGuiCol_?$CFs?$FN?$CF?$CKs?$DN?5ImVec4?$CI?$CF@ ; `string'
PUBLIC	??_C@_0BF@PKKCFHCF@To?5Clipboard?$AATo?5TTY?$AA?$AA@ ; `string'
PUBLIC	??_C@_0O@BMBGJILK@?$CD?$CDoutput_type?$AA@	; `string'
PUBLIC	??_C@_0BF@EKILLAGK@Only?5Modified?5Colors?$AA@	; `string'
PUBLIC	??_C@_0O@ECALKMOF@Filter?5colors?$AA@		; `string'
PUBLIC	??_C@_06OGJDIEIN@Opaque?$AA@			; `string'
PUBLIC	??_C@_05IHOGHNDL@Alpha?$AA@			; `string'
PUBLIC	??_C@_04IGHHMFLN@Both?$AA@			; `string'
PUBLIC	??_C@_0GL@DGJKIMAI@In?5the?5color?5list?3?6Left?9click?5on@ ; `string'
PUBLIC	??_C@_08PKGPDAGH@?$CD?$CDcolors?$AA@		; `string'
PUBLIC	??_C@_07KJABCEJI@?$CD?$CDcolor?$AA@		; `string'
PUBLIC	??_C@_04INACKGJP@Save?$AA@			; `string'
PUBLIC	??_C@_06OIKMFEGE@Revert?$AA@			; `string'
PUBLIC	??_C@_05ENDNDI@Fonts?$AA@			; `string'
PUBLIC	??_C@_0DI@LIBKHDAI@Read?5FAQ?5and?5docs?1FONTS?4md?5for?5d@ ; `string'
PUBLIC	??_C@_0BDA@ONKGEIHO@Those?5are?5old?5settings?5provided?5@ ; `string'
PUBLIC	??_C@_0N@DLFCCMFO@window?5scale?$AA@		; `string'
PUBLIC	??_C@_0N@DCHFKEPM@global?5scale?$AA@		; `string'
PUBLIC	??_C@_09PIAIFBON@Rendering?$AA@			; `string'
PUBLIC	??_C@_0BD@INPJKAKL@Anti?9aliased?5lines?$AA@	; `string'
PUBLIC	??_C@_0GD@HJLOEILL@When?5disabling?5anti?9aliasing?5lin@ ; `string'
PUBLIC	??_C@_0BP@FHJLGIJI@Anti?9aliased?5lines?5use?5texture?$AA@ ; `string'
PUBLIC	??_C@_0HC@GKHKBME@Faster?5lines?5using?5texture?5data?4@ ; `string'
PUBLIC	??_C@_0BC@KAFHAJBP@Anti?9aliased?5fill?$AA@	; `string'
PUBLIC	??_C@_0BN@KPCPFGKJ@Curve?5Tessellation?5Tolerance?$AA@ ; `string'
PUBLIC	??_C@_0BO@ENDODAAL@Circle?5Tessellation?5Max?5Error?$AA@ ; `string'
PUBLIC	??_C@_0CF@PHDIKMAF@?$CIR?5?$DN?5radius?0?5N?5?$DN?5number?5of?5segme@ ; `string'
PUBLIC	??_C@_0O@MNHFAILC@N?3?5MMM?6R?3?5MMM?$AA@	; `string'
PUBLIC	??_C@_0N@PBIKEDIP@R?3?5?$CF?4f?6N?3?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0GG@GMJKIKDN@When?5drawing?5circle?5primitives?5w@ ; `string'
PUBLIC	??_C@_0N@MBCJIDFM@Global?5Alpha?$AA@		; `string'
PUBLIC	??_C@_0P@HJLJBJBE@Disabled?5Alpha?$AA@		; `string'
PUBLIC	??_C@_0FH@NPBPGPJP@Additional?5alpha?5multiplier?5for?5@ ; `string'
PUBLIC	??_C@_0CO@FFJHEDDC@Double?9click?5on?5title?5bar?5to?5col@ ; `string'
PUBLIC	??_C@_0GD@KHDHCLNB@Click?5and?5drag?5on?5lower?5corner?5t@ ; `string'
PUBLIC	??_C@_0DL@LJHMLMPJ@CTRL?$CLClick?5on?5a?5slider?5or?5drag?5b@ ; `string'
PUBLIC	??_C@_0DJ@LKCIFMEM@TAB?1SHIFT?$CLTAB?5to?5cycle?5through?5k@ ; `string'
PUBLIC	??_C@_0BN@MNOOCJNJ@CTRL?$CLTab?5to?5select?5a?5window?4?$AA@ ; `string'
PUBLIC	??_C@_0CK@LADJDPFO@CTRL?$CLMouse?5Wheel?5to?5zoom?5window?5@ ; `string'
PUBLIC	??_C@_0BG@NMLMAAHC@While?5inputing?5text?3?6?$AA@ ; `string'
PUBLIC	??_C@_0BO@EGJGDBOL@CTRL?$CLLeft?1Right?5to?5word?5jump?4?$AA@ ; `string'
PUBLIC	??_C@_0CG@EHDHJJCE@CTRL?$CLA?5or?5double?9click?5to?5select@ ; `string'
PUBLIC	??_C@_0CM@COCDFHEI@CTRL?$CLX?1C?1V?5to?5use?5clipboard?5cut?1@ ; `string'
PUBLIC	??_C@_0BM@KMMNEEIL@CTRL?$CLZ?0CTRL?$CLY?5to?5undo?1redo?4?$AA@ ; `string'
PUBLIC	??_C@_0BC@PKENOIKO@ESCAPE?5to?5revert?4?$AA@	; `string'
PUBLIC	??_C@_0CC@LHGBBELP@With?5keyboard?5navigation?5enabled@ ; `string'
PUBLIC	??_C@_0BI@PBJOMNMB@Arrow?5keys?5to?5navigate?4?$AA@ ; `string'
PUBLIC	??_C@_0BM@LKNGKCOD@Space?5to?5activate?5a?5widget?4?$AA@ ; `string'
PUBLIC	??_C@_0CE@LIPDCNLP@Return?5to?5input?5text?5into?5a?5widg@ ; `string'
PUBLIC	??_C@_0DP@NLCDBEHA@Escape?5to?5deactivate?5a?5widget?0?5c@ ; `string'
PUBLIC	??_C@_0CL@EBPMKFNL@Alt?5to?5jump?5to?5the?5menu?5layer?5of@ ; `string'
PUBLIC	??_C@_06GHDCGCHF@CTRL?$CLZ?$AA@			; `string'
PUBLIC	??_C@_04LPGMNMPN@Undo?$AA@			; `string'
PUBLIC	??_C@_06EMBPDBLG@CTRL?$CLY?$AA@			; `string'
PUBLIC	??_C@_04NKENIHOM@Redo?$AA@			; `string'
PUBLIC	??_C@_06FFAEAAPH@CTRL?$CLX?$AA@			; `string'
PUBLIC	??_C@_03EOHDMBHJ@Cut?$AA@			; `string'
PUBLIC	??_C@_06PMDCMLGN@CTRL?$CLC?$AA@			; `string'
PUBLIC	??_C@_06MLIHCNHJ@CTRL?$CLV?$AA@			; `string'
PUBLIC	??_C@_05NEBJFIEK@Paste?$AA@			; `string'
PUBLIC	?__LINE__Var@?0??ShowExampleMenuFile@@YAXXZ@4JA	; `ShowExampleMenuFile'::`1'::__LINE__Var
PUBLIC	??_C@_0O@GAOLJPOH@Examples?1Menu?$AA@		; `string'
PUBLIC	??_C@_0M@OLDACLJ@?$CIdemo?5menu?$CJ?$AA@	; `string'
PUBLIC	??_C@_03ILBCOJBH@New?$AA@			; `string'
PUBLIC	??_C@_06DGNIABGN@Ctrl?$CLO?$AA@			; `string'
PUBLIC	??_C@_04DNCDCIAE@Open?$AA@			; `string'
PUBLIC	??_C@_0M@FFOFICLF@Open?5Recent?$AA@		; `string'
PUBLIC	??_C@_0L@MGPNFHBN@fish_hat?4c?$AA@		; `string'
PUBLIC	??_C@_0N@OONPEMFD@fish_hat?4inl?$AA@		; `string'
PUBLIC	??_C@_0L@CFAJIONG@fish_hat?4h?$AA@		; `string'
PUBLIC	??_C@_06INDFPOP@More?4?4?$AA@			; `string'
PUBLIC	??_C@_09JKOAAOOB@Recurse?4?4?$AA@		; `string'
PUBLIC	??_C@_06NAKPFMDA@Ctrl?$CLS?$AA@			; `string'
PUBLIC	??_C@_09JEJONNAL@Save?5As?4?4?$AA@		; `string'
PUBLIC	??_C@_0BG@BFDGIKBI@Examples?1Menu?1Options?$AA@	; `string'
PUBLIC	??_C@_07DOAOMMKG@Enabled?$AA@			; `string'
PUBLIC	??_C@_0BC@MAFFAEMB@Scrolling?5Text?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_05DCDOHKAB@Input?$AA@			; `string'
PUBLIC	??_C@_0P@CHCLHMCH@Yes?$AANo?$AAMaybe?$AA?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BF@IOOCHEEB@Examples?1Menu?1Colors?$AA@	; `string'
PUBLIC	??_C@_0CJ@HMLLIHM@Examples?1Menu?1Append?5to?5an?5exist@ ; `string'
PUBLIC	??_C@_0L@CLAHFOAE@SomeOption?$AA@		; `string'
PUBLIC	??_C@_07KAJHKDAE@Checked?$AA@			; `string'
PUBLIC	??_C@_06ELIFPNNI@Alt?$CLF4?$AA@			; `string'
PUBLIC	??_C@_04GMBKPCGK@Quit?$AA@			; `string'
PUBLIC	??_C@_0BB@GJBEJJEP@Examples?1Console?$AA@	; `string'
PUBLIC	??_C@_04DOKPJKJF@HELP?$AA@			; `string'
PUBLIC	??_C@_07DBIJIOJO@HISTORY?$AA@			; `string'
PUBLIC	??_C@_05PONODPI@CLEAR?$AA@			; `string'
PUBLIC	??_C@_08GOHMLCGG@CLASSIFY?$AA@			; `string'
PUBLIC	??_C@_0BH@HICLALOG@Welcome?5to?5Dear?5ImGui?$CB?$AA@ ; `string'
PUBLIC	??_C@_13KHDBCPJB@?$AAs?$AA?$AA@			; `string'
PUBLIC	??_C@_17ENLBLDPN@?$AAb?$AAu?$AAf?$AA?$AA@	; `string'
PUBLIC	??_C@_0O@GDIOPKGP@Close?5Console?$AA@		; `string'
PUBLIC	??_C@_0NJ@IPNBOCGH@This?5example?5implements?5a?5consol@ ; `string'
PUBLIC	??_C@_0BH@DCBEMCMC@Enter?5?8HELP?8?5for?5help?4?$AA@ ; `string'
PUBLIC	??_C@_0P@EGDLDIHN@Add?5Debug?5Text?$AA@		; `string'
PUBLIC	??_C@_0N@OJGBPOOP@?$CFd?5some?5text?$AA@	; `string'
PUBLIC	??_C@_0P@BMHJKMPF@some?5more?5text?$AA@		; `string'
PUBLIC	??_C@_0CF@PEIDNPCH@display?5very?5important?5message?5h@ ; `string'
PUBLIC	??_C@_0BA@FGHPBLJE@Add?5Debug?5Error?$AA@	; `string'
PUBLIC	??_C@_0BN@KNPJMMPE@?$FLerror?$FN?5something?5went?5wrong?$AA@ ; `string'
PUBLIC	??_C@_05MDNHABIA@Clear?$AA@			; `string'
PUBLIC	??_C@_0M@IFKANFPJ@Auto?9scroll?$AA@		; `string'
PUBLIC	??_C@_0CA@HIABFBKB@Filter?5?$CI?$CCincl?0?9excl?$CC?$CJ?5?$CI?$CCerror?$CC?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BA@KOEFNJOK@ScrollingRegion?$AA@		; `string'
PUBLIC	??_C@_07LFMCMLFD@?$FLerror?$FN?$AA@		; `string'
PUBLIC	??_C@_02KPDBPKPG@?$CD?5?$AA@			; `string'
PUBLIC	??_C@_05DFHAGHEP@?$CD?5?$CFs?6?$AA@		; `string'
PUBLIC	??_C@_09GJFNIAOH@Commands?3?$AA@		; `string'
PUBLIC	??_C@_04JKCKOCFH@?9?5?$CFs?$AA@			; `string'
PUBLIC	??_C@_08PKLPHKJF@?$CF3d?3?5?$CFs?6?$AA@		; `string'
PUBLIC	??_C@_0BH@OKLFOGKH@Unknown?5command?3?5?8?$CFs?8?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@DOPMHGPK@No?5match?5for?5?$CC?$CF?4?$CKs?$CC?$CB?6?$AA@ ; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_0BD@LCPLNAHF@Possible?5matches?3?6?$AA@	; `string'
PUBLIC	??_C@_05PHKAGDP@?9?5?$CFs?6?$AA@		; `string'
PUBLIC	??_C@_0BB@NEACHKPE@Example?3?5Console?$AA@	; `string'
PUBLIC	??_C@_06IBDJIBGI@Filter?$AA@			; `string'
PUBLIC	?__LINE__Var@?0??ShowExampleAppLog@@YAXPEA_N@Z@4JA ; `ShowExampleAppLog'::`1'::__LINE__Var
PUBLIC	??_C@_0N@LFJACCKD@Example?3?5Log?$AA@		; `string'
PUBLIC	??_C@_0N@BPJHOONG@Examples?1Log?$AA@		; `string'
PUBLIC	??_C@_0BG@JBNFHIEN@?$FLDebug?$FN?5Add?55?5entries?$AA@ ; `string'
PUBLIC	??_C@_04NIDJFNBE@info?$AA@			; `string'
PUBLIC	??_C@_04FNLOFOEM@warn?$AA@			; `string'
PUBLIC	??_C@_05KKCIMGE@error?$AA@			; `string'
PUBLIC	??_C@_0L@CIGCKJLI@Bumfuzzled?$AA@		; `string'
PUBLIC	??_C@_0M@FKNIJFM@Cattywampus?$AA@		; `string'
PUBLIC	??_C@_0M@KEIJGBOK@Snickersnee?$AA@		; `string'
PUBLIC	??_C@_0O@KKKMMPJN@Abibliophobia?$AA@		; `string'
PUBLIC	??_C@_0N@FLCFMCCB@Absquatulate?$AA@		; `string'
PUBLIC	??_C@_0L@MIMGHMNH@Nincompoop?$AA@		; `string'
PUBLIC	??_C@_0N@BIHLNJM@Pauciloquent?$AA@		; `string'
PUBLIC	??_C@_0DO@NHFCPAIM@?$FL?$CF05d?$FN?5?$FL?$CFs?$FN?5Hello?0?5current?5time?5@ ; `string'
PUBLIC	?__LINE__Var@?0??ShowExampleAppLayout@@YAXPEA_N@Z@4JA ; `ShowExampleAppLayout'::`1'::__LINE__Var
PUBLIC	??_C@_0BH@BCHKOJFL@Example?3?5Simple?5layout?$AA@ ; `string'
PUBLIC	??_C@_0BH@LFPHNCOC@Examples?1Simple?5layout?$AA@ ; `string'
PUBLIC	??_C@_06LEMDJJDE@Ctrl?$CLW?$AA@			; `string'
PUBLIC	??_C@_09OINOOGMP@left?5pane?$AA@		; `string'
PUBLIC	??_C@_0M@DHBPHHKL@MyObject?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_09PHNAOHDK@item?5view?$AA@		; `string'
PUBLIC	??_C@_0N@CMHEFDFC@MyObject?3?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_06BMLGLIAO@?$CD?$CDTabs?$AA@		; `string'
PUBLIC	??_C@_0HN@OJKIHMDC@Lorem?5ipsum?5dolor?5sit?5amet?0?5cons@ ; `string'
PUBLIC	??_C@_07NJJEDOBB@Details?$AA@			; `string'
PUBLIC	??_C@_0P@CCIDAFDC@ID?3?50123456789?$AA@		; `string'
PUBLIC	??_C@_05FIIOEGIK@?$CFs_?$CFu?$AA@		; `string'
PUBLIC	??_C@_06ELFECKBG@Object?$AA@			; `string'
PUBLIC	??_C@_0BC@LIBEHHHH@my?5sailor?5is?5rich?$AA@	; `string'
PUBLIC	??_C@_08BNKJGCPO@Field_?$CFd?$AA@		; `string'
PUBLIC	??_C@_05EPLKDJMH@Field?$AA@			; `string'
PUBLIC	??_C@_07FBBIKLOB@?$CD?$CDvalue?$AA@		; `string'
PUBLIC	?__LINE__Var@?0??ShowExampleAppPropertyEditor@@YAXPEA_N@Z@4JA ; `ShowExampleAppPropertyEditor'::`1'::__LINE__Var
PUBLIC	??_C@_0BJ@EKHJGGOC@Example?3?5Property?5editor?$AA@ ; `string'
PUBLIC	??_C@_0BJ@BMIAECG@Examples?1Property?5Editor?$AA@ ; `string'
PUBLIC	??_C@_0BAG@IGIKGKDA@This?5example?5shows?5how?5you?5may?5i@ ; `string'
PUBLIC	?__LINE__Var@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4JA ; `ShowExampleAppLongText'::`1'::__LINE__Var
PUBLIC	??_C@_0BL@GBIKCKEE@Example?3?5Long?5text?5display?$AA@ ; `string'
PUBLIC	??_C@_0BL@OPFBPBGI@Examples?1Long?5text?5display?$AA@ ; `string'
PUBLIC	??_C@_0CI@JCGLFKAA@Printing?5unusually?5long?5amount?5o@ ; `string'
PUBLIC	??_C@_0HB@DAOOCDLA@Single?5call?5to?5TextUnformatted?$CI?$CJ@ ; `string'
PUBLIC	??_C@_09NBDEEMIG@Test?5type?$AA@		; `string'
PUBLIC	??_C@_0CE@MABLKLGB@Buffer?5contents?3?5?$CFd?5lines?0?5?$CFd?5by@ ; `string'
PUBLIC	??_C@_0P@IHJDPCIL@Add?51000?5lines?$AA@		; `string'
PUBLIC	??_C@_0DA@IKFBCOKM@?$CFi?5The?5quick?5brown?5fox?5jumps?5ove@ ; `string'
PUBLIC	??_C@_0CP@NEDCKJAF@?$CFi?5The?5quick?5brown?5fox?5jumps?5ove@ ; `string'
PUBLIC	?__LINE__Var@?0??ShowExampleAppAutoResize@@YAXPEA_N@Z@4JA ; `ShowExampleAppAutoResize'::`1'::__LINE__Var
PUBLIC	??_C@_0BO@BJFILJPF@Example?3?5Auto?9resizing?5window?$AA@ ; `string'
PUBLIC	??_C@_0BO@FLMCBBHH@Examples?1Auto?9resizing?5window?$AA@ ; `string'
PUBLIC	??_C@_0LI@CEDCIBKO@Window?5will?5resize?5every?9frame?5t@ ; `string'
PUBLIC	??_C@_0BA@EAJBEEH@Number?5of?5lines?$AA@	; `string'
PUBLIC	??_C@_0BD@DIDKCIOM@?$CF?$CKsThis?5is?5line?5?$CFd?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4JA ; `ShowExampleAppConstrainedResize'::`1'::__LINE__Var
PUBLIC	??_C@_0BM@ELFAEDLN@Between?5100x100?5and?5500x500?$AA@ ; `string'
PUBLIC	??_C@_0BB@OMJELDNN@At?5least?5100x100?$AA@	; `string'
PUBLIC	??_C@_0BF@FPBGOCLL@Resize?5vertical?5only?$AA@	; `string'
PUBLIC	??_C@_0BH@FIOIJIGG@Resize?5horizontal?5only?$AA@ ; `string'
PUBLIC	??_C@_0BK@CJDAKIAB@Width?5Between?5400?5and?5500?$AA@ ; `string'
PUBLIC	??_C@_0BK@HKADNNEP@Custom?3?5Aspect?5Ratio?516?39?$AA@ ; `string'
PUBLIC	??_C@_0BG@JBCFEINF@Custom?3?5Always?5Square?$AA@ ; `string'
PUBLIC	??_C@_0BK@NJBCHMME@Custom?3?5Fixed?5Steps?5?$CI100?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BM@KOHLMLPM@Example?3?5Constrained?5Resize?$AA@ ; `string'
PUBLIC	??_C@_0CF@GJNNAKKD@Examples?1Constrained?5Resizing?5wi@ ; `string'
PUBLIC	??_C@_08BMPDLDPD@viewport?$AA@			; `string'
PUBLIC	??_C@_0M@OPPEOHAI@?$CF?42f?5x?5?$CF?42f?$AA@	; `string'
PUBLIC	??_C@_0CJ@FGKPOBFJ@?$CIHold?5SHIFT?5to?5display?5a?5dummy?5v@ ; `string'
PUBLIC	??_C@_0M@JAEDJCOP@Set?5200x200?$AA@		; `string'
PUBLIC	??_C@_0M@HFBKDEP@Set?5500x500?$AA@		; `string'
PUBLIC	??_C@_0M@BIDIOCH@Set?5800x200?$AA@		; `string'
PUBLIC	??_C@_0L@PIOLEGBL@Constraint?$AA@		; `string'
PUBLIC	??_C@_0M@CEOMCPLH@Auto?9resize?$AA@		; `string'
PUBLIC	??_C@_0P@MFKLHBLP@Window?5padding?$AA@		; `string'
PUBLIC	??_C@_0EA@CCNBDEKJ@?$CF?$CKsHello?0?5sailor?$CB?5Making?5this?5li@ ; `string'
PUBLIC	?__LINE__Var@?0??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4JA ; `ShowExampleAppSimpleOverlay'::`1'::__LINE__Var
PUBLIC	??_C@_0BI@PFDIHNNE@Example?3?5Simple?5overlay?$AA@ ; `string'
PUBLIC	??_C@_0BI@LOFEJJJB@Examples?1Simple?5Overlay?$AA@ ; `string'
PUBLIC	??_C@_0DA@NHHAMFHG@Simple?5overlay?6?$CIright?9click?5to?5c@ ; `string'
PUBLIC	??_C@_0BM@DKAAEOG@Mouse?5Position?3?5?$CI?$CF?41f?0?$CF?41f?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BK@POIHMAKN@Mouse?5Position?3?5?$DMinvalid?$DO?$AA@ ; `string'
PUBLIC	??_C@_06IFGIOHDE@Custom?$AA@			; `string'
PUBLIC	??_C@_08DPOKBJOC@Top?9left?$AA@			; `string'
PUBLIC	??_C@_09FEMEGGCE@Top?9right?$AA@		; `string'
PUBLIC	??_C@_0M@MGBINKPN@Bottom?9left?$AA@		; `string'
PUBLIC	??_C@_0N@NJDFJJBC@Bottom?9right?$AA@		; `string'
PUBLIC	??_C@_0BL@OIOENALL@Example?3?5Fullscreen?5window?$AA@ ; `string'
PUBLIC	??_C@_0CD@LIJNANIG@Use?5work?5area?5instead?5of?5main?5ar@ ; `string'
PUBLIC	??_C@_0LF@IPIHCBEA@Main?5Area?5?$DN?5entire?5viewport?0?6Wor@ ; `string'
PUBLIC	??_C@_0BO@GBGIKPEE@ImGuiWindowFlags_NoBackground?$AA@ ; `string'
PUBLIC	??_C@_0BO@ECAKMENC@ImGuiWindowFlags_NoDecoration?$AA@ ; `string'
PUBLIC	??_C@_0BM@DAAIDMAD@ImGuiWindowFlags_NoTitleBar?$AA@ ; `string'
PUBLIC	??_C@_0BM@NPHEKNPH@ImGuiWindowFlags_NoCollapse?$AA@ ; `string'
PUBLIC	??_C@_0BN@FBGOLCGF@ImGuiWindowFlags_NoScrollbar?$AA@ ; `string'
PUBLIC	??_C@_0BC@FCOOFHFP@Close?5this?5window?$AA@	; `string'
PUBLIC	?__LINE__Var@?0??ShowExampleAppWindowTitles@@YAXPEA_N@Z@4JA ; `ShowExampleAppWindowTitles'::`1'::__LINE__Var
PUBLIC	??_C@_0CA@BDOLKHNF@Same?5title?5as?5another?5window?$CD?$CD1?$AA@ ; `string'
PUBLIC	??_C@_0CE@IMLLBKBG@Examples?1Manipulating?5window?5tit@ ; `string'
PUBLIC	??_C@_0FB@NGKGAEMM@This?5is?5window?51?4?6My?5title?5is?5th@ ; `string'
PUBLIC	??_C@_0CA@DIMGPEBG@Same?5title?5as?5another?5window?$CD?$CD2?$AA@ ; `string'
PUBLIC	??_C@_0FB@MFIDPLFC@This?5is?5window?52?4?6My?5title?5is?5th@ ; `string'
PUBLIC	??_C@_04NLDFHNKP@?$HM?1?9?2?$AA@		; `string'
PUBLIC	??_C@_0CF@MMFFJKJN@Animated?5title?5?$CFc?5?$CFd?$CD?$CD?$CDAnimatedT@ ; `string'
PUBLIC	??_C@_0CC@JFOMGEPF@This?5window?5has?5a?5changing?5title@ ; `string'
PUBLIC	?__LINE__Var@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4JA ; `ShowExampleAppCustomRendering'::`1'::__LINE__Var
PUBLIC	??_C@_0BK@LABFKPJJ@Example?3?5Custom?5rendering?$AA@ ; `string'
PUBLIC	??_C@_0BK@JKHMHJNE@Examples?1Custom?5Rendering?$AA@ ; `string'
PUBLIC	??_C@_08EHLCCPCB@?$CD?$CDTabBar?$AA@		; `string'
PUBLIC	??_C@_0L@LLLBMLGE@Primitives?$AA@		; `string'
PUBLIC	??_C@_09CPMEGEPG@Gradients?$AA@			; `string'
PUBLIC	??_C@_0M@EKFIAEGG@?$CD?$CDgradient1?$AA@	; `string'
PUBLIC	??_C@_0M@GBHFFHKF@?$CD?$CDgradient2?$AA@	; `string'
PUBLIC	??_C@_0P@NICJPAHE@All?5primitives?$AA@		; `string'
PUBLIC	??_C@_05IDMOFOMC@?$CF?402f?$AA@			; `string'
PUBLIC	??_C@_09CEKHLCFH@Thickness?$AA@			; `string'
PUBLIC	??_C@_0M@ENJDGMDO@N?9gon?5sides?$AA@		; `string'
PUBLIC	??_C@_0BI@BDDBJMAI@?$CD?$CDcirclesegmentoverride?$AA@ ; `string'
PUBLIC	??_C@_0BJ@DMOGAKFD@Circle?5segments?5override?$AA@ ; `string'
PUBLIC	??_C@_0BI@KHAADAB@?$CD?$CDcurvessegmentoverride?$AA@ ; `string'
PUBLIC	??_C@_0BJ@MEDFNGBG@Curves?5segments?5override?$AA@ ; `string'
PUBLIC	??_C@_05PDOBBJNA@Color?$AA@			; `string'
PUBLIC	??_C@_06PBIJCONE@Canvas?$AA@			; `string'
PUBLIC	??_C@_0M@JHCNMMOE@Enable?5grid?$AA@		; `string'
PUBLIC	??_C@_0BE@IDDJEBPH@Enable?5context?5menu?$AA@	; `string'
PUBLIC	??_C@_0FE@MNMLMGAD@Mouse?5Left?3?5drag?5to?5add?5lines?0?6M@ ; `string'
PUBLIC	??_C@_06DODEBHEI@canvas?$AA@			; `string'
PUBLIC	??_C@_07JKKCBBMM@context?$AA@			; `string'
PUBLIC	??_C@_0L@IEFPLEH@Remove?5one?$AA@		; `string'
PUBLIC	??_C@_0L@DKNMODFD@Remove?5all?$AA@		; `string'
PUBLIC	??_C@_0BB@CEOBEDIK@BG?1FG?5draw?5lists?$AA@	; `string'
PUBLIC	??_C@_0BN@BHPCJJNA@Draw?5in?5Background?5draw?5list?$AA@ ; `string'
PUBLIC	??_C@_0EK@HADEKICD@The?5Background?5draw?5list?5will?5be@ ; `string'
PUBLIC	??_C@_0BN@MBHOHPNH@Draw?5in?5Foreground?5draw?5list?$AA@ ; `string'
PUBLIC	??_C@_0EJ@MJHHHC@The?5Foreground?5draw?5list?5will?5be@ ; `string'
PUBLIC	??_C@_0O@LKIEAKBN@Document?5?$CC?$CFs?$CC?$AA@	; `string'
PUBLIC	??_C@_0HM@PALHCHMO@Lorem?5ipsum?5dolor?5sit?5amet?0?5cons@ ; `string'
PUBLIC	??_C@_06CGNGJFJO@Modify?$AA@			; `string'
PUBLIC	??_C@_07HKLKIEAD@Save?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_06LGPANJDM@CTRL?$CLS?$AA@			; `string'
PUBLIC	??_C@_06NCJMBMDI@CTRL?$CLW?$AA@			; `string'
PUBLIC	??_C@_07KPHKCHJL@Lettuce?$AA@			; `string'
PUBLIC	??_C@_08MEKMCLOD@Eggplant?$AA@			; `string'
PUBLIC	??_C@_06JOCEHIMN@Carrot?$AA@			; `string'
PUBLIC	??_C@_06BPAOMENE@Tomato?$AA@			; `string'
PUBLIC	??_C@_0BE@GMCEAMGE@A?5Rather?5Long?5Title?$AA@	; `string'
PUBLIC	??_C@_0O@ILMKPHFK@Some?5Document?$AA@		; `string'
PUBLIC	??_C@_0BD@BKDKPNMJ@Example?3?5Documents?$AA@	; `string'
PUBLIC	??_C@_0BE@HCFGHAAC@Close?5All?5Documents?$AA@	; `string'
PUBLIC	??_C@_07IHMOANJM@Ctrl?$CLF4?$AA@		; `string'
PUBLIC	??_C@_04LBABLPF@Exit?$AA@			; `string'
PUBLIC	??_C@_05DIODKGEP@Save?$DP?$AA@			; `string'
PUBLIC	??_C@_0CE@FLCNDGLJ@Save?5change?5to?5the?5following?5ite@ ; `string'
PUBLIC	??_C@_05MIJNFGED@frame?$AA@			; `string'
PUBLIC	??_C@_03CCLAEDDF@Yes?$AA@			; `string'
PUBLIC	??_C@_02JINPPBEP@No?$AA@			; `string'
PUBLIC	??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DO@NPHOAPAC@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAt?$AA?5?$AA?$DM?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CL?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@38d1b717
PUBLIC	__real@3a03126f
PUBLIC	__real@3ba3d70a
PUBLIC	__real@3c23d70a
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e6b851f
PUBLIC	__real@3e800000
PUBLIC	__real@3e99999a
PUBLIC	__real@3eb33333
PUBLIC	__real@3ecccccd
PUBLIC	__real@3ee4e4e5
PUBLIC	__real@3f000000
PUBLIC	__real@3f109091
PUBLIC	__real@3f19999a
PUBLIC	__real@3f1a9a9b
PUBLIC	__real@3f266666
PUBLIC	__real@3f333333
PUBLIC	__real@3f48c8c9
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3f847ae140000000
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3f91111120000000
PUBLIC	__real@3fa66666
PUBLIC	__real@3fc00000
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fe38e39
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@40490e56
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@40b00000
PUBLIC	__real@40c80000
PUBLIC	__real@40e00000
PUBLIC	__real@41000000
PUBLIC	__real@41100000
PUBLIC	__real@41200000
PUBLIC	__real@41233333
PUBLIC	__real@41400000
PUBLIC	__real@41600000
PUBLIC	__real@41700000
PUBLIC	__real@41800000
PUBLIC	__real@41900000
PUBLIC	__real@41a00000
PUBLIC	__real@41e00000
PUBLIC	__real@41f00000
PUBLIC	__real@41f80000
PUBLIC	__real@42000000
PUBLIC	__real@420c0000
PUBLIC	__real@42200000
PUBLIC	__real@42480000
PUBLIC	__real@42700000
PUBLIC	__real@42800000
PUBLIC	__real@42820000
PUBLIC	__real@428c0000
PUBLIC	__real@42a00000
PUBLIC	__real@42b40000
PUBLIC	__real@42c00000
PUBLIC	__real@42c80000
PUBLIC	__real@42f00000
PUBLIC	__real@43000000
PUBLIC	__real@430c0000
PUBLIC	__real@430c6bf526340000
PUBLIC	__real@43160000
PUBLIC	__real@43200000
PUBLIC	__real@43340000
PUBLIC	__real@43480000
PUBLIC	__real@43820000
PUBLIC	__real@43960000
PUBLIC	__real@43b40000
PUBLIC	__real@43c80000
PUBLIC	__real@43d70000
PUBLIC	__real@43dc0000
PUBLIC	__real@43e10000
PUBLIC	__real@43fa0000
PUBLIC	__real@44020000
PUBLIC	__real@44098000
PUBLIC	__real@44160000
PUBLIC	__real@44228000
PUBLIC	__real@442a0000
PUBLIC	__real@44480000
PUBLIC	__real@447a0000
PUBLIC	__real@44bb8000
PUBLIC	__real@44db2000
PUBLIC	__real@501502f9
PUBLIC	__real@7f7fffff
PUBLIC	__real@80800000
PUBLIC	__real@bdcccccd
PUBLIC	__real@bf800000
PUBLIC	__real@c1200000
PUBLIC	__real@c1400000
PUBLIC	__real@c1a00000
PUBLIC	__real@c2c80000
PUBLIC	__real@c30c6bf526340000
PUBLIC	__real@c3200000
PUBLIC	__real@c3b40000
PUBLIC	__real@d01502f9
PUBLIC	__real@ff7fffff
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	atexit:PROC
EXTRN	__report_rangecheckfailure:PROC
EXTRN	_Init_thread_header:PROC
EXTRN	_Init_thread_abort:PROC
EXTRN	_Init_thread_footer:PROC
EXTRN	__imp_memchr:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	__imp_memmove:PROC
EXTRN	memset:PROC
EXTRN	__imp_strchr:PROC
EXTRN	__imp_strstr:PROC
EXTRN	strcmp:PROC
EXTRN	strcpy:PROC
EXTRN	strlen:PROC
EXTRN	__imp_strncmp:PROC
EXTRN	__imp__wassert:PROC
EXTRN	?GetCurrentContext@ImGui@@YAPEAUImGuiContext@@XZ:PROC ; ImGui::GetCurrentContext
EXTRN	?GetIO@ImGui@@YAAEAUImGuiIO@@XZ:PROC		; ImGui::GetIO
EXTRN	?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ:PROC	; ImGui::GetStyle
EXTRN	?ShowMetricsWindow@ImGui@@YAXPEA_N@Z:PROC	; ImGui::ShowMetricsWindow
EXTRN	?ShowDebugLogWindow@ImGui@@YAXPEA_N@Z:PROC	; ImGui::ShowDebugLogWindow
EXTRN	?ShowStackToolWindow@ImGui@@YAXPEA_N@Z:PROC	; ImGui::ShowStackToolWindow
EXTRN	?GetVersion@ImGui@@YAPEBDXZ:PROC		; ImGui::GetVersion
EXTRN	?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z:PROC ; ImGui::StyleColorsDark
EXTRN	?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z:PROC ; ImGui::StyleColorsLight
EXTRN	?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z:PROC ; ImGui::StyleColorsClassic
EXTRN	?Begin@ImGui@@YA_NPEBDPEA_NH@Z:PROC		; ImGui::Begin
EXTRN	?End@ImGui@@YAXXZ:PROC				; ImGui::End
EXTRN	?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z:PROC ; ImGui::BeginChild
EXTRN	?BeginChild@ImGui@@YA_NIAEBUImVec2@@_NH@Z:PROC	; ImGui::BeginChild
EXTRN	?EndChild@ImGui@@YAXXZ:PROC			; ImGui::EndChild
EXTRN	?IsWindowFocused@ImGui@@YA_NH@Z:PROC		; ImGui::IsWindowFocused
EXTRN	?IsWindowHovered@ImGui@@YA_NH@Z:PROC		; ImGui::IsWindowHovered
EXTRN	?GetWindowDrawList@ImGui@@YAPEAUImDrawList@@XZ:PROC ; ImGui::GetWindowDrawList
EXTRN	?GetWindowPos@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetWindowPos
EXTRN	?GetWindowSize@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetWindowSize
EXTRN	?GetWindowWidth@ImGui@@YAMXZ:PROC		; ImGui::GetWindowWidth
EXTRN	?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H0@Z:PROC ; ImGui::SetNextWindowPos
EXTRN	?SetNextWindowSize@ImGui@@YAXAEBUImVec2@@H@Z:PROC ; ImGui::SetNextWindowSize
EXTRN	?SetNextWindowSizeConstraints@ImGui@@YAXAEBUImVec2@@0P6AXPEAUImGuiSizeCallbackData@@@ZPEAX@Z:PROC ; ImGui::SetNextWindowSizeConstraints
EXTRN	?SetNextWindowContentSize@ImGui@@YAXAEBUImVec2@@@Z:PROC ; ImGui::SetNextWindowContentSize
EXTRN	?SetNextWindowBgAlpha@ImGui@@YAXM@Z:PROC	; ImGui::SetNextWindowBgAlpha
EXTRN	?SetWindowSize@ImGui@@YAXAEBUImVec2@@H@Z:PROC	; ImGui::SetWindowSize
EXTRN	?SetWindowFontScale@ImGui@@YAXM@Z:PROC		; ImGui::SetWindowFontScale
EXTRN	?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ:PROC ; ImGui::GetContentRegionAvail
EXTRN	?GetWindowContentRegionMax@ImGui@@YA?AUImVec2@@XZ:PROC ; ImGui::GetWindowContentRegionMax
EXTRN	?GetScrollX@ImGui@@YAMXZ:PROC			; ImGui::GetScrollX
EXTRN	?GetScrollY@ImGui@@YAMXZ:PROC			; ImGui::GetScrollY
EXTRN	?SetScrollX@ImGui@@YAXM@Z:PROC			; ImGui::SetScrollX
EXTRN	?SetScrollY@ImGui@@YAXM@Z:PROC			; ImGui::SetScrollY
EXTRN	?GetScrollMaxX@ImGui@@YAMXZ:PROC		; ImGui::GetScrollMaxX
EXTRN	?GetScrollMaxY@ImGui@@YAMXZ:PROC		; ImGui::GetScrollMaxY
EXTRN	?SetScrollHereX@ImGui@@YAXM@Z:PROC		; ImGui::SetScrollHereX
EXTRN	?SetScrollHereY@ImGui@@YAXM@Z:PROC		; ImGui::SetScrollHereY
EXTRN	?SetScrollFromPosX@ImGui@@YAXMM@Z:PROC		; ImGui::SetScrollFromPosX
EXTRN	?SetScrollFromPosY@ImGui@@YAXMM@Z:PROC		; ImGui::SetScrollFromPosY
EXTRN	?PushStyleColor@ImGui@@YAXHI@Z:PROC		; ImGui::PushStyleColor
EXTRN	?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z:PROC	; ImGui::PushStyleColor
EXTRN	?PopStyleColor@ImGui@@YAXH@Z:PROC		; ImGui::PopStyleColor
EXTRN	?PushStyleVar@ImGui@@YAXHM@Z:PROC		; ImGui::PushStyleVar
EXTRN	?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z:PROC	; ImGui::PushStyleVar
EXTRN	?PopStyleVar@ImGui@@YAXH@Z:PROC			; ImGui::PopStyleVar
EXTRN	?PushAllowKeyboardFocus@ImGui@@YAX_N@Z:PROC	; ImGui::PushAllowKeyboardFocus
EXTRN	?PopAllowKeyboardFocus@ImGui@@YAXXZ:PROC	; ImGui::PopAllowKeyboardFocus
EXTRN	?PushButtonRepeat@ImGui@@YAX_N@Z:PROC		; ImGui::PushButtonRepeat
EXTRN	?PopButtonRepeat@ImGui@@YAXXZ:PROC		; ImGui::PopButtonRepeat
EXTRN	?PushItemWidth@ImGui@@YAXM@Z:PROC		; ImGui::PushItemWidth
EXTRN	?PopItemWidth@ImGui@@YAXXZ:PROC			; ImGui::PopItemWidth
EXTRN	?SetNextItemWidth@ImGui@@YAXM@Z:PROC		; ImGui::SetNextItemWidth
EXTRN	?CalcItemWidth@ImGui@@YAMXZ:PROC		; ImGui::CalcItemWidth
EXTRN	?PushTextWrapPos@ImGui@@YAXM@Z:PROC		; ImGui::PushTextWrapPos
EXTRN	?PopTextWrapPos@ImGui@@YAXXZ:PROC		; ImGui::PopTextWrapPos
EXTRN	?GetFont@ImGui@@YAPEAUImFont@@XZ:PROC		; ImGui::GetFont
EXTRN	?GetFontSize@ImGui@@YAMXZ:PROC			; ImGui::GetFontSize
EXTRN	?GetColorU32@ImGui@@YAIHM@Z:PROC		; ImGui::GetColorU32
EXTRN	?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z:PROC	; ImGui::GetColorU32
EXTRN	?GetColorU32@ImGui@@YAII@Z:PROC			; ImGui::GetColorU32
EXTRN	?Separator@ImGui@@YAXXZ:PROC			; ImGui::Separator
EXTRN	?SameLine@ImGui@@YAXMM@Z:PROC			; ImGui::SameLine
EXTRN	?NewLine@ImGui@@YAXXZ:PROC			; ImGui::NewLine
EXTRN	?Spacing@ImGui@@YAXXZ:PROC			; ImGui::Spacing
EXTRN	?Dummy@ImGui@@YAXAEBUImVec2@@@Z:PROC		; ImGui::Dummy
EXTRN	?Indent@ImGui@@YAXM@Z:PROC			; ImGui::Indent
EXTRN	?Unindent@ImGui@@YAXM@Z:PROC			; ImGui::Unindent
EXTRN	?BeginGroup@ImGui@@YAXXZ:PROC			; ImGui::BeginGroup
EXTRN	?EndGroup@ImGui@@YAXXZ:PROC			; ImGui::EndGroup
EXTRN	?GetCursorPos@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetCursorPos
EXTRN	?GetCursorPosX@ImGui@@YAMXZ:PROC		; ImGui::GetCursorPosX
EXTRN	?SetCursorPosX@ImGui@@YAXM@Z:PROC		; ImGui::SetCursorPosX
EXTRN	?GetCursorStartPos@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetCursorStartPos
EXTRN	?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetCursorScreenPos
EXTRN	?SetCursorScreenPos@ImGui@@YAXAEBUImVec2@@@Z:PROC ; ImGui::SetCursorScreenPos
EXTRN	?AlignTextToFramePadding@ImGui@@YAXXZ:PROC	; ImGui::AlignTextToFramePadding
EXTRN	?GetTextLineHeight@ImGui@@YAMXZ:PROC		; ImGui::GetTextLineHeight
EXTRN	?GetTextLineHeightWithSpacing@ImGui@@YAMXZ:PROC	; ImGui::GetTextLineHeightWithSpacing
EXTRN	?GetFrameHeight@ImGui@@YAMXZ:PROC		; ImGui::GetFrameHeight
EXTRN	?GetFrameHeightWithSpacing@ImGui@@YAMXZ:PROC	; ImGui::GetFrameHeightWithSpacing
EXTRN	?PushID@ImGui@@YAXPEBD@Z:PROC			; ImGui::PushID
EXTRN	?PushID@ImGui@@YAXPEBX@Z:PROC			; ImGui::PushID
EXTRN	?PushID@ImGui@@YAXH@Z:PROC			; ImGui::PushID
EXTRN	?PopID@ImGui@@YAXXZ:PROC			; ImGui::PopID
EXTRN	?GetID@ImGui@@YAIPEBD@Z:PROC			; ImGui::GetID
EXTRN	?GetID@ImGui@@YAIPEBX@Z:PROC			; ImGui::GetID
EXTRN	?TextUnformatted@ImGui@@YAXPEBD0@Z:PROC		; ImGui::TextUnformatted
EXTRN	?Text@ImGui@@YAXPEBDZZ:PROC			; ImGui::Text
EXTRN	?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ:PROC	; ImGui::TextColored
EXTRN	?TextDisabled@ImGui@@YAXPEBDZZ:PROC		; ImGui::TextDisabled
EXTRN	?TextWrapped@ImGui@@YAXPEBDZZ:PROC		; ImGui::TextWrapped
EXTRN	?LabelText@ImGui@@YAXPEBD0ZZ:PROC		; ImGui::LabelText
EXTRN	?BulletText@ImGui@@YAXPEBDZZ:PROC		; ImGui::BulletText
EXTRN	?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z:PROC	; ImGui::Button
EXTRN	?SmallButton@ImGui@@YA_NPEBD@Z:PROC		; ImGui::SmallButton
EXTRN	?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z:PROC ; ImGui::InvisibleButton
EXTRN	?ArrowButton@ImGui@@YA_NPEBDH@Z:PROC		; ImGui::ArrowButton
EXTRN	?Checkbox@ImGui@@YA_NPEBDPEA_N@Z:PROC		; ImGui::Checkbox
EXTRN	?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z:PROC	; ImGui::CheckboxFlags
EXTRN	?RadioButton@ImGui@@YA_NPEBD_N@Z:PROC		; ImGui::RadioButton
EXTRN	?RadioButton@ImGui@@YA_NPEBDPEAHH@Z:PROC	; ImGui::RadioButton
EXTRN	?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z:PROC	; ImGui::ProgressBar
EXTRN	?Bullet@ImGui@@YAXXZ:PROC			; ImGui::Bullet
EXTRN	?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z:PROC ; ImGui::Image
EXTRN	?ImageButton@ImGui@@YA_NPEBDPEAXAEBUImVec2@@22AEBUImVec4@@3@Z:PROC ; ImGui::ImageButton
EXTRN	?BeginCombo@ImGui@@YA_NPEBD0H@Z:PROC		; ImGui::BeginCombo
EXTRN	?EndCombo@ImGui@@YAXXZ:PROC			; ImGui::EndCombo
EXTRN	?Combo@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z:PROC	; ImGui::Combo
EXTRN	?Combo@ImGui@@YA_NPEBDPEAH0H@Z:PROC		; ImGui::Combo
EXTRN	?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z:PROC ; ImGui::Combo
EXTRN	?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z:PROC	; ImGui::DragFloat
EXTRN	?DragFloat2@ImGui@@YA_NPEBDQEAMMMM0H@Z:PROC	; ImGui::DragFloat2
EXTRN	?DragFloat3@ImGui@@YA_NPEBDQEAMMMM0H@Z:PROC	; ImGui::DragFloat3
EXTRN	?DragFloat4@ImGui@@YA_NPEBDQEAMMMM0H@Z:PROC	; ImGui::DragFloat4
EXTRN	?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z:PROC ; ImGui::DragFloatRange2
EXTRN	?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z:PROC	; ImGui::DragInt
EXTRN	?DragInt2@ImGui@@YA_NPEBDQEAHMHH0H@Z:PROC	; ImGui::DragInt2
EXTRN	?DragInt3@ImGui@@YA_NPEBDQEAHMHH0H@Z:PROC	; ImGui::DragInt3
EXTRN	?DragInt4@ImGui@@YA_NPEBDQEAHMHH0H@Z:PROC	; ImGui::DragInt4
EXTRN	?DragIntRange2@ImGui@@YA_NPEBDPEAH1MHH00H@Z:PROC ; ImGui::DragIntRange2
EXTRN	?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z:PROC	; ImGui::DragScalar
EXTRN	?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z:PROC	; ImGui::SliderFloat
EXTRN	?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z:PROC	; ImGui::SliderFloat2
EXTRN	?SliderFloat3@ImGui@@YA_NPEBDQEAMMM0H@Z:PROC	; ImGui::SliderFloat3
EXTRN	?SliderFloat4@ImGui@@YA_NPEBDQEAMMM0H@Z:PROC	; ImGui::SliderFloat4
EXTRN	?SliderAngle@ImGui@@YA_NPEBDPEAMMM0H@Z:PROC	; ImGui::SliderAngle
EXTRN	?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z:PROC	; ImGui::SliderInt
EXTRN	?SliderInt2@ImGui@@YA_NPEBDQEAHHH0H@Z:PROC	; ImGui::SliderInt2
EXTRN	?SliderInt3@ImGui@@YA_NPEBDQEAHHH0H@Z:PROC	; ImGui::SliderInt3
EXTRN	?SliderInt4@ImGui@@YA_NPEBDQEAHHH0H@Z:PROC	; ImGui::SliderInt4
EXTRN	?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z:PROC ; ImGui::SliderScalar
EXTRN	?VSliderFloat@ImGui@@YA_NPEBDAEBUImVec2@@PEAMMM0H@Z:PROC ; ImGui::VSliderFloat
EXTRN	?VSliderInt@ImGui@@YA_NPEBDAEBUImVec2@@PEAHHH0H@Z:PROC ; ImGui::VSliderInt
EXTRN	?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z:PROC ; ImGui::InputText
EXTRN	?InputTextMultiline@ImGui@@YA_NPEBDPEAD_KAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z:PROC ; ImGui::InputTextMultiline
EXTRN	?InputTextWithHint@ImGui@@YA_NPEBD0PEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z:PROC ; ImGui::InputTextWithHint
EXTRN	?InputFloat@ImGui@@YA_NPEBDPEAMMM0H@Z:PROC	; ImGui::InputFloat
EXTRN	?InputFloat2@ImGui@@YA_NPEBDQEAM0H@Z:PROC	; ImGui::InputFloat2
EXTRN	?InputFloat3@ImGui@@YA_NPEBDQEAM0H@Z:PROC	; ImGui::InputFloat3
EXTRN	?InputFloat4@ImGui@@YA_NPEBDQEAM0H@Z:PROC	; ImGui::InputFloat4
EXTRN	?InputInt@ImGui@@YA_NPEBDPEAHHHH@Z:PROC		; ImGui::InputInt
EXTRN	?InputInt2@ImGui@@YA_NPEBDQEAHH@Z:PROC		; ImGui::InputInt2
EXTRN	?InputInt3@ImGui@@YA_NPEBDQEAHH@Z:PROC		; ImGui::InputInt3
EXTRN	?InputInt4@ImGui@@YA_NPEBDQEAHH@Z:PROC		; ImGui::InputInt4
EXTRN	?InputDouble@ImGui@@YA_NPEBDPEANNN0H@Z:PROC	; ImGui::InputDouble
EXTRN	?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z:PROC	; ImGui::InputScalar
EXTRN	?ColorEdit3@ImGui@@YA_NPEBDQEAMH@Z:PROC		; ImGui::ColorEdit3
EXTRN	?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z:PROC		; ImGui::ColorEdit4
EXTRN	?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z:PROC	; ImGui::ColorPicker3
EXTRN	?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z:PROC	; ImGui::ColorPicker4
EXTRN	?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HAEBUImVec2@@@Z:PROC ; ImGui::ColorButton
EXTRN	?SetColorEditOptions@ImGui@@YAXH@Z:PROC		; ImGui::SetColorEditOptions
EXTRN	?TreeNode@ImGui@@YA_NPEBD@Z:PROC		; ImGui::TreeNode
EXTRN	?TreeNode@ImGui@@YA_NPEBD0ZZ:PROC		; ImGui::TreeNode
EXTRN	?TreeNode@ImGui@@YA_NPEBXPEBDZZ:PROC		; ImGui::TreeNode
EXTRN	?TreeNodeEx@ImGui@@YA_NPEBDH@Z:PROC		; ImGui::TreeNodeEx
EXTRN	?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ:PROC		; ImGui::TreeNodeEx
EXTRN	?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ:PROC		; ImGui::TreeNodeEx
EXTRN	?TreePop@ImGui@@YAXXZ:PROC			; ImGui::TreePop
EXTRN	?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ:PROC	; ImGui::GetTreeNodeToLabelSpacing
EXTRN	?CollapsingHeader@ImGui@@YA_NPEBDH@Z:PROC	; ImGui::CollapsingHeader
EXTRN	?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z:PROC	; ImGui::CollapsingHeader
EXTRN	?SetNextItemOpen@ImGui@@YAX_NH@Z:PROC		; ImGui::SetNextItemOpen
EXTRN	?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z:PROC ; ImGui::Selectable
EXTRN	?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z:PROC ; ImGui::Selectable
EXTRN	?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z:PROC ; ImGui::BeginListBox
EXTRN	?EndListBox@ImGui@@YAXXZ:PROC			; ImGui::EndListBox
EXTRN	?ListBox@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z:PROC	; ImGui::ListBox
EXTRN	?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z:PROC ; ImGui::PlotLines
EXTRN	?PlotLines@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z:PROC ; ImGui::PlotLines
EXTRN	?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z:PROC ; ImGui::PlotHistogram
EXTRN	?PlotHistogram@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z:PROC ; ImGui::PlotHistogram
EXTRN	?BeginMenuBar@ImGui@@YA_NXZ:PROC		; ImGui::BeginMenuBar
EXTRN	?EndMenuBar@ImGui@@YAXXZ:PROC			; ImGui::EndMenuBar
EXTRN	?BeginMainMenuBar@ImGui@@YA_NXZ:PROC		; ImGui::BeginMainMenuBar
EXTRN	?EndMainMenuBar@ImGui@@YAXXZ:PROC		; ImGui::EndMainMenuBar
EXTRN	?BeginMenu@ImGui@@YA_NPEBD_N@Z:PROC		; ImGui::BeginMenu
EXTRN	?EndMenu@ImGui@@YAXXZ:PROC			; ImGui::EndMenu
EXTRN	?MenuItem@ImGui@@YA_NPEBD0_N1@Z:PROC		; ImGui::MenuItem
EXTRN	?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z:PROC	; ImGui::MenuItem
EXTRN	?BeginTooltip@ImGui@@YAXXZ:PROC			; ImGui::BeginTooltip
EXTRN	?EndTooltip@ImGui@@YAXXZ:PROC			; ImGui::EndTooltip
EXTRN	?SetTooltip@ImGui@@YAXPEBDZZ:PROC		; ImGui::SetTooltip
EXTRN	?BeginPopup@ImGui@@YA_NPEBDH@Z:PROC		; ImGui::BeginPopup
EXTRN	?BeginPopupModal@ImGui@@YA_NPEBDPEA_NH@Z:PROC	; ImGui::BeginPopupModal
EXTRN	?EndPopup@ImGui@@YAXXZ:PROC			; ImGui::EndPopup
EXTRN	?OpenPopup@ImGui@@YAXPEBDH@Z:PROC		; ImGui::OpenPopup
EXTRN	?OpenPopupOnItemClick@ImGui@@YAXPEBDH@Z:PROC	; ImGui::OpenPopupOnItemClick
EXTRN	?CloseCurrentPopup@ImGui@@YAXXZ:PROC		; ImGui::CloseCurrentPopup
EXTRN	?BeginPopupContextItem@ImGui@@YA_NPEBDH@Z:PROC	; ImGui::BeginPopupContextItem
EXTRN	?BeginPopupContextWindow@ImGui@@YA_NPEBDH@Z:PROC ; ImGui::BeginPopupContextWindow
EXTRN	?IsPopupOpen@ImGui@@YA_NPEBDH@Z:PROC		; ImGui::IsPopupOpen
EXTRN	?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z:PROC ; ImGui::BeginTable
EXTRN	?EndTable@ImGui@@YAXXZ:PROC			; ImGui::EndTable
EXTRN	?TableNextRow@ImGui@@YAXHM@Z:PROC		; ImGui::TableNextRow
EXTRN	?TableNextColumn@ImGui@@YA_NXZ:PROC		; ImGui::TableNextColumn
EXTRN	?TableSetColumnIndex@ImGui@@YA_NH@Z:PROC	; ImGui::TableSetColumnIndex
EXTRN	?TableSetupColumn@ImGui@@YAXPEBDHMI@Z:PROC	; ImGui::TableSetupColumn
EXTRN	?TableSetupScrollFreeze@ImGui@@YAXHH@Z:PROC	; ImGui::TableSetupScrollFreeze
EXTRN	?TableHeadersRow@ImGui@@YAXXZ:PROC		; ImGui::TableHeadersRow
EXTRN	?TableHeader@ImGui@@YAXPEBD@Z:PROC		; ImGui::TableHeader
EXTRN	?TableGetSortSpecs@ImGui@@YAPEAUImGuiTableSortSpecs@@XZ:PROC ; ImGui::TableGetSortSpecs
EXTRN	?TableGetColumnIndex@ImGui@@YAHXZ:PROC		; ImGui::TableGetColumnIndex
EXTRN	?TableGetRowIndex@ImGui@@YAHXZ:PROC		; ImGui::TableGetRowIndex
EXTRN	?TableGetColumnName@ImGui@@YAPEBDH@Z:PROC	; ImGui::TableGetColumnName
EXTRN	?TableGetColumnFlags@ImGui@@YAHH@Z:PROC		; ImGui::TableGetColumnFlags
EXTRN	?TableSetBgColor@ImGui@@YAXHIH@Z:PROC		; ImGui::TableSetBgColor
EXTRN	?Columns@ImGui@@YAXHPEBD_N@Z:PROC		; ImGui::Columns
EXTRN	?NextColumn@ImGui@@YAXXZ:PROC			; ImGui::NextColumn
EXTRN	?GetColumnIndex@ImGui@@YAHXZ:PROC		; ImGui::GetColumnIndex
EXTRN	?GetColumnWidth@ImGui@@YAMH@Z:PROC		; ImGui::GetColumnWidth
EXTRN	?GetColumnOffset@ImGui@@YAMH@Z:PROC		; ImGui::GetColumnOffset
EXTRN	?BeginTabBar@ImGui@@YA_NPEBDH@Z:PROC		; ImGui::BeginTabBar
EXTRN	?EndTabBar@ImGui@@YAXXZ:PROC			; ImGui::EndTabBar
EXTRN	?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z:PROC	; ImGui::BeginTabItem
EXTRN	?EndTabItem@ImGui@@YAXXZ:PROC			; ImGui::EndTabItem
EXTRN	?TabItemButton@ImGui@@YA_NPEBDH@Z:PROC		; ImGui::TabItemButton
EXTRN	?SetTabItemClosed@ImGui@@YAXPEBD@Z:PROC		; ImGui::SetTabItemClosed
EXTRN	?LogToTTY@ImGui@@YAXH@Z:PROC			; ImGui::LogToTTY
EXTRN	?LogToClipboard@ImGui@@YAXH@Z:PROC		; ImGui::LogToClipboard
EXTRN	?LogFinish@ImGui@@YAXXZ:PROC			; ImGui::LogFinish
EXTRN	?LogButtons@ImGui@@YAXXZ:PROC			; ImGui::LogButtons
EXTRN	?LogText@ImGui@@YAXPEBDZZ:PROC			; ImGui::LogText
EXTRN	?BeginDragDropSource@ImGui@@YA_NH@Z:PROC	; ImGui::BeginDragDropSource
EXTRN	?SetDragDropPayload@ImGui@@YA_NPEBDPEBX_KH@Z:PROC ; ImGui::SetDragDropPayload
EXTRN	?EndDragDropSource@ImGui@@YAXXZ:PROC		; ImGui::EndDragDropSource
EXTRN	?BeginDragDropTarget@ImGui@@YA_NXZ:PROC		; ImGui::BeginDragDropTarget
EXTRN	?AcceptDragDropPayload@ImGui@@YAPEBUImGuiPayload@@PEBDH@Z:PROC ; ImGui::AcceptDragDropPayload
EXTRN	?EndDragDropTarget@ImGui@@YAXXZ:PROC		; ImGui::EndDragDropTarget
EXTRN	?BeginDisabled@ImGui@@YAX_N@Z:PROC		; ImGui::BeginDisabled
EXTRN	?EndDisabled@ImGui@@YAXXZ:PROC			; ImGui::EndDisabled
EXTRN	?PushClipRect@ImGui@@YAXAEBUImVec2@@0_N@Z:PROC	; ImGui::PushClipRect
EXTRN	?PopClipRect@ImGui@@YAXXZ:PROC			; ImGui::PopClipRect
EXTRN	?SetItemDefaultFocus@ImGui@@YAXXZ:PROC		; ImGui::SetItemDefaultFocus
EXTRN	?SetKeyboardFocusHere@ImGui@@YAXH@Z:PROC	; ImGui::SetKeyboardFocusHere
EXTRN	?IsItemHovered@ImGui@@YA_NH@Z:PROC		; ImGui::IsItemHovered
EXTRN	?IsItemActive@ImGui@@YA_NXZ:PROC		; ImGui::IsItemActive
EXTRN	?IsItemFocused@ImGui@@YA_NXZ:PROC		; ImGui::IsItemFocused
EXTRN	?IsItemClicked@ImGui@@YA_NH@Z:PROC		; ImGui::IsItemClicked
EXTRN	?IsItemVisible@ImGui@@YA_NXZ:PROC		; ImGui::IsItemVisible
EXTRN	?IsItemEdited@ImGui@@YA_NXZ:PROC		; ImGui::IsItemEdited
EXTRN	?IsItemActivated@ImGui@@YA_NXZ:PROC		; ImGui::IsItemActivated
EXTRN	?IsItemDeactivated@ImGui@@YA_NXZ:PROC		; ImGui::IsItemDeactivated
EXTRN	?IsItemDeactivatedAfterEdit@ImGui@@YA_NXZ:PROC	; ImGui::IsItemDeactivatedAfterEdit
EXTRN	?IsItemToggledOpen@ImGui@@YA_NXZ:PROC		; ImGui::IsItemToggledOpen
EXTRN	?IsAnyItemHovered@ImGui@@YA_NXZ:PROC		; ImGui::IsAnyItemHovered
EXTRN	?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetItemRectMin
EXTRN	?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetItemRectMax
EXTRN	?GetItemRectSize@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetItemRectSize
EXTRN	?GetMainViewport@ImGui@@YAPEAUImGuiViewport@@XZ:PROC ; ImGui::GetMainViewport
EXTRN	?GetBackgroundDrawList@ImGui@@YAPEAUImDrawList@@XZ:PROC ; ImGui::GetBackgroundDrawList
EXTRN	?GetForegroundDrawList@ImGui@@YAPEAUImDrawList@@XZ:PROC ; ImGui::GetForegroundDrawList
EXTRN	?GetTime@ImGui@@YANXZ:PROC			; ImGui::GetTime
EXTRN	?GetFrameCount@ImGui@@YAHXZ:PROC		; ImGui::GetFrameCount
EXTRN	?GetStyleColorName@ImGui@@YAPEBDH@Z:PROC	; ImGui::GetStyleColorName
EXTRN	?BeginChildFrame@ImGui@@YA_NIAEBUImVec2@@H@Z:PROC ; ImGui::BeginChildFrame
EXTRN	?EndChildFrame@ImGui@@YAXXZ:PROC		; ImGui::EndChildFrame
EXTRN	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z:PROC ; ImGui::CalcTextSize
EXTRN	?ColorConvertFloat4ToU32@ImGui@@YAIAEBUImVec4@@@Z:PROC ; ImGui::ColorConvertFloat4ToU32
EXTRN	?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z:PROC ; ImGui::ColorConvertHSVtoRGB
EXTRN	?IsKeyDown@ImGui@@YA_NW4ImGuiKey@@@Z:PROC	; ImGui::IsKeyDown
EXTRN	?IsKeyPressed@ImGui@@YA_NW4ImGuiKey@@_N@Z:PROC	; ImGui::IsKeyPressed
EXTRN	?GetKeyName@ImGui@@YAPEBDW4ImGuiKey@@@Z:PROC	; ImGui::GetKeyName
EXTRN	?SetNextFrameWantCaptureKeyboard@ImGui@@YAX_N@Z:PROC ; ImGui::SetNextFrameWantCaptureKeyboard
EXTRN	?IsMouseDown@ImGui@@YA_NH@Z:PROC		; ImGui::IsMouseDown
EXTRN	?IsMouseClicked@ImGui@@YA_NH_N@Z:PROC		; ImGui::IsMouseClicked
EXTRN	?IsMouseReleased@ImGui@@YA_NH@Z:PROC		; ImGui::IsMouseReleased
EXTRN	?IsMouseDoubleClicked@ImGui@@YA_NH@Z:PROC	; ImGui::IsMouseDoubleClicked
EXTRN	?IsMousePosValid@ImGui@@YA_NPEBUImVec2@@@Z:PROC	; ImGui::IsMousePosValid
EXTRN	?IsMouseDragging@ImGui@@YA_NHM@Z:PROC		; ImGui::IsMouseDragging
EXTRN	?GetMouseDragDelta@ImGui@@YA?AUImVec2@@HM@Z:PROC ; ImGui::GetMouseDragDelta
EXTRN	?ResetMouseDragDelta@ImGui@@YAXH@Z:PROC		; ImGui::ResetMouseDragDelta
EXTRN	?GetMouseCursor@ImGui@@YAHXZ:PROC		; ImGui::GetMouseCursor
EXTRN	?SetMouseCursor@ImGui@@YAXH@Z:PROC		; ImGui::SetMouseCursor
EXTRN	?SetNextFrameWantCaptureMouse@ImGui@@YAX_N@Z:PROC ; ImGui::SetNextFrameWantCaptureMouse
EXTRN	?MemAlloc@ImGui@@YAPEAX_K@Z:PROC		; ImGui::MemAlloc
EXTRN	?MemFree@ImGui@@YAXPEAX@Z:PROC			; ImGui::MemFree
EXTRN	??0ImGuiStyle@@QEAA@XZ:PROC			; ImGuiStyle::ImGuiStyle
EXTRN	?DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z:PROC ; ImGuiInputTextCallbackData::DeleteChars
EXTRN	?InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z:PROC ; ImGuiInputTextCallbackData::InsertChars
EXTRN	??0ImGuiTextFilter@@QEAA@PEBD@Z:PROC		; ImGuiTextFilter::ImGuiTextFilter
EXTRN	?Draw@ImGuiTextFilter@@QEAA_NPEBDM@Z:PROC	; ImGuiTextFilter::Draw
EXTRN	?PassFilter@ImGuiTextFilter@@QEBA_NPEBD0@Z:PROC	; ImGuiTextFilter::PassFilter
EXTRN	?appendf@ImGuiTextBuffer@@QEAAXPEBDZZ:PROC	; ImGuiTextBuffer::appendf
EXTRN	?appendfv@ImGuiTextBuffer@@QEAAXPEBDPEAD@Z:PROC	; ImGuiTextBuffer::appendfv
EXTRN	??0ImGuiListClipper@@QEAA@XZ:PROC		; ImGuiListClipper::ImGuiListClipper
EXTRN	??1ImGuiListClipper@@QEAA@XZ:PROC		; ImGuiListClipper::~ImGuiListClipper
EXTRN	?Begin@ImGuiListClipper@@QEAAXHM@Z:PROC		; ImGuiListClipper::Begin
EXTRN	?End@ImGuiListClipper@@QEAAXXZ:PROC		; ImGuiListClipper::End
EXTRN	?Step@ImGuiListClipper@@QEAA_NXZ:PROC		; ImGuiListClipper::Step
EXTRN	?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z:PROC ; ImDrawList::PushClipRect
EXTRN	?PopClipRect@ImDrawList@@QEAAXXZ:PROC		; ImDrawList::PopClipRect
EXTRN	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z:PROC ; ImDrawList::AddLine
EXTRN	?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z:PROC ; ImDrawList::AddRect
EXTRN	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z:PROC ; ImDrawList::AddRectFilled
EXTRN	?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z:PROC ; ImDrawList::AddRectFilledMultiColor
EXTRN	?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z:PROC ; ImDrawList::AddTriangle
EXTRN	?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z:PROC ; ImDrawList::AddTriangleFilled
EXTRN	?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z:PROC ; ImDrawList::AddCircle
EXTRN	?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z:PROC ; ImDrawList::AddCircleFilled
EXTRN	?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z:PROC ; ImDrawList::AddNgon
EXTRN	?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z:PROC ; ImDrawList::AddNgonFilled
EXTRN	?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z:PROC ; ImDrawList::AddText
EXTRN	?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z:PROC ; ImDrawList::AddText
EXTRN	?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z:PROC ; ImDrawList::AddBezierCubic
EXTRN	?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z:PROC ; ImDrawList::AddBezierQuadratic
EXTRN	?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z:PROC ; ImDrawList::_CalcCircleAutoSegmentCount
EXTRN	__imp_toupper:PROC
EXTRN	__imp_cosf:PROC
EXTRN	__imp_floorf:PROC
EXTRN	__imp_fmodf:PROC
EXTRN	__imp_sinf:PROC
EXTRN	__imp___stdio_common_vsprintf:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_qsort:PROC
EXTRN	?GetKeyData@ImGui@@YAPEAUImGuiKeyData@@W4ImGuiKey@@@Z:PROC ; ImGui::GetKeyData
EXTRN	?ShowFontAtlas@ImGui@@YAXPEAUImFontAtlas@@@Z:PROC ; ImGui::ShowFontAtlas
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	_Init_thread_epoch:DWORD
EXTRN	?EmptyString@ImGuiTextBuffer@@2PADA:BYTE	; ImGuiTextBuffer::EmptyString
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
EXTRN	_tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?buf1@?BMD@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 040H DUP (?) ; `ShowDemoWindowWidgets'::`451'::buf1
?buf2@?BMD@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 040H DUP (?) ; `ShowDemoWindowWidgets'::`451'::buf2
?buf3@?BMD@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 040H DUP (?) ; `ShowDemoWindowWidgets'::`451'::buf3
?my_str@?BMK@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@D@@A DB 010H DUP (?) ; `ShowDemoWindowWidgets'::`458'::my_str
?$TSS0@?BMK@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`458'::$TSS0
?active_tabs@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@H@@A DB 010H DUP (?) ; `ShowDemoWindowWidgets'::`520'::active_tabs
?$TSS1@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`520'::$TSS1
?color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A DB 010H DUP (?) ; `ShowDemoWindowWidgets'::`586'::color
?$TSS2@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`586'::$TSS2
?saved_palette@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A DB 0200H DUP (?) ; `ShowDemoWindowWidgets'::`586'::saved_palette
?$TSS3@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`586'::$TSS3
?backup_color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A DB 010H DUP (?) ; `ShowDemoWindowWidgets'::`586'::backup_color
?$TSS4@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`586'::$TSS4
?ref_color_v@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A DB 010H DUP (?) ; `ShowDemoWindowWidgets'::`586'::ref_color_v
?$TSS5@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`586'::$TSS5
?color_hsv@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A DB 010H DUP (?) ; `ShowDemoWindowWidgets'::`586'::color_hsv
?$TSS6@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`586'::$TSS6
?filter@?DIK@??ShowDemoWindowWidgets@@YAXXZ@4UImGuiTextFilter@@A DB 0118H DUP (?) ; `ShowDemoWindowWidgets'::`906'::filter
?$TSS7@?DIK@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`906'::$TSS7
?size@?BAG@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A DQ 01H DUP (?) ; `ShowDemoWindowLayout'::`262'::size
?$TSS0@?BAG@??ShowDemoWindowLayout@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowLayout'::`262'::$TSS0
	ALIGN	8

?offset@?BAG@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A DQ 01H DUP (?) ; `ShowDemoWindowLayout'::`262'::offset
?$TSS1@?BAG@??ShowDemoWindowLayout@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowLayout'::`262'::$TSS1
	ALIGN	8

?cell_padding@?JH@??ShowDemoWindowTables@@YAXXZ@4UImVec2@@A DQ 01H DUP (?) ; `ShowDemoWindowTables'::`151'::cell_padding
?$TSS0@?JH@??ShowDemoWindowTables@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowTables'::`151'::$TSS0
?text_bufs@?KJ@??ShowDemoWindowTables@@YAXXZ@4PAY0BA@DA DB 0f0H DUP (?) ; `ShowDemoWindowTables'::`169'::text_bufs
?items@?BPE@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A DB 010H DUP (?) ; `ShowDemoWindowTables'::`500'::items
?$TSS1@?BPE@??ShowDemoWindowTables@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowTables'::`500'::$TSS1
?outer_size_value@?CAP@??ShowDemoWindowTables@@YAXXZ@4UImVec2@@A DQ 01H DUP (?) ; `ShowDemoWindowTables'::`527'::outer_size_value
?$TSS2@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowTables'::`527'::$TSS2
?items@?CAP@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A DB 010H DUP (?) ; `ShowDemoWindowTables'::`527'::items
?$TSS3@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowTables'::`527'::$TSS3
?selection@?CAP@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@H@@A DB 010H DUP (?) ; `ShowDemoWindowTables'::`527'::selection
?$TSS4@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowTables'::`527'::$TSS4
?ref_saved_style@?1??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4U3@A DB 0418H DUP (?) ; `ImGui::ShowStyleEditor'::`2'::ref_saved_style
?$TSS0@?1??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA DD 01H DUP (?) ; `ImGui::ShowStyleEditor'::`2'::$TSS0
?filter@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4UImGuiTextFilter@@A DB 0118H DUP (?) ; `ImGui::ShowStyleEditor'::`41'::filter
?$TSS1@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA DD 01H DUP (?) ; `ImGui::ShowStyleEditor'::`41'::$TSS1
?console@?1??ShowExampleAppConsole@@YAXPEA_N@Z@4UExampleAppConsole@@A DB 0258H DUP (?) ; `ShowExampleAppConsole'::`2'::console
?$TSS0@?1??ShowExampleAppConsole@@YAXPEA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppConsole'::`2'::$TSS0
?log@?1??ShowExampleAppLog@@YAXPEA_N@Z@4UExampleAppLog@@A DB 0140H DUP (?) ; `ShowExampleAppLog'::`2'::log
?$TSS0@?1??ShowExampleAppLog@@YAXPEA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppLog'::`2'::$TSS0
?log@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4UImGuiTextBuffer@@A DB 010H DUP (?) ; `ShowExampleAppLongText'::`2'::log
?$TSS0@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppLongText'::`2'::$TSS0
?colf@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4UImVec4@@A DB 010H DUP (?) ; `ShowExampleAppCustomRendering'::`15'::colf
?$TSS0@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppCustomRendering'::`15'::$TSS0
?points@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4U?$ImVector@UImVec2@@@@A DB 010H DUP (?) ; `ShowExampleAppCustomRendering'::`22'::points
?$TSS1@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppCustomRendering'::`22'::$TSS1
?scrolling@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4UImVec2@@A DQ 01H DUP (?) ; `ShowExampleAppCustomRendering'::`22'::scrolling
?$TSS2@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppCustomRendering'::`22'::$TSS2
?app@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4UExampleAppDocuments@@A DB 010H DUP (?) ; `ShowExampleAppDocuments'::`2'::app
?$TSS0@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppDocuments'::`2'::$TSS0
?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A DB 010H DUP (?) ; `ShowExampleAppDocuments'::`2'::close_queue
?$TSS1@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppDocuments'::`2'::$TSS1
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN7
	DD	imagerel $LN7+181
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?memchr@@YAPEAXPEAXH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$?memchr@@YAPEAXPEAXH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec2@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??0ImVec2@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec2@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0ImVec2@@QEAA@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec4@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0ImVec4@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec4@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??0ImVec4@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowDemoWindow@ImGui@@YAXPEA_N@Z DD imagerel $LN87
	DD	imagerel $LN87+3759
	DD	imagerel $unwind$?ShowDemoWindow@ImGui@@YAXPEA_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowAboutWindow@ImGui@@YAXPEA_N@Z DD imagerel $LN31
	DD	imagerel $LN31+1616
	DD	imagerel $unwind$?ShowAboutWindow@ImGui@@YAXPEA_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z DD imagerel $LN70
	DD	imagerel $LN70+5937
	DD	imagerel $unwind$?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA DD imagerel ?dtor$0@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA
	DD	imagerel ?dtor$0@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA DD imagerel ?dtor$1@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA
	DD	imagerel ?dtor$1@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA+39
	DD	imagerel $unwind$?dtor$1@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowStyleSelector@ImGui@@YA_NPEBD@Z DD imagerel $LN9
	DD	imagerel $LN9+163
	DD	imagerel $unwind$?ShowStyleSelector@ImGui@@YA_NPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowFontSelector@ImGui@@YAXPEBD@Z DD imagerel $LN10
	DD	imagerel $LN10+334
	DD	imagerel $unwind$?ShowFontSelector@ImGui@@YAXPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowUserGuide@ImGui@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+309
	DD	imagerel $unwind$?ShowUserGuide@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@G@@QEAAAEAGH@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@G@@QEAAAEAGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SelectAll@ImGuiInputTextCallbackData@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$?SelectAll@ImGuiInputTextCallbackData@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IsActive@ImGuiTextFilter@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+109
	DD	imagerel $unwind$?IsActive@ImGuiTextFilter@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?empty@?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+91
	DD	imagerel $unwind$?empty@?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ImGuiTextFilter@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??1ImGuiTextFilter@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@D@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@D@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@D@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@D@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@D@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@D@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?empty@?$ImVector@D@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+91
	DD	imagerel $unwind$?empty@?$ImVector@D@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$ImVector@D@@QEBAHXZ DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$?size@?$ImVector@D@@QEBAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$ImVector@D@@QEBAHXZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?capacity@?$ImVector@D@@QEBAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?begin@?$ImVector@D@@QEAAPEADXZ DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$?begin@?$ImVector@D@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?front@?$ImVector@D@@QEBAAEBDXZ DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?front@?$ImVector@D@@QEBAAEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@D@@QEBAAEBDXZ DD imagerel $LN4
	DD	imagerel $LN4+122
	DD	imagerel $unwind$?back@?$ImVector@D@@QEBAAEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@D@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@D@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@D@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+121
	DD	imagerel $unwind$?resize@?$ImVector@D@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@D@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+189
	DD	imagerel $unwind$?reserve@?$ImVector@D@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@D@@QEAAXAEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+185
	DD	imagerel $unwind$?push_back@?$ImVector@D@@QEAAXAEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiTextBuffer@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+74
	DD	imagerel $unwind$??0ImGuiTextBuffer@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??AImGuiTextBuffer@@QEBADH@Z DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$??AImGuiTextBuffer@@QEBADH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?begin@ImGuiTextBuffer@@QEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+111
	DD	imagerel $unwind$?begin@ImGuiTextBuffer@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?end@ImGuiTextBuffer@@QEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+111
	DD	imagerel $unwind$?end@ImGuiTextBuffer@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@ImGuiTextBuffer@@QEBAHXZ DD imagerel $LN5
	DD	imagerel $LN5+97
	DD	imagerel $unwind$?size@ImGuiTextBuffer@@QEBAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@ImGuiTextBuffer@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?clear@ImGuiTextBuffer@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ImGuiTextBuffer@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??1ImGuiTextBuffer@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImColor@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+130
	DD	imagerel $unwind$??0ImColor@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImColor@@QEAA@AEBUImVec4@@@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??0ImColor@@QEAA@AEBUImVec4@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??BImColor@@QEBAIXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??BImColor@@QEBAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??BImColor@@QEBA?AUImVec4@@XZ DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??BImColor@@QEBA?AUImVec4@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?HSV@ImColor@@SA?AU1@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+223
	DD	imagerel $unwind$?HSV@ImColor@@SA?AU1@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImVec2@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@UImVec2@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImVec2@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@UImVec2@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImVec2@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@UImVec2@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$ImVector@UImVec2@@@@QEBAHXZ DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$?size@?$ImVector@UImVec2@@@@QEBAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImVec2@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+121
	DD	imagerel $unwind$?resize@?$ImVector@UImVec2@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z DD imagerel $LN4
	DD	imagerel $LN4+183
	DD	imagerel $unwind$?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetDebugName@ImFont@@QEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+109
	DD	imagerel $unwind$?GetDebugName@ImFont@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetCenter@ImGuiViewport@@QEBA?AUImVec2@@XZ DD imagerel $LN3
	DD	imagerel $LN3+157
	DD	imagerel $unwind$?GetCenter@ImGuiViewport@@QEBA?AUImVec2@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+169
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$_vsnprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+112
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+175
	DD	imagerel $unwind$sprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_snprintf DD imagerel $LN3
	DD	imagerel $LN3+179
	DD	imagerel $unwind$_snprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowExampleAppDocuments@@YAXPEA_N@Z DD imagerel ?ShowExampleAppDocuments@@YAXPEA_N@Z
	DD	imagerel ?ShowExampleAppDocuments@@YAXPEA_N@Z+2436
	DD	imagerel $unwind$?ShowExampleAppDocuments@@YAXPEA_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA DD imagerel ?dtor$0@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA
	DD	imagerel ?dtor$0@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA DD imagerel ?dtor$1@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA
	DD	imagerel ?dtor$1@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA+39
	DD	imagerel $unwind$?dtor$1@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowExampleAppMainMenuBar@@YAXXZ DD imagerel ?ShowExampleAppMainMenuBar@@YAXXZ
	DD	imagerel ?ShowExampleAppMainMenuBar@@YAXXZ+267
	DD	imagerel $unwind$?ShowExampleAppMainMenuBar@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowExampleAppConsole@@YAXPEA_N@Z DD imagerel ?ShowExampleAppConsole@@YAXPEA_N@Z
	DD	imagerel ?ShowExampleAppConsole@@YAXPEA_N@Z+184
	DD	imagerel $unwind$?ShowExampleAppConsole@@YAXPEA_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ShowExampleAppConsole@@YAXPEA_N@Z@4HA DD imagerel ?dtor$0@?0??ShowExampleAppConsole@@YAXPEA_N@Z@4HA
	DD	imagerel ?dtor$0@?0??ShowExampleAppConsole@@YAXPEA_N@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??ShowExampleAppConsole@@YAXPEA_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowExampleAppLog@@YAXPEA_N@Z DD imagerel ?ShowExampleAppLog@@YAXPEA_N@Z
	DD	imagerel ?ShowExampleAppLog@@YAXPEA_N@Z+646
	DD	imagerel $unwind$?ShowExampleAppLog@@YAXPEA_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ShowExampleAppLog@@YAXPEA_N@Z@4HA DD imagerel ?dtor$0@?0??ShowExampleAppLog@@YAXPEA_N@Z@4HA
	DD	imagerel ?dtor$0@?0??ShowExampleAppLog@@YAXPEA_N@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??ShowExampleAppLog@@YAXPEA_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowExampleAppLayout@@YAXPEA_N@Z DD imagerel ?ShowExampleAppLayout@@YAXPEA_N@Z
	DD	imagerel ?ShowExampleAppLayout@@YAXPEA_N@Z+799
	DD	imagerel $unwind$?ShowExampleAppLayout@@YAXPEA_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowExampleAppPropertyEditor@@YAXPEA_N@Z DD imagerel ?ShowExampleAppPropertyEditor@@YAXPEA_N@Z
	DD	imagerel ?ShowExampleAppPropertyEditor@@YAXPEA_N@Z+359
	DD	imagerel $unwind$?ShowExampleAppPropertyEditor@@YAXPEA_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowExampleAppLongText@@YAXPEA_N@Z DD imagerel ?ShowExampleAppLongText@@YAXPEA_N@Z
	DD	imagerel ?ShowExampleAppLongText@@YAXPEA_N@Z+1022
	DD	imagerel $unwind$?ShowExampleAppLongText@@YAXPEA_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA DD imagerel ?dtor$0@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA
	DD	imagerel ?dtor$0@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA DD imagerel ?dtor$1@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA
	DD	imagerel ?dtor$1@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA+36
	DD	imagerel $unwind$?dtor$1@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowExampleAppAutoResize@@YAXPEA_N@Z DD imagerel ?ShowExampleAppAutoResize@@YAXPEA_N@Z
	DD	imagerel ?ShowExampleAppAutoResize@@YAXPEA_N@Z+279
	DD	imagerel $unwind$?ShowExampleAppAutoResize@@YAXPEA_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowExampleAppConstrainedResize@@YAXPEA_N@Z DD imagerel ?ShowExampleAppConstrainedResize@@YAXPEA_N@Z
	DD	imagerel ?ShowExampleAppConstrainedResize@@YAXPEA_N@Z+1921
	DD	imagerel $unwind$?ShowExampleAppConstrainedResize@@YAXPEA_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z DD imagerel ?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z
	DD	imagerel ?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z+1303
	DD	imagerel $unwind$?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowExampleAppFullscreen@@YAXPEA_N@Z DD imagerel ?ShowExampleAppFullscreen@@YAXPEA_N@Z
	DD	imagerel ?ShowExampleAppFullscreen@@YAXPEA_N@Z+514
	DD	imagerel $unwind$?ShowExampleAppFullscreen@@YAXPEA_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowExampleAppWindowTitles@@YAXPEA_N@Z DD imagerel ?ShowExampleAppWindowTitles@@YAXPEA_N@Z
	DD	imagerel ?ShowExampleAppWindowTitles@@YAXPEA_N@Z+613
	DD	imagerel $unwind$?ShowExampleAppWindowTitles@@YAXPEA_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowExampleAppCustomRendering@@YAXPEA_N@Z DD imagerel ?ShowExampleAppCustomRendering@@YAXPEA_N@Z
	DD	imagerel ?ShowExampleAppCustomRendering@@YAXPEA_N@Z+8417
	DD	imagerel $unwind$?ShowExampleAppCustomRendering@@YAXPEA_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA DD imagerel ?dtor$0@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
	DD	imagerel ?dtor$0@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA DD imagerel ?dtor$1@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
	DD	imagerel ?dtor$1@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA+39
	DD	imagerel $unwind$?dtor$1@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA DD imagerel ?dtor$2@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
	DD	imagerel ?dtor$2@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA+39
	DD	imagerel $unwind$?dtor$2@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowExampleMenuFile@@YAXXZ DD imagerel ?ShowExampleMenuFile@@YAXXZ
	DD	imagerel ?ShowExampleMenuFile@@YAXXZ+1339
	DD	imagerel $unwind$?ShowExampleMenuFile@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowDemoWindowWidgets@@YAXXZ DD imagerel ?ShowDemoWindowWidgets@@YAXXZ
	DD	imagerel ?ShowDemoWindowWidgets@@YAXXZ+36871
	DD	imagerel $unwind$?ShowDemoWindowWidgets@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ShowDemoWindowWidgets@@YAXXZ@4HA DD imagerel ?dtor$0@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
	DD	imagerel ?dtor$0@?0??ShowDemoWindowWidgets@@YAXXZ@4HA+42
	DD	imagerel $unwind$?dtor$0@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??ShowDemoWindowWidgets@@YAXXZ@4HA DD imagerel ?dtor$1@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
	DD	imagerel ?dtor$1@?0??ShowDemoWindowWidgets@@YAXXZ@4HA+42
	DD	imagerel $unwind$?dtor$1@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??ShowDemoWindowWidgets@@YAXXZ@4HA DD imagerel ?dtor$2@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
	DD	imagerel ?dtor$2@?0??ShowDemoWindowWidgets@@YAXXZ@4HA+42
	DD	imagerel $unwind$?dtor$2@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??ShowDemoWindowWidgets@@YAXXZ@4HA DD imagerel ?dtor$3@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
	DD	imagerel ?dtor$3@?0??ShowDemoWindowWidgets@@YAXXZ@4HA+42
	DD	imagerel $unwind$?dtor$3@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$4@?0??ShowDemoWindowWidgets@@YAXXZ@4HA DD imagerel ?dtor$4@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
	DD	imagerel ?dtor$4@?0??ShowDemoWindowWidgets@@YAXXZ@4HA+42
	DD	imagerel $unwind$?dtor$4@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$5@?0??ShowDemoWindowWidgets@@YAXXZ@4HA DD imagerel ?dtor$5@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
	DD	imagerel ?dtor$5@?0??ShowDemoWindowWidgets@@YAXXZ@4HA+42
	DD	imagerel $unwind$?dtor$5@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$6@?0??ShowDemoWindowWidgets@@YAXXZ@4HA DD imagerel ?dtor$6@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
	DD	imagerel ?dtor$6@?0??ShowDemoWindowWidgets@@YAXXZ@4HA+42
	DD	imagerel $unwind$?dtor$6@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowDemoWindowLayout@@YAXXZ DD imagerel ?ShowDemoWindowLayout@@YAXXZ
	DD	imagerel ?ShowDemoWindowLayout@@YAXXZ+13188
	DD	imagerel $unwind$?ShowDemoWindowLayout@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ShowDemoWindowLayout@@YAXXZ@4HA DD imagerel ?dtor$0@?0??ShowDemoWindowLayout@@YAXXZ@4HA
	DD	imagerel ?dtor$0@?0??ShowDemoWindowLayout@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??ShowDemoWindowLayout@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??ShowDemoWindowLayout@@YAXXZ@4HA DD imagerel ?dtor$1@?0??ShowDemoWindowLayout@@YAXXZ@4HA
	DD	imagerel ?dtor$1@?0??ShowDemoWindowLayout@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$1@?0??ShowDemoWindowLayout@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowDemoWindowPopups@@YAXXZ DD imagerel ?ShowDemoWindowPopups@@YAXXZ
	DD	imagerel ?ShowDemoWindowPopups@@YAXXZ+3387
	DD	imagerel $unwind$?ShowDemoWindowPopups@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowDemoWindowTables@@YAXXZ DD imagerel ?ShowDemoWindowTables@@YAXXZ
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+23228
	DD	imagerel $unwind$?ShowDemoWindowTables@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ShowDemoWindowTables@@YAXXZ@4HA DD imagerel ?dtor$0@?0??ShowDemoWindowTables@@YAXXZ@4HA
	DD	imagerel ?dtor$0@?0??ShowDemoWindowTables@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??ShowDemoWindowTables@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??ShowDemoWindowTables@@YAXXZ@4HA DD imagerel ?dtor$1@?0??ShowDemoWindowTables@@YAXXZ@4HA
	DD	imagerel ?dtor$1@?0??ShowDemoWindowTables@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$1@?0??ShowDemoWindowTables@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??ShowDemoWindowTables@@YAXXZ@4HA DD imagerel ?dtor$2@?0??ShowDemoWindowTables@@YAXXZ@4HA
	DD	imagerel ?dtor$2@?0??ShowDemoWindowTables@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$2@?0??ShowDemoWindowTables@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??ShowDemoWindowTables@@YAXXZ@4HA DD imagerel ?dtor$3@?0??ShowDemoWindowTables@@YAXXZ@4HA
	DD	imagerel ?dtor$3@?0??ShowDemoWindowTables@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$3@?0??ShowDemoWindowTables@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$4@?0??ShowDemoWindowTables@@YAXXZ@4HA DD imagerel ?dtor$4@?0??ShowDemoWindowTables@@YAXXZ@4HA
	DD	imagerel ?dtor$4@?0??ShowDemoWindowTables@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$4@?0??ShowDemoWindowTables@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$5@?0??ShowDemoWindowTables@@YAXXZ@4HA DD imagerel ?dtor$5@?0??ShowDemoWindowTables@@YAXXZ@4HA
	DD	imagerel ?dtor$5@?0??ShowDemoWindowTables@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$5@?0??ShowDemoWindowTables@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$6@?0??ShowDemoWindowTables@@YAXXZ@4HA DD imagerel ?dtor$6@?0??ShowDemoWindowTables@@YAXXZ@4HA
	DD	imagerel ?dtor$6@?0??ShowDemoWindowTables@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$6@?0??ShowDemoWindowTables@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$7@?0??ShowDemoWindowTables@@YAXXZ@4HA DD imagerel ?dtor$7@?0??ShowDemoWindowTables@@YAXXZ@4HA
	DD	imagerel ?dtor$7@?0??ShowDemoWindowTables@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$7@?0??ShowDemoWindowTables@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowDemoWindowColumns@@YAXXZ DD imagerel ?ShowDemoWindowColumns@@YAXXZ
	DD	imagerel ?ShowDemoWindowColumns@@YAXXZ+3012
	DD	imagerel $unwind$?ShowDemoWindowColumns@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ShowDemoWindowColumns@@YAXXZ@4HA DD imagerel ?dtor$0@?0??ShowDemoWindowColumns@@YAXXZ@4HA
	DD	imagerel ?dtor$0@?0??ShowDemoWindowColumns@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??ShowDemoWindowColumns@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowDemoWindowInputs@@YAXXZ DD imagerel ?ShowDemoWindowInputs@@YAXXZ
	DD	imagerel ?ShowDemoWindowInputs@@YAXXZ+4301
	DD	imagerel $unwind$?ShowDemoWindowInputs@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?HelpMarker@@YAXPEBD@Z DD imagerel ?HelpMarker@@YAXPEBD@Z
	DD	imagerel ?HelpMarker@@YAXPEBD@Z+128
	DD	imagerel $unwind$?HelpMarker@@YAXPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ItemGetter@Funcs@?BAP@??ShowDemoWindowWidgets@@YAXXZ@SA_NPEAXHPEAPEBD@Z DD imagerel ?ItemGetter@Funcs@?BAP@??ShowDemoWindowWidgets@@YAXXZ@SA_NPEAXHPEAPEBD@Z
	DD	imagerel ?ItemGetter@Funcs@?BAP@??ShowDemoWindowWidgets@@YAXXZ@SA_NPEAXHPEAPEBD@Z+89
	DD	imagerel $unwind$?ItemGetter@Funcs@?BAP@??ShowDemoWindowWidgets@@YAXXZ@SA_NPEAXHPEAPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FilterImGuiLetters@TextFilters@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z DD imagerel ?FilterImGuiLetters@TextFilters@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z
	DD	imagerel ?FilterImGuiLetters@TextFilters@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z+110
	DD	imagerel $unwind$?FilterImGuiLetters@TextFilters@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MyCallback@Funcs@?BMD@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z DD imagerel ?MyCallback@Funcs@?BMD@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z
	DD	imagerel ?MyCallback@Funcs@?BMD@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z+455
	DD	imagerel $unwind$?MyCallback@Funcs@?BMD@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MyResizeCallback@Funcs@?BMK@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z DD imagerel ?MyResizeCallback@Funcs@?BMK@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z
	DD	imagerel ?MyResizeCallback@Funcs@?BMK@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z+173
	DD	imagerel $unwind$?MyResizeCallback@Funcs@?BMK@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MyInputTextMultiline@Funcs@?BMK@??ShowDemoWindowWidgets@@YAXXZ@SA_NPEBDPEAU?$ImVector@D@@AEBUImVec2@@H@Z DD imagerel ?MyInputTextMultiline@Funcs@?BMK@??ShowDemoWindowWidgets@@YAXXZ@SA_NPEBDPEAU?$ImVector@D@@AEBUImVec2@@H@Z
	DD	imagerel ?MyInputTextMultiline@Funcs@?BMK@??ShowDemoWindowWidgets@@YAXXZ@SA_NPEBDPEAU?$ImVector@D@@AEBUImVec2@@H@Z+225
	DD	imagerel $unwind$?MyInputTextMultiline@Funcs@?BMK@??ShowDemoWindowWidgets@@YAXXZ@SA_NPEBDPEAU?$ImVector@D@@AEBUImVec2@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Fmy_str@?BMK@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ DD imagerel ??__Fmy_str@?BMK@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ
	DD	imagerel ??__Fmy_str@?BMK@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ+52
	DD	imagerel $unwind$??__Fmy_str@?BMK@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@H@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@H@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@H@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@H@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@H@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@H@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@H@@QEAAAEAHH@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@H@@QEAAAEAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@H@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@H@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@H@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@H@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@H@@QEAAXAEBH@Z DD imagerel $LN4
	DD	imagerel $LN4+183
	DD	imagerel $unwind$?push_back@?$ImVector@H@@QEAAXAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$ImVector@H@@QEAAPEAHPEBH@Z DD imagerel $LN5
	DD	imagerel $LN5+300
	DD	imagerel $unwind$?erase@?$ImVector@H@@QEAAPEAHPEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase_unsorted@?$ImVector@H@@QEAAPEAHPEBH@Z DD imagerel $LN6
	DD	imagerel $LN6+304
	DD	imagerel $unwind$?erase_unsorted@?$ImVector@H@@QEAAPEAHPEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?contains@?$ImVector@H@@QEBA_NAEBH@Z DD imagerel $LN8
	DD	imagerel $LN8+201
	DD	imagerel $unwind$?contains@?$ImVector@H@@QEBA_NAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?find@?$ImVector@H@@QEAAPEAHAEBH@Z DD imagerel $LN7
	DD	imagerel $LN7+148
	DD	imagerel $unwind$?find@?$ImVector@H@@QEAAPEAHAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?find_erase_unsorted@?$ImVector@H@@QEAA_NAEBH@Z DD imagerel $LN4
	DD	imagerel $LN4+133
	DD	imagerel $unwind$?find_erase_unsorted@?$ImVector@H@@QEAA_NAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Factive_tabs@?CAI@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ DD imagerel ??__Factive_tabs@?CAI@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ
	DD	imagerel ??__Factive_tabs@?CAI@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ+52
	DD	imagerel $unwind$??__Factive_tabs@?CAI@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Sin@Funcs@?CCM@??ShowDemoWindowWidgets@@YAXXZ@SAMPEAXH@Z DD imagerel ?Sin@Funcs@?CCM@??ShowDemoWindowWidgets@@YAXXZ@SAMPEAXH@Z
	DD	imagerel ?Sin@Funcs@?CCM@??ShowDemoWindowWidgets@@YAXXZ@SAMPEAXH@Z+78
	DD	imagerel $unwind$?Sin@Funcs@?CCM@??ShowDemoWindowWidgets@@YAXXZ@SAMPEAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Saw@Funcs@?CCM@??ShowDemoWindowWidgets@@YAXXZ@SAMPEAXH@Z DD imagerel ?Saw@Funcs@?CCM@??ShowDemoWindowWidgets@@YAXXZ@SAMPEAXH@Z
	DD	imagerel ?Saw@Funcs@?CCM@??ShowDemoWindowWidgets@@YAXXZ@SAMPEAXH@Z+111
	DD	imagerel $unwind$?Saw@Funcs@?CCM@??ShowDemoWindowWidgets@@YAXXZ@SAMPEAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ffilter@?DIK@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ DD imagerel ??__Ffilter@?DIK@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ
	DD	imagerel ??__Ffilter@?DIK@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ+52
	DD	imagerel $unwind$??__Ffilter@?DIK@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CompareWithSortSpecs@MyItem@?A0x1ed25892@@SAHPEBX0@Z DD imagerel ?CompareWithSortSpecs@MyItem@?A0x1ed25892@@SAHPEBX0@Z
	DD	imagerel ?CompareWithSortSpecs@MyItem@?A0x1ed25892@@SAHPEBX0@Z+468
	DD	imagerel $unwind$?CompareWithSortSpecs@MyItem@?A0x1ed25892@@SAHPEBX0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PushStyleCompact@@YAXXZ DD imagerel ?PushStyleCompact@@YAXXZ
	DD	imagerel ?PushStyleCompact@@YAXXZ+173
	DD	imagerel $unwind$?PushStyleCompact@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PopStyleCompact@@YAXXZ DD imagerel ?PopStyleCompact@@YAXXZ
	DD	imagerel ?PopStyleCompact@@YAXXZ+50
	DD	imagerel $unwind$?PopStyleCompact@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EditTableSizingFlags@@YAXPEAH@Z DD imagerel ?EditTableSizingFlags@@YAXPEAH@Z
	DD	imagerel ?EditTableSizingFlags@@YAXPEAH@Z+655
	DD	imagerel $unwind$?EditTableSizingFlags@@YAXPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EditTableColumnsFlags@@YAXPEAH@Z DD imagerel ?EditTableColumnsFlags@@YAXPEAH@Z
	DD	imagerel ?EditTableColumnsFlags@@YAXPEAH@Z+642
	DD	imagerel $unwind$?EditTableColumnsFlags@@YAXPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowTableColumnsStatusFlags@@YAXH@Z DD imagerel ?ShowTableColumnsStatusFlags@@YAXH@Z
	DD	imagerel ?ShowTableColumnsStatusFlags@@YAXH@Z+150
	DD	imagerel $unwind$?ShowTableColumnsStatusFlags@@YAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DisplayNode@MyTreeNode@?BIO@??ShowDemoWindowTables@@YAXXZ@SAXPEBU1?BIO@??2@YAXXZ@0@Z DD imagerel ?DisplayNode@MyTreeNode@?BIO@??ShowDemoWindowTables@@YAXXZ@SAXPEBU1?BIO@??2@YAXXZ@0@Z
	DD	imagerel ?DisplayNode@MyTreeNode@?BIO@??ShowDemoWindowTables@@YAXXZ@SAXPEBU1?BIO@??2@YAXXZ@0@Z+352
	DD	imagerel $unwind$?DisplayNode@MyTreeNode@?BIO@??ShowDemoWindowTables@@YAXXZ@SAXPEBU1?BIO@??2@YAXXZ@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAAEAUMyItem@?A0x1ed25892@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAAEAUMyItem@?A0x1ed25892@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UMyItem@?A0x1ed25892@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UMyItem@?A0x1ed25892@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAXHAEBUMyItem@?A0x1ed25892@@@Z DD imagerel $LN8
	DD	imagerel $LN8+218
	DD	imagerel $unwind$?resize@?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAXHAEBUMyItem@?A0x1ed25892@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Fitems@?BPE@??ShowDemoWindowTables@@YAXXZ@YAXXZ DD imagerel ??__Fitems@?BPE@??ShowDemoWindowTables@@YAXXZ@YAXXZ
	DD	imagerel ??__Fitems@?BPE@??ShowDemoWindowTables@@YAXXZ@YAXXZ+52
	DD	imagerel $unwind$??__Fitems@?BPE@??ShowDemoWindowTables@@YAXXZ@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Fitems@?CAP@??ShowDemoWindowTables@@YAXXZ@YAXXZ DD imagerel ??__Fitems@?CAP@??ShowDemoWindowTables@@YAXXZ@YAXXZ
	DD	imagerel ??__Fitems@?CAP@??ShowDemoWindowTables@@YAXXZ@YAXXZ+52
	DD	imagerel $unwind$??__Fitems@?CAP@??ShowDemoWindowTables@@YAXXZ@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Fselection@?CAP@??ShowDemoWindowTables@@YAXXZ@YAXXZ DD imagerel ??__Fselection@?CAP@??ShowDemoWindowTables@@YAXXZ@YAXXZ
	DD	imagerel ??__Fselection@?CAP@??ShowDemoWindowTables@@YAXXZ@YAXXZ+52
	DD	imagerel $unwind$??__Fselection@?CAP@??ShowDemoWindowTables@@YAXXZ@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IsLegacyNativeDupe@funcs@?BA@??ShowDemoWindowInputs@@YAXXZ@SA_NW4ImGuiKey@@@Z DD imagerel ?IsLegacyNativeDupe@funcs@?BA@??ShowDemoWindowInputs@@YAXXZ@SA_NW4ImGuiKey@@@Z
	DD	imagerel ?IsLegacyNativeDupe@funcs@?BA@??ShowDemoWindowInputs@@YAXXZ@SA_NW4ImGuiKey@@@Z+113
	DD	imagerel $unwind$?IsLegacyNativeDupe@funcs@?BA@??ShowDemoWindowInputs@@YAXXZ@SA_NW4ImGuiKey@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ffilter@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@YAXXZ DD imagerel ??__Ffilter@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@YAXXZ
	DD	imagerel ??__Ffilter@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@YAXXZ+52
	DD	imagerel $unwind$??__Ffilter@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@PEAD@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@PEAD@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@PEAD@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@PEAD@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@PEAD@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@PEAD@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@PEAD@@QEAAAEAPEADH@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@PEAD@@QEAAAEAPEADH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?begin@?$ImVector@PEAD@@QEAAPEAPEADXZ DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$?begin@?$ImVector@PEAD@@QEAAPEAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@PEAD@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@PEAD@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@PEAD@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@PEAD@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@PEAD@@QEAAXAEBQEAD@Z DD imagerel $LN4
	DD	imagerel $LN4+183
	DD	imagerel $unwind$?push_back@?$ImVector@PEAD@@QEAAXAEBQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$ImVector@PEAD@@QEAAPEAPEADPEBQEAD@Z DD imagerel $LN5
	DD	imagerel $LN5+300
	DD	imagerel $unwind$?erase@?$ImVector@PEAD@@QEAAPEAPEADPEBQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@PEBD@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@PEBD@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@PEBD@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@PEBD@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@PEBD@@QEAAAEAPEBDH@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@PEBD@@QEAAAEAPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@PEBD@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@PEBD@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@PEBD@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@PEBD@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@PEBD@@QEAAXAEBQEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+183
	DD	imagerel $unwind$?push_back@?$ImVector@PEBD@@QEAAXAEBQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ExampleAppConsole@@QEAA@XZ DD imagerel $LN11
	DD	imagerel $LN11+481
	DD	imagerel $unwind$??0ExampleAppConsole@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ExampleAppConsole@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0ExampleAppConsole@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0ExampleAppConsole@@QEAA@XZ@4HA+46
	DD	imagerel $unwind$?dtor$0@?0???0ExampleAppConsole@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0ExampleAppConsole@@QEAA@XZ@4HA DD imagerel ?dtor$1@?0???0ExampleAppConsole@@QEAA@XZ@4HA
	DD	imagerel ?dtor$1@?0???0ExampleAppConsole@@QEAA@XZ@4HA+46
	DD	imagerel $unwind$?dtor$1@?0???0ExampleAppConsole@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0???0ExampleAppConsole@@QEAA@XZ@4HA DD imagerel ?dtor$2@?0???0ExampleAppConsole@@QEAA@XZ@4HA
	DD	imagerel ?dtor$2@?0???0ExampleAppConsole@@QEAA@XZ@4HA+46
	DD	imagerel $unwind$?dtor$2@?0???0ExampleAppConsole@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0???0ExampleAppConsole@@QEAA@XZ@4HA DD imagerel ?dtor$3@?0???0ExampleAppConsole@@QEAA@XZ@4HA
	DD	imagerel ?dtor$3@?0???0ExampleAppConsole@@QEAA@XZ@4HA+46
	DD	imagerel $unwind$?dtor$3@?0???0ExampleAppConsole@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ExampleAppConsole@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+236
	DD	imagerel $unwind$??1ExampleAppConsole@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Stricmp@ExampleAppConsole@@SAHPEBD0@Z DD imagerel $LN5
	DD	imagerel $LN5+169
	DD	imagerel $unwind$?Stricmp@ExampleAppConsole@@SAHPEBD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Strnicmp@ExampleAppConsole@@SAHPEBD0H@Z DD imagerel $LN5
	DD	imagerel $LN5+207
	DD	imagerel $unwind$?Strnicmp@ExampleAppConsole@@SAHPEBD0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Strdup@ExampleAppConsole@@SAPEADPEBD@Z DD imagerel $LN5
	DD	imagerel $LN5+178
	DD	imagerel $unwind$?Strdup@ExampleAppConsole@@SAPEADPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Strtrim@ExampleAppConsole@@SAXPEAD@Z DD imagerel $LN5
	DD	imagerel $LN5+136
	DD	imagerel $unwind$?Strtrim@ExampleAppConsole@@SAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearLog@ExampleAppConsole@@QEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+143
	DD	imagerel $unwind$?ClearLog@ExampleAppConsole@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddLog@ExampleAppConsole@@QEAAXPEBDZZ DD imagerel $LN5
	DD	imagerel $LN5+268
	DD	imagerel $unwind$?AddLog@ExampleAppConsole@@QEAAXPEBDZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Draw@ExampleAppConsole@@QEAAXPEBDPEA_N@Z DD imagerel $LN30
	DD	imagerel $LN30+1644
	DD	imagerel $unwind$?Draw@ExampleAppConsole@@QEAAXPEBDPEA_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ExecCommand@ExampleAppConsole@@QEAAXPEBD@Z DD imagerel $LN21
	DD	imagerel $LN21+693
	DD	imagerel $unwind$?ExecCommand@ExampleAppConsole@@QEAAXPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TextEditCallbackStub@ExampleAppConsole@@SAHPEAUImGuiInputTextCallbackData@@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?TextEditCallbackStub@ExampleAppConsole@@SAHPEAUImGuiInputTextCallbackData@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z DD imagerel $LN46
	DD	imagerel $LN46+1554
	DD	imagerel $unwind$?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z@4HA DD imagerel ?dtor$0@?0??TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z@4HA
	DD	imagerel ?dtor$0@?0??TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$__vcrt_va_start_verify_argument_type@PEBD@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??$__vcrt_va_start_verify_argument_type@PEBD@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Fconsole@?1??ShowExampleAppConsole@@YAXPEA_N@Z@YAXXZ DD imagerel ??__Fconsole@?1??ShowExampleAppConsole@@YAXPEA_N@Z@YAXXZ
	DD	imagerel ??__Fconsole@?1??ShowExampleAppConsole@@YAXPEA_N@Z@YAXXZ+52
	DD	imagerel $unwind$??__Fconsole@?1??ShowExampleAppConsole@@YAXPEA_N@Z@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ExampleAppLog@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+162
	DD	imagerel $unwind$??0ExampleAppLog@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ExampleAppLog@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0ExampleAppLog@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0ExampleAppLog@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0ExampleAppLog@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0ExampleAppLog@@QEAA@XZ@4HA DD imagerel ?dtor$1@?0???0ExampleAppLog@@QEAA@XZ@4HA
	DD	imagerel ?dtor$1@?0???0ExampleAppLog@@QEAA@XZ@4HA+43
	DD	imagerel $unwind$?dtor$1@?0???0ExampleAppLog@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0???0ExampleAppLog@@QEAA@XZ@4HA DD imagerel ?dtor$2@?0???0ExampleAppLog@@QEAA@XZ@4HA
	DD	imagerel ?dtor$2@?0???0ExampleAppLog@@QEAA@XZ@4HA+46
	DD	imagerel $unwind$?dtor$2@?0???0ExampleAppLog@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Clear@ExampleAppLog@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$?Clear@ExampleAppLog@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddLog@ExampleAppLog@@QEAAXPEBDZZ DD imagerel $LN7
	DD	imagerel $LN7+286
	DD	imagerel $unwind$?AddLog@ExampleAppLog@@QEAAXPEBDZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z DD imagerel $LN26
	DD	imagerel $LN26+1278
	DD	imagerel $unwind$?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z@4HA DD imagerel ?dtor$0@?0??Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z@4HA
	DD	imagerel ?dtor$0@?0??Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ExampleAppLog@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+107
	DD	imagerel $unwind$??1ExampleAppLog@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Flog@?1??ShowExampleAppLog@@YAXPEA_N@Z@YAXXZ DD imagerel ??__Flog@?1??ShowExampleAppLog@@YAXPEA_N@Z@YAXXZ
	DD	imagerel ??__Flog@?1??ShowExampleAppLog@@YAXPEA_N@Z@YAXXZ+52
	DD	imagerel $unwind$??__Flog@?1??ShowExampleAppLog@@YAXPEA_N@Z@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShowPlaceholderObject@@YAXPEBDH@Z DD imagerel ?ShowPlaceholderObject@@YAXPEBDH@Z
	DD	imagerel ?ShowPlaceholderObject@@YAXPEBDH@Z+464
	DD	imagerel $unwind$?ShowPlaceholderObject@@YAXPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Flog@?1??ShowExampleAppLongText@@YAXPEA_N@Z@YAXXZ DD imagerel ??__Flog@?1??ShowExampleAppLongText@@YAXPEA_N@Z@YAXXZ
	DD	imagerel ??__Flog@?1??ShowExampleAppLongText@@YAXPEA_N@Z@YAXXZ+52
	DD	imagerel $unwind$??__Flog@?1??ShowExampleAppLongText@@YAXPEA_N@Z@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AspectRatio@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z DD imagerel ?AspectRatio@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z
	DD	imagerel ?AspectRatio@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z+193
	DD	imagerel $unwind$?AspectRatio@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Square@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z DD imagerel ?Square@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z
	DD	imagerel ?Square@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z+157
	DD	imagerel $unwind$?Square@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Step@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z DD imagerel ?Step@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z
	DD	imagerel ?Step@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z+176
	DD	imagerel $unwind$?Step@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Fpoints@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@YAXXZ DD imagerel ??__Fpoints@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@YAXXZ
	DD	imagerel ??__Fpoints@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@YAXXZ+52
	DD	imagerel $unwind$??__Fpoints@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0MyDocument@@QEAA@PEBD_NAEBUImVec4@@@Z DD imagerel $LN3
	DD	imagerel $LN3+193
	DD	imagerel $unwind$??0MyDocument@@QEAA@PEBD_NAEBUImVec4@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DoOpen@MyDocument@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$?DoOpen@MyDocument@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DoQueueClose@MyDocument@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$?DoQueueClose@MyDocument@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DoForceClose@MyDocument@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?DoForceClose@MyDocument@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DoSave@MyDocument@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$?DoSave@MyDocument@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DisplayContents@MyDocument@@SAXPEAU1@@Z DD imagerel $LN5
	DD	imagerel $LN5+292
	DD	imagerel $unwind$?DisplayContents@MyDocument@@SAXPEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DisplayContextMenu@MyDocument@@SAXPEAU1@@Z DD imagerel $LN6
	DD	imagerel $LN6+258
	DD	imagerel $unwind$?DisplayContextMenu@MyDocument@@SAXPEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UMyDocument@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@UMyDocument@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UMyDocument@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@UMyDocument@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UMyDocument@@@@QEAAAEAUMyDocument@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@UMyDocument@@@@QEAAAEAUMyDocument@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UMyDocument@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UMyDocument@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UMyDocument@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@UMyDocument@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@UMyDocument@@@@QEAAXAEBUMyDocument@@@Z DD imagerel $LN4
	DD	imagerel $LN4+183
	DD	imagerel $unwind$?push_back@?$ImVector@UMyDocument@@@@QEAAXAEBUMyDocument@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ExampleAppDocuments@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+627
	DD	imagerel $unwind$??0ExampleAppDocuments@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ExampleAppDocuments@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0ExampleAppDocuments@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0ExampleAppDocuments@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0ExampleAppDocuments@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ExampleAppDocuments@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??1ExampleAppDocuments@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?NotifyOfDocumentsClosedElsewhere@@YAXAEAUExampleAppDocuments@@@Z DD imagerel ?NotifyOfDocumentsClosedElsewhere@@YAXAEAUExampleAppDocuments@@@Z
	DD	imagerel ?NotifyOfDocumentsClosedElsewhere@@YAXAEAUExampleAppDocuments@@@Z+158
	DD	imagerel $unwind$?NotifyOfDocumentsClosedElsewhere@@YAXAEAUExampleAppDocuments@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Fapp@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@YAXXZ DD imagerel ??__Fapp@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@YAXXZ
	DD	imagerel ??__Fapp@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@YAXXZ+52
	DD	imagerel $unwind$??__Fapp@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@PEAUMyDocument@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0?$ImVector@PEAUMyDocument@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@PEAUMyDocument@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??1?$ImVector@PEAUMyDocument@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@PEAUMyDocument@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+124
	DD	imagerel $unwind$?clear@?$ImVector@PEAUMyDocument@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?empty@?$ImVector@PEAUMyDocument@@@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+91
	DD	imagerel $unwind$?empty@?$ImVector@PEAUMyDocument@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@PEAUMyDocument@@@@QEAAAEAPEAUMyDocument@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@PEAUMyDocument@@@@QEAAAEAPEAUMyDocument@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@PEAUMyDocument@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@PEAUMyDocument@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@PEAUMyDocument@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$?reserve@?$ImVector@PEAUMyDocument@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@PEAUMyDocument@@@@QEAAXAEBQEAUMyDocument@@@Z DD imagerel $LN4
	DD	imagerel $LN4+183
	DD	imagerel $unwind$?push_back@?$ImVector@PEAUMyDocument@@@@QEAAXAEBQEAUMyDocument@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Fclose_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@YAXXZ DD imagerel ??__Fclose_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@YAXXZ
	DD	imagerel ??__Fclose_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@YAXXZ+52
	DD	imagerel $unwind$??__Fclose_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@YAXXZ
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@ff7fffff
CONST	SEGMENT
__real@ff7fffff DD 0ff7fffffr			; -3.40282e+38
CONST	ENDS
;	COMDAT __real@d01502f9
CONST	SEGMENT
__real@d01502f9 DD 0d01502f9r			; -1e+10
CONST	ENDS
;	COMDAT __real@c3b40000
CONST	SEGMENT
__real@c3b40000 DD 0c3b40000r			; -360
CONST	ENDS
;	COMDAT __real@c3200000
CONST	SEGMENT
__real@c3200000 DD 0c3200000r			; -160
CONST	ENDS
;	COMDAT __real@c30c6bf526340000
CONST	SEGMENT
__real@c30c6bf526340000 DQ 0c30c6bf526340000r	; -1e+15
CONST	ENDS
;	COMDAT __real@c2c80000
CONST	SEGMENT
__real@c2c80000 DD 0c2c80000r			; -100
CONST	ENDS
;	COMDAT __real@c1a00000
CONST	SEGMENT
__real@c1a00000 DD 0c1a00000r			; -20
CONST	ENDS
;	COMDAT __real@c1400000
CONST	SEGMENT
__real@c1400000 DD 0c1400000r			; -12
CONST	ENDS
;	COMDAT __real@c1200000
CONST	SEGMENT
__real@c1200000 DD 0c1200000r			; -10
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bdcccccd
CONST	SEGMENT
__real@bdcccccd DD 0bdcccccdr			; -0.1
CONST	ENDS
;	COMDAT __real@80800000
CONST	SEGMENT
__real@80800000 DD 080800000r			; -1.17549e-38
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@501502f9
CONST	SEGMENT
__real@501502f9 DD 0501502f9r			; 1e+10
CONST	ENDS
;	COMDAT __real@44db2000
CONST	SEGMENT
__real@44db2000 DD 044db2000r			; 1753
CONST	ENDS
;	COMDAT __real@44bb8000
CONST	SEGMENT
__real@44bb8000 DD 044bb8000r			; 1500
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@44480000
CONST	SEGMENT
__real@44480000 DD 044480000r			; 800
CONST	ENDS
;	COMDAT __real@442a0000
CONST	SEGMENT
__real@442a0000 DD 0442a0000r			; 680
CONST	ENDS
;	COMDAT __real@44228000
CONST	SEGMENT
__real@44228000 DD 044228000r			; 650
CONST	ENDS
;	COMDAT __real@44160000
CONST	SEGMENT
__real@44160000 DD 044160000r			; 600
CONST	ENDS
;	COMDAT __real@44098000
CONST	SEGMENT
__real@44098000 DD 044098000r			; 550
CONST	ENDS
;	COMDAT __real@44020000
CONST	SEGMENT
__real@44020000 DD 044020000r			; 520
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@43e10000
CONST	SEGMENT
__real@43e10000 DD 043e10000r			; 450
CONST	ENDS
;	COMDAT __real@43dc0000
CONST	SEGMENT
__real@43dc0000 DD 043dc0000r			; 440
CONST	ENDS
;	COMDAT __real@43d70000
CONST	SEGMENT
__real@43d70000 DD 043d70000r			; 430
CONST	ENDS
;	COMDAT __real@43c80000
CONST	SEGMENT
__real@43c80000 DD 043c80000r			; 400
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@43960000
CONST	SEGMENT
__real@43960000 DD 043960000r			; 300
CONST	ENDS
;	COMDAT __real@43820000
CONST	SEGMENT
__real@43820000 DD 043820000r			; 260
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@43200000
CONST	SEGMENT
__real@43200000 DD 043200000r			; 160
CONST	ENDS
;	COMDAT __real@43160000
CONST	SEGMENT
__real@43160000 DD 043160000r			; 150
CONST	ENDS
;	COMDAT __real@430c6bf526340000
CONST	SEGMENT
__real@430c6bf526340000 DQ 0430c6bf526340000r	; 1e+15
CONST	ENDS
;	COMDAT __real@430c0000
CONST	SEGMENT
__real@430c0000 DD 0430c0000r			; 140
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@42f00000
CONST	SEGMENT
__real@42f00000 DD 042f00000r			; 120
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42c00000
CONST	SEGMENT
__real@42c00000 DD 042c00000r			; 96
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@42a00000
CONST	SEGMENT
__real@42a00000 DD 042a00000r			; 80
CONST	ENDS
;	COMDAT __real@428c0000
CONST	SEGMENT
__real@428c0000 DD 0428c0000r			; 70
CONST	ENDS
;	COMDAT __real@42820000
CONST	SEGMENT
__real@42820000 DD 042820000r			; 65
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@420c0000
CONST	SEGMENT
__real@420c0000 DD 0420c0000r			; 35
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@41f80000
CONST	SEGMENT
__real@41f80000 DD 041f80000r			; 31
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41e00000
CONST	SEGMENT
__real@41e00000 DD 041e00000r			; 28
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@41600000
CONST	SEGMENT
__real@41600000 DD 041600000r			; 14
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@41233333
CONST	SEGMENT
__real@41233333 DD 041233333r			; 10.2
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@40c80000
CONST	SEGMENT
__real@40c80000 DD 040c80000r			; 6.25
CONST	ENDS
;	COMDAT __real@40b00000
CONST	SEGMENT
__real@40b00000 DD 040b00000r			; 5.5
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40490e56
CONST	SEGMENT
__real@40490e56 DD 040490e56r			; 3.1415
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe38e39
CONST	SEGMENT
__real@3fe38e39 DD 03fe38e39r			; 1.77778
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3fa66666
CONST	SEGMENT
__real@3fa66666 DD 03fa66666r			; 1.3
CONST	ENDS
;	COMDAT __real@3f91111120000000
CONST	SEGMENT
__real@3f91111120000000 DQ 03f91111120000000r	; 0.0166667
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f847ae140000000
CONST	SEGMENT
__real@3f847ae140000000 DQ 03f847ae140000000r	; 0.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f48c8c9
CONST	SEGMENT
__real@3f48c8c9 DD 03f48c8c9r			; 0.784314
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3f1a9a9b
CONST	SEGMENT
__real@3f1a9a9b DD 03f1a9a9br			; 0.603922
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f109091
CONST	SEGMENT
__real@3f109091 DD 03f109091r			; 0.564706
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ee4e4e5
CONST	SEGMENT
__real@3ee4e4e5 DD 03ee4e4e5r			; 0.447059
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e6b851f
CONST	SEGMENT
__real@3e6b851f DD 03e6b851fr			; 0.23
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3ba3d70a
CONST	SEGMENT
__real@3ba3d70a DD 03ba3d70ar			; 0.005
CONST	ENDS
;	COMDAT __real@3a03126f
CONST	SEGMENT
__real@3a03126f DD 03a03126fr			; 0.0005
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'S'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@NPHOAPAC@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAt?$AA?5?$AA?$DM?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CL?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@NPHOAPAC@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAt?$AA?5?$AA?$DM?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CL?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ DB 'i'
	DB	00H, 't', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'D', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'D', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'S'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JINPPBEP@No?$AA@
CONST	SEGMENT
??_C@_02JINPPBEP@No?$AA@ DB 'No', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CCLAEDDF@Yes?$AA@
CONST	SEGMENT
??_C@_03CCLAEDDF@Yes?$AA@ DB 'Yes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MIJNFGED@frame?$AA@
CONST	SEGMENT
??_C@_05MIJNFGED@frame?$AA@ DB 'frame', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FLCNDGLJ@Save?5change?5to?5the?5following?5ite@
CONST	SEGMENT
??_C@_0CE@FLCNDGLJ@Save?5change?5to?5the?5following?5ite@ DB 'Save change'
	DB	' to the following items?', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DIODKGEP@Save?$DP?$AA@
CONST	SEGMENT
??_C@_05DIODKGEP@Save?$DP?$AA@ DB 'Save?', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBABLPF@Exit?$AA@
CONST	SEGMENT
??_C@_04LBABLPF@Exit?$AA@ DB 'Exit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07IHMOANJM@Ctrl?$CLF4?$AA@
CONST	SEGMENT
??_C@_07IHMOANJM@Ctrl?$CLF4?$AA@ DB 'Ctrl+F4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HCFGHAAC@Close?5All?5Documents?$AA@
CONST	SEGMENT
??_C@_0BE@HCFGHAAC@Close?5All?5Documents?$AA@ DB 'Close All Documents', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BKDKPNMJ@Example?3?5Documents?$AA@
CONST	SEGMENT
??_C@_0BD@BKDKPNMJ@Example?3?5Documents?$AA@ DB 'Example: Documents', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ILMKPHFK@Some?5Document?$AA@
CONST	SEGMENT
??_C@_0O@ILMKPHFK@Some?5Document?$AA@ DB 'Some Document', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GMCEAMGE@A?5Rather?5Long?5Title?$AA@
CONST	SEGMENT
??_C@_0BE@GMCEAMGE@A?5Rather?5Long?5Title?$AA@ DB 'A Rather Long Title', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BPAOMENE@Tomato?$AA@
CONST	SEGMENT
??_C@_06BPAOMENE@Tomato?$AA@ DB 'Tomato', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JOCEHIMN@Carrot?$AA@
CONST	SEGMENT
??_C@_06JOCEHIMN@Carrot?$AA@ DB 'Carrot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MEKMCLOD@Eggplant?$AA@
CONST	SEGMENT
??_C@_08MEKMCLOD@Eggplant?$AA@ DB 'Eggplant', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KPHKCHJL@Lettuce?$AA@
CONST	SEGMENT
??_C@_07KPHKCHJL@Lettuce?$AA@ DB 'Lettuce', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NCJMBMDI@CTRL?$CLW?$AA@
CONST	SEGMENT
??_C@_06NCJMBMDI@CTRL?$CLW?$AA@ DB 'CTRL+W', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGPANJDM@CTRL?$CLS?$AA@
CONST	SEGMENT
??_C@_06LGPANJDM@CTRL?$CLS?$AA@ DB 'CTRL+S', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HKLKIEAD@Save?5?$CFs?$AA@
CONST	SEGMENT
??_C@_07HKLKIEAD@Save?5?$CFs?$AA@ DB 'Save %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CGNGJFJO@Modify?$AA@
CONST	SEGMENT
??_C@_06CGNGJFJO@Modify?$AA@ DB 'Modify', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HM@PALHCHMO@Lorem?5ipsum?5dolor?5sit?5amet?0?5cons@
CONST	SEGMENT
??_C@_0HM@PALHCHMO@Lorem?5ipsum?5dolor?5sit?5amet?0?5cons@ DB 'Lorem ipsu'
	DB	'm dolor sit amet, consectetur adipiscing elit, sed do eiusmod'
	DB	' tempor incididunt ut labore et dolore magna aliqua.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LKIEAKBN@Document?5?$CC?$CFs?$CC?$AA@
CONST	SEGMENT
??_C@_0O@LKIEAKBN@Document?5?$CC?$CFs?$CC?$AA@ DB 'Document "%s"', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@MJHHHC@The?5Foreground?5draw?5list?5will?5be@
CONST	SEGMENT
??_C@_0EJ@MJHHHC@The?5Foreground?5draw?5list?5will?5be@ DB 'The Foregroun'
	DB	'd draw list will be rendered over every Dear ImGui windows.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MBHOHPNH@Draw?5in?5Foreground?5draw?5list?$AA@
CONST	SEGMENT
??_C@_0BN@MBHOHPNH@Draw?5in?5Foreground?5draw?5list?$AA@ DB 'Draw in Fore'
	DB	'ground draw list', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@HADEKICD@The?5Background?5draw?5list?5will?5be@
CONST	SEGMENT
??_C@_0EK@HADEKICD@The?5Background?5draw?5list?5will?5be@ DB 'The Backgro'
	DB	'und draw list will be rendered below every Dear ImGui windows'
	DB	'.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BHPCJJNA@Draw?5in?5Background?5draw?5list?$AA@
CONST	SEGMENT
??_C@_0BN@BHPCJJNA@Draw?5in?5Background?5draw?5list?$AA@ DB 'Draw in Back'
	DB	'ground draw list', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CEOBEDIK@BG?1FG?5draw?5lists?$AA@
CONST	SEGMENT
??_C@_0BB@CEOBEDIK@BG?1FG?5draw?5lists?$AA@ DB 'BG/FG draw lists', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DKNMODFD@Remove?5all?$AA@
CONST	SEGMENT
??_C@_0L@DKNMODFD@Remove?5all?$AA@ DB 'Remove all', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IEFPLEH@Remove?5one?$AA@
CONST	SEGMENT
??_C@_0L@IEFPLEH@Remove?5one?$AA@ DB 'Remove one', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07JKKCBBMM@context?$AA@
CONST	SEGMENT
??_C@_07JKKCBBMM@context?$AA@ DB 'context', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DODEBHEI@canvas?$AA@
CONST	SEGMENT
??_C@_06DODEBHEI@canvas?$AA@ DB 'canvas', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@MNMLMGAD@Mouse?5Left?3?5drag?5to?5add?5lines?0?6M@
CONST	SEGMENT
??_C@_0FE@MNMLMGAD@Mouse?5Left?3?5drag?5to?5add?5lines?0?6M@ DB 'Mouse Le'
	DB	'ft: drag to add lines,', 0aH, 'Mouse Right: drag to scroll, c'
	DB	'lick for context menu.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IDDJEBPH@Enable?5context?5menu?$AA@
CONST	SEGMENT
??_C@_0BE@IDDJEBPH@Enable?5context?5menu?$AA@ DB 'Enable context menu', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JHCNMMOE@Enable?5grid?$AA@
CONST	SEGMENT
??_C@_0M@JHCNMMOE@Enable?5grid?$AA@ DB 'Enable grid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06PBIJCONE@Canvas?$AA@
CONST	SEGMENT
??_C@_06PBIJCONE@Canvas?$AA@ DB 'Canvas', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PDOBBJNA@Color?$AA@
CONST	SEGMENT
??_C@_05PDOBBJNA@Color?$AA@ DB 'Color', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MEDFNGBG@Curves?5segments?5override?$AA@
CONST	SEGMENT
??_C@_0BJ@MEDFNGBG@Curves?5segments?5override?$AA@ DB 'Curves segments ov'
	DB	'erride', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KHAADAB@?$CD?$CDcurvessegmentoverride?$AA@
CONST	SEGMENT
??_C@_0BI@KHAADAB@?$CD?$CDcurvessegmentoverride?$AA@ DB '##curvessegmento'
	DB	'verride', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DMOGAKFD@Circle?5segments?5override?$AA@
CONST	SEGMENT
??_C@_0BJ@DMOGAKFD@Circle?5segments?5override?$AA@ DB 'Circle segments ov'
	DB	'erride', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BDDBJMAI@?$CD?$CDcirclesegmentoverride?$AA@
CONST	SEGMENT
??_C@_0BI@BDDBJMAI@?$CD?$CDcirclesegmentoverride?$AA@ DB '##circlesegment'
	DB	'override', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ENJDGMDO@N?9gon?5sides?$AA@
CONST	SEGMENT
??_C@_0M@ENJDGMDO@N?9gon?5sides?$AA@ DB 'N-gon sides', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09CEKHLCFH@Thickness?$AA@
CONST	SEGMENT
??_C@_09CEKHLCFH@Thickness?$AA@ DB 'Thickness', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IDMOFOMC@?$CF?402f?$AA@
CONST	SEGMENT
??_C@_05IDMOFOMC@?$CF?402f?$AA@ DB '%.02f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NICJPAHE@All?5primitives?$AA@
CONST	SEGMENT
??_C@_0P@NICJPAHE@All?5primitives?$AA@ DB 'All primitives', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GBHFFHKF@?$CD?$CDgradient2?$AA@
CONST	SEGMENT
??_C@_0M@GBHFFHKF@?$CD?$CDgradient2?$AA@ DB '##gradient2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EKFIAEGG@?$CD?$CDgradient1?$AA@
CONST	SEGMENT
??_C@_0M@EKFIAEGG@?$CD?$CDgradient1?$AA@ DB '##gradient1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09CPMEGEPG@Gradients?$AA@
CONST	SEGMENT
??_C@_09CPMEGEPG@Gradients?$AA@ DB 'Gradients', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LLLBMLGE@Primitives?$AA@
CONST	SEGMENT
??_C@_0L@LLLBMLGE@Primitives?$AA@ DB 'Primitives', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EHLCCPCB@?$CD?$CDTabBar?$AA@
CONST	SEGMENT
??_C@_08EHLCCPCB@?$CD?$CDTabBar?$AA@ DB '##TabBar', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JKHMHJNE@Examples?1Custom?5Rendering?$AA@
CONST	SEGMENT
??_C@_0BK@JKHMHJNE@Examples?1Custom?5Rendering?$AA@ DB 'Examples/Custom R'
	DB	'endering', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LABFKPJJ@Example?3?5Custom?5rendering?$AA@
CONST	SEGMENT
??_C@_0BK@LABFKPJJ@Example?3?5Custom?5rendering?$AA@ DB 'Example: Custom '
	DB	'rendering', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4JA DD 01d33H ; `ShowExampleAppCustomRendering'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CC@JFOMGEPF@This?5window?5has?5a?5changing?5title@
CONST	SEGMENT
??_C@_0CC@JFOMGEPF@This?5window?5has?5a?5changing?5title@ DB 'This window'
	DB	' has a changing title.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MMFFJKJN@Animated?5title?5?$CFc?5?$CFd?$CD?$CD?$CDAnimatedT@
CONST	SEGMENT
??_C@_0CF@MMFFJKJN@Animated?5title?5?$CFc?5?$CFd?$CD?$CD?$CDAnimatedT@ DB 'A'
	DB	'nimated title %c %d###AnimatedTitle', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04NLDFHNKP@?$HM?1?9?2?$AA@
CONST	SEGMENT
??_C@_04NLDFHNKP@?$HM?1?9?2?$AA@ DB '|/-\', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@MFIDPLFC@This?5is?5window?52?4?6My?5title?5is?5th@
CONST	SEGMENT
??_C@_0FB@MFIDPLFC@This?5is?5window?52?4?6My?5title?5is?5th@ DB 'This is '
	DB	'window 2.', 0aH, 'My title is the same as window 1, but my id'
	DB	'entifier is unique.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DIMGPEBG@Same?5title?5as?5another?5window?$CD?$CD2?$AA@
CONST	SEGMENT
??_C@_0CA@DIMGPEBG@Same?5title?5as?5another?5window?$CD?$CD2?$AA@ DB 'Sam'
	DB	'e title as another window##2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@NGKGAEMM@This?5is?5window?51?4?6My?5title?5is?5th@
CONST	SEGMENT
??_C@_0FB@NGKGAEMM@This?5is?5window?51?4?6My?5title?5is?5th@ DB 'This is '
	DB	'window 1.', 0aH, 'My title is the same as window 2, but my id'
	DB	'entifier is unique.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@IMLLBKBG@Examples?1Manipulating?5window?5tit@
CONST	SEGMENT
??_C@_0CE@IMLLBKBG@Examples?1Manipulating?5window?5tit@ DB 'Examples/Mani'
	DB	'pulating window titles', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BDOLKHNF@Same?5title?5as?5another?5window?$CD?$CD1?$AA@
CONST	SEGMENT
??_C@_0CA@BDOLKHNF@Same?5title?5as?5another?5window?$CD?$CD1?$AA@ DB 'Sam'
	DB	'e title as another window##1', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowExampleAppWindowTitles@@YAXPEA_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowExampleAppWindowTitles@@YAXPEA_N@Z@4JA DD 01d11H ; `ShowExampleAppWindowTitles'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BC@FCOOFHFP@Close?5this?5window?$AA@
CONST	SEGMENT
??_C@_0BC@FCOOFHFP@Close?5this?5window?$AA@ DB 'Close this window', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FBGOLCGF@ImGuiWindowFlags_NoScrollbar?$AA@
CONST	SEGMENT
??_C@_0BN@FBGOLCGF@ImGuiWindowFlags_NoScrollbar?$AA@ DB 'ImGuiWindowFlags'
	DB	'_NoScrollbar', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NPHEKNPH@ImGuiWindowFlags_NoCollapse?$AA@
CONST	SEGMENT
??_C@_0BM@NPHEKNPH@ImGuiWindowFlags_NoCollapse?$AA@ DB 'ImGuiWindowFlags_'
	DB	'NoCollapse', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DAAIDMAD@ImGuiWindowFlags_NoTitleBar?$AA@
CONST	SEGMENT
??_C@_0BM@DAAIDMAD@ImGuiWindowFlags_NoTitleBar?$AA@ DB 'ImGuiWindowFlags_'
	DB	'NoTitleBar', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ECAKMENC@ImGuiWindowFlags_NoDecoration?$AA@
CONST	SEGMENT
??_C@_0BO@ECAKMENC@ImGuiWindowFlags_NoDecoration?$AA@ DB 'ImGuiWindowFlag'
	DB	's_NoDecoration', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GBGIKPEE@ImGuiWindowFlags_NoBackground?$AA@
CONST	SEGMENT
??_C@_0BO@GBGIKPEE@ImGuiWindowFlags_NoBackground?$AA@ DB 'ImGuiWindowFlag'
	DB	's_NoBackground', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0LF@IPIHCBEA@Main?5Area?5?$DN?5entire?5viewport?0?6Wor@
CONST	SEGMENT
??_C@_0LF@IPIHCBEA@Main?5Area?5?$DN?5entire?5viewport?0?6Wor@ DB 'Main Ar'
	DB	'ea = entire viewport,', 0aH, 'Work Area = entire viewport min'
	DB	'us sections used by the main menu bars, task bars etc.', 0aH, 0aH
	DB	'Enable the main-menu bar in Examples menu to see the differen'
	DB	'ce.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LIJNANIG@Use?5work?5area?5instead?5of?5main?5ar@
CONST	SEGMENT
??_C@_0CD@LIJNANIG@Use?5work?5area?5instead?5of?5main?5ar@ DB 'Use work a'
	DB	'rea instead of main area', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OIOENALL@Example?3?5Fullscreen?5window?$AA@
CONST	SEGMENT
??_C@_0BL@OIOENALL@Example?3?5Fullscreen?5window?$AA@ DB 'Example: Fullsc'
	DB	'reen window', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NJDFJJBC@Bottom?9right?$AA@
CONST	SEGMENT
??_C@_0N@NJDFJJBC@Bottom?9right?$AA@ DB 'Bottom-right', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MGBINKPN@Bottom?9left?$AA@
CONST	SEGMENT
??_C@_0M@MGBINKPN@Bottom?9left?$AA@ DB 'Bottom-left', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FEMEGGCE@Top?9right?$AA@
CONST	SEGMENT
??_C@_09FEMEGGCE@Top?9right?$AA@ DB 'Top-right', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DPOKBJOC@Top?9left?$AA@
CONST	SEGMENT
??_C@_08DPOKBJOC@Top?9left?$AA@ DB 'Top-left', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IFGIOHDE@Custom?$AA@
CONST	SEGMENT
??_C@_06IFGIOHDE@Custom?$AA@ DB 'Custom', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@POIHMAKN@Mouse?5Position?3?5?$DMinvalid?$DO?$AA@
CONST	SEGMENT
??_C@_0BK@POIHMAKN@Mouse?5Position?3?5?$DMinvalid?$DO?$AA@ DB 'Mouse Posi'
	DB	'tion: <invalid>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DKAAEOG@Mouse?5Position?3?5?$CI?$CF?41f?0?$CF?41f?$CJ?$AA@
CONST	SEGMENT
??_C@_0BM@DKAAEOG@Mouse?5Position?3?5?$CI?$CF?41f?0?$CF?41f?$CJ?$AA@ DB 'M'
	DB	'ouse Position: (%.1f,%.1f)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@NHHAMFHG@Simple?5overlay?6?$CIright?9click?5to?5c@
CONST	SEGMENT
??_C@_0DA@NHHAMFHG@Simple?5overlay?6?$CIright?9click?5to?5c@ DB 'Simple o'
	DB	'verlay', 0aH, '(right-click to change position)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LOFEJJJB@Examples?1Simple?5Overlay?$AA@
CONST	SEGMENT
??_C@_0BI@LOFEJJJB@Examples?1Simple?5Overlay?$AA@ DB 'Examples/Simple Ove'
	DB	'rlay', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PFDIHNNE@Example?3?5Simple?5overlay?$AA@
CONST	SEGMENT
??_C@_0BI@PFDIHNNE@Example?3?5Simple?5overlay?$AA@ DB 'Example: Simple ov'
	DB	'erlay', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4JA DD 01cb4H ; `ShowExampleAppSimpleOverlay'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EA@CCNBDEKJ@?$CF?$CKsHello?0?5sailor?$CB?5Making?5this?5li@
CONST	SEGMENT
??_C@_0EA@CCNBDEKJ@?$CF?$CKsHello?0?5sailor?$CB?5Making?5this?5li@ DB '%*'
	DB	'sHello, sailor! Making this line long enough for the example.'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MFKLHBLP@Window?5padding?$AA@
CONST	SEGMENT
??_C@_0P@MFKLHBLP@Window?5padding?$AA@ DB 'Window padding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CEOMCPLH@Auto?9resize?$AA@
CONST	SEGMENT
??_C@_0M@CEOMCPLH@Auto?9resize?$AA@ DB 'Auto-resize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PIOLEGBL@Constraint?$AA@
CONST	SEGMENT
??_C@_0L@PIOLEGBL@Constraint?$AA@ DB 'Constraint', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BIDIOCH@Set?5800x200?$AA@
CONST	SEGMENT
??_C@_0M@BIDIOCH@Set?5800x200?$AA@ DB 'Set 800x200', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HFBKDEP@Set?5500x500?$AA@
CONST	SEGMENT
??_C@_0M@HFBKDEP@Set?5500x500?$AA@ DB 'Set 500x500', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JAEDJCOP@Set?5200x200?$AA@
CONST	SEGMENT
??_C@_0M@JAEDJCOP@Set?5200x200?$AA@ DB 'Set 200x200', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@FGKPOBFJ@?$CIHold?5SHIFT?5to?5display?5a?5dummy?5v@
CONST	SEGMENT
??_C@_0CJ@FGKPOBFJ@?$CIHold?5SHIFT?5to?5display?5a?5dummy?5v@ DB '(Hold S'
	DB	'HIFT to display a dummy viewport)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OPPEOHAI@?$CF?42f?5x?5?$CF?42f?$AA@
CONST	SEGMENT
??_C@_0M@OPPEOHAI@?$CF?42f?5x?5?$CF?42f?$AA@ DB '%.2f x %.2f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BMPDLDPD@viewport?$AA@
CONST	SEGMENT
??_C@_08BMPDLDPD@viewport?$AA@ DB 'viewport', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GJNNAKKD@Examples?1Constrained?5Resizing?5wi@
CONST	SEGMENT
??_C@_0CF@GJNNAKKD@Examples?1Constrained?5Resizing?5wi@ DB 'Examples/Cons'
	DB	'trained Resizing window', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KOHLMLPM@Example?3?5Constrained?5Resize?$AA@
CONST	SEGMENT
??_C@_0BM@KOHLMLPM@Example?3?5Constrained?5Resize?$AA@ DB 'Example: Const'
	DB	'rained Resize', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NJBCHMME@Custom?3?5Fixed?5Steps?5?$CI100?$CJ?$AA@
CONST	SEGMENT
??_C@_0BK@NJBCHMME@Custom?3?5Fixed?5Steps?5?$CI100?$CJ?$AA@ DB 'Custom: F'
	DB	'ixed Steps (100)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JBCFEINF@Custom?3?5Always?5Square?$AA@
CONST	SEGMENT
??_C@_0BG@JBCFEINF@Custom?3?5Always?5Square?$AA@ DB 'Custom: Always Squar'
	DB	'e', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HKADNNEP@Custom?3?5Aspect?5Ratio?516?39?$AA@
CONST	SEGMENT
??_C@_0BK@HKADNNEP@Custom?3?5Aspect?5Ratio?516?39?$AA@ DB 'Custom: Aspect'
	DB	' Ratio 16:9', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CJDAKIAB@Width?5Between?5400?5and?5500?$AA@
CONST	SEGMENT
??_C@_0BK@CJDAKIAB@Width?5Between?5400?5and?5500?$AA@ DB 'Width Between 4'
	DB	'00 and 500', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FIOIJIGG@Resize?5horizontal?5only?$AA@
CONST	SEGMENT
??_C@_0BH@FIOIJIGG@Resize?5horizontal?5only?$AA@ DB 'Resize horizontal on'
	DB	'ly', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FPBGOCLL@Resize?5vertical?5only?$AA@
CONST	SEGMENT
??_C@_0BF@FPBGOCLL@Resize?5vertical?5only?$AA@ DB 'Resize vertical only', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OMJELDNN@At?5least?5100x100?$AA@
CONST	SEGMENT
??_C@_0BB@OMJELDNN@At?5least?5100x100?$AA@ DB 'At least 100x100', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@ELFAEDLN@Between?5100x100?5and?5500x500?$AA@
CONST	SEGMENT
??_C@_0BM@ELFAEDLN@Between?5100x100?5and?5500x500?$AA@ DB 'Between 100x10'
	DB	'0 and 500x500', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4JA DD 01c5fH ; `ShowExampleAppConstrainedResize'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BD@DIDKCIOM@?$CF?$CKsThis?5is?5line?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BD@DIDKCIOM@?$CF?$CKsThis?5is?5line?5?$CFd?$AA@ DB '%*sThis is lin'
	DB	'e %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EAJBEEH@Number?5of?5lines?$AA@
CONST	SEGMENT
??_C@_0BA@EAJBEEH@Number?5of?5lines?$AA@ DB 'Number of lines', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0LI@CEDCIBKO@Window?5will?5resize?5every?9frame?5t@
CONST	SEGMENT
??_C@_0LI@CEDCIBKO@Window?5will?5resize?5every?9frame?5t@ DB 'Window will'
	DB	' resize every-frame to the size of its content.', 0aH, 'Note '
	DB	'that you probably don''t want to query the window size to', 0aH
	DB	'output your content because that would create a feedback loop'
	DB	'.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FLMCBBHH@Examples?1Auto?9resizing?5window?$AA@
CONST	SEGMENT
??_C@_0BO@FLMCBBHH@Examples?1Auto?9resizing?5window?$AA@ DB 'Examples/Aut'
	DB	'o-resizing window', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BJFILJPF@Example?3?5Auto?9resizing?5window?$AA@
CONST	SEGMENT
??_C@_0BO@BJFILJPF@Example?3?5Auto?9resizing?5window?$AA@ DB 'Example: Au'
	DB	'to-resizing window', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowExampleAppAutoResize@@YAXPEA_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowExampleAppAutoResize@@YAXPEA_N@Z@4JA DD 01c45H ; `ShowExampleAppAutoResize'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CP@NEDCKJAF@?$CFi?5The?5quick?5brown?5fox?5jumps?5ove@
CONST	SEGMENT
??_C@_0CP@NEDCKJAF@?$CFi?5The?5quick?5brown?5fox?5jumps?5ove@ DB '%i The '
	DB	'quick brown fox jumps over the lazy dog', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@IKFBCOKM@?$CFi?5The?5quick?5brown?5fox?5jumps?5ove@
CONST	SEGMENT
??_C@_0DA@IKFBCOKM@?$CFi?5The?5quick?5brown?5fox?5jumps?5ove@ DB '%i The '
	DB	'quick brown fox jumps over the lazy dog', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IHJDPCIL@Add?51000?5lines?$AA@
CONST	SEGMENT
??_C@_0P@IHJDPCIL@Add?51000?5lines?$AA@ DB 'Add 1000 lines', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MABLKLGB@Buffer?5contents?3?5?$CFd?5lines?0?5?$CFd?5by@
CONST	SEGMENT
??_C@_0CE@MABLKLGB@Buffer?5contents?3?5?$CFd?5lines?0?5?$CFd?5by@ DB 'Buf'
	DB	'fer contents: %d lines, %d bytes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NBDEEMIG@Test?5type?$AA@
CONST	SEGMENT
??_C@_09NBDEEMIG@Test?5type?$AA@ DB 'Test type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0HB@DAOOCDLA@Single?5call?5to?5TextUnformatted?$CI?$CJ@
CONST	SEGMENT
??_C@_0HB@DAOOCDLA@Single?5call?5to?5TextUnformatted?$CI?$CJ@ DB 'Single '
	DB	'call to TextUnformatted()', 00H, 'Multiple calls to Text(), c'
	DB	'lipped', 00H, 'Multiple calls to Text(), not clipped (slow)', 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JCGLFKAA@Printing?5unusually?5long?5amount?5o@
CONST	SEGMENT
??_C@_0CI@JCGLFKAA@Printing?5unusually?5long?5amount?5o@ DB 'Printing unu'
	DB	'sually long amount of text.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OPFBPBGI@Examples?1Long?5text?5display?$AA@
CONST	SEGMENT
??_C@_0BL@OPFBPBGI@Examples?1Long?5text?5display?$AA@ DB 'Examples/Long t'
	DB	'ext display', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GBIKCKEE@Example?3?5Long?5text?5display?$AA@
CONST	SEGMENT
??_C@_0BL@GBIKCKEE@Example?3?5Long?5text?5display?$AA@ DB 'Example: Long '
	DB	'text display', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4JA DD 01c06H ; `ShowExampleAppLongText'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BAG@IGIKGKDA@This?5example?5shows?5how?5you?5may?5i@
CONST	SEGMENT
??_C@_0BAG@IGIKGKDA@This?5example?5shows?5how?5you?5may?5i@ DB 'This exam'
	DB	'ple shows how you may implement a property editor using two c'
	DB	'olumns.', 0aH, 'All objects/fields data are dummies here.', 0aH
	DB	'Remember that in many simple cases, you can use ImGui::SameLi'
	DB	'ne(xxx) to position', 0aH, 'your cursor horizontally instead '
	DB	'of using the Columns() API.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BMIAECG@Examples?1Property?5Editor?$AA@
CONST	SEGMENT
??_C@_0BJ@BMIAECG@Examples?1Property?5Editor?$AA@ DB 'Examples/Property E'
	DB	'ditor', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EKHJGGOC@Example?3?5Property?5editor?$AA@
CONST	SEGMENT
??_C@_0BJ@EKHJGGOC@Example?3?5Property?5editor?$AA@ DB 'Example: Property'
	DB	' editor', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowExampleAppPropertyEditor@@YAXPEA_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowExampleAppPropertyEditor@@YAXPEA_N@Z@4JA DD 01be2H ; `ShowExampleAppPropertyEditor'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_07FBBIKLOB@?$CD?$CDvalue?$AA@
CONST	SEGMENT
??_C@_07FBBIKLOB@?$CD?$CDvalue?$AA@ DB '##value', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EPLKDJMH@Field?$AA@
CONST	SEGMENT
??_C@_05EPLKDJMH@Field?$AA@ DB 'Field', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BNKJGCPO@Field_?$CFd?$AA@
CONST	SEGMENT
??_C@_08BNKJGCPO@Field_?$CFd?$AA@ DB 'Field_%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LIBEHHHH@my?5sailor?5is?5rich?$AA@
CONST	SEGMENT
??_C@_0BC@LIBEHHHH@my?5sailor?5is?5rich?$AA@ DB 'my sailor is rich', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06ELFECKBG@Object?$AA@
CONST	SEGMENT
??_C@_06ELFECKBG@Object?$AA@ DB 'Object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FIIOEGIK@?$CFs_?$CFu?$AA@
CONST	SEGMENT
??_C@_05FIIOEGIK@?$CFs_?$CFu?$AA@ DB '%s_%u', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CCIDAFDC@ID?3?50123456789?$AA@
CONST	SEGMENT
??_C@_0P@CCIDAFDC@ID?3?50123456789?$AA@ DB 'ID: 0123456789', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NJJEDOBB@Details?$AA@
CONST	SEGMENT
??_C@_07NJJEDOBB@Details?$AA@ DB 'Details', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HN@OJKIHMDC@Lorem?5ipsum?5dolor?5sit?5amet?0?5cons@
CONST	SEGMENT
??_C@_0HN@OJKIHMDC@Lorem?5ipsum?5dolor?5sit?5amet?0?5cons@ DB 'Lorem ipsu'
	DB	'm dolor sit amet, consectetur adipiscing elit, sed do eiusmod'
	DB	' tempor incididunt ut labore et dolore magna aliqua. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMLGLIAO@?$CD?$CDTabs?$AA@
CONST	SEGMENT
??_C@_06BMLGLIAO@?$CD?$CDTabs?$AA@ DB '##Tabs', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CMHEFDFC@MyObject?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0N@CMHEFDFC@MyObject?3?5?$CFd?$AA@ DB 'MyObject: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PHNAOHDK@item?5view?$AA@
CONST	SEGMENT
??_C@_09PHNAOHDK@item?5view?$AA@ DB 'item view', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DHBPHHKL@MyObject?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0M@DHBPHHKL@MyObject?5?$CFd?$AA@ DB 'MyObject %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OINOOGMP@left?5pane?$AA@
CONST	SEGMENT
??_C@_09OINOOGMP@left?5pane?$AA@ DB 'left pane', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LEMDJJDE@Ctrl?$CLW?$AA@
CONST	SEGMENT
??_C@_06LEMDJJDE@Ctrl?$CLW?$AA@ DB 'Ctrl+W', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LFPHNCOC@Examples?1Simple?5layout?$AA@
CONST	SEGMENT
??_C@_0BH@LFPHNCOC@Examples?1Simple?5layout?$AA@ DB 'Examples/Simple layo'
	DB	'ut', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BCHKOJFL@Example?3?5Simple?5layout?$AA@
CONST	SEGMENT
??_C@_0BH@BCHKOJFL@Example?3?5Simple?5layout?$AA@ DB 'Example: Simple lay'
	DB	'out', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowExampleAppLayout@@YAXPEA_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowExampleAppLayout@@YAXPEA_N@Z@4JA DD 01b70H ; `ShowExampleAppLayout'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DO@NHFCPAIM@?$FL?$CF05d?$FN?5?$FL?$CFs?$FN?5Hello?0?5current?5time?5@
CONST	SEGMENT
??_C@_0DO@NHFCPAIM@?$FL?$CF05d?$FN?5?$FL?$CFs?$FN?5Hello?0?5current?5time?5@ DB '['
	DB	'%05d] [%s] Hello, current time is %.1f, here''s a word: ''%s'''
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BIHLNJM@Pauciloquent?$AA@
CONST	SEGMENT
??_C@_0N@BIHLNJM@Pauciloquent?$AA@ DB 'Pauciloquent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MIMGHMNH@Nincompoop?$AA@
CONST	SEGMENT
??_C@_0L@MIMGHMNH@Nincompoop?$AA@ DB 'Nincompoop', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FLCFMCCB@Absquatulate?$AA@
CONST	SEGMENT
??_C@_0N@FLCFMCCB@Absquatulate?$AA@ DB 'Absquatulate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KKKMMPJN@Abibliophobia?$AA@
CONST	SEGMENT
??_C@_0O@KKKMMPJN@Abibliophobia?$AA@ DB 'Abibliophobia', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KEIJGBOK@Snickersnee?$AA@
CONST	SEGMENT
??_C@_0M@KEIJGBOK@Snickersnee?$AA@ DB 'Snickersnee', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FKNIJFM@Cattywampus?$AA@
CONST	SEGMENT
??_C@_0M@FKNIJFM@Cattywampus?$AA@ DB 'Cattywampus', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CIGCKJLI@Bumfuzzled?$AA@
CONST	SEGMENT
??_C@_0L@CIGCKJLI@Bumfuzzled?$AA@ DB 'Bumfuzzled', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KKCIMGE@error?$AA@
CONST	SEGMENT
??_C@_05KKCIMGE@error?$AA@ DB 'error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNLOFOEM@warn?$AA@
CONST	SEGMENT
??_C@_04FNLOFOEM@warn?$AA@ DB 'warn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NIDJFNBE@info?$AA@
CONST	SEGMENT
??_C@_04NIDJFNBE@info?$AA@ DB 'info', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JBNFHIEN@?$FLDebug?$FN?5Add?55?5entries?$AA@
CONST	SEGMENT
??_C@_0BG@JBNFHIEN@?$FLDebug?$FN?5Add?55?5entries?$AA@ DB '[Debug] Add 5 '
	DB	'entries', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BPJHOONG@Examples?1Log?$AA@
CONST	SEGMENT
??_C@_0N@BPJHOONG@Examples?1Log?$AA@ DB 'Examples/Log', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LFJACCKD@Example?3?5Log?$AA@
CONST	SEGMENT
??_C@_0N@LFJACCKD@Example?3?5Log?$AA@ DB 'Example: Log', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowExampleAppLog@@YAXPEA_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowExampleAppLog@@YAXPEA_N@Z@4JA DD 01b4dH ; `ShowExampleAppLog'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06IBDJIBGI@Filter?$AA@
CONST	SEGMENT
??_C@_06IBDJIBGI@Filter?$AA@ DB 'Filter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NEACHKPE@Example?3?5Console?$AA@
CONST	SEGMENT
??_C@_0BB@NEACHKPE@Example?3?5Console?$AA@ DB 'Example: Console', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PHKAGDP@?9?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_05PHKAGDP@?9?5?$CFs?6?$AA@ DB '- %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LCPLNAHF@Possible?5matches?3?6?$AA@
CONST	SEGMENT
??_C@_0BD@LCPLNAHF@Possible?5matches?3?6?$AA@ DB 'Possible matches:', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DOPMHGPK@No?5match?5for?5?$CC?$CF?4?$CKs?$CC?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BG@DOPMHGPK@No?5match?5for?5?$CC?$CF?4?$CKs?$CC?$CB?6?$AA@ DB 'No '
	DB	'match for "%.*s"!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OKLFOGKH@Unknown?5command?3?5?8?$CFs?8?6?$AA@
CONST	SEGMENT
??_C@_0BH@OKLFOGKH@Unknown?5command?3?5?8?$CFs?8?6?$AA@ DB 'Unknown comma'
	DB	'nd: ''%s''', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08PKLPHKJF@?$CF3d?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_08PKLPHKJF@?$CF3d?3?5?$CFs?6?$AA@ DB '%3d: %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04JKCKOCFH@?9?5?$CFs?$AA@
CONST	SEGMENT
??_C@_04JKCKOCFH@?9?5?$CFs?$AA@ DB '- %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GJFNIAOH@Commands?3?$AA@
CONST	SEGMENT
??_C@_09GJFNIAOH@Commands?3?$AA@ DB 'Commands:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFHAGHEP@?$CD?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_05DFHAGHEP@?$CD?5?$CFs?6?$AA@ DB '# %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02KPDBPKPG@?$CD?5?$AA@
CONST	SEGMENT
??_C@_02KPDBPKPG@?$CD?5?$AA@ DB '# ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LFMCMLFD@?$FLerror?$FN?$AA@
CONST	SEGMENT
??_C@_07LFMCMLFD@?$FLerror?$FN?$AA@ DB '[error]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KOEFNJOK@ScrollingRegion?$AA@
CONST	SEGMENT
??_C@_0BA@KOEFNJOK@ScrollingRegion?$AA@ DB 'ScrollingRegion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HIABFBKB@Filter?5?$CI?$CCincl?0?9excl?$CC?$CJ?5?$CI?$CCerror?$CC?$CJ?$AA@
CONST	SEGMENT
??_C@_0CA@HIABFBKB@Filter?5?$CI?$CCincl?0?9excl?$CC?$CJ?5?$CI?$CCerror?$CC?$CJ?$AA@ DB 'F'
	DB	'ilter ("incl,-excl") ("error")', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IFKANFPJ@Auto?9scroll?$AA@
CONST	SEGMENT
??_C@_0M@IFKANFPJ@Auto?9scroll?$AA@ DB 'Auto-scroll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MDNHABIA@Clear?$AA@
CONST	SEGMENT
??_C@_05MDNHABIA@Clear?$AA@ DB 'Clear', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KNPJMMPE@?$FLerror?$FN?5something?5went?5wrong?$AA@
CONST	SEGMENT
??_C@_0BN@KNPJMMPE@?$FLerror?$FN?5something?5went?5wrong?$AA@ DB '[error]'
	DB	' something went wrong', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FGHPBLJE@Add?5Debug?5Error?$AA@
CONST	SEGMENT
??_C@_0BA@FGHPBLJE@Add?5Debug?5Error?$AA@ DB 'Add Debug Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PEIDNPCH@display?5very?5important?5message?5h@
CONST	SEGMENT
??_C@_0CF@PEIDNPCH@display?5very?5important?5message?5h@ DB 'display very'
	DB	' important message here!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BMHJKMPF@some?5more?5text?$AA@
CONST	SEGMENT
??_C@_0P@BMHJKMPF@some?5more?5text?$AA@ DB 'some more text', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OJGBPOOP@?$CFd?5some?5text?$AA@
CONST	SEGMENT
??_C@_0N@OJGBPOOP@?$CFd?5some?5text?$AA@ DB '%d some text', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EGDLDIHN@Add?5Debug?5Text?$AA@
CONST	SEGMENT
??_C@_0P@EGDLDIHN@Add?5Debug?5Text?$AA@ DB 'Add Debug Text', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DCBEMCMC@Enter?5?8HELP?8?5for?5help?4?$AA@
CONST	SEGMENT
??_C@_0BH@DCBEMCMC@Enter?5?8HELP?8?5for?5help?4?$AA@ DB 'Enter ''HELP'' f'
	DB	'or help.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0NJ@IPNBOCGH@This?5example?5implements?5a?5consol@
CONST	SEGMENT
??_C@_0NJ@IPNBOCGH@This?5example?5implements?5a?5consol@ DB 'This example'
	DB	' implements a console with basic coloring, completion (TAB ke'
	DB	'y) and history (Up/Down keys). A more elaborate implementatio'
	DB	'n may want to store entries along with extra data such as tim'
	DB	'estamp, emitter, etc.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GDIOPKGP@Close?5Console?$AA@
CONST	SEGMENT
??_C@_0O@GDIOPKGP@Close?5Console?$AA@ DB 'Close Console', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17ENLBLDPN@?$AAb?$AAu?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_17ENLBLDPN@?$AAb?$AAu?$AAf?$AA?$AA@ DB 'b', 00H, 'u', 00H, 'f', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_13KHDBCPJB@?$AAs?$AA?$AA@ DB 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HICLALOG@Welcome?5to?5Dear?5ImGui?$CB?$AA@
CONST	SEGMENT
??_C@_0BH@HICLALOG@Welcome?5to?5Dear?5ImGui?$CB?$AA@ DB 'Welcome to Dear '
	DB	'ImGui!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08GOHMLCGG@CLASSIFY?$AA@
CONST	SEGMENT
??_C@_08GOHMLCGG@CLASSIFY?$AA@ DB 'CLASSIFY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05PONODPI@CLEAR?$AA@
CONST	SEGMENT
??_C@_05PONODPI@CLEAR?$AA@ DB 'CLEAR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DBIJIOJO@HISTORY?$AA@
CONST	SEGMENT
??_C@_07DBIJIOJO@HISTORY?$AA@ DB 'HISTORY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DOKPJKJF@HELP?$AA@
CONST	SEGMENT
??_C@_04DOKPJKJF@HELP?$AA@ DB 'HELP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GJBEJJEP@Examples?1Console?$AA@
CONST	SEGMENT
??_C@_0BB@GJBEJJEP@Examples?1Console?$AA@ DB 'Examples/Console', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMBKPCGK@Quit?$AA@
CONST	SEGMENT
??_C@_04GMBKPCGK@Quit?$AA@ DB 'Quit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ELIFPNNI@Alt?$CLF4?$AA@
CONST	SEGMENT
??_C@_06ELIFPNNI@Alt?$CLF4?$AA@ DB 'Alt+F4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KAJHKDAE@Checked?$AA@
CONST	SEGMENT
??_C@_07KAJHKDAE@Checked?$AA@ DB 'Checked', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CLAHFOAE@SomeOption?$AA@
CONST	SEGMENT
??_C@_0L@CLAHFOAE@SomeOption?$AA@ DB 'SomeOption', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HMLLIHM@Examples?1Menu?1Append?5to?5an?5exist@
CONST	SEGMENT
??_C@_0CJ@HMLLIHM@Examples?1Menu?1Append?5to?5an?5exist@ DB 'Examples/Men'
	DB	'u/Append to an existing menu', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IOOCHEEB@Examples?1Menu?1Colors?$AA@
CONST	SEGMENT
??_C@_0BF@IOOCHEEB@Examples?1Menu?1Colors?$AA@ DB 'Examples/Menu/Colors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CHCLHMCH@Yes?$AANo?$AAMaybe?$AA?$AA?$AA@
CONST	SEGMENT
??_C@_0P@CHCLHMCH@Yes?$AANo?$AAMaybe?$AA?$AA?$AA@ DB 'Yes', 00H, 'No', 00H
	DB	'Maybe', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05DCDOHKAB@Input?$AA@
CONST	SEGMENT
??_C@_05DCDOHKAB@Input?$AA@ DB 'Input', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MAFFAEMB@Scrolling?5Text?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BC@MAFFAEMB@Scrolling?5Text?5?$CFd?$AA@ DB 'Scrolling Text %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DOAOMMKG@Enabled?$AA@
CONST	SEGMENT
??_C@_07DOAOMMKG@Enabled?$AA@ DB 'Enabled', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BFDGIKBI@Examples?1Menu?1Options?$AA@
CONST	SEGMENT
??_C@_0BG@BFDGIKBI@Examples?1Menu?1Options?$AA@ DB 'Examples/Menu/Options'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09JEJONNAL@Save?5As?4?4?$AA@
CONST	SEGMENT
??_C@_09JEJONNAL@Save?5As?4?4?$AA@ DB 'Save As..', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06NAKPFMDA@Ctrl?$CLS?$AA@
CONST	SEGMENT
??_C@_06NAKPFMDA@Ctrl?$CLS?$AA@ DB 'Ctrl+S', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKOAAOOB@Recurse?4?4?$AA@
CONST	SEGMENT
??_C@_09JKOAAOOB@Recurse?4?4?$AA@ DB 'Recurse..', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06INDFPOP@More?4?4?$AA@
CONST	SEGMENT
??_C@_06INDFPOP@More?4?4?$AA@ DB 'More..', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CFAJIONG@fish_hat?4h?$AA@
CONST	SEGMENT
??_C@_0L@CFAJIONG@fish_hat?4h?$AA@ DB 'fish_hat.h', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OONPEMFD@fish_hat?4inl?$AA@
CONST	SEGMENT
??_C@_0N@OONPEMFD@fish_hat?4inl?$AA@ DB 'fish_hat.inl', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MGPNFHBN@fish_hat?4c?$AA@
CONST	SEGMENT
??_C@_0L@MGPNFHBN@fish_hat?4c?$AA@ DB 'fish_hat.c', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FFOFICLF@Open?5Recent?$AA@
CONST	SEGMENT
??_C@_0M@FFOFICLF@Open?5Recent?$AA@ DB 'Open Recent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DNCDCIAE@Open?$AA@
CONST	SEGMENT
??_C@_04DNCDCIAE@Open?$AA@ DB 'Open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DGNIABGN@Ctrl?$CLO?$AA@
CONST	SEGMENT
??_C@_06DGNIABGN@Ctrl?$CLO?$AA@ DB 'Ctrl+O', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03ILBCOJBH@New?$AA@
CONST	SEGMENT
??_C@_03ILBCOJBH@New?$AA@ DB 'New', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OLDACLJ@?$CIdemo?5menu?$CJ?$AA@
CONST	SEGMENT
??_C@_0M@OLDACLJ@?$CIdemo?5menu?$CJ?$AA@ DB '(demo menu)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GAOLJPOH@Examples?1Menu?$AA@
CONST	SEGMENT
??_C@_0O@GAOLJPOH@Examples?1Menu?$AA@ DB 'Examples/Menu', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowExampleMenuFile@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowExampleMenuFile@@YAXXZ@4JA DD 0190eH ; `ShowExampleMenuFile'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05NEBJFIEK@Paste?$AA@
CONST	SEGMENT
??_C@_05NEBJFIEK@Paste?$AA@ DB 'Paste', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MLIHCNHJ@CTRL?$CLV?$AA@
CONST	SEGMENT
??_C@_06MLIHCNHJ@CTRL?$CLV?$AA@ DB 'CTRL+V', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PMDCMLGN@CTRL?$CLC?$AA@
CONST	SEGMENT
??_C@_06PMDCMLGN@CTRL?$CLC?$AA@ DB 'CTRL+C', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03EOHDMBHJ@Cut?$AA@
CONST	SEGMENT
??_C@_03EOHDMBHJ@Cut?$AA@ DB 'Cut', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFAEAAPH@CTRL?$CLX?$AA@
CONST	SEGMENT
??_C@_06FFAEAAPH@CTRL?$CLX?$AA@ DB 'CTRL+X', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04NKENIHOM@Redo?$AA@
CONST	SEGMENT
??_C@_04NKENIHOM@Redo?$AA@ DB 'Redo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EMBPDBLG@CTRL?$CLY?$AA@
CONST	SEGMENT
??_C@_06EMBPDBLG@CTRL?$CLY?$AA@ DB 'CTRL+Y', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LPGMNMPN@Undo?$AA@
CONST	SEGMENT
??_C@_04LPGMNMPN@Undo?$AA@ DB 'Undo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GHDCGCHF@CTRL?$CLZ?$AA@
CONST	SEGMENT
??_C@_06GHDCGCHF@CTRL?$CLZ?$AA@ DB 'CTRL+Z', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@EBPMKFNL@Alt?5to?5jump?5to?5the?5menu?5layer?5of@
CONST	SEGMENT
??_C@_0CL@EBPMKFNL@Alt?5to?5jump?5to?5the?5menu?5layer?5of@ DB 'Alt to ju'
	DB	'mp to the menu layer of a window.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@NLCDBEHA@Escape?5to?5deactivate?5a?5widget?0?5c@
CONST	SEGMENT
??_C@_0DP@NLCDBEHA@Escape?5to?5deactivate?5a?5widget?0?5c@ DB 'Escape to '
	DB	'deactivate a widget, close popup, exit child window.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LIPDCNLP@Return?5to?5input?5text?5into?5a?5widg@
CONST	SEGMENT
??_C@_0CE@LIPDCNLP@Return?5to?5input?5text?5into?5a?5widg@ DB 'Return to '
	DB	'input text into a widget.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LKNGKCOD@Space?5to?5activate?5a?5widget?4?$AA@
CONST	SEGMENT
??_C@_0BM@LKNGKCOD@Space?5to?5activate?5a?5widget?4?$AA@ DB 'Space to act'
	DB	'ivate a widget.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PBJOMNMB@Arrow?5keys?5to?5navigate?4?$AA@
CONST	SEGMENT
??_C@_0BI@PBJOMNMB@Arrow?5keys?5to?5navigate?4?$AA@ DB 'Arrow keys to nav'
	DB	'igate.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LHGBBELP@With?5keyboard?5navigation?5enabled@
CONST	SEGMENT
??_C@_0CC@LHGBBELP@With?5keyboard?5navigation?5enabled@ DB 'With keyboard'
	DB	' navigation enabled:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PKENOIKO@ESCAPE?5to?5revert?4?$AA@
CONST	SEGMENT
??_C@_0BC@PKENOIKO@ESCAPE?5to?5revert?4?$AA@ DB 'ESCAPE to revert.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KMMNEEIL@CTRL?$CLZ?0CTRL?$CLY?5to?5undo?1redo?4?$AA@
CONST	SEGMENT
??_C@_0BM@KMMNEEIL@CTRL?$CLZ?0CTRL?$CLY?5to?5undo?1redo?4?$AA@ DB 'CTRL+Z'
	DB	',CTRL+Y to undo/redo.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@COCDFHEI@CTRL?$CLX?1C?1V?5to?5use?5clipboard?5cut?1@
CONST	SEGMENT
??_C@_0CM@COCDFHEI@CTRL?$CLX?1C?1V?5to?5use?5clipboard?5cut?1@ DB 'CTRL+X'
	DB	'/C/V to use clipboard cut/copy/paste.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EHDHJJCE@CTRL?$CLA?5or?5double?9click?5to?5select@
CONST	SEGMENT
??_C@_0CG@EHDHJJCE@CTRL?$CLA?5or?5double?9click?5to?5select@ DB 'CTRL+A o'
	DB	'r double-click to select all.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EGJGDBOL@CTRL?$CLLeft?1Right?5to?5word?5jump?4?$AA@
CONST	SEGMENT
??_C@_0BO@EGJGDBOL@CTRL?$CLLeft?1Right?5to?5word?5jump?4?$AA@ DB 'CTRL+Le'
	DB	'ft/Right to word jump.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NMLMAAHC@While?5inputing?5text?3?6?$AA@
CONST	SEGMENT
??_C@_0BG@NMLMAAHC@While?5inputing?5text?3?6?$AA@ DB 'While inputing text'
	DB	':', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@LADJDPFO@CTRL?$CLMouse?5Wheel?5to?5zoom?5window?5@
CONST	SEGMENT
??_C@_0CK@LADJDPFO@CTRL?$CLMouse?5Wheel?5to?5zoom?5window?5@ DB 'CTRL+Mou'
	DB	'se Wheel to zoom window contents.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MNOOCJNJ@CTRL?$CLTab?5to?5select?5a?5window?4?$AA@
CONST	SEGMENT
??_C@_0BN@MNOOCJNJ@CTRL?$CLTab?5to?5select?5a?5window?4?$AA@ DB 'CTRL+Tab'
	DB	' to select a window.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@LKCIFMEM@TAB?1SHIFT?$CLTAB?5to?5cycle?5through?5k@
CONST	SEGMENT
??_C@_0DJ@LKCIFMEM@TAB?1SHIFT?$CLTAB?5to?5cycle?5through?5k@ DB 'TAB/SHIF'
	DB	'T+TAB to cycle through keyboard editable fields.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@LJHMLMPJ@CTRL?$CLClick?5on?5a?5slider?5or?5drag?5b@
CONST	SEGMENT
??_C@_0DL@LJHMLMPJ@CTRL?$CLClick?5on?5a?5slider?5or?5drag?5b@ DB 'CTRL+Cl'
	DB	'ick on a slider or drag box to input value as text.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@KHDHCLNB@Click?5and?5drag?5on?5lower?5corner?5t@
CONST	SEGMENT
??_C@_0GD@KHDHCLNB@Click?5and?5drag?5on?5lower?5corner?5t@ DB 'Click and '
	DB	'drag on lower corner to resize window', 0aH, '(double-click t'
	DB	'o auto fit window to its contents).', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FFJHEDDC@Double?9click?5on?5title?5bar?5to?5col@
CONST	SEGMENT
??_C@_0CO@FFJHEDDC@Double?9click?5on?5title?5bar?5to?5col@ DB 'Double-cli'
	DB	'ck on title bar to collapse window.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@NPBPGPJP@Additional?5alpha?5multiplier?5for?5@
CONST	SEGMENT
??_C@_0FH@NPBPGPJP@Additional?5alpha?5multiplier?5for?5@ DB 'Additional a'
	DB	'lpha multiplier for disabled items (multiply over current val'
	DB	'ue of Alpha).', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HJLJBJBE@Disabled?5Alpha?$AA@
CONST	SEGMENT
??_C@_0P@HJLJBJBE@Disabled?5Alpha?$AA@ DB 'Disabled Alpha', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MBCJIDFM@Global?5Alpha?$AA@
CONST	SEGMENT
??_C@_0N@MBCJIDFM@Global?5Alpha?$AA@ DB 'Global Alpha', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GG@GMJKIKDN@When?5drawing?5circle?5primitives?5w@
CONST	SEGMENT
??_C@_0GG@GMJKIKDN@When?5drawing?5circle?5primitives?5w@ DB 'When drawing'
	DB	' circle primitives with "num_segments == 0" tesselation will '
	DB	'be calculated automatically.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PBIKEDIP@R?3?5?$CF?4f?6N?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0N@PBIKEDIP@R?3?5?$CF?4f?6N?3?5?$CFd?$AA@ DB 'R: %.f', 0aH, 'N: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MNHFAILC@N?3?5MMM?6R?3?5MMM?$AA@
CONST	SEGMENT
??_C@_0O@MNHFAILC@N?3?5MMM?6R?3?5MMM?$AA@ DB 'N: MMM', 0aH, 'R: MMM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PHDIKMAF@?$CIR?5?$DN?5radius?0?5N?5?$DN?5number?5of?5segme@
CONST	SEGMENT
??_C@_0CF@PHDIKMAF@?$CIR?5?$DN?5radius?0?5N?5?$DN?5number?5of?5segme@ DB '('
	DB	'R = radius, N = number of segments)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ENDODAAL@Circle?5Tessellation?5Max?5Error?$AA@
CONST	SEGMENT
??_C@_0BO@ENDODAAL@Circle?5Tessellation?5Max?5Error?$AA@ DB 'Circle Tesse'
	DB	'llation Max Error', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KPCPFGKJ@Curve?5Tessellation?5Tolerance?$AA@
CONST	SEGMENT
??_C@_0BN@KPCPFGKJ@Curve?5Tessellation?5Tolerance?$AA@ DB 'Curve Tessella'
	DB	'tion Tolerance', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KAFHAJBP@Anti?9aliased?5fill?$AA@
CONST	SEGMENT
??_C@_0BC@KAFHAJBP@Anti?9aliased?5fill?$AA@ DB 'Anti-aliased fill', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HC@GKHKBME@Faster?5lines?5using?5texture?5data?4@
CONST	SEGMENT
??_C@_0HC@GKHKBME@Faster?5lines?5using?5texture?5data?4@ DB 'Faster lines'
	DB	' using texture data. Require backend to render with bilinear '
	DB	'filtering (not point/nearest filtering).', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FHJLGIJI@Anti?9aliased?5lines?5use?5texture?$AA@
CONST	SEGMENT
??_C@_0BP@FHJLGIJI@Anti?9aliased?5lines?5use?5texture?$AA@ DB 'Anti-alias'
	DB	'ed lines use texture', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@HJLOEILL@When?5disabling?5anti?9aliasing?5lin@
CONST	SEGMENT
??_C@_0GD@HJLOEILL@When?5disabling?5anti?9aliasing?5lin@ DB 'When disabli'
	DB	'ng anti-aliasing lines, you''ll probably want to disable bord'
	DB	'ers in your style as well.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@INPJKAKL@Anti?9aliased?5lines?$AA@
CONST	SEGMENT
??_C@_0BD@INPJKAKL@Anti?9aliased?5lines?$AA@ DB 'Anti-aliased lines', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PIAIFBON@Rendering?$AA@
CONST	SEGMENT
??_C@_09PIAIFBON@Rendering?$AA@ DB 'Rendering', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DCHFKEPM@global?5scale?$AA@
CONST	SEGMENT
??_C@_0N@DCHFKEPM@global?5scale?$AA@ DB 'global scale', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DLFCCMFO@window?5scale?$AA@
CONST	SEGMENT
??_C@_0N@DLFCCMFO@window?5scale?$AA@ DB 'window scale', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BDA@ONKGEIHO@Those?5are?5old?5settings?5provided?5@
CONST	SEGMENT
??_C@_0BDA@ONKGEIHO@Those?5are?5old?5settings?5provided?5@ DB 'Those are '
	DB	'old settings provided for convenience.', 0aH, 'However, the _'
	DB	'correct_ way of scaling your UI is currently to reload your f'
	DB	'ont at the designed size, rebuild the font atlas, and call st'
	DB	'yle.ScaleAllSizes() on a reference ImGuiStyle structure.', 0aH
	DB	'Using those settings here will give you poor quality results.'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@LIBKHDAI@Read?5FAQ?5and?5docs?1FONTS?4md?5for?5d@
CONST	SEGMENT
??_C@_0DI@LIBKHDAI@Read?5FAQ?5and?5docs?1FONTS?4md?5for?5d@ DB 'Read FAQ '
	DB	'and docs/FONTS.md for details on font loading.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05ENDNDI@Fonts?$AA@
CONST	SEGMENT
??_C@_05ENDNDI@Fonts?$AA@ DB 'Fonts', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OIKMFEGE@Revert?$AA@
CONST	SEGMENT
??_C@_06OIKMFEGE@Revert?$AA@ DB 'Revert', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04INACKGJP@Save?$AA@
CONST	SEGMENT
??_C@_04INACKGJP@Save?$AA@ DB 'Save', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KJABCEJI@?$CD?$CDcolor?$AA@
CONST	SEGMENT
??_C@_07KJABCEJI@?$CD?$CDcolor?$AA@ DB '##color', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PKGPDAGH@?$CD?$CDcolors?$AA@
CONST	SEGMENT
??_C@_08PKGPDAGH@?$CD?$CDcolors?$AA@ DB '##colors', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GL@DGJKIMAI@In?5the?5color?5list?3?6Left?9click?5on@
CONST	SEGMENT
??_C@_0GL@DGJKIMAI@In?5the?5color?5list?3?6Left?9click?5on@ DB 'In the co'
	DB	'lor list:', 0aH, 'Left-click on color square to open color pi'
	DB	'cker,', 0aH, 'Right-click to open edit options menu.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04IGHHMFLN@Both?$AA@
CONST	SEGMENT
??_C@_04IGHHMFLN@Both?$AA@ DB 'Both', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHOGHNDL@Alpha?$AA@
CONST	SEGMENT
??_C@_05IHOGHNDL@Alpha?$AA@ DB 'Alpha', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OGJDIEIN@Opaque?$AA@
CONST	SEGMENT
??_C@_06OGJDIEIN@Opaque?$AA@ DB 'Opaque', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ECALKMOF@Filter?5colors?$AA@
CONST	SEGMENT
??_C@_0O@ECALKMOF@Filter?5colors?$AA@ DB 'Filter colors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EKILLAGK@Only?5Modified?5Colors?$AA@
CONST	SEGMENT
??_C@_0BF@EKILLAGK@Only?5Modified?5Colors?$AA@ DB 'Only Modified Colors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BMBGJILK@?$CD?$CDoutput_type?$AA@
CONST	SEGMENT
??_C@_0O@BMBGJILK@?$CD?$CDoutput_type?$AA@ DB '##output_type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PKKCFHCF@To?5Clipboard?$AATo?5TTY?$AA?$AA@
CONST	SEGMENT
??_C@_0BF@PKKCFHCF@To?5Clipboard?$AATo?5TTY?$AA?$AA@ DB 'To Clipboard', 00H
	DB	'To TTY', 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@CEAFKMHA@colors?$FLImGuiCol_?$CFs?$FN?$CF?$CKs?$DN?5ImVec4?$CI?$CF@
CONST	SEGMENT
??_C@_0DO@CEAFKMHA@colors?$FLImGuiCol_?$CFs?$FN?$CF?$CKs?$DN?5ImVec4?$CI?$CF@ DB 'c'
	DB	'olors[ImGuiCol_%s]%*s= ImVec4(%.2ff, %.2ff, %.2ff, %.2ff);', 0dH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@IIGPHJOL@ImVec4?$CK?5colors?5?$DN?5ImGui?3?3GetStyle@
CONST	SEGMENT
??_C@_0CN@IIGPHJOL@ImVec4?$CK?5colors?5?$DN?5ImGui?3?3GetStyle@ DB 'ImVec'
	DB	'4* colors = ImGui::GetStyle().Colors;', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BFGAPCKF@Export?$AA@
CONST	SEGMENT
??_C@_06BFGAPCKF@Export?$AA@ DB 'Export', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICDCBJPI@Colors?$AA@
CONST	SEGMENT
??_C@_06ICDCBJPI@Colors?$AA@ DB 'Colors', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CILLMAJK@LogSliderDeadzone?$AA@
CONST	SEGMENT
??_C@_0BC@CILLMAJK@LogSliderDeadzone?$AA@ DB 'LogSliderDeadzone', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NLJOADCC@DisplaySafeAreaPadding?$AA@
CONST	SEGMENT
??_C@_0BH@NLJOADCC@DisplaySafeAreaPadding?$AA@ DB 'DisplaySafeAreaPadding'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@OFDAJLLA@Adjust?5if?5you?5cannot?5see?5the?5edg@
CONST	SEGMENT
??_C@_0GI@OFDAJLLA@Adjust?5if?5you?5cannot?5see?5the?5edg@ DB 'Adjust if '
	DB	'you cannot see the edges of your screen (e.g. on a TV where s'
	DB	'caling has not been configured).', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FINEDBHB@Safe?5Area?5Padding?$AA@
CONST	SEGMENT
??_C@_0BC@FINEDBHB@Safe?5Area?5Padding?$AA@ DB 'Safe Area Padding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@EIJADJPM@Alignment?5applies?5when?5a?5selecta@
CONST	SEGMENT
??_C@_0EF@EIJADJPM@Alignment?5applies?5when?5a?5selecta@ DB 'Alignment ap'
	DB	'plies when a selectable is larger than its text content.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OFFKFPJC@SelectableTextAlign?$AA@
CONST	SEGMENT
??_C@_0BE@OFFKFPJC@SelectableTextAlign?$AA@ DB 'SelectableTextAlign', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@KHCCNPEP@Alignment?5applies?5when?5a?5button?5@
CONST	SEGMENT
??_C@_0EB@KHCCNPEP@Alignment?5applies?5when?5a?5button?5@ DB 'Alignment a'
	DB	'pplies when a button is larger than its text content.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PHDMJLFL@ButtonTextAlign?$AA@
CONST	SEGMENT
??_C@_0BA@PHDMJLFL@ButtonTextAlign?$AA@ DB 'ButtonTextAlign', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HCCCHIDA@ColorButtonPosition?$AA@
CONST	SEGMENT
??_C@_0BE@HCCCHIDA@ColorButtonPosition?$AA@ DB 'ColorButtonPosition', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PMLPANEE@Left?$AARight?$AA?$AA@
CONST	SEGMENT
??_C@_0M@PMLPANEE@Left?$AARight?$AA?$AA@ DB 'Left', 00H, 'Right', 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@INNLFKOF@WindowMenuButtonPosition?$AA@
CONST	SEGMENT
??_C@_0BJ@INNLFKOF@WindowMenuButtonPosition?$AA@ DB 'WindowMenuButtonPosi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@ECHPPBJL@None?$AALeft?$AARight?$AA?$AA@
CONST	SEGMENT
??_C@_0BB@ECHPPBJL@None?$AALeft?$AARight?$AA?$AA@ DB 'None', 00H, 'Left', 00H
	DB	'Right', 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IFNMJCJO@WindowTitleAlign?$AA@
CONST	SEGMENT
??_C@_0BB@IFNMJCJO@WindowTitleAlign?$AA@ DB 'WindowTitleAlign', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GEFJINEE@?$CF?42f?$AA@
CONST	SEGMENT
??_C@_04GEFJINEE@?$CF?42f?$AA@ DB '%.2f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GELHPNFJ@TabRounding?$AA@
CONST	SEGMENT
??_C@_0M@GELHPNFJ@TabRounding?$AA@ DB 'TabRounding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CHOEJEFP@GrabRounding?$AA@
CONST	SEGMENT
??_C@_0N@CHOEJEFP@GrabRounding?$AA@ DB 'GrabRounding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IGAFHGEC@ScrollbarRounding?$AA@
CONST	SEGMENT
??_C@_0BC@IGAFHGEC@ScrollbarRounding?$AA@ DB 'ScrollbarRounding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OGBCIABM@PopupRounding?$AA@
CONST	SEGMENT
??_C@_0O@OGBCIABM@PopupRounding?$AA@ DB 'PopupRounding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OLPNJDEC@ChildRounding?$AA@
CONST	SEGMENT
??_C@_0O@OLPNJDEC@ChildRounding?$AA@ DB 'ChildRounding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IMGPCCNA@WindowRounding?$AA@
CONST	SEGMENT
??_C@_0P@IMGPCCNA@WindowRounding?$AA@ DB 'WindowRounding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08ICFONDFO@Rounding?$AA@
CONST	SEGMENT
??_C@_08ICFONDFO@Rounding?$AA@ DB 'Rounding', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MEMGDJEN@TabBorderSize?$AA@
CONST	SEGMENT
??_C@_0O@MEMGDJEN@TabBorderSize?$AA@ DB 'TabBorderSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OLKEIFFB@FrameBorderSize?$AA@
CONST	SEGMENT
??_C@_0BA@OLKEIFFB@FrameBorderSize?$AA@ DB 'FrameBorderSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GHHMANCJ@PopupBorderSize?$AA@
CONST	SEGMENT
??_C@_0BA@GHHMANCJ@PopupBorderSize?$AA@ DB 'PopupBorderSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MHPKDBMC@ChildBorderSize?$AA@
CONST	SEGMENT
??_C@_0BA@MHPKDBMC@ChildBorderSize?$AA@ DB 'ChildBorderSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DIOLDNNC@WindowBorderSize?$AA@
CONST	SEGMENT
??_C@_0BB@DIOLDNNC@WindowBorderSize?$AA@ DB 'WindowBorderSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MMBGIFGH@GrabMinSize?$AA@
CONST	SEGMENT
??_C@_0M@MMBGIFGH@GrabMinSize?$AA@ DB 'GrabMinSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DNFCAGJO@ScrollbarSize?$AA@
CONST	SEGMENT
??_C@_0O@DNFCAGJO@ScrollbarSize?$AA@ DB 'ScrollbarSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FJCIMFNP@IndentSpacing?$AA@
CONST	SEGMENT
??_C@_0O@FJCIMFNP@IndentSpacing?$AA@ DB 'IndentSpacing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CHKNMAIJ@TouchExtraPadding?$AA@
CONST	SEGMENT
??_C@_0BC@CHKNMAIJ@TouchExtraPadding?$AA@ DB 'TouchExtraPadding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FPELPPEM@ItemInnerSpacing?$AA@
CONST	SEGMENT
??_C@_0BB@FPELPPEM@ItemInnerSpacing?$AA@ DB 'ItemInnerSpacing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PJNJGKOI@ItemSpacing?$AA@
CONST	SEGMENT
??_C@_0M@PJNJGKOI@ItemSpacing?$AA@ DB 'ItemSpacing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CPMOGBCG@FramePadding?$AA@
CONST	SEGMENT
??_C@_0N@CPMOGBCG@FramePadding?$AA@ DB 'FramePadding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NJEPBHAL@WindowPadding?$AA@
CONST	SEGMENT
??_C@_0O@NJEPBHAL@WindowPadding?$AA@ DB 'WindowPadding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04KGFMLCPK@Main?$AA@
CONST	SEGMENT
??_C@_04KGFMLCPK@Main?$AA@ DB 'Main', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BOIJFCDP@Sizes?$AA@
CONST	SEGMENT
??_C@_05BOIJFCDP@Sizes?$AA@ DB 'Sizes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NNHHJHAK@?$CD?$CDtabs?$AA@
CONST	SEGMENT
??_C@_06NNHHJHAK@?$CD?$CDtabs?$AA@ DB '##tabs', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0IE@DBDEKJDM@Save?1Revert?5in?5local?5non?9persist@
CONST	SEGMENT
??_C@_0IE@DBDEKJDM@Save?1Revert?5in?5local?5non?9persist@ DB 'Save/Revert'
	DB	' in local non-persistent storage. Default Colors definition a'
	DB	're not affected. Use "Export" below to save them somewhere.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KOOMFCFA@Revert?5Ref?$AA@
CONST	SEGMENT
??_C@_0L@KOOMFCFA@Revert?5Ref?$AA@ DB 'Revert Ref', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EEJHGAPI@Save?5Ref?$AA@
CONST	SEGMENT
??_C@_08EEJHGAPI@Save?5Ref?$AA@ DB 'Save Ref', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NFCFILGL@PopupBorder?$AA@
CONST	SEGMENT
??_C@_0M@NFCFILGL@PopupBorder?$AA@ DB 'PopupBorder', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LIENHPEL@FrameBorder?$AA@
CONST	SEGMENT
??_C@_0M@LIENHPEL@FrameBorder?$AA@ DB 'FrameBorder', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IABNAJJO@WindowBorder?$AA@
CONST	SEGMENT
??_C@_0N@IABNAJJO@WindowBorder?$AA@ DB 'WindowBorder', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MJEGPPND@FrameRounding?$AA@
CONST	SEGMENT
??_C@_0O@MJEGPPND@FrameRounding?$AA@ DB 'FrameRounding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OGAKFFL@Fonts?$CD?$CDSelector?$AA@
CONST	SEGMENT
??_C@_0BA@OGAKFFL@Fonts?$CD?$CDSelector?$AA@ DB 'Fonts##Selector', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MDDLAALC@Colors?$CD?$CDSelector?$AA@
CONST	SEGMENT
??_C@_0BB@MDDLAALC@Colors?$CD?$CDSelector?$AA@ DB 'Colors##Selector', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LNCFKLAK@Tools?1Style?5Editor?$AA@
CONST	SEGMENT
??_C@_0BD@LNCFKLAK@Tools?1Style?5Editor?$AA@ DB 'Tools/Style Editor', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4JA DD 017d0H ; `ImGui::ShowStyleEditor'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BE@PBMDCJBA@Dark?$AALight?$AAClassic?$AA?$AA@
CONST	SEGMENT
??_C@_0BE@PBMDCJBA@Dark?$AALight?$AAClassic?$AA?$AA@ DB 'Dark', 00H, 'Lig'
	DB	'ht', 00H, 'Classic', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BCL@DICJLDFC@?9?5Load?5additional?5fonts?5with?5io?4@
CONST	SEGMENT
??_C@_0BCL@DICJLDFC@?9?5Load?5additional?5fonts?5with?5io?4@ DB '- Load a'
	DB	'dditional fonts with io.Fonts->AddFontFromFileTTF().', 0aH, '-'
	DB	' The font atlas is built when calling io.Fonts->GetTexDataAsX'
	DB	'XXX() or io.Fonts->Build().', 0aH, '- Read FAQ and docs/FONTS'
	DB	'.md for more details.', 0aH, '- If you need to add/remove fon'
	DB	'ts at runtime (e.g. for DPI change), do it before calling New'
	DB	'Frame().', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05PPIKNONO@?6?$GA?$GA?$GA?6?$AA@
CONST	SEGMENT
??_C@_05PPIKNONO@?6?$GA?$GA?$GA?6?$AA@ DB 0aH, '```', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@ECALHKFF@style?4ItemInnerSpacing?3?5?$CF?42f?0?$CF?42@
CONST	SEGMENT
??_C@_0CC@ECALHKFF@style?4ItemInnerSpacing?3?5?$CF?42f?0?$CF?42@ DB 'styl'
	DB	'e.ItemInnerSpacing: %.2f,%.2f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DHGOAPDN@style?4ItemSpacing?3?5?$CF?42f?0?$CF?42f?$AA@
CONST	SEGMENT
??_C@_0BN@DHGOAPDN@style?4ItemSpacing?3?5?$CF?42f?0?$CF?42f?$AA@ DB 'styl'
	DB	'e.ItemSpacing: %.2f,%.2f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JEFFCPEF@style?4FrameBorderSize?3?5?$CF?42f?$AA@
CONST	SEGMENT
??_C@_0BM@JEFFCPEF@style?4FrameBorderSize?3?5?$CF?42f?$AA@ DB 'style.Fram'
	DB	'eBorderSize: %.2f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@INLCDPGI@style?4FrameRounding?3?5?$CF?42f?$AA@
CONST	SEGMENT
??_C@_0BK@INLCDPGI@style?4FrameRounding?3?5?$CF?42f?$AA@ DB 'style.FrameR'
	DB	'ounding: %.2f', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GOMLHPA@style?4FramePadding?3?5?$CF?42f?0?$CF?42f?$AA@
CONST	SEGMENT
??_C@_0BO@GOMLHPA@style?4FramePadding?3?5?$CF?42f?0?$CF?42f?$AA@ DB 'styl'
	DB	'e.FramePadding: %.2f,%.2f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NGAGEFMI@style?4WindowBorderSize?3?5?$CF?42f?$AA@
CONST	SEGMENT
??_C@_0BN@NGAGEFMI@style?4WindowBorderSize?3?5?$CF?42f?$AA@ DB 'style.Win'
	DB	'dowBorderSize: %.2f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CFKGJLOD@style?4WindowPadding?3?5?$CF?42f?0?$CF?42f?$AA@
CONST	SEGMENT
??_C@_0BP@CFKGJLOD@style?4WindowPadding?3?5?$CF?42f?0?$CF?42f?$AA@ DB 'st'
	DB	'yle.WindowPadding: %.2f,%.2f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MDJEGDDF@io?4DisplayFramebufferScale?3?5?$CF?42f@
CONST	SEGMENT
??_C@_0CG@MDJEGDDF@io?4DisplayFramebufferScale?3?5?$CF?42f@ DB 'io.Displa'
	DB	'yFramebufferScale: %.2f,%.2f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EIINOCEN@io?4DisplaySize?3?5?$CF?42f?0?$CF?42f?$AA@
CONST	SEGMENT
??_C@_0BK@EIINOCEN@io?4DisplaySize?3?5?$CF?42f?0?$CF?42f?$AA@ DB 'io.Disp'
	DB	'laySize: %.2f,%.2f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@CPKPHKKN@io?4Fonts?3?5?$CFd?5fonts?0?5Flags?3?50x?$CF08@
CONST	SEGMENT
??_C@_0DC@CPKPHKKN@io?4Fonts?3?5?$CFd?5fonts?0?5Flags?3?50x?$CF08@ DB 'io'
	DB	'.Fonts: %d fonts, Flags: 0x%08X, TexSize: %d,%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GFLBPJOL@?5RendererHasVtxOffset?$AA@
CONST	SEGMENT
??_C@_0BG@GFLBPJOL@?5RendererHasVtxOffset?$AA@ DB ' RendererHasVtxOffset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EKJHBGEP@?5HasSetMousePos?$AA@
CONST	SEGMENT
??_C@_0BA@EKJHBGEP@?5HasSetMousePos?$AA@ DB ' HasSetMousePos', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NNHFCGPM@?5HasMouseCursors?$AA@
CONST	SEGMENT
??_C@_0BB@NNHFCGPM@?5HasMouseCursors?$AA@ DB ' HasMouseCursors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MPABENKI@?5HasGamepad?$AA@
CONST	SEGMENT
??_C@_0M@MPABENKI@?5HasGamepad?$AA@ DB ' HasGamepad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GNGLPDFI@io?4BackendFlags?3?50x?$CF08X?$AA@
CONST	SEGMENT
??_C@_0BI@GNGLPDFI@io?4BackendFlags?3?50x?$CF08X?$AA@ DB 'io.BackendFlags'
	DB	': 0x%08X', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LAKMNGBL@io?4ConfigMemoryCompactTimer?5?$DN?5?$CF?4@
CONST	SEGMENT
??_C@_0CD@LAKMNGBL@io?4ConfigMemoryCompactTimer?5?$DN?5?$CF?4@ DB 'io.Con'
	DB	'figMemoryCompactTimer = %.1f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PEAELIMN@io?4ConfigMacOSXBehaviors?$AA@
CONST	SEGMENT
??_C@_0BJ@PEAELIMN@io?4ConfigMacOSXBehaviors?$AA@ DB 'io.ConfigMacOSXBeha'
	DB	'viors', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LKMNGEAI@?5NoMouseCursorChange?$AA@
CONST	SEGMENT
??_C@_0BF@LKMNGEAI@?5NoMouseCursorChange?$AA@ DB ' NoMouseCursorChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GAJGGFEK@?5NoMouse?$AA@
CONST	SEGMENT
??_C@_08GAJGGFEK@?5NoMouse?$AA@ DB ' NoMouse', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DGPFDLKM@?5NavNoCaptureKeyboard?$AA@
CONST	SEGMENT
??_C@_0BG@DGPFDLKM@?5NavNoCaptureKeyboard?$AA@ DB ' NavNoCaptureKeyboard', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KOLHMNKG@?5NavEnableSetMousePos?$AA@
CONST	SEGMENT
??_C@_0BG@KOLHMNKG@?5NavEnableSetMousePos?$AA@ DB ' NavEnableSetMousePos', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PFLKKAGF@?5NavEnableGamepad?$AA@
CONST	SEGMENT
??_C@_0BC@PFLKKAGF@?5NavEnableGamepad?$AA@ DB ' NavEnableGamepad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CKENCLMO@?5NavEnableKeyboard?$AA@
CONST	SEGMENT
??_C@_0BD@CKENCLMO@?5NavEnableKeyboard?$AA@ DB ' NavEnableKeyboard', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DILJIOHM@io?4ConfigFlags?3?50x?$CF08X?$AA@
CONST	SEGMENT
??_C@_0BH@DILJIOHM@io?4ConfigFlags?3?50x?$CF08X?$AA@ DB 'io.ConfigFlags: '
	DB	'0x%08X', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HCPCDKOE@io?4BackendRendererName?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BL@HCPCDKOE@io?4BackendRendererName?3?5?$CFs?$AA@ DB 'io.BackendRe'
	DB	'ndererName: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DHJKNAPN@io?4BackendPlatformName?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BL@DHJKNAPN@io?4BackendPlatformName?3?5?$CFs?$AA@ DB 'io.BackendPl'
	DB	'atformName: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HIBGFPH@NULL?$AA@
CONST	SEGMENT
??_C@_04HIBGFPH@NULL?$AA@ DB 'NULL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LLKICGOL@define?3?5_MSVC_LANG?$DN?$CFd?$AA@
CONST	SEGMENT
??_C@_0BG@LLKICGOL@define?3?5_MSVC_LANG?$DN?$CFd?$AA@ DB 'define: _MSVC_L'
	DB	'ANG=%d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JHNIDJHD@define?3?5_MSC_VER?$DN?$CFd?$AA@
CONST	SEGMENT
??_C@_0BE@JHNIDJHD@define?3?5_MSC_VER?$DN?$CFd?$AA@ DB 'define: _MSC_VER='
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PFAKOKCE@define?3?5_WIN64?$AA@
CONST	SEGMENT
??_C@_0P@PFAKOKCE@define?3?5_WIN64?$AA@ DB 'define: _WIN64', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KFJLIPEJ@define?3?5_WIN32?$AA@
CONST	SEGMENT
??_C@_0P@KFJLIPEJ@define?3?5_WIN32?$AA@ DB 'define: _WIN32', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KGAJBCNH@define?3?5__cplusplus?$DN?$CFd?$AA@
CONST	SEGMENT
??_C@_0BH@KGAJBCNH@define?3?5__cplusplus?$DN?$CFd?$AA@ DB 'define: __cplu'
	DB	'splus=%d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@BJAMNCHD@sizeof?$CIsize_t?$CJ?3?5?$CFd?0?5sizeof?$CIImDra@
CONST	SEGMENT
??_C@_0EC@BJAMNCHD@sizeof?$CIsize_t?$CJ?3?5?$CFd?0?5sizeof?$CIImDra@ DB 's'
	DB	'izeof(size_t): %d, sizeof(ImDrawIdx): %d, sizeof(ImDrawVert):'
	DB	' %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GCCEJBGO@Dear?5ImGui?5?$CFs?5?$CI?$CFd?$CJ?$AA@
CONST	SEGMENT
??_C@_0BD@GCCEJBGO@Dear?5ImGui?5?$CFs?5?$CI?$CFd?$CJ?$AA@ DB 'Dear ImGui '
	DB	'%s (%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04CJPBKLAG@?$GA?$GA?$GA?6?$AA@
CONST	SEGMENT
??_C@_04CJPBKLAG@?$GA?$GA?$GA?6?$AA@ DB '```', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FGECHJGB@cfg_infos?$AA@
CONST	SEGMENT
??_C@_09FGECHJGB@cfg_infos?$AA@ DB 'cfg_infos', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JBNIPPJL@Copy?5to?5clipboard?$AA@
CONST	SEGMENT
??_C@_0BC@JBNIPPJL@Copy?5to?5clipboard?$AA@ DB 'Copy to clipboard', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CEAKAMCE@Config?1Build?5Information?$AA@
CONST	SEGMENT
??_C@_0BJ@CEAKAMCE@Config?1Build?5Information?$AA@ DB 'Config/Build Infor'
	DB	'mation', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@NMHKMBMB@Dear?5ImGui?5is?5licensed?5under?5the@
CONST	SEGMENT
??_C@_0FA@NMHKMBMB@Dear?5ImGui?5is?5licensed?5under?5the@ DB 'Dear ImGui '
	DB	'is licensed under the MIT License, see LICENSE for more infor'
	DB	'mation.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@LADNBCJ@By?5Omar?5Cornut?5and?5all?5Dear?5ImGu@
CONST	SEGMENT
??_C@_0DA@LADNBCJ@By?5Omar?5Cornut?5and?5all?5Dear?5ImGu@ DB 'By Omar Cor'
	DB	'nut and all Dear ImGui contributors.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NCHBJMJF@Dear?5ImGui?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0O@NCHBJMJF@Dear?5ImGui?5?$CFs?$AA@ DB 'Dear ImGui %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FIOEKAIP@Tools?1About?5Dear?5ImGui?$AA@
CONST	SEGMENT
??_C@_0BH@FIOEKAIP@Tools?1About?5Dear?5ImGui?$AA@ DB 'Tools/About Dear Im'
	DB	'Gui', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowAboutWindow@ImGui@@YAXPEA_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowAboutWindow@ImGui@@YAXPEA_N@Z@4JA DD 0170cH ; `ImGui::ShowAboutWindow'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BM@LOAJCJGM@io?4MouseDelta?3?5?$CI?$CF?41f?0?5?$CF?41f?$CJ?$AA@
CONST	SEGMENT
??_C@_0BM@LOAJCJGM@io?4MouseDelta?3?5?$CI?$CF?41f?0?5?$CF?41f?$CJ?$AA@ DB 'i'
	DB	'o.MouseDelta: (%.1f, %.1f)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LGMLCNKI@?5?5w?1?5zero?5threshold?3?5?$CI?$CF?41f?0?5?$CF?41f@
CONST	SEGMENT
??_C@_0CC@LGMLCNKI@?5?5w?1?5zero?5threshold?3?5?$CI?$CF?41f?0?5?$CF?41f@ DB ' '
	DB	' w/ zero threshold: (%.1f, %.1f)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KCDOPHOF@?5?5w?1?5default?5threshold?3?5?$CI?$CF?41f?0?5?$CF@
CONST	SEGMENT
??_C@_0CF@KCDOPHOF@?5?5w?1?5default?5threshold?3?5?$CI?$CF?41f?0?5?$CF@ DB ' '
	DB	' w/ default threshold: (%.1f, %.1f)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GNJKBBCP@GetMouseDragDelta?$CI0?$CJ?3?$AA@
CONST	SEGMENT
??_C@_0BG@GNJKBBCP@GetMouseDragDelta?$CI0?$CJ?3?$AA@ DB 'GetMouseDragDelt'
	DB	'a(0):', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_07GELNHEGO@Drag?5Me?$AA@
CONST	SEGMENT
??_C@_07GELNHEGO@Drag?5Me?$AA@ DB 'Drag Me', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IDAIPONC@?5?5w?1?5large?5threshold?3?5?$CFd?0?$AA@
CONST	SEGMENT
??_C@_0BK@IDAIPONC@?5?5w?1?5large?5threshold?3?5?$CFd?0?$AA@ DB '  w/ lar'
	DB	'ge threshold: %d,', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EKJNKKLN@?5?5w?1?5zero?5threshold?3?5?$CFd?0?$AA@
CONST	SEGMENT
??_C@_0BJ@EKJNKKLN@?5?5w?1?5zero?5threshold?3?5?$CFd?0?$AA@ DB '  w/ zero'
	DB	' threshold: %d,', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OAEENKC@?5?5w?1?5default?5threshold?3?5?$CFd?0?$AA@
CONST	SEGMENT
??_C@_0BM@OAEENKC@?5?5w?1?5default?5threshold?3?5?$CFd?0?$AA@ DB '  w/ de'
	DB	'fault threshold: %d,', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KIECDLEM@IsMouseDragging?$CI?$CFd?$CJ?3?$AA@
CONST	SEGMENT
??_C@_0BF@KIECDLEM@IsMouseDragging?$CI?$CFd?$CJ?3?$AA@ DB 'IsMouseDraggin'
	DB	'g(%d):', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@PFEFFOMN@You?5can?5use?5ImGui?3?3GetMouseDragD@
CONST	SEGMENT
??_C@_0FH@PFEFFOMN@You?5can?5use?5ImGui?3?3GetMouseDragD@ DB 'You can use'
	DB	' ImGui::GetMouseDragDelta(0) to query for the dragged amount '
	DB	'on any widget.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08EJAEFPJK@Dragging?$AA@
CONST	SEGMENT
??_C@_08EJAEFPJK@Dragging?$AA@ DB 'Dragging', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KAPLGJKD@Inputs?5?$CG?5Focus?1Dragging?$AA@
CONST	SEGMENT
??_C@_0BI@KAPLGJKD@Inputs?5?$CG?5Focus?1Dragging?$AA@ DB 'Inputs & Focus/'
	DB	'Dragging', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@KGJCPIPJ@NB?3?5Cursor?5?$CG?5selection?5are?5prese@
CONST	SEGMENT
??_C@_0EN@KGJCPIPJ@NB?3?5Cursor?5?$CG?5selection?5are?5prese@ DB 'NB: Cur'
	DB	'sor & selection are preserved when refocusing last used item '
	DB	'in code.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06FBFHKKF@Float3?$AA@
CONST	SEGMENT
??_C@_06FBFHKKF@Float3?$AA@ DB 'Float3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GJJJLMMF@Focus?5on?5Z?$AA@
CONST	SEGMENT
??_C@_0L@GJJJLMMF@Focus?5on?5Z?$AA@ DB 'Focus on Z', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ECLEOPAG@Focus?5on?5Y?$AA@
CONST	SEGMENT
??_C@_0L@ECLEOPAG@Focus?5on?5Y?$AA@ DB 'Focus on Y', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FLKPNOEH@Focus?5on?5X?$AA@
CONST	SEGMENT
??_C@_0L@FLKPNOEH@Focus?5on?5X?$AA@ DB 'Focus on X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EPMJCFDB@Item?5with?5focus?3?5?$DMnone?$DO?$AA@
CONST	SEGMENT
??_C@_0BI@EPMJCFDB@Item?5with?5focus?3?5?$DMnone?$DO?$AA@ DB 'Item with f'
	DB	'ocus: <none>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PCNBLNDG@Item?5with?5focus?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BE@PCNBLNDG@Item?5with?5focus?3?5?$CFd?$AA@ DB 'Item with focus: %'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LCFCNFKI@3?5?$CItab?5skip?$CJ?$AA@
CONST	SEGMENT
??_C@_0N@LCFCNFKI@3?5?$CItab?5skip?$CJ?$AA@ DB '3 (tab skip)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNKGGMCL@Focus?5on?53?$AA@
CONST	SEGMENT
??_C@_0L@NNKGGMCL@Focus?5on?53?$AA@ DB 'Focus on 3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MELNFNGK@Focus?5on?52?$AA@
CONST	SEGMENT
??_C@_0L@MELNFNGK@Focus?5on?52?$AA@ DB 'Focus on 2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OPJAAOKJ@Focus?5on?51?$AA@
CONST	SEGMENT
??_C@_0L@OPJAAOKJ@Focus?5on?51?$AA@ DB 'Focus on 1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PGBLAHMK@Focus?5from?5code?$AA@
CONST	SEGMENT
??_C@_0BA@PGBLAHMK@Focus?5from?5code?$AA@ DB 'Focus from code', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HINAMKMF@Inputs?5?$CG?5Focus?1Focus?5from?5code?$AA@
CONST	SEGMENT
??_C@_0BP@HINAMKMF@Inputs?5?$CG?5Focus?1Focus?5from?5code?$AA@ DB 'Inputs'
	DB	' & Focus/Focus from code', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01BMBHCPLG@5?$AA@
CONST	SEGMENT
??_C@_01BMBHCPLG@5?$AA@ DB '5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@EKDPAEPE@Item?5won?8t?5be?5cycled?5through?5whe@
CONST	SEGMENT
??_C@_0DK@EKDPAEPE@Item?5won?8t?5be?5cycled?5through?5whe@ DB 'Item won'''
	DB	't be cycled through when using TAB or Shift+Tab.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MPCBNDPA@4?5?$CItab?5skip?$CJ?$AA@
CONST	SEGMENT
??_C@_0N@MPCBNDPA@4?5?$CItab?5skip?$CJ?$AA@ DB '4 (tab skip)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EKENIIDA@3?$AA@
CONST	SEGMENT
??_C@_01EKENIIDA@3?$AA@ DB '3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FDFGLJHB@2?$AA@
CONST	SEGMENT
??_C@_01FDFGLJHB@2?$AA@ DB '2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1?$AA@
CONST	SEGMENT
??_C@_01HIHLOKLC@1?$AA@ DB '1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@DBMIKJE@Use?5TAB?1SHIFT?$CLTAB?5to?5cycle?5throu@
CONST	SEGMENT
??_C@_0DN@DBMIKJE@Use?5TAB?1SHIFT?$CLTAB?5to?5cycle?5throu@ DB 'Use TAB/S'
	DB	'HIFT+TAB to cycle through keyboard editable fields.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07OOGFLDEE@Tabbing?$AA@
CONST	SEGMENT
??_C@_07OOGFLDEE@Tabbing?$AA@ DB 'Tabbing', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HCPGLPEC@Inputs?5?$CG?5Focus?1Tabbing?$AA@
CONST	SEGMENT
??_C@_0BH@HCPGLPEC@Inputs?5?$CG?5Focus?1Tabbing?$AA@ DB 'Inputs & Focus/T'
	DB	'abbing', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KDPKCDI@Mouse?5cursor?5?$CFd?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BE@KDPKCDI@Mouse?5cursor?5?$CFd?3?5?$CFs?$AA@ DB 'Mouse cursor %d:'
	DB	' %s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0PC@CDIOEKMA@Your?5application?5can?5render?5a?5di@
CONST	SEGMENT
??_C@_0PC@CDIOEKMA@Your?5application?5can?5render?5a?5di@ DB 'Your applic'
	DB	'ation can render a different mouse cursor based on what ImGui'
	DB	'::GetMouseCursor() returns. If software cursor rendering (io.'
	DB	'MouseDrawCursor) is set ImGui will draw the right cursor for '
	DB	'you, otherwise your backend needs to handle it.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MCMILHH@Hover?5to?5see?5mouse?5cursors?3?$AA@
CONST	SEGMENT
??_C@_0BM@MCMILHH@Hover?5to?5see?5mouse?5cursors?3?$AA@ DB 'Hover to see '
	DB	'mouse cursors:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CHGMKDBB@Current?5mouse?5cursor?5?$DN?5?$CFd?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BO@CHGMKDBB@Current?5mouse?5cursor?5?$DN?5?$CFd?3?5?$CFs?$AA@ DB 'C'
	DB	'urrent mouse cursor = %d: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OJPFEFMM@NotAllowed?$AA@
CONST	SEGMENT
??_C@_0L@OJPFEFMM@NotAllowed?$AA@ DB 'NotAllowed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JBBMMDIF@Hand?$AA@
CONST	SEGMENT
??_C@_04JBBMMDIF@Hand?$AA@ DB 'Hand', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MHCCEKFE@ResizeNWSE?$AA@
CONST	SEGMENT
??_C@_0L@MHCCEKFE@ResizeNWSE?$AA@ DB 'ResizeNWSE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EFMGKFJD@ResizeNESW?$AA@
CONST	SEGMENT
??_C@_0L@EFMGKFJD@ResizeNESW?$AA@ DB 'ResizeNESW', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BDBDMDLN@ResizeEW?$AA@
CONST	SEGMENT
??_C@_08BDBDMDLN@ResizeEW?$AA@ DB 'ResizeEW', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HLCKOJFI@ResizeNS?$AA@
CONST	SEGMENT
??_C@_08HLCKOJFI@ResizeNS?$AA@ DB 'ResizeNS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NLNHGFHP@ResizeAll?$AA@
CONST	SEGMENT
??_C@_09NLNHGFHP@ResizeAll?$AA@ DB 'ResizeAll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KBOPCPBA@TextInput?$AA@
CONST	SEGMENT
??_C@_09KBOPCPBA@TextInput?$AA@ DB 'TextInput', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OLOIDPAB@Arrow?$AA@
CONST	SEGMENT
??_C@_05OLOIDPAB@Arrow?$AA@ DB 'Arrow', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EOGKPMHB@Mouse?5Cursors?$AA@
CONST	SEGMENT
??_C@_0O@EOGKPMHB@Mouse?5Cursors?$AA@ DB 'Mouse Cursors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GDPPNLD@Inputs?5?$CG?5Focus?1Mouse?5Cursors?$AA@
CONST	SEGMENT
??_C@_0BN@GDPPNLD@Inputs?5?$CG?5Focus?1Mouse?5Cursors?$AA@ DB 'Inputs & F'
	DB	'ocus/Mouse Cursors', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07OAKMJIEO@?$CD?$CDpanel?$AA@
CONST	SEGMENT
??_C@_07OAKMJIEO@?$CD?$CDpanel?$AA@ DB '##panel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FJJMGFDF@SetNextFrameWantCaptureKeyboard?$CI@
CONST	SEGMENT
??_C@_0CL@FJJMGFDF@SetNextFrameWantCaptureKeyboard?$CI@ DB 'SetNextFrameW'
	DB	'antCaptureKeyboard() on hover', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CJCOBGKD@SetNextFrameWantCaptureMouse?$CI?$CJ?5o@
CONST	SEGMENT
??_C@_0CI@CJCOBGKD@SetNextFrameWantCaptureMouse?$CI?$CJ?5o@ DB 'SetNextFr'
	DB	'ameWantCaptureMouse() on hover', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EGIDJBEG@Set?5to?5true?$AA@
CONST	SEGMENT
??_C@_0M@EGIDJBEG@Set?5to?5true?$AA@ DB 'Set to true', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NLJHHBMD@Set?5to?5false?$AA@
CONST	SEGMENT
??_C@_0N@NLJHHBMD@Set?5to?5false?$AA@ DB 'Set to false', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0MF@IDABKCNF@Hovering?5the?5colored?5canvas?5will@
CONST	SEGMENT
??_C@_0MF@IDABKCNF@Hovering?5the?5colored?5canvas?5will@ DB 'Hovering the'
	DB	' colored canvas will override io.WantCaptureXXX fields.', 0aH
	DB	'Notice how normally (when set to none), the value of io.WantC'
	DB	'aptureKeyboard would be false when hovering and true when cli'
	DB	'cking.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JGLMCEJO@WantCapture?5override?$AA@
CONST	SEGMENT
??_C@_0BF@JGLMCEJO@WantCapture?5override?$AA@ DB 'WantCapture override', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@FPPCIOD@Inputs?5?$CG?5Focus?1Outputs?1WantCaptu@
CONST	SEGMENT
??_C@_0CM@FPPCIOD@Inputs?5?$CG?5Focus?1Outputs?1WantCaptu@ DB 'Inputs & F'
	DB	'ocus/Outputs/WantCapture override', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@CPJFFAGJ@io?4NavActive?3?5?$CFd?0?5io?4NavVisible?3@
CONST	SEGMENT
??_C@_0CE@CPJFFAGJ@io?4NavActive?3?5?$CFd?0?5io?4NavVisible?3@ DB 'io.Nav'
	DB	'Active: %d, io.NavVisible: %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DMBBELLF@io?4WantSetMousePos?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BH@DMBBELLF@io?4WantSetMousePos?3?5?$CFd?$AA@ DB 'io.WantSetMouseP'
	DB	'os: %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NDPHMPCP@io?4WantTextInput?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BF@NDPHMPCP@io?4WantTextInput?3?5?$CFd?$AA@ DB 'io.WantTextInput: '
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GDHLPHDK@io?4WantCaptureKeyboard?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BL@GDHLPHDK@io?4WantCaptureKeyboard?3?5?$CFd?$AA@ DB 'io.WantCaptu'
	DB	'reKeyboard: %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JIGLLDLJ@io?4WantCaptureMouseUnlessPopupCl@
CONST	SEGMENT
??_C@_0CI@JIGLLDLJ@io?4WantCaptureMouseUnlessPopupCl@ DB 'io.WantCaptureM'
	DB	'ouseUnlessPopupClose: %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JLMOJHHN@io?4WantCaptureMouse?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BI@JLMOJHHN@io?4WantCaptureMouse?3?5?$CFd?$AA@ DB 'io.WantCaptureM'
	DB	'ouse: %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CAJ@EIJLLMLM@The?5value?5of?5io?4WantCaptureMouse@
CONST	SEGMENT
??_C@_0CAJ@EIJLLMLM@The?5value?5of?5io?4WantCaptureMouse@ DB 'The value o'
	DB	'f io.WantCaptureMouse and io.WantCaptureKeyboard are normally'
	DB	' set by Dear ImGui to instruct your application of how to rou'
	DB	'te inputs. Typically, when a value is true, it means Dear ImG'
	DB	'ui wants the corresponding inputs and we expect the underlyin'
	DB	'g application to ignore them.', 0aH, 0aH, 'The most typical c'
	DB	'ase is: when hovering a window, Dear ImGui set io.WantCapture'
	DB	'Mouse to true, and underlying application should ignore mouse'
	DB	' inputs (in practice there are many and more subtle rules lea'
	DB	'ding to how those flags are set).', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LGFKBKFE@Outputs?$AA@
CONST	SEGMENT
??_C@_07LGFKBKFE@Outputs?$AA@ DB 'Outputs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CKMJBGFC@Inputs?5?$CG?5Focus?1Outputs?$AA@
CONST	SEGMENT
??_C@_0BH@CKMJBGFC@Inputs?5?$CG?5Focus?1Outputs?$AA@ DB 'Inputs & Focus/O'
	DB	'utputs', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FLAJMFCG@?8?$CFc?8?5?$CI0x?$CF04X?$CJ?$AA@
CONST	SEGMENT
??_C@_0O@FLAJMFCG@?8?$CFc?8?5?$CI0x?$CF04X?$CJ?$AA@ DB '''%c'' (0x%04X)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PKFKOHDJ@Chars?5queue?3?$AA@
CONST	SEGMENT
??_C@_0N@PKFKOHDJ@Chars?5queue?3?$AA@ DB 'Chars queue:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HPBGOMPC@Keys?5mods?3?5?$CFs?$CFs?$CFs?$CFs?$AA@
CONST	SEGMENT
??_C@_0BE@HPBGOMPC@Keys?5mods?3?5?$CFs?$CFs?$CFs?$CFs?$AA@ DB 'Keys mods:'
	DB	' %s%s%s%s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHGCNILK@CTRL?5?$AA@
CONST	SEGMENT
??_C@_05IHGCNILK@CTRL?5?$AA@ DB 'CTRL ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IGAIMELN@SHIFT?5?$AA@
CONST	SEGMENT
??_C@_06IGAIMELN@SHIFT?5?$AA@ DB 'SHIFT ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDLNDMFA@ALT?5?$AA@
CONST	SEGMENT
??_C@_04HDLNDMFA@ALT?5?$AA@ DB 'ALT ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ECIIPDFH@SUPER?5?$AA@
CONST	SEGMENT
??_C@_06ECIIPDFH@SUPER?5?$AA@ DB 'SUPER ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ODHCILNN@?$CI?$CF?402f?$CJ?$AA@
CONST	SEGMENT
??_C@_07ODHCILNN@?$CI?$CF?402f?$CJ?$AA@ DB '(%.02f)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07BFJJNFBL@?$CC?$CFs?$CC?5?$CFd?$AA@
CONST	SEGMENT
??_C@_07BFJJNFBL@?$CC?$CFs?$CC?5?$CFd?$AA@ DB '"%s" %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OEDFLLKD@?$CC?$CFs?$CC?$AA@
CONST	SEGMENT
??_C@_04OEDFLLKD@?$CC?$CFs?$CC?$AA@ DB '"%s"', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@POLCMIEL@Keys?5down?3?$AA@
CONST	SEGMENT
??_C@_0L@POLCMIEL@Keys?5down?3?$AA@ DB 'Keys down:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CFHNPKHB@Mouse?5wheel?3?5?$CF?41f?$AA@
CONST	SEGMENT
??_C@_0BC@CFHNPKHB@Mouse?5wheel?3?5?$CF?41f?$AA@ DB 'Mouse wheel: %.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BCIHMLII@b?$CFd?5?$CI?$CF?402f?5secs?$CJ?$AA@
CONST	SEGMENT
??_C@_0BB@BCIHMLII@b?$CFd?5?$CI?$CF?402f?5secs?$CJ?$AA@ DB 'b%d (%.02f se'
	DB	'cs)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HODNMGFJ@Mouse?5down?3?$AA@
CONST	SEGMENT
??_C@_0M@HODNMGFJ@Mouse?5down?3?$AA@ DB 'Mouse down:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MNNMKHFC@Mouse?5delta?3?5?$CI?$CFg?0?5?$CFg?$CJ?$AA@
CONST	SEGMENT
??_C@_0BG@MNNMKHFC@Mouse?5delta?3?5?$CI?$CFg?0?5?$CFg?$CJ?$AA@ DB 'Mouse '
	DB	'delta: (%g, %g)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BCIGOCNH@Mouse?5pos?3?5?$DMINVALID?$DO?$AA@
CONST	SEGMENT
??_C@_0BF@BCIGOCNH@Mouse?5pos?3?5?$DMINVALID?$DO?$AA@ DB 'Mouse pos: <INV'
	DB	'ALID>', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HGGCPGOH@Mouse?5pos?3?5?$CI?$CFg?0?5?$CFg?$CJ?$AA@
CONST	SEGMENT
??_C@_0BE@HGGCPGOH@Mouse?5pos?3?5?$CI?$CFg?0?5?$CFg?$CJ?$AA@ DB 'Mouse po'
	DB	's: (%g, %g)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0HP@GHCMDAED@This?5is?5a?5simplified?5view?4?5See?5m@
CONST	SEGMENT
??_C@_0HP@GHCMDAED@This?5is?5a?5simplified?5view?4?5See?5m@ DB 'This is a'
	DB	' simplified view. See more detailed input state:', 0aH, '- in'
	DB	' ''Tools->Metrics/Debugger->Inputs''.', 0aH, '- in ''Tools->D'
	DB	'ebug Log->IO''.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OJCNILBN@Inputs?5?$CG?5Focus?1Inputs?$AA@
CONST	SEGMENT
??_C@_0BG@OJCNILBN@Inputs?5?$CG?5Focus?1Inputs?$AA@ DB 'Inputs & Focus/In'
	DB	'puts', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EJPGNOEJ@Inputs?5?$CG?5Focus?$AA@
CONST	SEGMENT
??_C@_0P@EJPGNOEJ@Inputs?5?$CG?5Focus?$AA@ DB 'Inputs & Focus', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowDemoWindowInputs@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowDemoWindowInputs@@YAXXZ@4JA DD 0163eH ; `ShowDemoWindowInputs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CM@HCLJNHNJ@The?5quick?5brown?5fox?5jumps?5over?5t@
CONST	SEGMENT
??_C@_0CM@HCLJNHNJ@The?5quick?5brown?5fox?5jumps?5over?5t@ DB 'The quick '
	DB	'brown fox jumps over the lazy dog', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LKPCNPLG@Tree?5in?5column?$AA@
CONST	SEGMENT
??_C@_0P@LKPCNPLG@Tree?5in?5column?$AA@ DB 'Tree in column', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MJPJLCIK@Even?5more?5contents?$AA@
CONST	SEGMENT
??_C@_0BD@MJPJLCIK@Even?5more?5contents?$AA@ DB 'Even more contents', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09NGNKJEEB@Node?$CFd?4?$CFd?$AA@
CONST	SEGMENT
??_C@_09NGNKJEEB@Node?$CFd?4?$CFd?$AA@ DB 'Node%d.%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DCLBKAFC@Node?5contents?$AA@
CONST	SEGMENT
??_C@_0O@DCLBKAFC@Node?5contents?$AA@ DB 'Node contents', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06NAFIGPDO@Node?$CFd?$AA@
CONST	SEGMENT
??_C@_06NAFIGPDO@Node?$CFd?$AA@ DB 'Node%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KCCPLAND@tree?$AA@
CONST	SEGMENT
??_C@_04KCCPLAND@tree?$AA@ DB 'tree', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GDOOJPNH@Tree?$AA@
CONST	SEGMENT
??_C@_04GDOOJPNH@Tree?$AA@ DB 'Tree', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FPOKBMNL@Columns?5?$CIlegacy?5API?$CJ?1Tree?$AA@
CONST	SEGMENT
??_C@_0BK@FPOKBMNL@Columns?5?$CIlegacy?5API?$CJ?1Tree?$AA@ DB 'Columns (l'
	DB	'egacy API)/Tree', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OFLPNIGP@Line?5?$CFd?5Column?5?$CFd?4?4?4?$AA@
CONST	SEGMENT
??_C@_0BF@OFLPNIGP@Line?5?$CFd?5Column?5?$CFd?4?4?4?$AA@ DB 'Line %d Colu'
	DB	'mn %d...', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OPBMFBNO@?$CD?$CDScrollingRegion?$AA@
CONST	SEGMENT
??_C@_0BC@OPBMFBNO@?$CD?$CDScrollingRegion?$AA@ DB '##ScrollingRegion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EDLEGCAK@Horizontal?5Scrolling?$AA@
CONST	SEGMENT
??_C@_0BF@EDLEGCAK@Horizontal?5Scrolling?$AA@ DB 'Horizontal Scrolling', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@DPADPAMP@Columns?5?$CIlegacy?5API?$CJ?1Horizontal?5@
CONST	SEGMENT
??_C@_0CK@DPADPAMP@Columns?5?$CIlegacy?5API?$CJ?1Horizontal?5@ DB 'Column'
	DB	's (legacy API)/Horizontal Scrolling', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FKDOIKDB@Hello?5Right?$AA@
CONST	SEGMENT
??_C@_0M@FKDOIKDB@Hello?5Right?$AA@ DB 'Hello Right', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BOIODOOK@Hello?5Left?$AA@
CONST	SEGMENT
??_C@_0L@BOIODOOK@Hello?5Left?$AA@ DB 'Hello Left', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@PEHKNKIL@The?5quick?5brown?5fox?5jumps?5over?5t@
CONST	SEGMENT
??_C@_0CN@PEHKNKIL@The?5quick?5brown?5fox?5jumps?5over?5t@ DB 'The quick '
	DB	'brown fox jumps over the lazy dog.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JBOHNDAK@word?9wrapping?$AA@
CONST	SEGMENT
??_C@_0O@JBOHNDAK@word?9wrapping?$AA@ DB 'word-wrapping', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FMIDKLNC@Word?9wrapping?$AA@
CONST	SEGMENT
??_C@_0O@FMIDKLNC@Word?9wrapping?$AA@ DB 'Word-wrapping', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@OAPEDJDK@Columns?5?$CIlegacy?5API?$CJ?1Word?9wrappi@
CONST	SEGMENT
??_C@_0CD@OAPEDJDK@Columns?5?$CIlegacy?5API?$CJ?1Word?9wrappi@ DB 'Column'
	DB	's (legacy API)/Word-wrapping', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BBDMKLMO@Category?5C?$AA@
CONST	SEGMENT
??_C@_0L@BBDMKLMO@Category?5C?$AA@ DB 'Category C', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ICHJKIP@Category?5B?$AA@
CONST	SEGMENT
??_C@_0L@ICHJKIP@Category?5B?$AA@ DB 'Category B', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CNBMJDEI@Blah?5blah?5blah?$AA@
CONST	SEGMENT
??_C@_0P@CNBMJDEI@Blah?5blah?5blah?$AA@ DB 'Blah blah blah', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CDAKMJEM@Category?5A?$AA@
CONST	SEGMENT
??_C@_0L@CDAKMJEM@Category?5A?$AA@ DB 'Category A', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OBGPFBCN@blue?$AA@
CONST	SEGMENT
??_C@_04OBGPFBCN@blue?$AA@ DB 'blue', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OADKLHKC@An?5extra?5line?5here?4?$AA@
CONST	SEGMENT
??_C@_0BE@OADKLHKC@An?5extra?5line?5here?4?$AA@ DB 'An extra line here.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03FAAAOPJM@red?$AA@
CONST	SEGMENT
??_C@_03FAAAOPJM@red?$AA@ DB 'red', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OHAOKMNF@ImGui?$AA@
CONST	SEGMENT
??_C@_05OHAOKMNF@ImGui?$AA@ DB 'ImGui', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IPHDHIPP@mixed?$AA@
CONST	SEGMENT
??_C@_05IPHDHIPP@mixed?$AA@ DB 'mixed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CEFNMID@Mixed?5items?$AA@
CONST	SEGMENT
??_C@_0M@CEFNMID@Mixed?5items?$AA@ DB 'Mixed items', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BCLMDBFI@Columns?5?$CIlegacy?5API?$CJ?1Mixed?5items@
CONST	SEGMENT
??_C@_0CB@BCLMDBFI@Columns?5?$CIlegacy?5API?$CJ?1Mixed?5items@ DB 'Column'
	DB	's (legacy API)/Mixed items', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CDDJNDCG@Long?5text?5that?5is?5likely?5to?5clip@
CONST	SEGMENT
??_C@_0CB@CDDJNDCG@Long?5text?5that?5is?5likely?5to?5clip@ DB 'Long text '
	DB	'that is likely to clip', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LBGPBMDK@Offset?5?$CF?42f?$AA@
CONST	SEGMENT
??_C@_0M@LBGPBMDK@Offset?5?$CF?42f?$AA@ DB 'Offset %.2f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CBJCAPLI@?$CFc?$CFc?$CFc?$AA@
CONST	SEGMENT
??_C@_06CBJCAPLI@?$CFc?$CFc?$CFc?$AA@ DB '%c%c%c', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NEOMLJGJ@vertical?$AA@
CONST	SEGMENT
??_C@_08NEOMLJGJ@vertical?$AA@ DB 'vertical', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LMMKHPOB@horizontal?$AA@
CONST	SEGMENT
??_C@_0L@LMMKHPOB@horizontal?$AA@ DB 'horizontal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EIBKBIKG@?$CD?$CDcolumns_count?$AA@
CONST	SEGMENT
??_C@_0BA@EIBKBIKG@?$CD?$CDcolumns_count?$AA@ DB '##columns_count', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NLMHJDCE@?$CFd?5columns?$AA@
CONST	SEGMENT
??_C@_0L@NLMHJDCE@?$CFd?5columns?$AA@ DB '%d columns', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PJFMDFHH@Borders?$AA@
CONST	SEGMENT
??_C@_07PJFMDFHH@Borders?$AA@ DB 'Borders', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OHIFMDLO@Columns?5?$CIlegacy?5API?$CJ?1Borders?$AA@
CONST	SEGMENT
??_C@_0BN@OHIFMDLO@Columns?5?$CIlegacy?5API?$CJ?1Borders?$AA@ DB 'Columns'
	DB	' (legacy API)/Borders', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BHGNKNGD@?1path?1three?$AA@
CONST	SEGMENT
??_C@_0M@BHGNKNGD@?1path?1three?$AA@ DB '/path/three', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KGFGFDII@?1path?1two?$AA@
CONST	SEGMENT
??_C@_09KGFGFDII@?1path?1two?$AA@ DB '/path/two', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MIFGPDGD@?1path?1one?$AA@
CONST	SEGMENT
??_C@_09MIFGPDGD@?1path?1one?$AA@ DB '/path/one', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BPEJBMFM@Hovered?$AA@
CONST	SEGMENT
??_C@_07BPEJBMFM@Hovered?$AA@ DB 'Hovered', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HMIIHGGM@Path?$AA@
CONST	SEGMENT
??_C@_04HMIIHGGM@Path?$AA@ DB 'Path', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09IGOFLFMM@mycolumns?$AA@
CONST	SEGMENT
??_C@_09IGOFLFMM@mycolumns?$AA@ DB 'mycolumns', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IEPPLKGA@With?5border?3?$AA@
CONST	SEGMENT
??_C@_0N@IEPPLKGA@With?5border?3?$AA@ DB 'With border:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GGDPAOBO@mycolumns3?$AA@
CONST	SEGMENT
??_C@_0L@GGDPAOBO@mycolumns3?$AA@ DB 'mycolumns3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KGDHMKCI@Without?5border?3?$AA@
CONST	SEGMENT
??_C@_0BA@KGDHMKCI@Without?5border?3?$AA@ DB 'Without border:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NBCJCENH@Columns?5?$CIlegacy?5API?$CJ?1Basic?$AA@
CONST	SEGMENT
??_C@_0BL@NBCJCENH@Columns?5?$CIlegacy?5API?$CJ?1Basic?$AA@ DB 'Columns ('
	DB	'legacy API)/Basic', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@MGFHBBFF@Columns?$CI?$CJ?5is?5an?5old?5API?$CB?5Prefer?5@
CONST	SEGMENT
??_C@_0FH@MGFHBBFF@Columns?$CI?$CJ?5is?5an?5old?5API?$CB?5Prefer?5@ DB 'C'
	DB	'olumns() is an old API! Prefer using the more flexible and po'
	DB	'werful BeginTable() API!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KMNMCONG@Legacy?5Columns?5API?$AA@
CONST	SEGMENT
??_C@_0BD@KMNMCONG@Legacy?5Columns?5API?$AA@ DB 'Legacy Columns API', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EOLLCEHP@Columns?5?$CIlegacy?5API?$CJ?$AA@
CONST	SEGMENT
??_C@_0BF@EOLLCEHP@Columns?5?$CIlegacy?5API?$CJ?$AA@ DB 'Columns (legacy '
	DB	'API)', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowDemoWindowColumns@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowDemoWindowColumns@@YAXXZ@4JA DD 01570H ; `ShowDemoWindowColumns'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DO@LNHNLFPF@?3?5DrawCmd?3?5?$CL?$CFd?5?$CIin?5child?5window?$CJ@
CONST	SEGMENT
??_C@_0DO@LNHNLFPF@?3?5DrawCmd?3?5?$CL?$CFd?5?$CIin?5child?5window?$CJ@ DB ':'
	DB	' DrawCmd: +%d (in child window), Scroll: (%.f/%.f) (%.f/%.f)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CHDNACKG@?3?5DrawCmd?3?5?$CL?$CFd?5?$CIin?5same?5window?$CJ?$AA@
CONST	SEGMENT
??_C@_0CA@CHDNACKG@?3?5DrawCmd?3?5?$CL?$CFd?5?$CIin?5same?5window?$CJ?$AA@ DB ':'
	DB	' DrawCmd: +%d (in same window)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CFGEHKMC@Debug?5details?$AA@
CONST	SEGMENT
??_C@_0O@CFGEHKMC@Debug?5details?$AA@ DB 'Debug details', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GCLJABMA@1234?$AA@
CONST	SEGMENT
??_C@_04GCLJABMA@1234?$AA@ DB '1234', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BHBHGIGI@Lorem?5ipsum?5dolor?5sit?5amet?$AA@
CONST	SEGMENT
??_C@_0BL@BHBHGIGI@Lorem?5ipsum?5dolor?5sit?5amet?$AA@ DB 'Lorem ipsum do'
	DB	'lor sit amet', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03HADHJFAJ@Eat?$AA@
CONST	SEGMENT
??_C@_03HADHJFAJ@Eat?$AA@ DB 'Eat', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LEKIAAHM@Chop?$AA@
CONST	SEGMENT
??_C@_04LEKIAAHM@Chop?$AA@ DB 'Chop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHBILLDG@Hidden?$AA@
CONST	SEGMENT
??_C@_06FHBILLDG@Hidden?$AA@ DB 'Hidden', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OHKMKKDH@Description?$AA@
CONST	SEGMENT
??_C@_0M@OHKMKKDH@Description?$AA@ DB 'Description', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IMAALAEK@table_advanced?$AA@
CONST	SEGMENT
??_C@_0P@IMAALAEK@table_advanced?$AA@ DB 'table_advanced', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DIOLBOIM@items_type?5?$CIfirst?5column?$CJ?$AA@
CONST	SEGMENT
??_C@_0BK@DIOLBOIM@items_type?5?$CIfirst?5column?$CJ?$AA@ DB 'items_type '
	DB	'(first column)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NCHDHPIM@items_count?$AA@
CONST	SEGMENT
??_C@_0M@NCHDHPIM@items_count?$AA@ DB 'items_count', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KLLECOCH@Specify?5height?5of?5the?5Selectable@
CONST	SEGMENT
??_C@_0CH@KLLECOCH@Specify?5height?5of?5the?5Selectable@ DB 'Specify heig'
	DB	'ht of the Selectable item.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KEOGDMAF@row_min_height?$AA@
CONST	SEGMENT
??_C@_0P@KEOGDMAF@row_min_height?$AA@ DB 'row_min_height', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HLDPMJL@inner_width?5?$CIwhen?5ScrollX?5active@
CONST	SEGMENT
??_C@_0CC@HLDPMJL@inner_width?5?$CIwhen?5ScrollX?5active@ DB 'inner_width'
	DB	' (when ScrollX active)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BIB@EGFLOKNO@If?5scrolling?5is?5disabled?5?$CIScroll@
CONST	SEGMENT
??_C@_0BIB@EGFLOKNO@If?5scrolling?5is?5disabled?5?$CIScroll@ DB 'If scrol'
	DB	'ling is disabled (ScrollX and ScrollY not set):', 0aH, '- The'
	DB	' table is output directly in the parent window.', 0aH, '- Out'
	DB	'erSize.x < 0.0f will right-align the table.', 0aH, '- OuterSi'
	DB	'ze.x = 0.0f will narrow fit the table unless there are any St'
	DB	'retch columns.', 0aH, '- OuterSize.y then becomes the minimum'
	DB	' size for the table, which will extend vertically if there ar'
	DB	'e more rows (unless NoHostExtendY is set).', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ENOPHFOF@outer_size?$AA@
CONST	SEGMENT
??_C@_0L@ENOPHFOF@outer_size?$AA@ DB 'outer_size', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OOHBCMON@?$CD?$CDOuterSize?$AA@
CONST	SEGMENT
??_C@_0M@OOHBCMON@?$CD?$CDOuterSize?$AA@ DB '##OuterSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OGOBPDEF@show_wrapped_text?$AA@
CONST	SEGMENT
??_C@_0BC@OGOBPDEF@show_wrapped_text?$AA@ DB 'show_wrapped_text', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JHAFDDDM@Other?3?$AA@
CONST	SEGMENT
??_C@_06JHAFDDDM@Other?3?$AA@ DB 'Other:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JHEMDMPA@Sorting?3?$AA@
CONST	SEGMENT
??_C@_08JHEMDMPA@Sorting?3?$AA@ DB 'Sorting:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IMKAGMGB@Scrolling?3?$AA@
CONST	SEGMENT
??_C@_0L@IMKAGMGB@Scrolling?3?$AA@ DB 'Scrolling:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LMJDLJGI@Padding?3?$AA@
CONST	SEGMENT
??_C@_08LMJDLJGI@Padding?3?$AA@ DB 'Padding:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0LK@OOMEMHDH@Disable?5clipping?5rectangle?5for?5e@
CONST	SEGMENT
??_C@_0LK@OOMEMHDH@Disable?5clipping?5rectangle?5for?5e@ DB 'Disable clip'
	DB	'ping rectangle for every individual columns (reduce draw comm'
	DB	'and count, items will be able to overflow into other columns)'
	DB	'. Generally incompatible with ScrollFreeze options.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IHCAENCE@Only?5available?5if?5ScrollX?5is?5dis@
CONST	SEGMENT
??_C@_0CH@IHCAENCE@Only?5available?5if?5ScrollX?5is?5dis@ DB 'Only availa'
	DB	'ble if ScrollX is disabled.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HH@KPNOAHGK@In?5the?5Advanced?5demo?5we?5override@
CONST	SEGMENT
??_C@_0HH@KPNOAHGK@In?5the?5Advanced?5demo?5we?5override@ DB 'In the Adva'
	DB	'nced demo we override the policy of each column so those tabl'
	DB	'e-wide settings have less effect that typical.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NCAJGFPC@Sizing?3?$AA@
CONST	SEGMENT
??_C@_07NCAJGFPC@Sizing?3?$AA@ DB 'Sizing:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JCNJHPJM@Decorations?3?$AA@
CONST	SEGMENT
??_C@_0N@JCNJHPJM@Decorations?3?$AA@ DB 'Decorations:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KBDPDJDH@ImGuiTableFlags_NoSavedSettings?$AA@
CONST	SEGMENT
??_C@_0CA@KBDPDJDH@ImGuiTableFlags_NoSavedSettings?$AA@ DB 'ImGuiTableFla'
	DB	'gs_NoSavedSettings', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IHBAKALC@ImGuiTableFlags_Sortable?$AA@
CONST	SEGMENT
??_C@_0BJ@IHBAKALC@ImGuiTableFlags_Sortable?$AA@ DB 'ImGuiTableFlags_Sort'
	DB	'able', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09DKFIFAAE@Features?3?$AA@
CONST	SEGMENT
??_C@_09DKFIFAAE@Features?3?$AA@ DB 'Features:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KHIHFBFN@Options?$AA@
CONST	SEGMENT
??_C@_07KHIHFBFN@Options?$AA@ DB 'Options', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GEMFLDEN@Selectable?5?$CIspan?5row?$CJ?$AA@
CONST	SEGMENT
??_C@_0BG@GEMFLDEN@Selectable?5?$CIspan?5row?$CJ?$AA@ DB 'Selectable (spa'
	DB	'n row)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IPDIIBIL@SmallButton?$AA@
CONST	SEGMENT
??_C@_0M@IPDIIBIL@SmallButton?$AA@ DB 'SmallButton', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PFDAEHJG@Tables?1Advanced?$AA@
CONST	SEGMENT
??_C@_0BA@PFDAEHJG@Tables?1Advanced?$AA@ DB 'Tables/Advanced', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHJIHAFH@None?$AA@
CONST	SEGMENT
??_C@_04OHJIHAFH@None?$AA@ DB 'None', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GACJPEFO@Quantity?$AA@
CONST	SEGMENT
??_C@_08GACJPEFO@Quantity?$AA@ DB 'Quantity', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PMAGBHAK@Action?$AA@
CONST	SEGMENT
??_C@_06PMAGBHAK@Action?$AA@ DB 'Action', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02OLOABKKD@ID?$AA@
CONST	SEGMENT
??_C@_02OLOABKKD@ID?$AA@ DB 'ID', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DBCCONDP@table_sorting?$AA@
CONST	SEGMENT
??_C@_0O@DBCCONDP@table_sorting?$AA@ DB 'table_sorting', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0IC@CNBEEKGB@When?5sorting?5is?5enabled?3?5allow?5n@
CONST	SEGMENT
??_C@_0IC@CNBEEKGB@When?5sorting?5is?5enabled?3?5allow?5n@ DB 'When sorti'
	DB	'ng is enabled: allow no sorting, disable default sorting. Tab'
	DB	'leGetSortSpecs() may return specs where (SpecsCount == 0).', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MANCMDD@ImGuiTableFlags_SortTristate?$AA@
CONST	SEGMENT
??_C@_0BN@MANCMDD@ImGuiTableFlags_SortTristate?$AA@ DB 'ImGuiTableFlags_S'
	DB	'ortTristate', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0JD@OJLOANPI@When?5sorting?5is?5enabled?3?5hold?5sh@
CONST	SEGMENT
??_C@_0JD@OJLOANPI@When?5sorting?5is?5enabled?3?5hold?5sh@ DB 'When sorti'
	DB	'ng is enabled: hold shift when clicking headers to sort on mu'
	DB	'ltiple column. TableGetSortSpecs() may return specs where (Sp'
	DB	'ecsCount > 1).', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@COJNFFHG@ImGuiTableFlags_SortMulti?$AA@
CONST	SEGMENT
??_C@_0BK@COJNFFHG@ImGuiTableFlags_SortMulti?$AA@ DB 'ImGuiTableFlags_Sor'
	DB	'tMulti', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07FIOJKBLJ@Sorting?$AA@
CONST	SEGMENT
??_C@_07FIOJKBLJ@Sorting?$AA@ DB 'Sorting', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NNGNJFDG@Tables?1Sorting?$AA@
CONST	SEGMENT
??_C@_0P@NNGNJFDG@Tables?1Sorting?$AA@ DB 'Tables/Sorting', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CLLFLFPN@this?5cell?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0N@CLLFLFPN@this?5cell?5?$CFd?$AA@ DB 'this cell %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LFBINIGO@Table?$AA@
CONST	SEGMENT
??_C@_05LFBINIGO@Table?$AA@ DB 'Table', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PHDCMLKN@Synced?5Table?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BA@PHDCMLKN@Synced?5Table?5?$CFd?$AA@ DB 'Synced Table %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@BAAOPNDB@Multiple?5tables?5with?5the?5same?5id@
CONST	SEGMENT
??_C@_0GC@BAAOPNDB@Multiple?5tables?5with?5the?5same?5id@ DB 'Multiple ta'
	DB	'bles with the same identifier will share their settings, widt'
	DB	'h, visibility, order etc.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MJPJCLAG@Synced?5instances?$AA@
CONST	SEGMENT
??_C@_0BB@MJPJCLAG@Synced?5instances?$AA@ DB 'Synced instances', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EDLGPCJF@Tables?1Synced?5instances?$AA@
CONST	SEGMENT
??_C@_0BI@EDLGPCJF@Tables?1Synced?5instances?$AA@ DB 'Tables/Synced insta'
	DB	'nces', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JLLLEHJI@Hovered?5column?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BD@JLLLEHJI@Hovered?5column?3?5?$CFd?$AA@ DB 'Hovered column: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KGFMOBAJ@This?5is?5a?5custom?5popup?5for?5Colum@
CONST	SEGMENT
??_C@_0CF@KGFMOBAJ@This?5is?5a?5custom?5popup?5for?5Colum@ DB 'This is a '
	DB	'custom popup for Column %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@GEHELPPM@This?5is?5a?5custom?5popup?5for?5unuse@
CONST	SEGMENT
??_C@_0DP@GEHELPPM@This?5is?5a?5custom?5popup?5for?5unuse@ DB 'This is a '
	DB	'custom popup for unused space after the last column.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07FAGDPJOI@MyPopup?$AA@
CONST	SEGMENT
??_C@_07FAGDPJOI@MyPopup?$AA@ DB 'MyPopup', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@KMDIMPEI@This?5is?5the?5popup?5for?5Button?$CI?$CC?4?4@
CONST	SEGMENT
??_C@_0DB@KMDIMPEI@This?5is?5the?5popup?5for?5Button?$CI?$CC?4?4@ DB 'Thi'
	DB	's is the popup for Button("..") in Cell %d,%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BGHCFFCN@table_context_menu_2?$AA@
CONST	SEGMENT
??_C@_0BF@BGHCFFCN@table_context_menu_2?$AA@ DB 'table_context_menu_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0IN@GBJFOLPI@Demonstrate?5mixing?5table?5context@
CONST	SEGMENT
??_C@_0IN@GBJFOLPI@Demonstrate?5mixing?5table?5context@ DB 'Demonstrate m'
	DB	'ixing table context menu (over header), item context button ('
	DB	'over button) and custom per-colum context menu (over column b'
	DB	'ody).', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GAEOPLMF@table_context_menu?$AA@
CONST	SEGMENT
??_C@_0BD@GAEOPLMF@table_context_menu?$AA@ DB 'table_context_menu', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DCEKKFEJ@ImGuiTableFlags_ContextMenuInBod@
CONST	SEGMENT
??_C@_0CC@DCEKKFEJ@ImGuiTableFlags_ContextMenuInBod@ DB 'ImGuiTableFlags_'
	DB	'ContextMenuInBody', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0MD@CMIPBCGH@By?5default?0?5right?9clicking?5over?5@
CONST	SEGMENT
??_C@_0MD@CMIPBCGH@By?5default?0?5right?9clicking?5over?5@ DB 'By default'
	DB	', right-clicking over a TableHeadersRow()/TableHeader() line '
	DB	'will open the default context-menu.', 0aH, 'Using ImGuiTableF'
	DB	'lags_ContextMenuInBody we also allow right-clicking over colu'
	DB	'mns body.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HIHOGJFK@Tables?1Context?5menus?$AA@
CONST	SEGMENT
??_C@_0BF@HIHOGJFK@Tables?1Context?5menus?$AA@ DB 'Tables/Context menus', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PLJPMHBK@?$CD?$CDcheckall?$AA@
CONST	SEGMENT
??_C@_0L@PLJPMHBK@?$CD?$CDcheckall?$AA@ DB '##checkall', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JGHIMJPE@table_custom_headers?$AA@
CONST	SEGMENT
??_C@_0BF@JGHIMJPE@table_custom_headers?$AA@ DB 'table_custom_headers', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PCNFLBGM@Custom?5headers?$AA@
CONST	SEGMENT
??_C@_0P@PCNFLBGM@Custom?5headers?$AA@ DB 'Custom headers', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@INIBDOJH@Tables?1Custom?5headers?$AA@
CONST	SEGMENT
??_C@_0BG@INIBDOJH@Tables?1Custom?5headers?$AA@ DB 'Tables/Custom headers'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08GEFDGCHL@?$CD?$CDfloat2?$AA@
CONST	SEGMENT
??_C@_08GEFDGCHL@?$CD?$CDfloat2?$AA@ DB '##float2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PIJOCBLL@float1?$AA@
CONST	SEGMENT
??_C@_06PIJOCBLL@float1?$AA@ DB 'float1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OBIFBAPK@float0?$AA@
CONST	SEGMENT
??_C@_06OBIFBAPK@float0?$AA@ DB 'float0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FKJABAHD@right?9align?$AA@
CONST	SEGMENT
??_C@_0M@FKJABAHD@right?9align?$AA@ DB 'right-align', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBGPFKGN@half?$AA@
CONST	SEGMENT
??_C@_04GBGPFKGN@half?$AA@ DB 'half', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJDGBEEG@small?$AA@
CONST	SEGMENT
??_C@_05KJDGBEEG@small?$AA@ DB 'small', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DDAHLBBM@table_item_width?$AA@
CONST	SEGMENT
??_C@_0BB@DDAHLBBM@table_item_width?$AA@ DB 'table_item_width', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0MP@KOFCKOGB@Showcase?5using?5PushItemWidth?$CI?$CJ?5a@
CONST	SEGMENT
??_C@_0MP@KOFCKOGB@Showcase?5using?5PushItemWidth?$CI?$CJ?5a@ DB 'Showcas'
	DB	'e using PushItemWidth() and how it is preserved on a per-colu'
	DB	'mn basis.', 0aH, 0aH, 'Note that on auto-resizing non-resizab'
	DB	'le fixed columns, querying the content width for e.g. right-a'
	DB	'lignment doesn''t make sense.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JMOFGNLE@Item?5width?$AA@
CONST	SEGMENT
??_C@_0L@JMOFGNLE@Item?5width?$AA@ DB 'Item width', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CHHDIFEC@Tables?1Item?5width?$AA@
CONST	SEGMENT
??_C@_0BC@CHHDIFEC@Tables?1Item?5width?$AA@ DB 'Tables/Item width', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04KOACHJEN@Type?$AA@
CONST	SEGMENT
??_C@_04KOACHJEN@Type?$AA@ DB 'Type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EBKMHHBE@Size?$AA@
CONST	SEGMENT
??_C@_04EBKMHHBE@Size?$AA@ DB 'Size', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FABLJDN@Name?$AA@
CONST	SEGMENT
??_C@_04FABLJDN@Name?$AA@ DB 'Name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FLIJPOAM@3ways?$AA@
CONST	SEGMENT
??_C@_05FLIJPOAM@3ways?$AA@ DB '3ways', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CKCINJFP@Tree?5view?$AA@
CONST	SEGMENT
??_C@_09CKCINJFP@Tree?5view?$AA@ DB 'Tree view', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LHIHCMOK@Tables?1Tree?5view?$AA@
CONST	SEGMENT
??_C@_0BB@LHIHCMOK@Tables?1Tree?5view?$AA@ DB 'Tables/Tree view', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GJDJEMBE@?$CFc?$CFc?$AA@
CONST	SEGMENT
??_C@_04GJDJEMBE@?$CFc?$CFc?$AA@ DB '%c%c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@JOPKKHHI@?$AAc?$AAe?$AAl?$AAl?$AA_?$AAb?$AAg?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AAe?$AAl?$AAl?$AA_?$AAb?$AAg?$AA_?$AAt?$AAy?$AAp@
CONST	SEGMENT
??_C@_1EO@JOPKKHHI@?$AAc?$AAe?$AAl?$AAl?$AA_?$AAb?$AAg?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AAe?$AAl?$AAl?$AA_?$AAb?$AAg?$AA_?$AAt?$AAy?$AAp@ DB 'c'
	DB	00H, 'e', 00H, 'l', 00H, 'l', 00H, '_', 00H, 'b', 00H, 'g', 00H
	DB	'_', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '>'
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, 'c', 00H, 'e', 00H, 'l', 00H, 'l', 00H, '_', 00H, 'b'
	DB	00H, 'g', 00H, '_', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@HBJACPON@?$AAr?$AAo?$AAw?$AA_?$AAb?$AAg?$AA_?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAo?$AAw?$AA_?$AAb?$AAg?$AA_?$AAt?$AAa?$AAr@
CONST	SEGMENT
??_C@_1FC@HBJACPON@?$AAr?$AAo?$AAw?$AA_?$AAb?$AAg?$AA_?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAo?$AAw?$AA_?$AAb?$AAg?$AA_?$AAt?$AAa?$AAr@ DB 'r'
	DB	00H, 'o', 00H, 'w', 00H, '_', 00H, 'b', 00H, 'g', 00H, '_', 00H
	DB	't', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' '
	DB	00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 'r', 00H, 'o', 00H, 'w', 00H, '_', 00H, 'b'
	DB	00H, 'g', 00H, '_', 00H, 't', 00H, 'a', 00H, 'r', 00H, 'g', 00H
	DB	'e', 00H, 't', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@GEJGPOKK@?$AAr?$AAo?$AAw?$AA_?$AAb?$AAg?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAo?$AAw?$AA_?$AAb?$AAg?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5@
CONST	SEGMENT
??_C@_1EK@GEJGPOKK@?$AAr?$AAo?$AAw?$AA_?$AAb?$AAg?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAo?$AAw?$AA_?$AAb?$AAg?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5@ DB 'r'
	DB	00H, 'o', 00H, 'w', 00H, '_', 00H, 'b', 00H, 'g', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '>', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'r', 00H, 'o', 00H, 'w', 00H, '_', 00H, 'b', 00H, 'g', 00H, '_'
	DB	00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, '2', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@GJIGBOCB@We?5are?5colorizing?5cells?5to?5B1?9?$DOC@
CONST	SEGMENT
??_C@_0CI@GJIGBOCB@We?5are?5colorizing?5cells?5to?5B1?9?$DOC@ DB 'We are '
	DB	'colorizing cells to B1->C2 here.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GNMKPIGH@cell?5bg?5type?$AA@
CONST	SEGMENT
??_C@_0N@GNMKPIGH@cell?5bg?5type?$AA@ DB 'cell bg type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DAKPLPKA@None?$AABlue?$AA?$AA@
CONST	SEGMENT
??_C@_0L@DAKPLPKA@None?$AABlue?$AA?$AA@ DB 'None', 00H, 'Blue', 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FN@LEKMPDJD@Target?5RowBg0?5to?5override?5the?5al@
CONST	SEGMENT
??_C@_0FN@LEKMPDJD@Target?5RowBg0?5to?5override?5the?5al@ DB 'Target RowB'
	DB	'g0 to override the alternating odd/even colors,', 0aH, 'Targe'
	DB	't RowBg1 to blend with them.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DFMNKCIK@row?5bg?5target?$AA@
CONST	SEGMENT
??_C@_0O@DFMNKCIK@row?5bg?5target?$AA@ DB 'row bg target', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DAIHOKO@RowBg0?$AARowBg1?$AA?$AA@
CONST	SEGMENT
??_C@_0P@DAIHOKO@RowBg0?$AARowBg1?$AA?$AA@ DB 'RowBg0', 00H, 'RowBg1', 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JEHONGHH@row?5bg?5type?$AA@
CONST	SEGMENT
??_C@_0M@JEHONGHH@row?5bg?5type?$AA@ DB 'row bg type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FFKBLHFP@None?$AARed?$AAGradient?$AA?$AA@
CONST	SEGMENT
??_C@_0BD@FFKBLHFP@None?$AARed?$AAGradient?$AA?$AA@ DB 'None', 00H, 'Red', 00H
	DB	'Gradient', 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FN@IEBFCIOP@ImGuiTableFlags_RowBg?5automatica@
CONST	SEGMENT
??_C@_0FN@IEBFCIOP@ImGuiTableFlags_RowBg?5automatica@ DB 'ImGuiTableFlags'
	DB	'_RowBg automatically sets RowBg0 to alternative colors pulled'
	DB	' from the Style.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GFJFBMCH@Background?5color?$AA@
CONST	SEGMENT
??_C@_0BB@GFJFBMCH@Background?5color?$AA@ DB 'Background color', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OPNKMFLE@Tables?1Background?5color?$AA@
CONST	SEGMENT
??_C@_0BI@OPNKMFLE@Tables?1Background?5color?$AA@ DB 'Tables/Background c'
	DB	'olor', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KMHJAJHG@Using?5explicit?5size?3?$AA@
CONST	SEGMENT
??_C@_0BF@KMHJAJHG@Using?5explicit?5size?3?$AA@ DB 'Using explicit size:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PAJCHPDH@Cell?5?$CFd?0?$CFd?$AA@
CONST	SEGMENT
??_C@_0L@PAJCHPDH@Cell?5?$CFd?0?$CFd?$AA@ DB 'Cell %d,%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0MH@EOAMIMDE@Make?5outer?5height?5stop?5exactly?5a@
CONST	SEGMENT
??_C@_0MH@EOAMIMDE@Make?5outer?5height?5stop?5exactly?5a@ DB 'Make outer '
	DB	'height stop exactly at outer_size.y (prevent auto-extending t'
	DB	'able past the limit).', 0aH, 0aH, 'Only available when Scroll'
	DB	'X/ScrollY are disabled. Data below the limit will be clipped '
	DB	'and not visible.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MPIHGCDG@ImGuiTableFlags_NoHostExtendY?$AA@
CONST	SEGMENT
??_C@_0BO@MPIHGCDG@ImGuiTableFlags_NoHostExtendY?$AA@ DB 'ImGuiTableFlags'
	DB	'_NoHostExtendY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0JJ@MNEKIKBK@Make?5outer?5width?5auto?9fit?5to?5col@
CONST	SEGMENT
??_C@_0JJ@MNEKIKBK@Make?5outer?5width?5auto?9fit?5to?5col@ DB 'Make outer'
	DB	' width auto-fit to columns, overriding outer_size.x value.', 0aH
	DB	0aH, 'Only available when ScrollX/ScrollY are disabled and Str'
	DB	'etch columns are not used.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GEPJHBOA@Using?5NoHostExtendX?5and?5NoHostEx@
CONST	SEGMENT
??_C@_0CH@GEPJHBOA@Using?5NoHostExtendX?5and?5NoHostEx@ DB 'Using NoHostE'
	DB	'xtendX and NoHostExtendY:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DBAHEFCG@Outer?5size?$AA@
CONST	SEGMENT
??_C@_0L@DBAHEFCG@Outer?5size?$AA@ DB 'Outer size', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IKJBKNNA@Tables?1Outer?5size?$AA@
CONST	SEGMENT
??_C@_0BC@IKJBKNNA@Tables?1Outer?5size?$AA@ DB 'Tables/Outer size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PBGJBMCG@min_row_height?5?$DN?5?$CF?42f?$AA@
CONST	SEGMENT
??_C@_0BG@PBGJBMCG@min_row_height?5?$DN?5?$CF?42f?$AA@ DB 'min_row_height'
	DB	' = %.2f', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OGGECGJA@table_row_height?$AA@
CONST	SEGMENT
??_C@_0BB@OGGECGJA@table_row_height?$AA@ DB 'table_row_height', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BCL@DDLHCPHA@You?5can?5pass?5a?5?8min_row_height?8?5@
CONST	SEGMENT
??_C@_0BCL@DDLHCPHA@You?5can?5pass?5a?5?8min_row_height?8?5@ DB 'You can '
	DB	'pass a ''min_row_height'' to TableNextRow().', 0aH, 0aH, 'Row'
	DB	's are padded with ''style.CellPadding.y'' on top and bottom, '
	DB	'so effectively the minimum row height will always be >= ''sty'
	DB	'le.CellPadding.y * 2.0f''.', 0aH, 0aH, 'We cannot honor a _ma'
	DB	'ximum_ row height as that would require a unique clipping rec'
	DB	'tangle per row.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CGNGNJMG@Row?5height?$AA@
CONST	SEGMENT
??_C@_0L@CGNGNJMG@Row?5height?$AA@ DB 'Row height', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JNEADBDA@Tables?1Row?5height?$AA@
CONST	SEGMENT
??_C@_0BC@JNEADBDA@Tables?1Row?5height?$AA@ DB 'Tables/Row height', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EBJAGHN@A1?5Row?51?$AA@
CONST	SEGMENT
??_C@_08EBJAGHN@A1?5Row?51?$AA@ DB 'A1 Row 1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MILDAGOD@A0?5Row?51?$AA@
CONST	SEGMENT
??_C@_08MILDAGOD@A0?5Row?51?$AA@ DB 'A0 Row 1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BNACDHDM@A1?5Row?50?$AA@
CONST	SEGMENT
??_C@_08BNACDHDM@A1?5Row?50?$AA@ DB 'A1 Row 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DNJEDKLI@B1?5Row?51?$AA@
CONST	SEGMENT
??_C@_08DNJEDKLI@B1?5Row?51?$AA@ DB 'B1 Row 1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PBDODKCG@B0?5Row?51?$AA@
CONST	SEGMENT
??_C@_08PBDODKCG@B0?5Row?51?$AA@ DB 'B0 Row 1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CEIPALPJ@B1?5Row?50?$AA@
CONST	SEGMENT
??_C@_08CEIPALPJ@B1?5Row?50?$AA@ DB 'B1 Row 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OICFALGH@B0?5Row?50?$AA@
CONST	SEGMENT
??_C@_08OICFALGH@B0?5Row?50?$AA@ DB 'B0 Row 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFPNHIPB@B1?$AA@
CONST	SEGMENT
??_C@_02LFPNHIPB@B1?$AA@ DB 'B1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KMOGEJLA@B0?$AA@
CONST	SEGMENT
??_C@_02KMOGEJLA@B0?$AA@ DB 'B0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DJDNNGFB@table_nested2?$AA@
CONST	SEGMENT
??_C@_0O@DJDNNGFB@table_nested2?$AA@ DB 'table_nested2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NBKIDHKC@A0?5Row?50?$AA@
CONST	SEGMENT
??_C@_08NBKIDHKC@A0?5Row?50?$AA@ DB 'A0 Row 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02LHLLMGKI@A1?$AA@
CONST	SEGMENT
??_C@_02LHLLMGKI@A1?$AA@ DB 'A1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KOKAPHOJ@A0?$AA@
CONST	SEGMENT
??_C@_02KOKAPHOJ@A0?$AA@ DB 'A0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BCBAIFJC@table_nested1?$AA@
CONST	SEGMENT
??_C@_0O@BCBAIFJC@table_nested1?$AA@ DB 'table_nested1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@GIHJANOI@This?5demonstrates?5embedding?5a?5ta@
CONST	SEGMENT
??_C@_0DN@GIHJANOI@This?5demonstrates?5embedding?5a?5ta@ DB 'This demonst'
	DB	'rates embedding a table into another table cell.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GGCBCFBE@Nested?5tables?$AA@
CONST	SEGMENT
??_C@_0O@GGCBCFBE@Nested?5tables?$AA@ DB 'Nested tables', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FIKDGFFI@Tables?1Nested?5tables?$AA@
CONST	SEGMENT
??_C@_0BF@FIKDGFFI@Tables?1Nested?5tables?$AA@ DB 'Tables/Nested tables', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@HAPNKCNF@ImGuiTableFlags_NoKeepColumnsVis@
CONST	SEGMENT
??_C@_0CF@HAPNKCNF@ImGuiTableFlags_NoKeepColumnsVis@ DB 'ImGuiTableFlags_'
	DB	'NoKeepColumnsVisible', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0LH@CELOBIGN@Using?5TableSetupColumn?$CI?$CJ?5to?5setu@
CONST	SEGMENT
??_C@_0LH@CELOBIGN@Using?5TableSetupColumn?$CI?$CJ?5to?5setu@ DB 'Using T'
	DB	'ableSetupColumn() to setup explicit width.', 0aH, 0aH, 'Unles'
	DB	's _NoKeepColumnsVisible is set, fixed columns with set width '
	DB	'may still be shrunk down if there''s not enough space in the '
	DB	'host.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JJDDAIH@?$CIw?3?5?$CF5?41f?$CJ?$AA@
CONST	SEGMENT
??_C@_0L@JJDDAIH@?$CIw?3?5?$CF5?41f?$CJ?$AA@ DB '(w: %5.1f)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OAGMNDDJ@three?$AA@
CONST	SEGMENT
??_C@_05OAGMNDDJ@three?$AA@ DB 'three', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IJDNBOJF@two?$AA@
CONST	SEGMENT
??_C@_03IJDNBOJF@two?$AA@ DB 'two', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OHDNLOHO@one?$AA@
CONST	SEGMENT
??_C@_03OHDNLOHO@one?$AA@ DB 'one', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@BFOOEOFP@Using?5TableSetupColumn?$CI?$CJ?5to?5setu@
CONST	SEGMENT
??_C@_0DB@BFOOEOFP@Using?5TableSetupColumn?$CI?$CJ?5to?5setu@ DB 'Using T'
	DB	'ableSetupColumn() to setup default width.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KJHINHOE@Columns?5widths?$AA@
CONST	SEGMENT
??_C@_0P@KJHINHOE@Columns?5widths?$AA@ DB 'Columns widths', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NGCMFIBP@Tables?1Columns?5widths?$AA@
CONST	SEGMENT
??_C@_0BG@NGCMFIBP@Tables?1Columns?5widths?$AA@ DB 'Tables/Columns widths'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@
CONST	SEGMENT
??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@ DB '%s %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08ELEEDBE@Indented?$AA@
CONST	SEGMENT
??_C@_08ELEEDBE@Indented?$AA@ DB 'Indented', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CEBHJEEC@table_columns_flags?$AA@
CONST	SEGMENT
??_C@_0BE@CEBHJEEC@table_columns_flags?$AA@ DB 'table_columns_flags', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OFGIHDEK@Output?5flags?3?$AA@
CONST	SEGMENT
??_C@_0O@OFGIHDEK@Output?5flags?3?$AA@ DB 'Output flags:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FHGGFOEB@Input?5flags?3?$AA@
CONST	SEGMENT
??_C@_0N@FHGGFOEB@Input?5flags?3?$AA@ DB 'Input flags:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04FBKCMAJG@?8?$CFs?8?$AA@
CONST	SEGMENT
??_C@_04FBKCMAJG@?8?$CFs?8?$AA@ DB '''%s''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MNOKCEIF@table_columns_flags_checkboxes?$AA@
CONST	SEGMENT
??_C@_0BP@MNOKCEIF@table_columns_flags_checkboxes?$AA@ DB 'table_columns_'
	DB	'flags_checkboxes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@INJHOPKF@Columns?5flags?$AA@
CONST	SEGMENT
??_C@_0O@INJHOPKF@Columns?5flags?$AA@ DB 'Columns flags', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LDBFKPOJ@Tables?1Columns?5flags?$AA@
CONST	SEGMENT
??_C@_0BF@LDBFKPOJ@Tables?1Columns?5flags?$AA@ DB 'Tables/Columns flags', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BJNMEEJO@inner_width?$AA@
CONST	SEGMENT
??_C@_0M@BJNMEEJO@inner_width?$AA@ DB 'inner_width', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GGBPDDBN@?$CF?41f?$AA@
CONST	SEGMENT
??_C@_04GGBPDDBN@?$CF?41f?$AA@ DB '%.1f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFLMLEAB@flags3?$AA@
CONST	SEGMENT
??_C@_06FFLMLEAB@flags3?$AA@ DB 'flags3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BBE@ODLBHPGG@Showcase?5using?5Stretch?5columns?5?$CL@
CONST	SEGMENT
??_C@_0BBE@ODLBHPGG@Showcase?5using?5Stretch?5columns?5?$CL@ DB 'Showcase'
	DB	' using Stretch columns + ScrollX together: this is rather unu'
	DB	'sual and only makes sense when specifying an ''inner_width'' '
	DB	'for the table!', 0aH, 'Without an explicit value, inner_width'
	DB	' is == outer_size.x and therefore using Stretch columns + Scr'
	DB	'ollX together doesn''t make sense.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HLNLGDMF@Stretch?5?$CL?5ScrollX?$AA@
CONST	SEGMENT
??_C@_0BC@HLNLGDMF@Stretch?5?$CL?5ScrollX?$AA@ DB 'Stretch + ScrollX', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OMMFFCFF@Hello?5world?5?$CFd?0?$CFd?$AA@
CONST	SEGMENT
??_C@_0BC@OMMFFCFF@Hello?5world?5?$CFd?0?$CFd?$AA@ DB 'Hello world %d,%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMIONID@Line?5?$CFd?$AA@
CONST	SEGMENT
??_C@_07GMIONID@Line?5?$CFd?$AA@ DB 'Line %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHODIDPO@Six?$AA@
CONST	SEGMENT
??_C@_03KHODIDPO@Six?$AA@ DB 'Six', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OALGJGIC@Five?$AA@
CONST	SEGMENT
??_C@_04OALGJGIC@Five?$AA@ DB 'Five', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MCBIPDJB@Four?$AA@
CONST	SEGMENT
??_C@_04MCBIPDJB@Four?$AA@ DB 'Four', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GCNNJOIC@Line?5?$CD?$AA@
CONST	SEGMENT
??_C@_06GCNNJOIC@Line?5?$CD?$AA@ DB 'Line #', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BILCALBK@table_scrollx?$AA@
CONST	SEGMENT
??_C@_0O@BILCALBK@table_scrollx?$AA@ DB 'table_scrollx', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GIAMEELH@freeze_rows?$AA@
CONST	SEGMENT
??_C@_0M@GIAMEELH@freeze_rows?$AA@ DB 'freeze_rows', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CFPPLGBE@freeze_cols?$AA@
CONST	SEGMENT
??_C@_0M@CFPPLGBE@freeze_cols?$AA@ DB 'freeze_cols', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJM@LFAMMBOC@When?5ScrollX?5is?5enabled?0?5the?5def@
CONST	SEGMENT
??_C@_0BJM@LFAMMBOC@When?5ScrollX?5is?5enabled?0?5the?5def@ DB 'When Scro'
	DB	'llX is enabled, the default sizing policy becomes ImGuiTableF'
	DB	'lags_SizingFixedFit, as automatically stretching columns does'
	DB	'n''t make much sense with horizontal scrolling.', 0aH, 0aH, 'A'
	DB	'lso note that as of the current version, you will almost alwa'
	DB	'ys want to enable ScrollY along with ScrollX,because the cont'
	DB	'ainer window won''t automatically extend vertically to fix co'
	DB	'ntents (this may be improved in future versions).', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MOJGBNK@Horizontal?5scrolling?$AA@
CONST	SEGMENT
??_C@_0BF@MOJGBNK@Horizontal?5scrolling?$AA@ DB 'Horizontal scrolling', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FLMIBINL@Tables?1Horizontal?5scrolling?$AA@
CONST	SEGMENT
??_C@_0BM@FLMIBINL@Tables?1Horizontal?5scrolling?$AA@ DB 'Tables/Horizont'
	DB	'al scrolling', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BKJDKFL@table_scrolly?$AA@
CONST	SEGMENT
??_C@_0O@BKJDKFL@table_scrolly?$AA@ DB 'table_scrolly', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0MD@ODEEHCKN@Here?5we?5activate?5ScrollY?0?5which?5@
CONST	SEGMENT
??_C@_0MD@ODEEHCKN@Here?5we?5activate?5ScrollY?0?5which?5@ DB 'Here we ac'
	DB	'tivate ScrollY, which will create a child window container to'
	DB	' allow hosting scrollable contents.', 0aH, 0aH, 'We also demo'
	DB	'nstrate using ImGuiListClipper to virtualize the submission o'
	DB	'f many items.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BKCLIGGC@Vertical?5scrolling?0?5with?5clippin@
CONST	SEGMENT
??_C@_0CC@BKCLIGGC@Vertical?5scrolling?0?5with?5clippin@ DB 'Vertical scr'
	DB	'olling, with clipping', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@GCIECJKE@Tables?1Vertical?5scrolling?0?5with?5@
CONST	SEGMENT
??_C@_0CJ@GCIECJKE@Tables?1Vertical?5scrolling?0?5with?5@ DB 'Tables/Vert'
	DB	'ical scrolling, with clipping', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02IEBMKJDF@?$CD?$CD?$AA@
CONST	SEGMENT
??_C@_02IEBMKJDF@?$CD?$CD?$AA@ DB '##', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JBEDBOJM@W?3?5?$CF?41f?$AA@
CONST	SEGMENT
??_C@_07JBEDBOJM@W?3?5?$CF?41f?$AA@ DB 'W: %.1f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@EHNPIEAF@Some?5?$CFs?5text?5?$CFd?0?$CFd?6Over?5two?5line@
CONST	SEGMENT
??_C@_0CE@EHNPIEAF@Some?5?$CFs?5text?5?$CFd?0?$CFd?6Over?5two?5line@ DB 'S'
	DB	'ome %s text %d,%d', 0aH, 'Over two lines..', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GKCNMOBP@longeeer?$AA@
CONST	SEGMENT
??_C@_08GKCNMOBP@longeeer?$AA@ DB 'longeeer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GOKPGOLB@long?$AA@
CONST	SEGMENT
??_C@_04GOKPGOLB@long?$AA@ DB 'long', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IJCBPJOC@ImGuiTableFlags_NoClip?$AA@
CONST	SEGMENT
??_C@_0BH@IJCBPJOC@ImGuiTableFlags_NoClip?$AA@ DB 'ImGuiTableFlags_NoClip'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KPIOAOMA@ImGuiTableFlags_ScrollY?$AA@
CONST	SEGMENT
??_C@_0BI@KPIOAOMA@ImGuiTableFlags_ScrollY?$AA@ DB 'ImGuiTableFlags_Scrol'
	DB	'lY', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LGJFDPIB@ImGuiTableFlags_ScrollX?$AA@
CONST	SEGMENT
??_C@_0BI@LGJFDPIB@ImGuiTableFlags_ScrollX?$AA@ DB 'ImGuiTableFlags_Scrol'
	DB	'lX', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0OP@KCFDFCBF@Disable?5distributing?5remainder?5w@
CONST	SEGMENT
??_C@_0OP@KCFDFCBF@Disable?5distributing?5remainder?5w@ DB 'Disable distr'
	DB	'ibuting remainder width to stretched columns (width allocatio'
	DB	'n on a 100-wide table with 3 columns: Without this flag: 33,3'
	DB	'3,34. With this flag: 33,33,33). With larger number of column'
	DB	's, resizing will appear to be less smooth.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FCJCGICG@ImGuiTableFlags_PreciseWidths?$AA@
CONST	SEGMENT
??_C@_0BO@FCJCGICG@ImGuiTableFlags_PreciseWidths?$AA@ DB 'ImGuiTableFlags'
	DB	'_PreciseWidths', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0KK@ONILBNCL@Be?5mindful?5that?5using?5right?9alig@
CONST	SEGMENT
??_C@_0KK@ONILBNCL@Be?5mindful?5that?5using?5right?9alig@ DB 'Be mindful '
	DB	'that using right-alignment (e.g. size.x = -FLT_MIN) creates a'
	DB	' feedback loop where contents width can feed into auto-column'
	DB	' width can feed into contents width.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GBNJIMFP@Contents?$AA@
CONST	SEGMENT
??_C@_08GBNJIMFP@Contents?$AA@ DB 'Contents', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@GJMCID@Show?5width?$AAShort?5Text?$AALong?5Text?$AA@
CONST	SEGMENT
??_C@_0DO@GJMCID@Show?5width?$AAShort?5Text?$AALong?5Text?$AA@ DB 'Show w'
	DB	'idth', 00H, 'Short Text', 00H, 'Long Text', 00H, 'Button', 00H
	DB	'Fill Button', 00H, 'InputText', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0JL@GIMGKJDP@This?5section?5allows?5you?5to?5inter@
CONST	SEGMENT
??_C@_0JL@GIMGKJDP@This?5section?5allows?5you?5to?5inter@ DB 'This sectio'
	DB	'n allows you to interact and see the effect of various sizing'
	DB	' policies depending on whether Scroll is enabled and the cont'
	DB	'ents of your columns.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IILCFNBD@Advanced?$AA@
CONST	SEGMENT
??_C@_08IILCFNBD@Advanced?$AA@ DB 'Advanced', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OEOPFKK@CCCCCCCCCCCC?$AA@
CONST	SEGMENT
??_C@_0N@OEOPFKK@CCCCCCCCCCCC?$AA@ DB 'CCCCCCCCCCCC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LBFBCFMB@BBBBBBBB?$AA@
CONST	SEGMENT
??_C@_08LBFBCFMB@BBBBBBBB?$AA@ DB 'BBBBBBBB', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OBMDJLLM@Oh?5dear?$AA@
CONST	SEGMENT
??_C@_07OBMDJLLM@Oh?5dear?$AA@ DB 'Oh dear', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MIEBIDIO@Sizing?5policies?$AA@
CONST	SEGMENT
??_C@_0BA@MIEBIDIO@Sizing?5policies?$AA@ DB 'Sizing policies', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BDILLJNP@Tables?1Explicit?5widths?$AA@
CONST	SEGMENT
??_C@_0BH@BDILLJNP@Tables?1Explicit?5widths?$AA@ DB 'Tables/Explicit widt'
	DB	'hs', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06EHBBGIFL@?$CD?$CDcell?$AA@
CONST	SEGMENT
??_C@_06EHBBGIFL@?$CD?$CDcell?$AA@ DB '##cell', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KGDBJGIN@edit?5me?$AA@
CONST	SEGMENT
??_C@_07KGDBJGIN@edit?5me?$AA@ DB 'edit me', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PCAKHMNE@table_padding_2?$AA@
CONST	SEGMENT
??_C@_0BA@PCAKHMNE@table_padding_2?$AA@ DB 'table_padding_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DKDDHLDB@CellPadding?$AA@
CONST	SEGMENT
??_C@_0M@DKDDHLDB@CellPadding?$AA@ DB 'CellPadding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GOPEKLPG@show_widget_frame_bg?$AA@
CONST	SEGMENT
??_C@_0BF@GOPEKLPG@show_widget_frame_bg?$AA@ DB 'show_widget_frame_bg', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@CDDGEHMI@Setting?5style?4CellPadding?5to?5?$CI0?0@
CONST	SEGMENT
??_C@_0DG@CDDGEHMI@Setting?5style?4CellPadding?5to?5?$CI0?0@ DB 'Setting '
	DB	'style.CellPadding to (0,0) or a custom value.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OKGLPFJF@Avail?5?$CF?42f?$AA@
CONST	SEGMENT
??_C@_0L@OKGLPFJF@Avail?5?$CF?42f?$AA@ DB 'Avail %.2f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FKPNOHIF@table_padding?$AA@
CONST	SEGMENT
??_C@_0O@FKPNOHIF@table_padding?$AA@ DB 'table_padding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IJLMIFHN@show_headers?$AA@
CONST	SEGMENT
??_C@_0N@IJLMIFHN@show_headers?$AA@ DB 'show_headers', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0IC@DEFBCLPE@Disable?5inner?5padding?5between?5co@
CONST	SEGMENT
??_C@_0IC@DEFBCLPE@Disable?5inner?5padding?5between?5co@ DB 'Disable inne'
	DB	'r padding between columns (double inner padding if BordersOut'
	DB	'erV is on, single inner padding if BordersOuterV is off)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NMIPCBPO@ImGuiTableFlags_NoPadInnerX?$AA@
CONST	SEGMENT
??_C@_0BM@NMIPCBPO@ImGuiTableFlags_NoPadInnerX?$AA@ DB 'ImGuiTableFlags_N'
	DB	'oPadInnerX', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@OFOCAPDE@Disable?5outer?9most?5padding?5?$CIdefa@
CONST	SEGMENT
??_C@_0FB@OFOCAPDE@Disable?5outer?9most?5padding?5?$CIdefa@ DB 'Disable o'
	DB	'uter-most padding (default if ImGuiTableFlags_BordersOuterV i'
	DB	's not set)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PMBOGJLP@ImGuiTableFlags_NoPadOuterX?$AA@
CONST	SEGMENT
??_C@_0BM@PMBOGJLP@ImGuiTableFlags_NoPadOuterX?$AA@ DB 'ImGuiTableFlags_N'
	DB	'oPadOuterX', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@MKHAEMOD@Enable?5outer?9most?5padding?5?$CIdefau@
CONST	SEGMENT
??_C@_0EM@MKHAEMOD@Enable?5outer?9most?5padding?5?$CIdefau@ DB 'Enable ou'
	DB	'ter-most padding (default if ImGuiTableFlags_BordersOuterV is'
	DB	' set)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HHEJGEBJ@ImGuiTableFlags_PadOuterX?$AA@
CONST	SEGMENT
??_C@_0BK@HHEJGEBJ@ImGuiTableFlags_PadOuterX?$AA@ DB 'ImGuiTableFlags_Pad'
	DB	'OuterX', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BMB@HPBFLJOA@We?5often?5want?5outer?5padding?5acti@
CONST	SEGMENT
??_C@_0BMB@HPBFLJOA@We?5often?5want?5outer?5padding?5acti@ DB 'We often w'
	DB	'ant outer padding activated when any using features which mak'
	DB	'es the edges of a column visible:', 0aH, 'e.g.:', 0aH, '- Bor'
	DB	'derOuterV', 0aH, '- any form of row selection', 0aH, 'Because'
	DB	' of this, activating BorderOuterV sets the default to PadOute'
	DB	'rX. Using PadOuterX or NoPadOuterX you can override the defau'
	DB	'lt.', 0aH, 0aH, 'Actual padding values are using style.CellPa'
	DB	'dding.', 0aH, 0aH, 'In this demo we don''t show horizontal bo'
	DB	'rders to emphasize how they don''t affect default horizontal '
	DB	'padding.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07DDDGKLAD@Padding?$AA@
CONST	SEGMENT
??_C@_07DDDGKLAD@Padding?$AA@ DB 'Padding', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LGLCJPIM@Tables?1Padding?$AA@
CONST	SEGMENT
??_C@_0P@LGLCJPIM@Tables?1Padding?$AA@ DB 'Tables/Padding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PGLLGKEB@Fixed?5?$CFd?0?$CFd?$AA@
CONST	SEGMENT
??_C@_0M@PGLLGKEB@Fixed?5?$CFd?0?$CFd?$AA@ DB 'Fixed %d,%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@KONLLEJN@Disable?5vertical?5borders?5in?5colu@
CONST	SEGMENT
??_C@_0GK@KONLLEJN@Disable?5vertical?5borders?5in?5colu@ DB 'Disable vert'
	DB	'ical borders in columns Body until hovered for resize (border'
	DB	's will always appear in Headers)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IIFCHPBH@ImGuiTableFlags_NoBordersInBodyU@
CONST	SEGMENT
??_C@_0CL@IIFCHPBH@ImGuiTableFlags_NoBordersInBodyU@ DB 'ImGuiTableFlags_'
	DB	'NoBordersInBodyUntilResize', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KDGOANFD@ImGuiTableFlags_Hideable?$AA@
CONST	SEGMENT
??_C@_0BJ@KDGOANFD@ImGuiTableFlags_Hideable?$AA@ DB 'ImGuiTableFlags_Hide'
	DB	'able', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CEFJIGKC@ImGuiTableFlags_Reorderable?$AA@
CONST	SEGMENT
??_C@_0BM@CEFJIGKC@ImGuiTableFlags_Reorderable?$AA@ DB 'ImGuiTableFlags_R'
	DB	'eorderable', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@ICCOIMAN@Click?5and?5drag?5column?5headers?5to@
CONST	SEGMENT
??_C@_0GD@ICCOIMAN@Click?5and?5drag?5column?5headers?5to@ DB 'Click and d'
	DB	'rag column headers to reorder columns.', 0aH, 0aH, 'Right-cli'
	DB	'ck on a header to open a context menu.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KCIAIBPM@Reorderable?0?5hideable?0?5with?5head@
CONST	SEGMENT
??_C@_0CE@KCIAIBPM@Reorderable?0?5hideable?0?5with?5head@ DB 'Reorderable'
	DB	', hideable, with headers', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HJEJDHOC@Tables?1Reorderable?0?5hideable?0?5wi@
CONST	SEGMENT
??_C@_0CL@HJEJDHOC@Tables?1Reorderable?0?5hideable?0?5wi@ DB 'Tables/Reor'
	DB	'derable, hideable, with headers', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03LCPADOPD@FFF?$AA@
CONST	SEGMENT
??_C@_03LCPADOPD@FFF?$AA@ DB 'FFF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08NCNCPMHE@?$CFs?5?$CFd?0?$CFd?$AA@
CONST	SEGMENT
??_C@_08NCNCPMHE@?$CFs?5?$CFd?0?$CFd?$AA@ DB '%s %d,%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OCBIINAK@Fixed?$AA@
CONST	SEGMENT
??_C@_05OCBIINAK@Fixed?$AA@ DB 'Fixed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ENIDNHGB@Stretch?$AA@
CONST	SEGMENT
??_C@_07ENIDNHGB@Stretch?$AA@ DB 'Stretch', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0MC@OIEBOKLD@Using?5TableSetupColumn?$CI?$CJ?5to?5alte@
CONST	SEGMENT
??_C@_0MC@OIEBOKLD@Using?5TableSetupColumn?$CI?$CJ?5to?5alte@ DB 'Using T'
	DB	'ableSetupColumn() to alter resizing policy on a per-column ba'
	DB	'sis.', 0aH, 0aH, 'When combining Fixed and Stretch columns, g'
	DB	'enerally you only want one, maybe two trailing columns to use'
	DB	' _WidthStretch.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JIGIKPCO@Resizable?0?5mixed?$AA@
CONST	SEGMENT
??_C@_0BB@JIGIKPCO@Resizable?0?5mixed?$AA@ DB 'Resizable, mixed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BCCHHGLN@Tables?1Resizable?0?5mixed?$AA@
CONST	SEGMENT
??_C@_0BI@BCCHHGLN@Tables?1Resizable?0?5mixed?$AA@ DB 'Tables/Resizable, '
	DB	'mixed', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NGJMFDHH@ImGuiTableFlags_NoHostExtendX?$AA@
CONST	SEGMENT
??_C@_0BO@NGJMFDHH@ImGuiTableFlags_NoHostExtendX?$AA@ DB 'ImGuiTableFlags'
	DB	'_NoHostExtendX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0MI@DMACPCHA@Using?5_Resizable?5?$CL?5_SizingFixedF@
CONST	SEGMENT
??_C@_0MI@DMACPCHA@Using?5_Resizable?5?$CL?5_SizingFixedF@ DB 'Using _Res'
	DB	'izable + _SizingFixedFit flags.', 0aH, 'Fixed-width columns g'
	DB	'enerally makes more sense if you want to use horizontal scrol'
	DB	'ling.', 0aH, 0aH, 'Double-click a column border to auto-fit t'
	DB	'he column to its contents.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PCKPFPON@Resizable?0?5fixed?$AA@
CONST	SEGMENT
??_C@_0BB@PCKPFPON@Resizable?0?5fixed?$AA@ DB 'Resizable, fixed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HIOAIGHO@Tables?1Resizable?0?5fixed?$AA@
CONST	SEGMENT
??_C@_0BI@HIOAIGHO@Tables?1Resizable?0?5fixed?$AA@ DB 'Tables/Resizable, '
	DB	'fixed', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0JI@HEDAGHBG@Using?5the?5_Resizable?5flag?5automa@
CONST	SEGMENT
??_C@_0JI@HEDAGHBG@Using?5the?5_Resizable?5flag?5automa@ DB 'Using the _R'
	DB	'esizable flag automatically enables the _BordersInnerV flag a'
	DB	's well, this is why the resize borders are still showing when'
	DB	' unchecking this.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EMJCIFOG@ImGuiTableFlags_Resizable?$AA@
CONST	SEGMENT
??_C@_0BK@EMJCIFOG@ImGuiTableFlags_Resizable?$AA@ DB 'ImGuiTableFlags_Res'
	DB	'izable', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DEGBBBAF@Resizable?0?5stretch?$AA@
CONST	SEGMENT
??_C@_0BD@DEGBBBAF@Resizable?0?5stretch?$AA@ DB 'Resizable, stretch', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JBACCIOD@Tables?1Resizable?0?5stretch?$AA@
CONST	SEGMENT
??_C@_0BK@JBACCIOD@Tables?1Resizable?0?5stretch?$AA@ DB 'Tables/Resizable'
	DB	', stretch', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MKBMKAAH@Hello?5?$CFd?0?$CFd?$AA@
CONST	SEGMENT
??_C@_0M@MKBMKAAH@Hello?5?$CFd?0?$CFd?$AA@ DB 'Hello %d,%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OHMANGAP@Three?$AA@
CONST	SEGMENT
??_C@_05OHMANGAP@Three?$AA@ DB 'Three', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CJAPLBKL@Two?$AA@
CONST	SEGMENT
??_C@_03CJAPLBKL@Two?$AA@ DB 'Two', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03EHAPBBEA@One?$AA@
CONST	SEGMENT
??_C@_03EHAPBBEA@One?$AA@ DB 'One', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@EPKAHHBC@Disable?5vertical?5borders?5in?5colu@
CONST	SEGMENT
??_C@_0FA@EPKAHHBC@Disable?5vertical?5borders?5in?5colu@ DB 'Disable vert'
	DB	'ical borders in columns Body (borders will always appear in H'
	DB	'eaders', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DPINADJM@ImGuiTableFlags_NoBordersInBody?$AA@
CONST	SEGMENT
??_C@_0CA@DPINADJM@ImGuiTableFlags_NoBordersInBody?$AA@ DB 'ImGuiTableFla'
	DB	'gs_NoBordersInBody', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OPBHLGMF@Display?5headers?$AA@
CONST	SEGMENT
??_C@_0BA@OPBHLGMF@Display?5headers?$AA@ DB 'Display headers', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GCOFDGJD@FillButton?$AA@
CONST	SEGMENT
??_C@_0L@GCOFDGJD@FillButton?$AA@ DB 'FillButton', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EJGNBOGK@Cell?5contents?3?$AA@
CONST	SEGMENT
??_C@_0P@EJGNBOGK@Cell?5contents?3?$AA@ DB 'Cell contents:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HHGDDDPK@ImGuiTableFlags_BordersInner?$AA@
CONST	SEGMENT
??_C@_0BN@HHGDDDPK@ImGuiTableFlags_BordersInner?$AA@ DB 'ImGuiTableFlags_'
	DB	'BordersInner', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IJKOMBIP@ImGuiTableFlags_BordersOuter?$AA@
CONST	SEGMENT
??_C@_0BN@IJKOMBIP@ImGuiTableFlags_BordersOuter?$AA@ DB 'ImGuiTableFlags_'
	DB	'BordersOuter', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LBPOICOD@ImGuiTableFlags_BordersInnerV?$AA@
CONST	SEGMENT
??_C@_0BO@LBPOICOD@ImGuiTableFlags_BordersInnerV?$AA@ DB 'ImGuiTableFlags'
	DB	'_BordersInnerV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JBGPMKKC@ImGuiTableFlags_BordersOuterV?$AA@
CONST	SEGMENT
??_C@_0BO@JBGPMKKC@ImGuiTableFlags_BordersOuterV?$AA@ DB 'ImGuiTableFlags'
	DB	'_BordersOuterV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HJPFIEDJ@ImGuiTableFlags_BordersV?$AA@
CONST	SEGMENT
??_C@_0BJ@HJPFIEDJ@ImGuiTableFlags_BordersV?$AA@ DB 'ImGuiTableFlags_Bord'
	DB	'ersV', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GFLPLNDM@ImGuiTableFlags_BordersInnerH?$AA@
CONST	SEGMENT
??_C@_0BO@GFLPLNDM@ImGuiTableFlags_BordersInnerH?$AA@ DB 'ImGuiTableFlags'
	DB	'_BordersInnerH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EFCOPFHN@ImGuiTableFlags_BordersOuterH?$AA@
CONST	SEGMENT
??_C@_0BO@EFCOPFHN@ImGuiTableFlags_BordersOuterH?$AA@ DB 'ImGuiTableFlags'
	DB	'_BordersOuterH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KNLELLOG@ImGuiTableFlags_BordersH?$AA@
CONST	SEGMENT
??_C@_0BJ@KNLELLOG@ImGuiTableFlags_BordersH?$AA@ DB 'ImGuiTableFlags_Bord'
	DB	'ersH', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0JM@OCDLGALD@ImGuiTableFlags_Borders?6?5?$DN?5ImGui@
CONST	SEGMENT
??_C@_0JM@OCDLGALD@ImGuiTableFlags_Borders?6?5?$DN?5ImGui@ DB 'ImGuiTable'
	DB	'Flags_Borders', 0aH, ' = ImGuiTableFlags_BordersInnerV', 0aH, ' '
	DB	'| ImGuiTableFlags_BordersOuterV', 0aH, ' | ImGuiTableFlags_Bo'
	DB	'rdersInnerV', 0aH, ' | ImGuiTableFlags_BordersOuterH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KLDEGJMI@ImGuiTableFlags_Borders?$AA@
CONST	SEGMENT
??_C@_0BI@KLDEGJMI@ImGuiTableFlags_Borders?$AA@ DB 'ImGuiTableFlags_Borde'
	DB	'rs', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FNKJINH@ImGuiTableFlags_RowBg?$AA@
CONST	SEGMENT
??_C@_0BG@FNKJINH@ImGuiTableFlags_RowBg?$AA@ DB 'ImGuiTableFlags_RowBg', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HDDFNCPF@Borders?0?5background?$AA@
CONST	SEGMENT
??_C@_0BE@HDDFNCPF@Borders?0?5background?$AA@ DB 'Borders, background', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DKPJPGIB@Tables?1Borders?0?5background?$AA@
CONST	SEGMENT
??_C@_0BL@DKPJPGIB@Tables?1Borders?0?5background?$AA@ DB 'Tables/Borders,'
	DB	' background', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06JBGJAICL@table3?$AA@
CONST	SEGMENT
??_C@_06JBGJAICL@table3?$AA@ DB 'table3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BAJ@LOLGBBOP@Only?5using?5TableNextColumn?$CI?$CJ?0?5wh@
CONST	SEGMENT
??_C@_0BAJ@LOLGBBOP@Only?5using?5TableNextColumn?$CI?$CJ?0?5wh@ DB 'Only '
	DB	'using TableNextColumn(), which tends to be convenient for tab'
	DB	'les where every cell contains the same type of contents.', 0aH
	DB	'This is also more similar to the old NextColumn() function of'
	DB	' the Columns API, and provided to facilitate the Columns->Tab'
	DB	'les API transition.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEKMPKJA@123?4456?$AA@
CONST	SEGMENT
??_C@_07MEKMPKJA@123?4456?$AA@ DB '123.456', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HOFANGPE@Some?5contents?$AA@
CONST	SEGMENT
??_C@_0O@HOFANGPE@Some?5contents?$AA@ DB 'Some contents', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06PLKMNMNJ@Row?5?$CFd?$AA@
CONST	SEGMENT
??_C@_06PLKMNMNJ@Row?5?$CFd?$AA@ DB 'Row %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IIHCDJGK@table2?$AA@
CONST	SEGMENT
??_C@_06IIHCDJGK@table2?$AA@ DB 'table2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@POKEAGN@Using?5TableNextRow?$CI?$CJ?5?$CL?5calling?5T@
CONST	SEGMENT
??_C@_0EP@POKEAGN@Using?5TableNextRow?$CI?$CJ?5?$CL?5calling?5T@ DB 'Usin'
	DB	'g TableNextRow() + calling TableNextColumn() _before_ each ce'
	DB	'll, manually.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IODOONAJ@Row?5?$CFd?5Column?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BB@IODOONAJ@Row?5?$CFd?5Column?5?$CFd?$AA@ DB 'Row %d Column %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KDFPGKKJ@table1?$AA@
CONST	SEGMENT
??_C@_06KDFPGKKJ@table1?$AA@ DB 'table1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@BMEOIPOH@Using?5TableNextRow?$CI?$CJ?5?$CL?5calling?5T@
CONST	SEGMENT
??_C@_0FE@BMEOIPOH@Using?5TableNextRow?$CI?$CJ?5?$CL?5calling?5T@ DB 'Usi'
	DB	'ng TableNextRow() + calling TableSetColumnIndex() _before_ ea'
	DB	'ch cell, in a loop.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NCGMCGDE@Tables?1Basic?$AA@
CONST	SEGMENT
??_C@_0N@NCGMCGDE@Tables?1Basic?$AA@ DB 'Tables/Basic', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@FFIEPAOP@Disable?5the?5indenting?5of?5tree?5no@
CONST	SEGMENT
??_C@_0FC@FFIEPAOP@Disable?5the?5indenting?5of?5tree?5no@ DB 'Disable the'
	DB	' indenting of tree nodes so demo tables can use the full wind'
	DB	'ow width.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JLFJACII@Disable?5tree?5indentation?$AA@
CONST	SEGMENT
??_C@_0BJ@JLFJACII@Disable?5tree?5indentation?$AA@ DB 'Disable tree inden'
	DB	'tation', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09JFADBGFP@Close?5all?$AA@
CONST	SEGMENT
??_C@_09JFADBGFP@Close?5all?$AA@ DB 'Close all', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JFCDBCPC@Open?5all?$AA@
CONST	SEGMENT
??_C@_08JFCDBCPC@Open?5all?$AA@ DB 'Open all', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MJGPNNJD@Tables?5?$CG?5Columns?$AA@
CONST	SEGMENT
??_C@_0BB@MJGPNNJD@Tables?5?$CG?5Columns?$AA@ DB 'Tables & Columns', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KOKNHOLC@Tables?$AA@
CONST	SEGMENT
??_C@_06KOKNHOLC@Tables?$AA@ DB 'Tables', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02BAABKJLB@?9?9?$AA@
CONST	SEGMENT
??_C@_02BAABKJLB@?9?9?$AA@ DB '--', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA DD 0eabH ; `ShowDemoWindowTables'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0L@FBCLIIEB@_IsHovered?$AA@
CONST	SEGMENT
??_C@_0L@FBCLIIEB@_IsHovered?$AA@ DB '_IsHovered', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MHNJAEMK@_IsSorted?$AA@
CONST	SEGMENT
??_C@_09MHNJAEMK@_IsSorted?$AA@ DB '_IsSorted', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IICELPIB@_IsVisible?$AA@
CONST	SEGMENT
??_C@_0L@IICELPIB@_IsVisible?$AA@ DB '_IsVisible', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HAGMFILL@_IsEnabled?$AA@
CONST	SEGMENT
??_C@_0L@HAGMFILL@_IsEnabled?$AA@ DB '_IsEnabled', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CAABAJEB@Default?5for?5column?5?$DO0?$AA@
CONST	SEGMENT
??_C@_0BG@CAABAJEB@Default?5for?5column?5?$DO0?$AA@ DB 'Default for colum'
	DB	'n >0', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NDAELIGC@_IndentDisable?$AA@
CONST	SEGMENT
??_C@_0P@NDAELIGC@_IndentDisable?$AA@ DB '_IndentDisable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NGNGOPFH@Default?5for?5column?50?$AA@
CONST	SEGMENT
??_C@_0BF@NGNGOPFH@Default?5for?5column?50?$AA@ DB 'Default for column 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IHCPMKPD@_IndentEnable?$AA@
CONST	SEGMENT
??_C@_0O@IHCPMKPD@_IndentEnable?$AA@ DB '_IndentEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OGIFEHDM@_PreferSortDescending?$AA@
CONST	SEGMENT
??_C@_0BG@OGIFEHDM@_PreferSortDescending?$AA@ DB '_PreferSortDescending', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BFMFKAGJ@_PreferSortAscending?$AA@
CONST	SEGMENT
??_C@_0BF@BFMFKAGJ@_PreferSortAscending?$AA@ DB '_PreferSortAscending', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FFBHDBOG@_NoHeaderWidth?$AA@
CONST	SEGMENT
??_C@_0P@FFBHDBOG@_NoHeaderWidth?$AA@ DB '_NoHeaderWidth', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FAJFNLOA@_NoHeaderLabel?$AA@
CONST	SEGMENT
??_C@_0P@FAJFNLOA@_NoHeaderLabel?$AA@ DB '_NoHeaderLabel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IGDJILJK@_NoSortDescending?$AA@
CONST	SEGMENT
??_C@_0BC@IGDJILJK@_NoSortDescending?$AA@ DB '_NoSortDescending', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BJIHNDPG@_NoSortAscending?$AA@
CONST	SEGMENT
??_C@_0BB@BJIHNDPG@_NoSortAscending?$AA@ DB '_NoSortAscending', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PLJNCANF@_NoSort?$AA@
CONST	SEGMENT
??_C@_07PLJNCANF@_NoSort?$AA@ DB '_NoSort', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PNNHJBCM@_NoClip?$AA@
CONST	SEGMENT
??_C@_07PNNHJBCM@_NoClip?$AA@ DB '_NoClip', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ICLECFEI@_NoHide?$AA@
CONST	SEGMENT
??_C@_07ICLECFEI@_NoHide?$AA@ DB '_NoHide', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CPPLPFKF@_NoReorder?$AA@
CONST	SEGMENT
??_C@_0L@CPPLPFKF@_NoReorder?$AA@ DB '_NoReorder', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09BODCBGEL@_NoResize?$AA@
CONST	SEGMENT
??_C@_09BODCBGEL@_NoResize?$AA@ DB '_NoResize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ILFLIFOG@_WidthFixed?$AA@
CONST	SEGMENT
??_C@_0M@ILFLIFOG@_WidthFixed?$AA@ DB '_WidthFixed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LBJDIKPA@_WidthStretch?$AA@
CONST	SEGMENT
??_C@_0O@LBJDIKPA@_WidthStretch?$AA@ DB '_WidthStretch', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GDLDKICM@_DefaultSort?$AA@
CONST	SEGMENT
??_C@_0N@GDLDKICM@_DefaultSort?$AA@ DB '_DefaultSort', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BKJKKNLB@_DefaultHide?$AA@
CONST	SEGMENT
??_C@_0N@BKJKKNLB@_DefaultHide?$AA@ DB '_DefaultHide', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@GLEFNIIN@Master?5disable?5flag?5?$CIalso?5hide?5f@
CONST	SEGMENT
??_C@_0DC@GLEFNIIN@Master?5disable?5flag?5?$CIalso?5hide?5f@ DB 'Master d'
	DB	'isable flag (also hide from context menu)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09NLBHHOGA@_Disabled?$AA@
CONST	SEGMENT
??_C@_09NLBHHOGA@_Disabled?$AA@ DB '_Disabled', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DKEJHHJP@?$CFs?3?$AA@
CONST	SEGMENT
??_C@_03DKEJHHJP@?$CFs?3?$AA@ DB '%s:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GDABACCD@Sizing?5Policy?$AA@
CONST	SEGMENT
??_C@_0O@GDABACCD@Sizing?5Policy?$AA@ DB 'Sizing Policy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PNOLBFOJ@ImGuiTableFlags?$AA@
CONST	SEGMENT
??_C@_0BA@PNOLBFOJ@ImGuiTableFlags?$AA@ DB 'ImGuiTableFlags', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0?$AA?$AA@ DB '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MFBALFLF@Menu?5inside?5a?5regular?5window?$AA@
CONST	SEGMENT
??_C@_0BN@MFBALFLF@Menu?5inside?5a?5regular?5window?$AA@ DB 'Menu inside '
	DB	'a regular window', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09PDGIKJJH@Menu?5item?$AA@
CONST	SEGMENT
??_C@_09PDGIKJJH@Menu?5item?$AA@ DB 'Menu item', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GCLBOGOD@CTRL?$CLM?$AA@
CONST	SEGMENT
??_C@_06GCLBOGOD@CTRL?$CLM?$AA@ DB 'CTRL+M', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@PMDHHLNB@Below?5we?5are?5testing?5adding?5menu@
CONST	SEGMENT
??_C@_0GB@PMDHHLNB@Below?5we?5are?5testing?5adding?5menu@ DB 'Below we ar'
	DB	'e testing adding menu items to a regular window. It''s rather'
	DB	' unusual but should work!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EEOFHCMN@Menus?5inside?5a?5regular?5window?$AA@
CONST	SEGMENT
??_C@_0BO@EEOFHCMN@Menus?5inside?5a?5regular?5window?$AA@ DB 'Menus insid'
	DB	'e a regular window', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IOOAIMEM@Popups?1Menus?5inside?5a?5regular?5wi@
CONST	SEGMENT
??_C@_0CF@IOOAIMEM@Popups?1Menus?5inside?5a?5regular?5wi@ DB 'Popups/Menu'
	DB	's inside a regular window', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CPFMAIJ@Hello?5from?5Stacked?5The?5Second?$CB?$AA@
CONST	SEGMENT
??_C@_0BP@CPFMAIJ@Hello?5from?5Stacked?5The?5Second?$CB?$AA@ DB 'Hello fr'
	DB	'om Stacked The Second!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09BHJOLLCH@Stacked?52?$AA@
CONST	SEGMENT
??_C@_09BHJOLLCH@Stacked?52?$AA@ DB 'Stacked 2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EOGCGODN@Add?5another?5modal?4?4?$AA@
CONST	SEGMENT
??_C@_0BE@EOGCGODN@Add?5another?5modal?4?4?$AA@ DB 'Add another modal..', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PEENBMOG@color?$AA@
CONST	SEGMENT
??_C@_05PEENBMOG@color?$AA@ DB 'color', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@FEJJJKAO@Hello?5from?5Stacked?5The?5First?6Usi@
CONST	SEGMENT
??_C@_0FG@FEJJJKAO@Hello?5from?5Stacked?5The?5First?6Usi@ DB 'Hello from '
	DB	'Stacked The First', 0aH, 'Using style.Colors[ImGuiCol_ModalWi'
	DB	'ndowDimBg] behind it.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LCHDFKKN@Some?5menu?5item?$AA@
CONST	SEGMENT
??_C@_0P@LCHDFKKN@Some?5menu?5item?$AA@ DB 'Some menu item', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DMLDOIOE@Stacked?51?$AA@
CONST	SEGMENT
??_C@_09DMLDOIOE@Stacked?51?$AA@ DB 'Stacked 1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NNACGNLC@Stacked?5modals?4?4?$AA@
CONST	SEGMENT
??_C@_0BB@NNACGNLC@Stacked?5modals?4?4?$AA@ DB 'Stacked modals..', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FMBNCPDL@Cancel?$AA@
CONST	SEGMENT
??_C@_06FMBNCPDL@Cancel?$AA@ DB 'Cancel', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GIPFHKNO@OK?$AA@
CONST	SEGMENT
??_C@_02GIPFHKNO@OK?$AA@ DB 'OK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BGNANACB@Don?8t?5ask?5me?5next?5time?$AA@
CONST	SEGMENT
??_C@_0BH@BGNANACB@Don?8t?5ask?5me?5next?5time?$AA@ DB 'Don''t ask me nex'
	DB	't time', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@GEGEJAML@All?5those?5beautiful?5files?5will?5b@
CONST	SEGMENT
??_C@_0EO@GEGEJAML@All?5those?5beautiful?5files?5will?5b@ DB 'All those b'
	DB	'eautiful files will be deleted.', 0aH, 'This operation cannot'
	DB	' be undone!', 0aH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCPPKMOD@Delete?$DP?$AA@
CONST	SEGMENT
??_C@_07DCPPKMOD@Delete?$DP?$AA@ DB 'Delete?', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CPNCIMAF@Delete?4?4?$AA@
CONST	SEGMENT
??_C@_08CPNCIMAF@Delete?4?4?$AA@ DB 'Delete..', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@FCFEEIDF@Modal?5windows?5are?5like?5popups?5bu@
CONST	SEGMENT
??_C@_0FC@FCFEEIDF@Modal?5windows?5are?5like?5popups?5bu@ DB 'Modal windo'
	DB	'ws are like popups but the user cannot close them by clicking'
	DB	' outside.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06BEBKNACN@Modals?$AA@
CONST	SEGMENT
??_C@_06BEBKNACN@Modals?$AA@ DB 'Modals', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OCELMHFF@Popups?1Modals?$AA@
CONST	SEGMENT
??_C@_0O@OCELMHFF@Popups?1Modals?$AA@ DB 'Popups/Modals', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BPPDJDHF@?$CI?$DM?9?9?5right?9click?5here?$CJ?$AA@
CONST	SEGMENT
??_C@_0BH@BPPDJDHF@?$CI?$DM?9?9?5right?9click?5here?$CJ?$AA@ DB '(<-- rig'
	DB	'ht-click here)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06PEDNKACM@?$CD?$CDedit?$AA@
CONST	SEGMENT
??_C@_06PEDNKACM@?$CD?$CDedit?$AA@ DB '##edit', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MIFJAGAG@Edit?5name?3?$AA@
CONST	SEGMENT
??_C@_0L@MIFJAGAG@Edit?5name?3?$AA@ DB 'Edit name:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BJGBOOKP@Button?3?5?$CFs?$CD?$CD?$CDButton?$AA@
CONST	SEGMENT
??_C@_0BE@BJGBOOKP@Button?3?5?$CFs?$CD?$CD?$CDButton?$AA@ DB 'Button: %s#'
	DB	'##Button', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0HH@IOGIBFGK@Showcase?5using?5a?5popup?5ID?5linked@
CONST	SEGMENT
??_C@_0HH@IOGIBFGK@Showcase?5using?5a?5popup?5ID?5linked@ DB 'Showcase us'
	DB	'ing a popup ID linked to item ID, with the item having a chan'
	DB	'ging label + stable ID using the ### operator.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DCOFNGHJ@?$CI3?$CJ?5Or?5click?5this?5button?$AA@
CONST	SEGMENT
??_C@_0BJ@DCOFNGHJ@?$CI3?$CJ?5Or?5click?5this?5button?$AA@ DB '(3) Or cli'
	DB	'ck this button', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BDAGDOIM@?$CI2?$CJ?5Or?5right?9click?5this?5text?$AA@
CONST	SEGMENT
??_C@_0BN@BDAGDOIM@?$CI2?$CJ?5Or?5right?9click?5this?5text?$AA@ DB '(2) O'
	DB	'r right-click this text', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FGLEKONH@?$CD?$CDValue?$AA@
CONST	SEGMENT
??_C@_07FGLEKONH@?$CD?$CDValue?$AA@ DB '##Value', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NJOBBCFG@Set?5to?5PI?$AA@
CONST	SEGMENT
??_C@_09NJOBBCFG@Set?5to?5PI?$AA@ DB 'Set to PI', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MLNNLOAO@Set?5to?5zero?$AA@
CONST	SEGMENT
??_C@_0M@MLNNLOAO@Set?5to?5zero?$AA@ DB 'Set to zero', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MOACKAAJ@my?5popup?$AA@
CONST	SEGMENT
??_C@_08MOACKAAJ@my?5popup?$AA@ DB 'my popup', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MINHGHEB@Value?5?$DN?5?$CF?43f?5?$DM?9?9?5?$CI1?$CJ?5right?9click@
CONST	SEGMENT
??_C@_0CL@MINHGHEB@Value?5?$DN?5?$CF?43f?5?$DM?9?9?5?$CI1?$CJ?5right?9click@ DB 'V'
	DB	'alue = %.3f <-- (1) right-click this text', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@OBAEIHGO@Text?$CI?$CJ?5elements?5don?8t?5have?5stabl@
CONST	SEGMENT
??_C@_0EJ@OBAEIHGO@Text?$CI?$CJ?5elements?5don?8t?5have?5stabl@ DB 'Text('
	DB	') elements don''t have stable identifiers so we need to provi'
	DB	'de one.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PNAOOLFL@Right?9click?5to?5open?5popup?$AA@
CONST	SEGMENT
??_C@_0BK@PNAOOLFL@Right?9click?5to?5open?5popup?$AA@ DB 'Right-click to '
	DB	'open popup', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BODNOCMP@This?5a?5popup?5for?5?$CC?$CFs?$CC?$CB?$AA@
CONST	SEGMENT
??_C@_0BH@BODNOCMP@This?5a?5popup?5for?5?$CC?$CFs?$CC?$CB?$AA@ DB 'This a'
	DB	' popup for "%s"!', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06COGGDAJN@Label5?$AA@
CONST	SEGMENT
??_C@_06COGGDAJN@Label5?$AA@ DB 'Label5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DHHNABNM@Label4?$AA@
CONST	SEGMENT
??_C@_06DHHNABNM@Label4?$AA@ DB 'Label4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HIDMJHBL@Label3?$AA@
CONST	SEGMENT
??_C@_06HIDMJHBL@Label3?$AA@ DB 'Label3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GBCHKGFK@Label2?$AA@
CONST	SEGMENT
??_C@_06GBCHKGFK@Label2?$AA@ DB 'Label2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EKAKPFJJ@Label1?$AA@
CONST	SEGMENT
??_C@_06EKAKPFJJ@Label1?$AA@ DB 'Label1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@JCPNKAKN@?$CCContext?$CC?5functions?5are?5simple?5h@
CONST	SEGMENT
??_C@_0GC@JCPNKAKN@?$CCContext?$CC?5functions?5are?5simple?5h@ DB '"Conte'
	DB	'xt" functions are simple helpers to associate a Popup to a gi'
	DB	'ven Item or Window identifier.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EGPMCJBG@Context?5menus?$AA@
CONST	SEGMENT
??_C@_0O@EGPMCJBG@Context?5menus?$AA@ DB 'Context menus', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CBNGCKHJ@Popups?1Context?5menus?$AA@
CONST	SEGMENT
??_C@_0BF@CBNGCKHJ@Popups?1Context?5menus?$AA@ DB 'Popups/Context menus', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BLLJFPAH@This?5is?5a?5dummy?5button?4?4?$AA@
CONST	SEGMENT
??_C@_0BJ@BLLJFPAH@This?5is?5a?5dummy?5button?4?4?$AA@ DB 'This is a dumm'
	DB	'y button..', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DPOMEOMK@Hello?5from?5popup?$CB?$AA@
CONST	SEGMENT
??_C@_0BC@DPOMEOMK@Hello?5from?5popup?$CB?$AA@ DB 'Hello from popup!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05JMHIMMIL@Dummy?$AA@
CONST	SEGMENT
??_C@_05JMHIMMIL@Dummy?$AA@ DB 'Dummy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PBAHLACE@File?$AA@
CONST	SEGMENT
??_C@_04PBAHLACE@File?$AA@ DB 'File', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CMFGCCH@my_file_popup?$AA@
CONST	SEGMENT
??_C@_0O@CMFGCCH@my_file_popup?$AA@ DB 'my_file_popup', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CEODEGMM@With?5a?5menu?4?4?$AA@
CONST	SEGMENT
??_C@_0O@CEODEGMM@With?5a?5menu?4?4?$AA@ DB 'With a menu..', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DMMONLJF@I?5am?5the?5last?5one?5here?4?$AA@
CONST	SEGMENT
??_C@_0BI@DMMONLJF@I?5am?5the?5last?5one?5here?4?$AA@ DB 'I am the last o'
	DB	'ne here.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CMMIFNBD@another?5popup?$AA@
CONST	SEGMENT
??_C@_0O@CMMIFNBD@another?5popup?$AA@ DB 'another popup', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NAJLJJDJ@Stacked?5Popup?$AA@
CONST	SEGMENT
??_C@_0O@NAJLJJDJ@Stacked?5Popup?$AA@ DB 'Stacked Popup', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HJLGLIOD@I?5am?5a?5tooltip?5over?5a?5popup?$AA@
CONST	SEGMENT
??_C@_0BM@HJLGLIOD@I?5am?5a?5tooltip?5over?5a?5popup?$AA@ DB 'I am a tool'
	DB	'tip over a popup', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IODHFNG@Tooltip?5here?$AA@
CONST	SEGMENT
??_C@_0N@IODHFNG@Tooltip?5here?$AA@ DB 'Tooltip here', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPLGDLFG@Click?5me?$AA@
CONST	SEGMENT
??_C@_08PPLGDLFG@Click?5me?$AA@ DB 'Click me', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GMNJJNGG@Sub?9menu?$AA@
CONST	SEGMENT
??_C@_08GMNJJNGG@Sub?9menu?$AA@ DB 'Sub-menu', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LJBKGLLI@my_toggle_popup?$AA@
CONST	SEGMENT
??_C@_0BA@LJBKGLLI@my_toggle_popup?$AA@ DB 'my_toggle_popup', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NINPLAO@Toggle?4?4?$AA@
CONST	SEGMENT
??_C@_08NINPLAO@Toggle?4?4?$AA@ DB 'Toggle..', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IKEIPKBP@Aquarium?$AA@
CONST	SEGMENT
??_C@_08IKEIPKBP@Aquarium?$AA@ DB 'Aquarium', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PHEAPGKB@?$DMNone?$DO?$AA@
CONST	SEGMENT
??_C@_06PHEAPGKB@?$DMNone?$DO?$AA@ DB '<None>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GGCCCMJM@my_select_popup?$AA@
CONST	SEGMENT
??_C@_0BA@GGCCCMJM@my_select_popup?$AA@ DB 'my_select_popup', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NNBGNINF@Select?4?4?$AA@
CONST	SEGMENT
??_C@_08NNBGNINF@Select?4?4?$AA@ DB 'Select..', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EGAMPFAB@Tilefish?$AA@
CONST	SEGMENT
??_C@_08EGAMPFAB@Tilefish?$AA@ DB 'Tilefish', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DOCMJKHB@Pollock?$AA@
CONST	SEGMENT
??_C@_07DOCMJKHB@Pollock?$AA@ DB 'Pollock', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OFLHLLIP@Mackerel?$AA@
CONST	SEGMENT
??_C@_08OFLHLLIP@Mackerel?$AA@ DB 'Mackerel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BNGOACBO@Haddock?$AA@
CONST	SEGMENT
??_C@_07BNGOACBO@Haddock?$AA@ DB 'Haddock', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BKABPFFI@Bream?$AA@
CONST	SEGMENT
??_C@_05BKABPFFI@Bream?$AA@ DB 'Bream', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HO@LGMOGOO@When?5a?5popup?5is?5active?0?5it?5inhib@
CONST	SEGMENT
??_C@_0HO@LGMOGOO@When?5a?5popup?5is?5active?0?5it?5inhib@ DB 'When a pop'
	DB	'up is active, it inhibits interacting with windows that are b'
	DB	'ehind the popup. Clicking outside the popup closes it.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LLGFJBMF@Popups?1Popups?$AA@
CONST	SEGMENT
??_C@_0O@LLGFJBMF@Popups?1Popups?$AA@ DB 'Popups/Popups', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JODLIHDO@Popups?5?$CG?5Modal?5windows?$AA@
CONST	SEGMENT
??_C@_0BH@JODLIHDO@Popups?5?$CG?5Modal?5windows?$AA@ DB 'Popups & Modal w'
	DB	'indows', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06ENDEIGLN@Popups?$AA@
CONST	SEGMENT
??_C@_06ENDEIGLN@Popups?$AA@ DB 'Popups', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowDemoWindowPopups@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowDemoWindowPopups@@YAXXZ@4JA DD 0ce6H ; `ShowDemoWindowPopups'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BN@MKAJBHJO@Line?51?5hello?6Line?52?5clip?5me?$CB?$AA@
CONST	SEGMENT
??_C@_0BN@MKAJBHJO@Line?51?5hello?6Line?52?5clip?5me?$CB?$AA@ DB 'Line 1 '
	DB	'hello', 0aH, 'Line 2 clip me!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IJNEAHEL@?$CD?$CDcanvas?$AA@
CONST	SEGMENT
??_C@_08IJNEAHEL@?$CD?$CDcanvas?$AA@ DB '##canvas', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CBB@PALAFPED@?$CILeft?$CJ?5Using?5ImGui?3?3PushClipRect@
CONST	SEGMENT
??_C@_0CBB@PALAFPED@?$CILeft?$CJ?5Using?5ImGui?3?3PushClipRect@ DB '(Left'
	DB	') Using ImGui::PushClipRect():', 0aH, 'Will alter ImGui hit-t'
	DB	'esting logic + ImDrawList rendering.', 0aH, '(use this if you'
	DB	' want your clipping rectangle to affect interactions)', 0aH, 0aH
	DB	'(Center) Using ImDrawList::PushClipRect():', 0aH, 'Will alter'
	DB	' ImDrawList rendering only.', 0aH, '(use this as a shortcut i'
	DB	'f you are only using ImDrawList calls)', 0aH, 0aH, '(Right) U'
	DB	'sing ImDrawList::AddText() with a fine ClipRect:', 0aH, 'Will'
	DB	' alter only this specific ImDrawList::AddText() rendering.', 0aH
	DB	'This is often used internally to avoid altering the clipping '
	DB	'rectangle and minimize draw calls.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MNBDPJCG@?$CIClick?5and?5drag?5to?5scroll?$CJ?$AA@
CONST	SEGMENT
??_C@_0BL@MNBDPJCG@?$CIClick?5and?5drag?5to?5scroll?$CJ?$AA@ DB '(Click a'
	DB	'nd drag to scroll)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IAGNFIBA@size?$AA@
CONST	SEGMENT
??_C@_04IAGNFIBA@size?$AA@ DB 'size', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLKICGJM@Clipping?$AA@
CONST	SEGMENT
??_C@_08LLKICGJM@Clipping?$AA@ DB 'Clipping', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OCHNAOPI@Layout?1Clipping?$AA@
CONST	SEGMENT
??_C@_0BA@OCHNAOPI@Layout?1Clipping?$AA@ DB 'Layout/Clipping', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GNNAMPMJ@FourFourFour?$AA@
CONST	SEGMENT
??_C@_0N@GNNAMPMJ@FourFourFour?$AA@ DB 'FourFourFour', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BGMNPICP@ThreeThreeThree?$AA@
CONST	SEGMENT
??_C@_0BA@BGMNPICP@ThreeThreeThree?$AA@ DB 'ThreeThreeThree', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BMOICMLJ@TwoTwoTwo?$AA@
CONST	SEGMENT
??_C@_09BMOICMLJ@TwoTwoTwo?$AA@ DB 'TwoTwoTwo', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DHLFJNGJ@OneOneOne?$AA@
CONST	SEGMENT
??_C@_09DHLFJNGJ@OneOneOne?$AA@ DB 'OneOneOne', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05COLMCDPH@Hello?$AA@
CONST	SEGMENT
??_C@_05COLMCDPH@Hello?$AA@ DB 'Hello', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CJJOOHNL@Columns?3?$AA@
CONST	SEGMENT
??_C@_08CJJOOHNL@Columns?3?$AA@ DB 'Columns:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CDOLGENO@Width?5?$CF?42f?$AA@
CONST	SEGMENT
??_C@_0L@CDOLGENO@Width?5?$CF?42f?$AA@ DB 'Width %.2f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LCLENNFI@table?$AA@
CONST	SEGMENT
??_C@_05LCLENNFI@table?$AA@ DB 'table', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GIKBKH@Tables?3?$AA@
CONST	SEGMENT
??_C@_07GIKBKH@Tables?3?$AA@ DB 'Tables:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@ECONPGGJ@This?5text?5should?5automatically?5w@
CONST	SEGMENT
??_C@_0EH@ECONPGGJ@This?5text?5should?5automatically?5w@ DB 'This text sh'
	DB	'ould automatically wrap on the edge of the work rectangle.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LBMIMLJO@CollapsingHeader?$AA@
CONST	SEGMENT
??_C@_0BB@LBMIMLJO@CollapsingHeader?$AA@ DB 'CollapsingHeader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GOEDKDLO@Some?5tree?5contents?$AA@
CONST	SEGMENT
??_C@_0BD@GOEDKDLO@Some?5tree?5contents?$AA@ DB 'Some tree contents', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FFNCLEGA@another?5one?5of?5those?5tree?5node?4?4@
CONST	SEGMENT
??_C@_0CC@FFNCLEGA@another?5one?5of?5those?5tree?5node?4?4@ DB 'another o'
	DB	'ne of those tree node...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HNGLJJLH@this?5is?5a?5tree?5node?$AA@
CONST	SEGMENT
??_C@_0BE@HNGLJJLH@this?5is?5a?5tree?5node?$AA@ DB 'this is a tree node', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GGAJDBIL@this?5is?5a?5300?9wide?5button?$AA@
CONST	SEGMENT
??_C@_0BK@GGAJDBIL@this?5is?5a?5300?9wide?5button?$AA@ DB 'this is a 300-'
	DB	'wide button', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05NBKGABAK@?$CD?$CDcsx?$AA@
CONST	SEGMENT
??_C@_05NBKGABAK@?$CD?$CDcsx?$AA@ DB '##csx', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EDCBBBDH@Scroll?5?$CF?41f?1?$CF?41f?5?$CF?41f?1?$CF?41f?$AA@
CONST	SEGMENT
??_C@_0BL@EDCBBBDH@Scroll?5?$CF?41f?1?$CF?41f?5?$CF?41f?1?$CF?41f?$AA@ DB 'S'
	DB	'croll %.1f/%.1f %.1f/%.1f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GEDBKKBK@Explicit?5content?5size?$AA@
CONST	SEGMENT
??_C@_0BG@GEDBKKBK@Explicit?5content?5size?$AA@ DB 'Explicit content size'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_05GIMBDOHM@Child?$AA@
CONST	SEGMENT
??_C@_05GIMBDOHM@Child?$AA@ DB 'Child', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CHLOJOEF@Tab?5bar?$AA@
CONST	SEGMENT
??_C@_07CHLOJOEF@Tab?5bar?$AA@ DB 'Tab bar', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07IBCCJKML@Columns?$AA@
CONST	SEGMENT
??_C@_07IBCCJKML@Columns?$AA@ DB 'Columns', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HDFBIJDK@Text?5wrapped?$AA@
CONST	SEGMENT
??_C@_0N@HDFBIJDK@Text?5wrapped?$AA@ DB 'Text wrapped', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DIDHCLKE@Tree?5nodes?$AA@
CONST	SEGMENT
??_C@_0L@DIDHCLKE@Tree?5nodes?$AA@ DB 'Tree nodes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PCJBMDND@H?9scrollbar?$AA@
CONST	SEGMENT
??_C@_0M@PCJBMDND@H?9scrollbar?$AA@ DB 'H-scrollbar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0LE@BCMFBNBD@Test?5of?5different?5widgets?5react?5@
CONST	SEGMENT
??_C@_0LE@BCMFBNBD@Test?5of?5different?5widgets?5react?5@ DB 'Test of dif'
	DB	'ferent widgets react and impact the work rectangle growing wh'
	DB	'en horizontal scrolling is enabled.', 0aH, 0aH, 'Use ''Metric'
	DB	's->Tools->Show windows rectangles'' to visualize rectangles.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@FFKEOKBG@Layout?1Scrolling?1Horizontal?5cont@
CONST	SEGMENT
??_C@_0DG@FFKEOKBG@Layout?1Scrolling?1Horizontal?5cont@ DB 'Layout/Scroll'
	DB	'ing/Horizontal contents size demo window', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OHGKBEFE@Horizontal?5contents?5size?5demo?5wi@
CONST	SEGMENT
??_C@_0CF@OHGKBEFE@Horizontal?5contents?5size?5demo?5wi@ DB 'Horizontal c'
	DB	'ontents size demo window', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KHHLOHPL@Show?5Horizontal?5contents?5size?5de@
CONST	SEGMENT
??_C@_0CK@KHHLOHPL@Show?5Horizontal?5contents?5size?5de@ DB 'Show Horizon'
	DB	'tal contents size demo window', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GPIOPFAK@?$DO?$DO?$AA@
CONST	SEGMENT
??_C@_02GPIOPFAK@?$DO?$DO?$AA@ DB '>>', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HICDBOJF@Scroll?5from?5code?$AA@
CONST	SEGMENT
??_C@_0BB@HICDBOJF@Scroll?5from?5code?$AA@ DB 'Scroll from code', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02FODMEDOG@?$DM?$DM?$AA@
CONST	SEGMENT
??_C@_02FODMEDOG@?$DM?$DM?$AA@ DB '<<', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MLLJCPJP@Buzz?$AA@
CONST	SEGMENT
??_C@_04MLLJCPJP@Buzz?$AA@ DB 'Buzz', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CEPGGBHI@Fizz?$AA@
CONST	SEGMENT
??_C@_04CEPGGBHI@Fizz?$AA@ DB 'Fizz', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GLBPKMPD@FizzBuzz?$AA@
CONST	SEGMENT
??_C@_08GLBPKMPD@FizzBuzz?$AA@ DB 'FizzBuzz', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PKEBEIDM@scrolling?$AA@
CONST	SEGMENT
??_C@_09PKEBEIDM@scrolling?$AA@ DB 'scrolling', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0MM@GGDOLBND@Horizontal?5scrolling?5for?5a?5windo@
CONST	SEGMENT
??_C@_0MM@GGDOLBND@Horizontal?5scrolling?5for?5a?5windo@ DB 'Horizontal s'
	DB	'crolling for a window is enabled via the ImGuiWindowFlags_Hor'
	DB	'izontalScrollbar flag.', 0aH, 0aH, 'You may want to also expl'
	DB	'icitly specify content width by using SetNextWindowContentWid'
	DB	'th() before Begin().', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@POIINEAC@Layout?1Scrolling?1Horizontal?5?$CImor@
CONST	SEGMENT
??_C@_0CD@POIINEAC@Layout?1Scrolling?1Horizontal?5?$CImor@ DB 'Layout/Scr'
	DB	'olling/Horizontal (more)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MJLHBHDH@?$CFs?6?$CF?40f?1?$CF?40f?$AA@
CONST	SEGMENT
??_C@_0N@MJLHBHDH@?$CFs?6?$CF?40f?1?$CF?40f?$AA@ DB '%s', 0aH, '%.0f/%.0f'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_05DADPALEM@Right?$AA@
CONST	SEGMENT
??_C@_05DADPALEM@Right?$AA@ DB 'Right', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KPCPLBPL@Left?$AA@
CONST	SEGMENT
??_C@_04KPCPLBPL@Left?$AA@ DB 'Left', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BEAADLOE@?$CD?$CDHorizontalScrolling?$AA@
CONST	SEGMENT
??_C@_0BG@BEAADLOE@?$CD?$CDHorizontalScrolling?$AA@ DB '##HorizontalScrol'
	DB	'ling', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BDB@LNFKBNGF@Use?5SetScrollHereX?$CI?$CJ?5or?5SetScrol@
CONST	SEGMENT
??_C@_0BDB@LNFKBNGF@Use?5SetScrollHereX?$CI?$CJ?5or?5SetScrol@ DB 'Use Se'
	DB	'tScrollHereX() or SetScrollFromPosX() to scroll to a given ho'
	DB	'rizontal position.', 0aH, 0aH, 'Because the clipping rectangl'
	DB	'e of most window hides half worth of WindowPadding on the lef'
	DB	't/right, using SetScrollFromPosX(+1) will usually result in c'
	DB	'lipped text whereas the equivalent SetScrollFromPosY(+1) woul'
	DB	'dn''t.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CLNONEPI@Layout?1Scrolling?1Horizontal?$AA@
CONST	SEGMENT
??_C@_0BM@CLNONEPI@Layout?1Scrolling?1Horizontal?$AA@ DB 'Layout/Scrollin'
	DB	'g/Horizontal', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09DKGDMKKF@?$CF?40f?1?$CF?40f?$AA@
CONST	SEGMENT
??_C@_09DKGDMKKF@?$CF?40f?1?$CF?40f?$AA@ DB '%.0f/%.0f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03FIKCJHKP@abc?$AA@
CONST	SEGMENT
??_C@_03FIKCJHKP@abc?$AA@ DB 'abc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06DDHCBBGN@Bottom?$AA@
CONST	SEGMENT
??_C@_06DDHCBBGN@Bottom?$AA@ DB 'Bottom', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03HJBEBHGH@75?$CF?$AA@
CONST	SEGMENT
??_C@_03HJBEBHGH@75?$CF?$AA@ DB '75%', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NOADDNNE@Center?$AA@
CONST	SEGMENT
??_C@_06NOADDNNE@Center?$AA@ DB 'Center', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EOMKOHFF@25?$CF?$AA@
CONST	SEGMENT
??_C@_03EOMKOHFF@25?$CF?$AA@ DB '25%', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PGGAENPN@Top?$AA@
CONST	SEGMENT
??_C@_03PGGAENPN@Top?$AA@ DB 'Top', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NILALFMA@?$CD?$CDVerticalScrolling?$AA@
CONST	SEGMENT
??_C@_0BE@NILALFMA@?$CD?$CDVerticalScrolling?$AA@ DB '##VerticalScrolling'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFMCHKKE@?$CD?$CDpos?$AA@
CONST	SEGMENT
??_C@_05GFMCHKKE@?$CD?$CDpos?$AA@ DB '##pos', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LJJDDGBB@X?1Y?5?$DN?5?$CF?40f?5px?$AA@
CONST	SEGMENT
??_C@_0O@LJJDDGBB@X?1Y?5?$DN?5?$CF?40f?5px?$AA@ DB 'X/Y = %.0f px', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CGNNKBMG@Scroll?5To?5Pos?$AA@
CONST	SEGMENT
??_C@_0O@CGNNKBMG@Scroll?5To?5Pos?$AA@ DB 'Scroll To Pos', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05FFNMOAPG@?$CD?$CDoff?$AA@
CONST	SEGMENT
??_C@_05FFNMOAPG@?$CD?$CDoff?$AA@ DB '##off', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DGGLGIAM@?$CL?$CF?40f?5px?$AA@
CONST	SEGMENT
??_C@_08DGGLGIAM@?$CL?$CF?40f?5px?$AA@ DB '+%.0f px', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EDOJIGBC@Scroll?5Offset?$AA@
CONST	SEGMENT
??_C@_0O@EDOJIGBC@Scroll?5Offset?$AA@ DB 'Scroll Offset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06PDMOEKMO@?$CD?$CDitem?$AA@
CONST	SEGMENT
??_C@_06PDMOEKMO@?$CD?$CDitem?$AA@ DB '##item', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GAMHFGFH@Item?5?$DN?5?$CFd?$AA@
CONST	SEGMENT
??_C@_09GAMHFGFH@Item?5?$DN?5?$CFd?$AA@ DB 'Item = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05BFDCPAGB@Track?$AA@
CONST	SEGMENT
??_C@_05BFDCPAGB@Track?$AA@ DB 'Track', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ODNEMNHD@Decoration?$AA@
CONST	SEGMENT
??_C@_0L@ODNEMNHD@Decoration?$AA@ DB 'Decoration', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@KFLONGJI@Use?5SetScrollHereY?$CI?$CJ?5or?5SetScrol@
CONST	SEGMENT
??_C@_0FE@KFLONGJI@Use?5SetScrollHereY?$CI?$CJ?5or?5SetScrol@ DB 'Use Set'
	DB	'ScrollHereY() or SetScrollFromPosY() to scroll to a given ver'
	DB	'tical position.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KKKEAAFD@Layout?1Scrolling?1Vertical?$AA@
CONST	SEGMENT
??_C@_0BK@KKKEAAFD@Layout?1Scrolling?1Vertical?$AA@ DB 'Layout/Scrolling/'
	DB	'Vertical', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09LFBMELOM@Scrolling?$AA@
CONST	SEGMENT
??_C@_09LFBMELOM@Scrolling?$AA@ DB 'Scrolling', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PPJKDLIF@Layout?1Scrolling?$AA@
CONST	SEGMENT
??_C@_0BB@PPJKDLIF@Layout?1Scrolling?$AA@ DB 'Layout/Scrolling', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OADFNCOB@Button?$CD?$CD4?$AA@
CONST	SEGMENT
??_C@_09OADFNCOB@Button?$CD?$CD4?$AA@ DB 'Button##4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKAPPFIB@Node?$AA@
CONST	SEGMENT
??_C@_04OKAPPFIB@Node?$AA@ DB 'Node', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DABAODPF@Bullet?5text?$AA@
CONST	SEGMENT
??_C@_0M@DABAODPF@Bullet?5text?$AA@ DB 'Bullet text', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KPHEEECG@Button?$CD?$CD3?$AA@
CONST	SEGMENT
??_C@_09KPHEEECG@Button?$CD?$CD3?$AA@ DB 'Button##3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LGGPHFGH@Button?$CD?$CD2?$AA@
CONST	SEGMENT
??_C@_09LGGPHFGH@Button?$CD?$CD2?$AA@ DB 'Button##2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07HMHPNFCM@Node?$CD?$CD2?$AA@
CONST	SEGMENT
??_C@_07HMHPNFCM@Node?$CD?$CD2?$AA@ DB 'Node##2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CCOCANBA@Item?5?$CFd?4?4?$AA@
CONST	SEGMENT
??_C@_09CCOCANBA@Item?5?$CFd?4?4?$AA@ DB 'Item %d..', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07FHFCIGOP@Node?$CD?$CD1?$AA@
CONST	SEGMENT
??_C@_07FHFCIGOP@Node?$CD?$CD1?$AA@ DB 'Node##1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JNECCGKE@Button?$CD?$CD1?$AA@
CONST	SEGMENT
??_C@_09JNECCGKE@Button?$CD?$CD1?$AA@ DB 'Button##1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DANAPFLN@SmallButton?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0O@DANAPFLN@SmallButton?$CI?$CJ?$AA@ DB 'SmallButton()', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DHDFAMNE@Button?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_08DHDFAMNE@Button?$CI?$CJ?$AA@ DB 'Button()', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OIMGOJDP@50x50?$AA@
CONST	SEGMENT
??_C@_05OIMGOJDP@50x50?$AA@ DB '50x50', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FMIAGJLC@80x80?$AA@
CONST	SEGMENT
??_C@_05FMIAGJLC@80x80?$AA@ DB '80x80', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OFIEFPON@Misc?5items?3?$AA@
CONST	SEGMENT
??_C@_0M@OFIEFPON@Misc?5items?3?$AA@ DB 'Misc items:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGJGMAPF@HOP?$CD?$CD2?$AA@
CONST	SEGMENT
??_C@_06LGJGMAPF@HOP?$CD?$CD2?$AA@ DB 'HOP##2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNLLJDDG@HOP?$CD?$CD1?$AA@
CONST	SEGMENT
??_C@_06JNLLJDDG@HOP?$CD?$CD1?$AA@ DB 'HOP##1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MEHCJFNA@Hello?6World?$AA@
CONST	SEGMENT
??_C@_0M@MEHCJFNA@Hello?6World?$AA@ DB 'Hello', 0aH, 'World', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LPFJLNGJ@One?6Two?6Three?$AA@
CONST	SEGMENT
??_C@_0O@LPFJLNGJ@One?6Two?6Three?$AA@ DB 'One', 0aH, 'Two', 0aH, 'Three', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IKLHLLAO@Multi?9line?5text?3?$AA@
CONST	SEGMENT
??_C@_0BB@IKLHLLAO@Multi?9line?5text?3?$AA@ DB 'Multi-line text:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PBFELNCE@Item?$CD?$CD3?$AA@
CONST	SEGMENT
??_C@_07PBFELNCE@Item?$CD?$CD3?$AA@ DB 'Item##3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OIEPIMGF@Item?$CD?$CD2?$AA@
CONST	SEGMENT
??_C@_07OIEPIMGF@Item?$CD?$CD2?$AA@ DB 'Item##2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BGCMBJDA@Item?$AA@
CONST	SEGMENT
??_C@_04BGCMBJDA@Item?$AA@ DB 'Item', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MDGCNPKG@Item?$CD?$CD1?$AA@
CONST	SEGMENT
??_C@_07MDGCNPKG@Item?$CD?$CD1?$AA@ DB 'Item##1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CCJJPIAI@Text?5aligned?5to?5framed?5item?$AA@
CONST	SEGMENT
??_C@_0BM@CCJJPIAI@Text?5aligned?5to?5framed?5item?$AA@ DB 'Text aligned '
	DB	'to framed item', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07HPPHDIDO@TEST?$CD?$CD2?$AA@
CONST	SEGMENT
??_C@_07HPPHDIDO@TEST?$CD?$CD2?$AA@ DB 'TEST##2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OIKJMBFP@TEST?$AA@
CONST	SEGMENT
??_C@_04OIKJMBFP@TEST?$AA@ DB 'TEST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FENKGLPN@TEST?$CD?$CD1?$AA@
CONST	SEGMENT
??_C@_07FENKGLPN@TEST?$CD?$CD1?$AA@ DB 'TEST##1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FL@DLOHNEGO@We?5call?5AlignTextToFramePadding?$CI@
CONST	SEGMENT
??_C@_0FL@DLOHNEGO@We?5call?5AlignTextToFramePadding?$CI@ DB 'We call Ali'
	DB	'gnTextToFramePadding() to vertically align the text baseline '
	DB	'by +FramePadding.y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LEJMPEFH@OK?5Blahblah?$AA@
CONST	SEGMENT
??_C@_0M@LEJMPEFH@OK?5Blahblah?$AA@ DB 'OK Blahblah', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@PMNLFDAO@Baseline?5of?5button?5will?5look?5mis@
CONST	SEGMENT
??_C@_0DE@PMNLFDAO@Baseline?5of?5button?5will?5look?5mis@ DB 'Baseline of'
	DB	' button will look misaligned with text..', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GBEAAIAC@Some?5framed?5item?$AA@
CONST	SEGMENT
??_C@_0BB@GBEAAIAC@Some?5framed?5item?$AA@ DB 'Some framed item', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HEDLMKK@KO?5Blahblah?$AA@
CONST	SEGMENT
??_C@_0M@HEDLMKK@KO?5Blahblah?$AA@ DB 'KO Blahblah', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0MJ@CEINBEPI@This?5is?5testing?5the?5vertical?5ali@
CONST	SEGMENT
??_C@_0MJ@CEINBEPI@This?5is?5testing?5the?5vertical?5ali@ DB 'This is tes'
	DB	'ting the vertical alignment that gets applied on text to keep'
	DB	' it aligned with widgets. Lines only composed of text or "sma'
	DB	'll" widgets use less vertical space than lines with framed wi'
	DB	'dgets.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FLJDDPLM@Text?5baseline?3?$AA@
CONST	SEGMENT
??_C@_0P@FLJDDPLM@Text?5baseline?3?$AA@ DB 'Text baseline:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DMCNFLHM@Text?5Baseline?5Alignment?$AA@
CONST	SEGMENT
??_C@_0BI@DMCNFLHM@Text?5Baseline?5Alignment?$AA@ DB 'Text Baseline Align'
	DB	'ment', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BPEPNMPK@Layout?1Text?5Baseline?5Alignment?$AA@
CONST	SEGMENT
??_C@_0BP@BPEPNMPK@Layout?1Text?5Baseline?5Alignment?$AA@ DB 'Layout/Text'
	DB	' Baseline Alignment', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FODJADJE@Not?5Selected?$AA@
CONST	SEGMENT
??_C@_0N@FODJADJE@Not?5Selected?$AA@ DB 'Not Selected', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KLEPBNHL@Selected?$AA@
CONST	SEGMENT
??_C@_08KLEPBNHL@Selected?$AA@ DB 'Selected', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04PPBEGPNI@List?$AA@
CONST	SEGMENT
??_C@_04PPBEGPNI@List?$AA@ DB 'List', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NCAPIIPH@LEVERAGE?6BUZZWORD?$AA@
CONST	SEGMENT
??_C@_0BC@NCAPIIPH@LEVERAGE?6BUZZWORD?$AA@ DB 'LEVERAGE', 0aH, 'BUZZWORD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HBCMJOON@REACTION?$AA@
CONST	SEGMENT
??_C@_08HBCMJOON@REACTION?$AA@ DB 'REACTION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DHJAPAEE@ACTION?$AA@
CONST	SEGMENT
??_C@_06DHJAPAEE@ACTION?$AA@ DB 'ACTION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NDEOOAHA@?$CD?$CDvalues?$AA@
CONST	SEGMENT
??_C@_08NDEOOAHA@?$CD?$CDvalues?$AA@ DB '##values', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GCGPENCF@First?5group?5hovered?$AA@
CONST	SEGMENT
??_C@_0BE@GCGPENCF@First?5group?5hovered?$AA@ DB 'First group hovered', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03IJCOHMIH@EEE?$AA@
CONST	SEGMENT
??_C@_03IJCOHMIH@EEE?$AA@ DB 'EEE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CJELEAJE@DDD?$AA@
CONST	SEGMENT
??_C@_03CJELEAJE@DDD?$AA@ DB 'DDD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03POJCPIGP@CCC?$AA@
CONST	SEGMENT
??_C@_03POJCPIGP@CCC?$AA@ DB 'CCC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FOPHMEHM@BBB?$AA@
CONST	SEGMENT
??_C@_03FOPHMEHM@BBB?$AA@ DB 'BBB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GFCJIGAI@AAA?$AA@
CONST	SEGMENT
??_C@_03GFCJIGAI@AAA?$AA@ DB 'AAA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0NJ@BBEJCFPH@BeginGroup?$CI?$CJ?5basically?5locks?5the@
CONST	SEGMENT
??_C@_0NJ@BBEJCFPH@BeginGroup?$CI?$CJ?5basically?5locks?5the@ DB 'BeginGr'
	DB	'oup() basically locks the horizontal position for new line. E'
	DB	'ndGroup() bundles the whole group so that you can use "item" '
	DB	'functions such as IsItemHovered()/IsItemActive() or SameLine('
	DB	') etc. on the whole group.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LCLFDFOL@Groups?$AA@
CONST	SEGMENT
??_C@_06LCLFDFOL@Groups?$AA@ DB 'Groups', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KBPNIDDB@Layout?1Groups?$AA@
CONST	SEGMENT
??_C@_0O@KBPNIDDB@Layout?1Groups?$AA@ DB 'Layout/Groups', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03ELMLMPLG@Box?$AA@
CONST	SEGMENT
??_C@_03ELMLMPLG@Box?$AA@ DB 'Box', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EBMAGHCE@Manual?5wrapping?3?$AA@
CONST	SEGMENT
??_C@_0BB@EBMAGHCE@Manual?5wrapping?3?$AA@ DB 'Manual wrapping:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@EDHPDNEN@Layout?1Basic?5Horizontal?5Layout?1M@
CONST	SEGMENT
??_C@_0CP@EDHPDNEN@Layout?1Basic?5Horizontal?5Layout?1M@ DB 'Layout/Basic'
	DB	' Horizontal Layout/Manual wrapping', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FHEEJDEE@A?$AA@
CONST	SEGMENT
??_C@_01FHEEJDEE@A?$AA@ DB 'A', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BAJJENJB@Layout?1Basic?5Horizontal?5Layout?1D@
CONST	SEGMENT
??_C@_0CF@BAJJENJB@Layout?1Basic?5Horizontal?5Layout?1D@ DB 'Layout/Basic'
	DB	' Horizontal Layout/Dummy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHPCMELK@Lists?3?$AA@
CONST	SEGMENT
??_C@_06OHPCMELK@Lists?3?$AA@ DB 'Lists:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01POHCFINO@Z?$AA@
CONST	SEGMENT
??_C@_01POHCFINO@Z?$AA@ DB 'Z', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NFFPALBN@Y?$AA@
CONST	SEGMENT
??_C@_01NFFPALBN@Y?$AA@ DB 'Y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MMEEDKFM@X?$AA@
CONST	SEGMENT
??_C@_01MMEEDKFM@X?$AA@ DB 'X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04NKJFLIBG@Rich?$AA@
CONST	SEGMENT
??_C@_04NKJFLIBG@Rich?$AA@ DB 'Rich', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HLOHLKJH@Is?$AA@
CONST	SEGMENT
??_C@_02HLOHLKJH@Is?$AA@ DB 'Is', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MNPBPLDE@Tailor?$AA@
CONST	SEGMENT
??_C@_06MNPBPLDE@Tailor?$AA@ DB 'Tailor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02IGABPKMB@My?$AA@
CONST	SEGMENT
??_C@_02IGABPKMB@My?$AA@ DB 'My', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@MGOPNFDK@Layout?1Basic?5Horizontal?5Layout?1S@
CONST	SEGMENT
??_C@_0CP@MGOPNFDK@Layout?1Basic?5Horizontal?5Layout?1S@ DB 'Layout/Basic'
	DB	' Horizontal Layout/SameLine (more)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OJEOCJOL@x?$DN300?$AA@
CONST	SEGMENT
??_C@_05OJEOCJOL@x?$DN300?$AA@ DB 'x=300', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EFIMCDIL@x?$DN150?$AA@
CONST	SEGMENT
??_C@_05EFIMCDIL@x?$DN150?$AA@ DB 'x=150', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KDGBBGOD@Aligned?$AA@
CONST	SEGMENT
??_C@_07KDGBBGOD@Aligned?$AA@ DB 'Aligned', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@PNPLOBCG@Layout?1Basic?5Horizontal?5Layout?1S@
CONST	SEGMENT
??_C@_0DG@PNPLOBCG@Layout?1Basic?5Horizontal?5Layout?1S@ DB 'Layout/Basic'
	DB	' Horizontal Layout/SameLine (with offset)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FOPDMCKC@can?5fit?5within?5a?5text?5block?4?$AA@
CONST	SEGMENT
??_C@_0BN@FOPDMCKC@can?5fit?5within?5a?5text?5block?4?$AA@ DB 'can fit wi'
	DB	'thin a text block.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DOOOCPOJ@Like?5this?5one?$AA@
CONST	SEGMENT
??_C@_0O@DOOOCPOJ@Like?5this?5one?$AA@ DB 'Like this one', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JIDOKED@Small?5buttons?$AA@
CONST	SEGMENT
??_C@_0O@JIDOKED@Small?5buttons?$AA@ DB 'Small buttons', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IAINFGJF@Corniflower?$AA@
CONST	SEGMENT
??_C@_0M@IAINFGJF@Corniflower?$AA@ DB 'Corniflower', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PEKJFFJL@Normal?5buttons?$AA@
CONST	SEGMENT
??_C@_0P@PEKJFFJL@Normal?5buttons?$AA@ DB 'Normal buttons', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BBDLDECN@More?5spacing?3?5Hello?$AA@
CONST	SEGMENT
??_C@_0BE@BBDLDECN@More?5spacing?3?5Hello?$AA@ DB 'More spacing: Hello', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CPONELNL@Two?5items?3?5Hello?$AA@
CONST	SEGMENT
??_C@_0BB@CPONELNL@Two?5items?3?5Hello?$AA@ DB 'Two items: Hello', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JJPKKMMM@Layout?1Basic?5Horizontal?5Layout?1S@
CONST	SEGMENT
??_C@_0CI@JJPKKMMM@Layout?1Basic?5Horizontal?5Layout?1S@ DB 'Layout/Basic'
	DB	' Horizontal Layout/SameLine', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@GPJJJDFK@?$CIUse?5ImGui?3?3SameLine?$CI?$CJ?5to?5keep?5a@
CONST	SEGMENT
??_C@_0FA@GPJJJDFK@?$CIUse?5ImGui?3?3SameLine?$CI?$CJ?5to?5keep?5a@ DB '('
	DB	'Use ImGui::SameLine() to keep adding items to the right of th'
	DB	'e preceding item)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MLGIMKHF@Basic?5Horizontal?5Layout?$AA@
CONST	SEGMENT
??_C@_0BI@MLGIMKHF@Basic?5Horizontal?5Layout?$AA@ DB 'Basic Horizontal La'
	DB	'yout', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OIAKENPD@Layout?1Basic?5Horizontal?5Layout?$AA@
CONST	SEGMENT
??_C@_0BP@OIAKENPD@Layout?1Basic?5Horizontal?5Layout?$AA@ DB 'Layout/Basi'
	DB	'c Horizontal Layout', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IIGMAMOL@float?5?$CIindented?$CJ?$CD?$CD5b?$AA@
CONST	SEGMENT
??_C@_0BF@IIGMAMOL@float?5?$CIindented?$CJ?$CD?$CD5b?$AA@ DB 'float (inde'
	DB	'nted)##5b', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09LOBKLHLF@?$CD?$CDfloat5a?$AA@
CONST	SEGMENT
??_C@_09LOBKLHLF@?$CD?$CDfloat5a?$AA@ DB '##float5a', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CLIHJLDF@Align?5to?5right?5edge?$AA@
CONST	SEGMENT
??_C@_0BE@CLIHJLDF@Align?5to?5right?5edge?$AA@ DB 'Align to right edge', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HIOADNAC@SetNextItemWidth?1PushItemWidth?$CI?9@
CONST	SEGMENT
??_C@_0CJ@HIOADNAC@SetNextItemWidth?1PushItemWidth?$CI?9@ DB 'SetNextItem'
	DB	'Width/PushItemWidth(-FLT_MIN)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IJKOGGNM@float?5?$CIindented?$CJ?$CD?$CD4b?$AA@
CONST	SEGMENT
??_C@_0BF@IJKOGGNM@float?5?$CIindented?$CJ?$CD?$CD4b?$AA@ DB 'float (inde'
	DB	'nted)##4b', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09KFAAGJDB@float?$CD?$CD4a?$AA@
CONST	SEGMENT
??_C@_09KFAAGJDB@float?$CD?$CD4a?$AA@ DB 'float##4a', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JKFCPAHG@Align?5to?5right?5edge?5minus?5half?$AA@
CONST	SEGMENT
??_C@_0BP@JKFCPAHG@Align?5to?5right?5edge?5minus?5half?$AA@ DB 'Align to '
	DB	'right edge minus half', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@PNELNOAD@SetNextItemWidth?1PushItemWidth?$CI?9@
CONST	SEGMENT
??_C@_0EC@PNELNOAD@SetNextItemWidth?1PushItemWidth?$CI?9@ DB 'SetNextItem'
	DB	'Width/PushItemWidth(-GetContentRegionAvail().x * 0.5f)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IMOBHAFJ@float?5?$CIindented?$CJ?$CD?$CD3b?$AA@
CONST	SEGMENT
??_C@_0BF@IMOBHAFJ@float?5?$CIindented?$CJ?$CD?$CD3b?$AA@ DB 'float (inde'
	DB	'nted)##3b', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09KAEPHPLE@float?$CD?$CD3a?$AA@
CONST	SEGMENT
??_C@_09KAEPHPLE@float?$CD?$CD3a?$AA@ DB 'float##3a', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@LHEEJHHB@Half?5of?5available?5width?4?6?$CI?$HO?5righ@
CONST	SEGMENT
??_C@_0EK@LHEEJHHB@Half?5of?5available?5width?4?6?$CI?$HO?5righ@ DB 'Half'
	DB	' of available width.', 0aH, '(~ right-cursor_pos)', 0aH, '(wo'
	DB	'rks within a column set)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@LHGGMOLL@SetNextItemWidth?1PushItemWidth?$CIG@
CONST	SEGMENT
??_C@_0EB@LHGGMOLL@SetNextItemWidth?1PushItemWidth?$CIG@ DB 'SetNextItemW'
	DB	'idth/PushItemWidth(GetContentRegionAvail().x * 0.5f)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@INCDBKGO@float?5?$CIindented?$CJ?$CD?$CD2b?$AA@
CONST	SEGMENT
??_C@_0BF@INCDBKGO@float?5?$CIindented?$CJ?$CD?$CD2b?$AA@ DB 'float (inde'
	DB	'nted)##2b', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09KBINBFID@float?$CD?$CD2a?$AA@
CONST	SEGMENT
??_C@_09KBINBFID@float?$CD?$CD2a?$AA@ DB 'float##2a', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IEOHBCBL@Align?5to?5right?5edge?5minus?5100?$AA@
CONST	SEGMENT
??_C@_0BO@IEOHBCBL@Align?5to?5right?5edge?5minus?5100?$AA@ DB 'Align to r'
	DB	'ight edge minus 100', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FHLMHJP@SetNextItemWidth?1PushItemWidth?$CI?9@
CONST	SEGMENT
??_C@_0CF@FHLMHJP@SetNextItemWidth?1PushItemWidth?$CI?9@ DB 'SetNextItemW'
	DB	'idth/PushItemWidth(-100)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IPGFKEDH@float?5?$CIindented?$CJ?$CD?$CD1b?$AA@
CONST	SEGMENT
??_C@_0BF@IPGFKEDH@float?5?$CIindented?$CJ?$CD?$CD1b?$AA@ DB 'float (inde'
	DB	'nted)##1b', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09IIOGPIBJ@float?$CD?$CD1b?$AA@
CONST	SEGMENT
??_C@_09IIOGPIBJ@float?$CD?$CD1b?$AA@ DB 'float##1b', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BANGKKCL@Fixed?5width?4?$AA@
CONST	SEGMENT
??_C@_0N@BANGKKCL@Fixed?5width?4?$AA@ DB 'Fixed width.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LPIOKAFF@SetNextItemWidth?1PushItemWidth?$CI1@
CONST	SEGMENT
??_C@_0CE@LPIOKAFF@SetNextItemWidth?1PushItemWidth?$CI1@ DB 'SetNextItemW'
	DB	'idth/PushItemWidth(100)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LMCIIFLK@Show?5indented?5items?$AA@
CONST	SEGMENT
??_C@_0BE@LMCIIFLK@Show?5indented?5items?$AA@ DB 'Show indented items', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PINHNBJ@Widgets?5Width?$AA@
CONST	SEGMENT
??_C@_0O@PINHNBJ@Widgets?5Width?$AA@ DB 'Widgets Width', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OGICDKID@Layout?1Widgets?5Width?$AA@
CONST	SEGMENT
??_C@_0BF@OGICDKID@Layout?1Widgets?5Width?$AA@ DB 'Layout/Widgets Width', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@EENCLFAL@Rect?5of?5child?5window?5is?3?5?$CI?$CF?40f?0?$CF@
CONST	SEGMENT
??_C@_0DB@EENCLFAL@Rect?5of?5child?5window?5is?3?5?$CI?$CF?40f?0?$CF@ DB 'R'
	DB	'ect of child window is: (%.0f,%.0f) (%.0f,%.0f)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EMOADGAG@Hovered?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0M@EMOADGAG@Hovered?3?5?$CFd?$AA@ DB 'Hovered: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NPCHMHMN@Some?5test?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0N@NPCHMHMN@Some?5test?5?$CFd?$AA@ DB 'Some test %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03PADCEAKC@Red?$AA@
CONST	SEGMENT
??_C@_03PADCEAKC@Red?$AA@ DB 'Red', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JECJNGEB@Offset?5X?$AA@
CONST	SEGMENT
??_C@_08JECJNGEB@Offset?5X?$AA@ DB 'Offset X', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHGLKFFN@?$CF03d?$AA@
CONST	SEGMENT
??_C@_04OHGLKFFN@?$CF03d?$AA@ DB '%03d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBFGMDPP@ChildR?$AA@
CONST	SEGMENT
??_C@_06NBFGMDPP@ChildR?$AA@ DB 'ChildR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NIHPFDMO@?$CF04d?3?5scrollable?5region?$AA@
CONST	SEGMENT
??_C@_0BI@NIHPFDMO@?$CF04d?3?5scrollable?5region?$AA@ DB '%04d: scrollabl'
	DB	'e region', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06FBHPMCA@ChildL?$AA@
CONST	SEGMENT
??_C@_06FBHPMCA@ChildL?$AA@ DB 'ChildL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PGMIMFJH@Disable?5Menu?$AA@
CONST	SEGMENT
??_C@_0N@PGMIMFJH@Disable?5Menu?$AA@ DB 'Disable Menu', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DLAKMPBE@Disable?5Mouse?5Wheel?$AA@
CONST	SEGMENT
??_C@_0BE@DLAKMPBE@Disable?5Mouse?5Wheel?$AA@ DB 'Disable Mouse Wheel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GO@NHEDEMHF@Use?5child?5windows?5to?5begin?5into?5@
CONST	SEGMENT
??_C@_0GO@NHEDEMHF@Use?5child?5windows?5to?5begin?5into?5@ DB 'Use child '
	DB	'windows to begin into a self-contained independent scrolling/'
	DB	'clipping regions within a host window.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CCLKLEED@Child?5windows?$AA@
CONST	SEGMENT
??_C@_0O@CCLKLEED@Child?5windows?$AA@ DB 'Child windows', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MLLFPDNJ@Layout?1Child?5windows?$AA@
CONST	SEGMENT
??_C@_0BF@MLLFPDNJ@Layout?1Child?5windows?$AA@ DB 'Layout/Child windows', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JPJJCKFL@Layout?5?$CG?5Scrolling?$AA@
CONST	SEGMENT
??_C@_0BD@JPJJCKFL@Layout?5?$CG?5Scrolling?$AA@ DB 'Layout & Scrolling', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KMHOJANB@Layout?$AA@
CONST	SEGMENT
??_C@_06KMHOJANB@Layout?$AA@ DB 'Layout', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA DD 09d8H ; `ShowDemoWindowLayout'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OLAOGCLC@hello?0?5world?$AA@
CONST	SEGMENT
??_C@_0N@OLAOGCLC@hello?0?5world?$AA@ DB 'hello, world', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05NIADHECG@abc?4h?$AA@
CONST	SEGMENT
??_C@_05NIADHECG@abc?4h?$AA@ DB 'abc.h', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PNDMNJJI@ccc2?4cpp?$AA@
CONST	SEGMENT
??_C@_08PNDMNJJI@ccc2?4cpp?$AA@ DB 'ccc2.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IAJKMGPB@bbb2?4cpp?$AA@
CONST	SEGMENT
??_C@_08IAJKMGPB@bbb2?4cpp?$AA@ DB 'bbb2.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHAOHEK@aaa2?4cpp?$AA@
CONST	SEGMENT
??_C@_08GHAOHEK@aaa2?4cpp?$AA@ DB 'aaa2.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMKLMKNK@ccc1?4c?$AA@
CONST	SEGMENT
??_C@_06LMKLMKNK@ccc1?4c?$AA@ DB 'ccc1.c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OMOADLHL@bbb1?4c?$AA@
CONST	SEGMENT
??_C@_06OMOADLHL@bbb1?4c?$AA@ DB 'bbb1.c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMDMCJJI@aaa1?4c?$AA@
CONST	SEGMENT
??_C@_06BMDMCJJI@aaa1?4c?$AA@ DB 'aaa1.c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HPCLFOON@Filter?5?$CIinc?0?9exc?$CJ?$AA@
CONST	SEGMENT
??_C@_0BC@HPCLFOON@Filter?5?$CIinc?0?9exc?$CJ?$AA@ DB 'Filter (inc,-exc)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0LH@KANOFBLE@Filter?5usage?3?6?5?5?$CC?$CC?5?5?5?5?5?5?5?5?5displ@
CONST	SEGMENT
??_C@_0LH@KANOFBLE@Filter?5usage?3?6?5?5?$CC?$CC?5?5?5?5?5?5?5?5?5displ@ DB 'F'
	DB	'ilter usage:', 0aH, '  ""         display all lines', 0aH, ' '
	DB	' "xxx"      display lines containing "xxx"', 0aH, '  "xxx,yyy'
	DB	'"  display lines containing "xxx" or "yyy"', 0aH, '  "-xxx"  '
	DB	'   hide lines containing "xxx"', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@CDJPIFKB@Not?5a?5widget?5per?9se?0?5but?5ImGuiTe@
CONST	SEGMENT
??_C@_0GC@CDJPIFKB@Not?5a?5widget?5per?9se?0?5but?5ImGuiTe@ DB 'Not a wid'
	DB	'get per-se, but ImGuiTextFilter is a helper to perform simple'
	DB	' filtering on text strings.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MINJPGJD@Text?5Filter?$AA@
CONST	SEGMENT
??_C@_0M@MINJPGJD@Text?5Filter?$AA@ DB 'Text Filter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EPEANCCD@Widgets?1Text?5Filter?$AA@
CONST	SEGMENT
??_C@_0BE@EPEANCCD@Widgets?1Text?5Filter?$AA@ DB 'Widgets/Text Filter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@FEKDLMNJ@Demonstrate?5using?5BeginDisabled?$CI@
CONST	SEGMENT
??_C@_0EF@FEKDLMNJ@Demonstrate?5using?5BeginDisabled?$CI@ DB 'Demonstrate'
	DB	' using BeginDisabled()/EndDisabled() across this section.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CHNIACDP@Disable?5entire?5section?5above?$AA@
CONST	SEGMENT
??_C@_0BN@CHNIACDP@Disable?5entire?5section?5above?$AA@ DB 'Disable entir'
	DB	'e section above', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LDGJBBHL@Disable?5block?$AA@
CONST	SEGMENT
??_C@_0O@LDGJBBHL@Disable?5block?$AA@ DB 'Disable block', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GMADNJLN@Widgets?1Disable?5Block?$AA@
CONST	SEGMENT
??_C@_0BG@GMADNJLN@Widgets?1Disable?5Block?$AA@ DB 'Widgets/Disable Block'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0HP@CKBHJIAM@IsItemHovered?$CI?$CJ?5after?5begin?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0HP@CKBHJIAM@IsItemHovered?$CI?$CJ?5after?5begin?5?$DN?5?$CFd@ DB 'I'
	DB	'sItemHovered() after begin = %d (== is title bar hovered)', 0aH
	DB	'IsItemActive() after begin = %d (== is window being clicked/m'
	DB	'oved)', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05LGELBCGM@Close?$AA@
CONST	SEGMENT
??_C@_05LGELBCGM@Close?$AA@ DB 'Close', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MFKNMHP@Title?5bar?5Hovered?1Active?5tests?$AA@
CONST	SEGMENT
??_C@_0BP@MFKNMHP@Title?5bar?5Hovered?1Active?5tests?$AA@ DB 'Title bar H'
	DB	'overed/Active tests', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@OKFMLKNH@Hovered?1Active?5tests?5after?5Begin@
CONST	SEGMENT
??_C@_0DJ@OKFMLKNH@Hovered?1Active?5tests?5after?5Begin@ DB 'Hovered/Acti'
	DB	've tests after Begin() for title bar testing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@JLFLAMNL@This?5is?5another?5child?5window?5for@
CONST	SEGMENT
??_C@_0EB@JLFLAMNL@This?5is?5another?5child?5window?5for@ DB 'This is ano'
	DB	'ther child window for testing the _ChildWindows flag.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GPGNDLEK@child?$AA@
CONST	SEGMENT
??_C@_05GPGNDLEK@child?$AA@ DB 'child', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BPL@PECCPJNF@IsWindowHovered?$CI?$CJ?5?$DN?5?$CFd?6IsWindowH@
CONST	SEGMENT
??_C@_0BPL@PECCPJNF@IsWindowHovered?$CI?$CJ?5?$DN?5?$CFd?6IsWindowH@ DB 'I'
	DB	'sWindowHovered() = %d', 0aH, 'IsWindowHovered(_AllowWhenBlock'
	DB	'edByPopup) = %d', 0aH, 'IsWindowHovered(_AllowWhenBlockedByAc'
	DB	'tiveItem) = %d', 0aH, 'IsWindowHovered(_ChildWindows) = %d', 0aH
	DB	'IsWindowHovered(_ChildWindows|_NoPopupHierarchy) = %d', 0aH, 'I'
	DB	'sWindowHovered(_ChildWindows|_RootWindow) = %d', 0aH, 'IsWind'
	DB	'owHovered(_ChildWindows|_RootWindow|_NoPopupHierarchy) = %d', 0aH
	DB	'IsWindowHovered(_RootWindow) = %d', 0aH, 'IsWindowHovered(_Ro'
	DB	'otWindow|_NoPopupHierarchy) = %d', 0aH, 'IsWindowHovered(_Chi'
	DB	'ldWindows|_AllowWhenBlockedByPopup) = %d', 0aH, 'IsWindowHove'
	DB	'red(_AnyWindow) = %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BFL@IGCCLIMC@IsWindowFocused?$CI?$CJ?5?$DN?5?$CFd?6IsWindowF@
CONST	SEGMENT
??_C@_0BFL@IGCCLIMC@IsWindowFocused?$CI?$CJ?5?$DN?5?$CFd?6IsWindowF@ DB 'I'
	DB	'sWindowFocused() = %d', 0aH, 'IsWindowFocused(_ChildWindows) '
	DB	'= %d', 0aH, 'IsWindowFocused(_ChildWindows|_NoPopupHierarchy)'
	DB	' = %d', 0aH, 'IsWindowFocused(_ChildWindows|_RootWindow) = %d'
	DB	0aH, 'IsWindowFocused(_ChildWindows|_RootWindow|_NoPopupHierar'
	DB	'chy) = %d', 0aH, 'IsWindowFocused(_RootWindow) = %d', 0aH, 'I'
	DB	'sWindowFocused(_RootWindow|_NoPopupHierarchy) = %d', 0aH, 'Is'
	DB	'WindowFocused(_AnyWindow) = %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KCHHLPPE@outer_child?$AA@
CONST	SEGMENT
??_C@_0M@KCHHLPPE@outer_child?$AA@ DB 'outer_child', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@HEEHLIKF@Embed?5everything?5inside?5a?5child?5@
CONST	SEGMENT
??_C@_0EF@HEEHLIKF@Embed?5everything?5inside?5a?5child?5@ DB 'Embed every'
	DB	'thing inside a child window for testing _RootWindow flag.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@GHICHHHH@Querying?5Window?5Status?5?$CIFocused?1@
CONST	SEGMENT
??_C@_0CO@GHICHHHH@Querying?5Window?5Status?5?$CIFocused?1@ DB 'Querying '
	DB	'Window Status (Focused/Hovered etc.)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@IOBCHNLH@Widgets?1Querying?5Window?5Status?5?$CI@
CONST	SEGMENT
??_C@_0DG@IOBCHNLH@Widgets?1Querying?5Window?5Status?5?$CI@ DB 'Widgets/Q'
	DB	'uerying Window Status (Focused,Hovered etc.)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@DPFHCGHD@This?5widget?5is?5only?5here?5to?5be?5a@
CONST	SEGMENT
??_C@_0GH@DPFHCGHD@This?5widget?5is?5only?5here?5to?5be?5a@ DB 'This widg'
	DB	'et is only here to be able to tab-out of the widgets above an'
	DB	'd see e.g. Deactivated() status.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OJAIHGIC@unused?$AA@
CONST	SEGMENT
??_C@_06OJAIHGIC@unused?$AA@ DB 'unused', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@FBICNHKB@w?1?5Hovering?5Delay?3?5None?5?$DN?5?$CFd?0?5Fa@
CONST	SEGMENT
??_C@_0DD@FBICNHKB@w?1?5Hovering?5Delay?3?5None?5?$DN?5?$CFd?0?5Fa@ DB 'w'
	DB	'/ Hovering Delay: None = %d, Fast %d, Normal = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CCH@GLOAKFDB@Return?5value?5?$DN?5?$CFd?6IsItemFocused?$CI@
CONST	SEGMENT
??_C@_0CCH@GLOAKFDB@Return?5value?5?$DN?5?$CFd?6IsItemFocused?$CI@ DB 'Re'
	DB	'turn value = %d', 0aH, 'IsItemFocused() = %d', 0aH, 'IsItemHo'
	DB	'vered() = %d', 0aH, 'IsItemHovered(_AllowWhenBlockedByPopup) '
	DB	'= %d', 0aH, 'IsItemHovered(_AllowWhenBlockedByActiveItem) = %'
	DB	'd', 0aH, 'IsItemHovered(_AllowWhenOverlapped) = %d', 0aH, 'Is'
	DB	'ItemHovered(_AllowWhenDisabled) = %d', 0aH, 'IsItemHovered(_R'
	DB	'ectOnly) = %d', 0aH, 'IsItemActive() = %d', 0aH, 'IsItemEdite'
	DB	'd() = %d', 0aH, 'IsItemActivated() = %d', 0aH, 'IsItemDeactiv'
	DB	'ated() = %d', 0aH, 'IsItemDeactivatedAfterEdit() = %d', 0aH, 'I'
	DB	'sItemVisible() = %d', 0aH, 'IsItemClicked() = %d', 0aH, 'IsIt'
	DB	'emToggledOpen() = %d', 0aH, 'GetItemRectMin() = (%.1f, %.1f)', 0aH
	DB	'GetItemRectMax() = (%.1f, %.1f)', 0aH, 'GetItemRectSize() = ('
	DB	'%.1f, %.1f)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DECMNPJF@ITEM?3?5ListBox?$AA@
CONST	SEGMENT
??_C@_0O@DECMNPJF@ITEM?3?5ListBox?$AA@ DB 'ITEM: ListBox', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JPKNJLGM@ITEM?3?5Combo?$AA@
CONST	SEGMENT
??_C@_0M@JPKNJLGM@ITEM?3?5Combo?$AA@ DB 'ITEM: Combo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@BOEHHDDC@ITEM?3?5TreeNode?5w?1?5ImGuiTreeNodeF@
CONST	SEGMENT
??_C@_0DH@BOEHHDDC@ITEM?3?5TreeNode?5w?1?5ImGuiTreeNodeF@ DB 'ITEM: TreeN'
	DB	'ode w/ ImGuiTreeNodeFlags_OpenOnDoubleClick', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LCFKNGDN@ITEM?3?5TreeNode?$AA@
CONST	SEGMENT
??_C@_0P@LCFKNGDN@ITEM?3?5TreeNode?$AA@ DB 'ITEM: TreeNode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DJLFKAPF@ITEM?3?5MenuItem?$AA@
CONST	SEGMENT
??_C@_0P@DJLFKAPF@ITEM?3?5MenuItem?$AA@ DB 'ITEM: MenuItem', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IOLJAECH@ITEM?3?5Selectable?$AA@
CONST	SEGMENT
??_C@_0BB@IOLJAECH@ITEM?3?5Selectable?$AA@ DB 'ITEM: Selectable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GFGJJDD@ITEM?3?5ColorEdit4?$AA@
CONST	SEGMENT
??_C@_0BB@GFGJJDD@ITEM?3?5ColorEdit4?$AA@ DB 'ITEM: ColorEdit4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OHLBICCN@ITEM?3?5InputFloat3?$AA@
CONST	SEGMENT
??_C@_0BC@OHLBICCN@ITEM?3?5InputFloat3?$AA@ DB 'ITEM: InputFloat3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LGHPELBI@ITEM?3?5InputFloat?$AA@
CONST	SEGMENT
??_C@_0BB@LGHPELBI@ITEM?3?5InputFloat?$AA@ DB 'ITEM: InputFloat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PFKMLMFF@ITEM?3?5InputTextMultiline?$AA@
CONST	SEGMENT
??_C@_0BJ@PFKMLMFF@ITEM?3?5InputTextMultiline?$AA@ DB 'ITEM: InputTextMul'
	DB	'tiline', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HPKEIJD@ITEM?3?5InputText?$AA@
CONST	SEGMENT
??_C@_0BA@HPKEIJD@ITEM?3?5InputText?$AA@ DB 'ITEM: InputText', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HBFCOBHP@ITEM?3?5SliderFloat?$AA@
CONST	SEGMENT
??_C@_0BC@HBFCOBHP@ITEM?3?5SliderFloat?$AA@ DB 'ITEM: SliderFloat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EJKLMMCP@ITEM?3?5Checkbox?$AA@
CONST	SEGMENT
??_C@_0P@EJKLMMCP@ITEM?3?5Checkbox?$AA@ DB 'ITEM: Checkbox', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KDFNBBDI@ITEM?3?5Button?$AA@
CONST	SEGMENT
??_C@_0N@KDFNBBDI@ITEM?3?5Button?$AA@ DB 'ITEM: Button', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HEHKMKDF@ITEM?3?5Text?$AA@
CONST	SEGMENT
??_C@_0L@HEHKMKDF@ITEM?3?5Text?$AA@ DB 'ITEM: Text', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FAHHGPEA@Item?5Disabled?$AA@
CONST	SEGMENT
??_C@_0O@FAHHGPEA@Item?5Disabled?$AA@ DB 'Item Disabled', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0MD@CGCEADDG@Testing?5how?5various?5types?5of?5ite@
CONST	SEGMENT
??_C@_0MD@CGCEADDG@Testing?5how?5various?5types?5of?5ite@ DB 'Testing how'
	DB	' various types of items are interacting with the IsItemXXX fu'
	DB	'nctions. Note that the bool return value of most ImGui functi'
	DB	'on is generally equivalent to calling ImGui::IsItemHovered().'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09DBIMNOFJ@Item?5Type?$AA@
CONST	SEGMENT
??_C@_09DBIMNOFJ@Item?5Type?$AA@ DB 'Item Type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OOFFCIDH@ListBox?$AA@
CONST	SEGMENT
??_C@_07OOFFCIDH@ListBox?$AA@ DB 'ListBox', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BMPDCCKO@TreeNode?5?$CIw?1?5double?9click?$CJ?$AA@
CONST	SEGMENT
??_C@_0BL@BMPDCCKO@TreeNode?5?$CIw?1?5double?9click?$CJ?$AA@ DB 'TreeNode'
	DB	' (w/ double-click)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IKFIGNAO@TreeNode?$AA@
CONST	SEGMENT
??_C@_08IKFIGNAO@TreeNode?$AA@ DB 'TreeNode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BLHBLMG@MenuItem?$AA@
CONST	SEGMENT
??_C@_08BLHBLMG@MenuItem?$AA@ DB 'MenuItem', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CGGBDDBB@Selectable?$AA@
CONST	SEGMENT
??_C@_0L@CGGBDDBB@Selectable?$AA@ DB 'Selectable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KOIOKOAF@ColorEdit4?$AA@
CONST	SEGMENT
??_C@_0L@KOIOKOAF@ColorEdit4?$AA@ DB 'ColorEdit4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CIKDMPID@InputFloat3?$AA@
CONST	SEGMENT
??_C@_0M@CIKDMPID@InputFloat3?$AA@ DB 'InputFloat3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BOKHHMCO@InputFloat?$AA@
CONST	SEGMENT
??_C@_0L@BOKHHMCO@InputFloat?$AA@ DB 'InputFloat', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GFPADHGG@InputTextMultiline?$AA@
CONST	SEGMENT
??_C@_0BD@GFPADHGG@InputTextMultiline?$AA@ DB 'InputTextMultiline', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LIBCCLDO@InputText?$AA@
CONST	SEGMENT
??_C@_09LIBCCLDO@InputText?$AA@ DB 'InputText', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LOEAKMNB@SliderFloat?$AA@
CONST	SEGMENT
??_C@_0M@LOEAKMNB@SliderFloat?$AA@ DB 'SliderFloat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HBKJHHBM@Checkbox?$AA@
CONST	SEGMENT
??_C@_08HBKJHHBM@Checkbox?$AA@ DB 'Checkbox', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MDBANHDM@Button?5?$CIw?1?5repeat?$CJ?$AA@
CONST	SEGMENT
??_C@_0BD@MDBANHDM@Button?5?$CIw?1?5repeat?$CJ?$AA@ DB 'Button (w/ repeat'
	DB	')', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@BNAEMHFC@Querying?5Item?5Status?5?$CIEdited?1Act@
CONST	SEGMENT
??_C@_0DC@BNAEMHFC@Querying?5Item?5Status?5?$CIEdited?1Act@ DB 'Querying '
	DB	'Item Status (Edited/Active/Hovered etc.)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@EFBKDNNE@Widgets?1Querying?5Item?5Status?5?$CIEd@
CONST	SEGMENT
??_C@_0DK@EFBKDNNE@Widgets?1Querying?5Item?5Status?5?$CIEd@ DB 'Widgets/Q'
	DB	'uerying Item Status (Edited,Active,Hovered etc.)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0IF@PPHKDPML@We?5don?8t?5use?5the?5drag?5and?5drop?5a@
CONST	SEGMENT
??_C@_0IF@PPHKDPML@We?5don?8t?5use?5the?5drag?5and?5drop?5a@ DB 'We don'''
	DB	't use the drag and drop api at all here! Instead we query whe'
	DB	'n the item is held but not hovered, and order items according'
	DB	'ly.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DIEMEPOM@Drag?5to?5reorder?5items?5?$CIsimple?$CJ?$AA@
CONST	SEGMENT
??_C@_0BP@DIEMEPOM@Drag?5to?5reorder?5items?5?$CIsimple?$CJ?$AA@ DB 'Drag'
	DB	' to reorder items (simple)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@EMDCONLH@Widgets?1Drag?5and?5Drop?1Drag?5to?5re@
CONST	SEGMENT
??_C@_0DF@EMDCONLH@Widgets?1Drag?5and?5Drop?1Drag?5to?5re@ DB 'Widgets/Dr'
	DB	'ag and Drop/Drag to reorder items (simple)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@PPPBDLLH@?$AAp?$AAa?$AAy?$AAl?$AAo?$AAa?$AAd?$AA?9?$AA?$DO?$AAD?$AAa?$AAt?$AAa?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ@
CONST	SEGMENT
??_C@_1EC@PPPBDLLH@?$AAp?$AAa?$AAy?$AAl?$AAo?$AAa?$AAd?$AA?9?$AA?$DO?$AAD?$AAa?$AAt?$AAa?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ@ DB 'p'
	DB	00H, 'a', 00H, 'y', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H
	DB	'-', 00H, '>', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, 'S'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f'
	DB	00H, '(', 00H, 'i', 00H, 'n', 00H, 't', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MIGHAHCG@Swap?5?$CFs?$AA@
CONST	SEGMENT
??_C@_07MIGHAHCG@Swap?5?$CFs?$AA@ DB 'Swap %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07EDLENMEH@Move?5?$CFs?$AA@
CONST	SEGMENT
??_C@_07EDLENMEH@Move?5?$CFs?$AA@ DB 'Move %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CFHHFHOL@Copy?5?$CFs?$AA@
CONST	SEGMENT
??_C@_07CFHHFHOL@Copy?5?$CFs?$AA@ DB 'Copy %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IBJLLBID@DND_DEMO_CELL?$AA@
CONST	SEGMENT
??_C@_0O@IBJLLBID@DND_DEMO_CELL?$AA@ DB 'DND_DEMO_CELL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NGKMPNDN@Swap?$AA@
CONST	SEGMENT
??_C@_04NGKMPNDN@Swap?$AA@ DB 'Swap', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LCANPIEP@Move?$AA@
CONST	SEGMENT
??_C@_04LCANPIEP@Move?$AA@ DB 'Move', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OPMHGHMB@Copy?$AA@
CONST	SEGMENT
??_C@_04OPMHGHMB@Copy?$AA@ DB 'Copy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EBEBHJBF@Drag?5and?5drop?5to?5copy?1swap?5items@
CONST	SEGMENT
??_C@_0CB@EBEBHJBF@Drag?5and?5drop?5to?5copy?1swap?5items@ DB 'Drag and d'
	DB	'rop to copy/swap items', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@ELLGHBBE@Widgets?1Drag?5and?5drop?1Copy?9swap?5@
CONST	SEGMENT
??_C@_0CG@ELLGHBBE@Widgets?1Drag?5and?5drop?1Copy?9swap?5@ DB 'Widgets/Dr'
	DB	'ag and drop/Copy-swap items', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BONKBAOB@You?5can?5drag?5from?5the?5color?5squa@
CONST	SEGMENT
??_C@_0CF@BONKBAOB@You?5can?5drag?5from?5the?5color?5squa@ DB 'You can dr'
	DB	'ag from the color squares.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EPFBCHH@Drag?5and?5drop?5in?5standard?5widget@
CONST	SEGMENT
??_C@_0CC@EPFBCHH@Drag?5and?5drop?5in?5standard?5widget@ DB 'Drag and dro'
	DB	'p in standard widgets', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JCNBENHC@Widgets?1Drag?5and?5drop?1Standard?5w@
CONST	SEGMENT
??_C@_0CH@JCNBENHC@Widgets?1Drag?5and?5drop?1Standard?5w@ DB 'Widgets/Dra'
	DB	'g and drop/Standard widgets', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NPGBLOMK@Drag?5and?5Drop?$AA@
CONST	SEGMENT
??_C@_0O@NPGBLOMK@Drag?5and?5Drop?$AA@ DB 'Drag and Drop', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MGGGFMDO@Widgets?1Drag?5and?5drop?$AA@
CONST	SEGMENT
??_C@_0BG@MGGGFMDO@Widgets?1Drag?5and?5drop?$AA@ DB 'Widgets/Drag and dro'
	DB	'p', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08OPMLCCJJ@?$CF?42f?6sec?$AA@
CONST	SEGMENT
??_C@_08OPMLCCJJ@?$CF?42f?6sec?$AA@ DB '%.2f', 0aH, 'sec', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04CMMEDAHA@set3?$AA@
CONST	SEGMENT
??_C@_04CMMEDAHA@set3?$AA@ DB 'set3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DFNPABDB@set2?$AA@
CONST	SEGMENT
??_C@_04DFNPABDB@set2?$AA@ DB 'set2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CPFCAGPK@?$CD?$CDv?$AA@
CONST	SEGMENT
??_C@_03CPFCAGPK@?$CD?$CDv?$AA@ DB '##v', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BOPCFCPC@set1?$AA@
CONST	SEGMENT
??_C@_04BOPCFCPC@set1?$AA@ DB 'set1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFAJOEB@?$CD?$CDint?$AA@
CONST	SEGMENT
??_C@_05GFAJOEB@?$CD?$CDint?$AA@ DB '##int', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EAIBMPEL@Vertical?5Sliders?$AA@
CONST	SEGMENT
??_C@_0BB@EAIBMPEL@Vertical?5Sliders?$AA@ DB 'Vertical Sliders', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PJBGHCMF@Widgets?1Vertical?5Sliders?$AA@
CONST	SEGMENT
??_C@_0BJ@PJBGHCMF@Widgets?1Vertical?5Sliders?$AA@ DB 'Widgets/Vertical S'
	DB	'liders', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OCBEFNOF@slider?5int4?$AA@
CONST	SEGMENT
??_C@_0M@OCBEFNOF@slider?5int4?$AA@ DB 'slider int4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OINJKJNP@drag?5int4?$AA@
CONST	SEGMENT
??_C@_09OINJKJNP@drag?5int4?$AA@ DB 'drag int4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NMFONJDF@input?5int4?$AA@
CONST	SEGMENT
??_C@_0L@NMFONJDF@input?5int4?$AA@ DB 'input int4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IOGCHDGO@slider?5float4?$AA@
CONST	SEGMENT
??_C@_0O@IOGCHDGO@slider?5float4?$AA@ DB 'slider float4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BBBLJBNP@drag?5float4?$AA@
CONST	SEGMENT
??_C@_0M@BBBLJBNP@drag?5float4?$AA@ DB 'drag float4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OFIPMPAC@input?5float4?$AA@
CONST	SEGMENT
??_C@_0N@OFIPMPAC@input?5float4?$AA@ DB 'input float4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KNFFMLCC@slider?5int3?$AA@
CONST	SEGMENT
??_C@_0M@KNFFMLCC@slider?5int3?$AA@ DB 'slider int3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KHJIDPBI@drag?5int3?$AA@
CONST	SEGMENT
??_C@_09KHJIDPBI@drag?5int3?$AA@ DB 'drag int3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JDBPEPPC@input?5int3?$AA@
CONST	SEGMENT
??_C@_0L@JDBPEPPC@input?5int3?$AA@ DB 'input int3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MBCDOFKJ@slider?5float3?$AA@
CONST	SEGMENT
??_C@_0O@MBCDOFKJ@slider?5float3?$AA@ DB 'slider float3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FOFKAHBI@drag?5float3?$AA@
CONST	SEGMENT
??_C@_0M@FOFKAHBI@drag?5float3?$AA@ DB 'drag float3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LEEOPKGD@slider?5int2?$AA@
CONST	SEGMENT
??_C@_0M@LEEOPKGD@slider?5int2?$AA@ DB 'slider int2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LOIDAOFJ@drag?5int2?$AA@
CONST	SEGMENT
??_C@_09LOIDAOFJ@drag?5int2?$AA@ DB 'drag int2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IKAEHOLD@input?5int2?$AA@
CONST	SEGMENT
??_C@_0L@IKAEHOLD@input?5int2?$AA@ DB 'input int2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NIDINEOI@slider?5float2?$AA@
CONST	SEGMENT
??_C@_0O@NIDINEOI@slider?5float2?$AA@ DB 'slider float2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EHEBDGFJ@drag?5float2?$AA@
CONST	SEGMENT
??_C@_0M@EHEBDGFJ@drag?5float2?$AA@ DB 'drag float2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LDNFGIIE@input?5float2?$AA@
CONST	SEGMENT
??_C@_0N@LDNFGIIE@input?5float2?$AA@ DB 'input float2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ELCHCBAK@Multi?9component?5Widgets?$AA@
CONST	SEGMENT
??_C@_0BI@ELCHCBAK@Multi?9component?5Widgets?$AA@ DB 'Multi-component Wid'
	DB	'gets', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DGAGEKBO@Widgets?1Multi?9component?5Widgets?$AA@
CONST	SEGMENT
??_C@_0CA@DGAGEKBO@Widgets?1Multi?9component?5Widgets?$AA@ DB 'Widgets/Mu'
	DB	'lti-component Widgets', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09CBHJNGLB@input?5u64?$AA@
CONST	SEGMENT
??_C@_09CBHJNGLB@input?5u64?$AA@ DB 'input u64', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EBCIJGN@input?5s64?$AA@
CONST	SEGMENT
??_C@_09EBCIJGN@input?5s64?$AA@ DB 'input s64', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IMJGHEPL@input?5u32?5hex?$AA@
CONST	SEGMENT
??_C@_0O@IMJGHEPL@input?5u32?5hex?$AA@ DB 'input u32 hex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04JIMNDDED@?$CF08X?$AA@
CONST	SEGMENT
??_C@_04JIMNDDED@?$CF08X?$AA@ DB '%08X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HBOILDNM@input?5u32?$AA@
CONST	SEGMENT
??_C@_09HBOILDNM@input?5u32?$AA@ DB 'input u32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EKPJHNHM@input?5s32?5hex?$AA@
CONST	SEGMENT
??_C@_0O@EKPJHNHM@input?5s32?5hex?$AA@ DB 'input s32 hex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04JBNHMKCH@?$CF04X?$AA@
CONST	SEGMENT
??_C@_04JBNHMKCH@?$CF04X?$AA@ DB '%04X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FEIDOMAA@input?5s32?$AA@
CONST	SEGMENT
??_C@_09FEIDOMAA@input?5s32?$AA@ DB 'input s32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09BGAAKCLG@input?5u16?$AA@
CONST	SEGMENT
??_C@_09BGAAKCLG@input?5u16?$AA@ DB 'input u16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DDGLPNGK@input?5s16?$AA@
CONST	SEGMENT
??_C@_09DDGLPNGK@input?5s16?$AA@ DB 'input s16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HCBFNNAP@input?5u8?$AA@
CONST	SEGMENT
??_C@_08HCBFNNAP@input?5u8?$AA@ DB 'input u8', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGJIKBLN@input?5s8?$AA@
CONST	SEGMENT
??_C@_08HGJIKBLN@input?5s8?$AA@ DB 'input s8', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HEADHDLD@Show?5step?5buttons?$AA@
CONST	SEGMENT
??_C@_0BC@HEADHDLD@Show?5step?5buttons?$AA@ DB 'Show step buttons', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HDCHCENJ@Inputs?$AA@
CONST	SEGMENT
??_C@_06HDCHCENJ@Inputs?$AA@ DB 'Inputs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KLDNNLLJ@Widgets?1Data?5Types?1Inputs?$AA@
CONST	SEGMENT
??_C@_0BK@KLDNNLLJ@Widgets?1Data?5Types?1Inputs?$AA@ DB 'Widgets/Data Typ'
	DB	'es/Inputs', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JIDOGABL@slider?5u64?5reverse?$AA@
CONST	SEGMENT
??_C@_0BD@JIDOGABL@slider?5u64?5reverse?$AA@ DB 'slider u64 reverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HHADMFPL@slider?5s64?5reverse?$AA@
CONST	SEGMENT
??_C@_0BD@HHADMFPL@slider?5s64?5reverse?$AA@ DB 'slider s64 reverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OEHHLMBO@slider?5u32?5reverse?$AA@
CONST	SEGMENT
??_C@_0BD@OEHHLMBO@slider?5u32?5reverse?$AA@ DB 'slider u32 reverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LEKBJPO@slider?5s32?5reverse?$AA@
CONST	SEGMENT
??_C@_0BD@LEKBJPO@slider?5s32?5reverse?$AA@ DB 'slider s32 reverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PJJBGKAB@slider?5u8?5reverse?$AA@
CONST	SEGMENT
??_C@_0BC@PJJBGKAB@slider?5u8?5reverse?$AA@ DB 'slider u8 reverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BBCEKAEC@slider?5s8?5reverse?$AA@
CONST	SEGMENT
??_C@_0BC@BBCEKAEC@slider?5s8?5reverse?$AA@ DB 'slider s8 reverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BGMAPONL@Sliders?5?$CIreverse?$CJ?$AA@
CONST	SEGMENT
??_C@_0BC@BGMAPONL@Sliders?5?$CIreverse?$CJ?$AA@ DB 'Sliders (reverse)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OPIDMMAL@slider?5double?5high?$AA@
CONST	SEGMENT
??_C@_0BD@OPIDMMAL@slider?5double?5high?$AA@ DB 'slider double high', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NHECNFJD@?$CFe?5grams?$AA@
CONST	SEGMENT
??_C@_08NHECNFJD@?$CFe?5grams?$AA@ DB '%e grams', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ILKDLGMD@slider?5double?5low?5log?$AA@
CONST	SEGMENT
??_C@_0BG@ILKDLGMD@slider?5double?5low?5log?$AA@ DB 'slider double low lo'
	DB	'g', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NEJIDBJN@slider?5double?5low?$AA@
CONST	SEGMENT
??_C@_0BC@NEJIDBJN@slider?5double?5low?$AA@ DB 'slider double low', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EHBCAJLJ@slider?5float?5high?$AA@
CONST	SEGMENT
??_C@_0BC@EHBCAJLJ@slider?5float?5high?$AA@ DB 'slider float high', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HMPMBMMM@slider?5float?5low?5log?$AA@
CONST	SEGMENT
??_C@_0BF@HMPMBMMM@slider?5float?5low?5log?$AA@ DB 'slider float low log', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DIPGONMJ@?$CF?410f?$AA@
CONST	SEGMENT
??_C@_05DIPGONMJ@?$CF?410f?$AA@ DB '%.10f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CCICNGDA@slider?5float?5low?$AA@
CONST	SEGMENT
??_C@_0BB@CCICNGDA@slider?5float?5low?$AA@ DB 'slider float low', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DHACPAKG@slider?5u64?5full?$AA@
CONST	SEGMENT
??_C@_0BA@DHACPAKG@slider?5u64?5full?$AA@ DB 'slider u64 full', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PKMEIMAF@slider?5u64?5high?$AA@
CONST	SEGMENT
??_C@_0BA@PKMEIMAF@slider?5u64?5high?$AA@ DB 'slider u64 high', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EJPFHGMA@slider?5u64?5low?$AA@
CONST	SEGMENT
??_C@_0P@EJPFHGMA@slider?5u64?5low?$AA@ DB 'slider u64 low', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GGAHJCGP@?$CFI64u?5ms?$AA@
CONST	SEGMENT
??_C@_08GGAHJCGP@?$CFI64u?5ms?$AA@ DB '%I64u ms', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EEBIIJCM@slider?5s64?5full?$AA@
CONST	SEGMENT
??_C@_0BA@EEBIIJCM@slider?5s64?5full?$AA@ DB 'slider s64 full', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IJNOPFIP@slider?5s64?5high?$AA@
CONST	SEGMENT
??_C@_0BA@IJNOPFIP@slider?5s64?5high?$AA@ DB 'slider s64 high', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IPJKHPEH@slider?5s64?5low?$AA@
CONST	SEGMENT
??_C@_0P@IPJKHPEH@slider?5s64?5low?$AA@ DB 'slider s64 low', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LLAMLEHD@?$CFI64d?$AA@
CONST	SEGMENT
??_C@_05LLAMLEHD@?$CFI64d?$AA@ DB '%I64d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BMDCMLPI@slider?5u32?5full?$AA@
CONST	SEGMENT
??_C@_0BA@BMDCMLPI@slider?5u32?5full?$AA@ DB 'slider u32 full', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NBPELHFL@slider?5u32?5high?$AA@
CONST	SEGMENT
??_C@_0BA@NBPELHFL@slider?5u32?5high?$AA@ DB 'slider u32 high', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MNJELKHK@slider?5u32?5low?$AA@
CONST	SEGMENT
??_C@_0P@MNJELKHK@slider?5u32?5low?$AA@ DB 'slider u32 low', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OJGLNLD@slider?5s32?5hex?$AA@
CONST	SEGMENT
??_C@_0P@OJGLNLD@slider?5s32?5hex?$AA@ DB 'slider s32 hex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IFILMILK@0x?$CF04X?$AA@
CONST	SEGMENT
??_C@_06IFILMILK@0x?$CF04X?$AA@ DB '0x%04X', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GPCILCHC@slider?5s32?5full?$AA@
CONST	SEGMENT
??_C@_0BA@GPCILCHC@slider?5s32?5full?$AA@ DB 'slider s32 full', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KCOOMONB@slider?5s32?5high?$AA@
CONST	SEGMENT
??_C@_0BA@KCOOMONB@slider?5s32?5high?$AA@ DB 'slider s32 high', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LPLLDPN@slider?5s32?5low?$AA@
CONST	SEGMENT
??_C@_0P@LPLLDPN@slider?5s32?5low?$AA@ DB 'slider s32 low', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KKFIOIJG@slider?5u16?5full?$AA@
CONST	SEGMENT
??_C@_0BA@KKFIOIJG@slider?5u16?5full?$AA@ DB 'slider u16 full', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NJECJBBM@slider?5s16?5full?$AA@
CONST	SEGMENT
??_C@_0BA@NJECJBBM@slider?5s16?5full?$AA@ DB 'slider s16 full', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NAFPINCP@slider?5u8?5full?$AA@
CONST	SEGMENT
??_C@_0P@NAFPINCP@slider?5u8?5full?$AA@ DB 'slider u8 full', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMHACPFF@?$CFu?$AA@
CONST	SEGMENT
??_C@_02GMHACPFF@?$CFu?$AA@ DB '%u', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BGDAIEKI@slider?5s8?5full?$AA@
CONST	SEGMENT
??_C@_0P@BGDAIEKI@slider?5s8?5full?$AA@ DB 'slider s8 full', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07BBLEOMAH@Sliders?$AA@
CONST	SEGMENT
??_C@_07BBLEOMAH@Sliders?$AA@ DB 'Sliders', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FMNOJHKA@Widgets?1Data?5Types?1Sliders?$AA@
CONST	SEGMENT
??_C@_0BL@FMNOJHKA@Widgets?1Data?5Types?1Sliders?$AA@ DB 'Widgets/Data Ty'
	DB	'pes/Sliders', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PLPECJH@drag?5double?5log?$AA@
CONST	SEGMENT
??_C@_0BA@PLPECJH@drag?5double?5log?$AA@ DB 'drag double log', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PIJBNPDH@0?5?$DM?5?$CF?410f?5?$DM?51?$AA@
CONST	SEGMENT
??_C@_0O@PIJBNPDH@0?5?$DM?5?$CF?410f?5?$DM?51?$AA@ DB '0 < %.10f < 1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IJGAEMEI@drag?5double?$AA@
CONST	SEGMENT
??_C@_0M@IJGAEMEI@drag?5double?$AA@ DB 'drag double', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PBAPOGLA@?$CF?410f?5grams?$AA@
CONST	SEGMENT
??_C@_0M@PBAPOGLA@?$CF?410f?5grams?$AA@ DB '%.10f grams', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OJENAICP@drag?5float?5log?$AA@
CONST	SEGMENT
??_C@_0P@OJENAICP@drag?5float?5log?$AA@ DB 'drag float log', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf?$AA@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf?$AA@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08MINAMANI@drag?5u64?$AA@
CONST	SEGMENT
??_C@_08MINAMANI@drag?5u64?$AA@ DB 'drag u64', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08ONLLJPAE@drag?5s64?$AA@
CONST	SEGMENT
??_C@_08ONLLJPAE@drag?5s64?$AA@ DB 'drag s64', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JIEBKFLF@drag?5u32?$AA@
CONST	SEGMENT
??_C@_08JIEBKFLF@drag?5u32?$AA@ DB 'drag u32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LCGPEHEL@drag?5s32?5hex?$AA@
CONST	SEGMENT
??_C@_0N@LCGPEHEL@drag?5s32?5hex?$AA@ DB 'drag s32 hex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IMJBDBNO@0x?$CF08X?$AA@
CONST	SEGMENT
??_C@_06IMJBDBNO@0x?$CF08X?$AA@ DB '0x%08X', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LNCKPKGJ@drag?5s32?$AA@
CONST	SEGMENT
??_C@_08LNCKPKGJ@drag?5s32?$AA@ DB 'drag s32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPKJLENP@drag?5u16?$AA@
CONST	SEGMENT
??_C@_08PPKJLENP@drag?5u16?$AA@ DB 'drag u16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NKMCOLAD@drag?5s16?$AA@
CONST	SEGMENT
??_C@_08NKMCOLAD@drag?5s16?$AA@ DB 'drag s16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LIKGIBAJ@drag?5u8?$AA@
CONST	SEGMENT
??_C@_07LIKGIBAJ@drag?5u8?$AA@ DB 'drag u8', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MMEBHIBO@?$CFu?5ms?$AA@
CONST	SEGMENT
??_C@_05MMEBHIBO@?$CFu?5ms?$AA@ DB '%u ms', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LMCLPNLL@drag?5s8?$AA@
CONST	SEGMENT
??_C@_07LMCLPNLL@drag?5s8?$AA@ DB 'drag s8', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0KK@PJCBLLDP@As?5with?5every?5widget?5in?5dear?5img@
CONST	SEGMENT
??_C@_0KK@PJCBLLDP@As?5with?5every?5widget?5in?5dear?5img@ DB 'As with ev'
	DB	'ery widget in dear imgui, we never modify values unless there'
	DB	' is a user interaction.', 0aH, 'You can override the clamping'
	DB	' limits by using CTRL+Click to input a value.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LDAPNGOM@Clamp?5integers?5to?50?4?450?$AA@
CONST	SEGMENT
??_C@_0BI@LDAPNGOM@Clamp?5integers?5to?50?4?450?$AA@ DB 'Clamp integers t'
	DB	'o 0..50', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06OFIAEEBG@Drags?3?$AA@
CONST	SEGMENT
??_C@_06OFIAEEBG@Drags?3?$AA@ DB 'Drags:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IECCHINH@Widgets?1Data?5Types?1Drags?$AA@
CONST	SEGMENT
??_C@_0BJ@IECCHINH@Widgets?1Data?5Types?1Drags?$AA@ DB 'Widgets/Data Type'
	DB	's/Drags', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PAJDALGN@Data?5Types?$AA@
CONST	SEGMENT
??_C@_0L@PAJDALGN@Data?5Types?$AA@ DB 'Data Types', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GBBEGJPM@Widgets?1Data?5Types?$AA@
CONST	SEGMENT
??_C@_0BD@GBBEGJPM@Widgets?1Data?5Types?$AA@ DB 'Widgets/Data Types', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NFKPCFAN@range?5int?5?$CIno?5bounds?$CJ?$AA@
CONST	SEGMENT
??_C@_0BG@NFKPCFAN@range?5int?5?$CIno?5bounds?$CJ?$AA@ DB 'range int (no '
	DB	'bounds)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09PIGNMEJF@range?5int?$AA@
CONST	SEGMENT
??_C@_09PIGNMEJF@range?5int?$AA@ DB 'range int', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CKMJCJCF@Min?3?5?$CFd?5units?$AA@
CONST	SEGMENT
??_C@_0O@CKMJCJCF@Min?3?5?$CFd?5units?$AA@ DB 'Min: %d units', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JDOPLCFE@Max?3?5?$CFd?5units?$AA@
CONST	SEGMENT
??_C@_0O@JDOPLCFE@Max?3?5?$CFd?5units?$AA@ DB 'Max: %d units', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JOPHKMFF@range?5float?$AA@
CONST	SEGMENT
??_C@_0M@JOPHKMFF@range?5float?$AA@ DB 'range float', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MBFELAJJ@Min?3?5?$CF?41f?5?$CF?$CF?$AA@
CONST	SEGMENT
??_C@_0N@MBFELAJJ@Min?3?5?$CF?41f?5?$CF?$CF?$AA@ DB 'Min: %.1f %%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IBBLMIOP@Max?3?5?$CF?41f?5?$CF?$CF?$AA@
CONST	SEGMENT
??_C@_0N@IBBLMIOP@Max?3?5?$CF?41f?5?$CF?$CF?$AA@ DB 'Max: %.1f %%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JEFPADJJ@Range?5Widgets?$AA@
CONST	SEGMENT
??_C@_0O@JEFPADJJ@Range?5Widgets?$AA@ DB 'Range Widgets', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EMJJMOGJ@Widgets?1Range?5Widgets?$AA@
CONST	SEGMENT
??_C@_0BG@EMJJMOGJ@Widgets?1Range?5Widgets?$AA@ DB 'Widgets/Range Widgets'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NONJLFDJ@SliderInt?5?$CI0?5?9?$DO?5100?$CJ?$AA@
CONST	SEGMENT
??_C@_0BF@NONJLFDJ@SliderInt?5?$CI0?5?9?$DO?5100?$CJ?$AA@ DB 'SliderInt ('
	DB	'0 -> 100)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MCKPEGDC@SliderFloat?5?$CI0?5?9?$DO?51?$CJ?$AA@
CONST	SEGMENT
??_C@_0BF@MCKPEGDC@SliderFloat?5?$CI0?5?9?$DO?51?$CJ?$AA@ DB 'SliderFloat'
	DB	' (0 -> 1)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KDPKGLCE@DragInt?5?$CI0?5?9?$DO?5100?$CJ?$AA@
CONST	SEGMENT
??_C@_0BD@KDPKGLCE@DragInt?5?$CI0?5?9?$DO?5100?$CJ?$AA@ DB 'DragInt (0 ->'
	DB	' 100)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MJEKBNMC@DragFloat?5?$CI?9inf?5?9?$DO?5?$CLinf?$CJ?$AA@
CONST	SEGMENT
??_C@_0BJ@MJEKBNMC@DragFloat?5?$CI?9inf?5?9?$DO?5?$CLinf?$CJ?$AA@ DB 'Dra'
	DB	'gFloat (-inf -> +inf)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GPJPIKGM@DragFloat?5?$CI?9inf?5?9?$DO?51?$CJ?$AA@
CONST	SEGMENT
??_C@_0BG@GPJPIKGM@DragFloat?5?$CI?9inf?5?9?$DO?51?$CJ?$AA@ DB 'DragFloat'
	DB	' (-inf -> 1)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EHNMBPIG@DragFloat?5?$CI0?5?9?$DO?5?$CLinf?$CJ?$AA@
CONST	SEGMENT
??_C@_0BG@EHNMBPIG@DragFloat?5?$CI0?5?9?$DO?5?$CLinf?$CJ?$AA@ DB 'DragFlo'
	DB	'at (0 -> +inf)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LPIMJICP@DragFloat?5?$CI0?5?9?$DO?51?$CJ?$AA@
CONST	SEGMENT
??_C@_0BD@LPIMJICP@DragFloat?5?$CI0?5?9?$DO?51?$CJ?$AA@ DB 'DragFloat (0 '
	DB	'-> 1)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HLOFLJPB@Underlying?5float?5value?3?5?$CFf?$AA@
CONST	SEGMENT
??_C@_0BL@HLOFLJPB@Underlying?5float?5value?3?5?$CFf?$AA@ DB 'Underlying '
	DB	'float value: %f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@JPLHIJIO@Disable?5CTRL?$CLClick?5or?5Enter?5key?5@
CONST	SEGMENT
??_C@_0FB@JPLHIJIO@Disable?5CTRL?$CLClick?5or?5Enter?5key?5@ DB 'Disable '
	DB	'CTRL+Click or Enter key allowing to input text directly into '
	DB	'the widget.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KFAEJGBN@ImGuiSliderFlags_NoInput?$AA@
CONST	SEGMENT
??_C@_0BJ@KFAEJGBN@ImGuiSliderFlags_NoInput?$AA@ DB 'ImGuiSliderFlags_NoI'
	DB	'nput', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0HM@PJMLMMLP@Disable?5rounding?5underlying?5valu@
CONST	SEGMENT
??_C@_0HM@PJMLMMLP@Disable?5rounding?5underlying?5valu@ DB 'Disable round'
	DB	'ing underlying value to match precision of the format string '
	DB	'(e.g. %.3f values are rounded to those 3 digits).', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DOCCIAEK@ImGuiSliderFlags_NoRoundToFormat@
CONST	SEGMENT
??_C@_0CB@DOCCIAEK@ImGuiSliderFlags_NoRoundToFormat@ DB 'ImGuiSliderFlags'
	DB	'_NoRoundToFormat', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@HKODNILP@Enable?5logarithmic?5editing?5?$CImore@
CONST	SEGMENT
??_C@_0DO@HKODNILP@Enable?5logarithmic?5editing?5?$CImore@ DB 'Enable log'
	DB	'arithmic editing (more precision for small values).', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HAKIJBBA@ImGuiSliderFlags_Logarithmic?$AA@
CONST	SEGMENT
??_C@_0BN@HAKIJBBA@ImGuiSliderFlags_Logarithmic?$AA@ DB 'ImGuiSliderFlags'
	DB	'_Logarithmic', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@BLABLEIF@Always?5clamp?5value?5to?5min?1max?5bo@
CONST	SEGMENT
??_C@_0FD@BLABLEIF@Always?5clamp?5value?5to?5min?1max?5bo@ DB 'Always cla'
	DB	'mp value to min/max bounds (if any) when input manually with '
	DB	'CTRL+Click.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OEAGPOC@ImGuiSliderFlags_AlwaysClamp?$AA@
CONST	SEGMENT
??_C@_0BN@OEAGPOC@ImGuiSliderFlags_AlwaysClamp?$AA@ DB 'ImGuiSliderFlags_'
	DB	'AlwaysClamp', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FOMNFKHB@Drag?1Slider?5Flags?$AA@
CONST	SEGMENT
??_C@_0BC@FOMNFKHB@Drag?1Slider?5Flags?$AA@ DB 'Drag/Slider Flags', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ONPGHCKF@Widgets?1Drag?5and?5Slider?5Flags?$AA@
CONST	SEGMENT
??_C@_0BO@ONPGHCKF@Widgets?1Drag?5and?5Slider?5Flags?$AA@ DB 'Widgets/Dra'
	DB	'g and Slider Flags', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PMCJHJ@Raw?5HSV?5values?$AA@
CONST	SEGMENT
??_C@_0P@PMCJHJ@Raw?5HSV?5values?$AA@ DB 'Raw HSV values', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DKMNGIOI@HSV?5shown?5as?5HSV?$CD?$CD1?$AA@
CONST	SEGMENT
??_C@_0BE@DKMNGIOI@HSV?5shown?5as?5HSV?$CD?$CD1?$AA@ DB 'HSV shown as HSV'
	DB	'##1', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PEEENKKH@HSV?5shown?5as?5RGB?$CD?$CD1?$AA@
CONST	SEGMENT
??_C@_0BE@PEEENKKH@HSV?5shown?5as?5RGB?$CD?$CD1?$AA@ DB 'HSV shown as RGB'
	DB	'##1', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EODGJACI@Color?5widget?5with?5InputHSV?3?$AA@
CONST	SEGMENT
??_C@_0BM@EODGJACI@Color?5widget?5with?5InputHSV?3?$AA@ DB 'Color widget '
	DB	'with InputHSV:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BDD@IKIAIDKH@By?5default?0?5colors?5are?5given?5to?5@
CONST	SEGMENT
??_C@_0BDD@IKIAIDKH@By?5default?0?5colors?5are?5given?5to?5@ DB 'By defau'
	DB	'lt, colors are given to ColorEdit and ColorPicker in RGB, but'
	DB	' ImGuiColorEditFlags_InputHSVallows you to store colors as HS'
	DB	'V and pass them to ColorEdit and ColorPicker as HSV. This com'
	DB	'es with theadded benefit that you can manipulate hue values w'
	DB	'ith the picker even when saturation or value are zero.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DKMMPKGG@HSV?5encoded?5colors?$AA@
CONST	SEGMENT
??_C@_0BD@DKMMPKGG@HSV?5encoded?5colors?$AA@ DB 'HSV encoded colors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FPPCKBIM@?$CD?$CDMyColor?$CD?$CD6?$AA@
CONST	SEGMENT
??_C@_0N@FPPCKBIM@?$CD?$CDMyColor?$CD?$CD6?$AA@ DB '##MyColor##6', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HENPPCEP@?$CD?$CDMyColor?$CD?$CD5?$AA@
CONST	SEGMENT
??_C@_0N@HENPPCEP@?$CD?$CDMyColor?$CD?$CD5?$AA@ DB '##MyColor##5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MIAPFBLG@Both?5types?3?$AA@
CONST	SEGMENT
??_C@_0M@MIAPFBLG@Both?5types?3?$AA@ DB 'Both types:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BDAOENPB@Default?3?5Float?5?$CL?5HDR?5?$CL?5Hue?5Wheel@
CONST	SEGMENT
??_C@_0CB@BDAOENPB@Default?3?5Float?5?$CL?5HDR?5?$CL?5Hue?5Wheel@ DB 'Def'
	DB	'ault: Float + HDR + Hue Wheel', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GBPCDFBG@Default?3?5Uint8?5?$CL?5HSV?5?$CL?5Hue?5Bar?$AA@
CONST	SEGMENT
??_C@_0BP@GBPCDFBG@Default?3?5Uint8?5?$CL?5HSV?5?$CL?5Hue?5Bar?$AA@ DB 'D'
	DB	'efault: Uint8 + HSV + Hue Bar', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BFC@FHNBCNON@SetColorEditOptions?$CI?$CJ?5is?5designe@
CONST	SEGMENT
??_C@_0BFC@FHNBCNON@SetColorEditOptions?$CI?$CJ?5is?5designe@ DB 'SetColo'
	DB	'rEditOptions() is designed to allow you to set boot-time defa'
	DB	'ult.', 0aH, 'We don''t have Push/Pop functions because you ca'
	DB	'n force options on a per-widget basis if needed,and the user '
	DB	'can change non-forced ones with the options menu.', 0aH, 'We '
	DB	'don''t have a getter to avoidencouraging you to persistently '
	DB	'save values that aren''t forward-compatible.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PLDANIFM@Set?5defaults?5in?5code?3?$AA@
CONST	SEGMENT
??_C@_0BG@PLDANIFM@Set?5defaults?5in?5code?3?$AA@ DB 'Set defaults in cod'
	DB	'e:', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GICMBKFD@MyColor?$CD?$CD4?$AA@
CONST	SEGMENT
??_C@_0L@GICMBKFD@MyColor?$CD?$CD4?$AA@ DB 'MyColor##4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@OPONKGG@When?5not?5specified?5explicitly?5?$CIA@
CONST	SEGMENT
??_C@_0GD@OPONKGG@When?5not?5specified?5explicitly?5?$CIA@ DB 'When not s'
	DB	'pecified explicitly (Auto/Current mode), user can right-click'
	DB	' the picker to change mode.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BBP@JAIDJLF@ColorEdit?5defaults?5to?5displaying@
CONST	SEGMENT
??_C@_0BBP@JAIDJLF@ColorEdit?5defaults?5to?5displaying@ DB 'ColorEdit def'
	DB	'aults to displaying RGB inputs if you don''t specify a displa'
	DB	'y mode, but the user can change it with a right-click on thos'
	DB	'e inputs.', 0aH, 0aH, 'ColorPicker defaults to displaying RGB'
	DB	'+HSV+Hex if you don''t specify a display mode.', 0aH, 0aH, 'Y'
	DB	'ou can change the defaults using SetColorEditOptions().', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OFPFGAFL@Display?5Mode?$AA@
CONST	SEGMENT
??_C@_0N@OFPFGAFL@Display?5Mode?$AA@ DB 'Display Mode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@EADBOKOE@Auto?1Current?$AANone?$AARGB?5Only?$AAHSV?5O@
CONST	SEGMENT
??_C@_0CO@EADBOKOE@Auto?1Current?$AANone?$AARGB?5Only?$AAHSV?5O@ DB 'Auto'
	DB	'/Current', 00H, 'None', 00H, 'RGB Only', 00H, 'HSV Only', 00H
	DB	'Hex Only', 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LOHJOGGK@?$CD?$CDRefColor?$AA@
CONST	SEGMENT
??_C@_0L@LOHJOGGK@?$CD?$CDRefColor?$AA@ DB '##RefColor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CEAKBNI@With?5Ref?5Color?$AA@
CONST	SEGMENT
??_C@_0P@CEAKBNI@With?5Ref?5Color?$AA@ DB 'With Ref Color', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IIIMIJGF@With?5Side?5Preview?$AA@
CONST	SEGMENT
??_C@_0BC@IIIMIJGF@With?5Side?5Preview?$AA@ DB 'With Side Preview', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HFPOLAHI@With?5Alpha?5Bar?$AA@
CONST	SEGMENT
??_C@_0P@HFPOLAHI@With?5Alpha?5Bar?$AA@ DB 'With Alpha Bar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EACIJKCC@With?5Alpha?$AA@
CONST	SEGMENT
??_C@_0L@EACIJKCC@With?5Alpha?$AA@ DB 'With Alpha', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IPOAJHA@Color?5picker?3?$AA@
CONST	SEGMENT
??_C@_0O@IPOAJHA@Color?5picker?3?$AA@ DB 'Color picker:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CPMABCHF@Widgets?1Color?1ColorPicker?$AA@
CONST	SEGMENT
??_C@_0BK@CPMABCHF@Widgets?1Color?1ColorPicker?$AA@ DB 'Widgets/Color/Col'
	DB	'orPicker', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LJJFACLF@MyColor?$CD?$CD3c?$AA@
CONST	SEGMENT
??_C@_0M@LJJFACLF@MyColor?$CD?$CD3c?$AA@ DB 'MyColor##3c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HLFBDHDP@ImGuiColorEditFlags_NoBorder?$AA@
CONST	SEGMENT
??_C@_0BN@HLFBDHDP@ImGuiColorEditFlags_NoBorder?$AA@ DB 'ImGuiColorEditFl'
	DB	'ags_NoBorder', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NCDFBPJC@Color?5button?5only?3?$AA@
CONST	SEGMENT
??_C@_0BD@NCDFBPJC@Color?5button?5only?3?$AA@ DB 'Color button only:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HMBJHACC@Widgets?1Color?1ColorButton?5?$CIsimpl@
CONST	SEGMENT
??_C@_0CD@HMBJHACC@Widgets?1Color?1ColorButton?5?$CIsimpl@ DB 'Widgets/Co'
	DB	'lor/ColorButton (simple)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LAOCEMMP@_COL4F?$AA@
CONST	SEGMENT
??_C@_06LAOCEMMP@_COL4F?$AA@ DB '_COL4F', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LFKNFKEK@_COL3F?$AA@
CONST	SEGMENT
??_C@_06LFKNFKEK@_COL3F?$AA@ DB '_COL3F', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09DDJBIEE@?$CD?$CDpalette?$AA@
CONST	SEGMENT
??_C@_09DDJBIEE@?$CD?$CDpalette?$AA@ DB '##palette', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JEAALFFH@?$CD?$CDprevious?$AA@
CONST	SEGMENT
??_C@_0L@JEAALFFH@?$CD?$CDprevious?$AA@ DB '##previous', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CAGLMDLD@Previous?$AA@
CONST	SEGMENT
??_C@_08CAGLMDLD@Previous?$AA@ DB 'Previous', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CDENILGE@?$CD?$CDcurrent?$AA@
CONST	SEGMENT
??_C@_09CDENILGE@?$CD?$CDcurrent?$AA@ DB '##current', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EDIFFIJI@Current?$AA@
CONST	SEGMENT
??_C@_07EDIFFIJI@Current?$AA@ DB 'Current', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HHEANBBL@?$CD?$CDpicker?$AA@
CONST	SEGMENT
??_C@_08HHEANBBL@?$CD?$CDpicker?$AA@ DB '##picker', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@DKOICBGC@MY?5CUSTOM?5COLOR?5PICKER?5WITH?5AN?5A@
CONST	SEGMENT
??_C@_0DA@DKOICBGC@MY?5CUSTOM?5COLOR?5PICKER?5WITH?5AN?5A@ DB 'MY CUSTOM '
	DB	'COLOR PICKER WITH AN AMAZING PALETTE!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KFPGOGIA@mypicker?$AA@
CONST	SEGMENT
??_C@_08KFPGOGIA@mypicker?$AA@ DB 'mypicker', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GDPBMLLI@Palette?$AA@
CONST	SEGMENT
??_C@_07GDPBMLLI@Palette?$AA@ DB 'Palette', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KAIODDPE@MyColor?$CD?$CD3b?$AA@
CONST	SEGMENT
??_C@_0M@KAIODDPE@MyColor?$CD?$CD3b?$AA@ DB 'MyColor##3b', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HJNHAHAP@Color?5button?5with?5Custom?5Picker?5@
CONST	SEGMENT
??_C@_0CH@HJNHAHAP@Color?5button?5with?5Custom?5Picker?5@ DB 'Color butto'
	DB	'n with Custom Picker Popup:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@LKFAKHKL@Widgets?1Color?1ColorButton?5?$CIwith?5@
CONST	SEGMENT
??_C@_0DF@LKFAKHKL@Widgets?1Color?1ColorButton?5?$CIwith?5@ DB 'Widgets/C'
	DB	'olor/ColorButton (with custom Picker popup)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CHGNIMJE@MyColor?$CD?$CD3?$AA@
CONST	SEGMENT
??_C@_0L@CHGNIMJE@MyColor?$CD?$CD3?$AA@ DB 'MyColor##3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0NH@CMBOCHE@With?5the?5ImGuiColorEditFlags_NoI@
CONST	SEGMENT
??_C@_0NH@CMBOCHE@With?5the?5ImGuiColorEditFlags_NoI@ DB 'With the ImGuiC'
	DB	'olorEditFlags_NoInputs flag you can hide all the slider/text '
	DB	'inputs.', 0aH, 'With the ImGuiColorEditFlags_NoLabel flag you'
	DB	' can pass a non-empty label which will only be used for the t'
	DB	'ooltip and picker popup.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EFMOKOBO@Color?5button?5with?5Picker?3?$AA@
CONST	SEGMENT
??_C@_0BK@EFMOKOBO@Color?5button?5with?5Picker?3?$AA@ DB 'Color button wi'
	DB	'th Picker:', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KPPBOEAG@Widgets?1Color?1ColorButton?5?$CIwith?5@
CONST	SEGMENT
??_C@_0CI@KPPBOEAG@Widgets?1Color?1ColorButton?5?$CIwith?5@ DB 'Widgets/C'
	DB	'olor/ColorButton (with Picker)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MFCAJMMH@MyColor?$CD?$CD2f?$AA@
CONST	SEGMENT
??_C@_0M@MFCAJMMH@MyColor?$CD?$CD2f?$AA@ DB 'MyColor##2f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GHOEMJO@Color?5widget?5with?5Float?5Display?3@
CONST	SEGMENT
??_C@_0CB@GHOEMJO@Color?5widget?5with?5Float?5Display?3@ DB 'Color widget'
	DB	' with Float Display:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@DKIDAOAB@Widgets?1Color?1ColorEdit?5?$CIfloat?5d@
CONST	SEGMENT
??_C@_0CI@DKIDAOAB@Widgets?1Color?1ColorEdit?5?$CIfloat?5d@ DB 'Widgets/C'
	DB	'olor/ColorEdit (float display)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DOHGLNNF@MyColor?$CD?$CD2?$AA@
CONST	SEGMENT
??_C@_0L@DOHGLNNF@MyColor?$CD?$CD2?$AA@ DB 'MyColor##2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GLLLKGMC@Color?5widget?5HSV?5with?5Alpha?3?$AA@
CONST	SEGMENT
??_C@_0BN@GLLLKGMC@Color?5widget?5HSV?5with?5Alpha?3?$AA@ DB 'Color widge'
	DB	't HSV with Alpha:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@HAPIFBGC@Widgets?1Color?1ColorEdit?5?$CIHSV?0?5wi@
CONST	SEGMENT
??_C@_0CK@HAPIFBGC@Widgets?1Color?1ColorEdit?5?$CIHSV?0?5wi@ DB 'Widgets/'
	DB	'Color/ColorEdit (HSV, with Alpha)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BFFLOOBG@MyColor?$CD?$CD1?$AA@
CONST	SEGMENT
??_C@_0L@BFFLOOBG@MyColor?$CD?$CD1?$AA@ DB 'MyColor##1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GG@EFLMCGPH@Click?5on?5the?5color?5square?5to?5ope@
CONST	SEGMENT
??_C@_0GG@EFLMCGPH@Click?5on?5the?5color?5square?5to?5ope@ DB 'Click on t'
	DB	'he color square to open a color picker.', 0aH, 'CTRL+click on'
	DB	' individual component to input value.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NOEDKBGC@Color?5widget?3?$AA@
CONST	SEGMENT
??_C@_0O@NOEDKBGC@Color?5widget?3?$AA@ DB 'Color widget:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MDJGKOGL@Widgets?1Color?1ColorEdit?$AA@
CONST	SEGMENT
??_C@_0BI@MDJGKOGL@Widgets?1Color?1ColorEdit?$AA@ DB 'Widgets/Color/Color'
	DB	'Edit', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@FHFBEIHN@Currently?5all?5this?5does?5is?5to?5li@
CONST	SEGMENT
??_C@_0EI@FHFBEIHN@Currently?5all?5this?5does?5is?5to?5li@ DB 'Currently '
	DB	'all this does is to lift the 0..1 limits on dragging widgets.'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08FMJOEAGN@With?5HDR?$AA@
CONST	SEGMENT
??_C@_08FMJOEAGN@With?5HDR?$AA@ DB 'With HDR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@KEMLELAP@Right?9click?5on?5the?5individual?5co@
CONST	SEGMENT
??_C@_0DM@KEMLELAP@Right?9click?5on?5the?5individual?5co@ DB 'Right-click'
	DB	' on the individual color widget to show options.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EJIAMDNC@With?5Options?5Menu?$AA@
CONST	SEGMENT
??_C@_0BC@EJIAMDNC@With?5Options?5Menu?$AA@ DB 'With Options Menu', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KEFEHFM@With?5Drag?5and?5Drop?$AA@
CONST	SEGMENT
??_C@_0BD@KEFEHFM@With?5Drag?5and?5Drop?$AA@ DB 'With Drag and Drop', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FJEMIBKC@With?5Half?5Alpha?5Preview?$AA@
CONST	SEGMENT
??_C@_0BI@FJEMIBKC@With?5Half?5Alpha?5Preview?$AA@ DB 'With Half Alpha Pr'
	DB	'eview', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KJCAPGNJ@With?5Alpha?5Preview?$AA@
CONST	SEGMENT
??_C@_0BD@KJCAPGNJ@With?5Alpha?5Preview?$AA@ DB 'With Alpha Preview', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GELOCOAL@Color?1Picker?5Widgets?$AA@
CONST	SEGMENT
??_C@_0BF@GELOCOAL@Color?1Picker?5Widgets?$AA@ DB 'Color/Picker Widgets', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ILCICGHI@Widgets?1Color?$AA@
CONST	SEGMENT
??_C@_0O@ILCICGHI@Widgets?1Color?$AA@ DB 'Widgets/Color', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LCKIIOJE@?$CFd?1?$CFd?$AA@
CONST	SEGMENT
??_C@_05LCKIIOJE@?$CFd?1?$CFd?$AA@ DB '%d/%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HDMPBJBE@Progress?5Bar?$AA@
CONST	SEGMENT
??_C@_0N@HDMPBJBE@Progress?5Bar?$AA@ DB 'Progress Bar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JJJCOIGD@Widgets?1Plotting?1ProgressBar?$AA@
CONST	SEGMENT
??_C@_0BN@JJJCOIGD@Widgets?1Plotting?1ProgressBar?$AA@ DB 'Widgets/Plotti'
	DB	'ng/ProgressBar', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LHCNOOOP@Sample?5count?$AA@
CONST	SEGMENT
??_C@_0N@LHCNOOOP@Sample?5count?$AA@ DB 'Sample count', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPNHAEOP@func?$AA@
CONST	SEGMENT
??_C@_04HPNHAEOP@func?$AA@ DB 'func', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OLJDEBGC@Sin?$AASaw?$AA?$AA@
CONST	SEGMENT
??_C@_08OLJDEBGC@Sin?$AASaw?$AA?$AA@ DB 'Sin', 00H, 'Saw', 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DDHCCCLJ@Lines?$AA@
CONST	SEGMENT
??_C@_05DDHCCCLJ@Lines?$AA@ DB 'Lines', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BECIMFEF@avg?5?$CFf?$AA@
CONST	SEGMENT
??_C@_06BECIMFEF@avg?5?$CFf?$AA@ DB 'avg %f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NBOAEPFB@Histogram?$AA@
CONST	SEGMENT
??_C@_09NBOAEPFB@Histogram?$AA@ DB 'Histogram', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LJPKANLB@Frame?5Times?$AA@
CONST	SEGMENT
??_C@_0M@LJPKANLB@Frame?5Times?$AA@ DB 'Frame Times', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MBEHLAAJ@Widgets?1Plotting?1PlotLines?0?5Plot@
CONST	SEGMENT
??_C@_0CK@MBEHLAAJ@Widgets?1Plotting?1PlotLines?0?5Plot@ DB 'Widgets/Plot'
	DB	'ting/PlotLines, PlotHistogram', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCNCPHDL@Animate?$AA@
CONST	SEGMENT
??_C@_07CCNCPHDL@Animate?$AA@ DB 'Animate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CDCEIJME@Plotting?$AA@
CONST	SEGMENT
??_C@_08CDCEIJME@Plotting?$AA@ DB 'Plotting', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EOCJNFEM@Widgets?1Plotting?$AA@
CONST	SEGMENT
??_C@_0BB@EOCJNFEM@Widgets?1Plotting?$AA@ DB 'Widgets/Plotting', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OCCELDNI@?$CF04d?$AA@
CONST	SEGMENT
??_C@_04OCCELDNI@?$CF04d?$AA@ DB '%04d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01MIFGBAGJ@?$CL?$AA@
CONST	SEGMENT
??_C@_01MIFGBAGJ@?$CL?$AA@ DB '+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IFBHGAGJ@MyHelpMenu?$AA@
CONST	SEGMENT
??_C@_0L@IFBHGAGJ@MyHelpMenu?$AA@ DB 'MyHelpMenu', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP?$AA@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP?$AA@ DB '?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GMKHPNHK@Show?5Trailing?5TabItemButton?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0BO@GMKHPNHK@Show?5Trailing?5TabItemButton?$CI?$CJ?$AA@ DB 'Show Tr'
	DB	'ailing TabItemButton()', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OJPKMGDH@Show?5Leading?5TabItemButton?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0BN@OJPKMGDH@Show?5Leading?5TabItemButton?$CI?$CJ?$AA@ DB 'Show Lea'
	DB	'ding TabItemButton()', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FJDGMAFH@TabItemButton?5?$CG?5Leading?1Trailing@
CONST	SEGMENT
??_C@_0CH@FJDGMAFH@TabItemButton?5?$CG?5Leading?1Trailing@ DB 'TabItemBut'
	DB	'ton & Leading/Trailing flags', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@GLBBPDDL@Widgets?1Tabs?1TabItemButton?5?$CG?5Lea@
CONST	SEGMENT
??_C@_0DE@GLBBPDDL@Widgets?1Tabs?1TabItemButton?5?$CG?5Lea@ DB 'Widgets/T'
	DB	'abs/TabItemButton & Leading-Trailing flags', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PAPJGNOM@I?5am?5an?5odd?5tab?4?$AA@
CONST	SEGMENT
??_C@_0BB@PAPJGNOM@I?5am?5an?5odd?5tab?4?$AA@ DB 'I am an odd tab.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HMOLENGG@This?5is?5the?5?$CFs?5tab?$CB?$AA@
CONST	SEGMENT
??_C@_0BE@HMOLENGG@This?5is?5the?5?$CFs?5tab?$CB?$AA@ DB 'This is the %s '
	DB	'tab!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBIPACBO@Daikon?$AA@
CONST	SEGMENT
??_C@_06NBIPACBO@Daikon?$AA@ DB 'Daikon', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGPLDCHA@Celery?$AA@
CONST	SEGMENT
??_C@_06LGPLDCHA@Celery?$AA@ DB 'Celery', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NACLCGIP@Beetroot?$AA@
CONST	SEGMENT
??_C@_08NACLCGIP@Beetroot?$AA@ DB 'Beetroot', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JNADJLBG@Artichoke?$AA@
CONST	SEGMENT
??_C@_09JNADJLBG@Artichoke?$AA@ DB 'Artichoke', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@NLLNBILH@ImGuiTabBarFlags_FittingPolicySc@
CONST	SEGMENT
??_C@_0CF@NLLNBILH@ImGuiTabBarFlags_FittingPolicySc@ DB 'ImGuiTabBarFlags'
	DB	'_FittingPolicyScroll', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IIIJDEBN@ImGuiTabBarFlags_FittingPolicyRe@
CONST	SEGMENT
??_C@_0CJ@IIIJDEBN@ImGuiTabBarFlags_FittingPolicyRe@ DB 'ImGuiTabBarFlags'
	DB	'_FittingPolicyResizeDown', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@PEFOKBDP@ImGuiTabBarFlags_NoCloseWithMidd@
CONST	SEGMENT
??_C@_0CO@PEFOKBDP@ImGuiTabBarFlags_NoCloseWithMidd@ DB 'ImGuiTabBarFlags'
	DB	'_NoCloseWithMiddleMouseButton', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@ODMHCKNA@ImGuiTabBarFlags_TabListPopupBut@
CONST	SEGMENT
??_C@_0CE@ODMHCKNA@ImGuiTabBarFlags_TabListPopupBut@ DB 'ImGuiTabBarFlags'
	DB	'_TabListPopupButton', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CJJDGNCL@ImGuiTabBarFlags_AutoSelectNewTa@
CONST	SEGMENT
??_C@_0CD@CJJDGNCL@ImGuiTabBarFlags_AutoSelectNewTa@ DB 'ImGuiTabBarFlags'
	DB	'_AutoSelectNewTabs', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FKNGBAKI@ImGuiTabBarFlags_Reorderable?$AA@
CONST	SEGMENT
??_C@_0BN@FKNGBAKI@ImGuiTabBarFlags_Reorderable?$AA@ DB 'ImGuiTabBarFlags'
	DB	'_Reorderable', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NAEAKGLC@Advanced?5?$CG?5Close?5Button?$AA@
CONST	SEGMENT
??_C@_0BI@NAEAKGLC@Advanced?5?$CG?5Close?5Button?$AA@ DB 'Advanced & Clos'
	DB	'e Button', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@NNMDIAIK@Widgets?1Tabs?1Advanced?5?$CG?5Close?5Bu@
CONST	SEGMENT
??_C@_0CF@NNMDIAIK@Widgets?1Tabs?1Advanced?5?$CG?5Close?5Bu@ DB 'Widgets/'
	DB	'Tabs/Advanced & Close Button', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@CJPLEJGJ@This?5is?5the?5Cucumber?5tab?$CB?6blah?5b@
CONST	SEGMENT
??_C@_0DD@CJPLEJGJ@This?5is?5the?5Cucumber?5tab?$CB?6blah?5b@ DB 'This is'
	DB	' the Cucumber tab!', 0aH, 'blah blah blah blah blah', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FIHABPKG@Cucumber?$AA@
CONST	SEGMENT
??_C@_08FIHABPKG@Cucumber?$AA@ DB 'Cucumber', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@MJGBNDMM@This?5is?5the?5Broccoli?5tab?$CB?6blah?5b@
CONST	SEGMENT
??_C@_0DD@MJGBNDMM@This?5is?5the?5Broccoli?5tab?$CB?6blah?5b@ DB 'This is'
	DB	' the Broccoli tab!', 0aH, 'blah blah blah blah blah', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LMFMBPKH@Broccoli?$AA@
CONST	SEGMENT
??_C@_08LMFMBPKH@Broccoli?$AA@ DB 'Broccoli', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@GCKNABCK@This?5is?5the?5Avocado?5tab?$CB?6blah?5bl@
CONST	SEGMENT
??_C@_0DC@GCKNABCK@This?5is?5the?5Avocado?5tab?$CB?6blah?5bl@ DB 'This is'
	DB	' the Avocado tab!', 0aH, 'blah blah blah blah blah', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PJEDDDBE@Avocado?$AA@
CONST	SEGMENT
??_C@_07PJEDDDBE@Avocado?$AA@ DB 'Avocado', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHPFJKBJ@MyTabBar?$AA@
CONST	SEGMENT
??_C@_08BHPFJKBJ@MyTabBar?$AA@ DB 'MyTabBar', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MJMKJGN@Widgets?1Tabs?1Basic?$AA@
CONST	SEGMENT
??_C@_0BD@MJMKJGN@Widgets?1Tabs?1Basic?$AA@ DB 'Widgets/Tabs/Basic', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DIJFMEPE@Tabs?$AA@
CONST	SEGMENT
??_C@_04DIJFMEPE@Tabs?$AA@ DB 'Tabs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PGGDMOLM@Widgets?1Tabs?$AA@
CONST	SEGMENT
??_C@_0N@PGGDMOLM@Widgets?1Tabs?$AA@ DB 'Widgets/Tabs', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HFIMENAP@Data?3?5?$CFp?6Size?3?5?$CFd?6Capacity?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BP@HFIMENAP@Data?3?5?$CFp?6Size?3?5?$CFd?6Capacity?3?5?$CFd?$AA@ DB 'D'
	DB	'ata: %p', 0aH, 'Size: %d', 0aH, 'Capacity: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MDDMIGJK@?$CD?$CDMyStr?$AA@
CONST	SEGMENT
??_C@_07MDDMIGJK@?$CD?$CDMyStr?$AA@ DB '##MyStr', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0KF@ELKLKFLA@Using?5ImGuiInputTextFlags_Callba@
CONST	SEGMENT
??_C@_0KF@ELKLKFLA@Using?5ImGuiInputTextFlags_Callba@ DB 'Using ImGuiInpu'
	DB	'tTextFlags_CallbackResize to wire your custom string type to '
	DB	'InputText().', 0aH, 0aH, 'See misc/cpp/imgui_stdlib.h for an '
	DB	'implementation of this for std::string.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PGEBLBNL@Resize?5Callback?$AA@
CONST	SEGMENT
??_C@_0BA@PGEBLBNL@Resize?5Callback?$AA@ DB 'Resize Callback', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@OOGDFIC@Widgets?1Text?5Input?1Resize?5Callba@
CONST	SEGMENT
??_C@_0CD@OOGDFIC@Widgets?1Text?5Input?1Resize?5Callba@ DB 'Widgets/Text '
	DB	'Input/Resize Callback', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FEBIMPDM@?$CI?$CFd?$CJ?$AA@
CONST	SEGMENT
??_C@_04FEBIMPDM@?$CI?$CFd?$CJ?$AA@ DB '(%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@BKNGEHGN@Here?5we?5toggle?5the?5casing?5of?5the@
CONST	SEGMENT
??_C@_0EO@BKNGEHGN@Here?5we?5toggle?5the?5casing?5of?5the@ DB 'Here we to'
	DB	'ggle the casing of the first character on every edit + count '
	DB	'edits.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04BBNPPDNC@Edit?$AA@
CONST	SEGMENT
??_C@_04BBNPPDNC@Edit?$AA@ DB 'Edit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0JC@JNBHNBHO@Here?5we?5replace?5and?5select?5text?5@
CONST	SEGMENT
??_C@_0JC@JNBHNBHO@Here?5we?5replace?5and?5select?5text?5@ DB 'Here we re'
	DB	'place and select text each time Up/Down are pressed. See ''Ex'
	DB	'amples>Console'' for a more meaningful demonstration of using'
	DB	' this callback.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DFKCFAEM@History?$AA@
CONST	SEGMENT
??_C@_07DFKCFAEM@History?$AA@ DB 'History', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0IB@POFCECKB@Here?5we?5append?5?$CC?4?4?$CC?5each?5time?5Ta@
CONST	SEGMENT
??_C@_0IB@POFCECKB@Here?5we?5append?5?$CC?4?4?$CC?5each?5time?5Ta@ DB 'He'
	DB	're we append ".." each time Tab is pressed. See ''Examples>Co'
	DB	'nsole'' for a more meaningful demonstration of using this cal'
	DB	'lback.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BMOEBFKJ@Completion?$AA@
CONST	SEGMENT
??_C@_0L@BMOEBFKJ@Completion?$AA@ DB 'Completion', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HIDJCAJO@Completion?0?5History?0?5Edit?5Callba@
CONST	SEGMENT
??_C@_0CE@HIDJCAJO@Completion?0?5History?0?5Edit?5Callba@ DB 'Completion,'
	DB	' History, Edit Callbacks', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LNABFGG@password?5?$CIclear?$CJ?$AA@
CONST	SEGMENT
??_C@_0BB@LNABFGG@password?5?$CIclear?$CJ?$AA@ DB 'password (clear)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DPDFGHAP@password?5?$CIw?1?5hint?$CJ?$AA@
CONST	SEGMENT
??_C@_0BD@DPDFGHAP@password?5?$CIw?1?5hint?$CJ?$AA@ DB 'password (w/ hint'
	DB	')', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DGGOBGAB@?$DMpassword?$DO?$AA@
CONST	SEGMENT
??_C@_0L@DGGOBGAB@?$DMpassword?$DO?$AA@ DB '<password>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@LAANLENK@Display?5all?5characters?5as?5?8?$CK?8?4?6D@
CONST	SEGMENT
??_C@_0FB@LAANLENK@Display?5all?5characters?5as?5?8?$CK?8?4?6D@ DB 'Displ'
	DB	'ay all characters as ''*''.', 0aH, 'Disable clipboard cut and'
	DB	' copy.', 0aH, 'Disable logging.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NLHBPEGP@password?$AA@
CONST	SEGMENT
??_C@_08NLHBPEGP@password?$AA@ DB 'password', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CNDCHFGF@Password?5Input?$AA@
CONST	SEGMENT
??_C@_0P@CNDCHFGF@Password?5Input?$AA@ DB 'Password Input', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OPLEEAIO@Widgets?1Text?5Input?1Password?5inpu@
CONST	SEGMENT
??_C@_0CC@OPLEEAIO@Widgets?1Text?5Input?1Password?5inpu@ DB 'Widgets/Text'
	DB	' Input/Password input', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DMKNNKAP@?$CCimgui?$CC?5letters?$AA@
CONST	SEGMENT
??_C@_0BA@DMKNNKAP@?$CCimgui?$CC?5letters?$AA@ DB '"imgui" letters', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BFAFMKNB@no?5blank?$AA@
CONST	SEGMENT
??_C@_08BFAFMKNB@no?5blank?$AA@ DB 'no blank', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NMLHJAII@uppercase?$AA@
CONST	SEGMENT
??_C@_09NMLHJAII@uppercase?$AA@ DB 'uppercase', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PLANEGDO@hexadecimal?$AA@
CONST	SEGMENT
??_C@_0M@PLANEGDO@hexadecimal?$AA@ DB 'hexadecimal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EEKBCPDP@decimal?$AA@
CONST	SEGMENT
??_C@_07EEKBCPDP@decimal?$AA@ DB 'decimal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DLHCIBDH@default?$AA@
CONST	SEGMENT
??_C@_07DLHCIBDH@default?$AA@ DB 'default', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EABDFJK@Filtered?5Text?5Input?$AA@
CONST	SEGMENT
??_C@_0BE@EABDFJK@Filtered?5Text?5Input?$AA@ DB 'Filtered Text Input', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GBIJGOO@Widgets?1Text?5Input?1Filtered?5Text@
CONST	SEGMENT
??_C@_0CH@GBIJGOO@Widgets?1Text?5Input?1Filtered?5Text@ DB 'Widgets/Text '
	DB	'Input/Filtered Text Input', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FDEOKKII@?$CD?$CDsource?$AA@
CONST	SEGMENT
??_C@_08FDEOKKII@?$CD?$CDsource?$AA@ DB '##source', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LIKAMPDL@ImGuiInputTextFlags_CtrlEnterFor@
CONST	SEGMENT
??_C@_0CI@LIKAMPDL@ImGuiInputTextFlags_CtrlEnterFor@ DB 'ImGuiInputTextFl'
	DB	'ags_CtrlEnterForNewLine', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GMDAHFPL@ImGuiInputTextFlags_AllowTabInpu@
CONST	SEGMENT
??_C@_0CC@GMDAHFPL@ImGuiInputTextFlags_AllowTabInpu@ DB 'ImGuiInputTextFl'
	DB	'ags_AllowTabInput', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IHHKAKNM@ImGuiInputTextFlags_ReadOnly?$AA@
CONST	SEGMENT
??_C@_0BN@IHHKAKNM@ImGuiInputTextFlags_ReadOnly?$AA@ DB 'ImGuiInputTextFl'
	DB	'ags_ReadOnly', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BAK@IFEHCPKB@You?5can?5use?5the?5ImGuiInputTextFl@
CONST	SEGMENT
??_C@_0BAK@IFEHCPKB@You?5can?5use?5the?5ImGuiInputTextFl@ DB 'You can use'
	DB	' the ImGuiInputTextFlags_CallbackResize facility if you need '
	DB	'to wire InputTextMultiline() to a dynamic string type. See mi'
	DB	'sc/cpp/imgui_stdlib.h for an example. (This is not demonstrat'
	DB	'ed in imgui_demo.cpp because we don''t want to include <strin'
	DB	'g> in here)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ENAPIHKE@Multi?9line?5Text?5Input?$AA@
CONST	SEGMENT
??_C@_0BG@ENAPIHKE@Multi?9line?5Text?5Input?$AA@ DB 'Multi-line Text Inpu'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@EJIDMLBN@Widgets?1Text?5Input?1Multi?9line?5Te@
CONST	SEGMENT
??_C@_0CJ@EJIDMLBN@Widgets?1Text?5Input?1Multi?9line?5Te@ DB 'Widgets/Tex'
	DB	't Input/Multi-line Text Input', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LLAOMMOH@Text?5Input?$AA@
CONST	SEGMENT
??_C@_0L@LLAOMMOH@Text?5Input?$AA@ DB 'Text Input', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CKIJKOHG@Widgets?1Text?5Input?$AA@
CONST	SEGMENT
??_C@_0BD@CKIJKOHG@Widgets?1Text?5Input?$AA@ DB 'Widgets/Text Input', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HCIABIHI@?$CI?$CF?41f?0?$CF?41f?$CJ?$AA@
CONST	SEGMENT
??_C@_0M@HCIABIHI@?$CI?$CF?41f?0?$CF?41f?$CJ?$AA@ DB '(%.1f,%.1f)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BAK@CHANFCAG@By?5default?0?5Selectables?5uses?5sty@
CONST	SEGMENT
??_C@_0BAK@CHANFCAG@By?5default?0?5Selectables?5uses?5sty@ DB 'By default'
	DB	', Selectables uses style.SelectableTextAlign but it can be ov'
	DB	'erridden on a per-item basis using PushStyleVar(). You''ll pr'
	DB	'obably want to always keep your default situation to left-ali'
	DB	'gn otherwise it becomes difficult to layout multiple items on'
	DB	' a same line', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09FBMAGD@Alignment?$AA@
CONST	SEGMENT
??_C@_09FBMAGD@Alignment?$AA@ DB 'Alignment', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OOLMIAMJ@Widgets?1Selectables?1Alignment?$AA@
CONST	SEGMENT
??_C@_0BO@OOLMIAMJ@Widgets?1Selectables?1Alignment?$AA@ DB 'Widgets/Selec'
	DB	'tables/Alignment', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06IFGMFLK@Sailor?$AA@
CONST	SEGMENT
??_C@_06IFGMFLK@Sailor?$AA@ DB 'Sailor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FEKPLKKA@Grid?$AA@
CONST	SEGMENT
??_C@_04FEKPLKKA@Grid?$AA@ DB 'Grid', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GOMOMLMF@Widgets?1Selectables?1Grid?$AA@
CONST	SEGMENT
??_C@_0BJ@GOMOMLMF@Widgets?1Selectables?1Grid?$AA@ DB 'Widgets/Selectable'
	DB	's/Grid', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06BHEBDDGP@123456?$AA@
CONST	SEGMENT
??_C@_06BHEBDDGP@123456?$AA@ DB '123456', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DEADEMHJ@Some?5other?5contents?$AA@
CONST	SEGMENT
??_C@_0BE@DEADEMHJ@Some?5other?5contents?$AA@ DB 'Some other contents', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BAFFFBMO@split2?$AA@
CONST	SEGMENT
??_C@_06BAFFFBMO@split2?$AA@ DB 'split2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BCJGKFOL@Item?5?$CFd?$AA@
CONST	SEGMENT
??_C@_07BCJGKFOL@Item?5?$CFd?$AA@ DB 'Item %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DLHIACAN@split1?$AA@
CONST	SEGMENT
??_C@_06DLHIACAN@split1?$AA@ DB 'split1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JGCLAHBC@In?5columns?$AA@
CONST	SEGMENT
??_C@_0L@JGCLAHBC@In?5columns?$AA@ DB 'In columns', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KAMGKAKE@Widgets?1Selectables?1In?5columns?$AA@
CONST	SEGMENT
??_C@_0BP@KAMGKAKE@Widgets?1Selectables?1In?5columns?$AA@ DB 'Widgets/Sel'
	DB	'ectables/In columns', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07GGGNKCPB@Hello?4h?$AA@
CONST	SEGMENT
??_C@_07GGGNKCPB@Hello?4h?$AA@ DB 'Hello.h', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LDNEMMOG@12?0345?5bytes?$AA@
CONST	SEGMENT
??_C@_0N@LDNEMMOG@12?0345?5bytes?$AA@ DB '12,345 bytes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JJLAOCPC@Hello?4cpp?$AA@
CONST	SEGMENT
??_C@_09JJLAOCPC@Hello?4cpp?$AA@ DB 'Hello.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NKEFLDLJ@?52?0345?5bytes?$AA@
CONST	SEGMENT
??_C@_0N@NKEFLDLJ@?52?0345?5bytes?$AA@ DB ' 2,345 bytes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HIICBHNJ@main?4c?$AA@
CONST	SEGMENT
??_C@_06HIICBHNJ@main?4c?$AA@ DB 'main.c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PHBOMNNA@Rendering?5more?5text?5into?5the?5sam@
CONST	SEGMENT
??_C@_0CH@PHBOMNNA@Rendering?5more?5text?5into?5the?5sam@ DB 'Rendering m'
	DB	'ore text into the same line', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@PHDOHIFN@Widgets?1Selectables?1Rendering?5mo@
CONST	SEGMENT
??_C@_0DL@PHDOHIFN@Widgets?1Selectables?1Rendering?5mo@ DB 'Widgets/Selec'
	DB	'tables/Rendering more text into the same line', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@HEGMKIIH@Hold?5CTRL?5and?5click?5to?5select?5mu@
CONST	SEGMENT
??_C@_0CO@HEGMKIIH@Hold?5CTRL?5and?5click?5to?5select?5mu@ DB 'Hold CTRL '
	DB	'and click to select multiple items.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@ILMFMDLL@Selection?5State?3?5Multiple?5Select@
CONST	SEGMENT
??_C@_0CE@ILMFMDLL@Selection?5State?3?5Multiple?5Select@ DB 'Selection St'
	DB	'ate: Multiple Selection', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JDDBHIKA@Widgets?1Selectables?1Multiple?5Sel@
CONST	SEGMENT
??_C@_0CH@JDDBHIKA@Widgets?1Selectables?1Multiple?5Sel@ DB 'Widgets/Selec'
	DB	'tables/Multiple Selection', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09IEODADNK@Object?5?$CFd?$AA@
CONST	SEGMENT
??_C@_09IEODADNK@Object?5?$CFd?$AA@ DB 'Object %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NGMIMNBC@Selection?5State?3?5Single?5Selectio@
CONST	SEGMENT
??_C@_0CC@NGMIMNBC@Selection?5State?3?5Single?5Selectio@ DB 'Selection St'
	DB	'ate: Single Selection', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@EDENHAHK@Widgets?1Selectables?1Single?5Selec@
CONST	SEGMENT
??_C@_0CF@EDENHAHK@Widgets?1Selectables?1Single?5Selec@ DB 'Widgets/Selec'
	DB	'tables/Single Selection', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DACNLCFI@5?4?5I?5am?5double?5clickable?$AA@
CONST	SEGMENT
??_C@_0BJ@DACNLCFI@5?4?5I?5am?5double?5clickable?$AA@ DB '5. I am double '
	DB	'clickable', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JMOINFMH@4?4?5I?5am?5selectable?$AA@
CONST	SEGMENT
??_C@_0BD@JMOINFMH@4?4?5I?5am?5selectable?$AA@ DB '4. I am selectable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EJJBPEFA@?$CII?5am?5not?5selectable?$CJ?$AA@
CONST	SEGMENT
??_C@_0BG@EJJBPEFA@?$CII?5am?5not?5selectable?$CJ?$AA@ DB '(I am not sele'
	DB	'ctable)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BDENONE@2?4?5I?5am?5selectable?$AA@
CONST	SEGMENT
??_C@_0BD@BDENONE@2?4?5I?5am?5selectable?$AA@ DB '2. I am selectable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KCGCFIHN@1?4?5I?5am?5selectable?$AA@
CONST	SEGMENT
??_C@_0BD@KCGCFIHN@1?4?5I?5am?5selectable?$AA@ DB '1. I am selectable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OFEBJINJ@Widgets?1Selectables?1Basic?$AA@
CONST	SEGMENT
??_C@_0BK@OFEBJINJ@Widgets?1Selectables?1Basic?$AA@ DB 'Widgets/Selectabl'
	DB	'es/Basic', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GOIEGLPE@Selectables?$AA@
CONST	SEGMENT
??_C@_0M@GOIEGLPE@Selectables?$AA@ DB 'Selectables', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OJBNEPEE@Widgets?1Selectables?$AA@
CONST	SEGMENT
??_C@_0BE@OJBNEPEE@Widgets?1Selectables?$AA@ DB 'Widgets/Selectables', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NAPALMCL@?$CD?$CDlistbox?52?$AA@
CONST	SEGMENT
??_C@_0M@NAPALMCL@?$CD?$CDlistbox?52?$AA@ DB '##listbox 2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CKEICGGI@Full?9width?3?$AA@
CONST	SEGMENT
??_C@_0M@CKEICGGI@Full?9width?3?$AA@ DB 'Full-width:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BDFDKBCP@listbox?51?$AA@
CONST	SEGMENT
??_C@_09BDFDKBCP@listbox?51?$AA@ DB 'listbox 1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PBIKFGCH@List?5boxes?$AA@
CONST	SEGMENT
??_C@_0L@PBIKFGCH@List?5boxes?$AA@ DB 'List boxes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GHKBDBIA@Widgets?1List?5Boxes?$AA@
CONST	SEGMENT
??_C@_0BD@GHKBDBIA@Widgets?1List?5Boxes?$AA@ DB 'Widgets/List Boxes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GDHGAEJD@combo?54?5?$CIfunction?$CJ?$AA@
CONST	SEGMENT
??_C@_0BD@GDHGAEJD@combo?54?5?$CIfunction?$CJ?$AA@ DB 'combo 4 (function)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MDMKCBHF@combo?53?5?$CIarray?$CJ?$AA@
CONST	SEGMENT
??_C@_0BA@MDMKCBHF@combo?53?5?$CIarray?$CJ?$AA@ DB 'combo 3 (array)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BBBJNHHG@combo?52?5?$CIone?9liner?$CJ?$AA@
CONST	SEGMENT
??_C@_0BE@BBBJNHHG@combo?52?5?$CIone?9liner?$CJ?$AA@ DB 'combo 2 (one-lin'
	DB	'er)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@ICCGGBKH@aaaa?$AAbbbb?$AAcccc?$AAdddd?$AAeeee?$AA?$AA?$AA@
CONST	SEGMENT
??_C@_0BL@ICCGGBKH@aaaa?$AAbbbb?$AAcccc?$AAdddd?$AAeeee?$AA?$AA?$AA@ DB 'a'
	DB	'aaa', 00H, 'bbbb', 00H, 'cccc', 00H, 'dddd', 00H, 'eeee', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_07HDIKCFGM@combo?51?$AA@
CONST	SEGMENT
??_C@_07HDIKCFGM@combo?51?$AA@ DB 'combo 1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DDNOFDDK@OOOOOOO?$AA@
CONST	SEGMENT
??_C@_07DDNOFDDK@OOOOOOO?$AA@ DB 'OOOOOOO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MNFFDLCB@MMMM?$AA@
CONST	SEGMENT
??_C@_04MNFFDLCB@MMMM?$AA@ DB 'MMMM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HGFDAEEO@LLLLLLL?$AA@
CONST	SEGMENT
??_C@_07HGFDAEEO@LLLLLLL?$AA@ DB 'LLLLLLL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DFKJEKGJ@KKKK?$AA@
CONST	SEGMENT
??_C@_04DFKJEKGJ@KKKK?$AA@ DB 'KKKK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NENCGHGO@IIII?$AA@
CONST	SEGMENT
??_C@_04NENCGHGO@IIII?$AA@ DB 'IIII', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CFAPHAND@ImGuiComboFlags_NoPreview?$AA@
CONST	SEGMENT
??_C@_0BK@CFAPHAND@ImGuiComboFlags_NoPreview?$AA@ DB 'ImGuiComboFlags_NoP'
	DB	'review', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IADJEHHH@ImGuiComboFlags_NoArrowButton?$AA@
CONST	SEGMENT
??_C@_0BO@IADJEHHH@ImGuiComboFlags_NoArrowButton?$AA@ DB 'ImGuiComboFlags'
	DB	'_NoArrowButton', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@LDFFHHPN@Only?5makes?5a?5difference?5if?5the?5p@
CONST	SEGMENT
??_C@_0DO@LDFFHHPN@Only?5makes?5a?5difference?5if?5the?5p@ DB 'Only makes'
	DB	' a difference if the popup is larger than the combo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KDFGPNLK@ImGuiComboFlags_PopupAlignLeft?$AA@
CONST	SEGMENT
??_C@_0BP@KDFGPNLK@ImGuiComboFlags_PopupAlignLeft?$AA@ DB 'ImGuiComboFlag'
	DB	's_PopupAlignLeft', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LMOJIBPK@Combo?$AA@
CONST	SEGMENT
??_C@_05LMOJIBPK@Combo?$AA@ DB 'Combo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MECALOFC@Widgets?1Combo?$AA@
CONST	SEGMENT
??_C@_0O@MECALOFC@Widgets?1Combo?$AA@ DB 'Widgets/Combo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JGNKDOGB@Pressed?5?$CFd?5times?4?$AA@
CONST	SEGMENT
??_C@_0BC@JGNKDOGB@Pressed?5?$CFd?5times?4?$AA@ DB 'Pressed %d times.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KAEHPGML@And?5now?5some?5textured?5buttons?4?4?$AA@
CONST	SEGMENT
??_C@_0CA@KAEHPGML@And?5now?5some?5textured?5buttons?4?4?$AA@ DB 'And now'
	DB	' some textured buttons..', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CCOONHAL@Widgets?1Images?1Textured?5buttons?$AA@
CONST	SEGMENT
??_C@_0CA@CCOONHAL@Widgets?1Images?1Textured?5buttons?$AA@ DB 'Widgets/Im'
	DB	'ages/Textured buttons', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LIIPCIB@Max?3?5?$CI?$CF?42f?0?5?$CF?42f?$CJ?$AA@
CONST	SEGMENT
??_C@_0BC@LIIPCIB@Max?3?5?$CI?$CF?42f?0?5?$CF?42f?$CJ?$AA@ DB 'Max: (%.2f'
	DB	', %.2f)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FICOOKGF@Min?3?5?$CI?$CF?42f?0?5?$CF?42f?$CJ?$AA@
CONST	SEGMENT
??_C@_0BC@FICOOKGF@Min?3?5?$CI?$CF?42f?0?5?$CF?42f?$CJ?$AA@ DB 'Min: (%.2'
	DB	'f, %.2f)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09CLOIPCOK@?$CF?40fx?$CF?40f?$AA@
CONST	SEGMENT
??_C@_09CLOIPCOK@?$CF?40fx?$CF?40f?$AA@ DB '%.0fx%.0f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0OJ@IGJPGIOP@Below?5we?5are?5displaying?5the?5font@
CONST	SEGMENT
??_C@_0OJ@IGJPGIOP@Below?5we?5are?5displaying?5the?5font@ DB 'Below we ar'
	DB	'e displaying the font texture (which is the only texture we h'
	DB	'ave access to in this demo). Use the ''ImTextureID'' type as '
	DB	'storage to pass pointers or identifier to your own texture da'
	DB	'ta. Hover the texture for a zoomed view!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EPMHLOBG@Images?$AA@
CONST	SEGMENT
??_C@_06EPMHLOBG@Images?$AA@ DB 'Images', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JHLCFMPD@Widgets?1Images?$AA@
CONST	SEGMENT
??_C@_0P@JHLCFMPD@Widgets?1Images?$AA@ DB 'Widgets/Images', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OKLFPIAG@UTF?98?5input?$AA@
CONST	SEGMENT
??_C@_0M@OKLFPIAG@UTF?98?5input?$AA@ DB 'UTF-8 input', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BCACPCEP@Kanjis?3?5?f?$JH?$KF?f?$JM?$KM?h?$KK?$JO?5?$CInihongo?$CJ?$AA@
CONST	SEGMENT
??_C@_0BM@BCACPCEP@Kanjis?3?5?f?$JH?$KF?f?$JM?$KM?h?$KK?$JO?5?$CInihongo?$CJ?$AA@ DB 'K'
	DB	'anjis: ', 0e6H, 097H, 0a5H, 0e6H, 09cH, 0acH, 0e8H, 0aaH, 09eH
	DB	' (nihongo)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@EHCMNMLI@Hiragana?3?5?c?$IB?$IL?c?$IB?$IN?c?$IB?$IP?c?$IB?$JB?c?$IB?$JD?5?$CIkakik@
CONST	SEGMENT
??_C@_0CH@EHCMNMLI@Hiragana?3?5?c?$IB?$IL?c?$IB?$IN?c?$IB?$IP?c?$IB?$JB?c?$IB?$JD?5?$CIkakik@ DB 'H'
	DB	'iragana: ', 0e3H, 081H, 08bH, 0e3H, 081H, 08dH, 0e3H, 081H, 08fH
	DB	0e3H, 081H, 091H, 0e3H, 081H, 093H, ' (kakikukeko)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0MJ@DIENCCGD@CJK?5text?5will?5only?5appear?5if?5the@
CONST	SEGMENT
??_C@_0MJ@DIENCCGD@CJK?5text?5will?5only?5appear?5if?5the@ DB 'CJK text w'
	DB	'ill only appear if the font was loaded with the appropriate C'
	DB	'JK character ranges. Call io.Fonts->AddFontFromFileTTF() manu'
	DB	'ally to load extra character ranges. Read docs/FONTS.md for d'
	DB	'etails.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KOGPBBGO@UTF?98?5Text?$AA@
CONST	SEGMENT
??_C@_0L@KOGPBBGO@UTF?98?5Text?$AA@ DB 'UTF-8 Text', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HMDFOMMC@Widgets?1Text?1UTF?98?5Text?$AA@
CONST	SEGMENT
??_C@_0BI@HMDFOMMC@Widgets?1Text?1UTF?98?5Text?$AA@ DB 'Widgets/Text/UTF-'
	DB	'8 Text', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@BGHPBDIA@aaaaaaaa?5bbbbbbbb?0?5c?5cccccccc?0dd@
CONST	SEGMENT
??_C@_0FB@BGHPBDIA@aaaaaaaa?5bbbbbbbb?0?5c?5cccccccc?0dd@ DB 'aaaaaaaa bb'
	DB	'bbbbbb, c cccccccc,dddddddd. d eeeeeeee   ffffffff. gggggggg!'
	DB	'hhhhhhhh', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0JD@HKNKABEJ@The?5lazy?5dog?5is?5a?5good?5dog?4?5This@
CONST	SEGMENT
??_C@_0JD@HKNKABEJ@The?5lazy?5dog?5is?5a?5good?5dog?4?5This@ DB 'The lazy'
	DB	' dog is a good dog. This paragraph should fit within %.0f pix'
	DB	'els. Testing a 1 character word. The quick brown fox jumps ov'
	DB	'er the lazy dog.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IAMDDDPD@Test?5paragraph?5?$CFd?3?$AA@
CONST	SEGMENT
??_C@_0BD@IAMDDDPD@Test?5paragraph?5?$CFd?3?$AA@ DB 'Test paragraph %d:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NHCJIHMI@Wrap?5width?$AA@
CONST	SEGMENT
??_C@_0L@NHCJIHMI@Wrap?5width?$AA@ DB 'Wrap width', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHNNFJCK@?$CF?40f?$AA@
CONST	SEGMENT
??_C@_04GHNNFJCK@?$CF?40f?$AA@ DB '%.0f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0LE@LBABKNFA@This?5text?5should?5automatically?5w@
CONST	SEGMENT
??_C@_0LE@LBABKNFA@This?5text?5should?5automatically?5w@ DB 'This text sh'
	DB	'ould automatically wrap on the edge of the window. The curren'
	DB	't implementation for text wrapping follows simple rules suita'
	DB	'ble for English and possibly other languages.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CLIMKCMB@Word?5Wrapping?$AA@
CONST	SEGMENT
??_C@_0O@CLIMKCMB@Word?5Wrapping?$AA@ DB 'Word Wrapping', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NBECCBAN@Widgets?1Text?1Word?5Wrapping?$AA@
CONST	SEGMENT
??_C@_0BL@NBECCBAN@Widgets?1Text?1Word?5Wrapping?$AA@ DB 'Widgets/Text/Wo'
	DB	'rd Wrapping', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@EPJPAHDI@The?5TextDisabled?5color?5is?5stored@
CONST	SEGMENT
??_C@_0DA@EPJPAHDI@The?5TextDisabled?5color?5is?5stored@ DB 'The TextDisa'
	DB	'bled color is stored in ImGuiStyle.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JGILNPHN@Disabled?$AA@
CONST	SEGMENT
??_C@_08JGILNPHN@Disabled?$AA@ DB 'Disabled', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICCAKDNH@Yellow?$AA@
CONST	SEGMENT
??_C@_06ICCAKDNH@Yellow?$AA@ DB 'Yellow', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IDKACLOG@Pink?$AA@
CONST	SEGMENT
??_C@_04IDKACLOG@Pink?$AA@ DB 'Pink', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HGHOOCPG@Colorful?5Text?$AA@
CONST	SEGMENT
??_C@_0O@HGHOOCPG@Colorful?5Text?$AA@ DB 'Colorful Text', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PPEHIABB@Widgets?1Text?1Colored?5Text?$AA@
CONST	SEGMENT
??_C@_0BK@PPEHIABB@Widgets?1Text?1Colored?5Text?$AA@ DB 'Widgets/Text/Col'
	DB	'ored Text', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04OJAHODMC@Text?$AA@
CONST	SEGMENT
??_C@_04OJAHODMC@Text?$AA@ DB 'Text', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CHPBOJIK@Widgets?1Text?$AA@
CONST	SEGMENT
??_C@_0N@CHPBOJIK@Widgets?1Text?$AA@ DB 'Widgets/Text', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OAFINJBP@Bullet?5point?53?5?$CItwo?5calls?$CJ?$AA@
CONST	SEGMENT
??_C@_0BL@OAFINJBP@Bullet?5point?53?5?$CItwo?5calls?$CJ?$AA@ DB 'Bullet p'
	DB	'oint 3 (two calls)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FBMIEPNI@Another?5bullet?5point?$AA@
CONST	SEGMENT
??_C@_0BF@FBMIEPNI@Another?5bullet?5point?$AA@ DB 'Another bullet point', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09CGOFEACE@Tree?5node?$AA@
CONST	SEGMENT
??_C@_09CGOFEACE@Tree?5node?$AA@ DB 'Tree node', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LFMFDEHN@Bullet?5point?52?6On?5multiple?5lines@
CONST	SEGMENT
??_C@_0CB@LFMFDEHN@Bullet?5point?52?6On?5multiple?5lines@ DB 'Bullet poin'
	DB	't 2', 0aH, 'On multiple lines', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DEGHIHA@Bullet?5point?51?$AA@
CONST	SEGMENT
??_C@_0P@DEGHIHA@Bullet?5point?51?$AA@ DB 'Bullet point 1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DHNDKCGP@Bullets?$AA@
CONST	SEGMENT
??_C@_07DHNDKCGP@Bullets?$AA@ DB 'Bullets', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OHGLMBHK@Widgets?1Bullets?$AA@
CONST	SEGMENT
??_C@_0BA@OHGLMBHK@Widgets?1Bullets?$AA@ DB 'Widgets/Bullets', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PEMOHED@More?5content?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BA@PEMOHED@More?5content?5?$CFd?$AA@ DB 'More content %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IHHHIKPE@Header?5with?5a?5close?5button?$AA@
CONST	SEGMENT
??_C@_0BL@IHHHIKPE@Header?5with?5a?5close?5button?$AA@ DB 'Header with a '
	DB	'close button', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PJMPKHOM@Some?5content?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BA@PJMPKHOM@Some?5content?5?$CFd?$AA@ DB 'Some content %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BLAKNONB@IsItemHovered?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BC@BLAKNONB@IsItemHovered?3?5?$CFd?$AA@ DB 'IsItemHovered: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OENKJGA@Header?$AA@
CONST	SEGMENT
??_C@_06OENKJGA@Header?$AA@ DB 'Header', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JOCPBPDO@Show?52nd?5header?$AA@
CONST	SEGMENT
??_C@_0BA@JOCPBPDO@Show?52nd?5header?$AA@ DB 'Show 2nd header', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GBPHDMGC@Collapsing?5Headers?$AA@
CONST	SEGMENT
??_C@_0BD@GBPHDMGC@Collapsing?5Headers?$AA@ DB 'Collapsing Headers', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HBCHPPAB@Widgets?1Collapsing?5Headers?$AA@
CONST	SEGMENT
??_C@_0BL@HBCHPPAB@Widgets?1Collapsing?5Headers?$AA@ DB 'Widgets/Collapsi'
	DB	'ng Headers', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MLABGFOG@Selectable?5Leaf?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BD@MLABGFOG@Selectable?5Leaf?5?$CFd?$AA@ DB 'Selectable Leaf %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GJFAIPKG@Blah?5blah?6Blah?5Blah?$AA@
CONST	SEGMENT
??_C@_0BE@GJFAIPKG@Blah?5blah?6Blah?5Blah?$AA@ DB 'Blah blah', 0aH, 'Blah'
	DB	' Blah', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LHBEHNKM@This?5is?5a?5drag?5and?5drop?5source?$AA@
CONST	SEGMENT
??_C@_0BP@LHBEHNKM@This?5is?5a?5drag?5and?5drop?5source?$AA@ DB 'This is '
	DB	'a drag and drop source', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PLFIFPJD@_TREENODE?$AA@
CONST	SEGMENT
??_C@_09PLFIFPJD@_TREENODE?$AA@ DB '_TREENODE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DKDJNGLG@Selectable?5Node?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BD@DKDJNGLG@Selectable?5Node?5?$CFd?$AA@ DB 'Selectable Node %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KPGIMOHP@Hello?$CB?$AA@
CONST	SEGMENT
??_C@_06KPGIMOHP@Hello?$CB?$AA@ DB 'Hello!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ICNOHPIE@Test?5tree?5node?5as?5drag?5source?$AA@
CONST	SEGMENT
??_C@_0BO@ICNOHPIE@Test?5tree?5node?5as?5drag?5source?$AA@ DB 'Test tree '
	DB	'node as drag source', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@CFMFIOLL@Align?5label?5with?5current?5X?5posit@
CONST	SEGMENT
??_C@_0CE@CFMFIOLL@Align?5label?5with?5current?5X?5posit@ DB 'Align label'
	DB	' with current X position', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OHNGGEGD@ImGuiTreeNodeFlags_SpanFullWidth@
CONST	SEGMENT
??_C@_0CB@OHNGGEGD@ImGuiTreeNodeFlags_SpanFullWidth@ DB 'ImGuiTreeNodeFla'
	DB	'gs_SpanFullWidth', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@HJHHKMOH@Extend?5hit?5area?5to?5all?5available@
CONST	SEGMENT
??_C@_0GF@HJHHKMOH@Extend?5hit?5area?5to?5all?5available@ DB 'Extend hit '
	DB	'area to all available width instead of allowing more items to'
	DB	' be laid out after the node.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CLHKBONF@ImGuiTreeNodeFlags_SpanAvailWidt@
CONST	SEGMENT
??_C@_0CC@CLHKBONF@ImGuiTreeNodeFlags_SpanAvailWidt@ DB 'ImGuiTreeNodeFla'
	DB	'gs_SpanAvailWidth', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@HDMDLLCC@ImGuiTreeNodeFlags_OpenOnDoubleC@
CONST	SEGMENT
??_C@_0CF@HDMDLLCC@ImGuiTreeNodeFlags_OpenOnDoubleC@ DB 'ImGuiTreeNodeFla'
	DB	'gs_OpenOnDoubleClick', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JJAJNCOF@ImGuiTreeNodeFlags_OpenOnArrow?$AA@
CONST	SEGMENT
??_C@_0BP@JJAJNCOF@ImGuiTreeNodeFlags_OpenOnArrow?$AA@ DB 'ImGuiTreeNodeF'
	DB	'lags_OpenOnArrow', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0IL@PMAJKNJG@This?5is?5a?5more?5typical?5looking?5t@
CONST	SEGMENT
??_C@_0IL@PMAJKNJG@This?5is?5a?5more?5typical?5looking?5t@ DB 'This is a '
	DB	'more typical looking tree with selectable nodes.', 0aH, 'Clic'
	DB	'k to select, CTRL+Click to toggle, click on arrows or double-'
	DB	'click to open.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LDNIBPC@Advanced?0?5with?5Selectable?5nodes?$AA@
CONST	SEGMENT
??_C@_0CA@LDNIBPC@Advanced?0?5with?5Selectable?5nodes?$AA@ DB 'Advanced, '
	DB	'with Selectable nodes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@HKMALMNH@Widgets?1Trees?1Advanced?0?5with?5Sel@
CONST	SEGMENT
??_C@_0CO@HKMALMNH@Widgets?1Trees?1Advanced?0?5with?5Sel@ DB 'Widgets/Tre'
	DB	'es/Advanced, with Selectable nodes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HFKPFKMP@button?$AA@
CONST	SEGMENT
??_C@_06HFKPFKMP@button?$AA@ DB 'button', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KGLHLKML@blah?5blah?$AA@
CONST	SEGMENT
??_C@_09KGLHLKML@blah?5blah?$AA@ DB 'blah blah', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GPGIPNJB@Child?5?$CFd?$AA@
CONST	SEGMENT
??_C@_08GPGIPNJB@Child?5?$CFd?$AA@ DB 'Child %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OABIBGBA@Basic?5trees?$AA@
CONST	SEGMENT
??_C@_0M@OABIBGBA@Basic?5trees?$AA@ DB 'Basic trees', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OJMACAMF@Widgets?1Trees?1Basic?5trees?$AA@
CONST	SEGMENT
??_C@_0BK@OJMACAMF@Widgets?1Trees?1Basic?5trees?$AA@ DB 'Widgets/Trees/Ba'
	DB	'sic trees', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05BMMGIDNN@Trees?$AA@
CONST	SEGMENT
??_C@_05BMMGIDNN@Trees?$AA@ DB 'Trees', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GEAPLMHF@Widgets?1Trees?$AA@
CONST	SEGMENT
??_C@_0O@GEAPLMHF@Widgets?1Trees?$AA@ DB 'Widgets/Trees', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0LF@POLFDEKB@Using?5the?5simplified?5one?9liner?5L@
CONST	SEGMENT
??_C@_0LF@POLFDEKB@Using?5the?5simplified?5one?9liner?5L@ DB 'Using the s'
	DB	'implified one-liner ListBox API here.', 0aH, 'Refer to the "L'
	DB	'ist boxes" section below for an explanation of how to use the'
	DB	' more flexible and general BeginListBox/EndListBox API.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07LHBBOFFP@listbox?$AA@
CONST	SEGMENT
??_C@_07LHBBOFFP@listbox?$AA@ DB 'listbox', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OOGNHKFG@Widgets?1Basic?1ListBox?$AA@
CONST	SEGMENT
??_C@_0BG@OOGNHKFG@Widgets?1Basic?1ListBox?$AA@ DB 'Widgets/Basic/ListBox'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0KK@EOPNBDJP@Using?5the?5simplified?5one?9liner?5C@
CONST	SEGMENT
??_C@_0KK@EOPNBDJP@Using?5the?5simplified?5one?9liner?5C@ DB 'Using the s'
	DB	'implified one-liner Combo API here.', 0aH, 'Refer to the "Com'
	DB	'bo" section below for an explanation of how to use the more f'
	DB	'lexible and general BeginCombo/EndCombo API.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LLEFIEMM@combo?$AA@
CONST	SEGMENT
??_C@_05LLEFIEMM@combo?$AA@ DB 'combo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MBMNGHIK@KKKKKKK?$AA@
CONST	SEGMENT
??_C@_07MBMNGHIK@KKKKKKK?$AA@ DB 'KKKKKKK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KIKMFPMK@JJJJ?$AA@
CONST	SEGMENT
??_C@_04KIKMFPMK@JJJJ?$AA@ DB 'JJJJ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LIMEPNNC@IIIIIII?$AA@
CONST	SEGMENT
??_C@_07LIMEPNNC@IIIIIII?$AA@ DB 'IIIIIII', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EJNHHCMN@HHHH?$AA@
CONST	SEGMENT
??_C@_04EJNHHCMN@HHHH?$AA@ DB 'HHHH', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BPCAKOLI@GGGG?$AA@
CONST	SEGMENT
??_C@_04BPCAKOLI@GGGG?$AA@ DB 'GGGG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04ICCFLLBL@FFFF?$AA@
CONST	SEGMENT
??_C@_04ICCFLLBL@FFFF?$AA@ DB 'FFFF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04POFLIDLP@EEEE?$AA@
CONST	SEGMENT
??_C@_04POFLIDLP@EEEE?$AA@ DB 'EEEE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GDFOJGBM@DDDD?$AA@
CONST	SEGMENT
??_C@_04GDFOJGBM@DDDD?$AA@ DB 'DDDD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GKHPCPH@CCCC?$AA@
CONST	SEGMENT
??_C@_04GKHPCPH@CCCC?$AA@ DB 'CCCC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JLKCOHFE@BBBB?$AA@
CONST	SEGMENT
??_C@_04JLKCOHFE@BBBB?$AA@ DB 'BBBB', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHNMNPPA@AAAA?$AA@
CONST	SEGMENT
??_C@_04OHNMNPPA@AAAA?$AA@ DB 'AAAA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DGEKEFFI@Widgets?1Basic?1Combo?$AA@
CONST	SEGMENT
??_C@_0BE@DGEKEFFI@Widgets?1Basic?1Combo?$AA@ DB 'Widgets/Basic/Combo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MJBIOOPJ@color?52?$AA@
CONST	SEGMENT
??_C@_07MJBIOOPJ@color?52?$AA@ DB 'color 2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0LM@JNIPGMLP@Click?5on?5the?5color?5square?5to?5ope@
CONST	SEGMENT
??_C@_0LM@JNIPGMLP@Click?5on?5the?5color?5square?5to?5ope@ DB 'Click on t'
	DB	'he color square to open a color picker.', 0aH, 'Click and hol'
	DB	'd to use drag and drop.', 0aH, 'Right-click on the color squa'
	DB	're to show options.', 0aH, 'CTRL+click on individual componen'
	DB	't to input value.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OCDFLNDK@color?51?$AA@
CONST	SEGMENT
??_C@_07OCDFLNDK@color?51?$AA@ DB 'color 1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OBBGEKML@Widgets?1Basic?1ColorEdit3?0?5ColorE@
CONST	SEGMENT
??_C@_0CF@OBBGEKML@Widgets?1Basic?1ColorEdit3?0?5ColorE@ DB 'Widgets/Basi'
	DB	'c/ColorEdit3, ColorEdit4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@BEBFOFKH@Using?5the?5format?5string?5paramete@
CONST	SEGMENT
??_C@_0FH@BEBFOFKH@Using?5the?5format?5string?5paramete@ DB 'Using the fo'
	DB	'rmat string parameter to display a name instead of the underl'
	DB	'ying integer.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ENFPDMMO@slider?5enum?$AA@
CONST	SEGMENT
??_C@_0M@ENFPDMMO@slider?5enum?$AA@ DB 'slider enum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NBCGADJA@Unknown?$AA@
CONST	SEGMENT
??_C@_07NBCGADJA@Unknown?$AA@ DB 'Unknown', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMKMBNJK@Water?$AA@
CONST	SEGMENT
??_C@_05EMKMBNJK@Water?$AA@ DB 'Water', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHBMPEGA@Air?$AA@
CONST	SEGMENT
??_C@_03KHBMPEGA@Air?$AA@ DB 'Air', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IKBANCEK@Earth?$AA@
CONST	SEGMENT
??_C@_05IKBANCEK@Earth?$AA@ DB 'Earth', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHLPDOFO@Fire?$AA@
CONST	SEGMENT
??_C@_04OHLPDOFO@Fire?$AA@ DB 'Fire', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MKFJNJNL@Widgets?1Basic?1Slider?5?$CIenum?$CJ?$AA@
CONST	SEGMENT
??_C@_0BM@MKFJNJNL@Widgets?1Basic?1Slider?5?$CIenum?$CJ?$AA@ DB 'Widgets/'
	DB	'Basic/Slider (enum)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EFIJIFM@slider?5angle?$AA@
CONST	SEGMENT
??_C@_0N@EFIJIFM@slider?5angle?$AA@ DB 'slider angle', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FKIHKODH@?$CF?40f?5deg?$AA@
CONST	SEGMENT
??_C@_08FKIHKODH@?$CF?40f?5deg?$AA@ DB '%.0f deg', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LMANIBOG@Widgets?1Basic?1SliderAngle?$AA@
CONST	SEGMENT
??_C@_0BK@LMANIBOG@Widgets?1Basic?1SliderAngle?$AA@ DB 'Widgets/Basic/Sli'
	DB	'derAngle', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PPOMGMAE@slider?5float?5?$CIlog?$CJ?$AA@
CONST	SEGMENT
??_C@_0BD@PPOMGMAE@slider?5float?5?$CIlog?$CJ?$AA@ DB 'slider float (log)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04GANEPBPG@?$CF?44f?$AA@
CONST	SEGMENT
??_C@_04GANEPBPG@?$CF?44f?$AA@ DB '%.4f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PNCIGDCI@slider?5float?$AA@
CONST	SEGMENT
??_C@_0N@PNCIGDCI@slider?5float?$AA@ DB 'slider float', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BCCPFMAI@ratio?5?$DN?5?$CF?43f?$AA@
CONST	SEGMENT
??_C@_0N@BCCPFMAI@ratio?5?$DN?5?$CF?43f?$AA@ DB 'ratio = %.3f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FBJLFMJ@CTRL?$CLclick?5to?5input?5value?4?$AA@
CONST	SEGMENT
??_C@_0BL@FBJLFMJ@CTRL?$CLclick?5to?5input?5value?4?$AA@ DB 'CTRL+click t'
	DB	'o input value.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@INJDAFHM@slider?5int?$AA@
CONST	SEGMENT
??_C@_0L@INJDAFHM@slider?5int?$AA@ DB 'slider int', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@NOCPNFME@Widgets?1Basic?1SliderInt?0?5SliderF@
CONST	SEGMENT
??_C@_0CF@NOCPNFME@Widgets?1Basic?1SliderInt?0?5SliderF@ DB 'Widgets/Basi'
	DB	'c/SliderInt, SliderFloat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CIODINPI@drag?5small?5float?$AA@
CONST	SEGMENT
??_C@_0BB@CIODINPI@drag?5small?5float?$AA@ DB 'drag small float', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LHDHPMPH@?$CF?406f?5ns?$AA@
CONST	SEGMENT
??_C@_08LHDHPMPH@?$CF?406f?5ns?$AA@ DB '%.06f ns', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DLCOHHGO@drag?5float?$AA@
CONST	SEGMENT
??_C@_0L@DLCOHHGO@drag?5float?$AA@ DB 'drag float', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MCINAHBB@drag?5int?50?4?4100?$AA@
CONST	SEGMENT
??_C@_0BA@MCINAHBB@drag?5int?50?4?4100?$AA@ DB 'drag int 0..100', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04FCMNJMCO@?$CFd?$CF?$CF?$AA@
CONST	SEGMENT
??_C@_04FCMNJMCO@?$CFd?$CF?$CF?$AA@ DB '%d%%', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0HA@JJHPNEPM@Click?5and?5drag?5to?5edit?5value?4?6Ho@
CONST	SEGMENT
??_C@_0HA@JJHPNEPM@Click?5and?5drag?5to?5edit?5value?4?6Ho@ DB 'Click and'
	DB	' drag to edit value.', 0aH, 'Hold SHIFT/ALT for faster/slower'
	DB	' edit.', 0aH, 'Double-click or CTRL+click to input value.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EAMJBIPC@drag?5int?$AA@
CONST	SEGMENT
??_C@_08EAMJBIPC@drag?5int?$AA@ DB 'drag int', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CBDDBCCE@Widgets?1Basic?1DragInt?0?5DragFloat@
CONST	SEGMENT
??_C@_0CB@CBDDBCCE@Widgets?1Basic?1DragInt?0?5DragFloat@ DB 'Widgets/Basi'
	DB	'c/DragInt, DragFloat', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KKMOFJMF@input?5float3?$AA@
CONST	SEGMENT
??_C@_0N@KKMOFJMF@input?5float3?$AA@ DB 'input float3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@KKFDAGLG@You?5can?5input?5value?5using?5the?5sc@
CONST	SEGMENT
??_C@_0FG@KKFDAGLG@You?5can?5input?5value?5using?5the?5sc@ DB 'You can in'
	DB	'put value using the scientific notation,', 0aH, '  e.g. "1e+8'
	DB	'" becomes "100000000".', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MKDEHDDF@input?5scientific?$AA@
CONST	SEGMENT
??_C@_0BB@MKDEHDDF@input?5scientific?$AA@ DB 'input scientific', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02CGLCDNAE@?$CFe?$AA@
CONST	SEGMENT
??_C@_02CGLCDNAE@?$CFe?$AA@ DB '%e', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HNPEBCJF@input?5double?$AA@
CONST	SEGMENT
??_C@_0N@HNPEBCJF@input?5double?$AA@ DB 'input double', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GJMOAIJC@?$CF?48f?$AA@
CONST	SEGMENT
??_C@_04GJMOAIJC@?$CF?48f?$AA@ DB '%.8f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HLMFPLHI@input?5float?$AA@
CONST	SEGMENT
??_C@_0M@HLMFPLHI@input?5float?$AA@ DB 'input float', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GFJLOHHD@?$CF?43f?$AA@
CONST	SEGMENT
??_C@_04GFJLOHHD@?$CF?43f?$AA@ DB '%.3f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KJGAAOJL@input?5int?$AA@
CONST	SEGMENT
??_C@_09KJGAAOJL@input?5int?$AA@ DB 'input int', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@BADBEAE@Widgets?1Basic?1InputInt?0?5InputFlo@
CONST	SEGMENT
??_C@_0CD@BADBEAE@Widgets?1Basic?1InputInt?0?5InputFlo@ DB 'Widgets/Basic'
	DB	'/InputInt, InputFloat', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FKMBICKL@input?5text?5?$CIw?1?5hint?$CJ?$AA@
CONST	SEGMENT
??_C@_0BF@FKMBICKL@input?5text?5?$CIw?1?5hint?$CJ?$AA@ DB 'input text (w/'
	DB	' hint)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DCMOPOEB@enter?5text?5here?$AA@
CONST	SEGMENT
??_C@_0BA@DCMOPOEB@enter?5text?5here?$AA@ DB 'enter text here', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJJ@PIFHNINF@USER?3?6Hold?5SHIFT?5or?5use?5mouse?5to@
CONST	SEGMENT
??_C@_0BJJ@PIFHNINF@USER?3?6Hold?5SHIFT?5or?5use?5mouse?5to@ DB 'USER:', 0aH
	DB	'Hold SHIFT or use mouse to select text.', 0aH, 'CTRL+Left/Rig'
	DB	'ht to word jump.', 0aH, 'CTRL+A or Double-Click to select all'
	DB	'.', 0aH, 'CTRL+X,CTRL+C,CTRL+V clipboard.', 0aH, 'CTRL+Z,CTRL'
	DB	'+Y undo/redo.', 0aH, 'ESCAPE to revert.', 0aH, 0aH, 'PROGRAMM'
	DB	'ER:', 0aH, 'You can use the ImGuiInputTextFlags_CallbackResiz'
	DB	'e facility if you need to wire InputText() to a dynamic strin'
	DB	'g type. See misc/cpp/imgui_stdlib.h for an example (this is n'
	DB	'ot demonstrated in imgui_demo.cpp).', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GKEMLLGG@input?5text?$AA@
CONST	SEGMENT
??_C@_0L@GKEMLLGG@input?5text?$AA@ DB 'input text', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EBJBEBDI@Widgets?1Basic?1InputText?$AA@
CONST	SEGMENT
??_C@_0BI@EBJBEBDI@Widgets?1Basic?1InputText?$AA@ DB 'Widgets/Basic/Input'
	DB	'Text', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05IDCCNNGI@label?$AA@
CONST	SEGMENT
??_C@_05IDCCNNGI@label?$AA@ DB 'label', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LPIJGKJ@Value?$AA@
CONST	SEGMENT
??_C@_05LPIJGKJ@Value?$AA@ DB 'Value', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@OEHHDLEI@Tooltip?5are?5created?5by?5using?5the@
CONST	SEGMENT
??_C@_0FB@OEHHDLEI@Tooltip?5are?5created?5by?5using?5the@ DB 'Tooltip are'
	DB	' created by using the IsItemHovered() function over any kind '
	DB	'of item.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GILFHKEA@I?5am?5a?5tooltip?5with?5a?5delay?4?$AA@
CONST	SEGMENT
??_C@_0BN@GILFHKEA@I?5am?5a?5tooltip?5with?5a?5delay?4?$AA@ DB 'I am a to'
	DB	'oltip with a delay.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMFKFGGB@Delayed?$AA@
CONST	SEGMENT
??_C@_07GMFKFGGB@Delayed?$AA@ DB 'Delayed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IAGOFNGP@Sin?$CItime?$CJ?5?$DN?5?$CFf?$AA@
CONST	SEGMENT
??_C@_0P@IAGOFNGP@Sin?$CItime?$CJ?5?$DN?5?$CFf?$AA@ DB 'Sin(time) = %f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05HPADKKDG@Curve?$AA@
CONST	SEGMENT
??_C@_05HPADKKDG@Curve?$AA@ DB 'Curve', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CIONDOGG@I?5am?5a?5fancy?5tooltip?$AA@
CONST	SEGMENT
??_C@_0BF@CIONDOGG@I?5am?5a?5fancy?5tooltip?$AA@ DB 'I am a fancy tooltip'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_05FMPLNOCG@Fancy?$AA@
CONST	SEGMENT
??_C@_05FMPLNOCG@Fancy?$AA@ DB 'Fancy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HKPBNOOC@I?5am?5a?5tooltip?$AA@
CONST	SEGMENT
??_C@_0P@HKPBNOOC@I?5am?5a?5tooltip?$AA@ DB 'I am a tooltip', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HGDNJJEP@Tooltips?3?$AA@
CONST	SEGMENT
??_C@_09HGDNJJEP@Tooltips?3?$AA@ DB 'Tooltips:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BNGBGPGO@Widgets?1Basic?1Tooltips?$AA@
CONST	SEGMENT
??_C@_0BH@BNGBGPGO@Widgets?1Basic?1Tooltips?$AA@ DB 'Widgets/Basic/Toolti'
	DB	'ps', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GKNPDGAE@?$CD?$CDright?$AA@
CONST	SEGMENT
??_C@_07GKNPDGAE@?$CD?$CDright?$AA@ DB '##right', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EKMNOCAF@?$CD?$CDleft?$AA@
CONST	SEGMENT
??_C@_06EKMNOCAF@?$CD?$CDleft?$AA@ DB '##left', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NDENGMIB@Widgets?1Basic?1Buttons?5?$CIRepeating@
CONST	SEGMENT
??_C@_0CC@NDENGMIB@Widgets?1Basic?1Buttons?5?$CIRepeating@ DB 'Widgets/Ba'
	DB	'sic/Buttons (Repeating)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FMOKFMLK@Hold?5to?5repeat?3?$AA@
CONST	SEGMENT
??_C@_0BA@FMOKFMLK@Hold?5to?5repeat?3?$AA@ DB 'Hold to repeat:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05BBIFMDEO@Click?$AA@
CONST	SEGMENT
??_C@_05BBIFMDEO@Click?$AA@ DB 'Click', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HMPFCLAN@Widgets?1Basic?1Buttons?5?$CIColored?$CJ?$AA@
CONST	SEGMENT
??_C@_0CA@HMPFCLAN@Widgets?1Basic?1Buttons?5?$CIColored?$CJ?$AA@ DB 'Widg'
	DB	'ets/Basic/Buttons (Colored)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ELPGDAIL@radio?5c?$AA@
CONST	SEGMENT
??_C@_07ELPGDAIL@radio?5c?$AA@ DB 'radio c', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FCONABMK@radio?5b?$AA@
CONST	SEGMENT
??_C@_07FCONABMK@radio?5b?$AA@ DB 'radio b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HJMAFCAJ@radio?5a?$AA@
CONST	SEGMENT
??_C@_07HJMAFCAJ@radio?5a?$AA@ DB 'radio a', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MHILAAII@Widgets?1Basic?1RadioButton?$AA@
CONST	SEGMENT
??_C@_0BK@MHILAAII@Widgets?1Basic?1RadioButton?$AA@ DB 'Widgets/Basic/Rad'
	DB	'ioButton', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08PDFIPFLP@checkbox?$AA@
CONST	SEGMENT
??_C@_08PDFIPFLP@checkbox?$AA@ DB 'checkbox', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@ELBMBOIA@Widgets?1Basic?1Checkbox?$AA@
CONST	SEGMENT
??_C@_0BH@ELBMBOIA@Widgets?1Basic?1Checkbox?$AA@ DB 'Widgets/Basic/Checkb'
	DB	'ox', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IPKGBENJ@Thanks?5for?5clicking?5me?$CB?$AA@
CONST	SEGMENT
??_C@_0BI@IPKGBENJ@Thanks?5for?5clicking?5me?$CB?$AA@ DB 'Thanks for clic'
	DB	'king me!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06LKBCGDFD@Button?$AA@
CONST	SEGMENT
??_C@_06LKBCGDFD@Button?$AA@ DB 'Button', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ICEAACFD@Widgets?1Basic?1Button?$AA@
CONST	SEGMENT
??_C@_0BF@ICEAACFD@Widgets?1Basic?1Button?$AA@ DB 'Widgets/Basic/Button', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05NIKDGMHP@Basic?$AA@
CONST	SEGMENT
??_C@_05NIKDGMHP@Basic?$AA@ DB 'Basic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KAGKFDNH@Widgets?1Basic?$AA@
CONST	SEGMENT
??_C@_0O@KAGKFDNH@Widgets?1Basic?$AA@ DB 'Widgets/Basic', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DIHFNIOG@Widgets?$AA@
CONST	SEGMENT
??_C@_07DIHFNIOG@Widgets?$AA@ DB 'Widgets', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GE@PBHHHBJD@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi?$AAI?$AAn?$AAp?$AAu?$AAt?$AAT?$AAe?$AAx?$AAt?$AAF?$AAl?$AAa?$AAg?$AAs?$AA_?$AAC?$AAa?$AAl@
CONST	SEGMENT
??_C@_1GE@PBHHHBJD@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi?$AAI?$AAn?$AAp?$AAu?$AAt?$AAT?$AAe?$AAx?$AAt?$AAF?$AAl?$AAa?$AAg?$AAs?$AA_?$AAC?$AAa?$AAl@ DB '('
	DB	00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H
	DB	'&', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i'
	DB	00H, 'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'F', 00H, 'l', 00H, 'a', 00H, 'g'
	DB	00H, 's', 00H, '_', 00H, 'C', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'R', 00H, 'e', 00H, 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ')', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@GBCOMGGK@?$AAm?$AAy?$AA_?$AAs?$AAt?$AAr?$AA?9?$AA?$DO?$AAb?$AAe?$AAg?$AAi?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAB?$AAu?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@GBCOMGGK@?$AAm?$AAy?$AA_?$AAs?$AAt?$AAr?$AA?9?$AA?$DO?$AAb?$AAe?$AAg?$AAi?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAB?$AAu?$AAf?$AA?$AA@ DB 'm'
	DB	00H, 'y', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H, '-', 00H
	DB	'>', 00H, 'b', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n', 00H, '('
	DB	00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'd', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, '-', 00H, '>', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CDNFAFCH@Pressed?5Down?$CB?$AA@
CONST	SEGMENT
??_C@_0O@CDNFAFCH@Pressed?5Down?$CB?$AA@ DB 'Pressed Down!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GNLHKNNA@Pressed?5Up?$CB?$AA@
CONST	SEGMENT
??_C@_0M@GNLHKNNA@Pressed?5Up?$CB?$AA@ DB 'Pressed Up!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DJGKEECL@?4?4?$AA@
CONST	SEGMENT
??_C@_02DJGKEECL@?4?4?$AA@ DB '..', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05EAJAAGNN@imgui?$AA@
CONST	SEGMENT
??_C@_05EAJAAGNN@imgui?$AA@ DB 'imgui', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA DD 0223H ; `ShowDemoWindowWidgets'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BB@BPJMKDGK@Unsaved?5document?$AA@
CONST	SEGMENT
??_C@_0BB@BPJMKDGK@Unsaved?5document?$AA@ DB 'Unsaved document', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FKMLNKJL@No?5bring?5to?5front?$AA@
CONST	SEGMENT
??_C@_0BC@FKMLNKJL@No?5bring?5to?5front?$AA@ DB 'No bring to front', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EHIGJHPL@No?5background?$AA@
CONST	SEGMENT
??_C@_0O@EHIGJHPL@No?5background?$AA@ DB 'No background', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KFENEDHJ@No?5nav?$AA@
CONST	SEGMENT
??_C@_06KFENEDHJ@No?5nav?$AA@ DB 'No nav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DGAKPBEJ@No?5close?$AA@
CONST	SEGMENT
??_C@_08DGAKPBEJ@No?5close?$AA@ DB 'No close', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PFMGNBM@No?5collapse?$AA@
CONST	SEGMENT
??_C@_0M@PFMGNBM@No?5collapse?$AA@ DB 'No collapse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HMNEIDKA@No?5resize?$AA@
CONST	SEGMENT
??_C@_09HMNEIDKA@No?5resize?$AA@ DB 'No resize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07JGIJBGNK@No?5move?$AA@
CONST	SEGMENT
??_C@_07JGIJBGNK@No?5move?$AA@ DB 'No move', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KBMDBGCH@No?5menu?$AA@
CONST	SEGMENT
??_C@_07KBMDBGCH@No?5menu?$AA@ DB 'No menu', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GGGGKBFF@No?5scrollbar?$AA@
CONST	SEGMENT
??_C@_0N@GGGGKBFF@No?5scrollbar?$AA@ DB 'No scrollbar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EABCFDNG@No?5titlebar?$AA@
CONST	SEGMENT
??_C@_0M@EABCFDNG@No?5titlebar?$AA@ DB 'No titlebar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05EHPMMFBK@split?$AA@
CONST	SEGMENT
??_C@_05EHPMMFBK@split?$AA@ DB 'split', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FBBKILOB@Window?5options?$AA@
CONST	SEGMENT
??_C@_0P@FBBKILOB@Window?5options?$AA@ DB 'Window options', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GEHPLBPJ@Hello?0?5world?$CB?$AA@
CONST	SEGMENT
??_C@_0O@GEHPLBPJ@Hello?0?5world?$CB?$AA@ DB 'Hello, world!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DLICJJEI@Copy?5?$CCHello?0?5world?$CB?$CC?5to?5clipboar@
CONST	SEGMENT
??_C@_0CC@DLICJJEI@Copy?5?$CCHello?0?5world?$CB?$CC?5to?5clipboar@ DB 'Co'
	DB	'py "Hello, world!" to clipboard', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@CDOBPMKK@You?5can?5also?5call?5ImGui?3?3LogText@
CONST	SEGMENT
??_C@_0FK@CDOBPMKK@You?5can?5also?5call?5ImGui?3?3LogText@ DB 'You can al'
	DB	'so call ImGui::LogText() to output directly to the log withou'
	DB	't a visual output.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0PC@PAKMBOJC@The?5logging?5API?5redirects?5all?5te@
CONST	SEGMENT
??_C@_0PC@PAKMBOJC@The?5logging?5API?5redirects?5all?5te@ DB 'The logging'
	DB	' API redirects all text output so you can easily capture the '
	DB	'content of a window or a block. Tree nodes can be automatical'
	DB	'ly expanded.', 0aH, 'Try opening any of the contents below in'
	DB	' this window and then click one of the "Log To" button.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BMMAIOLM@Capture?1Logging?$AA@
CONST	SEGMENT
??_C@_0BA@BMMAIOLM@Capture?1Logging?$AA@ DB 'Capture/Logging', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HOEFEDAL@Configuration?1Capture?0?5Logging?$AA@
CONST	SEGMENT
??_C@_0BP@HOEFEDAL@Configuration?1Capture?0?5Logging?$AA@ DB 'Configurati'
	DB	'on/Capture, Logging', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@COKJKNBB@The?5same?5contents?5can?5be?5accesse@
CONST	SEGMENT
??_C@_0GJ@COKJKNBB@The?5same?5contents?5can?5be?5accesse@ DB 'The same co'
	DB	'ntents can be accessed in ''Tools->Style Editor'' or by calli'
	DB	'ng the ShowStyleEditor() function.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHAFCALK@Style?$AA@
CONST	SEGMENT
??_C@_05IHAFCALK@Style?$AA@ DB 'Style', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IHLGIHAH@Configuration?1Style?$AA@
CONST	SEGMENT
??_C@_0BE@IHLGIHAH@Configuration?1Style?$AA@ DB 'Configuration/Style', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EKAIMAPC@io?4BackendFlags?3?5RendererHasVtxO@
CONST	SEGMENT
??_C@_0CG@EKAIMAPC@io?4BackendFlags?3?5RendererHasVtxO@ DB 'io.BackendFla'
	DB	'gs: RendererHasVtxOffset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JKLPDGP@io?4BackendFlags?3?5HasSetMousePos?$AA@
CONST	SEGMENT
??_C@_0CA@JKLPDGP@io?4BackendFlags?3?5HasSetMousePos?$AA@ DB 'io.BackendF'
	DB	'lags: HasSetMousePos', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OGFIDKNB@io?4BackendFlags?3?5HasMouseCursors@
CONST	SEGMENT
??_C@_0CB@OGFIDKNB@io?4BackendFlags?3?5HasMouseCursors@ DB 'io.BackendFla'
	DB	'gs: HasMouseCursors', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KECFJBMD@io?4BackendFlags?3?5HasGamepad?$AA@
CONST	SEGMENT
??_C@_0BM@KECFJBMD@io?4BackendFlags?3?5HasGamepad?$AA@ DB 'io.BackendFlag'
	DB	's: HasGamepad', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0LE@FBDHIPGL@Those?5flags?5are?5set?5by?5the?5backe@
CONST	SEGMENT
??_C@_0LE@FBDHIPGL@Those?5flags?5are?5set?5by?5the?5backe@ DB 'Those flag'
	DB	's are set by the backends (imgui_impl_xxx files) to specify t'
	DB	'heir capabilities.', 0aH, 'Here we expose them as read-only f'
	DB	'ields to avoid breaking interactions with your backend.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GGPAPCP@Backend?5Flags?$AA@
CONST	SEGMENT
??_C@_0O@GGPAPCP@Backend?5Flags?$AA@ DB 'Backend Flags', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FFMOEAGC@Configuration?1Backend?5Flags?$AA@
CONST	SEGMENT
??_C@_0BM@FFMOEAGC@Configuration?1Backend?5Flags?$AA@ DB 'Configuration/B'
	DB	'ackend Flags', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@KCBPEEMI@Also?5see?5Style?9?$DORendering?5for?5re@
CONST	SEGMENT
??_C@_0DB@KCBPEEMI@Also?5see?5Style?9?$DORendering?5for?5re@ DB 'Also see'
	DB	' Style->Rendering for rendering options.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BFK@CKDHFBDH@Instruct?5Dear?5ImGui?5to?5render?5a?5@
CONST	SEGMENT
??_C@_0BFK@CKDHFBDH@Instruct?5Dear?5ImGui?5to?5render?5a?5@ DB 'Instruct '
	DB	'Dear ImGui to render a mouse cursor itself. Note that a mouse'
	DB	' cursor rendered via your application GPU rendering path will'
	DB	' feel more laggy than hardware cursor, but will be more in sy'
	DB	'nc with your other visuals.', 0aH, 0aH, 'Some desktop applica'
	DB	'tions may use both kinds of cursors (e.g. enable software cur'
	DB	'sor only when resizing/dragging something).', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PFDMJJAG@io?4MouseDrawCursor?$AA@
CONST	SEGMENT
??_C@_0BD@PFDMJJAG@io?4MouseDrawCursor?$AA@ DB 'io.MouseDrawCursor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PKBLIGGG@io?4ConfigWindowsMoveFromTitleBar@
CONST	SEGMENT
??_C@_0CF@PKBLIGGG@io?4ConfigWindowsMoveFromTitleBar@ DB 'io.ConfigWindow'
	DB	'sMoveFromTitleBarOnly', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0LI@DCCFFPOA@Enable?5resizing?5of?5windows?5from?5@
CONST	SEGMENT
??_C@_0LI@DCCFFPOA@Enable?5resizing?5of?5windows?5from?5@ DB 'Enable resi'
	DB	'zing of windows from their edges and from the lower-left corn'
	DB	'er.', 0aH, 'This requires (io.BackendFlags & ImGuiBackendFlag'
	DB	's_HasMouseCursors) because it needs mouse cursor feedback.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IFIIDADM@io?4ConfigWindowsResizeFromEdges?$AA@
CONST	SEGMENT
??_C@_0CA@IFIIDADM@io?4ConfigWindowsResizeFromEdges?$AA@ DB 'io.ConfigWin'
	DB	'dowsResizeFromEdges', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@MCICHOGF@Enable?5turning?5DragXXX?5widgets?5i@
CONST	SEGMENT
??_C@_0GD@MCICHOGF@Enable?5turning?5DragXXX?5widgets?5i@ DB 'Enable turni'
	DB	'ng DragXXX widgets into text input with a simple mouse click-'
	DB	'release (without moving).', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DELEKPMI@io?4ConfigDragClickToInputText?$AA@
CONST	SEGMENT
??_C@_0BO@DELEKPMI@io?4ConfigDragClickToInputText?$AA@ DB 'io.ConfigDragC'
	DB	'lickToInputText', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@DGPMAAAP@Pressing?5Enter?5will?5keep?5item?5ac@
CONST	SEGMENT
??_C@_0EN@DGPMAAAP@Pressing?5Enter?5will?5keep?5item?5ac@ DB 'Pressing En'
	DB	'ter will keep item active and select contents (single-line on'
	DB	'ly).', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CDNGJGDB@io?4ConfigInputTextEnterKeepActiv@
CONST	SEGMENT
??_C@_0CC@CDNGJGDB@io?4ConfigInputTextEnterKeepActiv@ DB 'io.ConfigInputT'
	DB	'extEnterKeepActive', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@OGONDEMG@Enable?5blinking?5cursor?5?$CIoptional@
CONST	SEGMENT
??_C@_0EP@OGONDEMG@Enable?5blinking?5cursor?5?$CIoptional@ DB 'Enable bli'
	DB	'nking cursor (optional as some users consider it to be distra'
	DB	'cting).', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GBANMLLJ@io?4ConfigInputTextCursorBlink?$AA@
CONST	SEGMENT
??_C@_0BO@GBANMLLJ@io?4ConfigInputTextCursorBlink?$AA@ DB 'io.ConfigInput'
	DB	'TextCursorBlink', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0LM@IEPLLLKB@Enable?5input?5queue?5trickling?3?5so@
CONST	SEGMENT
??_C@_0LM@IEPLLLKB@Enable?5input?5queue?5trickling?3?5so@ DB 'Enable inpu'
	DB	't queue trickling: some types of events submitted during the '
	DB	'same frame (e.g. button down + up) will be spread over multip'
	DB	'le frames, improving interactions with low framerates.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FACKLLEL@io?4ConfigInputTrickleEventQueue?$AA@
CONST	SEGMENT
??_C@_0CA@FACKLLEL@io?4ConfigInputTrickleEventQueue?$AA@ DB 'io.ConfigInp'
	DB	'utTrickleEventQueue', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@JJIOMJIM@Instruct?5backend?5to?5not?5alter?5mo@
CONST	SEGMENT
??_C@_0EB@JJIOMJIM@Instruct?5backend?5to?5not?5alter?5mo@ DB 'Instruct ba'
	DB	'ckend to not alter mouse cursor shape and visibility.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KNKEEHDL@io?4ConfigFlags?3?5NoMouseCursorCha@
CONST	SEGMENT
??_C@_0CE@KNKEEHDL@io?4ConfigFlags?3?5NoMouseCursorCha@ DB 'io.ConfigFlag'
	DB	's: NoMouseCursorChange', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MKGMHIPJ@?$DM?$DMPRESS?5SPACE?5TO?5DISABLE?$DO?$DO?$AA@
CONST	SEGMENT
??_C@_0BL@MKGMHIPJ@?$DM?$DMPRESS?5SPACE?5TO?5DISABLE?$DO?$DO?$AA@ DB '<<P'
	DB	'RESS SPACE TO DISABLE>>', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FJCAMGFF@io?4ConfigFlags?3?5NoMouse?$AA@
CONST	SEGMENT
??_C@_0BI@FJCAMGFF@io?4ConfigFlags?3?5NoMouse?$AA@ DB 'io.ConfigFlags: No'
	DB	'Mouse', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@EIFIGBGA@Instruct?5navigation?5to?5move?5the?5@
CONST	SEGMENT
??_C@_0GF@EIFIGBGA@Instruct?5navigation?5to?5move?5the?5@ DB 'Instruct na'
	DB	'vigation to move the mouse cursor. See comment for ImGuiConfi'
	DB	'gFlags_NavEnableSetMousePos.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BBHAMFJD@io?4ConfigFlags?3?5NavEnableSetMous@
CONST	SEGMENT
??_C@_0CF@BBHAMFJD@io?4ConfigFlags?3?5NavEnableSetMous@ DB 'io.ConfigFlag'
	DB	's: NavEnableSetMousePos', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0IO@MJIBAPFF@Enable?5gamepad?5controls?4?5Require@
CONST	SEGMENT
??_C@_0IO@MJIBAPFF@Enable?5gamepad?5controls?4?5Require@ DB 'Enable gamep'
	DB	'ad controls. Require backend to set io.BackendFlags |= ImGuiB'
	DB	'ackendFlags_HasGamepad.', 0aH, 0aH, 'Read instructions in img'
	DB	'ui.cpp for details.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MCNBOBFF@io?4ConfigFlags?3?5NavEnableGamepad@
CONST	SEGMENT
??_C@_0CB@MCNBOBFF@io?4ConfigFlags?3?5NavEnableGamepad@ DB 'io.ConfigFlag'
	DB	's: NavEnableGamepad', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OJOJPPOF@Enable?5keyboard?5controls?4?$AA@
CONST	SEGMENT
??_C@_0BK@OJOJPPOF@Enable?5keyboard?5controls?4?$AA@ DB 'Enable keyboard '
	DB	'controls.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MKDHACD@io?4ConfigFlags?3?5NavEnableKeyboar@
CONST	SEGMENT
??_C@_0CC@MKDHACD@io?4ConfigFlags?3?5NavEnableKeyboar@ DB 'io.ConfigFlags'
	DB	': NavEnableKeyboard', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DLCAGGKD@Configuration?$CD?$CD2?$AA@
CONST	SEGMENT
??_C@_0BB@DLCAGGKD@Configuration?$CD?$CD2?$AA@ DB 'Configuration##2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PIILMNHI@Configuration?$AA@
CONST	SEGMENT
??_C@_0O@PIILMNHI@Configuration?$AA@ DB 'Configuration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NDGNNOFI@USER?5GUIDE?3?$AA@
CONST	SEGMENT
??_C@_0M@NDGNNOFI@USER?5GUIDE?3?$AA@ DB 'USER GUIDE:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@CIADOILL@Set?5?8io?4ConfigFlags?5?$HM?$DN?5NavEnable@
CONST	SEGMENT
??_C@_0DP@CIADOILL@Set?5?8io?4ConfigFlags?5?$HM?$DN?5NavEnable@ DB 'Set '''
	DB	'io.ConfigFlags |= NavEnableGamepad'' for gamepad controls.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@MLAMCLHL@Set?5?8io?4ConfigFlags?5?$HM?$DN?5NavEnable@
CONST	SEGMENT
??_C@_0EB@MLAMCLHL@Set?5?8io?4ConfigFlags?5?$HM?$DN?5NavEnable@ DB 'Set '''
	DB	'io.ConfigFlags |= NavEnableKeyboard'' for keyboard controls.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IHPGPBLH@Read?5the?5FAQ?5at?5http?3?1?1www?4deari@
CONST	SEGMENT
??_C@_0CO@IHPGPBLH@Read?5the?5FAQ?5at?5http?3?1?1www?4deari@ DB 'Read the'
	DB	' FAQ at http://www.dearimgui.org/faq/', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@LILBLMCJ@See?5example?5applications?5in?5the?5@
CONST	SEGMENT
??_C@_0DC@LILBLMCJ@See?5example?5applications?5in?5the?5@ DB 'See example'
	DB	' applications in the examples/ folder.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CMPGJGKF@See?5comments?5in?5imgui?4cpp?4?$AA@
CONST	SEGMENT
??_C@_0BL@CMPGJGKF@See?5comments?5in?5imgui?4cpp?4?$AA@ DB 'See comments '
	DB	'in imgui.cpp.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@GEILMFPK@See?5the?5ShowDemoWindow?$CI?$CJ?5code?5in@
CONST	SEGMENT
??_C@_0EC@GEILMFPK@See?5the?5ShowDemoWindow?$CI?$CJ?5code?5in@ DB 'See th'
	DB	'e ShowDemoWindow() code in imgui_demo.cpp. <- you are here!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GECCEBDK@PROGRAMMER?5GUIDE?3?$AA@
CONST	SEGMENT
??_C@_0BC@GECCEBDK@PROGRAMMER?5GUIDE?3?$AA@ DB 'PROGRAMMER GUIDE:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ID@INLAEEEH@The?5?$CCTools?$CC?5menu?5above?5gives?5acc@
CONST	SEGMENT
??_C@_0ID@INLAEEEH@The?5?$CCTools?$CC?5menu?5above?5gives?5acc@ DB 'The "'
	DB	'Tools" menu above gives access to: About Box, Style Editor,', 0aH
	DB	'and Metrics/Debugger (general purpose Dear ImGui debugging to'
	DB	'ol).', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@GKLDFKKO@The?5?$CCExamples?$CC?5menu?5above?5leads?5@
CONST	SEGMENT
??_C@_0DH@GKLDFKKO@The?5?$CCExamples?$CC?5menu?5above?5leads?5@ DB 'The "'
	DB	'Examples" menu above leads to more demo contents.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@FBJHOIEP@Sections?5below?5are?5demonstrating@
CONST	SEGMENT
??_C@_0DO@FBJHOIEP@Sections?5below?5are?5demonstrating@ DB 'Sections belo'
	DB	'w are demonstrating many aspects of the library.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LJBDHCFD@ABOUT?5THIS?5DEMO?3?$AA@
CONST	SEGMENT
??_C@_0BB@LJBDHCFD@ABOUT?5THIS?5DEMO?3?$AA@ DB 'ABOUT THIS DEMO:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DDFEFHOJ@Help?$AA@
CONST	SEGMENT
??_C@_04DDFEFHOJ@Help?$AA@ DB 'Help', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NIEBLCEF@dear?5imgui?5says?5hello?$CB?5?$CI?$CFs?$CJ?5?$CI?$CFd?$CJ@
CONST	SEGMENT
??_C@_0CB@NIEBLCEF@dear?5imgui?5says?5hello?$CB?5?$CI?$CFs?$CJ?5?$CI?$CFd?$CJ@ DB 'd'
	DB	'ear imgui says hello! (%s) (%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GMOEAHPG@1?489?43?5WIP?$AA@
CONST	SEGMENT
??_C@_0L@GMOEAHPG@1?489?43?5WIP?$AA@ DB '1.89.3 WIP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NKKLPDOL@About?5Dear?5ImGui?$AA@
CONST	SEGMENT
??_C@_0BB@NKKLPDOL@About?5Dear?5ImGui?$AA@ DB 'About Dear ImGui', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GJBKNEHA@Style?5Editor?$AA@
CONST	SEGMENT
??_C@_0N@GJBKNEHA@Style?5Editor?$AA@ DB 'Style Editor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DFPCNJKK@Stack?5Tool?$AA@
CONST	SEGMENT
??_C@_0L@DFPCNJKK@Stack?5Tool?$AA@ DB 'Stack Tool', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NNILCKOM@Debug?5Log?$AA@
CONST	SEGMENT
??_C@_09NNILCKOM@Debug?5Log?$AA@ DB 'Debug Log', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DAKIBJMB@Metrics?1Debugger?$AA@
CONST	SEGMENT
??_C@_0BB@DAKIBJMB@Metrics?1Debugger?$AA@ DB 'Metrics/Debugger', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FNGJAMCB@Menu?1Tools?$AA@
CONST	SEGMENT
??_C@_0L@FNGJAMCB@Menu?1Tools?$AA@ DB 'Menu/Tools', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OENKALAF@Tools?$AA@
CONST	SEGMENT
??_C@_05OENKALAF@Tools?$AA@ DB 'Tools', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09IBGBKIMC@Documents?$AA@
CONST	SEGMENT
??_C@_09IBGBKIMC@Documents?$AA@ DB 'Documents', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MLNDPKFI@Custom?5rendering?$AA@
CONST	SEGMENT
??_C@_0BB@MLNDPKFI@Custom?5rendering?$AA@ DB 'Custom rendering', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MDGJIIDL@Manipulating?5window?5titles?$AA@
CONST	SEGMENT
??_C@_0BL@MDGJIIDL@Manipulating?5window?5titles?$AA@ DB 'Manipulating win'
	DB	'dow titles', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EPMOEMI@Fullscreen?5window?$AA@
CONST	SEGMENT
??_C@_0BC@EPMOEMI@Fullscreen?5window?$AA@ DB 'Fullscreen window', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IMGHCBNF@Simple?5overlay?$AA@
CONST	SEGMENT
??_C@_0P@IMGHCBNF@Simple?5overlay?$AA@ DB 'Simple overlay', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CJMMFMCL@Constrained?9resizing?5window?$AA@
CONST	SEGMENT
??_C@_0BM@CJMMFMCL@Constrained?9resizing?5window?$AA@ DB 'Constrained-res'
	DB	'izing window', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OHKJAELB@Auto?9resizing?5window?$AA@
CONST	SEGMENT
??_C@_0BF@OHKJAELB@Auto?9resizing?5window?$AA@ DB 'Auto-resizing window', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@INJCBODH@Long?5text?5display?$AA@
CONST	SEGMENT
??_C@_0BC@INJCBODH@Long?5text?5display?$AA@ DB 'Long text display', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DNAHAJCI@Property?5editor?$AA@
CONST	SEGMENT
??_C@_0BA@DNAHAJCI@Property?5editor?$AA@ DB 'Property editor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JBJOEMFC@Simple?5layout?$AA@
CONST	SEGMENT
??_C@_0O@JBJOEMFC@Simple?5layout?$AA@ DB 'Simple layout', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03GGEOLGBL@Log?$AA@
CONST	SEGMENT
??_C@_03GGEOLGBL@Log?$AA@ DB 'Log', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07PGLPGHFC@Console?$AA@
CONST	SEGMENT
??_C@_07PGLPGHFC@Console?$AA@ DB 'Console', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ECNFCDDH@Main?5menu?5bar?$AA@
CONST	SEGMENT
??_C@_0O@ECNFCDDH@Main?5menu?5bar?$AA@ DB 'Main menu bar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ILKMGNBH@Menu?1Examples?$AA@
CONST	SEGMENT
??_C@_0O@ILKMGNBH@Menu?1Examples?$AA@ DB 'Menu/Examples', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KJMBPHGD@Examples?$AA@
CONST	SEGMENT
??_C@_08KJMBPHGD@Examples?$AA@ DB 'Examples', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
CONST	SEGMENT
??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@ DB 'c:\github\'
	DB	'framework\tool\imgui\imgui_demo.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CENEJNFC@Menu?1File?$AA@
CONST	SEGMENT
??_C@_09CENEJNFC@Menu?1File?$AA@ DB 'Menu/File', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IFEHPILC@Menu?$AA@
CONST	SEGMENT
??_C@_04IFEHPILC@Menu?$AA@ DB 'Menu', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IGMFAKOE@Dear?5ImGui?5Demo?$AA@
CONST	SEGMENT
??_C@_0BA@IGMFAKOE@Dear?5ImGui?5Demo?$AA@ DB 'Dear ImGui Demo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DDJBLHAK@Dear?5ImGui?5Style?5Editor?$AA@
CONST	SEGMENT
??_C@_0BI@DDJBLHAK@Dear?5ImGui?5Style?5Editor?$AA@ DB 'Dear ImGui Style E'
	DB	'ditor', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1LA@COADBOEK@?$AAI?$AAm?$AAG?$AAu?$AAi?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5@
CONST	SEGMENT
??_C@_1LA@COADBOEK@?$AAI?$AAm?$AAG?$AAu?$AAi?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5@ DB 'I'
	DB	00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i', 00H, ':', 00H, ':', 00H
	DB	'G', 00H, 'e', 00H, 't', 00H, 'C', 00H, 'u', 00H, 'r', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, 'C', 00H, 'o', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'x', 00H, 't', 00H, '(', 00H, ')', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '"', 00H, 'M', 00H, 'i', 00H, 's', 00H, 's'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'd', 00H, 'e', 00H
	DB	'a', 00H, 'r', 00H, ' ', 00H, 'i', 00H, 'm', 00H, 'g', 00H, 'u'
	DB	00H, 'i', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, '.', 00H, ' ', 00H, 'R', 00H, 'e'
	DB	00H, 'f', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 't', 00H, 'o', 00H
	DB	' ', 00H, 'e', 00H, 'x', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, 'a', 00H, 'p', 00H, 'p', 00H
	DB	'!', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FM@DPDGFNDC@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
CONST	SEGMENT
??_C@_1FM@DPDGFNDC@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'f', 00H, 'r', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, 'w', 00H, 'o', 00H, 'r', 00H, 'k', 00H, '\', 00H
	DB	't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm', 00H
	DB	'g', 00H, 'u', 00H, 'i', 00H, '_', 00H, 'd', 00H, 'e', 00H, 'm'
	DB	00H, 'o', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@MGKHNCLH@Missing?5dear?5imgui?5context?4?5Refe@
CONST	SEGMENT
??_C@_0DD@MGKHNCLH@Missing?5dear?5imgui?5context?4?5Refe@ DB 'Missing dea'
	DB	'r imgui context. Refer to examples app!', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4JA DD 0f8H ; `ImGui::ShowDemoWindow'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03NAEMJKHE@?$CI?$DP?$CJ?$AA@
CONST	SEGMENT
??_C@_03NAEMJKHE@?$CI?$DP?$CJ?$AA@ DB '(?)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
CONST	SEGMENT
??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@ DB '<unknown>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@COLNJNAB@?$AAB?$AAu?$AAf?$AA?4?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@COLNJNAB@?$AAB?$AAu?$AAf?$AA?4?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'B'
	DB	00H, 'u', 00H, 'f', 00H, '.', 00H, 'D', 00H, 'a', 00H, 't', 00H
	DB	'a', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
CONST	SEGMENT
??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'g', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	'u', 00H, 'b', 00H, '\', 00H, 'f', 00H, 'r', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, 'w', 00H, 'o', 00H, 'r', 00H, 'k', 00H, '\', 00H
	DB	't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm', 00H
	DB	'g', 00H, 'u', 00H, 'i', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Fclose_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@PEAUMyDocument@@@@QEAAXAEBQEAUMyDocument@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@PEAUMyDocument@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@PEAUMyDocument@@@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@PEAUMyDocument@@@@QEAAAEAPEAUMyDocument@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?empty@?$ImVector@PEAUMyDocument@@@@QEBA_NXZ DD 05052801H
	DD	010e0311H
	DD	07007001bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@PEAUMyDocument@@@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@PEAUMyDocument@@@@QEAA@XZ DD imagerel ??1?$ImVector@PEAUMyDocument@@@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@PEAUMyDocument@@@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@PEAUMyDocument@@@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@PEAUMyDocument@@@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@PEAUMyDocument@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@PEAUMyDocument@@@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Fapp@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?NotifyOfDocumentsClosedElsewhere@@YAXAEAUExampleAppDocuments@@@Z DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ExampleAppDocuments@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ExampleAppDocuments@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ExampleAppDocuments@@QEAA@XZ DD imagerel ??0ExampleAppDocuments@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0ExampleAppDocuments@@QEAA@XZ+69
	DD	00H
	DD	imagerel ??0ExampleAppDocuments@@QEAA@XZ+610
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ExampleAppDocuments@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0ExampleAppDocuments@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ExampleAppDocuments@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0ExampleAppDocuments@@QEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0ExampleAppDocuments@@QEAA@XZ
	DD	0458H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ExampleAppDocuments@@QEAA@XZ DD 035053511H
	DD	010e3313H
	DD	07007008fH
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ExampleAppDocuments@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@UMyDocument@@@@QEAAXAEBUMyDocument@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UMyDocument@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UMyDocument@@@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UMyDocument@@@@QEAAAEAUMyDocument@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UMyDocument@@@@QEAA@XZ DD imagerel ??1?$ImVector@UMyDocument@@@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@UMyDocument@@@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@UMyDocument@@@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UMyDocument@@@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@UMyDocument@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UMyDocument@@@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DisplayContextMenu@MyDocument@@SAXPEAU1@@Z DD 025053b19H
	DD	010e2313H
	DD	070070041H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	01f8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?DisplayContextMenu@MyDocument@@SAXPEAU1@@Z$rtcName$0 DB 062H ; MyDocument::DisplayContextMenu
	DB	075H
	DB	066H
	DB	00H
	ORG $+12
?DisplayContextMenu@MyDocument@@SAXPEAU1@@Z$rtcVarDesc DD 030H ; MyDocument::DisplayContextMenu
	DD	0100H
	DQ	FLAT:?DisplayContextMenu@MyDocument@@SAXPEAU1@@Z$rtcName$0
	ORG $+48
?DisplayContextMenu@MyDocument@@SAXPEAU1@@Z$rtcFrameData DD 01H ; MyDocument::DisplayContextMenu
	DD	00H
	DQ	FLAT:?DisplayContextMenu@MyDocument@@SAXPEAU1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DisplayContents@MyDocument@@SAXPEAU1@@Z DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DoSave@MyDocument@@QEAAXXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DoForceClose@MyDocument@@QEAAXXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DoQueueClose@MyDocument@@QEAAXXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DoOpen@MyDocument@@QEAAXXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0MyDocument@@QEAA@PEBD_NAEBUImVec4@@@Z DD 025063a01H
	DD	011e2323H
	DD	07017001cH
	DD	050156016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Fpoints@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Step@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Square@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z DD 05052801H
	DD	010e0311H
	DD	07007001bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AspectRatio@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z DD 05052801H
	DD	010e0311H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Flog@?1??ShowExampleAppLongText@@YAXPEA_N@Z@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowPlaceholderObject@@YAXPEBDH@Z DD 045052e01H
	DD	01124317H
	DD	0700b002dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Flog@?1??ShowExampleAppLog@@YAXPEA_N@Z@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ExampleAppLog@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z DD imagerel ?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z
	DD	0ffffffffH
	DD	imagerel ?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z+854
	DD	00H
	DD	imagerel ?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z+1143
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z DD 025055019H
	DD	0118231dH
	DD	07011007fH
	DD	05010H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z
	DD	03e2H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z$rtcName$0 DB 063H	; ExampleAppLog::Draw
	DB	06cH
	DB	069H
	DB	070H
	DB	070H
	DB	065H
	DB	072H
	DB	00H
$cppxdata$?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z
	DD	03c8H
	DD	00H
	DD	01H
?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z$rtcVarDesc DD 0108H ; ExampleAppLog::Draw
	DD	020H
	DQ	FLAT:?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z$rtcName$0
	ORG $+48
?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z$rtcFrameData DD 01H ; ExampleAppLog::Draw
	DD	00H
	DQ	FLAT:?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddLog@ExampleAppLog@@QEAAXPEBDZZ DD 025054a19H
	DD	011d2322H
	DD	07016002dH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddLog@ExampleAppLog@@QEAAXPEBDZZ$rtcName$0 DB 061H	; ExampleAppLog::AddLog
	DB	072H
	DB	067H
	DB	073H
	DB	00H
	ORG $+11
?AddLog@ExampleAppLog@@QEAAXPEBDZZ$rtcVarDesc DD 048H	; ExampleAppLog::AddLog
	DD	08H
	DQ	FLAT:?AddLog@ExampleAppLog@@QEAAXPEBDZZ$rtcName$0
	ORG $+48
?AddLog@ExampleAppLog@@QEAAXPEBDZZ$rtcFrameData DD 01H	; ExampleAppLog::AddLog
	DD	00H
	DQ	FLAT:?AddLog@ExampleAppLog@@QEAAXPEBDZZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Clear@ExampleAppLog@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0???0ExampleAppLog@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0ExampleAppLog@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ExampleAppLog@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ExampleAppLog@@QEAA@XZ DD imagerel ??0ExampleAppLog@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0ExampleAppLog@@QEAA@XZ+69
	DD	00H
	DD	imagerel ??0ExampleAppLog@@QEAA@XZ+96
	DD	01H
	DD	imagerel ??0ExampleAppLog@@QEAA@XZ+118
	DD	02H
	DD	imagerel ??0ExampleAppLog@@QEAA@XZ+145
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ExampleAppLog@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0ExampleAppLog@@QEAA@XZ@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???0ExampleAppLog@@QEAA@XZ@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0???0ExampleAppLog@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ExampleAppLog@@QEAA@XZ DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$??0ExampleAppLog@@QEAA@XZ
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$??0ExampleAppLog@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ExampleAppLog@@QEAA@XZ DD 025053511H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ExampleAppLog@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Fconsole@?1??ShowExampleAppConsole@@YAXPEA_N@Z@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$__vcrt_va_start_verify_argument_type@PEBD@@YAXXZ DD 05051c01H
	DD	010a030dH
	DD	070030019H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z DD imagerel ?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z
	DD	0ffffffffH
	DD	imagerel ?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z+252
	DD	00H
	DD	imagerel ?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z+1082
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z DD 025054b19H
	DD	01132318H
	DD	0700c0055H
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z
	DD	0292H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z$rtcName$0 DB 063H ; ExampleAppConsole::TextEditCallback
	DB	061H
	DB	06eH
	DB	064H
	DB	069H
	DB	064H
	DB	061H
	DB	074H
	DB	065H
	DB	073H
	DB	00H
	ORG $+5
?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z$rtcVarDesc DD 088H ; ExampleAppConsole::TextEditCallback
	DD	010H
	DQ	FLAT:?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z$rtcName$0
	ORG $+48
?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z$rtcFrameData DD 01H ; ExampleAppConsole::TextEditCallback
	DD	00H
	DQ	FLAT:?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z$rtcVarDesc
$cppxdata$?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z
	DD	0278H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TextEditCallbackStub@ExampleAppConsole@@SAHPEAUImGuiInputTextCallbackData@@@Z DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ExecCommand@ExampleAppConsole@@QEAAXPEBD@Z DD 025052f01H
	DD	01132318H
	DD	0700c0031H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Draw@ExampleAppConsole@@QEAAXPEBDPEA_N@Z DD 035064619H
	DD	0119331eH
	DD	07012007eH
	DD	050106011H
	DD	imagerel __GSHandlerCheck
	DD	03e0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Draw@ExampleAppConsole@@QEAAXPEBDPEA_N@Z$rtcName$0 DB 063H ; ExampleAppConsole::Draw
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	00H
	ORG $+10
?Draw@ExampleAppConsole@@QEAAXPEBDPEA_N@Z$rtcVarDesc DD 0b8H ; ExampleAppConsole::Draw
	DD	010H
	DQ	FLAT:?Draw@ExampleAppConsole@@QEAAXPEBDPEA_N@Z$rtcName$0
	ORG $+48
?Draw@ExampleAppConsole@@QEAAXPEBDPEA_N@Z$rtcFrameData DD 01H ; ExampleAppConsole::Draw
	DD	00H
	DQ	FLAT:?Draw@ExampleAppConsole@@QEAAXPEBDPEA_N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddLog@ExampleAppConsole@@QEAAXPEBDZZ DD 025054a19H
	DD	011d2322H
	DD	0701600ddH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	06d8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddLog@ExampleAppConsole@@QEAAXPEBDZZ$rtcName$0 DB 062H ; ExampleAppConsole::AddLog
	DB	075H
	DB	066H
	DB	00H
?AddLog@ExampleAppConsole@@QEAAXPEBDZZ$rtcName$1 DB 061H ; ExampleAppConsole::AddLog
	DB	072H
	DB	067H
	DB	073H
	DB	00H
	ORG $+7
?AddLog@ExampleAppConsole@@QEAAXPEBDZZ$rtcVarDesc DD 0448H ; ExampleAppConsole::AddLog
	DD	08H
	DQ	FLAT:?AddLog@ExampleAppConsole@@QEAAXPEBDZZ$rtcName$1
	DD	030H
	DD	0400H
	DQ	FLAT:?AddLog@ExampleAppConsole@@QEAAXPEBDZZ$rtcName$0
	ORG $+96
?AddLog@ExampleAppConsole@@QEAAXPEBDZZ$rtcFrameData DD 02H ; ExampleAppConsole::AddLog
	DD	00H
	DQ	FLAT:?AddLog@ExampleAppConsole@@QEAAXPEBDZZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearLog@ExampleAppConsole@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Strtrim@ExampleAppConsole@@SAXPEAD@Z DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Strdup@ExampleAppConsole@@SAPEADPEBD@Z DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Strnicmp@ExampleAppConsole@@SAHPEBD0H@Z DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Stricmp@ExampleAppConsole@@SAHPEBD0@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1ExampleAppConsole@@QEAA@XZ DD imagerel ??1ExampleAppConsole@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1ExampleAppConsole@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1ExampleAppConsole@@QEAA@XZ
	DD	0108H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ExampleAppConsole@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070025H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1ExampleAppConsole@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0???0ExampleAppConsole@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0???0ExampleAppConsole@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0ExampleAppConsole@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ExampleAppConsole@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ExampleAppConsole@@QEAA@XZ DD imagerel ??0ExampleAppConsole@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0ExampleAppConsole@@QEAA@XZ+75
	DD	00H
	DD	imagerel ??0ExampleAppConsole@@QEAA@XZ+97
	DD	01H
	DD	imagerel ??0ExampleAppConsole@@QEAA@XZ+119
	DD	02H
	DD	imagerel ??0ExampleAppConsole@@QEAA@XZ+148
	DD	03H
	DD	imagerel ??0ExampleAppConsole@@QEAA@XZ+464
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ExampleAppConsole@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0ExampleAppConsole@@QEAA@XZ@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???0ExampleAppConsole@@QEAA@XZ@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0???0ExampleAppConsole@@QEAA@XZ@4HA
	DD	02H
	DD	imagerel ?dtor$3@?0???0ExampleAppConsole@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ExampleAppConsole@@QEAA@XZ DD 019930522H
	DD	04H
	DD	imagerel $stateUnwindMap$??0ExampleAppConsole@@QEAA@XZ
	DD	00H
	DD	00H
	DD	06H
	DD	imagerel $ip2state$??0ExampleAppConsole@@QEAA@XZ
	DD	0168H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ExampleAppConsole@@QEAA@XZ DD 025053511H
	DD	010e2313H
	DD	070070031H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ExampleAppConsole@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@PEBD@@QEAAXAEBQEBD@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@PEBD@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@PEBD@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@PEBD@@QEAAAEAPEBDH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@PEBD@@QEAA@XZ DD imagerel ??1?$ImVector@PEBD@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@PEBD@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@PEBD@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@PEBD@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@PEBD@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@PEBD@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$ImVector@PEAD@@QEAAPEAPEADPEBQEAD@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@PEAD@@QEAAXAEBQEAD@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@PEAD@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@PEAD@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?begin@?$ImVector@PEAD@@QEAAPEAPEADXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@PEAD@@QEAAAEAPEADH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@PEAD@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@PEAD@@QEAA@XZ DD imagerel ??1?$ImVector@PEAD@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@PEAD@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@PEAD@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@PEAD@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@PEAD@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@PEAD@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ffilter@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IsLegacyNativeDupe@funcs@?BA@??ShowDemoWindowInputs@@YAXXZ@SA_NW4ImGuiKey@@@Z DD 025052801H
	DD	010d2312H
	DD	07006001fH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Fselection@?CAP@??ShowDemoWindowTables@@YAXXZ@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Fitems@?CAP@??ShowDemoWindowTables@@YAXXZ@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Fitems@?BPE@??ShowDemoWindowTables@@YAXXZ@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAXHAEBUMyItem@?A0x1ed25892@@@Z DD 025053301H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UMyItem@?A0x1ed25892@@@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAAEAUMyItem@?A0x1ed25892@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ DD imagerel ??1?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DisplayNode@MyTreeNode@?BIO@??ShowDemoWindowTables@@YAXXZ@SAXPEBU1?BIO@??2@YAXXZ@0@Z DD 025052f01H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowTableColumnsStatusFlags@@YAXH@Z DD 025052801H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EditTableColumnsFlags@@YAXPEAH@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EditTableSizingFlags@@YAXPEAH@Z DD 025052a01H
	DD	010e2313H
	DD	070070033H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PopStyleCompact@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PushStyleCompact@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	070030029H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CompareWithSortSpecs@MyItem@?A0x1ed25892@@SAHPEBX0@Z DD 025052f01H
	DD	01132318H
	DD	0700c0031H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ffilter@?DIK@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Saw@Funcs@?CCM@??ShowDemoWindowWidgets@@YAXXZ@SAMPEAXH@Z DD 015052e01H
	DD	01121317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Sin@Funcs@?CCM@??ShowDemoWindowWidgets@@YAXXZ@SAMPEAXH@Z DD 035052e01H
	DD	01123317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Factive_tabs@?CAI@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?find_erase_unsorted@?$ImVector@H@@QEAA_NAEBH@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?find@?$ImVector@H@@QEAAPEAHAEBH@Z DD 05052d01H
	DD	01130316H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?contains@?$ImVector@H@@QEBA_NAEBH@Z DD 05052d01H
	DD	01130316H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase_unsorted@?$ImVector@H@@QEAAPEAHPEBH@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$ImVector@H@@QEAAPEAHPEBH@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@H@@QEAAXAEBH@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@H@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@H@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@H@@QEAAAEAHH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@H@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@H@@QEAA@XZ DD imagerel ??1?$ImVector@H@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@H@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@H@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@H@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@H@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@H@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Fmy_str@?BMK@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MyInputTextMultiline@Funcs@?BMK@??ShowDemoWindowWidgets@@YAXXZ@SA_NPEBDPEAU?$ImVector@D@@AEBUImVec2@@H@Z DD 045053901H
	DD	011d4322H
	DD	070160023H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MyResizeCallback@Funcs@?BMK@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MyCallback@Funcs@?BMD@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FilterImGuiLetters@TextFilters@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ItemGetter@Funcs@?BAP@??ShowDemoWindowWidgets@@YAXXZ@SA_NPEAXHPEAPEBD@Z DD 05053101H
	DD	0117031aH
	DD	070100019H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?HelpMarker@@YAXPEBD@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowDemoWindowInputs@@YAXXZ DD 035052f19H
	DD	010a330fH
	DD	0700300d9H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	06b8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShowDemoWindowInputs@@YAXXZ$rtcName$0 DB 063H		; ShowDemoWindowInputs
	DB	061H
	DB	070H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	05fH
	DB	06fH
	DB	076H
	DB	065H
	DB	072H
	DB	072H
	DB	069H
	DB	064H
	DB	065H
	DB	05fH
	DB	064H
	DB	065H
	DB	073H
	DB	063H
	DB	00H
	ORG $+2
?ShowDemoWindowInputs@@YAXXZ$rtcName$1 DB 06dH		; ShowDemoWindowInputs
	DB	06fH
	DB	075H
	DB	073H
	DB	065H
	DB	05fH
	DB	063H
	DB	075H
	DB	072H
	DB	073H
	DB	06fH
	DB	072H
	DB	073H
	DB	05fH
	DB	06eH
	DB	061H
	DB	06dH
	DB	065H
	DB	073H
	DB	00H
?ShowDemoWindowInputs@@YAXXZ$rtcName$2 DB 06cH		; ShowDemoWindowInputs
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	00H
	ORG $+6
?ShowDemoWindowInputs@@YAXXZ$rtcName$3 DB 076H		; ShowDemoWindowInputs
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	05fH
	DB	072H
	DB	061H
	DB	077H
	DB	00H
	ORG $+6
?ShowDemoWindowInputs@@YAXXZ$rtcName$4 DB 076H		; ShowDemoWindowInputs
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	05fH
	DB	077H
	DB	069H
	DB	074H
	DB	068H
	DB	05fH
	DB	06cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	05fH
	DB	074H
	DB	068H
	DB	072H
	DB	065H
	DB	073H
	DB	068H
	DB	06fH
	DB	06cH
	DB	064H
	DB	00H
	ORG $+6
?ShowDemoWindowInputs@@YAXXZ$rtcName$5 DB 06dH		; ShowDemoWindowInputs
	DB	06fH
	DB	075H
	DB	073H
	DB	065H
	DB	05fH
	DB	064H
	DB	065H
	DB	06cH
	DB	074H
	DB	061H
	DB	00H
	ORG $+12
?ShowDemoWindowInputs@@YAXXZ$rtcVarDesc DD 02f8H	; ShowDemoWindowInputs
	DD	08H
	DQ	FLAT:?ShowDemoWindowInputs@@YAXXZ$rtcName$5
	DD	02d8H
	DD	08H
	DQ	FLAT:?ShowDemoWindowInputs@@YAXXZ$rtcName$4
	DD	02b8H
	DD	08H
	DQ	FLAT:?ShowDemoWindowInputs@@YAXXZ$rtcName$3
	DD	01b8H
	DD	020H
	DQ	FLAT:?ShowDemoWindowInputs@@YAXXZ$rtcName$2
	DD	0110H
	DD	048H
	DQ	FLAT:?ShowDemoWindowInputs@@YAXXZ$rtcName$1
	DD	0d8H
	DD	018H
	DQ	FLAT:?ShowDemoWindowInputs@@YAXXZ$rtcName$0
	ORG $+288
?ShowDemoWindowInputs@@YAXXZ$rtcFrameData DD 06H	; ShowDemoWindowInputs
	DD	00H
	DQ	FLAT:?ShowDemoWindowInputs@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ShowDemoWindowColumns@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ShowDemoWindowColumns@@YAXXZ DD imagerel ?ShowDemoWindowColumns@@YAXXZ
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowColumns@@YAXXZ+2344
	DD	00H
	DD	imagerel ?ShowDemoWindowColumns@@YAXXZ+2531
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ShowDemoWindowColumns@@YAXXZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??ShowDemoWindowColumns@@YAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowDemoWindowColumns@@YAXXZ DD 045053a19H
	DD	010a430fH
	DD	0700300b9H
	DD	05002H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?ShowDemoWindowColumns@@YAXXZ
	DD	05baH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShowDemoWindowColumns@@YAXXZ$rtcName$0 DB 06cH		; ShowDemoWindowColumns
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	00H
	ORG $+2
?ShowDemoWindowColumns@@YAXXZ$rtcName$1 DB 06eH		; ShowDemoWindowColumns
	DB	061H
	DB	06dH
	DB	065H
	DB	073H
	DB	00H
	ORG $+2
?ShowDemoWindowColumns@@YAXXZ$rtcName$2 DB 070H		; ShowDemoWindowColumns
	DB	061H
	DB	074H
	DB	068H
	DB	073H
	DB	00H
	ORG $+2
?ShowDemoWindowColumns@@YAXXZ$rtcName$3 DB 06cH		; ShowDemoWindowColumns
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	00H
	ORG $+2
?ShowDemoWindowColumns@@YAXXZ$rtcName$4 DB 063H		; ShowDemoWindowColumns
	DB	068H
	DB	069H
	DB	06cH
	DB	064H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+5
?ShowDemoWindowColumns@@YAXXZ$rtcName$5 DB 063H		; ShowDemoWindowColumns
	DB	06cH
	DB	069H
	DB	070H
	DB	070H
	DB	065H
	DB	072H
	DB	00H
$cppxdata$?ShowDemoWindowColumns@@YAXXZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?ShowDemoWindowColumns@@YAXXZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?ShowDemoWindowColumns@@YAXXZ
	DD	05a8H
	DD	00H
	DD	01H
?ShowDemoWindowColumns@@YAXXZ$rtcVarDesc DD 0228H	; ShowDemoWindowColumns
	DD	020H
	DQ	FLAT:?ShowDemoWindowColumns@@YAXXZ$rtcName$5
	DD	01e8H
	DD	08H
	DQ	FLAT:?ShowDemoWindowColumns@@YAXXZ$rtcName$4
	DD	0148H
	DD	020H
	DQ	FLAT:?ShowDemoWindowColumns@@YAXXZ$rtcName$3
	DD	0f8H
	DD	018H
	DQ	FLAT:?ShowDemoWindowColumns@@YAXXZ$rtcName$2
	DD	0c8H
	DD	018H
	DQ	FLAT:?ShowDemoWindowColumns@@YAXXZ$rtcName$1
	DD	088H
	DD	020H
	DQ	FLAT:?ShowDemoWindowColumns@@YAXXZ$rtcName$0
	ORG $+288
?ShowDemoWindowColumns@@YAXXZ$rtcFrameData DD 06H	; ShowDemoWindowColumns
	DD	00H
	DQ	FLAT:?ShowDemoWindowColumns@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$7@?0??ShowDemoWindowTables@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$6@?0??ShowDemoWindowTables@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$5@?0??ShowDemoWindowTables@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$4@?0??ShowDemoWindowTables@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??ShowDemoWindowTables@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??ShowDemoWindowTables@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??ShowDemoWindowTables@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ShowDemoWindowTables@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ShowDemoWindowTables@@YAXXZ DD imagerel ?ShowDemoWindowTables@@YAXXZ
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+5255
	DD	00H
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+5274
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+7182
	DD	00H
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+7184
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+7815
	DD	01H
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+8001
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+17470
	DD	02H
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+17495
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+18209
	DD	03H
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+18467
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+18747
	DD	04H
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+18779
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+20683
	DD	05H
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+20708
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+20778
	DD	06H
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+20803
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+21821
	DD	07H
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+22895
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowTables@@YAXXZ+23204
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ShowDemoWindowTables@@YAXXZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??ShowDemoWindowTables@@YAXXZ@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0??ShowDemoWindowTables@@YAXXZ@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$2@?0??ShowDemoWindowTables@@YAXXZ@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$3@?0??ShowDemoWindowTables@@YAXXZ@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$4@?0??ShowDemoWindowTables@@YAXXZ@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$5@?0??ShowDemoWindowTables@@YAXXZ@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$6@?0??ShowDemoWindowTables@@YAXXZ@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$7@?0??ShowDemoWindowTables@@YAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowDemoWindowTables@@YAXXZ DD 045054019H
	DD	01104315H
	DD	0700303c5H
	DD	05002H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?ShowDemoWindowTables@@YAXXZ
	DD	01e12H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShowDemoWindowTables@@YAXXZ$rtcName$0 DB 062H		; ShowDemoWindowTables
	DB	075H
	DB	066H
	DB	00H
?ShowDemoWindowTables@@YAXXZ$rtcName$1 DB 062H		; ShowDemoWindowTables
	DB	075H
	DB	066H
	DB	00H
?ShowDemoWindowTables@@YAXXZ$rtcName$2 DB 06cH		; ShowDemoWindowTables
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	00H
	ORG $+2
?ShowDemoWindowTables@@YAXXZ$rtcName$3 DB 06fH		; ShowDemoWindowTables
	DB	075H
	DB	074H
	DB	065H
	DB	072H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+1
?ShowDemoWindowTables@@YAXXZ$rtcName$9 DB 062H		; ShowDemoWindowTables
	DB	075H
	DB	066H
	DB	00H
?ShowDemoWindowTables@@YAXXZ$rtcName$4 DB 063H		; ShowDemoWindowTables
	DB	06cH
	DB	069H
	DB	070H
	DB	070H
	DB	065H
	DB	072H
	DB	00H
?ShowDemoWindowTables@@YAXXZ$rtcName$5 DB 06fH		; ShowDemoWindowTables
	DB	075H
	DB	074H
	DB	065H
	DB	072H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+1
?ShowDemoWindowTables@@YAXXZ$rtcName$10 DB 062H		; ShowDemoWindowTables
	DB	075H
	DB	066H
	DB	00H
?ShowDemoWindowTables@@YAXXZ$rtcName$6 DB 063H		; ShowDemoWindowTables
	DB	06fH
	DB	06cH
	DB	075H
	DB	06dH
	DB	06eH
	DB	05fH
	DB	06eH
	DB	061H
	DB	06dH
	DB	065H
	DB	073H
	DB	00H
	ORG $+3
?ShowDemoWindowTables@@YAXXZ$rtcName$7 DB 06fH		; ShowDemoWindowTables
	DB	075H
	DB	074H
	DB	065H
	DB	072H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+5
?ShowDemoWindowTables@@YAXXZ$rtcName$8 DB 06fH		; ShowDemoWindowTables
	DB	075H
	DB	074H
	DB	065H
	DB	072H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+5
?ShowDemoWindowTables@@YAXXZ$rtcName$11 DB 063H		; ShowDemoWindowTables
	DB	06cH
	DB	069H
	DB	070H
	DB	070H
	DB	065H
	DB	072H
	DB	00H
?ShowDemoWindowTables@@YAXXZ$rtcName$12 DB 063H		; ShowDemoWindowTables
	DB	06fH
	DB	06eH
	DB	074H
	DB	065H
	DB	06eH
	DB	074H
	DB	073H
	DB	05fH
	DB	074H
	DB	079H
	DB	070H
	DB	065H
	DB	05fH
	DB	06eH
	DB	061H
	DB	06dH
	DB	065H
	DB	073H
	DB	00H
	ORG $+4
?ShowDemoWindowTables@@YAXXZ$rtcName$13 DB 074H		; ShowDemoWindowTables
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	05fH
	DB	073H
	DB	063H
	DB	072H
	DB	06fH
	DB	06cH
	DB	06cH
	DB	05fH
	DB	063H
	DB	075H
	DB	072H
	DB	00H
	ORG $+3
?ShowDemoWindowTables@@YAXXZ$rtcName$16 DB 06cH		; ShowDemoWindowTables
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	00H
	ORG $+6
?ShowDemoWindowTables@@YAXXZ$rtcName$14 DB 074H		; ShowDemoWindowTables
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	05fH
	DB	073H
	DB	063H
	DB	072H
	DB	06fH
	DB	06cH
	DB	06cH
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+7
?ShowDemoWindowTables@@YAXXZ$rtcName$15 DB 063H		; ShowDemoWindowTables
	DB	06cH
	DB	069H
	DB	070H
	DB	070H
	DB	065H
	DB	072H
	DB	00H
	ORG $+8
?ShowDemoWindowTables@@YAXXZ$rtcVarDesc DD 0f88H	; ShowDemoWindowTables
	DD	020H
	DQ	FLAT:?ShowDemoWindowTables@@YAXXZ$rtcName$16
	DD	0ee8H
	DD	020H
	DQ	FLAT:?ShowDemoWindowTables@@YAXXZ$rtcName$15
	DD	0e48H
	DD	08H
	DQ	FLAT:?ShowDemoWindowTables@@YAXXZ$rtcName$14
	DD	0e28H
	DD	08H
	DQ	FLAT:?ShowDemoWindowTables@@YAXXZ$rtcName$13
	DD	0d38H
	DD	030H
	DQ	FLAT:?ShowDemoWindowTables@@YAXXZ$rtcName$12
	DD	0cb8H
	DD	020H
	DQ	FLAT:?ShowDemoWindowTables@@YAXXZ$rtcName$11
	DD	0b98H
	DD	020H
	DQ	FLAT:?ShowDemoWindowTables@@YAXXZ$rtcName$10
	DD	0a38H
	DD	020H
	DQ	FLAT:?ShowDemoWindowTables@@YAXXZ$rtcName$9
	DD	0818H
	DD	08H
	DQ	FLAT:?ShowDemoWindowTables@@YAXXZ$rtcName$8
	DD	0678H
	DD	08H
	DQ	FLAT:?ShowDemoWindowTables@@YAXXZ$rtcName$7
	DD	0608H
	DD	018H
	DQ	FLAT:?ShowDemoWindowTables@@YAXXZ$rtcName$6
	DD	0568H
	DD	08H
	DQ	FLAT:?ShowDemoWindowTables@@YAXXZ$rtcName$5
	DD	04e8H
	DD	020H
	DQ	FLAT:?ShowDemoWindowTables@@YAXXZ$rtcName$4
	DD	04c8H
	DD	08H
	DQ	FLAT:?ShowDemoWindowTables@@YAXXZ$rtcName$3
	DD	0488H
	DD	020H
	DQ	FLAT:?ShowDemoWindowTables@@YAXXZ$rtcName$2
	DD	0368H
	DD	020H
	DQ	FLAT:?ShowDemoWindowTables@@YAXXZ$rtcName$1
	DD	0168H
	DD	020H
	DQ	FLAT:?ShowDemoWindowTables@@YAXXZ$rtcName$0
	ORG $+816
?ShowDemoWindowTables@@YAXXZ$rtcFrameData DD 011H	; ShowDemoWindowTables
	DD	00H
	DQ	FLAT:?ShowDemoWindowTables@@YAXXZ$rtcVarDesc
$cppxdata$?ShowDemoWindowTables@@YAXXZ DD 019930522H
	DD	08H
	DD	imagerel $stateUnwindMap$?ShowDemoWindowTables@@YAXXZ
	DD	00H
	DD	00H
	DD	014H
	DD	imagerel $ip2state$?ShowDemoWindowTables@@YAXXZ
	DD	01df8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowDemoWindowPopups@@YAXXZ DD 045052f19H
	DD	010a430fH
	DD	0700300e3H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0700H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShowDemoWindowPopups@@YAXXZ$rtcName$0 DB 06eH		; ShowDemoWindowPopups
	DB	061H
	DB	06dH
	DB	065H
	DB	073H
	DB	00H
	ORG $+2
?ShowDemoWindowPopups@@YAXXZ$rtcName$1 DB 06eH		; ShowDemoWindowPopups
	DB	061H
	DB	06dH
	DB	065H
	DB	073H
	DB	00H
	ORG $+2
?ShowDemoWindowPopups@@YAXXZ$rtcName$2 DB 062H		; ShowDemoWindowPopups
	DB	075H
	DB	066H
	DB	00H
?ShowDemoWindowPopups@@YAXXZ$rtcName$3 DB 063H		; ShowDemoWindowPopups
	DB	065H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	00H
	ORG $+5
?ShowDemoWindowPopups@@YAXXZ$rtcName$4 DB 075H		; ShowDemoWindowPopups
	DB	06eH
	DB	075H
	DB	073H
	DB	065H
	DB	064H
	DB	05fH
	DB	06fH
	DB	070H
	DB	065H
	DB	06eH
	DB	00H
	ORG $+4
?ShowDemoWindowPopups@@YAXXZ$rtcVarDesc DD 01c4H	; ShowDemoWindowPopups
	DD	01H
	DQ	FLAT:?ShowDemoWindowPopups@@YAXXZ$rtcName$4
	DD	01a8H
	DD	08H
	DQ	FLAT:?ShowDemoWindowPopups@@YAXXZ$rtcName$3
	DD	0150H
	DD	040H
	DQ	FLAT:?ShowDemoWindowPopups@@YAXXZ$rtcName$2
	DD	0e8H
	DD	028H
	DQ	FLAT:?ShowDemoWindowPopups@@YAXXZ$rtcName$1
	DD	048H
	DD	028H
	DQ	FLAT:?ShowDemoWindowPopups@@YAXXZ$rtcName$0
	ORG $+240
?ShowDemoWindowPopups@@YAXXZ$rtcFrameData DD 05H	; ShowDemoWindowPopups
	DD	00H
	DQ	FLAT:?ShowDemoWindowPopups@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??ShowDemoWindowLayout@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ShowDemoWindowLayout@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ShowDemoWindowLayout@@YAXXZ DD imagerel ?ShowDemoWindowLayout@@YAXXZ
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowLayout@@YAXXZ+12086
	DD	00H
	DD	imagerel ?ShowDemoWindowLayout@@YAXXZ+12115
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowLayout@@YAXXZ+12185
	DD	01H
	DD	imagerel ?ShowDemoWindowLayout@@YAXXZ+12214
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ShowDemoWindowLayout@@YAXXZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??ShowDemoWindowLayout@@YAXXZ@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0??ShowDemoWindowLayout@@YAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowDemoWindowLayout@@YAXXZ DD 055054019H
	DD	01105315H
	DD	070030315H
	DD	05002H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?ShowDemoWindowLayout@@YAXXZ
	DD	01892H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShowDemoWindowLayout@@YAXXZ$rtcName$0 DB 062H		; ShowDemoWindowLayout
	DB	075H
	DB	066H
	DB	00H
?ShowDemoWindowLayout@@YAXXZ$rtcName$11 DB 070H		; ShowDemoWindowLayout
	DB	00H
	ORG $+2
?ShowDemoWindowLayout@@YAXXZ$rtcName$1 DB 063H		; ShowDemoWindowLayout
	DB	068H
	DB	069H
	DB	06cH
	DB	064H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	00H
	ORG $+1
?ShowDemoWindowLayout@@YAXXZ$rtcName$2 DB 063H		; ShowDemoWindowLayout
	DB	068H
	DB	069H
	DB	06cH
	DB	064H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+1
?ShowDemoWindowLayout@@YAXXZ$rtcName$3 DB 069H		; ShowDemoWindowLayout
	DB	074H
	DB	065H
	DB	06dH
	DB	073H
	DB	00H
	ORG $+2
?ShowDemoWindowLayout@@YAXXZ$rtcName$4 DB 062H		; ShowDemoWindowLayout
	DB	075H
	DB	074H
	DB	074H
	DB	06fH
	DB	06eH
	DB	05fH
	DB	073H
	DB	07aH
	DB	00H
	ORG $+2
?ShowDemoWindowLayout@@YAXXZ$rtcName$5 DB 073H		; ShowDemoWindowLayout
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+3
?ShowDemoWindowLayout@@YAXXZ$rtcName$6 DB 076H		; ShowDemoWindowLayout
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	073H
	DB	00H
	ORG $+1
?ShowDemoWindowLayout@@YAXXZ$rtcName$7 DB 06eH		; ShowDemoWindowLayout
	DB	061H
	DB	06dH
	DB	065H
	DB	073H
	DB	00H
	ORG $+2
?ShowDemoWindowLayout@@YAXXZ$rtcName$8 DB 06eH		; ShowDemoWindowLayout
	DB	061H
	DB	06dH
	DB	065H
	DB	073H
	DB	00H
	ORG $+2
?ShowDemoWindowLayout@@YAXXZ$rtcName$13 DB 070H		; ShowDemoWindowLayout
	DB	030H
	DB	00H
	ORG $+1
?ShowDemoWindowLayout@@YAXXZ$rtcName$9 DB 073H		; ShowDemoWindowLayout
	DB	063H
	DB	072H
	DB	06fH
	DB	06cH
	DB	06cH
	DB	069H
	DB	06eH
	DB	067H
	DB	05fH
	DB	063H
	DB	068H
	DB	069H
	DB	06cH
	DB	064H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+3
?ShowDemoWindowLayout@@YAXXZ$rtcName$10 DB 06eH		; ShowDemoWindowLayout
	DB	075H
	DB	06dH
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
?ShowDemoWindowLayout@@YAXXZ$rtcName$12 DB 06fH		; ShowDemoWindowLayout
	DB	070H
	DB	065H
	DB	06eH
	DB	00H
	ORG $+3
?ShowDemoWindowLayout@@YAXXZ$rtcName$14 DB 070H		; ShowDemoWindowLayout
	DB	031H
	DB	00H
	ORG $+5
?ShowDemoWindowLayout@@YAXXZ$rtcName$15 DB 074H		; ShowDemoWindowLayout
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+7
?ShowDemoWindowLayout@@YAXXZ$rtcName$16 DB 063H		; ShowDemoWindowLayout
	DB	06cH
	DB	069H
	DB	070H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+6
?ShowDemoWindowLayout@@YAXXZ$rtcVarDesc DD 0918H	; ShowDemoWindowLayout
	DD	010H
	DQ	FLAT:?ShowDemoWindowLayout@@YAXXZ$rtcName$16
	DD	08d8H
	DD	08H
	DQ	FLAT:?ShowDemoWindowLayout@@YAXXZ$rtcName$15
	DD	0898H
	DD	08H
	DQ	FLAT:?ShowDemoWindowLayout@@YAXXZ$rtcName$14
	DD	0878H
	DD	08H
	DQ	FLAT:?ShowDemoWindowLayout@@YAXXZ$rtcName$13
	DD	07f4H
	DD	01H
	DQ	FLAT:?ShowDemoWindowLayout@@YAXXZ$rtcName$12
	DD	07d8H
	DD	08H
	DQ	FLAT:?ShowDemoWindowLayout@@YAXXZ$rtcName$11
	DD	0708H
	DD	010H
	DQ	FLAT:?ShowDemoWindowLayout@@YAXXZ$rtcName$10
	DD	0688H
	DD	08H
	DQ	FLAT:?ShowDemoWindowLayout@@YAXXZ$rtcName$9
	DD	0648H
	DD	028H
	DQ	FLAT:?ShowDemoWindowLayout@@YAXXZ$rtcName$8
	DD	0448H
	DD	028H
	DQ	FLAT:?ShowDemoWindowLayout@@YAXXZ$rtcName$7
	DD	02f8H
	DD	014H
	DQ	FLAT:?ShowDemoWindowLayout@@YAXXZ$rtcName$6
	DD	02d8H
	DD	08H
	DQ	FLAT:?ShowDemoWindowLayout@@YAXXZ$rtcName$5
	DD	01f8H
	DD	08H
	DQ	FLAT:?ShowDemoWindowLayout@@YAXXZ$rtcName$4
	DD	0198H
	DD	020H
	DQ	FLAT:?ShowDemoWindowLayout@@YAXXZ$rtcName$3
	DD	0178H
	DD	08H
	DQ	FLAT:?ShowDemoWindowLayout@@YAXXZ$rtcName$2
	DD	0158H
	DD	08H
	DQ	FLAT:?ShowDemoWindowLayout@@YAXXZ$rtcName$1
	DD	0d8H
	DD	020H
	DQ	FLAT:?ShowDemoWindowLayout@@YAXXZ$rtcName$0
	ORG $+816
?ShowDemoWindowLayout@@YAXXZ$rtcFrameData DD 011H	; ShowDemoWindowLayout
	DD	00H
	DQ	FLAT:?ShowDemoWindowLayout@@YAXXZ$rtcVarDesc
$cppxdata$?ShowDemoWindowLayout@@YAXXZ DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?ShowDemoWindowLayout@@YAXXZ
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$?ShowDemoWindowLayout@@YAXXZ
	DD	01868H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$6@?0??ShowDemoWindowWidgets@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$5@?0??ShowDemoWindowWidgets@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$4@?0??ShowDemoWindowWidgets@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??ShowDemoWindowWidgets@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??ShowDemoWindowWidgets@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??ShowDemoWindowWidgets@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ShowDemoWindowWidgets@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ShowDemoWindowWidgets@@YAXXZ DD imagerel ?ShowDemoWindowWidgets@@YAXXZ
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowWidgets@@YAXXZ+14485
	DD	00H
	DD	imagerel ?ShowDemoWindowWidgets@@YAXXZ+14510
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowWidgets@@YAXXZ+15876
	DD	01H
	DD	imagerel ?ShowDemoWindowWidgets@@YAXXZ+15901
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowWidgets@@YAXXZ+18448
	DD	02H
	DD	imagerel ?ShowDemoWindowWidgets@@YAXXZ+18499
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowWidgets@@YAXXZ+19758
	DD	03H
	DD	imagerel ?ShowDemoWindowWidgets@@YAXXZ+19771
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowWidgets@@YAXXZ+21074
	DD	04H
	DD	imagerel ?ShowDemoWindowWidgets@@YAXXZ+21120
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowWidgets@@YAXXZ+22051
	DD	05H
	DD	imagerel ?ShowDemoWindowWidgets@@YAXXZ+22102
	DD	0ffffffffH
	DD	imagerel ?ShowDemoWindowWidgets@@YAXXZ+36530
	DD	06H
	DD	imagerel ?ShowDemoWindowWidgets@@YAXXZ+36562
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ShowDemoWindowWidgets@@YAXXZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$2@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$3@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$4@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$5@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$6@?0??ShowDemoWindowWidgets@@YAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowDemoWindowWidgets@@YAXXZ DD 0c5064419H
	DD	0111c319H
	DD	070040590H
	DD	050026003H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?ShowDemoWindowWidgets@@YAXXZ
	DD	02c72H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShowDemoWindowWidgets@@YAXXZ$rtcName$0 DB 065H		; ShowDemoWindowWidgets
	DB	06cH
	DB	065H
	DB	06dH
	DB	073H
	DB	05fH
	DB	06eH
	DB	061H
	DB	06dH
	DB	065H
	DB	073H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$1 DB 069H		; ShowDemoWindowWidgets
	DB	074H
	DB	065H
	DB	06dH
	DB	073H
	DB	00H
	ORG $+2
?ShowDemoWindowWidgets@@YAXXZ$rtcName$2 DB 069H		; ShowDemoWindowWidgets
	DB	074H
	DB	065H
	DB	06dH
	DB	073H
	DB	00H
	ORG $+2
?ShowDemoWindowWidgets@@YAXXZ$rtcName$3 DB 070H		; ShowDemoWindowWidgets
	DB	06fH
	DB	073H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$4 DB 06dH		; ShowDemoWindowWidgets
	DB	061H
	DB	072H
	DB	06bH
	DB	065H
	DB	072H
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	00H
	ORG $+1
?ShowDemoWindowWidgets@@YAXXZ$rtcName$6 DB 070H		; ShowDemoWindowWidgets
	DB	06fH
	DB	073H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$5 DB 06dH		; ShowDemoWindowWidgets
	DB	061H
	DB	072H
	DB	06bH
	DB	065H
	DB	072H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+1
?ShowDemoWindowWidgets@@YAXXZ$rtcName$7 DB 075H		; ShowDemoWindowWidgets
	DB	076H
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	00H
	ORG $+1
?ShowDemoWindowWidgets@@YAXXZ$rtcName$8 DB 075H		; ShowDemoWindowWidgets
	DB	076H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+1
?ShowDemoWindowWidgets@@YAXXZ$rtcName$11 DB 075H	; ShowDemoWindowWidgets
	DB	076H
	DB	030H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$9 DB 074H		; ShowDemoWindowWidgets
	DB	069H
	DB	06eH
	DB	074H
	DB	05fH
	DB	063H
	DB	06fH
	DB	06cH
	DB	00H
	ORG $+3
?ShowDemoWindowWidgets@@YAXXZ$rtcName$12 DB 075H	; ShowDemoWindowWidgets
	DB	076H
	DB	031H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$10 DB 062H	; ShowDemoWindowWidgets
	DB	06fH
	DB	072H
	DB	064H
	DB	065H
	DB	072H
	DB	05fH
	DB	063H
	DB	06fH
	DB	06cH
	DB	00H
	ORG $+1
?ShowDemoWindowWidgets@@YAXXZ$rtcName$13 DB 073H	; ShowDemoWindowWidgets
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+3
?ShowDemoWindowWidgets@@YAXXZ$rtcName$14 DB 075H	; ShowDemoWindowWidgets
	DB	076H
	DB	030H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$15 DB 075H	; ShowDemoWindowWidgets
	DB	076H
	DB	031H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$16 DB 062H	; ShowDemoWindowWidgets
	DB	067H
	DB	05fH
	DB	063H
	DB	06fH
	DB	06cH
	DB	00H
	ORG $+1
?ShowDemoWindowWidgets@@YAXXZ$rtcName$20 DB 062H	; ShowDemoWindowWidgets
	DB	075H
	DB	066H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$17 DB 074H	; ShowDemoWindowWidgets
	DB	069H
	DB	06eH
	DB	074H
	DB	05fH
	DB	063H
	DB	06fH
	DB	06cH
	DB	00H
	ORG $+3
?ShowDemoWindowWidgets@@YAXXZ$rtcName$18 DB 069H	; ShowDemoWindowWidgets
	DB	074H
	DB	065H
	DB	06dH
	DB	073H
	DB	00H
	ORG $+2
?ShowDemoWindowWidgets@@YAXXZ$rtcName$19 DB 069H	; ShowDemoWindowWidgets
	DB	074H
	DB	065H
	DB	06dH
	DB	073H
	DB	00H
	ORG $+2
?ShowDemoWindowWidgets@@YAXXZ$rtcName$21 DB 062H	; ShowDemoWindowWidgets
	DB	075H
	DB	066H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$22 DB 06cH	; ShowDemoWindowWidgets
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	00H
	ORG $+2
?ShowDemoWindowWidgets@@YAXXZ$rtcName$23 DB 06cH	; ShowDemoWindowWidgets
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	00H
	ORG $+2
?ShowDemoWindowWidgets@@YAXXZ$rtcName$24 DB 061H	; ShowDemoWindowWidgets
	DB	06cH
	DB	069H
	DB	067H
	DB	06eH
	DB	06dH
	DB	065H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+2
?ShowDemoWindowWidgets@@YAXXZ$rtcName$25 DB 06eH	; ShowDemoWindowWidgets
	DB	061H
	DB	06dH
	DB	065H
	DB	00H
	ORG $+3
?ShowDemoWindowWidgets@@YAXXZ$rtcName$26 DB 06eH	; ShowDemoWindowWidgets
	DB	061H
	DB	06dH
	DB	065H
	DB	073H
	DB	00H
	ORG $+2
?ShowDemoWindowWidgets@@YAXXZ$rtcName$27 DB 06fH	; ShowDemoWindowWidgets
	DB	070H
	DB	065H
	DB	06eH
	DB	00H
	ORG $+3
?ShowDemoWindowWidgets@@YAXXZ$rtcName$28 DB 06eH	; ShowDemoWindowWidgets
	DB	061H
	DB	06dH
	DB	065H
	DB	00H
	ORG $+3
?ShowDemoWindowWidgets@@YAXXZ$rtcName$30 DB 062H	; ShowDemoWindowWidgets
	DB	075H
	DB	066H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$29 DB 06fH	; ShowDemoWindowWidgets
	DB	076H
	DB	065H
	DB	072H
	DB	06cH
	DB	061H
	DB	079H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$31 DB 073H	; ShowDemoWindowWidgets
	DB	038H
	DB	05fH
	DB	07aH
	DB	065H
	DB	072H
	DB	06fH
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$32 DB 073H	; ShowDemoWindowWidgets
	DB	038H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
	ORG $+1
?ShowDemoWindowWidgets@@YAXXZ$rtcName$33 DB 073H	; ShowDemoWindowWidgets
	DB	038H
	DB	05fH
	DB	066H
	DB	069H
	DB	066H
	DB	074H
	DB	079H
	DB	00H
	ORG $+3
?ShowDemoWindowWidgets@@YAXXZ$rtcName$34 DB 073H	; ShowDemoWindowWidgets
	DB	038H
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	00H
	ORG $+1
?ShowDemoWindowWidgets@@YAXXZ$rtcName$35 DB 073H	; ShowDemoWindowWidgets
	DB	038H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+1
?ShowDemoWindowWidgets@@YAXXZ$rtcName$88 DB 06eH	; ShowDemoWindowWidgets
	DB	00H
	ORG $+2
?ShowDemoWindowWidgets@@YAXXZ$rtcName$36 DB 075H	; ShowDemoWindowWidgets
	DB	038H
	DB	05fH
	DB	07aH
	DB	065H
	DB	072H
	DB	06fH
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$37 DB 075H	; ShowDemoWindowWidgets
	DB	038H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
	ORG $+1
?ShowDemoWindowWidgets@@YAXXZ$rtcName$38 DB 075H	; ShowDemoWindowWidgets
	DB	038H
	DB	05fH
	DB	066H
	DB	069H
	DB	066H
	DB	074H
	DB	079H
	DB	00H
	ORG $+3
?ShowDemoWindowWidgets@@YAXXZ$rtcName$39 DB 075H	; ShowDemoWindowWidgets
	DB	038H
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	00H
	ORG $+1
?ShowDemoWindowWidgets@@YAXXZ$rtcName$40 DB 075H	; ShowDemoWindowWidgets
	DB	038H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+1
?ShowDemoWindowWidgets@@YAXXZ$rtcName$92 DB 062H	; ShowDemoWindowWidgets
	DB	075H
	DB	066H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$41 DB 073H	; ShowDemoWindowWidgets
	DB	031H
	DB	036H
	DB	05fH
	DB	07aH
	DB	065H
	DB	072H
	DB	06fH
	DB	00H
	ORG $+3
?ShowDemoWindowWidgets@@YAXXZ$rtcName$90 DB 069H	; ShowDemoWindowWidgets
	DB	074H
	DB	065H
	DB	06dH
	DB	073H
	DB	00H
	ORG $+6
?ShowDemoWindowWidgets@@YAXXZ$rtcName$42 DB 073H	; ShowDemoWindowWidgets
	DB	031H
	DB	036H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$43 DB 073H	; ShowDemoWindowWidgets
	DB	031H
	DB	036H
	DB	05fH
	DB	066H
	DB	069H
	DB	066H
	DB	074H
	DB	079H
	DB	00H
	ORG $+6
?ShowDemoWindowWidgets@@YAXXZ$rtcName$44 DB 073H	; ShowDemoWindowWidgets
	DB	031H
	DB	036H
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$45 DB 073H	; ShowDemoWindowWidgets
	DB	031H
	DB	036H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$46 DB 075H	; ShowDemoWindowWidgets
	DB	031H
	DB	036H
	DB	05fH
	DB	07aH
	DB	065H
	DB	072H
	DB	06fH
	DB	00H
	ORG $+3
?ShowDemoWindowWidgets@@YAXXZ$rtcName$91 DB 069H	; ShowDemoWindowWidgets
	DB	074H
	DB	065H
	DB	06dH
	DB	073H
	DB	00H
	ORG $+6
?ShowDemoWindowWidgets@@YAXXZ$rtcName$47 DB 075H	; ShowDemoWindowWidgets
	DB	031H
	DB	036H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$48 DB 075H	; ShowDemoWindowWidgets
	DB	031H
	DB	036H
	DB	05fH
	DB	066H
	DB	069H
	DB	066H
	DB	074H
	DB	079H
	DB	00H
	ORG $+6
?ShowDemoWindowWidgets@@YAXXZ$rtcName$49 DB 075H	; ShowDemoWindowWidgets
	DB	031H
	DB	036H
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$50 DB 075H	; ShowDemoWindowWidgets
	DB	031H
	DB	036H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$51 DB 073H	; ShowDemoWindowWidgets
	DB	033H
	DB	032H
	DB	05fH
	DB	07aH
	DB	065H
	DB	072H
	DB	06fH
	DB	00H
	ORG $+3
?ShowDemoWindowWidgets@@YAXXZ$rtcName$93 DB 06cH	; ShowDemoWindowWidgets
	DB	069H
	DB	06eH
	DB	065H
	DB	073H
	DB	00H
	ORG $+6
?ShowDemoWindowWidgets@@YAXXZ$rtcName$52 DB 073H	; ShowDemoWindowWidgets
	DB	033H
	DB	032H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$53 DB 073H	; ShowDemoWindowWidgets
	DB	033H
	DB	032H
	DB	05fH
	DB	066H
	DB	069H
	DB	066H
	DB	074H
	DB	079H
	DB	00H
	ORG $+6
?ShowDemoWindowWidgets@@YAXXZ$rtcName$54 DB 073H	; ShowDemoWindowWidgets
	DB	033H
	DB	032H
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$55 DB 073H	; ShowDemoWindowWidgets
	DB	033H
	DB	032H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$56 DB 073H	; ShowDemoWindowWidgets
	DB	033H
	DB	032H
	DB	05fH
	DB	068H
	DB	069H
	DB	05fH
	DB	061H
	DB	00H
	ORG $+7
?ShowDemoWindowWidgets@@YAXXZ$rtcName$57 DB 073H	; ShowDemoWindowWidgets
	DB	033H
	DB	032H
	DB	05fH
	DB	068H
	DB	069H
	DB	05fH
	DB	062H
	DB	00H
	ORG $+7
?ShowDemoWindowWidgets@@YAXXZ$rtcName$58 DB 075H	; ShowDemoWindowWidgets
	DB	033H
	DB	032H
	DB	05fH
	DB	07aH
	DB	065H
	DB	072H
	DB	06fH
	DB	00H
	ORG $+7
?ShowDemoWindowWidgets@@YAXXZ$rtcName$59 DB 075H	; ShowDemoWindowWidgets
	DB	033H
	DB	032H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$60 DB 075H	; ShowDemoWindowWidgets
	DB	033H
	DB	032H
	DB	05fH
	DB	066H
	DB	069H
	DB	066H
	DB	074H
	DB	079H
	DB	00H
	ORG $+6
?ShowDemoWindowWidgets@@YAXXZ$rtcName$61 DB 075H	; ShowDemoWindowWidgets
	DB	033H
	DB	032H
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$62 DB 075H	; ShowDemoWindowWidgets
	DB	033H
	DB	032H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$63 DB 075H	; ShowDemoWindowWidgets
	DB	033H
	DB	032H
	DB	05fH
	DB	068H
	DB	069H
	DB	05fH
	DB	061H
	DB	00H
	ORG $+7
?ShowDemoWindowWidgets@@YAXXZ$rtcName$64 DB 075H	; ShowDemoWindowWidgets
	DB	033H
	DB	032H
	DB	05fH
	DB	068H
	DB	069H
	DB	05fH
	DB	062H
	DB	00H
	ORG $+7
?ShowDemoWindowWidgets@@YAXXZ$rtcName$65 DB 073H	; ShowDemoWindowWidgets
	DB	036H
	DB	034H
	DB	05fH
	DB	07aH
	DB	065H
	DB	072H
	DB	06fH
	DB	00H
	ORG $+7
?ShowDemoWindowWidgets@@YAXXZ$rtcName$66 DB 073H	; ShowDemoWindowWidgets
	DB	036H
	DB	034H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$67 DB 073H	; ShowDemoWindowWidgets
	DB	036H
	DB	034H
	DB	05fH
	DB	066H
	DB	069H
	DB	066H
	DB	074H
	DB	079H
	DB	00H
	ORG $+6
?ShowDemoWindowWidgets@@YAXXZ$rtcName$68 DB 073H	; ShowDemoWindowWidgets
	DB	036H
	DB	034H
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$69 DB 073H	; ShowDemoWindowWidgets
	DB	036H
	DB	034H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$70 DB 073H	; ShowDemoWindowWidgets
	DB	036H
	DB	034H
	DB	05fH
	DB	068H
	DB	069H
	DB	05fH
	DB	061H
	DB	00H
	ORG $+7
?ShowDemoWindowWidgets@@YAXXZ$rtcName$71 DB 073H	; ShowDemoWindowWidgets
	DB	036H
	DB	034H
	DB	05fH
	DB	068H
	DB	069H
	DB	05fH
	DB	062H
	DB	00H
	ORG $+7
?ShowDemoWindowWidgets@@YAXXZ$rtcName$72 DB 075H	; ShowDemoWindowWidgets
	DB	036H
	DB	034H
	DB	05fH
	DB	07aH
	DB	065H
	DB	072H
	DB	06fH
	DB	00H
	ORG $+7
?ShowDemoWindowWidgets@@YAXXZ$rtcName$73 DB 075H	; ShowDemoWindowWidgets
	DB	036H
	DB	034H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$74 DB 075H	; ShowDemoWindowWidgets
	DB	036H
	DB	034H
	DB	05fH
	DB	066H
	DB	069H
	DB	066H
	DB	074H
	DB	079H
	DB	00H
	ORG $+6
?ShowDemoWindowWidgets@@YAXXZ$rtcName$75 DB 075H	; ShowDemoWindowWidgets
	DB	036H
	DB	034H
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$76 DB 075H	; ShowDemoWindowWidgets
	DB	036H
	DB	034H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$77 DB 075H	; ShowDemoWindowWidgets
	DB	036H
	DB	034H
	DB	05fH
	DB	068H
	DB	069H
	DB	05fH
	DB	061H
	DB	00H
	ORG $+7
?ShowDemoWindowWidgets@@YAXXZ$rtcName$78 DB 075H	; ShowDemoWindowWidgets
	DB	036H
	DB	034H
	DB	05fH
	DB	068H
	DB	069H
	DB	05fH
	DB	062H
	DB	00H
	ORG $+7
?ShowDemoWindowWidgets@@YAXXZ$rtcName$79 DB 066H	; ShowDemoWindowWidgets
	DB	033H
	DB	032H
	DB	05fH
	DB	07aH
	DB	065H
	DB	072H
	DB	06fH
	DB	00H
	ORG $+7
?ShowDemoWindowWidgets@@YAXXZ$rtcName$80 DB 066H	; ShowDemoWindowWidgets
	DB	033H
	DB	032H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$81 DB 066H	; ShowDemoWindowWidgets
	DB	033H
	DB	032H
	DB	05fH
	DB	06cH
	DB	06fH
	DB	05fH
	DB	061H
	DB	00H
	ORG $+7
?ShowDemoWindowWidgets@@YAXXZ$rtcName$82 DB 066H	; ShowDemoWindowWidgets
	DB	033H
	DB	032H
	DB	05fH
	DB	068H
	DB	069H
	DB	05fH
	DB	061H
	DB	00H
	ORG $+7
?ShowDemoWindowWidgets@@YAXXZ$rtcName$83 DB 066H	; ShowDemoWindowWidgets
	DB	036H
	DB	034H
	DB	05fH
	DB	07aH
	DB	065H
	DB	072H
	DB	06fH
	DB	00H
	ORG $+7
?ShowDemoWindowWidgets@@YAXXZ$rtcName$84 DB 066H	; ShowDemoWindowWidgets
	DB	036H
	DB	034H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
?ShowDemoWindowWidgets@@YAXXZ$rtcName$85 DB 066H	; ShowDemoWindowWidgets
	DB	036H
	DB	034H
	DB	05fH
	DB	06cH
	DB	06fH
	DB	05fH
	DB	061H
	DB	00H
	ORG $+7
?ShowDemoWindowWidgets@@YAXXZ$rtcName$86 DB 066H	; ShowDemoWindowWidgets
	DB	036H
	DB	034H
	DB	05fH
	DB	068H
	DB	069H
	DB	05fH
	DB	061H
	DB	00H
	ORG $+7
?ShowDemoWindowWidgets@@YAXXZ$rtcName$87 DB 073H	; ShowDemoWindowWidgets
	DB	06dH
	DB	061H
	DB	06cH
	DB	06cH
	DB	05fH
	DB	073H
	DB	06cH
	DB	069H
	DB	064H
	DB	065H
	DB	072H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+6
?ShowDemoWindowWidgets@@YAXXZ$rtcName$89 DB 069H	; ShowDemoWindowWidgets
	DB	074H
	DB	065H
	DB	06dH
	DB	05fH
	DB	06eH
	DB	061H
	DB	06dH
	DB	065H
	DB	073H
	DB	00H
	ORG $+5
?ShowDemoWindowWidgets@@YAXXZ$rtcVarDesc DD 01970H	; ShowDemoWindowWidgets
	DD	040H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$93
	DD	01944H
	DD	01H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$92
	DD	018a8H
	DD	020H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$91
	DD	01868H
	DD	020H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$90
	DD	017b0H
	DD	080H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$89
	DD	016c4H
	DD	04H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$88
	DD	01648H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$87
	DD	015a8H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$86
	DD	01588H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$85
	DD	01568H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$84
	DD	01548H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$83
	DD	01524H
	DD	04H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$82
	DD	01504H
	DD	04H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$81
	DD	014e4H
	DD	04H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$80
	DD	014c4H
	DD	04H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$79
	DD	014a8H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$78
	DD	01488H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$77
	DD	01468H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$76
	DD	01448H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$75
	DD	01428H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$74
	DD	01408H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$73
	DD	013e8H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$72
	DD	013c8H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$71
	DD	013a8H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$70
	DD	01388H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$69
	DD	01368H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$68
	DD	01348H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$67
	DD	01328H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$66
	DD	01308H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$65
	DD	012e4H
	DD	04H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$64
	DD	012c4H
	DD	04H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$63
	DD	012a4H
	DD	04H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$62
	DD	01284H
	DD	04H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$61
	DD	01264H
	DD	04H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$60
	DD	01244H
	DD	04H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$59
	DD	01224H
	DD	04H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$58
	DD	01204H
	DD	04H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$57
	DD	011e4H
	DD	04H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$56
	DD	011c4H
	DD	04H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$55
	DD	011a4H
	DD	04H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$54
	DD	01184H
	DD	04H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$53
	DD	01164H
	DD	04H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$52
	DD	01144H
	DD	04H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$51
	DD	01124H
	DD	02H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$50
	DD	01104H
	DD	02H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$49
	DD	010e4H
	DD	02H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$48
	DD	010c4H
	DD	02H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$47
	DD	010a4H
	DD	02H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$46
	DD	01084H
	DD	02H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$45
	DD	01064H
	DD	02H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$44
	DD	01044H
	DD	02H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$43
	DD	01024H
	DD	02H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$42
	DD	01004H
	DD	02H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$41
	DD	0fe4H
	DD	01H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$40
	DD	0fc4H
	DD	01H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$39
	DD	0fa4H
	DD	01H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$38
	DD	0f84H
	DD	01H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$37
	DD	0f64H
	DD	01H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$36
	DD	0f44H
	DD	01H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$35
	DD	0f24H
	DD	01H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$34
	DD	0f04H
	DD	01H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$33
	DD	0ee4H
	DD	01H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$32
	DD	0ec4H
	DD	01H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$31
	DD	0d68H
	DD	020H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$30
	DD	0ce8H
	DD	020H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$29
	DD	0c78H
	DD	010H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$28
	DD	0c54H
	DD	01H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$27
	DD	0b98H
	DD	020H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$26
	DD	0b38H
	DD	020H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$25
	DD	0b18H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$24
	DD	0a18H
	DD	020H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$23
	DD	09b8H
	DD	020H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$22
	DD	0958H
	DD	020H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$21
	DD	08f8H
	DD	020H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$20
	DD	07d0H
	DD	070H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$19
	DD	06e0H
	DD	070H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$18
	DD	06a8H
	DD	010H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$17
	DD	0678H
	DD	010H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$16
	DD	0658H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$15
	DD	0638H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$14
	DD	0618H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$13
	DD	05d8H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$12
	DD	05b8H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$11
	DD	0508H
	DD	010H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$10
	DD	04d8H
	DD	010H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$9
	DD	04b8H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$8
	DD	0498H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$7
	DD	0478H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$6
	DD	03d8H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$5
	DD	03b8H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$4
	DD	0398H
	DD	08H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$3
	DD	01f0H
	DD	048H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$2
	DD	0170H
	DD	058H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$1
	DD	0108H
	DD	020H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcName$0
	ORG $+4512
?ShowDemoWindowWidgets@@YAXXZ$rtcFrameData DD 05eH	; ShowDemoWindowWidgets
	DD	00H
	DQ	FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcVarDesc
$cppxdata$?ShowDemoWindowWidgets@@YAXXZ DD 019930522H
	DD	07H
	DD	imagerel $stateUnwindMap$?ShowDemoWindowWidgets@@YAXXZ
	DD	00H
	DD	00H
	DD	0fH
	DD	imagerel $ip2state$?ShowDemoWindowWidgets@@YAXXZ
	DD	02bf8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowExampleMenuFile@@YAXXZ DD 035052f19H
	DD	010a330fH
	DD	070030041H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	01f0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShowExampleMenuFile@@YAXXZ$rtcName$0 DB 070H		; ShowExampleMenuFile
	DB	00H
	ORG $+14
?ShowExampleMenuFile@@YAXXZ$rtcVarDesc DD 0b8H		; ShowExampleMenuFile
	DD	08H
	DQ	FLAT:?ShowExampleMenuFile@@YAXXZ$rtcName$0
	ORG $+48
?ShowExampleMenuFile@@YAXXZ$rtcFrameData DD 01H		; ShowExampleMenuFile
	DD	00H
	DQ	FLAT:?ShowExampleMenuFile@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ShowExampleAppCustomRendering@@YAXPEA_N@Z DD imagerel ?ShowExampleAppCustomRendering@@YAXPEA_N@Z
	DD	0ffffffffH
	DD	imagerel ?ShowExampleAppCustomRendering@@YAXPEA_N@Z+683
	DD	00H
	DD	imagerel ?ShowExampleAppCustomRendering@@YAXPEA_N@Z+734
	DD	0ffffffffH
	DD	imagerel ?ShowExampleAppCustomRendering@@YAXPEA_N@Z+5929
	DD	01H
	DD	imagerel ?ShowExampleAppCustomRendering@@YAXPEA_N@Z+5954
	DD	0ffffffffH
	DD	imagerel ?ShowExampleAppCustomRendering@@YAXPEA_N@Z+6024
	DD	02H
	DD	imagerel ?ShowExampleAppCustomRendering@@YAXPEA_N@Z+6043
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ShowExampleAppCustomRendering@@YAXPEA_N@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$2@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowExampleAppCustomRendering@@YAXPEA_N@Z DD 045054619H
	DD	010e4313H
	DD	0700701fbH
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?ShowExampleAppCustomRendering@@YAXPEA_N@Z
	DD	0fcaH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$0 DB 067H ; ShowExampleAppCustomRendering
	DB	072H
	DB	061H
	DB	064H
	DB	069H
	DB	065H
	DB	06eH
	DB	074H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+2
?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$1 DB 070H ; ShowExampleAppCustomRendering
	DB	030H
	DB	00H
	ORG $+1
?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$2 DB 070H ; ShowExampleAppCustomRendering
	DB	031H
	DB	00H
	ORG $+1
?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$3 DB 070H ; ShowExampleAppCustomRendering
	DB	030H
	DB	00H
	ORG $+1
?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$4 DB 070H ; ShowExampleAppCustomRendering
	DB	031H
	DB	00H
	ORG $+1
?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$5 DB 070H ; ShowExampleAppCustomRendering
	DB	00H
	ORG $+2
?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$6 DB 063H ; ShowExampleAppCustomRendering
	DB	070H
	DB	033H
	DB	00H
?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$7 DB 063H ; ShowExampleAppCustomRendering
	DB	070H
	DB	034H
	DB	00H
	ORG $+4
?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$8 DB 063H ; ShowExampleAppCustomRendering
	DB	061H
	DB	06eH
	DB	076H
	DB	061H
	DB	073H
	DB	05fH
	DB	070H
	DB	030H
	DB	00H
	ORG $+6
?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$9 DB 063H ; ShowExampleAppCustomRendering
	DB	061H
	DB	06eH
	DB	076H
	DB	061H
	DB	073H
	DB	05fH
	DB	073H
	DB	07aH
	DB	00H
	ORG $+6
?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$10 DB 063H ; ShowExampleAppCustomRendering
	DB	061H
	DB	06eH
	DB	076H
	DB	061H
	DB	073H
	DB	05fH
	DB	070H
	DB	031H
	DB	00H
	ORG $+2
?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$11 DB 06fH ; ShowExampleAppCustomRendering
	DB	072H
	DB	069H
	DB	067H
	DB	069H
	DB	06eH
	DB	00H
	ORG $+5
?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$12 DB 06dH ; ShowExampleAppCustomRendering
	DB	06fH
	DB	075H
	DB	073H
	DB	065H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	05fH
	DB	069H
	DB	06eH
	DB	05fH
	DB	063H
	DB	061H
	DB	06eH
	DB	076H
	DB	061H
	DB	073H
	DB	00H
	ORG $+4
?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$13 DB 064H ; ShowExampleAppCustomRendering
	DB	072H
	DB	061H
	DB	067H
	DB	05fH
	DB	064H
	DB	065H
	DB	06cH
	DB	074H
	DB	061H
	DB	00H
	ORG $+5
?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$14 DB 077H ; ShowExampleAppCustomRendering
	DB	069H
	DB	06eH
	DB	064H
	DB	06fH
	DB	077H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+5
?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$15 DB 077H ; ShowExampleAppCustomRendering
	DB	069H
	DB	06eH
	DB	064H
	DB	06fH
	DB	077H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+4
?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$16 DB 077H ; ShowExampleAppCustomRendering
	DB	069H
	DB	06eH
	DB	064H
	DB	06fH
	DB	077H
	DB	05fH
	DB	063H
	DB	065H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	00H
	ORG $+2
?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcVarDesc DD 0578H ; ShowExampleAppCustomRendering
	DD	08H
	DQ	FLAT:?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$16
	DD	0558H
	DD	08H
	DQ	FLAT:?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$15
	DD	0538H
	DD	08H
	DQ	FLAT:?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$14
	DD	0498H
	DD	08H
	DQ	FLAT:?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$13
	DD	0458H
	DD	08H
	DQ	FLAT:?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$12
	DD	0438H
	DD	08H
	DQ	FLAT:?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$11
	DD	0398H
	DD	08H
	DQ	FLAT:?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$10
	DD	0378H
	DD	08H
	DQ	FLAT:?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$9
	DD	0358H
	DD	08H
	DQ	FLAT:?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$8
	DD	0318H
	DD	020H
	DQ	FLAT:?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$7
	DD	02e8H
	DD	018H
	DQ	FLAT:?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$6
	DD	0188H
	DD	08H
	DQ	FLAT:?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$5
	DD	0128H
	DD	08H
	DQ	FLAT:?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$4
	DD	0108H
	DD	08H
	DQ	FLAT:?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$3
	DD	0a8H
	DD	08H
	DQ	FLAT:?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$2
	DD	088H
	DD	08H
	DQ	FLAT:?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$1
	DD	068H
	DD	08H
	DQ	FLAT:?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcName$0
	ORG $+816
?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcFrameData DD 011H ; ShowExampleAppCustomRendering
	DD	00H
	DQ	FLAT:?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcVarDesc
$cppxdata$?ShowExampleAppCustomRendering@@YAXPEA_N@Z DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$?ShowExampleAppCustomRendering@@YAXPEA_N@Z
	DD	00H
	DD	00H
	DD	07H
	DD	imagerel $ip2state$?ShowExampleAppCustomRendering@@YAXPEA_N@Z
	DD	0fa8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowExampleAppWindowTitles@@YAXPEA_N@Z DD 025053b19H
	DD	010e2313H
	DD	070070053H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0280H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShowExampleAppWindowTitles@@YAXPEA_N@Z$rtcName$0 DB 062H ; ShowExampleAppWindowTitles
	DB	061H
	DB	073H
	DB	065H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+3
?ShowExampleAppWindowTitles@@YAXPEA_N@Z$rtcName$1 DB 062H ; ShowExampleAppWindowTitles
	DB	075H
	DB	066H
	DB	00H
?ShowExampleAppWindowTitles@@YAXPEA_N@Z$rtcVarDesc DD 070H ; ShowExampleAppWindowTitles
	DD	080H
	DQ	FLAT:?ShowExampleAppWindowTitles@@YAXPEA_N@Z$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:?ShowExampleAppWindowTitles@@YAXPEA_N@Z$rtcName$0
	ORG $+96
?ShowExampleAppWindowTitles@@YAXPEA_N@Z$rtcFrameData DD 02H ; ShowExampleAppWindowTitles
	DD	00H
	DQ	FLAT:?ShowExampleAppWindowTitles@@YAXPEA_N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowExampleAppFullscreen@@YAXPEA_N@Z DD 025052a01H
	DD	010e2313H
	DD	070070031H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z DD 025053b19H
	DD	010e2313H
	DD	070070047H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0220H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z$rtcName$0 DB 077H ; ShowExampleAppSimpleOverlay
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+7
?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z$rtcName$1 DB 077H ; ShowExampleAppSimpleOverlay
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+6
?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z$rtcName$2 DB 077H ; ShowExampleAppSimpleOverlay
	DB	069H
	DB	06eH
	DB	064H
	DB	06fH
	DB	077H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+5
?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z$rtcName$3 DB 077H ; ShowExampleAppSimpleOverlay
	DB	069H
	DB	06eH
	DB	064H
	DB	06fH
	DB	077H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	05fH
	DB	070H
	DB	069H
	DB	076H
	DB	06fH
	DB	074H
	DB	00H
	ORG $+7
?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z$rtcFrameData DD 04H ; ShowExampleAppSimpleOverlay
	DD	00H
	DQ	FLAT:?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z$rtcVarDesc
	ORG $+8
?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z$rtcVarDesc DD 0108H ; ShowExampleAppSimpleOverlay
	DD	08H
	DQ	FLAT:?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z$rtcName$3
	DD	0e8H
	DD	08H
	DQ	FLAT:?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z$rtcName$2
	DD	0c8H
	DD	08H
	DQ	FLAT:?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z$rtcName$1
	DD	0a8H
	DD	08H
	DQ	FLAT:?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowExampleAppConstrainedResize@@YAXPEA_N@Z DD 045053b19H
	DD	010e4313H
	DD	0700700e1H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	06f0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShowExampleAppConstrainedResize@@YAXPEA_N@Z$rtcName$0 DB 074H ; ShowExampleAppConstrainedResize
	DB	065H
	DB	073H
	DB	074H
	DB	05fH
	DB	064H
	DB	065H
	DB	073H
	DB	063H
	DB	00H
	ORG $+6
?ShowExampleAppConstrainedResize@@YAXPEA_N@Z$rtcName$1 DB 061H ; ShowExampleAppConstrainedResize
	DB	073H
	DB	070H
	DB	065H
	DB	063H
	DB	074H
	DB	05fH
	DB	072H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	00H
	ORG $+3
?ShowExampleAppConstrainedResize@@YAXPEA_N@Z$rtcName$2 DB 066H ; ShowExampleAppConstrainedResize
	DB	069H
	DB	078H
	DB	065H
	DB	064H
	DB	05fH
	DB	073H
	DB	074H
	DB	065H
	DB	070H
	DB	00H
	ORG $+1
?ShowExampleAppConstrainedResize@@YAXPEA_N@Z$rtcName$4 DB 070H ; ShowExampleAppConstrainedResize
	DB	06fH
	DB	073H
	DB	00H
?ShowExampleAppConstrainedResize@@YAXPEA_N@Z$rtcName$3 DB 061H ; ShowExampleAppConstrainedResize
	DB	076H
	DB	061H
	DB	069H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+5
?ShowExampleAppConstrainedResize@@YAXPEA_N@Z$rtcVarDesc DD 0148H ; ShowExampleAppConstrainedResize
	DD	08H
	DQ	FLAT:?ShowExampleAppConstrainedResize@@YAXPEA_N@Z$rtcName$4
	DD	0128H
	DD	08H
	DQ	FLAT:?ShowExampleAppConstrainedResize@@YAXPEA_N@Z$rtcName$3
	DD	0c4H
	DD	04H
	DQ	FLAT:?ShowExampleAppConstrainedResize@@YAXPEA_N@Z$rtcName$2
	DD	0a4H
	DD	04H
	DQ	FLAT:?ShowExampleAppConstrainedResize@@YAXPEA_N@Z$rtcName$1
	DD	050H
	DD	040H
	DQ	FLAT:?ShowExampleAppConstrainedResize@@YAXPEA_N@Z$rtcName$0
	ORG $+240
?ShowExampleAppConstrainedResize@@YAXPEA_N@Z$rtcFrameData DD 05H ; ShowExampleAppConstrainedResize
	DD	00H
	DQ	FLAT:?ShowExampleAppConstrainedResize@@YAXPEA_N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowExampleAppAutoResize@@YAXPEA_N@Z DD 035052a01H
	DD	010e3313H
	DD	070070023H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ShowExampleAppLongText@@YAXPEA_N@Z DD imagerel ?ShowExampleAppLongText@@YAXPEA_N@Z
	DD	0ffffffffH
	DD	imagerel ?ShowExampleAppLongText@@YAXPEA_N@Z+262
	DD	00H
	DD	imagerel ?ShowExampleAppLongText@@YAXPEA_N@Z+287
	DD	0ffffffffH
	DD	imagerel ?ShowExampleAppLongText@@YAXPEA_N@Z+756
	DD	01H
	DD	imagerel ?ShowExampleAppLongText@@YAXPEA_N@Z+849
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ShowExampleAppLongText@@YAXPEA_N@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowExampleAppLongText@@YAXPEA_N@Z DD 025054619H
	DD	010e2313H
	DD	07007004fH
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?ShowExampleAppLongText@@YAXPEA_N@Z
	DD	0262H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShowExampleAppLongText@@YAXPEA_N@Z$rtcName$0 DB 063H	; ShowExampleAppLongText
	DB	06cH
	DB	069H
	DB	070H
	DB	070H
	DB	065H
	DB	072H
	DB	00H
$cppxdata$?ShowExampleAppLongText@@YAXPEA_N@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?ShowExampleAppLongText@@YAXPEA_N@Z
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$?ShowExampleAppLongText@@YAXPEA_N@Z
	DD	0248H
	DD	00H
	DD	01H
?ShowExampleAppLongText@@YAXPEA_N@Z$rtcVarDesc DD 048H	; ShowExampleAppLongText
	DD	020H
	DQ	FLAT:?ShowExampleAppLongText@@YAXPEA_N@Z$rtcName$0
	ORG $+48
?ShowExampleAppLongText@@YAXPEA_N@Z$rtcFrameData DD 01H	; ShowExampleAppLongText
	DD	00H
	DQ	FLAT:?ShowExampleAppLongText@@YAXPEA_N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowExampleAppPropertyEditor@@YAXPEA_N@Z DD 035052a01H
	DD	010e3313H
	DD	07007002fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowExampleAppLayout@@YAXPEA_N@Z DD 025053b19H
	DD	010e2313H
	DD	07007004dH
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0258H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShowExampleAppLayout@@YAXPEA_N@Z$rtcName$0 DB 06cH	; ShowExampleAppLayout
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	00H
	ORG $+10
?ShowExampleAppLayout@@YAXPEA_N@Z$rtcVarDesc DD 050H	; ShowExampleAppLayout
	DD	080H
	DQ	FLAT:?ShowExampleAppLayout@@YAXPEA_N@Z$rtcName$0
	ORG $+48
?ShowExampleAppLayout@@YAXPEA_N@Z$rtcFrameData DD 01H	; ShowExampleAppLayout
	DD	00H
	DQ	FLAT:?ShowExampleAppLayout@@YAXPEA_N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ShowExampleAppLog@@YAXPEA_N@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ShowExampleAppLog@@YAXPEA_N@Z DD imagerel ?ShowExampleAppLog@@YAXPEA_N@Z
	DD	0ffffffffH
	DD	imagerel ?ShowExampleAppLog@@YAXPEA_N@Z+111
	DD	00H
	DD	imagerel ?ShowExampleAppLog@@YAXPEA_N@Z+136
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ShowExampleAppLog@@YAXPEA_N@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??ShowExampleAppLog@@YAXPEA_N@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowExampleAppLog@@YAXPEA_N@Z DD 035053511H
	DD	010e3313H
	DD	070070043H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?ShowExampleAppLog@@YAXPEA_N@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShowExampleAppLog@@YAXPEA_N@Z$rtcName$0 DB 063H	; ShowExampleAppLog
	DB	061H
	DB	074H
	DB	065H
	DB	067H
	DB	06fH
	DB	072H
	DB	069H
	DB	065H
	DB	073H
	DB	00H
	ORG $+1
?ShowExampleAppLog@@YAXPEA_N@Z$rtcName$1 DB 077H	; ShowExampleAppLog
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	00H
	ORG $+14
?ShowExampleAppLog@@YAXPEA_N@Z$rtcVarDesc DD 068H	; ShowExampleAppLog
	DD	038H
	DQ	FLAT:?ShowExampleAppLog@@YAXPEA_N@Z$rtcName$1
	DD	038H
	DD	018H
	DQ	FLAT:?ShowExampleAppLog@@YAXPEA_N@Z$rtcName$0
	ORG $+96
?ShowExampleAppLog@@YAXPEA_N@Z$rtcFrameData DD 02H	; ShowExampleAppLog
	DD	00H
	DQ	FLAT:?ShowExampleAppLog@@YAXPEA_N@Z$rtcVarDesc
$cppxdata$?ShowExampleAppLog@@YAXPEA_N@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?ShowExampleAppLog@@YAXPEA_N@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?ShowExampleAppLog@@YAXPEA_N@Z
	DD	01f8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ShowExampleAppConsole@@YAXPEA_N@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ShowExampleAppConsole@@YAXPEA_N@Z DD imagerel ?ShowExampleAppConsole@@YAXPEA_N@Z
	DD	0ffffffffH
	DD	imagerel ?ShowExampleAppConsole@@YAXPEA_N@Z+111
	DD	00H
	DD	imagerel ?ShowExampleAppConsole@@YAXPEA_N@Z+136
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ShowExampleAppConsole@@YAXPEA_N@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??ShowExampleAppConsole@@YAXPEA_N@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?ShowExampleAppConsole@@YAXPEA_N@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?ShowExampleAppConsole@@YAXPEA_N@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?ShowExampleAppConsole@@YAXPEA_N@Z
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowExampleAppConsole@@YAXPEA_N@Z DD 025053511H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?ShowExampleAppConsole@@YAXPEA_N@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowExampleAppMainMenuBar@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ShowExampleAppDocuments@@YAXPEA_N@Z DD imagerel ?ShowExampleAppDocuments@@YAXPEA_N@Z
	DD	0ffffffffH
	DD	imagerel ?ShowExampleAppDocuments@@YAXPEA_N@Z+128
	DD	00H
	DD	imagerel ?ShowExampleAppDocuments@@YAXPEA_N@Z+153
	DD	0ffffffffH
	DD	imagerel ?ShowExampleAppDocuments@@YAXPEA_N@Z+1330
	DD	01H
	DD	imagerel ?ShowExampleAppDocuments@@YAXPEA_N@Z+1355
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ShowExampleAppDocuments@@YAXPEA_N@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowExampleAppDocuments@@YAXPEA_N@Z DD 025054619H
	DD	010e2313H
	DD	07007009bH
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?ShowExampleAppDocuments@@YAXPEA_N@Z
	DD	04c2H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShowExampleAppDocuments@@YAXPEA_N@Z$rtcName$0 DB 064H	; ShowExampleAppDocuments
	DB	06fH
	DB	063H
	DB	00H
	ORG $+4
?ShowExampleAppDocuments@@YAXPEA_N@Z$rtcName$1 DB 062H	; ShowExampleAppDocuments
	DB	075H
	DB	074H
	DB	074H
	DB	06fH
	DB	06eH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+12
?ShowExampleAppDocuments@@YAXPEA_N@Z$rtcVarDesc DD 02a8H ; ShowExampleAppDocuments
	DD	08H
	DQ	FLAT:?ShowExampleAppDocuments@@YAXPEA_N@Z$rtcName$1
	DD	01e8H
	DD	08H
	DQ	FLAT:?ShowExampleAppDocuments@@YAXPEA_N@Z$rtcName$0
	ORG $+96
?ShowExampleAppDocuments@@YAXPEA_N@Z$rtcFrameData DD 02H ; ShowExampleAppDocuments
	DD	00H
	DQ	FLAT:?ShowExampleAppDocuments@@YAXPEA_N@Z$rtcVarDesc
$cppxdata$?ShowExampleAppDocuments@@YAXPEA_N@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?ShowExampleAppDocuments@@YAXPEA_N@Z
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$?ShowExampleAppDocuments@@YAXPEA_N@Z
	DD	04a8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_snprintf DD 025054a19H
	DD	011d2322H
	DD	070160025H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_snprintf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
_snprintf$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:_snprintf$rtcName$0
	ORG $+48
_snprintf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_snprintf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 025054a19H
	DD	011d2322H
	DD	070160025H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
sprintf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
sprintf$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:sprintf$rtcName$0
	ORG $+48
sprintf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:sprintf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 035053901H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf DD 035053901H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 035053901H
	DD	011d3322H
	DD	070160023H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ DD 05051c01H
	DD	010a030dH
	DD	070030019H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 05051c01H
	DD	010a030dH
	DD	070030019H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetCenter@ImGuiViewport@@QEBA?AUImVec2@@XZ DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetDebugName@ImFont@@QEBAPEBDXZ DD 05052801H
	DD	010e0311H
	DD	07007001bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImVec2@@@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$ImVector@UImVec2@@@@QEBAHXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImVec2@@@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImVec2@@@@QEAA@XZ DD imagerel ??1?$ImVector@UImVec2@@@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@UImVec2@@@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@UImVec2@@@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImVec2@@@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@UImVec2@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImVec2@@@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?HSV@ImColor@@SA?AU1@MMMM@Z DD 035054d19H
	DD	01203325H
	DD	07019002bH
	DD	05018H
	DD	imagerel __GSHandlerCheck
	DD	0148H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?HSV@ImColor@@SA?AU1@MMMM@Z$rtcName$0 DB 072H		; ImColor::HSV
	DB	00H
	ORG $+2
?HSV@ImColor@@SA?AU1@MMMM@Z$rtcName$1 DB 067H		; ImColor::HSV
	DB	00H
	ORG $+2
?HSV@ImColor@@SA?AU1@MMMM@Z$rtcName$2 DB 062H		; ImColor::HSV
	DB	00H
	ORG $+6
?HSV@ImColor@@SA?AU1@MMMM@Z$rtcVarDesc DD 074H		; ImColor::HSV
	DD	04H
	DQ	FLAT:?HSV@ImColor@@SA?AU1@MMMM@Z$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:?HSV@ImColor@@SA?AU1@MMMM@Z$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?HSV@ImColor@@SA?AU1@MMMM@Z$rtcName$0
	ORG $+144
?HSV@ImColor@@SA?AU1@MMMM@Z$rtcFrameData DD 03H		; ImColor::HSV
	DD	00H
	DQ	FLAT:?HSV@ImColor@@SA?AU1@MMMM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??BImColor@@QEBA?AUImVec4@@XZ DD 05062e01H
	DD	01140317H
	DD	0700d0018H
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??BImColor@@QEBAIXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImColor@@QEAA@AEBUImVec4@@@Z DD 05062e01H
	DD	01140317H
	DD	0700d0018H
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImColor@@QEAA@MMMM@Z DD 035053c01H
	DD	01203325H
	DD	07019001fH
	DD	05018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ImGuiTextBuffer@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@ImGuiTextBuffer@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@ImGuiTextBuffer@@QEBAHXZ DD 05052801H
	DD	010e0311H
	DD	07007001bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?end@ImGuiTextBuffer@@QEBAPEBDXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?begin@ImGuiTextBuffer@@QEBAPEBDXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??AImGuiTextBuffer@@QEBADH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiTextBuffer@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@D@@QEAAXAEBD@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@D@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@D@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@D@@QEBAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@D@@QEBAAEBDXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?front@?$ImVector@D@@QEBAAEBDXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?begin@?$ImVector@D@@QEAAPEADXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$ImVector@D@@QEBAHXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$ImVector@D@@QEBAHXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?empty@?$ImVector@D@@QEBA_NXZ DD 05052801H
	DD	010e0311H
	DD	07007001bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@D@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@D@@QEAA@XZ DD imagerel ??1?$ImVector@D@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@D@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@D@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@D@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@D@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@D@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ImGuiTextFilter@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?empty@?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEBA_NXZ DD 05052801H
	DD	010e0311H
	DD	07007001bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEAA@XZ DD imagerel ??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IsActive@ImGuiTextFilter@@QEBA_NXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SelectAll@ImGuiInputTextCallbackData@@QEAAXXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@G@@QEAAAEAGH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowUserGuide@ImGui@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	070030021H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowFontSelector@ImGui@@YAXPEBD@Z DD 025052a01H
	DD	010e2313H
	DD	070070031H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowStyleSelector@ImGui@@YA_NPEBD@Z DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z DD imagerel ?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z
	DD	0ffffffffH
	DD	imagerel ?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z+191
	DD	00H
	DD	imagerel ?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z+204
	DD	0ffffffffH
	DD	imagerel ?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z+3400
	DD	01H
	DD	imagerel ?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z+3432
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z DD 045064719H
	DD	010f4314H
	DD	0700800e4H
	DD	050066007H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z
	DD	071aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z$rtcName$0 DB 062H ; ImGui::ShowStyleEditor
	DB	06fH
	DB	072H
	DB	064H
	DB	065H
	DB	072H
	DB	00H
	ORG $+1
?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z$rtcName$1 DB 062H ; ImGui::ShowStyleEditor
	DB	06fH
	DB	072H
	DB	064H
	DB	065H
	DB	072H
	DB	00H
	ORG $+1
?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z$rtcName$2 DB 062H ; ImGui::ShowStyleEditor
	DB	06fH
	DB	072H
	DB	064H
	DB	065H
	DB	072H
	DB	00H
	ORG $+1
?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z$rtcName$3 DB 077H ; ImGui::ShowStyleEditor
	DB	069H
	DB	06eH
	DB	064H
	DB	06fH
	DB	077H
	DB	05fH
	DB	06dH
	DB	065H
	DB	06eH
	DB	075H
	DB	05fH
	DB	062H
	DB	075H
	DB	074H
	DB	074H
	DB	06fH
	DB	06eH
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	069H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z$rtcName$4 DB 070H ; ImGui::ShowStyleEditor
	DB	031H
	DB	00H
	ORG $+1
?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z$rtcFrameData DD 05H ; ImGui::ShowStyleEditor
	DD	00H
	DQ	FLAT:?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z$rtcVarDesc
$cppxdata$?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z
	DD	06e8H
	DD	00H
	DD	01H
?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z$rtcVarDesc DD 0328H ; ImGui::ShowStyleEditor
	DD	08H
	DQ	FLAT:?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z$rtcName$4
	DD	0c4H
	DD	04H
	DQ	FLAT:?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z$rtcName$3
	DD	0a4H
	DD	01H
	DQ	FLAT:?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z$rtcName$2
	DD	084H
	DD	01H
	DQ	FLAT:?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z$rtcName$1
	DD	064H
	DD	01H
	DQ	FLAT:?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowAboutWindow@ImGui@@YAXPEA_N@Z DD 035053b19H
	DD	010e3313H
	DD	070070035H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0190H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShowAboutWindow@ImGui@@YAXPEA_N@Z$rtcName$0 DB 063H	; ImGui::ShowAboutWindow
	DB	068H
	DB	069H
	DB	06cH
	DB	064H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+5
?ShowAboutWindow@ImGui@@YAXPEA_N@Z$rtcVarDesc DD 098H	; ImGui::ShowAboutWindow
	DD	08H
	DQ	FLAT:?ShowAboutWindow@ImGui@@YAXPEA_N@Z$rtcName$0
	ORG $+48
?ShowAboutWindow@ImGui@@YAXPEA_N@Z$rtcFrameData DD 01H	; ImGui::ShowAboutWindow
	DD	00H
	DQ	FLAT:?ShowAboutWindow@ImGui@@YAXPEA_N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShowDemoWindow@ImGui@@YAXPEA_N@Z DD 035053b19H
	DD	010e3313H
	DD	070070049H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0230H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShowDemoWindow@ImGui@@YAXPEA_N@Z$rtcName$0 DB 062H	; ImGui::ShowDemoWindow
	DB	061H
	DB	063H
	DB	06bH
	DB	065H
	DB	06eH
	DB	064H
	DB	05fH
	DB	066H
	DB	06cH
	DB	061H
	DB	067H
	DB	073H
	DB	00H
	ORG $+2
?ShowDemoWindow@ImGui@@YAXPEA_N@Z$rtcVarDesc DD 0b4H	; ImGui::ShowDemoWindow
	DD	04H
	DQ	FLAT:?ShowDemoWindow@ImGui@@YAXPEA_N@Z$rtcName$0
	ORG $+48
?ShowDemoWindow@ImGui@@YAXPEA_N@Z$rtcFrameData DD 01H	; ImGui::ShowDemoWindow
	DD	00H
	DQ	FLAT:?ShowDemoWindow@ImGui@@YAXPEA_N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec4@@QEAA@MMMM@Z DD 05031f01H
	DD	0721c031fH
	DD	05018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec4@@QEAA@XZ DD 05030d01H
	DD	0720a030dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec2@@QEAA@MM@Z DD 05031901H
	DD	072160319H
	DD	05012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec2@@QEAA@XZ DD 05030d01H
	DD	0720a030dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?memchr@@YAPEAXPEAXH_K@Z DD 025053301H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 025053901H
	DD	011d2322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Fclose_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@YAXXZ
text$yd	SEGMENT
??__Fclose_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@YAXXZ PROC ; `ShowExampleAppDocuments'::`2'::`dynamic atexit destructor for 'close_queue'', COMDAT
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  00025	e8 00 00 00 00	 call	 ??1?$ImVector@PEAUMyDocument@@@@QEAA@XZ ; ImVector<MyDocument * __ptr64>::~ImVector<MyDocument * __ptr64>
  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
??__Fclose_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@YAXXZ ENDP ; `ShowExampleAppDocuments'::`2'::`dynamic atexit destructor for 'close_queue''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@PEAUMyDocument@@@@QEAAXAEBQEAUMyDocument@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@PEAUMyDocument@@@@QEAAXAEBQEAUMyDocument@@@Z PROC ; ImVector<MyDocument * __ptr64>::push_back, COMDAT

; 1807 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00040	39 08		 cmp	 DWORD PTR [rax], ecx
  00042	75 27		 jne	 SHORT $LN2@push_back
  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	8b 00		 mov	 eax, DWORD PTR [rax]
  0004d	ff c0		 inc	 eax
  0004f	8b d0		 mov	 edx, eax
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@PEAUMyDocument@@@@QEBAHH@Z ; ImVector<MyDocument * __ptr64>::_grow_capacity
  0005d	8b d0		 mov	 edx, eax
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?reserve@?$ImVector@PEAUMyDocument@@@@QEAAXH@Z ; ImVector<MyDocument * __ptr64>::reserve
$LN2@push_back:
  0006b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00075	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00080	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00084	41 b8 08 00 00
	00		 mov	 r8d, 8
  0008a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00091	48 8b c8	 mov	 rcx, rax
  00094	e8 00 00 00 00	 call	 memcpy
  00099	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a0	8b 00		 mov	 eax, DWORD PTR [rax]
  000a2	ff c0		 inc	 eax
  000a4	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	89 01		 mov	 DWORD PTR [rcx], eax
  000ad	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b4	5f		 pop	 rdi
  000b5	5d		 pop	 rbp
  000b6	c3		 ret	 0
?push_back@?$ImVector@PEAUMyDocument@@@@QEAAXAEBQEAUMyDocument@@@Z ENDP ; ImVector<MyDocument * __ptr64>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@PEAUMyDocument@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@PEAUMyDocument@@@@QEAAXH@Z PROC	; ImVector<MyDocument * __ptr64>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 c1 e0 03	 shl	 rax, 3
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 c1 e0 03	 shl	 rax, 3
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@PEAUMyDocument@@@@QEAAXH@Z ENDP	; ImVector<MyDocument * __ptr64>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@PEAUMyDocument@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@PEAUMyDocument@@@@QEBAHH@Z PROC ; ImVector<MyDocument * __ptr64>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@PEAUMyDocument@@@@QEBAHH@Z ENDP ; ImVector<MyDocument * __ptr64>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@PEAUMyDocument@@@@QEAAAEAPEAUMyDocument@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@PEAUMyDocument@@@@QEAAAEAPEAUMyDocument@@H@Z PROC ; ImVector<MyDocument * __ptr64>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@PEAUMyDocument@@@@QEAAAEAPEAUMyDocument@@H@Z ENDP ; ImVector<MyDocument * __ptr64>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?empty@?$ImVector@PEAUMyDocument@@@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?empty@?$ImVector@PEAUMyDocument@@@@QEBA_NXZ PROC	; ImVector<MyDocument * __ptr64>::empty, COMDAT

; 1781 :     inline bool         empty() const                       { return Size == 0; }

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+248]
  00028	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	83 38 00	 cmp	 DWORD PTR [rax], 0
  00032	75 0c		 jne	 SHORT $LN3@empty
  00034	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv66[rbp], 1
  0003e	eb 0a		 jmp	 SHORT $LN4@empty
$LN3@empty:
  00040	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv66[rbp], 0
$LN4@empty:
  0004a	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv66[rbp]
  00051	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
?empty@?$ImVector@PEAUMyDocument@@@@QEBA_NXZ ENDP	; ImVector<MyDocument * __ptr64>::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@PEAUMyDocument@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@PEAUMyDocument@@@@QEAAXXZ PROC	; ImVector<MyDocument * __ptr64>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@PEAUMyDocument@@@@QEAAXXZ ENDP	; ImVector<MyDocument * __ptr64>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@PEAUMyDocument@@@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@PEAUMyDocument@@@@QEAA@XZ PROC		; ImVector<MyDocument * __ptr64>::~ImVector<MyDocument * __ptr64>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@PEAUMyDocument@@@@QEAA@XZ ENDP		; ImVector<MyDocument * __ptr64>::~ImVector<MyDocument * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@PEAUMyDocument@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@PEAUMyDocument@@@@QEAA@XZ PROC		; ImVector<MyDocument * __ptr64>::ImVector<MyDocument * __ptr64>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@PEAUMyDocument@@@@QEAA@XZ ENDP		; ImVector<MyDocument * __ptr64>::ImVector<MyDocument * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Fapp@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@YAXXZ
text$yd	SEGMENT
??__Fapp@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@YAXXZ PROC ; `ShowExampleAppDocuments'::`2'::`dynamic atexit destructor for 'app'', COMDAT
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?app@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4UExampleAppDocuments@@A
  00025	e8 00 00 00 00	 call	 ??1ExampleAppDocuments@@QEAA@XZ
  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
??__Fapp@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@YAXXZ ENDP ; `ShowExampleAppDocuments'::`2'::`dynamic atexit destructor for 'app''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?NotifyOfDocumentsClosedElsewhere@@YAXAEAUExampleAppDocuments@@@Z
_TEXT	SEGMENT
doc_n$1 = 4
doc$2 = 40
app$ = 288
?NotifyOfDocumentsClosedElsewhere@@YAXAEAUExampleAppDocuments@@@Z PROC ; NotifyOfDocumentsClosedElsewhere, COMDAT

; 7795 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 7796 :     for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)

  0002a	c7 45 04 00 00
	00 00		 mov	 DWORD PTR doc_n$1[rbp], 0
  00031	eb 08		 jmp	 SHORT $LN4@NotifyOfDo
$LN2@NotifyOfDo:
  00033	8b 45 04	 mov	 eax, DWORD PTR doc_n$1[rbp]
  00036	ff c0		 inc	 eax
  00038	89 45 04	 mov	 DWORD PTR doc_n$1[rbp], eax
$LN4@NotifyOfDo:
  0003b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR app$[rbp]
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	39 45 04	 cmp	 DWORD PTR doc_n$1[rbp], eax
  00047	7d 4b		 jge	 SHORT $LN3@NotifyOfDo

; 7797 :     {
; 7798 :         MyDocument* doc = &app.Documents[doc_n];

  00049	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR app$[rbp]
  00050	8b 55 04	 mov	 edx, DWORD PTR doc_n$1[rbp]
  00053	48 8b c8	 mov	 rcx, rax
  00056	e8 00 00 00 00	 call	 ??A?$ImVector@UMyDocument@@@@QEAAAEAUMyDocument@@H@Z ; ImVector<MyDocument>::operator[]
  0005b	48 89 45 28	 mov	 QWORD PTR doc$2[rbp], rax

; 7799 :         if (!doc->Open && doc->OpenPrev)

  0005f	48 8b 45 28	 mov	 rax, QWORD PTR doc$2[rbp]
  00063	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00067	85 c0		 test	 eax, eax
  00069	75 18		 jne	 SHORT $LN5@NotifyOfDo
  0006b	48 8b 45 28	 mov	 rax, QWORD PTR doc$2[rbp]
  0006f	0f b6 40 09	 movzx	 eax, BYTE PTR [rax+9]
  00073	85 c0		 test	 eax, eax
  00075	74 0c		 je	 SHORT $LN5@NotifyOfDo

; 7800 :             ImGui::SetTabItemClosed(doc->Name);

  00077	48 8b 45 28	 mov	 rax, QWORD PTR doc$2[rbp]
  0007b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0007e	e8 00 00 00 00	 call	 ?SetTabItemClosed@ImGui@@YAXPEBD@Z ; ImGui::SetTabItemClosed
$LN5@NotifyOfDo:

; 7801 :         doc->OpenPrev = doc->Open;

  00083	48 8b 45 28	 mov	 rax, QWORD PTR doc$2[rbp]
  00087	48 8b 4d 28	 mov	 rcx, QWORD PTR doc$2[rbp]
  0008b	0f b6 49 08	 movzx	 ecx, BYTE PTR [rcx+8]
  0008f	88 48 09	 mov	 BYTE PTR [rax+9], cl

; 7802 :     }

  00092	eb 9f		 jmp	 SHORT $LN2@NotifyOfDo
$LN3@NotifyOfDo:

; 7803 : }

  00094	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0009b	5f		 pop	 rdi
  0009c	5d		 pop	 rbp
  0009d	c3		 ret	 0
?NotifyOfDocumentsClosedElsewhere@@YAXAEAUExampleAppDocuments@@@Z ENDP ; NotifyOfDocumentsClosedElsewhere
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ExampleAppDocuments@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1ExampleAppDocuments@@QEAA@XZ PROC			; ExampleAppDocuments::~ExampleAppDocuments, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ??1?$ImVector@UMyDocument@@@@QEAA@XZ ; ImVector<MyDocument>::~ImVector<MyDocument>
  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
??1ExampleAppDocuments@@QEAA@XZ ENDP			; ExampleAppDocuments::~ExampleAppDocuments
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ??0ExampleAppDocuments@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 392
$T2 = 452
$T3 = 504
$T4 = 564
$T5 = 616
$T6 = 676
$T7 = 728
$T8 = 788
$T9 = 840
$T10 = 900
$T11 = 952
$T12 = 1012
$T13 = 1064
this$ = 1120
??0ExampleAppDocuments@@QEAA@XZ PROC			; ExampleAppDocuments::ExampleAppDocuments, COMDAT

; 7775 :     ExampleAppDocuments()

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 78 04
	00 00		 sub	 rsp, 1144		; 00000478H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 1e 01 00 00	 mov	 ecx, 286		; 0000011eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 98
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1176]
  0002a	48 c7 85 28 04
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T13[rbp], -2

; 7776 :     {

  00035	48 8b 85 60 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 8b c8	 mov	 rcx, rax
  0003f	e8 00 00 00 00	 call	 ??0?$ImVector@UMyDocument@@@@QEAA@XZ ; ImVector<MyDocument>::ImVector<MyDocument>
  00044	90		 npad	 1

; 7777 :         Documents.push_back(MyDocument("Lettuce",             true,  ImVec4(0.4f, 0.8f, 0.4f, 1.0f)));

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0004d	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00053	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3ecccccd
  0005b	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f4ccccd
  00063	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ecccccd
  0006b	48 8d 8d c4 01
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  00072	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00077	4c 8b c8	 mov	 r9, rax
  0007a	41 b0 01	 mov	 r8b, 1
  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07KPHKCHJL@Lettuce?$AA@
  00084	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0008b	e8 00 00 00 00	 call	 ??0MyDocument@@QEAA@PEBD_NAEBUImVec4@@@Z ; MyDocument::MyDocument
  00090	48 8b 8d 60 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00097	48 8b d0	 mov	 rdx, rax
  0009a	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UMyDocument@@@@QEAAXAEBUMyDocument@@@Z ; ImVector<MyDocument>::push_back

; 7778 :         Documents.push_back(MyDocument("Eggplant",            true,  ImVec4(0.8f, 0.5f, 1.0f, 1.0f)));

  0009f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000a7	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  000ad	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  000b5	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f000000
  000bd	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f4ccccd
  000c5	48 8d 8d 34 02
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  000cc	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  000d1	4c 8b c8	 mov	 r9, rax
  000d4	41 b0 01	 mov	 r8b, 1
  000d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08MEKMCLOD@Eggplant?$AA@
  000de	48 8d 8d f8 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  000e5	e8 00 00 00 00	 call	 ??0MyDocument@@QEAA@PEBD_NAEBUImVec4@@@Z ; MyDocument::MyDocument
  000ea	48 8b 8d 60 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	48 8b d0	 mov	 rdx, rax
  000f4	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UMyDocument@@@@QEAAXAEBUMyDocument@@@Z ; ImVector<MyDocument>::push_back

; 7779 :         Documents.push_back(MyDocument("Carrot",              true,  ImVec4(1.0f, 0.8f, 0.5f, 1.0f)));

  000f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00101	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00107	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000
  0010f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f4ccccd
  00117	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0011f	48 8d 8d a4 02
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00126	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0012b	4c 8b c8	 mov	 r9, rax
  0012e	41 b0 01	 mov	 r8b, 1
  00131	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06JOCEHIMN@Carrot?$AA@
  00138	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  0013f	e8 00 00 00 00	 call	 ??0MyDocument@@QEAA@PEBD_NAEBUImVec4@@@Z ; MyDocument::MyDocument
  00144	48 8b 8d 60 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0014b	48 8b d0	 mov	 rdx, rax
  0014e	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UMyDocument@@@@QEAAXAEBUMyDocument@@@Z ; ImVector<MyDocument>::push_back

; 7780 :         Documents.push_back(MyDocument("Tomato",              false, ImVec4(1.0f, 0.3f, 0.4f, 1.0f)));

  00153	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0015b	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00161	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3ecccccd
  00169	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e99999a
  00171	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00179	48 8d 8d 14 03
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00180	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00185	4c 8b c8	 mov	 r9, rax
  00188	45 33 c0	 xor	 r8d, r8d
  0018b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06BPAOMENE@Tomato?$AA@
  00192	48 8d 8d d8 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00199	e8 00 00 00 00	 call	 ??0MyDocument@@QEAA@PEBD_NAEBUImVec4@@@Z ; MyDocument::MyDocument
  0019e	48 8b 8d 60 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	48 8b d0	 mov	 rdx, rax
  001a8	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UMyDocument@@@@QEAAXAEBUMyDocument@@@Z ; ImVector<MyDocument>::push_back

; 7781 :         Documents.push_back(MyDocument("A Rather Long Title", false));

  001ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001b5	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  001bb	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  001c3	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  001cb	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  001d3	48 8d 8d 84 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  001da	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  001df	4c 8b c8	 mov	 r9, rax
  001e2	45 33 c0	 xor	 r8d, r8d
  001e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@GMCEAMGE@A?5Rather?5Long?5Title?$AA@
  001ec	48 8d 8d 48 03
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  001f3	e8 00 00 00 00	 call	 ??0MyDocument@@QEAA@PEBD_NAEBUImVec4@@@Z ; MyDocument::MyDocument
  001f8	48 8b 8d 60 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ff	48 8b d0	 mov	 rdx, rax
  00202	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UMyDocument@@@@QEAAXAEBUMyDocument@@@Z ; ImVector<MyDocument>::push_back

; 7782 :         Documents.push_back(MyDocument("Some Document",       false));

  00207	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0020f	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00215	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  0021d	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00225	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0022d	48 8d 8d f4 03
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  00234	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00239	4c 8b c8	 mov	 r9, rax
  0023c	45 33 c0	 xor	 r8d, r8d
  0023f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@ILMKPHFK@Some?5Document?$AA@
  00246	48 8d 8d b8 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  0024d	e8 00 00 00 00	 call	 ??0MyDocument@@QEAA@PEBD_NAEBUImVec4@@@Z ; MyDocument::MyDocument
  00252	48 8b 8d 60 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00259	48 8b d0	 mov	 rdx, rax
  0025c	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UMyDocument@@@@QEAAXAEBUMyDocument@@@Z ; ImVector<MyDocument>::push_back
  00261	90		 npad	 1

; 7783 :     }

  00262	48 8b 85 60 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00269	48 8d a5 48 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1096]
  00270	5f		 pop	 rdi
  00271	5d		 pop	 rbp
  00272	c3		 ret	 0
??0ExampleAppDocuments@@QEAA@XZ ENDP			; ExampleAppDocuments::ExampleAppDocuments
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 392
$T2 = 452
$T3 = 504
$T4 = 564
$T5 = 616
$T6 = 676
$T7 = 728
$T8 = 788
$T9 = 840
$T10 = 900
$T11 = 952
$T12 = 1012
$T13 = 1064
this$ = 1120
?dtor$0@?0???0ExampleAppDocuments@@QEAA@XZ@4HA PROC	; `ExampleAppDocuments::ExampleAppDocuments'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8b 8d 60 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$ImVector@UMyDocument@@@@QEAA@XZ ; ImVector<MyDocument>::~ImVector<MyDocument>
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ExampleAppDocuments@@QEAA@XZ@4HA ENDP	; `ExampleAppDocuments::ExampleAppDocuments'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 392
$T2 = 452
$T3 = 504
$T4 = 564
$T5 = 616
$T6 = 676
$T7 = 728
$T8 = 788
$T9 = 840
$T10 = 900
$T11 = 952
$T12 = 1012
$T13 = 1064
this$ = 1120
?dtor$0@?0???0ExampleAppDocuments@@QEAA@XZ@4HA PROC	; `ExampleAppDocuments::ExampleAppDocuments'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8b 8d 60 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$ImVector@UMyDocument@@@@QEAA@XZ ; ImVector<MyDocument>::~ImVector<MyDocument>
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ExampleAppDocuments@@QEAA@XZ@4HA ENDP	; `ExampleAppDocuments::ExampleAppDocuments'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@UMyDocument@@@@QEAAXAEBUMyDocument@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@UMyDocument@@@@QEAAXAEBUMyDocument@@@Z PROC ; ImVector<MyDocument>::push_back, COMDAT

; 1807 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00040	39 08		 cmp	 DWORD PTR [rax], ecx
  00042	75 27		 jne	 SHORT $LN2@push_back
  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	8b 00		 mov	 eax, DWORD PTR [rax]
  0004d	ff c0		 inc	 eax
  0004f	8b d0		 mov	 edx, eax
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@UMyDocument@@@@QEBAHH@Z ; ImVector<MyDocument>::_grow_capacity
  0005d	8b d0		 mov	 edx, eax
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UMyDocument@@@@QEAAXH@Z ; ImVector<MyDocument>::reserve
$LN2@push_back:
  0006b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00075	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00079	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00080	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00084	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  0008a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00091	48 8b c8	 mov	 rcx, rax
  00094	e8 00 00 00 00	 call	 memcpy
  00099	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a0	8b 00		 mov	 eax, DWORD PTR [rax]
  000a2	ff c0		 inc	 eax
  000a4	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	89 01		 mov	 DWORD PTR [rcx], eax
  000ad	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b4	5f		 pop	 rdi
  000b5	5d		 pop	 rbp
  000b6	c3		 ret	 0
?push_back@?$ImVector@UMyDocument@@@@QEAAXAEBUMyDocument@@@Z ENDP ; ImVector<MyDocument>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@UMyDocument@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UMyDocument@@@@QEAAXH@Z PROC	; ImVector<MyDocument>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@UMyDocument@@@@QEAAXH@Z ENDP	; ImVector<MyDocument>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@UMyDocument@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UMyDocument@@@@QEBAHH@Z PROC	; ImVector<MyDocument>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@UMyDocument@@@@QEBAHH@Z ENDP	; ImVector<MyDocument>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@UMyDocument@@@@QEAAAEAUMyDocument@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UMyDocument@@@@QEAAAEAUMyDocument@@H@Z PROC ; ImVector<MyDocument>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0006f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@UMyDocument@@@@QEAAAEAUMyDocument@@H@Z ENDP ; ImVector<MyDocument>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@UMyDocument@@@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@UMyDocument@@@@QEAA@XZ PROC		; ImVector<MyDocument>::~ImVector<MyDocument>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@UMyDocument@@@@QEAA@XZ ENDP		; ImVector<MyDocument>::~ImVector<MyDocument>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@UMyDocument@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UMyDocument@@@@QEAA@XZ PROC		; ImVector<MyDocument>::ImVector<MyDocument>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@UMyDocument@@@@QEAA@XZ ENDP		; ImVector<MyDocument>::ImVector<MyDocument>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?DisplayContextMenu@MyDocument@@SAXPEAU1@@Z
_TEXT	SEGMENT
buf$ = 16
__$ArrayPad$ = 472
doc$ = 512
?DisplayContextMenu@MyDocument@@SAXPEAU1@@Z PROC	; MyDocument::DisplayContextMenu, COMDAT

; 7757 :     {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 02
	00 00		 sub	 rsp, 520		; 00000208H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR [rsp+552]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 d8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 7758 :         if (!ImGui::BeginPopupContextItem())

  0003b	ba 01 00 00 00	 mov	 edx, 1
  00040	33 c9		 xor	 ecx, ecx
  00042	e8 00 00 00 00	 call	 ?BeginPopupContextItem@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopupContextItem
  00047	0f b6 c0	 movzx	 eax, al
  0004a	85 c0		 test	 eax, eax
  0004c	75 05		 jne	 SHORT $LN2@DisplayCon

; 7759 :             return;

  0004e	e9 86 00 00 00	 jmp	 $LN1@DisplayCon
$LN2@DisplayCon:

; 7760 : 
; 7761 :         char buf[256];
; 7762 :         sprintf(buf, "Save %s", doc->Name);

  00053	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR doc$[rbp]
  0005a	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07HKLKIEAD@Save?5?$CFs?$AA@
  00064	48 8d 4d 10	 lea	 rcx, QWORD PTR buf$[rbp]
  00068	e8 00 00 00 00	 call	 sprintf

; 7763 :         if (ImGui::MenuItem(buf, "CTRL+S", false, doc->Open))

  0006d	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR doc$[rbp]
  00074	44 0f b6 48 08	 movzx	 r9d, BYTE PTR [rax+8]
  00079	45 33 c0	 xor	 r8d, r8d
  0007c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06LGPANJDM@CTRL?$CLS?$AA@
  00083	48 8d 4d 10	 lea	 rcx, QWORD PTR buf$[rbp]
  00087	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  0008c	0f b6 c0	 movzx	 eax, al
  0008f	85 c0		 test	 eax, eax
  00091	74 0c		 je	 SHORT $LN3@DisplayCon

; 7764 :             doc->DoSave();

  00093	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR doc$[rbp]
  0009a	e8 00 00 00 00	 call	 ?DoSave@MyDocument@@QEAAXXZ ; MyDocument::DoSave
$LN3@DisplayCon:

; 7765 :         if (ImGui::MenuItem("Close", "CTRL+W", false, doc->Open))

  0009f	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR doc$[rbp]
  000a6	44 0f b6 48 08	 movzx	 r9d, BYTE PTR [rax+8]
  000ab	45 33 c0	 xor	 r8d, r8d
  000ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06NCJMBMDI@CTRL?$CLW?$AA@
  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LGELBCGM@Close?$AA@
  000bc	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  000c1	0f b6 c0	 movzx	 eax, al
  000c4	85 c0		 test	 eax, eax
  000c6	74 0c		 je	 SHORT $LN4@DisplayCon

; 7766 :             doc->DoQueueClose();

  000c8	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR doc$[rbp]
  000cf	e8 00 00 00 00	 call	 ?DoQueueClose@MyDocument@@QEAAXXZ ; MyDocument::DoQueueClose
$LN4@DisplayCon:

; 7767 :         ImGui::EndPopup();

  000d4	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN1@DisplayCon:

; 7768 :     }

  000d9	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?DisplayContextMenu@MyDocument@@SAXPEAU1@@Z$rtcFrameData
  000e4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000e9	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000f0	48 33 cd	 xor	 rcx, rbp
  000f3	e8 00 00 00 00	 call	 __security_check_cookie
  000f8	48 8d a5 e8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+488]
  000ff	5f		 pop	 rdi
  00100	5d		 pop	 rbp
  00101	c3		 ret	 0
?DisplayContextMenu@MyDocument@@SAXPEAU1@@Z ENDP	; MyDocument::DisplayContextMenu
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?DisplayContents@MyDocument@@SAXPEAU1@@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
doc$ = 288
?DisplayContents@MyDocument@@SAXPEAU1@@Z PROC		; MyDocument::DisplayContents, COMDAT

; 7740 :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 7741 :         ImGui::PushID(doc);

  0002a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR doc$[rbp]
  00031	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPEBX@Z ; ImGui::PushID

; 7742 :         ImGui::Text("Document \"%s\"", doc->Name);

  00036	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR doc$[rbp]
  0003d	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@LKIEAKBN@Document?5?$CC?$CFs?$CC?$AA@
  00047	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 7743 :         ImGui::PushStyleColor(ImGuiCol_Text, doc->Color);

  0004c	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR doc$[rbp]
  00053	48 83 c0 0c	 add	 rax, 12
  00057	48 8b d0	 mov	 rdx, rax
  0005a	33 c9		 xor	 ecx, ecx
  0005c	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor

; 7744 :         ImGui::TextWrapped("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.");

  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0HM@PALHCHMO@Lorem?5ipsum?5dolor?5sit?5amet?0?5cons@
  00068	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped

; 7745 :         ImGui::PopStyleColor();

  0006d	b9 01 00 00 00	 mov	 ecx, 1
  00072	e8 00 00 00 00	 call	 ?PopStyleColor@ImGui@@YAXH@Z ; ImGui::PopStyleColor

; 7746 :         if (ImGui::Button("Modify", ImVec2(100, 0)))

  00077	0f 57 d2	 xorps	 xmm2, xmm2
  0007a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42c80000
  00082	48 8d 8d c4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00089	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0008e	48 8b d0	 mov	 rdx, rax
  00091	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06CGNGJFJO@Modify?$AA@
  00098	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  0009d	0f b6 c0	 movzx	 eax, al
  000a0	85 c0		 test	 eax, eax
  000a2	74 0b		 je	 SHORT $LN2@DisplayCon

; 7747 :             doc->Dirty = true;

  000a4	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR doc$[rbp]
  000ab	c6 40 0a 01	 mov	 BYTE PTR [rax+10], 1
$LN2@DisplayCon:

; 7748 :         ImGui::SameLine();

  000af	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  000b7	0f 57 c0	 xorps	 xmm0, xmm0
  000ba	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 7749 :         if (ImGui::Button("Save", ImVec2(100, 0)))

  000bf	0f 57 d2	 xorps	 xmm2, xmm2
  000c2	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42c80000
  000ca	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  000d1	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000d6	48 8b d0	 mov	 rdx, rax
  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04INACKGJP@Save?$AA@
  000e0	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  000e5	0f b6 c0	 movzx	 eax, al
  000e8	85 c0		 test	 eax, eax
  000ea	74 0c		 je	 SHORT $LN3@DisplayCon

; 7750 :             doc->DoSave();

  000ec	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR doc$[rbp]
  000f3	e8 00 00 00 00	 call	 ?DoSave@MyDocument@@QEAAXXZ ; MyDocument::DoSave
$LN3@DisplayCon:

; 7751 :         ImGui::ColorEdit3("color", &doc->Color.x);  // Useful to test drag and drop and hold-dragged-to-open-tab behavior.

  000f8	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR doc$[rbp]
  000ff	48 83 c0 0c	 add	 rax, 12
  00103	45 33 c0	 xor	 r8d, r8d
  00106	48 8b d0	 mov	 rdx, rax
  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05PEENBMOG@color?$AA@
  00110	e8 00 00 00 00	 call	 ?ColorEdit3@ImGui@@YA_NPEBDQEAMH@Z ; ImGui::ColorEdit3

; 7752 :         ImGui::PopID();

  00115	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 7753 :     }

  0011a	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00121	5f		 pop	 rdi
  00122	5d		 pop	 rbp
  00123	c3		 ret	 0
?DisplayContents@MyDocument@@SAXPEAU1@@Z ENDP		; MyDocument::DisplayContents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?DoSave@MyDocument@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?DoSave@MyDocument@@QEAAXXZ PROC			; MyDocument::DoSave, COMDAT

; 7736 :     void DoSave()       { Dirty = false; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c6 40 0a 00	 mov	 BYTE PTR [rax+10], 0
  00033	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003a	5f		 pop	 rdi
  0003b	5d		 pop	 rbp
  0003c	c3		 ret	 0
?DoSave@MyDocument@@QEAAXXZ ENDP			; MyDocument::DoSave
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?DoForceClose@MyDocument@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?DoForceClose@MyDocument@@QEAAXXZ PROC			; MyDocument::DoForceClose, COMDAT

; 7735 :     void DoForceClose() { Open = false; Dirty = false; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c6 40 08 00	 mov	 BYTE PTR [rax+8], 0
  00033	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003a	c6 40 0a 00	 mov	 BYTE PTR [rax+10], 0
  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?DoForceClose@MyDocument@@QEAAXXZ ENDP			; MyDocument::DoForceClose
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?DoQueueClose@MyDocument@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?DoQueueClose@MyDocument@@QEAAXXZ PROC			; MyDocument::DoQueueClose, COMDAT

; 7734 :     void DoQueueClose() { WantClose = true; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c6 40 0b 01	 mov	 BYTE PTR [rax+11], 1
  00033	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003a	5f		 pop	 rdi
  0003b	5d		 pop	 rbp
  0003c	c3		 ret	 0
?DoQueueClose@MyDocument@@QEAAXXZ ENDP			; MyDocument::DoQueueClose
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?DoOpen@MyDocument@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?DoOpen@MyDocument@@QEAAXXZ PROC			; MyDocument::DoOpen, COMDAT

; 7733 :     void DoOpen()       { Open = true; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c6 40 08 01	 mov	 BYTE PTR [rax+8], 1
  00033	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003a	5f		 pop	 rdi
  0003b	5d		 pop	 rbp
  0003c	c3		 ret	 0
?DoOpen@MyDocument@@QEAAXXZ ENDP			; MyDocument::DoOpen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ??0MyDocument@@QEAA@PEBD_NAEBUImVec4@@@Z
_TEXT	SEGMENT
this$ = 224
name$ = 232
open$ = 240
color$ = 248
??0MyDocument@@QEAA@PEBD_NAEBUImVec4@@@Z PROC		; MyDocument::MyDocument, COMDAT

; 7725 :     MyDocument(const char* name, bool open = true, const ImVec4& color = ImVec4(1.0f, 1.0f, 1.0f, 1.0f))

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  0001e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 7726 :     {

  0003a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	48 83 c0 0c	 add	 rax, 12
  00045	48 8b c8	 mov	 rcx, rax
  00048	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@XZ	; ImVec4::ImVec4

; 7727 :         Name = name;

  0004d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00054	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR name$[rbp]
  0005b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 7728 :         Open = OpenPrev = open;

  0005e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00065	0f b6 8d f0 00
	00 00		 movzx	 ecx, BYTE PTR open$[rbp]
  0006c	88 48 09	 mov	 BYTE PTR [rax+9], cl
  0006f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00076	0f b6 8d f0 00
	00 00		 movzx	 ecx, BYTE PTR open$[rbp]
  0007d	88 48 08	 mov	 BYTE PTR [rax+8], cl

; 7729 :         Dirty = false;

  00080	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00087	c6 40 0a 00	 mov	 BYTE PTR [rax+10], 0

; 7730 :         WantClose = false;

  0008b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00092	c6 40 0b 00	 mov	 BYTE PTR [rax+11], 0

; 7731 :         Color = color;

  00096	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009d	48 8d 78 0c	 lea	 rdi, QWORD PTR [rax+12]
  000a1	48 8b b5 f8 00
	00 00		 mov	 rsi, QWORD PTR color$[rbp]
  000a8	b9 10 00 00 00	 mov	 ecx, 16
  000ad	f3 a4		 rep movsb

; 7732 :     }

  000af	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b6	48 8d a5 c0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+192]
  000bd	5f		 pop	 rdi
  000be	5e		 pop	 rsi
  000bf	5d		 pop	 rbp
  000c0	c3		 ret	 0
??0MyDocument@@QEAA@PEBD_NAEBUImVec4@@@Z ENDP		; MyDocument::MyDocument
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Fpoints@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@YAXXZ
text$yd	SEGMENT
??__Fpoints@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@YAXXZ PROC ; `ShowExampleAppCustomRendering'::`22'::`dynamic atexit destructor for 'points'', COMDAT
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?points@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4U?$ImVector@UImVec2@@@@A
  00025	e8 00 00 00 00	 call	 ??1?$ImVector@UImVec2@@@@QEAA@XZ ; ImVector<ImVec2>::~ImVector<ImVec2>
  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
??__Fpoints@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@YAXXZ ENDP ; `ShowExampleAppCustomRendering'::`22'::`dynamic atexit destructor for 'points''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?Step@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z
_TEXT	SEGMENT
step$ = 4
$T1 = 228
data$ = 288
?Step@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z PROC ; `ShowExampleAppConstrainedResize'::`2'::CustomConstraints::Step, COMDAT

; 7270 :         static void Step(ImGuiSizeCallbackData* data)           { float step = *(float*)data->UserData; data->DesiredSize = ImVec2((int)(data->CurrentSize.x / step + 0.5f) * step, (int)(data->CurrentSize.y / step + 0.5f) * step); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002a	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00031	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00034	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00038	f3 0f 11 45 04	 movss	 DWORD PTR step$[rbp], xmm0
  0003d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00044	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  00049	f3 0f 5e 45 04	 divss	 xmm0, DWORD PTR step$[rbp]
  0004e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00056	f3 0f 2c c0	 cvttss2si eax, xmm0
  0005a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0005e	f3 0f 59 45 04	 mulss	 xmm0, DWORD PTR step$[rbp]
  00063	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  0006a	f3 0f 10 48 10	 movss	 xmm1, DWORD PTR [rax+16]
  0006f	f3 0f 5e 4d 04	 divss	 xmm1, DWORD PTR step$[rbp]
  00074	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  0007c	f3 0f 2c c1	 cvttss2si eax, xmm1
  00080	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00084	f3 0f 59 4d 04	 mulss	 xmm1, DWORD PTR step$[rbp]
  00089	0f 28 d0	 movaps	 xmm2, xmm0
  0008c	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00093	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00098	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009b	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000a2	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
  000a6	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000ad	5f		 pop	 rdi
  000ae	5d		 pop	 rbp
  000af	c3		 ret	 0
?Step@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z ENDP ; `ShowExampleAppConstrainedResize'::`2'::CustomConstraints::Step
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?Square@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z
_TEXT	SEGMENT
tv77 = 192
data$ = 240
?Square@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z PROC ; `ShowExampleAppConstrainedResize'::`2'::CustomConstraints::Square, COMDAT

; 7269 :         static void Square(ImGuiSizeCallbackData* data)         { data->DesiredSize.x = data->DesiredSize.y = IM_MAX(data->CurrentSize.x, data->CurrentSize.y); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+248]
  00028	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  0002f	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00036	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  0003b	0f 2f 41 14	 comiss	 xmm0, DWORD PTR [rcx+20]
  0003f	72 16		 jb	 SHORT $LN3@Square
  00041	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00048	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  0004d	f3 0f 11 85 c0
	00 00 00	 movss	 DWORD PTR tv77[rbp], xmm0
  00055	eb 14		 jmp	 SHORT $LN4@Square
$LN3@Square:
  00057	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  0005e	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  00063	f3 0f 11 85 c0
	00 00 00	 movss	 DWORD PTR tv77[rbp], xmm0
$LN4@Square:
  0006b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00072	f3 0f 10 85 c0
	00 00 00	 movss	 xmm0, DWORD PTR tv77[rbp]
  0007a	f3 0f 11 40 1c	 movss	 DWORD PTR [rax+28], xmm0
  0007f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00086	f3 0f 10 85 c0
	00 00 00	 movss	 xmm0, DWORD PTR tv77[rbp]
  0008e	f3 0f 11 40 18	 movss	 DWORD PTR [rax+24], xmm0
  00093	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0009a	5f		 pop	 rdi
  0009b	5d		 pop	 rbp
  0009c	c3		 ret	 0
?Square@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z ENDP ; `ShowExampleAppConstrainedResize'::`2'::CustomConstraints::Square
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?AspectRatio@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z
_TEXT	SEGMENT
aspect_ratio$ = 4
tv77 = 212
data$ = 256
?AspectRatio@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z PROC ; `ShowExampleAppConstrainedResize'::`2'::CustomConstraints::AspectRatio, COMDAT

; 7268 :         static void AspectRatio(ImGuiSizeCallbackData* data)    { float aspect_ratio = *(float*)data->UserData; data->DesiredSize.x = IM_MAX(data->CurrentSize.x, data->CurrentSize.y); data->DesiredSize.y = (float)(int)(data->DesiredSize.x / aspect_ratio); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  00028	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  0002f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00032	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00036	f3 0f 11 45 04	 movss	 DWORD PTR aspect_ratio$[rbp], xmm0
  0003b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00042	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00049	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  0004e	0f 2f 41 14	 comiss	 xmm0, DWORD PTR [rcx+20]
  00052	72 16		 jb	 SHORT $LN3@AspectRati
  00054	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  0005b	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  00060	f3 0f 11 85 d4
	00 00 00	 movss	 DWORD PTR tv77[rbp], xmm0
  00068	eb 14		 jmp	 SHORT $LN4@AspectRati
$LN3@AspectRati:
  0006a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00071	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  00076	f3 0f 11 85 d4
	00 00 00	 movss	 DWORD PTR tv77[rbp], xmm0
$LN4@AspectRati:
  0007e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00085	f3 0f 10 85 d4
	00 00 00	 movss	 xmm0, DWORD PTR tv77[rbp]
  0008d	f3 0f 11 40 18	 movss	 DWORD PTR [rax+24], xmm0
  00092	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00099	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [rax+24]
  0009e	f3 0f 5e 45 04	 divss	 xmm0, DWORD PTR aspect_ratio$[rbp]
  000a3	f3 0f 2c c0	 cvttss2si eax, xmm0
  000a7	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  000b2	f3 0f 11 40 1c	 movss	 DWORD PTR [rax+28], xmm0
  000b7	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000be	5f		 pop	 rdi
  000bf	5d		 pop	 rbp
  000c0	c3		 ret	 0
?AspectRatio@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z ENDP ; `ShowExampleAppConstrainedResize'::`2'::CustomConstraints::AspectRatio
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Flog@?1??ShowExampleAppLongText@@YAXPEA_N@Z@YAXXZ
text$yd	SEGMENT
??__Flog@?1??ShowExampleAppLongText@@YAXPEA_N@Z@YAXXZ PROC ; `ShowExampleAppLongText'::`2'::`dynamic atexit destructor for 'log'', COMDAT
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?log@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4UImGuiTextBuffer@@A
  00025	e8 00 00 00 00	 call	 ??1ImGuiTextBuffer@@QEAA@XZ
  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
??__Flog@?1??ShowExampleAppLongText@@YAXPEA_N@Z@YAXXZ ENDP ; `ShowExampleAppLongText'::`2'::`dynamic atexit destructor for 'log''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowPlaceholderObject@@YAXPEBDH@Z
_TEXT	SEGMENT
node_open$ = 4
i$1 = 36
flags$2 = 68
prefix$ = 320
uid$ = 328
?ShowPlaceholderObject@@YAXPEBDH@Z PROC			; ShowPlaceholderObject, COMDAT

; 7090 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00012	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]

; 7091 :     // Use object uid as identifier. Most commonly you could also use the object pointer as a base ID.
; 7092 :     ImGui::PushID(uid);

  0002e	8b 8d 48 01 00
	00		 mov	 ecx, DWORD PTR uid$[rbp]
  00034	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 7093 : 
; 7094 :     // Text and Tree nodes are less high than framed widgets, using AlignTextToFramePadding() we add vertical spacing to make the tree lines equal high.
; 7095 :     ImGui::TableNextRow();

  00039	0f 57 c9	 xorps	 xmm1, xmm1
  0003c	33 c9		 xor	 ecx, ecx
  0003e	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 7096 :     ImGui::TableSetColumnIndex(0);

  00043	33 c9		 xor	 ecx, ecx
  00045	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 7097 :     ImGui::AlignTextToFramePadding();

  0004a	e8 00 00 00 00	 call	 ?AlignTextToFramePadding@ImGui@@YAXXZ ; ImGui::AlignTextToFramePadding

; 7098 :     bool node_open = ImGui::TreeNode("Object", "%s_%u", prefix, uid);

  0004f	44 8b 8d 48 01
	00 00		 mov	 r9d, DWORD PTR uid$[rbp]
  00056	4c 8b 85 40 01
	00 00		 mov	 r8, QWORD PTR prefix$[rbp]
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05FIIOEGIK@?$CFs_?$CFu?$AA@
  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06ELFECKBG@Object?$AA@
  0006b	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD0ZZ ; ImGui::TreeNode
  00070	88 45 04	 mov	 BYTE PTR node_open$[rbp], al

; 7099 :     ImGui::TableSetColumnIndex(1);

  00073	b9 01 00 00 00	 mov	 ecx, 1
  00078	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 7100 :     ImGui::Text("my sailor is rich");

  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@LIBEHHHH@my?5sailor?5is?5rich?$AA@
  00084	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 7101 : 
; 7102 :     if (node_open)

  00089	0f b6 45 04	 movzx	 eax, BYTE PTR node_open$[rbp]
  0008d	85 c0		 test	 eax, eax
  0008f	0f 84 2c 01 00
	00		 je	 $LN5@ShowPlaceh

; 7103 :     {
; 7104 :         static float placeholder_members[8] = { 0.0f, 0.0f, 1.0f, 3.1416f, 100.0f, 999.0f };
; 7105 :         for (int i = 0; i < 8; i++)

  00095	c7 45 24 00 00
	00 00		 mov	 DWORD PTR i$1[rbp], 0
  0009c	eb 08		 jmp	 SHORT $LN4@ShowPlaceh
$LN2@ShowPlaceh:
  0009e	8b 45 24	 mov	 eax, DWORD PTR i$1[rbp]
  000a1	ff c0		 inc	 eax
  000a3	89 45 24	 mov	 DWORD PTR i$1[rbp], eax
$LN4@ShowPlaceh:
  000a6	83 7d 24 08	 cmp	 DWORD PTR i$1[rbp], 8
  000aa	0f 8d 0c 01 00
	00		 jge	 $LN3@ShowPlaceh

; 7106 :         {
; 7107 :             ImGui::PushID(i); // Use field index as identifier.

  000b0	8b 4d 24	 mov	 ecx, DWORD PTR i$1[rbp]
  000b3	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 7108 :             if (i < 2)

  000b8	83 7d 24 02	 cmp	 DWORD PTR i$1[rbp], 2
  000bc	7d 16		 jge	 SHORT $LN6@ShowPlaceh

; 7109 :             {
; 7110 :                 ShowPlaceholderObject("Child", 424242);

  000be	ba 32 79 06 00	 mov	 edx, 424242		; 00067932H
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05GIMBDOHM@Child?$AA@
  000ca	e8 00 00 00 00	 call	 ?ShowPlaceholderObject@@YAXPEBDH@Z ; ShowPlaceholderObject

; 7111 :             }
; 7112 :             else

  000cf	e9 de 00 00 00	 jmp	 $LN7@ShowPlaceh
$LN6@ShowPlaceh:

; 7113 :             {
; 7114 :                 // Here we use a TreeNode to highlight on hover (we could use e.g. Selectable as well)
; 7115 :                 ImGui::TableNextRow();

  000d4	0f 57 c9	 xorps	 xmm1, xmm1
  000d7	33 c9		 xor	 ecx, ecx
  000d9	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 7116 :                 ImGui::TableSetColumnIndex(0);

  000de	33 c9		 xor	 ecx, ecx
  000e0	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 7117 :                 ImGui::AlignTextToFramePadding();

  000e5	e8 00 00 00 00	 call	 ?AlignTextToFramePadding@ImGui@@YAXXZ ; ImGui::AlignTextToFramePadding

; 7118 :                 ImGuiTreeNodeFlags flags = ImGuiTreeNodeFlags_Leaf | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_Bullet;

  000ea	c7 45 44 08 03
	00 00		 mov	 DWORD PTR flags$2[rbp], 776 ; 00000308H

; 7119 :                 ImGui::TreeNodeEx("Field", flags, "Field_%d", i);

  000f1	44 8b 4d 24	 mov	 r9d, DWORD PTR i$1[rbp]
  000f5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08BNKJGCPO@Field_?$CFd?$AA@
  000fc	8b 55 44	 mov	 edx, DWORD PTR flags$2[rbp]
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05EPLKDJMH@Field?$AA@
  00106	e8 00 00 00 00	 call	 ?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ ; ImGui::TreeNodeEx

; 7120 : 
; 7121 :                 ImGui::TableSetColumnIndex(1);

  0010b	b9 01 00 00 00	 mov	 ecx, 1
  00110	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 7122 :                 ImGui::SetNextItemWidth(-FLT_MIN);

  00115	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80800000
  0011d	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth

; 7123 :                 if (i >= 5)

  00122	83 7d 24 05	 cmp	 DWORD PTR i$1[rbp], 5
  00126	7c 3f		 jl	 SHORT $LN8@ShowPlaceh

; 7124 :                     ImGui::InputFloat("##value", &placeholder_members[i], 1.0f);

  00128	48 63 45 24	 movsxd	 rax, DWORD PTR i$1[rbp]
  0012c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?placeholder_members@?4??ShowPlaceholderObject@@YAXPEBDH@Z@4PAMA
  00133	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00137	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0013f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  00146	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0014b	0f 57 db	 xorps	 xmm3, xmm3
  0014e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00156	48 8b d0	 mov	 rdx, rax
  00159	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07FBBIKLOB@?$CD?$CDvalue?$AA@
  00160	e8 00 00 00 00	 call	 ?InputFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::InputFloat

; 7125 :                 else

  00165	eb 46		 jmp	 SHORT $LN9@ShowPlaceh
$LN8@ShowPlaceh:

; 7126 :                     ImGui::DragFloat("##value", &placeholder_members[i], 0.01f);

  00167	48 63 45 24	 movsxd	 rax, DWORD PTR i$1[rbp]
  0016b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?placeholder_members@?4??ShowPlaceholderObject@@YAXPEBDH@Z@4PAMA
  00172	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00176	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0017e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  00185	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0018a	0f 57 c0	 xorps	 xmm0, xmm0
  0018d	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00193	0f 57 db	 xorps	 xmm3, xmm3
  00196	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3c23d70a
  0019e	48 8b d0	 mov	 rdx, rax
  001a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07FBBIKLOB@?$CD?$CDvalue?$AA@
  001a8	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat
$LN9@ShowPlaceh:

; 7127 :                 ImGui::NextColumn();

  001ad	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn
$LN7@ShowPlaceh:

; 7128 :             }
; 7129 :             ImGui::PopID();

  001b2	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 7130 :         }

  001b7	e9 e2 fe ff ff	 jmp	 $LN2@ShowPlaceh
$LN3@ShowPlaceh:

; 7131 :         ImGui::TreePop();

  001bc	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN5@ShowPlaceh:

; 7132 :     }
; 7133 :     ImGui::PopID();

  001c1	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 7134 : }

  001c6	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  001cd	5f		 pop	 rdi
  001ce	5d		 pop	 rbp
  001cf	c3		 ret	 0
?ShowPlaceholderObject@@YAXPEBDH@Z ENDP			; ShowPlaceholderObject
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Flog@?1??ShowExampleAppLog@@YAXPEA_N@Z@YAXXZ
text$yd	SEGMENT
??__Flog@?1??ShowExampleAppLog@@YAXPEA_N@Z@YAXXZ PROC	; `ShowExampleAppLog'::`2'::`dynamic atexit destructor for 'log'', COMDAT
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?log@?1??ShowExampleAppLog@@YAXPEA_N@Z@4UExampleAppLog@@A
  00025	e8 00 00 00 00	 call	 ??1ExampleAppLog@@QEAA@XZ
  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
??__Flog@?1??ShowExampleAppLog@@YAXPEA_N@Z@YAXXZ ENDP	; `ShowExampleAppLog'::`2'::`dynamic atexit destructor for 'log''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ExampleAppLog@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1ExampleAppLog@@QEAA@XZ PROC				; ExampleAppLog::~ExampleAppLog, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 05 28 01 00
	00		 add	 rax, 296		; 00000128H
  00037	48 8b c8	 mov	 rcx, rax
  0003a	e8 00 00 00 00	 call	 ??1?$ImVector@H@@QEAA@XZ ; ImVector<int>::~ImVector<int>
  0003f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00046	48 83 c0 10	 add	 rax, 16
  0004a	48 8b c8	 mov	 rcx, rax
  0004d	e8 00 00 00 00	 call	 ??1ImGuiTextFilter@@QEAA@XZ
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8b c8	 mov	 rcx, rax
  0005c	e8 00 00 00 00	 call	 ??1ImGuiTextBuffer@@QEAA@XZ
  00061	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00068	5f		 pop	 rdi
  00069	5d		 pop	 rbp
  0006a	c3		 ret	 0
??1ExampleAppLog@@QEAA@XZ ENDP				; ExampleAppLog::~ExampleAppLog
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z
_TEXT	SEGMENT
clear$ = 4
copy$ = 36
buf$4 = 72
buf_end$5 = 104
line_no$6 = 132
line_start$7 = 168
line_end$8 = 200
clipper$9 = 232
line_no$10 = 292
line_start$11 = 328
line_end$12 = 360
$T13 = 772
$T14 = 804
$T15 = 836
$T16 = 868
$T17 = 900
$T18 = 936
tv251 = 948
tv243 = 952
tv201 = 952
__$ArrayPad$ = 960
this$ = 1008
title$ = 1016
p_open$ = 1024
?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z PROC		; ExampleAppLog::Draw, COMDAT

; 6897 :     {

$LN26:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec f8 03
	00 00		 sub	 rsp, 1016		; 000003f8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 fe 00 00 00	 mov	 ecx, 254		; 000000feH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 18
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1048]
  00034	48 c7 85 a8 03
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T18[rbp], -2
  0003f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00046	48 33 c5	 xor	 rax, rbp
  00049	48 89 85 c0 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 6898 :         if (!ImGui::Begin(title, p_open))

  00050	45 33 c0	 xor	 r8d, r8d
  00053	48 8b 95 00 04
	00 00		 mov	 rdx, QWORD PTR p_open$[rbp]
  0005a	48 8b 8d f8 03
	00 00		 mov	 rcx, QWORD PTR title$[rbp]
  00061	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin
  00066	0f b6 c0	 movzx	 eax, al
  00069	85 c0		 test	 eax, eax
  0006b	75 0a		 jne	 SHORT $LN10@Draw

; 6899 :         {
; 6900 :             ImGui::End();

  0006d	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 6901 :             return;

  00072	e9 5e 04 00 00	 jmp	 $LN1@Draw
$LN10@Draw:

; 6902 :         }
; 6903 : 
; 6904 :         // Options menu
; 6905 :         if (ImGui::BeginPopup("Options"))

  00077	33 d2		 xor	 edx, edx
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07KHIHFBFN@Options?$AA@
  00080	e8 00 00 00 00	 call	 ?BeginPopup@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopup
  00085	0f b6 c0	 movzx	 eax, al
  00088	85 c0		 test	 eax, eax
  0008a	74 21		 je	 SHORT $LN11@Draw

; 6906 :         {
; 6907 :             ImGui::Checkbox("Auto-scroll", &AutoScroll);

  0008c	48 8b 85 f0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 05 38 01 00
	00		 add	 rax, 312		; 00000138H
  00099	48 8b d0	 mov	 rdx, rax
  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@IFKANFPJ@Auto?9scroll?$AA@
  000a3	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 6908 :             ImGui::EndPopup();

  000a8	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN11@Draw:

; 6909 :         }
; 6910 : 
; 6911 :         // Main window
; 6912 :         if (ImGui::Button("Options"))

  000ad	0f 57 d2	 xorps	 xmm2, xmm2
  000b0	0f 57 c9	 xorps	 xmm1, xmm1
  000b3	48 8d 8d 04 03
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  000ba	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000bf	48 8b d0	 mov	 rdx, rax
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07KHIHFBFN@Options?$AA@
  000c9	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  000ce	0f b6 c0	 movzx	 eax, al
  000d1	85 c0		 test	 eax, eax
  000d3	74 0e		 je	 SHORT $LN12@Draw

; 6913 :             ImGui::OpenPopup("Options");

  000d5	33 d2		 xor	 edx, edx
  000d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07KHIHFBFN@Options?$AA@
  000de	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPEBDH@Z ; ImGui::OpenPopup
$LN12@Draw:

; 6914 :         ImGui::SameLine();

  000e3	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  000eb	0f 57 c0	 xorps	 xmm0, xmm0
  000ee	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6915 :         bool clear = ImGui::Button("Clear");

  000f3	0f 57 d2	 xorps	 xmm2, xmm2
  000f6	0f 57 c9	 xorps	 xmm1, xmm1
  000f9	48 8d 8d 24 03
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  00100	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00105	48 8b d0	 mov	 rdx, rax
  00108	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05MDNHABIA@Clear?$AA@
  0010f	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00114	88 45 04	 mov	 BYTE PTR clear$[rbp], al

; 6916 :         ImGui::SameLine();

  00117	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0011f	0f 57 c0	 xorps	 xmm0, xmm0
  00122	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6917 :         bool copy = ImGui::Button("Copy");

  00127	0f 57 d2	 xorps	 xmm2, xmm2
  0012a	0f 57 c9	 xorps	 xmm1, xmm1
  0012d	48 8d 8d 44 03
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  00134	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00139	48 8b d0	 mov	 rdx, rax
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04OPMHGHMB@Copy?$AA@
  00143	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00148	88 45 24	 mov	 BYTE PTR copy$[rbp], al

; 6918 :         ImGui::SameLine();

  0014b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00153	0f 57 c0	 xorps	 xmm0, xmm0
  00156	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6919 :         Filter.Draw("Filter", -100.0f);

  0015b	48 8b 85 f0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00162	48 83 c0 10	 add	 rax, 16
  00166	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@c2c80000
  0016e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06IBDJIBGI@Filter?$AA@
  00175	48 8b c8	 mov	 rcx, rax
  00178	e8 00 00 00 00	 call	 ?Draw@ImGuiTextFilter@@QEAA_NPEBDM@Z ; ImGuiTextFilter::Draw

; 6920 : 
; 6921 :         ImGui::Separator();

  0017d	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 6922 : 
; 6923 :         if (ImGui::BeginChild("scrolling", ImVec2(0, 0), false, ImGuiWindowFlags_HorizontalScrollbar))

  00182	0f 57 d2	 xorps	 xmm2, xmm2
  00185	0f 57 c9	 xorps	 xmm1, xmm1
  00188	48 8d 8d 64 03
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  0018f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00194	41 b9 00 08 00
	00		 mov	 r9d, 2048		; 00000800H
  0019a	45 33 c0	 xor	 r8d, r8d
  0019d	48 8b d0	 mov	 rdx, rax
  001a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09PKEBEIDM@scrolling?$AA@
  001a7	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z ; ImGui::BeginChild
  001ac	0f b6 c0	 movzx	 eax, al
  001af	85 c0		 test	 eax, eax
  001b1	0f 84 14 03 00
	00		 je	 $LN13@Draw

; 6924 :         {
; 6925 :             if (clear)

  001b7	0f b6 45 04	 movzx	 eax, BYTE PTR clear$[rbp]
  001bb	85 c0		 test	 eax, eax
  001bd	74 0c		 je	 SHORT $LN14@Draw

; 6926 :                 Clear();

  001bf	48 8b 8d f0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c6	e8 00 00 00 00	 call	 ?Clear@ExampleAppLog@@QEAAXXZ ; ExampleAppLog::Clear
$LN14@Draw:

; 6927 :             if (copy)

  001cb	0f b6 45 24	 movzx	 eax, BYTE PTR copy$[rbp]
  001cf	85 c0		 test	 eax, eax
  001d1	74 0a		 je	 SHORT $LN15@Draw

; 6928 :                 ImGui::LogToClipboard();

  001d3	b9 ff ff ff ff	 mov	 ecx, -1
  001d8	e8 00 00 00 00	 call	 ?LogToClipboard@ImGui@@YAXH@Z ; ImGui::LogToClipboard
$LN15@Draw:

; 6929 : 
; 6930 :             ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 0));

  001dd	0f 57 d2	 xorps	 xmm2, xmm2
  001e0	0f 57 c9	 xorps	 xmm1, xmm1
  001e3	48 8d 8d 84 03
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  001ea	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001ef	48 8b d0	 mov	 rdx, rax
  001f2	b9 0e 00 00 00	 mov	 ecx, 14
  001f7	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z ; ImGui::PushStyleVar

; 6931 :             const char* buf = Buf.begin();

  001fc	48 8b 85 f0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00203	48 8b c8	 mov	 rcx, rax
  00206	e8 00 00 00 00	 call	 ?begin@ImGuiTextBuffer@@QEBAPEBDXZ ; ImGuiTextBuffer::begin
  0020b	48 89 45 48	 mov	 QWORD PTR buf$4[rbp], rax

; 6932 :             const char* buf_end = Buf.end();

  0020f	48 8b 85 f0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00216	48 8b c8	 mov	 rcx, rax
  00219	e8 00 00 00 00	 call	 ?end@ImGuiTextBuffer@@QEBAPEBDXZ ; ImGuiTextBuffer::end
  0021e	48 89 45 68	 mov	 QWORD PTR buf_end$5[rbp], rax

; 6933 :             if (Filter.IsActive())

  00222	48 8b 85 f0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00229	48 83 c0 10	 add	 rax, 16
  0022d	48 8b c8	 mov	 rcx, rax
  00230	e8 00 00 00 00	 call	 ?IsActive@ImGuiTextFilter@@QEBA_NXZ ; ImGuiTextFilter::IsActive
  00235	0f b6 c0	 movzx	 eax, al
  00238	85 c0		 test	 eax, eax
  0023a	0f 84 09 01 00
	00		 je	 $LN16@Draw

; 6934 :             {
; 6935 :                 // In this example we don't use the clipper when Filter is enabled.
; 6936 :                 // This is because we don't have random access to the result of our filter.
; 6937 :                 // A real application processing logs with ten of thousands of entries may want to store the result of
; 6938 :                 // search/filter.. especially if the filtering function is not trivial (e.g. reg-exp).
; 6939 :                 for (int line_no = 0; line_no < LineOffsets.Size; line_no++)

  00240	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR line_no$6[rbp], 0
  0024a	eb 0e		 jmp	 SHORT $LN4@Draw
$LN2@Draw:
  0024c	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR line_no$6[rbp]
  00252	ff c0		 inc	 eax
  00254	89 85 84 00 00
	00		 mov	 DWORD PTR line_no$6[rbp], eax
$LN4@Draw:
  0025a	48 8b 85 f0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00261	8b 80 28 01 00
	00		 mov	 eax, DWORD PTR [rax+296]
  00267	39 85 84 00 00
	00		 cmp	 DWORD PTR line_no$6[rbp], eax
  0026d	0f 8d d1 00 00
	00		 jge	 $LN3@Draw

; 6940 :                 {
; 6941 :                     const char* line_start = buf + LineOffsets[line_no];

  00273	48 8b 85 f0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0027a	48 05 28 01 00
	00		 add	 rax, 296		; 00000128H
  00280	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR line_no$6[rbp]
  00286	48 8b c8	 mov	 rcx, rax
  00289	e8 00 00 00 00	 call	 ??A?$ImVector@H@@QEAAAEAHH@Z ; ImVector<int>::operator[]
  0028e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00291	48 8b 4d 48	 mov	 rcx, QWORD PTR buf$4[rbp]
  00295	48 03 c8	 add	 rcx, rax
  00298	48 8b c1	 mov	 rax, rcx
  0029b	48 89 85 a8 00
	00 00		 mov	 QWORD PTR line_start$7[rbp], rax

; 6942 :                     const char* line_end = (line_no + 1 < LineOffsets.Size) ? (buf + LineOffsets[line_no + 1] - 1) : buf_end;

  002a2	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR line_no$6[rbp]
  002a8	ff c0		 inc	 eax
  002aa	48 8b 8d f0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002b1	3b 81 28 01 00
	00		 cmp	 eax, DWORD PTR [rcx+296]
  002b7	7d 32		 jge	 SHORT $LN21@Draw
  002b9	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR line_no$6[rbp]
  002bf	ff c0		 inc	 eax
  002c1	48 8b 8d f0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002c8	48 81 c1 28 01
	00 00		 add	 rcx, 296		; 00000128H
  002cf	8b d0		 mov	 edx, eax
  002d1	e8 00 00 00 00	 call	 ??A?$ImVector@H@@QEAAAEAHH@Z ; ImVector<int>::operator[]
  002d6	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  002d9	48 8b 4d 48	 mov	 rcx, QWORD PTR buf$4[rbp]
  002dd	48 8d 44 01 ff	 lea	 rax, QWORD PTR [rcx+rax-1]
  002e2	48 89 85 b8 03
	00 00		 mov	 QWORD PTR tv201[rbp], rax
  002e9	eb 0b		 jmp	 SHORT $LN22@Draw
$LN21@Draw:
  002eb	48 8b 45 68	 mov	 rax, QWORD PTR buf_end$5[rbp]
  002ef	48 89 85 b8 03
	00 00		 mov	 QWORD PTR tv201[rbp], rax
$LN22@Draw:
  002f6	48 8b 85 b8 03
	00 00		 mov	 rax, QWORD PTR tv201[rbp]
  002fd	48 89 85 c8 00
	00 00		 mov	 QWORD PTR line_end$8[rbp], rax

; 6943 :                     if (Filter.PassFilter(line_start, line_end))

  00304	48 8b 85 f0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0030b	48 83 c0 10	 add	 rax, 16
  0030f	4c 8b 85 c8 00
	00 00		 mov	 r8, QWORD PTR line_end$8[rbp]
  00316	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR line_start$7[rbp]
  0031d	48 8b c8	 mov	 rcx, rax
  00320	e8 00 00 00 00	 call	 ?PassFilter@ImGuiTextFilter@@QEBA_NPEBD0@Z ; ImGuiTextFilter::PassFilter
  00325	0f b6 c0	 movzx	 eax, al
  00328	85 c0		 test	 eax, eax
  0032a	74 13		 je	 SHORT $LN18@Draw

; 6944 :                         ImGui::TextUnformatted(line_start, line_end);

  0032c	48 8b 95 c8 00
	00 00		 mov	 rdx, QWORD PTR line_end$8[rbp]
  00333	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR line_start$7[rbp]
  0033a	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted
$LN18@Draw:

; 6945 :                 }

  0033f	e9 08 ff ff ff	 jmp	 $LN2@Draw
$LN3@Draw:

; 6946 :             }
; 6947 :             else

  00344	e9 3a 01 00 00	 jmp	 $LN17@Draw
$LN16@Draw:

; 6948 :             {
; 6949 :                 // The simplest and easy way to display the entire buffer:
; 6950 :                 //   ImGui::TextUnformatted(buf_begin, buf_end);
; 6951 :                 // And it'll just work. TextUnformatted() has specialization for large blob of text and will fast-forward
; 6952 :                 // to skip non-visible lines. Here we instead demonstrate using the clipper to only process lines that are
; 6953 :                 // within the visible area.
; 6954 :                 // If you have tens of thousands of items and their processing cost is non-negligible, coarse clipping them
; 6955 :                 // on your side is recommended. Using ImGuiListClipper requires
; 6956 :                 // - A) random access into your data
; 6957 :                 // - B) items all being the  same height,
; 6958 :                 // both of which we can handle since we have an array pointing to the beginning of each line of text.
; 6959 :                 // When using the filter (in the block of code above) we don't have random access into the data to display
; 6960 :                 // anymore, which is why we don't use the clipper. Storing or skimming through the search result would make
; 6961 :                 // it possible (and would be recommended if you want to search through tens of thousands of entries).
; 6962 :                 ImGuiListClipper clipper;

  00349	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR clipper$9[rbp]
  00350	e8 00 00 00 00	 call	 ??0ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::ImGuiListClipper
  00355	90		 npad	 1

; 6963 :                 clipper.Begin(LineOffsets.Size);

  00356	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  0035e	48 8b 85 f0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00365	8b 90 28 01 00
	00		 mov	 edx, DWORD PTR [rax+296]
  0036b	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR clipper$9[rbp]
  00372	e8 00 00 00 00	 call	 ?Begin@ImGuiListClipper@@QEAAXHM@Z ; ImGuiListClipper::Begin
$LN5@Draw:

; 6964 :                 while (clipper.Step())

  00377	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR clipper$9[rbp]
  0037e	e8 00 00 00 00	 call	 ?Step@ImGuiListClipper@@QEAA_NXZ ; ImGuiListClipper::Step
  00383	0f b6 c0	 movzx	 eax, al
  00386	85 c0		 test	 eax, eax
  00388	0f 84 dc 00 00
	00		 je	 $LN6@Draw

; 6965 :                 {
; 6966 :                     for (int line_no = clipper.DisplayStart; line_no < clipper.DisplayEnd; line_no++)

  0038e	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR clipper$9[rbp]
  00394	89 85 24 01 00
	00		 mov	 DWORD PTR line_no$10[rbp], eax
  0039a	eb 0e		 jmp	 SHORT $LN9@Draw
$LN7@Draw:
  0039c	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR line_no$10[rbp]
  003a2	ff c0		 inc	 eax
  003a4	89 85 24 01 00
	00		 mov	 DWORD PTR line_no$10[rbp], eax
$LN9@Draw:
  003aa	8b 85 ec 00 00
	00		 mov	 eax, DWORD PTR clipper$9[rbp+4]
  003b0	39 85 24 01 00
	00		 cmp	 DWORD PTR line_no$10[rbp], eax
  003b6	0f 8d a9 00 00
	00		 jge	 $LN8@Draw

; 6967 :                     {
; 6968 :                         const char* line_start = buf + LineOffsets[line_no];

  003bc	48 8b 85 f0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  003c3	48 05 28 01 00
	00		 add	 rax, 296		; 00000128H
  003c9	8b 95 24 01 00
	00		 mov	 edx, DWORD PTR line_no$10[rbp]
  003cf	48 8b c8	 mov	 rcx, rax
  003d2	e8 00 00 00 00	 call	 ??A?$ImVector@H@@QEAAAEAHH@Z ; ImVector<int>::operator[]
  003d7	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  003da	48 8b 4d 48	 mov	 rcx, QWORD PTR buf$4[rbp]
  003de	48 03 c8	 add	 rcx, rax
  003e1	48 8b c1	 mov	 rax, rcx
  003e4	48 89 85 48 01
	00 00		 mov	 QWORD PTR line_start$11[rbp], rax

; 6969 :                         const char* line_end = (line_no + 1 < LineOffsets.Size) ? (buf + LineOffsets[line_no + 1] - 1) : buf_end;

  003eb	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR line_no$10[rbp]
  003f1	ff c0		 inc	 eax
  003f3	48 8b 8d f0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003fa	3b 81 28 01 00
	00		 cmp	 eax, DWORD PTR [rcx+296]
  00400	7d 32		 jge	 SHORT $LN23@Draw
  00402	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR line_no$10[rbp]
  00408	ff c0		 inc	 eax
  0040a	48 8b 8d f0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00411	48 81 c1 28 01
	00 00		 add	 rcx, 296		; 00000128H
  00418	8b d0		 mov	 edx, eax
  0041a	e8 00 00 00 00	 call	 ??A?$ImVector@H@@QEAAAEAHH@Z ; ImVector<int>::operator[]
  0041f	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00422	48 8b 4d 48	 mov	 rcx, QWORD PTR buf$4[rbp]
  00426	48 8d 44 01 ff	 lea	 rax, QWORD PTR [rcx+rax-1]
  0042b	48 89 85 b8 03
	00 00		 mov	 QWORD PTR tv243[rbp], rax
  00432	eb 0b		 jmp	 SHORT $LN24@Draw
$LN23@Draw:
  00434	48 8b 45 68	 mov	 rax, QWORD PTR buf_end$5[rbp]
  00438	48 89 85 b8 03
	00 00		 mov	 QWORD PTR tv243[rbp], rax
$LN24@Draw:
  0043f	48 8b 85 b8 03
	00 00		 mov	 rax, QWORD PTR tv243[rbp]
  00446	48 89 85 68 01
	00 00		 mov	 QWORD PTR line_end$12[rbp], rax

; 6970 :                         ImGui::TextUnformatted(line_start, line_end);

  0044d	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR line_end$12[rbp]
  00454	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR line_start$11[rbp]
  0045b	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted

; 6971 :                     }

  00460	e9 37 ff ff ff	 jmp	 $LN7@Draw
$LN8@Draw:

; 6972 :                 }

  00465	e9 0d ff ff ff	 jmp	 $LN5@Draw
$LN6@Draw:

; 6973 :                 clipper.End();

  0046a	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR clipper$9[rbp]
  00471	e8 00 00 00 00	 call	 ?End@ImGuiListClipper@@QEAAXXZ ; ImGuiListClipper::End
  00476	90		 npad	 1

; 6974 :             }

  00477	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR clipper$9[rbp]
  0047e	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::~ImGuiListClipper
$LN17@Draw:

; 6975 :             ImGui::PopStyleVar();

  00483	b9 01 00 00 00	 mov	 ecx, 1
  00488	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar

; 6976 : 
; 6977 :             // Keep up at the bottom of the scroll region if we were already at the bottom at the beginning of the frame.
; 6978 :             // Using a scrollbar or mouse-wheel will take away from the bottom edge.
; 6979 :             if (AutoScroll && ImGui::GetScrollY() >= ImGui::GetScrollMaxY())

  0048d	48 8b 85 f0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00494	0f b6 80 38 01
	00 00		 movzx	 eax, BYTE PTR [rax+312]
  0049b	85 c0		 test	 eax, eax
  0049d	74 2c		 je	 SHORT $LN13@Draw
  0049f	e8 00 00 00 00	 call	 ?GetScrollY@ImGui@@YAMXZ ; ImGui::GetScrollY
  004a4	f3 0f 11 85 b4
	03 00 00	 movss	 DWORD PTR tv251[rbp], xmm0
  004ac	e8 00 00 00 00	 call	 ?GetScrollMaxY@ImGui@@YAMXZ ; ImGui::GetScrollMaxY
  004b1	f3 0f 10 8d b4
	03 00 00	 movss	 xmm1, DWORD PTR tv251[rbp]
  004b9	0f 2f c8	 comiss	 xmm1, xmm0
  004bc	72 0d		 jb	 SHORT $LN13@Draw

; 6980 :                 ImGui::SetScrollHereY(1.0f);

  004be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004c6	e8 00 00 00 00	 call	 ?SetScrollHereY@ImGui@@YAXM@Z ; ImGui::SetScrollHereY
$LN13@Draw:

; 6981 :         }
; 6982 :         ImGui::EndChild();

  004cb	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 6983 :         ImGui::End();

  004d0	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN1@Draw:

; 6984 :     }

  004d5	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  004d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z$rtcFrameData
  004e0	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  004e5	48 8b 8d c0 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  004ec	48 33 cd	 xor	 rcx, rbp
  004ef	e8 00 00 00 00	 call	 __security_check_cookie
  004f4	48 8d a5 d8 03
	00 00		 lea	 rsp, QWORD PTR [rbp+984]
  004fb	5f		 pop	 rdi
  004fc	5d		 pop	 rbp
  004fd	c3		 ret	 0
?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z ENDP		; ExampleAppLog::Draw
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
clear$ = 4
copy$ = 36
buf$4 = 72
buf_end$5 = 104
line_no$6 = 132
line_start$7 = 168
line_end$8 = 200
clipper$9 = 232
line_no$10 = 292
line_start$11 = 328
line_end$12 = 360
$T13 = 772
$T14 = 804
$T15 = 836
$T16 = 868
$T17 = 900
$T18 = 936
tv251 = 948
tv243 = 952
tv201 = 952
__$ArrayPad$ = 960
this$ = 1008
title$ = 1016
p_open$ = 1024
?dtor$0@?0??Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z@4HA PROC ; `ExampleAppLog::Draw'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR clipper$9[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::~ImGuiListClipper
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z@4HA ENDP ; `ExampleAppLog::Draw'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
clear$ = 4
copy$ = 36
buf$4 = 72
buf_end$5 = 104
line_no$6 = 132
line_start$7 = 168
line_end$8 = 200
clipper$9 = 232
line_no$10 = 292
line_start$11 = 328
line_end$12 = 360
$T13 = 772
$T14 = 804
$T15 = 836
$T16 = 868
$T17 = 900
$T18 = 936
tv251 = 948
tv243 = 952
tv201 = 952
__$ArrayPad$ = 960
this$ = 1008
title$ = 1016
p_open$ = 1024
?dtor$0@?0??Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z@4HA PROC ; `ExampleAppLog::Draw'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR clipper$9[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::~ImGuiListClipper
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z@4HA ENDP ; `ExampleAppLog::Draw'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?AddLog@ExampleAppLog@@QEAAXPEBDZZ
_TEXT	SEGMENT
old_size$ = 4
args$ = 40
new_size$4 = 68
$T5 = 292
__$ArrayPad$ = 312
this$ = 352
fmt$ = 360
?AddLog@ExampleAppLog@@QEAAXPEBDZZ PROC			; ExampleAppLog::AddLog, COMDAT

; 6885 :     {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 6886 :         int old_size = Buf.size();

  0004a	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00051	48 8b c8	 mov	 rcx, rax
  00054	e8 00 00 00 00	 call	 ?size@ImGuiTextBuffer@@QEBAHXZ ; ImGuiTextBuffer::size
  00059	89 45 04	 mov	 DWORD PTR old_size$[rbp], eax

; 6887 :         va_list args;
; 6888 :         va_start(args, fmt);

  0005c	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@PEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64>
  00061	48 8d 85 70 01
	00 00		 lea	 rax, QWORD PTR fmt$[rbp+8]
  00068	48 89 45 28	 mov	 QWORD PTR args$[rbp], rax

; 6889 :         Buf.appendfv(fmt, args);

  0006c	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	4c 8b 45 28	 mov	 r8, QWORD PTR args$[rbp]
  00077	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR fmt$[rbp]
  0007e	48 8b c8	 mov	 rcx, rax
  00081	e8 00 00 00 00	 call	 ?appendfv@ImGuiTextBuffer@@QEAAXPEBDPEAD@Z ; ImGuiTextBuffer::appendfv

; 6890 :         va_end(args);

  00086	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR args$[rbp], 0

; 6891 :         for (int new_size = Buf.size(); old_size < new_size; old_size++)

  0008e	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00095	48 8b c8	 mov	 rcx, rax
  00098	e8 00 00 00 00	 call	 ?size@ImGuiTextBuffer@@QEBAHXZ ; ImGuiTextBuffer::size
  0009d	89 45 44	 mov	 DWORD PTR new_size$4[rbp], eax
  000a0	eb 08		 jmp	 SHORT $LN4@AddLog
$LN2@AddLog:
  000a2	8b 45 04	 mov	 eax, DWORD PTR old_size$[rbp]
  000a5	ff c0		 inc	 eax
  000a7	89 45 04	 mov	 DWORD PTR old_size$[rbp], eax
$LN4@AddLog:
  000aa	8b 45 44	 mov	 eax, DWORD PTR new_size$4[rbp]
  000ad	39 45 04	 cmp	 DWORD PTR old_size$[rbp], eax
  000b0	7d 43		 jge	 SHORT $LN3@AddLog

; 6892 :             if (Buf[old_size] == '\n')

  000b2	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b9	8b 55 04	 mov	 edx, DWORD PTR old_size$[rbp]
  000bc	48 8b c8	 mov	 rcx, rax
  000bf	e8 00 00 00 00	 call	 ??AImGuiTextBuffer@@QEBADH@Z ; ImGuiTextBuffer::operator[]
  000c4	0f be c0	 movsx	 eax, al
  000c7	83 f8 0a	 cmp	 eax, 10
  000ca	75 27		 jne	 SHORT $LN5@AddLog

; 6893 :                 LineOffsets.push_back(old_size + 1);

  000cc	8b 45 04	 mov	 eax, DWORD PTR old_size$[rbp]
  000cf	ff c0		 inc	 eax
  000d1	89 85 24 01 00
	00		 mov	 DWORD PTR $T5[rbp], eax
  000d7	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000de	48 05 28 01 00
	00		 add	 rax, 296		; 00000128H
  000e4	48 8d 95 24 01
	00 00		 lea	 rdx, QWORD PTR $T5[rbp]
  000eb	48 8b c8	 mov	 rcx, rax
  000ee	e8 00 00 00 00	 call	 ?push_back@?$ImVector@H@@QEAAXAEBH@Z ; ImVector<int>::push_back
$LN5@AddLog:

; 6894 :     }

  000f3	eb ad		 jmp	 SHORT $LN2@AddLog
$LN3@AddLog:
  000f5	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?AddLog@ExampleAppLog@@QEAAXPEBDZZ$rtcFrameData
  00100	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00105	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0010c	48 33 cd	 xor	 rcx, rbp
  0010f	e8 00 00 00 00	 call	 __security_check_cookie
  00114	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  0011b	5f		 pop	 rdi
  0011c	5d		 pop	 rbp
  0011d	c3		 ret	 0
?AddLog@ExampleAppLog@@QEAAXPEBDZZ ENDP			; ExampleAppLog::AddLog
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?Clear@ExampleAppLog@@QEAAXXZ
_TEXT	SEGMENT
$T1 = 196
this$ = 256
?Clear@ExampleAppLog@@QEAAXXZ PROC			; ExampleAppLog::Clear, COMDAT

; 6878 :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 6879 :         Buf.clear();

  0002a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ?clear@ImGuiTextBuffer@@QEAAXXZ ; ImGuiTextBuffer::clear

; 6880 :         LineOffsets.clear();

  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	48 05 28 01 00
	00		 add	 rax, 296		; 00000128H
  00046	48 8b c8	 mov	 rcx, rax
  00049	e8 00 00 00 00	 call	 ?clear@?$ImVector@H@@QEAAXXZ ; ImVector<int>::clear

; 6881 :         LineOffsets.push_back(0);

  0004e	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0
  00058	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 05 28 01 00
	00		 add	 rax, 296		; 00000128H
  00065	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0006c	48 8b c8	 mov	 rcx, rax
  0006f	e8 00 00 00 00	 call	 ?push_back@?$ImVector@H@@QEAAXAEBH@Z ; ImVector<int>::push_back

; 6882 :     }

  00074	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007b	5f		 pop	 rdi
  0007c	5d		 pop	 rbp
  0007d	c3		 ret	 0
?Clear@ExampleAppLog@@QEAAXXZ ENDP			; ExampleAppLog::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ??0ExampleAppLog@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0ExampleAppLog@@QEAA@XZ PROC				; ExampleAppLog::ExampleAppLog, COMDAT

; 6871 :     ExampleAppLog()

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 6872 :     {

  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 8b c8	 mov	 rcx, rax
  0003f	e8 00 00 00 00	 call	 ??0ImGuiTextBuffer@@QEAA@XZ ; ImGuiTextBuffer::ImGuiTextBuffer
  00044	90		 npad	 1
  00045	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004c	48 83 c0 10	 add	 rax, 16
  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00057	48 8b c8	 mov	 rcx, rax
  0005a	e8 00 00 00 00	 call	 ??0ImGuiTextFilter@@QEAA@PEBD@Z ; ImGuiTextFilter::ImGuiTextFilter
  0005f	90		 npad	 1
  00060	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	48 05 28 01 00
	00		 add	 rax, 296		; 00000128H
  0006d	48 8b c8	 mov	 rcx, rax
  00070	e8 00 00 00 00	 call	 ??0?$ImVector@H@@QEAA@XZ ; ImVector<int>::ImVector<int>
  00075	90		 npad	 1

; 6873 :         AutoScroll = true;

  00076	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007d	c6 80 38 01 00
	00 01		 mov	 BYTE PTR [rax+312], 1

; 6874 :         Clear();

  00084	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008b	e8 00 00 00 00	 call	 ?Clear@ExampleAppLog@@QEAAXXZ ; ExampleAppLog::Clear
  00090	90		 npad	 1

; 6875 :     }

  00091	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00098	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009f	5f		 pop	 rdi
  000a0	5d		 pop	 rbp
  000a1	c3		 ret	 0
??0ExampleAppLog@@QEAA@XZ ENDP				; ExampleAppLog::ExampleAppLog
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0ExampleAppLog@@QEAA@XZ@4HA PROC		; `ExampleAppLog::ExampleAppLog'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ImGuiTextBuffer@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ExampleAppLog@@QEAA@XZ@4HA ENDP		; `ExampleAppLog::ExampleAppLog'::`1'::dtor$0
$T1 = 200
this$ = 256
?dtor$1@?0???0ExampleAppLog@@QEAA@XZ@4HA PROC		; `ExampleAppLog::ExampleAppLog'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	48 83 c1 10	 add	 rcx, 16
  00046	e8 00 00 00 00	 call	 ??1ImGuiTextFilter@@QEAA@XZ
  0004b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
?dtor$1@?0???0ExampleAppLog@@QEAA@XZ@4HA ENDP		; `ExampleAppLog::ExampleAppLog'::`1'::dtor$1
$T1 = 200
this$ = 256
?dtor$2@?0???0ExampleAppLog@@QEAA@XZ@4HA PROC		; `ExampleAppLog::ExampleAppLog'::`1'::dtor$2
  00052	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00057	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0005c	55		 push	 rbp
  0005d	57		 push	 rdi
  0005e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00062	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00066	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006d	48 81 c1 28 01
	00 00		 add	 rcx, 296		; 00000128H
  00074	e8 00 00 00 00	 call	 ??1?$ImVector@H@@QEAA@XZ ; ImVector<int>::~ImVector<int>
  00079	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007d	5f		 pop	 rdi
  0007e	5d		 pop	 rbp
  0007f	c3		 ret	 0
?dtor$2@?0???0ExampleAppLog@@QEAA@XZ@4HA ENDP		; `ExampleAppLog::ExampleAppLog'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0ExampleAppLog@@QEAA@XZ@4HA PROC		; `ExampleAppLog::ExampleAppLog'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ImGuiTextBuffer@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ExampleAppLog@@QEAA@XZ@4HA ENDP		; `ExampleAppLog::ExampleAppLog'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$1@?0???0ExampleAppLog@@QEAA@XZ@4HA PROC		; `ExampleAppLog::ExampleAppLog'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	48 83 c1 10	 add	 rcx, 16
  00046	e8 00 00 00 00	 call	 ??1ImGuiTextFilter@@QEAA@XZ
  0004b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
?dtor$1@?0???0ExampleAppLog@@QEAA@XZ@4HA ENDP		; `ExampleAppLog::ExampleAppLog'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$2@?0???0ExampleAppLog@@QEAA@XZ@4HA PROC		; `ExampleAppLog::ExampleAppLog'::`1'::dtor$2
  00052	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00057	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0005c	55		 push	 rbp
  0005d	57		 push	 rdi
  0005e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00062	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00066	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006d	48 81 c1 28 01
	00 00		 add	 rcx, 296		; 00000128H
  00074	e8 00 00 00 00	 call	 ??1?$ImVector@H@@QEAA@XZ ; ImVector<int>::~ImVector<int>
  00079	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007d	5f		 pop	 rdi
  0007e	5d		 pop	 rbp
  0007f	c3		 ret	 0
?dtor$2@?0???0ExampleAppLog@@QEAA@XZ@4HA ENDP		; `ExampleAppLog::ExampleAppLog'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Fconsole@?1??ShowExampleAppConsole@@YAXPEA_N@Z@YAXXZ
text$yd	SEGMENT
??__Fconsole@?1??ShowExampleAppConsole@@YAXPEA_N@Z@YAXXZ PROC ; `ShowExampleAppConsole'::`2'::`dynamic atexit destructor for 'console'', COMDAT
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?console@?1??ShowExampleAppConsole@@YAXPEA_N@Z@4UExampleAppConsole@@A
  00025	e8 00 00 00 00	 call	 ??1ExampleAppConsole@@QEAA@XZ ; ExampleAppConsole::~ExampleAppConsole
  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
??__Fconsole@?1??ShowExampleAppConsole@@YAXPEA_N@Z@YAXXZ ENDP ; `ShowExampleAppConsole'::`2'::`dynamic atexit destructor for 'console''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@PEBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@PEBD@@YAXXZ PROC ; __vcrt_va_start_verify_argument_type<char const * __ptr64>, COMDAT

; 144  :         {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000a	48 8b ec	 mov	 rbp, rsp
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  0001c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00023	5f		 pop	 rdi
  00024	5d		 pop	 rbp
  00025	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@PEBD@@YAXXZ ENDP ; __vcrt_va_start_verify_argument_type<char const * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z
_TEXT	SEGMENT
word_end$4 = 8
word_start$5 = 40
c$6 = 68
candidates$7 = 104
i$8 = 148
match_len$9 = 180
c$10 = 212
all_candidates_matches$11 = 244
i$12 = 276
i$13 = 308
prev_history_pos$14 = 340
history_str$15 = 376
$T16 = 600
tv251 = 612
tv65 = 612
tv265 = 616
tv212 = 616
tv91 = 616
__$ArrayPad$ = 624
this$ = 672
data$ = 680
?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z PROC ; ExampleAppConsole::TextEditCallback, COMDAT

; 6749 :     {

$LN46:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec a8 02
	00 00		 sub	 rsp, 680		; 000002a8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 aa 00 00 00	 mov	 ecx, 170		; 000000aaH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 c8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+712]
  0002f	48 c7 85 58 02
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T16[rbp], -2
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 70 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 6750 :         //AddLog("cursor: %d, selection: %d-%d", data->CursorPos, data->SelectionStart, data->SelectionEnd);
; 6751 :         switch (data->EventFlag)

  0004b	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00052	8b 00		 mov	 eax, DWORD PTR [rax]
  00054	89 85 64 02 00
	00		 mov	 DWORD PTR tv65[rbp], eax
  0005a	83 bd 64 02 00
	00 40		 cmp	 DWORD PTR tv65[rbp], 64	; 00000040H
  00061	74 15		 je	 SHORT $LN18@TextEditCa
  00063	81 bd 64 02 00
	00 80 00 00 00	 cmp	 DWORD PTR tv65[rbp], 128 ; 00000080H
  0006d	0f 84 df 03 00
	00		 je	 $LN32@TextEditCa
  00073	e9 6b 05 00 00	 jmp	 $LN2@TextEditCa
$LN18@TextEditCa:

; 6752 :         {
; 6753 :         case ImGuiInputTextFlags_CallbackCompletion:
; 6754 :             {
; 6755 :                 // Example of TEXT COMPLETION
; 6756 : 
; 6757 :                 // Locate beginning of current word
; 6758 :                 const char* word_end = data->Buf + data->CursorPos;

  00078	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  0007f	48 63 40 2c	 movsxd	 rax, DWORD PTR [rax+44]
  00083	48 8b 8d a8 02
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0008a	48 03 41 18	 add	 rax, QWORD PTR [rcx+24]
  0008e	48 89 45 08	 mov	 QWORD PTR word_end$4[rbp], rax

; 6759 :                 const char* word_start = word_end;

  00092	48 8b 45 08	 mov	 rax, QWORD PTR word_end$4[rbp]
  00096	48 89 45 28	 mov	 QWORD PTR word_start$5[rbp], rax
$LN4@TextEditCa:

; 6760 :                 while (word_start > data->Buf)

  0009a	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  000a1	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  000a5	48 39 45 28	 cmp	 QWORD PTR word_start$5[rbp], rax
  000a9	76 47		 jbe	 SHORT $LN5@TextEditCa

; 6761 :                 {
; 6762 :                     const char c = word_start[-1];

  000ab	b8 01 00 00 00	 mov	 eax, 1
  000b0	48 6b c0 ff	 imul	 rax, rax, -1
  000b4	48 8b 4d 28	 mov	 rcx, QWORD PTR word_start$5[rbp]
  000b8	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000bc	88 45 44	 mov	 BYTE PTR c$6[rbp], al

; 6763 :                     if (c == ' ' || c == '\t' || c == ',' || c == ';')

  000bf	0f be 45 44	 movsx	 eax, BYTE PTR c$6[rbp]
  000c3	83 f8 20	 cmp	 eax, 32			; 00000020H
  000c6	74 1b		 je	 SHORT $LN20@TextEditCa
  000c8	0f be 45 44	 movsx	 eax, BYTE PTR c$6[rbp]
  000cc	83 f8 09	 cmp	 eax, 9
  000cf	74 12		 je	 SHORT $LN20@TextEditCa
  000d1	0f be 45 44	 movsx	 eax, BYTE PTR c$6[rbp]
  000d5	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  000d8	74 09		 je	 SHORT $LN20@TextEditCa
  000da	0f be 45 44	 movsx	 eax, BYTE PTR c$6[rbp]
  000de	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  000e1	75 02		 jne	 SHORT $LN19@TextEditCa
$LN20@TextEditCa:

; 6764 :                         break;

  000e3	eb 0d		 jmp	 SHORT $LN5@TextEditCa
$LN19@TextEditCa:

; 6765 :                     word_start--;

  000e5	48 8b 45 28	 mov	 rax, QWORD PTR word_start$5[rbp]
  000e9	48 ff c8	 dec	 rax
  000ec	48 89 45 28	 mov	 QWORD PTR word_start$5[rbp], rax

; 6766 :                 }

  000f0	eb a8		 jmp	 SHORT $LN4@TextEditCa
$LN5@TextEditCa:

; 6767 : 
; 6768 :                 // Build a list of candidates
; 6769 :                 ImVector<const char*> candidates;

  000f2	48 8d 4d 68	 lea	 rcx, QWORD PTR candidates$7[rbp]
  000f6	e8 00 00 00 00	 call	 ??0?$ImVector@PEBD@@QEAA@XZ ; ImVector<char const * __ptr64>::ImVector<char const * __ptr64>
  000fb	90		 npad	 1

; 6770 :                 for (int i = 0; i < Commands.Size; i++)

  000fc	c7 85 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR i$8[rbp], 0
  00106	eb 0e		 jmp	 SHORT $LN8@TextEditCa
$LN6@TextEditCa:
  00108	8b 85 94 00 00
	00		 mov	 eax, DWORD PTR i$8[rbp]
  0010e	ff c0		 inc	 eax
  00110	89 85 94 00 00
	00		 mov	 DWORD PTR i$8[rbp], eax
$LN8@TextEditCa:
  00116	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0011d	8b 80 10 01 00
	00		 mov	 eax, DWORD PTR [rax+272]
  00123	39 85 94 00 00
	00		 cmp	 DWORD PTR i$8[rbp], eax
  00129	7d 74		 jge	 SHORT $LN7@TextEditCa

; 6771 :                     if (Strnicmp(Commands[i], word_start, (int)(word_end - word_start)) == 0)

  0012b	48 8b 45 28	 mov	 rax, QWORD PTR word_start$5[rbp]
  0012f	48 8b 4d 08	 mov	 rcx, QWORD PTR word_end$4[rbp]
  00133	48 2b c8	 sub	 rcx, rax
  00136	48 8b c1	 mov	 rax, rcx
  00139	48 89 85 68 02
	00 00		 mov	 QWORD PTR tv91[rbp], rax
  00140	48 8b 8d a0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00147	48 81 c1 10 01
	00 00		 add	 rcx, 272		; 00000110H
  0014e	8b 95 94 00 00
	00		 mov	 edx, DWORD PTR i$8[rbp]
  00154	e8 00 00 00 00	 call	 ??A?$ImVector@PEBD@@QEAAAEAPEBDH@Z ; ImVector<char const * __ptr64>::operator[]
  00159	48 8b 8d 68 02
	00 00		 mov	 rcx, QWORD PTR tv91[rbp]
  00160	44 8b c1	 mov	 r8d, ecx
  00163	48 8b 55 28	 mov	 rdx, QWORD PTR word_start$5[rbp]
  00167	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0016a	e8 00 00 00 00	 call	 ?Strnicmp@ExampleAppConsole@@SAHPEBD0H@Z ; ExampleAppConsole::Strnicmp
  0016f	85 c0		 test	 eax, eax
  00171	75 27		 jne	 SHORT $LN21@TextEditCa

; 6772 :                         candidates.push_back(Commands[i]);

  00173	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0017a	48 05 10 01 00
	00		 add	 rax, 272		; 00000110H
  00180	8b 95 94 00 00
	00		 mov	 edx, DWORD PTR i$8[rbp]
  00186	48 8b c8	 mov	 rcx, rax
  00189	e8 00 00 00 00	 call	 ??A?$ImVector@PEBD@@QEAAAEAPEBDH@Z ; ImVector<char const * __ptr64>::operator[]
  0018e	48 8b d0	 mov	 rdx, rax
  00191	48 8d 4d 68	 lea	 rcx, QWORD PTR candidates$7[rbp]
  00195	e8 00 00 00 00	 call	 ?push_back@?$ImVector@PEBD@@QEAAXAEBQEBD@Z ; ImVector<char const * __ptr64>::push_back
$LN21@TextEditCa:

; 6773 : 
; 6774 :                 if (candidates.Size == 0)

  0019a	e9 69 ff ff ff	 jmp	 $LN6@TextEditCa
$LN7@TextEditCa:
  0019f	83 7d 68 00	 cmp	 DWORD PTR candidates$7[rbp], 0
  001a3	75 2d		 jne	 SHORT $LN22@TextEditCa

; 6775 :                 {
; 6776 :                     // No match
; 6777 :                     AddLog("No match for \"%.*s\"!\n", (int)(word_end - word_start), word_start);

  001a5	48 8b 45 28	 mov	 rax, QWORD PTR word_start$5[rbp]
  001a9	48 8b 4d 08	 mov	 rcx, QWORD PTR word_end$4[rbp]
  001ad	48 2b c8	 sub	 rcx, rax
  001b0	48 8b c1	 mov	 rax, rcx
  001b3	4c 8b 4d 28	 mov	 r9, QWORD PTR word_start$5[rbp]
  001b7	44 8b c0	 mov	 r8d, eax
  001ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@DOPMHGPK@No?5match?5for?5?$CC?$CF?4?$CKs?$CC?$CB?6?$AA@
  001c1	48 8b 8d a0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c8	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QEAAXPEBDZZ ; ExampleAppConsole::AddLog
  001cd	e9 68 02 00 00	 jmp	 $LN23@TextEditCa
$LN22@TextEditCa:

; 6778 :                 }
; 6779 :                 else if (candidates.Size == 1)

  001d2	83 7d 68 01	 cmp	 DWORD PTR candidates$7[rbp], 1
  001d6	0f 85 80 00 00
	00		 jne	 $LN24@TextEditCa

; 6780 :                 {
; 6781 :                     // Single match. Delete the beginning of the word and replace it entirely so we've got nice casing.
; 6782 :                     data->DeleteChars((int)(word_start - data->Buf), (int)(word_end - word_start));

  001dc	48 8b 45 28	 mov	 rax, QWORD PTR word_start$5[rbp]
  001e0	48 8b 4d 08	 mov	 rcx, QWORD PTR word_end$4[rbp]
  001e4	48 2b c8	 sub	 rcx, rax
  001e7	48 8b c1	 mov	 rax, rcx
  001ea	48 8b 8d a8 02
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  001f1	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  001f5	48 8b 55 28	 mov	 rdx, QWORD PTR word_start$5[rbp]
  001f9	48 2b d1	 sub	 rdx, rcx
  001fc	48 8b ca	 mov	 rcx, rdx
  001ff	44 8b c0	 mov	 r8d, eax
  00202	8b d1		 mov	 edx, ecx
  00204	48 8b 8d a8 02
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0020b	e8 00 00 00 00	 call	 ?DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z ; ImGuiInputTextCallbackData::DeleteChars

; 6783 :                     data->InsertChars(data->CursorPos, candidates[0]);

  00210	33 d2		 xor	 edx, edx
  00212	48 8d 4d 68	 lea	 rcx, QWORD PTR candidates$7[rbp]
  00216	e8 00 00 00 00	 call	 ??A?$ImVector@PEBD@@QEAAAEAPEBDH@Z ; ImVector<char const * __ptr64>::operator[]
  0021b	45 33 c9	 xor	 r9d, r9d
  0021e	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00221	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00228	8b 50 2c	 mov	 edx, DWORD PTR [rax+44]
  0022b	48 8b 8d a8 02
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00232	e8 00 00 00 00	 call	 ?InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z ; ImGuiInputTextCallbackData::InsertChars

; 6784 :                     data->InsertChars(data->CursorPos, " ");

  00237	45 33 c9	 xor	 r9d, r9d
  0023a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01CLKCMJKC@?5?$AA@
  00241	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00248	8b 50 2c	 mov	 edx, DWORD PTR [rax+44]
  0024b	48 8b 8d a8 02
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00252	e8 00 00 00 00	 call	 ?InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z ; ImGuiInputTextCallbackData::InsertChars

; 6785 :                 }
; 6786 :                 else

  00257	e9 de 01 00 00	 jmp	 $LN23@TextEditCa
$LN24@TextEditCa:

; 6787 :                 {
; 6788 :                     // Multiple matches. Complete as much as we can..
; 6789 :                     // So inputing "C"+Tab will complete to "CL" then display "CLEAR" and "CLASSIFY" as matches.
; 6790 :                     int match_len = (int)(word_end - word_start);

  0025c	48 8b 45 28	 mov	 rax, QWORD PTR word_start$5[rbp]
  00260	48 8b 4d 08	 mov	 rcx, QWORD PTR word_end$4[rbp]
  00264	48 2b c8	 sub	 rcx, rax
  00267	48 8b c1	 mov	 rax, rcx
  0026a	89 85 b4 00 00
	00		 mov	 DWORD PTR match_len$9[rbp], eax
$LN9@TextEditCa:

; 6791 :                     for (;;)
; 6792 :                     {
; 6793 :                         int c = 0;

  00270	c7 85 d4 00 00
	00 00 00 00 00	 mov	 DWORD PTR c$10[rbp], 0

; 6794 :                         bool all_candidates_matches = true;

  0027a	c6 85 f4 00 00
	00 01		 mov	 BYTE PTR all_candidates_matches$11[rbp], 1

; 6795 :                         for (int i = 0; i < candidates.Size && all_candidates_matches; i++)

  00281	c7 85 14 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$12[rbp], 0
  0028b	eb 0e		 jmp	 SHORT $LN14@TextEditCa
$LN12@TextEditCa:
  0028d	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR i$12[rbp]
  00293	ff c0		 inc	 eax
  00295	89 85 14 01 00
	00		 mov	 DWORD PTR i$12[rbp], eax
$LN14@TextEditCa:
  0029b	8b 45 68	 mov	 eax, DWORD PTR candidates$7[rbp]
  0029e	39 85 14 01 00
	00		 cmp	 DWORD PTR i$12[rbp], eax
  002a4	0f 8d 83 00 00
	00		 jge	 $LN13@TextEditCa
  002aa	0f b6 85 f4 00
	00 00		 movzx	 eax, BYTE PTR all_candidates_matches$11[rbp]
  002b1	85 c0		 test	 eax, eax
  002b3	74 78		 je	 SHORT $LN13@TextEditCa

; 6796 :                             if (i == 0)

  002b5	83 bd 14 01 00
	00 00		 cmp	 DWORD PTR i$12[rbp], 0
  002bc	75 2d		 jne	 SHORT $LN26@TextEditCa

; 6797 :                                 c = toupper(candidates[i][match_len]);

  002be	8b 95 14 01 00
	00		 mov	 edx, DWORD PTR i$12[rbp]
  002c4	48 8d 4d 68	 lea	 rcx, QWORD PTR candidates$7[rbp]
  002c8	e8 00 00 00 00	 call	 ??A?$ImVector@PEBD@@QEAAAEAPEBDH@Z ; ImVector<char const * __ptr64>::operator[]
  002cd	48 63 8d b4 00
	00 00		 movsxd	 rcx, DWORD PTR match_len$9[rbp]
  002d4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002d7	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  002db	8b c8		 mov	 ecx, eax
  002dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_toupper
  002e3	89 85 d4 00 00
	00		 mov	 DWORD PTR c$10[rbp], eax
  002e9	eb 3d		 jmp	 SHORT $LN27@TextEditCa
$LN26@TextEditCa:

; 6798 :                             else if (c == 0 || c != toupper(candidates[i][match_len]))

  002eb	83 bd d4 00 00
	00 00		 cmp	 DWORD PTR c$10[rbp], 0
  002f2	74 2d		 je	 SHORT $LN29@TextEditCa
  002f4	8b 95 14 01 00
	00		 mov	 edx, DWORD PTR i$12[rbp]
  002fa	48 8d 4d 68	 lea	 rcx, QWORD PTR candidates$7[rbp]
  002fe	e8 00 00 00 00	 call	 ??A?$ImVector@PEBD@@QEAAAEAPEBDH@Z ; ImVector<char const * __ptr64>::operator[]
  00303	48 63 8d b4 00
	00 00		 movsxd	 rcx, DWORD PTR match_len$9[rbp]
  0030a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0030d	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  00311	8b c8		 mov	 ecx, eax
  00313	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_toupper
  00319	39 85 d4 00 00
	00		 cmp	 DWORD PTR c$10[rbp], eax
  0031f	74 07		 je	 SHORT $LN27@TextEditCa
$LN29@TextEditCa:

; 6799 :                                 all_candidates_matches = false;

  00321	c6 85 f4 00 00
	00 00		 mov	 BYTE PTR all_candidates_matches$11[rbp], 0
$LN27@TextEditCa:

; 6800 :                         if (!all_candidates_matches)

  00328	e9 60 ff ff ff	 jmp	 $LN12@TextEditCa
$LN13@TextEditCa:
  0032d	0f b6 85 f4 00
	00 00		 movzx	 eax, BYTE PTR all_candidates_matches$11[rbp]
  00334	85 c0		 test	 eax, eax
  00336	75 02		 jne	 SHORT $LN30@TextEditCa

; 6801 :                             break;

  00338	eb 13		 jmp	 SHORT $LN10@TextEditCa
$LN30@TextEditCa:

; 6802 :                         match_len++;

  0033a	8b 85 b4 00 00
	00		 mov	 eax, DWORD PTR match_len$9[rbp]
  00340	ff c0		 inc	 eax
  00342	89 85 b4 00 00
	00		 mov	 DWORD PTR match_len$9[rbp], eax

; 6803 :                     }

  00348	e9 23 ff ff ff	 jmp	 $LN9@TextEditCa
$LN10@TextEditCa:

; 6804 : 
; 6805 :                     if (match_len > 0)

  0034d	83 bd b4 00 00
	00 00		 cmp	 DWORD PTR match_len$9[rbp], 0
  00354	0f 8e 81 00 00
	00		 jle	 $LN31@TextEditCa

; 6806 :                     {
; 6807 :                         data->DeleteChars((int)(word_start - data->Buf), (int)(word_end - word_start));

  0035a	48 8b 45 28	 mov	 rax, QWORD PTR word_start$5[rbp]
  0035e	48 8b 4d 08	 mov	 rcx, QWORD PTR word_end$4[rbp]
  00362	48 2b c8	 sub	 rcx, rax
  00365	48 8b c1	 mov	 rax, rcx
  00368	48 8b 8d a8 02
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0036f	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00373	48 8b 55 28	 mov	 rdx, QWORD PTR word_start$5[rbp]
  00377	48 2b d1	 sub	 rdx, rcx
  0037a	48 8b ca	 mov	 rcx, rdx
  0037d	44 8b c0	 mov	 r8d, eax
  00380	8b d1		 mov	 edx, ecx
  00382	48 8b 8d a8 02
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00389	e8 00 00 00 00	 call	 ?DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z ; ImGuiInputTextCallbackData::DeleteChars

; 6808 :                         data->InsertChars(data->CursorPos, candidates[0], candidates[0] + match_len);

  0038e	33 d2		 xor	 edx, edx
  00390	48 8d 4d 68	 lea	 rcx, QWORD PTR candidates$7[rbp]
  00394	e8 00 00 00 00	 call	 ??A?$ImVector@PEBD@@QEAAAEAPEBDH@Z ; ImVector<char const * __ptr64>::operator[]
  00399	48 63 8d b4 00
	00 00		 movsxd	 rcx, DWORD PTR match_len$9[rbp]
  003a0	48 03 08	 add	 rcx, QWORD PTR [rax]
  003a3	48 8b c1	 mov	 rax, rcx
  003a6	48 89 85 68 02
	00 00		 mov	 QWORD PTR tv212[rbp], rax
  003ad	33 d2		 xor	 edx, edx
  003af	48 8d 4d 68	 lea	 rcx, QWORD PTR candidates$7[rbp]
  003b3	e8 00 00 00 00	 call	 ??A?$ImVector@PEBD@@QEAAAEAPEBDH@Z ; ImVector<char const * __ptr64>::operator[]
  003b8	48 8b 8d 68 02
	00 00		 mov	 rcx, QWORD PTR tv212[rbp]
  003bf	4c 8b c9	 mov	 r9, rcx
  003c2	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  003c5	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  003cc	8b 50 2c	 mov	 edx, DWORD PTR [rax+44]
  003cf	48 8b 8d a8 02
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  003d6	e8 00 00 00 00	 call	 ?InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z ; ImGuiInputTextCallbackData::InsertChars
$LN31@TextEditCa:

; 6809 :                     }
; 6810 : 
; 6811 :                     // List matches
; 6812 :                     AddLog("Possible matches:\n");

  003db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@LCPLNAHF@Possible?5matches?3?6?$AA@
  003e2	48 8b 8d a0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003e9	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QEAAXPEBDZZ ; ExampleAppConsole::AddLog

; 6813 :                     for (int i = 0; i < candidates.Size; i++)

  003ee	c7 85 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$13[rbp], 0
  003f8	eb 0e		 jmp	 SHORT $LN17@TextEditCa
$LN15@TextEditCa:
  003fa	8b 85 34 01 00
	00		 mov	 eax, DWORD PTR i$13[rbp]
  00400	ff c0		 inc	 eax
  00402	89 85 34 01 00
	00		 mov	 DWORD PTR i$13[rbp], eax
$LN17@TextEditCa:
  00408	8b 45 68	 mov	 eax, DWORD PTR candidates$7[rbp]
  0040b	39 85 34 01 00
	00		 cmp	 DWORD PTR i$13[rbp], eax
  00411	7d 27		 jge	 SHORT $LN23@TextEditCa

; 6814 :                         AddLog("- %s\n", candidates[i]);

  00413	8b 95 34 01 00
	00		 mov	 edx, DWORD PTR i$13[rbp]
  00419	48 8d 4d 68	 lea	 rcx, QWORD PTR candidates$7[rbp]
  0041d	e8 00 00 00 00	 call	 ??A?$ImVector@PEBD@@QEAAAEAPEBDH@Z ; ImVector<char const * __ptr64>::operator[]
  00422	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00425	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05PHKAGDP@?9?5?$CFs?6?$AA@
  0042c	48 8b 8d a0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00433	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QEAAXPEBDZZ ; ExampleAppConsole::AddLog
  00438	eb c0		 jmp	 SHORT $LN15@TextEditCa
$LN23@TextEditCa:

; 6815 :                 }
; 6816 : 
; 6817 :                 break;

  0043a	48 8d 4d 68	 lea	 rcx, QWORD PTR candidates$7[rbp]
  0043e	e8 00 00 00 00	 call	 ??1?$ImVector@PEBD@@QEAA@XZ ; ImVector<char const * __ptr64>::~ImVector<char const * __ptr64>
  00443	e9 9b 01 00 00	 jmp	 $LN2@TextEditCa

; 6818 :             }

  00448	48 8d 4d 68	 lea	 rcx, QWORD PTR candidates$7[rbp]
  0044c	e8 00 00 00 00	 call	 ??1?$ImVector@PEBD@@QEAA@XZ ; ImVector<char const * __ptr64>::~ImVector<char const * __ptr64>
  00451	90		 npad	 1
$LN32@TextEditCa:

; 6819 :         case ImGuiInputTextFlags_CallbackHistory:
; 6820 :             {
; 6821 :                 // Example of HISTORY
; 6822 :                 const int prev_history_pos = HistoryPos;

  00452	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00459	8b 80 30 01 00
	00		 mov	 eax, DWORD PTR [rax+304]
  0045f	89 85 54 01 00
	00		 mov	 DWORD PTR prev_history_pos$14[rbp], eax

; 6823 :                 if (data->EventKey == ImGuiKey_UpArrow)

  00465	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  0046c	81 78 14 03 02
	00 00		 cmp	 DWORD PTR [rax+20], 515	; 00000203H
  00473	75 5c		 jne	 SHORT $LN33@TextEditCa

; 6824 :                 {
; 6825 :                     if (HistoryPos == -1)

  00475	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0047c	83 b8 30 01 00
	00 ff		 cmp	 DWORD PTR [rax+304], -1
  00483	75 1e		 jne	 SHORT $LN35@TextEditCa

; 6826 :                         HistoryPos = History.Size - 1;

  00485	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0048c	8b 80 20 01 00
	00		 mov	 eax, DWORD PTR [rax+288]
  00492	ff c8		 dec	 eax
  00494	48 8b 8d a0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0049b	89 81 30 01 00
	00		 mov	 DWORD PTR [rcx+304], eax
  004a1	eb 2c		 jmp	 SHORT $LN36@TextEditCa
$LN35@TextEditCa:

; 6827 :                     else if (HistoryPos > 0)

  004a3	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  004aa	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [rax+304], 0
  004b1	7e 1c		 jle	 SHORT $LN36@TextEditCa

; 6828 :                         HistoryPos--;

  004b3	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  004ba	8b 80 30 01 00
	00		 mov	 eax, DWORD PTR [rax+304]
  004c0	ff c8		 dec	 eax
  004c2	48 8b 8d a0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004c9	89 81 30 01 00
	00		 mov	 DWORD PTR [rcx+304], eax
$LN36@TextEditCa:

; 6829 :                 }

  004cf	eb 6e		 jmp	 SHORT $LN34@TextEditCa
$LN33@TextEditCa:

; 6830 :                 else if (data->EventKey == ImGuiKey_DownArrow)

  004d1	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  004d8	81 78 14 04 02
	00 00		 cmp	 DWORD PTR [rax+20], 516	; 00000204H
  004df	75 5e		 jne	 SHORT $LN34@TextEditCa

; 6831 :                 {
; 6832 :                     if (HistoryPos != -1)

  004e1	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  004e8	83 b8 30 01 00
	00 ff		 cmp	 DWORD PTR [rax+304], -1
  004ef	74 4e		 je	 SHORT $LN34@TextEditCa

; 6833 :                         if (++HistoryPos >= History.Size)

  004f1	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  004f8	8b 80 30 01 00
	00		 mov	 eax, DWORD PTR [rax+304]
  004fe	ff c0		 inc	 eax
  00500	89 85 64 02 00
	00		 mov	 DWORD PTR tv251[rbp], eax
  00506	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0050d	8b 8d 64 02 00
	00		 mov	 ecx, DWORD PTR tv251[rbp]
  00513	89 88 30 01 00
	00		 mov	 DWORD PTR [rax+304], ecx
  00519	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00520	8b 80 20 01 00
	00		 mov	 eax, DWORD PTR [rax+288]
  00526	39 85 64 02 00
	00		 cmp	 DWORD PTR tv251[rbp], eax
  0052c	7c 11		 jl	 SHORT $LN34@TextEditCa

; 6834 :                             HistoryPos = -1;

  0052e	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00535	c7 80 30 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+304], -1
$LN34@TextEditCa:

; 6835 :                 }
; 6836 : 
; 6837 :                 // A better implementation would preserve the data on the current input line along with cursor position.
; 6838 :                 if (prev_history_pos != HistoryPos)

  0053f	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00546	8b 80 30 01 00
	00		 mov	 eax, DWORD PTR [rax+304]
  0054c	39 85 54 01 00
	00		 cmp	 DWORD PTR prev_history_pos$14[rbp], eax
  00552	0f 84 8b 00 00
	00		 je	 $LN2@TextEditCa

; 6839 :                 {
; 6840 :                     const char* history_str = (HistoryPos >= 0) ? History[HistoryPos] : "";

  00558	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0055f	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [rax+304], 0
  00566	7c 2e		 jl	 SHORT $LN43@TextEditCa
  00568	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0056f	48 05 20 01 00
	00		 add	 rax, 288		; 00000120H
  00575	48 8b 8d a0 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0057c	8b 91 30 01 00
	00		 mov	 edx, DWORD PTR [rcx+304]
  00582	48 8b c8	 mov	 rcx, rax
  00585	e8 00 00 00 00	 call	 ??A?$ImVector@PEAD@@QEAAAEAPEADH@Z ; ImVector<char * __ptr64>::operator[]
  0058a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0058d	48 89 85 68 02
	00 00		 mov	 QWORD PTR tv265[rbp], rax
  00594	eb 0e		 jmp	 SHORT $LN44@TextEditCa
$LN43@TextEditCa:
  00596	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0059d	48 89 85 68 02
	00 00		 mov	 QWORD PTR tv265[rbp], rax
$LN44@TextEditCa:
  005a4	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR tv265[rbp]
  005ab	48 89 85 78 01
	00 00		 mov	 QWORD PTR history_str$15[rbp], rax

; 6841 :                     data->DeleteChars(0, data->BufTextLen);

  005b2	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  005b9	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  005bd	33 d2		 xor	 edx, edx
  005bf	48 8b 8d a8 02
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005c6	e8 00 00 00 00	 call	 ?DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z ; ImGuiInputTextCallbackData::DeleteChars

; 6842 :                     data->InsertChars(0, history_str);

  005cb	45 33 c9	 xor	 r9d, r9d
  005ce	4c 8b 85 78 01
	00 00		 mov	 r8, QWORD PTR history_str$15[rbp]
  005d5	33 d2		 xor	 edx, edx
  005d7	48 8b 8d a8 02
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  005de	e8 00 00 00 00	 call	 ?InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z ; ImGuiInputTextCallbackData::InsertChars
$LN2@TextEditCa:

; 6843 :                 }
; 6844 :             }
; 6845 :         }
; 6846 :         return 0;

  005e3	33 c0		 xor	 eax, eax

; 6847 :     }

  005e5	8b f8		 mov	 edi, eax
  005e7	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  005eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z$rtcFrameData
  005f2	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  005f7	8b c7		 mov	 eax, edi
  005f9	48 8b 8d 70 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00600	48 33 cd	 xor	 rcx, rbp
  00603	e8 00 00 00 00	 call	 __security_check_cookie
  00608	48 8d a5 88 02
	00 00		 lea	 rsp, QWORD PTR [rbp+648]
  0060f	5f		 pop	 rdi
  00610	5d		 pop	 rbp
  00611	c3		 ret	 0
?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z ENDP ; ExampleAppConsole::TextEditCallback
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
word_end$4 = 8
word_start$5 = 40
c$6 = 68
candidates$7 = 104
i$8 = 148
match_len$9 = 180
c$10 = 212
all_candidates_matches$11 = 244
i$12 = 276
i$13 = 308
prev_history_pos$14 = 340
history_str$15 = 376
$T16 = 600
tv251 = 612
tv65 = 612
tv265 = 616
tv212 = 616
tv91 = 616
__$ArrayPad$ = 624
this$ = 672
data$ = 680
?dtor$0@?0??TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z@4HA PROC ; `ExampleAppConsole::TextEditCallback'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 68	 lea	 rcx, QWORD PTR candidates$7[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$ImVector@PEBD@@QEAA@XZ ; ImVector<char const * __ptr64>::~ImVector<char const * __ptr64>
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z@4HA ENDP ; `ExampleAppConsole::TextEditCallback'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
word_end$4 = 8
word_start$5 = 40
c$6 = 68
candidates$7 = 104
i$8 = 148
match_len$9 = 180
c$10 = 212
all_candidates_matches$11 = 244
i$12 = 276
i$13 = 308
prev_history_pos$14 = 340
history_str$15 = 376
$T16 = 600
tv251 = 612
tv65 = 612
tv265 = 616
tv212 = 616
tv91 = 616
__$ArrayPad$ = 624
this$ = 672
data$ = 680
?dtor$0@?0??TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z@4HA PROC ; `ExampleAppConsole::TextEditCallback'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 68	 lea	 rcx, QWORD PTR candidates$7[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$ImVector@PEBD@@QEAA@XZ ; ImVector<char const * __ptr64>::~ImVector<char const * __ptr64>
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z@4HA ENDP ; `ExampleAppConsole::TextEditCallback'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?TextEditCallbackStub@ExampleAppConsole@@SAHPEAUImGuiInputTextCallbackData@@@Z
_TEXT	SEGMENT
console$ = 8
data$ = 256
?TextEditCallbackStub@ExampleAppConsole@@SAHPEAUImGuiInputTextCallbackData@@@Z PROC ; ExampleAppConsole::TextEditCallbackStub, COMDAT

; 6743 :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 6744 :         ExampleAppConsole* console = (ExampleAppConsole*)data->UserData;

  0002a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00031	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00035	48 89 45 08	 mov	 QWORD PTR console$[rbp], rax

; 6745 :         return console->TextEditCallback(data);

  00039	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR data$[rbp]
  00040	48 8b 4d 08	 mov	 rcx, QWORD PTR console$[rbp]
  00044	e8 00 00 00 00	 call	 ?TextEditCallback@ExampleAppConsole@@QEAAHPEAUImGuiInputTextCallbackData@@@Z ; ExampleAppConsole::TextEditCallback

; 6746 :     }

  00049	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
?TextEditCallbackStub@ExampleAppConsole@@SAHPEAUImGuiInputTextCallbackData@@@Z ENDP ; ExampleAppConsole::TextEditCallbackStub
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ExecCommand@ExampleAppConsole@@QEAAXPEBD@Z
_TEXT	SEGMENT
i$1 = 4
i$2 = 36
first$3 = 68
i$4 = 100
$T5 = 328
tv162 = 340
this$ = 384
command_line$ = 392
?ExecCommand@ExampleAppConsole@@QEAAXPEBD@Z PROC	; ExampleAppConsole::ExecCommand, COMDAT

; 6700 :     {

$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]

; 6701 :         AddLog("# %s\n", command_line);

  0002f	4c 8b 85 88 01
	00 00		 mov	 r8, QWORD PTR command_line$[rbp]
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05DFHAGHEP@?$CD?5?$CFs?6?$AA@
  0003d	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00044	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QEAAXPEBDZZ ; ExampleAppConsole::AddLog

; 6702 : 
; 6703 :         // Insert into history. First find match and delete it so it can be pushed to the back.
; 6704 :         // This isn't trying to be smart or optimal.
; 6705 :         HistoryPos = -1;

  00049	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00050	c7 80 30 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+304], -1

; 6706 :         for (int i = History.Size - 1; i >= 0; i--)

  0005a	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00061	8b 80 20 01 00
	00		 mov	 eax, DWORD PTR [rax+288]
  00067	ff c8		 dec	 eax
  00069	89 45 04	 mov	 DWORD PTR i$1[rbp], eax
  0006c	eb 08		 jmp	 SHORT $LN4@ExecComman
$LN2@ExecComman:
  0006e	8b 45 04	 mov	 eax, DWORD PTR i$1[rbp]
  00071	ff c8		 dec	 eax
  00073	89 45 04	 mov	 DWORD PTR i$1[rbp], eax
$LN4@ExecComman:
  00076	83 7d 04 00	 cmp	 DWORD PTR i$1[rbp], 0
  0007a	0f 8c 86 00 00
	00		 jl	 $LN3@ExecComman

; 6707 :             if (Stricmp(History[i], command_line) == 0)

  00080	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00087	48 05 20 01 00
	00		 add	 rax, 288		; 00000120H
  0008d	8b 55 04	 mov	 edx, DWORD PTR i$1[rbp]
  00090	48 8b c8	 mov	 rcx, rax
  00093	e8 00 00 00 00	 call	 ??A?$ImVector@PEAD@@QEAAAEAPEADH@Z ; ImVector<char * __ptr64>::operator[]
  00098	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR command_line$[rbp]
  0009f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000a2	e8 00 00 00 00	 call	 ?Stricmp@ExampleAppConsole@@SAHPEBD0@Z ; ExampleAppConsole::Stricmp
  000a7	85 c0		 test	 eax, eax
  000a9	75 56		 jne	 SHORT $LN11@ExecComman

; 6708 :             {
; 6709 :                 free(History[i]);

  000ab	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	48 05 20 01 00
	00		 add	 rax, 288		; 00000120H
  000b8	8b 55 04	 mov	 edx, DWORD PTR i$1[rbp]
  000bb	48 8b c8	 mov	 rcx, rax
  000be	e8 00 00 00 00	 call	 ??A?$ImVector@PEAD@@QEAAAEAPEADH@Z ; ImVector<char * __ptr64>::operator[]
  000c3	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 6710 :                 History.erase(History.begin() + i);

  000cc	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d3	48 05 20 01 00
	00		 add	 rax, 288		; 00000120H
  000d9	48 8b c8	 mov	 rcx, rax
  000dc	e8 00 00 00 00	 call	 ?begin@?$ImVector@PEAD@@QEAAPEAPEADXZ ; ImVector<char * __ptr64>::begin
  000e1	48 63 4d 04	 movsxd	 rcx, DWORD PTR i$1[rbp]
  000e5	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  000e9	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f0	48 81 c1 20 01
	00 00		 add	 rcx, 288		; 00000120H
  000f7	48 8b d0	 mov	 rdx, rax
  000fa	e8 00 00 00 00	 call	 ?erase@?$ImVector@PEAD@@QEAAPEAPEADPEBQEAD@Z ; ImVector<char * __ptr64>::erase

; 6711 :                 break;

  000ff	eb 05		 jmp	 SHORT $LN3@ExecComman
$LN11@ExecComman:

; 6712 :             }

  00101	e9 68 ff ff ff	 jmp	 $LN2@ExecComman
$LN3@ExecComman:

; 6713 :         History.push_back(Strdup(command_line));

  00106	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR command_line$[rbp]
  0010d	e8 00 00 00 00	 call	 ?Strdup@ExampleAppConsole@@SAPEADPEBD@Z ; ExampleAppConsole::Strdup
  00112	48 89 85 48 01
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  00119	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00120	48 05 20 01 00
	00		 add	 rax, 288		; 00000120H
  00126	48 8d 95 48 01
	00 00		 lea	 rdx, QWORD PTR $T5[rbp]
  0012d	48 8b c8	 mov	 rcx, rax
  00130	e8 00 00 00 00	 call	 ?push_back@?$ImVector@PEAD@@QEAAXAEBQEAD@Z ; ImVector<char * __ptr64>::push_back

; 6714 : 
; 6715 :         // Process command
; 6716 :         if (Stricmp(command_line, "CLEAR") == 0)

  00135	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05PONODPI@CLEAR?$AA@
  0013c	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR command_line$[rbp]
  00143	e8 00 00 00 00	 call	 ?Stricmp@ExampleAppConsole@@SAHPEBD0@Z ; ExampleAppConsole::Stricmp
  00148	85 c0		 test	 eax, eax
  0014a	75 11		 jne	 SHORT $LN12@ExecComman

; 6717 :         {
; 6718 :             ClearLog();

  0014c	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00153	e8 00 00 00 00	 call	 ?ClearLog@ExampleAppConsole@@QEAAXXZ ; ExampleAppConsole::ClearLog
  00158	e9 40 01 00 00	 jmp	 $LN13@ExecComman
$LN12@ExecComman:

; 6719 :         }
; 6720 :         else if (Stricmp(command_line, "HELP") == 0)

  0015d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04DOKPJKJF@HELP?$AA@
  00164	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR command_line$[rbp]
  0016b	e8 00 00 00 00	 call	 ?Stricmp@ExampleAppConsole@@SAHPEBD0@Z ; ExampleAppConsole::Stricmp
  00170	85 c0		 test	 eax, eax
  00172	75 6b		 jne	 SHORT $LN14@ExecComman

; 6721 :         {
; 6722 :             AddLog("Commands:");

  00174	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09GJFNIAOH@Commands?3?$AA@
  0017b	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00182	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QEAAXPEBDZZ ; ExampleAppConsole::AddLog

; 6723 :             for (int i = 0; i < Commands.Size; i++)

  00187	c7 45 24 00 00
	00 00		 mov	 DWORD PTR i$2[rbp], 0
  0018e	eb 08		 jmp	 SHORT $LN7@ExecComman
$LN5@ExecComman:
  00190	8b 45 24	 mov	 eax, DWORD PTR i$2[rbp]
  00193	ff c0		 inc	 eax
  00195	89 45 24	 mov	 DWORD PTR i$2[rbp], eax
$LN7@ExecComman:
  00198	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0019f	8b 80 10 01 00
	00		 mov	 eax, DWORD PTR [rax+272]
  001a5	39 45 24	 cmp	 DWORD PTR i$2[rbp], eax
  001a8	7d 30		 jge	 SHORT $LN6@ExecComman

; 6724 :                 AddLog("- %s", Commands[i]);

  001aa	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001b1	48 05 10 01 00
	00		 add	 rax, 272		; 00000110H
  001b7	8b 55 24	 mov	 edx, DWORD PTR i$2[rbp]
  001ba	48 8b c8	 mov	 rcx, rax
  001bd	e8 00 00 00 00	 call	 ??A?$ImVector@PEBD@@QEAAAEAPEBDH@Z ; ImVector<char const * __ptr64>::operator[]
  001c2	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  001c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04JKCKOCFH@?9?5?$CFs?$AA@
  001cc	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001d3	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QEAAXPEBDZZ ; ExampleAppConsole::AddLog
  001d8	eb b6		 jmp	 SHORT $LN5@ExecComman
$LN6@ExecComman:

; 6725 :         }
; 6726 :         else if (Stricmp(command_line, "HISTORY") == 0)

  001da	e9 be 00 00 00	 jmp	 $LN15@ExecComman
$LN14@ExecComman:
  001df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DBIJIOJO@HISTORY?$AA@
  001e6	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR command_line$[rbp]
  001ed	e8 00 00 00 00	 call	 ?Stricmp@ExampleAppConsole@@SAHPEBD0@Z ; ExampleAppConsole::Stricmp
  001f2	85 c0		 test	 eax, eax
  001f4	0f 85 89 00 00
	00		 jne	 $LN16@ExecComman

; 6727 :         {
; 6728 :             int first = History.Size - 10;

  001fa	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00201	8b 80 20 01 00
	00		 mov	 eax, DWORD PTR [rax+288]
  00207	83 e8 0a	 sub	 eax, 10
  0020a	89 45 44	 mov	 DWORD PTR first$3[rbp], eax

; 6729 :             for (int i = first > 0 ? first : 0; i < History.Size; i++)

  0020d	83 7d 44 00	 cmp	 DWORD PTR first$3[rbp], 0
  00211	7e 0b		 jle	 SHORT $LN19@ExecComman
  00213	8b 45 44	 mov	 eax, DWORD PTR first$3[rbp]
  00216	89 85 54 01 00
	00		 mov	 DWORD PTR tv162[rbp], eax
  0021c	eb 0a		 jmp	 SHORT $LN20@ExecComman
$LN19@ExecComman:
  0021e	c7 85 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv162[rbp], 0
$LN20@ExecComman:
  00228	8b 85 54 01 00
	00		 mov	 eax, DWORD PTR tv162[rbp]
  0022e	89 45 64	 mov	 DWORD PTR i$4[rbp], eax
  00231	eb 08		 jmp	 SHORT $LN10@ExecComman
$LN8@ExecComman:
  00233	8b 45 64	 mov	 eax, DWORD PTR i$4[rbp]
  00236	ff c0		 inc	 eax
  00238	89 45 64	 mov	 DWORD PTR i$4[rbp], eax
$LN10@ExecComman:
  0023b	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00242	8b 80 20 01 00
	00		 mov	 eax, DWORD PTR [rax+288]
  00248	39 45 64	 cmp	 DWORD PTR i$4[rbp], eax
  0024b	7d 34		 jge	 SHORT $LN9@ExecComman

; 6730 :                 AddLog("%3d: %s\n", i, History[i]);

  0024d	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00254	48 05 20 01 00
	00		 add	 rax, 288		; 00000120H
  0025a	8b 55 64	 mov	 edx, DWORD PTR i$4[rbp]
  0025d	48 8b c8	 mov	 rcx, rax
  00260	e8 00 00 00 00	 call	 ??A?$ImVector@PEAD@@QEAAAEAPEADH@Z ; ImVector<char * __ptr64>::operator[]
  00265	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  00268	44 8b 45 64	 mov	 r8d, DWORD PTR i$4[rbp]
  0026c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08PKLPHKJF@?$CF3d?3?5?$CFs?6?$AA@
  00273	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0027a	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QEAAXPEBDZZ ; ExampleAppConsole::AddLog
  0027f	eb b2		 jmp	 SHORT $LN8@ExecComman
$LN9@ExecComman:

; 6731 :         }
; 6732 :         else

  00281	eb 1a		 jmp	 SHORT $LN17@ExecComman
$LN16@ExecComman:

; 6733 :         {
; 6734 :             AddLog("Unknown command: '%s'\n", command_line);

  00283	4c 8b 85 88 01
	00 00		 mov	 r8, QWORD PTR command_line$[rbp]
  0028a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@OKLFOGKH@Unknown?5command?3?5?8?$CFs?8?6?$AA@
  00291	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00298	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QEAAXPEBDZZ ; ExampleAppConsole::AddLog
$LN17@ExecComman:
$LN15@ExecComman:
$LN13@ExecComman:

; 6735 :         }
; 6736 : 
; 6737 :         // On command input, we scroll to bottom even if AutoScroll==false
; 6738 :         ScrollToBottom = true;

  0029d	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002a4	c6 80 51 02 00
	00 01		 mov	 BYTE PTR [rax+593], 1

; 6739 :     }

  002ab	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  002b2	5f		 pop	 rdi
  002b3	5d		 pop	 rbp
  002b4	c3		 ret	 0
?ExecCommand@ExampleAppConsole@@QEAAXPEBD@Z ENDP	; ExampleAppConsole::ExecCommand
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?Draw@ExampleAppConsole@@QEAAXPEBDPEA_N@Z
_TEXT	SEGMENT
copy_to_clipboard$ = 4
footer_height_to_reserve$ = 36
i$4 = 68
item$5 = 104
color$6 = 136
has_color$7 = 180
reclaim_focus$ = 212
input_text_flags$ = 244
s$8 = 280
$T9 = 692
$T10 = 724
$T11 = 756
$T12 = 788
$T13 = 820
$T14 = 852
$T15 = 900
tv278 = 932
tv177 = 936
__$ArrayPad$ = 944
this$ = 992
title$ = 1000
p_open$ = 1008
?Draw@ExampleAppConsole@@QEAAXPEBDPEA_N@Z PROC		; ExampleAppConsole::Draw, COMDAT

; 6559 :     {

$LN30:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec f0 03
	00 00		 sub	 rsp, 1008		; 000003f0H
  00019	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001e	48 8b fc	 mov	 rdi, rsp
  00021	b9 fc 00 00 00	 mov	 ecx, 252		; 000000fcH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 18
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1048]
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 b0 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 6560 :         ImGui::SetNextWindowSize(ImVec2(520, 600), ImGuiCond_FirstUseEver);

  00046	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@44160000
  0004e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@44020000
  00056	48 8d 8d b4 02
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  0005d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00062	ba 04 00 00 00	 mov	 edx, 4
  00067	48 8b c8	 mov	 rcx, rax
  0006a	e8 00 00 00 00	 call	 ?SetNextWindowSize@ImGui@@YAXAEBUImVec2@@H@Z ; ImGui::SetNextWindowSize

; 6561 :         if (!ImGui::Begin(title, p_open))

  0006f	45 33 c0	 xor	 r8d, r8d
  00072	48 8b 95 f0 03
	00 00		 mov	 rdx, QWORD PTR p_open$[rbp]
  00079	48 8b 8d e8 03
	00 00		 mov	 rcx, QWORD PTR title$[rbp]
  00080	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin
  00085	0f b6 c0	 movzx	 eax, al
  00088	85 c0		 test	 eax, eax
  0008a	75 0a		 jne	 SHORT $LN5@Draw

; 6562 :         {
; 6563 :             ImGui::End();

  0008c	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 6564 :             return;

  00091	e9 ac 05 00 00	 jmp	 $LN1@Draw
$LN5@Draw:

; 6565 :         }
; 6566 : 
; 6567 :         // As a specific feature guaranteed by the library, after calling Begin() the last Item represent the title bar.
; 6568 :         // So e.g. IsItemHovered() will return true when hovering the title bar.
; 6569 :         // Here we create a context menu only available from the title bar.
; 6570 :         if (ImGui::BeginPopupContextItem())

  00096	ba 01 00 00 00	 mov	 edx, 1
  0009b	33 c9		 xor	 ecx, ecx
  0009d	e8 00 00 00 00	 call	 ?BeginPopupContextItem@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopupContextItem
  000a2	0f b6 c0	 movzx	 eax, al
  000a5	85 c0		 test	 eax, eax
  000a7	74 2a		 je	 SHORT $LN6@Draw

; 6571 :         {
; 6572 :             if (ImGui::MenuItem("Close Console"))

  000a9	41 b1 01	 mov	 r9b, 1
  000ac	45 33 c0	 xor	 r8d, r8d
  000af	33 d2		 xor	 edx, edx
  000b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GDIOPKGP@Close?5Console?$AA@
  000b8	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  000bd	0f b6 c0	 movzx	 eax, al
  000c0	85 c0		 test	 eax, eax
  000c2	74 0a		 je	 SHORT $LN7@Draw

; 6573 :                 *p_open = false;

  000c4	48 8b 85 f0 03
	00 00		 mov	 rax, QWORD PTR p_open$[rbp]
  000cb	c6 00 00	 mov	 BYTE PTR [rax], 0
$LN7@Draw:

; 6574 :             ImGui::EndPopup();

  000ce	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN6@Draw:

; 6575 :         }
; 6576 : 
; 6577 :         ImGui::TextWrapped(

  000d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0NJ@IPNBOCGH@This?5example?5implements?5a?5consol@
  000da	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped

; 6578 :             "This example implements a console with basic coloring, completion (TAB key) and history (Up/Down keys). A more elaborate "
; 6579 :             "implementation may want to store entries along with extra data such as timestamp, emitter, etc.");
; 6580 :         ImGui::TextWrapped("Enter 'HELP' for help.");

  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@DCBEMCMC@Enter?5?8HELP?8?5for?5help?4?$AA@
  000e6	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped

; 6581 : 
; 6582 :         // TODO: display items starting from the bottom
; 6583 : 
; 6584 :         if (ImGui::SmallButton("Add Debug Text"))  { AddLog("%d some text", Items.Size); AddLog("some more text"); AddLog("display very important message here!"); }

  000eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@EGDLDIHN@Add?5Debug?5Text?$AA@
  000f2	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton
  000f7	0f b6 c0	 movzx	 eax, al
  000fa	85 c0		 test	 eax, eax
  000fc	74 47		 je	 SHORT $LN8@Draw
  000fe	48 8b 85 e0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00105	44 8b 80 00 01
	00 00		 mov	 r8d, DWORD PTR [rax+256]
  0010c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@OJGBPOOP@?$CFd?5some?5text?$AA@
  00113	48 8b 8d e0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011a	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QEAAXPEBDZZ ; ExampleAppConsole::AddLog
  0011f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@BMHJKMPF@some?5more?5text?$AA@
  00126	48 8b 8d e0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012d	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QEAAXPEBDZZ ; ExampleAppConsole::AddLog
  00132	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@PEIDNPCH@display?5very?5important?5message?5h@
  00139	48 8b 8d e0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00140	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QEAAXPEBDZZ ; ExampleAppConsole::AddLog
$LN8@Draw:

; 6585 :         ImGui::SameLine();

  00145	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0014d	0f 57 c0	 xorps	 xmm0, xmm0
  00150	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6586 :         if (ImGui::SmallButton("Add Debug Error")) { AddLog("[error] something went wrong"); }

  00155	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FGHPBLJE@Add?5Debug?5Error?$AA@
  0015c	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton
  00161	0f b6 c0	 movzx	 eax, al
  00164	85 c0		 test	 eax, eax
  00166	74 13		 je	 SHORT $LN9@Draw
  00168	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@KNPJMMPE@?$FLerror?$FN?5something?5went?5wrong?$AA@
  0016f	48 8b 8d e0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00176	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QEAAXPEBDZZ ; ExampleAppConsole::AddLog
$LN9@Draw:

; 6587 :         ImGui::SameLine();

  0017b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00183	0f 57 c0	 xorps	 xmm0, xmm0
  00186	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6588 :         if (ImGui::SmallButton("Clear"))           { ClearLog(); }

  0018b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05MDNHABIA@Clear?$AA@
  00192	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton
  00197	0f b6 c0	 movzx	 eax, al
  0019a	85 c0		 test	 eax, eax
  0019c	74 0c		 je	 SHORT $LN10@Draw
  0019e	48 8b 8d e0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a5	e8 00 00 00 00	 call	 ?ClearLog@ExampleAppConsole@@QEAAXXZ ; ExampleAppConsole::ClearLog
$LN10@Draw:

; 6589 :         ImGui::SameLine();

  001aa	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  001b2	0f 57 c0	 xorps	 xmm0, xmm0
  001b5	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6590 :         bool copy_to_clipboard = ImGui::SmallButton("Copy");

  001ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04OPMHGHMB@Copy?$AA@
  001c1	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton
  001c6	88 45 04	 mov	 BYTE PTR copy_to_clipboard$[rbp], al

; 6591 :         //static float t = 0.0f; if (ImGui::GetTime() - t > 0.02f) { t = ImGui::GetTime(); AddLog("Spam %f", t); }
; 6592 : 
; 6593 :         ImGui::Separator();

  001c9	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 6594 : 
; 6595 :         // Options menu
; 6596 :         if (ImGui::BeginPopup("Options"))

  001ce	33 d2		 xor	 edx, edx
  001d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07KHIHFBFN@Options?$AA@
  001d7	e8 00 00 00 00	 call	 ?BeginPopup@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopup
  001dc	0f b6 c0	 movzx	 eax, al
  001df	85 c0		 test	 eax, eax
  001e1	74 21		 je	 SHORT $LN11@Draw

; 6597 :         {
; 6598 :             ImGui::Checkbox("Auto-scroll", &AutoScroll);

  001e3	48 8b 85 e0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001ea	48 05 50 02 00
	00		 add	 rax, 592		; 00000250H
  001f0	48 8b d0	 mov	 rdx, rax
  001f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@IFKANFPJ@Auto?9scroll?$AA@
  001fa	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 6599 :             ImGui::EndPopup();

  001ff	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN11@Draw:

; 6600 :         }
; 6601 : 
; 6602 :         // Options, Filter
; 6603 :         if (ImGui::Button("Options"))

  00204	0f 57 d2	 xorps	 xmm2, xmm2
  00207	0f 57 c9	 xorps	 xmm1, xmm1
  0020a	48 8d 8d d4 02
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00211	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00216	48 8b d0	 mov	 rdx, rax
  00219	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07KHIHFBFN@Options?$AA@
  00220	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00225	0f b6 c0	 movzx	 eax, al
  00228	85 c0		 test	 eax, eax
  0022a	74 0e		 je	 SHORT $LN12@Draw

; 6604 :             ImGui::OpenPopup("Options");

  0022c	33 d2		 xor	 edx, edx
  0022e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07KHIHFBFN@Options?$AA@
  00235	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPEBDH@Z ; ImGui::OpenPopup
$LN12@Draw:

; 6605 :         ImGui::SameLine();

  0023a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00242	0f 57 c0	 xorps	 xmm0, xmm0
  00245	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6606 :         Filter.Draw("Filter (\"incl,-excl\") (\"error\")", 180);

  0024a	48 8b 85 e0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00251	48 05 38 01 00
	00		 add	 rax, 312		; 00000138H
  00257	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43340000
  0025f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@HIABFBKB@Filter?5?$CI?$CCincl?0?9excl?$CC?$CJ?5?$CI?$CCerror?$CC?$CJ?$AA@
  00266	48 8b c8	 mov	 rcx, rax
  00269	e8 00 00 00 00	 call	 ?Draw@ImGuiTextFilter@@QEAA_NPEBDM@Z ; ImGuiTextFilter::Draw

; 6607 :         ImGui::Separator();

  0026e	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 6608 : 
; 6609 :         // Reserve enough left-over height for 1 separator + 1 input text
; 6610 :         const float footer_height_to_reserve = ImGui::GetStyle().ItemSpacing.y + ImGui::GetFrameHeightWithSpacing();

  00273	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  00278	48 89 85 a8 03
	00 00		 mov	 QWORD PTR tv177[rbp], rax
  0027f	e8 00 00 00 00	 call	 ?GetFrameHeightWithSpacing@ImGui@@YAMXZ ; ImGui::GetFrameHeightWithSpacing
  00284	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR tv177[rbp]
  0028b	f3 0f 10 48 50	 movss	 xmm1, DWORD PTR [rax+80]
  00290	f3 0f 58 c8	 addss	 xmm1, xmm0
  00294	0f 28 c1	 movaps	 xmm0, xmm1
  00297	f3 0f 11 45 24	 movss	 DWORD PTR footer_height_to_reserve$[rbp], xmm0

; 6611 :         if (ImGui::BeginChild("ScrollingRegion", ImVec2(0, -footer_height_to_reserve), false, ImGuiWindowFlags_HorizontalScrollbar))

  0029c	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR footer_height_to_reserve$[rbp]
  002a1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002a8	0f 28 d0	 movaps	 xmm2, xmm0
  002ab	0f 57 c9	 xorps	 xmm1, xmm1
  002ae	48 8d 8d f4 02
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  002b5	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  002ba	41 b9 00 08 00
	00		 mov	 r9d, 2048		; 00000800H
  002c0	45 33 c0	 xor	 r8d, r8d
  002c3	48 8b d0	 mov	 rdx, rax
  002c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@KOEFNJOK@ScrollingRegion?$AA@
  002cd	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z ; ImGui::BeginChild
  002d2	0f b6 c0	 movzx	 eax, al
  002d5	85 c0		 test	 eax, eax
  002d7	0f 84 8a 02 00
	00		 je	 $LN13@Draw

; 6612 :         {
; 6613 :             if (ImGui::BeginPopupContextWindow())

  002dd	ba 01 00 00 00	 mov	 edx, 1
  002e2	33 c9		 xor	 ecx, ecx
  002e4	e8 00 00 00 00	 call	 ?BeginPopupContextWindow@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopupContextWindow
  002e9	0f b6 c0	 movzx	 eax, al
  002ec	85 c0		 test	 eax, eax
  002ee	74 3e		 je	 SHORT $LN14@Draw

; 6614 :             {
; 6615 :                 if (ImGui::Selectable("Clear")) ClearLog();

  002f0	0f 57 d2	 xorps	 xmm2, xmm2
  002f3	0f 57 c9	 xorps	 xmm1, xmm1
  002f6	48 8d 8d 14 03
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  002fd	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00302	4c 8b c8	 mov	 r9, rax
  00305	45 33 c0	 xor	 r8d, r8d
  00308	33 d2		 xor	 edx, edx
  0030a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05MDNHABIA@Clear?$AA@
  00311	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
  00316	0f b6 c0	 movzx	 eax, al
  00319	85 c0		 test	 eax, eax
  0031b	74 0c		 je	 SHORT $LN15@Draw
  0031d	48 8b 8d e0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00324	e8 00 00 00 00	 call	 ?ClearLog@ExampleAppConsole@@QEAAXXZ ; ExampleAppConsole::ClearLog
$LN15@Draw:

; 6616 :                 ImGui::EndPopup();

  00329	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN14@Draw:

; 6617 :             }
; 6618 : 
; 6619 :             // Display every line as a separate entry so we can change their color or add custom widgets.
; 6620 :             // If you only want raw text you can use ImGui::TextUnformatted(log.begin(), log.end());
; 6621 :             // NB- if you have thousands of entries this approach may be too inefficient and may require user-side clipping
; 6622 :             // to only process visible items. The clipper will automatically measure the height of your first item and then
; 6623 :             // "seek" to display only items in the visible area.
; 6624 :             // To use the clipper we can replace your standard loop:
; 6625 :             //      for (int i = 0; i < Items.Size; i++)
; 6626 :             //   With:
; 6627 :             //      ImGuiListClipper clipper;
; 6628 :             //      clipper.Begin(Items.Size);
; 6629 :             //      while (clipper.Step())
; 6630 :             //         for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)
; 6631 :             // - That your items are evenly spaced (same height)
; 6632 :             // - That you have cheap random access to your elements (you can access them given their index,
; 6633 :             //   without processing all the ones before)
; 6634 :             // You cannot this code as-is if a filter is active because it breaks the 'cheap random-access' property.
; 6635 :             // We would need random-access on the post-filtered list.
; 6636 :             // A typical application wanting coarse clipping and filtering may want to pre-compute an array of indices
; 6637 :             // or offsets of items that passed the filtering test, recomputing this array when user changes the filter,
; 6638 :             // and appending newly elements as they are inserted. This is left as a task to the user until we can manage
; 6639 :             // to improve this example code!
; 6640 :             // If your items are of variable height:
; 6641 :             // - Split them into same height items would be simpler and facilitate random-seeking into your list.
; 6642 :             // - Consider using manual call to IsRectVisible() and skipping extraneous decoration from your items.
; 6643 :             ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(4, 1)); // Tighten spacing

  0032e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00336	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40800000
  0033e	48 8d 8d 34 03
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  00345	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0034a	48 8b d0	 mov	 rdx, rax
  0034d	b9 0e 00 00 00	 mov	 ecx, 14
  00352	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z ; ImGui::PushStyleVar

; 6644 :             if (copy_to_clipboard)

  00357	0f b6 45 04	 movzx	 eax, BYTE PTR copy_to_clipboard$[rbp]
  0035b	85 c0		 test	 eax, eax
  0035d	74 0a		 je	 SHORT $LN16@Draw

; 6645 :                 ImGui::LogToClipboard();

  0035f	b9 ff ff ff ff	 mov	 ecx, -1
  00364	e8 00 00 00 00	 call	 ?LogToClipboard@ImGui@@YAXH@Z ; ImGui::LogToClipboard
$LN16@Draw:

; 6646 :             for (int i = 0; i < Items.Size; i++)

  00369	c7 45 44 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  00370	eb 08		 jmp	 SHORT $LN4@Draw
$LN2@Draw:
  00372	8b 45 44	 mov	 eax, DWORD PTR i$4[rbp]
  00375	ff c0		 inc	 eax
  00377	89 45 44	 mov	 DWORD PTR i$4[rbp], eax
$LN4@Draw:
  0037a	48 8b 85 e0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00381	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00387	39 45 44	 cmp	 DWORD PTR i$4[rbp], eax
  0038a	0f 8d 62 01 00
	00		 jge	 $LN3@Draw

; 6647 :             {
; 6648 :                 const char* item = Items[i];

  00390	48 8b 85 e0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00397	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  0039d	8b 55 44	 mov	 edx, DWORD PTR i$4[rbp]
  003a0	48 8b c8	 mov	 rcx, rax
  003a3	e8 00 00 00 00	 call	 ??A?$ImVector@PEAD@@QEAAAEAPEADH@Z ; ImVector<char * __ptr64>::operator[]
  003a8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003ab	48 89 45 68	 mov	 QWORD PTR item$5[rbp], rax

; 6649 :                 if (!Filter.PassFilter(item))

  003af	48 8b 85 e0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  003b6	48 05 38 01 00
	00		 add	 rax, 312		; 00000138H
  003bc	45 33 c0	 xor	 r8d, r8d
  003bf	48 8b 55 68	 mov	 rdx, QWORD PTR item$5[rbp]
  003c3	48 8b c8	 mov	 rcx, rax
  003c6	e8 00 00 00 00	 call	 ?PassFilter@ImGuiTextFilter@@QEBA_NPEBD0@Z ; ImGuiTextFilter::PassFilter
  003cb	0f b6 c0	 movzx	 eax, al
  003ce	85 c0		 test	 eax, eax
  003d0	75 02		 jne	 SHORT $LN17@Draw

; 6650 :                     continue;

  003d2	eb 9e		 jmp	 SHORT $LN2@Draw
$LN17@Draw:

; 6651 : 
; 6652 :                 // Normally you would store more information in your item than just a string.
; 6653 :                 // (e.g. make Items[] an array of structure, store color/type etc.)
; 6654 :                 ImVec4 color;

  003d4	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR color$6[rbp]
  003db	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@XZ	; ImVec4::ImVec4

; 6655 :                 bool has_color = false;

  003e0	c6 85 b4 00 00
	00 00		 mov	 BYTE PTR has_color$7[rbp], 0

; 6656 :                 if (strstr(item, "[error]")) { color = ImVec4(1.0f, 0.4f, 0.4f, 1.0f); has_color = true; }

  003e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07LFMCMLFD@?$FLerror?$FN?$AA@
  003ee	48 8b 4d 68	 mov	 rcx, QWORD PTR item$5[rbp]
  003f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strstr
  003f8	48 85 c0	 test	 rax, rax
  003fb	74 4f		 je	 SHORT $LN18@Draw
  003fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00405	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0040b	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3ecccccd
  00413	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ecccccd
  0041b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00423	48 8d 8d 54 03
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  0042a	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0042f	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR color$6[rbp]
  00436	48 8b f9	 mov	 rdi, rcx
  00439	48 8b f0	 mov	 rsi, rax
  0043c	b9 10 00 00 00	 mov	 ecx, 16
  00441	f3 a4		 rep movsb
  00443	c6 85 b4 00 00
	00 01		 mov	 BYTE PTR has_color$7[rbp], 1
  0044a	eb 68		 jmp	 SHORT $LN19@Draw
$LN18@Draw:

; 6657 :                 else if (strncmp(item, "# ", 2) == 0) { color = ImVec4(1.0f, 0.8f, 0.6f, 1.0f); has_color = true; }

  0044c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00452	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02KPDBPKPG@?$CD?5?$AA@
  00459	48 8b 4d 68	 mov	 rcx, QWORD PTR item$5[rbp]
  0045d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncmp
  00463	85 c0		 test	 eax, eax
  00465	75 4d		 jne	 SHORT $LN20@Draw
  00467	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0046f	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00475	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f19999a
  0047d	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f4ccccd
  00485	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0048d	48 8d 8d 84 03
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  00494	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00499	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR color$6[rbp]
  004a0	48 8b f9	 mov	 rdi, rcx
  004a3	48 8b f0	 mov	 rsi, rax
  004a6	b9 10 00 00 00	 mov	 ecx, 16
  004ab	f3 a4		 rep movsb
  004ad	c6 85 b4 00 00
	00 01		 mov	 BYTE PTR has_color$7[rbp], 1
$LN20@Draw:
$LN19@Draw:

; 6658 :                 if (has_color)

  004b4	0f b6 85 b4 00
	00 00		 movzx	 eax, BYTE PTR has_color$7[rbp]
  004bb	85 c0		 test	 eax, eax
  004bd	74 0e		 je	 SHORT $LN21@Draw

; 6659 :                     ImGui::PushStyleColor(ImGuiCol_Text, color);

  004bf	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR color$6[rbp]
  004c6	33 c9		 xor	 ecx, ecx
  004c8	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor
$LN21@Draw:

; 6660 :                 ImGui::TextUnformatted(item);

  004cd	33 d2		 xor	 edx, edx
  004cf	48 8b 4d 68	 mov	 rcx, QWORD PTR item$5[rbp]
  004d3	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted

; 6661 :                 if (has_color)

  004d8	0f b6 85 b4 00
	00 00		 movzx	 eax, BYTE PTR has_color$7[rbp]
  004df	85 c0		 test	 eax, eax
  004e1	74 0a		 je	 SHORT $LN22@Draw

; 6662 :                     ImGui::PopStyleColor();

  004e3	b9 01 00 00 00	 mov	 ecx, 1
  004e8	e8 00 00 00 00	 call	 ?PopStyleColor@ImGui@@YAXH@Z ; ImGui::PopStyleColor
$LN22@Draw:

; 6663 :             }

  004ed	e9 80 fe ff ff	 jmp	 $LN2@Draw
$LN3@Draw:

; 6664 :             if (copy_to_clipboard)

  004f2	0f b6 45 04	 movzx	 eax, BYTE PTR copy_to_clipboard$[rbp]
  004f6	85 c0		 test	 eax, eax
  004f8	74 05		 je	 SHORT $LN23@Draw

; 6665 :                 ImGui::LogFinish();

  004fa	e8 00 00 00 00	 call	 ?LogFinish@ImGui@@YAXXZ	; ImGui::LogFinish
$LN23@Draw:

; 6666 : 
; 6667 :             // Keep up at the bottom of the scroll region if we were already at the bottom at the beginning of the frame.
; 6668 :             // Using a scrollbar or mouse-wheel will take away from the bottom edge.
; 6669 :             if (ScrollToBottom || (AutoScroll && ImGui::GetScrollY() >= ImGui::GetScrollMaxY()))

  004ff	48 8b 85 e0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00506	0f b6 80 51 02
	00 00		 movzx	 eax, BYTE PTR [rax+593]
  0050d	85 c0		 test	 eax, eax
  0050f	75 31		 jne	 SHORT $LN25@Draw
  00511	48 8b 85 e0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00518	0f b6 80 50 02
	00 00		 movzx	 eax, BYTE PTR [rax+592]
  0051f	85 c0		 test	 eax, eax
  00521	74 2c		 je	 SHORT $LN24@Draw
  00523	e8 00 00 00 00	 call	 ?GetScrollY@ImGui@@YAMXZ ; ImGui::GetScrollY
  00528	f3 0f 11 85 a4
	03 00 00	 movss	 DWORD PTR tv278[rbp], xmm0
  00530	e8 00 00 00 00	 call	 ?GetScrollMaxY@ImGui@@YAMXZ ; ImGui::GetScrollMaxY
  00535	f3 0f 10 8d a4
	03 00 00	 movss	 xmm1, DWORD PTR tv278[rbp]
  0053d	0f 2f c8	 comiss	 xmm1, xmm0
  00540	72 0d		 jb	 SHORT $LN24@Draw
$LN25@Draw:

; 6670 :                 ImGui::SetScrollHereY(1.0f);

  00542	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0054a	e8 00 00 00 00	 call	 ?SetScrollHereY@ImGui@@YAXM@Z ; ImGui::SetScrollHereY
$LN24@Draw:

; 6671 :             ScrollToBottom = false;

  0054f	48 8b 85 e0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00556	c6 80 51 02 00
	00 00		 mov	 BYTE PTR [rax+593], 0

; 6672 : 
; 6673 :             ImGui::PopStyleVar();

  0055d	b9 01 00 00 00	 mov	 ecx, 1
  00562	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
$LN13@Draw:

; 6674 :         }
; 6675 :         ImGui::EndChild();

  00567	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 6676 :         ImGui::Separator();

  0056c	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 6677 : 
; 6678 :         // Command-line
; 6679 :         bool reclaim_focus = false;

  00571	c6 85 d4 00 00
	00 00		 mov	 BYTE PTR reclaim_focus$[rbp], 0

; 6680 :         ImGuiInputTextFlags input_text_flags = ImGuiInputTextFlags_EnterReturnsTrue | ImGuiInputTextFlags_EscapeClearsAll | ImGuiInputTextFlags_CallbackCompletion | ImGuiInputTextFlags_CallbackHistory;

  00578	c7 85 f4 00 00
	00 e0 00 10 00	 mov	 DWORD PTR input_text_flags$[rbp], 1048800 ; 001000e0H

; 6681 :         if (ImGui::InputText("Input", InputBuf, IM_ARRAYSIZE(InputBuf), input_text_flags, &TextEditCallbackStub, (void*)this))

  00582	48 8b 85 e0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00589	48 8b 8d e0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00590	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00595	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?TextEditCallbackStub@ExampleAppConsole@@SAHPEAUImGuiInputTextCallbackData@@@Z ; ExampleAppConsole::TextEditCallbackStub
  0059c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  005a1	44 8b 8d f4 00
	00 00		 mov	 r9d, DWORD PTR input_text_flags$[rbp]
  005a8	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  005ae	48 8b d0	 mov	 rdx, rax
  005b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05DCDOHKAB@Input?$AA@
  005b8	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText
  005bd	0f b6 c0	 movzx	 eax, al
  005c0	85 c0		 test	 eax, eax
  005c2	74 5f		 je	 SHORT $LN26@Draw

; 6682 :         {
; 6683 :             char* s = InputBuf;

  005c4	48 8b 85 e0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  005cb	48 89 85 18 01
	00 00		 mov	 QWORD PTR s$8[rbp], rax

; 6684 :             Strtrim(s);

  005d2	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR s$8[rbp]
  005d9	e8 00 00 00 00	 call	 ?Strtrim@ExampleAppConsole@@SAXPEAD@Z ; ExampleAppConsole::Strtrim

; 6685 :             if (s[0])

  005de	b8 01 00 00 00	 mov	 eax, 1
  005e3	48 6b c0 00	 imul	 rax, rax, 0
  005e7	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR s$8[rbp]
  005ee	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  005f2	85 c0		 test	 eax, eax
  005f4	74 13		 je	 SHORT $LN27@Draw

; 6686 :                 ExecCommand(s);

  005f6	48 8b 95 18 01
	00 00		 mov	 rdx, QWORD PTR s$8[rbp]
  005fd	48 8b 8d e0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00604	e8 00 00 00 00	 call	 ?ExecCommand@ExampleAppConsole@@QEAAXPEBD@Z ; ExampleAppConsole::ExecCommand
$LN27@Draw:

; 6687 :             strcpy(s, "");

  00609	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00610	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR s$8[rbp]
  00617	e8 00 00 00 00	 call	 strcpy

; 6688 :             reclaim_focus = true;

  0061c	c6 85 d4 00 00
	00 01		 mov	 BYTE PTR reclaim_focus$[rbp], 1
$LN26@Draw:

; 6689 :         }
; 6690 : 
; 6691 :         // Auto-focus on window apparition
; 6692 :         ImGui::SetItemDefaultFocus();

  00623	e8 00 00 00 00	 call	 ?SetItemDefaultFocus@ImGui@@YAXXZ ; ImGui::SetItemDefaultFocus

; 6693 :         if (reclaim_focus)

  00628	0f b6 85 d4 00
	00 00		 movzx	 eax, BYTE PTR reclaim_focus$[rbp]
  0062f	85 c0		 test	 eax, eax
  00631	74 0a		 je	 SHORT $LN28@Draw

; 6694 :             ImGui::SetKeyboardFocusHere(-1); // Auto focus previous widget

  00633	b9 ff ff ff ff	 mov	 ecx, -1
  00638	e8 00 00 00 00	 call	 ?SetKeyboardFocusHere@ImGui@@YAXH@Z ; ImGui::SetKeyboardFocusHere
$LN28@Draw:

; 6695 : 
; 6696 :         ImGui::End();

  0063d	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN1@Draw:

; 6697 :     }

  00642	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00646	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?Draw@ExampleAppConsole@@QEAAXPEBDPEA_N@Z$rtcFrameData
  0064d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00652	48 8b 8d b0 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00659	48 33 cd	 xor	 rcx, rbp
  0065c	e8 00 00 00 00	 call	 __security_check_cookie
  00661	48 8d a5 c0 03
	00 00		 lea	 rsp, QWORD PTR [rbp+960]
  00668	5f		 pop	 rdi
  00669	5e		 pop	 rsi
  0066a	5d		 pop	 rbp
  0066b	c3		 ret	 0
?Draw@ExampleAppConsole@@QEAAXPEBDPEA_N@Z ENDP		; ExampleAppConsole::Draw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?AddLog@ExampleAppConsole@@QEAAXPEBDZZ
_TEXT	SEGMENT
buf$ = 16
args$ = 1064
$T5 = 1672
$T6 = 1704
__$ArrayPad$ = 1720
this$ = 1760
fmt$ = 1768
?AddLog@ExampleAppConsole@@QEAAXPEBDZZ PROC		; ExampleAppConsole::AddLog, COMDAT

; 6547 :     {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 06
	00 00		 sub	 rsp, 1768		; 000006e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 ba 01 00 00	 mov	 ecx, 442		; 000001baH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 08
	07 00 00	 mov	 rcx, QWORD PTR [rsp+1800]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 b8 06
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 6548 :         // FIXME-OPT
; 6549 :         char buf[1024];
; 6550 :         va_list args;
; 6551 :         va_start(args, fmt);

  0004a	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@PEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64>
  0004f	48 8d 85 f0 06
	00 00		 lea	 rax, QWORD PTR fmt$[rbp+8]
  00056	48 89 85 28 04
	00 00		 mov	 QWORD PTR args$[rbp], rax

; 6552 :         vsnprintf(buf, IM_ARRAYSIZE(buf), fmt, args);

  0005d	4c 8b 8d 28 04
	00 00		 mov	 r9, QWORD PTR args$[rbp]
  00064	4c 8b 85 e8 06
	00 00		 mov	 r8, QWORD PTR fmt$[rbp]
  0006b	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  00070	48 8d 4d 10	 lea	 rcx, QWORD PTR buf$[rbp]
  00074	e8 00 00 00 00	 call	 _vsnprintf

; 6553 :         buf[IM_ARRAYSIZE(buf)-1] = 0;

  00079	b8 01 00 00 00	 mov	 eax, 1
  0007e	48 69 c0 ff 03
	00 00		 imul	 rax, rax, 1023		; 000003ffH
  00085	48 89 85 88 06
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  0008c	48 81 bd 88 06
	00 00 00 04 00
	00		 cmp	 QWORD PTR $T5[rbp], 1024 ; 00000400H
  00097	73 02		 jae	 SHORT $LN3@AddLog
  00099	eb 05		 jmp	 SHORT $LN4@AddLog
$LN3@AddLog:
  0009b	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN4@AddLog:
  000a0	48 8b 85 88 06
	00 00		 mov	 rax, QWORD PTR $T5[rbp]
  000a7	c6 44 05 10 00	 mov	 BYTE PTR buf$[rbp+rax], 0

; 6554 :         va_end(args);

  000ac	48 c7 85 28 04
	00 00 00 00 00
	00		 mov	 QWORD PTR args$[rbp], 0

; 6555 :         Items.push_back(Strdup(buf));

  000b7	48 8d 4d 10	 lea	 rcx, QWORD PTR buf$[rbp]
  000bb	e8 00 00 00 00	 call	 ?Strdup@ExampleAppConsole@@SAPEADPEBD@Z ; ExampleAppConsole::Strdup
  000c0	48 89 85 a8 06
	00 00		 mov	 QWORD PTR $T6[rbp], rax
  000c7	48 8b 85 e0 06
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ce	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  000d4	48 8d 95 a8 06
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  000db	48 8b c8	 mov	 rcx, rax
  000de	e8 00 00 00 00	 call	 ?push_back@?$ImVector@PEAD@@QEAAXAEBQEAD@Z ; ImVector<char * __ptr64>::push_back
$LN2@AddLog:

; 6556 :     }

  000e3	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?AddLog@ExampleAppConsole@@QEAAXPEBDZZ$rtcFrameData
  000ee	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000f3	48 8b 8d b8 06
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000fa	48 33 cd	 xor	 rcx, rbp
  000fd	e8 00 00 00 00	 call	 __security_check_cookie
  00102	48 8d a5 c8 06
	00 00		 lea	 rsp, QWORD PTR [rbp+1736]
  00109	5f		 pop	 rdi
  0010a	5d		 pop	 rbp
  0010b	c3		 ret	 0
?AddLog@ExampleAppConsole@@QEAAXPEBDZZ ENDP		; ExampleAppConsole::AddLog
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ClearLog@ExampleAppConsole@@QEAAXXZ
_TEXT	SEGMENT
i$1 = 4
this$ = 256
?ClearLog@ExampleAppConsole@@QEAAXXZ PROC		; ExampleAppConsole::ClearLog, COMDAT

; 6540 :     {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 6541 :         for (int i = 0; i < Items.Size; i++)

  0002a	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$1[rbp], 0
  00031	eb 08		 jmp	 SHORT $LN4@ClearLog
$LN2@ClearLog:
  00033	8b 45 04	 mov	 eax, DWORD PTR i$1[rbp]
  00036	ff c0		 inc	 eax
  00038	89 45 04	 mov	 DWORD PTR i$1[rbp], eax
$LN4@ClearLog:
  0003b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00048	39 45 04	 cmp	 DWORD PTR i$1[rbp], eax
  0004b	7d 23		 jge	 SHORT $LN3@ClearLog

; 6542 :             free(Items[i]);

  0004d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00054	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  0005a	8b 55 04	 mov	 edx, DWORD PTR i$1[rbp]
  0005d	48 8b c8	 mov	 rcx, rax
  00060	e8 00 00 00 00	 call	 ??A?$ImVector@PEAD@@QEAAAEAPEADH@Z ; ImVector<char * __ptr64>::operator[]
  00065	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  0006e	eb c3		 jmp	 SHORT $LN2@ClearLog
$LN3@ClearLog:

; 6543 :         Items.clear();

  00070	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00077	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  0007d	48 8b c8	 mov	 rcx, rax
  00080	e8 00 00 00 00	 call	 ?clear@?$ImVector@PEAD@@QEAAXXZ ; ImVector<char * __ptr64>::clear

; 6544 :     }

  00085	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008c	5f		 pop	 rdi
  0008d	5d		 pop	 rbp
  0008e	c3		 ret	 0
?ClearLog@ExampleAppConsole@@QEAAXXZ ENDP		; ExampleAppConsole::ClearLog
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?Strtrim@ExampleAppConsole@@SAXPEAD@Z
_TEXT	SEGMENT
str_end$ = 8
s$ = 256
?Strtrim@ExampleAppConsole@@SAXPEAD@Z PROC		; ExampleAppConsole::Strtrim, COMDAT

; 6537 :     static void  Strtrim(char* s)                                { char* str_end = s + strlen(s); while (str_end > s && str_end[-1] == ' ') str_end--; *str_end = 0; }

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  00031	e8 00 00 00 00	 call	 strlen
  00036	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  0003d	48 03 c8	 add	 rcx, rax
  00040	48 8b c1	 mov	 rax, rcx
  00043	48 89 45 08	 mov	 QWORD PTR str_end$[rbp], rax
$LN2@Strtrim:
  00047	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR s$[rbp]
  0004e	48 39 45 08	 cmp	 QWORD PTR str_end$[rbp], rax
  00052	76 23		 jbe	 SHORT $LN3@Strtrim
  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	48 6b c0 ff	 imul	 rax, rax, -1
  0005d	48 8b 4d 08	 mov	 rcx, QWORD PTR str_end$[rbp]
  00061	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00065	83 f8 20	 cmp	 eax, 32			; 00000020H
  00068	75 0d		 jne	 SHORT $LN3@Strtrim
  0006a	48 8b 45 08	 mov	 rax, QWORD PTR str_end$[rbp]
  0006e	48 ff c8	 dec	 rax
  00071	48 89 45 08	 mov	 QWORD PTR str_end$[rbp], rax
  00075	eb d0		 jmp	 SHORT $LN2@Strtrim
$LN3@Strtrim:
  00077	48 8b 45 08	 mov	 rax, QWORD PTR str_end$[rbp]
  0007b	c6 00 00	 mov	 BYTE PTR [rax], 0
  0007e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00085	5f		 pop	 rdi
  00086	5d		 pop	 rbp
  00087	c3		 ret	 0
?Strtrim@ExampleAppConsole@@SAXPEAD@Z ENDP		; ExampleAppConsole::Strtrim
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?Strdup@ExampleAppConsole@@SAPEADPEBD@Z
_TEXT	SEGMENT
len$ = 8
buf$ = 40
s$ = 288
?Strdup@ExampleAppConsole@@SAPEADPEBD@Z PROC		; ExampleAppConsole::Strdup, COMDAT

; 6536 :     static char* Strdup(const char* s)                           { IM_ASSERT(s); size_t len = strlen(s) + 1; void* buf = malloc(len); IM_ASSERT(buf); return (char*)memcpy(buf, (const void*)s, len); }

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002a	48 83 bd 20 01
	00 00 00	 cmp	 QWORD PTR s$[rbp], 0
  00032	75 1c		 jne	 SHORT $LN3@Strdup
  00034	41 b8 88 19 00
	00		 mov	 r8d, 6536		; 00001988H
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@DPDGFNDC@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13KHDBCPJB@?$AAs?$AA?$AA@
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0004e	33 c0		 xor	 eax, eax
$LN3@Strdup:
  00050	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  00057	e8 00 00 00 00	 call	 strlen
  0005c	48 ff c0	 inc	 rax
  0005f	48 89 45 08	 mov	 QWORD PTR len$[rbp], rax
  00063	48 8b 4d 08	 mov	 rcx, QWORD PTR len$[rbp]
  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0006d	48 89 45 28	 mov	 QWORD PTR buf$[rbp], rax
  00071	48 83 7d 28 00	 cmp	 QWORD PTR buf$[rbp], 0
  00076	75 1c		 jne	 SHORT $LN4@Strdup
  00078	41 b8 88 19 00
	00		 mov	 r8d, 6536		; 00001988H
  0007e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@DPDGFNDC@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_17ENLBLDPN@?$AAb?$AAu?$AAf?$AA?$AA@
  0008c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00092	33 c0		 xor	 eax, eax
$LN4@Strdup:
  00094	4c 8b 45 08	 mov	 r8, QWORD PTR len$[rbp]
  00098	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR s$[rbp]
  0009f	48 8b 4d 28	 mov	 rcx, QWORD PTR buf$[rbp]
  000a3	e8 00 00 00 00	 call	 memcpy
  000a8	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000af	5f		 pop	 rdi
  000b0	5d		 pop	 rbp
  000b1	c3		 ret	 0
?Strdup@ExampleAppConsole@@SAPEADPEBD@Z ENDP		; ExampleAppConsole::Strdup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?Strnicmp@ExampleAppConsole@@SAHPEBD0H@Z
_TEXT	SEGMENT
d$ = 4
tv65 = 212
s1$ = 256
s2$ = 264
n$ = 272
?Strnicmp@ExampleAppConsole@@SAHPEBD0H@Z PROC		; ExampleAppConsole::Strnicmp, COMDAT

; 6535 :     static int   Strnicmp(const char* s1, const char* s2, int n) { int d = 0; while (n > 0 && (d = toupper(*s2) - toupper(*s1)) == 0 && *s1) { s1++; s2++; n--; } return d; }

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	c7 45 04 00 00
	00 00		 mov	 DWORD PTR d$[rbp], 0
$LN2@Strnicmp:
  0003b	83 bd 10 01 00
	00 00		 cmp	 DWORD PTR n$[rbp], 0
  00042	7e 7e		 jle	 SHORT $LN3@Strnicmp
  00044	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR s2$[rbp]
  0004b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0004e	8b c8		 mov	 ecx, eax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_toupper
  00056	89 85 d4 00 00
	00		 mov	 DWORD PTR tv65[rbp], eax
  0005c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR s1$[rbp]
  00063	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_toupper
  0006c	8b 8d d4 00 00
	00		 mov	 ecx, DWORD PTR tv65[rbp]
  00072	2b c8		 sub	 ecx, eax
  00074	8b c1		 mov	 eax, ecx
  00076	89 45 04	 mov	 DWORD PTR d$[rbp], eax
  00079	83 7d 04 00	 cmp	 DWORD PTR d$[rbp], 0
  0007d	75 43		 jne	 SHORT $LN3@Strnicmp
  0007f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR s1$[rbp]
  00086	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00089	85 c0		 test	 eax, eax
  0008b	74 35		 je	 SHORT $LN3@Strnicmp
  0008d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR s1$[rbp]
  00094	48 ff c0	 inc	 rax
  00097	48 89 85 00 01
	00 00		 mov	 QWORD PTR s1$[rbp], rax
  0009e	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR s2$[rbp]
  000a5	48 ff c0	 inc	 rax
  000a8	48 89 85 08 01
	00 00		 mov	 QWORD PTR s2$[rbp], rax
  000af	8b 85 10 01 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  000b5	ff c8		 dec	 eax
  000b7	89 85 10 01 00
	00		 mov	 DWORD PTR n$[rbp], eax
  000bd	e9 79 ff ff ff	 jmp	 $LN2@Strnicmp
$LN3@Strnicmp:
  000c2	8b 45 04	 mov	 eax, DWORD PTR d$[rbp]
  000c5	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000cc	5f		 pop	 rdi
  000cd	5d		 pop	 rbp
  000ce	c3		 ret	 0
?Strnicmp@ExampleAppConsole@@SAHPEBD0H@Z ENDP		; ExampleAppConsole::Strnicmp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?Stricmp@ExampleAppConsole@@SAHPEBD0@Z
_TEXT	SEGMENT
d$ = 4
tv64 = 212
s1$ = 256
s2$ = 264
?Stricmp@ExampleAppConsole@@SAHPEBD0@Z PROC		; ExampleAppConsole::Stricmp, COMDAT

; 6534 :     static int   Stricmp(const char* s1, const char* s2)         { int d; while ((d = toupper(*s2) - toupper(*s1)) == 0 && *s1) { s1++; s2++; } return d; }

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
$LN2@Stricmp:
  0002f	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR s2$[rbp]
  00036	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00039	8b c8		 mov	 ecx, eax
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_toupper
  00041	89 85 d4 00 00
	00		 mov	 DWORD PTR tv64[rbp], eax
  00047	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR s1$[rbp]
  0004e	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_toupper
  00057	8b 8d d4 00 00
	00		 mov	 ecx, DWORD PTR tv64[rbp]
  0005d	2b c8		 sub	 ecx, eax
  0005f	8b c1		 mov	 eax, ecx
  00061	89 45 04	 mov	 DWORD PTR d$[rbp], eax
  00064	83 7d 04 00	 cmp	 DWORD PTR d$[rbp], 0
  00068	75 32		 jne	 SHORT $LN3@Stricmp
  0006a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR s1$[rbp]
  00071	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00074	85 c0		 test	 eax, eax
  00076	74 24		 je	 SHORT $LN3@Stricmp
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR s1$[rbp]
  0007f	48 ff c0	 inc	 rax
  00082	48 89 85 00 01
	00 00		 mov	 QWORD PTR s1$[rbp], rax
  00089	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR s2$[rbp]
  00090	48 ff c0	 inc	 rax
  00093	48 89 85 08 01
	00 00		 mov	 QWORD PTR s2$[rbp], rax
  0009a	eb 93		 jmp	 SHORT $LN2@Stricmp
$LN3@Stricmp:
  0009c	8b 45 04	 mov	 eax, DWORD PTR d$[rbp]
  0009f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000a6	5f		 pop	 rdi
  000a7	5d		 pop	 rbp
  000a8	c3		 ret	 0
?Stricmp@ExampleAppConsole@@SAHPEBD0@Z ENDP		; ExampleAppConsole::Stricmp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ??1ExampleAppConsole@@QEAA@XZ
_TEXT	SEGMENT
i$1 = 4
$T2 = 232
this$ = 288
??1ExampleAppConsole@@QEAA@XZ PROC			; ExampleAppConsole::~ExampleAppConsole, COMDAT

; 6527 :     {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002a	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2

; 6528 :         ClearLog();

  00035	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ?ClearLog@ExampleAppConsole@@QEAAXXZ ; ExampleAppConsole::ClearLog
  00041	90		 npad	 1

; 6529 :         for (int i = 0; i < History.Size; i++)

  00042	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$1[rbp], 0
  00049	eb 08		 jmp	 SHORT $LN4@ExampleApp
$LN2@ExampleApp:
  0004b	8b 45 04	 mov	 eax, DWORD PTR i$1[rbp]
  0004e	ff c0		 inc	 eax
  00050	89 45 04	 mov	 DWORD PTR i$1[rbp], eax
$LN4@ExampleApp:
  00053	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	8b 80 20 01 00
	00		 mov	 eax, DWORD PTR [rax+288]
  00060	39 45 04	 cmp	 DWORD PTR i$1[rbp], eax
  00063	7d 25		 jge	 SHORT $LN3@ExampleApp

; 6530 :             free(History[i]);

  00065	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006c	48 05 20 01 00
	00		 add	 rax, 288		; 00000120H
  00072	8b 55 04	 mov	 edx, DWORD PTR i$1[rbp]
  00075	48 8b c8	 mov	 rcx, rax
  00078	e8 00 00 00 00	 call	 ??A?$ImVector@PEAD@@QEAAAEAPEADH@Z ; ImVector<char * __ptr64>::operator[]
  0007d	90		 npad	 1
  0007e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  00087	90		 npad	 1
  00088	eb c1		 jmp	 SHORT $LN2@ExampleApp
$LN3@ExampleApp:

; 6531 :     }

  0008a	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00091	48 05 38 01 00
	00		 add	 rax, 312		; 00000138H
  00097	48 8b c8	 mov	 rcx, rax
  0009a	e8 00 00 00 00	 call	 ??1ImGuiTextFilter@@QEAA@XZ
  0009f	90		 npad	 1
  000a0	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a7	48 05 20 01 00
	00		 add	 rax, 288		; 00000120H
  000ad	48 8b c8	 mov	 rcx, rax
  000b0	e8 00 00 00 00	 call	 ??1?$ImVector@PEAD@@QEAA@XZ ; ImVector<char * __ptr64>::~ImVector<char * __ptr64>
  000b5	90		 npad	 1
  000b6	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bd	48 05 10 01 00
	00		 add	 rax, 272		; 00000110H
  000c3	48 8b c8	 mov	 rcx, rax
  000c6	e8 00 00 00 00	 call	 ??1?$ImVector@PEBD@@QEAA@XZ ; ImVector<char const * __ptr64>::~ImVector<char const * __ptr64>
  000cb	90		 npad	 1
  000cc	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d3	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  000d9	48 8b c8	 mov	 rcx, rax
  000dc	e8 00 00 00 00	 call	 ??1?$ImVector@PEAD@@QEAA@XZ ; ImVector<char * __ptr64>::~ImVector<char * __ptr64>
  000e1	90		 npad	 1
  000e2	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000e9	5f		 pop	 rdi
  000ea	5d		 pop	 rbp
  000eb	c3		 ret	 0
??1ExampleAppConsole@@QEAA@XZ ENDP			; ExampleAppConsole::~ExampleAppConsole
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ??0ExampleAppConsole@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
$T2 = 232
$T3 = 264
$T4 = 296
$T5 = 328
this$ = 384
??0ExampleAppConsole@@QEAA@XZ PROC			; ExampleAppConsole::ExampleAppConsole, COMDAT

; 6510 :     ExampleAppConsole()

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  0002a	48 c7 85 48 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T5[rbp], -2

; 6511 :     {

  00035	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00042	48 8b c8	 mov	 rcx, rax
  00045	e8 00 00 00 00	 call	 ??0?$ImVector@PEAD@@QEAA@XZ ; ImVector<char * __ptr64>::ImVector<char * __ptr64>
  0004a	90		 npad	 1
  0004b	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00052	48 05 10 01 00
	00		 add	 rax, 272		; 00000110H
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 ??0?$ImVector@PEBD@@QEAA@XZ ; ImVector<char const * __ptr64>::ImVector<char const * __ptr64>
  00060	90		 npad	 1
  00061	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00068	48 05 20 01 00
	00		 add	 rax, 288		; 00000120H
  0006e	48 8b c8	 mov	 rcx, rax
  00071	e8 00 00 00 00	 call	 ??0?$ImVector@PEAD@@QEAA@XZ ; ImVector<char * __ptr64>::ImVector<char * __ptr64>
  00076	90		 npad	 1
  00077	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007e	48 05 38 01 00
	00		 add	 rax, 312		; 00000138H
  00084	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0008b	48 8b c8	 mov	 rcx, rax
  0008e	e8 00 00 00 00	 call	 ??0ImGuiTextFilter@@QEAA@PEBD@Z ; ImGuiTextFilter::ImGuiTextFilter
  00093	90		 npad	 1
$LN4@ExampleApp:

; 6512 :         IMGUI_DEMO_MARKER("Examples/Console");

  00094	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0009c	74 20		 je	 SHORT $LN5@ExampleApp
  0009e	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  000a5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@GJBEJJEP@Examples?1Console?$AA@
  000ac	ba 70 19 00 00	 mov	 edx, 6512		; 00001970H
  000b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  000b8	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN5@ExampleApp:
  000be	33 c0		 xor	 eax, eax
  000c0	85 c0		 test	 eax, eax
  000c2	75 d0		 jne	 SHORT $LN4@ExampleApp

; 6513 :         ClearLog();

  000c4	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000cb	e8 00 00 00 00	 call	 ?ClearLog@ExampleAppConsole@@QEAAXXZ ; ExampleAppConsole::ClearLog

; 6514 :         memset(InputBuf, 0, sizeof(InputBuf));

  000d0	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d7	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  000dd	33 d2		 xor	 edx, edx
  000df	48 8b c8	 mov	 rcx, rax
  000e2	e8 00 00 00 00	 call	 memset

; 6515 :         HistoryPos = -1;

  000e7	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ee	c7 80 30 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+304], -1

; 6516 : 
; 6517 :         // "CLASSIFY" is here to provide the test case where "C"+[tab] completes to "CL" and display multiple matches.
; 6518 :         Commands.push_back("HELP");

  000f8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04DOKPJKJF@HELP?$AA@
  000ff	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00106	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0010d	48 05 10 01 00
	00		 add	 rax, 272		; 00000110H
  00113	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0011a	48 8b c8	 mov	 rcx, rax
  0011d	e8 00 00 00 00	 call	 ?push_back@?$ImVector@PEBD@@QEAAXAEBQEBD@Z ; ImVector<char const * __ptr64>::push_back

; 6519 :         Commands.push_back("HISTORY");

  00122	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07DBIJIOJO@HISTORY?$AA@
  00129	48 89 85 e8 00
	00 00		 mov	 QWORD PTR $T2[rbp], rax
  00130	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00137	48 05 10 01 00
	00		 add	 rax, 272		; 00000110H
  0013d	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  00144	48 8b c8	 mov	 rcx, rax
  00147	e8 00 00 00 00	 call	 ?push_back@?$ImVector@PEBD@@QEAAXAEBQEBD@Z ; ImVector<char const * __ptr64>::push_back

; 6520 :         Commands.push_back("CLEAR");

  0014c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05PONODPI@CLEAR?$AA@
  00153	48 89 85 08 01
	00 00		 mov	 QWORD PTR $T3[rbp], rax
  0015a	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00161	48 05 10 01 00
	00		 add	 rax, 272		; 00000110H
  00167	48 8d 95 08 01
	00 00		 lea	 rdx, QWORD PTR $T3[rbp]
  0016e	48 8b c8	 mov	 rcx, rax
  00171	e8 00 00 00 00	 call	 ?push_back@?$ImVector@PEBD@@QEAAXAEBQEBD@Z ; ImVector<char const * __ptr64>::push_back

; 6521 :         Commands.push_back("CLASSIFY");

  00176	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08GOHMLCGG@CLASSIFY?$AA@
  0017d	48 89 85 28 01
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  00184	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0018b	48 05 10 01 00
	00		 add	 rax, 272		; 00000110H
  00191	48 8d 95 28 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00198	48 8b c8	 mov	 rcx, rax
  0019b	e8 00 00 00 00	 call	 ?push_back@?$ImVector@PEBD@@QEAAXAEBQEBD@Z ; ImVector<char const * __ptr64>::push_back

; 6522 :         AutoScroll = true;

  001a0	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001a7	c6 80 50 02 00
	00 01		 mov	 BYTE PTR [rax+592], 1

; 6523 :         ScrollToBottom = false;

  001ae	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001b5	c6 80 51 02 00
	00 00		 mov	 BYTE PTR [rax+593], 0

; 6524 :         AddLog("Welcome to Dear ImGui!");

  001bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@HICLALOG@Welcome?5to?5Dear?5ImGui?$CB?$AA@
  001c3	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ca	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QEAAXPEBDZZ ; ExampleAppConsole::AddLog
  001cf	90		 npad	 1

; 6525 :     }

  001d0	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001d7	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  001de	5f		 pop	 rdi
  001df	5d		 pop	 rbp
  001e0	c3		 ret	 0
??0ExampleAppConsole@@QEAA@XZ ENDP			; ExampleAppConsole::ExampleAppConsole
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
$T2 = 232
$T3 = 264
$T4 = 296
$T5 = 328
this$ = 384
?dtor$0@?0???0ExampleAppConsole@@QEAA@XZ@4HA PROC	; `ExampleAppConsole::ExampleAppConsole'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 81 c1 00 01
	00 00		 add	 rcx, 256		; 00000100H
  00022	e8 00 00 00 00	 call	 ??1?$ImVector@PEAD@@QEAA@XZ ; ImVector<char * __ptr64>::~ImVector<char * __ptr64>
  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	5f		 pop	 rdi
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
?dtor$0@?0???0ExampleAppConsole@@QEAA@XZ@4HA ENDP	; `ExampleAppConsole::ExampleAppConsole'::`1'::dtor$0
$T1 = 200
$T2 = 232
$T3 = 264
$T4 = 296
$T5 = 328
this$ = 384
?dtor$1@?0???0ExampleAppConsole@@QEAA@XZ@4HA PROC	; `ExampleAppConsole::ExampleAppConsole'::`1'::dtor$1
  0002e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00033	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00038	55		 push	 rbp
  00039	57		 push	 rdi
  0003a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0003e	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00042	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	48 81 c1 10 01
	00 00		 add	 rcx, 272		; 00000110H
  00050	e8 00 00 00 00	 call	 ??1?$ImVector@PEBD@@QEAA@XZ ; ImVector<char const * __ptr64>::~ImVector<char const * __ptr64>
  00055	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00059	5f		 pop	 rdi
  0005a	5d		 pop	 rbp
  0005b	c3		 ret	 0
?dtor$1@?0???0ExampleAppConsole@@QEAA@XZ@4HA ENDP	; `ExampleAppConsole::ExampleAppConsole'::`1'::dtor$1
$T1 = 200
$T2 = 232
$T3 = 264
$T4 = 296
$T5 = 328
this$ = 384
?dtor$2@?0???0ExampleAppConsole@@QEAA@XZ@4HA PROC	; `ExampleAppConsole::ExampleAppConsole'::`1'::dtor$2
  0005c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00061	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00066	55		 push	 rbp
  00067	57		 push	 rdi
  00068	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0006c	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00070	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00077	48 81 c1 20 01
	00 00		 add	 rcx, 288		; 00000120H
  0007e	e8 00 00 00 00	 call	 ??1?$ImVector@PEAD@@QEAA@XZ ; ImVector<char * __ptr64>::~ImVector<char * __ptr64>
  00083	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00087	5f		 pop	 rdi
  00088	5d		 pop	 rbp
  00089	c3		 ret	 0
?dtor$2@?0???0ExampleAppConsole@@QEAA@XZ@4HA ENDP	; `ExampleAppConsole::ExampleAppConsole'::`1'::dtor$2
$T1 = 200
$T2 = 232
$T3 = 264
$T4 = 296
$T5 = 328
this$ = 384
?dtor$3@?0???0ExampleAppConsole@@QEAA@XZ@4HA PROC	; `ExampleAppConsole::ExampleAppConsole'::`1'::dtor$3
  0008a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0008f	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00094	55		 push	 rbp
  00095	57		 push	 rdi
  00096	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0009a	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0009e	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a5	48 81 c1 38 01
	00 00		 add	 rcx, 312		; 00000138H
  000ac	e8 00 00 00 00	 call	 ??1ImGuiTextFilter@@QEAA@XZ
  000b1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b5	5f		 pop	 rdi
  000b6	5d		 pop	 rbp
  000b7	c3		 ret	 0
?dtor$3@?0???0ExampleAppConsole@@QEAA@XZ@4HA ENDP	; `ExampleAppConsole::ExampleAppConsole'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
$T2 = 232
$T3 = 264
$T4 = 296
$T5 = 328
this$ = 384
?dtor$0@?0???0ExampleAppConsole@@QEAA@XZ@4HA PROC	; `ExampleAppConsole::ExampleAppConsole'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 81 c1 00 01
	00 00		 add	 rcx, 256		; 00000100H
  00022	e8 00 00 00 00	 call	 ??1?$ImVector@PEAD@@QEAA@XZ ; ImVector<char * __ptr64>::~ImVector<char * __ptr64>
  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	5f		 pop	 rdi
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
?dtor$0@?0???0ExampleAppConsole@@QEAA@XZ@4HA ENDP	; `ExampleAppConsole::ExampleAppConsole'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
$T2 = 232
$T3 = 264
$T4 = 296
$T5 = 328
this$ = 384
?dtor$1@?0???0ExampleAppConsole@@QEAA@XZ@4HA PROC	; `ExampleAppConsole::ExampleAppConsole'::`1'::dtor$1
  0002e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00033	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00038	55		 push	 rbp
  00039	57		 push	 rdi
  0003a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0003e	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00042	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	48 81 c1 10 01
	00 00		 add	 rcx, 272		; 00000110H
  00050	e8 00 00 00 00	 call	 ??1?$ImVector@PEBD@@QEAA@XZ ; ImVector<char const * __ptr64>::~ImVector<char const * __ptr64>
  00055	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00059	5f		 pop	 rdi
  0005a	5d		 pop	 rbp
  0005b	c3		 ret	 0
?dtor$1@?0???0ExampleAppConsole@@QEAA@XZ@4HA ENDP	; `ExampleAppConsole::ExampleAppConsole'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
$T2 = 232
$T3 = 264
$T4 = 296
$T5 = 328
this$ = 384
?dtor$2@?0???0ExampleAppConsole@@QEAA@XZ@4HA PROC	; `ExampleAppConsole::ExampleAppConsole'::`1'::dtor$2
  0005c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00061	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00066	55		 push	 rbp
  00067	57		 push	 rdi
  00068	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0006c	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00070	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00077	48 81 c1 20 01
	00 00		 add	 rcx, 288		; 00000120H
  0007e	e8 00 00 00 00	 call	 ??1?$ImVector@PEAD@@QEAA@XZ ; ImVector<char * __ptr64>::~ImVector<char * __ptr64>
  00083	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00087	5f		 pop	 rdi
  00088	5d		 pop	 rbp
  00089	c3		 ret	 0
?dtor$2@?0???0ExampleAppConsole@@QEAA@XZ@4HA ENDP	; `ExampleAppConsole::ExampleAppConsole'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
$T2 = 232
$T3 = 264
$T4 = 296
$T5 = 328
this$ = 384
?dtor$3@?0???0ExampleAppConsole@@QEAA@XZ@4HA PROC	; `ExampleAppConsole::ExampleAppConsole'::`1'::dtor$3
  0008a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0008f	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00094	55		 push	 rbp
  00095	57		 push	 rdi
  00096	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0009a	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0009e	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a5	48 81 c1 38 01
	00 00		 add	 rcx, 312		; 00000138H
  000ac	e8 00 00 00 00	 call	 ??1ImGuiTextFilter@@QEAA@XZ
  000b1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b5	5f		 pop	 rdi
  000b6	5d		 pop	 rbp
  000b7	c3		 ret	 0
?dtor$3@?0???0ExampleAppConsole@@QEAA@XZ@4HA ENDP	; `ExampleAppConsole::ExampleAppConsole'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@PEBD@@QEAAXAEBQEBD@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@PEBD@@QEAAXAEBQEBD@Z PROC		; ImVector<char const * __ptr64>::push_back, COMDAT

; 1807 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00040	39 08		 cmp	 DWORD PTR [rax], ecx
  00042	75 27		 jne	 SHORT $LN2@push_back
  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	8b 00		 mov	 eax, DWORD PTR [rax]
  0004d	ff c0		 inc	 eax
  0004f	8b d0		 mov	 edx, eax
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@PEBD@@QEBAHH@Z ; ImVector<char const * __ptr64>::_grow_capacity
  0005d	8b d0		 mov	 edx, eax
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?reserve@?$ImVector@PEBD@@QEAAXH@Z ; ImVector<char const * __ptr64>::reserve
$LN2@push_back:
  0006b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00075	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00080	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00084	41 b8 08 00 00
	00		 mov	 r8d, 8
  0008a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00091	48 8b c8	 mov	 rcx, rax
  00094	e8 00 00 00 00	 call	 memcpy
  00099	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a0	8b 00		 mov	 eax, DWORD PTR [rax]
  000a2	ff c0		 inc	 eax
  000a4	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	89 01		 mov	 DWORD PTR [rcx], eax
  000ad	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b4	5f		 pop	 rdi
  000b5	5d		 pop	 rbp
  000b6	c3		 ret	 0
?push_back@?$ImVector@PEBD@@QEAAXAEBQEBD@Z ENDP		; ImVector<char const * __ptr64>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@PEBD@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@PEBD@@QEAAXH@Z PROC			; ImVector<char const * __ptr64>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 c1 e0 03	 shl	 rax, 3
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 c1 e0 03	 shl	 rax, 3
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@PEBD@@QEAAXH@Z ENDP			; ImVector<char const * __ptr64>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@PEBD@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@PEBD@@QEBAHH@Z PROC		; ImVector<char const * __ptr64>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@PEBD@@QEBAHH@Z ENDP		; ImVector<char const * __ptr64>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@PEBD@@QEAAAEAPEBDH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@PEBD@@QEAAAEAPEBDH@Z PROC			; ImVector<char const * __ptr64>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@PEBD@@QEAAAEAPEBDH@Z ENDP			; ImVector<char const * __ptr64>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@PEBD@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@PEBD@@QEAA@XZ PROC			; ImVector<char const * __ptr64>::~ImVector<char const * __ptr64>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@PEBD@@QEAA@XZ ENDP			; ImVector<char const * __ptr64>::~ImVector<char const * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@PEBD@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@PEBD@@QEAA@XZ PROC			; ImVector<char const * __ptr64>::ImVector<char const * __ptr64>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@PEBD@@QEAA@XZ ENDP			; ImVector<char const * __ptr64>::ImVector<char const * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?erase@?$ImVector@PEAD@@QEAAPEAPEADPEBQEAD@Z
_TEXT	SEGMENT
off$ = 8
tv93 = 216
this$ = 256
it$ = 264
?erase@?$ImVector@PEAD@@QEAAPEAPEADPEBQEAD@Z PROC	; ImVector<char * __ptr64>::erase, COMDAT

; 1810 :     inline T*           erase(const T* it)                  { IM_ASSERT(it >= Data && it < Data + Size); const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + 1, ((size_t)Size - (size_t)off - 1) * sizeof(T)); Size--; return Data + off; }

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0003a	48 39 85 08 01
	00 00		 cmp	 QWORD PTR it$[rbp], rax
  00041	72 22		 jb	 SHORT $LN3@erase
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0004d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00054	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00058	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0005c	48 39 85 08 01
	00 00		 cmp	 QWORD PTR it$[rbp], rax
  00063	72 1c		 jb	 SHORT $LN4@erase
$LN3@erase:
  00065	41 b8 12 07 00
	00		 mov	 r8d, 1810		; 00000712H
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@NPHOAPAC@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAt?$AA?5?$AA?$DM?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CL?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007f	33 c0		 xor	 eax, eax
$LN4@erase:
  00081	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00088	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0008c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR it$[rbp]
  00093	48 2b c8	 sub	 rcx, rax
  00096	48 8b c1	 mov	 rax, rcx
  00099	48 c1 f8 03	 sar	 rax, 3
  0009d	48 89 45 08	 mov	 QWORD PTR off$[rbp], rax
  000a1	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a8	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  000ab	48 2b 45 08	 sub	 rax, QWORD PTR off$[rbp]
  000af	48 8d 04 c5 f8
	ff ff ff	 lea	 rax, QWORD PTR [rax*8-8]
  000b7	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000be	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000c2	48 8b 55 08	 mov	 rdx, QWORD PTR off$[rbp]
  000c6	48 8d 4c d1 08	 lea	 rcx, QWORD PTR [rcx+rdx*8+8]
  000cb	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  000d2	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  000d6	4c 8b 45 08	 mov	 r8, QWORD PTR off$[rbp]
  000da	4a 8d 14 c2	 lea	 rdx, QWORD PTR [rdx+r8*8]
  000de	48 89 95 d8 00
	00 00		 mov	 QWORD PTR tv93[rbp], rdx
  000e5	4c 8b c0	 mov	 r8, rax
  000e8	48 8b d1	 mov	 rdx, rcx
  000eb	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv93[rbp]
  000f2	48 8b c8	 mov	 rcx, rax
  000f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memmove
  000fb	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00102	8b 00		 mov	 eax, DWORD PTR [rax]
  00104	ff c8		 dec	 eax
  00106	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0010d	89 01		 mov	 DWORD PTR [rcx], eax
  0010f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00116	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0011a	48 8b 4d 08	 mov	 rcx, QWORD PTR off$[rbp]
  0011e	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  00122	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00129	5f		 pop	 rdi
  0012a	5d		 pop	 rbp
  0012b	c3		 ret	 0
?erase@?$ImVector@PEAD@@QEAAPEAPEADPEBQEAD@Z ENDP	; ImVector<char * __ptr64>::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@PEAD@@QEAAXAEBQEAD@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@PEAD@@QEAAXAEBQEAD@Z PROC		; ImVector<char * __ptr64>::push_back, COMDAT

; 1807 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00040	39 08		 cmp	 DWORD PTR [rax], ecx
  00042	75 27		 jne	 SHORT $LN2@push_back
  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	8b 00		 mov	 eax, DWORD PTR [rax]
  0004d	ff c0		 inc	 eax
  0004f	8b d0		 mov	 edx, eax
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@PEAD@@QEBAHH@Z ; ImVector<char * __ptr64>::_grow_capacity
  0005d	8b d0		 mov	 edx, eax
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?reserve@?$ImVector@PEAD@@QEAAXH@Z ; ImVector<char * __ptr64>::reserve
$LN2@push_back:
  0006b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00075	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00080	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00084	41 b8 08 00 00
	00		 mov	 r8d, 8
  0008a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00091	48 8b c8	 mov	 rcx, rax
  00094	e8 00 00 00 00	 call	 memcpy
  00099	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a0	8b 00		 mov	 eax, DWORD PTR [rax]
  000a2	ff c0		 inc	 eax
  000a4	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	89 01		 mov	 DWORD PTR [rcx], eax
  000ad	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b4	5f		 pop	 rdi
  000b5	5d		 pop	 rbp
  000b6	c3		 ret	 0
?push_back@?$ImVector@PEAD@@QEAAXAEBQEAD@Z ENDP		; ImVector<char * __ptr64>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@PEAD@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@PEAD@@QEAAXH@Z PROC			; ImVector<char * __ptr64>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 c1 e0 03	 shl	 rax, 3
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 c1 e0 03	 shl	 rax, 3
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@PEAD@@QEAAXH@Z ENDP			; ImVector<char * __ptr64>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@PEAD@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@PEAD@@QEBAHH@Z PROC		; ImVector<char * __ptr64>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@PEAD@@QEBAHH@Z ENDP		; ImVector<char * __ptr64>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?begin@?$ImVector@PEAD@@QEAAPEAPEADXZ
_TEXT	SEGMENT
this$ = 224
?begin@?$ImVector@PEAD@@QEAAPEAPEADXZ PROC		; ImVector<char * __ptr64>::begin, COMDAT

; 1789 :     inline T*           begin()                             { return Data; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00033	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003a	5f		 pop	 rdi
  0003b	5d		 pop	 rbp
  0003c	c3		 ret	 0
?begin@?$ImVector@PEAD@@QEAAPEAPEADXZ ENDP		; ImVector<char * __ptr64>::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@PEAD@@QEAAAEAPEADH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@PEAD@@QEAAAEAPEADH@Z PROC			; ImVector<char * __ptr64>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@PEAD@@QEAAAEAPEADH@Z ENDP			; ImVector<char * __ptr64>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@PEAD@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@PEAD@@QEAAXXZ PROC			; ImVector<char * __ptr64>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@PEAD@@QEAAXXZ ENDP			; ImVector<char * __ptr64>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@PEAD@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@PEAD@@QEAA@XZ PROC			; ImVector<char * __ptr64>::~ImVector<char * __ptr64>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@PEAD@@QEAA@XZ ENDP			; ImVector<char * __ptr64>::~ImVector<char * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@PEAD@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@PEAD@@QEAA@XZ PROC			; ImVector<char * __ptr64>::ImVector<char * __ptr64>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@PEAD@@QEAA@XZ ENDP			; ImVector<char * __ptr64>::ImVector<char * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Ffilter@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@YAXXZ
text$yd	SEGMENT
??__Ffilter@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@YAXXZ PROC ; `ImGui::ShowStyleEditor'::`41'::`dynamic atexit destructor for 'filter'', COMDAT
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?filter@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4UImGuiTextFilter@@A
  00025	e8 00 00 00 00	 call	 ??1ImGuiTextFilter@@QEAA@XZ
  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
??__Ffilter@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@YAXXZ ENDP ; `ImGui::ShowStyleEditor'::`41'::`dynamic atexit destructor for 'filter''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?IsLegacyNativeDupe@funcs@?BA@??ShowDemoWindowInputs@@YAXXZ@SA_NW4ImGuiKey@@@Z
_TEXT	SEGMENT
tv71 = 192
key$ = 240
?IsLegacyNativeDupe@funcs@?BA@??ShowDemoWindowInputs@@YAXXZ@SA_NW4ImGuiKey@@@Z PROC ; `ShowDemoWindowInputs'::`16'::funcs::IsLegacyNativeDupe, COMDAT

; 5723 :             struct funcs { static bool IsLegacyNativeDupe(ImGuiKey key) { return key < 512 && ImGui::GetIO().KeyMap[key] != -1; } }; // Hide Native<>ImGuiKey duplicates when both exists in the array

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR [rsp+280]
  00028	81 bd f0 00 00
	00 00 02 00 00	 cmp	 DWORD PTR key$[rbp], 512 ; 00000200H
  00032	7d 22		 jge	 SHORT $LN3@IsLegacyNa
  00034	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  00039	48 63 8d f0 00
	00 00		 movsxd	 rcx, DWORD PTR key$[rbp]
  00040	83 bc 88 f8 00
	00 00 ff	 cmp	 DWORD PTR [rax+rcx*4+248], -1
  00048	74 0c		 je	 SHORT $LN3@IsLegacyNa
  0004a	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv71[rbp], 1
  00054	eb 0a		 jmp	 SHORT $LN4@IsLegacyNa
$LN3@IsLegacyNa:
  00056	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv71[rbp], 0
$LN4@IsLegacyNa:
  00060	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv71[rbp]
  00067	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0006e	5f		 pop	 rdi
  0006f	5d		 pop	 rbp
  00070	c3		 ret	 0
?IsLegacyNativeDupe@funcs@?BA@??ShowDemoWindowInputs@@YAXXZ@SA_NW4ImGuiKey@@@Z ENDP ; `ShowDemoWindowInputs'::`16'::funcs::IsLegacyNativeDupe
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Fselection@?CAP@??ShowDemoWindowTables@@YAXXZ@YAXXZ
text$yd	SEGMENT
??__Fselection@?CAP@??ShowDemoWindowTables@@YAXXZ@YAXXZ PROC ; `ShowDemoWindowTables'::`527'::`dynamic atexit destructor for 'selection'', COMDAT
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selection@?CAP@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@H@@A
  00025	e8 00 00 00 00	 call	 ??1?$ImVector@H@@QEAA@XZ ; ImVector<int>::~ImVector<int>
  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
??__Fselection@?CAP@??ShowDemoWindowTables@@YAXXZ@YAXXZ ENDP ; `ShowDemoWindowTables'::`527'::`dynamic atexit destructor for 'selection''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Fitems@?CAP@??ShowDemoWindowTables@@YAXXZ@YAXXZ
text$yd	SEGMENT
??__Fitems@?CAP@??ShowDemoWindowTables@@YAXXZ@YAXXZ PROC ; `ShowDemoWindowTables'::`527'::`dynamic atexit destructor for 'items'', COMDAT
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?items@?CAP@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A
  00025	e8 00 00 00 00	 call	 ??1?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ ; ImVector<`anonymous namespace'::MyItem>::~ImVector<`anonymous namespace'::MyItem>
  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
??__Fitems@?CAP@??ShowDemoWindowTables@@YAXXZ@YAXXZ ENDP ; `ShowDemoWindowTables'::`527'::`dynamic atexit destructor for 'items''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Fitems@?BPE@??ShowDemoWindowTables@@YAXXZ@YAXXZ
text$yd	SEGMENT
??__Fitems@?BPE@??ShowDemoWindowTables@@YAXXZ@YAXXZ PROC ; `ShowDemoWindowTables'::`500'::`dynamic atexit destructor for 'items'', COMDAT
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?items@?BPE@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A
  00025	e8 00 00 00 00	 call	 ??1?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ ; ImVector<`anonymous namespace'::MyItem>::~ImVector<`anonymous namespace'::MyItem>
  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
??__Fitems@?BPE@??ShowDemoWindowTables@@YAXXZ@YAXXZ ENDP ; `ShowDemoWindowTables'::`500'::`dynamic atexit destructor for 'items''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAXH@Z PROC ; ImVector<`anonymous namespace'::MyItem>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 6b c0 18	 imul	 rax, rax, 24
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 6b c0 18	 imul	 rax, rax, 24
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAXH@Z ENDP ; ImVector<`anonymous namespace'::MyItem>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?resize@?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAXHAEBUMyItem@?A0x1ed25892@@@Z
_TEXT	SEGMENT
n$1 = 4
this$ = 256
new_size$ = 264
v$ = 272
?resize@?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAXHAEBUMyItem@?A0x1ed25892@@@Z PROC ; ImVector<`anonymous namespace'::MyItem>::resize, COMDAT

; 1801 :     inline void         resize(int new_size, const T& v)    { if (new_size > Capacity) reserve(_grow_capacity(new_size)); if (new_size > Size) for (int n = Size; n < new_size; n++) memcpy(&Data[n], &v, sizeof(v)); Size = new_size; }

$LN8:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00033	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003a	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0003d	39 85 08 01 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  00043	7e 20		 jle	 SHORT $LN5@resize
  00045	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  0004b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00052	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@UMyItem@?A0x1ed25892@@@@QEBAHH@Z ; ImVector<`anonymous namespace'::MyItem>::_grow_capacity
  00057	8b d0		 mov	 edx, eax
  00059	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00060	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAXH@Z ; ImVector<`anonymous namespace'::MyItem>::reserve
$LN5@resize:
  00065	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006c	8b 00		 mov	 eax, DWORD PTR [rax]
  0006e	39 85 08 01 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  00074	7e 4b		 jle	 SHORT $LN6@resize
  00076	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007d	8b 00		 mov	 eax, DWORD PTR [rax]
  0007f	89 45 04	 mov	 DWORD PTR n$1[rbp], eax
  00082	eb 08		 jmp	 SHORT $LN4@resize
$LN2@resize:
  00084	8b 45 04	 mov	 eax, DWORD PTR n$1[rbp]
  00087	ff c0		 inc	 eax
  00089	89 45 04	 mov	 DWORD PTR n$1[rbp], eax
$LN4@resize:
  0008c	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR new_size$[rbp]
  00092	39 45 04	 cmp	 DWORD PTR n$1[rbp], eax
  00095	7d 2a		 jge	 SHORT $LN3@resize
  00097	48 63 45 04	 movsxd	 rax, DWORD PTR n$1[rbp]
  0009b	48 6b c0 18	 imul	 rax, rax, 24
  0009f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a6	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  000aa	41 b8 18 00 00
	00		 mov	 r8d, 24
  000b0	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  000b7	48 8b c8	 mov	 rcx, rax
  000ba	e8 00 00 00 00	 call	 memcpy
  000bf	eb c3		 jmp	 SHORT $LN2@resize
$LN3@resize:
$LN6@resize:
  000c1	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c8	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  000ce	89 08		 mov	 DWORD PTR [rax], ecx
  000d0	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000d7	5f		 pop	 rdi
  000d8	5d		 pop	 rbp
  000d9	c3		 ret	 0
?resize@?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAXHAEBUMyItem@?A0x1ed25892@@@Z ENDP ; ImVector<`anonymous namespace'::MyItem>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@UMyItem@?A0x1ed25892@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UMyItem@?A0x1ed25892@@@@QEBAHH@Z PROC ; ImVector<`anonymous namespace'::MyItem>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@UMyItem@?A0x1ed25892@@@@QEBAHH@Z ENDP ; ImVector<`anonymous namespace'::MyItem>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAAEAUMyItem@?A0x1ed25892@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAAEAUMyItem@?A0x1ed25892@@H@Z PROC ; ImVector<`anonymous namespace'::MyItem>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 6b c0 18	 imul	 rax, rax, 24
  0006f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAAEAUMyItem@?A0x1ed25892@@H@Z ENDP ; ImVector<`anonymous namespace'::MyItem>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ PROC	; ImVector<`anonymous namespace'::MyItem>::~ImVector<`anonymous namespace'::MyItem>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ ENDP	; ImVector<`anonymous namespace'::MyItem>::~ImVector<`anonymous namespace'::MyItem>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ PROC	; ImVector<`anonymous namespace'::MyItem>::ImVector<`anonymous namespace'::MyItem>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ ENDP	; ImVector<`anonymous namespace'::MyItem>::ImVector<`anonymous namespace'::MyItem>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?DisplayNode@MyTreeNode@?BIO@??ShowDemoWindowTables@@YAXXZ@SAXPEBU1?BIO@??2@YAXXZ@0@Z
_TEXT	SEGMENT
is_folder$ = 4
open$1 = 36
child_n$2 = 68
tv68 = 276
node$ = 320
all_nodes$ = 328
?DisplayNode@MyTreeNode@?BIO@??ShowDemoWindowTables@@YAXXZ@SAXPEBU1?BIO@??2@YAXXZ@0@Z PROC ; `ShowDemoWindowTables'::`398'::MyTreeNode::DisplayNode, COMDAT

; 4792 :                 {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]

; 4793 :                     ImGui::TableNextRow();

  0002f	0f 57 c9	 xorps	 xmm1, xmm1
  00032	33 c9		 xor	 ecx, ecx
  00034	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4794 :                     ImGui::TableNextColumn();

  00039	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 4795 :                     const bool is_folder = (node->ChildCount > 0);

  0003e	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR node$[rbp]
  00045	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  00049	7e 09		 jle	 SHORT $LN9@DisplayNod
  0004b	c6 85 14 01 00
	00 01		 mov	 BYTE PTR tv68[rbp], 1
  00052	eb 07		 jmp	 SHORT $LN10@DisplayNod
$LN9@DisplayNod:
  00054	c6 85 14 01 00
	00 00		 mov	 BYTE PTR tv68[rbp], 0
$LN10@DisplayNod:
  0005b	0f b6 85 14 01
	00 00		 movzx	 eax, BYTE PTR tv68[rbp]
  00062	88 45 04	 mov	 BYTE PTR is_folder$[rbp], al

; 4796 :                     if (is_folder)

  00065	0f b6 45 04	 movzx	 eax, BYTE PTR is_folder$[rbp]
  00069	85 c0		 test	 eax, eax
  0006b	0f 84 9f 00 00
	00		 je	 $LN5@DisplayNod

; 4797 :                     {
; 4798 :                         bool open = ImGui::TreeNodeEx(node->Name, ImGuiTreeNodeFlags_SpanFullWidth);

  00071	ba 00 10 00 00	 mov	 edx, 4096		; 00001000H
  00076	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR node$[rbp]
  0007d	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00080	e8 00 00 00 00	 call	 ?TreeNodeEx@ImGui@@YA_NPEBDH@Z ; ImGui::TreeNodeEx
  00085	88 45 24	 mov	 BYTE PTR open$1[rbp], al

; 4799 :                         ImGui::TableNextColumn();

  00088	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 4800 :                         ImGui::TextDisabled("--");

  0008d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02BAABKJLB@?9?9?$AA@
  00094	e8 00 00 00 00	 call	 ?TextDisabled@ImGui@@YAXPEBDZZ ; ImGui::TextDisabled

; 4801 :                         ImGui::TableNextColumn();

  00099	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 4802 :                         ImGui::TextUnformatted(node->Type);

  0009e	33 d2		 xor	 edx, edx
  000a0	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR node$[rbp]
  000a7	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000ab	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted

; 4803 :                         if (open)

  000b0	0f b6 45 24	 movzx	 eax, BYTE PTR open$1[rbp]
  000b4	85 c0		 test	 eax, eax
  000b6	74 56		 je	 SHORT $LN7@DisplayNod

; 4804 :                         {
; 4805 :                             for (int child_n = 0; child_n < node->ChildCount; child_n++)

  000b8	c7 45 44 00 00
	00 00		 mov	 DWORD PTR child_n$2[rbp], 0
  000bf	eb 08		 jmp	 SHORT $LN4@DisplayNod
$LN2@DisplayNod:
  000c1	8b 45 44	 mov	 eax, DWORD PTR child_n$2[rbp]
  000c4	ff c0		 inc	 eax
  000c6	89 45 44	 mov	 DWORD PTR child_n$2[rbp], eax
$LN4@DisplayNod:
  000c9	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR node$[rbp]
  000d0	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  000d3	39 45 44	 cmp	 DWORD PTR child_n$2[rbp], eax
  000d6	7d 31		 jge	 SHORT $LN3@DisplayNod

; 4806 :                                 DisplayNode(&all_nodes[node->ChildIdx + child_n], all_nodes);

  000d8	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR node$[rbp]
  000df	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  000e2	03 45 44	 add	 eax, DWORD PTR child_n$2[rbp]
  000e5	48 98		 cdqe
  000e7	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  000eb	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR all_nodes$[rbp]
  000f2	48 03 c8	 add	 rcx, rax
  000f5	48 8b c1	 mov	 rax, rcx
  000f8	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR all_nodes$[rbp]
  000ff	48 8b c8	 mov	 rcx, rax
  00102	e8 00 00 00 00	 call	 ?DisplayNode@MyTreeNode@?BIO@??ShowDemoWindowTables@@YAXXZ@SAXPEBU1?BIO@??2@YAXXZ@0@Z ; `ShowDemoWindowTables'::`398'::MyTreeNode::DisplayNode
  00107	eb b8		 jmp	 SHORT $LN2@DisplayNod
$LN3@DisplayNod:

; 4807 :                             ImGui::TreePop();

  00109	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN7@DisplayNod:

; 4808 :                         }
; 4809 :                     }
; 4810 :                     else

  0010e	eb 46		 jmp	 SHORT $LN6@DisplayNod
$LN5@DisplayNod:

; 4811 :                     {
; 4812 :                         ImGui::TreeNodeEx(node->Name, ImGuiTreeNodeFlags_Leaf | ImGuiTreeNodeFlags_Bullet | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_SpanFullWidth);

  00110	ba 08 13 00 00	 mov	 edx, 4872		; 00001308H
  00115	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR node$[rbp]
  0011c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0011f	e8 00 00 00 00	 call	 ?TreeNodeEx@ImGui@@YA_NPEBDH@Z ; ImGui::TreeNodeEx

; 4813 :                         ImGui::TableNextColumn();

  00124	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 4814 :                         ImGui::Text("%d", node->Size);

  00129	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR node$[rbp]
  00130	8b 50 10	 mov	 edx, DWORD PTR [rax+16]
  00133	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  0013a	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4815 :                         ImGui::TableNextColumn();

  0013f	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 4816 :                         ImGui::TextUnformatted(node->Type);

  00144	33 d2		 xor	 edx, edx
  00146	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR node$[rbp]
  0014d	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00151	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted
$LN6@DisplayNod:

; 4817 :                     }
; 4818 :                 }

  00156	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  0015d	5f		 pop	 rdi
  0015e	5d		 pop	 rbp
  0015f	c3		 ret	 0
?DisplayNode@MyTreeNode@?BIO@??ShowDemoWindowTables@@YAXXZ@SAXPEBU1?BIO@??2@YAXXZ@0@Z ENDP ; `ShowDemoWindowTables'::`398'::MyTreeNode::DisplayNode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowTableColumnsStatusFlags@@YAXH@Z
_TEXT	SEGMENT
flags$ = 224
?ShowTableColumnsStatusFlags@@YAXH@Z PROC		; ShowTableColumnsStatusFlags, COMDAT

; 3747 : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR [rsp+264]

; 3748 :     ImGui::CheckboxFlags("_IsEnabled", &flags, ImGuiTableColumnFlags_IsEnabled);

  00028	41 b8 00 00 00
	01		 mov	 r8d, 16777216		; 01000000H
  0002e	48 8d 95 e0 00
	00 00		 lea	 rdx, QWORD PTR flags$[rbp]
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@HAGMFILL@_IsEnabled?$AA@
  0003c	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3749 :     ImGui::CheckboxFlags("_IsVisible", &flags, ImGuiTableColumnFlags_IsVisible);

  00041	41 b8 00 00 00
	02		 mov	 r8d, 33554432		; 02000000H
  00047	48 8d 95 e0 00
	00 00		 lea	 rdx, QWORD PTR flags$[rbp]
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@IICELPIB@_IsVisible?$AA@
  00055	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3750 :     ImGui::CheckboxFlags("_IsSorted", &flags, ImGuiTableColumnFlags_IsSorted);

  0005a	41 b8 00 00 00
	04		 mov	 r8d, 67108864		; 04000000H
  00060	48 8d 95 e0 00
	00 00		 lea	 rdx, QWORD PTR flags$[rbp]
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09MHNJAEMK@_IsSorted?$AA@
  0006e	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3751 :     ImGui::CheckboxFlags("_IsHovered", &flags, ImGuiTableColumnFlags_IsHovered);

  00073	41 b8 00 00 00
	08		 mov	 r8d, 134217728		; 08000000H
  00079	48 8d 95 e0 00
	00 00		 lea	 rdx, QWORD PTR flags$[rbp]
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@FBCLIIEB@_IsHovered?$AA@
  00087	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3752 : }

  0008c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00093	5f		 pop	 rdi
  00094	5d		 pop	 rbp
  00095	c3		 ret	 0
?ShowTableColumnsStatusFlags@@YAXH@Z ENDP		; ShowTableColumnsStatusFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?EditTableColumnsFlags@@YAXPEAH@Z
_TEXT	SEGMENT
p_flags$ = 224
?EditTableColumnsFlags@@YAXPEAH@Z PROC			; EditTableColumnsFlags, COMDAT

; 3723 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 3724 :     ImGui::CheckboxFlags("_Disabled", p_flags, ImGuiTableColumnFlags_Disabled); ImGui::SameLine(); HelpMarker("Master disable flag (also hide from context menu)");

  0002a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00030	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p_flags$[rbp]
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09NLBHHOGA@_Disabled?$AA@
  0003e	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags
  00043	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0004b	0f 57 c0	 xorps	 xmm0, xmm0
  0004e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DC@GLEFNIIN@Master?5disable?5flag?5?$CIalso?5hide?5f@
  0005a	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 3725 :     ImGui::CheckboxFlags("_DefaultHide", p_flags, ImGuiTableColumnFlags_DefaultHide);

  0005f	41 b8 02 00 00
	00		 mov	 r8d, 2
  00065	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p_flags$[rbp]
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BKJKKNLB@_DefaultHide?$AA@
  00073	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3726 :     ImGui::CheckboxFlags("_DefaultSort", p_flags, ImGuiTableColumnFlags_DefaultSort);

  00078	41 b8 04 00 00
	00		 mov	 r8d, 4
  0007e	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p_flags$[rbp]
  00085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@GDLDKICM@_DefaultSort?$AA@
  0008c	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3727 :     if (ImGui::CheckboxFlags("_WidthStretch", p_flags, ImGuiTableColumnFlags_WidthStretch))

  00091	41 b8 08 00 00
	00		 mov	 r8d, 8
  00097	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p_flags$[rbp]
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@LBJDIKPA@_WidthStretch?$AA@
  000a5	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags
  000aa	0f b6 c0	 movzx	 eax, al
  000ad	85 c0		 test	 eax, eax
  000af	74 15		 je	 SHORT $LN2@EditTableC

; 3728 :         *p_flags &= ~(ImGuiTableColumnFlags_WidthMask_ ^ ImGuiTableColumnFlags_WidthStretch);

  000b1	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR p_flags$[rbp]
  000b8	8b 00		 mov	 eax, DWORD PTR [rax]
  000ba	83 e0 ef	 and	 eax, -17
  000bd	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR p_flags$[rbp]
  000c4	89 01		 mov	 DWORD PTR [rcx], eax
$LN2@EditTableC:

; 3729 :     if (ImGui::CheckboxFlags("_WidthFixed", p_flags, ImGuiTableColumnFlags_WidthFixed))

  000c6	41 b8 10 00 00
	00		 mov	 r8d, 16
  000cc	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p_flags$[rbp]
  000d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@ILFLIFOG@_WidthFixed?$AA@
  000da	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags
  000df	0f b6 c0	 movzx	 eax, al
  000e2	85 c0		 test	 eax, eax
  000e4	74 15		 je	 SHORT $LN3@EditTableC

; 3730 :         *p_flags &= ~(ImGuiTableColumnFlags_WidthMask_ ^ ImGuiTableColumnFlags_WidthFixed);

  000e6	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR p_flags$[rbp]
  000ed	8b 00		 mov	 eax, DWORD PTR [rax]
  000ef	83 e0 f7	 and	 eax, -9
  000f2	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR p_flags$[rbp]
  000f9	89 01		 mov	 DWORD PTR [rcx], eax
$LN3@EditTableC:

; 3731 :     ImGui::CheckboxFlags("_NoResize", p_flags, ImGuiTableColumnFlags_NoResize);

  000fb	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00101	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p_flags$[rbp]
  00108	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09BODCBGEL@_NoResize?$AA@
  0010f	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3732 :     ImGui::CheckboxFlags("_NoReorder", p_flags, ImGuiTableColumnFlags_NoReorder);

  00114	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0011a	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p_flags$[rbp]
  00121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@CPPLPFKF@_NoReorder?$AA@
  00128	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3733 :     ImGui::CheckboxFlags("_NoHide", p_flags, ImGuiTableColumnFlags_NoHide);

  0012d	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  00133	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p_flags$[rbp]
  0013a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07ICLECFEI@_NoHide?$AA@
  00141	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3734 :     ImGui::CheckboxFlags("_NoClip", p_flags, ImGuiTableColumnFlags_NoClip);

  00146	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  0014c	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p_flags$[rbp]
  00153	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07PNNHJBCM@_NoClip?$AA@
  0015a	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3735 :     ImGui::CheckboxFlags("_NoSort", p_flags, ImGuiTableColumnFlags_NoSort);

  0015f	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  00165	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p_flags$[rbp]
  0016c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07PLJNCANF@_NoSort?$AA@
  00173	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3736 :     ImGui::CheckboxFlags("_NoSortAscending", p_flags, ImGuiTableColumnFlags_NoSortAscending);

  00178	41 b8 00 04 00
	00		 mov	 r8d, 1024		; 00000400H
  0017e	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p_flags$[rbp]
  00185	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@BJIHNDPG@_NoSortAscending?$AA@
  0018c	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3737 :     ImGui::CheckboxFlags("_NoSortDescending", p_flags, ImGuiTableColumnFlags_NoSortDescending);

  00191	41 b8 00 08 00
	00		 mov	 r8d, 2048		; 00000800H
  00197	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p_flags$[rbp]
  0019e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@IGDJILJK@_NoSortDescending?$AA@
  001a5	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3738 :     ImGui::CheckboxFlags("_NoHeaderLabel", p_flags, ImGuiTableColumnFlags_NoHeaderLabel);

  001aa	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  001b0	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p_flags$[rbp]
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@FAJFNLOA@_NoHeaderLabel?$AA@
  001be	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3739 :     ImGui::CheckboxFlags("_NoHeaderWidth", p_flags, ImGuiTableColumnFlags_NoHeaderWidth);

  001c3	41 b8 00 20 00
	00		 mov	 r8d, 8192		; 00002000H
  001c9	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p_flags$[rbp]
  001d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@FFBHDBOG@_NoHeaderWidth?$AA@
  001d7	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3740 :     ImGui::CheckboxFlags("_PreferSortAscending", p_flags, ImGuiTableColumnFlags_PreferSortAscending);

  001dc	41 b8 00 40 00
	00		 mov	 r8d, 16384		; 00004000H
  001e2	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p_flags$[rbp]
  001e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@BFMFKAGJ@_PreferSortAscending?$AA@
  001f0	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3741 :     ImGui::CheckboxFlags("_PreferSortDescending", p_flags, ImGuiTableColumnFlags_PreferSortDescending);

  001f5	41 b8 00 80 00
	00		 mov	 r8d, 32768		; 00008000H
  001fb	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p_flags$[rbp]
  00202	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@OGIFEHDM@_PreferSortDescending?$AA@
  00209	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3742 :     ImGui::CheckboxFlags("_IndentEnable", p_flags, ImGuiTableColumnFlags_IndentEnable); ImGui::SameLine(); HelpMarker("Default for column 0");

  0020e	41 b8 00 00 01
	00		 mov	 r8d, 65536		; 00010000H
  00214	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p_flags$[rbp]
  0021b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IHCPMKPD@_IndentEnable?$AA@
  00222	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags
  00227	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0022f	0f 57 c0	 xorps	 xmm0, xmm0
  00232	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00237	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@NGNGOPFH@Default?5for?5column?50?$AA@
  0023e	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 3743 :     ImGui::CheckboxFlags("_IndentDisable", p_flags, ImGuiTableColumnFlags_IndentDisable); ImGui::SameLine(); HelpMarker("Default for column >0");

  00243	41 b8 00 00 02
	00		 mov	 r8d, 131072		; 00020000H
  00249	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR p_flags$[rbp]
  00250	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@NDAELIGC@_IndentDisable?$AA@
  00257	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags
  0025c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00264	0f 57 c0	 xorps	 xmm0, xmm0
  00267	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0026c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@CAABAJEB@Default?5for?5column?5?$DO0?$AA@
  00273	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 3744 : }

  00278	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0027f	5f		 pop	 rdi
  00280	5d		 pop	 rbp
  00281	c3		 ret	 0
?EditTableColumnsFlags@@YAXPEAH@Z ENDP			; EditTableColumnsFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?EditTableSizingFlags@@YAXPEAH@Z
_TEXT	SEGMENT
idx$ = 4
preview_text$ = 40
n$1 = 68
m$2 = 100
$T3 = 324
tv164 = 340
tv131 = 340
tv178 = 344
tv80 = 344
tv82 = 352
p_flags$ = 400
?EditTableSizingFlags@@YAXPEAH@Z PROC			; EditTableSizingFlags, COMDAT

; 3681 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 98 01
	00 00		 sub	 rsp, 408		; 00000198H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 66 00 00 00	 mov	 ecx, 102		; 00000066H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+440]

; 3682 :     struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };
; 3683 :     static const EnumDesc policies[] =
; 3684 :     {
; 3685 :         { ImGuiTableFlags_None,               "Default",                            "Use default sizing policy:\n- ImGuiTableFlags_SizingFixedFit if ScrollX is on or if host window has ImGuiWindowFlags_AlwaysAutoResize.\n- ImGuiTableFlags_SizingStretchSame otherwise." },
; 3686 :         { ImGuiTableFlags_SizingFixedFit,     "ImGuiTableFlags_SizingFixedFit",     "Columns default to _WidthFixed (if resizable) or _WidthAuto (if not resizable), matching contents width." },
; 3687 :         { ImGuiTableFlags_SizingFixedSame,    "ImGuiTableFlags_SizingFixedSame",    "Columns are all the same width, matching the maximum contents width.\nImplicitly disable ImGuiTableFlags_Resizable and enable ImGuiTableFlags_NoKeepColumnsVisible." },
; 3688 :         { ImGuiTableFlags_SizingStretchProp,  "ImGuiTableFlags_SizingStretchProp",  "Columns default to _WidthStretch with weights proportional to their widths." },
; 3689 :         { ImGuiTableFlags_SizingStretchSame,  "ImGuiTableFlags_SizingStretchSame",  "Columns default to _WidthStretch with same weights." }
; 3690 :     };
; 3691 :     int idx;
; 3692 :     for (idx = 0; idx < IM_ARRAYSIZE(policies); idx++)

  0002a	c7 45 04 00 00
	00 00		 mov	 DWORD PTR idx$[rbp], 0
  00031	eb 08		 jmp	 SHORT $LN4@EditTableS
$LN2@EditTableS:
  00033	8b 45 04	 mov	 eax, DWORD PTR idx$[rbp]
  00036	ff c0		 inc	 eax
  00038	89 45 04	 mov	 DWORD PTR idx$[rbp], eax
$LN4@EditTableS:
  0003b	83 7d 04 05	 cmp	 DWORD PTR idx$[rbp], 5
  0003f	7d 27		 jge	 SHORT $LN3@EditTableS

; 3693 :         if (policies[idx].Value == (*p_flags & ImGuiTableFlags_SizingMask_))

  00041	48 63 45 04	 movsxd	 rax, DWORD PTR idx$[rbp]
  00045	48 6b c0 18	 imul	 rax, rax, 24
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?policies@?1??EditTableSizingFlags@@YAXPEAH@Z@4QBUEnumDesc@?1??1@YAX0@Z@B
  00050	48 8b 95 90 01
	00 00		 mov	 rdx, QWORD PTR p_flags$[rbp]
  00057	8b 12		 mov	 edx, DWORD PTR [rdx]
  00059	81 e2 00 e0 00
	00		 and	 edx, 57344		; 0000e000H
  0005f	39 14 01	 cmp	 DWORD PTR [rcx+rax], edx
  00062	75 02		 jne	 SHORT $LN11@EditTableS

; 3694 :             break;

  00064	eb 02		 jmp	 SHORT $LN3@EditTableS
$LN11@EditTableS:

; 3695 :     const char* preview_text = (idx < IM_ARRAYSIZE(policies)) ? policies[idx].Name + (idx > 0 ? strlen("ImGuiTableFlags") : 0) : "";

  00066	eb cb		 jmp	 SHORT $LN2@EditTableS
$LN3@EditTableS:
  00068	83 7d 04 05	 cmp	 DWORD PTR idx$[rbp], 5
  0006c	7d 4a		 jge	 SHORT $LN18@EditTableS
  0006e	83 7d 04 00	 cmp	 DWORD PTR idx$[rbp], 0
  00072	7e 15		 jle	 SHORT $LN16@EditTableS
  00074	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@PNOLBFOJ@ImGuiTableFlags?$AA@
  0007b	e8 00 00 00 00	 call	 strlen
  00080	48 89 85 58 01
	00 00		 mov	 QWORD PTR tv80[rbp], rax
  00087	eb 0b		 jmp	 SHORT $LN17@EditTableS
$LN16@EditTableS:
  00089	48 c7 85 58 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv80[rbp], 0
$LN17@EditTableS:
  00094	48 63 45 04	 movsxd	 rax, DWORD PTR idx$[rbp]
  00098	48 6b c0 18	 imul	 rax, rax, 24
  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?policies@?1??EditTableSizingFlags@@YAXPEAH@Z@4QBUEnumDesc@?1??1@YAX0@Z@B
  000a3	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  000a8	48 03 85 58 01
	00 00		 add	 rax, QWORD PTR tv80[rbp]
  000af	48 89 85 60 01
	00 00		 mov	 QWORD PTR tv82[rbp], rax
  000b6	eb 0e		 jmp	 SHORT $LN19@EditTableS
$LN18@EditTableS:
  000b8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000bf	48 89 85 60 01
	00 00		 mov	 QWORD PTR tv82[rbp], rax
$LN19@EditTableS:
  000c6	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR tv82[rbp]
  000cd	48 89 45 28	 mov	 QWORD PTR preview_text$[rbp], rax

; 3696 :     if (ImGui::BeginCombo("Sizing Policy", preview_text))

  000d1	45 33 c0	 xor	 r8d, r8d
  000d4	48 8b 55 28	 mov	 rdx, QWORD PTR preview_text$[rbp]
  000d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GDABACCD@Sizing?5Policy?$AA@
  000df	e8 00 00 00 00	 call	 ?BeginCombo@ImGui@@YA_NPEBD0H@Z ; ImGui::BeginCombo
  000e4	0f b6 c0	 movzx	 eax, al
  000e7	85 c0		 test	 eax, eax
  000e9	0f 84 b3 00 00
	00		 je	 $LN12@EditTableS

; 3697 :     {
; 3698 :         for (int n = 0; n < IM_ARRAYSIZE(policies); n++)

  000ef	c7 45 44 00 00
	00 00		 mov	 DWORD PTR n$1[rbp], 0
  000f6	eb 08		 jmp	 SHORT $LN7@EditTableS
$LN5@EditTableS:
  000f8	8b 45 44	 mov	 eax, DWORD PTR n$1[rbp]
  000fb	ff c0		 inc	 eax
  000fd	89 45 44	 mov	 DWORD PTR n$1[rbp], eax
$LN7@EditTableS:
  00100	83 7d 44 05	 cmp	 DWORD PTR n$1[rbp], 5
  00104	0f 8d 93 00 00
	00		 jge	 $LN6@EditTableS

; 3699 :             if (ImGui::Selectable(policies[n].Name, idx == n))

  0010a	8b 45 44	 mov	 eax, DWORD PTR n$1[rbp]
  0010d	39 45 04	 cmp	 DWORD PTR idx$[rbp], eax
  00110	75 09		 jne	 SHORT $LN20@EditTableS
  00112	c6 85 54 01 00
	00 01		 mov	 BYTE PTR tv131[rbp], 1
  00119	eb 07		 jmp	 SHORT $LN21@EditTableS
$LN20@EditTableS:
  0011b	c6 85 54 01 00
	00 00		 mov	 BYTE PTR tv131[rbp], 0
$LN21@EditTableS:
  00122	0f 57 d2	 xorps	 xmm2, xmm2
  00125	0f 57 c9	 xorps	 xmm1, xmm1
  00128	48 8d 8d 44 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  0012f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00134	48 63 4d 44	 movsxd	 rcx, DWORD PTR n$1[rbp]
  00138	48 6b c9 18	 imul	 rcx, rcx, 24
  0013c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?policies@?1??EditTableSizingFlags@@YAXPEAH@Z@4QBUEnumDesc@?1??1@YAX0@Z@B
  00143	48 89 95 58 01
	00 00		 mov	 QWORD PTR tv178[rbp], rdx
  0014a	4c 8b c8	 mov	 r9, rax
  0014d	45 33 c0	 xor	 r8d, r8d
  00150	0f b6 95 54 01
	00 00		 movzx	 edx, BYTE PTR tv131[rbp]
  00157	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR tv178[rbp]
  0015e	48 8b 4c 08 08	 mov	 rcx, QWORD PTR [rax+rcx+8]
  00163	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
  00168	0f b6 c0	 movzx	 eax, al
  0016b	85 c0		 test	 eax, eax
  0016d	74 29		 je	 SHORT $LN13@EditTableS

; 3700 :                 *p_flags = (*p_flags & ~ImGuiTableFlags_SizingMask_) | policies[n].Value;

  0016f	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR p_flags$[rbp]
  00176	8b 00		 mov	 eax, DWORD PTR [rax]
  00178	25 ff 1f ff ff	 and	 eax, -57345		; ffffffffffff1fffH
  0017d	48 63 4d 44	 movsxd	 rcx, DWORD PTR n$1[rbp]
  00181	48 6b c9 18	 imul	 rcx, rcx, 24
  00185	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?policies@?1??EditTableSizingFlags@@YAXPEAH@Z@4QBUEnumDesc@?1??1@YAX0@Z@B
  0018c	0b 04 0a	 or	 eax, DWORD PTR [rdx+rcx]
  0018f	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR p_flags$[rbp]
  00196	89 01		 mov	 DWORD PTR [rcx], eax
$LN13@EditTableS:

; 3701 :         ImGui::EndCombo();

  00198	e9 5b ff ff ff	 jmp	 $LN5@EditTableS
$LN6@EditTableS:
  0019d	e8 00 00 00 00	 call	 ?EndCombo@ImGui@@YAXXZ	; ImGui::EndCombo
$LN12@EditTableS:

; 3702 :     }
; 3703 :     ImGui::SameLine();

  001a2	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  001aa	0f 57 c0	 xorps	 xmm0, xmm0
  001ad	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 3704 :     ImGui::TextDisabled("(?)");

  001b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03NAEMJKHE@?$CI?$DP?$CJ?$AA@
  001b9	e8 00 00 00 00	 call	 ?TextDisabled@ImGui@@YAXPEBDZZ ; ImGui::TextDisabled

; 3705 :     if (ImGui::IsItemHovered())

  001be	33 c9		 xor	 ecx, ecx
  001c0	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  001c5	0f b6 c0	 movzx	 eax, al
  001c8	85 c0		 test	 eax, eax
  001ca	0f 84 b5 00 00
	00		 je	 $LN14@EditTableS

; 3706 :     {
; 3707 :         ImGui::BeginTooltip();

  001d0	e8 00 00 00 00	 call	 ?BeginTooltip@ImGui@@YAXXZ ; ImGui::BeginTooltip

; 3708 :         ImGui::PushTextWrapPos(ImGui::GetFontSize() * 50.0f);

  001d5	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  001da	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42480000
  001e2	e8 00 00 00 00	 call	 ?PushTextWrapPos@ImGui@@YAXM@Z ; ImGui::PushTextWrapPos

; 3709 :         for (int m = 0; m < IM_ARRAYSIZE(policies); m++)

  001e7	c7 45 64 00 00
	00 00		 mov	 DWORD PTR m$2[rbp], 0
  001ee	eb 08		 jmp	 SHORT $LN10@EditTableS
$LN8@EditTableS:
  001f0	8b 45 64	 mov	 eax, DWORD PTR m$2[rbp]
  001f3	ff c0		 inc	 eax
  001f5	89 45 64	 mov	 DWORD PTR m$2[rbp], eax
$LN10@EditTableS:
  001f8	83 7d 64 05	 cmp	 DWORD PTR m$2[rbp], 5
  001fc	7d 7d		 jge	 SHORT $LN9@EditTableS

; 3710 :         {
; 3711 :             ImGui::Separator();

  001fe	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3712 :             ImGui::Text("%s:", policies[m].Name);

  00203	48 63 45 64	 movsxd	 rax, DWORD PTR m$2[rbp]
  00207	48 6b c0 18	 imul	 rax, rax, 24
  0020b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?policies@?1??EditTableSizingFlags@@YAXPEAH@Z@4QBUEnumDesc@?1??1@YAX0@Z@B
  00212	48 8b 54 01 08	 mov	 rdx, QWORD PTR [rcx+rax+8]
  00217	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03DKEJHHJP@?$CFs?3?$AA@
  0021e	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3713 :             ImGui::Separator();

  00223	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3714 :             ImGui::SetCursorPosX(ImGui::GetCursorPosX() + ImGui::GetStyle().IndentSpacing * 0.5f);

  00228	e8 00 00 00 00	 call	 ?GetCursorPosX@ImGui@@YAMXZ ; ImGui::GetCursorPosX
  0022d	f3 0f 11 85 54
	01 00 00	 movss	 DWORD PTR tv164[rbp], xmm0
  00235	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  0023a	f3 0f 10 40 6c	 movss	 xmm0, DWORD PTR [rax+108]
  0023f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00247	f3 0f 10 8d 54
	01 00 00	 movss	 xmm1, DWORD PTR tv164[rbp]
  0024f	f3 0f 58 c8	 addss	 xmm1, xmm0
  00253	0f 28 c1	 movaps	 xmm0, xmm1
  00256	e8 00 00 00 00	 call	 ?SetCursorPosX@ImGui@@YAXM@Z ; ImGui::SetCursorPosX

; 3715 :             ImGui::TextUnformatted(policies[m].Tooltip);

  0025b	48 63 45 64	 movsxd	 rax, DWORD PTR m$2[rbp]
  0025f	48 6b c0 18	 imul	 rax, rax, 24
  00263	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?policies@?1??EditTableSizingFlags@@YAXPEAH@Z@4QBUEnumDesc@?1??1@YAX0@Z@B
  0026a	33 d2		 xor	 edx, edx
  0026c	48 8b 4c 01 10	 mov	 rcx, QWORD PTR [rcx+rax+16]
  00271	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted

; 3716 :         }

  00276	e9 75 ff ff ff	 jmp	 $LN8@EditTableS
$LN9@EditTableS:

; 3717 :         ImGui::PopTextWrapPos();

  0027b	e8 00 00 00 00	 call	 ?PopTextWrapPos@ImGui@@YAXXZ ; ImGui::PopTextWrapPos

; 3718 :         ImGui::EndTooltip();

  00280	e8 00 00 00 00	 call	 ?EndTooltip@ImGui@@YAXXZ ; ImGui::EndTooltip
$LN14@EditTableS:

; 3719 :     }
; 3720 : }

  00285	48 8d a5 78 01
	00 00		 lea	 rsp, QWORD PTR [rbp+376]
  0028c	5f		 pop	 rdi
  0028d	5d		 pop	 rbp
  0028e	c3		 ret	 0
?EditTableSizingFlags@@YAXPEAH@Z ENDP			; EditTableSizingFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?PopStyleCompact@@YAXXZ
_TEXT	SEGMENT
?PopStyleCompact@@YAXXZ PROC				; PopStyleCompact, COMDAT

; 3675 : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 3676 :     ImGui::PopStyleVar(2);

  0001e	b9 02 00 00 00	 mov	 ecx, 2
  00023	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar

; 3677 : }

  00028	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002f	5f		 pop	 rdi
  00030	5d		 pop	 rbp
  00031	c3		 ret	 0
?PopStyleCompact@@YAXXZ ENDP				; PopStyleCompact
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?PushStyleCompact@@YAXXZ
_TEXT	SEGMENT
style$ = 8
$T1 = 228
$T2 = 260
?PushStyleCompact@@YAXXZ PROC				; PushStyleCompact, COMDAT

; 3668 : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 3669 :     ImGuiStyle& style = ImGui::GetStyle();

  0001e	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  00023	48 89 45 08	 mov	 QWORD PTR style$[rbp], rax

; 3670 :     ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(style.FramePadding.x, (float)(int)(style.FramePadding.y * 0.60f)));

  00027	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  0002b	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [rax+64]
  00030	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f19999a
  00038	f3 0f 2c c0	 cvttss2si eax, xmm0
  0003c	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00040	0f 28 d0	 movaps	 xmm2, xmm0
  00043	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00047	f3 0f 10 48 3c	 movss	 xmm1, DWORD PTR [rax+60]
  0004c	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00053	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00058	48 8b d0	 mov	 rdx, rax
  0005b	b9 0b 00 00 00	 mov	 ecx, 11
  00060	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z ; ImGui::PushStyleVar

; 3671 :     ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(style.ItemSpacing.x, (float)(int)(style.ItemSpacing.y * 0.60f)));

  00065	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00069	f3 0f 10 40 50	 movss	 xmm0, DWORD PTR [rax+80]
  0006e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f19999a
  00076	f3 0f 2c c0	 cvttss2si eax, xmm0
  0007a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0007e	0f 28 d0	 movaps	 xmm2, xmm0
  00081	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00085	f3 0f 10 48 4c	 movss	 xmm1, DWORD PTR [rax+76]
  0008a	48 8d 8d 04 01
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  00091	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00096	48 8b d0	 mov	 rdx, rax
  00099	b9 0e 00 00 00	 mov	 ecx, 14
  0009e	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z ; ImGui::PushStyleVar

; 3672 : }

  000a3	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000aa	5f		 pop	 rdi
  000ab	5d		 pop	 rbp
  000ac	c3		 ret	 0
?PushStyleCompact@@YAXXZ ENDP				; PushStyleCompact
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?CompareWithSortSpecs@MyItem@?A0x1ed25892@@SAHPEBX0@Z
_TEXT	SEGMENT
a$ = 8
b$ = 40
n$1 = 68
sort_spec$2 = 104
delta$3 = 132
tv141 = 340
tv135 = 340
tv72 = 340
lhs$ = 384
rhs$ = 392
?CompareWithSortSpecs@MyItem@?A0x1ed25892@@SAHPEBX0@Z PROC ; `anonymous namespace'::MyItem::CompareWithSortSpecs, COMDAT

; 3635 :     {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]

; 3636 :         const MyItem* a = (const MyItem*)lhs;

  0002f	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR lhs$[rbp]
  00036	48 89 45 08	 mov	 QWORD PTR a$[rbp], rax

; 3637 :         const MyItem* b = (const MyItem*)rhs;

  0003a	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR rhs$[rbp]
  00041	48 89 45 28	 mov	 QWORD PTR b$[rbp], rax

; 3638 :         for (int n = 0; n < s_current_sort_specs->SpecsCount; n++)

  00045	c7 45 44 00 00
	00 00		 mov	 DWORD PTR n$1[rbp], 0
  0004c	eb 08		 jmp	 SHORT $LN4@CompareWit
$LN2@CompareWit:
  0004e	8b 45 44	 mov	 eax, DWORD PTR n$1[rbp]
  00051	ff c0		 inc	 eax
  00053	89 45 44	 mov	 DWORD PTR n$1[rbp], eax
$LN4@CompareWit:
  00056	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?s_current_sort_specs@MyItem@?A0x1ed25892@@2PEBUImGuiTableSortSpecs@@EB ; `anonymous namespace'::MyItem::s_current_sort_specs
  0005d	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00060	39 45 44	 cmp	 DWORD PTR n$1[rbp], eax
  00063	0f 8d 53 01 00
	00		 jge	 $LN3@CompareWit

; 3639 :         {
; 3640 :             // Here we identify columns using the ColumnUserID value that we ourselves passed to TableSetupColumn()
; 3641 :             // We could also choose to identify columns based on their index (sort_spec->ColumnIndex), which is simpler!
; 3642 :             const ImGuiTableColumnSortSpecs* sort_spec = &s_current_sort_specs->Specs[n];

  00069	48 63 45 44	 movsxd	 rax, DWORD PTR n$1[rbp]
  0006d	48 6b c0 0c	 imul	 rax, rax, 12
  00071	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?s_current_sort_specs@MyItem@?A0x1ed25892@@2PEBUImGuiTableSortSpecs@@EB ; `anonymous namespace'::MyItem::s_current_sort_specs
  00078	48 03 01	 add	 rax, QWORD PTR [rcx]
  0007b	48 89 45 68	 mov	 QWORD PTR sort_spec$2[rbp], rax

; 3643 :             int delta = 0;

  0007f	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR delta$3[rbp], 0

; 3644 :             switch (sort_spec->ColumnUserID)

  00089	48 8b 45 68	 mov	 rax, QWORD PTR sort_spec$2[rbp]
  0008d	8b 00		 mov	 eax, DWORD PTR [rax]
  0008f	89 85 54 01 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00095	83 bd 54 01 00
	00 00		 cmp	 DWORD PTR tv72[rbp], 0
  0009c	74 1d		 je	 SHORT $LN7@CompareWit
  0009e	83 bd 54 01 00
	00 01		 cmp	 DWORD PTR tv72[rbp], 1
  000a5	74 2a		 je	 SHORT $LN8@CompareWit
  000a7	83 bd 54 01 00
	00 03		 cmp	 DWORD PTR tv72[rbp], 3
  000ae	74 3e		 je	 SHORT $LN9@CompareWit
  000b0	83 bd 54 01 00
	00 04		 cmp	 DWORD PTR tv72[rbp], 4
  000b7	74 4d		 je	 SHORT $LN10@CompareWit
  000b9	eb 68		 jmp	 SHORT $LN11@CompareWit
$LN7@CompareWit:

; 3645 :             {
; 3646 :             case MyItemColumnID_ID:             delta = (a->ID - b->ID);                break;

  000bb	48 8b 45 08	 mov	 rax, QWORD PTR a$[rbp]
  000bf	48 8b 4d 28	 mov	 rcx, QWORD PTR b$[rbp]
  000c3	8b 09		 mov	 ecx, DWORD PTR [rcx]
  000c5	8b 00		 mov	 eax, DWORD PTR [rax]
  000c7	2b c1		 sub	 eax, ecx
  000c9	89 85 84 00 00
	00		 mov	 DWORD PTR delta$3[rbp], eax
  000cf	eb 74		 jmp	 SHORT $LN5@CompareWit
$LN8@CompareWit:

; 3647 :             case MyItemColumnID_Name:           delta = (strcmp(a->Name, b->Name));     break;

  000d1	48 8b 45 28	 mov	 rax, QWORD PTR b$[rbp]
  000d5	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  000d9	48 8b 45 08	 mov	 rax, QWORD PTR a$[rbp]
  000dd	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000e1	e8 00 00 00 00	 call	 strcmp
  000e6	89 85 84 00 00
	00		 mov	 DWORD PTR delta$3[rbp], eax
  000ec	eb 57		 jmp	 SHORT $LN5@CompareWit
$LN9@CompareWit:

; 3648 :             case MyItemColumnID_Quantity:       delta = (a->Quantity - b->Quantity);    break;

  000ee	48 8b 45 08	 mov	 rax, QWORD PTR a$[rbp]
  000f2	48 8b 4d 28	 mov	 rcx, QWORD PTR b$[rbp]
  000f6	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  000f9	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  000fc	2b c1		 sub	 eax, ecx
  000fe	89 85 84 00 00
	00		 mov	 DWORD PTR delta$3[rbp], eax
  00104	eb 3f		 jmp	 SHORT $LN5@CompareWit
$LN10@CompareWit:

; 3649 :             case MyItemColumnID_Description:    delta = (strcmp(a->Name, b->Name));     break;

  00106	48 8b 45 28	 mov	 rax, QWORD PTR b$[rbp]
  0010a	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0010e	48 8b 45 08	 mov	 rax, QWORD PTR a$[rbp]
  00112	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00116	e8 00 00 00 00	 call	 strcmp
  0011b	89 85 84 00 00
	00		 mov	 DWORD PTR delta$3[rbp], eax
  00121	eb 22		 jmp	 SHORT $LN5@CompareWit
$LN11@CompareWit:

; 3650 :             default: IM_ASSERT(0); break;

  00123	33 c0		 xor	 eax, eax
  00125	85 c0		 test	 eax, eax
  00127	75 1c		 jne	 SHORT $LN15@CompareWit
  00129	41 b8 42 0e 00
	00		 mov	 r8d, 3650		; 00000e42H
  0012f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@DPDGFNDC@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00136	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  0013d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00143	33 c0		 xor	 eax, eax
$LN15@CompareWit:
$LN5@CompareWit:

; 3651 :             }
; 3652 :             if (delta > 0)

  00145	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR delta$3[rbp], 0
  0014c	7e 30		 jle	 SHORT $LN12@CompareWit

; 3653 :                 return (sort_spec->SortDirection == ImGuiSortDirection_Ascending) ? +1 : -1;

  0014e	48 8b 45 68	 mov	 rax, QWORD PTR sort_spec$2[rbp]
  00152	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00155	c1 e0 18	 shl	 eax, 24
  00158	c1 f8 18	 sar	 eax, 24
  0015b	83 f8 01	 cmp	 eax, 1
  0015e	75 0c		 jne	 SHORT $LN16@CompareWit
  00160	c7 85 54 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv135[rbp], 1
  0016a	eb 0a		 jmp	 SHORT $LN17@CompareWit
$LN16@CompareWit:
  0016c	c7 85 54 01 00
	00 ff ff ff ff	 mov	 DWORD PTR tv135[rbp], -1
$LN17@CompareWit:
  00176	8b 85 54 01 00
	00		 mov	 eax, DWORD PTR tv135[rbp]
  0017c	eb 4c		 jmp	 SHORT $LN1@CompareWit
$LN12@CompareWit:

; 3654 :             if (delta < 0)

  0017e	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR delta$3[rbp], 0
  00185	7d 30		 jge	 SHORT $LN13@CompareWit

; 3655 :                 return (sort_spec->SortDirection == ImGuiSortDirection_Ascending) ? -1 : +1;

  00187	48 8b 45 68	 mov	 rax, QWORD PTR sort_spec$2[rbp]
  0018b	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0018e	c1 e0 18	 shl	 eax, 24
  00191	c1 f8 18	 sar	 eax, 24
  00194	83 f8 01	 cmp	 eax, 1
  00197	75 0c		 jne	 SHORT $LN18@CompareWit
  00199	c7 85 54 01 00
	00 ff ff ff ff	 mov	 DWORD PTR tv141[rbp], -1
  001a3	eb 0a		 jmp	 SHORT $LN19@CompareWit
$LN18@CompareWit:
  001a5	c7 85 54 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv141[rbp], 1
$LN19@CompareWit:
  001af	8b 85 54 01 00
	00		 mov	 eax, DWORD PTR tv141[rbp]
  001b5	eb 13		 jmp	 SHORT $LN1@CompareWit
$LN13@CompareWit:

; 3656 :         }

  001b7	e9 92 fe ff ff	 jmp	 $LN2@CompareWit
$LN3@CompareWit:

; 3657 : 
; 3658 :         // qsort() is instable so always return a way to differenciate items.
; 3659 :         // Your own compare function may want to avoid fallback on implicit sort specs e.g. a Name compare if it wasn't already part of the sort specs.
; 3660 :         return (a->ID - b->ID);

  001bc	48 8b 45 08	 mov	 rax, QWORD PTR a$[rbp]
  001c0	48 8b 4d 28	 mov	 rcx, QWORD PTR b$[rbp]
  001c4	8b 09		 mov	 ecx, DWORD PTR [rcx]
  001c6	8b 00		 mov	 eax, DWORD PTR [rax]
  001c8	2b c1		 sub	 eax, ecx
$LN1@CompareWit:

; 3661 :     }

  001ca	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  001d1	5f		 pop	 rdi
  001d2	5d		 pop	 rbp
  001d3	c3		 ret	 0
?CompareWithSortSpecs@MyItem@?A0x1ed25892@@SAHPEBX0@Z ENDP ; `anonymous namespace'::MyItem::CompareWithSortSpecs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Ffilter@?DIK@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ
text$yd	SEGMENT
??__Ffilter@?DIK@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ PROC ; `ShowDemoWindowWidgets'::`906'::`dynamic atexit destructor for 'filter'', COMDAT
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?filter@?DIK@??ShowDemoWindowWidgets@@YAXXZ@4UImGuiTextFilter@@A
  00025	e8 00 00 00 00	 call	 ??1ImGuiTextFilter@@QEAA@XZ
  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
??__Ffilter@?DIK@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ ENDP ; `ShowDemoWindowWidgets'::`906'::`dynamic atexit destructor for 'filter''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?Saw@Funcs@?CCM@??ShowDemoWindowWidgets@@YAXXZ@SAMPEAXH@Z
_TEXT	SEGMENT
tv66 = 192
__formal$ = 240
i$ = 248
?Saw@Funcs@?CCM@??ShowDemoWindowWidgets@@YAXXZ@SAMPEAXH@Z PROC ; `ShowDemoWindowWidgets'::`556'::Funcs::Saw, COMDAT

; 1695 :             static float Saw(void*, int i) { return (i & 1) ? 1.0f : -1.0f; }

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 10	 lea	 rbp, QWORD PTR [rsp+16]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR i$[rbp]
  00034	83 e0 01	 and	 eax, 1
  00037	85 c0		 test	 eax, eax
  00039	74 12		 je	 SHORT $LN3@Saw
  0003b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00043	f3 0f 11 85 c0
	00 00 00	 movss	 DWORD PTR tv66[rbp], xmm0
  0004b	eb 10		 jmp	 SHORT $LN4@Saw
$LN3@Saw:
  0004d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00055	f3 0f 11 85 c0
	00 00 00	 movss	 DWORD PTR tv66[rbp], xmm0
$LN4@Saw:
  0005d	f3 0f 10 85 c0
	00 00 00	 movss	 xmm0, DWORD PTR tv66[rbp]
  00065	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?Saw@Funcs@?CCM@??ShowDemoWindowWidgets@@YAXXZ@SAMPEAXH@Z ENDP ; `ShowDemoWindowWidgets'::`556'::Funcs::Saw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?Sin@Funcs@?CCM@??ShowDemoWindowWidgets@@YAXXZ@SAMPEAXH@Z
_TEXT	SEGMENT
__formal$ = 224
i$ = 232
?Sin@Funcs@?CCM@??ShowDemoWindowWidgets@@YAXXZ@SAMPEAXH@Z PROC ; `ShowDemoWindowWidgets'::`556'::Funcs::Sin, COMDAT

; 1694 :             static float Sin(void*, int i) { return sinf(i * 0.1f); }

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00012	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002e	f3 0f 2a 85 e8
	00 00 00	 cvtsi2ss xmm0, DWORD PTR i$[rbp]
  00036	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3dcccccd
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sinf
  00044	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?Sin@Funcs@?CCM@??ShowDemoWindowWidgets@@YAXXZ@SAMPEAXH@Z ENDP ; `ShowDemoWindowWidgets'::`556'::Funcs::Sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Factive_tabs@?CAI@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ
text$yd	SEGMENT
??__Factive_tabs@?CAI@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ PROC ; `ShowDemoWindowWidgets'::`520'::`dynamic atexit destructor for 'active_tabs'', COMDAT
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?active_tabs@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@H@@A
  00025	e8 00 00 00 00	 call	 ??1?$ImVector@H@@QEAA@XZ ; ImVector<int>::~ImVector<int>
  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
??__Factive_tabs@?CAI@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ ENDP ; `ShowDemoWindowWidgets'::`520'::`dynamic atexit destructor for 'active_tabs''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?find_erase_unsorted@?$ImVector@H@@QEAA_NAEBH@Z
_TEXT	SEGMENT
it$ = 8
this$ = 256
v$ = 264
?find_erase_unsorted@?$ImVector@H@@QEAA_NAEBH@Z PROC	; ImVector<int>::find_erase_unsorted, COMDAT

; 1818 :     inline bool         find_erase_unsorted(const T& v)     { const T* it = find(v); if (it < Data + Size) { erase_unsorted(it); return true; } return false; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00036	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ?find@?$ImVector@H@@QEAAPEAHAEBH@Z ; ImVector<int>::find
  00042	48 89 45 08	 mov	 QWORD PTR it$[rbp], rax
  00046	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00050	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00057	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005b	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0005f	48 39 45 08	 cmp	 QWORD PTR it$[rbp], rax
  00063	73 14		 jae	 SHORT $LN2@find_erase
  00065	48 8b 55 08	 mov	 rdx, QWORD PTR it$[rbp]
  00069	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00070	e8 00 00 00 00	 call	 ?erase_unsorted@?$ImVector@H@@QEAAPEAHPEBH@Z ; ImVector<int>::erase_unsorted
  00075	b0 01		 mov	 al, 1
  00077	eb 02		 jmp	 SHORT $LN1@find_erase
$LN2@find_erase:
  00079	32 c0		 xor	 al, al
$LN1@find_erase:
  0007b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00082	5f		 pop	 rdi
  00083	5d		 pop	 rbp
  00084	c3		 ret	 0
?find_erase_unsorted@?$ImVector@H@@QEAA_NAEBH@Z ENDP	; ImVector<int>::find_erase_unsorted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?find@?$ImVector@H@@QEAAPEAHAEBH@Z
_TEXT	SEGMENT
data$ = 8
data_end$ = 40
this$ = 288
v$ = 296
?find@?$ImVector@H@@QEAAPEAHAEBH@Z PROC			; ImVector<int>::find, COMDAT

; 1815 :     inline T*           find(const T& v)                    { T* data = Data;  const T* data_end = Data + Size; while (data < data_end) if (*data == v) break; else ++data; return data; }

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00038	48 89 45 08	 mov	 QWORD PTR data$[rbp], rax
  0003c	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00043	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00046	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00051	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00055	48 89 45 28	 mov	 QWORD PTR data_end$[rbp], rax
$LN2@find:
  00059	48 8b 45 28	 mov	 rax, QWORD PTR data_end$[rbp]
  0005d	48 39 45 08	 cmp	 QWORD PTR data$[rbp], rax
  00061	73 23		 jae	 SHORT $LN3@find
  00063	48 8b 45 08	 mov	 rax, QWORD PTR data$[rbp]
  00067	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  0006e	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00070	39 08		 cmp	 DWORD PTR [rax], ecx
  00072	75 04		 jne	 SHORT $LN4@find
  00074	eb 10		 jmp	 SHORT $LN3@find
  00076	eb 0c		 jmp	 SHORT $LN5@find
$LN4@find:
  00078	48 8b 45 08	 mov	 rax, QWORD PTR data$[rbp]
  0007c	48 83 c0 04	 add	 rax, 4
  00080	48 89 45 08	 mov	 QWORD PTR data$[rbp], rax
$LN5@find:
  00084	eb d3		 jmp	 SHORT $LN2@find
$LN3@find:
  00086	48 8b 45 08	 mov	 rax, QWORD PTR data$[rbp]
  0008a	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00091	5f		 pop	 rdi
  00092	5d		 pop	 rbp
  00093	c3		 ret	 0
?find@?$ImVector@H@@QEAAPEAHAEBH@Z ENDP			; ImVector<int>::find
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?contains@?$ImVector@H@@QEBA_NAEBH@Z
_TEXT	SEGMENT
data$ = 8
data_end$ = 40
tv73 = 244
tv74 = 248
tv75 = 252
this$ = 288
v$ = 296
?contains@?$ImVector@H@@QEBA_NAEBH@Z PROC		; ImVector<int>::contains, COMDAT

; 1814 :     inline bool         contains(const T& v) const          { const T* data = Data;  const T* data_end = Data + Size; while (data < data_end) if (*data++ == v) return true; return false; }

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00038	48 89 45 08	 mov	 QWORD PTR data$[rbp], rax
  0003c	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00043	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00046	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00051	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00055	48 89 45 28	 mov	 QWORD PTR data_end$[rbp], rax
$LN2@contains:
  00059	48 8b 45 28	 mov	 rax, QWORD PTR data_end$[rbp]
  0005d	48 39 45 08	 cmp	 QWORD PTR data$[rbp], rax
  00061	73 5a		 jae	 SHORT $LN3@contains
  00063	48 8b 45 08	 mov	 rax, QWORD PTR data$[rbp]
  00067	8b 00		 mov	 eax, DWORD PTR [rax]
  00069	89 85 f4 00 00
	00		 mov	 DWORD PTR tv73[rbp], eax
  0006f	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  00076	8b 00		 mov	 eax, DWORD PTR [rax]
  00078	89 85 f8 00 00
	00		 mov	 DWORD PTR tv74[rbp], eax
  0007e	48 8b 45 08	 mov	 rax, QWORD PTR data$[rbp]
  00082	48 83 c0 04	 add	 rax, 4
  00086	48 89 45 08	 mov	 QWORD PTR data$[rbp], rax
  0008a	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR tv74[rbp]
  00090	39 85 f4 00 00
	00		 cmp	 DWORD PTR tv73[rbp], eax
  00096	75 0c		 jne	 SHORT $LN6@contains
  00098	c7 85 fc 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv75[rbp], 1
  000a2	eb 0a		 jmp	 SHORT $LN7@contains
$LN6@contains:
  000a4	c7 85 fc 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv75[rbp], 0
$LN7@contains:
  000ae	83 bd fc 00 00
	00 00		 cmp	 DWORD PTR tv75[rbp], 0
  000b5	74 04		 je	 SHORT $LN4@contains
  000b7	b0 01		 mov	 al, 1
  000b9	eb 04		 jmp	 SHORT $LN1@contains
$LN4@contains:
  000bb	eb 9c		 jmp	 SHORT $LN2@contains
$LN3@contains:
  000bd	32 c0		 xor	 al, al
$LN1@contains:
  000bf	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000c6	5f		 pop	 rdi
  000c7	5d		 pop	 rbp
  000c8	c3		 ret	 0
?contains@?$ImVector@H@@QEBA_NAEBH@Z ENDP		; ImVector<int>::contains
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?erase_unsorted@?$ImVector@H@@QEAAPEAHPEBH@Z
_TEXT	SEGMENT
off$ = 8
this$ = 256
it$ = 264
?erase_unsorted@?$ImVector@H@@QEAAPEAHPEBH@Z PROC	; ImVector<int>::erase_unsorted, COMDAT

; 1812 :     inline T*           erase_unsorted(const T* it)         { IM_ASSERT(it >= Data && it < Data + Size);  const ptrdiff_t off = it - Data; if (it < Data + Size - 1) memcpy(Data + off, Data + Size - 1, sizeof(T)); Size--; return Data + off; }

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0003a	48 39 85 08 01
	00 00		 cmp	 QWORD PTR it$[rbp], rax
  00041	72 22		 jb	 SHORT $LN4@erase_unso
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0004d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00054	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00058	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0005c	48 39 85 08 01
	00 00		 cmp	 QWORD PTR it$[rbp], rax
  00063	72 1c		 jb	 SHORT $LN5@erase_unso
$LN4@erase_unso:
  00065	41 b8 14 07 00
	00		 mov	 r8d, 1812		; 00000714H
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@NPHOAPAC@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAt?$AA?5?$AA?$DM?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CL?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007f	33 c0		 xor	 eax, eax
$LN5@erase_unso:
  00081	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00088	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0008c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR it$[rbp]
  00093	48 2b c8	 sub	 rcx, rax
  00096	48 8b c1	 mov	 rax, rcx
  00099	48 c1 f8 02	 sar	 rax, 2
  0009d	48 89 45 08	 mov	 QWORD PTR off$[rbp], rax
  000a1	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a8	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  000ab	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b2	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000b6	48 8d 44 81 fc	 lea	 rax, QWORD PTR [rcx+rax*4-4]
  000bb	48 39 85 08 01
	00 00		 cmp	 QWORD PTR it$[rbp], rax
  000c2	73 3b		 jae	 SHORT $LN2@erase_unso
  000c4	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000cb	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  000ce	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d5	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000d9	48 8d 44 81 fc	 lea	 rax, QWORD PTR [rcx+rax*4-4]
  000de	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e5	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000e9	48 8b 55 08	 mov	 rdx, QWORD PTR off$[rbp]
  000ed	48 8d 0c 91	 lea	 rcx, QWORD PTR [rcx+rdx*4]
  000f1	41 b8 04 00 00
	00		 mov	 r8d, 4
  000f7	48 8b d0	 mov	 rdx, rax
  000fa	e8 00 00 00 00	 call	 memcpy
$LN2@erase_unso:
  000ff	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00106	8b 00		 mov	 eax, DWORD PTR [rax]
  00108	ff c8		 dec	 eax
  0010a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00111	89 01		 mov	 DWORD PTR [rcx], eax
  00113	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0011a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0011e	48 8b 4d 08	 mov	 rcx, QWORD PTR off$[rbp]
  00122	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00126	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0012d	5f		 pop	 rdi
  0012e	5d		 pop	 rbp
  0012f	c3		 ret	 0
?erase_unsorted@?$ImVector@H@@QEAAPEAHPEBH@Z ENDP	; ImVector<int>::erase_unsorted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?erase@?$ImVector@H@@QEAAPEAHPEBH@Z
_TEXT	SEGMENT
off$ = 8
tv93 = 216
this$ = 256
it$ = 264
?erase@?$ImVector@H@@QEAAPEAHPEBH@Z PROC		; ImVector<int>::erase, COMDAT

; 1810 :     inline T*           erase(const T* it)                  { IM_ASSERT(it >= Data && it < Data + Size); const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + 1, ((size_t)Size - (size_t)off - 1) * sizeof(T)); Size--; return Data + off; }

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0003a	48 39 85 08 01
	00 00		 cmp	 QWORD PTR it$[rbp], rax
  00041	72 22		 jb	 SHORT $LN3@erase
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0004d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00054	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00058	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0005c	48 39 85 08 01
	00 00		 cmp	 QWORD PTR it$[rbp], rax
  00063	72 1c		 jb	 SHORT $LN4@erase
$LN3@erase:
  00065	41 b8 12 07 00
	00		 mov	 r8d, 1810		; 00000712H
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@NPHOAPAC@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAt?$AA?5?$AA?$DM?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CL?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007f	33 c0		 xor	 eax, eax
$LN4@erase:
  00081	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00088	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0008c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR it$[rbp]
  00093	48 2b c8	 sub	 rcx, rax
  00096	48 8b c1	 mov	 rax, rcx
  00099	48 c1 f8 02	 sar	 rax, 2
  0009d	48 89 45 08	 mov	 QWORD PTR off$[rbp], rax
  000a1	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a8	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  000ab	48 2b 45 08	 sub	 rax, QWORD PTR off$[rbp]
  000af	48 8d 04 85 fc
	ff ff ff	 lea	 rax, QWORD PTR [rax*4-4]
  000b7	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000be	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000c2	48 8b 55 08	 mov	 rdx, QWORD PTR off$[rbp]
  000c6	48 8d 4c 91 04	 lea	 rcx, QWORD PTR [rcx+rdx*4+4]
  000cb	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  000d2	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  000d6	4c 8b 45 08	 mov	 r8, QWORD PTR off$[rbp]
  000da	4a 8d 14 82	 lea	 rdx, QWORD PTR [rdx+r8*4]
  000de	48 89 95 d8 00
	00 00		 mov	 QWORD PTR tv93[rbp], rdx
  000e5	4c 8b c0	 mov	 r8, rax
  000e8	48 8b d1	 mov	 rdx, rcx
  000eb	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv93[rbp]
  000f2	48 8b c8	 mov	 rcx, rax
  000f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memmove
  000fb	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00102	8b 00		 mov	 eax, DWORD PTR [rax]
  00104	ff c8		 dec	 eax
  00106	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0010d	89 01		 mov	 DWORD PTR [rcx], eax
  0010f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00116	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0011a	48 8b 4d 08	 mov	 rcx, QWORD PTR off$[rbp]
  0011e	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00122	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00129	5f		 pop	 rdi
  0012a	5d		 pop	 rbp
  0012b	c3		 ret	 0
?erase@?$ImVector@H@@QEAAPEAHPEBH@Z ENDP		; ImVector<int>::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@H@@QEAAXAEBH@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@H@@QEAAXAEBH@Z PROC		; ImVector<int>::push_back, COMDAT

; 1807 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00040	39 08		 cmp	 DWORD PTR [rax], ecx
  00042	75 27		 jne	 SHORT $LN2@push_back
  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	8b 00		 mov	 eax, DWORD PTR [rax]
  0004d	ff c0		 inc	 eax
  0004f	8b d0		 mov	 edx, eax
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@H@@QEBAHH@Z ; ImVector<int>::_grow_capacity
  0005d	8b d0		 mov	 edx, eax
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?reserve@?$ImVector@H@@QEAAXH@Z ; ImVector<int>::reserve
$LN2@push_back:
  0006b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00075	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00080	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00084	41 b8 04 00 00
	00		 mov	 r8d, 4
  0008a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00091	48 8b c8	 mov	 rcx, rax
  00094	e8 00 00 00 00	 call	 memcpy
  00099	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a0	8b 00		 mov	 eax, DWORD PTR [rax]
  000a2	ff c0		 inc	 eax
  000a4	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	89 01		 mov	 DWORD PTR [rcx], eax
  000ad	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b4	5f		 pop	 rdi
  000b5	5d		 pop	 rbp
  000b6	c3		 ret	 0
?push_back@?$ImVector@H@@QEAAXAEBH@Z ENDP		; ImVector<int>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@H@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@H@@QEAAXH@Z PROC			; ImVector<int>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 c1 e0 02	 shl	 rax, 2
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 c1 e0 02	 shl	 rax, 2
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@H@@QEAAXH@Z ENDP			; ImVector<int>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@H@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@H@@QEBAHH@Z PROC		; ImVector<int>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@H@@QEBAHH@Z ENDP		; ImVector<int>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@H@@QEAAAEAHH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@H@@QEAAAEAHH@Z PROC			; ImVector<int>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00076	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@H@@QEAAAEAHH@Z ENDP			; ImVector<int>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@H@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@H@@QEAAXXZ PROC			; ImVector<int>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@H@@QEAAXXZ ENDP			; ImVector<int>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@H@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@H@@QEAA@XZ PROC				; ImVector<int>::~ImVector<int>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@H@@QEAA@XZ ENDP				; ImVector<int>::~ImVector<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@H@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@H@@QEAA@XZ PROC				; ImVector<int>::ImVector<int>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@H@@QEAA@XZ ENDP				; ImVector<int>::ImVector<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Fmy_str@?BMK@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ
text$yd	SEGMENT
??__Fmy_str@?BMK@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ PROC ; `ShowDemoWindowWidgets'::`458'::`dynamic atexit destructor for 'my_str'', COMDAT
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?my_str@?BMK@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@D@@A
  00025	e8 00 00 00 00	 call	 ??1?$ImVector@D@@QEAA@XZ ; ImVector<char>::~ImVector<char>
  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
??__Fmy_str@?BMK@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ ENDP ; `ShowDemoWindowWidgets'::`458'::`dynamic atexit destructor for 'my_str''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?MyInputTextMultiline@Funcs@?BMK@??ShowDemoWindowWidgets@@YAXXZ@SA_NPEBDPEAU?$ImVector@D@@AEBUImVec2@@H@Z
_TEXT	SEGMENT
tv73 = 192
tv78 = 200
label$ = 240
my_str$ = 248
size$ = 256
flags$ = 264
?MyInputTextMultiline@Funcs@?BMK@??ShowDemoWindowWidgets@@YAXXZ@SA_NPEBDPEAU?$ImVector@D@@AEBUImVec2@@H@Z PROC ; `ShowDemoWindowWidgets'::`458'::Funcs::MyInputTextMultiline, COMDAT

; 1482 :                 {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001d	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]

; 1483 :                     IM_ASSERT((flags & ImGuiInputTextFlags_CallbackResize) == 0);

  00039	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  0003f	25 00 00 04 00	 and	 eax, 262144		; 00040000H
  00044	85 c0		 test	 eax, eax
  00046	74 1c		 je	 SHORT $LN3@MyInputTex
  00048	41 b8 cb 05 00
	00		 mov	 r8d, 1483		; 000005cbH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@DPDGFNDC@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GE@PBHHHBJD@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi?$AAI?$AAn?$AAp?$AAu?$AAt?$AAT?$AAe?$AAx?$AAt?$AAF?$AAl?$AAa?$AAg?$AAs?$AA_?$AAC?$AAa?$AAl@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN3@MyInputTex:

; 1484 :                     return ImGui::InputTextMultiline(label, my_str->begin(), (size_t)my_str->size(), size, flags | ImGuiInputTextFlags_CallbackResize, Funcs::MyResizeCallback, (void*)my_str);

  00064	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR flags$[rbp]
  0006a	0f ba e8 12	 bts	 eax, 18
  0006e	89 85 c0 00 00
	00		 mov	 DWORD PTR tv73[rbp], eax
  00074	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR my_str$[rbp]
  0007b	e8 00 00 00 00	 call	 ?size@?$ImVector@D@@QEBAHXZ ; ImVector<char>::size
  00080	48 98		 cdqe
  00082	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv78[rbp], rax
  00089	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR my_str$[rbp]
  00090	e8 00 00 00 00	 call	 ?begin@?$ImVector@D@@QEAAPEADXZ ; ImVector<char>::begin
  00095	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR my_str$[rbp]
  0009c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?MyResizeCallback@Funcs@?BMK@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z ; `ShowDemoWindowWidgets'::`458'::Funcs::MyResizeCallback
  000a8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ad	8b 8d c0 00 00
	00		 mov	 ecx, DWORD PTR tv73[rbp]
  000b3	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000b7	4c 8b 8d 00 01
	00 00		 mov	 r9, QWORD PTR size$[rbp]
  000be	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR tv78[rbp]
  000c5	4c 8b c1	 mov	 r8, rcx
  000c8	48 8b d0	 mov	 rdx, rax
  000cb	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR label$[rbp]
  000d2	e8 00 00 00 00	 call	 ?InputTextMultiline@ImGui@@YA_NPEBDPEAD_KAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputTextMultiline

; 1485 :                 }

  000d7	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000de	5f		 pop	 rdi
  000df	5d		 pop	 rbp
  000e0	c3		 ret	 0
?MyInputTextMultiline@Funcs@?BMK@??ShowDemoWindowWidgets@@YAXXZ@SA_NPEBDPEAU?$ImVector@D@@AEBUImVec2@@H@Z ENDP ; `ShowDemoWindowWidgets'::`458'::Funcs::MyInputTextMultiline
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?MyResizeCallback@Funcs@?BMK@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z
_TEXT	SEGMENT
my_str$1 = 8
data$ = 256
?MyResizeCallback@Funcs@?BMK@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z PROC ; `ShowDemoWindowWidgets'::`458'::Funcs::MyResizeCallback, COMDAT

; 1468 :                 {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 1469 :                     if (data->EventFlag == ImGuiInputTextFlags_CallbackResize)

  0002a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00031	81 38 00 00 04
	00		 cmp	 DWORD PTR [rax], 262144	; 00040000H
  00037	75 68		 jne	 SHORT $LN2@MyResizeCa

; 1470 :                     {
; 1471 :                         ImVector<char>* my_str = (ImVector<char>*)data->UserData;

  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00040	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00044	48 89 45 08	 mov	 QWORD PTR my_str$1[rbp], rax

; 1472 :                         IM_ASSERT(my_str->begin() == data->Buf);

  00048	48 8b 4d 08	 mov	 rcx, QWORD PTR my_str$1[rbp]
  0004c	e8 00 00 00 00	 call	 ?begin@?$ImVector@D@@QEAAPEADXZ ; ImVector<char>::begin
  00051	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00058	48 3b 41 18	 cmp	 rax, QWORD PTR [rcx+24]
  0005c	74 1c		 je	 SHORT $LN4@MyResizeCa
  0005e	41 b8 c0 05 00
	00		 mov	 r8d, 1472		; 000005c0H
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@DPDGFNDC@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@GBCOMGGK@?$AAm?$AAy?$AA_?$AAs?$AAt?$AAr?$AA?9?$AA?$DO?$AAb?$AAe?$AAg?$AAi?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAB?$AAu?$AAf?$AA?$AA@
  00072	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00078	33 c0		 xor	 eax, eax
$LN4@MyResizeCa:

; 1473 :                         my_str->resize(data->BufSize); // NB: On resizing calls, generally data->BufSize == data->BufTextLen + 1

  0007a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00081	8b 50 24	 mov	 edx, DWORD PTR [rax+36]
  00084	48 8b 4d 08	 mov	 rcx, QWORD PTR my_str$1[rbp]
  00088	e8 00 00 00 00	 call	 ?resize@?$ImVector@D@@QEAAXH@Z ; ImVector<char>::resize

; 1474 :                         data->Buf = my_str->begin();

  0008d	48 8b 4d 08	 mov	 rcx, QWORD PTR my_str$1[rbp]
  00091	e8 00 00 00 00	 call	 ?begin@?$ImVector@D@@QEAAPEADXZ ; ImVector<char>::begin
  00096	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0009d	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
$LN2@MyResizeCa:

; 1475 :                     }
; 1476 :                     return 0;

  000a1	33 c0		 xor	 eax, eax

; 1477 :                 }

  000a3	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000aa	5f		 pop	 rdi
  000ab	5d		 pop	 rbp
  000ac	c3		 ret	 0
?MyResizeCallback@Funcs@?BMK@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z ENDP ; `ShowDemoWindowWidgets'::`458'::Funcs::MyResizeCallback
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?MyCallback@Funcs@?BMD@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z
_TEXT	SEGMENT
c$1 = 4
p_int$2 = 40
data$ = 288
?MyCallback@Funcs@?BMD@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z PROC ; `ShowDemoWindowWidgets'::`451'::Funcs::MyCallback, COMDAT

; 1405 :                 {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 1406 :                     if (data->EventFlag == ImGuiInputTextFlags_CallbackCompletion)

  0002a	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00031	83 38 40	 cmp	 DWORD PTR [rax], 64	; 00000040H
  00034	75 25		 jne	 SHORT $LN2@MyCallback

; 1407 :                     {
; 1408 :                         data->InsertChars(data->CursorPos, "..");

  00036	45 33 c9	 xor	 r9d, r9d
  00039	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02DJGKEECL@?4?4?$AA@
  00040	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00047	8b 50 2c	 mov	 edx, DWORD PTR [rax+44]
  0004a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00051	e8 00 00 00 00	 call	 ?InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z ; ImGuiInputTextCallbackData::InsertChars
  00056	e9 60 01 00 00	 jmp	 $LN3@MyCallback
$LN2@MyCallback:

; 1409 :                     }
; 1410 :                     else if (data->EventFlag == ImGuiInputTextFlags_CallbackHistory)

  0005b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00062	81 38 80 00 00
	00		 cmp	 DWORD PTR [rax], 128	; 00000080H
  00068	0f 85 a1 00 00
	00		 jne	 $LN4@MyCallback

; 1411 :                     {
; 1412 :                         if (data->EventKey == ImGuiKey_UpArrow)

  0006e	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00075	81 78 14 03 02
	00 00		 cmp	 DWORD PTR [rax+20], 515	; 00000203H
  0007c	75 3f		 jne	 SHORT $LN6@MyCallback

; 1413 :                         {
; 1414 :                             data->DeleteChars(0, data->BufTextLen);

  0007e	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00085	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  00089	33 d2		 xor	 edx, edx
  0008b	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00092	e8 00 00 00 00	 call	 ?DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z ; ImGuiInputTextCallbackData::DeleteChars

; 1415 :                             data->InsertChars(0, "Pressed Up!");

  00097	45 33 c9	 xor	 r9d, r9d
  0009a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@GNLHKNNA@Pressed?5Up?$CB?$AA@
  000a1	33 d2		 xor	 edx, edx
  000a3	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000aa	e8 00 00 00 00	 call	 ?InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z ; ImGuiInputTextCallbackData::InsertChars

; 1416 :                             data->SelectAll();

  000af	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000b6	e8 00 00 00 00	 call	 ?SelectAll@ImGuiInputTextCallbackData@@QEAAXXZ ; ImGuiInputTextCallbackData::SelectAll
  000bb	eb 4d		 jmp	 SHORT $LN7@MyCallback
$LN6@MyCallback:

; 1417 :                         }
; 1418 :                         else if (data->EventKey == ImGuiKey_DownArrow)

  000bd	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  000c4	81 78 14 04 02
	00 00		 cmp	 DWORD PTR [rax+20], 516	; 00000204H
  000cb	75 3d		 jne	 SHORT $LN8@MyCallback

; 1419 :                         {
; 1420 :                             data->DeleteChars(0, data->BufTextLen);

  000cd	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  000d4	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000d8	33 d2		 xor	 edx, edx
  000da	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000e1	e8 00 00 00 00	 call	 ?DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z ; ImGuiInputTextCallbackData::DeleteChars

; 1421 :                             data->InsertChars(0, "Pressed Down!");

  000e6	45 33 c9	 xor	 r9d, r9d
  000e9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@CDNFAFCH@Pressed?5Down?$CB?$AA@
  000f0	33 d2		 xor	 edx, edx
  000f2	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  000f9	e8 00 00 00 00	 call	 ?InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z ; ImGuiInputTextCallbackData::InsertChars

; 1422 :                             data->SelectAll();

  000fe	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00105	e8 00 00 00 00	 call	 ?SelectAll@ImGuiInputTextCallbackData@@QEAAXXZ ; ImGuiInputTextCallbackData::SelectAll
$LN8@MyCallback:
$LN7@MyCallback:

; 1423 :                         }
; 1424 :                     }

  0010a	e9 ac 00 00 00	 jmp	 $LN5@MyCallback
$LN4@MyCallback:

; 1425 :                     else if (data->EventFlag == ImGuiInputTextFlags_CallbackEdit)

  0010f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00116	81 38 00 00 08
	00		 cmp	 DWORD PTR [rax], 524288	; 00080000H
  0011c	0f 85 99 00 00
	00		 jne	 $LN9@MyCallback

; 1426 :                     {
; 1427 :                         // Toggle casing of first character
; 1428 :                         char c = data->Buf[0];

  00122	b8 01 00 00 00	 mov	 eax, 1
  00127	48 6b c0 00	 imul	 rax, rax, 0
  0012b	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00132	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00136	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0013a	88 45 04	 mov	 BYTE PTR c$1[rbp], al

; 1429 :                         if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) data->Buf[0] ^= 32;

  0013d	0f be 45 04	 movsx	 eax, BYTE PTR c$1[rbp]
  00141	83 f8 61	 cmp	 eax, 97			; 00000061H
  00144	7c 09		 jl	 SHORT $LN12@MyCallback
  00146	0f be 45 04	 movsx	 eax, BYTE PTR c$1[rbp]
  0014a	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  0014d	7e 12		 jle	 SHORT $LN11@MyCallback
$LN12@MyCallback:
  0014f	0f be 45 04	 movsx	 eax, BYTE PTR c$1[rbp]
  00153	83 f8 41	 cmp	 eax, 65			; 00000041H
  00156	7c 3b		 jl	 SHORT $LN10@MyCallback
  00158	0f be 45 04	 movsx	 eax, BYTE PTR c$1[rbp]
  0015c	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  0015f	7f 32		 jg	 SHORT $LN10@MyCallback
$LN11@MyCallback:
  00161	b8 01 00 00 00	 mov	 eax, 1
  00166	48 6b c0 00	 imul	 rax, rax, 0
  0016a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  00171	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00175	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00179	83 f0 20	 xor	 eax, 32			; 00000020H
  0017c	b9 01 00 00 00	 mov	 ecx, 1
  00181	48 6b c9 00	 imul	 rcx, rcx, 0
  00185	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR data$[rbp]
  0018c	48 8b 52 18	 mov	 rdx, QWORD PTR [rdx+24]
  00190	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
$LN10@MyCallback:

; 1430 :                         data->BufDirty = true;

  00193	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  0019a	c6 40 28 01	 mov	 BYTE PTR [rax+40], 1

; 1431 : 
; 1432 :                         // Increment a counter
; 1433 :                         int* p_int = (int*)data->UserData;

  0019e	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  001a5	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001a9	48 89 45 28	 mov	 QWORD PTR p_int$2[rbp], rax

; 1434 :                         *p_int = *p_int + 1;

  001ad	48 8b 45 28	 mov	 rax, QWORD PTR p_int$2[rbp]
  001b1	8b 00		 mov	 eax, DWORD PTR [rax]
  001b3	ff c0		 inc	 eax
  001b5	48 8b 4d 28	 mov	 rcx, QWORD PTR p_int$2[rbp]
  001b9	89 01		 mov	 DWORD PTR [rcx], eax
$LN9@MyCallback:
$LN5@MyCallback:
$LN3@MyCallback:

; 1435 :                     }
; 1436 :                     return 0;

  001bb	33 c0		 xor	 eax, eax

; 1437 :                 }

  001bd	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  001c4	5f		 pop	 rdi
  001c5	5d		 pop	 rbp
  001c6	c3		 ret	 0
?MyCallback@Funcs@?BMD@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z ENDP ; `ShowDemoWindowWidgets'::`451'::Funcs::MyCallback
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?FilterImGuiLetters@TextFilters@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z
_TEXT	SEGMENT
data$ = 224
?FilterImGuiLetters@TextFilters@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z PROC ; `ShowDemoWindowWidgets'::`441'::TextFilters::FilterImGuiLetters, COMDAT

; 1373 :                 {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1374 :                     if (data->EventChar < 256 && strchr("imgui", (char)data->EventChar))

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00031	0f b7 40 10	 movzx	 eax, WORD PTR [rax+16]
  00035	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0003a	7d 23		 jge	 SHORT $LN2@FilterImGu
  0003c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR data$[rbp]
  00043	0f be 40 10	 movsx	 eax, BYTE PTR [rax+16]
  00047	8b d0		 mov	 edx, eax
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05EAJAAGNN@imgui?$AA@
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  00056	48 85 c0	 test	 rax, rax
  00059	74 04		 je	 SHORT $LN2@FilterImGu

; 1375 :                         return 0;

  0005b	33 c0		 xor	 eax, eax
  0005d	eb 05		 jmp	 SHORT $LN1@FilterImGu
$LN2@FilterImGu:

; 1376 :                     return 1;

  0005f	b8 01 00 00 00	 mov	 eax, 1
$LN1@FilterImGu:

; 1377 :                 }

  00064	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006b	5f		 pop	 rdi
  0006c	5d		 pop	 rbp
  0006d	c3		 ret	 0
?FilterImGuiLetters@TextFilters@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z ENDP ; `ShowDemoWindowWidgets'::`441'::TextFilters::FilterImGuiLetters
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ItemGetter@Funcs@?BAP@??ShowDemoWindowWidgets@@YAXXZ@SA_NPEAXHPEAPEBD@Z
_TEXT	SEGMENT
data$ = 224
n$ = 232
out_str$ = 240
?ItemGetter@Funcs@?BAP@??ShowDemoWindowWidgets@@YAXXZ@SA_NPEAXHPEAPEBD@Z PROC ; `ShowDemoWindowWidgets'::`271'::Funcs::ItemGetter, COMDAT

; 1127 :         struct Funcs { static bool ItemGetter(void* data, int n, const char** out_str) { *out_str = ((const char**)data)[n]; return true; } };

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00017	48 8b ec	 mov	 rbp, rsp
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00031	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR n$[rbp]
  00038	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR out_str$[rbp]
  0003f	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR data$[rbp]
  00046	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0004a	48 89 01	 mov	 QWORD PTR [rcx], rax
  0004d	b0 01		 mov	 al, 1
  0004f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00056	5f		 pop	 rdi
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
?ItemGetter@Funcs@?BAP@??ShowDemoWindowWidgets@@YAXXZ@SA_NPEAXHPEAPEBD@Z ENDP ; `ShowDemoWindowWidgets'::`271'::Funcs::ItemGetter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?HelpMarker@@YAXPEBD@Z
_TEXT	SEGMENT
desc$ = 224
?HelpMarker@@YAXPEBD@Z PROC				; HelpMarker, COMDAT

; 212  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 213  :     ImGui::TextDisabled("(?)");

  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03NAEMJKHE@?$CI?$DP?$CJ?$AA@
  00031	e8 00 00 00 00	 call	 ?TextDisabled@ImGui@@YAXPEBDZZ ; ImGui::TextDisabled

; 214  :     if (ImGui::IsItemHovered(ImGuiHoveredFlags_DelayShort))

  00036	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  0003b	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  00040	0f b6 c0	 movzx	 eax, al
  00043	85 c0		 test	 eax, eax
  00045	74 2f		 je	 SHORT $LN2@HelpMarker

; 215  :     {
; 216  :         ImGui::BeginTooltip();

  00047	e8 00 00 00 00	 call	 ?BeginTooltip@ImGui@@YAXXZ ; ImGui::BeginTooltip

; 217  :         ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);

  0004c	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  00051	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@420c0000
  00059	e8 00 00 00 00	 call	 ?PushTextWrapPos@ImGui@@YAXM@Z ; ImGui::PushTextWrapPos

; 218  :         ImGui::TextUnformatted(desc);

  0005e	33 d2		 xor	 edx, edx
  00060	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR desc$[rbp]
  00067	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted

; 219  :         ImGui::PopTextWrapPos();

  0006c	e8 00 00 00 00	 call	 ?PopTextWrapPos@ImGui@@YAXXZ ; ImGui::PopTextWrapPos

; 220  :         ImGui::EndTooltip();

  00071	e8 00 00 00 00	 call	 ?EndTooltip@ImGui@@YAXXZ ; ImGui::EndTooltip
$LN2@HelpMarker:

; 221  :     }
; 222  : }

  00076	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0007d	5f		 pop	 rdi
  0007e	5d		 pop	 rbp
  0007f	c3		 ret	 0
?HelpMarker@@YAXPEBD@Z ENDP				; HelpMarker
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowDemoWindowInputs@@YAXXZ
_TEXT	SEGMENT
io$9 = 8
i$10 = 36
key$11 = 68
i$12 = 100
c$13 = 132
capture_override_desc$14 = 168
mouse_cursors_names$15 = 224
current$16 = 324
i$17 = 356
label$18 = 392
focus_1$19 = 452
focus_2$20 = 484
focus_3$21 = 516
has_focus$22 = 548
focus_ahead$23 = 580
button$24 = 612
value_raw$25 = 648
value_with_lock_threshold$26 = 680
mouse_delta$27 = 712
$T28 = 1316
$T29 = 1348
$T30 = 1396
$T31 = 1428
$T32 = 1460
$T33 = 1492
$T34 = 1524
$T35 = 1556
$T36 = 1588
$T37 = 1620
tv705 = 1636
tv376 = 1636
tv368 = 1636
tv233 = 1636
tv709 = 1640
tv350 = 1640
tv198 = 1640
tv185 = 1640
tv713 = 1648
tv203 = 1648
tv208 = 1656
tv213 = 1664
__$ArrayPad$ = 1672
?ShowDemoWindowInputs@@YAXXZ PROC			; ShowDemoWindowInputs, COMDAT

; 5694 : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec c8 06
	00 00		 sub	 rsp, 1736		; 000006c8H
  0000a	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 b2 01 00 00	 mov	 ecx, 434		; 000001b2H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00025	48 33 c5	 xor	 rax, rbp
  00028	48 89 85 88 06
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
$LN4@ShowDemoWi:

; 5695 :     IMGUI_DEMO_MARKER("Inputs & Focus");

  0002f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00037	74 25		 je	 SHORT $LN41@ShowDemoWi
  00039	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowInputs@@YAXXZ@4JA
  0003f	ff c0		 inc	 eax
  00041	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00048	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@EJPGNOEJ@Inputs?5?$CG?5Focus?$AA@
  0004f	8b d0		 mov	 edx, eax
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN41@ShowDemoWi:
  0005e	33 c0		 xor	 eax, eax
  00060	85 c0		 test	 eax, eax
  00062	75 cb		 jne	 SHORT $LN4@ShowDemoWi

; 5696 :     if (ImGui::CollapsingHeader("Inputs & Focus"))

  00064	33 d2		 xor	 edx, edx
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@EJPGNOEJ@Inputs?5?$CG?5Focus?$AA@
  0006d	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPEBDH@Z ; ImGui::CollapsingHeader
  00072	0f b6 c0	 movzx	 eax, al
  00075	85 c0		 test	 eax, eax
  00077	0f 84 27 10 00
	00		 je	 $LN42@ShowDemoWi

; 5697 :     {
; 5698 :         ImGuiIO& io = ImGui::GetIO();

  0007d	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  00082	48 89 45 08	 mov	 QWORD PTR io$9[rbp], rax
$LN7@ShowDemoWi:

; 5699 : 
; 5700 :         // Display inputs submitted to ImGuiIO
; 5701 :         IMGUI_DEMO_MARKER("Inputs & Focus/Inputs");

  00086	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0008e	74 26		 je	 SHORT $LN43@ShowDemoWi
  00090	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowInputs@@YAXXZ@4JA
  00096	83 c0 07	 add	 eax, 7
  00099	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  000a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@OJCNILBN@Inputs?5?$CG?5Focus?1Inputs?$AA@
  000a7	8b d0		 mov	 edx, eax
  000a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  000b0	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN43@ShowDemoWi:
  000b6	33 c0		 xor	 eax, eax
  000b8	85 c0		 test	 eax, eax
  000ba	75 ca		 jne	 SHORT $LN7@ShowDemoWi

; 5702 :         ImGui::SetNextItemOpen(true, ImGuiCond_Once);

  000bc	ba 02 00 00 00	 mov	 edx, 2
  000c1	b1 01		 mov	 cl, 1
  000c3	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen

; 5703 :         if (ImGui::TreeNode("Inputs"))

  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06HDCHCENJ@Inputs?$AA@
  000cf	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  000d4	0f b6 c0	 movzx	 eax, al
  000d7	85 c0		 test	 eax, eax
  000d9	0f 84 81 03 00
	00		 je	 $LN44@ShowDemoWi

; 5704 :         {
; 5705 :             HelpMarker(

  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0HP@GHCMDAED@This?5is?5a?5simplified?5view?4?5See?5m@
  000e6	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5706 :                 "This is a simplified view. See more detailed input state:\n"
; 5707 :                 "- in 'Tools->Metrics/Debugger->Inputs'.\n"
; 5708 :                 "- in 'Tools->Debug Log->IO'.");
; 5709 :             if (ImGui::IsMousePosValid())

  000eb	33 c9		 xor	 ecx, ecx
  000ed	e8 00 00 00 00	 call	 ?IsMousePosValid@ImGui@@YA_NPEBUImVec2@@@Z ; ImGui::IsMousePosValid
  000f2	0f b6 c0	 movzx	 eax, al
  000f5	85 c0		 test	 eax, eax
  000f7	74 33		 je	 SHORT $LN45@ShowDemoWi

; 5710 :                 ImGui::Text("Mouse pos: (%g, %g)", io.MousePos.x, io.MousePos.y);

  000f9	48 8b 45 08	 mov	 rax, QWORD PTR io$9[rbp]
  000fd	f3 0f 5a 80 f8
	0d 00 00	 cvtss2sd xmm0, DWORD PTR [rax+3576]
  00105	48 8b 45 08	 mov	 rax, QWORD PTR io$9[rbp]
  00109	f3 0f 5a 88 f4
	0d 00 00	 cvtss2sd xmm1, DWORD PTR [rax+3572]
  00111	0f 28 d0	 movaps	 xmm2, xmm0
  00114	66 49 0f 7e d0	 movq	 r8, xmm2
  00119	66 48 0f 7e ca	 movq	 rdx, xmm1
  0011e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@HGGCPGOH@Mouse?5pos?3?5?$CI?$CFg?0?5?$CFg?$CJ?$AA@
  00125	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5711 :             else

  0012a	eb 0c		 jmp	 SHORT $LN46@ShowDemoWi
$LN45@ShowDemoWi:

; 5712 :                 ImGui::Text("Mouse pos: <INVALID>");

  0012c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@BCIGOCNH@Mouse?5pos?3?5?$DMINVALID?$DO?$AA@
  00133	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN46@ShowDemoWi:

; 5713 :             ImGui::Text("Mouse delta: (%g, %g)", io.MouseDelta.x, io.MouseDelta.y);

  00138	48 8b 45 08	 mov	 rax, QWORD PTR io$9[rbp]
  0013c	f3 0f 5a 80 f4
	00 00 00	 cvtss2sd xmm0, DWORD PTR [rax+244]
  00144	48 8b 45 08	 mov	 rax, QWORD PTR io$9[rbp]
  00148	f3 0f 5a 88 f0
	00 00 00	 cvtss2sd xmm1, DWORD PTR [rax+240]
  00150	0f 28 d0	 movaps	 xmm2, xmm0
  00153	66 49 0f 7e d0	 movq	 r8, xmm2
  00158	66 48 0f 7e ca	 movq	 rdx, xmm1
  0015d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@MNNMKHFC@Mouse?5delta?3?5?$CI?$CFg?0?5?$CFg?$CJ?$AA@
  00164	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5714 :             ImGui::Text("Mouse down:");

  00169	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@HODNMGFJ@Mouse?5down?3?$AA@
  00170	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5715 :             for (int i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (ImGui::IsMouseDown(i)) { ImGui::SameLine(); ImGui::Text("b%d (%.02f secs)", i, io.MouseDownDuration[i]); }

  00175	c7 45 24 00 00
	00 00		 mov	 DWORD PTR i$10[rbp], 0
  0017c	eb 08		 jmp	 SHORT $LN10@ShowDemoWi
$LN8@ShowDemoWi:
  0017e	8b 45 24	 mov	 eax, DWORD PTR i$10[rbp]
  00181	ff c0		 inc	 eax
  00183	89 45 24	 mov	 DWORD PTR i$10[rbp], eax
$LN10@ShowDemoWi:
  00186	83 7d 24 05	 cmp	 DWORD PTR i$10[rbp], 5
  0018a	7d 49		 jge	 SHORT $LN9@ShowDemoWi
  0018c	8b 4d 24	 mov	 ecx, DWORD PTR i$10[rbp]
  0018f	e8 00 00 00 00	 call	 ?IsMouseDown@ImGui@@YA_NH@Z ; ImGui::IsMouseDown
  00194	0f b6 c0	 movzx	 eax, al
  00197	85 c0		 test	 eax, eax
  00199	74 38		 je	 SHORT $LN47@ShowDemoWi
  0019b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  001a3	0f 57 c0	 xorps	 xmm0, xmm0
  001a6	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  001ab	48 63 45 24	 movsxd	 rax, DWORD PTR i$10[rbp]
  001af	48 8b 4d 08	 mov	 rcx, QWORD PTR io$9[rbp]
  001b3	f3 0f 5a 84 81
	60 37 00 00	 cvtss2sd xmm0, DWORD PTR [rcx+rax*4+14176]
  001bc	0f 28 d0	 movaps	 xmm2, xmm0
  001bf	66 49 0f 7e d0	 movq	 r8, xmm2
  001c4	8b 55 24	 mov	 edx, DWORD PTR i$10[rbp]
  001c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@BCIHMLII@b?$CFd?5?$CI?$CF?402f?5secs?$CJ?$AA@
  001ce	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN47@ShowDemoWi:
  001d3	eb a9		 jmp	 SHORT $LN8@ShowDemoWi
$LN9@ShowDemoWi:

; 5716 :             ImGui::Text("Mouse wheel: %.1f", io.MouseWheel);

  001d5	48 8b 45 08	 mov	 rax, QWORD PTR io$9[rbp]
  001d9	f3 0f 5a 80 04
	0e 00 00	 cvtss2sd xmm0, DWORD PTR [rax+3588]
  001e1	0f 28 c8	 movaps	 xmm1, xmm0
  001e4	66 48 0f 7e ca	 movq	 rdx, xmm1
  001e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@CFHNPKHB@Mouse?5wheel?3?5?$CF?41f?$AA@
  001f0	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5717 : 
; 5718 :             // We iterate both legacy native range and named ImGuiKey ranges, which is a little odd but this allows displaying the data for old/new backends.
; 5719 :             // User code should never have to go through such hoops: old code may use native keycodes, new code may use ImGuiKey codes.
; 5720 : #ifdef IMGUI_DISABLE_OBSOLETE_KEYIO
; 5721 :             struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };
; 5722 : #else
; 5723 :             struct funcs { static bool IsLegacyNativeDupe(ImGuiKey key) { return key < 512 && ImGui::GetIO().KeyMap[key] != -1; } }; // Hide Native<>ImGuiKey duplicates when both exists in the array
; 5724 : #endif
; 5725 :             ImGui::Text("Keys down:");         for (ImGuiKey key = ImGuiKey_KeysData_OFFSET; key < ImGuiKey_COUNT; key = (ImGuiKey)(key + 1)) { if (funcs::IsLegacyNativeDupe(key) || !ImGui::IsKeyDown(key)) continue; ImGui::SameLine(); ImGui::Text((key < ImGuiKey_NamedKey_BEGIN) ? "\"%s\"" : "\"%s\" %d", ImGui::GetKeyName(key), key); ImGui::SameLine(); ImGui::Text("(%.02f)", ImGui::GetKeyData(key)->DownDuration); }

  001f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@POLCMIEL@Keys?5down?3?$AA@
  001fc	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  00201	c7 45 44 00 00
	00 00		 mov	 DWORD PTR key$11[rbp], 0
  00208	eb 08		 jmp	 SHORT $LN13@ShowDemoWi
$LN11@ShowDemoWi:
  0020a	8b 45 44	 mov	 eax, DWORD PTR key$11[rbp]
  0020d	ff c0		 inc	 eax
  0020f	89 45 44	 mov	 DWORD PTR key$11[rbp], eax
$LN13@ShowDemoWi:
  00212	81 7d 44 8c 02
	00 00		 cmp	 DWORD PTR key$11[rbp], 652 ; 0000028cH
  00219	0f 8d a8 00 00
	00		 jge	 $LN12@ShowDemoWi
  0021f	8b 4d 44	 mov	 ecx, DWORD PTR key$11[rbp]
  00222	e8 00 00 00 00	 call	 ?IsLegacyNativeDupe@funcs@?BA@??ShowDemoWindowInputs@@YAXXZ@SA_NW4ImGuiKey@@@Z ; `ShowDemoWindowInputs'::`16'::funcs::IsLegacyNativeDupe
  00227	0f b6 c0	 movzx	 eax, al
  0022a	85 c0		 test	 eax, eax
  0022c	75 0f		 jne	 SHORT $LN49@ShowDemoWi
  0022e	8b 4d 44	 mov	 ecx, DWORD PTR key$11[rbp]
  00231	e8 00 00 00 00	 call	 ?IsKeyDown@ImGui@@YA_NW4ImGuiKey@@@Z ; ImGui::IsKeyDown
  00236	0f b6 c0	 movzx	 eax, al
  00239	85 c0		 test	 eax, eax
  0023b	75 02		 jne	 SHORT $LN48@ShowDemoWi
$LN49@ShowDemoWi:
  0023d	eb cb		 jmp	 SHORT $LN11@ShowDemoWi
$LN48@ShowDemoWi:
  0023f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00247	0f 57 c0	 xorps	 xmm0, xmm0
  0024a	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0024f	81 7d 44 00 02
	00 00		 cmp	 DWORD PTR key$11[rbp], 512 ; 00000200H
  00256	7d 10		 jge	 SHORT $LN79@ShowDemoWi
  00258	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04OEDFLLKD@?$CC?$CFs?$CC?$AA@
  0025f	48 89 85 68 06
	00 00		 mov	 QWORD PTR tv185[rbp], rax
  00266	eb 0e		 jmp	 SHORT $LN80@ShowDemoWi
$LN79@ShowDemoWi:
  00268	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07BFJJNFBL@?$CC?$CFs?$CC?5?$CFd?$AA@
  0026f	48 89 85 68 06
	00 00		 mov	 QWORD PTR tv185[rbp], rax
$LN80@ShowDemoWi:
  00276	8b 4d 44	 mov	 ecx, DWORD PTR key$11[rbp]
  00279	e8 00 00 00 00	 call	 ?GetKeyName@ImGui@@YAPEBDW4ImGuiKey@@@Z ; ImGui::GetKeyName
  0027e	44 8b 45 44	 mov	 r8d, DWORD PTR key$11[rbp]
  00282	48 8b d0	 mov	 rdx, rax
  00285	48 8b 8d 68 06
	00 00		 mov	 rcx, QWORD PTR tv185[rbp]
  0028c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  00291	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00299	0f 57 c0	 xorps	 xmm0, xmm0
  0029c	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  002a1	8b 4d 44	 mov	 ecx, DWORD PTR key$11[rbp]
  002a4	e8 00 00 00 00	 call	 ?GetKeyData@ImGui@@YAPEAUImGuiKeyData@@W4ImGuiKey@@@Z ; ImGui::GetKeyData
  002a9	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [rax+4]
  002ae	0f 28 c8	 movaps	 xmm1, xmm0
  002b1	66 48 0f 7e ca	 movq	 rdx, xmm1
  002b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07ODHCILNN@?$CI?$CF?402f?$CJ?$AA@
  002bd	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  002c2	e9 43 ff ff ff	 jmp	 $LN11@ShowDemoWi
$LN12@ShowDemoWi:

; 5726 :             ImGui::Text("Keys mods: %s%s%s%s", io.KeyCtrl ? "CTRL " : "", io.KeyShift ? "SHIFT " : "", io.KeyAlt ? "ALT " : "", io.KeySuper ? "SUPER " : "");

  002c7	48 8b 45 08	 mov	 rax, QWORD PTR io$9[rbp]
  002cb	0f b6 80 0f 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3599]
  002d2	85 c0		 test	 eax, eax
  002d4	74 10		 je	 SHORT $LN81@ShowDemoWi
  002d6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06ECIIPDFH@SUPER?5?$AA@
  002dd	48 89 85 68 06
	00 00		 mov	 QWORD PTR tv198[rbp], rax
  002e4	eb 0e		 jmp	 SHORT $LN82@ShowDemoWi
$LN81@ShowDemoWi:
  002e6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  002ed	48 89 85 68 06
	00 00		 mov	 QWORD PTR tv198[rbp], rax
$LN82@ShowDemoWi:
  002f4	48 8b 45 08	 mov	 rax, QWORD PTR io$9[rbp]
  002f8	0f b6 80 0e 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3598]
  002ff	85 c0		 test	 eax, eax
  00301	74 10		 je	 SHORT $LN83@ShowDemoWi
  00303	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04HDLNDMFA@ALT?5?$AA@
  0030a	48 89 85 70 06
	00 00		 mov	 QWORD PTR tv203[rbp], rax
  00311	eb 0e		 jmp	 SHORT $LN84@ShowDemoWi
$LN83@ShowDemoWi:
  00313	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0031a	48 89 85 70 06
	00 00		 mov	 QWORD PTR tv203[rbp], rax
$LN84@ShowDemoWi:
  00321	48 8b 45 08	 mov	 rax, QWORD PTR io$9[rbp]
  00325	0f b6 80 0d 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3597]
  0032c	85 c0		 test	 eax, eax
  0032e	74 10		 je	 SHORT $LN85@ShowDemoWi
  00330	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06IGAIMELN@SHIFT?5?$AA@
  00337	48 89 85 78 06
	00 00		 mov	 QWORD PTR tv208[rbp], rax
  0033e	eb 0e		 jmp	 SHORT $LN86@ShowDemoWi
$LN85@ShowDemoWi:
  00340	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00347	48 89 85 78 06
	00 00		 mov	 QWORD PTR tv208[rbp], rax
$LN86@ShowDemoWi:
  0034e	48 8b 45 08	 mov	 rax, QWORD PTR io$9[rbp]
  00352	0f b6 80 0c 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3596]
  00359	85 c0		 test	 eax, eax
  0035b	74 10		 je	 SHORT $LN87@ShowDemoWi
  0035d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05IHGCNILK@CTRL?5?$AA@
  00364	48 89 85 80 06
	00 00		 mov	 QWORD PTR tv213[rbp], rax
  0036b	eb 0e		 jmp	 SHORT $LN88@ShowDemoWi
$LN87@ShowDemoWi:
  0036d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00374	48 89 85 80 06
	00 00		 mov	 QWORD PTR tv213[rbp], rax
$LN88@ShowDemoWi:
  0037b	48 8b 85 68 06
	00 00		 mov	 rax, QWORD PTR tv198[rbp]
  00382	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00387	4c 8b 8d 70 06
	00 00		 mov	 r9, QWORD PTR tv203[rbp]
  0038e	4c 8b 85 78 06
	00 00		 mov	 r8, QWORD PTR tv208[rbp]
  00395	48 8b 95 80 06
	00 00		 mov	 rdx, QWORD PTR tv213[rbp]
  0039c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@HPBGOMPC@Keys?5mods?3?5?$CFs?$CFs?$CFs?$CFs?$AA@
  003a3	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5727 :             ImGui::Text("Chars queue:");       for (int i = 0; i < io.InputQueueCharacters.Size; i++) { ImWchar c = io.InputQueueCharacters[i]; ImGui::SameLine();  ImGui::Text("\'%c\' (0x%04X)", (c > ' ' && c <= 255) ? (char)c : '?', c); } // FIXME: We should convert 'c' to UTF-8 here but the functions are not public.

  003a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PKFKOHDJ@Chars?5queue?3?$AA@
  003af	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  003b4	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$12[rbp], 0
  003bb	eb 08		 jmp	 SHORT $LN16@ShowDemoWi
$LN14@ShowDemoWi:
  003bd	8b 45 64	 mov	 eax, DWORD PTR i$12[rbp]
  003c0	ff c0		 inc	 eax
  003c2	89 45 64	 mov	 DWORD PTR i$12[rbp], eax
$LN16@ShowDemoWi:
  003c5	48 8b 45 08	 mov	 rax, QWORD PTR io$9[rbp]
  003c9	8b 80 a8 37 00
	00		 mov	 eax, DWORD PTR [rax+14248]
  003cf	39 45 64	 cmp	 DWORD PTR i$12[rbp], eax
  003d2	0f 8d 83 00 00
	00		 jge	 $LN15@ShowDemoWi
  003d8	48 8b 45 08	 mov	 rax, QWORD PTR io$9[rbp]
  003dc	48 05 a8 37 00
	00		 add	 rax, 14248		; 000037a8H
  003e2	8b 55 64	 mov	 edx, DWORD PTR i$12[rbp]
  003e5	48 8b c8	 mov	 rcx, rax
  003e8	e8 00 00 00 00	 call	 ??A?$ImVector@G@@QEAAAEAGH@Z ; ImVector<unsigned short>::operator[]
  003ed	0f b7 00	 movzx	 eax, WORD PTR [rax]
  003f0	66 89 85 84 00
	00 00		 mov	 WORD PTR c$13[rbp], ax
  003f7	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  003ff	0f 57 c0	 xorps	 xmm0, xmm0
  00402	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00407	0f b7 85 84 00
	00 00		 movzx	 eax, WORD PTR c$13[rbp]
  0040e	83 f8 20	 cmp	 eax, 32			; 00000020H
  00411	7e 1d		 jle	 SHORT $LN89@ShowDemoWi
  00413	0f b7 85 84 00
	00 00		 movzx	 eax, WORD PTR c$13[rbp]
  0041a	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0041f	7f 0f		 jg	 SHORT $LN89@ShowDemoWi
  00421	0f b6 85 84 00
	00 00		 movzx	 eax, BYTE PTR c$13[rbp]
  00428	88 85 64 06 00
	00		 mov	 BYTE PTR tv233[rbp], al
  0042e	eb 07		 jmp	 SHORT $LN90@ShowDemoWi
$LN89@ShowDemoWi:
  00430	c6 85 64 06 00
	00 3f		 mov	 BYTE PTR tv233[rbp], 63	; 0000003fH
$LN90@ShowDemoWi:
  00437	0f b7 85 84 00
	00 00		 movzx	 eax, WORD PTR c$13[rbp]
  0043e	0f be 8d 64 06
	00 00		 movsx	 ecx, BYTE PTR tv233[rbp]
  00445	44 8b c0	 mov	 r8d, eax
  00448	8b d1		 mov	 edx, ecx
  0044a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FLAJMFCG@?8?$CFc?8?5?$CI0x?$CF04X?$CJ?$AA@
  00451	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  00456	e9 62 ff ff ff	 jmp	 $LN14@ShowDemoWi
$LN15@ShowDemoWi:

; 5728 : 
; 5729 :             ImGui::TreePop();

  0045b	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN44@ShowDemoWi:
$LN19@ShowDemoWi:

; 5730 :         }
; 5731 : 
; 5732 :         // Display ImGuiIO output flags
; 5733 :         IMGUI_DEMO_MARKER("Inputs & Focus/Outputs");

  00460	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00468	74 26		 je	 SHORT $LN50@ShowDemoWi
  0046a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowInputs@@YAXXZ@4JA
  00470	83 c0 27	 add	 eax, 39			; 00000027H
  00473	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0047a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@CKMJBGFC@Inputs?5?$CG?5Focus?1Outputs?$AA@
  00481	8b d0		 mov	 edx, eax
  00483	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0048a	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN50@ShowDemoWi:
  00490	33 c0		 xor	 eax, eax
  00492	85 c0		 test	 eax, eax
  00494	75 ca		 jne	 SHORT $LN19@ShowDemoWi

; 5734 :         ImGui::SetNextItemOpen(true, ImGuiCond_Once);

  00496	ba 02 00 00 00	 mov	 edx, 2
  0049b	b1 01		 mov	 cl, 1
  0049d	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen

; 5735 :         if (ImGui::TreeNode("Outputs"))

  004a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07LGFKBKFE@Outputs?$AA@
  004a9	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  004ae	0f b6 c0	 movzx	 eax, al
  004b1	85 c0		 test	 eax, eax
  004b3	0f 84 c9 02 00
	00		 je	 $LN51@ShowDemoWi

; 5736 :         {
; 5737 :             HelpMarker(

  004b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CAJ@EIJLLMLM@The?5value?5of?5io?4WantCaptureMouse@
  004c0	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5738 :                 "The value of io.WantCaptureMouse and io.WantCaptureKeyboard are normally set by Dear ImGui "
; 5739 :                 "to instruct your application of how to route inputs. Typically, when a value is true, it means "
; 5740 :                 "Dear ImGui wants the corresponding inputs and we expect the underlying application to ignore them.\n\n"
; 5741 :                 "The most typical case is: when hovering a window, Dear ImGui set io.WantCaptureMouse to true, "
; 5742 :                 "and underlying application should ignore mouse inputs (in practice there are many and more subtle "
; 5743 :                 "rules leading to how those flags are set).");
; 5744 :             ImGui::Text("io.WantCaptureMouse: %d", io.WantCaptureMouse);

  004c5	48 8b 45 08	 mov	 rax, QWORD PTR io$9[rbp]
  004c9	0f b6 80 d0 00
	00 00		 movzx	 eax, BYTE PTR [rax+208]
  004d0	8b d0		 mov	 edx, eax
  004d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@JLMOJHHN@io?4WantCaptureMouse?3?5?$CFd?$AA@
  004d9	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5745 :             ImGui::Text("io.WantCaptureMouseUnlessPopupClose: %d", io.WantCaptureMouseUnlessPopupClose);

  004de	48 8b 45 08	 mov	 rax, QWORD PTR io$9[rbp]
  004e2	0f b6 80 d4 36
	00 00		 movzx	 eax, BYTE PTR [rax+14036]
  004e9	8b d0		 mov	 edx, eax
  004eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@JIGLLDLJ@io?4WantCaptureMouseUnlessPopupCl@
  004f2	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5746 :             ImGui::Text("io.WantCaptureKeyboard: %d", io.WantCaptureKeyboard);

  004f7	48 8b 45 08	 mov	 rax, QWORD PTR io$9[rbp]
  004fb	0f b6 80 d1 00
	00 00		 movzx	 eax, BYTE PTR [rax+209]
  00502	8b d0		 mov	 edx, eax
  00504	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@GDHLPHDK@io?4WantCaptureKeyboard?3?5?$CFd?$AA@
  0050b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5747 :             ImGui::Text("io.WantTextInput: %d", io.WantTextInput);

  00510	48 8b 45 08	 mov	 rax, QWORD PTR io$9[rbp]
  00514	0f b6 80 d2 00
	00 00		 movzx	 eax, BYTE PTR [rax+210]
  0051b	8b d0		 mov	 edx, eax
  0051d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@NDPHMPCP@io?4WantTextInput?3?5?$CFd?$AA@
  00524	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5748 :             ImGui::Text("io.WantSetMousePos: %d", io.WantSetMousePos);

  00529	48 8b 45 08	 mov	 rax, QWORD PTR io$9[rbp]
  0052d	0f b6 80 d3 00
	00 00		 movzx	 eax, BYTE PTR [rax+211]
  00534	8b d0		 mov	 edx, eax
  00536	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@DMBBELLF@io?4WantSetMousePos?3?5?$CFd?$AA@
  0053d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5749 :             ImGui::Text("io.NavActive: %d, io.NavVisible: %d", io.NavActive, io.NavVisible);

  00542	48 8b 45 08	 mov	 rax, QWORD PTR io$9[rbp]
  00546	0f b6 80 d6 00
	00 00		 movzx	 eax, BYTE PTR [rax+214]
  0054d	48 8b 4d 08	 mov	 rcx, QWORD PTR io$9[rbp]
  00551	0f b6 89 d5 00
	00 00		 movzx	 ecx, BYTE PTR [rcx+213]
  00558	44 8b c0	 mov	 r8d, eax
  0055b	8b d1		 mov	 edx, ecx
  0055d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@CPJFFAGJ@io?4NavActive?3?5?$CFd?0?5io?4NavVisible?3@
  00564	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN22@ShowDemoWi:

; 5750 : 
; 5751 :             IMGUI_DEMO_MARKER("Inputs & Focus/Outputs/WantCapture override");

  00569	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00571	74 26		 je	 SHORT $LN52@ShowDemoWi
  00573	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowInputs@@YAXXZ@4JA
  00579	83 c0 39	 add	 eax, 57			; 00000039H
  0057c	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00583	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CM@FPPCIOD@Inputs?5?$CG?5Focus?1Outputs?1WantCaptu@
  0058a	8b d0		 mov	 edx, eax
  0058c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00593	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN52@ShowDemoWi:
  00599	33 c0		 xor	 eax, eax
  0059b	85 c0		 test	 eax, eax
  0059d	75 ca		 jne	 SHORT $LN22@ShowDemoWi

; 5752 :             if (ImGui::TreeNode("WantCapture override"))

  0059f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@JGLMCEJO@WantCapture?5override?$AA@
  005a6	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  005ab	0f b6 c0	 movzx	 eax, al
  005ae	85 c0		 test	 eax, eax
  005b0	0f 84 c7 01 00
	00		 je	 $LN53@ShowDemoWi

; 5753 :             {
; 5754 :                 HelpMarker(

  005b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0MF@IDABKCNF@Hovering?5the?5colored?5canvas?5will@
  005bd	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5755 :                     "Hovering the colored canvas will override io.WantCaptureXXX fields.\n"
; 5756 :                     "Notice how normally (when set to none), the value of io.WantCaptureKeyboard would be false when hovering and true when clicking.");
; 5757 :                 static int capture_override_mouse = -1;
; 5758 :                 static int capture_override_keyboard = -1;
; 5759 :                 const char* capture_override_desc[] = { "None", "Set to false", "Set to true" };

  005c2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04OHJIHAFH@None?$AA@
  005c9	48 89 85 a8 00
	00 00		 mov	 QWORD PTR capture_override_desc$14[rbp], rax
  005d0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0N@NLJHHBMD@Set?5to?5false?$AA@
  005d7	48 89 85 b0 00
	00 00		 mov	 QWORD PTR capture_override_desc$14[rbp+8], rax
  005de	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0M@EGIDJBEG@Set?5to?5true?$AA@
  005e5	48 89 85 b8 00
	00 00		 mov	 QWORD PTR capture_override_desc$14[rbp+16], rax

; 5760 :                 ImGui::SetNextItemWidth(ImGui::GetFontSize() * 15);

  005ec	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  005f1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41700000
  005f9	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth

; 5761 :                 ImGui::SliderInt("SetNextFrameWantCaptureMouse() on hover", &capture_override_mouse, -1, +1, capture_override_desc[capture_override_mouse + 1], ImGuiSliderFlags_AlwaysClamp);

  005fe	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?capture_override_mouse@?CL@??ShowDemoWindowInputs@@YAXXZ@4HA
  00604	ff c0		 inc	 eax
  00606	48 98		 cdqe
  00608	c7 44 24 28 10
	00 00 00	 mov	 DWORD PTR [rsp+40], 16
  00610	48 8b 84 c5 a8
	00 00 00	 mov	 rax, QWORD PTR capture_override_desc$14[rbp+rax*8]
  00618	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0061d	41 b9 01 00 00
	00		 mov	 r9d, 1
  00623	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  00629	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?capture_override_mouse@?CL@??ShowDemoWindowInputs@@YAXXZ@4HA
  00630	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@CJCOBGKD@SetNextFrameWantCaptureMouse?$CI?$CJ?5o@
  00637	e8 00 00 00 00	 call	 ?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z ; ImGui::SliderInt

; 5762 :                 ImGui::SetNextItemWidth(ImGui::GetFontSize() * 15);

  0063c	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  00641	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41700000
  00649	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth

; 5763 :                 ImGui::SliderInt("SetNextFrameWantCaptureKeyboard() on hover", &capture_override_keyboard, -1, +1, capture_override_desc[capture_override_keyboard + 1], ImGuiSliderFlags_AlwaysClamp);

  0064e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?capture_override_keyboard@?CL@??ShowDemoWindowInputs@@YAXXZ@4HA
  00654	ff c0		 inc	 eax
  00656	48 98		 cdqe
  00658	c7 44 24 28 10
	00 00 00	 mov	 DWORD PTR [rsp+40], 16
  00660	48 8b 84 c5 a8
	00 00 00	 mov	 rax, QWORD PTR capture_override_desc$14[rbp+rax*8]
  00668	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0066d	41 b9 01 00 00
	00		 mov	 r9d, 1
  00673	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  00679	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?capture_override_keyboard@?CL@??ShowDemoWindowInputs@@YAXXZ@4HA
  00680	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@FJJMGFDF@SetNextFrameWantCaptureKeyboard?$CI@
  00687	e8 00 00 00 00	 call	 ?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z ; ImGui::SliderInt

; 5764 : 
; 5765 :                 ImGui::ColorButton("##panel", ImVec4(0.7f, 0.1f, 0.7f, 1.0f), ImGuiColorEditFlags_NoTooltip | ImGuiColorEditFlags_NoDragDrop, ImVec2(128.0f, 96.0f)); // Dummy item

  0068c	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42c00000
  00694	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@43000000
  0069c	48 8d 8d 24 05
	00 00		 lea	 rcx, QWORD PTR $T28[rbp]
  006a3	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  006a8	48 89 85 68 06
	00 00		 mov	 QWORD PTR tv350[rbp], rax
  006af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006b7	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  006bd	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f333333
  006c5	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3dcccccd
  006cd	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f333333
  006d5	48 8d 8d 44 05
	00 00		 lea	 rcx, QWORD PTR $T29[rbp]
  006dc	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  006e1	48 8b 8d 68 06
	00 00		 mov	 rcx, QWORD PTR tv350[rbp]
  006e8	4c 8b c9	 mov	 r9, rcx
  006eb	41 b8 40 02 00
	00		 mov	 r8d, 576		; 00000240H
  006f1	48 8b d0	 mov	 rdx, rax
  006f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07OAKMJIEO@?$CD?$CDpanel?$AA@
  006fb	e8 00 00 00 00	 call	 ?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HAEBUImVec2@@@Z ; ImGui::ColorButton

; 5766 :                 if (ImGui::IsItemHovered() && capture_override_mouse != -1)

  00700	33 c9		 xor	 ecx, ecx
  00702	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  00707	0f b6 c0	 movzx	 eax, al
  0070a	85 c0		 test	 eax, eax
  0070c	74 2e		 je	 SHORT $LN54@ShowDemoWi
  0070e	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?capture_override_mouse@?CL@??ShowDemoWindowInputs@@YAXXZ@4HA, -1
  00715	74 25		 je	 SHORT $LN54@ShowDemoWi

; 5767 :                     ImGui::SetNextFrameWantCaptureMouse(capture_override_mouse == 1);

  00717	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?capture_override_mouse@?CL@??ShowDemoWindowInputs@@YAXXZ@4HA, 1
  0071e	75 09		 jne	 SHORT $LN91@ShowDemoWi
  00720	c6 85 64 06 00
	00 01		 mov	 BYTE PTR tv368[rbp], 1
  00727	eb 07		 jmp	 SHORT $LN92@ShowDemoWi
$LN91@ShowDemoWi:
  00729	c6 85 64 06 00
	00 00		 mov	 BYTE PTR tv368[rbp], 0
$LN92@ShowDemoWi:
  00730	0f b6 8d 64 06
	00 00		 movzx	 ecx, BYTE PTR tv368[rbp]
  00737	e8 00 00 00 00	 call	 ?SetNextFrameWantCaptureMouse@ImGui@@YAX_N@Z ; ImGui::SetNextFrameWantCaptureMouse
$LN54@ShowDemoWi:

; 5768 :                 if (ImGui::IsItemHovered() && capture_override_keyboard != -1)

  0073c	33 c9		 xor	 ecx, ecx
  0073e	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  00743	0f b6 c0	 movzx	 eax, al
  00746	85 c0		 test	 eax, eax
  00748	74 2e		 je	 SHORT $LN55@ShowDemoWi
  0074a	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?capture_override_keyboard@?CL@??ShowDemoWindowInputs@@YAXXZ@4HA, -1
  00751	74 25		 je	 SHORT $LN55@ShowDemoWi

; 5769 :                     ImGui::SetNextFrameWantCaptureKeyboard(capture_override_keyboard == 1);

  00753	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?capture_override_keyboard@?CL@??ShowDemoWindowInputs@@YAXXZ@4HA, 1
  0075a	75 09		 jne	 SHORT $LN93@ShowDemoWi
  0075c	c6 85 64 06 00
	00 01		 mov	 BYTE PTR tv376[rbp], 1
  00763	eb 07		 jmp	 SHORT $LN94@ShowDemoWi
$LN93@ShowDemoWi:
  00765	c6 85 64 06 00
	00 00		 mov	 BYTE PTR tv376[rbp], 0
$LN94@ShowDemoWi:
  0076c	0f b6 8d 64 06
	00 00		 movzx	 ecx, BYTE PTR tv376[rbp]
  00773	e8 00 00 00 00	 call	 ?SetNextFrameWantCaptureKeyboard@ImGui@@YAX_N@Z ; ImGui::SetNextFrameWantCaptureKeyboard
$LN55@ShowDemoWi:

; 5770 : 
; 5771 :                 ImGui::TreePop();

  00778	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN53@ShowDemoWi:

; 5772 :             }
; 5773 :             ImGui::TreePop();

  0077d	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN51@ShowDemoWi:
$LN25@ShowDemoWi:

; 5774 :         }
; 5775 : 
; 5776 :         // Display mouse cursors
; 5777 :         IMGUI_DEMO_MARKER("Inputs & Focus/Mouse Cursors");

  00782	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0078a	74 26		 je	 SHORT $LN56@ShowDemoWi
  0078c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowInputs@@YAXXZ@4JA
  00792	83 c0 53	 add	 eax, 83			; 00000053H
  00795	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0079c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BN@GDPPNLD@Inputs?5?$CG?5Focus?1Mouse?5Cursors?$AA@
  007a3	8b d0		 mov	 edx, eax
  007a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  007ac	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN56@ShowDemoWi:
  007b2	33 c0		 xor	 eax, eax
  007b4	85 c0		 test	 eax, eax
  007b6	75 ca		 jne	 SHORT $LN25@ShowDemoWi

; 5778 :         if (ImGui::TreeNode("Mouse Cursors"))

  007b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EOGKPMHB@Mouse?5Cursors?$AA@
  007bf	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  007c4	0f b6 c0	 movzx	 eax, al
  007c7	85 c0		 test	 eax, eax
  007c9	0f 84 95 01 00
	00		 je	 $LN57@ShowDemoWi

; 5779 :         {
; 5780 :             const char* mouse_cursors_names[] = { "Arrow", "TextInput", "ResizeAll", "ResizeNS", "ResizeEW", "ResizeNESW", "ResizeNWSE", "Hand", "NotAllowed" };

  007cf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05OLOIDPAB@Arrow?$AA@
  007d6	48 89 85 e0 00
	00 00		 mov	 QWORD PTR mouse_cursors_names$15[rbp], rax
  007dd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09KBOPCPBA@TextInput?$AA@
  007e4	48 89 85 e8 00
	00 00		 mov	 QWORD PTR mouse_cursors_names$15[rbp+8], rax
  007eb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09NLNHGFHP@ResizeAll?$AA@
  007f2	48 89 85 f0 00
	00 00		 mov	 QWORD PTR mouse_cursors_names$15[rbp+16], rax
  007f9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08HLCKOJFI@ResizeNS?$AA@
  00800	48 89 85 f8 00
	00 00		 mov	 QWORD PTR mouse_cursors_names$15[rbp+24], rax
  00807	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08BDBDMDLN@ResizeEW?$AA@
  0080e	48 89 85 00 01
	00 00		 mov	 QWORD PTR mouse_cursors_names$15[rbp+32], rax
  00815	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0L@EFMGKFJD@ResizeNESW?$AA@
  0081c	48 89 85 08 01
	00 00		 mov	 QWORD PTR mouse_cursors_names$15[rbp+40], rax
  00823	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0L@MHCCEKFE@ResizeNWSE?$AA@
  0082a	48 89 85 10 01
	00 00		 mov	 QWORD PTR mouse_cursors_names$15[rbp+48], rax
  00831	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04JBBMMDIF@Hand?$AA@
  00838	48 89 85 18 01
	00 00		 mov	 QWORD PTR mouse_cursors_names$15[rbp+56], rax
  0083f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0L@OJPFEFMM@NotAllowed?$AA@
  00846	48 89 85 20 01
	00 00		 mov	 QWORD PTR mouse_cursors_names$15[rbp+64], rax

; 5781 :             IM_ASSERT(IM_ARRAYSIZE(mouse_cursors_names) == ImGuiMouseCursor_COUNT);
; 5782 : 
; 5783 :             ImGuiMouseCursor current = ImGui::GetMouseCursor();

  0084d	e8 00 00 00 00	 call	 ?GetMouseCursor@ImGui@@YAHXZ ; ImGui::GetMouseCursor
  00852	89 85 44 01 00
	00		 mov	 DWORD PTR current$16[rbp], eax

; 5784 :             ImGui::Text("Current mouse cursor = %d: %s", current, mouse_cursors_names[current]);

  00858	48 63 85 44 01
	00 00		 movsxd	 rax, DWORD PTR current$16[rbp]
  0085f	4c 8b 84 c5 e0
	00 00 00	 mov	 r8, QWORD PTR mouse_cursors_names$15[rbp+rax*8]
  00867	8b 95 44 01 00
	00		 mov	 edx, DWORD PTR current$16[rbp]
  0086d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@CHGMKDBB@Current?5mouse?5cursor?5?$DN?5?$CFd?3?5?$CFs?$AA@
  00874	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5785 :             ImGui::BeginDisabled(true);

  00879	b1 01		 mov	 cl, 1
  0087b	e8 00 00 00 00	 call	 ?BeginDisabled@ImGui@@YAX_N@Z ; ImGui::BeginDisabled

; 5786 :             ImGui::CheckboxFlags("io.BackendFlags: HasMouseCursors", &io.BackendFlags, ImGuiBackendFlags_HasMouseCursors);

  00880	48 8b 45 08	 mov	 rax, QWORD PTR io$9[rbp]
  00884	48 83 c0 04	 add	 rax, 4
  00888	41 b8 02 00 00
	00		 mov	 r8d, 2
  0088e	48 8b d0	 mov	 rdx, rax
  00891	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@OGFIDKNB@io?4BackendFlags?3?5HasMouseCursors@
  00898	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5787 :             ImGui::EndDisabled();

  0089d	e8 00 00 00 00	 call	 ?EndDisabled@ImGui@@YAXXZ ; ImGui::EndDisabled

; 5788 : 
; 5789 :             ImGui::Text("Hover to see mouse cursors:");

  008a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@MCMILHH@Hover?5to?5see?5mouse?5cursors?3?$AA@
  008a9	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5790 :             ImGui::SameLine(); HelpMarker(

  008ae	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  008b6	0f 57 c0	 xorps	 xmm0, xmm0
  008b9	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  008be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0PC@CDIOEKMA@Your?5application?5can?5render?5a?5di@
  008c5	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5791 :                 "Your application can render a different mouse cursor based on what ImGui::GetMouseCursor() returns. "
; 5792 :                 "If software cursor rendering (io.MouseDrawCursor) is set ImGui will draw the right cursor for you, "
; 5793 :                 "otherwise your backend needs to handle it.");
; 5794 :             for (int i = 0; i < ImGuiMouseCursor_COUNT; i++)

  008ca	c7 85 64 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$17[rbp], 0
  008d4	eb 0e		 jmp	 SHORT $LN28@ShowDemoWi
$LN26@ShowDemoWi:
  008d6	8b 85 64 01 00
	00		 mov	 eax, DWORD PTR i$17[rbp]
  008dc	ff c0		 inc	 eax
  008de	89 85 64 01 00
	00		 mov	 DWORD PTR i$17[rbp], eax
$LN28@ShowDemoWi:
  008e4	83 bd 64 01 00
	00 09		 cmp	 DWORD PTR i$17[rbp], 9
  008eb	7d 72		 jge	 SHORT $LN27@ShowDemoWi

; 5795 :             {
; 5796 :                 char label[32];
; 5797 :                 sprintf(label, "Mouse cursor %d: %s", i, mouse_cursors_names[i]);

  008ed	48 63 85 64 01
	00 00		 movsxd	 rax, DWORD PTR i$17[rbp]
  008f4	4c 8b 8c c5 e0
	00 00 00	 mov	 r9, QWORD PTR mouse_cursors_names$15[rbp+rax*8]
  008fc	44 8b 85 64 01
	00 00		 mov	 r8d, DWORD PTR i$17[rbp]
  00903	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@KDPKCDI@Mouse?5cursor?5?$CFd?3?5?$CFs?$AA@
  0090a	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR label$18[rbp]
  00911	e8 00 00 00 00	 call	 sprintf

; 5798 :                 ImGui::Bullet(); ImGui::Selectable(label, false);

  00916	e8 00 00 00 00	 call	 ?Bullet@ImGui@@YAXXZ	; ImGui::Bullet
  0091b	0f 57 d2	 xorps	 xmm2, xmm2
  0091e	0f 57 c9	 xorps	 xmm1, xmm1
  00921	48 8d 8d 74 05
	00 00		 lea	 rcx, QWORD PTR $T30[rbp]
  00928	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0092d	4c 8b c8	 mov	 r9, rax
  00930	45 33 c0	 xor	 r8d, r8d
  00933	33 d2		 xor	 edx, edx
  00935	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR label$18[rbp]
  0093c	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable

; 5799 :                 if (ImGui::IsItemHovered())

  00941	33 c9		 xor	 ecx, ecx
  00943	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  00948	0f b6 c0	 movzx	 eax, al
  0094b	85 c0		 test	 eax, eax
  0094d	74 0b		 je	 SHORT $LN58@ShowDemoWi

; 5800 :                     ImGui::SetMouseCursor(i);

  0094f	8b 8d 64 01 00
	00		 mov	 ecx, DWORD PTR i$17[rbp]
  00955	e8 00 00 00 00	 call	 ?SetMouseCursor@ImGui@@YAXH@Z ; ImGui::SetMouseCursor
$LN58@ShowDemoWi:

; 5801 :             }

  0095a	e9 77 ff ff ff	 jmp	 $LN26@ShowDemoWi
$LN27@ShowDemoWi:

; 5802 :             ImGui::TreePop();

  0095f	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN57@ShowDemoWi:
$LN31@ShowDemoWi:

; 5803 :         }
; 5804 : 
; 5805 :         IMGUI_DEMO_MARKER("Inputs & Focus/Tabbing");

  00964	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0096c	74 26		 je	 SHORT $LN59@ShowDemoWi
  0096e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowInputs@@YAXXZ@4JA
  00974	83 c0 6f	 add	 eax, 111		; 0000006fH
  00977	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0097e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@HCPGLPEC@Inputs?5?$CG?5Focus?1Tabbing?$AA@
  00985	8b d0		 mov	 edx, eax
  00987	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0098e	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN59@ShowDemoWi:
  00994	33 c0		 xor	 eax, eax
  00996	85 c0		 test	 eax, eax
  00998	75 ca		 jne	 SHORT $LN31@ShowDemoWi

; 5806 :         if (ImGui::TreeNode("Tabbing"))

  0099a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07OOGFLDEE@Tabbing?$AA@
  009a1	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  009a6	0f b6 c0	 movzx	 eax, al
  009a9	85 c0		 test	 eax, eax
  009ab	0f 84 1f 01 00
	00		 je	 $LN60@ShowDemoWi

; 5807 :         {
; 5808 :             ImGui::Text("Use TAB/SHIFT+TAB to cycle through keyboard editable fields.");

  009b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DN@DBMIKJE@Use?5TAB?1SHIFT?$CLTAB?5to?5cycle?5throu@
  009b8	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5809 :             static char buf[32] = "hello";
; 5810 :             ImGui::InputText("1", buf, IM_ARRAYSIZE(buf));

  009bd	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  009c6	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  009cf	45 33 c9	 xor	 r9d, r9d
  009d2	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  009d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf@?EB@??ShowDemoWindowInputs@@YAXXZ@4PADA
  009df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01HIHLOKLC@1?$AA@
  009e6	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 5811 :             ImGui::InputText("2", buf, IM_ARRAYSIZE(buf));

  009eb	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  009f4	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  009fd	45 33 c9	 xor	 r9d, r9d
  00a00	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00a06	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf@?EB@??ShowDemoWindowInputs@@YAXXZ@4PADA
  00a0d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01FDFGLJHB@2?$AA@
  00a14	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 5812 :             ImGui::InputText("3", buf, IM_ARRAYSIZE(buf));

  00a19	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00a22	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00a2b	45 33 c9	 xor	 r9d, r9d
  00a2e	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00a34	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf@?EB@??ShowDemoWindowInputs@@YAXXZ@4PADA
  00a3b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EKENIIDA@3?$AA@
  00a42	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 5813 :             ImGui::PushAllowKeyboardFocus(false);

  00a47	33 c9		 xor	 ecx, ecx
  00a49	e8 00 00 00 00	 call	 ?PushAllowKeyboardFocus@ImGui@@YAX_N@Z ; ImGui::PushAllowKeyboardFocus

; 5814 :             ImGui::InputText("4 (tab skip)", buf, IM_ARRAYSIZE(buf));

  00a4e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00a57	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00a60	45 33 c9	 xor	 r9d, r9d
  00a63	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00a69	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf@?EB@??ShowDemoWindowInputs@@YAXXZ@4PADA
  00a70	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MPCBNDPA@4?5?$CItab?5skip?$CJ?$AA@
  00a77	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 5815 :             ImGui::SameLine(); HelpMarker("Item won't be cycled through when using TAB or Shift+Tab.");

  00a7c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00a84	0f 57 c0	 xorps	 xmm0, xmm0
  00a87	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00a8c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DK@EKDPAEPE@Item?5won?8t?5be?5cycled?5through?5whe@
  00a93	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5816 :             ImGui::PopAllowKeyboardFocus();

  00a98	e8 00 00 00 00	 call	 ?PopAllowKeyboardFocus@ImGui@@YAXXZ ; ImGui::PopAllowKeyboardFocus

; 5817 :             ImGui::InputText("5", buf, IM_ARRAYSIZE(buf));

  00a9d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00aa6	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00aaf	45 33 c9	 xor	 r9d, r9d
  00ab2	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00ab8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf@?EB@??ShowDemoWindowInputs@@YAXXZ@4PADA
  00abf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01BMBHCPLG@5?$AA@
  00ac6	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 5818 :             ImGui::TreePop();

  00acb	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN60@ShowDemoWi:
$LN34@ShowDemoWi:

; 5819 :         }
; 5820 : 
; 5821 :         IMGUI_DEMO_MARKER("Inputs & Focus/Focus from code");

  00ad0	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00ad8	74 26		 je	 SHORT $LN61@ShowDemoWi
  00ada	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowInputs@@YAXXZ@4JA
  00ae0	83 c0 7f	 add	 eax, 127		; 0000007fH
  00ae3	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00aea	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BP@HINAMKMF@Inputs?5?$CG?5Focus?1Focus?5from?5code?$AA@
  00af1	8b d0		 mov	 edx, eax
  00af3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00afa	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN61@ShowDemoWi:
  00b00	33 c0		 xor	 eax, eax
  00b02	85 c0		 test	 eax, eax
  00b04	75 ca		 jne	 SHORT $LN34@ShowDemoWi

; 5822 :         if (ImGui::TreeNode("Focus from code"))

  00b06	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@PGBLAHMK@Focus?5from?5code?$AA@
  00b0d	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  00b12	0f b6 c0	 movzx	 eax, al
  00b15	85 c0		 test	 eax, eax
  00b17	0f 84 1b 03 00
	00		 je	 $LN62@ShowDemoWi

; 5823 :         {
; 5824 :             bool focus_1 = ImGui::Button("Focus on 1"); ImGui::SameLine();

  00b1d	0f 57 d2	 xorps	 xmm2, xmm2
  00b20	0f 57 c9	 xorps	 xmm1, xmm1
  00b23	48 8d 8d 94 05
	00 00		 lea	 rcx, QWORD PTR $T31[rbp]
  00b2a	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00b2f	48 8b d0	 mov	 rdx, rax
  00b32	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OPJAAOKJ@Focus?5on?51?$AA@
  00b39	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00b3e	88 85 c4 01 00
	00		 mov	 BYTE PTR focus_1$19[rbp], al
  00b44	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00b4c	0f 57 c0	 xorps	 xmm0, xmm0
  00b4f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 5825 :             bool focus_2 = ImGui::Button("Focus on 2"); ImGui::SameLine();

  00b54	0f 57 d2	 xorps	 xmm2, xmm2
  00b57	0f 57 c9	 xorps	 xmm1, xmm1
  00b5a	48 8d 8d b4 05
	00 00		 lea	 rcx, QWORD PTR $T32[rbp]
  00b61	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00b66	48 8b d0	 mov	 rdx, rax
  00b69	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@MELNFNGK@Focus?5on?52?$AA@
  00b70	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00b75	88 85 e4 01 00
	00		 mov	 BYTE PTR focus_2$20[rbp], al
  00b7b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00b83	0f 57 c0	 xorps	 xmm0, xmm0
  00b86	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 5826 :             bool focus_3 = ImGui::Button("Focus on 3");

  00b8b	0f 57 d2	 xorps	 xmm2, xmm2
  00b8e	0f 57 c9	 xorps	 xmm1, xmm1
  00b91	48 8d 8d d4 05
	00 00		 lea	 rcx, QWORD PTR $T33[rbp]
  00b98	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00b9d	48 8b d0	 mov	 rdx, rax
  00ba0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@NNKGGMCL@Focus?5on?53?$AA@
  00ba7	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00bac	88 85 04 02 00
	00		 mov	 BYTE PTR focus_3$21[rbp], al

; 5827 :             int has_focus = 0;

  00bb2	c7 85 24 02 00
	00 00 00 00 00	 mov	 DWORD PTR has_focus$22[rbp], 0

; 5828 :             static char buf[128] = "click on a button to set focus";
; 5829 : 
; 5830 :             if (focus_1) ImGui::SetKeyboardFocusHere();

  00bbc	0f b6 85 c4 01
	00 00		 movzx	 eax, BYTE PTR focus_1$19[rbp]
  00bc3	85 c0		 test	 eax, eax
  00bc5	74 07		 je	 SHORT $LN63@ShowDemoWi
  00bc7	33 c9		 xor	 ecx, ecx
  00bc9	e8 00 00 00 00	 call	 ?SetKeyboardFocusHere@ImGui@@YAXH@Z ; ImGui::SetKeyboardFocusHere
$LN63@ShowDemoWi:

; 5831 :             ImGui::InputText("1", buf, IM_ARRAYSIZE(buf));

  00bce	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00bd7	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00be0	45 33 c9	 xor	 r9d, r9d
  00be3	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  00be9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf@?EI@??ShowDemoWindowInputs@@YAXXZ@4PADA
  00bf0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01HIHLOKLC@1?$AA@
  00bf7	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 5832 :             if (ImGui::IsItemActive()) has_focus = 1;

  00bfc	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  00c01	0f b6 c0	 movzx	 eax, al
  00c04	85 c0		 test	 eax, eax
  00c06	74 0a		 je	 SHORT $LN64@ShowDemoWi
  00c08	c7 85 24 02 00
	00 01 00 00 00	 mov	 DWORD PTR has_focus$22[rbp], 1
$LN64@ShowDemoWi:

; 5833 : 
; 5834 :             if (focus_2) ImGui::SetKeyboardFocusHere();

  00c12	0f b6 85 e4 01
	00 00		 movzx	 eax, BYTE PTR focus_2$20[rbp]
  00c19	85 c0		 test	 eax, eax
  00c1b	74 07		 je	 SHORT $LN65@ShowDemoWi
  00c1d	33 c9		 xor	 ecx, ecx
  00c1f	e8 00 00 00 00	 call	 ?SetKeyboardFocusHere@ImGui@@YAXH@Z ; ImGui::SetKeyboardFocusHere
$LN65@ShowDemoWi:

; 5835 :             ImGui::InputText("2", buf, IM_ARRAYSIZE(buf));

  00c24	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00c2d	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00c36	45 33 c9	 xor	 r9d, r9d
  00c39	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  00c3f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf@?EI@??ShowDemoWindowInputs@@YAXXZ@4PADA
  00c46	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01FDFGLJHB@2?$AA@
  00c4d	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 5836 :             if (ImGui::IsItemActive()) has_focus = 2;

  00c52	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  00c57	0f b6 c0	 movzx	 eax, al
  00c5a	85 c0		 test	 eax, eax
  00c5c	74 0a		 je	 SHORT $LN66@ShowDemoWi
  00c5e	c7 85 24 02 00
	00 02 00 00 00	 mov	 DWORD PTR has_focus$22[rbp], 2
$LN66@ShowDemoWi:

; 5837 : 
; 5838 :             ImGui::PushAllowKeyboardFocus(false);

  00c68	33 c9		 xor	 ecx, ecx
  00c6a	e8 00 00 00 00	 call	 ?PushAllowKeyboardFocus@ImGui@@YAX_N@Z ; ImGui::PushAllowKeyboardFocus

; 5839 :             if (focus_3) ImGui::SetKeyboardFocusHere();

  00c6f	0f b6 85 04 02
	00 00		 movzx	 eax, BYTE PTR focus_3$21[rbp]
  00c76	85 c0		 test	 eax, eax
  00c78	74 07		 je	 SHORT $LN67@ShowDemoWi
  00c7a	33 c9		 xor	 ecx, ecx
  00c7c	e8 00 00 00 00	 call	 ?SetKeyboardFocusHere@ImGui@@YAXH@Z ; ImGui::SetKeyboardFocusHere
$LN67@ShowDemoWi:

; 5840 :             ImGui::InputText("3 (tab skip)", buf, IM_ARRAYSIZE(buf));

  00c81	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00c8a	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00c93	45 33 c9	 xor	 r9d, r9d
  00c96	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  00c9c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf@?EI@??ShowDemoWindowInputs@@YAXXZ@4PADA
  00ca3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LCFCNFKI@3?5?$CItab?5skip?$CJ?$AA@
  00caa	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 5841 :             if (ImGui::IsItemActive()) has_focus = 3;

  00caf	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  00cb4	0f b6 c0	 movzx	 eax, al
  00cb7	85 c0		 test	 eax, eax
  00cb9	74 0a		 je	 SHORT $LN68@ShowDemoWi
  00cbb	c7 85 24 02 00
	00 03 00 00 00	 mov	 DWORD PTR has_focus$22[rbp], 3
$LN68@ShowDemoWi:

; 5842 :             ImGui::SameLine(); HelpMarker("Item won't be cycled through when using TAB or Shift+Tab.");

  00cc5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00ccd	0f 57 c0	 xorps	 xmm0, xmm0
  00cd0	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00cd5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DK@EKDPAEPE@Item?5won?8t?5be?5cycled?5through?5whe@
  00cdc	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5843 :             ImGui::PopAllowKeyboardFocus();

  00ce1	e8 00 00 00 00	 call	 ?PopAllowKeyboardFocus@ImGui@@YAXXZ ; ImGui::PopAllowKeyboardFocus

; 5844 : 
; 5845 :             if (has_focus)

  00ce6	83 bd 24 02 00
	00 00		 cmp	 DWORD PTR has_focus$22[rbp], 0
  00ced	74 14		 je	 SHORT $LN69@ShowDemoWi

; 5846 :                 ImGui::Text("Item with focus: %d", has_focus);

  00cef	8b 95 24 02 00
	00		 mov	 edx, DWORD PTR has_focus$22[rbp]
  00cf5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@PCNBLNDG@Item?5with?5focus?3?5?$CFd?$AA@
  00cfc	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5847 :             else

  00d01	eb 0c		 jmp	 SHORT $LN70@ShowDemoWi
$LN69@ShowDemoWi:

; 5848 :                 ImGui::Text("Item with focus: <none>");

  00d03	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@EPMJCFDB@Item?5with?5focus?3?5?$DMnone?$DO?$AA@
  00d0a	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN70@ShowDemoWi:

; 5849 : 
; 5850 :             // Use >= 0 parameter to SetKeyboardFocusHere() to focus an upcoming item
; 5851 :             static float f3[3] = { 0.0f, 0.0f, 0.0f };
; 5852 :             int focus_ahead = -1;

  00d0f	c7 85 44 02 00
	00 ff ff ff ff	 mov	 DWORD PTR focus_ahead$23[rbp], -1

; 5853 :             if (ImGui::Button("Focus on X")) { focus_ahead = 0; } ImGui::SameLine();

  00d19	0f 57 d2	 xorps	 xmm2, xmm2
  00d1c	0f 57 c9	 xorps	 xmm1, xmm1
  00d1f	48 8d 8d f4 05
	00 00		 lea	 rcx, QWORD PTR $T34[rbp]
  00d26	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00d2b	48 8b d0	 mov	 rdx, rax
  00d2e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@FLKPNOEH@Focus?5on?5X?$AA@
  00d35	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00d3a	0f b6 c0	 movzx	 eax, al
  00d3d	85 c0		 test	 eax, eax
  00d3f	74 0a		 je	 SHORT $LN71@ShowDemoWi
  00d41	c7 85 44 02 00
	00 00 00 00 00	 mov	 DWORD PTR focus_ahead$23[rbp], 0
$LN71@ShowDemoWi:
  00d4b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00d53	0f 57 c0	 xorps	 xmm0, xmm0
  00d56	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 5854 :             if (ImGui::Button("Focus on Y")) { focus_ahead = 1; } ImGui::SameLine();

  00d5b	0f 57 d2	 xorps	 xmm2, xmm2
  00d5e	0f 57 c9	 xorps	 xmm1, xmm1
  00d61	48 8d 8d 14 06
	00 00		 lea	 rcx, QWORD PTR $T35[rbp]
  00d68	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00d6d	48 8b d0	 mov	 rdx, rax
  00d70	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@ECLEOPAG@Focus?5on?5Y?$AA@
  00d77	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00d7c	0f b6 c0	 movzx	 eax, al
  00d7f	85 c0		 test	 eax, eax
  00d81	74 0a		 je	 SHORT $LN72@ShowDemoWi
  00d83	c7 85 44 02 00
	00 01 00 00 00	 mov	 DWORD PTR focus_ahead$23[rbp], 1
$LN72@ShowDemoWi:
  00d8d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00d95	0f 57 c0	 xorps	 xmm0, xmm0
  00d98	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 5855 :             if (ImGui::Button("Focus on Z")) { focus_ahead = 2; }

  00d9d	0f 57 d2	 xorps	 xmm2, xmm2
  00da0	0f 57 c9	 xorps	 xmm1, xmm1
  00da3	48 8d 8d 34 06
	00 00		 lea	 rcx, QWORD PTR $T36[rbp]
  00daa	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00daf	48 8b d0	 mov	 rdx, rax
  00db2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@GJJJLMMF@Focus?5on?5Z?$AA@
  00db9	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00dbe	0f b6 c0	 movzx	 eax, al
  00dc1	85 c0		 test	 eax, eax
  00dc3	74 0a		 je	 SHORT $LN73@ShowDemoWi
  00dc5	c7 85 44 02 00
	00 02 00 00 00	 mov	 DWORD PTR focus_ahead$23[rbp], 2
$LN73@ShowDemoWi:

; 5856 :             if (focus_ahead != -1) ImGui::SetKeyboardFocusHere(focus_ahead);

  00dcf	83 bd 44 02 00
	00 ff		 cmp	 DWORD PTR focus_ahead$23[rbp], -1
  00dd6	74 0b		 je	 SHORT $LN74@ShowDemoWi
  00dd8	8b 8d 44 02 00
	00		 mov	 ecx, DWORD PTR focus_ahead$23[rbp]
  00dde	e8 00 00 00 00	 call	 ?SetKeyboardFocusHere@ImGui@@YAXH@Z ; ImGui::SetKeyboardFocusHere
$LN74@ShowDemoWi:

; 5857 :             ImGui::SliderFloat3("Float3", &f3[0], 0.0f, 1.0f);

  00de3	b8 04 00 00 00	 mov	 eax, 4
  00de8	48 6b c0 00	 imul	 rax, rax, 0
  00dec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?f3@?EI@??ShowDemoWindowInputs@@YAXXZ@4PAMA
  00df3	48 03 c8	 add	 rcx, rax
  00df6	48 8b c1	 mov	 rax, rcx
  00df9	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00e01	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  00e08	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00e0d	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00e15	0f 57 d2	 xorps	 xmm2, xmm2
  00e18	48 8b d0	 mov	 rdx, rax
  00e1b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FBFHKKF@Float3?$AA@
  00e22	e8 00 00 00 00	 call	 ?SliderFloat3@ImGui@@YA_NPEBDQEAMMM0H@Z ; ImGui::SliderFloat3

; 5858 : 
; 5859 :             ImGui::TextWrapped("NB: Cursor & selection are preserved when refocusing last used item in code.");

  00e27	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EN@KGJCPIPJ@NB?3?5Cursor?5?$CG?5selection?5are?5prese@
  00e2e	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped

; 5860 :             ImGui::TreePop();

  00e33	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN62@ShowDemoWi:
$LN37@ShowDemoWi:

; 5861 :         }
; 5862 : 
; 5863 :         IMGUI_DEMO_MARKER("Inputs & Focus/Dragging");

  00e38	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00e40	74 28		 je	 SHORT $LN75@ShowDemoWi
  00e42	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowInputs@@YAXXZ@4JA
  00e48	05 a9 00 00 00	 add	 eax, 169		; 000000a9H
  00e4d	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00e54	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BI@KAPLGJKD@Inputs?5?$CG?5Focus?1Dragging?$AA@
  00e5b	8b d0		 mov	 edx, eax
  00e5d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00e64	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN75@ShowDemoWi:
  00e6a	33 c0		 xor	 eax, eax
  00e6c	85 c0		 test	 eax, eax
  00e6e	75 c8		 jne	 SHORT $LN37@ShowDemoWi

; 5864 :         if (ImGui::TreeNode("Dragging"))

  00e70	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08EJAEFPJK@Dragging?$AA@
  00e77	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  00e7c	0f b6 c0	 movzx	 eax, al
  00e7f	85 c0		 test	 eax, eax
  00e81	0f 84 1d 02 00
	00		 je	 $LN76@ShowDemoWi

; 5865 :         {
; 5866 :             ImGui::TextWrapped("You can use ImGui::GetMouseDragDelta(0) to query for the dragged amount on any widget.");

  00e87	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FH@PFEFFOMN@You?5can?5use?5ImGui?3?3GetMouseDragD@
  00e8e	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped

; 5867 :             for (int button = 0; button < 3; button++)

  00e93	c7 85 64 02 00
	00 00 00 00 00	 mov	 DWORD PTR button$24[rbp], 0
  00e9d	eb 0e		 jmp	 SHORT $LN40@ShowDemoWi
$LN38@ShowDemoWi:
  00e9f	8b 85 64 02 00
	00		 mov	 eax, DWORD PTR button$24[rbp]
  00ea5	ff c0		 inc	 eax
  00ea7	89 85 64 02 00
	00		 mov	 DWORD PTR button$24[rbp], eax
$LN40@ShowDemoWi:
  00ead	83 bd 64 02 00
	00 03		 cmp	 DWORD PTR button$24[rbp], 3
  00eb4	7d 7e		 jge	 SHORT $LN39@ShowDemoWi

; 5868 :             {
; 5869 :                 ImGui::Text("IsMouseDragging(%d):", button);

  00eb6	8b 95 64 02 00
	00		 mov	 edx, DWORD PTR button$24[rbp]
  00ebc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@KIECDLEM@IsMouseDragging?$CI?$CFd?$CJ?3?$AA@
  00ec3	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5870 :                 ImGui::Text("  w/ default threshold: %d,", ImGui::IsMouseDragging(button));

  00ec8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00ed0	8b 8d 64 02 00
	00		 mov	 ecx, DWORD PTR button$24[rbp]
  00ed6	e8 00 00 00 00	 call	 ?IsMouseDragging@ImGui@@YA_NHM@Z ; ImGui::IsMouseDragging
  00edb	0f b6 c0	 movzx	 eax, al
  00ede	8b d0		 mov	 edx, eax
  00ee0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@OAEENKC@?5?5w?1?5default?5threshold?3?5?$CFd?0?$AA@
  00ee7	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5871 :                 ImGui::Text("  w/ zero threshold: %d,", ImGui::IsMouseDragging(button, 0.0f));

  00eec	0f 57 c9	 xorps	 xmm1, xmm1
  00eef	8b 8d 64 02 00
	00		 mov	 ecx, DWORD PTR button$24[rbp]
  00ef5	e8 00 00 00 00	 call	 ?IsMouseDragging@ImGui@@YA_NHM@Z ; ImGui::IsMouseDragging
  00efa	0f b6 c0	 movzx	 eax, al
  00efd	8b d0		 mov	 edx, eax
  00eff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@EKJNKKLN@?5?5w?1?5zero?5threshold?3?5?$CFd?0?$AA@
  00f06	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5872 :                 ImGui::Text("  w/ large threshold: %d,", ImGui::IsMouseDragging(button, 20.0f));

  00f0b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41a00000
  00f13	8b 8d 64 02 00
	00		 mov	 ecx, DWORD PTR button$24[rbp]
  00f19	e8 00 00 00 00	 call	 ?IsMouseDragging@ImGui@@YA_NHM@Z ; ImGui::IsMouseDragging
  00f1e	0f b6 c0	 movzx	 eax, al
  00f21	8b d0		 mov	 edx, eax
  00f23	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@IDAIPONC@?5?5w?1?5large?5threshold?3?5?$CFd?0?$AA@
  00f2a	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5873 :             }

  00f2f	e9 6b ff ff ff	 jmp	 $LN38@ShowDemoWi
$LN39@ShowDemoWi:

; 5874 : 
; 5875 :             ImGui::Button("Drag Me");

  00f34	0f 57 d2	 xorps	 xmm2, xmm2
  00f37	0f 57 c9	 xorps	 xmm1, xmm1
  00f3a	48 8d 8d 54 06
	00 00		 lea	 rcx, QWORD PTR $T37[rbp]
  00f41	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00f46	48 8b d0	 mov	 rdx, rax
  00f49	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07GELNHEGO@Drag?5Me?$AA@
  00f50	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 5876 :             if (ImGui::IsItemActive())

  00f55	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  00f5a	0f b6 c0	 movzx	 eax, al
  00f5d	85 c0		 test	 eax, eax
  00f5f	74 7e		 je	 SHORT $LN77@ShowDemoWi

; 5877 :                 ImGui::GetForegroundDrawList()->AddLine(io.MouseClickedPos[0], io.MousePos, ImGui::GetColorU32(ImGuiCol_Button), 4.0f); // Draw a line between the button and the mouse cursor

  00f61	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00f69	b9 15 00 00 00	 mov	 ecx, 21
  00f6e	e8 00 00 00 00	 call	 ?GetColorU32@ImGui@@YAIHM@Z ; ImGui::GetColorU32
  00f73	89 85 64 06 00
	00		 mov	 DWORD PTR tv705[rbp], eax
  00f79	48 8b 4d 08	 mov	 rcx, QWORD PTR io$9[rbp]
  00f7d	48 81 c1 f4 0d
	00 00		 add	 rcx, 3572		; 00000df4H
  00f84	48 89 8d 68 06
	00 00		 mov	 QWORD PTR tv709[rbp], rcx
  00f8b	ba 08 00 00 00	 mov	 edx, 8
  00f90	48 6b d2 00	 imul	 rdx, rdx, 0
  00f94	4c 8b 45 08	 mov	 r8, QWORD PTR io$9[rbp]
  00f98	49 8d 94 10 e0
	36 00 00	 lea	 rdx, QWORD PTR [r8+rdx+14048]
  00fa0	48 89 95 70 06
	00 00		 mov	 QWORD PTR tv713[rbp], rdx
  00fa7	e8 00 00 00 00	 call	 ?GetForegroundDrawList@ImGui@@YAPEAUImDrawList@@XZ ; ImGui::GetForegroundDrawList
  00fac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  00fb4	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00fba	8b 8d 64 06 00
	00		 mov	 ecx, DWORD PTR tv705[rbp]
  00fc0	44 8b c9	 mov	 r9d, ecx
  00fc3	48 8b 8d 68 06
	00 00		 mov	 rcx, QWORD PTR tv709[rbp]
  00fca	4c 8b c1	 mov	 r8, rcx
  00fcd	48 8b 8d 70 06
	00 00		 mov	 rcx, QWORD PTR tv713[rbp]
  00fd4	48 8b d1	 mov	 rdx, rcx
  00fd7	48 8b c8	 mov	 rcx, rax
  00fda	e8 00 00 00 00	 call	 ?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
$LN77@ShowDemoWi:

; 5878 : 
; 5879 :             // Drag operations gets "unlocked" when the mouse has moved past a certain threshold
; 5880 :             // (the default threshold is stored in io.MouseDragThreshold). You can request a lower or higher
; 5881 :             // threshold using the second parameter of IsMouseDragging() and GetMouseDragDelta().
; 5882 :             ImVec2 value_raw = ImGui::GetMouseDragDelta(0, 0.0f);

  00fdf	0f 57 d2	 xorps	 xmm2, xmm2
  00fe2	33 d2		 xor	 edx, edx
  00fe4	48 8d 8d 88 02
	00 00		 lea	 rcx, QWORD PTR value_raw$25[rbp]
  00feb	e8 00 00 00 00	 call	 ?GetMouseDragDelta@ImGui@@YA?AUImVec2@@HM@Z ; ImGui::GetMouseDragDelta

; 5883 :             ImVec2 value_with_lock_threshold = ImGui::GetMouseDragDelta(0);

  00ff0	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  00ff8	33 d2		 xor	 edx, edx
  00ffa	48 8d 8d a8 02
	00 00		 lea	 rcx, QWORD PTR value_with_lock_threshold$26[rbp]
  01001	e8 00 00 00 00	 call	 ?GetMouseDragDelta@ImGui@@YA?AUImVec2@@HM@Z ; ImGui::GetMouseDragDelta

; 5884 :             ImVec2 mouse_delta = io.MouseDelta;

  01006	48 8b 45 08	 mov	 rax, QWORD PTR io$9[rbp]
  0100a	48 8b 80 f0 00
	00 00		 mov	 rax, QWORD PTR [rax+240]
  01011	48 89 85 c8 02
	00 00		 mov	 QWORD PTR mouse_delta$27[rbp], rax

; 5885 :             ImGui::Text("GetMouseDragDelta(0):");

  01018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@GNJKBBCP@GetMouseDragDelta?$CI0?$CJ?3?$AA@
  0101f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5886 :             ImGui::Text("  w/ default threshold: (%.1f, %.1f)", value_with_lock_threshold.x, value_with_lock_threshold.y);

  01024	f3 0f 5a 85 ac
	02 00 00	 cvtss2sd xmm0, DWORD PTR value_with_lock_threshold$26[rbp+4]
  0102c	f3 0f 5a 8d a8
	02 00 00	 cvtss2sd xmm1, DWORD PTR value_with_lock_threshold$26[rbp]
  01034	0f 28 d0	 movaps	 xmm2, xmm0
  01037	66 49 0f 7e d0	 movq	 r8, xmm2
  0103c	66 48 0f 7e ca	 movq	 rdx, xmm1
  01041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@KCDOPHOF@?5?5w?1?5default?5threshold?3?5?$CI?$CF?41f?0?5?$CF@
  01048	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5887 :             ImGui::Text("  w/ zero threshold: (%.1f, %.1f)", value_raw.x, value_raw.y);

  0104d	f3 0f 5a 85 8c
	02 00 00	 cvtss2sd xmm0, DWORD PTR value_raw$25[rbp+4]
  01055	f3 0f 5a 8d 88
	02 00 00	 cvtss2sd xmm1, DWORD PTR value_raw$25[rbp]
  0105d	0f 28 d0	 movaps	 xmm2, xmm0
  01060	66 49 0f 7e d0	 movq	 r8, xmm2
  01065	66 48 0f 7e ca	 movq	 rdx, xmm1
  0106a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@LGMLCNKI@?5?5w?1?5zero?5threshold?3?5?$CI?$CF?41f?0?5?$CF?41f@
  01071	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5888 :             ImGui::Text("io.MouseDelta: (%.1f, %.1f)", mouse_delta.x, mouse_delta.y);

  01076	f3 0f 5a 85 cc
	02 00 00	 cvtss2sd xmm0, DWORD PTR mouse_delta$27[rbp+4]
  0107e	f3 0f 5a 8d c8
	02 00 00	 cvtss2sd xmm1, DWORD PTR mouse_delta$27[rbp]
  01086	0f 28 d0	 movaps	 xmm2, xmm0
  01089	66 49 0f 7e d0	 movq	 r8, xmm2
  0108e	66 48 0f 7e ca	 movq	 rdx, xmm1
  01093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@LOAJCJGM@io?4MouseDelta?3?5?$CI?$CF?41f?0?5?$CF?41f?$CJ?$AA@
  0109a	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5889 :             ImGui::TreePop();

  0109f	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN76@ShowDemoWi:
$LN42@ShowDemoWi:

; 5890 :         }
; 5891 :     }
; 5892 : }

  010a4	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  010a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShowDemoWindowInputs@@YAXXZ$rtcFrameData
  010af	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  010b4	48 8b 8d 88 06
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  010bb	48 33 cd	 xor	 rcx, rbp
  010be	e8 00 00 00 00	 call	 __security_check_cookie
  010c3	48 8d a5 98 06
	00 00		 lea	 rsp, QWORD PTR [rbp+1688]
  010ca	5f		 pop	 rdi
  010cb	5d		 pop	 rbp
  010cc	c3		 ret	 0
?ShowDemoWindowInputs@@YAXXZ ENDP			; ShowDemoWindowInputs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowDemoWindowColumns@@YAXXZ
_TEXT	SEGMENT
open$ = 4
n$9 = 36
label$10 = 72
names$11 = 136
paths$12 = 184
i$13 = 228
label$14 = 264
hovered$15 = 324
lines_count$16 = 356
i$17 = 388
child_size$18 = 424
ITEMS_COUNT$19 = 452
clipper$20 = 488
i$21 = 548
j$22 = 580
x$23 = 612
open1$24 = 644
y$25 = 676
open2$26 = 708
$T27 = 1124
$T28 = 1156
$T29 = 1188
$T30 = 1220
$T31 = 1252
$T32 = 1284
$T33 = 1316
$T34 = 1348
$T35 = 1384
tv165 = 1396
__$ArrayPad$ = 1400
?ShowDemoWindowColumns@@YAXXZ PROC			; ShowDemoWindowColumns, COMDAT

; 5488 : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec c8 05
	00 00		 sub	 rsp, 1480		; 000005c8H
  0000a	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 72 01 00 00	 mov	 ecx, 370		; 00000172H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 c7 85 68 05
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T35[rbp], -2
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c5	 xor	 rax, rbp
  00033	48 89 85 78 05
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
$LN4@ShowDemoWi:

; 5489 :     IMGUI_DEMO_MARKER("Columns (legacy API)");

  0003a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00042	74 25		 je	 SHORT $LN46@ShowDemoWi
  00044	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowColumns@@YAXXZ@4JA
  0004a	ff c0		 inc	 eax
  0004c	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00053	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BF@EOLLCEHP@Columns?5?$CIlegacy?5API?$CJ?$AA@
  0005a	8b d0		 mov	 edx, eax
  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN46@ShowDemoWi:
  00069	33 c0		 xor	 eax, eax
  0006b	85 c0		 test	 eax, eax
  0006d	75 cb		 jne	 SHORT $LN4@ShowDemoWi

; 5490 :     bool open = ImGui::TreeNode("Legacy Columns API");

  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@KMNMCONG@Legacy?5Columns?5API?$AA@
  00076	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  0007b	88 45 04	 mov	 BYTE PTR open$[rbp], al

; 5491 :     ImGui::SameLine();

  0007e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00086	0f 57 c0	 xorps	 xmm0, xmm0
  00089	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 5492 :     HelpMarker("Columns() is an old API! Prefer using the more flexible and powerful BeginTable() API!");

  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FH@MGFHBBFF@Columns?$CI?$CJ?5is?5an?5old?5API?$CB?5Prefer?5@
  00095	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5493 :     if (!open)

  0009a	0f b6 45 04	 movzx	 eax, BYTE PTR open$[rbp]
  0009e	85 c0		 test	 eax, eax
  000a0	75 05		 jne	 SHORT $LN7@ShowDemoWi

; 5494 :         return;

  000a2	e9 f4 0a 00 00	 jmp	 $LN1@ShowDemoWi
$LN7@ShowDemoWi:

; 5495 : 
; 5496 :     // Basic columns
; 5497 :     IMGUI_DEMO_MARKER("Columns (legacy API)/Basic");

  000a7	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  000af	74 26		 je	 SHORT $LN48@ShowDemoWi
  000b1	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowColumns@@YAXXZ@4JA
  000b7	83 c0 09	 add	 eax, 9
  000ba	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  000c1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BL@NBCJCENH@Columns?5?$CIlegacy?5API?$CJ?1Basic?$AA@
  000c8	8b d0		 mov	 edx, eax
  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN48@ShowDemoWi:
  000d7	33 c0		 xor	 eax, eax
  000d9	85 c0		 test	 eax, eax
  000db	75 ca		 jne	 SHORT $LN7@ShowDemoWi

; 5498 :     if (ImGui::TreeNode("Basic"))

  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05NIKDGMHP@Basic?$AA@
  000e4	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  000e9	0f b6 c0	 movzx	 eax, al
  000ec	85 c0		 test	 eax, eax
  000ee	0f 84 6f 02 00
	00		 je	 $LN16@ShowDemoWi

; 5499 :     {
; 5500 :         ImGui::Text("Without border:");

  000f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@KGDHMKCI@Without?5border?3?$AA@
  000fb	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5501 :         ImGui::Columns(3, "mycolumns3", false);  // 3-ways, no border

  00100	45 33 c0	 xor	 r8d, r8d
  00103	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@GGDPAOBO@mycolumns3?$AA@
  0010a	b9 03 00 00 00	 mov	 ecx, 3
  0010f	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPEBD_N@Z ; ImGui::Columns

; 5502 :         ImGui::Separator();

  00114	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 5503 :         for (int n = 0; n < 14; n++)

  00119	c7 45 24 00 00
	00 00		 mov	 DWORD PTR n$9[rbp], 0
  00120	eb 08		 jmp	 SHORT $LN10@ShowDemoWi
$LN8@ShowDemoWi:
  00122	8b 45 24	 mov	 eax, DWORD PTR n$9[rbp]
  00125	ff c0		 inc	 eax
  00127	89 45 24	 mov	 DWORD PTR n$9[rbp], eax
$LN10@ShowDemoWi:
  0012a	83 7d 24 0e	 cmp	 DWORD PTR n$9[rbp], 14
  0012e	7d 41		 jge	 SHORT $LN9@ShowDemoWi

; 5504 :         {
; 5505 :             char label[32];
; 5506 :             sprintf(label, "Item %d", n);

  00130	44 8b 45 24	 mov	 r8d, DWORD PTR n$9[rbp]
  00134	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07BCJGKFOL@Item?5?$CFd?$AA@
  0013b	48 8d 4d 48	 lea	 rcx, QWORD PTR label$10[rbp]
  0013f	e8 00 00 00 00	 call	 sprintf

; 5507 :             if (ImGui::Selectable(label)) {}

  00144	0f 57 d2	 xorps	 xmm2, xmm2
  00147	0f 57 c9	 xorps	 xmm1, xmm1
  0014a	48 8d 8d 64 04
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  00151	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00156	4c 8b c8	 mov	 r9, rax
  00159	45 33 c0	 xor	 r8d, r8d
  0015c	33 d2		 xor	 edx, edx
  0015e	48 8d 4d 48	 lea	 rcx, QWORD PTR label$10[rbp]
  00162	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
  00167	0f b6 c0	 movzx	 eax, al

; 5508 :             //if (ImGui::Button(label, ImVec2(-FLT_MIN,0.0f))) {}
; 5509 :             ImGui::NextColumn();

  0016a	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5510 :         }

  0016f	eb b1		 jmp	 SHORT $LN8@ShowDemoWi
$LN9@ShowDemoWi:

; 5511 :         ImGui::Columns(1);

  00171	41 b0 01	 mov	 r8b, 1
  00174	33 d2		 xor	 edx, edx
  00176	b9 01 00 00 00	 mov	 ecx, 1
  0017b	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPEBD_N@Z ; ImGui::Columns

; 5512 :         ImGui::Separator();

  00180	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 5513 : 
; 5514 :         ImGui::Text("With border:");

  00185	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@IEPPLKGA@With?5border?3?$AA@
  0018c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5515 :         ImGui::Columns(4, "mycolumns"); // 4-ways, with border

  00191	41 b0 01	 mov	 r8b, 1
  00194	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09IGOFLFMM@mycolumns?$AA@
  0019b	b9 04 00 00 00	 mov	 ecx, 4
  001a0	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPEBD_N@Z ; ImGui::Columns

; 5516 :         ImGui::Separator();

  001a5	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 5517 :         ImGui::Text("ID"); ImGui::NextColumn();

  001aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02OLOABKKD@ID?$AA@
  001b1	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  001b6	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5518 :         ImGui::Text("Name"); ImGui::NextColumn();

  001bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04FABLJDN@Name?$AA@
  001c2	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  001c7	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5519 :         ImGui::Text("Path"); ImGui::NextColumn();

  001cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04HMIIHGGM@Path?$AA@
  001d3	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  001d8	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5520 :         ImGui::Text("Hovered"); ImGui::NextColumn();

  001dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07BPEJBMFM@Hovered?$AA@
  001e4	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  001e9	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5521 :         ImGui::Separator();

  001ee	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 5522 :         const char* names[3] = { "One", "Two", "Three" };

  001f3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03EHAPBBEA@One?$AA@
  001fa	48 89 85 88 00
	00 00		 mov	 QWORD PTR names$11[rbp], rax
  00201	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03CJAPLBKL@Two?$AA@
  00208	48 89 85 90 00
	00 00		 mov	 QWORD PTR names$11[rbp+8], rax
  0020f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05OHMANGAP@Three?$AA@
  00216	48 89 85 98 00
	00 00		 mov	 QWORD PTR names$11[rbp+16], rax

; 5523 :         const char* paths[3] = { "/path/one", "/path/two", "/path/three" };

  0021d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09MIFGPDGD@?1path?1one?$AA@
  00224	48 89 85 b8 00
	00 00		 mov	 QWORD PTR paths$12[rbp], rax
  0022b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09KGFGFDII@?1path?1two?$AA@
  00232	48 89 85 c0 00
	00 00		 mov	 QWORD PTR paths$12[rbp+8], rax
  00239	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0M@BHGNKNGD@?1path?1three?$AA@
  00240	48 89 85 c8 00
	00 00		 mov	 QWORD PTR paths$12[rbp+16], rax

; 5524 :         static int selected = -1;
; 5525 :         for (int i = 0; i < 3; i++)

  00247	c7 85 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR i$13[rbp], 0
  00251	eb 0e		 jmp	 SHORT $LN13@ShowDemoWi
$LN11@ShowDemoWi:
  00253	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR i$13[rbp]
  00259	ff c0		 inc	 eax
  0025b	89 85 e4 00 00
	00		 mov	 DWORD PTR i$13[rbp], eax
$LN13@ShowDemoWi:
  00261	83 bd e4 00 00
	00 03		 cmp	 DWORD PTR i$13[rbp], 3
  00268	0f 8d dc 00 00
	00		 jge	 $LN12@ShowDemoWi

; 5526 :         {
; 5527 :             char label[32];
; 5528 :             sprintf(label, "%04d", i);

  0026e	44 8b 85 e4 00
	00 00		 mov	 r8d, DWORD PTR i$13[rbp]
  00275	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04OCCELDNI@?$CF04d?$AA@
  0027c	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR label$14[rbp]
  00283	e8 00 00 00 00	 call	 sprintf

; 5529 :             if (ImGui::Selectable(label, selected == i, ImGuiSelectableFlags_SpanAllColumns))

  00288	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR i$13[rbp]
  0028e	39 05 00 00 00
	00		 cmp	 DWORD PTR ?selected@?P@??ShowDemoWindowColumns@@YAXXZ@4HA, eax
  00294	75 09		 jne	 SHORT $LN73@ShowDemoWi
  00296	c6 85 74 05 00
	00 01		 mov	 BYTE PTR tv165[rbp], 1
  0029d	eb 07		 jmp	 SHORT $LN74@ShowDemoWi
$LN73@ShowDemoWi:
  0029f	c6 85 74 05 00
	00 00		 mov	 BYTE PTR tv165[rbp], 0
$LN74@ShowDemoWi:
  002a6	0f 57 d2	 xorps	 xmm2, xmm2
  002a9	0f 57 c9	 xorps	 xmm1, xmm1
  002ac	48 8d 8d 84 04
	00 00		 lea	 rcx, QWORD PTR $T28[rbp]
  002b3	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  002b8	4c 8b c8	 mov	 r9, rax
  002bb	41 b8 02 00 00
	00		 mov	 r8d, 2
  002c1	0f b6 95 74 05
	00 00		 movzx	 edx, BYTE PTR tv165[rbp]
  002c8	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR label$14[rbp]
  002cf	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
  002d4	0f b6 c0	 movzx	 eax, al
  002d7	85 c0		 test	 eax, eax
  002d9	74 0c		 je	 SHORT $LN51@ShowDemoWi

; 5530 :                 selected = i;

  002db	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR i$13[rbp]
  002e1	89 05 00 00 00
	00		 mov	 DWORD PTR ?selected@?P@??ShowDemoWindowColumns@@YAXXZ@4HA, eax
$LN51@ShowDemoWi:

; 5531 :             bool hovered = ImGui::IsItemHovered();

  002e7	33 c9		 xor	 ecx, ecx
  002e9	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  002ee	88 85 44 01 00
	00		 mov	 BYTE PTR hovered$15[rbp], al

; 5532 :             ImGui::NextColumn();

  002f4	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5533 :             ImGui::Text(names[i]); ImGui::NextColumn();

  002f9	48 63 85 e4 00
	00 00		 movsxd	 rax, DWORD PTR i$13[rbp]
  00300	48 8b 8c c5 88
	00 00 00	 mov	 rcx, QWORD PTR names$11[rbp+rax*8]
  00308	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  0030d	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5534 :             ImGui::Text(paths[i]); ImGui::NextColumn();

  00312	48 63 85 e4 00
	00 00		 movsxd	 rax, DWORD PTR i$13[rbp]
  00319	48 8b 8c c5 b8
	00 00 00	 mov	 rcx, QWORD PTR paths$12[rbp+rax*8]
  00321	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  00326	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5535 :             ImGui::Text("%d", hovered); ImGui::NextColumn();

  0032b	0f b6 85 44 01
	00 00		 movzx	 eax, BYTE PTR hovered$15[rbp]
  00332	8b d0		 mov	 edx, eax
  00334	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  0033b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  00340	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5536 :         }

  00345	e9 09 ff ff ff	 jmp	 $LN11@ShowDemoWi
$LN12@ShowDemoWi:

; 5537 :         ImGui::Columns(1);

  0034a	41 b0 01	 mov	 r8b, 1
  0034d	33 d2		 xor	 edx, edx
  0034f	b9 01 00 00 00	 mov	 ecx, 1
  00354	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPEBD_N@Z ; ImGui::Columns

; 5538 :         ImGui::Separator();

  00359	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 5539 :         ImGui::TreePop();

  0035e	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN16@ShowDemoWi:

; 5540 :     }
; 5541 : 
; 5542 :     IMGUI_DEMO_MARKER("Columns (legacy API)/Borders");

  00363	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0036b	74 26		 je	 SHORT $LN52@ShowDemoWi
  0036d	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowColumns@@YAXXZ@4JA
  00373	83 c0 36	 add	 eax, 54			; 00000036H
  00376	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0037d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BN@OHIFMDLO@Columns?5?$CIlegacy?5API?$CJ?1Borders?$AA@
  00384	8b d0		 mov	 edx, eax
  00386	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0038d	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN52@ShowDemoWi:
  00393	33 c0		 xor	 eax, eax
  00395	85 c0		 test	 eax, eax
  00397	75 ca		 jne	 SHORT $LN16@ShowDemoWi

; 5543 :     if (ImGui::TreeNode("Borders"))

  00399	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07PJFMDFHH@Borders?$AA@
  003a0	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  003a5	0f b6 c0	 movzx	 eax, al
  003a8	85 c0		 test	 eax, eax
  003aa	0f 84 02 02 00
	00		 je	 $LN22@ShowDemoWi

; 5544 :     {
; 5545 :         // NB: Future columns API should allow automatic horizontal borders.
; 5546 :         static bool h_borders = true;
; 5547 :         static bool v_borders = true;
; 5548 :         static int columns_count = 4;
; 5549 :         const int lines_count = 3;

  003b0	c7 85 64 01 00
	00 03 00 00 00	 mov	 DWORD PTR lines_count$16[rbp], 3

; 5550 :         ImGui::SetNextItemWidth(ImGui::GetFontSize() * 8);

  003ba	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  003bf	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41000000
  003c7	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth

; 5551 :         ImGui::DragInt("##columns_count", &columns_count, 0.1f, 2, 10, "%d columns");

  003cc	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  003d4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0L@NLMHJDCE@?$CFd?5columns?$AA@
  003db	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  003e0	c7 44 24 20 0a
	00 00 00	 mov	 DWORD PTR [rsp+32], 10
  003e8	41 b9 02 00 00
	00		 mov	 r9d, 2
  003ee	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3dcccccd
  003f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?columns_count@?BP@??ShowDemoWindowColumns@@YAXXZ@4HA
  003fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@EIBKBIKG@?$CD?$CDcolumns_count?$AA@
  00404	e8 00 00 00 00	 call	 ?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z ; ImGui::DragInt

; 5552 :         if (columns_count < 2)

  00409	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?columns_count@?BP@??ShowDemoWindowColumns@@YAXXZ@4HA, 2
  00410	7d 0a		 jge	 SHORT $LN54@ShowDemoWi

; 5553 :             columns_count = 2;

  00412	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?columns_count@?BP@??ShowDemoWindowColumns@@YAXXZ@4HA, 2
$LN54@ShowDemoWi:

; 5554 :         ImGui::SameLine();

  0041c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00424	0f 57 c0	 xorps	 xmm0, xmm0
  00427	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 5555 :         ImGui::Checkbox("horizontal", &h_borders);

  0042c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?h_borders@?BP@??ShowDemoWindowColumns@@YAXXZ@4_NA
  00433	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@LMMKHPOB@horizontal?$AA@
  0043a	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 5556 :         ImGui::SameLine();

  0043f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00447	0f 57 c0	 xorps	 xmm0, xmm0
  0044a	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 5557 :         ImGui::Checkbox("vertical", &v_borders);

  0044f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?v_borders@?BP@??ShowDemoWindowColumns@@YAXXZ@4_NA
  00456	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NEOMLJGJ@vertical?$AA@
  0045d	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 5558 :         ImGui::Columns(columns_count, NULL, v_borders);

  00462	44 0f b6 05 00
	00 00 00	 movzx	 r8d, BYTE PTR ?v_borders@?BP@??ShowDemoWindowColumns@@YAXXZ@4_NA
  0046a	33 d2		 xor	 edx, edx
  0046c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?columns_count@?BP@??ShowDemoWindowColumns@@YAXXZ@4HA
  00472	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPEBD_N@Z ; ImGui::Columns

; 5559 :         for (int i = 0; i < columns_count * lines_count; i++)

  00477	c7 85 84 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$17[rbp], 0
  00481	eb 0e		 jmp	 SHORT $LN19@ShowDemoWi
$LN17@ShowDemoWi:
  00483	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR i$17[rbp]
  00489	ff c0		 inc	 eax
  0048b	89 85 84 01 00
	00		 mov	 DWORD PTR i$17[rbp], eax
$LN19@ShowDemoWi:
  00491	6b 05 00 00 00
	00 03		 imul	 eax, DWORD PTR ?columns_count@?BP@??ShowDemoWindowColumns@@YAXXZ@4HA, 3
  00498	39 85 84 01 00
	00		 cmp	 DWORD PTR i$17[rbp], eax
  0049e	0f 8d ea 00 00
	00		 jge	 $LN18@ShowDemoWi

; 5560 :         {
; 5561 :             if (h_borders && ImGui::GetColumnIndex() == 0)

  004a4	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?h_borders@?BP@??ShowDemoWindowColumns@@YAXXZ@4_NA
  004ab	85 c0		 test	 eax, eax
  004ad	74 0e		 je	 SHORT $LN55@ShowDemoWi
  004af	e8 00 00 00 00	 call	 ?GetColumnIndex@ImGui@@YAHXZ ; ImGui::GetColumnIndex
  004b4	85 c0		 test	 eax, eax
  004b6	75 05		 jne	 SHORT $LN55@ShowDemoWi

; 5562 :                 ImGui::Separator();

  004b8	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator
$LN55@ShowDemoWi:

; 5563 :             ImGui::Text("%c%c%c", 'a' + i, 'a' + i, 'a' + i);

  004bd	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR i$17[rbp]
  004c3	83 c0 61	 add	 eax, 97			; 00000061H
  004c6	8b 8d 84 01 00
	00		 mov	 ecx, DWORD PTR i$17[rbp]
  004cc	83 c1 61	 add	 ecx, 97			; 00000061H
  004cf	8b 95 84 01 00
	00		 mov	 edx, DWORD PTR i$17[rbp]
  004d5	83 c2 61	 add	 edx, 97			; 00000061H
  004d8	44 8b c8	 mov	 r9d, eax
  004db	44 8b c1	 mov	 r8d, ecx
  004de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06CBJCAPLI@?$CFc?$CFc?$CFc?$AA@
  004e5	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5564 :             ImGui::Text("Width %.2f", ImGui::GetColumnWidth());

  004ea	b9 ff ff ff ff	 mov	 ecx, -1
  004ef	e8 00 00 00 00	 call	 ?GetColumnWidth@ImGui@@YAMH@Z ; ImGui::GetColumnWidth
  004f4	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  004f8	0f 28 c8	 movaps	 xmm1, xmm0
  004fb	66 48 0f 7e ca	 movq	 rdx, xmm1
  00500	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@CDOLGENO@Width?5?$CF?42f?$AA@
  00507	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5565 :             ImGui::Text("Avail %.2f", ImGui::GetContentRegionAvail().x);

  0050c	48 8d 8d a4 04
	00 00		 lea	 rcx, QWORD PTR $T29[rbp]
  00513	e8 00 00 00 00	 call	 ?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
  00518	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [rax]
  0051c	0f 28 c8	 movaps	 xmm1, xmm0
  0051f	66 48 0f 7e ca	 movq	 rdx, xmm1
  00524	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OKGLPFJF@Avail?5?$CF?42f?$AA@
  0052b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5566 :             ImGui::Text("Offset %.2f", ImGui::GetColumnOffset());

  00530	b9 ff ff ff ff	 mov	 ecx, -1
  00535	e8 00 00 00 00	 call	 ?GetColumnOffset@ImGui@@YAMH@Z ; ImGui::GetColumnOffset
  0053a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0053e	0f 28 c8	 movaps	 xmm1, xmm0
  00541	66 48 0f 7e ca	 movq	 rdx, xmm1
  00546	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LBGPBMDK@Offset?5?$CF?42f?$AA@
  0054d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5567 :             ImGui::Text("Long text that is likely to clip");

  00552	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@CDDJNDCG@Long?5text?5that?5is?5likely?5to?5clip@
  00559	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5568 :             ImGui::Button("Button", ImVec2(-FLT_MIN, 0.0f));

  0055e	0f 57 d2	 xorps	 xmm2, xmm2
  00561	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@80800000
  00569	48 8d 8d c4 04
	00 00		 lea	 rcx, QWORD PTR $T30[rbp]
  00570	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00575	48 8b d0	 mov	 rdx, rax
  00578	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06LKBCGDFD@Button?$AA@
  0057f	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 5569 :             ImGui::NextColumn();

  00584	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5570 :         }

  00589	e9 f5 fe ff ff	 jmp	 $LN17@ShowDemoWi
$LN18@ShowDemoWi:

; 5571 :         ImGui::Columns(1);

  0058e	41 b0 01	 mov	 r8b, 1
  00591	33 d2		 xor	 edx, edx
  00593	b9 01 00 00 00	 mov	 ecx, 1
  00598	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPEBD_N@Z ; ImGui::Columns

; 5572 :         if (h_borders)

  0059d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?h_borders@?BP@??ShowDemoWindowColumns@@YAXXZ@4_NA
  005a4	85 c0		 test	 eax, eax
  005a6	74 05		 je	 SHORT $LN56@ShowDemoWi

; 5573 :             ImGui::Separator();

  005a8	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator
$LN56@ShowDemoWi:

; 5574 :         ImGui::TreePop();

  005ad	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN22@ShowDemoWi:

; 5575 :     }
; 5576 : 
; 5577 :     // Create multiple items in a same cell before switching to next column
; 5578 :     IMGUI_DEMO_MARKER("Columns (legacy API)/Mixed items");

  005b2	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  005ba	74 26		 je	 SHORT $LN57@ShowDemoWi
  005bc	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowColumns@@YAXXZ@4JA
  005c2	83 c0 5a	 add	 eax, 90			; 0000005aH
  005c5	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  005cc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CB@BCLMDBFI@Columns?5?$CIlegacy?5API?$CJ?1Mixed?5items@
  005d3	8b d0		 mov	 edx, eax
  005d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  005dc	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN57@ShowDemoWi:
  005e2	33 c0		 xor	 eax, eax
  005e4	85 c0		 test	 eax, eax
  005e6	75 ca		 jne	 SHORT $LN22@ShowDemoWi

; 5579 :     if (ImGui::TreeNode("Mixed items"))

  005e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@CEFNMID@Mixed?5items?$AA@
  005ef	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  005f4	0f b6 c0	 movzx	 eax, al
  005f7	85 c0		 test	 eax, eax
  005f9	0f 84 aa 01 00
	00		 je	 $LN25@ShowDemoWi

; 5580 :     {
; 5581 :         ImGui::Columns(3, "mixed");

  005ff	41 b0 01	 mov	 r8b, 1
  00602	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05IPHDHIPP@mixed?$AA@
  00609	b9 03 00 00 00	 mov	 ecx, 3
  0060e	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPEBD_N@Z ; ImGui::Columns

; 5582 :         ImGui::Separator();

  00613	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 5583 : 
; 5584 :         ImGui::Text("Hello");

  00618	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05COLMCDPH@Hello?$AA@
  0061f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5585 :         ImGui::Button("Banana");

  00624	0f 57 d2	 xorps	 xmm2, xmm2
  00627	0f 57 c9	 xorps	 xmm1, xmm1
  0062a	48 8d 8d e4 04
	00 00		 lea	 rcx, QWORD PTR $T31[rbp]
  00631	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00636	48 8b d0	 mov	 rdx, rax
  00639	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OJJIHNKI@Banana?$AA@
  00640	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 5586 :         ImGui::NextColumn();

  00645	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5587 : 
; 5588 :         ImGui::Text("ImGui");

  0064a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OHAOKMNF@ImGui?$AA@
  00651	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5589 :         ImGui::Button("Apple");

  00656	0f 57 d2	 xorps	 xmm2, xmm2
  00659	0f 57 c9	 xorps	 xmm1, xmm1
  0065c	48 8d 8d 04 05
	00 00		 lea	 rcx, QWORD PTR $T32[rbp]
  00663	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00668	48 8b d0	 mov	 rdx, rax
  0066b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05EBJDGKGA@Apple?$AA@
  00672	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 5590 :         static float foo = 1.0f;
; 5591 :         ImGui::InputFloat("red", &foo, 0.05f, 0, "%.3f");

  00677	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0067f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  00686	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0068b	0f 57 db	 xorps	 xmm3, xmm3
  0068e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3d4ccccd
  00696	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?foo@?CO@??ShowDemoWindowColumns@@YAXXZ@4MA
  0069d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03FAAAOPJM@red?$AA@
  006a4	e8 00 00 00 00	 call	 ?InputFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::InputFloat

; 5592 :         ImGui::Text("An extra line here.");

  006a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@OADKLHKC@An?5extra?5line?5here?4?$AA@
  006b0	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5593 :         ImGui::NextColumn();

  006b5	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5594 : 
; 5595 :         ImGui::Text("Sailor");

  006ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IFGMFLK@Sailor?$AA@
  006c1	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5596 :         ImGui::Button("Corniflower");

  006c6	0f 57 d2	 xorps	 xmm2, xmm2
  006c9	0f 57 c9	 xorps	 xmm1, xmm1
  006cc	48 8d 8d 24 05
	00 00		 lea	 rcx, QWORD PTR $T33[rbp]
  006d3	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  006d8	48 8b d0	 mov	 rdx, rax
  006db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@IAINFGJF@Corniflower?$AA@
  006e2	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 5597 :         static float bar = 1.0f;
; 5598 :         ImGui::InputFloat("blue", &bar, 0.05f, 0, "%.3f");

  006e7	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  006ef	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  006f6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006fb	0f 57 db	 xorps	 xmm3, xmm3
  006fe	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3d4ccccd
  00706	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?bar@?CO@??ShowDemoWindowColumns@@YAXXZ@4MA
  0070d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04OBGPFBCN@blue?$AA@
  00714	e8 00 00 00 00	 call	 ?InputFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::InputFloat

; 5599 :         ImGui::NextColumn();

  00719	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5600 : 
; 5601 :         if (ImGui::CollapsingHeader("Category A")) { ImGui::Text("Blah blah blah"); } ImGui::NextColumn();

  0071e	33 d2		 xor	 edx, edx
  00720	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@CDAKMJEM@Category?5A?$AA@
  00727	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPEBDH@Z ; ImGui::CollapsingHeader
  0072c	0f b6 c0	 movzx	 eax, al
  0072f	85 c0		 test	 eax, eax
  00731	74 0c		 je	 SHORT $LN59@ShowDemoWi
  00733	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CNBMJDEI@Blah?5blah?5blah?$AA@
  0073a	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN59@ShowDemoWi:
  0073f	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5602 :         if (ImGui::CollapsingHeader("Category B")) { ImGui::Text("Blah blah blah"); } ImGui::NextColumn();

  00744	33 d2		 xor	 edx, edx
  00746	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@ICHJKIP@Category?5B?$AA@
  0074d	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPEBDH@Z ; ImGui::CollapsingHeader
  00752	0f b6 c0	 movzx	 eax, al
  00755	85 c0		 test	 eax, eax
  00757	74 0c		 je	 SHORT $LN60@ShowDemoWi
  00759	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CNBMJDEI@Blah?5blah?5blah?$AA@
  00760	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN60@ShowDemoWi:
  00765	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5603 :         if (ImGui::CollapsingHeader("Category C")) { ImGui::Text("Blah blah blah"); } ImGui::NextColumn();

  0076a	33 d2		 xor	 edx, edx
  0076c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@BBDMKLMO@Category?5C?$AA@
  00773	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPEBDH@Z ; ImGui::CollapsingHeader
  00778	0f b6 c0	 movzx	 eax, al
  0077b	85 c0		 test	 eax, eax
  0077d	74 0c		 je	 SHORT $LN61@ShowDemoWi
  0077f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CNBMJDEI@Blah?5blah?5blah?$AA@
  00786	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN61@ShowDemoWi:
  0078b	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5604 :         ImGui::Columns(1);

  00790	41 b0 01	 mov	 r8b, 1
  00793	33 d2		 xor	 edx, edx
  00795	b9 01 00 00 00	 mov	 ecx, 1
  0079a	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPEBD_N@Z ; ImGui::Columns

; 5605 :         ImGui::Separator();

  0079f	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 5606 :         ImGui::TreePop();

  007a4	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN25@ShowDemoWi:

; 5607 :     }
; 5608 : 
; 5609 :     // Word wrapping
; 5610 :     IMGUI_DEMO_MARKER("Columns (legacy API)/Word-wrapping");

  007a9	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  007b1	74 26		 je	 SHORT $LN62@ShowDemoWi
  007b3	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowColumns@@YAXXZ@4JA
  007b9	83 c0 7a	 add	 eax, 122		; 0000007aH
  007bc	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  007c3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CD@OAPEDJDK@Columns?5?$CIlegacy?5API?$CJ?1Word?9wrappi@
  007ca	8b d0		 mov	 edx, eax
  007cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  007d3	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN62@ShowDemoWi:
  007d9	33 c0		 xor	 eax, eax
  007db	85 c0		 test	 eax, eax
  007dd	75 ca		 jne	 SHORT $LN25@ShowDemoWi

; 5611 :     if (ImGui::TreeNode("Word-wrapping"))

  007df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FMIDKLNC@Word?9wrapping?$AA@
  007e6	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  007eb	0f b6 c0	 movzx	 eax, al
  007ee	85 c0		 test	 eax, eax
  007f0	74 67		 je	 SHORT $LN28@ShowDemoWi

; 5612 :     {
; 5613 :         ImGui::Columns(2, "word-wrapping");

  007f2	41 b0 01	 mov	 r8b, 1
  007f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@JBOHNDAK@word?9wrapping?$AA@
  007fc	b9 02 00 00 00	 mov	 ecx, 2
  00801	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPEBD_N@Z ; ImGui::Columns

; 5614 :         ImGui::Separator();

  00806	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 5615 :         ImGui::TextWrapped("The quick brown fox jumps over the lazy dog.");

  0080b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CN@PEHKNKIL@The?5quick?5brown?5fox?5jumps?5over?5t@
  00812	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped

; 5616 :         ImGui::TextWrapped("Hello Left");

  00817	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@BOIODOOK@Hello?5Left?$AA@
  0081e	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped

; 5617 :         ImGui::NextColumn();

  00823	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5618 :         ImGui::TextWrapped("The quick brown fox jumps over the lazy dog.");

  00828	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CN@PEHKNKIL@The?5quick?5brown?5fox?5jumps?5over?5t@
  0082f	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped

; 5619 :         ImGui::TextWrapped("Hello Right");

  00834	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@FKDOIKDB@Hello?5Right?$AA@
  0083b	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped

; 5620 :         ImGui::Columns(1);

  00840	41 b0 01	 mov	 r8b, 1
  00843	33 d2		 xor	 edx, edx
  00845	b9 01 00 00 00	 mov	 ecx, 1
  0084a	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPEBD_N@Z ; ImGui::Columns

; 5621 :         ImGui::Separator();

  0084f	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 5622 :         ImGui::TreePop();

  00854	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN28@ShowDemoWi:

; 5623 :     }
; 5624 : 
; 5625 :     IMGUI_DEMO_MARKER("Columns (legacy API)/Horizontal Scrolling");

  00859	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00861	74 28		 je	 SHORT $LN64@ShowDemoWi
  00863	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowColumns@@YAXXZ@4JA
  00869	05 89 00 00 00	 add	 eax, 137		; 00000089H
  0086e	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00875	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CK@DPADPAMP@Columns?5?$CIlegacy?5API?$CJ?1Horizontal?5@
  0087c	8b d0		 mov	 edx, eax
  0087e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00885	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN64@ShowDemoWi:
  0088b	33 c0		 xor	 eax, eax
  0088d	85 c0		 test	 eax, eax
  0088f	75 c8		 jne	 SHORT $LN28@ShowDemoWi

; 5626 :     if (ImGui::TreeNode("Horizontal Scrolling"))

  00891	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@EDLEGCAK@Horizontal?5Scrolling?$AA@
  00898	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  0089d	0f b6 c0	 movzx	 eax, al
  008a0	85 c0		 test	 eax, eax
  008a2	0f 84 47 01 00
	00		 je	 $LN39@ShowDemoWi

; 5627 :     {
; 5628 :         ImGui::SetNextWindowContentSize(ImVec2(1500.0f, 0.0f));

  008a8	0f 57 d2	 xorps	 xmm2, xmm2
  008ab	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@44bb8000
  008b3	48 8d 8d 44 05
	00 00		 lea	 rcx, QWORD PTR $T34[rbp]
  008ba	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  008bf	48 8b c8	 mov	 rcx, rax
  008c2	e8 00 00 00 00	 call	 ?SetNextWindowContentSize@ImGui@@YAXAEBUImVec2@@@Z ; ImGui::SetNextWindowContentSize

; 5629 :         ImVec2 child_size = ImVec2(0, ImGui::GetFontSize() * 20.0f);

  008c7	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  008cc	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41a00000
  008d4	0f 28 d0	 movaps	 xmm2, xmm0
  008d7	0f 57 c9	 xorps	 xmm1, xmm1
  008da	48 8d 8d a8 01
	00 00		 lea	 rcx, QWORD PTR child_size$18[rbp]
  008e1	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 5630 :         ImGui::BeginChild("##ScrollingRegion", child_size, false, ImGuiWindowFlags_HorizontalScrollbar);

  008e6	41 b9 00 08 00
	00		 mov	 r9d, 2048		; 00000800H
  008ec	45 33 c0	 xor	 r8d, r8d
  008ef	48 8d 95 a8 01
	00 00		 lea	 rdx, QWORD PTR child_size$18[rbp]
  008f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@OPBMFBNO@?$CD?$CDScrollingRegion?$AA@
  008fd	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z ; ImGui::BeginChild

; 5631 :         ImGui::Columns(10);

  00902	41 b0 01	 mov	 r8b, 1
  00905	33 d2		 xor	 edx, edx
  00907	b9 0a 00 00 00	 mov	 ecx, 10
  0090c	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPEBD_N@Z ; ImGui::Columns

; 5632 : 
; 5633 :         // Also demonstrate using clipper for large vertical lists
; 5634 :         int ITEMS_COUNT = 2000;

  00911	c7 85 c4 01 00
	00 d0 07 00 00	 mov	 DWORD PTR ITEMS_COUNT$19[rbp], 2000 ; 000007d0H

; 5635 :         ImGuiListClipper clipper;

  0091b	48 8d 8d e8 01
	00 00		 lea	 rcx, QWORD PTR clipper$20[rbp]
  00922	e8 00 00 00 00	 call	 ??0ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::ImGuiListClipper
  00927	90		 npad	 1

; 5636 :         clipper.Begin(ITEMS_COUNT);

  00928	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  00930	8b 95 c4 01 00
	00		 mov	 edx, DWORD PTR ITEMS_COUNT$19[rbp]
  00936	48 8d 8d e8 01
	00 00		 lea	 rcx, QWORD PTR clipper$20[rbp]
  0093d	e8 00 00 00 00	 call	 ?Begin@ImGuiListClipper@@QEAAXHM@Z ; ImGuiListClipper::Begin
$LN29@ShowDemoWi:

; 5637 :         while (clipper.Step())

  00942	48 8d 8d e8 01
	00 00		 lea	 rcx, QWORD PTR clipper$20[rbp]
  00949	e8 00 00 00 00	 call	 ?Step@ImGuiListClipper@@QEAA_NXZ ; ImGuiListClipper::Step
  0094e	0f b6 c0	 movzx	 eax, al
  00951	85 c0		 test	 eax, eax
  00953	74 74		 je	 SHORT $LN30@ShowDemoWi

; 5638 :         {
; 5639 :             for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)

  00955	8b 85 e8 01 00
	00		 mov	 eax, DWORD PTR clipper$20[rbp]
  0095b	89 85 24 02 00
	00		 mov	 DWORD PTR i$21[rbp], eax
  00961	eb 0e		 jmp	 SHORT $LN33@ShowDemoWi
$LN31@ShowDemoWi:
  00963	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR i$21[rbp]
  00969	ff c0		 inc	 eax
  0096b	89 85 24 02 00
	00		 mov	 DWORD PTR i$21[rbp], eax
$LN33@ShowDemoWi:
  00971	8b 85 ec 01 00
	00		 mov	 eax, DWORD PTR clipper$20[rbp+4]
  00977	39 85 24 02 00
	00		 cmp	 DWORD PTR i$21[rbp], eax
  0097d	7d 45		 jge	 SHORT $LN32@ShowDemoWi

; 5640 :                 for (int j = 0; j < 10; j++)

  0097f	c7 85 44 02 00
	00 00 00 00 00	 mov	 DWORD PTR j$22[rbp], 0
  00989	eb 0e		 jmp	 SHORT $LN36@ShowDemoWi
$LN34@ShowDemoWi:
  0098b	8b 85 44 02 00
	00		 mov	 eax, DWORD PTR j$22[rbp]
  00991	ff c0		 inc	 eax
  00993	89 85 44 02 00
	00		 mov	 DWORD PTR j$22[rbp], eax
$LN36@ShowDemoWi:
  00999	83 bd 44 02 00
	00 0a		 cmp	 DWORD PTR j$22[rbp], 10
  009a0	7d 20		 jge	 SHORT $LN35@ShowDemoWi

; 5641 :                 {
; 5642 :                     ImGui::Text("Line %d Column %d...", i, j);

  009a2	44 8b 85 44 02
	00 00		 mov	 r8d, DWORD PTR j$22[rbp]
  009a9	8b 95 24 02 00
	00		 mov	 edx, DWORD PTR i$21[rbp]
  009af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OFLPNIGP@Line?5?$CFd?5Column?5?$CFd?4?4?4?$AA@
  009b6	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5643 :                     ImGui::NextColumn();

  009bb	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5644 :                 }

  009c0	eb c9		 jmp	 SHORT $LN34@ShowDemoWi
$LN35@ShowDemoWi:
  009c2	eb 9f		 jmp	 SHORT $LN31@ShowDemoWi
$LN32@ShowDemoWi:

; 5645 :         }

  009c4	e9 79 ff ff ff	 jmp	 $LN29@ShowDemoWi
$LN30@ShowDemoWi:

; 5646 :         ImGui::Columns(1);

  009c9	41 b0 01	 mov	 r8b, 1
  009cc	33 d2		 xor	 edx, edx
  009ce	b9 01 00 00 00	 mov	 ecx, 1
  009d3	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPEBD_N@Z ; ImGui::Columns

; 5647 :         ImGui::EndChild();

  009d8	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 5648 :         ImGui::TreePop();

  009dd	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
  009e2	90		 npad	 1

; 5649 :     }

  009e3	48 8d 8d e8 01
	00 00		 lea	 rcx, QWORD PTR clipper$20[rbp]
  009ea	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::~ImGuiListClipper
$LN39@ShowDemoWi:

; 5650 : 
; 5651 :     IMGUI_DEMO_MARKER("Columns (legacy API)/Tree");

  009ef	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  009f7	74 28		 je	 SHORT $LN66@ShowDemoWi
  009f9	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowColumns@@YAXXZ@4JA
  009ff	05 a3 00 00 00	 add	 eax, 163		; 000000a3H
  00a04	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00a0b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BK@FPOKBMNL@Columns?5?$CIlegacy?5API?$CJ?1Tree?$AA@
  00a12	8b d0		 mov	 edx, eax
  00a14	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00a1b	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN66@ShowDemoWi:
  00a21	33 c0		 xor	 eax, eax
  00a23	85 c0		 test	 eax, eax
  00a25	75 c8		 jne	 SHORT $LN39@ShowDemoWi

; 5652 :     if (ImGui::TreeNode("Tree"))

  00a27	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GDOOJPNH@Tree?$AA@
  00a2e	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  00a33	0f b6 c0	 movzx	 eax, al
  00a36	85 c0		 test	 eax, eax
  00a38	0f 84 58 01 00
	00		 je	 $LN67@ShowDemoWi

; 5653 :     {
; 5654 :         ImGui::Columns(2, "tree", true);

  00a3e	41 b0 01	 mov	 r8b, 1
  00a41	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KCCPLAND@tree?$AA@
  00a48	b9 02 00 00 00	 mov	 ecx, 2
  00a4d	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPEBD_N@Z ; ImGui::Columns

; 5655 :         for (int x = 0; x < 3; x++)

  00a52	c7 85 64 02 00
	00 00 00 00 00	 mov	 DWORD PTR x$23[rbp], 0
  00a5c	eb 0e		 jmp	 SHORT $LN42@ShowDemoWi
$LN40@ShowDemoWi:
  00a5e	8b 85 64 02 00
	00		 mov	 eax, DWORD PTR x$23[rbp]
  00a64	ff c0		 inc	 eax
  00a66	89 85 64 02 00
	00		 mov	 DWORD PTR x$23[rbp], eax
$LN42@ShowDemoWi:
  00a6c	83 bd 64 02 00
	00 03		 cmp	 DWORD PTR x$23[rbp], 3
  00a73	0f 8d 09 01 00
	00		 jge	 $LN41@ShowDemoWi

; 5656 :         {
; 5657 :             bool open1 = ImGui::TreeNode((void*)(intptr_t)x, "Node%d", x);

  00a79	48 63 85 64 02
	00 00		 movsxd	 rax, DWORD PTR x$23[rbp]
  00a80	44 8b 85 64 02
	00 00		 mov	 r8d, DWORD PTR x$23[rbp]
  00a87	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06NAFIGPDO@Node?$CFd?$AA@
  00a8e	48 8b c8	 mov	 rcx, rax
  00a91	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBXPEBDZZ ; ImGui::TreeNode
  00a96	88 85 84 02 00
	00		 mov	 BYTE PTR open1$24[rbp], al

; 5658 :             ImGui::NextColumn();

  00a9c	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5659 :             ImGui::Text("Node contents");

  00aa1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DCLBKAFC@Node?5contents?$AA@
  00aa8	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5660 :             ImGui::NextColumn();

  00aad	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5661 :             if (open1)

  00ab2	0f b6 85 84 02
	00 00		 movzx	 eax, BYTE PTR open1$24[rbp]
  00ab9	85 c0		 test	 eax, eax
  00abb	0f 84 bc 00 00
	00		 je	 $LN68@ShowDemoWi

; 5662 :             {
; 5663 :                 for (int y = 0; y < 3; y++)

  00ac1	c7 85 a4 02 00
	00 00 00 00 00	 mov	 DWORD PTR y$25[rbp], 0
  00acb	eb 0e		 jmp	 SHORT $LN45@ShowDemoWi
$LN43@ShowDemoWi:
  00acd	8b 85 a4 02 00
	00		 mov	 eax, DWORD PTR y$25[rbp]
  00ad3	ff c0		 inc	 eax
  00ad5	89 85 a4 02 00
	00		 mov	 DWORD PTR y$25[rbp], eax
$LN45@ShowDemoWi:
  00adb	83 bd a4 02 00
	00 03		 cmp	 DWORD PTR y$25[rbp], 3
  00ae2	0f 8d 90 00 00
	00		 jge	 $LN44@ShowDemoWi

; 5664 :                 {
; 5665 :                     bool open2 = ImGui::TreeNode((void*)(intptr_t)y, "Node%d.%d", x, y);

  00ae8	48 63 85 a4 02
	00 00		 movsxd	 rax, DWORD PTR y$25[rbp]
  00aef	44 8b 8d a4 02
	00 00		 mov	 r9d, DWORD PTR y$25[rbp]
  00af6	44 8b 85 64 02
	00 00		 mov	 r8d, DWORD PTR x$23[rbp]
  00afd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09NGNKJEEB@Node?$CFd?4?$CFd?$AA@
  00b04	48 8b c8	 mov	 rcx, rax
  00b07	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBXPEBDZZ ; ImGui::TreeNode
  00b0c	88 85 c4 02 00
	00		 mov	 BYTE PTR open2$26[rbp], al

; 5666 :                     ImGui::NextColumn();

  00b12	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5667 :                     ImGui::Text("Node contents");

  00b17	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DCLBKAFC@Node?5contents?$AA@
  00b1e	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5668 :                     if (open2)

  00b23	0f b6 85 c4 02
	00 00		 movzx	 eax, BYTE PTR open2$26[rbp]
  00b2a	85 c0		 test	 eax, eax
  00b2c	74 30		 je	 SHORT $LN69@ShowDemoWi

; 5669 :                     {
; 5670 :                         ImGui::Text("Even more contents");

  00b2e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@MJPJLCIK@Even?5more?5contents?$AA@
  00b35	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5671 :                         if (ImGui::TreeNode("Tree in column"))

  00b3a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@LKPCNPLG@Tree?5in?5column?$AA@
  00b41	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  00b46	0f b6 c0	 movzx	 eax, al
  00b49	85 c0		 test	 eax, eax
  00b4b	74 11		 je	 SHORT $LN69@ShowDemoWi

; 5672 :                         {
; 5673 :                             ImGui::Text("The quick brown fox jumps over the lazy dog");

  00b4d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@HCLJNHNJ@The?5quick?5brown?5fox?5jumps?5over?5t@
  00b54	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5674 :                             ImGui::TreePop();

  00b59	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN69@ShowDemoWi:

; 5675 :                         }
; 5676 :                     }
; 5677 :                     ImGui::NextColumn();

  00b5e	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 5678 :                     if (open2)

  00b63	0f b6 85 c4 02
	00 00		 movzx	 eax, BYTE PTR open2$26[rbp]
  00b6a	85 c0		 test	 eax, eax
  00b6c	74 05		 je	 SHORT $LN71@ShowDemoWi

; 5679 :                         ImGui::TreePop();

  00b6e	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN71@ShowDemoWi:

; 5680 :                 }

  00b73	e9 55 ff ff ff	 jmp	 $LN43@ShowDemoWi
$LN44@ShowDemoWi:

; 5681 :                 ImGui::TreePop();

  00b78	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN68@ShowDemoWi:

; 5682 :             }
; 5683 :         }

  00b7d	e9 dc fe ff ff	 jmp	 $LN40@ShowDemoWi
$LN41@ShowDemoWi:

; 5684 :         ImGui::Columns(1);

  00b82	41 b0 01	 mov	 r8b, 1
  00b85	33 d2		 xor	 edx, edx
  00b87	b9 01 00 00 00	 mov	 ecx, 1
  00b8c	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPEBD_N@Z ; ImGui::Columns

; 5685 :         ImGui::TreePop();

  00b91	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN67@ShowDemoWi:

; 5686 :     }
; 5687 : 
; 5688 :     ImGui::TreePop();

  00b96	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN1@ShowDemoWi:

; 5689 : }

  00b9b	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  00b9f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShowDemoWindowColumns@@YAXXZ$rtcFrameData
  00ba6	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00bab	48 8b 8d 78 05
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00bb2	48 33 cd	 xor	 rcx, rbp
  00bb5	e8 00 00 00 00	 call	 __security_check_cookie
  00bba	48 8d a5 88 05
	00 00		 lea	 rsp, QWORD PTR [rbp+1416]
  00bc1	5f		 pop	 rdi
  00bc2	5d		 pop	 rbp
  00bc3	c3		 ret	 0
?ShowDemoWindowColumns@@YAXXZ ENDP			; ShowDemoWindowColumns
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
open$ = 4
n$9 = 36
label$10 = 72
names$11 = 136
paths$12 = 184
i$13 = 228
label$14 = 264
hovered$15 = 324
lines_count$16 = 356
i$17 = 388
child_size$18 = 424
ITEMS_COUNT$19 = 452
clipper$20 = 488
i$21 = 548
j$22 = 580
x$23 = 612
open1$24 = 644
y$25 = 676
open2$26 = 708
$T27 = 1124
$T28 = 1156
$T29 = 1188
$T30 = 1220
$T31 = 1252
$T32 = 1284
$T33 = 1316
$T34 = 1348
$T35 = 1384
tv165 = 1396
__$ArrayPad$ = 1400
?dtor$0@?0??ShowDemoWindowColumns@@YAXXZ@4HA PROC	; `ShowDemoWindowColumns'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 8d e8 01
	00 00		 lea	 rcx, QWORD PTR clipper$20[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::~ImGuiListClipper
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??ShowDemoWindowColumns@@YAXXZ@4HA ENDP	; `ShowDemoWindowColumns'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
open$ = 4
n$9 = 36
label$10 = 72
names$11 = 136
paths$12 = 184
i$13 = 228
label$14 = 264
hovered$15 = 324
lines_count$16 = 356
i$17 = 388
child_size$18 = 424
ITEMS_COUNT$19 = 452
clipper$20 = 488
i$21 = 548
j$22 = 580
x$23 = 612
open1$24 = 644
y$25 = 676
open2$26 = 708
$T27 = 1124
$T28 = 1156
$T29 = 1188
$T30 = 1220
$T31 = 1252
$T32 = 1284
$T33 = 1316
$T34 = 1348
$T35 = 1384
tv165 = 1396
__$ArrayPad$ = 1400
?dtor$0@?0??ShowDemoWindowColumns@@YAXXZ@4HA PROC	; `ShowDemoWindowColumns'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 8d e8 01
	00 00		 lea	 rcx, QWORD PTR clipper$20[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::~ImGuiListClipper
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??ShowDemoWindowColumns@@YAXXZ@4HA ENDP	; `ShowDemoWindowColumns'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowDemoWindowTables@@YAXXZ
_TEXT	SEGMENT
TEXT_BASE_WIDTH$ = 4
TEXT_BASE_HEIGHT$ = 36
open_action$ = 68
row$20 = 100
column$21 = 132
row$22 = 164
item$23 = 196
row$24 = 228
column$25 = 260
buf$26 = 296
row$27 = 356
column$28 = 388
row$29 = 420
column$30 = 452
row$31 = 484
column$32 = 516
row$33 = 548
column$34 = 580
row$35 = 612
column$36 = 644
row$37 = 676
column$38 = 708
row$39 = 740
column$40 = 772
buf$41 = 808
cell$42 = 868
table_n$43 = 900
row$44 = 932
row$45 = 964
cell$46 = 996
column$47 = 1028
row$48 = 1060
label$49 = 1096
outer_size$50 = 1160
clipper$51 = 1192
row$52 = 1252
column$53 = 1284
outer_size$54 = 1320
row$55 = 1348
column$56 = 1380
cell$57 = 1412
column_count$58 = 1444
column_names$59 = 1480
column$60 = 1524
flags$61 = 1556
outer_size$62 = 1592
column$63 = 1620
column$64 = 1652
indent_step$65 = 1684
row$66 = 1716
column$67 = 1748
row$68 = 1780
column$69 = 1812
row$70 = 1844
column$71 = 1876
rows_height$72 = 1908
row$73 = 1940
min_row_height$74 = 1972
outer_size$75 = 2008
row$76 = 2036
column$77 = 2068
row$78 = 2100
column$79 = 2132
row$80 = 2164
column$81 = 2196
row$82 = 2228
row_bg_color$83 = 2260
column$84 = 2292
cell_bg_color$85 = 2324
row$86 = 2356
COLUMNS_COUNT$87 = 2388
column$88 = 2420
column_name$89 = 2456
row$90 = 2484
column$91 = 2516
buf$92 = 2552
COLUMNS_COUNT$93 = 2612
row$94 = 2644
column$95 = 2676
flags2$96 = 2708
row$97 = 2740
column$98 = 2772
hovered_column$99 = 2804
column$100 = 2836
n$101 = 2868
buf$102 = 2904
open$103 = 2964
cell_count$104 = 2996
cell$105 = 3028
n$106 = 3060
template_n$107 = 3092
item$108 = 3128
sorts_specs$109 = 3160
clipper$110 = 3192
row_n$111 = 3252
item$112 = 3288
contents_type_names$113 = 3320
n$114 = 3396
template_n$115 = 3428
item$116 = 3464
parent_draw_list$117 = 3496
parent_draw_list_draw_cmd_count$118 = 3524
table_scroll_cur$119 = 3560
table_scroll_max$120 = 3592
table_draw_list$121 = 3624
inner_width_to_use$122 = 3652
sorts_specs$123 = 3688
sorts_specs_using_quantity$124 = 3716
clipper$125 = 3752
row_n$126 = 3812
item$127 = 3848
item_is_selected$128 = 3876
label$129 = 3912
selectable_flags$130 = 3972
table_draw_list_draw_cmd_count$131 = 4004
$T132 = 5572
$T133 = 5604
$T134 = 5636
$T135 = 5668
$T136 = 5700
$T137 = 5732
$T138 = 5764
$T139 = 5796
$T140 = 5828
$T141 = 5860
$T142 = 5892
$T143 = 5924
$T144 = 5956
$T145 = 5988
$T146 = 6020
$T147 = 6052
$T148 = 6084
$T149 = 6116
$T150 = 6148
$T151 = 6180
$T152 = 6212
$T153 = 6244
$T154 = 6276
$T155 = 6308
$T156 = 6340
$T157 = 6372
$T158 = 6404
$T159 = 6436
$T160 = 6468
$T161 = 6500
$T162 = 6532
$T163 = 6564
$T164 = 6596
$T165 = 6628
$T166 = 6660
$T167 = 6696
$T168 = 6724
$T169 = 6772
$T170 = 6820
$T171 = 6868
$T172 = 6900
$T173 = 6932
$T174 = 6964
$T175 = 6996
$T176 = 7028
$T177 = 7060
$T178 = 7092
$T179 = 7124
$T180 = 7156
$T181 = 7188
$T182 = 7224
$T183 = 7268
$T184 = 7304
$T185 = 7352
$T186 = 7380
$T187 = 7412
$T188 = 7444
$T189 = 7476
$T190 = 7508
$T191 = 7540
$T192 = 7572
$T193 = 7608
tv3397 = 7620
tv3390 = 7620
tv3306 = 7620
tv3220 = 7620
tv3189 = 7620
tv3153 = 7620
tv3145 = 7620
tv2747 = 7620
tv2608 = 7620
tv2600 = 7620
tv2511 = 7620
tv2330 = 7620
tv2242 = 7620
tv2130 = 7620
tv2084 = 7620
tv1924 = 7620
tv1823 = 7620
tv1781 = 7620
tv1647 = 7620
tv1525 = 7620
tv1427 = 7620
tv1419 = 7620
tv1259 = 7620
tv1161 = 7620
tv1119 = 7620
tv952 = 7620
tv741 = 7620
tv605 = 7620
tv470 = 7620
tv428 = 7620
tv381 = 7620
tv228 = 7620
tv151 = 7620
tv3422 = 7624
tv3209 = 7624
tv3162 = 7624
tv3144 = 7624
tv2708 = 7624
tv2051 = 7624
tv1517 = 7624
tv1491 = 7624
tv1129 = 7624
tv599 = 7624
tv550 = 7624
__$ArrayPad$ = 7632
?ShowDemoWindowTables@@YAXXZ PROC			; ShowDemoWindowTables, COMDAT

; 3755 : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	b8 28 1e 00 00	 mov	 eax, 7720		; 00001e28H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	48 2b e0	 sub	 rsp, rax
  00010	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 8a 07 00 00	 mov	 ecx, 1930		; 0000078aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 c7 85 b8 1d
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T193[rbp], -2
  0002f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00036	48 33 c5	 xor	 rax, rbp
  00039	48 89 85 d0 1d
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
$LN4@ShowDemoWi:

; 3756 :     //ImGui::SetNextItemOpen(true, ImGuiCond_Once);
; 3757 :     IMGUI_DEMO_MARKER("Tables");

  00040	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00048	74 26		 je	 SHORT $LN276@ShowDemoWi
  0004a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  00050	83 c0 02	 add	 eax, 2
  00053	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0005a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06KOKNHOLC@Tables?$AA@
  00061	8b d0		 mov	 edx, eax
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0006a	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN276@ShowDemoWi:
  00070	33 c0		 xor	 eax, eax
  00072	85 c0		 test	 eax, eax
  00074	75 ca		 jne	 SHORT $LN4@ShowDemoWi

; 3758 :     if (!ImGui::CollapsingHeader("Tables & Columns"))

  00076	33 d2		 xor	 edx, edx
  00078	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MJGPNNJD@Tables?5?$CG?5Columns?$AA@
  0007f	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPEBDH@Z ; ImGui::CollapsingHeader
  00084	0f b6 c0	 movzx	 eax, al
  00087	85 c0		 test	 eax, eax
  00089	75 05		 jne	 SHORT $LN277@ShowDemoWi

; 3759 :         return;

  0008b	e9 eb 59 00 00	 jmp	 $LN1@ShowDemoWi
$LN277@ShowDemoWi:

; 3760 : 
; 3761 :     // Using those as a base value to create width/height that are factor of the size of our font
; 3762 :     const float TEXT_BASE_WIDTH = ImGui::CalcTextSize("A").x;

  00090	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00098	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0009e	45 33 c9	 xor	 r9d, r9d
  000a1	45 33 c0	 xor	 r8d, r8d
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01FHEEJDEE@A?$AA@
  000ab	48 8d 8d c4 15
	00 00		 lea	 rcx, QWORD PTR $T132[rbp]
  000b2	e8 00 00 00 00	 call	 ?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
  000b7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  000bb	f3 0f 11 45 04	 movss	 DWORD PTR TEXT_BASE_WIDTH$[rbp], xmm0

; 3763 :     const float TEXT_BASE_HEIGHT = ImGui::GetTextLineHeightWithSpacing();

  000c0	e8 00 00 00 00	 call	 ?GetTextLineHeightWithSpacing@ImGui@@YAMXZ ; ImGui::GetTextLineHeightWithSpacing
  000c5	f3 0f 11 45 24	 movss	 DWORD PTR TEXT_BASE_HEIGHT$[rbp], xmm0

; 3764 : 
; 3765 :     ImGui::PushID("Tables");

  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KOKNHOLC@Tables?$AA@
  000d1	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPEBD@Z ; ImGui::PushID

; 3766 : 
; 3767 :     int open_action = -1;

  000d6	c7 45 44 ff ff
	ff ff		 mov	 DWORD PTR open_action$[rbp], -1

; 3768 :     if (ImGui::Button("Open all"))

  000dd	0f 57 d2	 xorps	 xmm2, xmm2
  000e0	0f 57 c9	 xorps	 xmm1, xmm1
  000e3	48 8d 8d e4 15
	00 00		 lea	 rcx, QWORD PTR $T133[rbp]
  000ea	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000ef	48 8b d0	 mov	 rdx, rax
  000f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08JFCDBCPC@Open?5all?$AA@
  000f9	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  000fe	0f b6 c0	 movzx	 eax, al
  00101	85 c0		 test	 eax, eax
  00103	74 07		 je	 SHORT $LN278@ShowDemoWi

; 3769 :         open_action = 1;

  00105	c7 45 44 01 00
	00 00		 mov	 DWORD PTR open_action$[rbp], 1
$LN278@ShowDemoWi:

; 3770 :     ImGui::SameLine();

  0010c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00114	0f 57 c0	 xorps	 xmm0, xmm0
  00117	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 3771 :     if (ImGui::Button("Close all"))

  0011c	0f 57 d2	 xorps	 xmm2, xmm2
  0011f	0f 57 c9	 xorps	 xmm1, xmm1
  00122	48 8d 8d 04 16
	00 00		 lea	 rcx, QWORD PTR $T134[rbp]
  00129	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0012e	48 8b d0	 mov	 rdx, rax
  00131	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09JFADBGFP@Close?5all?$AA@
  00138	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  0013d	0f b6 c0	 movzx	 eax, al
  00140	85 c0		 test	 eax, eax
  00142	74 07		 je	 SHORT $LN279@ShowDemoWi

; 3772 :         open_action = 0;

  00144	c7 45 44 00 00
	00 00		 mov	 DWORD PTR open_action$[rbp], 0
$LN279@ShowDemoWi:

; 3773 :     ImGui::SameLine();

  0014b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00153	0f 57 c0	 xorps	 xmm0, xmm0
  00156	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 3774 : 
; 3775 :     // Options
; 3776 :     static bool disable_indent = false;
; 3777 :     ImGui::Checkbox("Disable tree indentation", &disable_indent);

  0015b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?disable_indent@?1??ShowDemoWindowTables@@YAXXZ@4_NA
  00162	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@JLFJACII@Disable?5tree?5indentation?$AA@
  00169	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 3778 :     ImGui::SameLine();

  0016e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00176	0f 57 c0	 xorps	 xmm0, xmm0
  00179	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 3779 :     HelpMarker("Disable the indenting of tree nodes so demo tables can use the full window width.");

  0017e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FC@FFIEPAOP@Disable?5the?5indenting?5of?5tree?5no@
  00185	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 3780 :     ImGui::Separator();

  0018a	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3781 :     if (disable_indent)

  0018f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?disable_indent@?1??ShowDemoWindowTables@@YAXXZ@4_NA
  00196	85 c0		 test	 eax, eax
  00198	74 0d		 je	 SHORT $LN280@ShowDemoWi

; 3782 :         ImGui::PushStyleVar(ImGuiStyleVar_IndentSpacing, 0.0f);

  0019a	0f 57 c9	 xorps	 xmm1, xmm1
  0019d	b9 10 00 00 00	 mov	 ecx, 16
  001a2	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHM@Z ; ImGui::PushStyleVar
$LN280@ShowDemoWi:

; 3783 : 
; 3784 :     // About Styling of tables
; 3785 :     // Most settings are configured on a per-table basis via the flags passed to BeginTable() and TableSetupColumns APIs.
; 3786 :     // There are however a few settings that a shared and part of the ImGuiStyle structure:
; 3787 :     //   style.CellPadding                          // Padding within each cell
; 3788 :     //   style.Colors[ImGuiCol_TableHeaderBg]       // Table header background
; 3789 :     //   style.Colors[ImGuiCol_TableBorderStrong]   // Table outer and header borders
; 3790 :     //   style.Colors[ImGuiCol_TableBorderLight]    // Table inner borders
; 3791 :     //   style.Colors[ImGuiCol_TableRowBg]          // Table row background when ImGuiTableFlags_RowBg is enabled (even rows)
; 3792 :     //   style.Colors[ImGuiCol_TableRowBgAlt]       // Table row background when ImGuiTableFlags_RowBg is enabled (odds rows)
; 3793 : 
; 3794 :     // Demos
; 3795 :     if (open_action != -1)

  001a7	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  001ab	74 24		 je	 SHORT $LN7@ShowDemoWi

; 3796 :         ImGui::SetNextItemOpen(open_action != 0);

  001ad	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  001b1	74 09		 je	 SHORT $LN468@ShowDemoWi
  001b3	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv151[rbp], 1
  001ba	eb 07		 jmp	 SHORT $LN469@ShowDemoWi
$LN468@ShowDemoWi:
  001bc	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv151[rbp], 0
$LN469@ShowDemoWi:
  001c3	33 d2		 xor	 edx, edx
  001c5	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv151[rbp]
  001cc	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN7@ShowDemoWi:

; 3797 :     IMGUI_DEMO_MARKER("Tables/Basic");

  001d1	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  001d9	74 26		 je	 SHORT $LN282@ShowDemoWi
  001db	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  001e1	83 c0 2a	 add	 eax, 42			; 0000002aH
  001e4	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  001eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@NCGMCGDE@Tables?1Basic?$AA@
  001f2	8b d0		 mov	 edx, eax
  001f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  001fb	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN282@ShowDemoWi:
  00201	33 c0		 xor	 eax, eax
  00203	85 c0		 test	 eax, eax
  00205	75 ca		 jne	 SHORT $LN7@ShowDemoWi

; 3798 :     if (ImGui::TreeNode("Basic"))

  00207	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05NIKDGMHP@Basic?$AA@
  0020e	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  00213	0f b6 c0	 movzx	 eax, al
  00216	85 c0		 test	 eax, eax
  00218	0f 84 f0 01 00
	00		 je	 $LN283@ShowDemoWi

; 3799 :     {
; 3800 :         // Here we will showcase three different ways to output a table.
; 3801 :         // They are very simple variations of a same thing!
; 3802 : 
; 3803 :         // [Method 1] Using TableNextRow() to create a new row, and TableSetColumnIndex() to select the column.
; 3804 :         // In many situations, this is the most flexible and easy to use pattern.
; 3805 :         HelpMarker("Using TableNextRow() + calling TableSetColumnIndex() _before_ each cell, in a loop.");

  0021e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FE@BMEOIPOH@Using?5TableNextRow?$CI?$CJ?5?$CL?5calling?5T@
  00225	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 3806 :         if (ImGui::BeginTable("table1", 3))

  0022a	0f 57 d2	 xorps	 xmm2, xmm2
  0022d	0f 57 c9	 xorps	 xmm1, xmm1
  00230	48 8d 8d 24 16
	00 00		 lea	 rcx, QWORD PTR $T135[rbp]
  00237	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0023c	0f 57 c0	 xorps	 xmm0, xmm0
  0023f	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00245	4c 8b c8	 mov	 r9, rax
  00248	45 33 c0	 xor	 r8d, r8d
  0024b	ba 03 00 00 00	 mov	 edx, 3
  00250	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KDFPGKKJ@table1?$AA@
  00257	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  0025c	0f b6 c0	 movzx	 eax, al
  0025f	85 c0		 test	 eax, eax
  00261	74 6e		 je	 SHORT $LN284@ShowDemoWi

; 3807 :         {
; 3808 :             for (int row = 0; row < 4; row++)

  00263	c7 45 64 00 00
	00 00		 mov	 DWORD PTR row$20[rbp], 0
  0026a	eb 08		 jmp	 SHORT $LN10@ShowDemoWi
$LN8@ShowDemoWi:
  0026c	8b 45 64	 mov	 eax, DWORD PTR row$20[rbp]
  0026f	ff c0		 inc	 eax
  00271	89 45 64	 mov	 DWORD PTR row$20[rbp], eax
$LN10@ShowDemoWi:
  00274	83 7d 64 04	 cmp	 DWORD PTR row$20[rbp], 4
  00278	7d 52		 jge	 SHORT $LN9@ShowDemoWi

; 3809 :             {
; 3810 :                 ImGui::TableNextRow();

  0027a	0f 57 c9	 xorps	 xmm1, xmm1
  0027d	33 c9		 xor	 ecx, ecx
  0027f	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 3811 :                 for (int column = 0; column < 3; column++)

  00284	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR column$21[rbp], 0
  0028e	eb 0e		 jmp	 SHORT $LN13@ShowDemoWi
$LN11@ShowDemoWi:
  00290	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR column$21[rbp]
  00296	ff c0		 inc	 eax
  00298	89 85 84 00 00
	00		 mov	 DWORD PTR column$21[rbp], eax
$LN13@ShowDemoWi:
  0029e	83 bd 84 00 00
	00 03		 cmp	 DWORD PTR column$21[rbp], 3
  002a5	7d 23		 jge	 SHORT $LN12@ShowDemoWi

; 3812 :                 {
; 3813 :                     ImGui::TableSetColumnIndex(column);

  002a7	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR column$21[rbp]
  002ad	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 3814 :                     ImGui::Text("Row %d Column %d", row, column);

  002b2	44 8b 85 84 00
	00 00		 mov	 r8d, DWORD PTR column$21[rbp]
  002b9	8b 55 64	 mov	 edx, DWORD PTR row$20[rbp]
  002bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@IODOONAJ@Row?5?$CFd?5Column?5?$CFd?$AA@
  002c3	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3815 :                 }

  002c8	eb c6		 jmp	 SHORT $LN11@ShowDemoWi
$LN12@ShowDemoWi:

; 3816 :             }

  002ca	eb a0		 jmp	 SHORT $LN8@ShowDemoWi
$LN9@ShowDemoWi:

; 3817 :             ImGui::EndTable();

  002cc	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN284@ShowDemoWi:

; 3818 :         }
; 3819 : 
; 3820 :         // [Method 2] Using TableNextColumn() called multiple times, instead of using a for loop + TableSetColumnIndex().
; 3821 :         // This is generally more convenient when you have code manually submitting the contents of each column.
; 3822 :         HelpMarker("Using TableNextRow() + calling TableNextColumn() _before_ each cell, manually.");

  002d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EP@POKEAGN@Using?5TableNextRow?$CI?$CJ?5?$CL?5calling?5T@
  002d8	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 3823 :         if (ImGui::BeginTable("table2", 3))

  002dd	0f 57 d2	 xorps	 xmm2, xmm2
  002e0	0f 57 c9	 xorps	 xmm1, xmm1
  002e3	48 8d 8d 44 16
	00 00		 lea	 rcx, QWORD PTR $T136[rbp]
  002ea	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  002ef	0f 57 c0	 xorps	 xmm0, xmm0
  002f2	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  002f8	4c 8b c8	 mov	 r9, rax
  002fb	45 33 c0	 xor	 r8d, r8d
  002fe	ba 03 00 00 00	 mov	 edx, 3
  00303	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IIHCDJGK@table2?$AA@
  0030a	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  0030f	0f b6 c0	 movzx	 eax, al
  00312	85 c0		 test	 eax, eax
  00314	74 6d		 je	 SHORT $LN285@ShowDemoWi

; 3824 :         {
; 3825 :             for (int row = 0; row < 4; row++)

  00316	c7 85 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR row$22[rbp], 0
  00320	eb 0e		 jmp	 SHORT $LN16@ShowDemoWi
$LN14@ShowDemoWi:
  00322	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR row$22[rbp]
  00328	ff c0		 inc	 eax
  0032a	89 85 a4 00 00
	00		 mov	 DWORD PTR row$22[rbp], eax
$LN16@ShowDemoWi:
  00330	83 bd a4 00 00
	00 04		 cmp	 DWORD PTR row$22[rbp], 4
  00337	7d 45		 jge	 SHORT $LN15@ShowDemoWi

; 3826 :             {
; 3827 :                 ImGui::TableNextRow();

  00339	0f 57 c9	 xorps	 xmm1, xmm1
  0033c	33 c9		 xor	 ecx, ecx
  0033e	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 3828 :                 ImGui::TableNextColumn();

  00343	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 3829 :                 ImGui::Text("Row %d", row);

  00348	8b 95 a4 00 00
	00		 mov	 edx, DWORD PTR row$22[rbp]
  0034e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06PLKMNMNJ@Row?5?$CFd?$AA@
  00355	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3830 :                 ImGui::TableNextColumn();

  0035a	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 3831 :                 ImGui::Text("Some contents");

  0035f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@HOFANGPE@Some?5contents?$AA@
  00366	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3832 :                 ImGui::TableNextColumn();

  0036b	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 3833 :                 ImGui::Text("123.456");

  00370	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07MEKMPKJA@123?4456?$AA@
  00377	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3834 :             }

  0037c	eb a4		 jmp	 SHORT $LN14@ShowDemoWi
$LN15@ShowDemoWi:

; 3835 :             ImGui::EndTable();

  0037e	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN285@ShowDemoWi:

; 3836 :         }
; 3837 : 
; 3838 :         // [Method 3] We call TableNextColumn() _before_ each cell. We never call TableNextRow(),
; 3839 :         // as TableNextColumn() will automatically wrap around and create new rows as needed.
; 3840 :         // This is generally more convenient when your cells all contains the same type of data.
; 3841 :         HelpMarker(

  00383	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BAJ@LOLGBBOP@Only?5using?5TableNextColumn?$CI?$CJ?0?5wh@
  0038a	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 3842 :             "Only using TableNextColumn(), which tends to be convenient for tables where every cell contains the same type of contents.\n"
; 3843 :             "This is also more similar to the old NextColumn() function of the Columns API, and provided to facilitate the Columns->Tables API transition.");
; 3844 :         if (ImGui::BeginTable("table3", 3))

  0038f	0f 57 d2	 xorps	 xmm2, xmm2
  00392	0f 57 c9	 xorps	 xmm1, xmm1
  00395	48 8d 8d 64 16
	00 00		 lea	 rcx, QWORD PTR $T137[rbp]
  0039c	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  003a1	0f 57 c0	 xorps	 xmm0, xmm0
  003a4	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  003aa	4c 8b c8	 mov	 r9, rax
  003ad	45 33 c0	 xor	 r8d, r8d
  003b0	ba 03 00 00 00	 mov	 edx, 3
  003b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06JBGJAICL@table3?$AA@
  003bc	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  003c1	0f b6 c0	 movzx	 eax, al
  003c4	85 c0		 test	 eax, eax
  003c6	74 41		 je	 SHORT $LN286@ShowDemoWi

; 3845 :         {
; 3846 :             for (int item = 0; item < 14; item++)

  003c8	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR item$23[rbp], 0
  003d2	eb 0e		 jmp	 SHORT $LN19@ShowDemoWi
$LN17@ShowDemoWi:
  003d4	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR item$23[rbp]
  003da	ff c0		 inc	 eax
  003dc	89 85 c4 00 00
	00		 mov	 DWORD PTR item$23[rbp], eax
$LN19@ShowDemoWi:
  003e2	83 bd c4 00 00
	00 0e		 cmp	 DWORD PTR item$23[rbp], 14
  003e9	7d 19		 jge	 SHORT $LN18@ShowDemoWi

; 3847 :             {
; 3848 :                 ImGui::TableNextColumn();

  003eb	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 3849 :                 ImGui::Text("Item %d", item);

  003f0	8b 95 c4 00 00
	00		 mov	 edx, DWORD PTR item$23[rbp]
  003f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07BCJGKFOL@Item?5?$CFd?$AA@
  003fd	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3850 :             }

  00402	eb d0		 jmp	 SHORT $LN17@ShowDemoWi
$LN18@ShowDemoWi:

; 3851 :             ImGui::EndTable();

  00404	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN286@ShowDemoWi:

; 3852 :         }
; 3853 : 
; 3854 :         ImGui::TreePop();

  00409	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN283@ShowDemoWi:

; 3855 :     }
; 3856 : 
; 3857 :     if (open_action != -1)

  0040e	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  00412	74 24		 je	 SHORT $LN22@ShowDemoWi

; 3858 :         ImGui::SetNextItemOpen(open_action != 0);

  00414	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  00418	74 09		 je	 SHORT $LN470@ShowDemoWi
  0041a	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv228[rbp], 1
  00421	eb 07		 jmp	 SHORT $LN471@ShowDemoWi
$LN470@ShowDemoWi:
  00423	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv228[rbp], 0
$LN471@ShowDemoWi:
  0042a	33 d2		 xor	 edx, edx
  0042c	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv228[rbp]
  00433	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN22@ShowDemoWi:

; 3859 :     IMGUI_DEMO_MARKER("Tables/Borders, background");

  00438	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00440	74 26		 je	 SHORT $LN288@ShowDemoWi
  00442	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  00448	83 c0 68	 add	 eax, 104		; 00000068H
  0044b	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00452	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BL@DKPJPGIB@Tables?1Borders?0?5background?$AA@
  00459	8b d0		 mov	 edx, eax
  0045b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00462	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN288@ShowDemoWi:
  00468	33 c0		 xor	 eax, eax
  0046a	85 c0		 test	 eax, eax
  0046c	75 ca		 jne	 SHORT $LN22@ShowDemoWi

; 3860 :     if (ImGui::TreeNode("Borders, background"))

  0046e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@HDDFNCPF@Borders?0?5background?$AA@
  00475	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  0047a	0f b6 c0	 movzx	 eax, al
  0047d	85 c0		 test	 eax, eax
  0047f	0f 84 61 03 00
	00		 je	 $LN289@ShowDemoWi

; 3861 :     {
; 3862 :         // Expose a few Borders related flags interactively
; 3863 :         enum ContentsType { CT_Text, CT_FillButton };
; 3864 :         static ImGuiTableFlags flags = ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg;
; 3865 :         static bool display_headers = false;
; 3866 :         static int contents_type = CT_Text;
; 3867 : 
; 3868 :         PushStyleCompact();

  00485	e8 00 00 00 00	 call	 ?PushStyleCompact@@YAXXZ ; PushStyleCompact

; 3869 :         ImGui::CheckboxFlags("ImGuiTableFlags_RowBg", &flags, ImGuiTableFlags_RowBg);

  0048a	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00490	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?DB@??ShowDemoWindowTables@@YAXXZ@4HA
  00497	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@FNKJINH@ImGuiTableFlags_RowBg?$AA@
  0049e	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3870 :         ImGui::CheckboxFlags("ImGuiTableFlags_Borders", &flags, ImGuiTableFlags_Borders);

  004a3	41 b8 80 07 00
	00		 mov	 r8d, 1920		; 00000780H
  004a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?DB@??ShowDemoWindowTables@@YAXXZ@4HA
  004b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@KLDEGJMI@ImGuiTableFlags_Borders?$AA@
  004b7	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3871 :         ImGui::SameLine(); HelpMarker("ImGuiTableFlags_Borders\n = ImGuiTableFlags_BordersInnerV\n | ImGuiTableFlags_BordersOuterV\n | ImGuiTableFlags_BordersInnerV\n | ImGuiTableFlags_BordersOuterH");

  004bc	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  004c4	0f 57 c0	 xorps	 xmm0, xmm0
  004c7	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  004cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0JM@OCDLGALD@ImGuiTableFlags_Borders?6?5?$DN?5ImGui@
  004d3	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 3872 :         ImGui::Indent();

  004d8	0f 57 c0	 xorps	 xmm0, xmm0
  004db	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent

; 3873 : 
; 3874 :         ImGui::CheckboxFlags("ImGuiTableFlags_BordersH", &flags, ImGuiTableFlags_BordersH);

  004e0	41 b8 80 01 00
	00		 mov	 r8d, 384		; 00000180H
  004e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?DB@??ShowDemoWindowTables@@YAXXZ@4HA
  004ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@KNLELLOG@ImGuiTableFlags_BordersH?$AA@
  004f4	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3875 :         ImGui::Indent();

  004f9	0f 57 c0	 xorps	 xmm0, xmm0
  004fc	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent

; 3876 :         ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuterH", &flags, ImGuiTableFlags_BordersOuterH);

  00501	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  00507	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?DB@??ShowDemoWindowTables@@YAXXZ@4HA
  0050e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@EFCOPFHN@ImGuiTableFlags_BordersOuterH?$AA@
  00515	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3877 :         ImGui::CheckboxFlags("ImGuiTableFlags_BordersInnerH", &flags, ImGuiTableFlags_BordersInnerH);

  0051a	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  00520	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?DB@??ShowDemoWindowTables@@YAXXZ@4HA
  00527	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@GFLPLNDM@ImGuiTableFlags_BordersInnerH?$AA@
  0052e	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3878 :         ImGui::Unindent();

  00533	0f 57 c0	 xorps	 xmm0, xmm0
  00536	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent

; 3879 : 
; 3880 :         ImGui::CheckboxFlags("ImGuiTableFlags_BordersV", &flags, ImGuiTableFlags_BordersV);

  0053b	41 b8 00 06 00
	00		 mov	 r8d, 1536		; 00000600H
  00541	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?DB@??ShowDemoWindowTables@@YAXXZ@4HA
  00548	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@HJPFIEDJ@ImGuiTableFlags_BordersV?$AA@
  0054f	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3881 :         ImGui::Indent();

  00554	0f 57 c0	 xorps	 xmm0, xmm0
  00557	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent

; 3882 :         ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuterV", &flags, ImGuiTableFlags_BordersOuterV);

  0055c	41 b8 00 04 00
	00		 mov	 r8d, 1024		; 00000400H
  00562	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?DB@??ShowDemoWindowTables@@YAXXZ@4HA
  00569	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@JBGPMKKC@ImGuiTableFlags_BordersOuterV?$AA@
  00570	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3883 :         ImGui::CheckboxFlags("ImGuiTableFlags_BordersInnerV", &flags, ImGuiTableFlags_BordersInnerV);

  00575	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  0057b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?DB@??ShowDemoWindowTables@@YAXXZ@4HA
  00582	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@LBPOICOD@ImGuiTableFlags_BordersInnerV?$AA@
  00589	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3884 :         ImGui::Unindent();

  0058e	0f 57 c0	 xorps	 xmm0, xmm0
  00591	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent

; 3885 : 
; 3886 :         ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuter", &flags, ImGuiTableFlags_BordersOuter);

  00596	41 b8 00 05 00
	00		 mov	 r8d, 1280		; 00000500H
  0059c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?DB@??ShowDemoWindowTables@@YAXXZ@4HA
  005a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@IJKOMBIP@ImGuiTableFlags_BordersOuter?$AA@
  005aa	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3887 :         ImGui::CheckboxFlags("ImGuiTableFlags_BordersInner", &flags, ImGuiTableFlags_BordersInner);

  005af	41 b8 80 02 00
	00		 mov	 r8d, 640		; 00000280H
  005b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?DB@??ShowDemoWindowTables@@YAXXZ@4HA
  005bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@HHGDDDPK@ImGuiTableFlags_BordersInner?$AA@
  005c3	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3888 :         ImGui::Unindent();

  005c8	0f 57 c0	 xorps	 xmm0, xmm0
  005cb	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent

; 3889 : 
; 3890 :         ImGui::AlignTextToFramePadding(); ImGui::Text("Cell contents:");

  005d0	e8 00 00 00 00	 call	 ?AlignTextToFramePadding@ImGui@@YAXXZ ; ImGui::AlignTextToFramePadding
  005d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@EJGNBOGK@Cell?5contents?3?$AA@
  005dc	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3891 :         ImGui::SameLine(); ImGui::RadioButton("Text", &contents_type, CT_Text);

  005e1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  005e9	0f 57 c0	 xorps	 xmm0, xmm0
  005ec	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  005f1	45 33 c0	 xor	 r8d, r8d
  005f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?contents_type@?DB@??ShowDemoWindowTables@@YAXXZ@4HA
  005fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04OJAHODMC@Text?$AA@
  00602	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::RadioButton

; 3892 :         ImGui::SameLine(); ImGui::RadioButton("FillButton", &contents_type, CT_FillButton);

  00607	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0060f	0f 57 c0	 xorps	 xmm0, xmm0
  00612	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00617	41 b8 01 00 00
	00		 mov	 r8d, 1
  0061d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?contents_type@?DB@??ShowDemoWindowTables@@YAXXZ@4HA
  00624	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@GCOFDGJD@FillButton?$AA@
  0062b	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::RadioButton

; 3893 :         ImGui::Checkbox("Display headers", &display_headers);

  00630	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?display_headers@?DB@??ShowDemoWindowTables@@YAXXZ@4_NA
  00637	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@OPBHLGMF@Display?5headers?$AA@
  0063e	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 3894 :         ImGui::CheckboxFlags("ImGuiTableFlags_NoBordersInBody", &flags, ImGuiTableFlags_NoBordersInBody); ImGui::SameLine(); HelpMarker("Disable vertical borders in columns Body (borders will always appear in Headers");

  00643	41 b8 00 08 00
	00		 mov	 r8d, 2048		; 00000800H
  00649	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?DB@??ShowDemoWindowTables@@YAXXZ@4HA
  00650	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@DPINADJM@ImGuiTableFlags_NoBordersInBody?$AA@
  00657	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags
  0065c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00664	0f 57 c0	 xorps	 xmm0, xmm0
  00667	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0066c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FA@EPKAHHBC@Disable?5vertical?5borders?5in?5colu@
  00673	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 3895 :         PopStyleCompact();

  00678	e8 00 00 00 00	 call	 ?PopStyleCompact@@YAXXZ	; PopStyleCompact

; 3896 : 
; 3897 :         if (ImGui::BeginTable("table1", 3, flags))

  0067d	0f 57 d2	 xorps	 xmm2, xmm2
  00680	0f 57 c9	 xorps	 xmm1, xmm1
  00683	48 8d 8d 84 16
	00 00		 lea	 rcx, QWORD PTR $T138[rbp]
  0068a	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0068f	0f 57 c0	 xorps	 xmm0, xmm0
  00692	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00698	4c 8b c8	 mov	 r9, rax
  0069b	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags@?DB@??ShowDemoWindowTables@@YAXXZ@4HA
  006a2	ba 03 00 00 00	 mov	 edx, 3
  006a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KDFPGKKJ@table1?$AA@
  006ae	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  006b3	0f b6 c0	 movzx	 eax, al
  006b6	85 c0		 test	 eax, eax
  006b8	0f 84 23 01 00
	00		 je	 $LN290@ShowDemoWi

; 3898 :         {
; 3899 :             // Display headers so we can inspect their interaction with borders.
; 3900 :             // (Headers are not the main purpose of this section of the demo, so we are not elaborating on them too much. See other sections for details)
; 3901 :             if (display_headers)

  006be	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?display_headers@?DB@??ShowDemoWindowTables@@YAXXZ@4_NA
  006c5	85 c0		 test	 eax, eax
  006c7	74 41		 je	 SHORT $LN291@ShowDemoWi

; 3902 :             {
; 3903 :                 ImGui::TableSetupColumn("One");

  006c9	45 33 c9	 xor	 r9d, r9d
  006cc	0f 57 d2	 xorps	 xmm2, xmm2
  006cf	33 d2		 xor	 edx, edx
  006d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03EHAPBBEA@One?$AA@
  006d8	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 3904 :                 ImGui::TableSetupColumn("Two");

  006dd	45 33 c9	 xor	 r9d, r9d
  006e0	0f 57 d2	 xorps	 xmm2, xmm2
  006e3	33 d2		 xor	 edx, edx
  006e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CJAPLBKL@Two?$AA@
  006ec	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 3905 :                 ImGui::TableSetupColumn("Three");

  006f1	45 33 c9	 xor	 r9d, r9d
  006f4	0f 57 d2	 xorps	 xmm2, xmm2
  006f7	33 d2		 xor	 edx, edx
  006f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OHMANGAP@Three?$AA@
  00700	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 3906 :                 ImGui::TableHeadersRow();

  00705	e8 00 00 00 00	 call	 ?TableHeadersRow@ImGui@@YAXXZ ; ImGui::TableHeadersRow
$LN291@ShowDemoWi:

; 3907 :             }
; 3908 : 
; 3909 :             for (int row = 0; row < 5; row++)

  0070a	c7 85 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR row$24[rbp], 0
  00714	eb 0e		 jmp	 SHORT $LN25@ShowDemoWi
$LN23@ShowDemoWi:
  00716	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR row$24[rbp]
  0071c	ff c0		 inc	 eax
  0071e	89 85 e4 00 00
	00		 mov	 DWORD PTR row$24[rbp], eax
$LN25@ShowDemoWi:
  00724	83 bd e4 00 00
	00 05		 cmp	 DWORD PTR row$24[rbp], 5
  0072b	0f 8d ab 00 00
	00		 jge	 $LN24@ShowDemoWi

; 3910 :             {
; 3911 :                 ImGui::TableNextRow();

  00731	0f 57 c9	 xorps	 xmm1, xmm1
  00734	33 c9		 xor	 ecx, ecx
  00736	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 3912 :                 for (int column = 0; column < 3; column++)

  0073b	c7 85 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR column$25[rbp], 0
  00745	eb 0e		 jmp	 SHORT $LN28@ShowDemoWi
$LN26@ShowDemoWi:
  00747	8b 85 04 01 00
	00		 mov	 eax, DWORD PTR column$25[rbp]
  0074d	ff c0		 inc	 eax
  0074f	89 85 04 01 00
	00		 mov	 DWORD PTR column$25[rbp], eax
$LN28@ShowDemoWi:
  00755	83 bd 04 01 00
	00 03		 cmp	 DWORD PTR column$25[rbp], 3
  0075c	7d 79		 jge	 SHORT $LN27@ShowDemoWi

; 3913 :                 {
; 3914 :                     ImGui::TableSetColumnIndex(column);

  0075e	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR column$25[rbp]
  00764	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 3915 :                     char buf[32];
; 3916 :                     sprintf(buf, "Hello %d,%d", column, row);

  00769	44 8b 8d e4 00
	00 00		 mov	 r9d, DWORD PTR row$24[rbp]
  00770	44 8b 85 04 01
	00 00		 mov	 r8d, DWORD PTR column$25[rbp]
  00777	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@MKBMKAAH@Hello?5?$CFd?0?$CFd?$AA@
  0077e	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR buf$26[rbp]
  00785	e8 00 00 00 00	 call	 sprintf

; 3917 :                     if (contents_type == CT_Text)

  0078a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?contents_type@?DB@??ShowDemoWindowTables@@YAXXZ@4HA, 0
  00791	75 10		 jne	 SHORT $LN292@ShowDemoWi

; 3918 :                         ImGui::TextUnformatted(buf);

  00793	33 d2		 xor	 edx, edx
  00795	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR buf$26[rbp]
  0079c	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted
  007a1	eb 2f		 jmp	 SHORT $LN293@ShowDemoWi
$LN292@ShowDemoWi:

; 3919 :                     else if (contents_type == CT_FillButton)

  007a3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?contents_type@?DB@??ShowDemoWindowTables@@YAXXZ@4HA, 1
  007aa	75 26		 jne	 SHORT $LN293@ShowDemoWi

; 3920 :                         ImGui::Button(buf, ImVec2(-FLT_MIN, 0.0f));

  007ac	0f 57 d2	 xorps	 xmm2, xmm2
  007af	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@80800000
  007b7	48 8d 8d a4 16
	00 00		 lea	 rcx, QWORD PTR $T139[rbp]
  007be	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  007c3	48 8b d0	 mov	 rdx, rax
  007c6	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR buf$26[rbp]
  007cd	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
$LN293@ShowDemoWi:

; 3921 :                 }

  007d2	e9 70 ff ff ff	 jmp	 $LN26@ShowDemoWi
$LN27@ShowDemoWi:

; 3922 :             }

  007d7	e9 3a ff ff ff	 jmp	 $LN23@ShowDemoWi
$LN24@ShowDemoWi:

; 3923 :             ImGui::EndTable();

  007dc	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN290@ShowDemoWi:

; 3924 :         }
; 3925 :         ImGui::TreePop();

  007e1	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN289@ShowDemoWi:

; 3926 :     }
; 3927 : 
; 3928 :     if (open_action != -1)

  007e6	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  007ea	74 24		 je	 SHORT $LN31@ShowDemoWi

; 3929 :         ImGui::SetNextItemOpen(open_action != 0);

  007ec	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  007f0	74 09		 je	 SHORT $LN472@ShowDemoWi
  007f2	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv381[rbp], 1
  007f9	eb 07		 jmp	 SHORT $LN473@ShowDemoWi
$LN472@ShowDemoWi:
  007fb	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv381[rbp], 0
$LN473@ShowDemoWi:
  00802	33 d2		 xor	 edx, edx
  00804	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv381[rbp]
  0080b	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN31@ShowDemoWi:

; 3930 :     IMGUI_DEMO_MARKER("Tables/Resizable, stretch");

  00810	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00818	74 28		 je	 SHORT $LN296@ShowDemoWi
  0081a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  00820	05 af 00 00 00	 add	 eax, 175		; 000000afH
  00825	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0082c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BK@JBACCIOD@Tables?1Resizable?0?5stretch?$AA@
  00833	8b d0		 mov	 edx, eax
  00835	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0083c	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN296@ShowDemoWi:
  00842	33 c0		 xor	 eax, eax
  00844	85 c0		 test	 eax, eax
  00846	75 c8		 jne	 SHORT $LN31@ShowDemoWi

; 3931 :     if (ImGui::TreeNode("Resizable, stretch"))

  00848	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@DEGBBBAF@Resizable?0?5stretch?$AA@
  0084f	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  00854	0f b6 c0	 movzx	 eax, al
  00857	85 c0		 test	 eax, eax
  00859	0f 84 17 01 00
	00		 je	 $LN297@ShowDemoWi

; 3932 :     {
; 3933 :         // By default, if we don't enable ScrollX the sizing policy for each column is "Stretch"
; 3934 :         // All columns maintain a sizing weight, and they will occupy all available width.
; 3935 :         static ImGuiTableFlags flags = ImGuiTableFlags_SizingStretchSame | ImGuiTableFlags_Resizable | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV | ImGuiTableFlags_ContextMenuInBody;
; 3936 :         PushStyleCompact();

  0085f	e8 00 00 00 00	 call	 ?PushStyleCompact@@YAXXZ ; PushStyleCompact

; 3937 :         ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags, ImGuiTableFlags_Resizable);

  00864	41 b8 01 00 00
	00		 mov	 r8d, 1
  0086a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?EJ@??ShowDemoWindowTables@@YAXXZ@4HA
  00871	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@EMJCIFOG@ImGuiTableFlags_Resizable?$AA@
  00878	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3938 :         ImGui::CheckboxFlags("ImGuiTableFlags_BordersV", &flags, ImGuiTableFlags_BordersV);

  0087d	41 b8 00 06 00
	00		 mov	 r8d, 1536		; 00000600H
  00883	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?EJ@??ShowDemoWindowTables@@YAXXZ@4HA
  0088a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@HJPFIEDJ@ImGuiTableFlags_BordersV?$AA@
  00891	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3939 :         ImGui::SameLine(); HelpMarker("Using the _Resizable flag automatically enables the _BordersInnerV flag as well, this is why the resize borders are still showing when unchecking this.");

  00896	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0089e	0f 57 c0	 xorps	 xmm0, xmm0
  008a1	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  008a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0JI@HEDAGHBG@Using?5the?5_Resizable?5flag?5automa@
  008ad	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 3940 :         PopStyleCompact();

  008b2	e8 00 00 00 00	 call	 ?PopStyleCompact@@YAXXZ	; PopStyleCompact

; 3941 : 
; 3942 :         if (ImGui::BeginTable("table1", 3, flags))

  008b7	0f 57 d2	 xorps	 xmm2, xmm2
  008ba	0f 57 c9	 xorps	 xmm1, xmm1
  008bd	48 8d 8d c4 16
	00 00		 lea	 rcx, QWORD PTR $T140[rbp]
  008c4	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  008c9	0f 57 c0	 xorps	 xmm0, xmm0
  008cc	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  008d2	4c 8b c8	 mov	 r9, rax
  008d5	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags@?EJ@??ShowDemoWindowTables@@YAXXZ@4HA
  008dc	ba 03 00 00 00	 mov	 edx, 3
  008e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KDFPGKKJ@table1?$AA@
  008e8	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  008ed	0f b6 c0	 movzx	 eax, al
  008f0	85 c0		 test	 eax, eax
  008f2	74 7d		 je	 SHORT $LN298@ShowDemoWi

; 3943 :         {
; 3944 :             for (int row = 0; row < 5; row++)

  008f4	c7 85 64 01 00
	00 00 00 00 00	 mov	 DWORD PTR row$27[rbp], 0
  008fe	eb 0e		 jmp	 SHORT $LN34@ShowDemoWi
$LN32@ShowDemoWi:
  00900	8b 85 64 01 00
	00		 mov	 eax, DWORD PTR row$27[rbp]
  00906	ff c0		 inc	 eax
  00908	89 85 64 01 00
	00		 mov	 DWORD PTR row$27[rbp], eax
$LN34@ShowDemoWi:
  0090e	83 bd 64 01 00
	00 05		 cmp	 DWORD PTR row$27[rbp], 5
  00915	7d 55		 jge	 SHORT $LN33@ShowDemoWi

; 3945 :             {
; 3946 :                 ImGui::TableNextRow();

  00917	0f 57 c9	 xorps	 xmm1, xmm1
  0091a	33 c9		 xor	 ecx, ecx
  0091c	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 3947 :                 for (int column = 0; column < 3; column++)

  00921	c7 85 84 01 00
	00 00 00 00 00	 mov	 DWORD PTR column$28[rbp], 0
  0092b	eb 0e		 jmp	 SHORT $LN37@ShowDemoWi
$LN35@ShowDemoWi:
  0092d	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR column$28[rbp]
  00933	ff c0		 inc	 eax
  00935	89 85 84 01 00
	00		 mov	 DWORD PTR column$28[rbp], eax
$LN37@ShowDemoWi:
  0093b	83 bd 84 01 00
	00 03		 cmp	 DWORD PTR column$28[rbp], 3
  00942	7d 26		 jge	 SHORT $LN36@ShowDemoWi

; 3948 :                 {
; 3949 :                     ImGui::TableSetColumnIndex(column);

  00944	8b 8d 84 01 00
	00		 mov	 ecx, DWORD PTR column$28[rbp]
  0094a	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 3950 :                     ImGui::Text("Hello %d,%d", column, row);

  0094f	44 8b 85 64 01
	00 00		 mov	 r8d, DWORD PTR row$27[rbp]
  00956	8b 95 84 01 00
	00		 mov	 edx, DWORD PTR column$28[rbp]
  0095c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MKBMKAAH@Hello?5?$CFd?0?$CFd?$AA@
  00963	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3951 :                 }

  00968	eb c3		 jmp	 SHORT $LN35@ShowDemoWi
$LN36@ShowDemoWi:

; 3952 :             }

  0096a	eb 94		 jmp	 SHORT $LN32@ShowDemoWi
$LN33@ShowDemoWi:

; 3953 :             ImGui::EndTable();

  0096c	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN298@ShowDemoWi:

; 3954 :         }
; 3955 :         ImGui::TreePop();

  00971	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN297@ShowDemoWi:

; 3956 :     }
; 3957 : 
; 3958 :     if (open_action != -1)

  00976	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  0097a	74 24		 je	 SHORT $LN40@ShowDemoWi

; 3959 :         ImGui::SetNextItemOpen(open_action != 0);

  0097c	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  00980	74 09		 je	 SHORT $LN474@ShowDemoWi
  00982	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv428[rbp], 1
  00989	eb 07		 jmp	 SHORT $LN475@ShowDemoWi
$LN474@ShowDemoWi:
  0098b	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv428[rbp], 0
$LN475@ShowDemoWi:
  00992	33 d2		 xor	 edx, edx
  00994	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv428[rbp]
  0099b	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN40@ShowDemoWi:

; 3960 :     IMGUI_DEMO_MARKER("Tables/Resizable, fixed");

  009a0	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  009a8	74 28		 je	 SHORT $LN300@ShowDemoWi
  009aa	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  009b0	05 cd 00 00 00	 add	 eax, 205		; 000000cdH
  009b5	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  009bc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BI@HIOAIGHO@Tables?1Resizable?0?5fixed?$AA@
  009c3	8b d0		 mov	 edx, eax
  009c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  009cc	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN300@ShowDemoWi:
  009d2	33 c0		 xor	 eax, eax
  009d4	85 c0		 test	 eax, eax
  009d6	75 c8		 jne	 SHORT $LN40@ShowDemoWi

; 3961 :     if (ImGui::TreeNode("Resizable, fixed"))

  009d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@PCKPFPON@Resizable?0?5fixed?$AA@
  009df	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  009e4	0f b6 c0	 movzx	 eax, al
  009e7	85 c0		 test	 eax, eax
  009e9	0f 84 ee 00 00
	00		 je	 $LN301@ShowDemoWi

; 3962 :     {
; 3963 :         // Here we use ImGuiTableFlags_SizingFixedFit (even though _ScrollX is not set)
; 3964 :         // So columns will adopt the "Fixed" policy and will maintain a fixed width regardless of the whole available width (unless table is small)
; 3965 :         // If there is not enough available width to fit all columns, they will however be resized down.
; 3966 :         // FIXME-TABLE: Providing a stretch-on-init would make sense especially for tables which don't have saved settings
; 3967 :         HelpMarker(

  009ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0MI@DMACPCHA@Using?5_Resizable?5?$CL?5_SizingFixedF@
  009f6	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 3968 :             "Using _Resizable + _SizingFixedFit flags.\n"
; 3969 :             "Fixed-width columns generally makes more sense if you want to use horizontal scrolling.\n\n"
; 3970 :             "Double-click a column border to auto-fit the column to its contents.");
; 3971 :         PushStyleCompact();

  009fb	e8 00 00 00 00	 call	 ?PushStyleCompact@@YAXXZ ; PushStyleCompact

; 3972 :         static ImGuiTableFlags flags = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_Resizable | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV | ImGuiTableFlags_ContextMenuInBody;
; 3973 :         ImGui::CheckboxFlags("ImGuiTableFlags_NoHostExtendX", &flags, ImGuiTableFlags_NoHostExtendX);

  00a00	41 b8 00 00 01
	00		 mov	 r8d, 65536		; 00010000H
  00a06	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?FJ@??ShowDemoWindowTables@@YAXXZ@4HA
  00a0d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@NGJMFDHH@ImGuiTableFlags_NoHostExtendX?$AA@
  00a14	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 3974 :         PopStyleCompact();

  00a19	e8 00 00 00 00	 call	 ?PopStyleCompact@@YAXXZ	; PopStyleCompact

; 3975 : 
; 3976 :         if (ImGui::BeginTable("table1", 3, flags))

  00a1e	0f 57 d2	 xorps	 xmm2, xmm2
  00a21	0f 57 c9	 xorps	 xmm1, xmm1
  00a24	48 8d 8d e4 16
	00 00		 lea	 rcx, QWORD PTR $T141[rbp]
  00a2b	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00a30	0f 57 c0	 xorps	 xmm0, xmm0
  00a33	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00a39	4c 8b c8	 mov	 r9, rax
  00a3c	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags@?FJ@??ShowDemoWindowTables@@YAXXZ@4HA
  00a43	ba 03 00 00 00	 mov	 edx, 3
  00a48	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KDFPGKKJ@table1?$AA@
  00a4f	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  00a54	0f b6 c0	 movzx	 eax, al
  00a57	85 c0		 test	 eax, eax
  00a59	74 7d		 je	 SHORT $LN302@ShowDemoWi

; 3977 :         {
; 3978 :             for (int row = 0; row < 5; row++)

  00a5b	c7 85 a4 01 00
	00 00 00 00 00	 mov	 DWORD PTR row$29[rbp], 0
  00a65	eb 0e		 jmp	 SHORT $LN43@ShowDemoWi
$LN41@ShowDemoWi:
  00a67	8b 85 a4 01 00
	00		 mov	 eax, DWORD PTR row$29[rbp]
  00a6d	ff c0		 inc	 eax
  00a6f	89 85 a4 01 00
	00		 mov	 DWORD PTR row$29[rbp], eax
$LN43@ShowDemoWi:
  00a75	83 bd a4 01 00
	00 05		 cmp	 DWORD PTR row$29[rbp], 5
  00a7c	7d 55		 jge	 SHORT $LN42@ShowDemoWi

; 3979 :             {
; 3980 :                 ImGui::TableNextRow();

  00a7e	0f 57 c9	 xorps	 xmm1, xmm1
  00a81	33 c9		 xor	 ecx, ecx
  00a83	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 3981 :                 for (int column = 0; column < 3; column++)

  00a88	c7 85 c4 01 00
	00 00 00 00 00	 mov	 DWORD PTR column$30[rbp], 0
  00a92	eb 0e		 jmp	 SHORT $LN46@ShowDemoWi
$LN44@ShowDemoWi:
  00a94	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR column$30[rbp]
  00a9a	ff c0		 inc	 eax
  00a9c	89 85 c4 01 00
	00		 mov	 DWORD PTR column$30[rbp], eax
$LN46@ShowDemoWi:
  00aa2	83 bd c4 01 00
	00 03		 cmp	 DWORD PTR column$30[rbp], 3
  00aa9	7d 26		 jge	 SHORT $LN45@ShowDemoWi

; 3982 :                 {
; 3983 :                     ImGui::TableSetColumnIndex(column);

  00aab	8b 8d c4 01 00
	00		 mov	 ecx, DWORD PTR column$30[rbp]
  00ab1	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 3984 :                     ImGui::Text("Hello %d,%d", column, row);

  00ab6	44 8b 85 a4 01
	00 00		 mov	 r8d, DWORD PTR row$29[rbp]
  00abd	8b 95 c4 01 00
	00		 mov	 edx, DWORD PTR column$30[rbp]
  00ac3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MKBMKAAH@Hello?5?$CFd?0?$CFd?$AA@
  00aca	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3985 :                 }

  00acf	eb c3		 jmp	 SHORT $LN44@ShowDemoWi
$LN45@ShowDemoWi:

; 3986 :             }

  00ad1	eb 94		 jmp	 SHORT $LN41@ShowDemoWi
$LN42@ShowDemoWi:

; 3987 :             ImGui::EndTable();

  00ad3	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN302@ShowDemoWi:

; 3988 :         }
; 3989 :         ImGui::TreePop();

  00ad8	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN301@ShowDemoWi:

; 3990 :     }
; 3991 : 
; 3992 :     if (open_action != -1)

  00add	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  00ae1	74 24		 je	 SHORT $LN49@ShowDemoWi

; 3993 :         ImGui::SetNextItemOpen(open_action != 0);

  00ae3	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  00ae7	74 09		 je	 SHORT $LN476@ShowDemoWi
  00ae9	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv470[rbp], 1
  00af0	eb 07		 jmp	 SHORT $LN477@ShowDemoWi
$LN476@ShowDemoWi:
  00af2	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv470[rbp], 0
$LN477@ShowDemoWi:
  00af9	33 d2		 xor	 edx, edx
  00afb	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv470[rbp]
  00b02	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN49@ShowDemoWi:

; 3994 :     IMGUI_DEMO_MARKER("Tables/Resizable, mixed");

  00b07	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00b0f	74 28		 je	 SHORT $LN304@ShowDemoWi
  00b11	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  00b17	05 ef 00 00 00	 add	 eax, 239		; 000000efH
  00b1c	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00b23	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BI@BCCHHGLN@Tables?1Resizable?0?5mixed?$AA@
  00b2a	8b d0		 mov	 edx, eax
  00b2c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00b33	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN304@ShowDemoWi:
  00b39	33 c0		 xor	 eax, eax
  00b3b	85 c0		 test	 eax, eax
  00b3d	75 c8		 jne	 SHORT $LN49@ShowDemoWi

; 3995 :     if (ImGui::TreeNode("Resizable, mixed"))

  00b3f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JIGIKPCO@Resizable?0?5mixed?$AA@
  00b46	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  00b4b	0f b6 c0	 movzx	 eax, al
  00b4e	85 c0		 test	 eax, eax
  00b50	0f 84 d2 02 00
	00		 je	 $LN305@ShowDemoWi

; 3996 :     {
; 3997 :         HelpMarker(

  00b56	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0MC@OIEBOKLD@Using?5TableSetupColumn?$CI?$CJ?5to?5alte@
  00b5d	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 3998 :             "Using TableSetupColumn() to alter resizing policy on a per-column basis.\n\n"
; 3999 :             "When combining Fixed and Stretch columns, generally you only want one, maybe two trailing columns to use _WidthStretch.");
; 4000 :         static ImGuiTableFlags flags = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_RowBg | ImGuiTableFlags_Borders | ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable;
; 4001 : 
; 4002 :         if (ImGui::BeginTable("table1", 3, flags))

  00b62	0f 57 d2	 xorps	 xmm2, xmm2
  00b65	0f 57 c9	 xorps	 xmm1, xmm1
  00b68	48 8d 8d 04 17
	00 00		 lea	 rcx, QWORD PTR $T142[rbp]
  00b6f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00b74	0f 57 c0	 xorps	 xmm0, xmm0
  00b77	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00b7d	4c 8b c8	 mov	 r9, rax
  00b80	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags@?GJ@??ShowDemoWindowTables@@YAXXZ@4HA
  00b87	ba 03 00 00 00	 mov	 edx, 3
  00b8c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KDFPGKKJ@table1?$AA@
  00b93	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  00b98	0f b6 c0	 movzx	 eax, al
  00b9b	85 c0		 test	 eax, eax
  00b9d	0f 84 fd 00 00
	00		 je	 $LN306@ShowDemoWi

; 4003 :         {
; 4004 :             ImGui::TableSetupColumn("AAA", ImGuiTableColumnFlags_WidthFixed);

  00ba3	45 33 c9	 xor	 r9d, r9d
  00ba6	0f 57 d2	 xorps	 xmm2, xmm2
  00ba9	ba 10 00 00 00	 mov	 edx, 16
  00bae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03GFCJIGAI@AAA?$AA@
  00bb5	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4005 :             ImGui::TableSetupColumn("BBB", ImGuiTableColumnFlags_WidthFixed);

  00bba	45 33 c9	 xor	 r9d, r9d
  00bbd	0f 57 d2	 xorps	 xmm2, xmm2
  00bc0	ba 10 00 00 00	 mov	 edx, 16
  00bc5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03FOPHMEHM@BBB?$AA@
  00bcc	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4006 :             ImGui::TableSetupColumn("CCC", ImGuiTableColumnFlags_WidthStretch);

  00bd1	45 33 c9	 xor	 r9d, r9d
  00bd4	0f 57 d2	 xorps	 xmm2, xmm2
  00bd7	ba 08 00 00 00	 mov	 edx, 8
  00bdc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03POJCPIGP@CCC?$AA@
  00be3	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4007 :             ImGui::TableHeadersRow();

  00be8	e8 00 00 00 00	 call	 ?TableHeadersRow@ImGui@@YAXXZ ; ImGui::TableHeadersRow

; 4008 :             for (int row = 0; row < 5; row++)

  00bed	c7 85 e4 01 00
	00 00 00 00 00	 mov	 DWORD PTR row$31[rbp], 0
  00bf7	eb 0e		 jmp	 SHORT $LN52@ShowDemoWi
$LN50@ShowDemoWi:
  00bf9	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR row$31[rbp]
  00bff	ff c0		 inc	 eax
  00c01	89 85 e4 01 00
	00		 mov	 DWORD PTR row$31[rbp], eax
$LN52@ShowDemoWi:
  00c07	83 bd e4 01 00
	00 05		 cmp	 DWORD PTR row$31[rbp], 5
  00c0e	0f 8d 87 00 00
	00		 jge	 $LN51@ShowDemoWi

; 4009 :             {
; 4010 :                 ImGui::TableNextRow();

  00c14	0f 57 c9	 xorps	 xmm1, xmm1
  00c17	33 c9		 xor	 ecx, ecx
  00c19	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4011 :                 for (int column = 0; column < 3; column++)

  00c1e	c7 85 04 02 00
	00 00 00 00 00	 mov	 DWORD PTR column$32[rbp], 0
  00c28	eb 0e		 jmp	 SHORT $LN55@ShowDemoWi
$LN53@ShowDemoWi:
  00c2a	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR column$32[rbp]
  00c30	ff c0		 inc	 eax
  00c32	89 85 04 02 00
	00		 mov	 DWORD PTR column$32[rbp], eax
$LN55@ShowDemoWi:
  00c38	83 bd 04 02 00
	00 03		 cmp	 DWORD PTR column$32[rbp], 3
  00c3f	7d 55		 jge	 SHORT $LN54@ShowDemoWi

; 4012 :                 {
; 4013 :                     ImGui::TableSetColumnIndex(column);

  00c41	8b 8d 04 02 00
	00		 mov	 ecx, DWORD PTR column$32[rbp]
  00c47	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4014 :                     ImGui::Text("%s %d,%d", (column == 2) ? "Stretch" : "Fixed", column, row);

  00c4c	83 bd 04 02 00
	00 02		 cmp	 DWORD PTR column$32[rbp], 2
  00c53	75 10		 jne	 SHORT $LN478@ShowDemoWi
  00c55	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07ENIDNHGB@Stretch?$AA@
  00c5c	48 89 85 c8 1d
	00 00		 mov	 QWORD PTR tv550[rbp], rax
  00c63	eb 0e		 jmp	 SHORT $LN479@ShowDemoWi
$LN478@ShowDemoWi:
  00c65	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05OCBIINAK@Fixed?$AA@
  00c6c	48 89 85 c8 1d
	00 00		 mov	 QWORD PTR tv550[rbp], rax
$LN479@ShowDemoWi:
  00c73	44 8b 8d e4 01
	00 00		 mov	 r9d, DWORD PTR row$31[rbp]
  00c7a	44 8b 85 04 02
	00 00		 mov	 r8d, DWORD PTR column$32[rbp]
  00c81	48 8b 95 c8 1d
	00 00		 mov	 rdx, QWORD PTR tv550[rbp]
  00c88	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NCNCPMHE@?$CFs?5?$CFd?0?$CFd?$AA@
  00c8f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4015 :                 }

  00c94	eb 94		 jmp	 SHORT $LN53@ShowDemoWi
$LN54@ShowDemoWi:

; 4016 :             }

  00c96	e9 5e ff ff ff	 jmp	 $LN50@ShowDemoWi
$LN51@ShowDemoWi:

; 4017 :             ImGui::EndTable();

  00c9b	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN306@ShowDemoWi:

; 4018 :         }
; 4019 :         if (ImGui::BeginTable("table2", 6, flags))

  00ca0	0f 57 d2	 xorps	 xmm2, xmm2
  00ca3	0f 57 c9	 xorps	 xmm1, xmm1
  00ca6	48 8d 8d 24 17
	00 00		 lea	 rcx, QWORD PTR $T143[rbp]
  00cad	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00cb2	0f 57 c0	 xorps	 xmm0, xmm0
  00cb5	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00cbb	4c 8b c8	 mov	 r9, rax
  00cbe	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags@?GJ@??ShowDemoWindowTables@@YAXXZ@4HA
  00cc5	ba 06 00 00 00	 mov	 edx, 6
  00cca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IIHCDJGK@table2?$AA@
  00cd1	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  00cd6	0f b6 c0	 movzx	 eax, al
  00cd9	85 c0		 test	 eax, eax
  00cdb	0f 84 42 01 00
	00		 je	 $LN307@ShowDemoWi

; 4020 :         {
; 4021 :             ImGui::TableSetupColumn("AAA", ImGuiTableColumnFlags_WidthFixed);

  00ce1	45 33 c9	 xor	 r9d, r9d
  00ce4	0f 57 d2	 xorps	 xmm2, xmm2
  00ce7	ba 10 00 00 00	 mov	 edx, 16
  00cec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03GFCJIGAI@AAA?$AA@
  00cf3	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4022 :             ImGui::TableSetupColumn("BBB", ImGuiTableColumnFlags_WidthFixed);

  00cf8	45 33 c9	 xor	 r9d, r9d
  00cfb	0f 57 d2	 xorps	 xmm2, xmm2
  00cfe	ba 10 00 00 00	 mov	 edx, 16
  00d03	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03FOPHMEHM@BBB?$AA@
  00d0a	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4023 :             ImGui::TableSetupColumn("CCC", ImGuiTableColumnFlags_WidthFixed | ImGuiTableColumnFlags_DefaultHide);

  00d0f	45 33 c9	 xor	 r9d, r9d
  00d12	0f 57 d2	 xorps	 xmm2, xmm2
  00d15	ba 12 00 00 00	 mov	 edx, 18
  00d1a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03POJCPIGP@CCC?$AA@
  00d21	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4024 :             ImGui::TableSetupColumn("DDD", ImGuiTableColumnFlags_WidthStretch);

  00d26	45 33 c9	 xor	 r9d, r9d
  00d29	0f 57 d2	 xorps	 xmm2, xmm2
  00d2c	ba 08 00 00 00	 mov	 edx, 8
  00d31	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CJELEAJE@DDD?$AA@
  00d38	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4025 :             ImGui::TableSetupColumn("EEE", ImGuiTableColumnFlags_WidthStretch);

  00d3d	45 33 c9	 xor	 r9d, r9d
  00d40	0f 57 d2	 xorps	 xmm2, xmm2
  00d43	ba 08 00 00 00	 mov	 edx, 8
  00d48	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IJCOHMIH@EEE?$AA@
  00d4f	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4026 :             ImGui::TableSetupColumn("FFF", ImGuiTableColumnFlags_WidthStretch | ImGuiTableColumnFlags_DefaultHide);

  00d54	45 33 c9	 xor	 r9d, r9d
  00d57	0f 57 d2	 xorps	 xmm2, xmm2
  00d5a	ba 0a 00 00 00	 mov	 edx, 10
  00d5f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03LCPADOPD@FFF?$AA@
  00d66	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4027 :             ImGui::TableHeadersRow();

  00d6b	e8 00 00 00 00	 call	 ?TableHeadersRow@ImGui@@YAXXZ ; ImGui::TableHeadersRow

; 4028 :             for (int row = 0; row < 5; row++)

  00d70	c7 85 24 02 00
	00 00 00 00 00	 mov	 DWORD PTR row$33[rbp], 0
  00d7a	eb 0e		 jmp	 SHORT $LN58@ShowDemoWi
$LN56@ShowDemoWi:
  00d7c	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR row$33[rbp]
  00d82	ff c0		 inc	 eax
  00d84	89 85 24 02 00
	00		 mov	 DWORD PTR row$33[rbp], eax
$LN58@ShowDemoWi:
  00d8a	83 bd 24 02 00
	00 05		 cmp	 DWORD PTR row$33[rbp], 5
  00d91	0f 8d 87 00 00
	00		 jge	 $LN57@ShowDemoWi

; 4029 :             {
; 4030 :                 ImGui::TableNextRow();

  00d97	0f 57 c9	 xorps	 xmm1, xmm1
  00d9a	33 c9		 xor	 ecx, ecx
  00d9c	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4031 :                 for (int column = 0; column < 6; column++)

  00da1	c7 85 44 02 00
	00 00 00 00 00	 mov	 DWORD PTR column$34[rbp], 0
  00dab	eb 0e		 jmp	 SHORT $LN61@ShowDemoWi
$LN59@ShowDemoWi:
  00dad	8b 85 44 02 00
	00		 mov	 eax, DWORD PTR column$34[rbp]
  00db3	ff c0		 inc	 eax
  00db5	89 85 44 02 00
	00		 mov	 DWORD PTR column$34[rbp], eax
$LN61@ShowDemoWi:
  00dbb	83 bd 44 02 00
	00 06		 cmp	 DWORD PTR column$34[rbp], 6
  00dc2	7d 55		 jge	 SHORT $LN60@ShowDemoWi

; 4032 :                 {
; 4033 :                     ImGui::TableSetColumnIndex(column);

  00dc4	8b 8d 44 02 00
	00		 mov	 ecx, DWORD PTR column$34[rbp]
  00dca	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4034 :                     ImGui::Text("%s %d,%d", (column >= 3) ? "Stretch" : "Fixed", column, row);

  00dcf	83 bd 44 02 00
	00 03		 cmp	 DWORD PTR column$34[rbp], 3
  00dd6	7c 10		 jl	 SHORT $LN480@ShowDemoWi
  00dd8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07ENIDNHGB@Stretch?$AA@
  00ddf	48 89 85 c8 1d
	00 00		 mov	 QWORD PTR tv599[rbp], rax
  00de6	eb 0e		 jmp	 SHORT $LN481@ShowDemoWi
$LN480@ShowDemoWi:
  00de8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05OCBIINAK@Fixed?$AA@
  00def	48 89 85 c8 1d
	00 00		 mov	 QWORD PTR tv599[rbp], rax
$LN481@ShowDemoWi:
  00df6	44 8b 8d 24 02
	00 00		 mov	 r9d, DWORD PTR row$33[rbp]
  00dfd	44 8b 85 44 02
	00 00		 mov	 r8d, DWORD PTR column$34[rbp]
  00e04	48 8b 95 c8 1d
	00 00		 mov	 rdx, QWORD PTR tv599[rbp]
  00e0b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NCNCPMHE@?$CFs?5?$CFd?0?$CFd?$AA@
  00e12	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4035 :                 }

  00e17	eb 94		 jmp	 SHORT $LN59@ShowDemoWi
$LN60@ShowDemoWi:

; 4036 :             }

  00e19	e9 5e ff ff ff	 jmp	 $LN56@ShowDemoWi
$LN57@ShowDemoWi:

; 4037 :             ImGui::EndTable();

  00e1e	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN307@ShowDemoWi:

; 4038 :         }
; 4039 :         ImGui::TreePop();

  00e23	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN305@ShowDemoWi:

; 4040 :     }
; 4041 : 
; 4042 :     if (open_action != -1)

  00e28	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  00e2c	74 24		 je	 SHORT $LN64@ShowDemoWi

; 4043 :         ImGui::SetNextItemOpen(open_action != 0);

  00e2e	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  00e32	74 09		 je	 SHORT $LN482@ShowDemoWi
  00e34	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv605[rbp], 1
  00e3b	eb 07		 jmp	 SHORT $LN483@ShowDemoWi
$LN482@ShowDemoWi:
  00e3d	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv605[rbp], 0
$LN483@ShowDemoWi:
  00e44	33 d2		 xor	 edx, edx
  00e46	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv605[rbp]
  00e4d	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN64@ShowDemoWi:

; 4044 :     IMGUI_DEMO_MARKER("Tables/Reorderable, hideable, with headers");

  00e52	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00e5a	74 28		 je	 SHORT $LN309@ShowDemoWi
  00e5c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  00e62	05 21 01 00 00	 add	 eax, 289		; 00000121H
  00e67	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00e6e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CL@HJEJDHOC@Tables?1Reorderable?0?5hideable?0?5wi@
  00e75	8b d0		 mov	 edx, eax
  00e77	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00e7e	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN309@ShowDemoWi:
  00e84	33 c0		 xor	 eax, eax
  00e86	85 c0		 test	 eax, eax
  00e88	75 c8		 jne	 SHORT $LN64@ShowDemoWi

; 4045 :     if (ImGui::TreeNode("Reorderable, hideable, with headers"))

  00e8a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@KCIAIBPM@Reorderable?0?5hideable?0?5with?5head@
  00e91	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  00e96	0f b6 c0	 movzx	 eax, al
  00e99	85 c0		 test	 eax, eax
  00e9b	0f 84 b8 02 00
	00		 je	 $LN310@ShowDemoWi

; 4046 :     {
; 4047 :         HelpMarker(

  00ea1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GD@ICCOIMAN@Click?5and?5drag?5column?5headers?5to@
  00ea8	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4048 :             "Click and drag column headers to reorder columns.\n\n"
; 4049 :             "Right-click on a header to open a context menu.");
; 4050 :         static ImGuiTableFlags flags = ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV;
; 4051 :         PushStyleCompact();

  00ead	e8 00 00 00 00	 call	 ?PushStyleCompact@@YAXXZ ; PushStyleCompact

; 4052 :         ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags, ImGuiTableFlags_Resizable);

  00eb2	41 b8 01 00 00
	00		 mov	 r8d, 1
  00eb8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?IA@??ShowDemoWindowTables@@YAXXZ@4HA
  00ebf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@EMJCIFOG@ImGuiTableFlags_Resizable?$AA@
  00ec6	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4053 :         ImGui::CheckboxFlags("ImGuiTableFlags_Reorderable", &flags, ImGuiTableFlags_Reorderable);

  00ecb	41 b8 02 00 00
	00		 mov	 r8d, 2
  00ed1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?IA@??ShowDemoWindowTables@@YAXXZ@4HA
  00ed8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@CEFJIGKC@ImGuiTableFlags_Reorderable?$AA@
  00edf	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4054 :         ImGui::CheckboxFlags("ImGuiTableFlags_Hideable", &flags, ImGuiTableFlags_Hideable);

  00ee4	41 b8 04 00 00
	00		 mov	 r8d, 4
  00eea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?IA@??ShowDemoWindowTables@@YAXXZ@4HA
  00ef1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@KDGOANFD@ImGuiTableFlags_Hideable?$AA@
  00ef8	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4055 :         ImGui::CheckboxFlags("ImGuiTableFlags_NoBordersInBody", &flags, ImGuiTableFlags_NoBordersInBody);

  00efd	41 b8 00 08 00
	00		 mov	 r8d, 2048		; 00000800H
  00f03	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?IA@??ShowDemoWindowTables@@YAXXZ@4HA
  00f0a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@DPINADJM@ImGuiTableFlags_NoBordersInBody?$AA@
  00f11	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4056 :         ImGui::CheckboxFlags("ImGuiTableFlags_NoBordersInBodyUntilResize", &flags, ImGuiTableFlags_NoBordersInBodyUntilResize); ImGui::SameLine(); HelpMarker("Disable vertical borders in columns Body until hovered for resize (borders will always appear in Headers)");

  00f16	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  00f1c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?IA@??ShowDemoWindowTables@@YAXXZ@4HA
  00f23	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@IIFCHPBH@ImGuiTableFlags_NoBordersInBodyU@
  00f2a	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags
  00f2f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00f37	0f 57 c0	 xorps	 xmm0, xmm0
  00f3a	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00f3f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GK@KONLLEJN@Disable?5vertical?5borders?5in?5colu@
  00f46	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4057 :         PopStyleCompact();

  00f4b	e8 00 00 00 00	 call	 ?PopStyleCompact@@YAXXZ	; PopStyleCompact

; 4058 : 
; 4059 :         if (ImGui::BeginTable("table1", 3, flags))

  00f50	0f 57 d2	 xorps	 xmm2, xmm2
  00f53	0f 57 c9	 xorps	 xmm1, xmm1
  00f56	48 8d 8d 44 17
	00 00		 lea	 rcx, QWORD PTR $T144[rbp]
  00f5d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00f62	0f 57 c0	 xorps	 xmm0, xmm0
  00f65	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00f6b	4c 8b c8	 mov	 r9, rax
  00f6e	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags@?IA@??ShowDemoWindowTables@@YAXXZ@4HA
  00f75	ba 03 00 00 00	 mov	 edx, 3
  00f7a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KDFPGKKJ@table1?$AA@
  00f81	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  00f86	0f b6 c0	 movzx	 eax, al
  00f89	85 c0		 test	 eax, eax
  00f8b	0f 84 be 00 00
	00		 je	 $LN311@ShowDemoWi

; 4060 :         {
; 4061 :             // Submit columns name with TableSetupColumn() and call TableHeadersRow() to create a row with a header in each column.
; 4062 :             // (Later we will show how TableSetupColumn() has other uses, optional flags, sizing weight etc.)
; 4063 :             ImGui::TableSetupColumn("One");

  00f91	45 33 c9	 xor	 r9d, r9d
  00f94	0f 57 d2	 xorps	 xmm2, xmm2
  00f97	33 d2		 xor	 edx, edx
  00f99	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03EHAPBBEA@One?$AA@
  00fa0	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4064 :             ImGui::TableSetupColumn("Two");

  00fa5	45 33 c9	 xor	 r9d, r9d
  00fa8	0f 57 d2	 xorps	 xmm2, xmm2
  00fab	33 d2		 xor	 edx, edx
  00fad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CJAPLBKL@Two?$AA@
  00fb4	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4065 :             ImGui::TableSetupColumn("Three");

  00fb9	45 33 c9	 xor	 r9d, r9d
  00fbc	0f 57 d2	 xorps	 xmm2, xmm2
  00fbf	33 d2		 xor	 edx, edx
  00fc1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OHMANGAP@Three?$AA@
  00fc8	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4066 :             ImGui::TableHeadersRow();

  00fcd	e8 00 00 00 00	 call	 ?TableHeadersRow@ImGui@@YAXXZ ; ImGui::TableHeadersRow

; 4067 :             for (int row = 0; row < 6; row++)

  00fd2	c7 85 64 02 00
	00 00 00 00 00	 mov	 DWORD PTR row$35[rbp], 0
  00fdc	eb 0e		 jmp	 SHORT $LN67@ShowDemoWi
$LN65@ShowDemoWi:
  00fde	8b 85 64 02 00
	00		 mov	 eax, DWORD PTR row$35[rbp]
  00fe4	ff c0		 inc	 eax
  00fe6	89 85 64 02 00
	00		 mov	 DWORD PTR row$35[rbp], eax
$LN67@ShowDemoWi:
  00fec	83 bd 64 02 00
	00 06		 cmp	 DWORD PTR row$35[rbp], 6
  00ff3	7d 55		 jge	 SHORT $LN66@ShowDemoWi

; 4068 :             {
; 4069 :                 ImGui::TableNextRow();

  00ff5	0f 57 c9	 xorps	 xmm1, xmm1
  00ff8	33 c9		 xor	 ecx, ecx
  00ffa	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4070 :                 for (int column = 0; column < 3; column++)

  00fff	c7 85 84 02 00
	00 00 00 00 00	 mov	 DWORD PTR column$36[rbp], 0
  01009	eb 0e		 jmp	 SHORT $LN70@ShowDemoWi
$LN68@ShowDemoWi:
  0100b	8b 85 84 02 00
	00		 mov	 eax, DWORD PTR column$36[rbp]
  01011	ff c0		 inc	 eax
  01013	89 85 84 02 00
	00		 mov	 DWORD PTR column$36[rbp], eax
$LN70@ShowDemoWi:
  01019	83 bd 84 02 00
	00 03		 cmp	 DWORD PTR column$36[rbp], 3
  01020	7d 26		 jge	 SHORT $LN69@ShowDemoWi

; 4071 :                 {
; 4072 :                     ImGui::TableSetColumnIndex(column);

  01022	8b 8d 84 02 00
	00		 mov	 ecx, DWORD PTR column$36[rbp]
  01028	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4073 :                     ImGui::Text("Hello %d,%d", column, row);

  0102d	44 8b 85 64 02
	00 00		 mov	 r8d, DWORD PTR row$35[rbp]
  01034	8b 95 84 02 00
	00		 mov	 edx, DWORD PTR column$36[rbp]
  0103a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MKBMKAAH@Hello?5?$CFd?0?$CFd?$AA@
  01041	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4074 :                 }

  01046	eb c3		 jmp	 SHORT $LN68@ShowDemoWi
$LN69@ShowDemoWi:

; 4075 :             }

  01048	eb 94		 jmp	 SHORT $LN65@ShowDemoWi
$LN66@ShowDemoWi:

; 4076 :             ImGui::EndTable();

  0104a	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN311@ShowDemoWi:

; 4077 :         }
; 4078 : 
; 4079 :         // Use outer_size.x == 0.0f instead of default to make the table as tight as possible (only valid when no scrolling and no stretch column)
; 4080 :         if (ImGui::BeginTable("table2", 3, flags | ImGuiTableFlags_SizingFixedFit, ImVec2(0.0f, 0.0f)))

  0104f	0f 57 d2	 xorps	 xmm2, xmm2
  01052	0f 57 c9	 xorps	 xmm1, xmm1
  01055	48 8d 8d 64 17
	00 00		 lea	 rcx, QWORD PTR $T145[rbp]
  0105c	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01061	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?flags@?IA@??ShowDemoWindowTables@@YAXXZ@4HA
  01067	0f ba e9 0d	 bts	 ecx, 13
  0106b	0f 57 c0	 xorps	 xmm0, xmm0
  0106e	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01074	4c 8b c8	 mov	 r9, rax
  01077	44 8b c1	 mov	 r8d, ecx
  0107a	ba 03 00 00 00	 mov	 edx, 3
  0107f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IIHCDJGK@table2?$AA@
  01086	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  0108b	0f b6 c0	 movzx	 eax, al
  0108e	85 c0		 test	 eax, eax
  01090	0f 84 be 00 00
	00		 je	 $LN312@ShowDemoWi

; 4081 :         {
; 4082 :             ImGui::TableSetupColumn("One");

  01096	45 33 c9	 xor	 r9d, r9d
  01099	0f 57 d2	 xorps	 xmm2, xmm2
  0109c	33 d2		 xor	 edx, edx
  0109e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03EHAPBBEA@One?$AA@
  010a5	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4083 :             ImGui::TableSetupColumn("Two");

  010aa	45 33 c9	 xor	 r9d, r9d
  010ad	0f 57 d2	 xorps	 xmm2, xmm2
  010b0	33 d2		 xor	 edx, edx
  010b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CJAPLBKL@Two?$AA@
  010b9	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4084 :             ImGui::TableSetupColumn("Three");

  010be	45 33 c9	 xor	 r9d, r9d
  010c1	0f 57 d2	 xorps	 xmm2, xmm2
  010c4	33 d2		 xor	 edx, edx
  010c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OHMANGAP@Three?$AA@
  010cd	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4085 :             ImGui::TableHeadersRow();

  010d2	e8 00 00 00 00	 call	 ?TableHeadersRow@ImGui@@YAXXZ ; ImGui::TableHeadersRow

; 4086 :             for (int row = 0; row < 6; row++)

  010d7	c7 85 a4 02 00
	00 00 00 00 00	 mov	 DWORD PTR row$37[rbp], 0
  010e1	eb 0e		 jmp	 SHORT $LN73@ShowDemoWi
$LN71@ShowDemoWi:
  010e3	8b 85 a4 02 00
	00		 mov	 eax, DWORD PTR row$37[rbp]
  010e9	ff c0		 inc	 eax
  010eb	89 85 a4 02 00
	00		 mov	 DWORD PTR row$37[rbp], eax
$LN73@ShowDemoWi:
  010f1	83 bd a4 02 00
	00 06		 cmp	 DWORD PTR row$37[rbp], 6
  010f8	7d 55		 jge	 SHORT $LN72@ShowDemoWi

; 4087 :             {
; 4088 :                 ImGui::TableNextRow();

  010fa	0f 57 c9	 xorps	 xmm1, xmm1
  010fd	33 c9		 xor	 ecx, ecx
  010ff	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4089 :                 for (int column = 0; column < 3; column++)

  01104	c7 85 c4 02 00
	00 00 00 00 00	 mov	 DWORD PTR column$38[rbp], 0
  0110e	eb 0e		 jmp	 SHORT $LN76@ShowDemoWi
$LN74@ShowDemoWi:
  01110	8b 85 c4 02 00
	00		 mov	 eax, DWORD PTR column$38[rbp]
  01116	ff c0		 inc	 eax
  01118	89 85 c4 02 00
	00		 mov	 DWORD PTR column$38[rbp], eax
$LN76@ShowDemoWi:
  0111e	83 bd c4 02 00
	00 03		 cmp	 DWORD PTR column$38[rbp], 3
  01125	7d 26		 jge	 SHORT $LN75@ShowDemoWi

; 4090 :                 {
; 4091 :                     ImGui::TableSetColumnIndex(column);

  01127	8b 8d c4 02 00
	00		 mov	 ecx, DWORD PTR column$38[rbp]
  0112d	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4092 :                     ImGui::Text("Fixed %d,%d", column, row);

  01132	44 8b 85 a4 02
	00 00		 mov	 r8d, DWORD PTR row$37[rbp]
  01139	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR column$38[rbp]
  0113f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PGLLGKEB@Fixed?5?$CFd?0?$CFd?$AA@
  01146	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4093 :                 }

  0114b	eb c3		 jmp	 SHORT $LN74@ShowDemoWi
$LN75@ShowDemoWi:

; 4094 :             }

  0114d	eb 94		 jmp	 SHORT $LN71@ShowDemoWi
$LN72@ShowDemoWi:

; 4095 :             ImGui::EndTable();

  0114f	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN312@ShowDemoWi:

; 4096 :         }
; 4097 :         ImGui::TreePop();

  01154	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN310@ShowDemoWi:

; 4098 :     }
; 4099 : 
; 4100 :     if (open_action != -1)

  01159	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  0115d	74 24		 je	 SHORT $LN79@ShowDemoWi

; 4101 :         ImGui::SetNextItemOpen(open_action != 0);

  0115f	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  01163	74 09		 je	 SHORT $LN484@ShowDemoWi
  01165	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv741[rbp], 1
  0116c	eb 07		 jmp	 SHORT $LN485@ShowDemoWi
$LN484@ShowDemoWi:
  0116e	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv741[rbp], 0
$LN485@ShowDemoWi:
  01175	33 d2		 xor	 edx, edx
  01177	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv741[rbp]
  0117e	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN79@ShowDemoWi:

; 4102 :     IMGUI_DEMO_MARKER("Tables/Padding");

  01183	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0118b	74 28		 je	 SHORT $LN314@ShowDemoWi
  0118d	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  01193	05 5b 01 00 00	 add	 eax, 347		; 0000015bH
  01198	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0119f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@LGLCJPIM@Tables?1Padding?$AA@
  011a6	8b d0		 mov	 edx, eax
  011a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  011af	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN314@ShowDemoWi:
  011b5	33 c0		 xor	 eax, eax
  011b7	85 c0		 test	 eax, eax
  011b9	75 c8		 jne	 SHORT $LN79@ShowDemoWi

; 4103 :     if (ImGui::TreeNode("Padding"))

  011bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DDDGKLAD@Padding?$AA@
  011c2	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  011c7	0f b6 c0	 movzx	 eax, al
  011ca	85 c0		 test	 eax, eax
  011cc	0f 84 2d 05 00
	00		 je	 $LN315@ShowDemoWi

; 4104 :     {
; 4105 :         // First example: showcase use of padding flags and effect of BorderOuterV/BorderInnerV on X padding.
; 4106 :         // We don't expose BorderOuterH/BorderInnerH here because they have no effect on X padding.
; 4107 :         HelpMarker(

  011d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BMB@HPBFLJOA@We?5often?5want?5outer?5padding?5acti@
  011d9	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4108 :             "We often want outer padding activated when any using features which makes the edges of a column visible:\n"
; 4109 :             "e.g.:\n"
; 4110 :             "- BorderOuterV\n"
; 4111 :             "- any form of row selection\n"
; 4112 :             "Because of this, activating BorderOuterV sets the default to PadOuterX. Using PadOuterX or NoPadOuterX you can override the default.\n\n"
; 4113 :             "Actual padding values are using style.CellPadding.\n\n"
; 4114 :             "In this demo we don't show horizontal borders to emphasize how they don't affect default horizontal padding.");
; 4115 : 
; 4116 :         static ImGuiTableFlags flags1 = ImGuiTableFlags_BordersV;
; 4117 :         PushStyleCompact();

  011de	e8 00 00 00 00	 call	 ?PushStyleCompact@@YAXXZ ; PushStyleCompact

; 4118 :         ImGui::CheckboxFlags("ImGuiTableFlags_PadOuterX", &flags1, ImGuiTableFlags_PadOuterX);

  011e3	41 b8 00 00 20
	00		 mov	 r8d, 2097152		; 00200000H
  011e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags1@?JH@??ShowDemoWindowTables@@YAXXZ@4HA
  011f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@HHEJGEBJ@ImGuiTableFlags_PadOuterX?$AA@
  011f7	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4119 :         ImGui::SameLine(); HelpMarker("Enable outer-most padding (default if ImGuiTableFlags_BordersOuterV is set)");

  011fc	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01204	0f 57 c0	 xorps	 xmm0, xmm0
  01207	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0120c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EM@MKHAEMOD@Enable?5outer?9most?5padding?5?$CIdefau@
  01213	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4120 :         ImGui::CheckboxFlags("ImGuiTableFlags_NoPadOuterX", &flags1, ImGuiTableFlags_NoPadOuterX);

  01218	41 b8 00 00 40
	00		 mov	 r8d, 4194304		; 00400000H
  0121e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags1@?JH@??ShowDemoWindowTables@@YAXXZ@4HA
  01225	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@PMBOGJLP@ImGuiTableFlags_NoPadOuterX?$AA@
  0122c	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4121 :         ImGui::SameLine(); HelpMarker("Disable outer-most padding (default if ImGuiTableFlags_BordersOuterV is not set)");

  01231	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01239	0f 57 c0	 xorps	 xmm0, xmm0
  0123c	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01241	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FB@OFOCAPDE@Disable?5outer?9most?5padding?5?$CIdefa@
  01248	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4122 :         ImGui::CheckboxFlags("ImGuiTableFlags_NoPadInnerX", &flags1, ImGuiTableFlags_NoPadInnerX);

  0124d	41 b8 00 00 80
	00		 mov	 r8d, 8388608		; 00800000H
  01253	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags1@?JH@??ShowDemoWindowTables@@YAXXZ@4HA
  0125a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@NMIPCBPO@ImGuiTableFlags_NoPadInnerX?$AA@
  01261	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4123 :         ImGui::SameLine(); HelpMarker("Disable inner padding between columns (double inner padding if BordersOuterV is on, single inner padding if BordersOuterV is off)");

  01266	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0126e	0f 57 c0	 xorps	 xmm0, xmm0
  01271	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01276	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0IC@DEFBCLPE@Disable?5inner?5padding?5between?5co@
  0127d	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4124 :         ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuterV", &flags1, ImGuiTableFlags_BordersOuterV);

  01282	41 b8 00 04 00
	00		 mov	 r8d, 1024		; 00000400H
  01288	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags1@?JH@??ShowDemoWindowTables@@YAXXZ@4HA
  0128f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@JBGPMKKC@ImGuiTableFlags_BordersOuterV?$AA@
  01296	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4125 :         ImGui::CheckboxFlags("ImGuiTableFlags_BordersInnerV", &flags1, ImGuiTableFlags_BordersInnerV);

  0129b	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  012a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags1@?JH@??ShowDemoWindowTables@@YAXXZ@4HA
  012a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@LBPOICOD@ImGuiTableFlags_BordersInnerV?$AA@
  012af	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4126 :         static bool show_headers = false;
; 4127 :         ImGui::Checkbox("show_headers", &show_headers);

  012b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?show_headers@?JH@??ShowDemoWindowTables@@YAXXZ@4_NA
  012bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@IJLMIFHN@show_headers?$AA@
  012c2	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 4128 :         PopStyleCompact();

  012c7	e8 00 00 00 00	 call	 ?PopStyleCompact@@YAXXZ	; PopStyleCompact

; 4129 : 
; 4130 :         if (ImGui::BeginTable("table_padding", 3, flags1))

  012cc	0f 57 d2	 xorps	 xmm2, xmm2
  012cf	0f 57 c9	 xorps	 xmm1, xmm1
  012d2	48 8d 8d 84 17
	00 00		 lea	 rcx, QWORD PTR $T146[rbp]
  012d9	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  012de	0f 57 c0	 xorps	 xmm0, xmm0
  012e1	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  012e7	4c 8b c8	 mov	 r9, rax
  012ea	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags1@?JH@??ShowDemoWindowTables@@YAXXZ@4HA
  012f1	ba 03 00 00 00	 mov	 edx, 3
  012f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FKPNOHIF@table_padding?$AA@
  012fd	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  01302	0f b6 c0	 movzx	 eax, al
  01305	85 c0		 test	 eax, eax
  01307	0f 84 34 01 00
	00		 je	 $LN316@ShowDemoWi

; 4131 :         {
; 4132 :             if (show_headers)

  0130d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_headers@?JH@??ShowDemoWindowTables@@YAXXZ@4_NA
  01314	85 c0		 test	 eax, eax
  01316	74 41		 je	 SHORT $LN317@ShowDemoWi

; 4133 :             {
; 4134 :                 ImGui::TableSetupColumn("One");

  01318	45 33 c9	 xor	 r9d, r9d
  0131b	0f 57 d2	 xorps	 xmm2, xmm2
  0131e	33 d2		 xor	 edx, edx
  01320	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03EHAPBBEA@One?$AA@
  01327	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4135 :                 ImGui::TableSetupColumn("Two");

  0132c	45 33 c9	 xor	 r9d, r9d
  0132f	0f 57 d2	 xorps	 xmm2, xmm2
  01332	33 d2		 xor	 edx, edx
  01334	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CJAPLBKL@Two?$AA@
  0133b	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4136 :                 ImGui::TableSetupColumn("Three");

  01340	45 33 c9	 xor	 r9d, r9d
  01343	0f 57 d2	 xorps	 xmm2, xmm2
  01346	33 d2		 xor	 edx, edx
  01348	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OHMANGAP@Three?$AA@
  0134f	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4137 :                 ImGui::TableHeadersRow();

  01354	e8 00 00 00 00	 call	 ?TableHeadersRow@ImGui@@YAXXZ ; ImGui::TableHeadersRow
$LN317@ShowDemoWi:

; 4138 :             }
; 4139 : 
; 4140 :             for (int row = 0; row < 5; row++)

  01359	c7 85 e4 02 00
	00 00 00 00 00	 mov	 DWORD PTR row$39[rbp], 0
  01363	eb 0e		 jmp	 SHORT $LN82@ShowDemoWi
$LN80@ShowDemoWi:
  01365	8b 85 e4 02 00
	00		 mov	 eax, DWORD PTR row$39[rbp]
  0136b	ff c0		 inc	 eax
  0136d	89 85 e4 02 00
	00		 mov	 DWORD PTR row$39[rbp], eax
$LN82@ShowDemoWi:
  01373	83 bd e4 02 00
	00 05		 cmp	 DWORD PTR row$39[rbp], 5
  0137a	0f 8d bc 00 00
	00		 jge	 $LN81@ShowDemoWi

; 4141 :             {
; 4142 :                 ImGui::TableNextRow();

  01380	0f 57 c9	 xorps	 xmm1, xmm1
  01383	33 c9		 xor	 ecx, ecx
  01385	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4143 :                 for (int column = 0; column < 3; column++)

  0138a	c7 85 04 03 00
	00 00 00 00 00	 mov	 DWORD PTR column$40[rbp], 0
  01394	eb 0e		 jmp	 SHORT $LN85@ShowDemoWi
$LN83@ShowDemoWi:
  01396	8b 85 04 03 00
	00		 mov	 eax, DWORD PTR column$40[rbp]
  0139c	ff c0		 inc	 eax
  0139e	89 85 04 03 00
	00		 mov	 DWORD PTR column$40[rbp], eax
$LN85@ShowDemoWi:
  013a4	83 bd 04 03 00
	00 03		 cmp	 DWORD PTR column$40[rbp], 3
  013ab	0f 8d 86 00 00
	00		 jge	 $LN84@ShowDemoWi

; 4144 :                 {
; 4145 :                     ImGui::TableSetColumnIndex(column);

  013b1	8b 8d 04 03 00
	00		 mov	 ecx, DWORD PTR column$40[rbp]
  013b7	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4146 :                     if (row == 0)

  013bc	83 bd e4 02 00
	00 00		 cmp	 DWORD PTR row$39[rbp], 0
  013c3	75 26		 jne	 SHORT $LN318@ShowDemoWi

; 4147 :                     {
; 4148 :                         ImGui::Text("Avail %.2f", ImGui::GetContentRegionAvail().x);

  013c5	48 8d 8d a4 17
	00 00		 lea	 rcx, QWORD PTR $T147[rbp]
  013cc	e8 00 00 00 00	 call	 ?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
  013d1	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [rax]
  013d5	0f 28 c8	 movaps	 xmm1, xmm0
  013d8	66 48 0f 7e ca	 movq	 rdx, xmm1
  013dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OKGLPFJF@Avail?5?$CF?42f?$AA@
  013e4	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4149 :                     }
; 4150 :                     else

  013e9	eb 47		 jmp	 SHORT $LN319@ShowDemoWi
$LN318@ShowDemoWi:

; 4151 :                     {
; 4152 :                         char buf[32];
; 4153 :                         sprintf(buf, "Hello %d,%d", column, row);

  013eb	44 8b 8d e4 02
	00 00		 mov	 r9d, DWORD PTR row$39[rbp]
  013f2	44 8b 85 04 03
	00 00		 mov	 r8d, DWORD PTR column$40[rbp]
  013f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@MKBMKAAH@Hello?5?$CFd?0?$CFd?$AA@
  01400	48 8d 8d 28 03
	00 00		 lea	 rcx, QWORD PTR buf$41[rbp]
  01407	e8 00 00 00 00	 call	 sprintf

; 4154 :                         ImGui::Button(buf, ImVec2(-FLT_MIN, 0.0f));

  0140c	0f 57 d2	 xorps	 xmm2, xmm2
  0140f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@80800000
  01417	48 8d 8d c4 17
	00 00		 lea	 rcx, QWORD PTR $T148[rbp]
  0141e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01423	48 8b d0	 mov	 rdx, rax
  01426	48 8d 8d 28 03
	00 00		 lea	 rcx, QWORD PTR buf$41[rbp]
  0142d	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
$LN319@ShowDemoWi:

; 4155 :                     }
; 4156 :                     //if (ImGui::TableGetColumnFlags() & ImGuiTableColumnFlags_IsHovered)
; 4157 :                     //    ImGui::TableSetBgColor(ImGuiTableBgTarget_CellBg, IM_COL32(0, 100, 0, 255));
; 4158 :                 }

  01432	e9 5f ff ff ff	 jmp	 $LN83@ShowDemoWi
$LN84@ShowDemoWi:

; 4159 :             }

  01437	e9 29 ff ff ff	 jmp	 $LN80@ShowDemoWi
$LN81@ShowDemoWi:

; 4160 :             ImGui::EndTable();

  0143c	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN316@ShowDemoWi:

; 4161 :         }
; 4162 : 
; 4163 :         // Second example: set style.CellPadding to (0.0) or a custom value.
; 4164 :         // FIXME-TABLE: Vertical border effectively not displayed the same way as horizontal one...
; 4165 :         HelpMarker("Setting style.CellPadding to (0,0) or a custom value.");

  01441	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DG@CDDGEHMI@Setting?5style?4CellPadding?5to?5?$CI0?0@
  01448	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4166 :         static ImGuiTableFlags flags2 = ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg;
; 4167 :         static ImVec2 cell_padding(0.0f, 0.0f);

  0144d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  01452	8b c0		 mov	 eax, eax
  01454	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0145a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01463	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  01467	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  0146a	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS0@?JH@??ShowDemoWindowTables@@YAXXZ@4HA, eax
  01470	7e 34		 jle	 SHORT $LN86@ShowDemoWi
  01472	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?JH@??ShowDemoWindowTables@@YAXXZ@4HA
  01479	e8 00 00 00 00	 call	 _Init_thread_header
  0147e	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?JH@??ShowDemoWindowTables@@YAXXZ@4HA, -1
  01485	75 1f		 jne	 SHORT $LN86@ShowDemoWi
  01487	0f 57 d2	 xorps	 xmm2, xmm2
  0148a	0f 57 c9	 xorps	 xmm1, xmm1
  0148d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cell_padding@?JH@??ShowDemoWindowTables@@YAXXZ@4UImVec2@@A
  01494	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01499	90		 npad	 1
  0149a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?JH@??ShowDemoWindowTables@@YAXXZ@4HA
  014a1	e8 00 00 00 00	 call	 _Init_thread_footer
$LN86@ShowDemoWi:

; 4168 :         static bool show_widget_frame_bg = true;
; 4169 : 
; 4170 :         PushStyleCompact();

  014a6	e8 00 00 00 00	 call	 ?PushStyleCompact@@YAXXZ ; PushStyleCompact

; 4171 :         ImGui::CheckboxFlags("ImGuiTableFlags_Borders", &flags2, ImGuiTableFlags_Borders);

  014ab	41 b8 80 07 00
	00		 mov	 r8d, 1920		; 00000780H
  014b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags2@?JH@??ShowDemoWindowTables@@YAXXZ@4HA
  014b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@KLDEGJMI@ImGuiTableFlags_Borders?$AA@
  014bf	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4172 :         ImGui::CheckboxFlags("ImGuiTableFlags_BordersH", &flags2, ImGuiTableFlags_BordersH);

  014c4	41 b8 80 01 00
	00		 mov	 r8d, 384		; 00000180H
  014ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags2@?JH@??ShowDemoWindowTables@@YAXXZ@4HA
  014d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@KNLELLOG@ImGuiTableFlags_BordersH?$AA@
  014d8	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4173 :         ImGui::CheckboxFlags("ImGuiTableFlags_BordersV", &flags2, ImGuiTableFlags_BordersV);

  014dd	41 b8 00 06 00
	00		 mov	 r8d, 1536		; 00000600H
  014e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags2@?JH@??ShowDemoWindowTables@@YAXXZ@4HA
  014ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@HJPFIEDJ@ImGuiTableFlags_BordersV?$AA@
  014f1	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4174 :         ImGui::CheckboxFlags("ImGuiTableFlags_BordersInner", &flags2, ImGuiTableFlags_BordersInner);

  014f6	41 b8 80 02 00
	00		 mov	 r8d, 640		; 00000280H
  014fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags2@?JH@??ShowDemoWindowTables@@YAXXZ@4HA
  01503	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@HHGDDDPK@ImGuiTableFlags_BordersInner?$AA@
  0150a	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4175 :         ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuter", &flags2, ImGuiTableFlags_BordersOuter);

  0150f	41 b8 00 05 00
	00		 mov	 r8d, 1280		; 00000500H
  01515	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags2@?JH@??ShowDemoWindowTables@@YAXXZ@4HA
  0151c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@IJKOMBIP@ImGuiTableFlags_BordersOuter?$AA@
  01523	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4176 :         ImGui::CheckboxFlags("ImGuiTableFlags_RowBg", &flags2, ImGuiTableFlags_RowBg);

  01528	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0152e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags2@?JH@??ShowDemoWindowTables@@YAXXZ@4HA
  01535	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@FNKJINH@ImGuiTableFlags_RowBg?$AA@
  0153c	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4177 :         ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags2, ImGuiTableFlags_Resizable);

  01541	41 b8 01 00 00
	00		 mov	 r8d, 1
  01547	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags2@?JH@??ShowDemoWindowTables@@YAXXZ@4HA
  0154e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@EMJCIFOG@ImGuiTableFlags_Resizable?$AA@
  01555	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4178 :         ImGui::Checkbox("show_widget_frame_bg", &show_widget_frame_bg);

  0155a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?show_widget_frame_bg@?JH@??ShowDemoWindowTables@@YAXXZ@4_NA
  01561	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@GOPEKLPG@show_widget_frame_bg?$AA@
  01568	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 4179 :         ImGui::SliderFloat2("CellPadding", &cell_padding.x, 0.0f, 10.0f, "%.0f");

  0156d	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  01575	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  0157c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01581	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41200000
  01589	0f 57 d2	 xorps	 xmm2, xmm2
  0158c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?cell_padding@?JH@??ShowDemoWindowTables@@YAXXZ@4UImVec2@@A
  01593	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DKDDHLDB@CellPadding?$AA@
  0159a	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z ; ImGui::SliderFloat2

; 4180 :         PopStyleCompact();

  0159f	e8 00 00 00 00	 call	 ?PopStyleCompact@@YAXXZ	; PopStyleCompact

; 4181 : 
; 4182 :         ImGui::PushStyleVar(ImGuiStyleVar_CellPadding, cell_padding);

  015a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?cell_padding@?JH@??ShowDemoWindowTables@@YAXXZ@4UImVec2@@A
  015ab	b9 11 00 00 00	 mov	 ecx, 17
  015b0	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z ; ImGui::PushStyleVar

; 4183 :         if (ImGui::BeginTable("table_padding_2", 3, flags2))

  015b5	0f 57 d2	 xorps	 xmm2, xmm2
  015b8	0f 57 c9	 xorps	 xmm1, xmm1
  015bb	48 8d 8d e4 17
	00 00		 lea	 rcx, QWORD PTR $T149[rbp]
  015c2	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  015c7	0f 57 c0	 xorps	 xmm0, xmm0
  015ca	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  015d0	4c 8b c8	 mov	 r9, rax
  015d3	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags2@?JH@??ShowDemoWindowTables@@YAXXZ@4HA
  015da	ba 03 00 00 00	 mov	 edx, 3
  015df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@PCAKHMNE@table_padding_2?$AA@
  015e6	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  015eb	0f b6 c0	 movzx	 eax, al
  015ee	85 c0		 test	 eax, eax
  015f0	0f 84 fa 00 00
	00		 je	 $LN320@ShowDemoWi

; 4184 :         {
; 4185 :             static char text_bufs[3 * 5][16]; // Mini text storage for 3x5 cells
; 4186 :             static bool init = true;
; 4187 :             if (!show_widget_frame_bg)

  015f6	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_widget_frame_bg@?JH@??ShowDemoWindowTables@@YAXXZ@4_NA
  015fd	85 c0		 test	 eax, eax
  015ff	75 0c		 jne	 SHORT $LN321@ShowDemoWi

; 4188 :                 ImGui::PushStyleColor(ImGuiCol_FrameBg, 0);

  01601	33 d2		 xor	 edx, edx
  01603	b9 07 00 00 00	 mov	 ecx, 7
  01608	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHI@Z ; ImGui::PushStyleColor
$LN321@ShowDemoWi:

; 4189 :             for (int cell = 0; cell < 3 * 5; cell++)

  0160d	c7 85 64 03 00
	00 00 00 00 00	 mov	 DWORD PTR cell$42[rbp], 0
  01617	eb 0e		 jmp	 SHORT $LN89@ShowDemoWi
$LN87@ShowDemoWi:
  01619	8b 85 64 03 00
	00		 mov	 eax, DWORD PTR cell$42[rbp]
  0161f	ff c0		 inc	 eax
  01621	89 85 64 03 00
	00		 mov	 DWORD PTR cell$42[rbp], eax
$LN89@ShowDemoWi:
  01627	83 bd 64 03 00
	00 0f		 cmp	 DWORD PTR cell$42[rbp], 15
  0162e	0f 8d 9b 00 00
	00		 jge	 $LN88@ShowDemoWi

; 4190 :             {
; 4191 :                 ImGui::TableNextColumn();

  01634	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 4192 :                 if (init)

  01639	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?init@?KJ@??ShowDemoWindowTables@@YAXXZ@4_NA
  01640	85 c0		 test	 eax, eax
  01642	74 27		 je	 SHORT $LN322@ShowDemoWi

; 4193 :                     strcpy(text_bufs[cell], "edit me");

  01644	48 63 85 64 03
	00 00		 movsxd	 rax, DWORD PTR cell$42[rbp]
  0164b	48 6b c0 10	 imul	 rax, rax, 16
  0164f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?text_bufs@?KJ@??ShowDemoWindowTables@@YAXXZ@4PAY0BA@DA
  01656	48 03 c8	 add	 rcx, rax
  01659	48 8b c1	 mov	 rax, rcx
  0165c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07KGDBJGIN@edit?5me?$AA@
  01663	48 8b c8	 mov	 rcx, rax
  01666	e8 00 00 00 00	 call	 strcpy
$LN322@ShowDemoWi:

; 4194 :                 ImGui::SetNextItemWidth(-FLT_MIN);

  0166b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80800000
  01673	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth

; 4195 :                 ImGui::PushID(cell);

  01678	8b 8d 64 03 00
	00		 mov	 ecx, DWORD PTR cell$42[rbp]
  0167e	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 4196 :                 ImGui::InputText("##cell", text_bufs[cell], IM_ARRAYSIZE(text_bufs[cell]));

  01683	48 63 85 64 03
	00 00		 movsxd	 rax, DWORD PTR cell$42[rbp]
  0168a	48 6b c0 10	 imul	 rax, rax, 16
  0168e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?text_bufs@?KJ@??ShowDemoWindowTables@@YAXXZ@4PAY0BA@DA
  01695	48 03 c8	 add	 rcx, rax
  01698	48 8b c1	 mov	 rax, rcx
  0169b	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  016a4	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  016ad	45 33 c9	 xor	 r9d, r9d
  016b0	41 b8 10 00 00
	00		 mov	 r8d, 16
  016b6	48 8b d0	 mov	 rdx, rax
  016b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06EHBBGIFL@?$CD?$CDcell?$AA@
  016c0	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 4197 :                 ImGui::PopID();

  016c5	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 4198 :             }

  016ca	e9 4a ff ff ff	 jmp	 $LN87@ShowDemoWi
$LN88@ShowDemoWi:

; 4199 :             if (!show_widget_frame_bg)

  016cf	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_widget_frame_bg@?JH@??ShowDemoWindowTables@@YAXXZ@4_NA
  016d6	85 c0		 test	 eax, eax
  016d8	75 0a		 jne	 SHORT $LN323@ShowDemoWi

; 4200 :                 ImGui::PopStyleColor();

  016da	b9 01 00 00 00	 mov	 ecx, 1
  016df	e8 00 00 00 00	 call	 ?PopStyleColor@ImGui@@YAXH@Z ; ImGui::PopStyleColor
$LN323@ShowDemoWi:

; 4201 :             init = false;

  016e4	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?init@?KJ@??ShowDemoWindowTables@@YAXXZ@4_NA, 0

; 4202 :             ImGui::EndTable();

  016eb	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN320@ShowDemoWi:

; 4203 :         }
; 4204 :         ImGui::PopStyleVar();

  016f0	b9 01 00 00 00	 mov	 ecx, 1
  016f5	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar

; 4205 : 
; 4206 :         ImGui::TreePop();

  016fa	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN315@ShowDemoWi:

; 4207 :     }
; 4208 : 
; 4209 :     if (open_action != -1)

  016ff	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  01703	74 24		 je	 SHORT $LN92@ShowDemoWi

; 4210 :         ImGui::SetNextItemOpen(open_action != 0);

  01705	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  01709	74 09		 je	 SHORT $LN486@ShowDemoWi
  0170b	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv952[rbp], 1
  01712	eb 07		 jmp	 SHORT $LN487@ShowDemoWi
$LN486@ShowDemoWi:
  01714	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv952[rbp], 0
$LN487@ShowDemoWi:
  0171b	33 d2		 xor	 edx, edx
  0171d	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv952[rbp]
  01724	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN92@ShowDemoWi:

; 4211 :     IMGUI_DEMO_MARKER("Tables/Explicit widths");

  01729	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  01731	74 28		 je	 SHORT $LN325@ShowDemoWi
  01733	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  01739	05 c8 01 00 00	 add	 eax, 456		; 000001c8H
  0173e	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  01745	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@BDILLJNP@Tables?1Explicit?5widths?$AA@
  0174c	8b d0		 mov	 edx, eax
  0174e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  01755	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN325@ShowDemoWi:
  0175b	33 c0		 xor	 eax, eax
  0175d	85 c0		 test	 eax, eax
  0175f	75 c8		 jne	 SHORT $LN92@ShowDemoWi

; 4212 :     if (ImGui::TreeNode("Sizing policies"))

  01761	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@MIEBIDIO@Sizing?5policies?$AA@
  01768	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  0176d	0f b6 c0	 movzx	 eax, al
  01770	85 c0		 test	 eax, eax
  01772	0f 84 bb 05 00
	00		 je	 $LN326@ShowDemoWi

; 4213 :     {
; 4214 :         static ImGuiTableFlags flags1 = ImGuiTableFlags_BordersV | ImGuiTableFlags_BordersOuterH | ImGuiTableFlags_RowBg | ImGuiTableFlags_ContextMenuInBody;
; 4215 :         PushStyleCompact();

  01778	e8 00 00 00 00	 call	 ?PushStyleCompact@@YAXXZ ; PushStyleCompact

; 4216 :         ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags1, ImGuiTableFlags_Resizable);

  0177d	41 b8 01 00 00
	00		 mov	 r8d, 1
  01783	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags1@?LK@??ShowDemoWindowTables@@YAXXZ@4HA
  0178a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@EMJCIFOG@ImGuiTableFlags_Resizable?$AA@
  01791	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4217 :         ImGui::CheckboxFlags("ImGuiTableFlags_NoHostExtendX", &flags1, ImGuiTableFlags_NoHostExtendX);

  01796	41 b8 00 00 01
	00		 mov	 r8d, 65536		; 00010000H
  0179c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags1@?LK@??ShowDemoWindowTables@@YAXXZ@4HA
  017a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@NGJMFDHH@ImGuiTableFlags_NoHostExtendX?$AA@
  017aa	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4218 :         PopStyleCompact();

  017af	e8 00 00 00 00	 call	 ?PopStyleCompact@@YAXXZ	; PopStyleCompact

; 4219 : 
; 4220 :         static ImGuiTableFlags sizing_policy_flags[4] = { ImGuiTableFlags_SizingFixedFit, ImGuiTableFlags_SizingFixedSame, ImGuiTableFlags_SizingStretchProp, ImGuiTableFlags_SizingStretchSame };
; 4221 :         for (int table_n = 0; table_n < 4; table_n++)

  017b4	c7 85 84 03 00
	00 00 00 00 00	 mov	 DWORD PTR table_n$43[rbp], 0
  017be	eb 0e		 jmp	 SHORT $LN95@ShowDemoWi
$LN93@ShowDemoWi:
  017c0	8b 85 84 03 00
	00		 mov	 eax, DWORD PTR table_n$43[rbp]
  017c6	ff c0		 inc	 eax
  017c8	89 85 84 03 00
	00		 mov	 DWORD PTR table_n$43[rbp], eax
$LN95@ShowDemoWi:
  017ce	83 bd 84 03 00
	00 04		 cmp	 DWORD PTR table_n$43[rbp], 4
  017d5	0f 8d b7 01 00
	00		 jge	 $LN94@ShowDemoWi

; 4222 :         {
; 4223 :             ImGui::PushID(table_n);

  017db	8b 8d 84 03 00
	00		 mov	 ecx, DWORD PTR table_n$43[rbp]
  017e1	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 4224 :             ImGui::SetNextItemWidth(TEXT_BASE_WIDTH * 30);

  017e6	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR TEXT_BASE_WIDTH$[rbp]
  017eb	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41f00000
  017f3	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth

; 4225 :             EditTableSizingFlags(&sizing_policy_flags[table_n]);

  017f8	48 63 85 84 03
	00 00		 movsxd	 rax, DWORD PTR table_n$43[rbp]
  017ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?sizing_policy_flags@?LK@??ShowDemoWindowTables@@YAXXZ@4PAHA
  01806	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0180a	48 8b c8	 mov	 rcx, rax
  0180d	e8 00 00 00 00	 call	 ?EditTableSizingFlags@@YAXPEAH@Z ; EditTableSizingFlags

; 4226 : 
; 4227 :             // To make it easier to understand the different sizing policy,
; 4228 :             // For each policy: we display one table where the columns have equal contents width, and one where the columns have different contents width.
; 4229 :             if (ImGui::BeginTable("table1", 3, sizing_policy_flags[table_n] | flags1))

  01812	0f 57 d2	 xorps	 xmm2, xmm2
  01815	0f 57 c9	 xorps	 xmm1, xmm1
  01818	48 8d 8d 04 18
	00 00		 lea	 rcx, QWORD PTR $T150[rbp]
  0181f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01824	48 63 8d 84 03
	00 00		 movsxd	 rcx, DWORD PTR table_n$43[rbp]
  0182b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?sizing_policy_flags@?LK@??ShowDemoWindowTables@@YAXXZ@4PAHA
  01832	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags1@?LK@??ShowDemoWindowTables@@YAXXZ@4HA
  01839	8b 0c 8a	 mov	 ecx, DWORD PTR [rdx+rcx*4]
  0183c	41 0b c8	 or	 ecx, r8d
  0183f	0f 57 c0	 xorps	 xmm0, xmm0
  01842	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01848	4c 8b c8	 mov	 r9, rax
  0184b	44 8b c1	 mov	 r8d, ecx
  0184e	ba 03 00 00 00	 mov	 edx, 3
  01853	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KDFPGKKJ@table1?$AA@
  0185a	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  0185f	0f b6 c0	 movzx	 eax, al
  01862	85 c0		 test	 eax, eax
  01864	74 67		 je	 SHORT $LN327@ShowDemoWi

; 4230 :             {
; 4231 :                 for (int row = 0; row < 3; row++)

  01866	c7 85 a4 03 00
	00 00 00 00 00	 mov	 DWORD PTR row$44[rbp], 0
  01870	eb 0e		 jmp	 SHORT $LN98@ShowDemoWi
$LN96@ShowDemoWi:
  01872	8b 85 a4 03 00
	00		 mov	 eax, DWORD PTR row$44[rbp]
  01878	ff c0		 inc	 eax
  0187a	89 85 a4 03 00
	00		 mov	 DWORD PTR row$44[rbp], eax
$LN98@ShowDemoWi:
  01880	83 bd a4 03 00
	00 03		 cmp	 DWORD PTR row$44[rbp], 3
  01887	7d 3f		 jge	 SHORT $LN97@ShowDemoWi

; 4232 :                 {
; 4233 :                     ImGui::TableNextRow();

  01889	0f 57 c9	 xorps	 xmm1, xmm1
  0188c	33 c9		 xor	 ecx, ecx
  0188e	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4234 :                     ImGui::TableNextColumn(); ImGui::Text("Oh dear");

  01893	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  01898	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07OBMDJLLM@Oh?5dear?$AA@
  0189f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4235 :                     ImGui::TableNextColumn(); ImGui::Text("Oh dear");

  018a4	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  018a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07OBMDJLLM@Oh?5dear?$AA@
  018b0	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4236 :                     ImGui::TableNextColumn(); ImGui::Text("Oh dear");

  018b5	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  018ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07OBMDJLLM@Oh?5dear?$AA@
  018c1	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4237 :                 }

  018c6	eb aa		 jmp	 SHORT $LN96@ShowDemoWi
$LN97@ShowDemoWi:

; 4238 :                 ImGui::EndTable();

  018c8	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN327@ShowDemoWi:

; 4239 :             }
; 4240 :             if (ImGui::BeginTable("table2", 3, sizing_policy_flags[table_n] | flags1))

  018cd	0f 57 d2	 xorps	 xmm2, xmm2
  018d0	0f 57 c9	 xorps	 xmm1, xmm1
  018d3	48 8d 8d 24 18
	00 00		 lea	 rcx, QWORD PTR $T151[rbp]
  018da	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  018df	48 63 8d 84 03
	00 00		 movsxd	 rcx, DWORD PTR table_n$43[rbp]
  018e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?sizing_policy_flags@?LK@??ShowDemoWindowTables@@YAXXZ@4PAHA
  018ed	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags1@?LK@??ShowDemoWindowTables@@YAXXZ@4HA
  018f4	8b 0c 8a	 mov	 ecx, DWORD PTR [rdx+rcx*4]
  018f7	41 0b c8	 or	 ecx, r8d
  018fa	0f 57 c0	 xorps	 xmm0, xmm0
  018fd	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01903	4c 8b c8	 mov	 r9, rax
  01906	44 8b c1	 mov	 r8d, ecx
  01909	ba 03 00 00 00	 mov	 edx, 3
  0190e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IIHCDJGK@table2?$AA@
  01915	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  0191a	0f b6 c0	 movzx	 eax, al
  0191d	85 c0		 test	 eax, eax
  0191f	74 67		 je	 SHORT $LN328@ShowDemoWi

; 4241 :             {
; 4242 :                 for (int row = 0; row < 3; row++)

  01921	c7 85 c4 03 00
	00 00 00 00 00	 mov	 DWORD PTR row$45[rbp], 0
  0192b	eb 0e		 jmp	 SHORT $LN101@ShowDemoWi
$LN99@ShowDemoWi:
  0192d	8b 85 c4 03 00
	00		 mov	 eax, DWORD PTR row$45[rbp]
  01933	ff c0		 inc	 eax
  01935	89 85 c4 03 00
	00		 mov	 DWORD PTR row$45[rbp], eax
$LN101@ShowDemoWi:
  0193b	83 bd c4 03 00
	00 03		 cmp	 DWORD PTR row$45[rbp], 3
  01942	7d 3f		 jge	 SHORT $LN100@ShowDemoWi

; 4243 :                 {
; 4244 :                     ImGui::TableNextRow();

  01944	0f 57 c9	 xorps	 xmm1, xmm1
  01947	33 c9		 xor	 ecx, ecx
  01949	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4245 :                     ImGui::TableNextColumn(); ImGui::Text("AAAA");

  0194e	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  01953	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04OHNMNPPA@AAAA?$AA@
  0195a	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4246 :                     ImGui::TableNextColumn(); ImGui::Text("BBBBBBBB");

  0195f	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  01964	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08LBFBCFMB@BBBBBBBB?$AA@
  0196b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4247 :                     ImGui::TableNextColumn(); ImGui::Text("CCCCCCCCCCCC");

  01970	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  01975	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@OEOPFKK@CCCCCCCCCCCC?$AA@
  0197c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4248 :                 }

  01981	eb aa		 jmp	 SHORT $LN99@ShowDemoWi
$LN100@ShowDemoWi:

; 4249 :                 ImGui::EndTable();

  01983	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN328@ShowDemoWi:

; 4250 :             }
; 4251 :             ImGui::PopID();

  01988	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 4252 :         }

  0198d	e9 2e fe ff ff	 jmp	 $LN93@ShowDemoWi
$LN94@ShowDemoWi:

; 4253 : 
; 4254 :         ImGui::Spacing();

  01992	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 4255 :         ImGui::TextUnformatted("Advanced");

  01997	33 d2		 xor	 edx, edx
  01999	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08IILCFNBD@Advanced?$AA@
  019a0	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted

; 4256 :         ImGui::SameLine();

  019a5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  019ad	0f 57 c0	 xorps	 xmm0, xmm0
  019b0	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 4257 :         HelpMarker("This section allows you to interact and see the effect of various sizing policies depending on whether Scroll is enabled and the contents of your columns.");

  019b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0JL@GIMGKJDP@This?5section?5allows?5you?5to?5inter@
  019bc	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4258 : 
; 4259 :         enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, CT_InputText };
; 4260 :         static ImGuiTableFlags flags = ImGuiTableFlags_ScrollY | ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg | ImGuiTableFlags_Resizable;
; 4261 :         static int contents_type = CT_ShowWidth;
; 4262 :         static int column_count = 3;
; 4263 : 
; 4264 :         PushStyleCompact();

  019c1	e8 00 00 00 00	 call	 ?PushStyleCompact@@YAXXZ ; PushStyleCompact

; 4265 :         ImGui::PushID("Advanced");

  019c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08IILCFNBD@Advanced?$AA@
  019cd	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPEBD@Z ; ImGui::PushID

; 4266 :         ImGui::PushItemWidth(TEXT_BASE_WIDTH * 30);

  019d2	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR TEXT_BASE_WIDTH$[rbp]
  019d7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41f00000
  019df	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth

; 4267 :         EditTableSizingFlags(&flags);

  019e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?flags@?LK@??ShowDemoWindowTables@@YAXXZ@4HA
  019eb	e8 00 00 00 00	 call	 ?EditTableSizingFlags@@YAXPEAH@Z ; EditTableSizingFlags

; 4268 :         ImGui::Combo("Contents", &contents_type, "Show width\0Short Text\0Long Text\0Button\0Fill Button\0InputText\0");

  019f0	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  019f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DO@GJMCID@Show?5width?$AAShort?5Text?$AALong?5Text?$AA@
  019fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?contents_type@?LK@??ShowDemoWindowTables@@YAXXZ@4HA
  01a04	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08GBNJIMFP@Contents?$AA@
  01a0b	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAH0H@Z ; ImGui::Combo

; 4269 :         if (contents_type == CT_FillButton)

  01a10	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?contents_type@?LK@??ShowDemoWindowTables@@YAXXZ@4HA, 4
  01a17	75 1c		 jne	 SHORT $LN329@ShowDemoWi

; 4270 :         {
; 4271 :             ImGui::SameLine();

  01a19	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01a21	0f 57 c0	 xorps	 xmm0, xmm0
  01a24	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 4272 :             HelpMarker("Be mindful that using right-alignment (e.g. size.x = -FLT_MIN) creates a feedback loop where contents width can feed into auto-column width can feed into contents width.");

  01a29	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0KK@ONILBNCL@Be?5mindful?5that?5using?5right?9alig@
  01a30	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker
$LN329@ShowDemoWi:

; 4273 :         }
; 4274 :         ImGui::DragInt("Columns", &column_count, 0.1f, 1, 64, "%d", ImGuiSliderFlags_AlwaysClamp);

  01a35	c7 44 24 30 10
	00 00 00	 mov	 DWORD PTR [rsp+48], 16
  01a3d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  01a44	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  01a49	c7 44 24 20 40
	00 00 00	 mov	 DWORD PTR [rsp+32], 64	; 00000040H
  01a51	41 b9 01 00 00
	00		 mov	 r9d, 1
  01a57	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3dcccccd
  01a5f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?column_count@?LK@??ShowDemoWindowTables@@YAXXZ@4HA
  01a66	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07IBCCJKML@Columns?$AA@
  01a6d	e8 00 00 00 00	 call	 ?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z ; ImGui::DragInt

; 4275 :         ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags, ImGuiTableFlags_Resizable);

  01a72	41 b8 01 00 00
	00		 mov	 r8d, 1
  01a78	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?LK@??ShowDemoWindowTables@@YAXXZ@4HA
  01a7f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@EMJCIFOG@ImGuiTableFlags_Resizable?$AA@
  01a86	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4276 :         ImGui::CheckboxFlags("ImGuiTableFlags_PreciseWidths", &flags, ImGuiTableFlags_PreciseWidths);

  01a8b	41 b8 00 00 08
	00		 mov	 r8d, 524288		; 00080000H
  01a91	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?LK@??ShowDemoWindowTables@@YAXXZ@4HA
  01a98	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@FCJCGICG@ImGuiTableFlags_PreciseWidths?$AA@
  01a9f	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4277 :         ImGui::SameLine(); HelpMarker("Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth.");

  01aa4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01aac	0f 57 c0	 xorps	 xmm0, xmm0
  01aaf	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01ab4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0OP@KCFDFCBF@Disable?5distributing?5remainder?5w@
  01abb	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4278 :         ImGui::CheckboxFlags("ImGuiTableFlags_ScrollX", &flags, ImGuiTableFlags_ScrollX);

  01ac0	41 b8 00 00 00
	01		 mov	 r8d, 16777216		; 01000000H
  01ac6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?LK@??ShowDemoWindowTables@@YAXXZ@4HA
  01acd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LGJFDPIB@ImGuiTableFlags_ScrollX?$AA@
  01ad4	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4279 :         ImGui::CheckboxFlags("ImGuiTableFlags_ScrollY", &flags, ImGuiTableFlags_ScrollY);

  01ad9	41 b8 00 00 00
	02		 mov	 r8d, 33554432		; 02000000H
  01adf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?LK@??ShowDemoWindowTables@@YAXXZ@4HA
  01ae6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@KPIOAOMA@ImGuiTableFlags_ScrollY?$AA@
  01aed	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4280 :         ImGui::CheckboxFlags("ImGuiTableFlags_NoClip", &flags, ImGuiTableFlags_NoClip);

  01af2	41 b8 00 00 10
	00		 mov	 r8d, 1048576		; 00100000H
  01af8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?LK@??ShowDemoWindowTables@@YAXXZ@4HA
  01aff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@IJCBPJOC@ImGuiTableFlags_NoClip?$AA@
  01b06	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4281 :         ImGui::PopItemWidth();

  01b0b	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 4282 :         ImGui::PopID();

  01b10	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 4283 :         PopStyleCompact();

  01b15	e8 00 00 00 00	 call	 ?PopStyleCompact@@YAXXZ	; PopStyleCompact

; 4284 : 
; 4285 :         if (ImGui::BeginTable("table2", column_count, flags, ImVec2(0.0f, TEXT_BASE_HEIGHT * 7)))

  01b1a	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR TEXT_BASE_HEIGHT$[rbp]
  01b1f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40e00000
  01b27	0f 28 d0	 movaps	 xmm2, xmm0
  01b2a	0f 57 c9	 xorps	 xmm1, xmm1
  01b2d	48 8d 8d 44 18
	00 00		 lea	 rcx, QWORD PTR $T152[rbp]
  01b34	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01b39	0f 57 c0	 xorps	 xmm0, xmm0
  01b3c	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01b42	4c 8b c8	 mov	 r9, rax
  01b45	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags@?LK@??ShowDemoWindowTables@@YAXXZ@4HA
  01b4c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?column_count@?LK@??ShowDemoWindowTables@@YAXXZ@4HA
  01b52	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IIHCDJGK@table2?$AA@
  01b59	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  01b5e	0f b6 c0	 movzx	 eax, al
  01b61	85 c0		 test	 eax, eax
  01b63	0f 84 c5 01 00
	00		 je	 $LN330@ShowDemoWi

; 4286 :         {
; 4287 :             for (int cell = 0; cell < 10 * column_count; cell++)

  01b69	c7 85 e4 03 00
	00 00 00 00 00	 mov	 DWORD PTR cell$46[rbp], 0
  01b73	eb 0e		 jmp	 SHORT $LN104@ShowDemoWi
$LN102@ShowDemoWi:
  01b75	8b 85 e4 03 00
	00		 mov	 eax, DWORD PTR cell$46[rbp]
  01b7b	ff c0		 inc	 eax
  01b7d	89 85 e4 03 00
	00		 mov	 DWORD PTR cell$46[rbp], eax
$LN104@ShowDemoWi:
  01b83	6b 05 00 00 00
	00 0a		 imul	 eax, DWORD PTR ?column_count@?LK@??ShowDemoWindowTables@@YAXXZ@4HA, 10
  01b8a	39 85 e4 03 00
	00		 cmp	 DWORD PTR cell$46[rbp], eax
  01b90	0f 8d 93 01 00
	00		 jge	 $LN103@ShowDemoWi

; 4288 :             {
; 4289 :                 ImGui::TableNextColumn();

  01b96	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 4290 :                 int column = ImGui::TableGetColumnIndex();

  01b9b	e8 00 00 00 00	 call	 ?TableGetColumnIndex@ImGui@@YAHXZ ; ImGui::TableGetColumnIndex
  01ba0	89 85 04 04 00
	00		 mov	 DWORD PTR column$47[rbp], eax

; 4291 :                 int row = ImGui::TableGetRowIndex();

  01ba6	e8 00 00 00 00	 call	 ?TableGetRowIndex@ImGui@@YAHXZ ; ImGui::TableGetRowIndex
  01bab	89 85 24 04 00
	00		 mov	 DWORD PTR row$48[rbp], eax

; 4292 : 
; 4293 :                 ImGui::PushID(cell);

  01bb1	8b 8d e4 03 00
	00		 mov	 ecx, DWORD PTR cell$46[rbp]
  01bb7	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 4294 :                 char label[32];
; 4295 :                 static char text_buf[32] = "";
; 4296 :                 sprintf(label, "Hello %d,%d", column, row);

  01bbc	44 8b 8d 24 04
	00 00		 mov	 r9d, DWORD PTR row$48[rbp]
  01bc3	44 8b 85 04 04
	00 00		 mov	 r8d, DWORD PTR column$47[rbp]
  01bca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@MKBMKAAH@Hello?5?$CFd?0?$CFd?$AA@
  01bd1	48 8d 8d 48 04
	00 00		 lea	 rcx, QWORD PTR label$49[rbp]
  01bd8	e8 00 00 00 00	 call	 sprintf

; 4297 :                 switch (contents_type)

  01bdd	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?contents_type@?LK@??ShowDemoWindowTables@@YAXXZ@4HA
  01be3	89 85 c4 1d 00
	00		 mov	 DWORD PTR tv1119[rbp], eax
  01be9	83 bd c4 1d 00
	00 05		 cmp	 DWORD PTR tv1119[rbp], 5
  01bf0	0f 87 29 01 00
	00		 ja	 $LN105@ShowDemoWi
  01bf6	48 63 85 c4 1d
	00 00		 movsxd	 rax, DWORD PTR tv1119[rbp]
  01bfd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  01c04	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN554@ShowDemoWi[rcx+rax*4]
  01c0b	48 03 c1	 add	 rax, rcx
  01c0e	ff e0		 jmp	 rax
$LN331@ShowDemoWi:

; 4298 :                 {
; 4299 :                 case CT_ShortText:  ImGui::TextUnformatted(label); break;

  01c10	33 d2		 xor	 edx, edx
  01c12	48 8d 8d 48 04
	00 00		 lea	 rcx, QWORD PTR label$49[rbp]
  01c19	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted
  01c1e	e9 fc 00 00 00	 jmp	 $LN105@ShowDemoWi
$LN332@ShowDemoWi:

; 4300 :                 case CT_LongText:   ImGui::Text("Some %s text %d,%d\nOver two lines..", column == 0 ? "long" : "longeeer", column, row); break;

  01c23	83 bd 04 04 00
	00 00		 cmp	 DWORD PTR column$47[rbp], 0
  01c2a	75 10		 jne	 SHORT $LN488@ShowDemoWi
  01c2c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GOKPGOLB@long?$AA@
  01c33	48 89 85 c8 1d
	00 00		 mov	 QWORD PTR tv1129[rbp], rax
  01c3a	eb 0e		 jmp	 SHORT $LN489@ShowDemoWi
$LN488@ShowDemoWi:
  01c3c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08GKCNMOBP@longeeer?$AA@
  01c43	48 89 85 c8 1d
	00 00		 mov	 QWORD PTR tv1129[rbp], rax
$LN489@ShowDemoWi:
  01c4a	44 8b 8d 24 04
	00 00		 mov	 r9d, DWORD PTR row$48[rbp]
  01c51	44 8b 85 04 04
	00 00		 mov	 r8d, DWORD PTR column$47[rbp]
  01c58	48 8b 95 c8 1d
	00 00		 mov	 rdx, QWORD PTR tv1129[rbp]
  01c5f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@EHNPIEAF@Some?5?$CFs?5text?5?$CFd?0?$CFd?6Over?5two?5line@
  01c66	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  01c6b	e9 af 00 00 00	 jmp	 $LN105@ShowDemoWi
$LN333@ShowDemoWi:

; 4301 :                 case CT_ShowWidth:  ImGui::Text("W: %.1f", ImGui::GetContentRegionAvail().x); break;

  01c70	48 8d 8d 64 18
	00 00		 lea	 rcx, QWORD PTR $T153[rbp]
  01c77	e8 00 00 00 00	 call	 ?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
  01c7c	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [rax]
  01c80	0f 28 c8	 movaps	 xmm1, xmm0
  01c83	66 48 0f 7e ca	 movq	 rdx, xmm1
  01c88	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07JBEDBOJM@W?3?5?$CF?41f?$AA@
  01c8f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  01c94	e9 86 00 00 00	 jmp	 $LN105@ShowDemoWi
$LN334@ShowDemoWi:

; 4302 :                 case CT_Button:     ImGui::Button(label); break;

  01c99	0f 57 d2	 xorps	 xmm2, xmm2
  01c9c	0f 57 c9	 xorps	 xmm1, xmm1
  01c9f	48 8d 8d 84 18
	00 00		 lea	 rcx, QWORD PTR $T154[rbp]
  01ca6	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01cab	48 8b d0	 mov	 rdx, rax
  01cae	48 8d 8d 48 04
	00 00		 lea	 rcx, QWORD PTR label$49[rbp]
  01cb5	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  01cba	eb 63		 jmp	 SHORT $LN105@ShowDemoWi
$LN335@ShowDemoWi:

; 4303 :                 case CT_FillButton: ImGui::Button(label, ImVec2(-FLT_MIN, 0.0f)); break;

  01cbc	0f 57 d2	 xorps	 xmm2, xmm2
  01cbf	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@80800000
  01cc7	48 8d 8d a4 18
	00 00		 lea	 rcx, QWORD PTR $T155[rbp]
  01cce	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01cd3	48 8b d0	 mov	 rdx, rax
  01cd6	48 8d 8d 48 04
	00 00		 lea	 rcx, QWORD PTR label$49[rbp]
  01cdd	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  01ce2	eb 3b		 jmp	 SHORT $LN105@ShowDemoWi
$LN336@ShowDemoWi:

; 4304 :                 case CT_InputText:  ImGui::SetNextItemWidth(-FLT_MIN); ImGui::InputText("##", text_buf, IM_ARRAYSIZE(text_buf)); break;

  01ce4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80800000
  01cec	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth
  01cf1	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  01cfa	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  01d03	45 33 c9	 xor	 r9d, r9d
  01d06	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  01d0c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?text_buf@?MO@??ShowDemoWindowTables@@YAXXZ@4PADA
  01d13	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02IEBMKJDF@?$CD?$CD?$AA@
  01d1a	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText
$LN105@ShowDemoWi:

; 4305 :                 }
; 4306 :                 ImGui::PopID();

  01d1f	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 4307 :             }

  01d24	e9 4c fe ff ff	 jmp	 $LN102@ShowDemoWi
$LN103@ShowDemoWi:

; 4308 :             ImGui::EndTable();

  01d29	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN330@ShowDemoWi:

; 4309 :         }
; 4310 :         ImGui::TreePop();

  01d2e	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN326@ShowDemoWi:

; 4311 :     }
; 4312 : 
; 4313 :     if (open_action != -1)

  01d33	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  01d37	74 24		 je	 SHORT $LN109@ShowDemoWi

; 4314 :         ImGui::SetNextItemOpen(open_action != 0);

  01d39	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  01d3d	74 09		 je	 SHORT $LN490@ShowDemoWi
  01d3f	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv1161[rbp], 1
  01d46	eb 07		 jmp	 SHORT $LN491@ShowDemoWi
$LN490@ShowDemoWi:
  01d48	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv1161[rbp], 0
$LN491@ShowDemoWi:
  01d4f	33 d2		 xor	 edx, edx
  01d51	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv1161[rbp]
  01d58	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN109@ShowDemoWi:

; 4315 :     IMGUI_DEMO_MARKER("Tables/Vertical scrolling, with clipping");

  01d5d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  01d65	74 28		 je	 SHORT $LN338@ShowDemoWi
  01d67	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  01d6d	05 30 02 00 00	 add	 eax, 560		; 00000230H
  01d72	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  01d79	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CJ@GCIECJKE@Tables?1Vertical?5scrolling?0?5with?5@
  01d80	8b d0		 mov	 edx, eax
  01d82	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  01d89	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN338@ShowDemoWi:
  01d8f	33 c0		 xor	 eax, eax
  01d91	85 c0		 test	 eax, eax
  01d93	75 c8		 jne	 SHORT $LN109@ShowDemoWi

; 4316 :     if (ImGui::TreeNode("Vertical scrolling, with clipping"))

  01d95	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@BKCLIGGC@Vertical?5scrolling?0?5with?5clippin@
  01d9c	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  01da1	0f b6 c0	 movzx	 eax, al
  01da4	85 c0		 test	 eax, eax
  01da6	0f 84 a6 01 00
	00		 je	 $LN339@ShowDemoWi

; 4317 :     {
; 4318 :         HelpMarker("Here we activate ScrollY, which will create a child window container to allow hosting scrollable contents.\n\nWe also demonstrate using ImGuiListClipper to virtualize the submission of many items.");

  01dac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0MD@ODEEHCKN@Here?5we?5activate?5ScrollY?0?5which?5@
  01db3	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4319 :         static ImGuiTableFlags flags = ImGuiTableFlags_ScrollY | ImGuiTableFlags_RowBg | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV | ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable;
; 4320 : 
; 4321 :         PushStyleCompact();

  01db8	e8 00 00 00 00	 call	 ?PushStyleCompact@@YAXXZ ; PushStyleCompact

; 4322 :         ImGui::CheckboxFlags("ImGuiTableFlags_ScrollY", &flags, ImGuiTableFlags_ScrollY);

  01dbd	41 b8 00 00 00
	02		 mov	 r8d, 33554432		; 02000000H
  01dc3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?NJ@??ShowDemoWindowTables@@YAXXZ@4HA
  01dca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@KPIOAOMA@ImGuiTableFlags_ScrollY?$AA@
  01dd1	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4323 :         PopStyleCompact();

  01dd6	e8 00 00 00 00	 call	 ?PopStyleCompact@@YAXXZ	; PopStyleCompact

; 4324 : 
; 4325 :         // When using ScrollX or ScrollY we need to specify a size for our table container!
; 4326 :         // Otherwise by default the table will fit all available space, like a BeginChild() call.
; 4327 :         ImVec2 outer_size = ImVec2(0.0f, TEXT_BASE_HEIGHT * 8);

  01ddb	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR TEXT_BASE_HEIGHT$[rbp]
  01de0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41000000
  01de8	0f 28 d0	 movaps	 xmm2, xmm0
  01deb	0f 57 c9	 xorps	 xmm1, xmm1
  01dee	48 8d 8d 88 04
	00 00		 lea	 rcx, QWORD PTR outer_size$50[rbp]
  01df5	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 4328 :         if (ImGui::BeginTable("table_scrolly", 3, flags, outer_size))

  01dfa	0f 57 c0	 xorps	 xmm0, xmm0
  01dfd	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01e03	4c 8d 8d 88 04
	00 00		 lea	 r9, QWORD PTR outer_size$50[rbp]
  01e0a	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags@?NJ@??ShowDemoWindowTables@@YAXXZ@4HA
  01e11	ba 03 00 00 00	 mov	 edx, 3
  01e16	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@BKJDKFL@table_scrolly?$AA@
  01e1d	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  01e22	0f b6 c0	 movzx	 eax, al
  01e25	85 c0		 test	 eax, eax
  01e27	0f 84 20 01 00
	00		 je	 $LN340@ShowDemoWi

; 4329 :         {
; 4330 :             ImGui::TableSetupScrollFreeze(0, 1); // Make top row always visible

  01e2d	ba 01 00 00 00	 mov	 edx, 1
  01e32	33 c9		 xor	 ecx, ecx
  01e34	e8 00 00 00 00	 call	 ?TableSetupScrollFreeze@ImGui@@YAXHH@Z ; ImGui::TableSetupScrollFreeze

; 4331 :             ImGui::TableSetupColumn("One", ImGuiTableColumnFlags_None);

  01e39	45 33 c9	 xor	 r9d, r9d
  01e3c	0f 57 d2	 xorps	 xmm2, xmm2
  01e3f	33 d2		 xor	 edx, edx
  01e41	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03EHAPBBEA@One?$AA@
  01e48	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4332 :             ImGui::TableSetupColumn("Two", ImGuiTableColumnFlags_None);

  01e4d	45 33 c9	 xor	 r9d, r9d
  01e50	0f 57 d2	 xorps	 xmm2, xmm2
  01e53	33 d2		 xor	 edx, edx
  01e55	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CJAPLBKL@Two?$AA@
  01e5c	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4333 :             ImGui::TableSetupColumn("Three", ImGuiTableColumnFlags_None);

  01e61	45 33 c9	 xor	 r9d, r9d
  01e64	0f 57 d2	 xorps	 xmm2, xmm2
  01e67	33 d2		 xor	 edx, edx
  01e69	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OHMANGAP@Three?$AA@
  01e70	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4334 :             ImGui::TableHeadersRow();

  01e75	e8 00 00 00 00	 call	 ?TableHeadersRow@ImGui@@YAXXZ ; ImGui::TableHeadersRow

; 4335 : 
; 4336 :             // Demonstrate using clipper for large vertical lists
; 4337 :             ImGuiListClipper clipper;

  01e7a	48 8d 8d a8 04
	00 00		 lea	 rcx, QWORD PTR clipper$51[rbp]
  01e81	e8 00 00 00 00	 call	 ??0ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::ImGuiListClipper
  01e86	90		 npad	 1

; 4338 :             clipper.Begin(1000);

  01e87	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  01e8f	ba e8 03 00 00	 mov	 edx, 1000		; 000003e8H
  01e94	48 8d 8d a8 04
	00 00		 lea	 rcx, QWORD PTR clipper$51[rbp]
  01e9b	e8 00 00 00 00	 call	 ?Begin@ImGuiListClipper@@QEAAXHM@Z ; ImGuiListClipper::Begin
$LN110@ShowDemoWi:

; 4339 :             while (clipper.Step())

  01ea0	48 8d 8d a8 04
	00 00		 lea	 rcx, QWORD PTR clipper$51[rbp]
  01ea7	e8 00 00 00 00	 call	 ?Step@ImGuiListClipper@@QEAA_NXZ ; ImGuiListClipper::Step
  01eac	0f b6 c0	 movzx	 eax, al
  01eaf	85 c0		 test	 eax, eax
  01eb1	0f 84 84 00 00
	00		 je	 $LN111@ShowDemoWi

; 4340 :             {
; 4341 :                 for (int row = clipper.DisplayStart; row < clipper.DisplayEnd; row++)

  01eb7	8b 85 a8 04 00
	00		 mov	 eax, DWORD PTR clipper$51[rbp]
  01ebd	89 85 e4 04 00
	00		 mov	 DWORD PTR row$52[rbp], eax
  01ec3	eb 0e		 jmp	 SHORT $LN114@ShowDemoWi
$LN112@ShowDemoWi:
  01ec5	8b 85 e4 04 00
	00		 mov	 eax, DWORD PTR row$52[rbp]
  01ecb	ff c0		 inc	 eax
  01ecd	89 85 e4 04 00
	00		 mov	 DWORD PTR row$52[rbp], eax
$LN114@ShowDemoWi:
  01ed3	8b 85 ac 04 00
	00		 mov	 eax, DWORD PTR clipper$51[rbp+4]
  01ed9	39 85 e4 04 00
	00		 cmp	 DWORD PTR row$52[rbp], eax
  01edf	7d 55		 jge	 SHORT $LN113@ShowDemoWi

; 4342 :                 {
; 4343 :                     ImGui::TableNextRow();

  01ee1	0f 57 c9	 xorps	 xmm1, xmm1
  01ee4	33 c9		 xor	 ecx, ecx
  01ee6	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4344 :                     for (int column = 0; column < 3; column++)

  01eeb	c7 85 04 05 00
	00 00 00 00 00	 mov	 DWORD PTR column$53[rbp], 0
  01ef5	eb 0e		 jmp	 SHORT $LN117@ShowDemoWi
$LN115@ShowDemoWi:
  01ef7	8b 85 04 05 00
	00		 mov	 eax, DWORD PTR column$53[rbp]
  01efd	ff c0		 inc	 eax
  01eff	89 85 04 05 00
	00		 mov	 DWORD PTR column$53[rbp], eax
$LN117@ShowDemoWi:
  01f05	83 bd 04 05 00
	00 03		 cmp	 DWORD PTR column$53[rbp], 3
  01f0c	7d 26		 jge	 SHORT $LN116@ShowDemoWi

; 4345 :                     {
; 4346 :                         ImGui::TableSetColumnIndex(column);

  01f0e	8b 8d 04 05 00
	00		 mov	 ecx, DWORD PTR column$53[rbp]
  01f14	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4347 :                         ImGui::Text("Hello %d,%d", column, row);

  01f19	44 8b 85 e4 04
	00 00		 mov	 r8d, DWORD PTR row$52[rbp]
  01f20	8b 95 04 05 00
	00		 mov	 edx, DWORD PTR column$53[rbp]
  01f26	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MKBMKAAH@Hello?5?$CFd?0?$CFd?$AA@
  01f2d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4348 :                     }

  01f32	eb c3		 jmp	 SHORT $LN115@ShowDemoWi
$LN116@ShowDemoWi:

; 4349 :                 }

  01f34	eb 8f		 jmp	 SHORT $LN112@ShowDemoWi
$LN113@ShowDemoWi:

; 4350 :             }

  01f36	e9 65 ff ff ff	 jmp	 $LN110@ShowDemoWi
$LN111@ShowDemoWi:

; 4351 :             ImGui::EndTable();

  01f3b	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
  01f40	90		 npad	 1

; 4352 :         }

  01f41	48 8d 8d a8 04
	00 00		 lea	 rcx, QWORD PTR clipper$51[rbp]
  01f48	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::~ImGuiListClipper
$LN340@ShowDemoWi:

; 4353 :         ImGui::TreePop();

  01f4d	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN339@ShowDemoWi:

; 4354 :     }
; 4355 : 
; 4356 :     if (open_action != -1)

  01f52	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  01f56	74 24		 je	 SHORT $LN120@ShowDemoWi

; 4357 :         ImGui::SetNextItemOpen(open_action != 0);

  01f58	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  01f5c	74 09		 je	 SHORT $LN492@ShowDemoWi
  01f5e	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv1259[rbp], 1
  01f65	eb 07		 jmp	 SHORT $LN493@ShowDemoWi
$LN492@ShowDemoWi:
  01f67	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv1259[rbp], 0
$LN493@ShowDemoWi:
  01f6e	33 d2		 xor	 edx, edx
  01f70	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv1259[rbp]
  01f77	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN120@ShowDemoWi:

; 4358 :     IMGUI_DEMO_MARKER("Tables/Horizontal scrolling");

  01f7c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  01f84	74 28		 je	 SHORT $LN342@ShowDemoWi
  01f86	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  01f8c	05 5b 02 00 00	 add	 eax, 603		; 0000025bH
  01f91	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  01f98	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BM@FLMIBINL@Tables?1Horizontal?5scrolling?$AA@
  01f9f	8b d0		 mov	 edx, eax
  01fa1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  01fa8	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN342@ShowDemoWi:
  01fae	33 c0		 xor	 eax, eax
  01fb0	85 c0		 test	 eax, eax
  01fb2	75 c8		 jne	 SHORT $LN120@ShowDemoWi

; 4359 :     if (ImGui::TreeNode("Horizontal scrolling"))

  01fb4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@MOJGBNK@Horizontal?5scrolling?$AA@
  01fbb	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  01fc0	0f b6 c0	 movzx	 eax, al
  01fc3	85 c0		 test	 eax, eax
  01fc5	0f 84 d9 03 00
	00		 je	 $LN343@ShowDemoWi

; 4360 :     {
; 4361 :         HelpMarker(

  01fcb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJM@LFAMMBOC@When?5ScrollX?5is?5enabled?0?5the?5def@
  01fd2	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4362 :             "When ScrollX is enabled, the default sizing policy becomes ImGuiTableFlags_SizingFixedFit, "
; 4363 :             "as automatically stretching columns doesn't make much sense with horizontal scrolling.\n\n"
; 4364 :             "Also note that as of the current version, you will almost always want to enable ScrollY along with ScrollX,"
; 4365 :             "because the container window won't automatically extend vertically to fix contents (this may be improved in future versions).");
; 4366 :         static ImGuiTableFlags flags = ImGuiTableFlags_ScrollX | ImGuiTableFlags_ScrollY | ImGuiTableFlags_RowBg | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV | ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable;
; 4367 :         static int freeze_cols = 1;
; 4368 :         static int freeze_rows = 1;
; 4369 : 
; 4370 :         PushStyleCompact();

  01fd7	e8 00 00 00 00	 call	 ?PushStyleCompact@@YAXXZ ; PushStyleCompact

; 4371 :         ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags, ImGuiTableFlags_Resizable);

  01fdc	41 b8 01 00 00
	00		 mov	 r8d, 1
  01fe2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?OL@??ShowDemoWindowTables@@YAXXZ@4HA
  01fe9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@EMJCIFOG@ImGuiTableFlags_Resizable?$AA@
  01ff0	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4372 :         ImGui::CheckboxFlags("ImGuiTableFlags_ScrollX", &flags, ImGuiTableFlags_ScrollX);

  01ff5	41 b8 00 00 00
	01		 mov	 r8d, 16777216		; 01000000H
  01ffb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?OL@??ShowDemoWindowTables@@YAXXZ@4HA
  02002	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LGJFDPIB@ImGuiTableFlags_ScrollX?$AA@
  02009	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4373 :         ImGui::CheckboxFlags("ImGuiTableFlags_ScrollY", &flags, ImGuiTableFlags_ScrollY);

  0200e	41 b8 00 00 00
	02		 mov	 r8d, 33554432		; 02000000H
  02014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?OL@??ShowDemoWindowTables@@YAXXZ@4HA
  0201b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@KPIOAOMA@ImGuiTableFlags_ScrollY?$AA@
  02022	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4374 :         ImGui::SetNextItemWidth(ImGui::GetFrameHeight());

  02027	e8 00 00 00 00	 call	 ?GetFrameHeight@ImGui@@YAMXZ ; ImGui::GetFrameHeight
  0202c	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth

; 4375 :         ImGui::DragInt("freeze_cols", &freeze_cols, 0.2f, 0, 9, NULL, ImGuiSliderFlags_NoInput);

  02031	c7 44 24 30 80
	00 00 00	 mov	 DWORD PTR [rsp+48], 128	; 00000080H
  02039	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  02042	c7 44 24 20 09
	00 00 00	 mov	 DWORD PTR [rsp+32], 9
  0204a	45 33 c9	 xor	 r9d, r9d
  0204d	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e4ccccd
  02055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?freeze_cols@?OL@??ShowDemoWindowTables@@YAXXZ@4HA
  0205c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@CFPPLGBE@freeze_cols?$AA@
  02063	e8 00 00 00 00	 call	 ?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z ; ImGui::DragInt

; 4376 :         ImGui::SetNextItemWidth(ImGui::GetFrameHeight());

  02068	e8 00 00 00 00	 call	 ?GetFrameHeight@ImGui@@YAMXZ ; ImGui::GetFrameHeight
  0206d	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth

; 4377 :         ImGui::DragInt("freeze_rows", &freeze_rows, 0.2f, 0, 9, NULL, ImGuiSliderFlags_NoInput);

  02072	c7 44 24 30 80
	00 00 00	 mov	 DWORD PTR [rsp+48], 128	; 00000080H
  0207a	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  02083	c7 44 24 20 09
	00 00 00	 mov	 DWORD PTR [rsp+32], 9
  0208b	45 33 c9	 xor	 r9d, r9d
  0208e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e4ccccd
  02096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?freeze_rows@?OL@??ShowDemoWindowTables@@YAXXZ@4HA
  0209d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GIAMEELH@freeze_rows?$AA@
  020a4	e8 00 00 00 00	 call	 ?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z ; ImGui::DragInt

; 4378 :         PopStyleCompact();

  020a9	e8 00 00 00 00	 call	 ?PopStyleCompact@@YAXXZ	; PopStyleCompact

; 4379 : 
; 4380 :         // When using ScrollX or ScrollY we need to specify a size for our table container!
; 4381 :         // Otherwise by default the table will fit all available space, like a BeginChild() call.
; 4382 :         ImVec2 outer_size = ImVec2(0.0f, TEXT_BASE_HEIGHT * 8);

  020ae	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR TEXT_BASE_HEIGHT$[rbp]
  020b3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41000000
  020bb	0f 28 d0	 movaps	 xmm2, xmm0
  020be	0f 57 c9	 xorps	 xmm1, xmm1
  020c1	48 8d 8d 28 05
	00 00		 lea	 rcx, QWORD PTR outer_size$54[rbp]
  020c8	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 4383 :         if (ImGui::BeginTable("table_scrollx", 7, flags, outer_size))

  020cd	0f 57 c0	 xorps	 xmm0, xmm0
  020d0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  020d6	4c 8d 8d 28 05
	00 00		 lea	 r9, QWORD PTR outer_size$54[rbp]
  020dd	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags@?OL@??ShowDemoWindowTables@@YAXXZ@4HA
  020e4	ba 07 00 00 00	 mov	 edx, 7
  020e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@BILCALBK@table_scrollx?$AA@
  020f0	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  020f5	0f b6 c0	 movzx	 eax, al
  020f8	85 c0		 test	 eax, eax
  020fa	0f 84 58 01 00
	00		 je	 $LN344@ShowDemoWi

; 4384 :         {
; 4385 :             ImGui::TableSetupScrollFreeze(freeze_cols, freeze_rows);

  02100	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?freeze_rows@?OL@??ShowDemoWindowTables@@YAXXZ@4HA
  02106	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?freeze_cols@?OL@??ShowDemoWindowTables@@YAXXZ@4HA
  0210c	e8 00 00 00 00	 call	 ?TableSetupScrollFreeze@ImGui@@YAXHH@Z ; ImGui::TableSetupScrollFreeze

; 4386 :             ImGui::TableSetupColumn("Line #", ImGuiTableColumnFlags_NoHide); // Make the first column not hideable to match our use of TableSetupScrollFreeze()

  02111	45 33 c9	 xor	 r9d, r9d
  02114	0f 57 d2	 xorps	 xmm2, xmm2
  02117	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0211c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06GCNNJOIC@Line?5?$CD?$AA@
  02123	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4387 :             ImGui::TableSetupColumn("One");

  02128	45 33 c9	 xor	 r9d, r9d
  0212b	0f 57 d2	 xorps	 xmm2, xmm2
  0212e	33 d2		 xor	 edx, edx
  02130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03EHAPBBEA@One?$AA@
  02137	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4388 :             ImGui::TableSetupColumn("Two");

  0213c	45 33 c9	 xor	 r9d, r9d
  0213f	0f 57 d2	 xorps	 xmm2, xmm2
  02142	33 d2		 xor	 edx, edx
  02144	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CJAPLBKL@Two?$AA@
  0214b	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4389 :             ImGui::TableSetupColumn("Three");

  02150	45 33 c9	 xor	 r9d, r9d
  02153	0f 57 d2	 xorps	 xmm2, xmm2
  02156	33 d2		 xor	 edx, edx
  02158	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OHMANGAP@Three?$AA@
  0215f	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4390 :             ImGui::TableSetupColumn("Four");

  02164	45 33 c9	 xor	 r9d, r9d
  02167	0f 57 d2	 xorps	 xmm2, xmm2
  0216a	33 d2		 xor	 edx, edx
  0216c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04MCBIPDJB@Four?$AA@
  02173	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4391 :             ImGui::TableSetupColumn("Five");

  02178	45 33 c9	 xor	 r9d, r9d
  0217b	0f 57 d2	 xorps	 xmm2, xmm2
  0217e	33 d2		 xor	 edx, edx
  02180	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04OALGJGIC@Five?$AA@
  02187	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4392 :             ImGui::TableSetupColumn("Six");

  0218c	45 33 c9	 xor	 r9d, r9d
  0218f	0f 57 d2	 xorps	 xmm2, xmm2
  02192	33 d2		 xor	 edx, edx
  02194	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03KHODIDPO@Six?$AA@
  0219b	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4393 :             ImGui::TableHeadersRow();

  021a0	e8 00 00 00 00	 call	 ?TableHeadersRow@ImGui@@YAXXZ ; ImGui::TableHeadersRow

; 4394 :             for (int row = 0; row < 20; row++)

  021a5	c7 85 44 05 00
	00 00 00 00 00	 mov	 DWORD PTR row$55[rbp], 0
  021af	eb 0e		 jmp	 SHORT $LN123@ShowDemoWi
$LN121@ShowDemoWi:
  021b1	8b 85 44 05 00
	00		 mov	 eax, DWORD PTR row$55[rbp]
  021b7	ff c0		 inc	 eax
  021b9	89 85 44 05 00
	00		 mov	 DWORD PTR row$55[rbp], eax
$LN123@ShowDemoWi:
  021bf	83 bd 44 05 00
	00 14		 cmp	 DWORD PTR row$55[rbp], 20
  021c6	0f 8d 87 00 00
	00		 jge	 $LN122@ShowDemoWi

; 4395 :             {
; 4396 :                 ImGui::TableNextRow();

  021cc	0f 57 c9	 xorps	 xmm1, xmm1
  021cf	33 c9		 xor	 ecx, ecx
  021d1	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4397 :                 for (int column = 0; column < 7; column++)

  021d6	c7 85 64 05 00
	00 00 00 00 00	 mov	 DWORD PTR column$56[rbp], 0
  021e0	eb 0e		 jmp	 SHORT $LN126@ShowDemoWi
$LN124@ShowDemoWi:
  021e2	8b 85 64 05 00
	00		 mov	 eax, DWORD PTR column$56[rbp]
  021e8	ff c0		 inc	 eax
  021ea	89 85 64 05 00
	00		 mov	 DWORD PTR column$56[rbp], eax
$LN126@ShowDemoWi:
  021f0	83 bd 64 05 00
	00 07		 cmp	 DWORD PTR column$56[rbp], 7
  021f7	7d 55		 jge	 SHORT $LN125@ShowDemoWi

; 4398 :                 {
; 4399 :                     // Both TableNextColumn() and TableSetColumnIndex() return true when a column is visible or performing width measurement.
; 4400 :                     // Because here we know that:
; 4401 :                     // - A) all our columns are contributing the same to row height
; 4402 :                     // - B) column 0 is always visible,
; 4403 :                     // We only always submit this one column and can skip others.
; 4404 :                     // More advanced per-column clipping behaviors may benefit from polling the status flags via TableGetColumnFlags().
; 4405 :                     if (!ImGui::TableSetColumnIndex(column) && column > 0)

  021f9	8b 8d 64 05 00
	00		 mov	 ecx, DWORD PTR column$56[rbp]
  021ff	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex
  02204	0f b6 c0	 movzx	 eax, al
  02207	85 c0		 test	 eax, eax
  02209	75 0b		 jne	 SHORT $LN345@ShowDemoWi
  0220b	83 bd 64 05 00
	00 00		 cmp	 DWORD PTR column$56[rbp], 0
  02212	7e 02		 jle	 SHORT $LN345@ShowDemoWi

; 4406 :                         continue;

  02214	eb cc		 jmp	 SHORT $LN124@ShowDemoWi
$LN345@ShowDemoWi:

; 4407 :                     if (column == 0)

  02216	83 bd 64 05 00
	00 00		 cmp	 DWORD PTR column$56[rbp], 0
  0221d	75 14		 jne	 SHORT $LN346@ShowDemoWi

; 4408 :                         ImGui::Text("Line %d", row);

  0221f	8b 95 44 05 00
	00		 mov	 edx, DWORD PTR row$55[rbp]
  02225	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07GMIONID@Line?5?$CFd?$AA@
  0222c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4409 :                     else

  02231	eb 19		 jmp	 SHORT $LN347@ShowDemoWi
$LN346@ShowDemoWi:

; 4410 :                         ImGui::Text("Hello world %d,%d", column, row);

  02233	44 8b 85 44 05
	00 00		 mov	 r8d, DWORD PTR row$55[rbp]
  0223a	8b 95 64 05 00
	00		 mov	 edx, DWORD PTR column$56[rbp]
  02240	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@OMMFFCFF@Hello?5world?5?$CFd?0?$CFd?$AA@
  02247	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN347@ShowDemoWi:

; 4411 :                 }

  0224c	eb 94		 jmp	 SHORT $LN124@ShowDemoWi
$LN125@ShowDemoWi:

; 4412 :             }

  0224e	e9 5e ff ff ff	 jmp	 $LN121@ShowDemoWi
$LN122@ShowDemoWi:

; 4413 :             ImGui::EndTable();

  02253	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN344@ShowDemoWi:

; 4414 :         }
; 4415 : 
; 4416 :         ImGui::Spacing();

  02258	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 4417 :         ImGui::TextUnformatted("Stretch + ScrollX");

  0225d	33 d2		 xor	 edx, edx
  0225f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@HLNLGDMF@Stretch?5?$CL?5ScrollX?$AA@
  02266	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted

; 4418 :         ImGui::SameLine();

  0226b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  02273	0f 57 c0	 xorps	 xmm0, xmm0
  02276	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 4419 :         HelpMarker(

  0227b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BBE@ODLBHPGG@Showcase?5using?5Stretch?5columns?5?$CL@
  02282	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4420 :             "Showcase using Stretch columns + ScrollX together: "
; 4421 :             "this is rather unusual and only makes sense when specifying an 'inner_width' for the table!\n"
; 4422 :             "Without an explicit value, inner_width is == outer_size.x and therefore using Stretch columns + ScrollX together doesn't make sense.");
; 4423 :         static ImGuiTableFlags flags2 = ImGuiTableFlags_SizingStretchSame | ImGuiTableFlags_ScrollX | ImGuiTableFlags_ScrollY | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_RowBg | ImGuiTableFlags_ContextMenuInBody;
; 4424 :         static float inner_width = 1000.0f;
; 4425 :         PushStyleCompact();

  02287	e8 00 00 00 00	 call	 ?PushStyleCompact@@YAXXZ ; PushStyleCompact

; 4426 :         ImGui::PushID("flags3");

  0228c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FFLMLEAB@flags3?$AA@
  02293	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPEBD@Z ; ImGui::PushID

; 4427 :         ImGui::PushItemWidth(TEXT_BASE_WIDTH * 30);

  02298	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR TEXT_BASE_WIDTH$[rbp]
  0229d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41f00000
  022a5	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth

; 4428 :         ImGui::CheckboxFlags("ImGuiTableFlags_ScrollX", &flags2, ImGuiTableFlags_ScrollX);

  022aa	41 b8 00 00 00
	01		 mov	 r8d, 16777216		; 01000000H
  022b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags2@?OL@??ShowDemoWindowTables@@YAXXZ@4HA
  022b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LGJFDPIB@ImGuiTableFlags_ScrollX?$AA@
  022be	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4429 :         ImGui::DragFloat("inner_width", &inner_width, 1.0f, 0.0f, FLT_MAX, "%.1f");

  022c3	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  022cb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GGBPDDBN@?$CF?41f?$AA@
  022d2	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  022d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  022df	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  022e5	0f 57 db	 xorps	 xmm3, xmm3
  022e8	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  022f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?inner_width@?OL@??ShowDemoWindowTables@@YAXXZ@4MA
  022f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@BJNMEEJO@inner_width?$AA@
  022fe	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 4430 :         ImGui::PopItemWidth();

  02303	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 4431 :         ImGui::PopID();

  02308	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 4432 :         PopStyleCompact();

  0230d	e8 00 00 00 00	 call	 ?PopStyleCompact@@YAXXZ	; PopStyleCompact

; 4433 :         if (ImGui::BeginTable("table2", 7, flags2, outer_size, inner_width))

  02312	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?inner_width@?OL@??ShowDemoWindowTables@@YAXXZ@4MA
  0231a	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  02320	4c 8d 8d 28 05
	00 00		 lea	 r9, QWORD PTR outer_size$54[rbp]
  02327	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags2@?OL@??ShowDemoWindowTables@@YAXXZ@4HA
  0232e	ba 07 00 00 00	 mov	 edx, 7
  02333	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IIHCDJGK@table2?$AA@
  0233a	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  0233f	0f b6 c0	 movzx	 eax, al
  02342	85 c0		 test	 eax, eax
  02344	74 59		 je	 SHORT $LN348@ShowDemoWi

; 4434 :         {
; 4435 :             for (int cell = 0; cell < 20 * 7; cell++)

  02346	c7 85 84 05 00
	00 00 00 00 00	 mov	 DWORD PTR cell$57[rbp], 0
  02350	eb 0e		 jmp	 SHORT $LN129@ShowDemoWi
$LN127@ShowDemoWi:
  02352	8b 85 84 05 00
	00		 mov	 eax, DWORD PTR cell$57[rbp]
  02358	ff c0		 inc	 eax
  0235a	89 85 84 05 00
	00		 mov	 DWORD PTR cell$57[rbp], eax
$LN129@ShowDemoWi:
  02360	81 bd 84 05 00
	00 8c 00 00 00	 cmp	 DWORD PTR cell$57[rbp], 140 ; 0000008cH
  0236a	7d 2e		 jge	 SHORT $LN128@ShowDemoWi

; 4436 :             {
; 4437 :                 ImGui::TableNextColumn();

  0236c	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 4438 :                 ImGui::Text("Hello world %d,%d", ImGui::TableGetColumnIndex(), ImGui::TableGetRowIndex());

  02371	e8 00 00 00 00	 call	 ?TableGetRowIndex@ImGui@@YAHXZ ; ImGui::TableGetRowIndex
  02376	89 85 c4 1d 00
	00		 mov	 DWORD PTR tv1419[rbp], eax
  0237c	e8 00 00 00 00	 call	 ?TableGetColumnIndex@ImGui@@YAHXZ ; ImGui::TableGetColumnIndex
  02381	8b 8d c4 1d 00
	00		 mov	 ecx, DWORD PTR tv1419[rbp]
  02387	44 8b c1	 mov	 r8d, ecx
  0238a	8b d0		 mov	 edx, eax
  0238c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@OMMFFCFF@Hello?5world?5?$CFd?0?$CFd?$AA@
  02393	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4439 :             }

  02398	eb b8		 jmp	 SHORT $LN127@ShowDemoWi
$LN128@ShowDemoWi:

; 4440 :             ImGui::EndTable();

  0239a	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN348@ShowDemoWi:

; 4441 :         }
; 4442 :         ImGui::TreePop();

  0239f	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN343@ShowDemoWi:

; 4443 :     }
; 4444 : 
; 4445 :     if (open_action != -1)

  023a4	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  023a8	74 24		 je	 SHORT $LN132@ShowDemoWi

; 4446 :         ImGui::SetNextItemOpen(open_action != 0);

  023aa	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  023ae	74 09		 je	 SHORT $LN494@ShowDemoWi
  023b0	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv1427[rbp], 1
  023b7	eb 07		 jmp	 SHORT $LN495@ShowDemoWi
$LN494@ShowDemoWi:
  023b9	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv1427[rbp], 0
$LN495@ShowDemoWi:
  023c0	33 d2		 xor	 edx, edx
  023c2	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv1427[rbp]
  023c9	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN132@ShowDemoWi:

; 4447 :     IMGUI_DEMO_MARKER("Tables/Columns flags");

  023ce	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  023d6	74 28		 je	 SHORT $LN350@ShowDemoWi
  023d8	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  023de	05 b4 02 00 00	 add	 eax, 692		; 000002b4H
  023e3	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  023ea	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BF@LDBFKPOJ@Tables?1Columns?5flags?$AA@
  023f1	8b d0		 mov	 edx, eax
  023f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  023fa	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN350@ShowDemoWi:
  02400	33 c0		 xor	 eax, eax
  02402	85 c0		 test	 eax, eax
  02404	75 c8		 jne	 SHORT $LN132@ShowDemoWi

; 4448 :     if (ImGui::TreeNode("Columns flags"))

  02406	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@INJHOPKF@Columns?5flags?$AA@
  0240d	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  02412	0f b6 c0	 movzx	 eax, al
  02415	85 c0		 test	 eax, eax
  02417	0f 84 2e 03 00
	00		 je	 $LN351@ShowDemoWi

; 4449 :     {
; 4450 :         // Create a first table just to show all the options/flags we want to make visible in our example!
; 4451 :         const int column_count = 3;

  0241d	c7 85 a4 05 00
	00 03 00 00 00	 mov	 DWORD PTR column_count$58[rbp], 3

; 4452 :         const char* column_names[column_count] = { "One", "Two", "Three" };

  02427	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03EHAPBBEA@One?$AA@
  0242e	48 89 85 c8 05
	00 00		 mov	 QWORD PTR column_names$59[rbp], rax
  02435	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03CJAPLBKL@Two?$AA@
  0243c	48 89 85 d0 05
	00 00		 mov	 QWORD PTR column_names$59[rbp+8], rax
  02443	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05OHMANGAP@Three?$AA@
  0244a	48 89 85 d8 05
	00 00		 mov	 QWORD PTR column_names$59[rbp+16], rax

; 4453 :         static ImGuiTableColumnFlags column_flags[column_count] = { ImGuiTableColumnFlags_DefaultSort, ImGuiTableColumnFlags_None, ImGuiTableColumnFlags_DefaultHide };
; 4454 :         static ImGuiTableColumnFlags column_flags_out[column_count] = { 0, 0, 0 }; // Output from TableGetColumnFlags()
; 4455 : 
; 4456 :         if (ImGui::BeginTable("table_columns_flags_checkboxes", column_count, ImGuiTableFlags_None))

  02451	0f 57 d2	 xorps	 xmm2, xmm2
  02454	0f 57 c9	 xorps	 xmm1, xmm1
  02457	48 8d 8d c4 18
	00 00		 lea	 rcx, QWORD PTR $T156[rbp]
  0245e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02463	0f 57 c0	 xorps	 xmm0, xmm0
  02466	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0246c	4c 8b c8	 mov	 r9, rax
  0246f	45 33 c0	 xor	 r8d, r8d
  02472	ba 03 00 00 00	 mov	 edx, 3
  02477	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@MNOKCEIF@table_columns_flags_checkboxes?$AA@
  0247e	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  02483	0f b6 c0	 movzx	 eax, al
  02486	85 c0		 test	 eax, eax
  02488	0f 84 ce 00 00
	00		 je	 $LN352@ShowDemoWi

; 4457 :         {
; 4458 :             PushStyleCompact();

  0248e	e8 00 00 00 00	 call	 ?PushStyleCompact@@YAXXZ ; PushStyleCompact

; 4459 :             for (int column = 0; column < column_count; column++)

  02493	c7 85 f4 05 00
	00 00 00 00 00	 mov	 DWORD PTR column$60[rbp], 0
  0249d	eb 0e		 jmp	 SHORT $LN135@ShowDemoWi
$LN133@ShowDemoWi:
  0249f	8b 85 f4 05 00
	00		 mov	 eax, DWORD PTR column$60[rbp]
  024a5	ff c0		 inc	 eax
  024a7	89 85 f4 05 00
	00		 mov	 DWORD PTR column$60[rbp], eax
$LN135@ShowDemoWi:
  024ad	83 bd f4 05 00
	00 03		 cmp	 DWORD PTR column$60[rbp], 3
  024b4	0f 8d 98 00 00
	00		 jge	 $LN134@ShowDemoWi

; 4460 :             {
; 4461 :                 ImGui::TableNextColumn();

  024ba	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 4462 :                 ImGui::PushID(column);

  024bf	8b 8d f4 05 00
	00		 mov	 ecx, DWORD PTR column$60[rbp]
  024c5	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 4463 :                 ImGui::AlignTextToFramePadding(); // FIXME-TABLE: Workaround for wrong text baseline propagation across columns

  024ca	e8 00 00 00 00	 call	 ?AlignTextToFramePadding@ImGui@@YAXXZ ; ImGui::AlignTextToFramePadding

; 4464 :                 ImGui::Text("'%s'", column_names[column]);

  024cf	48 63 85 f4 05
	00 00		 movsxd	 rax, DWORD PTR column$60[rbp]
  024d6	48 8b 94 c5 c8
	05 00 00	 mov	 rdx, QWORD PTR column_names$59[rbp+rax*8]
  024de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04FBKCMAJG@?8?$CFs?8?$AA@
  024e5	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4465 :                 ImGui::Spacing();

  024ea	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 4466 :                 ImGui::Text("Input flags:");

  024ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@FHGGFOEB@Input?5flags?3?$AA@
  024f6	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4467 :                 EditTableColumnsFlags(&column_flags[column]);

  024fb	48 63 85 f4 05
	00 00		 movsxd	 rax, DWORD PTR column$60[rbp]
  02502	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?column_flags@?BAF@??ShowDemoWindowTables@@YAXXZ@4PAHA
  02509	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0250d	48 8b c8	 mov	 rcx, rax
  02510	e8 00 00 00 00	 call	 ?EditTableColumnsFlags@@YAXPEAH@Z ; EditTableColumnsFlags

; 4468 :                 ImGui::Spacing();

  02515	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 4469 :                 ImGui::Text("Output flags:");

  0251a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@OFGIHDEK@Output?5flags?3?$AA@
  02521	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4470 :                 ImGui::BeginDisabled();

  02526	b1 01		 mov	 cl, 1
  02528	e8 00 00 00 00	 call	 ?BeginDisabled@ImGui@@YAX_N@Z ; ImGui::BeginDisabled

; 4471 :                 ShowTableColumnsStatusFlags(column_flags_out[column]);

  0252d	48 63 85 f4 05
	00 00		 movsxd	 rax, DWORD PTR column$60[rbp]
  02534	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?column_flags_out@?BAF@??ShowDemoWindowTables@@YAXXZ@4PAHA
  0253b	8b 0c 81	 mov	 ecx, DWORD PTR [rcx+rax*4]
  0253e	e8 00 00 00 00	 call	 ?ShowTableColumnsStatusFlags@@YAXH@Z ; ShowTableColumnsStatusFlags

; 4472 :                 ImGui::EndDisabled();

  02543	e8 00 00 00 00	 call	 ?EndDisabled@ImGui@@YAXXZ ; ImGui::EndDisabled

; 4473 :                 ImGui::PopID();

  02548	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 4474 :             }

  0254d	e9 4d ff ff ff	 jmp	 $LN133@ShowDemoWi
$LN134@ShowDemoWi:

; 4475 :             PopStyleCompact();

  02552	e8 00 00 00 00	 call	 ?PopStyleCompact@@YAXXZ	; PopStyleCompact

; 4476 :             ImGui::EndTable();

  02557	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN352@ShowDemoWi:

; 4477 :         }
; 4478 : 
; 4479 :         // Create the real table we care about for the example!
; 4480 :         // We use a scrolling table to be able to showcase the difference between the _IsEnabled and _IsVisible flags above, otherwise in
; 4481 :         // a non-scrolling table columns are always visible (unless using ImGuiTableFlags_NoKeepColumnsVisible + resizing the parent window down)
; 4482 :         const ImGuiTableFlags flags
; 4483 :             = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_ScrollX | ImGuiTableFlags_ScrollY
; 4484 :             | ImGuiTableFlags_RowBg | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV
; 4485 :             | ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable | ImGuiTableFlags_Sortable;

  0255c	c7 85 14 06 00
	00 4f 27 00 03	 mov	 DWORD PTR flags$61[rbp], 50341711 ; 0300274fH

; 4486 :         ImVec2 outer_size = ImVec2(0.0f, TEXT_BASE_HEIGHT * 9);

  02566	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR TEXT_BASE_HEIGHT$[rbp]
  0256b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41100000
  02573	0f 28 d0	 movaps	 xmm2, xmm0
  02576	0f 57 c9	 xorps	 xmm1, xmm1
  02579	48 8d 8d 38 06
	00 00		 lea	 rcx, QWORD PTR outer_size$62[rbp]
  02580	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 4487 :         if (ImGui::BeginTable("table_columns_flags", column_count, flags, outer_size))

  02585	0f 57 c0	 xorps	 xmm0, xmm0
  02588	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0258e	4c 8d 8d 38 06
	00 00		 lea	 r9, QWORD PTR outer_size$62[rbp]
  02595	41 b8 4f 27 00
	03		 mov	 r8d, 50341711		; 0300274fH
  0259b	ba 03 00 00 00	 mov	 edx, 3
  025a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CEBHJEEC@table_columns_flags?$AA@
  025a7	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  025ac	0f b6 c0	 movzx	 eax, al
  025af	85 c0		 test	 eax, eax
  025b1	0f 84 8f 01 00
	00		 je	 $LN353@ShowDemoWi

; 4488 :         {
; 4489 :             for (int column = 0; column < column_count; column++)

  025b7	c7 85 54 06 00
	00 00 00 00 00	 mov	 DWORD PTR column$63[rbp], 0
  025c1	eb 0e		 jmp	 SHORT $LN138@ShowDemoWi
$LN136@ShowDemoWi:
  025c3	8b 85 54 06 00
	00		 mov	 eax, DWORD PTR column$63[rbp]
  025c9	ff c0		 inc	 eax
  025cb	89 85 54 06 00
	00		 mov	 DWORD PTR column$63[rbp], eax
$LN138@ShowDemoWi:
  025d1	83 bd 54 06 00
	00 03		 cmp	 DWORD PTR column$63[rbp], 3
  025d8	7d 3b		 jge	 SHORT $LN137@ShowDemoWi

; 4490 :                 ImGui::TableSetupColumn(column_names[column], column_flags[column]);

  025da	48 63 85 54 06
	00 00		 movsxd	 rax, DWORD PTR column$63[rbp]
  025e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?column_flags@?BAF@??ShowDemoWindowTables@@YAXXZ@4PAHA
  025e8	48 63 95 54 06
	00 00		 movsxd	 rdx, DWORD PTR column$63[rbp]
  025ef	48 89 95 c8 1d
	00 00		 mov	 QWORD PTR tv1491[rbp], rdx
  025f6	45 33 c9	 xor	 r9d, r9d
  025f9	0f 57 d2	 xorps	 xmm2, xmm2
  025fc	8b 14 81	 mov	 edx, DWORD PTR [rcx+rax*4]
  025ff	48 8b 85 c8 1d
	00 00		 mov	 rax, QWORD PTR tv1491[rbp]
  02606	48 8b 8c c5 c8
	05 00 00	 mov	 rcx, QWORD PTR column_names$59[rbp+rax*8]
  0260e	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn
  02613	eb ae		 jmp	 SHORT $LN136@ShowDemoWi
$LN137@ShowDemoWi:

; 4491 :             ImGui::TableHeadersRow();

  02615	e8 00 00 00 00	 call	 ?TableHeadersRow@ImGui@@YAXXZ ; ImGui::TableHeadersRow

; 4492 :             for (int column = 0; column < column_count; column++)

  0261a	c7 85 74 06 00
	00 00 00 00 00	 mov	 DWORD PTR column$64[rbp], 0
  02624	eb 0e		 jmp	 SHORT $LN141@ShowDemoWi
$LN139@ShowDemoWi:
  02626	8b 85 74 06 00
	00		 mov	 eax, DWORD PTR column$64[rbp]
  0262c	ff c0		 inc	 eax
  0262e	89 85 74 06 00
	00		 mov	 DWORD PTR column$64[rbp], eax
$LN141@ShowDemoWi:
  02634	83 bd 74 06 00
	00 03		 cmp	 DWORD PTR column$64[rbp], 3
  0263b	7d 1e		 jge	 SHORT $LN140@ShowDemoWi

; 4493 :                 column_flags_out[column] = ImGui::TableGetColumnFlags(column);

  0263d	8b 8d 74 06 00
	00		 mov	 ecx, DWORD PTR column$64[rbp]
  02643	e8 00 00 00 00	 call	 ?TableGetColumnFlags@ImGui@@YAHH@Z ; ImGui::TableGetColumnFlags
  02648	48 63 8d 74 06
	00 00		 movsxd	 rcx, DWORD PTR column$64[rbp]
  0264f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?column_flags_out@?BAF@??ShowDemoWindowTables@@YAXXZ@4PAHA
  02656	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
  02659	eb cb		 jmp	 SHORT $LN139@ShowDemoWi
$LN140@ShowDemoWi:

; 4494 :             float indent_step = (float)((int)TEXT_BASE_WIDTH / 2);

  0265b	f3 0f 2c 45 04	 cvttss2si eax, DWORD PTR TEXT_BASE_WIDTH$[rbp]
  02660	99		 cdq
  02661	2b c2		 sub	 eax, edx
  02663	d1 f8		 sar	 eax, 1
  02665	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  02669	f3 0f 11 85 94
	06 00 00	 movss	 DWORD PTR indent_step$65[rbp], xmm0

; 4495 :             for (int row = 0; row < 8; row++)

  02671	c7 85 b4 06 00
	00 00 00 00 00	 mov	 DWORD PTR row$66[rbp], 0
  0267b	eb 0e		 jmp	 SHORT $LN144@ShowDemoWi
$LN142@ShowDemoWi:
  0267d	8b 85 b4 06 00
	00		 mov	 eax, DWORD PTR row$66[rbp]
  02683	ff c0		 inc	 eax
  02685	89 85 b4 06 00
	00		 mov	 DWORD PTR row$66[rbp], eax
$LN144@ShowDemoWi:
  0268b	83 bd b4 06 00
	00 08		 cmp	 DWORD PTR row$66[rbp], 8
  02692	0f 8d 94 00 00
	00		 jge	 $LN143@ShowDemoWi

; 4496 :             {
; 4497 :                 ImGui::Indent(indent_step); // Add some indentation to demonstrate usage of per-column IndentEnable/IndentDisable flags.

  02698	f3 0f 10 85 94
	06 00 00	 movss	 xmm0, DWORD PTR indent_step$65[rbp]
  026a0	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent

; 4498 :                 ImGui::TableNextRow();

  026a5	0f 57 c9	 xorps	 xmm1, xmm1
  026a8	33 c9		 xor	 ecx, ecx
  026aa	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4499 :                 for (int column = 0; column < column_count; column++)

  026af	c7 85 d4 06 00
	00 00 00 00 00	 mov	 DWORD PTR column$67[rbp], 0
  026b9	eb 0e		 jmp	 SHORT $LN147@ShowDemoWi
$LN145@ShowDemoWi:
  026bb	8b 85 d4 06 00
	00		 mov	 eax, DWORD PTR column$67[rbp]
  026c1	ff c0		 inc	 eax
  026c3	89 85 d4 06 00
	00		 mov	 DWORD PTR column$67[rbp], eax
$LN147@ShowDemoWi:
  026c9	83 bd d4 06 00
	00 03		 cmp	 DWORD PTR column$67[rbp], 3
  026d0	7d 55		 jge	 SHORT $LN146@ShowDemoWi

; 4500 :                 {
; 4501 :                     ImGui::TableSetColumnIndex(column);

  026d2	8b 8d d4 06 00
	00		 mov	 ecx, DWORD PTR column$67[rbp]
  026d8	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4502 :                     ImGui::Text("%s %s", (column == 0) ? "Indented" : "Hello", ImGui::TableGetColumnName(column));

  026dd	83 bd d4 06 00
	00 00		 cmp	 DWORD PTR column$67[rbp], 0
  026e4	75 10		 jne	 SHORT $LN496@ShowDemoWi
  026e6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08ELEEDBE@Indented?$AA@
  026ed	48 89 85 c8 1d
	00 00		 mov	 QWORD PTR tv1517[rbp], rax
  026f4	eb 0e		 jmp	 SHORT $LN497@ShowDemoWi
$LN496@ShowDemoWi:
  026f6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05COLMCDPH@Hello?$AA@
  026fd	48 89 85 c8 1d
	00 00		 mov	 QWORD PTR tv1517[rbp], rax
$LN497@ShowDemoWi:
  02704	8b 8d d4 06 00
	00		 mov	 ecx, DWORD PTR column$67[rbp]
  0270a	e8 00 00 00 00	 call	 ?TableGetColumnName@ImGui@@YAPEBDH@Z ; ImGui::TableGetColumnName
  0270f	4c 8b c0	 mov	 r8, rax
  02712	48 8b 95 c8 1d
	00 00		 mov	 rdx, QWORD PTR tv1517[rbp]
  02719	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@
  02720	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4503 :                 }

  02725	eb 94		 jmp	 SHORT $LN145@ShowDemoWi
$LN146@ShowDemoWi:

; 4504 :             }

  02727	e9 51 ff ff ff	 jmp	 $LN142@ShowDemoWi
$LN143@ShowDemoWi:

; 4505 :             ImGui::Unindent(indent_step * 8.0f);

  0272c	f3 0f 10 85 94
	06 00 00	 movss	 xmm0, DWORD PTR indent_step$65[rbp]
  02734	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41000000
  0273c	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent

; 4506 : 
; 4507 :             ImGui::EndTable();

  02741	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN353@ShowDemoWi:

; 4508 :         }
; 4509 :         ImGui::TreePop();

  02746	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN351@ShowDemoWi:

; 4510 :     }
; 4511 : 
; 4512 :     if (open_action != -1)

  0274b	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  0274f	74 24		 je	 SHORT $LN150@ShowDemoWi

; 4513 :         ImGui::SetNextItemOpen(open_action != 0);

  02751	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  02755	74 09		 je	 SHORT $LN498@ShowDemoWi
  02757	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv1525[rbp], 1
  0275e	eb 07		 jmp	 SHORT $LN499@ShowDemoWi
$LN498@ShowDemoWi:
  02760	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv1525[rbp], 0
$LN499@ShowDemoWi:
  02767	33 d2		 xor	 edx, edx
  02769	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv1525[rbp]
  02770	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN150@ShowDemoWi:

; 4514 :     IMGUI_DEMO_MARKER("Tables/Columns widths");

  02775	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0277d	74 28		 je	 SHORT $LN355@ShowDemoWi
  0277f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  02785	05 f7 02 00 00	 add	 eax, 759		; 000002f7H
  0278a	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  02791	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@NGCMFIBP@Tables?1Columns?5widths?$AA@
  02798	8b d0		 mov	 edx, eax
  0279a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  027a1	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN355@ShowDemoWi:
  027a7	33 c0		 xor	 eax, eax
  027a9	85 c0		 test	 eax, eax
  027ab	75 c8		 jne	 SHORT $LN150@ShowDemoWi

; 4515 :     if (ImGui::TreeNode("Columns widths"))

  027ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@KJHINHOE@Columns?5widths?$AA@
  027b4	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  027b9	0f b6 c0	 movzx	 eax, al
  027bc	85 c0		 test	 eax, eax
  027be	0f 84 72 03 00
	00		 je	 $LN356@ShowDemoWi

; 4516 :     {
; 4517 :         HelpMarker("Using TableSetupColumn() to setup default width.");

  027c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@BFOOEOFP@Using?5TableSetupColumn?$CI?$CJ?5to?5setu@
  027cb	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4518 : 
; 4519 :         static ImGuiTableFlags flags1 = ImGuiTableFlags_Borders | ImGuiTableFlags_NoBordersInBodyUntilResize;
; 4520 :         PushStyleCompact();

  027d0	e8 00 00 00 00	 call	 ?PushStyleCompact@@YAXXZ ; PushStyleCompact

; 4521 :         ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags1, ImGuiTableFlags_Resizable);

  027d5	41 b8 01 00 00
	00		 mov	 r8d, 1
  027db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags1@?BBM@??ShowDemoWindowTables@@YAXXZ@4HA
  027e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@EMJCIFOG@ImGuiTableFlags_Resizable?$AA@
  027e9	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4522 :         ImGui::CheckboxFlags("ImGuiTableFlags_NoBordersInBodyUntilResize", &flags1, ImGuiTableFlags_NoBordersInBodyUntilResize);

  027ee	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  027f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags1@?BBM@??ShowDemoWindowTables@@YAXXZ@4HA
  027fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@IIFCHPBH@ImGuiTableFlags_NoBordersInBodyU@
  02802	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4523 :         PopStyleCompact();

  02807	e8 00 00 00 00	 call	 ?PopStyleCompact@@YAXXZ	; PopStyleCompact

; 4524 :         if (ImGui::BeginTable("table1", 3, flags1))

  0280c	0f 57 d2	 xorps	 xmm2, xmm2
  0280f	0f 57 c9	 xorps	 xmm1, xmm1
  02812	48 8d 8d e4 18
	00 00		 lea	 rcx, QWORD PTR $T157[rbp]
  02819	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0281e	0f 57 c0	 xorps	 xmm0, xmm0
  02821	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  02827	4c 8b c8	 mov	 r9, rax
  0282a	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags1@?BBM@??ShowDemoWindowTables@@YAXXZ@4HA
  02831	ba 03 00 00 00	 mov	 edx, 3
  02836	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KDFPGKKJ@table1?$AA@
  0283d	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  02842	0f b6 c0	 movzx	 eax, al
  02845	85 c0		 test	 eax, eax
  02847	0f 84 07 01 00
	00		 je	 $LN357@ShowDemoWi

; 4525 :         {
; 4526 :             // We could also set ImGuiTableFlags_SizingFixedFit on the table and all columns will default to ImGuiTableColumnFlags_WidthFixed.
; 4527 :             ImGui::TableSetupColumn("one", ImGuiTableColumnFlags_WidthFixed, 100.0f); // Default to 100.0f

  0284d	45 33 c9	 xor	 r9d, r9d
  02850	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42c80000
  02858	ba 10 00 00 00	 mov	 edx, 16
  0285d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03OHDNLOHO@one?$AA@
  02864	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4528 :             ImGui::TableSetupColumn("two", ImGuiTableColumnFlags_WidthFixed, 200.0f); // Default to 200.0f

  02869	45 33 c9	 xor	 r9d, r9d
  0286c	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43480000
  02874	ba 10 00 00 00	 mov	 edx, 16
  02879	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IJDNBOJF@two?$AA@
  02880	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4529 :             ImGui::TableSetupColumn("three", ImGuiTableColumnFlags_WidthFixed);       // Default to auto

  02885	45 33 c9	 xor	 r9d, r9d
  02888	0f 57 d2	 xorps	 xmm2, xmm2
  0288b	ba 10 00 00 00	 mov	 edx, 16
  02890	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OAGMNDDJ@three?$AA@
  02897	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4530 :             ImGui::TableHeadersRow();

  0289c	e8 00 00 00 00	 call	 ?TableHeadersRow@ImGui@@YAXXZ ; ImGui::TableHeadersRow

; 4531 :             for (int row = 0; row < 4; row++)

  028a1	c7 85 f4 06 00
	00 00 00 00 00	 mov	 DWORD PTR row$68[rbp], 0
  028ab	eb 0e		 jmp	 SHORT $LN153@ShowDemoWi
$LN151@ShowDemoWi:
  028ad	8b 85 f4 06 00
	00		 mov	 eax, DWORD PTR row$68[rbp]
  028b3	ff c0		 inc	 eax
  028b5	89 85 f4 06 00
	00		 mov	 DWORD PTR row$68[rbp], eax
$LN153@ShowDemoWi:
  028bb	83 bd f4 06 00
	00 04		 cmp	 DWORD PTR row$68[rbp], 4
  028c2	0f 8d 87 00 00
	00		 jge	 $LN152@ShowDemoWi

; 4532 :             {
; 4533 :                 ImGui::TableNextRow();

  028c8	0f 57 c9	 xorps	 xmm1, xmm1
  028cb	33 c9		 xor	 ecx, ecx
  028cd	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4534 :                 for (int column = 0; column < 3; column++)

  028d2	c7 85 14 07 00
	00 00 00 00 00	 mov	 DWORD PTR column$69[rbp], 0
  028dc	eb 0e		 jmp	 SHORT $LN156@ShowDemoWi
$LN154@ShowDemoWi:
  028de	8b 85 14 07 00
	00		 mov	 eax, DWORD PTR column$69[rbp]
  028e4	ff c0		 inc	 eax
  028e6	89 85 14 07 00
	00		 mov	 DWORD PTR column$69[rbp], eax
$LN156@ShowDemoWi:
  028ec	83 bd 14 07 00
	00 03		 cmp	 DWORD PTR column$69[rbp], 3
  028f3	7d 55		 jge	 SHORT $LN155@ShowDemoWi

; 4535 :                 {
; 4536 :                     ImGui::TableSetColumnIndex(column);

  028f5	8b 8d 14 07 00
	00		 mov	 ecx, DWORD PTR column$69[rbp]
  028fb	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4537 :                     if (row == 0)

  02900	83 bd f4 06 00
	00 00		 cmp	 DWORD PTR row$68[rbp], 0
  02907	75 26		 jne	 SHORT $LN358@ShowDemoWi

; 4538 :                         ImGui::Text("(w: %5.1f)", ImGui::GetContentRegionAvail().x);

  02909	48 8d 8d 04 19
	00 00		 lea	 rcx, QWORD PTR $T158[rbp]
  02910	e8 00 00 00 00	 call	 ?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
  02915	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [rax]
  02919	0f 28 c8	 movaps	 xmm1, xmm0
  0291c	66 48 0f 7e ca	 movq	 rdx, xmm1
  02921	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@JJDDAIH@?$CIw?3?5?$CF5?41f?$CJ?$AA@
  02928	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4539 :                     else

  0292d	eb 19		 jmp	 SHORT $LN359@ShowDemoWi
$LN358@ShowDemoWi:

; 4540 :                         ImGui::Text("Hello %d,%d", column, row);

  0292f	44 8b 85 f4 06
	00 00		 mov	 r8d, DWORD PTR row$68[rbp]
  02936	8b 95 14 07 00
	00		 mov	 edx, DWORD PTR column$69[rbp]
  0293c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MKBMKAAH@Hello?5?$CFd?0?$CFd?$AA@
  02943	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN359@ShowDemoWi:

; 4541 :                 }

  02948	eb 94		 jmp	 SHORT $LN154@ShowDemoWi
$LN155@ShowDemoWi:

; 4542 :             }

  0294a	e9 5e ff ff ff	 jmp	 $LN151@ShowDemoWi
$LN152@ShowDemoWi:

; 4543 :             ImGui::EndTable();

  0294f	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN357@ShowDemoWi:

; 4544 :         }
; 4545 : 
; 4546 :         HelpMarker("Using TableSetupColumn() to setup explicit width.\n\nUnless _NoKeepColumnsVisible is set, fixed columns with set width may still be shrunk down if there's not enough space in the host.");

  02954	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0LH@CELOBIGN@Using?5TableSetupColumn?$CI?$CJ?5to?5setu@
  0295b	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4547 : 
; 4548 :         static ImGuiTableFlags flags2 = ImGuiTableFlags_None;
; 4549 :         PushStyleCompact();

  02960	e8 00 00 00 00	 call	 ?PushStyleCompact@@YAXXZ ; PushStyleCompact

; 4550 :         ImGui::CheckboxFlags("ImGuiTableFlags_NoKeepColumnsVisible", &flags2, ImGuiTableFlags_NoKeepColumnsVisible);

  02965	41 b8 00 00 04
	00		 mov	 r8d, 262144		; 00040000H
  0296b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags2@?BBM@??ShowDemoWindowTables@@YAXXZ@4HA
  02972	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@HAPNKCNF@ImGuiTableFlags_NoKeepColumnsVis@
  02979	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4551 :         ImGui::CheckboxFlags("ImGuiTableFlags_BordersInnerV", &flags2, ImGuiTableFlags_BordersInnerV);

  0297e	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  02984	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags2@?BBM@??ShowDemoWindowTables@@YAXXZ@4HA
  0298b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@LBPOICOD@ImGuiTableFlags_BordersInnerV?$AA@
  02992	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4552 :         ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuterV", &flags2, ImGuiTableFlags_BordersOuterV);

  02997	41 b8 00 04 00
	00		 mov	 r8d, 1024		; 00000400H
  0299d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags2@?BBM@??ShowDemoWindowTables@@YAXXZ@4HA
  029a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@JBGPMKKC@ImGuiTableFlags_BordersOuterV?$AA@
  029ab	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4553 :         PopStyleCompact();

  029b0	e8 00 00 00 00	 call	 ?PopStyleCompact@@YAXXZ	; PopStyleCompact

; 4554 :         if (ImGui::BeginTable("table2", 4, flags2))

  029b5	0f 57 d2	 xorps	 xmm2, xmm2
  029b8	0f 57 c9	 xorps	 xmm1, xmm1
  029bb	48 8d 8d 24 19
	00 00		 lea	 rcx, QWORD PTR $T159[rbp]
  029c2	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  029c7	0f 57 c0	 xorps	 xmm0, xmm0
  029ca	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  029d0	4c 8b c8	 mov	 r9, rax
  029d3	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags2@?BBM@??ShowDemoWindowTables@@YAXXZ@4HA
  029da	ba 04 00 00 00	 mov	 edx, 4
  029df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IIHCDJGK@table2?$AA@
  029e6	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  029eb	0f b6 c0	 movzx	 eax, al
  029ee	85 c0		 test	 eax, eax
  029f0	0f 84 3b 01 00
	00		 je	 $LN360@ShowDemoWi

; 4555 :         {
; 4556 :             // We could also set ImGuiTableFlags_SizingFixedFit on the table and all columns will default to ImGuiTableColumnFlags_WidthFixed.
; 4557 :             ImGui::TableSetupColumn("", ImGuiTableColumnFlags_WidthFixed, 100.0f);

  029f6	45 33 c9	 xor	 r9d, r9d
  029f9	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42c80000
  02a01	ba 10 00 00 00	 mov	 edx, 16
  02a06	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  02a0d	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4558 :             ImGui::TableSetupColumn("", ImGuiTableColumnFlags_WidthFixed, TEXT_BASE_WIDTH * 15.0f);

  02a12	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR TEXT_BASE_WIDTH$[rbp]
  02a17	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41700000
  02a1f	45 33 c9	 xor	 r9d, r9d
  02a22	0f 28 d0	 movaps	 xmm2, xmm0
  02a25	ba 10 00 00 00	 mov	 edx, 16
  02a2a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  02a31	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4559 :             ImGui::TableSetupColumn("", ImGuiTableColumnFlags_WidthFixed, TEXT_BASE_WIDTH * 30.0f);

  02a36	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR TEXT_BASE_WIDTH$[rbp]
  02a3b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41f00000
  02a43	45 33 c9	 xor	 r9d, r9d
  02a46	0f 28 d0	 movaps	 xmm2, xmm0
  02a49	ba 10 00 00 00	 mov	 edx, 16
  02a4e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  02a55	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4560 :             ImGui::TableSetupColumn("", ImGuiTableColumnFlags_WidthFixed, TEXT_BASE_WIDTH * 15.0f);

  02a5a	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR TEXT_BASE_WIDTH$[rbp]
  02a5f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41700000
  02a67	45 33 c9	 xor	 r9d, r9d
  02a6a	0f 28 d0	 movaps	 xmm2, xmm0
  02a6d	ba 10 00 00 00	 mov	 edx, 16
  02a72	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  02a79	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4561 :             for (int row = 0; row < 5; row++)

  02a7e	c7 85 34 07 00
	00 00 00 00 00	 mov	 DWORD PTR row$70[rbp], 0
  02a88	eb 0e		 jmp	 SHORT $LN159@ShowDemoWi
$LN157@ShowDemoWi:
  02a8a	8b 85 34 07 00
	00		 mov	 eax, DWORD PTR row$70[rbp]
  02a90	ff c0		 inc	 eax
  02a92	89 85 34 07 00
	00		 mov	 DWORD PTR row$70[rbp], eax
$LN159@ShowDemoWi:
  02a98	83 bd 34 07 00
	00 05		 cmp	 DWORD PTR row$70[rbp], 5
  02a9f	0f 8d 87 00 00
	00		 jge	 $LN158@ShowDemoWi

; 4562 :             {
; 4563 :                 ImGui::TableNextRow();

  02aa5	0f 57 c9	 xorps	 xmm1, xmm1
  02aa8	33 c9		 xor	 ecx, ecx
  02aaa	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4564 :                 for (int column = 0; column < 4; column++)

  02aaf	c7 85 54 07 00
	00 00 00 00 00	 mov	 DWORD PTR column$71[rbp], 0
  02ab9	eb 0e		 jmp	 SHORT $LN162@ShowDemoWi
$LN160@ShowDemoWi:
  02abb	8b 85 54 07 00
	00		 mov	 eax, DWORD PTR column$71[rbp]
  02ac1	ff c0		 inc	 eax
  02ac3	89 85 54 07 00
	00		 mov	 DWORD PTR column$71[rbp], eax
$LN162@ShowDemoWi:
  02ac9	83 bd 54 07 00
	00 04		 cmp	 DWORD PTR column$71[rbp], 4
  02ad0	7d 55		 jge	 SHORT $LN161@ShowDemoWi

; 4565 :                 {
; 4566 :                     ImGui::TableSetColumnIndex(column);

  02ad2	8b 8d 54 07 00
	00		 mov	 ecx, DWORD PTR column$71[rbp]
  02ad8	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4567 :                     if (row == 0)

  02add	83 bd 34 07 00
	00 00		 cmp	 DWORD PTR row$70[rbp], 0
  02ae4	75 26		 jne	 SHORT $LN361@ShowDemoWi

; 4568 :                         ImGui::Text("(w: %5.1f)", ImGui::GetContentRegionAvail().x);

  02ae6	48 8d 8d 44 19
	00 00		 lea	 rcx, QWORD PTR $T160[rbp]
  02aed	e8 00 00 00 00	 call	 ?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
  02af2	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [rax]
  02af6	0f 28 c8	 movaps	 xmm1, xmm0
  02af9	66 48 0f 7e ca	 movq	 rdx, xmm1
  02afe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@JJDDAIH@?$CIw?3?5?$CF5?41f?$CJ?$AA@
  02b05	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4569 :                     else

  02b0a	eb 19		 jmp	 SHORT $LN362@ShowDemoWi
$LN361@ShowDemoWi:

; 4570 :                         ImGui::Text("Hello %d,%d", column, row);

  02b0c	44 8b 85 34 07
	00 00		 mov	 r8d, DWORD PTR row$70[rbp]
  02b13	8b 95 54 07 00
	00		 mov	 edx, DWORD PTR column$71[rbp]
  02b19	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MKBMKAAH@Hello?5?$CFd?0?$CFd?$AA@
  02b20	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN362@ShowDemoWi:

; 4571 :                 }

  02b25	eb 94		 jmp	 SHORT $LN160@ShowDemoWi
$LN161@ShowDemoWi:

; 4572 :             }

  02b27	e9 5e ff ff ff	 jmp	 $LN157@ShowDemoWi
$LN158@ShowDemoWi:

; 4573 :             ImGui::EndTable();

  02b2c	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN360@ShowDemoWi:

; 4574 :         }
; 4575 :         ImGui::TreePop();

  02b31	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN356@ShowDemoWi:

; 4576 :     }
; 4577 : 
; 4578 :     if (open_action != -1)

  02b36	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  02b3a	74 24		 je	 SHORT $LN165@ShowDemoWi

; 4579 :         ImGui::SetNextItemOpen(open_action != 0);

  02b3c	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  02b40	74 09		 je	 SHORT $LN500@ShowDemoWi
  02b42	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv1647[rbp], 1
  02b49	eb 07		 jmp	 SHORT $LN501@ShowDemoWi
$LN500@ShowDemoWi:
  02b4b	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv1647[rbp], 0
$LN501@ShowDemoWi:
  02b52	33 d2		 xor	 edx, edx
  02b54	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv1647[rbp]
  02b5b	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN165@ShowDemoWi:

; 4580 :     IMGUI_DEMO_MARKER("Tables/Nested tables");

  02b60	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  02b68	74 28		 je	 SHORT $LN364@ShowDemoWi
  02b6a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  02b70	05 39 03 00 00	 add	 eax, 825		; 00000339H
  02b75	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  02b7c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BF@FIKDGFFI@Tables?1Nested?5tables?$AA@
  02b83	8b d0		 mov	 edx, eax
  02b85	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  02b8c	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN364@ShowDemoWi:
  02b92	33 c0		 xor	 eax, eax
  02b94	85 c0		 test	 eax, eax
  02b96	75 c8		 jne	 SHORT $LN165@ShowDemoWi

; 4581 :     if (ImGui::TreeNode("Nested tables"))

  02b98	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GGCBCFBE@Nested?5tables?$AA@
  02b9f	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  02ba4	0f b6 c0	 movzx	 eax, al
  02ba7	85 c0		 test	 eax, eax
  02ba9	0f 84 b0 01 00
	00		 je	 $LN365@ShowDemoWi

; 4582 :     {
; 4583 :         HelpMarker("This demonstrates embedding a table into another table cell.");

  02baf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DN@GIHJANOI@This?5demonstrates?5embedding?5a?5ta@
  02bb6	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4584 : 
; 4585 :         if (ImGui::BeginTable("table_nested1", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable))

  02bbb	0f 57 d2	 xorps	 xmm2, xmm2
  02bbe	0f 57 c9	 xorps	 xmm1, xmm1
  02bc1	48 8d 8d 64 19
	00 00		 lea	 rcx, QWORD PTR $T161[rbp]
  02bc8	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02bcd	0f 57 c0	 xorps	 xmm0, xmm0
  02bd0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  02bd6	4c 8b c8	 mov	 r9, rax
  02bd9	41 b8 87 07 00
	00		 mov	 r8d, 1927		; 00000787H
  02bdf	ba 02 00 00 00	 mov	 edx, 2
  02be4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@BCBAIFJC@table_nested1?$AA@
  02beb	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  02bf0	0f b6 c0	 movzx	 eax, al
  02bf3	85 c0		 test	 eax, eax
  02bf5	0f 84 5f 01 00
	00		 je	 $LN366@ShowDemoWi

; 4586 :         {
; 4587 :             ImGui::TableSetupColumn("A0");

  02bfb	45 33 c9	 xor	 r9d, r9d
  02bfe	0f 57 d2	 xorps	 xmm2, xmm2
  02c01	33 d2		 xor	 edx, edx
  02c03	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02KOKAPHOJ@A0?$AA@
  02c0a	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4588 :             ImGui::TableSetupColumn("A1");

  02c0f	45 33 c9	 xor	 r9d, r9d
  02c12	0f 57 d2	 xorps	 xmm2, xmm2
  02c15	33 d2		 xor	 edx, edx
  02c17	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02LHLLMGKI@A1?$AA@
  02c1e	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4589 :             ImGui::TableHeadersRow();

  02c23	e8 00 00 00 00	 call	 ?TableHeadersRow@ImGui@@YAXXZ ; ImGui::TableHeadersRow

; 4590 : 
; 4591 :             ImGui::TableNextColumn();

  02c28	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 4592 :             ImGui::Text("A0 Row 0");

  02c2d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NBKIDHKC@A0?5Row?50?$AA@
  02c34	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4593 :             {
; 4594 :                 float rows_height = TEXT_BASE_HEIGHT * 2;

  02c39	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR TEXT_BASE_HEIGHT$[rbp]
  02c3e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  02c46	f3 0f 11 85 74
	07 00 00	 movss	 DWORD PTR rows_height$72[rbp], xmm0

; 4595 :                 if (ImGui::BeginTable("table_nested2", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable))

  02c4e	0f 57 d2	 xorps	 xmm2, xmm2
  02c51	0f 57 c9	 xorps	 xmm1, xmm1
  02c54	48 8d 8d 84 19
	00 00		 lea	 rcx, QWORD PTR $T162[rbp]
  02c5b	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02c60	0f 57 c0	 xorps	 xmm0, xmm0
  02c63	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  02c69	4c 8b c8	 mov	 r9, rax
  02c6c	41 b8 87 07 00
	00		 mov	 r8d, 1927		; 00000787H
  02c72	ba 02 00 00 00	 mov	 edx, 2
  02c77	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DJDNNGFB@table_nested2?$AA@
  02c7e	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  02c83	0f b6 c0	 movzx	 eax, al
  02c86	85 c0		 test	 eax, eax
  02c88	0f 84 94 00 00
	00		 je	 $LN367@ShowDemoWi

; 4596 :                 {
; 4597 :                     ImGui::TableSetupColumn("B0");

  02c8e	45 33 c9	 xor	 r9d, r9d
  02c91	0f 57 d2	 xorps	 xmm2, xmm2
  02c94	33 d2		 xor	 edx, edx
  02c96	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02KMOGEJLA@B0?$AA@
  02c9d	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4598 :                     ImGui::TableSetupColumn("B1");

  02ca2	45 33 c9	 xor	 r9d, r9d
  02ca5	0f 57 d2	 xorps	 xmm2, xmm2
  02ca8	33 d2		 xor	 edx, edx
  02caa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02LFPNHIPB@B1?$AA@
  02cb1	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4599 :                     ImGui::TableHeadersRow();

  02cb6	e8 00 00 00 00	 call	 ?TableHeadersRow@ImGui@@YAXXZ ; ImGui::TableHeadersRow

; 4600 : 
; 4601 :                     ImGui::TableNextRow(ImGuiTableRowFlags_None, rows_height);

  02cbb	f3 0f 10 8d 74
	07 00 00	 movss	 xmm1, DWORD PTR rows_height$72[rbp]
  02cc3	33 c9		 xor	 ecx, ecx
  02cc5	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4602 :                     ImGui::TableNextColumn();

  02cca	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 4603 :                     ImGui::Text("B0 Row 0");

  02ccf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OICFALGH@B0?5Row?50?$AA@
  02cd6	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4604 :                     ImGui::TableNextColumn();

  02cdb	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 4605 :                     ImGui::Text("B1 Row 0");

  02ce0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08CEIPALPJ@B1?5Row?50?$AA@
  02ce7	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4606 :                     ImGui::TableNextRow(ImGuiTableRowFlags_None, rows_height);

  02cec	f3 0f 10 8d 74
	07 00 00	 movss	 xmm1, DWORD PTR rows_height$72[rbp]
  02cf4	33 c9		 xor	 ecx, ecx
  02cf6	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4607 :                     ImGui::TableNextColumn();

  02cfb	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 4608 :                     ImGui::Text("B0 Row 1");

  02d00	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08PBDODKCG@B0?5Row?51?$AA@
  02d07	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4609 :                     ImGui::TableNextColumn();

  02d0c	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 4610 :                     ImGui::Text("B1 Row 1");

  02d11	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08DNJEDKLI@B1?5Row?51?$AA@
  02d18	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4611 : 
; 4612 :                     ImGui::EndTable();

  02d1d	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN367@ShowDemoWi:

; 4613 :                 }
; 4614 :             }
; 4615 :             ImGui::TableNextColumn(); ImGui::Text("A1 Row 0");

  02d22	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  02d27	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08BNACDHDM@A1?5Row?50?$AA@
  02d2e	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4616 :             ImGui::TableNextColumn(); ImGui::Text("A0 Row 1");

  02d33	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  02d38	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08MILDAGOD@A0?5Row?51?$AA@
  02d3f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4617 :             ImGui::TableNextColumn(); ImGui::Text("A1 Row 1");

  02d44	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  02d49	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08EBJAGHN@A1?5Row?51?$AA@
  02d50	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4618 :             ImGui::EndTable();

  02d55	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN366@ShowDemoWi:

; 4619 :         }
; 4620 :         ImGui::TreePop();

  02d5a	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN365@ShowDemoWi:

; 4621 :     }
; 4622 : 
; 4623 :     if (open_action != -1)

  02d5f	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  02d63	74 24		 je	 SHORT $LN168@ShowDemoWi

; 4624 :         ImGui::SetNextItemOpen(open_action != 0);

  02d65	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  02d69	74 09		 je	 SHORT $LN502@ShowDemoWi
  02d6b	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv1781[rbp], 1
  02d72	eb 07		 jmp	 SHORT $LN503@ShowDemoWi
$LN502@ShowDemoWi:
  02d74	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv1781[rbp], 0
$LN503@ShowDemoWi:
  02d7b	33 d2		 xor	 edx, edx
  02d7d	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv1781[rbp]
  02d84	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN168@ShowDemoWi:

; 4625 :     IMGUI_DEMO_MARKER("Tables/Row height");

  02d89	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  02d91	74 28		 je	 SHORT $LN369@ShowDemoWi
  02d93	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  02d99	05 66 03 00 00	 add	 eax, 870		; 00000366H
  02d9e	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  02da5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BC@JNEADBDA@Tables?1Row?5height?$AA@
  02dac	8b d0		 mov	 edx, eax
  02dae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  02db5	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN369@ShowDemoWi:
  02dbb	33 c0		 xor	 eax, eax
  02dbd	85 c0		 test	 eax, eax
  02dbf	75 c8		 jne	 SHORT $LN168@ShowDemoWi

; 4626 :     if (ImGui::TreeNode("Row height"))

  02dc1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@CGNGNJMG@Row?5height?$AA@
  02dc8	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  02dcd	0f b6 c0	 movzx	 eax, al
  02dd0	85 c0		 test	 eax, eax
  02dd2	0f 84 d4 00 00
	00		 je	 $LN370@ShowDemoWi

; 4627 :     {
; 4628 :         HelpMarker("You can pass a 'min_row_height' to TableNextRow().\n\nRows are padded with 'style.CellPadding.y' on top and bottom, so effectively the minimum row height will always be >= 'style.CellPadding.y * 2.0f'.\n\nWe cannot honor a _maximum_ row height as that would require a unique clipping rectangle per row.");

  02dd8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BCL@DDLHCPHA@You?5can?5pass?5a?5?8min_row_height?8?5@
  02ddf	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4629 :         if (ImGui::BeginTable("table_row_height", 1, ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersInnerV))

  02de4	0f 57 d2	 xorps	 xmm2, xmm2
  02de7	0f 57 c9	 xorps	 xmm1, xmm1
  02dea	48 8d 8d a4 19
	00 00		 lea	 rcx, QWORD PTR $T163[rbp]
  02df1	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02df6	0f 57 c0	 xorps	 xmm0, xmm0
  02df9	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  02dff	4c 8b c8	 mov	 r9, rax
  02e02	41 b8 00 07 00
	00		 mov	 r8d, 1792		; 00000700H
  02e08	ba 01 00 00 00	 mov	 edx, 1
  02e0d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OGGECGJA@table_row_height?$AA@
  02e14	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  02e19	0f b6 c0	 movzx	 eax, al
  02e1c	85 c0		 test	 eax, eax
  02e1e	0f 84 83 00 00
	00		 je	 $LN371@ShowDemoWi

; 4630 :         {
; 4631 :             for (int row = 0; row < 10; row++)

  02e24	c7 85 94 07 00
	00 00 00 00 00	 mov	 DWORD PTR row$73[rbp], 0
  02e2e	eb 0e		 jmp	 SHORT $LN171@ShowDemoWi
$LN169@ShowDemoWi:
  02e30	8b 85 94 07 00
	00		 mov	 eax, DWORD PTR row$73[rbp]
  02e36	ff c0		 inc	 eax
  02e38	89 85 94 07 00
	00		 mov	 DWORD PTR row$73[rbp], eax
$LN171@ShowDemoWi:
  02e3e	83 bd 94 07 00
	00 0a		 cmp	 DWORD PTR row$73[rbp], 10
  02e45	7d 5b		 jge	 SHORT $LN170@ShowDemoWi

; 4632 :             {
; 4633 :                 float min_row_height = (float)(int)(TEXT_BASE_HEIGHT * 0.30f * row);

  02e47	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR TEXT_BASE_HEIGHT$[rbp]
  02e4c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e99999a
  02e54	f3 0f 2a 8d 94
	07 00 00	 cvtsi2ss xmm1, DWORD PTR row$73[rbp]
  02e5c	f3 0f 59 c1	 mulss	 xmm0, xmm1
  02e60	f3 0f 2c c0	 cvttss2si eax, xmm0
  02e64	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  02e68	f3 0f 11 85 b4
	07 00 00	 movss	 DWORD PTR min_row_height$74[rbp], xmm0

; 4634 :                 ImGui::TableNextRow(ImGuiTableRowFlags_None, min_row_height);

  02e70	f3 0f 10 8d b4
	07 00 00	 movss	 xmm1, DWORD PTR min_row_height$74[rbp]
  02e78	33 c9		 xor	 ecx, ecx
  02e7a	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4635 :                 ImGui::TableNextColumn();

  02e7f	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 4636 :                 ImGui::Text("min_row_height = %.2f", min_row_height);

  02e84	f3 0f 5a 85 b4
	07 00 00	 cvtss2sd xmm0, DWORD PTR min_row_height$74[rbp]
  02e8c	0f 28 c8	 movaps	 xmm1, xmm0
  02e8f	66 48 0f 7e ca	 movq	 rdx, xmm1
  02e94	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@PBGJBMCG@min_row_height?5?$DN?5?$CF?42f?$AA@
  02e9b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4637 :             }

  02ea0	eb 8e		 jmp	 SHORT $LN169@ShowDemoWi
$LN170@ShowDemoWi:

; 4638 :             ImGui::EndTable();

  02ea2	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN371@ShowDemoWi:

; 4639 :         }
; 4640 :         ImGui::TreePop();

  02ea7	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN370@ShowDemoWi:

; 4641 :     }
; 4642 : 
; 4643 :     if (open_action != -1)

  02eac	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  02eb0	74 24		 je	 SHORT $LN174@ShowDemoWi

; 4644 :         ImGui::SetNextItemOpen(open_action != 0);

  02eb2	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  02eb6	74 09		 je	 SHORT $LN504@ShowDemoWi
  02eb8	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv1823[rbp], 1
  02ebf	eb 07		 jmp	 SHORT $LN505@ShowDemoWi
$LN504@ShowDemoWi:
  02ec1	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv1823[rbp], 0
$LN505@ShowDemoWi:
  02ec8	33 d2		 xor	 edx, edx
  02eca	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv1823[rbp]
  02ed1	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN174@ShowDemoWi:

; 4645 :     IMGUI_DEMO_MARKER("Tables/Outer size");

  02ed6	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  02ede	74 28		 je	 SHORT $LN373@ShowDemoWi
  02ee0	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  02ee6	05 7a 03 00 00	 add	 eax, 890		; 0000037aH
  02eeb	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  02ef2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BC@IKJBKNNA@Tables?1Outer?5size?$AA@
  02ef9	8b d0		 mov	 edx, eax
  02efb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  02f02	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN373@ShowDemoWi:
  02f08	33 c0		 xor	 eax, eax
  02f0a	85 c0		 test	 eax, eax
  02f0c	75 c8		 jne	 SHORT $LN174@ShowDemoWi

; 4646 :     if (ImGui::TreeNode("Outer size"))

  02f0e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DBAHEFCG@Outer?5size?$AA@
  02f15	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  02f1a	0f b6 c0	 movzx	 eax, al
  02f1d	85 c0		 test	 eax, eax
  02f1f	0f 84 18 03 00
	00		 je	 $LN374@ShowDemoWi

; 4647 :     {
; 4648 :         // Showcasing use of ImGuiTableFlags_NoHostExtendX and ImGuiTableFlags_NoHostExtendY
; 4649 :         // Important to that note how the two flags have slightly different behaviors!
; 4650 :         ImGui::Text("Using NoHostExtendX and NoHostExtendY:");

  02f25	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CH@GEPJHBOA@Using?5NoHostExtendX?5and?5NoHostEx@
  02f2c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4651 :         PushStyleCompact();

  02f31	e8 00 00 00 00	 call	 ?PushStyleCompact@@YAXXZ ; PushStyleCompact

; 4652 :         static ImGuiTableFlags flags = ImGuiTableFlags_Borders | ImGuiTableFlags_Resizable | ImGuiTableFlags_ContextMenuInBody | ImGuiTableFlags_RowBg | ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_NoHostExtendX;
; 4653 :         ImGui::CheckboxFlags("ImGuiTableFlags_NoHostExtendX", &flags, ImGuiTableFlags_NoHostExtendX);

  02f36	41 b8 00 00 01
	00		 mov	 r8d, 65536		; 00010000H
  02f3c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?BFH@??ShowDemoWindowTables@@YAXXZ@4HA
  02f43	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@NGJMFDHH@ImGuiTableFlags_NoHostExtendX?$AA@
  02f4a	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4654 :         ImGui::SameLine(); HelpMarker("Make outer width auto-fit to columns, overriding outer_size.x value.\n\nOnly available when ScrollX/ScrollY are disabled and Stretch columns are not used.");

  02f4f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  02f57	0f 57 c0	 xorps	 xmm0, xmm0
  02f5a	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  02f5f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0JJ@MNEKIKBK@Make?5outer?5width?5auto?9fit?5to?5col@
  02f66	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4655 :         ImGui::CheckboxFlags("ImGuiTableFlags_NoHostExtendY", &flags, ImGuiTableFlags_NoHostExtendY);

  02f6b	41 b8 00 00 02
	00		 mov	 r8d, 131072		; 00020000H
  02f71	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?BFH@??ShowDemoWindowTables@@YAXXZ@4HA
  02f78	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@MPIHGCDG@ImGuiTableFlags_NoHostExtendY?$AA@
  02f7f	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4656 :         ImGui::SameLine(); HelpMarker("Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit).\n\nOnly available when ScrollX/ScrollY are disabled. Data below the limit will be clipped and not visible.");

  02f84	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  02f8c	0f 57 c0	 xorps	 xmm0, xmm0
  02f8f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  02f94	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0MH@EOAMIMDE@Make?5outer?5height?5stop?5exactly?5a@
  02f9b	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4657 :         PopStyleCompact();

  02fa0	e8 00 00 00 00	 call	 ?PopStyleCompact@@YAXXZ	; PopStyleCompact

; 4658 : 
; 4659 :         ImVec2 outer_size = ImVec2(0.0f, TEXT_BASE_HEIGHT * 5.5f);

  02fa5	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR TEXT_BASE_HEIGHT$[rbp]
  02faa	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40b00000
  02fb2	0f 28 d0	 movaps	 xmm2, xmm0
  02fb5	0f 57 c9	 xorps	 xmm1, xmm1
  02fb8	48 8d 8d d8 07
	00 00		 lea	 rcx, QWORD PTR outer_size$75[rbp]
  02fbf	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 4660 :         if (ImGui::BeginTable("table1", 3, flags, outer_size))

  02fc4	0f 57 c0	 xorps	 xmm0, xmm0
  02fc7	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  02fcd	4c 8d 8d d8 07
	00 00		 lea	 r9, QWORD PTR outer_size$75[rbp]
  02fd4	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags@?BFH@??ShowDemoWindowTables@@YAXXZ@4HA
  02fdb	ba 03 00 00 00	 mov	 edx, 3
  02fe0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KDFPGKKJ@table1?$AA@
  02fe7	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  02fec	0f b6 c0	 movzx	 eax, al
  02fef	85 c0		 test	 eax, eax
  02ff1	74 77		 je	 SHORT $LN375@ShowDemoWi

; 4661 :         {
; 4662 :             for (int row = 0; row < 10; row++)

  02ff3	c7 85 f4 07 00
	00 00 00 00 00	 mov	 DWORD PTR row$76[rbp], 0
  02ffd	eb 0e		 jmp	 SHORT $LN177@ShowDemoWi
$LN175@ShowDemoWi:
  02fff	8b 85 f4 07 00
	00		 mov	 eax, DWORD PTR row$76[rbp]
  03005	ff c0		 inc	 eax
  03007	89 85 f4 07 00
	00		 mov	 DWORD PTR row$76[rbp], eax
$LN177@ShowDemoWi:
  0300d	83 bd f4 07 00
	00 0a		 cmp	 DWORD PTR row$76[rbp], 10
  03014	7d 4f		 jge	 SHORT $LN176@ShowDemoWi

; 4663 :             {
; 4664 :                 ImGui::TableNextRow();

  03016	0f 57 c9	 xorps	 xmm1, xmm1
  03019	33 c9		 xor	 ecx, ecx
  0301b	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4665 :                 for (int column = 0; column < 3; column++)

  03020	c7 85 14 08 00
	00 00 00 00 00	 mov	 DWORD PTR column$77[rbp], 0
  0302a	eb 0e		 jmp	 SHORT $LN180@ShowDemoWi
$LN178@ShowDemoWi:
  0302c	8b 85 14 08 00
	00		 mov	 eax, DWORD PTR column$77[rbp]
  03032	ff c0		 inc	 eax
  03034	89 85 14 08 00
	00		 mov	 DWORD PTR column$77[rbp], eax
$LN180@ShowDemoWi:
  0303a	83 bd 14 08 00
	00 03		 cmp	 DWORD PTR column$77[rbp], 3
  03041	7d 20		 jge	 SHORT $LN179@ShowDemoWi

; 4666 :                 {
; 4667 :                     ImGui::TableNextColumn();

  03043	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 4668 :                     ImGui::Text("Cell %d,%d", column, row);

  03048	44 8b 85 f4 07
	00 00		 mov	 r8d, DWORD PTR row$76[rbp]
  0304f	8b 95 14 08 00
	00		 mov	 edx, DWORD PTR column$77[rbp]
  03055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@PAJCHPDH@Cell?5?$CFd?0?$CFd?$AA@
  0305c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4669 :                 }

  03061	eb c9		 jmp	 SHORT $LN178@ShowDemoWi
$LN179@ShowDemoWi:

; 4670 :             }

  03063	eb 9a		 jmp	 SHORT $LN175@ShowDemoWi
$LN176@ShowDemoWi:

; 4671 :             ImGui::EndTable();

  03065	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN375@ShowDemoWi:

; 4672 :         }
; 4673 :         ImGui::SameLine();

  0306a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  03072	0f 57 c0	 xorps	 xmm0, xmm0
  03075	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 4674 :         ImGui::Text("Hello!");

  0307a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KPGIMOHP@Hello?$CB?$AA@
  03081	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4675 : 
; 4676 :         ImGui::Spacing();

  03086	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 4677 : 
; 4678 :         ImGui::Text("Using explicit size:");

  0308b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@KMHJAJHG@Using?5explicit?5size?3?$AA@
  03092	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4679 :         if (ImGui::BeginTable("table2", 3, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg, ImVec2(TEXT_BASE_WIDTH * 30, 0.0f)))

  03097	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR TEXT_BASE_WIDTH$[rbp]
  0309c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41f00000
  030a4	0f 57 d2	 xorps	 xmm2, xmm2
  030a7	0f 28 c8	 movaps	 xmm1, xmm0
  030aa	48 8d 8d c4 19
	00 00		 lea	 rcx, QWORD PTR $T164[rbp]
  030b1	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  030b6	0f 57 c0	 xorps	 xmm0, xmm0
  030b9	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  030bf	4c 8b c8	 mov	 r9, rax
  030c2	41 b8 c0 07 00
	00		 mov	 r8d, 1984		; 000007c0H
  030c8	ba 03 00 00 00	 mov	 edx, 3
  030cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IIHCDJGK@table2?$AA@
  030d4	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  030d9	0f b6 c0	 movzx	 eax, al
  030dc	85 c0		 test	 eax, eax
  030de	74 77		 je	 SHORT $LN376@ShowDemoWi

; 4680 :         {
; 4681 :             for (int row = 0; row < 5; row++)

  030e0	c7 85 34 08 00
	00 00 00 00 00	 mov	 DWORD PTR row$78[rbp], 0
  030ea	eb 0e		 jmp	 SHORT $LN183@ShowDemoWi
$LN181@ShowDemoWi:
  030ec	8b 85 34 08 00
	00		 mov	 eax, DWORD PTR row$78[rbp]
  030f2	ff c0		 inc	 eax
  030f4	89 85 34 08 00
	00		 mov	 DWORD PTR row$78[rbp], eax
$LN183@ShowDemoWi:
  030fa	83 bd 34 08 00
	00 05		 cmp	 DWORD PTR row$78[rbp], 5
  03101	7d 4f		 jge	 SHORT $LN182@ShowDemoWi

; 4682 :             {
; 4683 :                 ImGui::TableNextRow();

  03103	0f 57 c9	 xorps	 xmm1, xmm1
  03106	33 c9		 xor	 ecx, ecx
  03108	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4684 :                 for (int column = 0; column < 3; column++)

  0310d	c7 85 54 08 00
	00 00 00 00 00	 mov	 DWORD PTR column$79[rbp], 0
  03117	eb 0e		 jmp	 SHORT $LN186@ShowDemoWi
$LN184@ShowDemoWi:
  03119	8b 85 54 08 00
	00		 mov	 eax, DWORD PTR column$79[rbp]
  0311f	ff c0		 inc	 eax
  03121	89 85 54 08 00
	00		 mov	 DWORD PTR column$79[rbp], eax
$LN186@ShowDemoWi:
  03127	83 bd 54 08 00
	00 03		 cmp	 DWORD PTR column$79[rbp], 3
  0312e	7d 20		 jge	 SHORT $LN185@ShowDemoWi

; 4685 :                 {
; 4686 :                     ImGui::TableNextColumn();

  03130	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 4687 :                     ImGui::Text("Cell %d,%d", column, row);

  03135	44 8b 85 34 08
	00 00		 mov	 r8d, DWORD PTR row$78[rbp]
  0313c	8b 95 54 08 00
	00		 mov	 edx, DWORD PTR column$79[rbp]
  03142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@PAJCHPDH@Cell?5?$CFd?0?$CFd?$AA@
  03149	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4688 :                 }

  0314e	eb c9		 jmp	 SHORT $LN184@ShowDemoWi
$LN185@ShowDemoWi:

; 4689 :             }

  03150	eb 9a		 jmp	 SHORT $LN181@ShowDemoWi
$LN182@ShowDemoWi:

; 4690 :             ImGui::EndTable();

  03152	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN376@ShowDemoWi:

; 4691 :         }
; 4692 :         ImGui::SameLine();

  03157	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0315f	0f 57 c0	 xorps	 xmm0, xmm0
  03162	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 4693 :         if (ImGui::BeginTable("table3", 3, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg, ImVec2(TEXT_BASE_WIDTH * 30, 0.0f)))

  03167	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR TEXT_BASE_WIDTH$[rbp]
  0316c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41f00000
  03174	0f 57 d2	 xorps	 xmm2, xmm2
  03177	0f 28 c8	 movaps	 xmm1, xmm0
  0317a	48 8d 8d e4 19
	00 00		 lea	 rcx, QWORD PTR $T165[rbp]
  03181	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  03186	0f 57 c0	 xorps	 xmm0, xmm0
  03189	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0318f	4c 8b c8	 mov	 r9, rax
  03192	41 b8 c0 07 00
	00		 mov	 r8d, 1984		; 000007c0H
  03198	ba 03 00 00 00	 mov	 edx, 3
  0319d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06JBGJAICL@table3?$AA@
  031a4	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  031a9	0f b6 c0	 movzx	 eax, al
  031ac	85 c0		 test	 eax, eax
  031ae	0f 84 84 00 00
	00		 je	 $LN377@ShowDemoWi

; 4694 :         {
; 4695 :             for (int row = 0; row < 3; row++)

  031b4	c7 85 74 08 00
	00 00 00 00 00	 mov	 DWORD PTR row$80[rbp], 0
  031be	eb 0e		 jmp	 SHORT $LN189@ShowDemoWi
$LN187@ShowDemoWi:
  031c0	8b 85 74 08 00
	00		 mov	 eax, DWORD PTR row$80[rbp]
  031c6	ff c0		 inc	 eax
  031c8	89 85 74 08 00
	00		 mov	 DWORD PTR row$80[rbp], eax
$LN189@ShowDemoWi:
  031ce	83 bd 74 08 00
	00 03		 cmp	 DWORD PTR row$80[rbp], 3
  031d5	7d 5c		 jge	 SHORT $LN188@ShowDemoWi

; 4696 :             {
; 4697 :                 ImGui::TableNextRow(0, TEXT_BASE_HEIGHT * 1.5f);

  031d7	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR TEXT_BASE_HEIGHT$[rbp]
  031dc	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3fc00000
  031e4	0f 28 c8	 movaps	 xmm1, xmm0
  031e7	33 c9		 xor	 ecx, ecx
  031e9	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4698 :                 for (int column = 0; column < 3; column++)

  031ee	c7 85 94 08 00
	00 00 00 00 00	 mov	 DWORD PTR column$81[rbp], 0
  031f8	eb 0e		 jmp	 SHORT $LN192@ShowDemoWi
$LN190@ShowDemoWi:
  031fa	8b 85 94 08 00
	00		 mov	 eax, DWORD PTR column$81[rbp]
  03200	ff c0		 inc	 eax
  03202	89 85 94 08 00
	00		 mov	 DWORD PTR column$81[rbp], eax
$LN192@ShowDemoWi:
  03208	83 bd 94 08 00
	00 03		 cmp	 DWORD PTR column$81[rbp], 3
  0320f	7d 20		 jge	 SHORT $LN191@ShowDemoWi

; 4699 :                 {
; 4700 :                     ImGui::TableNextColumn();

  03211	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 4701 :                     ImGui::Text("Cell %d,%d", column, row);

  03216	44 8b 85 74 08
	00 00		 mov	 r8d, DWORD PTR row$80[rbp]
  0321d	8b 95 94 08 00
	00		 mov	 edx, DWORD PTR column$81[rbp]
  03223	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@PAJCHPDH@Cell?5?$CFd?0?$CFd?$AA@
  0322a	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4702 :                 }

  0322f	eb c9		 jmp	 SHORT $LN190@ShowDemoWi
$LN191@ShowDemoWi:

; 4703 :             }

  03231	eb 8d		 jmp	 SHORT $LN187@ShowDemoWi
$LN188@ShowDemoWi:

; 4704 :             ImGui::EndTable();

  03233	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN377@ShowDemoWi:

; 4705 :         }
; 4706 : 
; 4707 :         ImGui::TreePop();

  03238	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN374@ShowDemoWi:

; 4708 :     }
; 4709 : 
; 4710 :     if (open_action != -1)

  0323d	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  03241	74 24		 je	 SHORT $LN195@ShowDemoWi

; 4711 :         ImGui::SetNextItemOpen(open_action != 0);

  03243	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  03247	74 09		 je	 SHORT $LN506@ShowDemoWi
  03249	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv1924[rbp], 1
  03250	eb 07		 jmp	 SHORT $LN507@ShowDemoWi
$LN506@ShowDemoWi:
  03252	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv1924[rbp], 0
$LN507@ShowDemoWi:
  03259	33 d2		 xor	 edx, edx
  0325b	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv1924[rbp]
  03262	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN195@ShowDemoWi:

; 4712 :     IMGUI_DEMO_MARKER("Tables/Background color");

  03267	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0326f	74 28		 je	 SHORT $LN379@ShowDemoWi
  03271	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  03277	05 bd 03 00 00	 add	 eax, 957		; 000003bdH
  0327c	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  03283	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BI@OPNKMFLE@Tables?1Background?5color?$AA@
  0328a	8b d0		 mov	 edx, eax
  0328c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  03293	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN379@ShowDemoWi:
  03299	33 c0		 xor	 eax, eax
  0329b	85 c0		 test	 eax, eax
  0329d	75 c8		 jne	 SHORT $LN195@ShowDemoWi

; 4713 :     if (ImGui::TreeNode("Background color"))

  0329f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@GFJFBMCH@Background?5color?$AA@
  032a6	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  032ab	0f b6 c0	 movzx	 eax, al
  032ae	85 c0		 test	 eax, eax
  032b0	0f 84 cf 03 00
	00		 je	 $LN380@ShowDemoWi

; 4714 :     {
; 4715 :         static ImGuiTableFlags flags = ImGuiTableFlags_RowBg;
; 4716 :         static int row_bg_type = 1;
; 4717 :         static int row_bg_target = 1;
; 4718 :         static int cell_bg_type = 1;
; 4719 : 
; 4720 :         PushStyleCompact();

  032b6	e8 00 00 00 00	 call	 ?PushStyleCompact@@YAXXZ ; PushStyleCompact

; 4721 :         ImGui::CheckboxFlags("ImGuiTableFlags_Borders", &flags, ImGuiTableFlags_Borders);

  032bb	41 b8 80 07 00
	00		 mov	 r8d, 1920		; 00000780H
  032c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA
  032c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@KLDEGJMI@ImGuiTableFlags_Borders?$AA@
  032cf	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4722 :         ImGui::CheckboxFlags("ImGuiTableFlags_RowBg", &flags, ImGuiTableFlags_RowBg);

  032d4	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  032da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA
  032e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@FNKJINH@ImGuiTableFlags_RowBg?$AA@
  032e8	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4723 :         ImGui::SameLine(); HelpMarker("ImGuiTableFlags_RowBg automatically sets RowBg0 to alternative colors pulled from the Style.");

  032ed	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  032f5	0f 57 c0	 xorps	 xmm0, xmm0
  032f8	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  032fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FN@IEBFCIOP@ImGuiTableFlags_RowBg?5automatica@
  03304	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4724 :         ImGui::Combo("row bg type", (int*)&row_bg_type, "None\0Red\0Gradient\0");

  03309	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  0330f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@FFKBLHFP@None?$AARed?$AAGradient?$AA?$AA@
  03316	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?row_bg_type@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA
  0331d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@JEHONGHH@row?5bg?5type?$AA@
  03324	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAH0H@Z ; ImGui::Combo

; 4725 :         ImGui::Combo("row bg target", (int*)&row_bg_target, "RowBg0\0RowBg1\0"); ImGui::SameLine(); HelpMarker("Target RowBg0 to override the alternating odd/even colors,\nTarget RowBg1 to blend with them.");

  03329	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  0332f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@DAIHOKO@RowBg0?$AARowBg1?$AA?$AA@
  03336	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?row_bg_target@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA
  0333d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DFMNKCIK@row?5bg?5target?$AA@
  03344	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAH0H@Z ; ImGui::Combo
  03349	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  03351	0f 57 c0	 xorps	 xmm0, xmm0
  03354	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  03359	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FN@LEKMPDJD@Target?5RowBg0?5to?5override?5the?5al@
  03360	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4726 :         ImGui::Combo("cell bg type", (int*)&cell_bg_type, "None\0Blue\0"); ImGui::SameLine(); HelpMarker("We are colorizing cells to B1->C2 here.");

  03365	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  0336b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@DAKPLPKA@None?$AABlue?$AA?$AA@
  03372	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?cell_bg_type@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA
  03379	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@GNMKPIGH@cell?5bg?5type?$AA@
  03380	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAH0H@Z ; ImGui::Combo
  03385	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0338d	0f 57 c0	 xorps	 xmm0, xmm0
  03390	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  03395	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@GJIGBOCB@We?5are?5colorizing?5cells?5to?5B1?9?$DOC@
  0339c	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4727 :         IM_ASSERT(row_bg_type >= 0 && row_bg_type <= 2);

  033a1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?row_bg_type@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA, 0
  033a8	7c 09		 jl	 SHORT $LN508@ShowDemoWi
  033aa	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?row_bg_type@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA, 2
  033b1	7e 24		 jle	 SHORT $LN509@ShowDemoWi
$LN508@ShowDemoWi:
  033b3	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  033b9	05 cc 03 00 00	 add	 eax, 972		; 000003ccH
  033be	44 8b c0	 mov	 r8d, eax
  033c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@DPDGFNDC@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  033c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@GEJGPOKK@?$AAr?$AAo?$AAw?$AA_?$AAb?$AAg?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAo?$AAw?$AA_?$AAb?$AAg?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5@
  033cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  033d5	33 c0		 xor	 eax, eax
$LN509@ShowDemoWi:

; 4728 :         IM_ASSERT(row_bg_target >= 0 && row_bg_target <= 1);

  033d7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?row_bg_target@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA, 0
  033de	7c 09		 jl	 SHORT $LN510@ShowDemoWi
  033e0	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?row_bg_target@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA, 1
  033e7	7e 24		 jle	 SHORT $LN511@ShowDemoWi
$LN510@ShowDemoWi:
  033e9	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  033ef	05 cd 03 00 00	 add	 eax, 973		; 000003cdH
  033f4	44 8b c0	 mov	 r8d, eax
  033f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@DPDGFNDC@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  033fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@HBJACPON@?$AAr?$AAo?$AAw?$AA_?$AAb?$AAg?$AA_?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAo?$AAw?$AA_?$AAb?$AAg?$AA_?$AAt?$AAa?$AAr@
  03405	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0340b	33 c0		 xor	 eax, eax
$LN511@ShowDemoWi:

; 4729 :         IM_ASSERT(cell_bg_type >= 0 && cell_bg_type <= 1);

  0340d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?cell_bg_type@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA, 0
  03414	7c 09		 jl	 SHORT $LN512@ShowDemoWi
  03416	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?cell_bg_type@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA, 1
  0341d	7e 24		 jle	 SHORT $LN513@ShowDemoWi
$LN512@ShowDemoWi:
  0341f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  03425	05 ce 03 00 00	 add	 eax, 974		; 000003ceH
  0342a	44 8b c0	 mov	 r8d, eax
  0342d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@DPDGFNDC@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  03434	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@JOPKKHHI@?$AAc?$AAe?$AAl?$AAl?$AA_?$AAb?$AAg?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AAe?$AAl?$AAl?$AA_?$AAb?$AAg?$AA_?$AAt?$AAy?$AAp@
  0343b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03441	33 c0		 xor	 eax, eax
$LN513@ShowDemoWi:

; 4730 :         PopStyleCompact();

  03443	e8 00 00 00 00	 call	 ?PopStyleCompact@@YAXXZ	; PopStyleCompact

; 4731 : 
; 4732 :         if (ImGui::BeginTable("table1", 5, flags))

  03448	0f 57 d2	 xorps	 xmm2, xmm2
  0344b	0f 57 c9	 xorps	 xmm1, xmm1
  0344e	48 8d 8d 04 1a
	00 00		 lea	 rcx, QWORD PTR $T166[rbp]
  03455	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0345a	0f 57 c0	 xorps	 xmm0, xmm0
  0345d	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  03463	4c 8b c8	 mov	 r9, rax
  03466	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA
  0346d	ba 05 00 00 00	 mov	 edx, 5
  03472	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KDFPGKKJ@table1?$AA@
  03479	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  0347e	0f b6 c0	 movzx	 eax, al
  03481	85 c0		 test	 eax, eax
  03483	0f 84 f7 01 00
	00		 je	 $LN381@ShowDemoWi

; 4733 :         {
; 4734 :             for (int row = 0; row < 6; row++)

  03489	c7 85 b4 08 00
	00 00 00 00 00	 mov	 DWORD PTR row$82[rbp], 0
  03493	eb 0e		 jmp	 SHORT $LN198@ShowDemoWi
$LN196@ShowDemoWi:
  03495	8b 85 b4 08 00
	00		 mov	 eax, DWORD PTR row$82[rbp]
  0349b	ff c0		 inc	 eax
  0349d	89 85 b4 08 00
	00		 mov	 DWORD PTR row$82[rbp], eax
$LN198@ShowDemoWi:
  034a3	83 bd b4 08 00
	00 06		 cmp	 DWORD PTR row$82[rbp], 6
  034aa	0f 8d cb 01 00
	00		 jge	 $LN197@ShowDemoWi

; 4735 :             {
; 4736 :                 ImGui::TableNextRow();

  034b0	0f 57 c9	 xorps	 xmm1, xmm1
  034b3	33 c9		 xor	 ecx, ecx
  034b5	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4737 : 
; 4738 :                 // Demonstrate setting a row background color with 'ImGui::TableSetBgColor(ImGuiTableBgTarget_RowBgX, ...)'
; 4739 :                 // We use a transparent color so we can see the one behind in case our target is RowBg1 and RowBg0 was already targeted by the ImGuiTableFlags_RowBg flag.
; 4740 :                 if (row_bg_type != 0)

  034ba	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?row_bg_type@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA, 0
  034c1	0f 84 d2 00 00
	00		 je	 $LN382@ShowDemoWi

; 4741 :                 {
; 4742 :                     ImU32 row_bg_color = ImGui::GetColorU32(row_bg_type == 1 ? ImVec4(0.7f, 0.3f, 0.3f, 0.65f) : ImVec4(0.2f + row * 0.1f, 0.2f, 0.2f, 0.65f)); // Flat or Gradient?

  034c7	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?row_bg_type@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA, 1
  034ce	75 3b		 jne	 SHORT $LN514@ShowDemoWi
  034d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  034d8	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  034de	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e99999a
  034e6	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e99999a
  034ee	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f333333
  034f6	48 8d 8d 44 1a
	00 00		 lea	 rcx, QWORD PTR $T168[rbp]
  034fd	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  03502	48 89 85 c8 1d
	00 00		 mov	 QWORD PTR tv2051[rbp], rax
  03509	eb 53		 jmp	 SHORT $LN515@ShowDemoWi
$LN514@ShowDemoWi:
  0350b	f3 0f 2a 85 b4
	08 00 00	 cvtsi2ss xmm0, DWORD PTR row$82[rbp]
  03513	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3dcccccd
  0351b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e4ccccd
  03523	f3 0f 58 c8	 addss	 xmm1, xmm0
  03527	0f 28 c1	 movaps	 xmm0, xmm1
  0352a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f266666
  03532	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [rsp+32], xmm1
  03538	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e4ccccd
  03540	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e4ccccd
  03548	0f 28 c8	 movaps	 xmm1, xmm0
  0354b	48 8d 8d 74 1a
	00 00		 lea	 rcx, QWORD PTR $T169[rbp]
  03552	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  03557	48 89 85 c8 1d
	00 00		 mov	 QWORD PTR tv2051[rbp], rax
$LN515@ShowDemoWi:
  0355e	48 8b 85 c8 1d
	00 00		 mov	 rax, QWORD PTR tv2051[rbp]
  03565	48 89 85 28 1a
	00 00		 mov	 QWORD PTR $T167[rbp], rax
  0356c	48 8b 8d 28 1a
	00 00		 mov	 rcx, QWORD PTR $T167[rbp]
  03573	e8 00 00 00 00	 call	 ?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z ; ImGui::GetColorU32
  03578	89 85 d4 08 00
	00		 mov	 DWORD PTR row_bg_color$83[rbp], eax

; 4743 :                     ImGui::TableSetBgColor(ImGuiTableBgTarget_RowBg0 + row_bg_target, row_bg_color);

  0357e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?row_bg_target@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA
  03584	ff c0		 inc	 eax
  03586	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  0358c	8b 95 d4 08 00
	00		 mov	 edx, DWORD PTR row_bg_color$83[rbp]
  03592	8b c8		 mov	 ecx, eax
  03594	e8 00 00 00 00	 call	 ?TableSetBgColor@ImGui@@YAXHIH@Z ; ImGui::TableSetBgColor
$LN382@ShowDemoWi:

; 4744 :                 }
; 4745 : 
; 4746 :                 // Fill cells
; 4747 :                 for (int column = 0; column < 5; column++)

  03599	c7 85 f4 08 00
	00 00 00 00 00	 mov	 DWORD PTR column$84[rbp], 0
  035a3	eb 0e		 jmp	 SHORT $LN201@ShowDemoWi
$LN199@ShowDemoWi:
  035a5	8b 85 f4 08 00
	00		 mov	 eax, DWORD PTR column$84[rbp]
  035ab	ff c0		 inc	 eax
  035ad	89 85 f4 08 00
	00		 mov	 DWORD PTR column$84[rbp], eax
$LN201@ShowDemoWi:
  035b3	83 bd f4 08 00
	00 05		 cmp	 DWORD PTR column$84[rbp], 5
  035ba	0f 8d b6 00 00
	00		 jge	 $LN200@ShowDemoWi

; 4748 :                 {
; 4749 :                     ImGui::TableSetColumnIndex(column);

  035c0	8b 8d f4 08 00
	00		 mov	 ecx, DWORD PTR column$84[rbp]
  035c6	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4750 :                     ImGui::Text("%c%c", 'A' + row, '0' + column);

  035cb	8b 85 f4 08 00
	00		 mov	 eax, DWORD PTR column$84[rbp]
  035d1	83 c0 30	 add	 eax, 48			; 00000030H
  035d4	8b 8d b4 08 00
	00		 mov	 ecx, DWORD PTR row$82[rbp]
  035da	83 c1 41	 add	 ecx, 65			; 00000041H
  035dd	44 8b c0	 mov	 r8d, eax
  035e0	8b d1		 mov	 edx, ecx
  035e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GJDJEMBE@?$CFc?$CFc?$AA@
  035e9	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4751 : 
; 4752 :                     // Change background of Cells B1->C2
; 4753 :                     // Demonstrate setting a cell background color with 'ImGui::TableSetBgColor(ImGuiTableBgTarget_CellBg, ...)'
; 4754 :                     // (the CellBg color will be blended over the RowBg and ColumnBg colors)
; 4755 :                     // We can also pass a column number as a third parameter to TableSetBgColor() and do this outside the column loop.
; 4756 :                     if (row >= 1 && row <= 2 && column >= 1 && column <= 2 && cell_bg_type == 1)

  035ee	83 bd b4 08 00
	00 01		 cmp	 DWORD PTR row$82[rbp], 1
  035f5	7c 7a		 jl	 SHORT $LN383@ShowDemoWi
  035f7	83 bd b4 08 00
	00 02		 cmp	 DWORD PTR row$82[rbp], 2
  035fe	7f 71		 jg	 SHORT $LN383@ShowDemoWi
  03600	83 bd f4 08 00
	00 01		 cmp	 DWORD PTR column$84[rbp], 1
  03607	7c 68		 jl	 SHORT $LN383@ShowDemoWi
  03609	83 bd f4 08 00
	00 02		 cmp	 DWORD PTR column$84[rbp], 2
  03610	7f 5f		 jg	 SHORT $LN383@ShowDemoWi
  03612	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?cell_bg_type@?BHF@??ShowDemoWindowTables@@YAXXZ@4HA, 1
  03619	75 56		 jne	 SHORT $LN383@ShowDemoWi

; 4757 :                     {
; 4758 :                         ImU32 cell_bg_color = ImGui::GetColorU32(ImVec4(0.3f, 0.3f, 0.7f, 0.65f));

  0361b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  03623	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  03629	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f333333
  03631	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e99999a
  03639	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e99999a
  03641	48 8d 8d a4 1a
	00 00		 lea	 rcx, QWORD PTR $T170[rbp]
  03648	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0364d	48 8b c8	 mov	 rcx, rax
  03650	e8 00 00 00 00	 call	 ?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z ; ImGui::GetColorU32
  03655	89 85 14 09 00
	00		 mov	 DWORD PTR cell_bg_color$85[rbp], eax

; 4759 :                         ImGui::TableSetBgColor(ImGuiTableBgTarget_CellBg, cell_bg_color);

  0365b	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  03661	8b 95 14 09 00
	00		 mov	 edx, DWORD PTR cell_bg_color$85[rbp]
  03667	b9 03 00 00 00	 mov	 ecx, 3
  0366c	e8 00 00 00 00	 call	 ?TableSetBgColor@ImGui@@YAXHIH@Z ; ImGui::TableSetBgColor
$LN383@ShowDemoWi:

; 4760 :                     }
; 4761 :                 }

  03671	e9 2f ff ff ff	 jmp	 $LN199@ShowDemoWi
$LN200@ShowDemoWi:

; 4762 :             }

  03676	e9 1a fe ff ff	 jmp	 $LN196@ShowDemoWi
$LN197@ShowDemoWi:

; 4763 :             ImGui::EndTable();

  0367b	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN381@ShowDemoWi:

; 4764 :         }
; 4765 :         ImGui::TreePop();

  03680	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN380@ShowDemoWi:

; 4766 :     }
; 4767 : 
; 4768 :     if (open_action != -1)

  03685	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  03689	74 24		 je	 SHORT $LN204@ShowDemoWi

; 4769 :         ImGui::SetNextItemOpen(open_action != 0);

  0368b	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  0368f	74 09		 je	 SHORT $LN516@ShowDemoWi
  03691	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv2084[rbp], 1
  03698	eb 07		 jmp	 SHORT $LN517@ShowDemoWi
$LN516@ShowDemoWi:
  0369a	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv2084[rbp], 0
$LN517@ShowDemoWi:
  036a1	33 d2		 xor	 edx, edx
  036a3	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv2084[rbp]
  036aa	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN204@ShowDemoWi:

; 4770 :     IMGUI_DEMO_MARKER("Tables/Tree view");

  036af	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  036b7	74 28		 je	 SHORT $LN385@ShowDemoWi
  036b9	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  036bf	05 f7 03 00 00	 add	 eax, 1015		; 000003f7H
  036c4	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  036cb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@LHIHCMOK@Tables?1Tree?5view?$AA@
  036d2	8b d0		 mov	 edx, eax
  036d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  036db	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN385@ShowDemoWi:
  036e1	33 c0		 xor	 eax, eax
  036e3	85 c0		 test	 eax, eax
  036e5	75 c8		 jne	 SHORT $LN204@ShowDemoWi

; 4771 :     if (ImGui::TreeNode("Tree view"))

  036e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09CKCINJFP@Tree?5view?$AA@
  036ee	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  036f3	0f b6 c0	 movzx	 eax, al
  036f6	85 c0		 test	 eax, eax
  036f8	0f 84 d4 00 00
	00		 je	 $LN386@ShowDemoWi

; 4772 :     {
; 4773 :         static ImGuiTableFlags flags = ImGuiTableFlags_BordersV | ImGuiTableFlags_BordersOuterH | ImGuiTableFlags_Resizable | ImGuiTableFlags_RowBg | ImGuiTableFlags_NoBordersInBody;
; 4774 : 
; 4775 :         if (ImGui::BeginTable("3ways", 3, flags))

  036fe	0f 57 d2	 xorps	 xmm2, xmm2
  03701	0f 57 c9	 xorps	 xmm1, xmm1
  03704	48 8d 8d d4 1a
	00 00		 lea	 rcx, QWORD PTR $T171[rbp]
  0370b	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  03710	0f 57 c0	 xorps	 xmm0, xmm0
  03713	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  03719	4c 8b c8	 mov	 r9, rax
  0371c	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags@?BIL@??ShowDemoWindowTables@@YAXXZ@4HA
  03723	ba 03 00 00 00	 mov	 edx, 3
  03728	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FLIJPOAM@3ways?$AA@
  0372f	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  03734	0f b6 c0	 movzx	 eax, al
  03737	85 c0		 test	 eax, eax
  03739	0f 84 8e 00 00
	00		 je	 $LN387@ShowDemoWi

; 4776 :         {
; 4777 :             // The first column will use the default _WidthStretch when ScrollX is Off and _WidthFixed when ScrollX is On
; 4778 :             ImGui::TableSetupColumn("Name", ImGuiTableColumnFlags_NoHide);

  0373f	45 33 c9	 xor	 r9d, r9d
  03742	0f 57 d2	 xorps	 xmm2, xmm2
  03745	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0374a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04FABLJDN@Name?$AA@
  03751	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4779 :             ImGui::TableSetupColumn("Size", ImGuiTableColumnFlags_WidthFixed, TEXT_BASE_WIDTH * 12.0f);

  03756	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR TEXT_BASE_WIDTH$[rbp]
  0375b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41400000
  03763	45 33 c9	 xor	 r9d, r9d
  03766	0f 28 d0	 movaps	 xmm2, xmm0
  03769	ba 10 00 00 00	 mov	 edx, 16
  0376e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04EBKMHHBE@Size?$AA@
  03775	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4780 :             ImGui::TableSetupColumn("Type", ImGuiTableColumnFlags_WidthFixed, TEXT_BASE_WIDTH * 18.0f);

  0377a	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR TEXT_BASE_WIDTH$[rbp]
  0377f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41900000
  03787	45 33 c9	 xor	 r9d, r9d
  0378a	0f 28 d0	 movaps	 xmm2, xmm0
  0378d	ba 10 00 00 00	 mov	 edx, 16
  03792	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04KOACHJEN@Type?$AA@
  03799	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4781 :             ImGui::TableHeadersRow();

  0379e	e8 00 00 00 00	 call	 ?TableHeadersRow@ImGui@@YAXXZ ; ImGui::TableHeadersRow

; 4782 : 
; 4783 :             // Simple storage to output a dummy file-system.
; 4784 :             struct MyTreeNode
; 4785 :             {
; 4786 :                 const char*     Name;
; 4787 :                 const char*     Type;
; 4788 :                 int             Size;
; 4789 :                 int             ChildIdx;
; 4790 :                 int             ChildCount;
; 4791 :                 static void DisplayNode(const MyTreeNode* node, const MyTreeNode* all_nodes)
; 4792 :                 {
; 4793 :                     ImGui::TableNextRow();
; 4794 :                     ImGui::TableNextColumn();
; 4795 :                     const bool is_folder = (node->ChildCount > 0);
; 4796 :                     if (is_folder)
; 4797 :                     {
; 4798 :                         bool open = ImGui::TreeNodeEx(node->Name, ImGuiTreeNodeFlags_SpanFullWidth);
; 4799 :                         ImGui::TableNextColumn();
; 4800 :                         ImGui::TextDisabled("--");
; 4801 :                         ImGui::TableNextColumn();
; 4802 :                         ImGui::TextUnformatted(node->Type);
; 4803 :                         if (open)
; 4804 :                         {
; 4805 :                             for (int child_n = 0; child_n < node->ChildCount; child_n++)
; 4806 :                                 DisplayNode(&all_nodes[node->ChildIdx + child_n], all_nodes);
; 4807 :                             ImGui::TreePop();
; 4808 :                         }
; 4809 :                     }
; 4810 :                     else
; 4811 :                     {
; 4812 :                         ImGui::TreeNodeEx(node->Name, ImGuiTreeNodeFlags_Leaf | ImGuiTreeNodeFlags_Bullet | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_SpanFullWidth);
; 4813 :                         ImGui::TableNextColumn();
; 4814 :                         ImGui::Text("%d", node->Size);
; 4815 :                         ImGui::TableNextColumn();
; 4816 :                         ImGui::TextUnformatted(node->Type);
; 4817 :                     }
; 4818 :                 }
; 4819 :             };
; 4820 :             static const MyTreeNode nodes[] =
; 4821 :             {
; 4822 :                 { "Root",                         "Folder",       -1,       1, 3    }, // 0
; 4823 :                 { "Music",                        "Folder",       -1,       4, 2    }, // 1
; 4824 :                 { "Textures",                     "Folder",       -1,       6, 3    }, // 2
; 4825 :                 { "desktop.ini",                  "System file",  1024,    -1,-1    }, // 3
; 4826 :                 { "File1_a.wav",                  "Audio file",   123000,  -1,-1    }, // 4
; 4827 :                 { "File1_b.wav",                  "Audio file",   456000,  -1,-1    }, // 5
; 4828 :                 { "Image001.png",                 "Image file",   203128,  -1,-1    }, // 6
; 4829 :                 { "Copy of Image001.png",         "Image file",   203256,  -1,-1    }, // 7
; 4830 :                 { "Copy of Image001 (Final2).png","Image file",   203512,  -1,-1    }, // 8
; 4831 :             };
; 4832 : 
; 4833 :             MyTreeNode::DisplayNode(&nodes[0], nodes);

  037a3	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  037a8	48 6b c0 00	 imul	 rax, rax, 0
  037ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?nodes@?BIO@??ShowDemoWindowTables@@YAXXZ@4QBUMyTreeNode@?BIO@??1@YAXXZ@B
  037b3	48 03 c8	 add	 rcx, rax
  037b6	48 8b c1	 mov	 rax, rcx
  037b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?nodes@?BIO@??ShowDemoWindowTables@@YAXXZ@4QBUMyTreeNode@?BIO@??1@YAXXZ@B
  037c0	48 8b c8	 mov	 rcx, rax
  037c3	e8 00 00 00 00	 call	 ?DisplayNode@MyTreeNode@?BIO@??ShowDemoWindowTables@@YAXXZ@SAXPEBU1?BIO@??2@YAXXZ@0@Z ; `ShowDemoWindowTables'::`398'::MyTreeNode::DisplayNode

; 4834 : 
; 4835 :             ImGui::EndTable();

  037c8	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN387@ShowDemoWi:

; 4836 :         }
; 4837 :         ImGui::TreePop();

  037cd	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN386@ShowDemoWi:

; 4838 :     }
; 4839 : 
; 4840 :     if (open_action != -1)

  037d2	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  037d6	74 24		 je	 SHORT $LN207@ShowDemoWi

; 4841 :         ImGui::SetNextItemOpen(open_action != 0);

  037d8	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  037dc	74 09		 je	 SHORT $LN518@ShowDemoWi
  037de	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv2130[rbp], 1
  037e5	eb 07		 jmp	 SHORT $LN519@ShowDemoWi
$LN518@ShowDemoWi:
  037e7	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv2130[rbp], 0
$LN519@ShowDemoWi:
  037ee	33 d2		 xor	 edx, edx
  037f0	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv2130[rbp]
  037f7	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN207@ShowDemoWi:

; 4842 :     IMGUI_DEMO_MARKER("Tables/Item width");

  037fc	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  03804	74 28		 je	 SHORT $LN389@ShowDemoWi
  03806	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  0380c	05 3f 04 00 00	 add	 eax, 1087		; 0000043fH
  03811	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  03818	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BC@CHHDIFEC@Tables?1Item?5width?$AA@
  0381f	8b d0		 mov	 edx, eax
  03821	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  03828	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN389@ShowDemoWi:
  0382e	33 c0		 xor	 eax, eax
  03830	85 c0		 test	 eax, eax
  03832	75 c8		 jne	 SHORT $LN207@ShowDemoWi

; 4843 :     if (ImGui::TreeNode("Item width"))

  03834	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@JMOFGNLE@Item?5width?$AA@
  0383b	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  03840	0f b6 c0	 movzx	 eax, al
  03843	85 c0		 test	 eax, eax
  03845	0f 84 f5 01 00
	00		 je	 $LN390@ShowDemoWi

; 4844 :     {
; 4845 :         HelpMarker(

  0384b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0MP@KOFCKOGB@Showcase?5using?5PushItemWidth?$CI?$CJ?5a@
  03852	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4846 :             "Showcase using PushItemWidth() and how it is preserved on a per-column basis.\n\n"
; 4847 :             "Note that on auto-resizing non-resizable fixed columns, querying the content width for e.g. right-alignment doesn't make sense.");
; 4848 :         if (ImGui::BeginTable("table_item_width", 3, ImGuiTableFlags_Borders))

  03857	0f 57 d2	 xorps	 xmm2, xmm2
  0385a	0f 57 c9	 xorps	 xmm1, xmm1
  0385d	48 8d 8d f4 1a
	00 00		 lea	 rcx, QWORD PTR $T172[rbp]
  03864	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  03869	0f 57 c0	 xorps	 xmm0, xmm0
  0386c	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  03872	4c 8b c8	 mov	 r9, rax
  03875	41 b8 80 07 00
	00		 mov	 r8d, 1920		; 00000780H
  0387b	ba 03 00 00 00	 mov	 edx, 3
  03880	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@DDAHLBBM@table_item_width?$AA@
  03887	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  0388c	0f b6 c0	 movzx	 eax, al
  0388f	85 c0		 test	 eax, eax
  03891	0f 84 a4 01 00
	00		 je	 $LN391@ShowDemoWi

; 4849 :         {
; 4850 :             ImGui::TableSetupColumn("small");

  03897	45 33 c9	 xor	 r9d, r9d
  0389a	0f 57 d2	 xorps	 xmm2, xmm2
  0389d	33 d2		 xor	 edx, edx
  0389f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05KJDGBEEG@small?$AA@
  038a6	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4851 :             ImGui::TableSetupColumn("half");

  038ab	45 33 c9	 xor	 r9d, r9d
  038ae	0f 57 d2	 xorps	 xmm2, xmm2
  038b1	33 d2		 xor	 edx, edx
  038b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GBGPFKGN@half?$AA@
  038ba	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4852 :             ImGui::TableSetupColumn("right-align");

  038bf	45 33 c9	 xor	 r9d, r9d
  038c2	0f 57 d2	 xorps	 xmm2, xmm2
  038c5	33 d2		 xor	 edx, edx
  038c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@FKJABAHD@right?9align?$AA@
  038ce	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4853 :             ImGui::TableHeadersRow();

  038d3	e8 00 00 00 00	 call	 ?TableHeadersRow@ImGui@@YAXXZ ; ImGui::TableHeadersRow

; 4854 : 
; 4855 :             for (int row = 0; row < 3; row++)

  038d8	c7 85 34 09 00
	00 00 00 00 00	 mov	 DWORD PTR row$86[rbp], 0
  038e2	eb 0e		 jmp	 SHORT $LN210@ShowDemoWi
$LN208@ShowDemoWi:
  038e4	8b 85 34 09 00
	00		 mov	 eax, DWORD PTR row$86[rbp]
  038ea	ff c0		 inc	 eax
  038ec	89 85 34 09 00
	00		 mov	 DWORD PTR row$86[rbp], eax
$LN210@ShowDemoWi:
  038f2	83 bd 34 09 00
	00 03		 cmp	 DWORD PTR row$86[rbp], 3
  038f9	0f 8d 37 01 00
	00		 jge	 $LN209@ShowDemoWi

; 4856 :             {
; 4857 :                 ImGui::TableNextRow();

  038ff	0f 57 c9	 xorps	 xmm1, xmm1
  03902	33 c9		 xor	 ecx, ecx
  03904	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4858 :                 if (row == 0)

  03909	83 bd 34 09 00
	00 00		 cmp	 DWORD PTR row$86[rbp], 0
  03910	75 5e		 jne	 SHORT $LN392@ShowDemoWi

; 4859 :                 {
; 4860 :                     // Setup ItemWidth once (instead of setting up every time, which is also possible but less efficient)
; 4861 :                     ImGui::TableSetColumnIndex(0);

  03912	33 c9		 xor	 ecx, ecx
  03914	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4862 :                     ImGui::PushItemWidth(TEXT_BASE_WIDTH * 3.0f); // Small

  03919	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR TEXT_BASE_WIDTH$[rbp]
  0391e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40400000
  03926	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth

; 4863 :                     ImGui::TableSetColumnIndex(1);

  0392b	b9 01 00 00 00	 mov	 ecx, 1
  03930	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4864 :                     ImGui::PushItemWidth(-ImGui::GetContentRegionAvail().x * 0.5f);

  03935	48 8d 8d 14 1b
	00 00		 lea	 rcx, QWORD PTR $T173[rbp]
  0393c	e8 00 00 00 00	 call	 ?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
  03941	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  03945	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0394c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  03954	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth

; 4865 :                     ImGui::TableSetColumnIndex(2);

  03959	b9 02 00 00 00	 mov	 ecx, 2
  0395e	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4866 :                     ImGui::PushItemWidth(-FLT_MIN); // Right-aligned

  03963	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80800000
  0396b	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth
$LN392@ShowDemoWi:

; 4867 :                 }
; 4868 : 
; 4869 :                 // Draw our contents
; 4870 :                 static float dummy_f = 0.0f;
; 4871 :                 ImGui::PushID(row);

  03970	8b 8d 34 09 00
	00		 mov	 ecx, DWORD PTR row$86[rbp]
  03976	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 4872 :                 ImGui::TableSetColumnIndex(0);

  0397b	33 c9		 xor	 ecx, ecx
  0397d	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4873 :                 ImGui::SliderFloat("float0", &dummy_f, 0.0f, 1.0f);

  03982	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0398a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  03991	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03996	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  0399e	0f 57 d2	 xorps	 xmm2, xmm2
  039a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?dummy_f@?BJM@??ShowDemoWindowTables@@YAXXZ@4MA
  039a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OBIFBAPK@float0?$AA@
  039af	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 4874 :                 ImGui::TableSetColumnIndex(1);

  039b4	b9 01 00 00 00	 mov	 ecx, 1
  039b9	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4875 :                 ImGui::SliderFloat("float1", &dummy_f, 0.0f, 1.0f);

  039be	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  039c6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  039cd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  039d2	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  039da	0f 57 d2	 xorps	 xmm2, xmm2
  039dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?dummy_f@?BJM@??ShowDemoWindowTables@@YAXXZ@4MA
  039e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06PIJOCBLL@float1?$AA@
  039eb	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 4876 :                 ImGui::TableSetColumnIndex(2);

  039f0	b9 02 00 00 00	 mov	 ecx, 2
  039f5	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4877 :                 ImGui::SliderFloat("##float2", &dummy_f, 0.0f, 1.0f); // No visible label since right-aligned

  039fa	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  03a02	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  03a09	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03a0e	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  03a16	0f 57 d2	 xorps	 xmm2, xmm2
  03a19	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?dummy_f@?BJM@??ShowDemoWindowTables@@YAXXZ@4MA
  03a20	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08GEFDGCHL@?$CD?$CDfloat2?$AA@
  03a27	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 4878 :                 ImGui::PopID();

  03a2c	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 4879 :             }

  03a31	e9 ae fe ff ff	 jmp	 $LN208@ShowDemoWi
$LN209@ShowDemoWi:

; 4880 :             ImGui::EndTable();

  03a36	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN391@ShowDemoWi:

; 4881 :         }
; 4882 :         ImGui::TreePop();

  03a3b	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN390@ShowDemoWi:

; 4883 :     }
; 4884 : 
; 4885 :     // Demonstrate using TableHeader() calls instead of TableHeadersRow()
; 4886 :     if (open_action != -1)

  03a40	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  03a44	74 24		 je	 SHORT $LN213@ShowDemoWi

; 4887 :         ImGui::SetNextItemOpen(open_action != 0);

  03a46	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  03a4a	74 09		 je	 SHORT $LN520@ShowDemoWi
  03a4c	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv2242[rbp], 1
  03a53	eb 07		 jmp	 SHORT $LN521@ShowDemoWi
$LN520@ShowDemoWi:
  03a55	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv2242[rbp], 0
$LN521@ShowDemoWi:
  03a5c	33 d2		 xor	 edx, edx
  03a5e	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv2242[rbp]
  03a65	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN213@ShowDemoWi:

; 4888 :     IMGUI_DEMO_MARKER("Tables/Custom headers");

  03a6a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  03a72	74 28		 je	 SHORT $LN394@ShowDemoWi
  03a74	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  03a7a	05 6d 04 00 00	 add	 eax, 1133		; 0000046dH
  03a7f	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  03a86	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@INIBDOJH@Tables?1Custom?5headers?$AA@
  03a8d	8b d0		 mov	 edx, eax
  03a8f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  03a96	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN394@ShowDemoWi:
  03a9c	33 c0		 xor	 eax, eax
  03a9e	85 c0		 test	 eax, eax
  03aa0	75 c8		 jne	 SHORT $LN213@ShowDemoWi

; 4889 :     if (ImGui::TreeNode("Custom headers"))

  03aa2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@PCNFLBGM@Custom?5headers?$AA@
  03aa9	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  03aae	0f b6 c0	 movzx	 eax, al
  03ab1	85 c0		 test	 eax, eax
  03ab3	0f 84 1d 02 00
	00		 je	 $LN395@ShowDemoWi

; 4890 :     {
; 4891 :         const int COLUMNS_COUNT = 3;

  03ab9	c7 85 54 09 00
	00 03 00 00 00	 mov	 DWORD PTR COLUMNS_COUNT$87[rbp], 3

; 4892 :         if (ImGui::BeginTable("table_custom_headers", COLUMNS_COUNT, ImGuiTableFlags_Borders | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable))

  03ac3	0f 57 d2	 xorps	 xmm2, xmm2
  03ac6	0f 57 c9	 xorps	 xmm1, xmm1
  03ac9	48 8d 8d 34 1b
	00 00		 lea	 rcx, QWORD PTR $T174[rbp]
  03ad0	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  03ad5	0f 57 c0	 xorps	 xmm0, xmm0
  03ad8	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  03ade	4c 8b c8	 mov	 r9, rax
  03ae1	41 b8 86 07 00
	00		 mov	 r8d, 1926		; 00000786H
  03ae7	ba 03 00 00 00	 mov	 edx, 3
  03aec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@JGHIMJPE@table_custom_headers?$AA@
  03af3	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  03af8	0f b6 c0	 movzx	 eax, al
  03afb	85 c0		 test	 eax, eax
  03afd	0f 84 ce 01 00
	00		 je	 $LN396@ShowDemoWi

; 4893 :         {
; 4894 :             ImGui::TableSetupColumn("Apricot");

  03b03	45 33 c9	 xor	 r9d, r9d
  03b06	0f 57 d2	 xorps	 xmm2, xmm2
  03b09	33 d2		 xor	 edx, edx
  03b0b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07GAABODDK@Apricot?$AA@
  03b12	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4895 :             ImGui::TableSetupColumn("Banana");

  03b17	45 33 c9	 xor	 r9d, r9d
  03b1a	0f 57 d2	 xorps	 xmm2, xmm2
  03b1d	33 d2		 xor	 edx, edx
  03b1f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OJJIHNKI@Banana?$AA@
  03b26	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4896 :             ImGui::TableSetupColumn("Cherry");

  03b2b	45 33 c9	 xor	 r9d, r9d
  03b2e	0f 57 d2	 xorps	 xmm2, xmm2
  03b31	33 d2		 xor	 edx, edx
  03b33	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06MKLLCMPJ@Cherry?$AA@
  03b3a	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4897 : 
; 4898 :             // Dummy entire-column selection storage
; 4899 :             // FIXME: It would be nice to actually demonstrate full-featured selection using those checkbox.
; 4900 :             static bool column_selected[3] = {};
; 4901 : 
; 4902 :             // Instead of calling TableHeadersRow() we'll submit custom headers ourselves
; 4903 :             ImGui::TableNextRow(ImGuiTableRowFlags_Headers);

  03b3f	0f 57 c9	 xorps	 xmm1, xmm1
  03b42	b9 01 00 00 00	 mov	 ecx, 1
  03b47	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4904 :             for (int column = 0; column < COLUMNS_COUNT; column++)

  03b4c	c7 85 74 09 00
	00 00 00 00 00	 mov	 DWORD PTR column$88[rbp], 0
  03b56	eb 0e		 jmp	 SHORT $LN216@ShowDemoWi
$LN214@ShowDemoWi:
  03b58	8b 85 74 09 00
	00		 mov	 eax, DWORD PTR column$88[rbp]
  03b5e	ff c0		 inc	 eax
  03b60	89 85 74 09 00
	00		 mov	 DWORD PTR column$88[rbp], eax
$LN216@ShowDemoWi:
  03b66	83 bd 74 09 00
	00 03		 cmp	 DWORD PTR column$88[rbp], 3
  03b6d	0f 8d 9c 00 00
	00		 jge	 $LN215@ShowDemoWi

; 4905 :             {
; 4906 :                 ImGui::TableSetColumnIndex(column);

  03b73	8b 8d 74 09 00
	00		 mov	 ecx, DWORD PTR column$88[rbp]
  03b79	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4907 :                 const char* column_name = ImGui::TableGetColumnName(column); // Retrieve name passed to TableSetupColumn()

  03b7e	8b 8d 74 09 00
	00		 mov	 ecx, DWORD PTR column$88[rbp]
  03b84	e8 00 00 00 00	 call	 ?TableGetColumnName@ImGui@@YAPEBDH@Z ; ImGui::TableGetColumnName
  03b89	48 89 85 98 09
	00 00		 mov	 QWORD PTR column_name$89[rbp], rax

; 4908 :                 ImGui::PushID(column);

  03b90	8b 8d 74 09 00
	00		 mov	 ecx, DWORD PTR column$88[rbp]
  03b96	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 4909 :                 ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(0, 0));

  03b9b	0f 57 d2	 xorps	 xmm2, xmm2
  03b9e	0f 57 c9	 xorps	 xmm1, xmm1
  03ba1	48 8d 8d 54 1b
	00 00		 lea	 rcx, QWORD PTR $T175[rbp]
  03ba8	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  03bad	48 8b d0	 mov	 rdx, rax
  03bb0	b9 0b 00 00 00	 mov	 ecx, 11
  03bb5	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z ; ImGui::PushStyleVar

; 4910 :                 ImGui::Checkbox("##checkall", &column_selected[column]);

  03bba	48 63 85 74 09
	00 00		 movsxd	 rax, DWORD PTR column$88[rbp]
  03bc1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?column_selected@?BKL@??ShowDemoWindowTables@@YAXXZ@4PA_NA
  03bc8	48 03 c8	 add	 rcx, rax
  03bcb	48 8b c1	 mov	 rax, rcx
  03bce	48 8b d0	 mov	 rdx, rax
  03bd1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@PLJPMHBK@?$CD?$CDcheckall?$AA@
  03bd8	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 4911 :                 ImGui::PopStyleVar();

  03bdd	b9 01 00 00 00	 mov	 ecx, 1
  03be2	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar

; 4912 :                 ImGui::SameLine(0.0f, ImGui::GetStyle().ItemInnerSpacing.x);

  03be7	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  03bec	f3 0f 10 48 54	 movss	 xmm1, DWORD PTR [rax+84]
  03bf1	0f 57 c0	 xorps	 xmm0, xmm0
  03bf4	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 4913 :                 ImGui::TableHeader(column_name);

  03bf9	48 8b 8d 98 09
	00 00		 mov	 rcx, QWORD PTR column_name$89[rbp]
  03c00	e8 00 00 00 00	 call	 ?TableHeader@ImGui@@YAXPEBD@Z ; ImGui::TableHeader

; 4914 :                 ImGui::PopID();

  03c05	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 4915 :             }

  03c0a	e9 49 ff ff ff	 jmp	 $LN214@ShowDemoWi
$LN215@ShowDemoWi:

; 4916 : 
; 4917 :             for (int row = 0; row < 5; row++)

  03c0f	c7 85 b4 09 00
	00 00 00 00 00	 mov	 DWORD PTR row$90[rbp], 0
  03c19	eb 0e		 jmp	 SHORT $LN219@ShowDemoWi
$LN217@ShowDemoWi:
  03c1b	8b 85 b4 09 00
	00		 mov	 eax, DWORD PTR row$90[rbp]
  03c21	ff c0		 inc	 eax
  03c23	89 85 b4 09 00
	00		 mov	 DWORD PTR row$90[rbp], eax
$LN219@ShowDemoWi:
  03c29	83 bd b4 09 00
	00 05		 cmp	 DWORD PTR row$90[rbp], 5
  03c30	0f 8d 96 00 00
	00		 jge	 $LN218@ShowDemoWi

; 4918 :             {
; 4919 :                 ImGui::TableNextRow();

  03c36	0f 57 c9	 xorps	 xmm1, xmm1
  03c39	33 c9		 xor	 ecx, ecx
  03c3b	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4920 :                 for (int column = 0; column < 3; column++)

  03c40	c7 85 d4 09 00
	00 00 00 00 00	 mov	 DWORD PTR column$91[rbp], 0
  03c4a	eb 0e		 jmp	 SHORT $LN222@ShowDemoWi
$LN220@ShowDemoWi:
  03c4c	8b 85 d4 09 00
	00		 mov	 eax, DWORD PTR column$91[rbp]
  03c52	ff c0		 inc	 eax
  03c54	89 85 d4 09 00
	00		 mov	 DWORD PTR column$91[rbp], eax
$LN222@ShowDemoWi:
  03c5a	83 bd d4 09 00
	00 03		 cmp	 DWORD PTR column$91[rbp], 3
  03c61	7d 64		 jge	 SHORT $LN221@ShowDemoWi

; 4921 :                 {
; 4922 :                     char buf[32];
; 4923 :                     sprintf(buf, "Cell %d,%d", column, row);

  03c63	44 8b 8d b4 09
	00 00		 mov	 r9d, DWORD PTR row$90[rbp]
  03c6a	44 8b 85 d4 09
	00 00		 mov	 r8d, DWORD PTR column$91[rbp]
  03c71	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@PAJCHPDH@Cell?5?$CFd?0?$CFd?$AA@
  03c78	48 8d 8d f8 09
	00 00		 lea	 rcx, QWORD PTR buf$92[rbp]
  03c7f	e8 00 00 00 00	 call	 sprintf

; 4924 :                     ImGui::TableSetColumnIndex(column);

  03c84	8b 8d d4 09 00
	00		 mov	 ecx, DWORD PTR column$91[rbp]
  03c8a	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4925 :                     ImGui::Selectable(buf, column_selected[column]);

  03c8f	0f 57 d2	 xorps	 xmm2, xmm2
  03c92	0f 57 c9	 xorps	 xmm1, xmm1
  03c95	48 8d 8d 74 1b
	00 00		 lea	 rcx, QWORD PTR $T176[rbp]
  03c9c	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  03ca1	48 63 8d d4 09
	00 00		 movsxd	 rcx, DWORD PTR column$91[rbp]
  03ca8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?column_selected@?BKL@??ShowDemoWindowTables@@YAXXZ@4PA_NA
  03caf	4c 8b c8	 mov	 r9, rax
  03cb2	45 33 c0	 xor	 r8d, r8d
  03cb5	0f b6 14 0a	 movzx	 edx, BYTE PTR [rdx+rcx]
  03cb9	48 8d 8d f8 09
	00 00		 lea	 rcx, QWORD PTR buf$92[rbp]
  03cc0	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable

; 4926 :                 }

  03cc5	eb 85		 jmp	 SHORT $LN220@ShowDemoWi
$LN221@ShowDemoWi:

; 4927 :             }

  03cc7	e9 4f ff ff ff	 jmp	 $LN217@ShowDemoWi
$LN218@ShowDemoWi:

; 4928 :             ImGui::EndTable();

  03ccc	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN396@ShowDemoWi:

; 4929 :         }
; 4930 :         ImGui::TreePop();

  03cd1	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN395@ShowDemoWi:

; 4931 :     }
; 4932 : 
; 4933 :     // Demonstrate creating custom context menus inside columns, while playing it nice with context menus provided by TableHeadersRow()/TableHeader()
; 4934 :     if (open_action != -1)

  03cd6	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  03cda	74 24		 je	 SHORT $LN225@ShowDemoWi

; 4935 :         ImGui::SetNextItemOpen(open_action != 0);

  03cdc	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  03ce0	74 09		 je	 SHORT $LN522@ShowDemoWi
  03ce2	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv2330[rbp], 1
  03ce9	eb 07		 jmp	 SHORT $LN523@ShowDemoWi
$LN522@ShowDemoWi:
  03ceb	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv2330[rbp], 0
$LN523@ShowDemoWi:
  03cf2	33 d2		 xor	 edx, edx
  03cf4	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv2330[rbp]
  03cfb	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN225@ShowDemoWi:

; 4936 :     IMGUI_DEMO_MARKER("Tables/Context menus");

  03d00	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  03d08	74 28		 je	 SHORT $LN398@ShowDemoWi
  03d0a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  03d10	05 9d 04 00 00	 add	 eax, 1181		; 0000049dH
  03d15	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  03d1c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BF@HIHOGJFK@Tables?1Context?5menus?$AA@
  03d23	8b d0		 mov	 edx, eax
  03d25	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  03d2c	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN398@ShowDemoWi:
  03d32	33 c0		 xor	 eax, eax
  03d34	85 c0		 test	 eax, eax
  03d36	75 c8		 jne	 SHORT $LN225@ShowDemoWi

; 4937 :     if (ImGui::TreeNode("Context menus"))

  03d38	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EGPMCJBG@Context?5menus?$AA@
  03d3f	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  03d44	0f b6 c0	 movzx	 eax, al
  03d47	85 c0		 test	 eax, eax
  03d49	0f 84 14 04 00
	00		 je	 $LN399@ShowDemoWi

; 4938 :     {
; 4939 :         HelpMarker("By default, right-clicking over a TableHeadersRow()/TableHeader() line will open the default context-menu.\nUsing ImGuiTableFlags_ContextMenuInBody we also allow right-clicking over columns body.");

  03d4f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0MD@CMIPBCGH@By?5default?0?5right?9clicking?5over?5@
  03d56	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4940 :         static ImGuiTableFlags flags1 = ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable | ImGuiTableFlags_Borders | ImGuiTableFlags_ContextMenuInBody;
; 4941 : 
; 4942 :         PushStyleCompact();

  03d5b	e8 00 00 00 00	 call	 ?PushStyleCompact@@YAXXZ ; PushStyleCompact

; 4943 :         ImGui::CheckboxFlags("ImGuiTableFlags_ContextMenuInBody", &flags1, ImGuiTableFlags_ContextMenuInBody);

  03d60	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  03d66	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags1@?BLK@??ShowDemoWindowTables@@YAXXZ@4HA
  03d6d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@DCEKKFEJ@ImGuiTableFlags_ContextMenuInBod@
  03d74	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 4944 :         PopStyleCompact();

  03d79	e8 00 00 00 00	 call	 ?PopStyleCompact@@YAXXZ	; PopStyleCompact

; 4945 : 
; 4946 :         // Context Menus: first example
; 4947 :         // [1.1] Right-click on the TableHeadersRow() line to open the default table context menu.
; 4948 :         // [1.2] Right-click in columns also open the default table context menu (if ImGuiTableFlags_ContextMenuInBody is set)
; 4949 :         const int COLUMNS_COUNT = 3;

  03d7e	c7 85 34 0a 00
	00 03 00 00 00	 mov	 DWORD PTR COLUMNS_COUNT$93[rbp], 3

; 4950 :         if (ImGui::BeginTable("table_context_menu", COLUMNS_COUNT, flags1))

  03d88	0f 57 d2	 xorps	 xmm2, xmm2
  03d8b	0f 57 c9	 xorps	 xmm1, xmm1
  03d8e	48 8d 8d 94 1b
	00 00		 lea	 rcx, QWORD PTR $T177[rbp]
  03d95	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  03d9a	0f 57 c0	 xorps	 xmm0, xmm0
  03d9d	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  03da3	4c 8b c8	 mov	 r9, rax
  03da6	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags1@?BLK@??ShowDemoWindowTables@@YAXXZ@4HA
  03dad	ba 03 00 00 00	 mov	 edx, 3
  03db2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@GAEOPLMF@table_context_menu?$AA@
  03db9	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  03dbe	0f b6 c0	 movzx	 eax, al
  03dc1	85 c0		 test	 eax, eax
  03dc3	0f 84 be 00 00
	00		 je	 $LN400@ShowDemoWi

; 4951 :         {
; 4952 :             ImGui::TableSetupColumn("One");

  03dc9	45 33 c9	 xor	 r9d, r9d
  03dcc	0f 57 d2	 xorps	 xmm2, xmm2
  03dcf	33 d2		 xor	 edx, edx
  03dd1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03EHAPBBEA@One?$AA@
  03dd8	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4953 :             ImGui::TableSetupColumn("Two");

  03ddd	45 33 c9	 xor	 r9d, r9d
  03de0	0f 57 d2	 xorps	 xmm2, xmm2
  03de3	33 d2		 xor	 edx, edx
  03de5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CJAPLBKL@Two?$AA@
  03dec	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4954 :             ImGui::TableSetupColumn("Three");

  03df1	45 33 c9	 xor	 r9d, r9d
  03df4	0f 57 d2	 xorps	 xmm2, xmm2
  03df7	33 d2		 xor	 edx, edx
  03df9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OHMANGAP@Three?$AA@
  03e00	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4955 : 
; 4956 :             // [1.1]] Right-click on the TableHeadersRow() line to open the default table context menu.
; 4957 :             ImGui::TableHeadersRow();

  03e05	e8 00 00 00 00	 call	 ?TableHeadersRow@ImGui@@YAXXZ ; ImGui::TableHeadersRow

; 4958 : 
; 4959 :             // Submit dummy contents
; 4960 :             for (int row = 0; row < 4; row++)

  03e0a	c7 85 54 0a 00
	00 00 00 00 00	 mov	 DWORD PTR row$94[rbp], 0
  03e14	eb 0e		 jmp	 SHORT $LN228@ShowDemoWi
$LN226@ShowDemoWi:
  03e16	8b 85 54 0a 00
	00		 mov	 eax, DWORD PTR row$94[rbp]
  03e1c	ff c0		 inc	 eax
  03e1e	89 85 54 0a 00
	00		 mov	 DWORD PTR row$94[rbp], eax
$LN228@ShowDemoWi:
  03e24	83 bd 54 0a 00
	00 04		 cmp	 DWORD PTR row$94[rbp], 4
  03e2b	7d 55		 jge	 SHORT $LN227@ShowDemoWi

; 4961 :             {
; 4962 :                 ImGui::TableNextRow();

  03e2d	0f 57 c9	 xorps	 xmm1, xmm1
  03e30	33 c9		 xor	 ecx, ecx
  03e32	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4963 :                 for (int column = 0; column < COLUMNS_COUNT; column++)

  03e37	c7 85 74 0a 00
	00 00 00 00 00	 mov	 DWORD PTR column$95[rbp], 0
  03e41	eb 0e		 jmp	 SHORT $LN231@ShowDemoWi
$LN229@ShowDemoWi:
  03e43	8b 85 74 0a 00
	00		 mov	 eax, DWORD PTR column$95[rbp]
  03e49	ff c0		 inc	 eax
  03e4b	89 85 74 0a 00
	00		 mov	 DWORD PTR column$95[rbp], eax
$LN231@ShowDemoWi:
  03e51	83 bd 74 0a 00
	00 03		 cmp	 DWORD PTR column$95[rbp], 3
  03e58	7d 26		 jge	 SHORT $LN230@ShowDemoWi

; 4964 :                 {
; 4965 :                     ImGui::TableSetColumnIndex(column);

  03e5a	8b 8d 74 0a 00
	00		 mov	 ecx, DWORD PTR column$95[rbp]
  03e60	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4966 :                     ImGui::Text("Cell %d,%d", column, row);

  03e65	44 8b 85 54 0a
	00 00		 mov	 r8d, DWORD PTR row$94[rbp]
  03e6c	8b 95 74 0a 00
	00		 mov	 edx, DWORD PTR column$95[rbp]
  03e72	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@PAJCHPDH@Cell?5?$CFd?0?$CFd?$AA@
  03e79	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4967 :                 }

  03e7e	eb c3		 jmp	 SHORT $LN229@ShowDemoWi
$LN230@ShowDemoWi:

; 4968 :             }

  03e80	eb 94		 jmp	 SHORT $LN226@ShowDemoWi
$LN227@ShowDemoWi:

; 4969 :             ImGui::EndTable();

  03e82	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN400@ShowDemoWi:

; 4970 :         }
; 4971 : 
; 4972 :         // Context Menus: second example
; 4973 :         // [2.1] Right-click on the TableHeadersRow() line to open the default table context menu.
; 4974 :         // [2.2] Right-click on the ".." to open a custom popup
; 4975 :         // [2.3] Right-click in columns to open another custom popup
; 4976 :         HelpMarker("Demonstrate mixing table context menu (over header), item context button (over button) and custom per-colum context menu (over column body).");

  03e87	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0IN@GBJFOLPI@Demonstrate?5mixing?5table?5context@
  03e8e	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 4977 :         ImGuiTableFlags flags2 = ImGuiTableFlags_Resizable | ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable | ImGuiTableFlags_Borders;

  03e93	c7 85 94 0a 00
	00 87 27 00 00	 mov	 DWORD PTR flags2$96[rbp], 10119 ; 00002787H

; 4978 :         if (ImGui::BeginTable("table_context_menu_2", COLUMNS_COUNT, flags2))

  03e9d	0f 57 d2	 xorps	 xmm2, xmm2
  03ea0	0f 57 c9	 xorps	 xmm1, xmm1
  03ea3	48 8d 8d b4 1b
	00 00		 lea	 rcx, QWORD PTR $T178[rbp]
  03eaa	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  03eaf	0f 57 c0	 xorps	 xmm0, xmm0
  03eb2	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  03eb8	4c 8b c8	 mov	 r9, rax
  03ebb	44 8b 85 94 0a
	00 00		 mov	 r8d, DWORD PTR flags2$96[rbp]
  03ec2	ba 03 00 00 00	 mov	 edx, 3
  03ec7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@BGHCFFCN@table_context_menu_2?$AA@
  03ece	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  03ed3	0f b6 c0	 movzx	 eax, al
  03ed6	85 c0		 test	 eax, eax
  03ed8	0f 84 80 02 00
	00		 je	 $LN401@ShowDemoWi

; 4979 :         {
; 4980 :             ImGui::TableSetupColumn("One");

  03ede	45 33 c9	 xor	 r9d, r9d
  03ee1	0f 57 d2	 xorps	 xmm2, xmm2
  03ee4	33 d2		 xor	 edx, edx
  03ee6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03EHAPBBEA@One?$AA@
  03eed	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4981 :             ImGui::TableSetupColumn("Two");

  03ef2	45 33 c9	 xor	 r9d, r9d
  03ef5	0f 57 d2	 xorps	 xmm2, xmm2
  03ef8	33 d2		 xor	 edx, edx
  03efa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CJAPLBKL@Two?$AA@
  03f01	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4982 :             ImGui::TableSetupColumn("Three");

  03f06	45 33 c9	 xor	 r9d, r9d
  03f09	0f 57 d2	 xorps	 xmm2, xmm2
  03f0c	33 d2		 xor	 edx, edx
  03f0e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OHMANGAP@Three?$AA@
  03f15	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 4983 : 
; 4984 :             // [2.1] Right-click on the TableHeadersRow() line to open the default table context menu.
; 4985 :             ImGui::TableHeadersRow();

  03f1a	e8 00 00 00 00	 call	 ?TableHeadersRow@ImGui@@YAXXZ ; ImGui::TableHeadersRow

; 4986 :             for (int row = 0; row < 4; row++)

  03f1f	c7 85 b4 0a 00
	00 00 00 00 00	 mov	 DWORD PTR row$97[rbp], 0
  03f29	eb 0e		 jmp	 SHORT $LN234@ShowDemoWi
$LN232@ShowDemoWi:
  03f2b	8b 85 b4 0a 00
	00		 mov	 eax, DWORD PTR row$97[rbp]
  03f31	ff c0		 inc	 eax
  03f33	89 85 b4 0a 00
	00		 mov	 DWORD PTR row$97[rbp], eax
$LN234@ShowDemoWi:
  03f39	83 bd b4 0a 00
	00 04		 cmp	 DWORD PTR row$97[rbp], 4
  03f40	0f 8d f2 00 00
	00		 jge	 $LN233@ShowDemoWi

; 4987 :             {
; 4988 :                 ImGui::TableNextRow();

  03f46	0f 57 c9	 xorps	 xmm1, xmm1
  03f49	33 c9		 xor	 ecx, ecx
  03f4b	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 4989 :                 for (int column = 0; column < COLUMNS_COUNT; column++)

  03f50	c7 85 d4 0a 00
	00 00 00 00 00	 mov	 DWORD PTR column$98[rbp], 0
  03f5a	eb 0e		 jmp	 SHORT $LN237@ShowDemoWi
$LN235@ShowDemoWi:
  03f5c	8b 85 d4 0a 00
	00		 mov	 eax, DWORD PTR column$98[rbp]
  03f62	ff c0		 inc	 eax
  03f64	89 85 d4 0a 00
	00		 mov	 DWORD PTR column$98[rbp], eax
$LN237@ShowDemoWi:
  03f6a	83 bd d4 0a 00
	00 03		 cmp	 DWORD PTR column$98[rbp], 3
  03f71	0f 8d bc 00 00
	00		 jge	 $LN236@ShowDemoWi

; 4990 :                 {
; 4991 :                     // Submit dummy contents
; 4992 :                     ImGui::TableSetColumnIndex(column);

  03f77	8b 8d d4 0a 00
	00		 mov	 ecx, DWORD PTR column$98[rbp]
  03f7d	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 4993 :                     ImGui::Text("Cell %d,%d", column, row);

  03f82	44 8b 85 b4 0a
	00 00		 mov	 r8d, DWORD PTR row$97[rbp]
  03f89	8b 95 d4 0a 00
	00		 mov	 edx, DWORD PTR column$98[rbp]
  03f8f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@PAJCHPDH@Cell?5?$CFd?0?$CFd?$AA@
  03f96	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 4994 :                     ImGui::SameLine();

  03f9b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  03fa3	0f 57 c0	 xorps	 xmm0, xmm0
  03fa6	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 4995 : 
; 4996 :                     // [2.2] Right-click on the ".." to open a custom popup
; 4997 :                     ImGui::PushID(row * COLUMNS_COUNT + column);

  03fab	6b 85 b4 0a 00
	00 03		 imul	 eax, DWORD PTR row$97[rbp], 3
  03fb2	03 85 d4 0a 00
	00		 add	 eax, DWORD PTR column$98[rbp]
  03fb8	8b c8		 mov	 ecx, eax
  03fba	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 4998 :                     ImGui::SmallButton("..");

  03fbf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DJGKEECL@?4?4?$AA@
  03fc6	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton

; 4999 :                     if (ImGui::BeginPopupContextItem())

  03fcb	ba 01 00 00 00	 mov	 edx, 1
  03fd0	33 c9		 xor	 ecx, ecx
  03fd2	e8 00 00 00 00	 call	 ?BeginPopupContextItem@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopupContextItem
  03fd7	0f b6 c0	 movzx	 eax, al
  03fda	85 c0		 test	 eax, eax
  03fdc	74 4b		 je	 SHORT $LN402@ShowDemoWi

; 5000 :                     {
; 5001 :                         ImGui::Text("This is the popup for Button(\"..\") in Cell %d,%d", column, row);

  03fde	44 8b 85 b4 0a
	00 00		 mov	 r8d, DWORD PTR row$97[rbp]
  03fe5	8b 95 d4 0a 00
	00		 mov	 edx, DWORD PTR column$98[rbp]
  03feb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@KMDIMPEI@This?5is?5the?5popup?5for?5Button?$CI?$CC?4?4@
  03ff2	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5002 :                         if (ImGui::Button("Close"))

  03ff7	0f 57 d2	 xorps	 xmm2, xmm2
  03ffa	0f 57 c9	 xorps	 xmm1, xmm1
  03ffd	48 8d 8d d4 1b
	00 00		 lea	 rcx, QWORD PTR $T179[rbp]
  04004	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  04009	48 8b d0	 mov	 rdx, rax
  0400c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LGELBCGM@Close?$AA@
  04013	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  04018	0f b6 c0	 movzx	 eax, al
  0401b	85 c0		 test	 eax, eax
  0401d	74 05		 je	 SHORT $LN403@ShowDemoWi

; 5003 :                             ImGui::CloseCurrentPopup();

  0401f	e8 00 00 00 00	 call	 ?CloseCurrentPopup@ImGui@@YAXXZ ; ImGui::CloseCurrentPopup
$LN403@ShowDemoWi:

; 5004 :                         ImGui::EndPopup();

  04024	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN402@ShowDemoWi:

; 5005 :                     }
; 5006 :                     ImGui::PopID();

  04029	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 5007 :                 }

  0402e	e9 29 ff ff ff	 jmp	 $LN235@ShowDemoWi
$LN236@ShowDemoWi:

; 5008 :             }

  04033	e9 f3 fe ff ff	 jmp	 $LN232@ShowDemoWi
$LN233@ShowDemoWi:

; 5009 : 
; 5010 :             // [2.3] Right-click anywhere in columns to open another custom popup
; 5011 :             // (instead of testing for !IsAnyItemHovered() we could also call OpenPopup() with ImGuiPopupFlags_NoOpenOverExistingPopup
; 5012 :             // to manage popup priority as the popups triggers, here "are we hovering a column" are overlapping)
; 5013 :             int hovered_column = -1;

  04038	c7 85 f4 0a 00
	00 ff ff ff ff	 mov	 DWORD PTR hovered_column$99[rbp], -1

; 5014 :             for (int column = 0; column < COLUMNS_COUNT + 1; column++)

  04042	c7 85 14 0b 00
	00 00 00 00 00	 mov	 DWORD PTR column$100[rbp], 0
  0404c	eb 0e		 jmp	 SHORT $LN240@ShowDemoWi
$LN238@ShowDemoWi:
  0404e	8b 85 14 0b 00
	00		 mov	 eax, DWORD PTR column$100[rbp]
  04054	ff c0		 inc	 eax
  04056	89 85 14 0b 00
	00		 mov	 DWORD PTR column$100[rbp], eax
$LN240@ShowDemoWi:
  0405c	83 bd 14 0b 00
	00 04		 cmp	 DWORD PTR column$100[rbp], 4
  04063	0f 8d de 00 00
	00		 jge	 $LN239@ShowDemoWi

; 5015 :             {
; 5016 :                 ImGui::PushID(column);

  04069	8b 8d 14 0b 00
	00		 mov	 ecx, DWORD PTR column$100[rbp]
  0406f	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 5017 :                 if (ImGui::TableGetColumnFlags(column) & ImGuiTableColumnFlags_IsHovered)

  04074	8b 8d 14 0b 00
	00		 mov	 ecx, DWORD PTR column$100[rbp]
  0407a	e8 00 00 00 00	 call	 ?TableGetColumnFlags@ImGui@@YAHH@Z ; ImGui::TableGetColumnFlags
  0407f	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  04084	85 c0		 test	 eax, eax
  04086	74 0c		 je	 SHORT $LN404@ShowDemoWi

; 5018 :                     hovered_column = column;

  04088	8b 85 14 0b 00
	00		 mov	 eax, DWORD PTR column$100[rbp]
  0408e	89 85 f4 0a 00
	00		 mov	 DWORD PTR hovered_column$99[rbp], eax
$LN404@ShowDemoWi:

; 5019 :                 if (hovered_column == column && !ImGui::IsAnyItemHovered() && ImGui::IsMouseReleased(1))

  04094	8b 85 14 0b 00
	00		 mov	 eax, DWORD PTR column$100[rbp]
  0409a	39 85 f4 0a 00
	00		 cmp	 DWORD PTR hovered_column$99[rbp], eax
  040a0	75 2b		 jne	 SHORT $LN405@ShowDemoWi
  040a2	e8 00 00 00 00	 call	 ?IsAnyItemHovered@ImGui@@YA_NXZ ; ImGui::IsAnyItemHovered
  040a7	0f b6 c0	 movzx	 eax, al
  040aa	85 c0		 test	 eax, eax
  040ac	75 1f		 jne	 SHORT $LN405@ShowDemoWi
  040ae	b9 01 00 00 00	 mov	 ecx, 1
  040b3	e8 00 00 00 00	 call	 ?IsMouseReleased@ImGui@@YA_NH@Z ; ImGui::IsMouseReleased
  040b8	0f b6 c0	 movzx	 eax, al
  040bb	85 c0		 test	 eax, eax
  040bd	74 0e		 je	 SHORT $LN405@ShowDemoWi

; 5020 :                     ImGui::OpenPopup("MyPopup");

  040bf	33 d2		 xor	 edx, edx
  040c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07FAGDPJOI@MyPopup?$AA@
  040c8	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPEBDH@Z ; ImGui::OpenPopup
$LN405@ShowDemoWi:

; 5021 :                 if (ImGui::BeginPopup("MyPopup"))

  040cd	33 d2		 xor	 edx, edx
  040cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07FAGDPJOI@MyPopup?$AA@
  040d6	e8 00 00 00 00	 call	 ?BeginPopup@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopup
  040db	0f b6 c0	 movzx	 eax, al
  040de	85 c0		 test	 eax, eax
  040e0	74 5b		 je	 SHORT $LN406@ShowDemoWi

; 5022 :                 {
; 5023 :                     if (column == COLUMNS_COUNT)

  040e2	83 bd 14 0b 00
	00 03		 cmp	 DWORD PTR column$100[rbp], 3
  040e9	75 0e		 jne	 SHORT $LN407@ShowDemoWi

; 5024 :                         ImGui::Text("This is a custom popup for unused space after the last column.");

  040eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DP@GEHELPPM@This?5is?5a?5custom?5popup?5for?5unuse@
  040f2	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5025 :                     else

  040f7	eb 12		 jmp	 SHORT $LN408@ShowDemoWi
$LN407@ShowDemoWi:

; 5026 :                         ImGui::Text("This is a custom popup for Column %d", column);

  040f9	8b 95 14 0b 00
	00		 mov	 edx, DWORD PTR column$100[rbp]
  040ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@KGFMOBAJ@This?5is?5a?5custom?5popup?5for?5Colum@
  04106	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN408@ShowDemoWi:

; 5027 :                     if (ImGui::Button("Close"))

  0410b	0f 57 d2	 xorps	 xmm2, xmm2
  0410e	0f 57 c9	 xorps	 xmm1, xmm1
  04111	48 8d 8d f4 1b
	00 00		 lea	 rcx, QWORD PTR $T180[rbp]
  04118	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0411d	48 8b d0	 mov	 rdx, rax
  04120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LGELBCGM@Close?$AA@
  04127	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  0412c	0f b6 c0	 movzx	 eax, al
  0412f	85 c0		 test	 eax, eax
  04131	74 05		 je	 SHORT $LN409@ShowDemoWi

; 5028 :                         ImGui::CloseCurrentPopup();

  04133	e8 00 00 00 00	 call	 ?CloseCurrentPopup@ImGui@@YAXXZ ; ImGui::CloseCurrentPopup
$LN409@ShowDemoWi:

; 5029 :                     ImGui::EndPopup();

  04138	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN406@ShowDemoWi:

; 5030 :                 }
; 5031 :                 ImGui::PopID();

  0413d	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 5032 :             }

  04142	e9 07 ff ff ff	 jmp	 $LN238@ShowDemoWi
$LN239@ShowDemoWi:

; 5033 : 
; 5034 :             ImGui::EndTable();

  04147	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable

; 5035 :             ImGui::Text("Hovered column: %d", hovered_column);

  0414c	8b 95 f4 0a 00
	00		 mov	 edx, DWORD PTR hovered_column$99[rbp]
  04152	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@JLLLEHJI@Hovered?5column?3?5?$CFd?$AA@
  04159	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN401@ShowDemoWi:

; 5036 :         }
; 5037 :         ImGui::TreePop();

  0415e	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN399@ShowDemoWi:

; 5038 :     }
; 5039 : 
; 5040 :     // Demonstrate creating multiple tables with the same ID
; 5041 :     if (open_action != -1)

  04163	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  04167	74 24		 je	 SHORT $LN243@ShowDemoWi

; 5042 :         ImGui::SetNextItemOpen(open_action != 0);

  04169	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  0416d	74 09		 je	 SHORT $LN524@ShowDemoWi
  0416f	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv2511[rbp], 1
  04176	eb 07		 jmp	 SHORT $LN525@ShowDemoWi
$LN524@ShowDemoWi:
  04178	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv2511[rbp], 0
$LN525@ShowDemoWi:
  0417f	33 d2		 xor	 edx, edx
  04181	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv2511[rbp]
  04188	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN243@ShowDemoWi:

; 5043 :     IMGUI_DEMO_MARKER("Tables/Synced instances");

  0418d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  04195	74 28		 je	 SHORT $LN411@ShowDemoWi
  04197	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  0419d	05 08 05 00 00	 add	 eax, 1288		; 00000508H
  041a2	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  041a9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BI@EDLGPCJF@Tables?1Synced?5instances?$AA@
  041b0	8b d0		 mov	 edx, eax
  041b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  041b9	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN411@ShowDemoWi:
  041bf	33 c0		 xor	 eax, eax
  041c1	85 c0		 test	 eax, eax
  041c3	75 c8		 jne	 SHORT $LN243@ShowDemoWi

; 5044 :     if (ImGui::TreeNode("Synced instances"))

  041c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MJPJCLAG@Synced?5instances?$AA@
  041cc	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  041d1	0f b6 c0	 movzx	 eax, al
  041d4	85 c0		 test	 eax, eax
  041d6	0f 84 af 01 00
	00		 je	 $LN412@ShowDemoWi

; 5045 :     {
; 5046 :         HelpMarker("Multiple tables with the same identifier will share their settings, width, visibility, order etc.");

  041dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GC@BAAOPNDB@Multiple?5tables?5with?5the?5same?5id@
  041e3	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5047 : 
; 5048 :         static ImGuiTableFlags flags = ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable | ImGuiTableFlags_Borders | ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_NoSavedSettings;
; 5049 :         ImGui::CheckboxFlags("ImGuiTableFlags_ScrollY", &flags, ImGuiTableFlags_ScrollY);

  041e8	41 b8 00 00 00
	02		 mov	 r8d, 33554432		; 02000000H
  041ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?BOE@??ShowDemoWindowTables@@YAXXZ@4HA
  041f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@KPIOAOMA@ImGuiTableFlags_ScrollY?$AA@
  041fc	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5050 :         ImGui::CheckboxFlags("ImGuiTableFlags_SizingFixedFit", &flags, ImGuiTableFlags_SizingFixedFit);

  04201	41 b8 00 20 00
	00		 mov	 r8d, 8192		; 00002000H
  04207	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?BOE@??ShowDemoWindowTables@@YAXXZ@4HA
  0420e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@MPLHLLNP@ImGuiTableFlags_SizingFixedFit?$AA@
  04215	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5051 :         for (int n = 0; n < 3; n++)

  0421a	c7 85 34 0b 00
	00 00 00 00 00	 mov	 DWORD PTR n$101[rbp], 0
  04224	eb 0e		 jmp	 SHORT $LN246@ShowDemoWi
$LN244@ShowDemoWi:
  04226	8b 85 34 0b 00
	00		 mov	 eax, DWORD PTR n$101[rbp]
  0422c	ff c0		 inc	 eax
  0422e	89 85 34 0b 00
	00		 mov	 DWORD PTR n$101[rbp], eax
$LN246@ShowDemoWi:
  04234	83 bd 34 0b 00
	00 03		 cmp	 DWORD PTR n$101[rbp], 3
  0423b	0f 8d 45 01 00
	00		 jge	 $LN245@ShowDemoWi

; 5052 :         {
; 5053 :             char buf[32];
; 5054 :             sprintf(buf, "Synced Table %d", n);

  04241	44 8b 85 34 0b
	00 00		 mov	 r8d, DWORD PTR n$101[rbp]
  04248	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@PHDCMLKN@Synced?5Table?5?$CFd?$AA@
  0424f	48 8d 8d 58 0b
	00 00		 lea	 rcx, QWORD PTR buf$102[rbp]
  04256	e8 00 00 00 00	 call	 sprintf

; 5055 :             bool open = ImGui::CollapsingHeader(buf, ImGuiTreeNodeFlags_DefaultOpen);

  0425b	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  04260	48 8d 8d 58 0b
	00 00		 lea	 rcx, QWORD PTR buf$102[rbp]
  04267	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPEBDH@Z ; ImGui::CollapsingHeader
  0426c	88 85 94 0b 00
	00		 mov	 BYTE PTR open$103[rbp], al

; 5056 :             if (open && ImGui::BeginTable("Table", 3, flags, ImVec2(0.0f, ImGui::GetTextLineHeightWithSpacing() * 5)))

  04272	0f b6 85 94 0b
	00 00		 movzx	 eax, BYTE PTR open$103[rbp]
  04279	85 c0		 test	 eax, eax
  0427b	0f 84 00 01 00
	00		 je	 $LN413@ShowDemoWi
  04281	e8 00 00 00 00	 call	 ?GetTextLineHeightWithSpacing@ImGui@@YAMXZ ; ImGui::GetTextLineHeightWithSpacing
  04286	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40a00000
  0428e	0f 28 d0	 movaps	 xmm2, xmm0
  04291	0f 57 c9	 xorps	 xmm1, xmm1
  04294	48 8d 8d 14 1c
	00 00		 lea	 rcx, QWORD PTR $T181[rbp]
  0429b	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  042a0	0f 57 c0	 xorps	 xmm0, xmm0
  042a3	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  042a9	4c 8b c8	 mov	 r9, rax
  042ac	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags@?BOE@??ShowDemoWindowTables@@YAXXZ@4HA
  042b3	ba 03 00 00 00	 mov	 edx, 3
  042b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LFBINIGO@Table?$AA@
  042bf	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  042c4	0f b6 c0	 movzx	 eax, al
  042c7	85 c0		 test	 eax, eax
  042c9	0f 84 b2 00 00
	00		 je	 $LN413@ShowDemoWi

; 5057 :             {
; 5058 :                 ImGui::TableSetupColumn("One");

  042cf	45 33 c9	 xor	 r9d, r9d
  042d2	0f 57 d2	 xorps	 xmm2, xmm2
  042d5	33 d2		 xor	 edx, edx
  042d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03EHAPBBEA@One?$AA@
  042de	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 5059 :                 ImGui::TableSetupColumn("Two");

  042e3	45 33 c9	 xor	 r9d, r9d
  042e6	0f 57 d2	 xorps	 xmm2, xmm2
  042e9	33 d2		 xor	 edx, edx
  042eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CJAPLBKL@Two?$AA@
  042f2	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 5060 :                 ImGui::TableSetupColumn("Three");

  042f7	45 33 c9	 xor	 r9d, r9d
  042fa	0f 57 d2	 xorps	 xmm2, xmm2
  042fd	33 d2		 xor	 edx, edx
  042ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OHMANGAP@Three?$AA@
  04306	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 5061 :                 ImGui::TableHeadersRow();

  0430b	e8 00 00 00 00	 call	 ?TableHeadersRow@ImGui@@YAXXZ ; ImGui::TableHeadersRow

; 5062 :                 const int cell_count = (n == 1) ? 27 : 9; // Make second table have a scrollbar to verify that additional decoration is not affecting column positions.

  04310	83 bd 34 0b 00
	00 01		 cmp	 DWORD PTR n$101[rbp], 1
  04317	75 0c		 jne	 SHORT $LN526@ShowDemoWi
  04319	c7 85 c4 1d 00
	00 1b 00 00 00	 mov	 DWORD PTR tv2600[rbp], 27
  04323	eb 0a		 jmp	 SHORT $LN527@ShowDemoWi
$LN526@ShowDemoWi:
  04325	c7 85 c4 1d 00
	00 09 00 00 00	 mov	 DWORD PTR tv2600[rbp], 9
$LN527@ShowDemoWi:
  0432f	8b 85 c4 1d 00
	00		 mov	 eax, DWORD PTR tv2600[rbp]
  04335	89 85 b4 0b 00
	00		 mov	 DWORD PTR cell_count$104[rbp], eax

; 5063 :                 for (int cell = 0; cell < cell_count; cell++)

  0433b	c7 85 d4 0b 00
	00 00 00 00 00	 mov	 DWORD PTR cell$105[rbp], 0
  04345	eb 0e		 jmp	 SHORT $LN249@ShowDemoWi
$LN247@ShowDemoWi:
  04347	8b 85 d4 0b 00
	00		 mov	 eax, DWORD PTR cell$105[rbp]
  0434d	ff c0		 inc	 eax
  0434f	89 85 d4 0b 00
	00		 mov	 DWORD PTR cell$105[rbp], eax
$LN249@ShowDemoWi:
  04355	8b 85 b4 0b 00
	00		 mov	 eax, DWORD PTR cell_count$104[rbp]
  0435b	39 85 d4 0b 00
	00		 cmp	 DWORD PTR cell$105[rbp], eax
  04361	7d 19		 jge	 SHORT $LN248@ShowDemoWi

; 5064 :                 {
; 5065 :                     ImGui::TableNextColumn();

  04363	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 5066 :                     ImGui::Text("this cell %d", cell);

  04368	8b 95 d4 0b 00
	00		 mov	 edx, DWORD PTR cell$105[rbp]
  0436e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@CLLFLFPN@this?5cell?5?$CFd?$AA@
  04375	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5067 :                 }

  0437a	eb cb		 jmp	 SHORT $LN247@ShowDemoWi
$LN248@ShowDemoWi:

; 5068 :                 ImGui::EndTable();

  0437c	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN413@ShowDemoWi:

; 5069 :             }
; 5070 :         }

  04381	e9 a0 fe ff ff	 jmp	 $LN244@ShowDemoWi
$LN245@ShowDemoWi:

; 5071 :         ImGui::TreePop();

  04386	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN412@ShowDemoWi:

; 5072 :     }
; 5073 : 
; 5074 :     // Demonstrate using Sorting facilities
; 5075 :     // This is a simplified version of the "Advanced" example, where we mostly focus on the code necessary to handle sorting.
; 5076 :     // Note that the "Advanced" example also showcase manually triggering a sort (e.g. if item quantities have been modified)
; 5077 :     static const char* template_items_names[] =
; 5078 :     {
; 5079 :         "Banana", "Apple", "Cherry", "Watermelon", "Grapefruit", "Strawberry", "Mango",
; 5080 :         "Kiwi", "Orange", "Pineapple", "Blueberry", "Plum", "Coconut", "Pear", "Apricot"
; 5081 :     };
; 5082 :     if (open_action != -1)

  0438b	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  0438f	74 24		 je	 SHORT $LN252@ShowDemoWi

; 5083 :         ImGui::SetNextItemOpen(open_action != 0);

  04391	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  04395	74 09		 je	 SHORT $LN528@ShowDemoWi
  04397	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv2608[rbp], 1
  0439e	eb 07		 jmp	 SHORT $LN529@ShowDemoWi
$LN528@ShowDemoWi:
  043a0	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv2608[rbp], 0
$LN529@ShowDemoWi:
  043a7	33 d2		 xor	 edx, edx
  043a9	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv2608[rbp]
  043b0	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN252@ShowDemoWi:

; 5084 :     IMGUI_DEMO_MARKER("Tables/Sorting");

  043b5	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  043bd	74 28		 je	 SHORT $LN415@ShowDemoWi
  043bf	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  043c5	05 31 05 00 00	 add	 eax, 1329		; 00000531H
  043ca	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  043d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@NNGNJFDG@Tables?1Sorting?$AA@
  043d8	8b d0		 mov	 edx, eax
  043da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  043e1	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN415@ShowDemoWi:
  043e7	33 c0		 xor	 eax, eax
  043e9	85 c0		 test	 eax, eax
  043eb	75 c8		 jne	 SHORT $LN252@ShowDemoWi

; 5085 :     if (ImGui::TreeNode("Sorting"))

  043ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07FIOJKBLJ@Sorting?$AA@
  043f4	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  043f9	0f b6 c0	 movzx	 eax, al
  043fc	85 c0		 test	 eax, eax
  043fe	0f 84 30 04 00
	00		 je	 $LN416@ShowDemoWi

; 5086 :     {
; 5087 :         // Create item list
; 5088 :         static ImVector<MyItem> items;

  04404	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  04409	8b c0		 mov	 eax, eax
  0440b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04411	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0441a	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0441e	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  04421	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS1@?BPE@??ShowDemoWindowTables@@YAXXZ@4HA, eax
  04427	7e 3a		 jle	 SHORT $LN253@ShowDemoWi
  04429	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?BPE@??ShowDemoWindowTables@@YAXXZ@4HA
  04430	e8 00 00 00 00	 call	 _Init_thread_header
  04435	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS1@?BPE@??ShowDemoWindowTables@@YAXXZ@4HA, -1
  0443c	75 25		 jne	 SHORT $LN253@ShowDemoWi
  0443e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?items@?BPE@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A
  04445	e8 00 00 00 00	 call	 ??0?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ ; ImVector<`anonymous namespace'::MyItem>::ImVector<`anonymous namespace'::MyItem>
  0444a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__Fitems@?BPE@??ShowDemoWindowTables@@YAXXZ@YAXXZ ; `ShowDemoWindowTables'::`500'::`dynamic atexit destructor for 'items''
  04451	e8 00 00 00 00	 call	 atexit
  04456	90		 npad	 1
  04457	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?BPE@??ShowDemoWindowTables@@YAXXZ@4HA
  0445e	e8 00 00 00 00	 call	 _Init_thread_footer
$LN253@ShowDemoWi:

; 5089 :         if (items.Size == 0)

  04463	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?items@?BPE@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A, 0
  0446a	0f 85 de 00 00
	00		 jne	 $LN417@ShowDemoWi

; 5090 :         {
; 5091 :             items.resize(50, MyItem());

  04470	48 8d 85 38 1c
	00 00		 lea	 rax, QWORD PTR $T182[rbp]
  04477	48 8b f8	 mov	 rdi, rax
  0447a	33 c0		 xor	 eax, eax
  0447c	b9 18 00 00 00	 mov	 ecx, 24
  04481	f3 aa		 rep stosb
  04483	4c 8d 85 38 1c
	00 00		 lea	 r8, QWORD PTR $T182[rbp]
  0448a	ba 32 00 00 00	 mov	 edx, 50			; 00000032H
  0448f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?items@?BPE@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A
  04496	e8 00 00 00 00	 call	 ?resize@?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAXHAEBUMyItem@?A0x1ed25892@@@Z ; ImVector<`anonymous namespace'::MyItem>::resize

; 5092 :             for (int n = 0; n < items.Size; n++)

  0449b	c7 85 f4 0b 00
	00 00 00 00 00	 mov	 DWORD PTR n$106[rbp], 0
  044a5	eb 0e		 jmp	 SHORT $LN256@ShowDemoWi
$LN254@ShowDemoWi:
  044a7	8b 85 f4 0b 00
	00		 mov	 eax, DWORD PTR n$106[rbp]
  044ad	ff c0		 inc	 eax
  044af	89 85 f4 0b 00
	00		 mov	 DWORD PTR n$106[rbp], eax
$LN256@ShowDemoWi:
  044b5	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?items@?BPE@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A
  044bb	39 85 f4 0b 00
	00		 cmp	 DWORD PTR n$106[rbp], eax
  044c1	0f 8d 87 00 00
	00		 jge	 $LN417@ShowDemoWi

; 5093 :             {
; 5094 :                 const int template_n = n % IM_ARRAYSIZE(template_items_names);

  044c7	8b 85 f4 0b 00
	00		 mov	 eax, DWORD PTR n$106[rbp]
  044cd	99		 cdq
  044ce	b9 0f 00 00 00	 mov	 ecx, 15
  044d3	f7 f9		 idiv	 ecx
  044d5	8b c2		 mov	 eax, edx
  044d7	89 85 14 0c 00
	00		 mov	 DWORD PTR template_n$107[rbp], eax

; 5095 :                 MyItem& item = items[n];

  044dd	8b 95 f4 0b 00
	00		 mov	 edx, DWORD PTR n$106[rbp]
  044e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?items@?BPE@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A
  044ea	e8 00 00 00 00	 call	 ??A?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAAEAUMyItem@?A0x1ed25892@@H@Z ; ImVector<`anonymous namespace'::MyItem>::operator[]
  044ef	48 89 85 38 0c
	00 00		 mov	 QWORD PTR item$108[rbp], rax

; 5096 :                 item.ID = n;

  044f6	48 8b 85 38 0c
	00 00		 mov	 rax, QWORD PTR item$108[rbp]
  044fd	8b 8d f4 0b 00
	00		 mov	 ecx, DWORD PTR n$106[rbp]
  04503	89 08		 mov	 DWORD PTR [rax], ecx

; 5097 :                 item.Name = template_items_names[template_n];

  04505	48 63 85 14 0c
	00 00		 movsxd	 rax, DWORD PTR template_n$107[rbp]
  0450c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?template_items_names@?1??ShowDemoWindowTables@@YAXXZ@4PAPEBDA
  04513	48 8b 95 38 0c
	00 00		 mov	 rdx, QWORD PTR item$108[rbp]
  0451a	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0451e	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax

; 5098 :                 item.Quantity = (n * n - n) % 20; // Assign default quantities

  04522	8b 85 f4 0b 00
	00		 mov	 eax, DWORD PTR n$106[rbp]
  04528	0f af 85 f4 0b
	00 00		 imul	 eax, DWORD PTR n$106[rbp]
  0452f	2b 85 f4 0b 00
	00		 sub	 eax, DWORD PTR n$106[rbp]
  04535	99		 cdq
  04536	b9 14 00 00 00	 mov	 ecx, 20
  0453b	f7 f9		 idiv	 ecx
  0453d	8b c2		 mov	 eax, edx
  0453f	48 8b 8d 38 0c
	00 00		 mov	 rcx, QWORD PTR item$108[rbp]
  04546	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 5099 :             }

  04549	e9 59 ff ff ff	 jmp	 $LN254@ShowDemoWi
$LN417@ShowDemoWi:

; 5100 :         }
; 5101 : 
; 5102 :         // Options
; 5103 :         static ImGuiTableFlags flags =
; 5104 :             ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable | ImGuiTableFlags_Sortable | ImGuiTableFlags_SortMulti
; 5105 :             | ImGuiTableFlags_RowBg | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV | ImGuiTableFlags_NoBordersInBody
; 5106 :             | ImGuiTableFlags_ScrollY;
; 5107 :         PushStyleCompact();

  0454e	e8 00 00 00 00	 call	 ?PushStyleCompact@@YAXXZ ; PushStyleCompact

; 5108 :         ImGui::CheckboxFlags("ImGuiTableFlags_SortMulti", &flags, ImGuiTableFlags_SortMulti);

  04553	41 b8 00 00 00
	04		 mov	 r8d, 67108864		; 04000000H
  04559	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?BPE@??ShowDemoWindowTables@@YAXXZ@4HA
  04560	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@COJNFFHG@ImGuiTableFlags_SortMulti?$AA@
  04567	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5109 :         ImGui::SameLine(); HelpMarker("When sorting is enabled: hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount > 1).");

  0456c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  04574	0f 57 c0	 xorps	 xmm0, xmm0
  04577	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0457c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0JD@OJLOANPI@When?5sorting?5is?5enabled?3?5hold?5sh@
  04583	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5110 :         ImGui::CheckboxFlags("ImGuiTableFlags_SortTristate", &flags, ImGuiTableFlags_SortTristate);

  04588	41 b8 00 00 00
	08		 mov	 r8d, 134217728		; 08000000H
  0458e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?BPE@??ShowDemoWindowTables@@YAXXZ@4HA
  04595	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@MANCMDD@ImGuiTableFlags_SortTristate?$AA@
  0459c	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5111 :         ImGui::SameLine(); HelpMarker("When sorting is enabled: allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0).");

  045a1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  045a9	0f 57 c0	 xorps	 xmm0, xmm0
  045ac	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  045b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0IC@CNBEEKGB@When?5sorting?5is?5enabled?3?5allow?5n@
  045b8	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5112 :         PopStyleCompact();

  045bd	e8 00 00 00 00	 call	 ?PopStyleCompact@@YAXXZ	; PopStyleCompact

; 5113 : 
; 5114 :         if (ImGui::BeginTable("table_sorting", 4, flags, ImVec2(0.0f, TEXT_BASE_HEIGHT * 15), 0.0f))

  045c2	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR TEXT_BASE_HEIGHT$[rbp]
  045c7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41700000
  045cf	0f 28 d0	 movaps	 xmm2, xmm0
  045d2	0f 57 c9	 xorps	 xmm1, xmm1
  045d5	48 8d 8d 64 1c
	00 00		 lea	 rcx, QWORD PTR $T183[rbp]
  045dc	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  045e1	0f 57 c0	 xorps	 xmm0, xmm0
  045e4	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  045ea	4c 8b c8	 mov	 r9, rax
  045ed	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags@?BPE@??ShowDemoWindowTables@@YAXXZ@4HA
  045f4	ba 04 00 00 00	 mov	 edx, 4
  045f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DBCCONDP@table_sorting?$AA@
  04600	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  04605	0f b6 c0	 movzx	 eax, al
  04608	85 c0		 test	 eax, eax
  0460a	0f 84 1f 02 00
	00		 je	 $LN418@ShowDemoWi

; 5115 :         {
; 5116 :             // Declare columns
; 5117 :             // We use the "user_id" parameter of TableSetupColumn() to specify a user id that will be stored in the sort specifications.
; 5118 :             // This is so our sort function can identify a column given our own identifier. We could also identify them based on their index!
; 5119 :             // Demonstrate using a mixture of flags among available sort-related flags:
; 5120 :             // - ImGuiTableColumnFlags_DefaultSort
; 5121 :             // - ImGuiTableColumnFlags_NoSort / ImGuiTableColumnFlags_NoSortAscending / ImGuiTableColumnFlags_NoSortDescending
; 5122 :             // - ImGuiTableColumnFlags_PreferSortAscending / ImGuiTableColumnFlags_PreferSortDescending
; 5123 :             ImGui::TableSetupColumn("ID",       ImGuiTableColumnFlags_DefaultSort          | ImGuiTableColumnFlags_WidthFixed,   0.0f, MyItemColumnID_ID);

  04610	45 33 c9	 xor	 r9d, r9d
  04613	0f 57 d2	 xorps	 xmm2, xmm2
  04616	ba 14 00 00 00	 mov	 edx, 20
  0461b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02OLOABKKD@ID?$AA@
  04622	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 5124 :             ImGui::TableSetupColumn("Name",                                                  ImGuiTableColumnFlags_WidthFixed,   0.0f, MyItemColumnID_Name);

  04627	41 b9 01 00 00
	00		 mov	 r9d, 1
  0462d	0f 57 d2	 xorps	 xmm2, xmm2
  04630	ba 10 00 00 00	 mov	 edx, 16
  04635	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04FABLJDN@Name?$AA@
  0463c	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 5125 :             ImGui::TableSetupColumn("Action",   ImGuiTableColumnFlags_NoSort               | ImGuiTableColumnFlags_WidthFixed,   0.0f, MyItemColumnID_Action);

  04641	41 b9 02 00 00
	00		 mov	 r9d, 2
  04647	0f 57 d2	 xorps	 xmm2, xmm2
  0464a	ba 10 02 00 00	 mov	 edx, 528		; 00000210H
  0464f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06PMAGBHAK@Action?$AA@
  04656	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 5126 :             ImGui::TableSetupColumn("Quantity", ImGuiTableColumnFlags_PreferSortDescending | ImGuiTableColumnFlags_WidthStretch, 0.0f, MyItemColumnID_Quantity);

  0465b	41 b9 03 00 00
	00		 mov	 r9d, 3
  04661	0f 57 d2	 xorps	 xmm2, xmm2
  04664	ba 08 80 00 00	 mov	 edx, 32776		; 00008008H
  04669	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08GACJPEFO@Quantity?$AA@
  04670	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 5127 :             ImGui::TableSetupScrollFreeze(0, 1); // Make row always visible

  04675	ba 01 00 00 00	 mov	 edx, 1
  0467a	33 c9		 xor	 ecx, ecx
  0467c	e8 00 00 00 00	 call	 ?TableSetupScrollFreeze@ImGui@@YAXHH@Z ; ImGui::TableSetupScrollFreeze

; 5128 :             ImGui::TableHeadersRow();

  04681	e8 00 00 00 00	 call	 ?TableHeadersRow@ImGui@@YAXXZ ; ImGui::TableHeadersRow

; 5129 : 
; 5130 :             // Sort our data if sort specs have been changed!
; 5131 :             if (ImGuiTableSortSpecs* sorts_specs = ImGui::TableGetSortSpecs())

  04686	e8 00 00 00 00	 call	 ?TableGetSortSpecs@ImGui@@YAPEAUImGuiTableSortSpecs@@XZ ; ImGui::TableGetSortSpecs
  0468b	48 89 85 58 0c
	00 00		 mov	 QWORD PTR sorts_specs$109[rbp], rax
  04692	48 83 bd 58 0c
	00 00 00	 cmp	 QWORD PTR sorts_specs$109[rbp], 0
  0469a	74 78		 je	 SHORT $LN419@ShowDemoWi

; 5132 :                 if (sorts_specs->SpecsDirty)

  0469c	48 8b 85 58 0c
	00 00		 mov	 rax, QWORD PTR sorts_specs$109[rbp]
  046a3	0f b6 40 0c	 movzx	 eax, BYTE PTR [rax+12]
  046a7	85 c0		 test	 eax, eax
  046a9	74 69		 je	 SHORT $LN419@ShowDemoWi

; 5133 :                 {
; 5134 :                     MyItem::s_current_sort_specs = sorts_specs; // Store in variable accessible by the sort function.

  046ab	48 8b 85 58 0c
	00 00		 mov	 rax, QWORD PTR sorts_specs$109[rbp]
  046b2	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?s_current_sort_specs@MyItem@?A0x1ed25892@@2PEBUImGuiTableSortSpecs@@EB, rax ; `anonymous namespace'::MyItem::s_current_sort_specs

; 5135 :                     if (items.Size > 1)

  046b9	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?items@?BPE@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A, 1
  046c0	7e 3c		 jle	 SHORT $LN421@ShowDemoWi

; 5136 :                         qsort(&items[0], (size_t)items.Size, sizeof(items[0]), MyItem::CompareWithSortSpecs);

  046c2	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR ?items@?BPE@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A
  046c9	48 89 85 c8 1d
	00 00		 mov	 QWORD PTR tv2708[rbp], rax
  046d0	33 d2		 xor	 edx, edx
  046d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?items@?BPE@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A
  046d9	e8 00 00 00 00	 call	 ??A?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAAEAUMyItem@?A0x1ed25892@@H@Z ; ImVector<`anonymous namespace'::MyItem>::operator[]
  046de	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?CompareWithSortSpecs@MyItem@?A0x1ed25892@@SAHPEBX0@Z ; `anonymous namespace'::MyItem::CompareWithSortSpecs
  046e5	41 b8 18 00 00
	00		 mov	 r8d, 24
  046eb	48 8b 8d c8 1d
	00 00		 mov	 rcx, QWORD PTR tv2708[rbp]
  046f2	48 8b d1	 mov	 rdx, rcx
  046f5	48 8b c8	 mov	 rcx, rax
  046f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort
$LN421@ShowDemoWi:

; 5137 :                     MyItem::s_current_sort_specs = NULL;

  046fe	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR ?s_current_sort_specs@MyItem@?A0x1ed25892@@2PEBUImGuiTableSortSpecs@@EB, 0 ; `anonymous namespace'::MyItem::s_current_sort_specs

; 5138 :                     sorts_specs->SpecsDirty = false;

  04709	48 8b 85 58 0c
	00 00		 mov	 rax, QWORD PTR sorts_specs$109[rbp]
  04710	c6 40 0c 00	 mov	 BYTE PTR [rax+12], 0
$LN419@ShowDemoWi:

; 5139 :                 }
; 5140 : 
; 5141 :             // Demonstrate using clipper for large vertical lists
; 5142 :             ImGuiListClipper clipper;

  04714	48 8d 8d 78 0c
	00 00		 lea	 rcx, QWORD PTR clipper$110[rbp]
  0471b	e8 00 00 00 00	 call	 ??0ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::ImGuiListClipper
  04720	90		 npad	 1

; 5143 :             clipper.Begin(items.Size);

  04721	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  04729	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?items@?BPE@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A
  0472f	48 8d 8d 78 0c
	00 00		 lea	 rcx, QWORD PTR clipper$110[rbp]
  04736	e8 00 00 00 00	 call	 ?Begin@ImGuiListClipper@@QEAAXHM@Z ; ImGuiListClipper::Begin
$LN257@ShowDemoWi:

; 5144 :             while (clipper.Step())

  0473b	48 8d 8d 78 0c
	00 00		 lea	 rcx, QWORD PTR clipper$110[rbp]
  04742	e8 00 00 00 00	 call	 ?Step@ImGuiListClipper@@QEAA_NXZ ; ImGuiListClipper::Step
  04747	0f b6 c0	 movzx	 eax, al
  0474a	85 c0		 test	 eax, eax
  0474c	0f 84 cb 00 00
	00		 je	 $LN258@ShowDemoWi

; 5145 :                 for (int row_n = clipper.DisplayStart; row_n < clipper.DisplayEnd; row_n++)

  04752	8b 85 78 0c 00
	00		 mov	 eax, DWORD PTR clipper$110[rbp]
  04758	89 85 b4 0c 00
	00		 mov	 DWORD PTR row_n$111[rbp], eax
  0475e	eb 0e		 jmp	 SHORT $LN261@ShowDemoWi
$LN259@ShowDemoWi:
  04760	8b 85 b4 0c 00
	00		 mov	 eax, DWORD PTR row_n$111[rbp]
  04766	ff c0		 inc	 eax
  04768	89 85 b4 0c 00
	00		 mov	 DWORD PTR row_n$111[rbp], eax
$LN261@ShowDemoWi:
  0476e	8b 85 7c 0c 00
	00		 mov	 eax, DWORD PTR clipper$110[rbp+4]
  04774	39 85 b4 0c 00
	00		 cmp	 DWORD PTR row_n$111[rbp], eax
  0477a	0f 8d 98 00 00
	00		 jge	 $LN260@ShowDemoWi

; 5146 :                 {
; 5147 :                     // Display a data item
; 5148 :                     MyItem* item = &items[row_n];

  04780	8b 95 b4 0c 00
	00		 mov	 edx, DWORD PTR row_n$111[rbp]
  04786	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?items@?BPE@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A
  0478d	e8 00 00 00 00	 call	 ??A?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAAEAUMyItem@?A0x1ed25892@@H@Z ; ImVector<`anonymous namespace'::MyItem>::operator[]
  04792	48 89 85 d8 0c
	00 00		 mov	 QWORD PTR item$112[rbp], rax

; 5149 :                     ImGui::PushID(item->ID);

  04799	48 8b 85 d8 0c
	00 00		 mov	 rax, QWORD PTR item$112[rbp]
  047a0	8b 08		 mov	 ecx, DWORD PTR [rax]
  047a2	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 5150 :                     ImGui::TableNextRow();

  047a7	0f 57 c9	 xorps	 xmm1, xmm1
  047aa	33 c9		 xor	 ecx, ecx
  047ac	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 5151 :                     ImGui::TableNextColumn();

  047b1	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 5152 :                     ImGui::Text("%04d", item->ID);

  047b6	48 8b 85 d8 0c
	00 00		 mov	 rax, QWORD PTR item$112[rbp]
  047bd	8b 10		 mov	 edx, DWORD PTR [rax]
  047bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04OCCELDNI@?$CF04d?$AA@
  047c6	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5153 :                     ImGui::TableNextColumn();

  047cb	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 5154 :                     ImGui::TextUnformatted(item->Name);

  047d0	33 d2		 xor	 edx, edx
  047d2	48 8b 85 d8 0c
	00 00		 mov	 rax, QWORD PTR item$112[rbp]
  047d9	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  047dd	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted

; 5155 :                     ImGui::TableNextColumn();

  047e2	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 5156 :                     ImGui::SmallButton("None");

  047e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04OHJIHAFH@None?$AA@
  047ee	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton

; 5157 :                     ImGui::TableNextColumn();

  047f3	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 5158 :                     ImGui::Text("%d", item->Quantity);

  047f8	48 8b 85 d8 0c
	00 00		 mov	 rax, QWORD PTR item$112[rbp]
  047ff	8b 50 10	 mov	 edx, DWORD PTR [rax+16]
  04802	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  04809	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5159 :                     ImGui::PopID();

  0480e	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 5160 :                 }

  04813	e9 48 ff ff ff	 jmp	 $LN259@ShowDemoWi
$LN260@ShowDemoWi:
  04818	e9 1e ff ff ff	 jmp	 $LN257@ShowDemoWi
$LN258@ShowDemoWi:

; 5161 :             ImGui::EndTable();

  0481d	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
  04822	90		 npad	 1

; 5162 :         }

  04823	48 8d 8d 78 0c
	00 00		 lea	 rcx, QWORD PTR clipper$110[rbp]
  0482a	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::~ImGuiListClipper
$LN418@ShowDemoWi:

; 5163 :         ImGui::TreePop();

  0482f	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN416@ShowDemoWi:

; 5164 :     }
; 5165 : 
; 5166 :     // In this example we'll expose most table flags and settings.
; 5167 :     // For specific flags and settings refer to the corresponding section for more detailed explanation.
; 5168 :     // This section is mostly useful to experiment with combining certain flags or settings with each others.
; 5169 :     //ImGui::SetNextItemOpen(true, ImGuiCond_Once); // [DEBUG]
; 5170 :     if (open_action != -1)

  04834	83 7d 44 ff	 cmp	 DWORD PTR open_action$[rbp], -1
  04838	74 24		 je	 SHORT $LN264@ShowDemoWi

; 5171 :         ImGui::SetNextItemOpen(open_action != 0);

  0483a	83 7d 44 00	 cmp	 DWORD PTR open_action$[rbp], 0
  0483e	74 09		 je	 SHORT $LN530@ShowDemoWi
  04840	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv2747[rbp], 1
  04847	eb 07		 jmp	 SHORT $LN531@ShowDemoWi
$LN530@ShowDemoWi:
  04849	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv2747[rbp], 0
$LN531@ShowDemoWi:
  04850	33 d2		 xor	 edx, edx
  04852	0f b6 8d c4 1d
	00 00		 movzx	 ecx, BYTE PTR tv2747[rbp]
  04859	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN264@ShowDemoWi:

; 5172 :     IMGUI_DEMO_MARKER("Tables/Advanced");

  0485e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  04866	74 28		 je	 SHORT $LN423@ShowDemoWi
  04868	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowTables@@YAXXZ@4JA
  0486e	05 89 05 00 00	 add	 eax, 1417		; 00000589H
  04873	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0487a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@PFDAEHJG@Tables?1Advanced?$AA@
  04881	8b d0		 mov	 edx, eax
  04883	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0488a	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN423@ShowDemoWi:
  04890	33 c0		 xor	 eax, eax
  04892	85 c0		 test	 eax, eax
  04894	75 c8		 jne	 SHORT $LN264@ShowDemoWi

; 5173 :     if (ImGui::TreeNode("Advanced"))

  04896	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08IILCFNBD@Advanced?$AA@
  0489d	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  048a2	0f b6 c0	 movzx	 eax, al
  048a5	85 c0		 test	 eax, eax
  048a7	0f 84 af 11 00
	00		 je	 $LN424@ShowDemoWi

; 5174 :     {
; 5175 :         static ImGuiTableFlags flags =
; 5176 :             ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable
; 5177 :             | ImGuiTableFlags_Sortable | ImGuiTableFlags_SortMulti
; 5178 :             | ImGuiTableFlags_RowBg | ImGuiTableFlags_Borders | ImGuiTableFlags_NoBordersInBody
; 5179 :             | ImGuiTableFlags_ScrollX | ImGuiTableFlags_ScrollY
; 5180 :             | ImGuiTableFlags_SizingFixedFit;
; 5181 : 
; 5182 :         enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT_SelectableSpanRow };
; 5183 :         static int contents_type = CT_SelectableSpanRow;
; 5184 :         const char* contents_type_names[] = { "Text", "Button", "SmallButton", "FillButton", "Selectable", "Selectable (span row)" };

  048ad	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04OJAHODMC@Text?$AA@
  048b4	48 89 85 f8 0c
	00 00		 mov	 QWORD PTR contents_type_names$113[rbp], rax
  048bb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06LKBCGDFD@Button?$AA@
  048c2	48 89 85 00 0d
	00 00		 mov	 QWORD PTR contents_type_names$113[rbp+8], rax
  048c9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0M@IPDIIBIL@SmallButton?$AA@
  048d0	48 89 85 08 0d
	00 00		 mov	 QWORD PTR contents_type_names$113[rbp+16], rax
  048d7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0L@GCOFDGJD@FillButton?$AA@
  048de	48 89 85 10 0d
	00 00		 mov	 QWORD PTR contents_type_names$113[rbp+24], rax
  048e5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0L@CGGBDDBB@Selectable?$AA@
  048ec	48 89 85 18 0d
	00 00		 mov	 QWORD PTR contents_type_names$113[rbp+32], rax
  048f3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BG@GEMFLDEN@Selectable?5?$CIspan?5row?$CJ?$AA@
  048fa	48 89 85 20 0d
	00 00		 mov	 QWORD PTR contents_type_names$113[rbp+40], rax

; 5185 :         static int freeze_cols = 1;
; 5186 :         static int freeze_rows = 1;
; 5187 :         static int items_count = IM_ARRAYSIZE(template_items_names) * 2;
; 5188 :         static ImVec2 outer_size_value = ImVec2(0.0f, TEXT_BASE_HEIGHT * 12);

  04901	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  04906	8b c0		 mov	 eax, eax
  04908	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0490e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04917	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0491b	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  0491e	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS2@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA, eax
  04924	7e 41		 jle	 SHORT $LN265@ShowDemoWi
  04926	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS2@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  0492d	e8 00 00 00 00	 call	 _Init_thread_header
  04932	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS2@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA, -1
  04939	75 2c		 jne	 SHORT $LN265@ShowDemoWi
  0493b	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR TEXT_BASE_HEIGHT$[rbp]
  04940	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41400000
  04948	0f 28 d0	 movaps	 xmm2, xmm0
  0494b	0f 57 c9	 xorps	 xmm1, xmm1
  0494e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?outer_size_value@?CAP@??ShowDemoWindowTables@@YAXXZ@4UImVec2@@A
  04955	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0495a	90		 npad	 1
  0495b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS2@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04962	e8 00 00 00 00	 call	 _Init_thread_footer
$LN265@ShowDemoWi:

; 5189 :         static float row_min_height = 0.0f; // Auto
; 5190 :         static float inner_width_with_scroll = 0.0f; // Auto-extend
; 5191 :         static bool outer_size_enabled = true;
; 5192 :         static bool show_headers = true;
; 5193 :         static bool show_wrapped_text = false;
; 5194 :         //static ImGuiTextFilter filter;
; 5195 :         //ImGui::SetNextItemOpen(true, ImGuiCond_Once); // FIXME-TABLE: Enabling this results in initial clipped first pass on table which tend to affect column sizing
; 5196 :         if (ImGui::TreeNode("Options"))

  04967	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07KHIHFBFN@Options?$AA@
  0496e	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  04973	0f b6 c0	 movzx	 eax, al
  04976	85 c0		 test	 eax, eax
  04978	0f 84 13 07 00
	00		 je	 $LN425@ShowDemoWi

; 5197 :         {
; 5198 :             // Make the UI compact because there are so many fields
; 5199 :             PushStyleCompact();

  0497e	e8 00 00 00 00	 call	 ?PushStyleCompact@@YAXXZ ; PushStyleCompact

; 5200 :             ImGui::PushItemWidth(TEXT_BASE_WIDTH * 28.0f);

  04983	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR TEXT_BASE_WIDTH$[rbp]
  04988	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41e00000
  04990	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth

; 5201 : 
; 5202 :             if (ImGui::TreeNodeEx("Features:", ImGuiTreeNodeFlags_DefaultOpen))

  04995	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0499a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09DKFIFAAE@Features?3?$AA@
  049a1	e8 00 00 00 00	 call	 ?TreeNodeEx@ImGui@@YA_NPEBDH@Z ; ImGui::TreeNodeEx
  049a6	0f b6 c0	 movzx	 eax, al
  049a9	85 c0		 test	 eax, eax
  049ab	0f 84 9b 00 00
	00		 je	 $LN426@ShowDemoWi

; 5203 :             {
; 5204 :                 ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags, ImGuiTableFlags_Resizable);

  049b1	41 b8 01 00 00
	00		 mov	 r8d, 1
  049b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  049be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@EMJCIFOG@ImGuiTableFlags_Resizable?$AA@
  049c5	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5205 :                 ImGui::CheckboxFlags("ImGuiTableFlags_Reorderable", &flags, ImGuiTableFlags_Reorderable);

  049ca	41 b8 02 00 00
	00		 mov	 r8d, 2
  049d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  049d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@CEFJIGKC@ImGuiTableFlags_Reorderable?$AA@
  049de	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5206 :                 ImGui::CheckboxFlags("ImGuiTableFlags_Hideable", &flags, ImGuiTableFlags_Hideable);

  049e3	41 b8 04 00 00
	00		 mov	 r8d, 4
  049e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  049f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@KDGOANFD@ImGuiTableFlags_Hideable?$AA@
  049f7	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5207 :                 ImGui::CheckboxFlags("ImGuiTableFlags_Sortable", &flags, ImGuiTableFlags_Sortable);

  049fc	41 b8 08 00 00
	00		 mov	 r8d, 8
  04a02	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04a09	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@IHBAKALC@ImGuiTableFlags_Sortable?$AA@
  04a10	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5208 :                 ImGui::CheckboxFlags("ImGuiTableFlags_NoSavedSettings", &flags, ImGuiTableFlags_NoSavedSettings);

  04a15	41 b8 10 00 00
	00		 mov	 r8d, 16
  04a1b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04a22	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@KBDPDJDH@ImGuiTableFlags_NoSavedSettings?$AA@
  04a29	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5209 :                 ImGui::CheckboxFlags("ImGuiTableFlags_ContextMenuInBody", &flags, ImGuiTableFlags_ContextMenuInBody);

  04a2e	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  04a34	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04a3b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@DCEKKFEJ@ImGuiTableFlags_ContextMenuInBod@
  04a42	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5210 :                 ImGui::TreePop();

  04a47	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN426@ShowDemoWi:

; 5211 :             }
; 5212 : 
; 5213 :             if (ImGui::TreeNodeEx("Decorations:", ImGuiTreeNodeFlags_DefaultOpen))

  04a4c	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  04a51	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@JCNJHPJM@Decorations?3?$AA@
  04a58	e8 00 00 00 00	 call	 ?TreeNodeEx@ImGui@@YA_NPEBDH@Z ; ImGui::TreeNodeEx
  04a5d	0f b6 c0	 movzx	 eax, al
  04a60	85 c0		 test	 eax, eax
  04a62	0f 84 1e 01 00
	00		 je	 $LN427@ShowDemoWi

; 5214 :             {
; 5215 :                 ImGui::CheckboxFlags("ImGuiTableFlags_RowBg", &flags, ImGuiTableFlags_RowBg);

  04a68	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  04a6e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04a75	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@FNKJINH@ImGuiTableFlags_RowBg?$AA@
  04a7c	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5216 :                 ImGui::CheckboxFlags("ImGuiTableFlags_BordersV", &flags, ImGuiTableFlags_BordersV);

  04a81	41 b8 00 06 00
	00		 mov	 r8d, 1536		; 00000600H
  04a87	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04a8e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@HJPFIEDJ@ImGuiTableFlags_BordersV?$AA@
  04a95	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5217 :                 ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuterV", &flags, ImGuiTableFlags_BordersOuterV);

  04a9a	41 b8 00 04 00
	00		 mov	 r8d, 1024		; 00000400H
  04aa0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04aa7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@JBGPMKKC@ImGuiTableFlags_BordersOuterV?$AA@
  04aae	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5218 :                 ImGui::CheckboxFlags("ImGuiTableFlags_BordersInnerV", &flags, ImGuiTableFlags_BordersInnerV);

  04ab3	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  04ab9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04ac0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@LBPOICOD@ImGuiTableFlags_BordersInnerV?$AA@
  04ac7	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5219 :                 ImGui::CheckboxFlags("ImGuiTableFlags_BordersH", &flags, ImGuiTableFlags_BordersH);

  04acc	41 b8 80 01 00
	00		 mov	 r8d, 384		; 00000180H
  04ad2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04ad9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@KNLELLOG@ImGuiTableFlags_BordersH?$AA@
  04ae0	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5220 :                 ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuterH", &flags, ImGuiTableFlags_BordersOuterH);

  04ae5	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  04aeb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04af2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@EFCOPFHN@ImGuiTableFlags_BordersOuterH?$AA@
  04af9	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5221 :                 ImGui::CheckboxFlags("ImGuiTableFlags_BordersInnerH", &flags, ImGuiTableFlags_BordersInnerH);

  04afe	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  04b04	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04b0b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@GFLPLNDM@ImGuiTableFlags_BordersInnerH?$AA@
  04b12	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5222 :                 ImGui::CheckboxFlags("ImGuiTableFlags_NoBordersInBody", &flags, ImGuiTableFlags_NoBordersInBody); ImGui::SameLine(); HelpMarker("Disable vertical borders in columns Body (borders will always appear in Headers");

  04b17	41 b8 00 08 00
	00		 mov	 r8d, 2048		; 00000800H
  04b1d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04b24	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@DPINADJM@ImGuiTableFlags_NoBordersInBody?$AA@
  04b2b	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags
  04b30	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  04b38	0f 57 c0	 xorps	 xmm0, xmm0
  04b3b	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  04b40	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FA@EPKAHHBC@Disable?5vertical?5borders?5in?5colu@
  04b47	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5223 :                 ImGui::CheckboxFlags("ImGuiTableFlags_NoBordersInBodyUntilResize", &flags, ImGuiTableFlags_NoBordersInBodyUntilResize); ImGui::SameLine(); HelpMarker("Disable vertical borders in columns Body until hovered for resize (borders will always appear in Headers)");

  04b4c	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  04b52	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04b59	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@IIFCHPBH@ImGuiTableFlags_NoBordersInBodyU@
  04b60	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags
  04b65	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  04b6d	0f 57 c0	 xorps	 xmm0, xmm0
  04b70	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  04b75	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GK@KONLLEJN@Disable?5vertical?5borders?5in?5colu@
  04b7c	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5224 :                 ImGui::TreePop();

  04b81	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN427@ShowDemoWi:

; 5225 :             }
; 5226 : 
; 5227 :             if (ImGui::TreeNodeEx("Sizing:", ImGuiTreeNodeFlags_DefaultOpen))

  04b86	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  04b8b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07NCAJGFPC@Sizing?3?$AA@
  04b92	e8 00 00 00 00	 call	 ?TreeNodeEx@ImGui@@YA_NPEBDH@Z ; ImGui::TreeNodeEx
  04b97	0f b6 c0	 movzx	 eax, al
  04b9a	85 c0		 test	 eax, eax
  04b9c	0f 84 36 01 00
	00		 je	 $LN428@ShowDemoWi

; 5228 :             {
; 5229 :                 EditTableSizingFlags(&flags);

  04ba2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04ba9	e8 00 00 00 00	 call	 ?EditTableSizingFlags@@YAXPEAH@Z ; EditTableSizingFlags

; 5230 :                 ImGui::SameLine(); HelpMarker("In the Advanced demo we override the policy of each column so those table-wide settings have less effect that typical.");

  04bae	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  04bb6	0f 57 c0	 xorps	 xmm0, xmm0
  04bb9	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  04bbe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0HH@KPNOAHGK@In?5the?5Advanced?5demo?5we?5override@
  04bc5	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5231 :                 ImGui::CheckboxFlags("ImGuiTableFlags_NoHostExtendX", &flags, ImGuiTableFlags_NoHostExtendX);

  04bca	41 b8 00 00 01
	00		 mov	 r8d, 65536		; 00010000H
  04bd0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04bd7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@NGJMFDHH@ImGuiTableFlags_NoHostExtendX?$AA@
  04bde	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5232 :                 ImGui::SameLine(); HelpMarker("Make outer width auto-fit to columns, overriding outer_size.x value.\n\nOnly available when ScrollX/ScrollY are disabled and Stretch columns are not used.");

  04be3	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  04beb	0f 57 c0	 xorps	 xmm0, xmm0
  04bee	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  04bf3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0JJ@MNEKIKBK@Make?5outer?5width?5auto?9fit?5to?5col@
  04bfa	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5233 :                 ImGui::CheckboxFlags("ImGuiTableFlags_NoHostExtendY", &flags, ImGuiTableFlags_NoHostExtendY);

  04bff	41 b8 00 00 02
	00		 mov	 r8d, 131072		; 00020000H
  04c05	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04c0c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@MPIHGCDG@ImGuiTableFlags_NoHostExtendY?$AA@
  04c13	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5234 :                 ImGui::SameLine(); HelpMarker("Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit).\n\nOnly available when ScrollX/ScrollY are disabled. Data below the limit will be clipped and not visible.");

  04c18	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  04c20	0f 57 c0	 xorps	 xmm0, xmm0
  04c23	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  04c28	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0MH@EOAMIMDE@Make?5outer?5height?5stop?5exactly?5a@
  04c2f	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5235 :                 ImGui::CheckboxFlags("ImGuiTableFlags_NoKeepColumnsVisible", &flags, ImGuiTableFlags_NoKeepColumnsVisible);

  04c34	41 b8 00 00 04
	00		 mov	 r8d, 262144		; 00040000H
  04c3a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04c41	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@HAPNKCNF@ImGuiTableFlags_NoKeepColumnsVis@
  04c48	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5236 :                 ImGui::SameLine(); HelpMarker("Only available if ScrollX is disabled.");

  04c4d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  04c55	0f 57 c0	 xorps	 xmm0, xmm0
  04c58	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  04c5d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CH@IHCAENCE@Only?5available?5if?5ScrollX?5is?5dis@
  04c64	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5237 :                 ImGui::CheckboxFlags("ImGuiTableFlags_PreciseWidths", &flags, ImGuiTableFlags_PreciseWidths);

  04c69	41 b8 00 00 08
	00		 mov	 r8d, 524288		; 00080000H
  04c6f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04c76	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@FCJCGICG@ImGuiTableFlags_PreciseWidths?$AA@
  04c7d	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5238 :                 ImGui::SameLine(); HelpMarker("Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth.");

  04c82	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  04c8a	0f 57 c0	 xorps	 xmm0, xmm0
  04c8d	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  04c92	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0OP@KCFDFCBF@Disable?5distributing?5remainder?5w@
  04c99	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5239 :                 ImGui::CheckboxFlags("ImGuiTableFlags_NoClip", &flags, ImGuiTableFlags_NoClip);

  04c9e	41 b8 00 00 10
	00		 mov	 r8d, 1048576		; 00100000H
  04ca4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04cab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@IJCBPJOC@ImGuiTableFlags_NoClip?$AA@
  04cb2	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5240 :                 ImGui::SameLine(); HelpMarker("Disable clipping rectangle for every individual columns (reduce draw command count, items will be able to overflow into other columns). Generally incompatible with ScrollFreeze options.");

  04cb7	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  04cbf	0f 57 c0	 xorps	 xmm0, xmm0
  04cc2	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  04cc7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0LK@OOMEMHDH@Disable?5clipping?5rectangle?5for?5e@
  04cce	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5241 :                 ImGui::TreePop();

  04cd3	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN428@ShowDemoWi:

; 5242 :             }
; 5243 : 
; 5244 :             if (ImGui::TreeNodeEx("Padding:", ImGuiTreeNodeFlags_DefaultOpen))

  04cd8	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  04cdd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08LMJDLJGI@Padding?3?$AA@
  04ce4	e8 00 00 00 00	 call	 ?TreeNodeEx@ImGui@@YA_NPEBDH@Z ; ImGui::TreeNodeEx
  04ce9	0f b6 c0	 movzx	 eax, al
  04cec	85 c0		 test	 eax, eax
  04cee	74 50		 je	 SHORT $LN429@ShowDemoWi

; 5245 :             {
; 5246 :                 ImGui::CheckboxFlags("ImGuiTableFlags_PadOuterX", &flags, ImGuiTableFlags_PadOuterX);

  04cf0	41 b8 00 00 20
	00		 mov	 r8d, 2097152		; 00200000H
  04cf6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04cfd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@HHEJGEBJ@ImGuiTableFlags_PadOuterX?$AA@
  04d04	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5247 :                 ImGui::CheckboxFlags("ImGuiTableFlags_NoPadOuterX", &flags, ImGuiTableFlags_NoPadOuterX);

  04d09	41 b8 00 00 40
	00		 mov	 r8d, 4194304		; 00400000H
  04d0f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04d16	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@PMBOGJLP@ImGuiTableFlags_NoPadOuterX?$AA@
  04d1d	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5248 :                 ImGui::CheckboxFlags("ImGuiTableFlags_NoPadInnerX", &flags, ImGuiTableFlags_NoPadInnerX);

  04d22	41 b8 00 00 80
	00		 mov	 r8d, 8388608		; 00800000H
  04d28	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04d2f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@NMIPCBPO@ImGuiTableFlags_NoPadInnerX?$AA@
  04d36	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5249 :                 ImGui::TreePop();

  04d3b	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN429@ShowDemoWi:

; 5250 :             }
; 5251 : 
; 5252 :             if (ImGui::TreeNodeEx("Scrolling:", ImGuiTreeNodeFlags_DefaultOpen))

  04d40	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  04d45	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@IMKAGMGB@Scrolling?3?$AA@
  04d4c	e8 00 00 00 00	 call	 ?TreeNodeEx@ImGui@@YA_NPEBDH@Z ; ImGui::TreeNodeEx
  04d51	0f b6 c0	 movzx	 eax, al
  04d54	85 c0		 test	 eax, eax
  04d56	0f 84 d9 00 00
	00		 je	 $LN430@ShowDemoWi

; 5253 :             {
; 5254 :                 ImGui::CheckboxFlags("ImGuiTableFlags_ScrollX", &flags, ImGuiTableFlags_ScrollX);

  04d5c	41 b8 00 00 00
	01		 mov	 r8d, 16777216		; 01000000H
  04d62	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04d69	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LGJFDPIB@ImGuiTableFlags_ScrollX?$AA@
  04d70	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5255 :                 ImGui::SameLine();

  04d75	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  04d7d	0f 57 c0	 xorps	 xmm0, xmm0
  04d80	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 5256 :                 ImGui::SetNextItemWidth(ImGui::GetFrameHeight());

  04d85	e8 00 00 00 00	 call	 ?GetFrameHeight@ImGui@@YAMXZ ; ImGui::GetFrameHeight
  04d8a	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth

; 5257 :                 ImGui::DragInt("freeze_cols", &freeze_cols, 0.2f, 0, 9, NULL, ImGuiSliderFlags_NoInput);

  04d8f	c7 44 24 30 80
	00 00 00	 mov	 DWORD PTR [rsp+48], 128	; 00000080H
  04d97	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  04da0	c7 44 24 20 09
	00 00 00	 mov	 DWORD PTR [rsp+32], 9
  04da8	45 33 c9	 xor	 r9d, r9d
  04dab	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e4ccccd
  04db3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?freeze_cols@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04dba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@CFPPLGBE@freeze_cols?$AA@
  04dc1	e8 00 00 00 00	 call	 ?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z ; ImGui::DragInt

; 5258 :                 ImGui::CheckboxFlags("ImGuiTableFlags_ScrollY", &flags, ImGuiTableFlags_ScrollY);

  04dc6	41 b8 00 00 00
	02		 mov	 r8d, 33554432		; 02000000H
  04dcc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04dd3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@KPIOAOMA@ImGuiTableFlags_ScrollY?$AA@
  04dda	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5259 :                 ImGui::SameLine();

  04ddf	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  04de7	0f 57 c0	 xorps	 xmm0, xmm0
  04dea	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 5260 :                 ImGui::SetNextItemWidth(ImGui::GetFrameHeight());

  04def	e8 00 00 00 00	 call	 ?GetFrameHeight@ImGui@@YAMXZ ; ImGui::GetFrameHeight
  04df4	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth

; 5261 :                 ImGui::DragInt("freeze_rows", &freeze_rows, 0.2f, 0, 9, NULL, ImGuiSliderFlags_NoInput);

  04df9	c7 44 24 30 80
	00 00 00	 mov	 DWORD PTR [rsp+48], 128	; 00000080H
  04e01	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  04e0a	c7 44 24 20 09
	00 00 00	 mov	 DWORD PTR [rsp+32], 9
  04e12	45 33 c9	 xor	 r9d, r9d
  04e15	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e4ccccd
  04e1d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?freeze_rows@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04e24	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GIAMEELH@freeze_rows?$AA@
  04e2b	e8 00 00 00 00	 call	 ?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z ; ImGui::DragInt

; 5262 :                 ImGui::TreePop();

  04e30	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN430@ShowDemoWi:

; 5263 :             }
; 5264 : 
; 5265 :             if (ImGui::TreeNodeEx("Sorting:", ImGuiTreeNodeFlags_DefaultOpen))

  04e35	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  04e3a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08JHEMDMPA@Sorting?3?$AA@
  04e41	e8 00 00 00 00	 call	 ?TreeNodeEx@ImGui@@YA_NPEBDH@Z ; ImGui::TreeNodeEx
  04e46	0f b6 c0	 movzx	 eax, al
  04e49	85 c0		 test	 eax, eax
  04e4b	74 6f		 je	 SHORT $LN431@ShowDemoWi

; 5266 :             {
; 5267 :                 ImGui::CheckboxFlags("ImGuiTableFlags_SortMulti", &flags, ImGuiTableFlags_SortMulti);

  04e4d	41 b8 00 00 00
	04		 mov	 r8d, 67108864		; 04000000H
  04e53	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04e5a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@COJNFFHG@ImGuiTableFlags_SortMulti?$AA@
  04e61	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5268 :                 ImGui::SameLine(); HelpMarker("When sorting is enabled: hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount > 1).");

  04e66	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  04e6e	0f 57 c0	 xorps	 xmm0, xmm0
  04e71	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  04e76	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0JD@OJLOANPI@When?5sorting?5is?5enabled?3?5hold?5sh@
  04e7d	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5269 :                 ImGui::CheckboxFlags("ImGuiTableFlags_SortTristate", &flags, ImGuiTableFlags_SortTristate);

  04e82	41 b8 00 00 00
	08		 mov	 r8d, 134217728		; 08000000H
  04e88	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  04e8f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@MANCMDD@ImGuiTableFlags_SortTristate?$AA@
  04e96	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 5270 :                 ImGui::SameLine(); HelpMarker("When sorting is enabled: allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0).");

  04e9b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  04ea3	0f 57 c0	 xorps	 xmm0, xmm0
  04ea6	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  04eab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0IC@CNBEEKGB@When?5sorting?5is?5enabled?3?5allow?5n@
  04eb2	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5271 :                 ImGui::TreePop();

  04eb7	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN431@ShowDemoWi:

; 5272 :             }
; 5273 : 
; 5274 :             if (ImGui::TreeNodeEx("Other:", ImGuiTreeNodeFlags_DefaultOpen))

  04ebc	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  04ec1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06JHAFDDDM@Other?3?$AA@
  04ec8	e8 00 00 00 00	 call	 ?TreeNodeEx@ImGui@@YA_NPEBDH@Z ; ImGui::TreeNodeEx
  04ecd	0f b6 c0	 movzx	 eax, al
  04ed0	85 c0		 test	 eax, eax
  04ed2	0f 84 a5 01 00
	00		 je	 $LN432@ShowDemoWi

; 5275 :             {
; 5276 :                 ImGui::Checkbox("show_headers", &show_headers);

  04ed8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?show_headers@?CAP@??ShowDemoWindowTables@@YAXXZ@4_NA
  04edf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@IJLMIFHN@show_headers?$AA@
  04ee6	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 5277 :                 ImGui::Checkbox("show_wrapped_text", &show_wrapped_text);

  04eeb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?show_wrapped_text@?CAP@??ShowDemoWindowTables@@YAXXZ@4_NA
  04ef2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@OGOBPDEF@show_wrapped_text?$AA@
  04ef9	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 5278 : 
; 5279 :                 ImGui::DragFloat2("##OuterSize", &outer_size_value.x);

  04efe	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  04f06	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  04f0d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  04f12	0f 57 c0	 xorps	 xmm0, xmm0
  04f15	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  04f1b	0f 57 db	 xorps	 xmm3, xmm3
  04f1e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  04f26	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?outer_size_value@?CAP@??ShowDemoWindowTables@@YAXXZ@4UImVec2@@A
  04f2d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@OOHBCMON@?$CD?$CDOuterSize?$AA@
  04f34	e8 00 00 00 00	 call	 ?DragFloat2@ImGui@@YA_NPEBDQEAMMMM0H@Z ; ImGui::DragFloat2

; 5280 :                 ImGui::SameLine(0.0f, ImGui::GetStyle().ItemInnerSpacing.x);

  04f39	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  04f3e	f3 0f 10 48 54	 movss	 xmm1, DWORD PTR [rax+84]
  04f43	0f 57 c0	 xorps	 xmm0, xmm0
  04f46	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 5281 :                 ImGui::Checkbox("outer_size", &outer_size_enabled);

  04f4b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?outer_size_enabled@?CAP@??ShowDemoWindowTables@@YAXXZ@4_NA
  04f52	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@ENOPHFOF@outer_size?$AA@
  04f59	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 5282 :                 ImGui::SameLine();

  04f5e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  04f66	0f 57 c0	 xorps	 xmm0, xmm0
  04f69	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 5283 :                 HelpMarker("If scrolling is disabled (ScrollX and ScrollY not set):\n"

  04f6e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BIB@EGFLOKNO@If?5scrolling?5is?5disabled?5?$CIScroll@
  04f75	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5284 :                     "- The table is output directly in the parent window.\n"
; 5285 :                     "- OuterSize.x < 0.0f will right-align the table.\n"
; 5286 :                     "- OuterSize.x = 0.0f will narrow fit the table unless there are any Stretch columns.\n"
; 5287 :                     "- OuterSize.y then becomes the minimum size for the table, which will extend vertically if there are more rows (unless NoHostExtendY is set).");
; 5288 : 
; 5289 :                 // From a user point of view we will tend to use 'inner_width' differently depending on whether our table is embedding scrolling.
; 5290 :                 // To facilitate toying with this demo we will actually pass 0.0f to the BeginTable() when ScrollX is disabled.
; 5291 :                 ImGui::DragFloat("inner_width (when ScrollX active)", &inner_width_with_scroll, 1.0f, 0.0f, FLT_MAX);

  04f7a	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  04f82	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  04f89	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  04f8e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  04f96	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  04f9c	0f 57 db	 xorps	 xmm3, xmm3
  04f9f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  04fa7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?inner_width_with_scroll@?CAP@??ShowDemoWindowTables@@YAXXZ@4MA
  04fae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@HLDPMJL@inner_width?5?$CIwhen?5ScrollX?5active@
  04fb5	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 5292 : 
; 5293 :                 ImGui::DragFloat("row_min_height", &row_min_height, 1.0f, 0.0f, FLT_MAX);

  04fba	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  04fc2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  04fc9	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  04fce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  04fd6	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  04fdc	0f 57 db	 xorps	 xmm3, xmm3
  04fdf	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  04fe7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?row_min_height@?CAP@??ShowDemoWindowTables@@YAXXZ@4MA
  04fee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@KEOGDMAF@row_min_height?$AA@
  04ff5	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 5294 :                 ImGui::SameLine(); HelpMarker("Specify height of the Selectable item.");

  04ffa	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  05002	0f 57 c0	 xorps	 xmm0, xmm0
  05005	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0500a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CH@KLLECOCH@Specify?5height?5of?5the?5Selectable@
  05011	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 5295 : 
; 5296 :                 ImGui::DragInt("items_count", &items_count, 0.1f, 0, 9999);

  05016	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0501e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  05025	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0502a	c7 44 24 20 0f
	27 00 00	 mov	 DWORD PTR [rsp+32], 9999 ; 0000270fH
  05032	45 33 c9	 xor	 r9d, r9d
  05035	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3dcccccd
  0503d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?items_count@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  05044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@NCHDHPIM@items_count?$AA@
  0504b	e8 00 00 00 00	 call	 ?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z ; ImGui::DragInt

; 5297 :                 ImGui::Combo("items_type (first column)", &contents_type, contents_type_names, IM_ARRAYSIZE(contents_type_names));

  05050	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  05058	41 b9 06 00 00
	00		 mov	 r9d, 6
  0505e	4c 8d 85 f8 0c
	00 00		 lea	 r8, QWORD PTR contents_type_names$113[rbp]
  05065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?contents_type@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  0506c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@DIOLBOIM@items_type?5?$CIfirst?5column?$CJ?$AA@
  05073	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z ; ImGui::Combo

; 5298 :                 //filter.Draw("filter");
; 5299 :                 ImGui::TreePop();

  05078	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN432@ShowDemoWi:

; 5300 :             }
; 5301 : 
; 5302 :             ImGui::PopItemWidth();

  0507d	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 5303 :             PopStyleCompact();

  05082	e8 00 00 00 00	 call	 ?PopStyleCompact@@YAXXZ	; PopStyleCompact

; 5304 :             ImGui::Spacing();

  05087	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 5305 :             ImGui::TreePop();

  0508c	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN425@ShowDemoWi:

; 5306 :         }
; 5307 : 
; 5308 :         // Update item list if we changed the number of items
; 5309 :         static ImVector<MyItem> items;

  05091	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  05096	8b c0		 mov	 eax, eax
  05098	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0509e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  050a7	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  050ab	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  050ae	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS3@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA, eax
  050b4	7e 3a		 jle	 SHORT $LN266@ShowDemoWi
  050b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS3@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  050bd	e8 00 00 00 00	 call	 _Init_thread_header
  050c2	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS3@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA, -1
  050c9	75 25		 jne	 SHORT $LN266@ShowDemoWi
  050cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?items@?CAP@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A
  050d2	e8 00 00 00 00	 call	 ??0?$ImVector@UMyItem@?A0x1ed25892@@@@QEAA@XZ ; ImVector<`anonymous namespace'::MyItem>::ImVector<`anonymous namespace'::MyItem>
  050d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__Fitems@?CAP@??ShowDemoWindowTables@@YAXXZ@YAXXZ ; `ShowDemoWindowTables'::`527'::`dynamic atexit destructor for 'items''
  050de	e8 00 00 00 00	 call	 atexit
  050e3	90		 npad	 1
  050e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS3@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  050eb	e8 00 00 00 00	 call	 _Init_thread_footer
$LN266@ShowDemoWi:

; 5310 :         static ImVector<int> selection;

  050f0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  050f5	8b c0		 mov	 eax, eax
  050f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  050fd	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  05106	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0510a	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  0510d	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS4@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA, eax
  05113	7e 3a		 jle	 SHORT $LN267@ShowDemoWi
  05115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS4@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  0511c	e8 00 00 00 00	 call	 _Init_thread_header
  05121	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS4@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA, -1
  05128	75 25		 jne	 SHORT $LN267@ShowDemoWi
  0512a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selection@?CAP@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@H@@A
  05131	e8 00 00 00 00	 call	 ??0?$ImVector@H@@QEAA@XZ ; ImVector<int>::ImVector<int>
  05136	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__Fselection@?CAP@??ShowDemoWindowTables@@YAXXZ@YAXXZ ; `ShowDemoWindowTables'::`527'::`dynamic atexit destructor for 'selection''
  0513d	e8 00 00 00 00	 call	 atexit
  05142	90		 npad	 1
  05143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS4@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  0514a	e8 00 00 00 00	 call	 _Init_thread_footer
$LN267@ShowDemoWi:

; 5311 :         static bool items_need_sort = false;
; 5312 :         if (items.Size != items_count)

  0514f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?items_count@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  05155	39 05 00 00 00
	00		 cmp	 DWORD PTR ?items@?CAP@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A, eax
  0515b	0f 84 08 01 00
	00		 je	 $LN433@ShowDemoWi

; 5313 :         {
; 5314 :             items.resize(items_count, MyItem());

  05161	48 8d 85 88 1c
	00 00		 lea	 rax, QWORD PTR $T184[rbp]
  05168	48 8b f8	 mov	 rdi, rax
  0516b	33 c0		 xor	 eax, eax
  0516d	b9 18 00 00 00	 mov	 ecx, 24
  05172	f3 aa		 rep stosb
  05174	4c 8d 85 88 1c
	00 00		 lea	 r8, QWORD PTR $T184[rbp]
  0517b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?items_count@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  05181	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?items@?CAP@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A
  05188	e8 00 00 00 00	 call	 ?resize@?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAXHAEBUMyItem@?A0x1ed25892@@@Z ; ImVector<`anonymous namespace'::MyItem>::resize

; 5315 :             for (int n = 0; n < items_count; n++)

  0518d	c7 85 44 0d 00
	00 00 00 00 00	 mov	 DWORD PTR n$114[rbp], 0
  05197	eb 0e		 jmp	 SHORT $LN270@ShowDemoWi
$LN268@ShowDemoWi:
  05199	8b 85 44 0d 00
	00		 mov	 eax, DWORD PTR n$114[rbp]
  0519f	ff c0		 inc	 eax
  051a1	89 85 44 0d 00
	00		 mov	 DWORD PTR n$114[rbp], eax
$LN270@ShowDemoWi:
  051a7	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?items_count@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  051ad	39 85 44 0d 00
	00		 cmp	 DWORD PTR n$114[rbp], eax
  051b3	0f 8d b0 00 00
	00		 jge	 $LN433@ShowDemoWi

; 5316 :             {
; 5317 :                 const int template_n = n % IM_ARRAYSIZE(template_items_names);

  051b9	8b 85 44 0d 00
	00		 mov	 eax, DWORD PTR n$114[rbp]
  051bf	99		 cdq
  051c0	b9 0f 00 00 00	 mov	 ecx, 15
  051c5	f7 f9		 idiv	 ecx
  051c7	8b c2		 mov	 eax, edx
  051c9	89 85 64 0d 00
	00		 mov	 DWORD PTR template_n$115[rbp], eax

; 5318 :                 MyItem& item = items[n];

  051cf	8b 95 44 0d 00
	00		 mov	 edx, DWORD PTR n$114[rbp]
  051d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?items@?CAP@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A
  051dc	e8 00 00 00 00	 call	 ??A?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAAEAUMyItem@?A0x1ed25892@@H@Z ; ImVector<`anonymous namespace'::MyItem>::operator[]
  051e1	48 89 85 88 0d
	00 00		 mov	 QWORD PTR item$116[rbp], rax

; 5319 :                 item.ID = n;

  051e8	48 8b 85 88 0d
	00 00		 mov	 rax, QWORD PTR item$116[rbp]
  051ef	8b 8d 44 0d 00
	00		 mov	 ecx, DWORD PTR n$114[rbp]
  051f5	89 08		 mov	 DWORD PTR [rax], ecx

; 5320 :                 item.Name = template_items_names[template_n];

  051f7	48 63 85 64 0d
	00 00		 movsxd	 rax, DWORD PTR template_n$115[rbp]
  051fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?template_items_names@?1??ShowDemoWindowTables@@YAXXZ@4PAPEBDA
  05205	48 8b 95 88 0d
	00 00		 mov	 rdx, QWORD PTR item$116[rbp]
  0520c	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  05210	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax

; 5321 :                 item.Quantity = (template_n == 3) ? 10 : (template_n == 4) ? 20 : 0; // Assign default quantities

  05214	83 bd 64 0d 00
	00 03		 cmp	 DWORD PTR template_n$115[rbp], 3
  0521b	75 0c		 jne	 SHORT $LN534@ShowDemoWi
  0521d	c7 85 c4 1d 00
	00 0a 00 00 00	 mov	 DWORD PTR tv3145[rbp], 10
  05227	eb 2b		 jmp	 SHORT $LN535@ShowDemoWi
$LN534@ShowDemoWi:
  05229	83 bd 64 0d 00
	00 04		 cmp	 DWORD PTR template_n$115[rbp], 4
  05230	75 0c		 jne	 SHORT $LN532@ShowDemoWi
  05232	c7 85 c8 1d 00
	00 14 00 00 00	 mov	 DWORD PTR tv3144[rbp], 20
  0523c	eb 0a		 jmp	 SHORT $LN533@ShowDemoWi
$LN532@ShowDemoWi:
  0523e	c7 85 c8 1d 00
	00 00 00 00 00	 mov	 DWORD PTR tv3144[rbp], 0
$LN533@ShowDemoWi:
  05248	8b 85 c8 1d 00
	00		 mov	 eax, DWORD PTR tv3144[rbp]
  0524e	89 85 c4 1d 00
	00		 mov	 DWORD PTR tv3145[rbp], eax
$LN535@ShowDemoWi:
  05254	48 8b 85 88 0d
	00 00		 mov	 rax, QWORD PTR item$116[rbp]
  0525b	8b 8d c4 1d 00
	00		 mov	 ecx, DWORD PTR tv3145[rbp]
  05261	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 5322 :             }

  05264	e9 30 ff ff ff	 jmp	 $LN268@ShowDemoWi
$LN433@ShowDemoWi:

; 5323 :         }
; 5324 : 
; 5325 :         const ImDrawList* parent_draw_list = ImGui::GetWindowDrawList();

  05269	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPEAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  0526e	48 89 85 a8 0d
	00 00		 mov	 QWORD PTR parent_draw_list$117[rbp], rax

; 5326 :         const int parent_draw_list_draw_cmd_count = parent_draw_list->CmdBuffer.Size;

  05275	48 8b 85 a8 0d
	00 00		 mov	 rax, QWORD PTR parent_draw_list$117[rbp]
  0527c	8b 00		 mov	 eax, DWORD PTR [rax]
  0527e	89 85 c4 0d 00
	00		 mov	 DWORD PTR parent_draw_list_draw_cmd_count$118[rbp], eax

; 5327 :         ImVec2 table_scroll_cur, table_scroll_max; // For debug display

  05284	48 8d 8d e8 0d
	00 00		 lea	 rcx, QWORD PTR table_scroll_cur$119[rbp]
  0528b	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@XZ	; ImVec2::ImVec2
  05290	48 8d 8d 08 0e
	00 00		 lea	 rcx, QWORD PTR table_scroll_max$120[rbp]
  05297	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@XZ	; ImVec2::ImVec2

; 5328 :         const ImDrawList* table_draw_list = NULL;  // "

  0529c	48 c7 85 28 0e
	00 00 00 00 00
	00		 mov	 QWORD PTR table_draw_list$121[rbp], 0

; 5329 : 
; 5330 :         // Submit table
; 5331 :         const float inner_width_to_use = (flags & ImGuiTableFlags_ScrollX) ? inner_width_with_scroll : 0.0f;

  052a7	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  052ad	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  052b2	85 c0		 test	 eax, eax
  052b4	74 12		 je	 SHORT $LN536@ShowDemoWi
  052b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?inner_width_with_scroll@?CAP@??ShowDemoWindowTables@@YAXXZ@4MA
  052be	f3 0f 11 85 c4
	1d 00 00	 movss	 DWORD PTR tv3153[rbp], xmm0
  052c6	eb 0b		 jmp	 SHORT $LN537@ShowDemoWi
$LN536@ShowDemoWi:
  052c8	0f 57 c0	 xorps	 xmm0, xmm0
  052cb	f3 0f 11 85 c4
	1d 00 00	 movss	 DWORD PTR tv3153[rbp], xmm0
$LN537@ShowDemoWi:
  052d3	f3 0f 10 85 c4
	1d 00 00	 movss	 xmm0, DWORD PTR tv3153[rbp]
  052db	f3 0f 11 85 44
	0e 00 00	 movss	 DWORD PTR inner_width_to_use$122[rbp], xmm0

; 5332 :         if (ImGui::BeginTable("table_advanced", 6, flags, outer_size_enabled ? outer_size_value : ImVec2(0, 0), inner_width_to_use))

  052e3	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?outer_size_enabled@?CAP@??ShowDemoWindowTables@@YAXXZ@4_NA
  052ea	85 c0		 test	 eax, eax
  052ec	74 1e		 je	 SHORT $LN538@ShowDemoWi
  052ee	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?outer_size_value@?CAP@??ShowDemoWindowTables@@YAXXZ@4UImVec2@@A
  052f5	48 89 85 d4 1c
	00 00		 mov	 QWORD PTR $T186[rbp], rax
  052fc	48 8d 85 d4 1c
	00 00		 lea	 rax, QWORD PTR $T186[rbp]
  05303	48 89 85 c8 1d
	00 00		 mov	 QWORD PTR tv3162[rbp], rax
  0530a	eb 19		 jmp	 SHORT $LN539@ShowDemoWi
$LN538@ShowDemoWi:
  0530c	0f 57 d2	 xorps	 xmm2, xmm2
  0530f	0f 57 c9	 xorps	 xmm1, xmm1
  05312	48 8d 8d f4 1c
	00 00		 lea	 rcx, QWORD PTR $T187[rbp]
  05319	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0531e	48 89 85 c8 1d
	00 00		 mov	 QWORD PTR tv3162[rbp], rax
$LN539@ShowDemoWi:
  05325	48 8b 85 c8 1d
	00 00		 mov	 rax, QWORD PTR tv3162[rbp]
  0532c	48 89 85 b8 1c
	00 00		 mov	 QWORD PTR $T185[rbp], rax
  05333	f3 0f 10 85 44
	0e 00 00	 movss	 xmm0, DWORD PTR inner_width_to_use$122[rbp]
  0533b	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  05341	4c 8b 8d b8 1c
	00 00		 mov	 r9, QWORD PTR $T185[rbp]
  05348	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  0534f	ba 06 00 00 00	 mov	 edx, 6
  05354	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@IMAALAEK@table_advanced?$AA@
  0535b	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  05360	0f b6 c0	 movzx	 eax, al
  05363	85 c0		 test	 eax, eax
  05365	0f 84 10 06 00
	00		 je	 $LN434@ShowDemoWi

; 5333 :         {
; 5334 :             // Declare columns
; 5335 :             // We use the "user_id" parameter of TableSetupColumn() to specify a user id that will be stored in the sort specifications.
; 5336 :             // This is so our sort function can identify a column given our own identifier. We could also identify them based on their index!
; 5337 :             ImGui::TableSetupColumn("ID",           ImGuiTableColumnFlags_DefaultSort | ImGuiTableColumnFlags_WidthFixed | ImGuiTableColumnFlags_NoHide, 0.0f, MyItemColumnID_ID);

  0536b	45 33 c9	 xor	 r9d, r9d
  0536e	0f 57 d2	 xorps	 xmm2, xmm2
  05371	ba 94 00 00 00	 mov	 edx, 148		; 00000094H
  05376	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02OLOABKKD@ID?$AA@
  0537d	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 5338 :             ImGui::TableSetupColumn("Name",         ImGuiTableColumnFlags_WidthFixed, 0.0f, MyItemColumnID_Name);

  05382	41 b9 01 00 00
	00		 mov	 r9d, 1
  05388	0f 57 d2	 xorps	 xmm2, xmm2
  0538b	ba 10 00 00 00	 mov	 edx, 16
  05390	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04FABLJDN@Name?$AA@
  05397	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 5339 :             ImGui::TableSetupColumn("Action",       ImGuiTableColumnFlags_NoSort | ImGuiTableColumnFlags_WidthFixed, 0.0f, MyItemColumnID_Action);

  0539c	41 b9 02 00 00
	00		 mov	 r9d, 2
  053a2	0f 57 d2	 xorps	 xmm2, xmm2
  053a5	ba 10 02 00 00	 mov	 edx, 528		; 00000210H
  053aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06PMAGBHAK@Action?$AA@
  053b1	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 5340 :             ImGui::TableSetupColumn("Quantity",     ImGuiTableColumnFlags_PreferSortDescending, 0.0f, MyItemColumnID_Quantity);

  053b6	41 b9 03 00 00
	00		 mov	 r9d, 3
  053bc	0f 57 d2	 xorps	 xmm2, xmm2
  053bf	ba 00 80 00 00	 mov	 edx, 32768		; 00008000H
  053c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08GACJPEFO@Quantity?$AA@
  053cb	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 5341 :             ImGui::TableSetupColumn("Description",  (flags & ImGuiTableFlags_NoHostExtendX) ? 0 : ImGuiTableColumnFlags_WidthStretch, 0.0f, MyItemColumnID_Description);

  053d0	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?flags@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  053d6	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  053db	85 c0		 test	 eax, eax
  053dd	74 0c		 je	 SHORT $LN540@ShowDemoWi
  053df	c7 85 c4 1d 00
	00 00 00 00 00	 mov	 DWORD PTR tv3189[rbp], 0
  053e9	eb 0a		 jmp	 SHORT $LN541@ShowDemoWi
$LN540@ShowDemoWi:
  053eb	c7 85 c4 1d 00
	00 08 00 00 00	 mov	 DWORD PTR tv3189[rbp], 8
$LN541@ShowDemoWi:
  053f5	41 b9 04 00 00
	00		 mov	 r9d, 4
  053fb	0f 57 d2	 xorps	 xmm2, xmm2
  053fe	8b 95 c4 1d 00
	00		 mov	 edx, DWORD PTR tv3189[rbp]
  05404	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@OHKMKKDH@Description?$AA@
  0540b	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 5342 :             ImGui::TableSetupColumn("Hidden",       ImGuiTableColumnFlags_DefaultHide | ImGuiTableColumnFlags_NoSort);

  05410	45 33 c9	 xor	 r9d, r9d
  05413	0f 57 d2	 xorps	 xmm2, xmm2
  05416	ba 02 02 00 00	 mov	 edx, 514		; 00000202H
  0541b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FHBILLDG@Hidden?$AA@
  05422	e8 00 00 00 00	 call	 ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ; ImGui::TableSetupColumn

; 5343 :             ImGui::TableSetupScrollFreeze(freeze_cols, freeze_rows);

  05427	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?freeze_rows@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  0542d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?freeze_cols@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  05433	e8 00 00 00 00	 call	 ?TableSetupScrollFreeze@ImGui@@YAXHH@Z ; ImGui::TableSetupScrollFreeze

; 5344 : 
; 5345 :             // Sort our data if sort specs have been changed!
; 5346 :             ImGuiTableSortSpecs* sorts_specs = ImGui::TableGetSortSpecs();

  05438	e8 00 00 00 00	 call	 ?TableGetSortSpecs@ImGui@@YAPEAUImGuiTableSortSpecs@@XZ ; ImGui::TableGetSortSpecs
  0543d	48 89 85 68 0e
	00 00		 mov	 QWORD PTR sorts_specs$123[rbp], rax

; 5347 :             if (sorts_specs && sorts_specs->SpecsDirty)

  05444	48 83 bd 68 0e
	00 00 00	 cmp	 QWORD PTR sorts_specs$123[rbp], 0
  0544c	74 16		 je	 SHORT $LN435@ShowDemoWi
  0544e	48 8b 85 68 0e
	00 00		 mov	 rax, QWORD PTR sorts_specs$123[rbp]
  05455	0f b6 40 0c	 movzx	 eax, BYTE PTR [rax+12]
  05459	85 c0		 test	 eax, eax
  0545b	74 07		 je	 SHORT $LN435@ShowDemoWi

; 5348 :                 items_need_sort = true;

  0545d	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?items_need_sort@?CAP@??ShowDemoWindowTables@@YAXXZ@4_NA, 1
$LN435@ShowDemoWi:

; 5349 :             if (sorts_specs && items_need_sort && items.Size > 1)

  05464	48 83 bd 68 0e
	00 00 00	 cmp	 QWORD PTR sorts_specs$123[rbp], 0
  0546c	74 74		 je	 SHORT $LN436@ShowDemoWi
  0546e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?items_need_sort@?CAP@??ShowDemoWindowTables@@YAXXZ@4_NA
  05475	85 c0		 test	 eax, eax
  05477	74 69		 je	 SHORT $LN436@ShowDemoWi
  05479	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?items@?CAP@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A, 1
  05480	7e 60		 jle	 SHORT $LN436@ShowDemoWi

; 5350 :             {
; 5351 :                 MyItem::s_current_sort_specs = sorts_specs; // Store in variable accessible by the sort function.

  05482	48 8b 85 68 0e
	00 00		 mov	 rax, QWORD PTR sorts_specs$123[rbp]
  05489	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?s_current_sort_specs@MyItem@?A0x1ed25892@@2PEBUImGuiTableSortSpecs@@EB, rax ; `anonymous namespace'::MyItem::s_current_sort_specs

; 5352 :                 qsort(&items[0], (size_t)items.Size, sizeof(items[0]), MyItem::CompareWithSortSpecs);

  05490	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR ?items@?CAP@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A
  05497	48 89 85 c8 1d
	00 00		 mov	 QWORD PTR tv3209[rbp], rax
  0549e	33 d2		 xor	 edx, edx
  054a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?items@?CAP@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A
  054a7	e8 00 00 00 00	 call	 ??A?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAAEAUMyItem@?A0x1ed25892@@H@Z ; ImVector<`anonymous namespace'::MyItem>::operator[]
  054ac	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?CompareWithSortSpecs@MyItem@?A0x1ed25892@@SAHPEBX0@Z ; `anonymous namespace'::MyItem::CompareWithSortSpecs
  054b3	41 b8 18 00 00
	00		 mov	 r8d, 24
  054b9	48 8b 8d c8 1d
	00 00		 mov	 rcx, QWORD PTR tv3209[rbp]
  054c0	48 8b d1	 mov	 rdx, rcx
  054c3	48 8b c8	 mov	 rcx, rax
  054c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 5353 :                 MyItem::s_current_sort_specs = NULL;

  054cc	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR ?s_current_sort_specs@MyItem@?A0x1ed25892@@2PEBUImGuiTableSortSpecs@@EB, 0 ; `anonymous namespace'::MyItem::s_current_sort_specs

; 5354 :                 sorts_specs->SpecsDirty = false;

  054d7	48 8b 85 68 0e
	00 00		 mov	 rax, QWORD PTR sorts_specs$123[rbp]
  054de	c6 40 0c 00	 mov	 BYTE PTR [rax+12], 0
$LN436@ShowDemoWi:

; 5355 :             }
; 5356 :             items_need_sort = false;

  054e2	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?items_need_sort@?CAP@??ShowDemoWindowTables@@YAXXZ@4_NA, 0

; 5357 : 
; 5358 :             // Take note of whether we are currently sorting based on the Quantity field,
; 5359 :             // we will use this to trigger sorting when we know the data of this column has been modified.
; 5360 :             const bool sorts_specs_using_quantity = (ImGui::TableGetColumnFlags(3) & ImGuiTableColumnFlags_IsSorted) != 0;

  054e9	b9 03 00 00 00	 mov	 ecx, 3
  054ee	e8 00 00 00 00	 call	 ?TableGetColumnFlags@ImGui@@YAHH@Z ; ImGui::TableGetColumnFlags
  054f3	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  054f8	85 c0		 test	 eax, eax
  054fa	74 09		 je	 SHORT $LN542@ShowDemoWi
  054fc	c6 85 c4 1d 00
	00 01		 mov	 BYTE PTR tv3220[rbp], 1
  05503	eb 07		 jmp	 SHORT $LN543@ShowDemoWi
$LN542@ShowDemoWi:
  05505	c6 85 c4 1d 00
	00 00		 mov	 BYTE PTR tv3220[rbp], 0
$LN543@ShowDemoWi:
  0550c	0f b6 85 c4 1d
	00 00		 movzx	 eax, BYTE PTR tv3220[rbp]
  05513	88 85 84 0e 00
	00		 mov	 BYTE PTR sorts_specs_using_quantity$124[rbp], al

; 5361 : 
; 5362 :             // Show headers
; 5363 :             if (show_headers)

  05519	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_headers@?CAP@??ShowDemoWindowTables@@YAXXZ@4_NA
  05520	85 c0		 test	 eax, eax
  05522	74 05		 je	 SHORT $LN437@ShowDemoWi

; 5364 :                 ImGui::TableHeadersRow();

  05524	e8 00 00 00 00	 call	 ?TableHeadersRow@ImGui@@YAXXZ ; ImGui::TableHeadersRow
$LN437@ShowDemoWi:

; 5365 : 
; 5366 :             // Show data
; 5367 :             // FIXME-TABLE FIXME-NAV: How we can get decent up/down even though we have the buttons here?
; 5368 :             ImGui::PushButtonRepeat(true);

  05529	b1 01		 mov	 cl, 1
  0552b	e8 00 00 00 00	 call	 ?PushButtonRepeat@ImGui@@YAX_N@Z ; ImGui::PushButtonRepeat

; 5369 : #if 1
; 5370 :             // Demonstrate using clipper for large vertical lists
; 5371 :             ImGuiListClipper clipper;

  05530	48 8d 8d a8 0e
	00 00		 lea	 rcx, QWORD PTR clipper$125[rbp]
  05537	e8 00 00 00 00	 call	 ??0ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::ImGuiListClipper
  0553c	90		 npad	 1

; 5372 :             clipper.Begin(items.Size);

  0553d	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  05545	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?items@?CAP@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A
  0554b	48 8d 8d a8 0e
	00 00		 lea	 rcx, QWORD PTR clipper$125[rbp]
  05552	e8 00 00 00 00	 call	 ?Begin@ImGuiListClipper@@QEAAXHM@Z ; ImGuiListClipper::Begin
$LN271@ShowDemoWi:

; 5373 :             while (clipper.Step())

  05557	48 8d 8d a8 0e
	00 00		 lea	 rcx, QWORD PTR clipper$125[rbp]
  0555e	e8 00 00 00 00	 call	 ?Step@ImGuiListClipper@@QEAA_NXZ ; ImGuiListClipper::Step
  05563	0f b6 c0	 movzx	 eax, al
  05566	85 c0		 test	 eax, eax
  05568	0f 84 7e 03 00
	00		 je	 $LN272@ShowDemoWi

; 5374 :             {
; 5375 :                 for (int row_n = clipper.DisplayStart; row_n < clipper.DisplayEnd; row_n++)

  0556e	8b 85 a8 0e 00
	00		 mov	 eax, DWORD PTR clipper$125[rbp]
  05574	89 85 e4 0e 00
	00		 mov	 DWORD PTR row_n$126[rbp], eax
  0557a	eb 0e		 jmp	 SHORT $LN275@ShowDemoWi
$LN273@ShowDemoWi:
  0557c	8b 85 e4 0e 00
	00		 mov	 eax, DWORD PTR row_n$126[rbp]
  05582	ff c0		 inc	 eax
  05584	89 85 e4 0e 00
	00		 mov	 DWORD PTR row_n$126[rbp], eax
$LN275@ShowDemoWi:
  0558a	8b 85 ac 0e 00
	00		 mov	 eax, DWORD PTR clipper$125[rbp+4]
  05590	39 85 e4 0e 00
	00		 cmp	 DWORD PTR row_n$126[rbp], eax
  05596	0f 8d 4b 03 00
	00		 jge	 $LN274@ShowDemoWi

; 5376 : #else
; 5377 :             // Without clipper
; 5378 :             {
; 5379 :                 for (int row_n = 0; row_n < items.Size; row_n++)
; 5380 : #endif
; 5381 :                 {
; 5382 :                     MyItem* item = &items[row_n];

  0559c	8b 95 e4 0e 00
	00		 mov	 edx, DWORD PTR row_n$126[rbp]
  055a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?items@?CAP@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@UMyItem@?A0x1ed25892@@@@A
  055a9	e8 00 00 00 00	 call	 ??A?$ImVector@UMyItem@?A0x1ed25892@@@@QEAAAEAUMyItem@?A0x1ed25892@@H@Z ; ImVector<`anonymous namespace'::MyItem>::operator[]
  055ae	48 89 85 08 0f
	00 00		 mov	 QWORD PTR item$127[rbp], rax

; 5383 :                     //if (!filter.PassFilter(item->Name))
; 5384 :                     //    continue;
; 5385 : 
; 5386 :                     const bool item_is_selected = selection.contains(item->ID);

  055b5	48 8b 85 08 0f
	00 00		 mov	 rax, QWORD PTR item$127[rbp]
  055bc	48 8b d0	 mov	 rdx, rax
  055bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selection@?CAP@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@H@@A
  055c6	e8 00 00 00 00	 call	 ?contains@?$ImVector@H@@QEBA_NAEBH@Z ; ImVector<int>::contains
  055cb	88 85 24 0f 00
	00		 mov	 BYTE PTR item_is_selected$128[rbp], al

; 5387 :                     ImGui::PushID(item->ID);

  055d1	48 8b 85 08 0f
	00 00		 mov	 rax, QWORD PTR item$127[rbp]
  055d8	8b 08		 mov	 ecx, DWORD PTR [rax]
  055da	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 5388 :                     ImGui::TableNextRow(ImGuiTableRowFlags_None, row_min_height);

  055df	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?row_min_height@?CAP@??ShowDemoWindowTables@@YAXXZ@4MA
  055e7	33 c9		 xor	 ecx, ecx
  055e9	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 5389 : 
; 5390 :                     // For the demo purpose we can select among different type of items submitted in the first column
; 5391 :                     ImGui::TableSetColumnIndex(0);

  055ee	33 c9		 xor	 ecx, ecx
  055f0	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 5392 :                     char label[32];
; 5393 :                     sprintf(label, "%04d", item->ID);

  055f5	48 8b 85 08 0f
	00 00		 mov	 rax, QWORD PTR item$127[rbp]
  055fc	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  055ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04OCCELDNI@?$CF04d?$AA@
  05606	48 8d 8d 48 0f
	00 00		 lea	 rcx, QWORD PTR label$129[rbp]
  0560d	e8 00 00 00 00	 call	 sprintf

; 5394 :                     if (contents_type == CT_Text)

  05612	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?contents_type@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA, 0
  05619	75 13		 jne	 SHORT $LN438@ShowDemoWi

; 5395 :                         ImGui::TextUnformatted(label);

  0561b	33 d2		 xor	 edx, edx
  0561d	48 8d 8d 48 0f
	00 00		 lea	 rcx, QWORD PTR label$129[rbp]
  05624	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted
  05629	e9 66 01 00 00	 jmp	 $LN439@ShowDemoWi
$LN438@ShowDemoWi:

; 5396 :                     else if (contents_type == CT_Button)

  0562e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?contents_type@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA, 1
  05635	75 26		 jne	 SHORT $LN440@ShowDemoWi

; 5397 :                         ImGui::Button(label);

  05637	0f 57 d2	 xorps	 xmm2, xmm2
  0563a	0f 57 c9	 xorps	 xmm1, xmm1
  0563d	48 8d 8d 14 1d
	00 00		 lea	 rcx, QWORD PTR $T188[rbp]
  05644	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  05649	48 8b d0	 mov	 rdx, rax
  0564c	48 8d 8d 48 0f
	00 00		 lea	 rcx, QWORD PTR label$129[rbp]
  05653	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  05658	e9 37 01 00 00	 jmp	 $LN439@ShowDemoWi
$LN440@ShowDemoWi:

; 5398 :                     else if (contents_type == CT_SmallButton)

  0565d	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?contents_type@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA, 2
  05664	75 11		 jne	 SHORT $LN442@ShowDemoWi

; 5399 :                         ImGui::SmallButton(label);

  05666	48 8d 8d 48 0f
	00 00		 lea	 rcx, QWORD PTR label$129[rbp]
  0566d	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton
  05672	e9 1d 01 00 00	 jmp	 $LN439@ShowDemoWi
$LN442@ShowDemoWi:

; 5400 :                     else if (contents_type == CT_FillButton)

  05677	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?contents_type@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA, 3
  0567e	75 2b		 jne	 SHORT $LN444@ShowDemoWi

; 5401 :                         ImGui::Button(label, ImVec2(-FLT_MIN, 0.0f));

  05680	0f 57 d2	 xorps	 xmm2, xmm2
  05683	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@80800000
  0568b	48 8d 8d 34 1d
	00 00		 lea	 rcx, QWORD PTR $T189[rbp]
  05692	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  05697	48 8b d0	 mov	 rdx, rax
  0569a	48 8d 8d 48 0f
	00 00		 lea	 rcx, QWORD PTR label$129[rbp]
  056a1	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  056a6	e9 e9 00 00 00	 jmp	 $LN439@ShowDemoWi
$LN444@ShowDemoWi:

; 5402 :                     else if (contents_type == CT_Selectable || contents_type == CT_SelectableSpanRow)

  056ab	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?contents_type@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA, 4
  056b2	74 0d		 je	 SHORT $LN447@ShowDemoWi
  056b4	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?contents_type@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA, 5
  056bb	0f 85 d3 00 00
	00		 jne	 $LN439@ShowDemoWi
$LN447@ShowDemoWi:

; 5403 :                     {
; 5404 :                         ImGuiSelectableFlags selectable_flags = (contents_type == CT_SelectableSpanRow) ? ImGuiSelectableFlags_SpanAllColumns | ImGuiSelectableFlags_AllowItemOverlap : ImGuiSelectableFlags_None;

  056c1	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?contents_type@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA, 5
  056c8	75 0c		 jne	 SHORT $LN544@ShowDemoWi
  056ca	c7 85 c4 1d 00
	00 12 00 00 00	 mov	 DWORD PTR tv3306[rbp], 18
  056d4	eb 0a		 jmp	 SHORT $LN545@ShowDemoWi
$LN544@ShowDemoWi:
  056d6	c7 85 c4 1d 00
	00 00 00 00 00	 mov	 DWORD PTR tv3306[rbp], 0
$LN545@ShowDemoWi:
  056e0	8b 85 c4 1d 00
	00		 mov	 eax, DWORD PTR tv3306[rbp]
  056e6	89 85 84 0f 00
	00		 mov	 DWORD PTR selectable_flags$130[rbp], eax

; 5405 :                         if (ImGui::Selectable(label, item_is_selected, selectable_flags, ImVec2(0, row_min_height)))

  056ec	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR ?row_min_height@?CAP@??ShowDemoWindowTables@@YAXXZ@4MA
  056f4	0f 57 c9	 xorps	 xmm1, xmm1
  056f7	48 8d 8d 54 1d
	00 00		 lea	 rcx, QWORD PTR $T190[rbp]
  056fe	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  05703	4c 8b c8	 mov	 r9, rax
  05706	44 8b 85 84 0f
	00 00		 mov	 r8d, DWORD PTR selectable_flags$130[rbp]
  0570d	0f b6 95 24 0f
	00 00		 movzx	 edx, BYTE PTR item_is_selected$128[rbp]
  05714	48 8d 8d 48 0f
	00 00		 lea	 rcx, QWORD PTR label$129[rbp]
  0571b	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
  05720	0f b6 c0	 movzx	 eax, al
  05723	85 c0		 test	 eax, eax
  05725	74 6d		 je	 SHORT $LN439@ShowDemoWi

; 5406 :                         {
; 5407 :                             if (ImGui::GetIO().KeyCtrl)

  05727	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  0572c	0f b6 80 0c 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3596]
  05733	85 c0		 test	 eax, eax
  05735	74 3b		 je	 SHORT $LN449@ShowDemoWi

; 5408 :                             {
; 5409 :                                 if (item_is_selected)

  05737	0f b6 85 24 0f
	00 00		 movzx	 eax, BYTE PTR item_is_selected$128[rbp]
  0573e	85 c0		 test	 eax, eax
  05740	74 18		 je	 SHORT $LN451@ShowDemoWi

; 5410 :                                     selection.find_erase_unsorted(item->ID);

  05742	48 8b 85 08 0f
	00 00		 mov	 rax, QWORD PTR item$127[rbp]
  05749	48 8b d0	 mov	 rdx, rax
  0574c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selection@?CAP@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@H@@A
  05753	e8 00 00 00 00	 call	 ?find_erase_unsorted@?$ImVector@H@@QEAA_NAEBH@Z ; ImVector<int>::find_erase_unsorted

; 5411 :                                 else

  05758	eb 16		 jmp	 SHORT $LN452@ShowDemoWi
$LN451@ShowDemoWi:

; 5412 :                                     selection.push_back(item->ID);

  0575a	48 8b 85 08 0f
	00 00		 mov	 rax, QWORD PTR item$127[rbp]
  05761	48 8b d0	 mov	 rdx, rax
  05764	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selection@?CAP@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@H@@A
  0576b	e8 00 00 00 00	 call	 ?push_back@?$ImVector@H@@QEAAXAEBH@Z ; ImVector<int>::push_back
$LN452@ShowDemoWi:

; 5413 :                             }
; 5414 :                             else

  05770	eb 22		 jmp	 SHORT $LN439@ShowDemoWi
$LN449@ShowDemoWi:

; 5415 :                             {
; 5416 :                                 selection.clear();

  05772	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selection@?CAP@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@H@@A
  05779	e8 00 00 00 00	 call	 ?clear@?$ImVector@H@@QEAAXXZ ; ImVector<int>::clear

; 5417 :                                 selection.push_back(item->ID);

  0577e	48 8b 85 08 0f
	00 00		 mov	 rax, QWORD PTR item$127[rbp]
  05785	48 8b d0	 mov	 rdx, rax
  05788	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selection@?CAP@??ShowDemoWindowTables@@YAXXZ@4U?$ImVector@H@@A
  0578f	e8 00 00 00 00	 call	 ?push_back@?$ImVector@H@@QEAAXAEBH@Z ; ImVector<int>::push_back
$LN439@ShowDemoWi:

; 5418 :                             }
; 5419 :                         }
; 5420 :                     }
; 5421 : 
; 5422 :                     if (ImGui::TableSetColumnIndex(1))

  05794	b9 01 00 00 00	 mov	 ecx, 1
  05799	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex
  0579e	0f b6 c0	 movzx	 eax, al
  057a1	85 c0		 test	 eax, eax
  057a3	74 12		 je	 SHORT $LN453@ShowDemoWi

; 5423 :                         ImGui::TextUnformatted(item->Name);

  057a5	33 d2		 xor	 edx, edx
  057a7	48 8b 85 08 0f
	00 00		 mov	 rax, QWORD PTR item$127[rbp]
  057ae	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  057b2	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted
$LN453@ShowDemoWi:

; 5424 : 
; 5425 :                     // Here we demonstrate marking our data set as needing to be sorted again if we modified a quantity,
; 5426 :                     // and we are currently sorting on the column showing the Quantity.
; 5427 :                     // To avoid triggering a sort while holding the button, we only trigger it when the button has been released.
; 5428 :                     // You will probably need a more advanced system in your code if you want to automatically sort when a specific entry changes.
; 5429 :                     if (ImGui::TableSetColumnIndex(2))

  057b7	b9 02 00 00 00	 mov	 ecx, 2
  057bc	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex
  057c1	0f b6 c0	 movzx	 eax, al
  057c4	85 c0		 test	 eax, eax
  057c6	0f 84 9e 00 00
	00		 je	 $LN454@ShowDemoWi

; 5430 :                     {
; 5431 :                         if (ImGui::SmallButton("Chop")) { item->Quantity += 1; }

  057cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LEKIAAHM@Chop?$AA@
  057d3	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton
  057d8	0f b6 c0	 movzx	 eax, al
  057db	85 c0		 test	 eax, eax
  057dd	74 16		 je	 SHORT $LN455@ShowDemoWi
  057df	48 8b 85 08 0f
	00 00		 mov	 rax, QWORD PTR item$127[rbp]
  057e6	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  057e9	ff c0		 inc	 eax
  057eb	48 8b 8d 08 0f
	00 00		 mov	 rcx, QWORD PTR item$127[rbp]
  057f2	89 41 10	 mov	 DWORD PTR [rcx+16], eax
$LN455@ShowDemoWi:

; 5432 :                         if (sorts_specs_using_quantity && ImGui::IsItemDeactivated()) { items_need_sort = true; }

  057f5	0f b6 85 84 0e
	00 00		 movzx	 eax, BYTE PTR sorts_specs_using_quantity$124[rbp]
  057fc	85 c0		 test	 eax, eax
  057fe	74 13		 je	 SHORT $LN456@ShowDemoWi
  05800	e8 00 00 00 00	 call	 ?IsItemDeactivated@ImGui@@YA_NXZ ; ImGui::IsItemDeactivated
  05805	0f b6 c0	 movzx	 eax, al
  05808	85 c0		 test	 eax, eax
  0580a	74 07		 je	 SHORT $LN456@ShowDemoWi
  0580c	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?items_need_sort@?CAP@??ShowDemoWindowTables@@YAXXZ@4_NA, 1
$LN456@ShowDemoWi:

; 5433 :                         ImGui::SameLine();

  05813	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0581b	0f 57 c0	 xorps	 xmm0, xmm0
  0581e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 5434 :                         if (ImGui::SmallButton("Eat")) { item->Quantity -= 1; }

  05823	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03HADHJFAJ@Eat?$AA@
  0582a	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton
  0582f	0f b6 c0	 movzx	 eax, al
  05832	85 c0		 test	 eax, eax
  05834	74 16		 je	 SHORT $LN457@ShowDemoWi
  05836	48 8b 85 08 0f
	00 00		 mov	 rax, QWORD PTR item$127[rbp]
  0583d	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  05840	ff c8		 dec	 eax
  05842	48 8b 8d 08 0f
	00 00		 mov	 rcx, QWORD PTR item$127[rbp]
  05849	89 41 10	 mov	 DWORD PTR [rcx+16], eax
$LN457@ShowDemoWi:

; 5435 :                         if (sorts_specs_using_quantity && ImGui::IsItemDeactivated()) { items_need_sort = true; }

  0584c	0f b6 85 84 0e
	00 00		 movzx	 eax, BYTE PTR sorts_specs_using_quantity$124[rbp]
  05853	85 c0		 test	 eax, eax
  05855	74 13		 je	 SHORT $LN454@ShowDemoWi
  05857	e8 00 00 00 00	 call	 ?IsItemDeactivated@ImGui@@YA_NXZ ; ImGui::IsItemDeactivated
  0585c	0f b6 c0	 movzx	 eax, al
  0585f	85 c0		 test	 eax, eax
  05861	74 07		 je	 SHORT $LN454@ShowDemoWi
  05863	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?items_need_sort@?CAP@??ShowDemoWindowTables@@YAXXZ@4_NA, 1
$LN454@ShowDemoWi:

; 5436 :                     }
; 5437 : 
; 5438 :                     if (ImGui::TableSetColumnIndex(3))

  0586a	b9 03 00 00 00	 mov	 ecx, 3
  0586f	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex
  05874	0f b6 c0	 movzx	 eax, al
  05877	85 c0		 test	 eax, eax
  05879	74 16		 je	 SHORT $LN459@ShowDemoWi

; 5439 :                         ImGui::Text("%d", item->Quantity);

  0587b	48 8b 85 08 0f
	00 00		 mov	 rax, QWORD PTR item$127[rbp]
  05882	8b 50 10	 mov	 edx, DWORD PTR [rax+16]
  05885	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  0588c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN459@ShowDemoWi:

; 5440 : 
; 5441 :                     ImGui::TableSetColumnIndex(4);

  05891	b9 04 00 00 00	 mov	 ecx, 4
  05896	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex

; 5442 :                     if (show_wrapped_text)

  0589b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_wrapped_text@?CAP@??ShowDemoWindowTables@@YAXXZ@4_NA
  058a2	85 c0		 test	 eax, eax
  058a4	74 0e		 je	 SHORT $LN460@ShowDemoWi

; 5443 :                         ImGui::TextWrapped("Lorem ipsum dolor sit amet");

  058a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@BHBHGIGI@Lorem?5ipsum?5dolor?5sit?5amet?$AA@
  058ad	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped

; 5444 :                     else

  058b2	eb 0c		 jmp	 SHORT $LN461@ShowDemoWi
$LN460@ShowDemoWi:

; 5445 :                         ImGui::Text("Lorem ipsum dolor sit amet");

  058b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@BHBHGIGI@Lorem?5ipsum?5dolor?5sit?5amet?$AA@
  058bb	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN461@ShowDemoWi:

; 5446 : 
; 5447 :                     if (ImGui::TableSetColumnIndex(5))

  058c0	b9 05 00 00 00	 mov	 ecx, 5
  058c5	e8 00 00 00 00	 call	 ?TableSetColumnIndex@ImGui@@YA_NH@Z ; ImGui::TableSetColumnIndex
  058ca	0f b6 c0	 movzx	 eax, al
  058cd	85 c0		 test	 eax, eax
  058cf	74 0c		 je	 SHORT $LN462@ShowDemoWi

; 5448 :                         ImGui::Text("1234");

  058d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GCLJABMA@1234?$AA@
  058d8	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN462@ShowDemoWi:

; 5449 : 
; 5450 :                     ImGui::PopID();

  058dd	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 5451 :                 }

  058e2	e9 95 fc ff ff	 jmp	 $LN273@ShowDemoWi
$LN274@ShowDemoWi:

; 5452 :             }

  058e7	e9 6b fc ff ff	 jmp	 $LN271@ShowDemoWi
$LN272@ShowDemoWi:

; 5453 :             ImGui::PopButtonRepeat();

  058ec	e8 00 00 00 00	 call	 ?PopButtonRepeat@ImGui@@YAXXZ ; ImGui::PopButtonRepeat

; 5454 : 
; 5455 :             // Store some info to display debug details below
; 5456 :             table_scroll_cur = ImVec2(ImGui::GetScrollX(), ImGui::GetScrollY());

  058f1	e8 00 00 00 00	 call	 ?GetScrollY@ImGui@@YAMXZ ; ImGui::GetScrollY
  058f6	f3 0f 11 85 c4
	1d 00 00	 movss	 DWORD PTR tv3390[rbp], xmm0
  058fe	e8 00 00 00 00	 call	 ?GetScrollX@ImGui@@YAMXZ ; ImGui::GetScrollX
  05903	f3 0f 10 8d c4
	1d 00 00	 movss	 xmm1, DWORD PTR tv3390[rbp]
  0590b	0f 28 d1	 movaps	 xmm2, xmm1
  0590e	0f 28 c8	 movaps	 xmm1, xmm0
  05911	48 8d 8d 74 1d
	00 00		 lea	 rcx, QWORD PTR $T191[rbp]
  05918	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0591d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  05920	48 89 85 e8 0d
	00 00		 mov	 QWORD PTR table_scroll_cur$119[rbp], rax

; 5457 :             table_scroll_max = ImVec2(ImGui::GetScrollMaxX(), ImGui::GetScrollMaxY());

  05927	e8 00 00 00 00	 call	 ?GetScrollMaxY@ImGui@@YAMXZ ; ImGui::GetScrollMaxY
  0592c	f3 0f 11 85 c4
	1d 00 00	 movss	 DWORD PTR tv3397[rbp], xmm0
  05934	e8 00 00 00 00	 call	 ?GetScrollMaxX@ImGui@@YAMXZ ; ImGui::GetScrollMaxX
  05939	f3 0f 10 8d c4
	1d 00 00	 movss	 xmm1, DWORD PTR tv3397[rbp]
  05941	0f 28 d1	 movaps	 xmm2, xmm1
  05944	0f 28 c8	 movaps	 xmm1, xmm0
  05947	48 8d 8d 94 1d
	00 00		 lea	 rcx, QWORD PTR $T192[rbp]
  0594e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  05953	48 8b 00	 mov	 rax, QWORD PTR [rax]
  05956	48 89 85 08 0e
	00 00		 mov	 QWORD PTR table_scroll_max$120[rbp], rax

; 5458 :             table_draw_list = ImGui::GetWindowDrawList();

  0595d	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPEAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  05962	48 89 85 28 0e
	00 00		 mov	 QWORD PTR table_draw_list$121[rbp], rax

; 5459 :             ImGui::EndTable();

  05969	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
  0596e	90		 npad	 1

; 5460 :         }

  0596f	48 8d 8d a8 0e
	00 00		 lea	 rcx, QWORD PTR clipper$125[rbp]
  05976	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::~ImGuiListClipper
$LN434@ShowDemoWi:

; 5461 :         static bool show_debug_details = false;
; 5462 :         ImGui::Checkbox("Debug details", &show_debug_details);

  0597b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?show_debug_details@?CAP@??ShowDemoWindowTables@@YAXXZ@4_NA
  05982	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@CFGEHKMC@Debug?5details?$AA@
  05989	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 5463 :         if (show_debug_details && table_draw_list)

  0598e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_debug_details@?CAP@??ShowDemoWindowTables@@YAXXZ@4_NA
  05995	85 c0		 test	 eax, eax
  05997	0f 84 ba 00 00
	00		 je	 $LN463@ShowDemoWi
  0599d	48 83 bd 28 0e
	00 00 00	 cmp	 QWORD PTR table_draw_list$121[rbp], 0
  059a5	0f 84 ac 00 00
	00		 je	 $LN463@ShowDemoWi

; 5464 :         {
; 5465 :             ImGui::SameLine(0.0f, 0.0f);

  059ab	0f 57 c9	 xorps	 xmm1, xmm1
  059ae	0f 57 c0	 xorps	 xmm0, xmm0
  059b1	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 5466 :             const int table_draw_list_draw_cmd_count = table_draw_list->CmdBuffer.Size;

  059b6	48 8b 85 28 0e
	00 00		 mov	 rax, QWORD PTR table_draw_list$121[rbp]
  059bd	8b 00		 mov	 eax, DWORD PTR [rax]
  059bf	89 85 a4 0f 00
	00		 mov	 DWORD PTR table_draw_list_draw_cmd_count$131[rbp], eax

; 5467 :             if (table_draw_list == parent_draw_list)

  059c5	48 8b 85 a8 0d
	00 00		 mov	 rax, QWORD PTR parent_draw_list$117[rbp]
  059cc	48 39 85 28 0e
	00 00		 cmp	 QWORD PTR table_draw_list$121[rbp], rax
  059d3	75 20		 jne	 SHORT $LN464@ShowDemoWi

; 5468 :                 ImGui::Text(": DrawCmd: +%d (in same window)",

  059d5	8b 85 c4 0d 00
	00		 mov	 eax, DWORD PTR parent_draw_list_draw_cmd_count$118[rbp]
  059db	8b 8d a4 0f 00
	00		 mov	 ecx, DWORD PTR table_draw_list_draw_cmd_count$131[rbp]
  059e1	2b c8		 sub	 ecx, eax
  059e3	8b c1		 mov	 eax, ecx
  059e5	8b d0		 mov	 edx, eax
  059e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@CHDNACKG@?3?5DrawCmd?3?5?$CL?$CFd?5?$CIin?5same?5window?$CJ?$AA@
  059ee	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5469 :                     table_draw_list_draw_cmd_count - parent_draw_list_draw_cmd_count);
; 5470 :             else

  059f3	eb 62		 jmp	 SHORT $LN463@ShowDemoWi
$LN464@ShowDemoWi:

; 5471 :                 ImGui::Text(": DrawCmd: +%d (in child window), Scroll: (%.f/%.f) (%.f/%.f)",

  059f5	f3 0f 5a 85 0c
	0e 00 00	 cvtss2sd xmm0, DWORD PTR table_scroll_max$120[rbp+4]
  059fd	f3 0f 5a 8d ec
	0d 00 00	 cvtss2sd xmm1, DWORD PTR table_scroll_cur$119[rbp+4]
  05a05	f3 0f 5a 95 08
	0e 00 00	 cvtss2sd xmm2, DWORD PTR table_scroll_max$120[rbp]
  05a0d	f3 0f 5a 9d e8
	0d 00 00	 cvtss2sd xmm3, DWORD PTR table_scroll_cur$119[rbp]
  05a15	f2 0f 11 9d c8
	1d 00 00	 movsd	 QWORD PTR tv3422[rbp], xmm3
  05a1d	8b 85 a4 0f 00
	00		 mov	 eax, DWORD PTR table_draw_list_draw_cmd_count$131[rbp]
  05a23	ff c8		 dec	 eax
  05a25	f2 0f 11 44 24
	28		 movsd	 QWORD PTR [rsp+40], xmm0
  05a2b	f2 0f 11 4c 24
	20		 movsd	 QWORD PTR [rsp+32], xmm1
  05a31	0f 28 da	 movaps	 xmm3, xmm2
  05a34	66 49 0f 7e d9	 movq	 r9, xmm3
  05a39	f2 0f 10 85 c8
	1d 00 00	 movsd	 xmm0, QWORD PTR tv3422[rbp]
  05a41	0f 28 d0	 movaps	 xmm2, xmm0
  05a44	66 49 0f 7e d0	 movq	 r8, xmm2
  05a49	8b d0		 mov	 edx, eax
  05a4b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DO@LNHNLFPF@?3?5DrawCmd?3?5?$CL?$CFd?5?$CIin?5child?5window?$CJ@
  05a52	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN463@ShowDemoWi:

; 5472 :                     table_draw_list_draw_cmd_count - 1, table_scroll_cur.x, table_scroll_max.x, table_scroll_cur.y, table_scroll_max.y);
; 5473 :         }
; 5474 :         ImGui::TreePop();

  05a57	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN424@ShowDemoWi:

; 5475 :     }
; 5476 : 
; 5477 :     ImGui::PopID();

  05a5c	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 5478 : 
; 5479 :     ShowDemoWindowColumns();

  05a61	e8 00 00 00 00	 call	 ?ShowDemoWindowColumns@@YAXXZ ; ShowDemoWindowColumns

; 5480 : 
; 5481 :     if (disable_indent)

  05a66	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?disable_indent@?1??ShowDemoWindowTables@@YAXXZ@4_NA
  05a6d	85 c0		 test	 eax, eax
  05a6f	74 0a		 je	 SHORT $LN1@ShowDemoWi

; 5482 :         ImGui::PopStyleVar();

  05a71	b9 01 00 00 00	 mov	 ecx, 1
  05a76	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
$LN1@ShowDemoWi:

; 5483 : }

  05a7b	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  05a7f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShowDemoWindowTables@@YAXXZ$rtcFrameData
  05a86	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  05a8b	48 8b 8d d0 1d
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  05a92	48 33 cd	 xor	 rcx, rbp
  05a95	e8 00 00 00 00	 call	 __security_check_cookie
  05a9a	48 8d a5 e8 1d
	00 00		 lea	 rsp, QWORD PTR [rbp+7656]
  05aa1	5f		 pop	 rdi
  05aa2	5d		 pop	 rbp
  05aa3	c3		 ret	 0
$LN554@ShowDemoWi:
  05aa4	00 00 00 00	 DD	 $LN333@ShowDemoWi
  05aa8	00 00 00 00	 DD	 $LN331@ShowDemoWi
  05aac	00 00 00 00	 DD	 $LN332@ShowDemoWi
  05ab0	00 00 00 00	 DD	 $LN334@ShowDemoWi
  05ab4	00 00 00 00	 DD	 $LN335@ShowDemoWi
  05ab8	00 00 00 00	 DD	 $LN336@ShowDemoWi
?ShowDemoWindowTables@@YAXXZ ENDP			; ShowDemoWindowTables
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
TEXT_BASE_WIDTH$ = 4
TEXT_BASE_HEIGHT$ = 36
open_action$ = 68
row$20 = 100
column$21 = 132
row$22 = 164
item$23 = 196
row$24 = 228
column$25 = 260
buf$26 = 296
row$27 = 356
column$28 = 388
row$29 = 420
column$30 = 452
row$31 = 484
column$32 = 516
row$33 = 548
column$34 = 580
row$35 = 612
column$36 = 644
row$37 = 676
column$38 = 708
row$39 = 740
column$40 = 772
buf$41 = 808
cell$42 = 868
table_n$43 = 900
row$44 = 932
row$45 = 964
cell$46 = 996
column$47 = 1028
row$48 = 1060
label$49 = 1096
outer_size$50 = 1160
clipper$51 = 1192
row$52 = 1252
column$53 = 1284
outer_size$54 = 1320
row$55 = 1348
column$56 = 1380
cell$57 = 1412
column_count$58 = 1444
column_names$59 = 1480
column$60 = 1524
flags$61 = 1556
outer_size$62 = 1592
column$63 = 1620
column$64 = 1652
indent_step$65 = 1684
row$66 = 1716
column$67 = 1748
row$68 = 1780
column$69 = 1812
row$70 = 1844
column$71 = 1876
rows_height$72 = 1908
row$73 = 1940
min_row_height$74 = 1972
outer_size$75 = 2008
row$76 = 2036
column$77 = 2068
row$78 = 2100
column$79 = 2132
row$80 = 2164
column$81 = 2196
row$82 = 2228
row_bg_color$83 = 2260
column$84 = 2292
cell_bg_color$85 = 2324
row$86 = 2356
COLUMNS_COUNT$87 = 2388
column$88 = 2420
column_name$89 = 2456
row$90 = 2484
column$91 = 2516
buf$92 = 2552
COLUMNS_COUNT$93 = 2612
row$94 = 2644
column$95 = 2676
flags2$96 = 2708
row$97 = 2740
column$98 = 2772
hovered_column$99 = 2804
column$100 = 2836
n$101 = 2868
buf$102 = 2904
open$103 = 2964
cell_count$104 = 2996
cell$105 = 3028
n$106 = 3060
template_n$107 = 3092
item$108 = 3128
sorts_specs$109 = 3160
clipper$110 = 3192
row_n$111 = 3252
item$112 = 3288
contents_type_names$113 = 3320
n$114 = 3396
template_n$115 = 3428
item$116 = 3464
parent_draw_list$117 = 3496
parent_draw_list_draw_cmd_count$118 = 3524
table_scroll_cur$119 = 3560
table_scroll_max$120 = 3592
table_draw_list$121 = 3624
inner_width_to_use$122 = 3652
sorts_specs$123 = 3688
sorts_specs_using_quantity$124 = 3716
clipper$125 = 3752
row_n$126 = 3812
item$127 = 3848
item_is_selected$128 = 3876
label$129 = 3912
selectable_flags$130 = 3972
table_draw_list_draw_cmd_count$131 = 4004
$T132 = 5572
$T133 = 5604
$T134 = 5636
$T135 = 5668
$T136 = 5700
$T137 = 5732
$T138 = 5764
$T139 = 5796
$T140 = 5828
$T141 = 5860
$T142 = 5892
$T143 = 5924
$T144 = 5956
$T145 = 5988
$T146 = 6020
$T147 = 6052
$T148 = 6084
$T149 = 6116
$T150 = 6148
$T151 = 6180
$T152 = 6212
$T153 = 6244
$T154 = 6276
$T155 = 6308
$T156 = 6340
$T157 = 6372
$T158 = 6404
$T159 = 6436
$T160 = 6468
$T161 = 6500
$T162 = 6532
$T163 = 6564
$T164 = 6596
$T165 = 6628
$T166 = 6660
$T167 = 6696
$T168 = 6724
$T169 = 6772
$T170 = 6820
$T171 = 6868
$T172 = 6900
$T173 = 6932
$T174 = 6964
$T175 = 6996
$T176 = 7028
$T177 = 7060
$T178 = 7092
$T179 = 7124
$T180 = 7156
$T181 = 7188
$T182 = 7224
$T183 = 7268
$T184 = 7304
$T185 = 7352
$T186 = 7380
$T187 = 7412
$T188 = 7444
$T189 = 7476
$T190 = 7508
$T191 = 7540
$T192 = 7572
$T193 = 7608
tv3397 = 7620
tv3390 = 7620
tv3306 = 7620
tv3220 = 7620
tv3189 = 7620
tv3153 = 7620
tv3145 = 7620
tv2747 = 7620
tv2608 = 7620
tv2600 = 7620
tv2511 = 7620
tv2330 = 7620
tv2242 = 7620
tv2130 = 7620
tv2084 = 7620
tv1924 = 7620
tv1823 = 7620
tv1781 = 7620
tv1647 = 7620
tv1525 = 7620
tv1427 = 7620
tv1419 = 7620
tv1259 = 7620
tv1161 = 7620
tv1119 = 7620
tv952 = 7620
tv741 = 7620
tv605 = 7620
tv470 = 7620
tv428 = 7620
tv381 = 7620
tv228 = 7620
tv151 = 7620
tv3422 = 7624
tv3209 = 7624
tv3162 = 7624
tv3144 = 7624
tv2708 = 7624
tv2051 = 7624
tv1517 = 7624
tv1491 = 7624
tv1129 = 7624
tv599 = 7624
tv550 = 7624
__$ArrayPad$ = 7632
?dtor$0@?0??ShowDemoWindowTables@@YAXXZ@4HA PROC	; `ShowDemoWindowTables'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?JH@??ShowDemoWindowTables@@YAXXZ@4HA
  0001b	e8 00 00 00 00	 call	 _Init_thread_abort
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??ShowDemoWindowTables@@YAXXZ@4HA ENDP	; `ShowDemoWindowTables'::`1'::dtor$0
TEXT_BASE_WIDTH$ = 4
TEXT_BASE_HEIGHT$ = 36
open_action$ = 68
row$20 = 100
column$21 = 132
row$22 = 164
item$23 = 196
row$24 = 228
column$25 = 260
buf$26 = 296
row$27 = 356
column$28 = 388
row$29 = 420
column$30 = 452
row$31 = 484
column$32 = 516
row$33 = 548
column$34 = 580
row$35 = 612
column$36 = 644
row$37 = 676
column$38 = 708
row$39 = 740
column$40 = 772
buf$41 = 808
cell$42 = 868
table_n$43 = 900
row$44 = 932
row$45 = 964
cell$46 = 996
column$47 = 1028
row$48 = 1060
label$49 = 1096
outer_size$50 = 1160
clipper$51 = 1192
row$52 = 1252
column$53 = 1284
outer_size$54 = 1320
row$55 = 1348
column$56 = 1380
cell$57 = 1412
column_count$58 = 1444
column_names$59 = 1480
column$60 = 1524
flags$61 = 1556
outer_size$62 = 1592
column$63 = 1620
column$64 = 1652
indent_step$65 = 1684
row$66 = 1716
column$67 = 1748
row$68 = 1780
column$69 = 1812
row$70 = 1844
column$71 = 1876
rows_height$72 = 1908
row$73 = 1940
min_row_height$74 = 1972
outer_size$75 = 2008
row$76 = 2036
column$77 = 2068
row$78 = 2100
column$79 = 2132
row$80 = 2164
column$81 = 2196
row$82 = 2228
row_bg_color$83 = 2260
column$84 = 2292
cell_bg_color$85 = 2324
row$86 = 2356
COLUMNS_COUNT$87 = 2388
column$88 = 2420
column_name$89 = 2456
row$90 = 2484
column$91 = 2516
buf$92 = 2552
COLUMNS_COUNT$93 = 2612
row$94 = 2644
column$95 = 2676
flags2$96 = 2708
row$97 = 2740
column$98 = 2772
hovered_column$99 = 2804
column$100 = 2836
n$101 = 2868
buf$102 = 2904
open$103 = 2964
cell_count$104 = 2996
cell$105 = 3028
n$106 = 3060
template_n$107 = 3092
item$108 = 3128
sorts_specs$109 = 3160
clipper$110 = 3192
row_n$111 = 3252
item$112 = 3288
contents_type_names$113 = 3320
n$114 = 3396
template_n$115 = 3428
item$116 = 3464
parent_draw_list$117 = 3496
parent_draw_list_draw_cmd_count$118 = 3524
table_scroll_cur$119 = 3560
table_scroll_max$120 = 3592
table_draw_list$121 = 3624
inner_width_to_use$122 = 3652
sorts_specs$123 = 3688
sorts_specs_using_quantity$124 = 3716
clipper$125 = 3752
row_n$126 = 3812
item$127 = 3848
item_is_selected$128 = 3876
label$129 = 3912
selectable_flags$130 = 3972
table_draw_list_draw_cmd_count$131 = 4004
$T132 = 5572
$T133 = 5604
$T134 = 5636
$T135 = 5668
$T136 = 5700
$T137 = 5732
$T138 = 5764
$T139 = 5796
$T140 = 5828
$T141 = 5860
$T142 = 5892
$T143 = 5924
$T144 = 5956
$T145 = 5988
$T146 = 6020
$T147 = 6052
$T148 = 6084
$T149 = 6116
$T150 = 6148
$T151 = 6180
$T152 = 6212
$T153 = 6244
$T154 = 6276
$T155 = 6308
$T156 = 6340
$T157 = 6372
$T158 = 6404
$T159 = 6436
$T160 = 6468
$T161 = 6500
$T162 = 6532
$T163 = 6564
$T164 = 6596
$T165 = 6628
$T166 = 6660
$T167 = 6696
$T168 = 6724
$T169 = 6772
$T170 = 6820
$T171 = 6868
$T172 = 6900
$T173 = 6932
$T174 = 6964
$T175 = 6996
$T176 = 7028
$T177 = 7060
$T178 = 7092
$T179 = 7124
$T180 = 7156
$T181 = 7188
$T182 = 7224
$T183 = 7268
$T184 = 7304
$T185 = 7352
$T186 = 7380
$T187 = 7412
$T188 = 7444
$T189 = 7476
$T190 = 7508
$T191 = 7540
$T192 = 7572
$T193 = 7608
tv3397 = 7620
tv3390 = 7620
tv3306 = 7620
tv3220 = 7620
tv3189 = 7620
tv3153 = 7620
tv3145 = 7620
tv2747 = 7620
tv2608 = 7620
tv2600 = 7620
tv2511 = 7620
tv2330 = 7620
tv2242 = 7620
tv2130 = 7620
tv2084 = 7620
tv1924 = 7620
tv1823 = 7620
tv1781 = 7620
tv1647 = 7620
tv1525 = 7620
tv1427 = 7620
tv1419 = 7620
tv1259 = 7620
tv1161 = 7620
tv1119 = 7620
tv952 = 7620
tv741 = 7620
tv605 = 7620
tv470 = 7620
tv428 = 7620
tv381 = 7620
tv228 = 7620
tv151 = 7620
tv3422 = 7624
tv3209 = 7624
tv3162 = 7624
tv3144 = 7624
tv2708 = 7624
tv2051 = 7624
tv1517 = 7624
tv1491 = 7624
tv1129 = 7624
tv599 = 7624
tv550 = 7624
__$ArrayPad$ = 7632
?dtor$1@?0??ShowDemoWindowTables@@YAXXZ@4HA PROC	; `ShowDemoWindowTables'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0003b	48 8d 8d a8 04
	00 00		 lea	 rcx, QWORD PTR clipper$51[rbp]
  00042	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::~ImGuiListClipper
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?dtor$1@?0??ShowDemoWindowTables@@YAXXZ@4HA ENDP	; `ShowDemoWindowTables'::`1'::dtor$1
TEXT_BASE_WIDTH$ = 4
TEXT_BASE_HEIGHT$ = 36
open_action$ = 68
row$20 = 100
column$21 = 132
row$22 = 164
item$23 = 196
row$24 = 228
column$25 = 260
buf$26 = 296
row$27 = 356
column$28 = 388
row$29 = 420
column$30 = 452
row$31 = 484
column$32 = 516
row$33 = 548
column$34 = 580
row$35 = 612
column$36 = 644
row$37 = 676
column$38 = 708
row$39 = 740
column$40 = 772
buf$41 = 808
cell$42 = 868
table_n$43 = 900
row$44 = 932
row$45 = 964
cell$46 = 996
column$47 = 1028
row$48 = 1060
label$49 = 1096
outer_size$50 = 1160
clipper$51 = 1192
row$52 = 1252
column$53 = 1284
outer_size$54 = 1320
row$55 = 1348
column$56 = 1380
cell$57 = 1412
column_count$58 = 1444
column_names$59 = 1480
column$60 = 1524
flags$61 = 1556
outer_size$62 = 1592
column$63 = 1620
column$64 = 1652
indent_step$65 = 1684
row$66 = 1716
column$67 = 1748
row$68 = 1780
column$69 = 1812
row$70 = 1844
column$71 = 1876
rows_height$72 = 1908
row$73 = 1940
min_row_height$74 = 1972
outer_size$75 = 2008
row$76 = 2036
column$77 = 2068
row$78 = 2100
column$79 = 2132
row$80 = 2164
column$81 = 2196
row$82 = 2228
row_bg_color$83 = 2260
column$84 = 2292
cell_bg_color$85 = 2324
row$86 = 2356
COLUMNS_COUNT$87 = 2388
column$88 = 2420
column_name$89 = 2456
row$90 = 2484
column$91 = 2516
buf$92 = 2552
COLUMNS_COUNT$93 = 2612
row$94 = 2644
column$95 = 2676
flags2$96 = 2708
row$97 = 2740
column$98 = 2772
hovered_column$99 = 2804
column$100 = 2836
n$101 = 2868
buf$102 = 2904
open$103 = 2964
cell_count$104 = 2996
cell$105 = 3028
n$106 = 3060
template_n$107 = 3092
item$108 = 3128
sorts_specs$109 = 3160
clipper$110 = 3192
row_n$111 = 3252
item$112 = 3288
contents_type_names$113 = 3320
n$114 = 3396
template_n$115 = 3428
item$116 = 3464
parent_draw_list$117 = 3496
parent_draw_list_draw_cmd_count$118 = 3524
table_scroll_cur$119 = 3560
table_scroll_max$120 = 3592
table_draw_list$121 = 3624
inner_width_to_use$122 = 3652
sorts_specs$123 = 3688
sorts_specs_using_quantity$124 = 3716
clipper$125 = 3752
row_n$126 = 3812
item$127 = 3848
item_is_selected$128 = 3876
label$129 = 3912
selectable_flags$130 = 3972
table_draw_list_draw_cmd_count$131 = 4004
$T132 = 5572
$T133 = 5604
$T134 = 5636
$T135 = 5668
$T136 = 5700
$T137 = 5732
$T138 = 5764
$T139 = 5796
$T140 = 5828
$T141 = 5860
$T142 = 5892
$T143 = 5924
$T144 = 5956
$T145 = 5988
$T146 = 6020
$T147 = 6052
$T148 = 6084
$T149 = 6116
$T150 = 6148
$T151 = 6180
$T152 = 6212
$T153 = 6244
$T154 = 6276
$T155 = 6308
$T156 = 6340
$T157 = 6372
$T158 = 6404
$T159 = 6436
$T160 = 6468
$T161 = 6500
$T162 = 6532
$T163 = 6564
$T164 = 6596
$T165 = 6628
$T166 = 6660
$T167 = 6696
$T168 = 6724
$T169 = 6772
$T170 = 6820
$T171 = 6868
$T172 = 6900
$T173 = 6932
$T174 = 6964
$T175 = 6996
$T176 = 7028
$T177 = 7060
$T178 = 7092
$T179 = 7124
$T180 = 7156
$T181 = 7188
$T182 = 7224
$T183 = 7268
$T184 = 7304
$T185 = 7352
$T186 = 7380
$T187 = 7412
$T188 = 7444
$T189 = 7476
$T190 = 7508
$T191 = 7540
$T192 = 7572
$T193 = 7608
tv3397 = 7620
tv3390 = 7620
tv3306 = 7620
tv3220 = 7620
tv3189 = 7620
tv3153 = 7620
tv3145 = 7620
tv2747 = 7620
tv2608 = 7620
tv2600 = 7620
tv2511 = 7620
tv2330 = 7620
tv2242 = 7620
tv2130 = 7620
tv2084 = 7620
tv1924 = 7620
tv1823 = 7620
tv1781 = 7620
tv1647 = 7620
tv1525 = 7620
tv1427 = 7620
tv1419 = 7620
tv1259 = 7620
tv1161 = 7620
tv1119 = 7620
tv952 = 7620
tv741 = 7620
tv605 = 7620
tv470 = 7620
tv428 = 7620
tv381 = 7620
tv228 = 7620
tv151 = 7620
tv3422 = 7624
tv3209 = 7624
tv3162 = 7624
tv3144 = 7624
tv2708 = 7624
tv2051 = 7624
tv1517 = 7624
tv1491 = 7624
tv1129 = 7624
tv599 = 7624
tv550 = 7624
__$ArrayPad$ = 7632
?dtor$2@?0??ShowDemoWindowTables@@YAXXZ@4HA PROC	; `ShowDemoWindowTables'::`1'::dtor$2
  0004e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00053	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00058	55		 push	 rbp
  00059	57		 push	 rdi
  0005a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005e	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?BPE@??ShowDemoWindowTables@@YAXXZ@4HA
  00069	e8 00 00 00 00	 call	 _Init_thread_abort
  0006e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
?dtor$2@?0??ShowDemoWindowTables@@YAXXZ@4HA ENDP	; `ShowDemoWindowTables'::`1'::dtor$2
TEXT_BASE_WIDTH$ = 4
TEXT_BASE_HEIGHT$ = 36
open_action$ = 68
row$20 = 100
column$21 = 132
row$22 = 164
item$23 = 196
row$24 = 228
column$25 = 260
buf$26 = 296
row$27 = 356
column$28 = 388
row$29 = 420
column$30 = 452
row$31 = 484
column$32 = 516
row$33 = 548
column$34 = 580
row$35 = 612
column$36 = 644
row$37 = 676
column$38 = 708
row$39 = 740
column$40 = 772
buf$41 = 808
cell$42 = 868
table_n$43 = 900
row$44 = 932
row$45 = 964
cell$46 = 996
column$47 = 1028
row$48 = 1060
label$49 = 1096
outer_size$50 = 1160
clipper$51 = 1192
row$52 = 1252
column$53 = 1284
outer_size$54 = 1320
row$55 = 1348
column$56 = 1380
cell$57 = 1412
column_count$58 = 1444
column_names$59 = 1480
column$60 = 1524
flags$61 = 1556
outer_size$62 = 1592
column$63 = 1620
column$64 = 1652
indent_step$65 = 1684
row$66 = 1716
column$67 = 1748
row$68 = 1780
column$69 = 1812
row$70 = 1844
column$71 = 1876
rows_height$72 = 1908
row$73 = 1940
min_row_height$74 = 1972
outer_size$75 = 2008
row$76 = 2036
column$77 = 2068
row$78 = 2100
column$79 = 2132
row$80 = 2164
column$81 = 2196
row$82 = 2228
row_bg_color$83 = 2260
column$84 = 2292
cell_bg_color$85 = 2324
row$86 = 2356
COLUMNS_COUNT$87 = 2388
column$88 = 2420
column_name$89 = 2456
row$90 = 2484
column$91 = 2516
buf$92 = 2552
COLUMNS_COUNT$93 = 2612
row$94 = 2644
column$95 = 2676
flags2$96 = 2708
row$97 = 2740
column$98 = 2772
hovered_column$99 = 2804
column$100 = 2836
n$101 = 2868
buf$102 = 2904
open$103 = 2964
cell_count$104 = 2996
cell$105 = 3028
n$106 = 3060
template_n$107 = 3092
item$108 = 3128
sorts_specs$109 = 3160
clipper$110 = 3192
row_n$111 = 3252
item$112 = 3288
contents_type_names$113 = 3320
n$114 = 3396
template_n$115 = 3428
item$116 = 3464
parent_draw_list$117 = 3496
parent_draw_list_draw_cmd_count$118 = 3524
table_scroll_cur$119 = 3560
table_scroll_max$120 = 3592
table_draw_list$121 = 3624
inner_width_to_use$122 = 3652
sorts_specs$123 = 3688
sorts_specs_using_quantity$124 = 3716
clipper$125 = 3752
row_n$126 = 3812
item$127 = 3848
item_is_selected$128 = 3876
label$129 = 3912
selectable_flags$130 = 3972
table_draw_list_draw_cmd_count$131 = 4004
$T132 = 5572
$T133 = 5604
$T134 = 5636
$T135 = 5668
$T136 = 5700
$T137 = 5732
$T138 = 5764
$T139 = 5796
$T140 = 5828
$T141 = 5860
$T142 = 5892
$T143 = 5924
$T144 = 5956
$T145 = 5988
$T146 = 6020
$T147 = 6052
$T148 = 6084
$T149 = 6116
$T150 = 6148
$T151 = 6180
$T152 = 6212
$T153 = 6244
$T154 = 6276
$T155 = 6308
$T156 = 6340
$T157 = 6372
$T158 = 6404
$T159 = 6436
$T160 = 6468
$T161 = 6500
$T162 = 6532
$T163 = 6564
$T164 = 6596
$T165 = 6628
$T166 = 6660
$T167 = 6696
$T168 = 6724
$T169 = 6772
$T170 = 6820
$T171 = 6868
$T172 = 6900
$T173 = 6932
$T174 = 6964
$T175 = 6996
$T176 = 7028
$T177 = 7060
$T178 = 7092
$T179 = 7124
$T180 = 7156
$T181 = 7188
$T182 = 7224
$T183 = 7268
$T184 = 7304
$T185 = 7352
$T186 = 7380
$T187 = 7412
$T188 = 7444
$T189 = 7476
$T190 = 7508
$T191 = 7540
$T192 = 7572
$T193 = 7608
tv3397 = 7620
tv3390 = 7620
tv3306 = 7620
tv3220 = 7620
tv3189 = 7620
tv3153 = 7620
tv3145 = 7620
tv2747 = 7620
tv2608 = 7620
tv2600 = 7620
tv2511 = 7620
tv2330 = 7620
tv2242 = 7620
tv2130 = 7620
tv2084 = 7620
tv1924 = 7620
tv1823 = 7620
tv1781 = 7620
tv1647 = 7620
tv1525 = 7620
tv1427 = 7620
tv1419 = 7620
tv1259 = 7620
tv1161 = 7620
tv1119 = 7620
tv952 = 7620
tv741 = 7620
tv605 = 7620
tv470 = 7620
tv428 = 7620
tv381 = 7620
tv228 = 7620
tv151 = 7620
tv3422 = 7624
tv3209 = 7624
tv3162 = 7624
tv3144 = 7624
tv2708 = 7624
tv2051 = 7624
tv1517 = 7624
tv1491 = 7624
tv1129 = 7624
tv599 = 7624
tv550 = 7624
__$ArrayPad$ = 7632
?dtor$3@?0??ShowDemoWindowTables@@YAXXZ@4HA PROC	; `ShowDemoWindowTables'::`1'::dtor$3
  00075	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0007a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0007f	55		 push	 rbp
  00080	57		 push	 rdi
  00081	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00085	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00089	48 8d 8d 78 0c
	00 00		 lea	 rcx, QWORD PTR clipper$110[rbp]
  00090	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::~ImGuiListClipper
  00095	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00099	5f		 pop	 rdi
  0009a	5d		 pop	 rbp
  0009b	c3		 ret	 0
?dtor$3@?0??ShowDemoWindowTables@@YAXXZ@4HA ENDP	; `ShowDemoWindowTables'::`1'::dtor$3
TEXT_BASE_WIDTH$ = 4
TEXT_BASE_HEIGHT$ = 36
open_action$ = 68
row$20 = 100
column$21 = 132
row$22 = 164
item$23 = 196
row$24 = 228
column$25 = 260
buf$26 = 296
row$27 = 356
column$28 = 388
row$29 = 420
column$30 = 452
row$31 = 484
column$32 = 516
row$33 = 548
column$34 = 580
row$35 = 612
column$36 = 644
row$37 = 676
column$38 = 708
row$39 = 740
column$40 = 772
buf$41 = 808
cell$42 = 868
table_n$43 = 900
row$44 = 932
row$45 = 964
cell$46 = 996
column$47 = 1028
row$48 = 1060
label$49 = 1096
outer_size$50 = 1160
clipper$51 = 1192
row$52 = 1252
column$53 = 1284
outer_size$54 = 1320
row$55 = 1348
column$56 = 1380
cell$57 = 1412
column_count$58 = 1444
column_names$59 = 1480
column$60 = 1524
flags$61 = 1556
outer_size$62 = 1592
column$63 = 1620
column$64 = 1652
indent_step$65 = 1684
row$66 = 1716
column$67 = 1748
row$68 = 1780
column$69 = 1812
row$70 = 1844
column$71 = 1876
rows_height$72 = 1908
row$73 = 1940
min_row_height$74 = 1972
outer_size$75 = 2008
row$76 = 2036
column$77 = 2068
row$78 = 2100
column$79 = 2132
row$80 = 2164
column$81 = 2196
row$82 = 2228
row_bg_color$83 = 2260
column$84 = 2292
cell_bg_color$85 = 2324
row$86 = 2356
COLUMNS_COUNT$87 = 2388
column$88 = 2420
column_name$89 = 2456
row$90 = 2484
column$91 = 2516
buf$92 = 2552
COLUMNS_COUNT$93 = 2612
row$94 = 2644
column$95 = 2676
flags2$96 = 2708
row$97 = 2740
column$98 = 2772
hovered_column$99 = 2804
column$100 = 2836
n$101 = 2868
buf$102 = 2904
open$103 = 2964
cell_count$104 = 2996
cell$105 = 3028
n$106 = 3060
template_n$107 = 3092
item$108 = 3128
sorts_specs$109 = 3160
clipper$110 = 3192
row_n$111 = 3252
item$112 = 3288
contents_type_names$113 = 3320
n$114 = 3396
template_n$115 = 3428
item$116 = 3464
parent_draw_list$117 = 3496
parent_draw_list_draw_cmd_count$118 = 3524
table_scroll_cur$119 = 3560
table_scroll_max$120 = 3592
table_draw_list$121 = 3624
inner_width_to_use$122 = 3652
sorts_specs$123 = 3688
sorts_specs_using_quantity$124 = 3716
clipper$125 = 3752
row_n$126 = 3812
item$127 = 3848
item_is_selected$128 = 3876
label$129 = 3912
selectable_flags$130 = 3972
table_draw_list_draw_cmd_count$131 = 4004
$T132 = 5572
$T133 = 5604
$T134 = 5636
$T135 = 5668
$T136 = 5700
$T137 = 5732
$T138 = 5764
$T139 = 5796
$T140 = 5828
$T141 = 5860
$T142 = 5892
$T143 = 5924
$T144 = 5956
$T145 = 5988
$T146 = 6020
$T147 = 6052
$T148 = 6084
$T149 = 6116
$T150 = 6148
$T151 = 6180
$T152 = 6212
$T153 = 6244
$T154 = 6276
$T155 = 6308
$T156 = 6340
$T157 = 6372
$T158 = 6404
$T159 = 6436
$T160 = 6468
$T161 = 6500
$T162 = 6532
$T163 = 6564
$T164 = 6596
$T165 = 6628
$T166 = 6660
$T167 = 6696
$T168 = 6724
$T169 = 6772
$T170 = 6820
$T171 = 6868
$T172 = 6900
$T173 = 6932
$T174 = 6964
$T175 = 6996
$T176 = 7028
$T177 = 7060
$T178 = 7092
$T179 = 7124
$T180 = 7156
$T181 = 7188
$T182 = 7224
$T183 = 7268
$T184 = 7304
$T185 = 7352
$T186 = 7380
$T187 = 7412
$T188 = 7444
$T189 = 7476
$T190 = 7508
$T191 = 7540
$T192 = 7572
$T193 = 7608
tv3397 = 7620
tv3390 = 7620
tv3306 = 7620
tv3220 = 7620
tv3189 = 7620
tv3153 = 7620
tv3145 = 7620
tv2747 = 7620
tv2608 = 7620
tv2600 = 7620
tv2511 = 7620
tv2330 = 7620
tv2242 = 7620
tv2130 = 7620
tv2084 = 7620
tv1924 = 7620
tv1823 = 7620
tv1781 = 7620
tv1647 = 7620
tv1525 = 7620
tv1427 = 7620
tv1419 = 7620
tv1259 = 7620
tv1161 = 7620
tv1119 = 7620
tv952 = 7620
tv741 = 7620
tv605 = 7620
tv470 = 7620
tv428 = 7620
tv381 = 7620
tv228 = 7620
tv151 = 7620
tv3422 = 7624
tv3209 = 7624
tv3162 = 7624
tv3144 = 7624
tv2708 = 7624
tv2051 = 7624
tv1517 = 7624
tv1491 = 7624
tv1129 = 7624
tv599 = 7624
tv550 = 7624
__$ArrayPad$ = 7632
?dtor$4@?0??ShowDemoWindowTables@@YAXXZ@4HA PROC	; `ShowDemoWindowTables'::`1'::dtor$4
  0009c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000a1	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000a6	55		 push	 rbp
  000a7	57		 push	 rdi
  000a8	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000ac	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS2@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  000b7	e8 00 00 00 00	 call	 _Init_thread_abort
  000bc	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000c0	5f		 pop	 rdi
  000c1	5d		 pop	 rbp
  000c2	c3		 ret	 0
?dtor$4@?0??ShowDemoWindowTables@@YAXXZ@4HA ENDP	; `ShowDemoWindowTables'::`1'::dtor$4
TEXT_BASE_WIDTH$ = 4
TEXT_BASE_HEIGHT$ = 36
open_action$ = 68
row$20 = 100
column$21 = 132
row$22 = 164
item$23 = 196
row$24 = 228
column$25 = 260
buf$26 = 296
row$27 = 356
column$28 = 388
row$29 = 420
column$30 = 452
row$31 = 484
column$32 = 516
row$33 = 548
column$34 = 580
row$35 = 612
column$36 = 644
row$37 = 676
column$38 = 708
row$39 = 740
column$40 = 772
buf$41 = 808
cell$42 = 868
table_n$43 = 900
row$44 = 932
row$45 = 964
cell$46 = 996
column$47 = 1028
row$48 = 1060
label$49 = 1096
outer_size$50 = 1160
clipper$51 = 1192
row$52 = 1252
column$53 = 1284
outer_size$54 = 1320
row$55 = 1348
column$56 = 1380
cell$57 = 1412
column_count$58 = 1444
column_names$59 = 1480
column$60 = 1524
flags$61 = 1556
outer_size$62 = 1592
column$63 = 1620
column$64 = 1652
indent_step$65 = 1684
row$66 = 1716
column$67 = 1748
row$68 = 1780
column$69 = 1812
row$70 = 1844
column$71 = 1876
rows_height$72 = 1908
row$73 = 1940
min_row_height$74 = 1972
outer_size$75 = 2008
row$76 = 2036
column$77 = 2068
row$78 = 2100
column$79 = 2132
row$80 = 2164
column$81 = 2196
row$82 = 2228
row_bg_color$83 = 2260
column$84 = 2292
cell_bg_color$85 = 2324
row$86 = 2356
COLUMNS_COUNT$87 = 2388
column$88 = 2420
column_name$89 = 2456
row$90 = 2484
column$91 = 2516
buf$92 = 2552
COLUMNS_COUNT$93 = 2612
row$94 = 2644
column$95 = 2676
flags2$96 = 2708
row$97 = 2740
column$98 = 2772
hovered_column$99 = 2804
column$100 = 2836
n$101 = 2868
buf$102 = 2904
open$103 = 2964
cell_count$104 = 2996
cell$105 = 3028
n$106 = 3060
template_n$107 = 3092
item$108 = 3128
sorts_specs$109 = 3160
clipper$110 = 3192
row_n$111 = 3252
item$112 = 3288
contents_type_names$113 = 3320
n$114 = 3396
template_n$115 = 3428
item$116 = 3464
parent_draw_list$117 = 3496
parent_draw_list_draw_cmd_count$118 = 3524
table_scroll_cur$119 = 3560
table_scroll_max$120 = 3592
table_draw_list$121 = 3624
inner_width_to_use$122 = 3652
sorts_specs$123 = 3688
sorts_specs_using_quantity$124 = 3716
clipper$125 = 3752
row_n$126 = 3812
item$127 = 3848
item_is_selected$128 = 3876
label$129 = 3912
selectable_flags$130 = 3972
table_draw_list_draw_cmd_count$131 = 4004
$T132 = 5572
$T133 = 5604
$T134 = 5636
$T135 = 5668
$T136 = 5700
$T137 = 5732
$T138 = 5764
$T139 = 5796
$T140 = 5828
$T141 = 5860
$T142 = 5892
$T143 = 5924
$T144 = 5956
$T145 = 5988
$T146 = 6020
$T147 = 6052
$T148 = 6084
$T149 = 6116
$T150 = 6148
$T151 = 6180
$T152 = 6212
$T153 = 6244
$T154 = 6276
$T155 = 6308
$T156 = 6340
$T157 = 6372
$T158 = 6404
$T159 = 6436
$T160 = 6468
$T161 = 6500
$T162 = 6532
$T163 = 6564
$T164 = 6596
$T165 = 6628
$T166 = 6660
$T167 = 6696
$T168 = 6724
$T169 = 6772
$T170 = 6820
$T171 = 6868
$T172 = 6900
$T173 = 6932
$T174 = 6964
$T175 = 6996
$T176 = 7028
$T177 = 7060
$T178 = 7092
$T179 = 7124
$T180 = 7156
$T181 = 7188
$T182 = 7224
$T183 = 7268
$T184 = 7304
$T185 = 7352
$T186 = 7380
$T187 = 7412
$T188 = 7444
$T189 = 7476
$T190 = 7508
$T191 = 7540
$T192 = 7572
$T193 = 7608
tv3397 = 7620
tv3390 = 7620
tv3306 = 7620
tv3220 = 7620
tv3189 = 7620
tv3153 = 7620
tv3145 = 7620
tv2747 = 7620
tv2608 = 7620
tv2600 = 7620
tv2511 = 7620
tv2330 = 7620
tv2242 = 7620
tv2130 = 7620
tv2084 = 7620
tv1924 = 7620
tv1823 = 7620
tv1781 = 7620
tv1647 = 7620
tv1525 = 7620
tv1427 = 7620
tv1419 = 7620
tv1259 = 7620
tv1161 = 7620
tv1119 = 7620
tv952 = 7620
tv741 = 7620
tv605 = 7620
tv470 = 7620
tv428 = 7620
tv381 = 7620
tv228 = 7620
tv151 = 7620
tv3422 = 7624
tv3209 = 7624
tv3162 = 7624
tv3144 = 7624
tv2708 = 7624
tv2051 = 7624
tv1517 = 7624
tv1491 = 7624
tv1129 = 7624
tv599 = 7624
tv550 = 7624
__$ArrayPad$ = 7632
?dtor$5@?0??ShowDemoWindowTables@@YAXXZ@4HA PROC	; `ShowDemoWindowTables'::`1'::dtor$5
  000c3	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000c8	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000cd	55		 push	 rbp
  000ce	57		 push	 rdi
  000cf	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000d3	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  000d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS3@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  000de	e8 00 00 00 00	 call	 _Init_thread_abort
  000e3	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e7	5f		 pop	 rdi
  000e8	5d		 pop	 rbp
  000e9	c3		 ret	 0
?dtor$5@?0??ShowDemoWindowTables@@YAXXZ@4HA ENDP	; `ShowDemoWindowTables'::`1'::dtor$5
TEXT_BASE_WIDTH$ = 4
TEXT_BASE_HEIGHT$ = 36
open_action$ = 68
row$20 = 100
column$21 = 132
row$22 = 164
item$23 = 196
row$24 = 228
column$25 = 260
buf$26 = 296
row$27 = 356
column$28 = 388
row$29 = 420
column$30 = 452
row$31 = 484
column$32 = 516
row$33 = 548
column$34 = 580
row$35 = 612
column$36 = 644
row$37 = 676
column$38 = 708
row$39 = 740
column$40 = 772
buf$41 = 808
cell$42 = 868
table_n$43 = 900
row$44 = 932
row$45 = 964
cell$46 = 996
column$47 = 1028
row$48 = 1060
label$49 = 1096
outer_size$50 = 1160
clipper$51 = 1192
row$52 = 1252
column$53 = 1284
outer_size$54 = 1320
row$55 = 1348
column$56 = 1380
cell$57 = 1412
column_count$58 = 1444
column_names$59 = 1480
column$60 = 1524
flags$61 = 1556
outer_size$62 = 1592
column$63 = 1620
column$64 = 1652
indent_step$65 = 1684
row$66 = 1716
column$67 = 1748
row$68 = 1780
column$69 = 1812
row$70 = 1844
column$71 = 1876
rows_height$72 = 1908
row$73 = 1940
min_row_height$74 = 1972
outer_size$75 = 2008
row$76 = 2036
column$77 = 2068
row$78 = 2100
column$79 = 2132
row$80 = 2164
column$81 = 2196
row$82 = 2228
row_bg_color$83 = 2260
column$84 = 2292
cell_bg_color$85 = 2324
row$86 = 2356
COLUMNS_COUNT$87 = 2388
column$88 = 2420
column_name$89 = 2456
row$90 = 2484
column$91 = 2516
buf$92 = 2552
COLUMNS_COUNT$93 = 2612
row$94 = 2644
column$95 = 2676
flags2$96 = 2708
row$97 = 2740
column$98 = 2772
hovered_column$99 = 2804
column$100 = 2836
n$101 = 2868
buf$102 = 2904
open$103 = 2964
cell_count$104 = 2996
cell$105 = 3028
n$106 = 3060
template_n$107 = 3092
item$108 = 3128
sorts_specs$109 = 3160
clipper$110 = 3192
row_n$111 = 3252
item$112 = 3288
contents_type_names$113 = 3320
n$114 = 3396
template_n$115 = 3428
item$116 = 3464
parent_draw_list$117 = 3496
parent_draw_list_draw_cmd_count$118 = 3524
table_scroll_cur$119 = 3560
table_scroll_max$120 = 3592
table_draw_list$121 = 3624
inner_width_to_use$122 = 3652
sorts_specs$123 = 3688
sorts_specs_using_quantity$124 = 3716
clipper$125 = 3752
row_n$126 = 3812
item$127 = 3848
item_is_selected$128 = 3876
label$129 = 3912
selectable_flags$130 = 3972
table_draw_list_draw_cmd_count$131 = 4004
$T132 = 5572
$T133 = 5604
$T134 = 5636
$T135 = 5668
$T136 = 5700
$T137 = 5732
$T138 = 5764
$T139 = 5796
$T140 = 5828
$T141 = 5860
$T142 = 5892
$T143 = 5924
$T144 = 5956
$T145 = 5988
$T146 = 6020
$T147 = 6052
$T148 = 6084
$T149 = 6116
$T150 = 6148
$T151 = 6180
$T152 = 6212
$T153 = 6244
$T154 = 6276
$T155 = 6308
$T156 = 6340
$T157 = 6372
$T158 = 6404
$T159 = 6436
$T160 = 6468
$T161 = 6500
$T162 = 6532
$T163 = 6564
$T164 = 6596
$T165 = 6628
$T166 = 6660
$T167 = 6696
$T168 = 6724
$T169 = 6772
$T170 = 6820
$T171 = 6868
$T172 = 6900
$T173 = 6932
$T174 = 6964
$T175 = 6996
$T176 = 7028
$T177 = 7060
$T178 = 7092
$T179 = 7124
$T180 = 7156
$T181 = 7188
$T182 = 7224
$T183 = 7268
$T184 = 7304
$T185 = 7352
$T186 = 7380
$T187 = 7412
$T188 = 7444
$T189 = 7476
$T190 = 7508
$T191 = 7540
$T192 = 7572
$T193 = 7608
tv3397 = 7620
tv3390 = 7620
tv3306 = 7620
tv3220 = 7620
tv3189 = 7620
tv3153 = 7620
tv3145 = 7620
tv2747 = 7620
tv2608 = 7620
tv2600 = 7620
tv2511 = 7620
tv2330 = 7620
tv2242 = 7620
tv2130 = 7620
tv2084 = 7620
tv1924 = 7620
tv1823 = 7620
tv1781 = 7620
tv1647 = 7620
tv1525 = 7620
tv1427 = 7620
tv1419 = 7620
tv1259 = 7620
tv1161 = 7620
tv1119 = 7620
tv952 = 7620
tv741 = 7620
tv605 = 7620
tv470 = 7620
tv428 = 7620
tv381 = 7620
tv228 = 7620
tv151 = 7620
tv3422 = 7624
tv3209 = 7624
tv3162 = 7624
tv3144 = 7624
tv2708 = 7624
tv2051 = 7624
tv1517 = 7624
tv1491 = 7624
tv1129 = 7624
tv599 = 7624
tv550 = 7624
__$ArrayPad$ = 7632
?dtor$6@?0??ShowDemoWindowTables@@YAXXZ@4HA PROC	; `ShowDemoWindowTables'::`1'::dtor$6
  000ea	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000ef	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000f4	55		 push	 rbp
  000f5	57		 push	 rdi
  000f6	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000fa	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  000fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS4@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  00105	e8 00 00 00 00	 call	 _Init_thread_abort
  0010a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0010e	5f		 pop	 rdi
  0010f	5d		 pop	 rbp
  00110	c3		 ret	 0
?dtor$6@?0??ShowDemoWindowTables@@YAXXZ@4HA ENDP	; `ShowDemoWindowTables'::`1'::dtor$6
TEXT_BASE_WIDTH$ = 4
TEXT_BASE_HEIGHT$ = 36
open_action$ = 68
row$20 = 100
column$21 = 132
row$22 = 164
item$23 = 196
row$24 = 228
column$25 = 260
buf$26 = 296
row$27 = 356
column$28 = 388
row$29 = 420
column$30 = 452
row$31 = 484
column$32 = 516
row$33 = 548
column$34 = 580
row$35 = 612
column$36 = 644
row$37 = 676
column$38 = 708
row$39 = 740
column$40 = 772
buf$41 = 808
cell$42 = 868
table_n$43 = 900
row$44 = 932
row$45 = 964
cell$46 = 996
column$47 = 1028
row$48 = 1060
label$49 = 1096
outer_size$50 = 1160
clipper$51 = 1192
row$52 = 1252
column$53 = 1284
outer_size$54 = 1320
row$55 = 1348
column$56 = 1380
cell$57 = 1412
column_count$58 = 1444
column_names$59 = 1480
column$60 = 1524
flags$61 = 1556
outer_size$62 = 1592
column$63 = 1620
column$64 = 1652
indent_step$65 = 1684
row$66 = 1716
column$67 = 1748
row$68 = 1780
column$69 = 1812
row$70 = 1844
column$71 = 1876
rows_height$72 = 1908
row$73 = 1940
min_row_height$74 = 1972
outer_size$75 = 2008
row$76 = 2036
column$77 = 2068
row$78 = 2100
column$79 = 2132
row$80 = 2164
column$81 = 2196
row$82 = 2228
row_bg_color$83 = 2260
column$84 = 2292
cell_bg_color$85 = 2324
row$86 = 2356
COLUMNS_COUNT$87 = 2388
column$88 = 2420
column_name$89 = 2456
row$90 = 2484
column$91 = 2516
buf$92 = 2552
COLUMNS_COUNT$93 = 2612
row$94 = 2644
column$95 = 2676
flags2$96 = 2708
row$97 = 2740
column$98 = 2772
hovered_column$99 = 2804
column$100 = 2836
n$101 = 2868
buf$102 = 2904
open$103 = 2964
cell_count$104 = 2996
cell$105 = 3028
n$106 = 3060
template_n$107 = 3092
item$108 = 3128
sorts_specs$109 = 3160
clipper$110 = 3192
row_n$111 = 3252
item$112 = 3288
contents_type_names$113 = 3320
n$114 = 3396
template_n$115 = 3428
item$116 = 3464
parent_draw_list$117 = 3496
parent_draw_list_draw_cmd_count$118 = 3524
table_scroll_cur$119 = 3560
table_scroll_max$120 = 3592
table_draw_list$121 = 3624
inner_width_to_use$122 = 3652
sorts_specs$123 = 3688
sorts_specs_using_quantity$124 = 3716
clipper$125 = 3752
row_n$126 = 3812
item$127 = 3848
item_is_selected$128 = 3876
label$129 = 3912
selectable_flags$130 = 3972
table_draw_list_draw_cmd_count$131 = 4004
$T132 = 5572
$T133 = 5604
$T134 = 5636
$T135 = 5668
$T136 = 5700
$T137 = 5732
$T138 = 5764
$T139 = 5796
$T140 = 5828
$T141 = 5860
$T142 = 5892
$T143 = 5924
$T144 = 5956
$T145 = 5988
$T146 = 6020
$T147 = 6052
$T148 = 6084
$T149 = 6116
$T150 = 6148
$T151 = 6180
$T152 = 6212
$T153 = 6244
$T154 = 6276
$T155 = 6308
$T156 = 6340
$T157 = 6372
$T158 = 6404
$T159 = 6436
$T160 = 6468
$T161 = 6500
$T162 = 6532
$T163 = 6564
$T164 = 6596
$T165 = 6628
$T166 = 6660
$T167 = 6696
$T168 = 6724
$T169 = 6772
$T170 = 6820
$T171 = 6868
$T172 = 6900
$T173 = 6932
$T174 = 6964
$T175 = 6996
$T176 = 7028
$T177 = 7060
$T178 = 7092
$T179 = 7124
$T180 = 7156
$T181 = 7188
$T182 = 7224
$T183 = 7268
$T184 = 7304
$T185 = 7352
$T186 = 7380
$T187 = 7412
$T188 = 7444
$T189 = 7476
$T190 = 7508
$T191 = 7540
$T192 = 7572
$T193 = 7608
tv3397 = 7620
tv3390 = 7620
tv3306 = 7620
tv3220 = 7620
tv3189 = 7620
tv3153 = 7620
tv3145 = 7620
tv2747 = 7620
tv2608 = 7620
tv2600 = 7620
tv2511 = 7620
tv2330 = 7620
tv2242 = 7620
tv2130 = 7620
tv2084 = 7620
tv1924 = 7620
tv1823 = 7620
tv1781 = 7620
tv1647 = 7620
tv1525 = 7620
tv1427 = 7620
tv1419 = 7620
tv1259 = 7620
tv1161 = 7620
tv1119 = 7620
tv952 = 7620
tv741 = 7620
tv605 = 7620
tv470 = 7620
tv428 = 7620
tv381 = 7620
tv228 = 7620
tv151 = 7620
tv3422 = 7624
tv3209 = 7624
tv3162 = 7624
tv3144 = 7624
tv2708 = 7624
tv2051 = 7624
tv1517 = 7624
tv1491 = 7624
tv1129 = 7624
tv599 = 7624
tv550 = 7624
__$ArrayPad$ = 7632
?dtor$7@?0??ShowDemoWindowTables@@YAXXZ@4HA PROC	; `ShowDemoWindowTables'::`1'::dtor$7
  00111	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00116	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0011b	55		 push	 rbp
  0011c	57		 push	 rdi
  0011d	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00121	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00125	48 8d 8d a8 0e
	00 00		 lea	 rcx, QWORD PTR clipper$125[rbp]
  0012c	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::~ImGuiListClipper
  00131	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00135	5f		 pop	 rdi
  00136	5d		 pop	 rbp
  00137	c3		 ret	 0
?dtor$7@?0??ShowDemoWindowTables@@YAXXZ@4HA ENDP	; `ShowDemoWindowTables'::`1'::dtor$7
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
TEXT_BASE_WIDTH$ = 4
TEXT_BASE_HEIGHT$ = 36
open_action$ = 68
row$20 = 100
column$21 = 132
row$22 = 164
item$23 = 196
row$24 = 228
column$25 = 260
buf$26 = 296
row$27 = 356
column$28 = 388
row$29 = 420
column$30 = 452
row$31 = 484
column$32 = 516
row$33 = 548
column$34 = 580
row$35 = 612
column$36 = 644
row$37 = 676
column$38 = 708
row$39 = 740
column$40 = 772
buf$41 = 808
cell$42 = 868
table_n$43 = 900
row$44 = 932
row$45 = 964
cell$46 = 996
column$47 = 1028
row$48 = 1060
label$49 = 1096
outer_size$50 = 1160
clipper$51 = 1192
row$52 = 1252
column$53 = 1284
outer_size$54 = 1320
row$55 = 1348
column$56 = 1380
cell$57 = 1412
column_count$58 = 1444
column_names$59 = 1480
column$60 = 1524
flags$61 = 1556
outer_size$62 = 1592
column$63 = 1620
column$64 = 1652
indent_step$65 = 1684
row$66 = 1716
column$67 = 1748
row$68 = 1780
column$69 = 1812
row$70 = 1844
column$71 = 1876
rows_height$72 = 1908
row$73 = 1940
min_row_height$74 = 1972
outer_size$75 = 2008
row$76 = 2036
column$77 = 2068
row$78 = 2100
column$79 = 2132
row$80 = 2164
column$81 = 2196
row$82 = 2228
row_bg_color$83 = 2260
column$84 = 2292
cell_bg_color$85 = 2324
row$86 = 2356
COLUMNS_COUNT$87 = 2388
column$88 = 2420
column_name$89 = 2456
row$90 = 2484
column$91 = 2516
buf$92 = 2552
COLUMNS_COUNT$93 = 2612
row$94 = 2644
column$95 = 2676
flags2$96 = 2708
row$97 = 2740
column$98 = 2772
hovered_column$99 = 2804
column$100 = 2836
n$101 = 2868
buf$102 = 2904
open$103 = 2964
cell_count$104 = 2996
cell$105 = 3028
n$106 = 3060
template_n$107 = 3092
item$108 = 3128
sorts_specs$109 = 3160
clipper$110 = 3192
row_n$111 = 3252
item$112 = 3288
contents_type_names$113 = 3320
n$114 = 3396
template_n$115 = 3428
item$116 = 3464
parent_draw_list$117 = 3496
parent_draw_list_draw_cmd_count$118 = 3524
table_scroll_cur$119 = 3560
table_scroll_max$120 = 3592
table_draw_list$121 = 3624
inner_width_to_use$122 = 3652
sorts_specs$123 = 3688
sorts_specs_using_quantity$124 = 3716
clipper$125 = 3752
row_n$126 = 3812
item$127 = 3848
item_is_selected$128 = 3876
label$129 = 3912
selectable_flags$130 = 3972
table_draw_list_draw_cmd_count$131 = 4004
$T132 = 5572
$T133 = 5604
$T134 = 5636
$T135 = 5668
$T136 = 5700
$T137 = 5732
$T138 = 5764
$T139 = 5796
$T140 = 5828
$T141 = 5860
$T142 = 5892
$T143 = 5924
$T144 = 5956
$T145 = 5988
$T146 = 6020
$T147 = 6052
$T148 = 6084
$T149 = 6116
$T150 = 6148
$T151 = 6180
$T152 = 6212
$T153 = 6244
$T154 = 6276
$T155 = 6308
$T156 = 6340
$T157 = 6372
$T158 = 6404
$T159 = 6436
$T160 = 6468
$T161 = 6500
$T162 = 6532
$T163 = 6564
$T164 = 6596
$T165 = 6628
$T166 = 6660
$T167 = 6696
$T168 = 6724
$T169 = 6772
$T170 = 6820
$T171 = 6868
$T172 = 6900
$T173 = 6932
$T174 = 6964
$T175 = 6996
$T176 = 7028
$T177 = 7060
$T178 = 7092
$T179 = 7124
$T180 = 7156
$T181 = 7188
$T182 = 7224
$T183 = 7268
$T184 = 7304
$T185 = 7352
$T186 = 7380
$T187 = 7412
$T188 = 7444
$T189 = 7476
$T190 = 7508
$T191 = 7540
$T192 = 7572
$T193 = 7608
tv3397 = 7620
tv3390 = 7620
tv3306 = 7620
tv3220 = 7620
tv3189 = 7620
tv3153 = 7620
tv3145 = 7620
tv2747 = 7620
tv2608 = 7620
tv2600 = 7620
tv2511 = 7620
tv2330 = 7620
tv2242 = 7620
tv2130 = 7620
tv2084 = 7620
tv1924 = 7620
tv1823 = 7620
tv1781 = 7620
tv1647 = 7620
tv1525 = 7620
tv1427 = 7620
tv1419 = 7620
tv1259 = 7620
tv1161 = 7620
tv1119 = 7620
tv952 = 7620
tv741 = 7620
tv605 = 7620
tv470 = 7620
tv428 = 7620
tv381 = 7620
tv228 = 7620
tv151 = 7620
tv3422 = 7624
tv3209 = 7624
tv3162 = 7624
tv3144 = 7624
tv2708 = 7624
tv2051 = 7624
tv1517 = 7624
tv1491 = 7624
tv1129 = 7624
tv599 = 7624
tv550 = 7624
__$ArrayPad$ = 7632
?dtor$0@?0??ShowDemoWindowTables@@YAXXZ@4HA PROC	; `ShowDemoWindowTables'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?JH@??ShowDemoWindowTables@@YAXXZ@4HA
  0001b	e8 00 00 00 00	 call	 _Init_thread_abort
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??ShowDemoWindowTables@@YAXXZ@4HA ENDP	; `ShowDemoWindowTables'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
TEXT_BASE_WIDTH$ = 4
TEXT_BASE_HEIGHT$ = 36
open_action$ = 68
row$20 = 100
column$21 = 132
row$22 = 164
item$23 = 196
row$24 = 228
column$25 = 260
buf$26 = 296
row$27 = 356
column$28 = 388
row$29 = 420
column$30 = 452
row$31 = 484
column$32 = 516
row$33 = 548
column$34 = 580
row$35 = 612
column$36 = 644
row$37 = 676
column$38 = 708
row$39 = 740
column$40 = 772
buf$41 = 808
cell$42 = 868
table_n$43 = 900
row$44 = 932
row$45 = 964
cell$46 = 996
column$47 = 1028
row$48 = 1060
label$49 = 1096
outer_size$50 = 1160
clipper$51 = 1192
row$52 = 1252
column$53 = 1284
outer_size$54 = 1320
row$55 = 1348
column$56 = 1380
cell$57 = 1412
column_count$58 = 1444
column_names$59 = 1480
column$60 = 1524
flags$61 = 1556
outer_size$62 = 1592
column$63 = 1620
column$64 = 1652
indent_step$65 = 1684
row$66 = 1716
column$67 = 1748
row$68 = 1780
column$69 = 1812
row$70 = 1844
column$71 = 1876
rows_height$72 = 1908
row$73 = 1940
min_row_height$74 = 1972
outer_size$75 = 2008
row$76 = 2036
column$77 = 2068
row$78 = 2100
column$79 = 2132
row$80 = 2164
column$81 = 2196
row$82 = 2228
row_bg_color$83 = 2260
column$84 = 2292
cell_bg_color$85 = 2324
row$86 = 2356
COLUMNS_COUNT$87 = 2388
column$88 = 2420
column_name$89 = 2456
row$90 = 2484
column$91 = 2516
buf$92 = 2552
COLUMNS_COUNT$93 = 2612
row$94 = 2644
column$95 = 2676
flags2$96 = 2708
row$97 = 2740
column$98 = 2772
hovered_column$99 = 2804
column$100 = 2836
n$101 = 2868
buf$102 = 2904
open$103 = 2964
cell_count$104 = 2996
cell$105 = 3028
n$106 = 3060
template_n$107 = 3092
item$108 = 3128
sorts_specs$109 = 3160
clipper$110 = 3192
row_n$111 = 3252
item$112 = 3288
contents_type_names$113 = 3320
n$114 = 3396
template_n$115 = 3428
item$116 = 3464
parent_draw_list$117 = 3496
parent_draw_list_draw_cmd_count$118 = 3524
table_scroll_cur$119 = 3560
table_scroll_max$120 = 3592
table_draw_list$121 = 3624
inner_width_to_use$122 = 3652
sorts_specs$123 = 3688
sorts_specs_using_quantity$124 = 3716
clipper$125 = 3752
row_n$126 = 3812
item$127 = 3848
item_is_selected$128 = 3876
label$129 = 3912
selectable_flags$130 = 3972
table_draw_list_draw_cmd_count$131 = 4004
$T132 = 5572
$T133 = 5604
$T134 = 5636
$T135 = 5668
$T136 = 5700
$T137 = 5732
$T138 = 5764
$T139 = 5796
$T140 = 5828
$T141 = 5860
$T142 = 5892
$T143 = 5924
$T144 = 5956
$T145 = 5988
$T146 = 6020
$T147 = 6052
$T148 = 6084
$T149 = 6116
$T150 = 6148
$T151 = 6180
$T152 = 6212
$T153 = 6244
$T154 = 6276
$T155 = 6308
$T156 = 6340
$T157 = 6372
$T158 = 6404
$T159 = 6436
$T160 = 6468
$T161 = 6500
$T162 = 6532
$T163 = 6564
$T164 = 6596
$T165 = 6628
$T166 = 6660
$T167 = 6696
$T168 = 6724
$T169 = 6772
$T170 = 6820
$T171 = 6868
$T172 = 6900
$T173 = 6932
$T174 = 6964
$T175 = 6996
$T176 = 7028
$T177 = 7060
$T178 = 7092
$T179 = 7124
$T180 = 7156
$T181 = 7188
$T182 = 7224
$T183 = 7268
$T184 = 7304
$T185 = 7352
$T186 = 7380
$T187 = 7412
$T188 = 7444
$T189 = 7476
$T190 = 7508
$T191 = 7540
$T192 = 7572
$T193 = 7608
tv3397 = 7620
tv3390 = 7620
tv3306 = 7620
tv3220 = 7620
tv3189 = 7620
tv3153 = 7620
tv3145 = 7620
tv2747 = 7620
tv2608 = 7620
tv2600 = 7620
tv2511 = 7620
tv2330 = 7620
tv2242 = 7620
tv2130 = 7620
tv2084 = 7620
tv1924 = 7620
tv1823 = 7620
tv1781 = 7620
tv1647 = 7620
tv1525 = 7620
tv1427 = 7620
tv1419 = 7620
tv1259 = 7620
tv1161 = 7620
tv1119 = 7620
tv952 = 7620
tv741 = 7620
tv605 = 7620
tv470 = 7620
tv428 = 7620
tv381 = 7620
tv228 = 7620
tv151 = 7620
tv3422 = 7624
tv3209 = 7624
tv3162 = 7624
tv3144 = 7624
tv2708 = 7624
tv2051 = 7624
tv1517 = 7624
tv1491 = 7624
tv1129 = 7624
tv599 = 7624
tv550 = 7624
__$ArrayPad$ = 7632
?dtor$1@?0??ShowDemoWindowTables@@YAXXZ@4HA PROC	; `ShowDemoWindowTables'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0003b	48 8d 8d a8 04
	00 00		 lea	 rcx, QWORD PTR clipper$51[rbp]
  00042	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::~ImGuiListClipper
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?dtor$1@?0??ShowDemoWindowTables@@YAXXZ@4HA ENDP	; `ShowDemoWindowTables'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
TEXT_BASE_WIDTH$ = 4
TEXT_BASE_HEIGHT$ = 36
open_action$ = 68
row$20 = 100
column$21 = 132
row$22 = 164
item$23 = 196
row$24 = 228
column$25 = 260
buf$26 = 296
row$27 = 356
column$28 = 388
row$29 = 420
column$30 = 452
row$31 = 484
column$32 = 516
row$33 = 548
column$34 = 580
row$35 = 612
column$36 = 644
row$37 = 676
column$38 = 708
row$39 = 740
column$40 = 772
buf$41 = 808
cell$42 = 868
table_n$43 = 900
row$44 = 932
row$45 = 964
cell$46 = 996
column$47 = 1028
row$48 = 1060
label$49 = 1096
outer_size$50 = 1160
clipper$51 = 1192
row$52 = 1252
column$53 = 1284
outer_size$54 = 1320
row$55 = 1348
column$56 = 1380
cell$57 = 1412
column_count$58 = 1444
column_names$59 = 1480
column$60 = 1524
flags$61 = 1556
outer_size$62 = 1592
column$63 = 1620
column$64 = 1652
indent_step$65 = 1684
row$66 = 1716
column$67 = 1748
row$68 = 1780
column$69 = 1812
row$70 = 1844
column$71 = 1876
rows_height$72 = 1908
row$73 = 1940
min_row_height$74 = 1972
outer_size$75 = 2008
row$76 = 2036
column$77 = 2068
row$78 = 2100
column$79 = 2132
row$80 = 2164
column$81 = 2196
row$82 = 2228
row_bg_color$83 = 2260
column$84 = 2292
cell_bg_color$85 = 2324
row$86 = 2356
COLUMNS_COUNT$87 = 2388
column$88 = 2420
column_name$89 = 2456
row$90 = 2484
column$91 = 2516
buf$92 = 2552
COLUMNS_COUNT$93 = 2612
row$94 = 2644
column$95 = 2676
flags2$96 = 2708
row$97 = 2740
column$98 = 2772
hovered_column$99 = 2804
column$100 = 2836
n$101 = 2868
buf$102 = 2904
open$103 = 2964
cell_count$104 = 2996
cell$105 = 3028
n$106 = 3060
template_n$107 = 3092
item$108 = 3128
sorts_specs$109 = 3160
clipper$110 = 3192
row_n$111 = 3252
item$112 = 3288
contents_type_names$113 = 3320
n$114 = 3396
template_n$115 = 3428
item$116 = 3464
parent_draw_list$117 = 3496
parent_draw_list_draw_cmd_count$118 = 3524
table_scroll_cur$119 = 3560
table_scroll_max$120 = 3592
table_draw_list$121 = 3624
inner_width_to_use$122 = 3652
sorts_specs$123 = 3688
sorts_specs_using_quantity$124 = 3716
clipper$125 = 3752
row_n$126 = 3812
item$127 = 3848
item_is_selected$128 = 3876
label$129 = 3912
selectable_flags$130 = 3972
table_draw_list_draw_cmd_count$131 = 4004
$T132 = 5572
$T133 = 5604
$T134 = 5636
$T135 = 5668
$T136 = 5700
$T137 = 5732
$T138 = 5764
$T139 = 5796
$T140 = 5828
$T141 = 5860
$T142 = 5892
$T143 = 5924
$T144 = 5956
$T145 = 5988
$T146 = 6020
$T147 = 6052
$T148 = 6084
$T149 = 6116
$T150 = 6148
$T151 = 6180
$T152 = 6212
$T153 = 6244
$T154 = 6276
$T155 = 6308
$T156 = 6340
$T157 = 6372
$T158 = 6404
$T159 = 6436
$T160 = 6468
$T161 = 6500
$T162 = 6532
$T163 = 6564
$T164 = 6596
$T165 = 6628
$T166 = 6660
$T167 = 6696
$T168 = 6724
$T169 = 6772
$T170 = 6820
$T171 = 6868
$T172 = 6900
$T173 = 6932
$T174 = 6964
$T175 = 6996
$T176 = 7028
$T177 = 7060
$T178 = 7092
$T179 = 7124
$T180 = 7156
$T181 = 7188
$T182 = 7224
$T183 = 7268
$T184 = 7304
$T185 = 7352
$T186 = 7380
$T187 = 7412
$T188 = 7444
$T189 = 7476
$T190 = 7508
$T191 = 7540
$T192 = 7572
$T193 = 7608
tv3397 = 7620
tv3390 = 7620
tv3306 = 7620
tv3220 = 7620
tv3189 = 7620
tv3153 = 7620
tv3145 = 7620
tv2747 = 7620
tv2608 = 7620
tv2600 = 7620
tv2511 = 7620
tv2330 = 7620
tv2242 = 7620
tv2130 = 7620
tv2084 = 7620
tv1924 = 7620
tv1823 = 7620
tv1781 = 7620
tv1647 = 7620
tv1525 = 7620
tv1427 = 7620
tv1419 = 7620
tv1259 = 7620
tv1161 = 7620
tv1119 = 7620
tv952 = 7620
tv741 = 7620
tv605 = 7620
tv470 = 7620
tv428 = 7620
tv381 = 7620
tv228 = 7620
tv151 = 7620
tv3422 = 7624
tv3209 = 7624
tv3162 = 7624
tv3144 = 7624
tv2708 = 7624
tv2051 = 7624
tv1517 = 7624
tv1491 = 7624
tv1129 = 7624
tv599 = 7624
tv550 = 7624
__$ArrayPad$ = 7632
?dtor$2@?0??ShowDemoWindowTables@@YAXXZ@4HA PROC	; `ShowDemoWindowTables'::`1'::dtor$2
  0004e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00053	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00058	55		 push	 rbp
  00059	57		 push	 rdi
  0005a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005e	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?BPE@??ShowDemoWindowTables@@YAXXZ@4HA
  00069	e8 00 00 00 00	 call	 _Init_thread_abort
  0006e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
?dtor$2@?0??ShowDemoWindowTables@@YAXXZ@4HA ENDP	; `ShowDemoWindowTables'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
TEXT_BASE_WIDTH$ = 4
TEXT_BASE_HEIGHT$ = 36
open_action$ = 68
row$20 = 100
column$21 = 132
row$22 = 164
item$23 = 196
row$24 = 228
column$25 = 260
buf$26 = 296
row$27 = 356
column$28 = 388
row$29 = 420
column$30 = 452
row$31 = 484
column$32 = 516
row$33 = 548
column$34 = 580
row$35 = 612
column$36 = 644
row$37 = 676
column$38 = 708
row$39 = 740
column$40 = 772
buf$41 = 808
cell$42 = 868
table_n$43 = 900
row$44 = 932
row$45 = 964
cell$46 = 996
column$47 = 1028
row$48 = 1060
label$49 = 1096
outer_size$50 = 1160
clipper$51 = 1192
row$52 = 1252
column$53 = 1284
outer_size$54 = 1320
row$55 = 1348
column$56 = 1380
cell$57 = 1412
column_count$58 = 1444
column_names$59 = 1480
column$60 = 1524
flags$61 = 1556
outer_size$62 = 1592
column$63 = 1620
column$64 = 1652
indent_step$65 = 1684
row$66 = 1716
column$67 = 1748
row$68 = 1780
column$69 = 1812
row$70 = 1844
column$71 = 1876
rows_height$72 = 1908
row$73 = 1940
min_row_height$74 = 1972
outer_size$75 = 2008
row$76 = 2036
column$77 = 2068
row$78 = 2100
column$79 = 2132
row$80 = 2164
column$81 = 2196
row$82 = 2228
row_bg_color$83 = 2260
column$84 = 2292
cell_bg_color$85 = 2324
row$86 = 2356
COLUMNS_COUNT$87 = 2388
column$88 = 2420
column_name$89 = 2456
row$90 = 2484
column$91 = 2516
buf$92 = 2552
COLUMNS_COUNT$93 = 2612
row$94 = 2644
column$95 = 2676
flags2$96 = 2708
row$97 = 2740
column$98 = 2772
hovered_column$99 = 2804
column$100 = 2836
n$101 = 2868
buf$102 = 2904
open$103 = 2964
cell_count$104 = 2996
cell$105 = 3028
n$106 = 3060
template_n$107 = 3092
item$108 = 3128
sorts_specs$109 = 3160
clipper$110 = 3192
row_n$111 = 3252
item$112 = 3288
contents_type_names$113 = 3320
n$114 = 3396
template_n$115 = 3428
item$116 = 3464
parent_draw_list$117 = 3496
parent_draw_list_draw_cmd_count$118 = 3524
table_scroll_cur$119 = 3560
table_scroll_max$120 = 3592
table_draw_list$121 = 3624
inner_width_to_use$122 = 3652
sorts_specs$123 = 3688
sorts_specs_using_quantity$124 = 3716
clipper$125 = 3752
row_n$126 = 3812
item$127 = 3848
item_is_selected$128 = 3876
label$129 = 3912
selectable_flags$130 = 3972
table_draw_list_draw_cmd_count$131 = 4004
$T132 = 5572
$T133 = 5604
$T134 = 5636
$T135 = 5668
$T136 = 5700
$T137 = 5732
$T138 = 5764
$T139 = 5796
$T140 = 5828
$T141 = 5860
$T142 = 5892
$T143 = 5924
$T144 = 5956
$T145 = 5988
$T146 = 6020
$T147 = 6052
$T148 = 6084
$T149 = 6116
$T150 = 6148
$T151 = 6180
$T152 = 6212
$T153 = 6244
$T154 = 6276
$T155 = 6308
$T156 = 6340
$T157 = 6372
$T158 = 6404
$T159 = 6436
$T160 = 6468
$T161 = 6500
$T162 = 6532
$T163 = 6564
$T164 = 6596
$T165 = 6628
$T166 = 6660
$T167 = 6696
$T168 = 6724
$T169 = 6772
$T170 = 6820
$T171 = 6868
$T172 = 6900
$T173 = 6932
$T174 = 6964
$T175 = 6996
$T176 = 7028
$T177 = 7060
$T178 = 7092
$T179 = 7124
$T180 = 7156
$T181 = 7188
$T182 = 7224
$T183 = 7268
$T184 = 7304
$T185 = 7352
$T186 = 7380
$T187 = 7412
$T188 = 7444
$T189 = 7476
$T190 = 7508
$T191 = 7540
$T192 = 7572
$T193 = 7608
tv3397 = 7620
tv3390 = 7620
tv3306 = 7620
tv3220 = 7620
tv3189 = 7620
tv3153 = 7620
tv3145 = 7620
tv2747 = 7620
tv2608 = 7620
tv2600 = 7620
tv2511 = 7620
tv2330 = 7620
tv2242 = 7620
tv2130 = 7620
tv2084 = 7620
tv1924 = 7620
tv1823 = 7620
tv1781 = 7620
tv1647 = 7620
tv1525 = 7620
tv1427 = 7620
tv1419 = 7620
tv1259 = 7620
tv1161 = 7620
tv1119 = 7620
tv952 = 7620
tv741 = 7620
tv605 = 7620
tv470 = 7620
tv428 = 7620
tv381 = 7620
tv228 = 7620
tv151 = 7620
tv3422 = 7624
tv3209 = 7624
tv3162 = 7624
tv3144 = 7624
tv2708 = 7624
tv2051 = 7624
tv1517 = 7624
tv1491 = 7624
tv1129 = 7624
tv599 = 7624
tv550 = 7624
__$ArrayPad$ = 7632
?dtor$3@?0??ShowDemoWindowTables@@YAXXZ@4HA PROC	; `ShowDemoWindowTables'::`1'::dtor$3
  00075	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0007a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0007f	55		 push	 rbp
  00080	57		 push	 rdi
  00081	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00085	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00089	48 8d 8d 78 0c
	00 00		 lea	 rcx, QWORD PTR clipper$110[rbp]
  00090	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::~ImGuiListClipper
  00095	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00099	5f		 pop	 rdi
  0009a	5d		 pop	 rbp
  0009b	c3		 ret	 0
?dtor$3@?0??ShowDemoWindowTables@@YAXXZ@4HA ENDP	; `ShowDemoWindowTables'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
TEXT_BASE_WIDTH$ = 4
TEXT_BASE_HEIGHT$ = 36
open_action$ = 68
row$20 = 100
column$21 = 132
row$22 = 164
item$23 = 196
row$24 = 228
column$25 = 260
buf$26 = 296
row$27 = 356
column$28 = 388
row$29 = 420
column$30 = 452
row$31 = 484
column$32 = 516
row$33 = 548
column$34 = 580
row$35 = 612
column$36 = 644
row$37 = 676
column$38 = 708
row$39 = 740
column$40 = 772
buf$41 = 808
cell$42 = 868
table_n$43 = 900
row$44 = 932
row$45 = 964
cell$46 = 996
column$47 = 1028
row$48 = 1060
label$49 = 1096
outer_size$50 = 1160
clipper$51 = 1192
row$52 = 1252
column$53 = 1284
outer_size$54 = 1320
row$55 = 1348
column$56 = 1380
cell$57 = 1412
column_count$58 = 1444
column_names$59 = 1480
column$60 = 1524
flags$61 = 1556
outer_size$62 = 1592
column$63 = 1620
column$64 = 1652
indent_step$65 = 1684
row$66 = 1716
column$67 = 1748
row$68 = 1780
column$69 = 1812
row$70 = 1844
column$71 = 1876
rows_height$72 = 1908
row$73 = 1940
min_row_height$74 = 1972
outer_size$75 = 2008
row$76 = 2036
column$77 = 2068
row$78 = 2100
column$79 = 2132
row$80 = 2164
column$81 = 2196
row$82 = 2228
row_bg_color$83 = 2260
column$84 = 2292
cell_bg_color$85 = 2324
row$86 = 2356
COLUMNS_COUNT$87 = 2388
column$88 = 2420
column_name$89 = 2456
row$90 = 2484
column$91 = 2516
buf$92 = 2552
COLUMNS_COUNT$93 = 2612
row$94 = 2644
column$95 = 2676
flags2$96 = 2708
row$97 = 2740
column$98 = 2772
hovered_column$99 = 2804
column$100 = 2836
n$101 = 2868
buf$102 = 2904
open$103 = 2964
cell_count$104 = 2996
cell$105 = 3028
n$106 = 3060
template_n$107 = 3092
item$108 = 3128
sorts_specs$109 = 3160
clipper$110 = 3192
row_n$111 = 3252
item$112 = 3288
contents_type_names$113 = 3320
n$114 = 3396
template_n$115 = 3428
item$116 = 3464
parent_draw_list$117 = 3496
parent_draw_list_draw_cmd_count$118 = 3524
table_scroll_cur$119 = 3560
table_scroll_max$120 = 3592
table_draw_list$121 = 3624
inner_width_to_use$122 = 3652
sorts_specs$123 = 3688
sorts_specs_using_quantity$124 = 3716
clipper$125 = 3752
row_n$126 = 3812
item$127 = 3848
item_is_selected$128 = 3876
label$129 = 3912
selectable_flags$130 = 3972
table_draw_list_draw_cmd_count$131 = 4004
$T132 = 5572
$T133 = 5604
$T134 = 5636
$T135 = 5668
$T136 = 5700
$T137 = 5732
$T138 = 5764
$T139 = 5796
$T140 = 5828
$T141 = 5860
$T142 = 5892
$T143 = 5924
$T144 = 5956
$T145 = 5988
$T146 = 6020
$T147 = 6052
$T148 = 6084
$T149 = 6116
$T150 = 6148
$T151 = 6180
$T152 = 6212
$T153 = 6244
$T154 = 6276
$T155 = 6308
$T156 = 6340
$T157 = 6372
$T158 = 6404
$T159 = 6436
$T160 = 6468
$T161 = 6500
$T162 = 6532
$T163 = 6564
$T164 = 6596
$T165 = 6628
$T166 = 6660
$T167 = 6696
$T168 = 6724
$T169 = 6772
$T170 = 6820
$T171 = 6868
$T172 = 6900
$T173 = 6932
$T174 = 6964
$T175 = 6996
$T176 = 7028
$T177 = 7060
$T178 = 7092
$T179 = 7124
$T180 = 7156
$T181 = 7188
$T182 = 7224
$T183 = 7268
$T184 = 7304
$T185 = 7352
$T186 = 7380
$T187 = 7412
$T188 = 7444
$T189 = 7476
$T190 = 7508
$T191 = 7540
$T192 = 7572
$T193 = 7608
tv3397 = 7620
tv3390 = 7620
tv3306 = 7620
tv3220 = 7620
tv3189 = 7620
tv3153 = 7620
tv3145 = 7620
tv2747 = 7620
tv2608 = 7620
tv2600 = 7620
tv2511 = 7620
tv2330 = 7620
tv2242 = 7620
tv2130 = 7620
tv2084 = 7620
tv1924 = 7620
tv1823 = 7620
tv1781 = 7620
tv1647 = 7620
tv1525 = 7620
tv1427 = 7620
tv1419 = 7620
tv1259 = 7620
tv1161 = 7620
tv1119 = 7620
tv952 = 7620
tv741 = 7620
tv605 = 7620
tv470 = 7620
tv428 = 7620
tv381 = 7620
tv228 = 7620
tv151 = 7620
tv3422 = 7624
tv3209 = 7624
tv3162 = 7624
tv3144 = 7624
tv2708 = 7624
tv2051 = 7624
tv1517 = 7624
tv1491 = 7624
tv1129 = 7624
tv599 = 7624
tv550 = 7624
__$ArrayPad$ = 7632
?dtor$4@?0??ShowDemoWindowTables@@YAXXZ@4HA PROC	; `ShowDemoWindowTables'::`1'::dtor$4
  0009c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000a1	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000a6	55		 push	 rbp
  000a7	57		 push	 rdi
  000a8	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000ac	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS2@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  000b7	e8 00 00 00 00	 call	 _Init_thread_abort
  000bc	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000c0	5f		 pop	 rdi
  000c1	5d		 pop	 rbp
  000c2	c3		 ret	 0
?dtor$4@?0??ShowDemoWindowTables@@YAXXZ@4HA ENDP	; `ShowDemoWindowTables'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
TEXT_BASE_WIDTH$ = 4
TEXT_BASE_HEIGHT$ = 36
open_action$ = 68
row$20 = 100
column$21 = 132
row$22 = 164
item$23 = 196
row$24 = 228
column$25 = 260
buf$26 = 296
row$27 = 356
column$28 = 388
row$29 = 420
column$30 = 452
row$31 = 484
column$32 = 516
row$33 = 548
column$34 = 580
row$35 = 612
column$36 = 644
row$37 = 676
column$38 = 708
row$39 = 740
column$40 = 772
buf$41 = 808
cell$42 = 868
table_n$43 = 900
row$44 = 932
row$45 = 964
cell$46 = 996
column$47 = 1028
row$48 = 1060
label$49 = 1096
outer_size$50 = 1160
clipper$51 = 1192
row$52 = 1252
column$53 = 1284
outer_size$54 = 1320
row$55 = 1348
column$56 = 1380
cell$57 = 1412
column_count$58 = 1444
column_names$59 = 1480
column$60 = 1524
flags$61 = 1556
outer_size$62 = 1592
column$63 = 1620
column$64 = 1652
indent_step$65 = 1684
row$66 = 1716
column$67 = 1748
row$68 = 1780
column$69 = 1812
row$70 = 1844
column$71 = 1876
rows_height$72 = 1908
row$73 = 1940
min_row_height$74 = 1972
outer_size$75 = 2008
row$76 = 2036
column$77 = 2068
row$78 = 2100
column$79 = 2132
row$80 = 2164
column$81 = 2196
row$82 = 2228
row_bg_color$83 = 2260
column$84 = 2292
cell_bg_color$85 = 2324
row$86 = 2356
COLUMNS_COUNT$87 = 2388
column$88 = 2420
column_name$89 = 2456
row$90 = 2484
column$91 = 2516
buf$92 = 2552
COLUMNS_COUNT$93 = 2612
row$94 = 2644
column$95 = 2676
flags2$96 = 2708
row$97 = 2740
column$98 = 2772
hovered_column$99 = 2804
column$100 = 2836
n$101 = 2868
buf$102 = 2904
open$103 = 2964
cell_count$104 = 2996
cell$105 = 3028
n$106 = 3060
template_n$107 = 3092
item$108 = 3128
sorts_specs$109 = 3160
clipper$110 = 3192
row_n$111 = 3252
item$112 = 3288
contents_type_names$113 = 3320
n$114 = 3396
template_n$115 = 3428
item$116 = 3464
parent_draw_list$117 = 3496
parent_draw_list_draw_cmd_count$118 = 3524
table_scroll_cur$119 = 3560
table_scroll_max$120 = 3592
table_draw_list$121 = 3624
inner_width_to_use$122 = 3652
sorts_specs$123 = 3688
sorts_specs_using_quantity$124 = 3716
clipper$125 = 3752
row_n$126 = 3812
item$127 = 3848
item_is_selected$128 = 3876
label$129 = 3912
selectable_flags$130 = 3972
table_draw_list_draw_cmd_count$131 = 4004
$T132 = 5572
$T133 = 5604
$T134 = 5636
$T135 = 5668
$T136 = 5700
$T137 = 5732
$T138 = 5764
$T139 = 5796
$T140 = 5828
$T141 = 5860
$T142 = 5892
$T143 = 5924
$T144 = 5956
$T145 = 5988
$T146 = 6020
$T147 = 6052
$T148 = 6084
$T149 = 6116
$T150 = 6148
$T151 = 6180
$T152 = 6212
$T153 = 6244
$T154 = 6276
$T155 = 6308
$T156 = 6340
$T157 = 6372
$T158 = 6404
$T159 = 6436
$T160 = 6468
$T161 = 6500
$T162 = 6532
$T163 = 6564
$T164 = 6596
$T165 = 6628
$T166 = 6660
$T167 = 6696
$T168 = 6724
$T169 = 6772
$T170 = 6820
$T171 = 6868
$T172 = 6900
$T173 = 6932
$T174 = 6964
$T175 = 6996
$T176 = 7028
$T177 = 7060
$T178 = 7092
$T179 = 7124
$T180 = 7156
$T181 = 7188
$T182 = 7224
$T183 = 7268
$T184 = 7304
$T185 = 7352
$T186 = 7380
$T187 = 7412
$T188 = 7444
$T189 = 7476
$T190 = 7508
$T191 = 7540
$T192 = 7572
$T193 = 7608
tv3397 = 7620
tv3390 = 7620
tv3306 = 7620
tv3220 = 7620
tv3189 = 7620
tv3153 = 7620
tv3145 = 7620
tv2747 = 7620
tv2608 = 7620
tv2600 = 7620
tv2511 = 7620
tv2330 = 7620
tv2242 = 7620
tv2130 = 7620
tv2084 = 7620
tv1924 = 7620
tv1823 = 7620
tv1781 = 7620
tv1647 = 7620
tv1525 = 7620
tv1427 = 7620
tv1419 = 7620
tv1259 = 7620
tv1161 = 7620
tv1119 = 7620
tv952 = 7620
tv741 = 7620
tv605 = 7620
tv470 = 7620
tv428 = 7620
tv381 = 7620
tv228 = 7620
tv151 = 7620
tv3422 = 7624
tv3209 = 7624
tv3162 = 7624
tv3144 = 7624
tv2708 = 7624
tv2051 = 7624
tv1517 = 7624
tv1491 = 7624
tv1129 = 7624
tv599 = 7624
tv550 = 7624
__$ArrayPad$ = 7632
?dtor$5@?0??ShowDemoWindowTables@@YAXXZ@4HA PROC	; `ShowDemoWindowTables'::`1'::dtor$5
  000c3	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000c8	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000cd	55		 push	 rbp
  000ce	57		 push	 rdi
  000cf	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000d3	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  000d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS3@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  000de	e8 00 00 00 00	 call	 _Init_thread_abort
  000e3	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e7	5f		 pop	 rdi
  000e8	5d		 pop	 rbp
  000e9	c3		 ret	 0
?dtor$5@?0??ShowDemoWindowTables@@YAXXZ@4HA ENDP	; `ShowDemoWindowTables'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
TEXT_BASE_WIDTH$ = 4
TEXT_BASE_HEIGHT$ = 36
open_action$ = 68
row$20 = 100
column$21 = 132
row$22 = 164
item$23 = 196
row$24 = 228
column$25 = 260
buf$26 = 296
row$27 = 356
column$28 = 388
row$29 = 420
column$30 = 452
row$31 = 484
column$32 = 516
row$33 = 548
column$34 = 580
row$35 = 612
column$36 = 644
row$37 = 676
column$38 = 708
row$39 = 740
column$40 = 772
buf$41 = 808
cell$42 = 868
table_n$43 = 900
row$44 = 932
row$45 = 964
cell$46 = 996
column$47 = 1028
row$48 = 1060
label$49 = 1096
outer_size$50 = 1160
clipper$51 = 1192
row$52 = 1252
column$53 = 1284
outer_size$54 = 1320
row$55 = 1348
column$56 = 1380
cell$57 = 1412
column_count$58 = 1444
column_names$59 = 1480
column$60 = 1524
flags$61 = 1556
outer_size$62 = 1592
column$63 = 1620
column$64 = 1652
indent_step$65 = 1684
row$66 = 1716
column$67 = 1748
row$68 = 1780
column$69 = 1812
row$70 = 1844
column$71 = 1876
rows_height$72 = 1908
row$73 = 1940
min_row_height$74 = 1972
outer_size$75 = 2008
row$76 = 2036
column$77 = 2068
row$78 = 2100
column$79 = 2132
row$80 = 2164
column$81 = 2196
row$82 = 2228
row_bg_color$83 = 2260
column$84 = 2292
cell_bg_color$85 = 2324
row$86 = 2356
COLUMNS_COUNT$87 = 2388
column$88 = 2420
column_name$89 = 2456
row$90 = 2484
column$91 = 2516
buf$92 = 2552
COLUMNS_COUNT$93 = 2612
row$94 = 2644
column$95 = 2676
flags2$96 = 2708
row$97 = 2740
column$98 = 2772
hovered_column$99 = 2804
column$100 = 2836
n$101 = 2868
buf$102 = 2904
open$103 = 2964
cell_count$104 = 2996
cell$105 = 3028
n$106 = 3060
template_n$107 = 3092
item$108 = 3128
sorts_specs$109 = 3160
clipper$110 = 3192
row_n$111 = 3252
item$112 = 3288
contents_type_names$113 = 3320
n$114 = 3396
template_n$115 = 3428
item$116 = 3464
parent_draw_list$117 = 3496
parent_draw_list_draw_cmd_count$118 = 3524
table_scroll_cur$119 = 3560
table_scroll_max$120 = 3592
table_draw_list$121 = 3624
inner_width_to_use$122 = 3652
sorts_specs$123 = 3688
sorts_specs_using_quantity$124 = 3716
clipper$125 = 3752
row_n$126 = 3812
item$127 = 3848
item_is_selected$128 = 3876
label$129 = 3912
selectable_flags$130 = 3972
table_draw_list_draw_cmd_count$131 = 4004
$T132 = 5572
$T133 = 5604
$T134 = 5636
$T135 = 5668
$T136 = 5700
$T137 = 5732
$T138 = 5764
$T139 = 5796
$T140 = 5828
$T141 = 5860
$T142 = 5892
$T143 = 5924
$T144 = 5956
$T145 = 5988
$T146 = 6020
$T147 = 6052
$T148 = 6084
$T149 = 6116
$T150 = 6148
$T151 = 6180
$T152 = 6212
$T153 = 6244
$T154 = 6276
$T155 = 6308
$T156 = 6340
$T157 = 6372
$T158 = 6404
$T159 = 6436
$T160 = 6468
$T161 = 6500
$T162 = 6532
$T163 = 6564
$T164 = 6596
$T165 = 6628
$T166 = 6660
$T167 = 6696
$T168 = 6724
$T169 = 6772
$T170 = 6820
$T171 = 6868
$T172 = 6900
$T173 = 6932
$T174 = 6964
$T175 = 6996
$T176 = 7028
$T177 = 7060
$T178 = 7092
$T179 = 7124
$T180 = 7156
$T181 = 7188
$T182 = 7224
$T183 = 7268
$T184 = 7304
$T185 = 7352
$T186 = 7380
$T187 = 7412
$T188 = 7444
$T189 = 7476
$T190 = 7508
$T191 = 7540
$T192 = 7572
$T193 = 7608
tv3397 = 7620
tv3390 = 7620
tv3306 = 7620
tv3220 = 7620
tv3189 = 7620
tv3153 = 7620
tv3145 = 7620
tv2747 = 7620
tv2608 = 7620
tv2600 = 7620
tv2511 = 7620
tv2330 = 7620
tv2242 = 7620
tv2130 = 7620
tv2084 = 7620
tv1924 = 7620
tv1823 = 7620
tv1781 = 7620
tv1647 = 7620
tv1525 = 7620
tv1427 = 7620
tv1419 = 7620
tv1259 = 7620
tv1161 = 7620
tv1119 = 7620
tv952 = 7620
tv741 = 7620
tv605 = 7620
tv470 = 7620
tv428 = 7620
tv381 = 7620
tv228 = 7620
tv151 = 7620
tv3422 = 7624
tv3209 = 7624
tv3162 = 7624
tv3144 = 7624
tv2708 = 7624
tv2051 = 7624
tv1517 = 7624
tv1491 = 7624
tv1129 = 7624
tv599 = 7624
tv550 = 7624
__$ArrayPad$ = 7632
?dtor$6@?0??ShowDemoWindowTables@@YAXXZ@4HA PROC	; `ShowDemoWindowTables'::`1'::dtor$6
  000ea	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000ef	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000f4	55		 push	 rbp
  000f5	57		 push	 rdi
  000f6	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000fa	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  000fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS4@?CAP@??ShowDemoWindowTables@@YAXXZ@4HA
  00105	e8 00 00 00 00	 call	 _Init_thread_abort
  0010a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0010e	5f		 pop	 rdi
  0010f	5d		 pop	 rbp
  00110	c3		 ret	 0
?dtor$6@?0??ShowDemoWindowTables@@YAXXZ@4HA ENDP	; `ShowDemoWindowTables'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
TEXT_BASE_WIDTH$ = 4
TEXT_BASE_HEIGHT$ = 36
open_action$ = 68
row$20 = 100
column$21 = 132
row$22 = 164
item$23 = 196
row$24 = 228
column$25 = 260
buf$26 = 296
row$27 = 356
column$28 = 388
row$29 = 420
column$30 = 452
row$31 = 484
column$32 = 516
row$33 = 548
column$34 = 580
row$35 = 612
column$36 = 644
row$37 = 676
column$38 = 708
row$39 = 740
column$40 = 772
buf$41 = 808
cell$42 = 868
table_n$43 = 900
row$44 = 932
row$45 = 964
cell$46 = 996
column$47 = 1028
row$48 = 1060
label$49 = 1096
outer_size$50 = 1160
clipper$51 = 1192
row$52 = 1252
column$53 = 1284
outer_size$54 = 1320
row$55 = 1348
column$56 = 1380
cell$57 = 1412
column_count$58 = 1444
column_names$59 = 1480
column$60 = 1524
flags$61 = 1556
outer_size$62 = 1592
column$63 = 1620
column$64 = 1652
indent_step$65 = 1684
row$66 = 1716
column$67 = 1748
row$68 = 1780
column$69 = 1812
row$70 = 1844
column$71 = 1876
rows_height$72 = 1908
row$73 = 1940
min_row_height$74 = 1972
outer_size$75 = 2008
row$76 = 2036
column$77 = 2068
row$78 = 2100
column$79 = 2132
row$80 = 2164
column$81 = 2196
row$82 = 2228
row_bg_color$83 = 2260
column$84 = 2292
cell_bg_color$85 = 2324
row$86 = 2356
COLUMNS_COUNT$87 = 2388
column$88 = 2420
column_name$89 = 2456
row$90 = 2484
column$91 = 2516
buf$92 = 2552
COLUMNS_COUNT$93 = 2612
row$94 = 2644
column$95 = 2676
flags2$96 = 2708
row$97 = 2740
column$98 = 2772
hovered_column$99 = 2804
column$100 = 2836
n$101 = 2868
buf$102 = 2904
open$103 = 2964
cell_count$104 = 2996
cell$105 = 3028
n$106 = 3060
template_n$107 = 3092
item$108 = 3128
sorts_specs$109 = 3160
clipper$110 = 3192
row_n$111 = 3252
item$112 = 3288
contents_type_names$113 = 3320
n$114 = 3396
template_n$115 = 3428
item$116 = 3464
parent_draw_list$117 = 3496
parent_draw_list_draw_cmd_count$118 = 3524
table_scroll_cur$119 = 3560
table_scroll_max$120 = 3592
table_draw_list$121 = 3624
inner_width_to_use$122 = 3652
sorts_specs$123 = 3688
sorts_specs_using_quantity$124 = 3716
clipper$125 = 3752
row_n$126 = 3812
item$127 = 3848
item_is_selected$128 = 3876
label$129 = 3912
selectable_flags$130 = 3972
table_draw_list_draw_cmd_count$131 = 4004
$T132 = 5572
$T133 = 5604
$T134 = 5636
$T135 = 5668
$T136 = 5700
$T137 = 5732
$T138 = 5764
$T139 = 5796
$T140 = 5828
$T141 = 5860
$T142 = 5892
$T143 = 5924
$T144 = 5956
$T145 = 5988
$T146 = 6020
$T147 = 6052
$T148 = 6084
$T149 = 6116
$T150 = 6148
$T151 = 6180
$T152 = 6212
$T153 = 6244
$T154 = 6276
$T155 = 6308
$T156 = 6340
$T157 = 6372
$T158 = 6404
$T159 = 6436
$T160 = 6468
$T161 = 6500
$T162 = 6532
$T163 = 6564
$T164 = 6596
$T165 = 6628
$T166 = 6660
$T167 = 6696
$T168 = 6724
$T169 = 6772
$T170 = 6820
$T171 = 6868
$T172 = 6900
$T173 = 6932
$T174 = 6964
$T175 = 6996
$T176 = 7028
$T177 = 7060
$T178 = 7092
$T179 = 7124
$T180 = 7156
$T181 = 7188
$T182 = 7224
$T183 = 7268
$T184 = 7304
$T185 = 7352
$T186 = 7380
$T187 = 7412
$T188 = 7444
$T189 = 7476
$T190 = 7508
$T191 = 7540
$T192 = 7572
$T193 = 7608
tv3397 = 7620
tv3390 = 7620
tv3306 = 7620
tv3220 = 7620
tv3189 = 7620
tv3153 = 7620
tv3145 = 7620
tv2747 = 7620
tv2608 = 7620
tv2600 = 7620
tv2511 = 7620
tv2330 = 7620
tv2242 = 7620
tv2130 = 7620
tv2084 = 7620
tv1924 = 7620
tv1823 = 7620
tv1781 = 7620
tv1647 = 7620
tv1525 = 7620
tv1427 = 7620
tv1419 = 7620
tv1259 = 7620
tv1161 = 7620
tv1119 = 7620
tv952 = 7620
tv741 = 7620
tv605 = 7620
tv470 = 7620
tv428 = 7620
tv381 = 7620
tv228 = 7620
tv151 = 7620
tv3422 = 7624
tv3209 = 7624
tv3162 = 7624
tv3144 = 7624
tv2708 = 7624
tv2051 = 7624
tv1517 = 7624
tv1491 = 7624
tv1129 = 7624
tv599 = 7624
tv550 = 7624
__$ArrayPad$ = 7632
?dtor$7@?0??ShowDemoWindowTables@@YAXXZ@4HA PROC	; `ShowDemoWindowTables'::`1'::dtor$7
  00111	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00116	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0011b	55		 push	 rbp
  0011c	57		 push	 rdi
  0011d	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00121	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00125	48 8d 8d a8 0e
	00 00		 lea	 rcx, QWORD PTR clipper$125[rbp]
  0012c	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::~ImGuiListClipper
  00131	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00135	5f		 pop	 rdi
  00136	5d		 pop	 rbp
  00137	c3		 ret	 0
?dtor$7@?0??ShowDemoWindowTables@@YAXXZ@4HA ENDP	; `ShowDemoWindowTables'::`1'::dtor$7
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowDemoWindowPopups@@YAXXZ
_TEXT	SEGMENT
names$8 = 8
i$9 = 68
i$10 = 100
i$11 = 132
names$12 = 168
n$13 = 228
buf$14 = 272
center$15 = 360
unused_open$16 = 388
$T17 = 996
$T18 = 1028
$T19 = 1060
$T20 = 1092
$T21 = 1124
$T22 = 1156
$T23 = 1188
$T24 = 1220
$T25 = 1252
$T26 = 1284
$T27 = 1316
$T28 = 1348
$T29 = 1380
$T30 = 1412
$T31 = 1444
$T32 = 1476
$T33 = 1508
$T34 = 1540
$T35 = 1572
$T36 = 1604
$T37 = 1636
$T38 = 1668
$T39 = 1700
tv385 = 1716
tv138 = 1720
__$ArrayPad$ = 1728
?ShowDemoWindowPopups@@YAXXZ PROC			; ShowDemoWindowPopups, COMDAT

; 3302 : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 18 07
	00 00		 sub	 rsp, 1816		; 00000718H
  0000a	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 c6 01 00 00	 mov	 ecx, 454		; 000001c6H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00025	48 33 c5	 xor	 rax, rbp
  00028	48 89 85 c0 06
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
$LN4@ShowDemoWi:

; 3303 :     IMGUI_DEMO_MARKER("Popups");

  0002f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00037	74 25		 je	 SHORT $LN29@ShowDemoWi
  00039	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowPopups@@YAXXZ@4JA
  0003f	ff c0		 inc	 eax
  00041	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00048	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06ENDEIGLN@Popups?$AA@
  0004f	8b d0		 mov	 edx, eax
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN29@ShowDemoWi:
  0005e	33 c0		 xor	 eax, eax
  00060	85 c0		 test	 eax, eax
  00062	75 cb		 jne	 SHORT $LN4@ShowDemoWi

; 3304 :     if (!ImGui::CollapsingHeader("Popups & Modal windows"))

  00064	33 d2		 xor	 edx, edx
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@JODLIHDO@Popups?5?$CG?5Modal?5windows?$AA@
  0006d	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPEBDH@Z ; ImGui::CollapsingHeader
  00072	0f b6 c0	 movzx	 eax, al
  00075	85 c0		 test	 eax, eax
  00077	75 05		 jne	 SHORT $LN30@ShowDemoWi

; 3305 :         return;

  00079	e9 94 0c 00 00	 jmp	 $LN1@ShowDemoWi
$LN30@ShowDemoWi:
$LN7@ShowDemoWi:

; 3306 : 
; 3307 :     // The properties of popups windows are:
; 3308 :     // - They block normal mouse hovering detection outside them. (*)
; 3309 :     // - Unless modal, they can be closed by clicking anywhere outside them, or by pressing ESCAPE.
; 3310 :     // - Their visibility state (~bool) is held internally by Dear ImGui instead of being held by the programmer as
; 3311 :     //   we are used to with regular Begin() calls. User can manipulate the visibility state by calling OpenPopup().
; 3312 :     // (*) One can use IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup) to bypass it and detect hovering even
; 3313 :     //     when normally blocked by a popup.
; 3314 :     // Those three properties are connected. The library needs to hold their visibility state BECAUSE it can close
; 3315 :     // popups at any time.
; 3316 : 
; 3317 :     // Typical use for regular windows:
; 3318 :     //   bool my_tool_is_active = false; if (ImGui::Button("Open")) my_tool_is_active = true; [...] if (my_tool_is_active) Begin("My Tool", &my_tool_is_active) { [...] } End();
; 3319 :     // Typical use for popups:
; 3320 :     //   if (ImGui::Button("Open")) ImGui::OpenPopup("MyPopup"); if (ImGui::BeginPopup("MyPopup") { [...] EndPopup(); }
; 3321 : 
; 3322 :     // With popups we have to go through a library call (here OpenPopup) to manipulate the visibility state.
; 3323 :     // This may be a bit confusing at first but it should quickly make sense. Follow on the examples below.
; 3324 : 
; 3325 :     IMGUI_DEMO_MARKER("Popups/Popups");

  0007e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00086	74 26		 je	 SHORT $LN31@ShowDemoWi
  00088	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowPopups@@YAXXZ@4JA
  0008e	83 c0 17	 add	 eax, 23
  00091	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00098	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@LLGFJBMF@Popups?1Popups?$AA@
  0009f	8b d0		 mov	 edx, eax
  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN31@ShowDemoWi:
  000ae	33 c0		 xor	 eax, eax
  000b0	85 c0		 test	 eax, eax
  000b2	75 ca		 jne	 SHORT $LN7@ShowDemoWi

; 3326 :     if (ImGui::TreeNode("Popups"))

  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06ENDEIGLN@Popups?$AA@
  000bb	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  000c0	0f b6 c0	 movzx	 eax, al
  000c3	85 c0		 test	 eax, eax
  000c5	0f 84 4d 04 00
	00		 je	 $LN32@ShowDemoWi

; 3327 :     {
; 3328 :         ImGui::TextWrapped(

  000cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0HO@LGMOGOO@When?5a?5popup?5is?5active?0?5it?5inhib@
  000d2	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped

; 3329 :             "When a popup is active, it inhibits interacting with windows that are behind the popup. "
; 3330 :             "Clicking outside the popup closes it.");
; 3331 : 
; 3332 :         static int selected_fish = -1;
; 3333 :         const char* names[] = { "Bream", "Haddock", "Mackerel", "Pollock", "Tilefish" };

  000d7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05BKABPFFI@Bream?$AA@
  000de	48 89 45 08	 mov	 QWORD PTR names$8[rbp], rax
  000e2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07BNGOACBO@Haddock?$AA@
  000e9	48 89 45 10	 mov	 QWORD PTR names$8[rbp+8], rax
  000ed	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08OFLHLLIP@Mackerel?$AA@
  000f4	48 89 45 18	 mov	 QWORD PTR names$8[rbp+16], rax
  000f8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07DOCMJKHB@Pollock?$AA@
  000ff	48 89 45 20	 mov	 QWORD PTR names$8[rbp+24], rax
  00103	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08EGAMPFAB@Tilefish?$AA@
  0010a	48 89 45 28	 mov	 QWORD PTR names$8[rbp+32], rax

; 3334 :         static bool toggles[] = { true, false, false, false, false };
; 3335 : 
; 3336 :         // Simple selection popup (if you want to show the current selection inside the Button itself,
; 3337 :         // you may want to build a string using the "###" operator to preserve a constant ID with a variable label)
; 3338 :         if (ImGui::Button("Select.."))

  0010e	0f 57 d2	 xorps	 xmm2, xmm2
  00111	0f 57 c9	 xorps	 xmm1, xmm1
  00114	48 8d 8d e4 03
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  0011b	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00120	48 8b d0	 mov	 rdx, rax
  00123	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NNBGNINF@Select?4?4?$AA@
  0012a	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  0012f	0f b6 c0	 movzx	 eax, al
  00132	85 c0		 test	 eax, eax
  00134	74 0e		 je	 SHORT $LN33@ShowDemoWi

; 3339 :             ImGui::OpenPopup("my_select_popup");

  00136	33 d2		 xor	 edx, edx
  00138	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@GGCCCMJM@my_select_popup?$AA@
  0013f	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPEBDH@Z ; ImGui::OpenPopup
$LN33@ShowDemoWi:

; 3340 :         ImGui::SameLine();

  00144	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0014c	0f 57 c0	 xorps	 xmm0, xmm0
  0014f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 3341 :         ImGui::TextUnformatted(selected_fish == -1 ? "<None>" : names[selected_fish]);

  00154	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?selected_fish@?P@??ShowDemoWindowPopups@@YAXXZ@4HA, -1
  0015b	75 10		 jne	 SHORT $LN81@ShowDemoWi
  0015d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06PHEAPGKB@?$DMNone?$DO?$AA@
  00164	48 89 85 b8 06
	00 00		 mov	 QWORD PTR tv138[rbp], rax
  0016b	eb 13		 jmp	 SHORT $LN82@ShowDemoWi
$LN81@ShowDemoWi:
  0016d	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR ?selected_fish@?P@??ShowDemoWindowPopups@@YAXXZ@4HA
  00174	48 8b 44 c5 08	 mov	 rax, QWORD PTR names$8[rbp+rax*8]
  00179	48 89 85 b8 06
	00 00		 mov	 QWORD PTR tv138[rbp], rax
$LN82@ShowDemoWi:
  00180	33 d2		 xor	 edx, edx
  00182	48 8b 8d b8 06
	00 00		 mov	 rcx, QWORD PTR tv138[rbp]
  00189	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted

; 3342 :         if (ImGui::BeginPopup("my_select_popup"))

  0018e	33 d2		 xor	 edx, edx
  00190	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@GGCCCMJM@my_select_popup?$AA@
  00197	e8 00 00 00 00	 call	 ?BeginPopup@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopup
  0019c	0f b6 c0	 movzx	 eax, al
  0019f	85 c0		 test	 eax, eax
  001a1	74 67		 je	 SHORT $LN34@ShowDemoWi

; 3343 :         {
; 3344 :             ImGui::Text("Aquarium");

  001a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08IKEIPKBP@Aquarium?$AA@
  001aa	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3345 :             ImGui::Separator();

  001af	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3346 :             for (int i = 0; i < IM_ARRAYSIZE(names); i++)

  001b4	c7 45 44 00 00
	00 00		 mov	 DWORD PTR i$9[rbp], 0
  001bb	eb 08		 jmp	 SHORT $LN10@ShowDemoWi
$LN8@ShowDemoWi:
  001bd	8b 45 44	 mov	 eax, DWORD PTR i$9[rbp]
  001c0	ff c0		 inc	 eax
  001c2	89 45 44	 mov	 DWORD PTR i$9[rbp], eax
$LN10@ShowDemoWi:
  001c5	83 7d 44 05	 cmp	 DWORD PTR i$9[rbp], 5
  001c9	7d 3a		 jge	 SHORT $LN9@ShowDemoWi

; 3347 :                 if (ImGui::Selectable(names[i]))

  001cb	0f 57 d2	 xorps	 xmm2, xmm2
  001ce	0f 57 c9	 xorps	 xmm1, xmm1
  001d1	48 8d 8d 04 04
	00 00		 lea	 rcx, QWORD PTR $T18[rbp]
  001d8	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001dd	48 63 4d 44	 movsxd	 rcx, DWORD PTR i$9[rbp]
  001e1	4c 8b c8	 mov	 r9, rax
  001e4	45 33 c0	 xor	 r8d, r8d
  001e7	33 d2		 xor	 edx, edx
  001e9	48 8b 4c cd 08	 mov	 rcx, QWORD PTR names$8[rbp+rcx*8]
  001ee	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
  001f3	0f b6 c0	 movzx	 eax, al
  001f6	85 c0		 test	 eax, eax
  001f8	74 09		 je	 SHORT $LN35@ShowDemoWi

; 3348 :                     selected_fish = i;

  001fa	8b 45 44	 mov	 eax, DWORD PTR i$9[rbp]
  001fd	89 05 00 00 00
	00		 mov	 DWORD PTR ?selected_fish@?P@??ShowDemoWindowPopups@@YAXXZ@4HA, eax
$LN35@ShowDemoWi:

; 3349 :             ImGui::EndPopup();

  00203	eb b8		 jmp	 SHORT $LN8@ShowDemoWi
$LN9@ShowDemoWi:
  00205	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN34@ShowDemoWi:

; 3350 :         }
; 3351 : 
; 3352 :         // Showing a menu with toggles
; 3353 :         if (ImGui::Button("Toggle.."))

  0020a	0f 57 d2	 xorps	 xmm2, xmm2
  0020d	0f 57 c9	 xorps	 xmm1, xmm1
  00210	48 8d 8d 24 04
	00 00		 lea	 rcx, QWORD PTR $T19[rbp]
  00217	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0021c	48 8b d0	 mov	 rdx, rax
  0021f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NINPLAO@Toggle?4?4?$AA@
  00226	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  0022b	0f b6 c0	 movzx	 eax, al
  0022e	85 c0		 test	 eax, eax
  00230	74 0e		 je	 SHORT $LN36@ShowDemoWi

; 3354 :             ImGui::OpenPopup("my_toggle_popup");

  00232	33 d2		 xor	 edx, edx
  00234	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@LJBKGLLI@my_toggle_popup?$AA@
  0023b	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPEBDH@Z ; ImGui::OpenPopup
$LN36@ShowDemoWi:

; 3355 :         if (ImGui::BeginPopup("my_toggle_popup"))

  00240	33 d2		 xor	 edx, edx
  00242	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@LJBKGLLI@my_toggle_popup?$AA@
  00249	e8 00 00 00 00	 call	 ?BeginPopup@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopup
  0024e	0f b6 c0	 movzx	 eax, al
  00251	85 c0		 test	 eax, eax
  00253	0f 84 d8 01 00
	00		 je	 $LN37@ShowDemoWi

; 3356 :         {
; 3357 :             for (int i = 0; i < IM_ARRAYSIZE(names); i++)

  00259	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$10[rbp], 0
  00260	eb 08		 jmp	 SHORT $LN13@ShowDemoWi
$LN11@ShowDemoWi:
  00262	8b 45 64	 mov	 eax, DWORD PTR i$10[rbp]
  00265	ff c0		 inc	 eax
  00267	89 45 64	 mov	 DWORD PTR i$10[rbp], eax
$LN13@ShowDemoWi:
  0026a	83 7d 64 05	 cmp	 DWORD PTR i$10[rbp], 5
  0026e	7d 2e		 jge	 SHORT $LN12@ShowDemoWi

; 3358 :                 ImGui::MenuItem(names[i], "", &toggles[i]);

  00270	48 63 45 64	 movsxd	 rax, DWORD PTR i$10[rbp]
  00274	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?toggles@?P@??ShowDemoWindowPopups@@YAXXZ@4PA_NA
  0027b	48 03 c8	 add	 rcx, rax
  0027e	48 8b c1	 mov	 rax, rcx
  00281	48 63 4d 64	 movsxd	 rcx, DWORD PTR i$10[rbp]
  00285	41 b1 01	 mov	 r9b, 1
  00288	4c 8b c0	 mov	 r8, rax
  0028b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00292	48 8b 4c cd 08	 mov	 rcx, QWORD PTR names$8[rbp+rcx*8]
  00297	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem
  0029c	eb c4		 jmp	 SHORT $LN11@ShowDemoWi
$LN12@ShowDemoWi:

; 3359 :             if (ImGui::BeginMenu("Sub-menu"))

  0029e	b2 01		 mov	 dl, 1
  002a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08GMNJJNGG@Sub?9menu?$AA@
  002a7	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  002ac	0f b6 c0	 movzx	 eax, al
  002af	85 c0		 test	 eax, eax
  002b1	74 19		 je	 SHORT $LN38@ShowDemoWi

; 3360 :             {
; 3361 :                 ImGui::MenuItem("Click me");

  002b3	41 b1 01	 mov	 r9b, 1
  002b6	45 33 c0	 xor	 r8d, r8d
  002b9	33 d2		 xor	 edx, edx
  002bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08PPLGDLFG@Click?5me?$AA@
  002c2	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem

; 3362 :                 ImGui::EndMenu();

  002c7	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN38@ShowDemoWi:

; 3363 :             }
; 3364 : 
; 3365 :             ImGui::Separator();

  002cc	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3366 :             ImGui::Text("Tooltip here");

  002d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@IODHFNG@Tooltip?5here?$AA@
  002d8	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3367 :             if (ImGui::IsItemHovered())

  002dd	33 c9		 xor	 ecx, ecx
  002df	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  002e4	0f b6 c0	 movzx	 eax, al
  002e7	85 c0		 test	 eax, eax
  002e9	74 0c		 je	 SHORT $LN39@ShowDemoWi

; 3368 :                 ImGui::SetTooltip("I am a tooltip over a popup");

  002eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@HJLGLIOD@I?5am?5a?5tooltip?5over?5a?5popup?$AA@
  002f2	e8 00 00 00 00	 call	 ?SetTooltip@ImGui@@YAXPEBDZZ ; ImGui::SetTooltip
$LN39@ShowDemoWi:

; 3369 : 
; 3370 :             if (ImGui::Button("Stacked Popup"))

  002f7	0f 57 d2	 xorps	 xmm2, xmm2
  002fa	0f 57 c9	 xorps	 xmm1, xmm1
  002fd	48 8d 8d 44 04
	00 00		 lea	 rcx, QWORD PTR $T20[rbp]
  00304	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00309	48 8b d0	 mov	 rdx, rax
  0030c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJLJJDJ@Stacked?5Popup?$AA@
  00313	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00318	0f b6 c0	 movzx	 eax, al
  0031b	85 c0		 test	 eax, eax
  0031d	74 0e		 je	 SHORT $LN40@ShowDemoWi

; 3371 :                 ImGui::OpenPopup("another popup");

  0031f	33 d2		 xor	 edx, edx
  00321	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@CMMIFNBD@another?5popup?$AA@
  00328	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPEBDH@Z ; ImGui::OpenPopup
$LN40@ShowDemoWi:

; 3372 :             if (ImGui::BeginPopup("another popup"))

  0032d	33 d2		 xor	 edx, edx
  0032f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@CMMIFNBD@another?5popup?$AA@
  00336	e8 00 00 00 00	 call	 ?BeginPopup@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopup
  0033b	0f b6 c0	 movzx	 eax, al
  0033e	85 c0		 test	 eax, eax
  00340	0f 84 e6 00 00
	00		 je	 $LN41@ShowDemoWi

; 3373 :             {
; 3374 :                 for (int i = 0; i < IM_ARRAYSIZE(names); i++)

  00346	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR i$11[rbp], 0
  00350	eb 0e		 jmp	 SHORT $LN16@ShowDemoWi
$LN14@ShowDemoWi:
  00352	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR i$11[rbp]
  00358	ff c0		 inc	 eax
  0035a	89 85 84 00 00
	00		 mov	 DWORD PTR i$11[rbp], eax
$LN16@ShowDemoWi:
  00360	83 bd 84 00 00
	00 05		 cmp	 DWORD PTR i$11[rbp], 5
  00367	7d 34		 jge	 SHORT $LN15@ShowDemoWi

; 3375 :                     ImGui::MenuItem(names[i], "", &toggles[i]);

  00369	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR i$11[rbp]
  00370	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?toggles@?P@??ShowDemoWindowPopups@@YAXXZ@4PA_NA
  00377	48 03 c8	 add	 rcx, rax
  0037a	48 8b c1	 mov	 rax, rcx
  0037d	48 63 8d 84 00
	00 00		 movsxd	 rcx, DWORD PTR i$11[rbp]
  00384	41 b1 01	 mov	 r9b, 1
  00387	4c 8b c0	 mov	 r8, rax
  0038a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00391	48 8b 4c cd 08	 mov	 rcx, QWORD PTR names$8[rbp+rcx*8]
  00396	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem
  0039b	eb b5		 jmp	 SHORT $LN14@ShowDemoWi
$LN15@ShowDemoWi:

; 3376 :                 if (ImGui::BeginMenu("Sub-menu"))

  0039d	b2 01		 mov	 dl, 1
  0039f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08GMNJJNGG@Sub?9menu?$AA@
  003a6	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  003ab	0f b6 c0	 movzx	 eax, al
  003ae	85 c0		 test	 eax, eax
  003b0	74 75		 je	 SHORT $LN42@ShowDemoWi

; 3377 :                 {
; 3378 :                     ImGui::MenuItem("Click me");

  003b2	41 b1 01	 mov	 r9b, 1
  003b5	45 33 c0	 xor	 r8d, r8d
  003b8	33 d2		 xor	 edx, edx
  003ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08PPLGDLFG@Click?5me?$AA@
  003c1	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem

; 3379 :                     if (ImGui::Button("Stacked Popup"))

  003c6	0f 57 d2	 xorps	 xmm2, xmm2
  003c9	0f 57 c9	 xorps	 xmm1, xmm1
  003cc	48 8d 8d 64 04
	00 00		 lea	 rcx, QWORD PTR $T21[rbp]
  003d3	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  003d8	48 8b d0	 mov	 rdx, rax
  003db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAJLJJDJ@Stacked?5Popup?$AA@
  003e2	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  003e7	0f b6 c0	 movzx	 eax, al
  003ea	85 c0		 test	 eax, eax
  003ec	74 0e		 je	 SHORT $LN43@ShowDemoWi

; 3380 :                         ImGui::OpenPopup("another popup");

  003ee	33 d2		 xor	 edx, edx
  003f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@CMMIFNBD@another?5popup?$AA@
  003f7	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPEBDH@Z ; ImGui::OpenPopup
$LN43@ShowDemoWi:

; 3381 :                     if (ImGui::BeginPopup("another popup"))

  003fc	33 d2		 xor	 edx, edx
  003fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@CMMIFNBD@another?5popup?$AA@
  00405	e8 00 00 00 00	 call	 ?BeginPopup@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopup
  0040a	0f b6 c0	 movzx	 eax, al
  0040d	85 c0		 test	 eax, eax
  0040f	74 11		 je	 SHORT $LN44@ShowDemoWi

; 3382 :                     {
; 3383 :                         ImGui::Text("I am the last one here.");

  00411	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@DMMONLJF@I?5am?5the?5last?5one?5here?4?$AA@
  00418	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3384 :                         ImGui::EndPopup();

  0041d	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN44@ShowDemoWi:

; 3385 :                     }
; 3386 :                     ImGui::EndMenu();

  00422	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN42@ShowDemoWi:

; 3387 :                 }
; 3388 :                 ImGui::EndPopup();

  00427	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN41@ShowDemoWi:

; 3389 :             }
; 3390 :             ImGui::EndPopup();

  0042c	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN37@ShowDemoWi:

; 3391 :         }
; 3392 : 
; 3393 :         // Call the more complete ShowExampleMenuFile which we use in various places of this demo
; 3394 :         if (ImGui::Button("With a menu.."))

  00431	0f 57 d2	 xorps	 xmm2, xmm2
  00434	0f 57 c9	 xorps	 xmm1, xmm1
  00437	48 8d 8d 84 04
	00 00		 lea	 rcx, QWORD PTR $T22[rbp]
  0043e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00443	48 8b d0	 mov	 rdx, rax
  00446	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@CEODEGMM@With?5a?5menu?4?4?$AA@
  0044d	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00452	0f b6 c0	 movzx	 eax, al
  00455	85 c0		 test	 eax, eax
  00457	74 0e		 je	 SHORT $LN45@ShowDemoWi

; 3395 :             ImGui::OpenPopup("my_file_popup");

  00459	33 d2		 xor	 edx, edx
  0045b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@CMFGCCH@my_file_popup?$AA@
  00462	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPEBDH@Z ; ImGui::OpenPopup
$LN45@ShowDemoWi:

; 3396 :         if (ImGui::BeginPopup("my_file_popup", ImGuiWindowFlags_MenuBar))

  00467	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  0046c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@CMFGCCH@my_file_popup?$AA@
  00473	e8 00 00 00 00	 call	 ?BeginPopup@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopup
  00478	0f b6 c0	 movzx	 eax, al
  0047b	85 c0		 test	 eax, eax
  0047d	0f 84 90 00 00
	00		 je	 $LN46@ShowDemoWi

; 3397 :         {
; 3398 :             if (ImGui::BeginMenuBar())

  00483	e8 00 00 00 00	 call	 ?BeginMenuBar@ImGui@@YA_NXZ ; ImGui::BeginMenuBar
  00488	0f b6 c0	 movzx	 eax, al
  0048b	85 c0		 test	 eax, eax
  0048d	74 52		 je	 SHORT $LN47@ShowDemoWi

; 3399 :             {
; 3400 :                 if (ImGui::BeginMenu("File"))

  0048f	b2 01		 mov	 dl, 1
  00491	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04PBAHLACE@File?$AA@
  00498	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  0049d	0f b6 c0	 movzx	 eax, al
  004a0	85 c0		 test	 eax, eax
  004a2	74 0a		 je	 SHORT $LN48@ShowDemoWi

; 3401 :                 {
; 3402 :                     ShowExampleMenuFile();

  004a4	e8 00 00 00 00	 call	 ?ShowExampleMenuFile@@YAXXZ ; ShowExampleMenuFile

; 3403 :                     ImGui::EndMenu();

  004a9	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN48@ShowDemoWi:

; 3404 :                 }
; 3405 :                 if (ImGui::BeginMenu("Edit"))

  004ae	b2 01		 mov	 dl, 1
  004b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BBNPPDNC@Edit?$AA@
  004b7	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  004bc	0f b6 c0	 movzx	 eax, al
  004bf	85 c0		 test	 eax, eax
  004c1	74 19		 je	 SHORT $LN49@ShowDemoWi

; 3406 :                 {
; 3407 :                     ImGui::MenuItem("Dummy");

  004c3	41 b1 01	 mov	 r9b, 1
  004c6	45 33 c0	 xor	 r8d, r8d
  004c9	33 d2		 xor	 edx, edx
  004cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05JMHIMMIL@Dummy?$AA@
  004d2	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem

; 3408 :                     ImGui::EndMenu();

  004d7	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN49@ShowDemoWi:

; 3409 :                 }
; 3410 :                 ImGui::EndMenuBar();

  004dc	e8 00 00 00 00	 call	 ?EndMenuBar@ImGui@@YAXXZ ; ImGui::EndMenuBar
$LN47@ShowDemoWi:

; 3411 :             }
; 3412 :             ImGui::Text("Hello from popup!");

  004e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@DPOMEOMK@Hello?5from?5popup?$CB?$AA@
  004e8	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3413 :             ImGui::Button("This is a dummy button..");

  004ed	0f 57 d2	 xorps	 xmm2, xmm2
  004f0	0f 57 c9	 xorps	 xmm1, xmm1
  004f3	48 8d 8d a4 04
	00 00		 lea	 rcx, QWORD PTR $T23[rbp]
  004fa	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  004ff	48 8b d0	 mov	 rdx, rax
  00502	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BLLJFPAH@This?5is?5a?5dummy?5button?4?4?$AA@
  00509	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 3414 :             ImGui::EndPopup();

  0050e	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN46@ShowDemoWi:

; 3415 :         }
; 3416 : 
; 3417 :         ImGui::TreePop();

  00513	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN32@ShowDemoWi:
$LN19@ShowDemoWi:

; 3418 :     }
; 3419 : 
; 3420 :     IMGUI_DEMO_MARKER("Popups/Context menus");

  00518	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00520	74 26		 je	 SHORT $LN50@ShowDemoWi
  00522	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowPopups@@YAXXZ@4JA
  00528	83 c0 76	 add	 eax, 118		; 00000076H
  0052b	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00532	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BF@CBNGCKHJ@Popups?1Context?5menus?$AA@
  00539	8b d0		 mov	 edx, eax
  0053b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00542	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN50@ShowDemoWi:
  00548	33 c0		 xor	 eax, eax
  0054a	85 c0		 test	 eax, eax
  0054c	75 ca		 jne	 SHORT $LN19@ShowDemoWi

; 3421 :     if (ImGui::TreeNode("Context menus"))

  0054e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EGPMCJBG@Context?5menus?$AA@
  00555	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  0055a	0f b6 c0	 movzx	 eax, al
  0055d	85 c0		 test	 eax, eax
  0055f	0f 84 a8 03 00
	00		 je	 $LN51@ShowDemoWi

; 3422 :     {
; 3423 :         HelpMarker("\"Context\" functions are simple helpers to associate a Popup to a given Item or Window identifier.");

  00565	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GC@JCPNKAKN@?$CCContext?$CC?5functions?5are?5simple?5h@
  0056c	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 3424 : 
; 3425 :         // BeginPopupContextItem() is a helper to provide common/simple popup behavior of essentially doing:
; 3426 :         //     if (id == 0)
; 3427 :         //         id = GetItemID(); // Use last item id
; 3428 :         //     if (IsItemHovered() && IsMouseReleased(ImGuiMouseButton_Right))
; 3429 :         //         OpenPopup(id);
; 3430 :         //     return BeginPopup(id);
; 3431 :         // For advanced uses you may want to replicate and customize this code.
; 3432 :         // See more details in BeginPopupContextItem().
; 3433 : 
; 3434 :         // Example 1
; 3435 :         // When used after an item that has an ID (e.g. Button), we can skip providing an ID to BeginPopupContextItem(),
; 3436 :         // and BeginPopupContextItem() will use the last item ID as the popup ID.
; 3437 :         {
; 3438 :             const char* names[5] = { "Label1", "Label2", "Label3", "Label4", "Label5" };

  00571	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06EKAKPFJJ@Label1?$AA@
  00578	48 89 85 a8 00
	00 00		 mov	 QWORD PTR names$12[rbp], rax
  0057f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06GBCHKGFK@Label2?$AA@
  00586	48 89 85 b0 00
	00 00		 mov	 QWORD PTR names$12[rbp+8], rax
  0058d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06HIDMJHBL@Label3?$AA@
  00594	48 89 85 b8 00
	00 00		 mov	 QWORD PTR names$12[rbp+16], rax
  0059b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06DHHNABNM@Label4?$AA@
  005a2	48 89 85 c0 00
	00 00		 mov	 QWORD PTR names$12[rbp+24], rax
  005a9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06COGGDAJN@Label5?$AA@
  005b0	48 89 85 c8 00
	00 00		 mov	 QWORD PTR names$12[rbp+32], rax

; 3439 :             static int selected = -1;
; 3440 :             for (int n = 0; n < 5; n++)

  005b7	c7 85 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR n$13[rbp], 0
  005c1	eb 0e		 jmp	 SHORT $LN22@ShowDemoWi
$LN20@ShowDemoWi:
  005c3	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR n$13[rbp]
  005c9	ff c0		 inc	 eax
  005cb	89 85 e4 00 00
	00		 mov	 DWORD PTR n$13[rbp], eax
$LN22@ShowDemoWi:
  005d1	83 bd e4 00 00
	00 05		 cmp	 DWORD PTR n$13[rbp], 5
  005d8	0f 8d ef 00 00
	00		 jge	 $LN21@ShowDemoWi

; 3441 :             {
; 3442 :                 if (ImGui::Selectable(names[n], selected == n))

  005de	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR n$13[rbp]
  005e4	39 05 00 00 00
	00		 cmp	 DWORD PTR ?selected@?EG@??ShowDemoWindowPopups@@YAXXZ@4HA, eax
  005ea	75 09		 jne	 SHORT $LN83@ShowDemoWi
  005ec	c6 85 b4 06 00
	00 01		 mov	 BYTE PTR tv385[rbp], 1
  005f3	eb 07		 jmp	 SHORT $LN84@ShowDemoWi
$LN83@ShowDemoWi:
  005f5	c6 85 b4 06 00
	00 00		 mov	 BYTE PTR tv385[rbp], 0
$LN84@ShowDemoWi:
  005fc	0f 57 d2	 xorps	 xmm2, xmm2
  005ff	0f 57 c9	 xorps	 xmm1, xmm1
  00602	48 8d 8d c4 04
	00 00		 lea	 rcx, QWORD PTR $T24[rbp]
  00609	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0060e	48 63 8d e4 00
	00 00		 movsxd	 rcx, DWORD PTR n$13[rbp]
  00615	4c 8b c8	 mov	 r9, rax
  00618	45 33 c0	 xor	 r8d, r8d
  0061b	0f b6 95 b4 06
	00 00		 movzx	 edx, BYTE PTR tv385[rbp]
  00622	48 8b 8c cd a8
	00 00 00	 mov	 rcx, QWORD PTR names$12[rbp+rcx*8]
  0062a	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
  0062f	0f b6 c0	 movzx	 eax, al
  00632	85 c0		 test	 eax, eax
  00634	74 0c		 je	 SHORT $LN52@ShowDemoWi

; 3443 :                     selected = n;

  00636	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR n$13[rbp]
  0063c	89 05 00 00 00
	00		 mov	 DWORD PTR ?selected@?EG@??ShowDemoWindowPopups@@YAXXZ@4HA, eax
$LN52@ShowDemoWi:

; 3444 :                 if (ImGui::BeginPopupContextItem()) // <-- use last item id as popup id

  00642	ba 01 00 00 00	 mov	 edx, 1
  00647	33 c9		 xor	 ecx, ecx
  00649	e8 00 00 00 00	 call	 ?BeginPopupContextItem@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopupContextItem
  0064e	0f b6 c0	 movzx	 eax, al
  00651	85 c0		 test	 eax, eax
  00653	74 59		 je	 SHORT $LN53@ShowDemoWi

; 3445 :                 {
; 3446 :                     selected = n;

  00655	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR n$13[rbp]
  0065b	89 05 00 00 00
	00		 mov	 DWORD PTR ?selected@?EG@??ShowDemoWindowPopups@@YAXXZ@4HA, eax

; 3447 :                     ImGui::Text("This a popup for \"%s\"!", names[n]);

  00661	48 63 85 e4 00
	00 00		 movsxd	 rax, DWORD PTR n$13[rbp]
  00668	48 8b 94 c5 a8
	00 00 00	 mov	 rdx, QWORD PTR names$12[rbp+rax*8]
  00670	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@BODNOCMP@This?5a?5popup?5for?5?$CC?$CFs?$CC?$CB?$AA@
  00677	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3448 :                     if (ImGui::Button("Close"))

  0067c	0f 57 d2	 xorps	 xmm2, xmm2
  0067f	0f 57 c9	 xorps	 xmm1, xmm1
  00682	48 8d 8d e4 04
	00 00		 lea	 rcx, QWORD PTR $T25[rbp]
  00689	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0068e	48 8b d0	 mov	 rdx, rax
  00691	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LGELBCGM@Close?$AA@
  00698	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  0069d	0f b6 c0	 movzx	 eax, al
  006a0	85 c0		 test	 eax, eax
  006a2	74 05		 je	 SHORT $LN54@ShowDemoWi

; 3449 :                         ImGui::CloseCurrentPopup();

  006a4	e8 00 00 00 00	 call	 ?CloseCurrentPopup@ImGui@@YAXXZ ; ImGui::CloseCurrentPopup
$LN54@ShowDemoWi:

; 3450 :                     ImGui::EndPopup();

  006a9	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN53@ShowDemoWi:

; 3451 :                 }
; 3452 :                 if (ImGui::IsItemHovered())

  006ae	33 c9		 xor	 ecx, ecx
  006b0	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  006b5	0f b6 c0	 movzx	 eax, al
  006b8	85 c0		 test	 eax, eax
  006ba	74 0c		 je	 SHORT $LN55@ShowDemoWi

; 3453 :                     ImGui::SetTooltip("Right-click to open popup");

  006bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@PNAOOLFL@Right?9click?5to?5open?5popup?$AA@
  006c3	e8 00 00 00 00	 call	 ?SetTooltip@ImGui@@YAXPEBDZZ ; ImGui::SetTooltip
$LN55@ShowDemoWi:

; 3454 :             }

  006c8	e9 f6 fe ff ff	 jmp	 $LN20@ShowDemoWi
$LN21@ShowDemoWi:

; 3455 :         }
; 3456 : 
; 3457 :         // Example 2
; 3458 :         // Popup on a Text() element which doesn't have an identifier: we need to provide an identifier to BeginPopupContextItem().
; 3459 :         // Using an explicit identifier is also convenient if you want to activate the popups from different locations.
; 3460 :         {
; 3461 :             HelpMarker("Text() elements don't have stable identifiers so we need to provide one.");

  006cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EJ@OBAEIHGO@Text?$CI?$CJ?5elements?5don?8t?5have?5stabl@
  006d4	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 3462 :             static float value = 0.5f;
; 3463 :             ImGui::Text("Value = %.3f <-- (1) right-click this text", value);

  006d9	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?value@?FC@??ShowDemoWindowPopups@@YAXXZ@4MA
  006e1	0f 28 c8	 movaps	 xmm1, xmm0
  006e4	66 48 0f 7e ca	 movq	 rdx, xmm1
  006e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@MINHGHEB@Value?5?$DN?5?$CF?43f?5?$DM?9?9?5?$CI1?$CJ?5right?9click@
  006f0	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3464 :             if (ImGui::BeginPopupContextItem("my popup"))

  006f5	ba 01 00 00 00	 mov	 edx, 1
  006fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08MOACKAAJ@my?5popup?$AA@
  00701	e8 00 00 00 00	 call	 ?BeginPopupContextItem@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopupContextItem
  00706	0f b6 c0	 movzx	 eax, al
  00709	85 c0		 test	 eax, eax
  0070b	0f 84 c2 00 00
	00		 je	 $LN56@ShowDemoWi

; 3465 :             {
; 3466 :                 if (ImGui::Selectable("Set to zero")) value = 0.0f;

  00711	0f 57 d2	 xorps	 xmm2, xmm2
  00714	0f 57 c9	 xorps	 xmm1, xmm1
  00717	48 8d 8d 04 05
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  0071e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00723	4c 8b c8	 mov	 r9, rax
  00726	45 33 c0	 xor	 r8d, r8d
  00729	33 d2		 xor	 edx, edx
  0072b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MLNNLOAO@Set?5to?5zero?$AA@
  00732	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
  00737	0f b6 c0	 movzx	 eax, al
  0073a	85 c0		 test	 eax, eax
  0073c	74 0b		 je	 SHORT $LN57@ShowDemoWi
  0073e	0f 57 c0	 xorps	 xmm0, xmm0
  00741	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?value@?FC@??ShowDemoWindowPopups@@YAXXZ@4MA, xmm0
$LN57@ShowDemoWi:

; 3467 :                 if (ImGui::Selectable("Set to PI")) value = 3.1415f;

  00749	0f 57 d2	 xorps	 xmm2, xmm2
  0074c	0f 57 c9	 xorps	 xmm1, xmm1
  0074f	48 8d 8d 24 05
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  00756	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0075b	4c 8b c8	 mov	 r9, rax
  0075e	45 33 c0	 xor	 r8d, r8d
  00761	33 d2		 xor	 edx, edx
  00763	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09NJOBBCFG@Set?5to?5PI?$AA@
  0076a	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
  0076f	0f b6 c0	 movzx	 eax, al
  00772	85 c0		 test	 eax, eax
  00774	74 10		 je	 SHORT $LN58@ShowDemoWi
  00776	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40490e56
  0077e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?value@?FC@??ShowDemoWindowPopups@@YAXXZ@4MA, xmm0
$LN58@ShowDemoWi:

; 3468 :                 ImGui::SetNextItemWidth(-FLT_MIN);

  00786	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80800000
  0078e	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth

; 3469 :                 ImGui::DragFloat("##Value", &value, 0.1f, 0.0f, 0.0f);

  00793	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0079b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  007a2	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  007a7	0f 57 c0	 xorps	 xmm0, xmm0
  007aa	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  007b0	0f 57 db	 xorps	 xmm3, xmm3
  007b3	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3dcccccd
  007bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?value@?FC@??ShowDemoWindowPopups@@YAXXZ@4MA
  007c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07FGLEKONH@?$CD?$CDValue?$AA@
  007c9	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 3470 :                 ImGui::EndPopup();

  007ce	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN56@ShowDemoWi:

; 3471 :             }
; 3472 : 
; 3473 :             // We can also use OpenPopupOnItemClick() to toggle the visibility of a given popup.
; 3474 :             // Here we make it that right-clicking this other text element opens the same popup as above.
; 3475 :             // The popup itself will be submitted by the code above.
; 3476 :             ImGui::Text("(2) Or right-click this text");

  007d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@BDAGDOIM@?$CI2?$CJ?5Or?5right?9click?5this?5text?$AA@
  007da	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3477 :             ImGui::OpenPopupOnItemClick("my popup", ImGuiPopupFlags_MouseButtonRight);

  007df	ba 01 00 00 00	 mov	 edx, 1
  007e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08MOACKAAJ@my?5popup?$AA@
  007eb	e8 00 00 00 00	 call	 ?OpenPopupOnItemClick@ImGui@@YAXPEBDH@Z ; ImGui::OpenPopupOnItemClick

; 3478 : 
; 3479 :             // Back to square one: manually open the same popup.
; 3480 :             if (ImGui::Button("(3) Or click this button"))

  007f0	0f 57 d2	 xorps	 xmm2, xmm2
  007f3	0f 57 c9	 xorps	 xmm1, xmm1
  007f6	48 8d 8d 44 05
	00 00		 lea	 rcx, QWORD PTR $T28[rbp]
  007fd	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00802	48 8b d0	 mov	 rdx, rax
  00805	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@DCOFNGHJ@?$CI3?$CJ?5Or?5click?5this?5button?$AA@
  0080c	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00811	0f b6 c0	 movzx	 eax, al
  00814	85 c0		 test	 eax, eax
  00816	74 0e		 je	 SHORT $LN59@ShowDemoWi

; 3481 :                 ImGui::OpenPopup("my popup");

  00818	33 d2		 xor	 edx, edx
  0081a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08MOACKAAJ@my?5popup?$AA@
  00821	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPEBDH@Z ; ImGui::OpenPopup
$LN59@ShowDemoWi:

; 3482 :         }
; 3483 : 
; 3484 :         // Example 3
; 3485 :         // When using BeginPopupContextItem() with an implicit identifier (NULL == use last item ID),
; 3486 :         // we need to make sure your item identifier is stable.
; 3487 :         // In this example we showcase altering the item label while preserving its identifier, using the ### operator (see FAQ).
; 3488 :         {
; 3489 :             HelpMarker("Showcase using a popup ID linked to item ID, with the item having a changing label + stable ID using the ### operator.");

  00826	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0HH@IOGIBFGK@Showcase?5using?5a?5popup?5ID?5linked@
  0082d	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 3490 :             static char name[32] = "Label1";
; 3491 :             char buf[64];
; 3492 :             sprintf(buf, "Button: %s###Button", name); // ### operator override ID ignoring the preceding label

  00832	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?name@?FM@??ShowDemoWindowPopups@@YAXXZ@4PADA
  00839	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@BJGBOOKP@Button?3?5?$CFs?$CD?$CD?$CDButton?$AA@
  00840	48 8d 8d 10 01
	00 00		 lea	 rcx, QWORD PTR buf$14[rbp]
  00847	e8 00 00 00 00	 call	 sprintf

; 3493 :             ImGui::Button(buf);

  0084c	0f 57 d2	 xorps	 xmm2, xmm2
  0084f	0f 57 c9	 xorps	 xmm1, xmm1
  00852	48 8d 8d 64 05
	00 00		 lea	 rcx, QWORD PTR $T29[rbp]
  00859	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0085e	48 8b d0	 mov	 rdx, rax
  00861	48 8d 8d 10 01
	00 00		 lea	 rcx, QWORD PTR buf$14[rbp]
  00868	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 3494 :             if (ImGui::BeginPopupContextItem())

  0086d	ba 01 00 00 00	 mov	 edx, 1
  00872	33 c9		 xor	 ecx, ecx
  00874	e8 00 00 00 00	 call	 ?BeginPopupContextItem@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopupContextItem
  00879	0f b6 c0	 movzx	 eax, al
  0087c	85 c0		 test	 eax, eax
  0087e	74 6c		 je	 SHORT $LN60@ShowDemoWi

; 3495 :             {
; 3496 :                 ImGui::Text("Edit name:");

  00880	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@MIFJAGAG@Edit?5name?3?$AA@
  00887	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3497 :                 ImGui::InputText("##edit", name, IM_ARRAYSIZE(name));

  0088c	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00895	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0089e	45 33 c9	 xor	 r9d, r9d
  008a1	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  008a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?name@?FM@??ShowDemoWindowPopups@@YAXXZ@4PADA
  008ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06PEDNKACM@?$CD?$CDedit?$AA@
  008b5	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 3498 :                 if (ImGui::Button("Close"))

  008ba	0f 57 d2	 xorps	 xmm2, xmm2
  008bd	0f 57 c9	 xorps	 xmm1, xmm1
  008c0	48 8d 8d 84 05
	00 00		 lea	 rcx, QWORD PTR $T30[rbp]
  008c7	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  008cc	48 8b d0	 mov	 rdx, rax
  008cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LGELBCGM@Close?$AA@
  008d6	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  008db	0f b6 c0	 movzx	 eax, al
  008de	85 c0		 test	 eax, eax
  008e0	74 05		 je	 SHORT $LN61@ShowDemoWi

; 3499 :                     ImGui::CloseCurrentPopup();

  008e2	e8 00 00 00 00	 call	 ?CloseCurrentPopup@ImGui@@YAXXZ ; ImGui::CloseCurrentPopup
$LN61@ShowDemoWi:

; 3500 :                 ImGui::EndPopup();

  008e7	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN60@ShowDemoWi:

; 3501 :             }
; 3502 :             ImGui::SameLine(); ImGui::Text("(<-- right-click here)");

  008ec	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  008f4	0f 57 c0	 xorps	 xmm0, xmm0
  008f7	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  008fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@BPPDJDHF@?$CI?$DM?9?9?5right?9click?5here?$CJ?$AA@
  00903	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3503 :         }
; 3504 : 
; 3505 :         ImGui::TreePop();

  00908	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN51@ShowDemoWi:
$LN25@ShowDemoWi:

; 3506 :     }
; 3507 : 
; 3508 :     IMGUI_DEMO_MARKER("Popups/Modals");

  0090d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00915	74 28		 je	 SHORT $LN62@ShowDemoWi
  00917	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowPopups@@YAXXZ@4JA
  0091d	05 ce 00 00 00	 add	 eax, 206		; 000000ceH
  00922	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00929	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@OCELMHFF@Popups?1Modals?$AA@
  00930	8b d0		 mov	 edx, eax
  00932	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00939	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN62@ShowDemoWi:
  0093f	33 c0		 xor	 eax, eax
  00941	85 c0		 test	 eax, eax
  00943	75 c8		 jne	 SHORT $LN25@ShowDemoWi

; 3509 :     if (ImGui::TreeNode("Modals"))

  00945	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06BEBKNACN@Modals?$AA@
  0094c	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  00951	0f b6 c0	 movzx	 eax, al
  00954	85 c0		 test	 eax, eax
  00956	0f 84 18 03 00
	00		 je	 $LN63@ShowDemoWi

; 3510 :     {
; 3511 :         ImGui::TextWrapped("Modal windows are like popups but the user cannot close them by clicking outside.");

  0095c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FC@FCFEEIDF@Modal?5windows?5are?5like?5popups?5bu@
  00963	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped

; 3512 : 
; 3513 :         if (ImGui::Button("Delete.."))

  00968	0f 57 d2	 xorps	 xmm2, xmm2
  0096b	0f 57 c9	 xorps	 xmm1, xmm1
  0096e	48 8d 8d a4 05
	00 00		 lea	 rcx, QWORD PTR $T31[rbp]
  00975	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0097a	48 8b d0	 mov	 rdx, rax
  0097d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08CPNCIMAF@Delete?4?4?$AA@
  00984	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00989	0f b6 c0	 movzx	 eax, al
  0098c	85 c0		 test	 eax, eax
  0098e	74 0e		 je	 SHORT $LN64@ShowDemoWi

; 3514 :             ImGui::OpenPopup("Delete?");

  00990	33 d2		 xor	 edx, edx
  00992	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DCPPKMOD@Delete?$DP?$AA@
  00999	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPEBDH@Z ; ImGui::OpenPopup
$LN64@ShowDemoWi:

; 3515 : 
; 3516 :         // Always center this window when appearing
; 3517 :         ImVec2 center = ImGui::GetMainViewport()->GetCenter();

  0099e	e8 00 00 00 00	 call	 ?GetMainViewport@ImGui@@YAPEAUImGuiViewport@@XZ ; ImGui::GetMainViewport
  009a3	48 8d 95 68 01
	00 00		 lea	 rdx, QWORD PTR center$15[rbp]
  009aa	48 8b c8	 mov	 rcx, rax
  009ad	e8 00 00 00 00	 call	 ?GetCenter@ImGuiViewport@@QEBA?AUImVec2@@XZ ; ImGuiViewport::GetCenter

; 3518 :         ImGui::SetNextWindowPos(center, ImGuiCond_Appearing, ImVec2(0.5f, 0.5f));

  009b2	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f000000
  009ba	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  009c2	48 8d 8d c4 05
	00 00		 lea	 rcx, QWORD PTR $T32[rbp]
  009c9	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  009ce	4c 8b c0	 mov	 r8, rax
  009d1	ba 08 00 00 00	 mov	 edx, 8
  009d6	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR center$15[rbp]
  009dd	e8 00 00 00 00	 call	 ?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H0@Z ; ImGui::SetNextWindowPos

; 3519 : 
; 3520 :         if (ImGui::BeginPopupModal("Delete?", NULL, ImGuiWindowFlags_AlwaysAutoResize))

  009e2	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  009e8	33 d2		 xor	 edx, edx
  009ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DCPPKMOD@Delete?$DP?$AA@
  009f1	e8 00 00 00 00	 call	 ?BeginPopupModal@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginPopupModal
  009f6	0f b6 c0	 movzx	 eax, al
  009f9	85 c0		 test	 eax, eax
  009fb	0f 84 cb 00 00
	00		 je	 $LN65@ShowDemoWi

; 3521 :         {
; 3522 :             ImGui::Text("All those beautiful files will be deleted.\nThis operation cannot be undone!\n\n");

  00a01	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EO@GEGEJAML@All?5those?5beautiful?5files?5will?5b@
  00a08	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3523 :             ImGui::Separator();

  00a0d	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3524 : 
; 3525 :             //static int unused_i = 0;
; 3526 :             //ImGui::Combo("Combo", &unused_i, "Delete\0Delete harder\0");
; 3527 : 
; 3528 :             static bool dont_ask_me_next_time = false;
; 3529 :             ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(0, 0));

  00a12	0f 57 d2	 xorps	 xmm2, xmm2
  00a15	0f 57 c9	 xorps	 xmm1, xmm1
  00a18	48 8d 8d e4 05
	00 00		 lea	 rcx, QWORD PTR $T33[rbp]
  00a1f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00a24	48 8b d0	 mov	 rdx, rax
  00a27	b9 0b 00 00 00	 mov	 ecx, 11
  00a2c	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z ; ImGui::PushStyleVar

; 3530 :             ImGui::Checkbox("Don't ask me next time", &dont_ask_me_next_time);

  00a31	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?dont_ask_me_next_time@?GN@??ShowDemoWindowPopups@@YAXXZ@4_NA
  00a38	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@BGNANACB@Don?8t?5ask?5me?5next?5time?$AA@
  00a3f	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 3531 :             ImGui::PopStyleVar();

  00a44	b9 01 00 00 00	 mov	 ecx, 1
  00a49	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar

; 3532 : 
; 3533 :             if (ImGui::Button("OK", ImVec2(120, 0))) { ImGui::CloseCurrentPopup(); }

  00a4e	0f 57 d2	 xorps	 xmm2, xmm2
  00a51	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42f00000
  00a59	48 8d 8d 04 06
	00 00		 lea	 rcx, QWORD PTR $T34[rbp]
  00a60	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00a65	48 8b d0	 mov	 rdx, rax
  00a68	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02GIPFHKNO@OK?$AA@
  00a6f	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00a74	0f b6 c0	 movzx	 eax, al
  00a77	85 c0		 test	 eax, eax
  00a79	74 05		 je	 SHORT $LN66@ShowDemoWi
  00a7b	e8 00 00 00 00	 call	 ?CloseCurrentPopup@ImGui@@YAXXZ ; ImGui::CloseCurrentPopup
$LN66@ShowDemoWi:

; 3534 :             ImGui::SetItemDefaultFocus();

  00a80	e8 00 00 00 00	 call	 ?SetItemDefaultFocus@ImGui@@YAXXZ ; ImGui::SetItemDefaultFocus

; 3535 :             ImGui::SameLine();

  00a85	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00a8d	0f 57 c0	 xorps	 xmm0, xmm0
  00a90	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 3536 :             if (ImGui::Button("Cancel", ImVec2(120, 0))) { ImGui::CloseCurrentPopup(); }

  00a95	0f 57 d2	 xorps	 xmm2, xmm2
  00a98	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42f00000
  00aa0	48 8d 8d 24 06
	00 00		 lea	 rcx, QWORD PTR $T35[rbp]
  00aa7	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00aac	48 8b d0	 mov	 rdx, rax
  00aaf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FMBNCPDL@Cancel?$AA@
  00ab6	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00abb	0f b6 c0	 movzx	 eax, al
  00abe	85 c0		 test	 eax, eax
  00ac0	74 05		 je	 SHORT $LN67@ShowDemoWi
  00ac2	e8 00 00 00 00	 call	 ?CloseCurrentPopup@ImGui@@YAXXZ ; ImGui::CloseCurrentPopup
$LN67@ShowDemoWi:

; 3537 :             ImGui::EndPopup();

  00ac7	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN65@ShowDemoWi:

; 3538 :         }
; 3539 : 
; 3540 :         if (ImGui::Button("Stacked modals.."))

  00acc	0f 57 d2	 xorps	 xmm2, xmm2
  00acf	0f 57 c9	 xorps	 xmm1, xmm1
  00ad2	48 8d 8d 44 06
	00 00		 lea	 rcx, QWORD PTR $T36[rbp]
  00ad9	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00ade	48 8b d0	 mov	 rdx, rax
  00ae1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NNACGNLC@Stacked?5modals?4?4?$AA@
  00ae8	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00aed	0f b6 c0	 movzx	 eax, al
  00af0	85 c0		 test	 eax, eax
  00af2	74 0e		 je	 SHORT $LN68@ShowDemoWi

; 3541 :             ImGui::OpenPopup("Stacked 1");

  00af4	33 d2		 xor	 edx, edx
  00af6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09DMLDOIOE@Stacked?51?$AA@
  00afd	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPEBDH@Z ; ImGui::OpenPopup
$LN68@ShowDemoWi:

; 3542 :         if (ImGui::BeginPopupModal("Stacked 1", NULL, ImGuiWindowFlags_MenuBar))

  00b02	41 b8 00 04 00
	00		 mov	 r8d, 1024		; 00000400H
  00b08	33 d2		 xor	 edx, edx
  00b0a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09DMLDOIOE@Stacked?51?$AA@
  00b11	e8 00 00 00 00	 call	 ?BeginPopupModal@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginPopupModal
  00b16	0f b6 c0	 movzx	 eax, al
  00b19	85 c0		 test	 eax, eax
  00b1b	0f 84 4e 01 00
	00		 je	 $LN69@ShowDemoWi

; 3543 :         {
; 3544 :             if (ImGui::BeginMenuBar())

  00b21	e8 00 00 00 00	 call	 ?BeginMenuBar@ImGui@@YA_NXZ ; ImGui::BeginMenuBar
  00b26	0f b6 c0	 movzx	 eax, al
  00b29	85 c0		 test	 eax, eax
  00b2b	74 36		 je	 SHORT $LN70@ShowDemoWi

; 3545 :             {
; 3546 :                 if (ImGui::BeginMenu("File"))

  00b2d	b2 01		 mov	 dl, 1
  00b2f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04PBAHLACE@File?$AA@
  00b36	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  00b3b	0f b6 c0	 movzx	 eax, al
  00b3e	85 c0		 test	 eax, eax
  00b40	74 1c		 je	 SHORT $LN71@ShowDemoWi

; 3547 :                 {
; 3548 :                     if (ImGui::MenuItem("Some menu item")) {}

  00b42	41 b1 01	 mov	 r9b, 1
  00b45	45 33 c0	 xor	 r8d, r8d
  00b48	33 d2		 xor	 edx, edx
  00b4a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@LCHDFKKN@Some?5menu?5item?$AA@
  00b51	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  00b56	0f b6 c0	 movzx	 eax, al

; 3549 :                     ImGui::EndMenu();

  00b59	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN71@ShowDemoWi:

; 3550 :                 }
; 3551 :                 ImGui::EndMenuBar();

  00b5e	e8 00 00 00 00	 call	 ?EndMenuBar@ImGui@@YAXXZ ; ImGui::EndMenuBar
$LN70@ShowDemoWi:

; 3552 :             }
; 3553 :             ImGui::Text("Hello from Stacked The First\nUsing style.Colors[ImGuiCol_ModalWindowDimBg] behind it.");

  00b63	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FG@FEJJJKAO@Hello?5from?5Stacked?5The?5First?6Usi@
  00b6a	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3554 : 
; 3555 :             // Testing behavior of widgets stacking their own regular popups over the modal.
; 3556 :             static int item = 1;
; 3557 :             static float color[4] = { 0.4f, 0.7f, 0.0f, 0.5f };
; 3558 :             ImGui::Combo("Combo", &item, "aaaa\0bbbb\0cccc\0dddd\0eeee\0\0");

  00b6f	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  00b75	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BL@ICCGGBKH@aaaa?$AAbbbb?$AAcccc?$AAdddd?$AAeeee?$AA?$AA?$AA@
  00b7c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?item@?HI@??ShowDemoWindowPopups@@YAXXZ@4HA
  00b83	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LMOJIBPK@Combo?$AA@
  00b8a	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAH0H@Z ; ImGui::Combo

; 3559 :             ImGui::ColorEdit4("color", color);

  00b8f	45 33 c0	 xor	 r8d, r8d
  00b92	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?color@?HI@??ShowDemoWindowPopups@@YAXXZ@4PAMA
  00b99	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05PEENBMOG@color?$AA@
  00ba0	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z ; ImGui::ColorEdit4

; 3560 : 
; 3561 :             if (ImGui::Button("Add another modal.."))

  00ba5	0f 57 d2	 xorps	 xmm2, xmm2
  00ba8	0f 57 c9	 xorps	 xmm1, xmm1
  00bab	48 8d 8d 64 06
	00 00		 lea	 rcx, QWORD PTR $T37[rbp]
  00bb2	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00bb7	48 8b d0	 mov	 rdx, rax
  00bba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@EOGCGODN@Add?5another?5modal?4?4?$AA@
  00bc1	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00bc6	0f b6 c0	 movzx	 eax, al
  00bc9	85 c0		 test	 eax, eax
  00bcb	74 0e		 je	 SHORT $LN73@ShowDemoWi

; 3562 :                 ImGui::OpenPopup("Stacked 2");

  00bcd	33 d2		 xor	 edx, edx
  00bcf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09BHJOLLCH@Stacked?52?$AA@
  00bd6	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPEBDH@Z ; ImGui::OpenPopup
$LN73@ShowDemoWi:

; 3563 : 
; 3564 :             // Also demonstrate passing a bool* to BeginPopupModal(), this will create a regular close button which
; 3565 :             // will close the popup. Note that the visibility state of popups is owned by imgui, so the input value
; 3566 :             // of the bool actually doesn't matter here.
; 3567 :             bool unused_open = true;

  00bdb	c6 85 84 01 00
	00 01		 mov	 BYTE PTR unused_open$16[rbp], 1

; 3568 :             if (ImGui::BeginPopupModal("Stacked 2", &unused_open))

  00be2	45 33 c0	 xor	 r8d, r8d
  00be5	48 8d 95 84 01
	00 00		 lea	 rdx, QWORD PTR unused_open$16[rbp]
  00bec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09BHJOLLCH@Stacked?52?$AA@
  00bf3	e8 00 00 00 00	 call	 ?BeginPopupModal@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginPopupModal
  00bf8	0f b6 c0	 movzx	 eax, al
  00bfb	85 c0		 test	 eax, eax
  00bfd	74 3e		 je	 SHORT $LN74@ShowDemoWi

; 3569 :             {
; 3570 :                 ImGui::Text("Hello from Stacked The Second!");

  00bff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@CPFMAIJ@Hello?5from?5Stacked?5The?5Second?$CB?$AA@
  00c06	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3571 :                 if (ImGui::Button("Close"))

  00c0b	0f 57 d2	 xorps	 xmm2, xmm2
  00c0e	0f 57 c9	 xorps	 xmm1, xmm1
  00c11	48 8d 8d 84 06
	00 00		 lea	 rcx, QWORD PTR $T38[rbp]
  00c18	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00c1d	48 8b d0	 mov	 rdx, rax
  00c20	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LGELBCGM@Close?$AA@
  00c27	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00c2c	0f b6 c0	 movzx	 eax, al
  00c2f	85 c0		 test	 eax, eax
  00c31	74 05		 je	 SHORT $LN75@ShowDemoWi

; 3572 :                     ImGui::CloseCurrentPopup();

  00c33	e8 00 00 00 00	 call	 ?CloseCurrentPopup@ImGui@@YAXXZ ; ImGui::CloseCurrentPopup
$LN75@ShowDemoWi:

; 3573 :                 ImGui::EndPopup();

  00c38	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN74@ShowDemoWi:

; 3574 :             }
; 3575 : 
; 3576 :             if (ImGui::Button("Close"))

  00c3d	0f 57 d2	 xorps	 xmm2, xmm2
  00c40	0f 57 c9	 xorps	 xmm1, xmm1
  00c43	48 8d 8d a4 06
	00 00		 lea	 rcx, QWORD PTR $T39[rbp]
  00c4a	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00c4f	48 8b d0	 mov	 rdx, rax
  00c52	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LGELBCGM@Close?$AA@
  00c59	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00c5e	0f b6 c0	 movzx	 eax, al
  00c61	85 c0		 test	 eax, eax
  00c63	74 05		 je	 SHORT $LN76@ShowDemoWi

; 3577 :                 ImGui::CloseCurrentPopup();

  00c65	e8 00 00 00 00	 call	 ?CloseCurrentPopup@ImGui@@YAXXZ ; ImGui::CloseCurrentPopup
$LN76@ShowDemoWi:

; 3578 :             ImGui::EndPopup();

  00c6a	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN69@ShowDemoWi:

; 3579 :         }
; 3580 : 
; 3581 :         ImGui::TreePop();

  00c6f	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN63@ShowDemoWi:
$LN28@ShowDemoWi:

; 3582 :     }
; 3583 : 
; 3584 :     IMGUI_DEMO_MARKER("Popups/Menus inside a regular window");

  00c74	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00c7c	74 28		 je	 SHORT $LN77@ShowDemoWi
  00c7e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowPopups@@YAXXZ@4JA
  00c84	05 1a 01 00 00	 add	 eax, 282		; 0000011aH
  00c89	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00c90	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CF@IOOAIMEM@Popups?1Menus?5inside?5a?5regular?5wi@
  00c97	8b d0		 mov	 edx, eax
  00c99	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00ca0	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN77@ShowDemoWi:
  00ca6	33 c0		 xor	 eax, eax
  00ca8	85 c0		 test	 eax, eax
  00caa	75 c8		 jne	 SHORT $LN28@ShowDemoWi

; 3585 :     if (ImGui::TreeNode("Menus inside a regular window"))

  00cac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@EEOFHCMN@Menus?5inside?5a?5regular?5window?$AA@
  00cb3	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  00cb8	0f b6 c0	 movzx	 eax, al
  00cbb	85 c0		 test	 eax, eax
  00cbd	74 53		 je	 SHORT $LN78@ShowDemoWi

; 3586 :     {
; 3587 :         ImGui::TextWrapped("Below we are testing adding menu items to a regular window. It's rather unusual but should work!");

  00cbf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GB@PMDHHLNB@Below?5we?5are?5testing?5adding?5menu@
  00cc6	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped

; 3588 :         ImGui::Separator();

  00ccb	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3589 : 
; 3590 :         ImGui::MenuItem("Menu item", "CTRL+M");

  00cd0	41 b1 01	 mov	 r9b, 1
  00cd3	45 33 c0	 xor	 r8d, r8d
  00cd6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06GCLBOGOD@CTRL?$CLM?$AA@
  00cdd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09PDGIKJJH@Menu?5item?$AA@
  00ce4	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem

; 3591 :         if (ImGui::BeginMenu("Menu inside a regular window"))

  00ce9	b2 01		 mov	 dl, 1
  00ceb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@MFBALFLF@Menu?5inside?5a?5regular?5window?$AA@
  00cf2	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  00cf7	0f b6 c0	 movzx	 eax, al
  00cfa	85 c0		 test	 eax, eax
  00cfc	74 0a		 je	 SHORT $LN79@ShowDemoWi

; 3592 :         {
; 3593 :             ShowExampleMenuFile();

  00cfe	e8 00 00 00 00	 call	 ?ShowExampleMenuFile@@YAXXZ ; ShowExampleMenuFile

; 3594 :             ImGui::EndMenu();

  00d03	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN79@ShowDemoWi:

; 3595 :         }
; 3596 :         ImGui::Separator();

  00d08	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3597 :         ImGui::TreePop();

  00d0d	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN78@ShowDemoWi:
$LN1@ShowDemoWi:

; 3598 :     }
; 3599 : }

  00d12	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  00d16	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShowDemoWindowPopups@@YAXXZ$rtcFrameData
  00d1d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00d22	48 8b 8d c0 06
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00d29	48 33 cd	 xor	 rcx, rbp
  00d2c	e8 00 00 00 00	 call	 __security_check_cookie
  00d31	48 8d a5 d8 06
	00 00		 lea	 rsp, QWORD PTR [rbp+1752]
  00d38	5f		 pop	 rdi
  00d39	5d		 pop	 rbp
  00d3a	c3		 ret	 0
?ShowDemoWindowPopups@@YAXXZ ENDP			; ShowDemoWindowPopups
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowDemoWindowLayout@@YAXXZ
_TEXT	SEGMENT
window_flags$20 = 4
i$21 = 36
window_flags$22 = 68
i$23 = 100
buf$24 = 136
n$25 = 196
child_is_hovered$26 = 228
child_rect_min$27 = 264
child_rect_max$28 = 296
items$29 = 328
i$30 = 388
button_sz$31 = 424
style$32 = 456
buttons_count$33 = 484
window_visible_x2$34 = 516
n$35 = 548
last_button_x2$36 = 580
next_button_x2$37 = 612
size$38 = 648
values$39 = 680
spacing$40 = 724
i$41 = 756
node_open$42 = 788
i$43 = 820
scroll_to_off$44 = 852
scroll_to_pos$45 = 884
style$46 = 920
child_w$47 = 948
i$48 = 980
names$49 = 1016
child_flags$50 = 1076
child_id$51 = 1108
child_is_visible$52 = 1140
item$53 = 1172
scroll_y$54 = 1204
scroll_max_y$55 = 1236
i$56 = 1268
child_height$57 = 1300
child_flags$58 = 1332
child_id$59 = 1364
child_is_visible$60 = 1396
item$61 = 1428
scroll_x$62 = 1460
scroll_max_x$63 = 1492
names$64 = 1528
scrolling_child_size$65 = 1592
line$66 = 1620
num_buttons$67 = 1652
n$68 = 1684
num_buf$69 = 1720
label$70 = 1768
hue$71 = 1796
scroll_x$72 = 1828
scroll_max_x$73 = 1860
scroll_x_delta$74 = 1892
p$75 = 1928
open$76 = 1956
n$77 = 1988
n$78 = 2020
n$79 = 2052
p0$80 = 2088
p1$81 = 2120
text_str$82 = 2152
text_pos$83 = 2184
draw_list$84 = 2216
clip_rect$85 = 2248
$T86 = 3828
$T87 = 3860
$T88 = 3892
$T89 = 3924
$T90 = 3956
$T91 = 3988
$T92 = 4020
$T93 = 4052
$T94 = 4084
$T95 = 4132
$T96 = 4180
$T97 = 4212
$T98 = 4244
$T99 = 4276
$T100 = 4308
$T101 = 4340
$T102 = 4372
$T103 = 4404
$T104 = 4436
$T105 = 4468
$T106 = 4500
$T107 = 4532
$T108 = 4564
$T109 = 4596
$T110 = 4628
$T111 = 4660
$T112 = 4692
$T113 = 4724
$T114 = 4756
$T115 = 4788
$T116 = 4820
$T117 = 4852
$T118 = 4884
$T119 = 4916
$T120 = 4948
$T121 = 4980
$T122 = 5012
$T123 = 5044
$T124 = 5076
$T125 = 5108
$T126 = 5140
$T127 = 5172
$T128 = 5204
$T129 = 5236
$T130 = 5268
$T131 = 5316
$T132 = 5348
$T133 = 5380
$T134 = 5428
$T135 = 5460
$T136 = 5508
$T137 = 5556
$T138 = 5604
$T139 = 5652
$T140 = 5700
$T141 = 5748
$T142 = 5780
$T143 = 5812
$T144 = 5844
$T145 = 5876
$T146 = 5908
$T147 = 5940
$T148 = 5972
$T149 = 6004
$T150 = 6036
$T151 = 6068
$T152 = 6100
$T153 = 6132
$T154 = 6168
tv2042 = 6180
tv1993 = 6180
tv1639 = 6180
tv1481 = 6180
tv1367 = 6180
tv1347 = 6180
tv1292 = 6180
tv1268 = 6180
tv1197 = 6180
tv1144 = 6180
tv1123 = 6180
tv1755 = 6184
tv1742 = 6184
tv1711 = 6184
tv1502 = 6184
tv662 = 6184
tv237 = 6184
tv1762 = 6192
tv1714 = 6192
tv1501 = 6192
tv1717 = 6200
tv1500 = 6200
__$ArrayPad$ = 6208
?ShowDemoWindowLayout@@YAXXZ PROC			; ShowDemoWindowLayout, COMDAT

; 2520 : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	b8 a8 18 00 00	 mov	 eax, 6312		; 000018a8H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	48 2b e0	 sub	 rsp, rax
  00010	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 2a 06 00 00	 mov	 ecx, 1578		; 0000062aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 c7 85 18 18
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T154[rbp], -2
  0002f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00036	48 33 c5	 xor	 rax, rbp
  00039	48 89 85 40 18
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
$LN4@ShowDemoWi:

; 2521 :     IMGUI_DEMO_MARKER("Layout");

  00040	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00048	74 25		 je	 SHORT $LN105@ShowDemoWi
  0004a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA
  00050	ff c0		 inc	 eax
  00052	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00059	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06KMHOJANB@Layout?$AA@
  00060	8b d0		 mov	 edx, eax
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00069	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN105@ShowDemoWi:
  0006f	33 c0		 xor	 eax, eax
  00071	85 c0		 test	 eax, eax
  00073	75 cb		 jne	 SHORT $LN4@ShowDemoWi

; 2522 :     if (!ImGui::CollapsingHeader("Layout & Scrolling"))

  00075	33 d2		 xor	 edx, edx
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@JPJJCKFL@Layout?5?$CG?5Scrolling?$AA@
  0007e	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPEBDH@Z ; ImGui::CollapsingHeader
  00083	0f b6 c0	 movzx	 eax, al
  00086	85 c0		 test	 eax, eax
  00088	75 05		 jne	 SHORT $LN7@ShowDemoWi

; 2523 :         return;

  0008a	e9 cc 32 00 00	 jmp	 $LN1@ShowDemoWi
$LN7@ShowDemoWi:

; 2524 : 
; 2525 :     IMGUI_DEMO_MARKER("Layout/Child windows");

  0008f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00097	74 26		 je	 SHORT $LN107@ShowDemoWi
  00099	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA
  0009f	83 c0 05	 add	 eax, 5
  000a2	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  000a9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BF@MLLFPDNJ@Layout?1Child?5windows?$AA@
  000b0	8b d0		 mov	 edx, eax
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  000b9	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN107@ShowDemoWi:
  000bf	33 c0		 xor	 eax, eax
  000c1	85 c0		 test	 eax, eax
  000c3	75 ca		 jne	 SHORT $LN7@ShowDemoWi

; 2526 :     if (ImGui::TreeNode("Child windows"))

  000c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@CCLKLEED@Child?5windows?$AA@
  000cc	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  000d1	0f b6 c0	 movzx	 eax, al
  000d4	85 c0		 test	 eax, eax
  000d6	0f 84 aa 03 00
	00		 je	 $LN19@ShowDemoWi

; 2527 :     {
; 2528 :         HelpMarker("Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window.");

  000dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GO@NHEDEMHF@Use?5child?5windows?5to?5begin?5into?5@
  000e3	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 2529 :         static bool disable_mouse_wheel = false;
; 2530 :         static bool disable_menu = false;
; 2531 :         ImGui::Checkbox("Disable Mouse Wheel", &disable_mouse_wheel);

  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?disable_mouse_wheel@?P@??ShowDemoWindowLayout@@YAXXZ@4_NA
  000ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@DLAKMPBE@Disable?5Mouse?5Wheel?$AA@
  000f6	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 2532 :         ImGui::Checkbox("Disable Menu", &disable_menu);

  000fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?disable_menu@?P@??ShowDemoWindowLayout@@YAXXZ@4_NA
  00102	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PGMIMFJH@Disable?5Menu?$AA@
  00109	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 2533 : 
; 2534 :         // Child 1: no border, enable horizontal scrollbar
; 2535 :         {
; 2536 :             ImGuiWindowFlags window_flags = ImGuiWindowFlags_HorizontalScrollbar;

  0010e	c7 45 04 00 08
	00 00		 mov	 DWORD PTR window_flags$20[rbp], 2048 ; 00000800H

; 2537 :             if (disable_mouse_wheel)

  00115	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?disable_mouse_wheel@?P@??ShowDemoWindowLayout@@YAXXZ@4_NA
  0011c	85 c0		 test	 eax, eax
  0011e	74 09		 je	 SHORT $LN109@ShowDemoWi

; 2538 :                 window_flags |= ImGuiWindowFlags_NoScrollWithMouse;

  00120	8b 45 04	 mov	 eax, DWORD PTR window_flags$20[rbp]
  00123	83 c8 10	 or	 eax, 16
  00126	89 45 04	 mov	 DWORD PTR window_flags$20[rbp], eax
$LN109@ShowDemoWi:

; 2539 :             ImGui::BeginChild("ChildL", ImVec2(ImGui::GetContentRegionAvail().x * 0.5f, 260), false, window_flags);

  00129	48 8d 8d 14 0f
	00 00		 lea	 rcx, QWORD PTR $T87[rbp]
  00130	e8 00 00 00 00	 call	 ?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
  00135	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00139	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00141	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43820000
  00149	0f 28 c8	 movaps	 xmm1, xmm0
  0014c	48 8d 8d f4 0e
	00 00		 lea	 rcx, QWORD PTR $T86[rbp]
  00153	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00158	44 8b 4d 04	 mov	 r9d, DWORD PTR window_flags$20[rbp]
  0015c	45 33 c0	 xor	 r8d, r8d
  0015f	48 8b d0	 mov	 rdx, rax
  00162	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FBHPMCA@ChildL?$AA@
  00169	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z ; ImGui::BeginChild

; 2540 :             for (int i = 0; i < 100; i++)

  0016e	c7 45 24 00 00
	00 00		 mov	 DWORD PTR i$21[rbp], 0
  00175	eb 08		 jmp	 SHORT $LN10@ShowDemoWi
$LN8@ShowDemoWi:
  00177	8b 45 24	 mov	 eax, DWORD PTR i$21[rbp]
  0017a	ff c0		 inc	 eax
  0017c	89 45 24	 mov	 DWORD PTR i$21[rbp], eax
$LN10@ShowDemoWi:
  0017f	83 7d 24 64	 cmp	 DWORD PTR i$21[rbp], 100 ; 00000064H
  00183	7d 11		 jge	 SHORT $LN9@ShowDemoWi

; 2541 :                 ImGui::Text("%04d: scrollable region", i);

  00185	8b 55 24	 mov	 edx, DWORD PTR i$21[rbp]
  00188	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NIHPFDMO@?$CF04d?3?5scrollable?5region?$AA@
  0018f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  00194	eb e1		 jmp	 SHORT $LN8@ShowDemoWi
$LN9@ShowDemoWi:

; 2542 :             ImGui::EndChild();

  00196	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 2543 :         }
; 2544 : 
; 2545 :         ImGui::SameLine();

  0019b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  001a3	0f 57 c0	 xorps	 xmm0, xmm0
  001a6	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2546 : 
; 2547 :         // Child 2: rounded border
; 2548 :         {
; 2549 :             ImGuiWindowFlags window_flags = ImGuiWindowFlags_None;

  001ab	c7 45 44 00 00
	00 00		 mov	 DWORD PTR window_flags$22[rbp], 0

; 2550 :             if (disable_mouse_wheel)

  001b2	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?disable_mouse_wheel@?P@??ShowDemoWindowLayout@@YAXXZ@4_NA
  001b9	85 c0		 test	 eax, eax
  001bb	74 09		 je	 SHORT $LN110@ShowDemoWi

; 2551 :                 window_flags |= ImGuiWindowFlags_NoScrollWithMouse;

  001bd	8b 45 44	 mov	 eax, DWORD PTR window_flags$22[rbp]
  001c0	83 c8 10	 or	 eax, 16
  001c3	89 45 44	 mov	 DWORD PTR window_flags$22[rbp], eax
$LN110@ShowDemoWi:

; 2552 :             if (!disable_menu)

  001c6	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?disable_menu@?P@??ShowDemoWindowLayout@@YAXXZ@4_NA
  001cd	85 c0		 test	 eax, eax
  001cf	75 0a		 jne	 SHORT $LN111@ShowDemoWi

; 2553 :                 window_flags |= ImGuiWindowFlags_MenuBar;

  001d1	8b 45 44	 mov	 eax, DWORD PTR window_flags$22[rbp]
  001d4	0f ba e8 0a	 bts	 eax, 10
  001d8	89 45 44	 mov	 DWORD PTR window_flags$22[rbp], eax
$LN111@ShowDemoWi:

; 2554 :             ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 5.0f);

  001db	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40a00000
  001e3	b9 07 00 00 00	 mov	 ecx, 7
  001e8	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHM@Z ; ImGui::PushStyleVar

; 2555 :             ImGui::BeginChild("ChildR", ImVec2(0, 260), true, window_flags);

  001ed	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43820000
  001f5	0f 57 c9	 xorps	 xmm1, xmm1
  001f8	48 8d 8d 34 0f
	00 00		 lea	 rcx, QWORD PTR $T88[rbp]
  001ff	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00204	44 8b 4d 44	 mov	 r9d, DWORD PTR window_flags$22[rbp]
  00208	41 b0 01	 mov	 r8b, 1
  0020b	48 8b d0	 mov	 rdx, rax
  0020e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06NBFGMDPP@ChildR?$AA@
  00215	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z ; ImGui::BeginChild

; 2556 :             if (!disable_menu && ImGui::BeginMenuBar())

  0021a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?disable_menu@?P@??ShowDemoWindowLayout@@YAXXZ@4_NA
  00221	85 c0		 test	 eax, eax
  00223	75 30		 jne	 SHORT $LN112@ShowDemoWi
  00225	e8 00 00 00 00	 call	 ?BeginMenuBar@ImGui@@YA_NXZ ; ImGui::BeginMenuBar
  0022a	0f b6 c0	 movzx	 eax, al
  0022d	85 c0		 test	 eax, eax
  0022f	74 24		 je	 SHORT $LN112@ShowDemoWi

; 2557 :             {
; 2558 :                 if (ImGui::BeginMenu("Menu"))

  00231	b2 01		 mov	 dl, 1
  00233	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04IFEHPILC@Menu?$AA@
  0023a	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  0023f	0f b6 c0	 movzx	 eax, al
  00242	85 c0		 test	 eax, eax
  00244	74 0a		 je	 SHORT $LN113@ShowDemoWi

; 2559 :                 {
; 2560 :                     ShowExampleMenuFile();

  00246	e8 00 00 00 00	 call	 ?ShowExampleMenuFile@@YAXXZ ; ShowExampleMenuFile

; 2561 :                     ImGui::EndMenu();

  0024b	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN113@ShowDemoWi:

; 2562 :                 }
; 2563 :                 ImGui::EndMenuBar();

  00250	e8 00 00 00 00	 call	 ?EndMenuBar@ImGui@@YAXXZ ; ImGui::EndMenuBar
$LN112@ShowDemoWi:

; 2564 :             }
; 2565 :             if (ImGui::BeginTable("split", 2, ImGuiTableFlags_Resizable | ImGuiTableFlags_NoSavedSettings))

  00255	0f 57 d2	 xorps	 xmm2, xmm2
  00258	0f 57 c9	 xorps	 xmm1, xmm1
  0025b	48 8d 8d 54 0f
	00 00		 lea	 rcx, QWORD PTR $T89[rbp]
  00262	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00267	0f 57 c0	 xorps	 xmm0, xmm0
  0026a	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00270	4c 8b c8	 mov	 r9, rax
  00273	41 b8 11 00 00
	00		 mov	 r8d, 17
  00279	ba 02 00 00 00	 mov	 edx, 2
  0027e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05EHPMMFBK@split?$AA@
  00285	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  0028a	0f b6 c0	 movzx	 eax, al
  0028d	85 c0		 test	 eax, eax
  0028f	74 60		 je	 SHORT $LN114@ShowDemoWi

; 2566 :             {
; 2567 :                 for (int i = 0; i < 100; i++)

  00291	c7 45 64 00 00
	00 00		 mov	 DWORD PTR i$23[rbp], 0
  00298	eb 08		 jmp	 SHORT $LN13@ShowDemoWi
$LN11@ShowDemoWi:
  0029a	8b 45 64	 mov	 eax, DWORD PTR i$23[rbp]
  0029d	ff c0		 inc	 eax
  0029f	89 45 64	 mov	 DWORD PTR i$23[rbp], eax
$LN13@ShowDemoWi:
  002a2	83 7d 64 64	 cmp	 DWORD PTR i$23[rbp], 100 ; 00000064H
  002a6	7d 44		 jge	 SHORT $LN12@ShowDemoWi

; 2568 :                 {
; 2569 :                     char buf[32];
; 2570 :                     sprintf(buf, "%03d", i);

  002a8	44 8b 45 64	 mov	 r8d, DWORD PTR i$23[rbp]
  002ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04OHGLKFFN@?$CF03d?$AA@
  002b3	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR buf$24[rbp]
  002ba	e8 00 00 00 00	 call	 sprintf

; 2571 :                     ImGui::TableNextColumn();

  002bf	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 2572 :                     ImGui::Button(buf, ImVec2(-FLT_MIN, 0.0f));

  002c4	0f 57 d2	 xorps	 xmm2, xmm2
  002c7	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@80800000
  002cf	48 8d 8d 74 0f
	00 00		 lea	 rcx, QWORD PTR $T90[rbp]
  002d6	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  002db	48 8b d0	 mov	 rdx, rax
  002de	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR buf$24[rbp]
  002e5	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2573 :                 }

  002ea	eb ae		 jmp	 SHORT $LN11@ShowDemoWi
$LN12@ShowDemoWi:

; 2574 :                 ImGui::EndTable();

  002ec	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN114@ShowDemoWi:

; 2575 :             }
; 2576 :             ImGui::EndChild();

  002f1	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 2577 :             ImGui::PopStyleVar();

  002f6	b9 01 00 00 00	 mov	 ecx, 1
  002fb	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar

; 2578 :         }
; 2579 : 
; 2580 :         ImGui::Separator();

  00300	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 2581 : 
; 2582 :         // Demonstrate a few extra things
; 2583 :         // - Changing ImGuiCol_ChildBg (which is transparent black in default styles)
; 2584 :         // - Using SetCursorPos() to position child window (the child window is an item from the POV of parent window)
; 2585 :         //   You can also call SetNextWindowPos() to position the child window. The parent window will effectively
; 2586 :         //   layout from this position.
; 2587 :         // - Using ImGui::GetItemRectMin/Max() to query the "item" state (because the child window is an item from
; 2588 :         //   the POV of the parent window). See 'Demo->Querying Status (Edited/Active/Hovered etc.)' for details.
; 2589 :         {
; 2590 :             static int offset_x = 0;
; 2591 :             ImGui::SetNextItemWidth(ImGui::GetFontSize() * 8);

  00305	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  0030a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41000000
  00312	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth

; 2592 :             ImGui::DragInt("Offset X", &offset_x, 1.0f, -1000, 1000);

  00317	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0031f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  00326	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0032b	c7 44 24 20 e8
	03 00 00	 mov	 DWORD PTR [rsp+32], 1000 ; 000003e8H
  00333	41 b9 18 fc ff
	ff		 mov	 r9d, -1000		; fffffffffffffc18H
  00339	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00341	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?offset_x@?CE@??ShowDemoWindowLayout@@YAXXZ@4HA
  00348	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08JECJNGEB@Offset?5X?$AA@
  0034f	e8 00 00 00 00	 call	 ?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z ; ImGui::DragInt

; 2593 : 
; 2594 :             ImGui::SetCursorPosX(ImGui::GetCursorPosX() + (float)offset_x);

  00354	e8 00 00 00 00	 call	 ?GetCursorPosX@ImGui@@YAMXZ ; ImGui::GetCursorPosX
  00359	f3 0f 2a 0d 00
	00 00 00	 cvtsi2ss xmm1, DWORD PTR ?offset_x@?CE@??ShowDemoWindowLayout@@YAXXZ@4HA
  00361	f3 0f 58 c1	 addss	 xmm0, xmm1
  00365	e8 00 00 00 00	 call	 ?SetCursorPosX@ImGui@@YAXM@Z ; ImGui::SetCursorPosX

; 2595 :             ImGui::PushStyleColor(ImGuiCol_ChildBg, IM_COL32(255, 0, 0, 100));

  0036a	ba ff 00 00 64	 mov	 edx, 1677721855		; 640000ffH
  0036f	b9 03 00 00 00	 mov	 ecx, 3
  00374	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHI@Z ; ImGui::PushStyleColor

; 2596 :             ImGui::BeginChild("Red", ImVec2(200, 100), true, ImGuiWindowFlags_None);

  00379	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42c80000
  00381	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@43480000
  00389	48 8d 8d 94 0f
	00 00		 lea	 rcx, QWORD PTR $T91[rbp]
  00390	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00395	45 33 c9	 xor	 r9d, r9d
  00398	41 b0 01	 mov	 r8b, 1
  0039b	48 8b d0	 mov	 rdx, rax
  0039e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03PADCEAKC@Red?$AA@
  003a5	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z ; ImGui::BeginChild

; 2597 :             for (int n = 0; n < 50; n++)

  003aa	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR n$25[rbp], 0
  003b4	eb 0e		 jmp	 SHORT $LN16@ShowDemoWi
$LN14@ShowDemoWi:
  003b6	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR n$25[rbp]
  003bc	ff c0		 inc	 eax
  003be	89 85 c4 00 00
	00		 mov	 DWORD PTR n$25[rbp], eax
$LN16@ShowDemoWi:
  003c4	83 bd c4 00 00
	00 32		 cmp	 DWORD PTR n$25[rbp], 50	; 00000032H
  003cb	7d 14		 jge	 SHORT $LN15@ShowDemoWi

; 2598 :                 ImGui::Text("Some test %d", n);

  003cd	8b 95 c4 00 00
	00		 mov	 edx, DWORD PTR n$25[rbp]
  003d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@NPCHMHMN@Some?5test?5?$CFd?$AA@
  003da	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  003df	eb d5		 jmp	 SHORT $LN14@ShowDemoWi
$LN15@ShowDemoWi:

; 2599 :             ImGui::EndChild();

  003e1	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 2600 :             bool child_is_hovered = ImGui::IsItemHovered();

  003e6	33 c9		 xor	 ecx, ecx
  003e8	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  003ed	88 85 e4 00 00
	00		 mov	 BYTE PTR child_is_hovered$26[rbp], al

; 2601 :             ImVec2 child_rect_min = ImGui::GetItemRectMin();

  003f3	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR child_rect_min$27[rbp]
  003fa	e8 00 00 00 00	 call	 ?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMin

; 2602 :             ImVec2 child_rect_max = ImGui::GetItemRectMax();

  003ff	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR child_rect_max$28[rbp]
  00406	e8 00 00 00 00	 call	 ?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMax

; 2603 :             ImGui::PopStyleColor();

  0040b	b9 01 00 00 00	 mov	 ecx, 1
  00410	e8 00 00 00 00	 call	 ?PopStyleColor@ImGui@@YAXH@Z ; ImGui::PopStyleColor

; 2604 :             ImGui::Text("Hovered: %d", child_is_hovered);

  00415	0f b6 85 e4 00
	00 00		 movzx	 eax, BYTE PTR child_is_hovered$26[rbp]
  0041c	8b d0		 mov	 edx, eax
  0041e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@EMOADGAG@Hovered?3?5?$CFd?$AA@
  00425	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2605 :             ImGui::Text("Rect of child window is: (%.0f,%.0f) (%.0f,%.0f)", child_rect_min.x, child_rect_min.y, child_rect_max.x, child_rect_max.y);

  0042a	f3 0f 5a 85 2c
	01 00 00	 cvtss2sd xmm0, DWORD PTR child_rect_max$28[rbp+4]
  00432	f3 0f 5a 8d 28
	01 00 00	 cvtss2sd xmm1, DWORD PTR child_rect_max$28[rbp]
  0043a	f3 0f 5a 95 0c
	01 00 00	 cvtss2sd xmm2, DWORD PTR child_rect_min$27[rbp+4]
  00442	f3 0f 5a 9d 08
	01 00 00	 cvtss2sd xmm3, DWORD PTR child_rect_min$27[rbp]
  0044a	f2 0f 11 9d 28
	18 00 00	 movsd	 QWORD PTR tv237[rbp], xmm3
  00452	f2 0f 11 44 24
	20		 movsd	 QWORD PTR [rsp+32], xmm0
  00458	0f 28 d9	 movaps	 xmm3, xmm1
  0045b	66 49 0f 7e d9	 movq	 r9, xmm3
  00460	66 49 0f 7e d0	 movq	 r8, xmm2
  00465	f2 0f 10 85 28
	18 00 00	 movsd	 xmm0, QWORD PTR tv237[rbp]
  0046d	0f 28 c8	 movaps	 xmm1, xmm0
  00470	66 48 0f 7e ca	 movq	 rdx, xmm1
  00475	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@EENCLFAL@Rect?5of?5child?5window?5is?3?5?$CI?$CF?40f?0?$CF@
  0047c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2606 :         }
; 2607 : 
; 2608 :         ImGui::TreePop();

  00481	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN19@ShowDemoWi:

; 2609 :     }
; 2610 : 
; 2611 :     IMGUI_DEMO_MARKER("Layout/Widgets Width");

  00486	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0048e	74 26		 je	 SHORT $LN115@ShowDemoWi
  00490	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA
  00496	83 c0 5b	 add	 eax, 91			; 0000005bH
  00499	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  004a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BF@OGICDKID@Layout?1Widgets?5Width?$AA@
  004a7	8b d0		 mov	 edx, eax
  004a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  004b0	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN115@ShowDemoWi:
  004b6	33 c0		 xor	 eax, eax
  004b8	85 c0		 test	 eax, eax
  004ba	75 ca		 jne	 SHORT $LN19@ShowDemoWi

; 2612 :     if (ImGui::TreeNode("Widgets Width"))

  004bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@PINHNBJ@Widgets?5Width?$AA@
  004c3	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  004c8	0f b6 c0	 movzx	 eax, al
  004cb	85 c0		 test	 eax, eax
  004cd	0f 84 36 04 00
	00		 je	 $LN22@ShowDemoWi

; 2613 :     {
; 2614 :         static float f = 0.0f;
; 2615 :         static bool show_indented_items = true;
; 2616 :         ImGui::Checkbox("Show indented items", &show_indented_items);

  004d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?show_indented_items@?CM@??ShowDemoWindowLayout@@YAXXZ@4_NA
  004da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@LMCIIFLK@Show?5indented?5items?$AA@
  004e1	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 2617 : 
; 2618 :         // Use SetNextItemWidth() to set the width of a single upcoming item.
; 2619 :         // Use PushItemWidth()/PopItemWidth() to set the width of a group of items.
; 2620 :         // In real code use you'll probably want to choose width values that are proportional to your font size
; 2621 :         // e.g. Using '20.0f * GetFontSize()' as width instead of '200.0f', etc.
; 2622 : 
; 2623 :         ImGui::Text("SetNextItemWidth/PushItemWidth(100)");

  004e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@LPIOKAFF@SetNextItemWidth?1PushItemWidth?$CI1@
  004ed	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2624 :         ImGui::SameLine(); HelpMarker("Fixed width.");

  004f2	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  004fa	0f 57 c0	 xorps	 xmm0, xmm0
  004fd	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00502	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BANGKKCL@Fixed?5width?4?$AA@
  00509	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 2625 :         ImGui::PushItemWidth(100);

  0050e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00516	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth

; 2626 :         ImGui::DragFloat("float##1b", &f);

  0051b	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00523	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  0052a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0052f	0f 57 c0	 xorps	 xmm0, xmm0
  00532	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00538	0f 57 db	 xorps	 xmm3, xmm3
  0053b	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00543	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f@?CM@??ShowDemoWindowLayout@@YAXXZ@4MA
  0054a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09IIOGPIBJ@float?$CD?$CD1b?$AA@
  00551	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 2627 :         if (show_indented_items)

  00556	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_indented_items@?CM@??ShowDemoWindowLayout@@YAXXZ@4_NA
  0055d	85 c0		 test	 eax, eax
  0055f	74 4b		 je	 SHORT $LN117@ShowDemoWi

; 2628 :         {
; 2629 :             ImGui::Indent();

  00561	0f 57 c0	 xorps	 xmm0, xmm0
  00564	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent

; 2630 :             ImGui::DragFloat("float (indented)##1b", &f);

  00569	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00571	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  00578	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0057d	0f 57 c0	 xorps	 xmm0, xmm0
  00580	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00586	0f 57 db	 xorps	 xmm3, xmm3
  00589	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00591	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f@?CM@??ShowDemoWindowLayout@@YAXXZ@4MA
  00598	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@IPGFKEDH@float?5?$CIindented?$CJ?$CD?$CD1b?$AA@
  0059f	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 2631 :             ImGui::Unindent();

  005a4	0f 57 c0	 xorps	 xmm0, xmm0
  005a7	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent
$LN117@ShowDemoWi:

; 2632 :         }
; 2633 :         ImGui::PopItemWidth();

  005ac	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 2634 : 
; 2635 :         ImGui::Text("SetNextItemWidth/PushItemWidth(-100)");

  005b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@FHLMHJP@SetNextItemWidth?1PushItemWidth?$CI?9@
  005b8	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2636 :         ImGui::SameLine(); HelpMarker("Align to right edge minus 100");

  005bd	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  005c5	0f 57 c0	 xorps	 xmm0, xmm0
  005c8	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  005cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@IEOHBCBL@Align?5to?5right?5edge?5minus?5100?$AA@
  005d4	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 2637 :         ImGui::PushItemWidth(-100);

  005d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2c80000
  005e1	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth

; 2638 :         ImGui::DragFloat("float##2a", &f);

  005e6	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  005ee	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  005f5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  005fa	0f 57 c0	 xorps	 xmm0, xmm0
  005fd	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00603	0f 57 db	 xorps	 xmm3, xmm3
  00606	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  0060e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f@?CM@??ShowDemoWindowLayout@@YAXXZ@4MA
  00615	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09KBINBFID@float?$CD?$CD2a?$AA@
  0061c	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 2639 :         if (show_indented_items)

  00621	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_indented_items@?CM@??ShowDemoWindowLayout@@YAXXZ@4_NA
  00628	85 c0		 test	 eax, eax
  0062a	74 4b		 je	 SHORT $LN118@ShowDemoWi

; 2640 :         {
; 2641 :             ImGui::Indent();

  0062c	0f 57 c0	 xorps	 xmm0, xmm0
  0062f	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent

; 2642 :             ImGui::DragFloat("float (indented)##2b", &f);

  00634	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0063c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  00643	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00648	0f 57 c0	 xorps	 xmm0, xmm0
  0064b	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00651	0f 57 db	 xorps	 xmm3, xmm3
  00654	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  0065c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f@?CM@??ShowDemoWindowLayout@@YAXXZ@4MA
  00663	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@INCDBKGO@float?5?$CIindented?$CJ?$CD?$CD2b?$AA@
  0066a	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 2643 :             ImGui::Unindent();

  0066f	0f 57 c0	 xorps	 xmm0, xmm0
  00672	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent
$LN118@ShowDemoWi:

; 2644 :         }
; 2645 :         ImGui::PopItemWidth();

  00677	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 2646 : 
; 2647 :         ImGui::Text("SetNextItemWidth/PushItemWidth(GetContentRegionAvail().x * 0.5f)");

  0067c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EB@LHGGMOLL@SetNextItemWidth?1PushItemWidth?$CIG@
  00683	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2648 :         ImGui::SameLine(); HelpMarker("Half of available width.\n(~ right-cursor_pos)\n(works within a column set)");

  00688	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00690	0f 57 c0	 xorps	 xmm0, xmm0
  00693	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00698	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EK@LHEEJHHB@Half?5of?5available?5width?4?6?$CI?$HO?5righ@
  0069f	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 2649 :         ImGui::PushItemWidth(ImGui::GetContentRegionAvail().x * 0.5f);

  006a4	48 8d 8d b4 0f
	00 00		 lea	 rcx, QWORD PTR $T92[rbp]
  006ab	e8 00 00 00 00	 call	 ?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
  006b0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  006b4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  006bc	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth

; 2650 :         ImGui::DragFloat("float##3a", &f);

  006c1	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  006c9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  006d0	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  006d5	0f 57 c0	 xorps	 xmm0, xmm0
  006d8	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  006de	0f 57 db	 xorps	 xmm3, xmm3
  006e1	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  006e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f@?CM@??ShowDemoWindowLayout@@YAXXZ@4MA
  006f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09KAEPHPLE@float?$CD?$CD3a?$AA@
  006f7	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 2651 :         if (show_indented_items)

  006fc	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_indented_items@?CM@??ShowDemoWindowLayout@@YAXXZ@4_NA
  00703	85 c0		 test	 eax, eax
  00705	74 4b		 je	 SHORT $LN119@ShowDemoWi

; 2652 :         {
; 2653 :             ImGui::Indent();

  00707	0f 57 c0	 xorps	 xmm0, xmm0
  0070a	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent

; 2654 :             ImGui::DragFloat("float (indented)##3b", &f);

  0070f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00717	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  0071e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00723	0f 57 c0	 xorps	 xmm0, xmm0
  00726	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0072c	0f 57 db	 xorps	 xmm3, xmm3
  0072f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00737	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f@?CM@??ShowDemoWindowLayout@@YAXXZ@4MA
  0073e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@IMOBHAFJ@float?5?$CIindented?$CJ?$CD?$CD3b?$AA@
  00745	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 2655 :             ImGui::Unindent();

  0074a	0f 57 c0	 xorps	 xmm0, xmm0
  0074d	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent
$LN119@ShowDemoWi:

; 2656 :         }
; 2657 :         ImGui::PopItemWidth();

  00752	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 2658 : 
; 2659 :         ImGui::Text("SetNextItemWidth/PushItemWidth(-GetContentRegionAvail().x * 0.5f)");

  00757	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EC@PNELNOAD@SetNextItemWidth?1PushItemWidth?$CI?9@
  0075e	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2660 :         ImGui::SameLine(); HelpMarker("Align to right edge minus half");

  00763	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0076b	0f 57 c0	 xorps	 xmm0, xmm0
  0076e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00773	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@JKFCPAHG@Align?5to?5right?5edge?5minus?5half?$AA@
  0077a	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 2661 :         ImGui::PushItemWidth(-ImGui::GetContentRegionAvail().x * 0.5f);

  0077f	48 8d 8d d4 0f
	00 00		 lea	 rcx, QWORD PTR $T93[rbp]
  00786	e8 00 00 00 00	 call	 ?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
  0078b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  0078f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00796	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0079e	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth

; 2662 :         ImGui::DragFloat("float##4a", &f);

  007a3	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  007ab	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  007b2	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  007b7	0f 57 c0	 xorps	 xmm0, xmm0
  007ba	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  007c0	0f 57 db	 xorps	 xmm3, xmm3
  007c3	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  007cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f@?CM@??ShowDemoWindowLayout@@YAXXZ@4MA
  007d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09KFAAGJDB@float?$CD?$CD4a?$AA@
  007d9	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 2663 :         if (show_indented_items)

  007de	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_indented_items@?CM@??ShowDemoWindowLayout@@YAXXZ@4_NA
  007e5	85 c0		 test	 eax, eax
  007e7	74 4b		 je	 SHORT $LN120@ShowDemoWi

; 2664 :         {
; 2665 :             ImGui::Indent();

  007e9	0f 57 c0	 xorps	 xmm0, xmm0
  007ec	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent

; 2666 :             ImGui::DragFloat("float (indented)##4b", &f);

  007f1	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  007f9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  00800	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00805	0f 57 c0	 xorps	 xmm0, xmm0
  00808	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0080e	0f 57 db	 xorps	 xmm3, xmm3
  00811	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00819	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f@?CM@??ShowDemoWindowLayout@@YAXXZ@4MA
  00820	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@IJKOGGNM@float?5?$CIindented?$CJ?$CD?$CD4b?$AA@
  00827	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 2667 :             ImGui::Unindent();

  0082c	0f 57 c0	 xorps	 xmm0, xmm0
  0082f	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent
$LN120@ShowDemoWi:

; 2668 :         }
; 2669 :         ImGui::PopItemWidth();

  00834	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 2670 : 
; 2671 :         // Demonstrate using PushItemWidth to surround three items.
; 2672 :         // Calling SetNextItemWidth() before each of them would have the same effect.
; 2673 :         ImGui::Text("SetNextItemWidth/PushItemWidth(-FLT_MIN)");

  00839	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@HIOADNAC@SetNextItemWidth?1PushItemWidth?$CI?9@
  00840	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2674 :         ImGui::SameLine(); HelpMarker("Align to right edge");

  00845	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0084d	0f 57 c0	 xorps	 xmm0, xmm0
  00850	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00855	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@CLIHJLDF@Align?5to?5right?5edge?$AA@
  0085c	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 2675 :         ImGui::PushItemWidth(-FLT_MIN);

  00861	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80800000
  00869	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth

; 2676 :         ImGui::DragFloat("##float5a", &f);

  0086e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00876	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  0087d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00882	0f 57 c0	 xorps	 xmm0, xmm0
  00885	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0088b	0f 57 db	 xorps	 xmm3, xmm3
  0088e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00896	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f@?CM@??ShowDemoWindowLayout@@YAXXZ@4MA
  0089d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09LOBKLHLF@?$CD?$CDfloat5a?$AA@
  008a4	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 2677 :         if (show_indented_items)

  008a9	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_indented_items@?CM@??ShowDemoWindowLayout@@YAXXZ@4_NA
  008b0	85 c0		 test	 eax, eax
  008b2	74 4b		 je	 SHORT $LN121@ShowDemoWi

; 2678 :         {
; 2679 :             ImGui::Indent();

  008b4	0f 57 c0	 xorps	 xmm0, xmm0
  008b7	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent

; 2680 :             ImGui::DragFloat("float (indented)##5b", &f);

  008bc	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  008c4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  008cb	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  008d0	0f 57 c0	 xorps	 xmm0, xmm0
  008d3	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  008d9	0f 57 db	 xorps	 xmm3, xmm3
  008dc	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  008e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f@?CM@??ShowDemoWindowLayout@@YAXXZ@4MA
  008eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@IIGMAMOL@float?5?$CIindented?$CJ?$CD?$CD5b?$AA@
  008f2	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 2681 :             ImGui::Unindent();

  008f7	0f 57 c0	 xorps	 xmm0, xmm0
  008fa	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent
$LN121@ShowDemoWi:

; 2682 :         }
; 2683 :         ImGui::PopItemWidth();

  008ff	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 2684 : 
; 2685 :         ImGui::TreePop();

  00904	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN22@ShowDemoWi:

; 2686 :     }
; 2687 : 
; 2688 :     IMGUI_DEMO_MARKER("Layout/Basic Horizontal Layout");

  00909	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00911	74 28		 je	 SHORT $LN122@ShowDemoWi
  00913	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA
  00919	05 a8 00 00 00	 add	 eax, 168		; 000000a8H
  0091e	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00925	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BP@OIAKENPD@Layout?1Basic?5Horizontal?5Layout?$AA@
  0092c	8b d0		 mov	 edx, eax
  0092e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00935	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN122@ShowDemoWi:
  0093b	33 c0		 xor	 eax, eax
  0093d	85 c0		 test	 eax, eax
  0093f	75 c8		 jne	 SHORT $LN22@ShowDemoWi

; 2689 :     if (ImGui::TreeNode("Basic Horizontal Layout"))

  00941	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@MLGIMKHF@Basic?5Horizontal?5Layout?$AA@
  00948	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  0094d	0f b6 c0	 movzx	 eax, al
  00950	85 c0		 test	 eax, eax
  00952	0f 84 3a 07 00
	00		 je	 $LN46@ShowDemoWi

; 2690 :     {
; 2691 :         ImGui::TextWrapped("(Use ImGui::SameLine() to keep adding items to the right of the preceding item)");

  00958	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FA@GPJJJDFK@?$CIUse?5ImGui?3?3SameLine?$CI?$CJ?5to?5keep?5a@
  0095f	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped
$LN25@ShowDemoWi:

; 2692 : 
; 2693 :         // Text
; 2694 :         IMGUI_DEMO_MARKER("Layout/Basic Horizontal Layout/SameLine");

  00964	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0096c	74 28		 je	 SHORT $LN124@ShowDemoWi
  0096e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA
  00974	05 ae 00 00 00	 add	 eax, 174		; 000000aeH
  00979	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00980	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CI@JJPKKMMM@Layout?1Basic?5Horizontal?5Layout?1S@
  00987	8b d0		 mov	 edx, eax
  00989	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00990	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN124@ShowDemoWi:
  00996	33 c0		 xor	 eax, eax
  00998	85 c0		 test	 eax, eax
  0099a	75 c8		 jne	 SHORT $LN25@ShowDemoWi

; 2695 :         ImGui::Text("Two items: Hello"); ImGui::SameLine();

  0099c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@CPONELNL@Two?5items?3?5Hello?$AA@
  009a3	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  009a8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  009b0	0f 57 c0	 xorps	 xmm0, xmm0
  009b3	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2696 :         ImGui::TextColored(ImVec4(1,1,0,1), "Sailor");

  009b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009c0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  009c6	0f 57 db	 xorps	 xmm3, xmm3
  009c9	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  009d1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  009d9	48 8d 8d f4 0f
	00 00		 lea	 rcx, QWORD PTR $T94[rbp]
  009e0	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  009e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06IFGMFLK@Sailor?$AA@
  009ec	48 8b c8	 mov	 rcx, rax
  009ef	e8 00 00 00 00	 call	 ?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ ; ImGui::TextColored

; 2697 : 
; 2698 :         // Adjust spacing
; 2699 :         ImGui::Text("More spacing: Hello"); ImGui::SameLine(0, 20);

  009f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@BBDLDECN@More?5spacing?3?5Hello?$AA@
  009fb	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  00a00	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41a00000
  00a08	0f 57 c0	 xorps	 xmm0, xmm0
  00a0b	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2700 :         ImGui::TextColored(ImVec4(1,1,0,1), "Sailor");

  00a10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a18	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00a1e	0f 57 db	 xorps	 xmm3, xmm3
  00a21	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00a29	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00a31	48 8d 8d 24 10
	00 00		 lea	 rcx, QWORD PTR $T95[rbp]
  00a38	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00a3d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06IFGMFLK@Sailor?$AA@
  00a44	48 8b c8	 mov	 rcx, rax
  00a47	e8 00 00 00 00	 call	 ?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ ; ImGui::TextColored

; 2701 : 
; 2702 :         // Button
; 2703 :         ImGui::AlignTextToFramePadding();

  00a4c	e8 00 00 00 00	 call	 ?AlignTextToFramePadding@ImGui@@YAXXZ ; ImGui::AlignTextToFramePadding

; 2704 :         ImGui::Text("Normal buttons"); ImGui::SameLine();

  00a51	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@PEKJFFJL@Normal?5buttons?$AA@
  00a58	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  00a5d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00a65	0f 57 c0	 xorps	 xmm0, xmm0
  00a68	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2705 :         ImGui::Button("Banana"); ImGui::SameLine();

  00a6d	0f 57 d2	 xorps	 xmm2, xmm2
  00a70	0f 57 c9	 xorps	 xmm1, xmm1
  00a73	48 8d 8d 54 10
	00 00		 lea	 rcx, QWORD PTR $T96[rbp]
  00a7a	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00a7f	48 8b d0	 mov	 rdx, rax
  00a82	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OJJIHNKI@Banana?$AA@
  00a89	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00a8e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00a96	0f 57 c0	 xorps	 xmm0, xmm0
  00a99	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2706 :         ImGui::Button("Apple"); ImGui::SameLine();

  00a9e	0f 57 d2	 xorps	 xmm2, xmm2
  00aa1	0f 57 c9	 xorps	 xmm1, xmm1
  00aa4	48 8d 8d 74 10
	00 00		 lea	 rcx, QWORD PTR $T97[rbp]
  00aab	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00ab0	48 8b d0	 mov	 rdx, rax
  00ab3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05EBJDGKGA@Apple?$AA@
  00aba	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00abf	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00ac7	0f 57 c0	 xorps	 xmm0, xmm0
  00aca	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2707 :         ImGui::Button("Corniflower");

  00acf	0f 57 d2	 xorps	 xmm2, xmm2
  00ad2	0f 57 c9	 xorps	 xmm1, xmm1
  00ad5	48 8d 8d 94 10
	00 00		 lea	 rcx, QWORD PTR $T98[rbp]
  00adc	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00ae1	48 8b d0	 mov	 rdx, rax
  00ae4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@IAINFGJF@Corniflower?$AA@
  00aeb	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2708 : 
; 2709 :         // Button
; 2710 :         ImGui::Text("Small buttons"); ImGui::SameLine();

  00af0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@JIDOKED@Small?5buttons?$AA@
  00af7	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  00afc	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00b04	0f 57 c0	 xorps	 xmm0, xmm0
  00b07	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2711 :         ImGui::SmallButton("Like this one"); ImGui::SameLine();

  00b0c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DOOOCPOJ@Like?5this?5one?$AA@
  00b13	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton
  00b18	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00b20	0f 57 c0	 xorps	 xmm0, xmm0
  00b23	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2712 :         ImGui::Text("can fit within a text block.");

  00b28	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@FOPDMCKC@can?5fit?5within?5a?5text?5block?4?$AA@
  00b2f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN28@ShowDemoWi:

; 2713 : 
; 2714 :         // Aligned to arbitrary position. Easy/cheap column.
; 2715 :         IMGUI_DEMO_MARKER("Layout/Basic Horizontal Layout/SameLine (with offset)");

  00b34	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00b3c	74 28		 je	 SHORT $LN125@ShowDemoWi
  00b3e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA
  00b44	05 c3 00 00 00	 add	 eax, 195		; 000000c3H
  00b49	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00b50	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DG@PNPLOBCG@Layout?1Basic?5Horizontal?5Layout?1S@
  00b57	8b d0		 mov	 edx, eax
  00b59	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00b60	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN125@ShowDemoWi:
  00b66	33 c0		 xor	 eax, eax
  00b68	85 c0		 test	 eax, eax
  00b6a	75 c8		 jne	 SHORT $LN28@ShowDemoWi

; 2716 :         ImGui::Text("Aligned");

  00b6c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07KDGBBGOD@Aligned?$AA@
  00b73	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2717 :         ImGui::SameLine(150); ImGui::Text("x=150");

  00b78	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00b80	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43160000
  00b88	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00b8d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05EFIMCDIL@x?$DN150?$AA@
  00b94	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2718 :         ImGui::SameLine(300); ImGui::Text("x=300");

  00b99	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00ba1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43960000
  00ba9	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00bae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OJEOCJOL@x?$DN300?$AA@
  00bb5	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2719 :         ImGui::Text("Aligned");

  00bba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07KDGBBGOD@Aligned?$AA@
  00bc1	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2720 :         ImGui::SameLine(150); ImGui::SmallButton("x=150");

  00bc6	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00bce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43160000
  00bd6	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00bdb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05EFIMCDIL@x?$DN150?$AA@
  00be2	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton

; 2721 :         ImGui::SameLine(300); ImGui::SmallButton("x=300");

  00be7	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00bef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43960000
  00bf7	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00bfc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OJEOCJOL@x?$DN300?$AA@
  00c03	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton
$LN31@ShowDemoWi:

; 2722 : 
; 2723 :         // Checkbox
; 2724 :         IMGUI_DEMO_MARKER("Layout/Basic Horizontal Layout/SameLine (more)");

  00c08	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00c10	74 28		 je	 SHORT $LN126@ShowDemoWi
  00c12	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA
  00c18	05 cc 00 00 00	 add	 eax, 204		; 000000ccH
  00c1d	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00c24	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CP@MGOPNFDK@Layout?1Basic?5Horizontal?5Layout?1S@
  00c2b	8b d0		 mov	 edx, eax
  00c2d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00c34	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN126@ShowDemoWi:
  00c3a	33 c0		 xor	 eax, eax
  00c3c	85 c0		 test	 eax, eax
  00c3e	75 c8		 jne	 SHORT $LN31@ShowDemoWi

; 2725 :         static bool c1 = false, c2 = false, c3 = false, c4 = false;
; 2726 :         ImGui::Checkbox("My", &c1); ImGui::SameLine();

  00c40	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?c1@?EC@??ShowDemoWindowLayout@@YAXXZ@4_NA
  00c47	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02IGABPKMB@My?$AA@
  00c4e	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox
  00c53	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00c5b	0f 57 c0	 xorps	 xmm0, xmm0
  00c5e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2727 :         ImGui::Checkbox("Tailor", &c2); ImGui::SameLine();

  00c63	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?c2@?EC@??ShowDemoWindowLayout@@YAXXZ@4_NA
  00c6a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06MNPBPLDE@Tailor?$AA@
  00c71	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox
  00c76	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00c7e	0f 57 c0	 xorps	 xmm0, xmm0
  00c81	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2728 :         ImGui::Checkbox("Is", &c3); ImGui::SameLine();

  00c86	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?c3@?EC@??ShowDemoWindowLayout@@YAXXZ@4_NA
  00c8d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02HLOHLKJH@Is?$AA@
  00c94	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox
  00c99	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00ca1	0f 57 c0	 xorps	 xmm0, xmm0
  00ca4	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2729 :         ImGui::Checkbox("Rich", &c4);

  00ca9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?c4@?EC@??ShowDemoWindowLayout@@YAXXZ@4_NA
  00cb0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04NKJFLIBG@Rich?$AA@
  00cb7	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 2730 : 
; 2731 :         // Various
; 2732 :         static float f0 = 1.0f, f1 = 2.0f, f2 = 3.0f;
; 2733 :         ImGui::PushItemWidth(80);

  00cbc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42a00000
  00cc4	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth

; 2734 :         const char* items[] = { "AAAA", "BBBB", "CCCC", "DDDD" };

  00cc9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04OHNMNPPA@AAAA?$AA@
  00cd0	48 89 85 48 01
	00 00		 mov	 QWORD PTR items$29[rbp], rax
  00cd7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04JLKCOHFE@BBBB?$AA@
  00cde	48 89 85 50 01
	00 00		 mov	 QWORD PTR items$29[rbp+8], rax
  00ce5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GKHPCPH@CCCC?$AA@
  00cec	48 89 85 58 01
	00 00		 mov	 QWORD PTR items$29[rbp+16], rax
  00cf3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GDFOJGBM@DDDD?$AA@
  00cfa	48 89 85 60 01
	00 00		 mov	 QWORD PTR items$29[rbp+24], rax

; 2735 :         static int item = -1;
; 2736 :         ImGui::Combo("Combo", &item, items, IM_ARRAYSIZE(items)); ImGui::SameLine();

  00d01	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  00d09	41 b9 04 00 00
	00		 mov	 r9d, 4
  00d0f	4c 8d 85 48 01
	00 00		 lea	 r8, QWORD PTR items$29[rbp]
  00d16	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?item@?EC@??ShowDemoWindowLayout@@YAXXZ@4HA
  00d1d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LMOJIBPK@Combo?$AA@
  00d24	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z ; ImGui::Combo
  00d29	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00d31	0f 57 c0	 xorps	 xmm0, xmm0
  00d34	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2737 :         ImGui::SliderFloat("X", &f0, 0.0f, 5.0f); ImGui::SameLine();

  00d39	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00d41	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  00d48	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d4d	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@40a00000
  00d55	0f 57 d2	 xorps	 xmm2, xmm2
  00d58	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f0@?EC@??ShowDemoWindowLayout@@YAXXZ@4MA
  00d5f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01MMEEDKFM@X?$AA@
  00d66	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat
  00d6b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00d73	0f 57 c0	 xorps	 xmm0, xmm0
  00d76	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2738 :         ImGui::SliderFloat("Y", &f1, 0.0f, 5.0f); ImGui::SameLine();

  00d7b	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00d83	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  00d8a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d8f	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@40a00000
  00d97	0f 57 d2	 xorps	 xmm2, xmm2
  00d9a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f1@?EC@??ShowDemoWindowLayout@@YAXXZ@4MA
  00da1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01NFFPALBN@Y?$AA@
  00da8	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat
  00dad	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00db5	0f 57 c0	 xorps	 xmm0, xmm0
  00db8	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2739 :         ImGui::SliderFloat("Z", &f2, 0.0f, 5.0f);

  00dbd	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00dc5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  00dcc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00dd1	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@40a00000
  00dd9	0f 57 d2	 xorps	 xmm2, xmm2
  00ddc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f2@?EC@??ShowDemoWindowLayout@@YAXXZ@4MA
  00de3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01POHCFINO@Z?$AA@
  00dea	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 2740 :         ImGui::PopItemWidth();

  00def	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 2741 : 
; 2742 :         ImGui::PushItemWidth(80);

  00df4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42a00000
  00dfc	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth

; 2743 :         ImGui::Text("Lists:");

  00e01	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OHPCMELK@Lists?3?$AA@
  00e08	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2744 :         static int selection[4] = { 0, 1, 2, 3 };
; 2745 :         for (int i = 0; i < 4; i++)

  00e0d	c7 85 84 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$30[rbp], 0
  00e17	eb 0e		 jmp	 SHORT $LN34@ShowDemoWi
$LN32@ShowDemoWi:
  00e19	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR i$30[rbp]
  00e1f	ff c0		 inc	 eax
  00e21	89 85 84 01 00
	00		 mov	 DWORD PTR i$30[rbp], eax
$LN34@ShowDemoWi:
  00e27	83 bd 84 01 00
	00 04		 cmp	 DWORD PTR i$30[rbp], 4
  00e2e	7d 61		 jge	 SHORT $LN33@ShowDemoWi

; 2746 :         {
; 2747 :             if (i > 0) ImGui::SameLine();

  00e30	83 bd 84 01 00
	00 00		 cmp	 DWORD PTR i$30[rbp], 0
  00e37	7e 10		 jle	 SHORT $LN127@ShowDemoWi
  00e39	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00e41	0f 57 c0	 xorps	 xmm0, xmm0
  00e44	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
$LN127@ShowDemoWi:

; 2748 :             ImGui::PushID(i);

  00e49	8b 8d 84 01 00
	00		 mov	 ecx, DWORD PTR i$30[rbp]
  00e4f	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 2749 :             ImGui::ListBox("", &selection[i], items, IM_ARRAYSIZE(items));

  00e54	48 63 85 84 01
	00 00		 movsxd	 rax, DWORD PTR i$30[rbp]
  00e5b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selection@?EC@??ShowDemoWindowLayout@@YAXXZ@4PAHA
  00e62	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00e66	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  00e6e	41 b9 04 00 00
	00		 mov	 r9d, 4
  00e74	4c 8d 85 48 01
	00 00		 lea	 r8, QWORD PTR items$29[rbp]
  00e7b	48 8b d0	 mov	 rdx, rax
  00e7e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00e85	e8 00 00 00 00	 call	 ?ListBox@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z ; ImGui::ListBox

; 2750 :             ImGui::PopID();

  00e8a	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 2751 :             //if (ImGui::IsItemHovered()) ImGui::SetTooltip("ListBox %d hovered", i);
; 2752 :         }

  00e8f	eb 88		 jmp	 SHORT $LN32@ShowDemoWi
$LN33@ShowDemoWi:

; 2753 :         ImGui::PopItemWidth();

  00e91	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth
$LN37@ShowDemoWi:

; 2754 : 
; 2755 :         // Dummy
; 2756 :         IMGUI_DEMO_MARKER("Layout/Basic Horizontal Layout/Dummy");

  00e96	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00e9e	74 28		 je	 SHORT $LN128@ShowDemoWi
  00ea0	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA
  00ea6	05 ec 00 00 00	 add	 eax, 236		; 000000ecH
  00eab	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00eb2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CF@BAJJENJB@Layout?1Basic?5Horizontal?5Layout?1D@
  00eb9	8b d0		 mov	 edx, eax
  00ebb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00ec2	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN128@ShowDemoWi:
  00ec8	33 c0		 xor	 eax, eax
  00eca	85 c0		 test	 eax, eax
  00ecc	75 c8		 jne	 SHORT $LN37@ShowDemoWi

; 2757 :         ImVec2 button_sz(40, 40);

  00ece	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42200000
  00ed6	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42200000
  00ede	48 8d 8d a8 01
	00 00		 lea	 rcx, QWORD PTR button_sz$31[rbp]
  00ee5	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 2758 :         ImGui::Button("A", button_sz); ImGui::SameLine();

  00eea	48 8d 95 a8 01
	00 00		 lea	 rdx, QWORD PTR button_sz$31[rbp]
  00ef1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01FHEEJDEE@A?$AA@
  00ef8	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00efd	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00f05	0f 57 c0	 xorps	 xmm0, xmm0
  00f08	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2759 :         ImGui::Dummy(button_sz); ImGui::SameLine();

  00f0d	48 8d 8d a8 01
	00 00		 lea	 rcx, QWORD PTR button_sz$31[rbp]
  00f14	e8 00 00 00 00	 call	 ?Dummy@ImGui@@YAXAEBUImVec2@@@Z ; ImGui::Dummy
  00f19	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00f21	0f 57 c0	 xorps	 xmm0, xmm0
  00f24	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2760 :         ImGui::Button("B", button_sz);

  00f29	48 8d 95 a8 01
	00 00		 lea	 rdx, QWORD PTR button_sz$31[rbp]
  00f30	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01HMGJMAIH@B?$AA@
  00f37	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
$LN40@ShowDemoWi:

; 2761 : 
; 2762 :         // Manually wrapping
; 2763 :         // (we should eventually provide this as an automatic layout feature, but for now you can do it manually)
; 2764 :         IMGUI_DEMO_MARKER("Layout/Basic Horizontal Layout/Manual wrapping");

  00f3c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00f44	74 28		 je	 SHORT $LN129@ShowDemoWi
  00f46	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA
  00f4c	05 f4 00 00 00	 add	 eax, 244		; 000000f4H
  00f51	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00f58	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CP@EDHPDNEN@Layout?1Basic?5Horizontal?5Layout?1M@
  00f5f	8b d0		 mov	 edx, eax
  00f61	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00f68	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN129@ShowDemoWi:
  00f6e	33 c0		 xor	 eax, eax
  00f70	85 c0		 test	 eax, eax
  00f72	75 c8		 jne	 SHORT $LN40@ShowDemoWi

; 2765 :         ImGui::Text("Manual wrapping:");

  00f74	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@EBMAGHCE@Manual?5wrapping?3?$AA@
  00f7b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2766 :         ImGuiStyle& style = ImGui::GetStyle();

  00f80	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  00f85	48 89 85 c8 01
	00 00		 mov	 QWORD PTR style$32[rbp], rax

; 2767 :         int buttons_count = 20;

  00f8c	c7 85 e4 01 00
	00 14 00 00 00	 mov	 DWORD PTR buttons_count$33[rbp], 20

; 2768 :         float window_visible_x2 = ImGui::GetWindowPos().x + ImGui::GetWindowContentRegionMax().x;

  00f96	48 8d 8d b4 10
	00 00		 lea	 rcx, QWORD PTR $T99[rbp]
  00f9d	e8 00 00 00 00	 call	 ?GetWindowPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetWindowPos
  00fa2	48 89 85 28 18
	00 00		 mov	 QWORD PTR tv662[rbp], rax
  00fa9	48 8d 8d d4 10
	00 00		 lea	 rcx, QWORD PTR $T100[rbp]
  00fb0	e8 00 00 00 00	 call	 ?GetWindowContentRegionMax@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetWindowContentRegionMax
  00fb5	48 8b 8d 28 18
	00 00		 mov	 rcx, QWORD PTR tv662[rbp]
  00fbc	f3 0f 10 01	 movss	 xmm0, DWORD PTR [rcx]
  00fc0	f3 0f 58 00	 addss	 xmm0, DWORD PTR [rax]
  00fc4	f3 0f 11 85 04
	02 00 00	 movss	 DWORD PTR window_visible_x2$34[rbp], xmm0

; 2769 :         for (int n = 0; n < buttons_count; n++)

  00fcc	c7 85 24 02 00
	00 00 00 00 00	 mov	 DWORD PTR n$35[rbp], 0
  00fd6	eb 0e		 jmp	 SHORT $LN43@ShowDemoWi
$LN41@ShowDemoWi:
  00fd8	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR n$35[rbp]
  00fde	ff c0		 inc	 eax
  00fe0	89 85 24 02 00
	00		 mov	 DWORD PTR n$35[rbp], eax
$LN43@ShowDemoWi:
  00fe6	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR buttons_count$33[rbp]
  00fec	39 85 24 02 00
	00		 cmp	 DWORD PTR n$35[rbp], eax
  00ff2	0f 8d 95 00 00
	00		 jge	 $LN42@ShowDemoWi

; 2770 :         {
; 2771 :             ImGui::PushID(n);

  00ff8	8b 8d 24 02 00
	00		 mov	 ecx, DWORD PTR n$35[rbp]
  00ffe	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 2772 :             ImGui::Button("Box", button_sz);

  01003	48 8d 95 a8 01
	00 00		 lea	 rdx, QWORD PTR button_sz$31[rbp]
  0100a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03ELMLMPLG@Box?$AA@
  01011	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2773 :             float last_button_x2 = ImGui::GetItemRectMax().x;

  01016	48 8d 8d f4 10
	00 00		 lea	 rcx, QWORD PTR $T101[rbp]
  0101d	e8 00 00 00 00	 call	 ?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMax
  01022	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  01026	f3 0f 11 85 44
	02 00 00	 movss	 DWORD PTR last_button_x2$36[rbp], xmm0

; 2774 :             float next_button_x2 = last_button_x2 + style.ItemSpacing.x + button_sz.x; // Expected position if next button was on same line

  0102e	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR style$32[rbp]
  01035	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR last_button_x2$36[rbp]
  0103d	f3 0f 58 40 4c	 addss	 xmm0, DWORD PTR [rax+76]
  01042	f3 0f 58 85 a8
	01 00 00	 addss	 xmm0, DWORD PTR button_sz$31[rbp]
  0104a	f3 0f 11 85 64
	02 00 00	 movss	 DWORD PTR next_button_x2$37[rbp], xmm0

; 2775 :             if (n + 1 < buttons_count && next_button_x2 < window_visible_x2)

  01052	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR n$35[rbp]
  01058	ff c0		 inc	 eax
  0105a	3b 85 e4 01 00
	00		 cmp	 eax, DWORD PTR buttons_count$33[rbp]
  01060	7d 21		 jge	 SHORT $LN130@ShowDemoWi
  01062	f3 0f 10 85 04
	02 00 00	 movss	 xmm0, DWORD PTR window_visible_x2$34[rbp]
  0106a	0f 2f 85 64 02
	00 00		 comiss	 xmm0, DWORD PTR next_button_x2$37[rbp]
  01071	76 10		 jbe	 SHORT $LN130@ShowDemoWi

; 2776 :                 ImGui::SameLine();

  01073	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0107b	0f 57 c0	 xorps	 xmm0, xmm0
  0107e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
$LN130@ShowDemoWi:

; 2777 :             ImGui::PopID();

  01083	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 2778 :         }

  01088	e9 4b ff ff ff	 jmp	 $LN41@ShowDemoWi
$LN42@ShowDemoWi:

; 2779 : 
; 2780 :         ImGui::TreePop();

  0108d	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN46@ShowDemoWi:

; 2781 :     }
; 2782 : 
; 2783 :     IMGUI_DEMO_MARKER("Layout/Groups");

  01092	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0109a	74 28		 je	 SHORT $LN131@ShowDemoWi
  0109c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA
  010a2	05 07 01 00 00	 add	 eax, 263		; 00000107H
  010a7	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  010ae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@KBPNIDDB@Layout?1Groups?$AA@
  010b5	8b d0		 mov	 edx, eax
  010b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  010be	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN131@ShowDemoWi:
  010c4	33 c0		 xor	 eax, eax
  010c6	85 c0		 test	 eax, eax
  010c8	75 c8		 jne	 SHORT $LN46@ShowDemoWi

; 2784 :     if (ImGui::TreeNode("Groups"))

  010ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06LCLFDFOL@Groups?$AA@
  010d1	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  010d6	0f b6 c0	 movzx	 eax, al
  010d9	85 c0		 test	 eax, eax
  010db	0f 84 f8 02 00
	00		 je	 $LN49@ShowDemoWi

; 2785 :     {
; 2786 :         HelpMarker(

  010e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0NJ@BBEJCFPH@BeginGroup?$CI?$CJ?5basically?5locks?5the@
  010e8	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 2787 :             "BeginGroup() basically locks the horizontal position for new line. "
; 2788 :             "EndGroup() bundles the whole group so that you can use \"item\" functions such as "
; 2789 :             "IsItemHovered()/IsItemActive() or SameLine() etc. on the whole group.");
; 2790 :         ImGui::BeginGroup();

  010ed	e8 00 00 00 00	 call	 ?BeginGroup@ImGui@@YAXXZ ; ImGui::BeginGroup

; 2791 :         {
; 2792 :             ImGui::BeginGroup();

  010f2	e8 00 00 00 00	 call	 ?BeginGroup@ImGui@@YAXXZ ; ImGui::BeginGroup

; 2793 :             ImGui::Button("AAA");

  010f7	0f 57 d2	 xorps	 xmm2, xmm2
  010fa	0f 57 c9	 xorps	 xmm1, xmm1
  010fd	48 8d 8d 14 11
	00 00		 lea	 rcx, QWORD PTR $T102[rbp]
  01104	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01109	48 8b d0	 mov	 rdx, rax
  0110c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03GFCJIGAI@AAA?$AA@
  01113	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2794 :             ImGui::SameLine();

  01118	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01120	0f 57 c0	 xorps	 xmm0, xmm0
  01123	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2795 :             ImGui::Button("BBB");

  01128	0f 57 d2	 xorps	 xmm2, xmm2
  0112b	0f 57 c9	 xorps	 xmm1, xmm1
  0112e	48 8d 8d 34 11
	00 00		 lea	 rcx, QWORD PTR $T103[rbp]
  01135	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0113a	48 8b d0	 mov	 rdx, rax
  0113d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03FOPHMEHM@BBB?$AA@
  01144	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2796 :             ImGui::SameLine();

  01149	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01151	0f 57 c0	 xorps	 xmm0, xmm0
  01154	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2797 :             ImGui::BeginGroup();

  01159	e8 00 00 00 00	 call	 ?BeginGroup@ImGui@@YAXXZ ; ImGui::BeginGroup

; 2798 :             ImGui::Button("CCC");

  0115e	0f 57 d2	 xorps	 xmm2, xmm2
  01161	0f 57 c9	 xorps	 xmm1, xmm1
  01164	48 8d 8d 54 11
	00 00		 lea	 rcx, QWORD PTR $T104[rbp]
  0116b	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01170	48 8b d0	 mov	 rdx, rax
  01173	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03POJCPIGP@CCC?$AA@
  0117a	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2799 :             ImGui::Button("DDD");

  0117f	0f 57 d2	 xorps	 xmm2, xmm2
  01182	0f 57 c9	 xorps	 xmm1, xmm1
  01185	48 8d 8d 74 11
	00 00		 lea	 rcx, QWORD PTR $T105[rbp]
  0118c	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01191	48 8b d0	 mov	 rdx, rax
  01194	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CJELEAJE@DDD?$AA@
  0119b	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2800 :             ImGui::EndGroup();

  011a0	e8 00 00 00 00	 call	 ?EndGroup@ImGui@@YAXXZ	; ImGui::EndGroup

; 2801 :             ImGui::SameLine();

  011a5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  011ad	0f 57 c0	 xorps	 xmm0, xmm0
  011b0	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2802 :             ImGui::Button("EEE");

  011b5	0f 57 d2	 xorps	 xmm2, xmm2
  011b8	0f 57 c9	 xorps	 xmm1, xmm1
  011bb	48 8d 8d 94 11
	00 00		 lea	 rcx, QWORD PTR $T106[rbp]
  011c2	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  011c7	48 8b d0	 mov	 rdx, rax
  011ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IJCOHMIH@EEE?$AA@
  011d1	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2803 :             ImGui::EndGroup();

  011d6	e8 00 00 00 00	 call	 ?EndGroup@ImGui@@YAXXZ	; ImGui::EndGroup

; 2804 :             if (ImGui::IsItemHovered())

  011db	33 c9		 xor	 ecx, ecx
  011dd	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  011e2	0f b6 c0	 movzx	 eax, al
  011e5	85 c0		 test	 eax, eax
  011e7	74 0c		 je	 SHORT $LN133@ShowDemoWi

; 2805 :                 ImGui::SetTooltip("First group hovered");

  011e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@GCGPENCF@First?5group?5hovered?$AA@
  011f0	e8 00 00 00 00	 call	 ?SetTooltip@ImGui@@YAXPEBDZZ ; ImGui::SetTooltip
$LN133@ShowDemoWi:

; 2806 :         }
; 2807 :         // Capture the group size and create widgets using the same size
; 2808 :         ImVec2 size = ImGui::GetItemRectSize();

  011f5	48 8d 8d 88 02
	00 00		 lea	 rcx, QWORD PTR size$38[rbp]
  011fc	e8 00 00 00 00	 call	 ?GetItemRectSize@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectSize

; 2809 :         const float values[5] = { 0.5f, 0.20f, 0.80f, 0.60f, 0.25f };

  01201	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  01209	f3 0f 11 85 a8
	02 00 00	 movss	 DWORD PTR values$39[rbp], xmm0
  01211	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  01219	f3 0f 11 85 ac
	02 00 00	 movss	 DWORD PTR values$39[rbp+4], xmm0
  01221	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  01229	f3 0f 11 85 b0
	02 00 00	 movss	 DWORD PTR values$39[rbp+8], xmm0
  01231	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  01239	f3 0f 11 85 b4
	02 00 00	 movss	 DWORD PTR values$39[rbp+12], xmm0
  01241	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  01249	f3 0f 11 85 b8
	02 00 00	 movss	 DWORD PTR values$39[rbp+16], xmm0

; 2810 :         ImGui::PlotHistogram("##values", values, IM_ARRAYSIZE(values), 0, NULL, 0.0f, 1.0f, size);

  01251	c7 44 24 40 04
	00 00 00	 mov	 DWORD PTR [rsp+64], 4
  01259	48 8b 85 88 02
	00 00		 mov	 rax, QWORD PTR size$38[rbp]
  01260	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  01265	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0126d	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  01273	0f 57 c0	 xorps	 xmm0, xmm0
  01276	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  0127c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  01285	45 33 c9	 xor	 r9d, r9d
  01288	41 b8 05 00 00
	00		 mov	 r8d, 5
  0128e	48 8d 95 a8 02
	00 00		 lea	 rdx, QWORD PTR values$39[rbp]
  01295	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NDEOOAHA@?$CD?$CDvalues?$AA@
  0129c	e8 00 00 00 00	 call	 ?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z ; ImGui::PlotHistogram

; 2811 : 
; 2812 :         ImGui::Button("ACTION", ImVec2((size.x - ImGui::GetStyle().ItemSpacing.x) * 0.5f, size.y));

  012a1	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  012a6	f3 0f 10 85 88
	02 00 00	 movss	 xmm0, DWORD PTR size$38[rbp]
  012ae	f3 0f 5c 40 4c	 subss	 xmm0, DWORD PTR [rax+76]
  012b3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  012bb	f3 0f 10 95 8c
	02 00 00	 movss	 xmm2, DWORD PTR size$38[rbp+4]
  012c3	0f 28 c8	 movaps	 xmm1, xmm0
  012c6	48 8d 8d b4 11
	00 00		 lea	 rcx, QWORD PTR $T107[rbp]
  012cd	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  012d2	48 8b d0	 mov	 rdx, rax
  012d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DHJAPAEE@ACTION?$AA@
  012dc	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2813 :         ImGui::SameLine();

  012e1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  012e9	0f 57 c0	 xorps	 xmm0, xmm0
  012ec	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2814 :         ImGui::Button("REACTION", ImVec2((size.x - ImGui::GetStyle().ItemSpacing.x) * 0.5f, size.y));

  012f1	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  012f6	f3 0f 10 85 88
	02 00 00	 movss	 xmm0, DWORD PTR size$38[rbp]
  012fe	f3 0f 5c 40 4c	 subss	 xmm0, DWORD PTR [rax+76]
  01303	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0130b	f3 0f 10 95 8c
	02 00 00	 movss	 xmm2, DWORD PTR size$38[rbp+4]
  01313	0f 28 c8	 movaps	 xmm1, xmm0
  01316	48 8d 8d d4 11
	00 00		 lea	 rcx, QWORD PTR $T108[rbp]
  0131d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01322	48 8b d0	 mov	 rdx, rax
  01325	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08HBCMJOON@REACTION?$AA@
  0132c	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2815 :         ImGui::EndGroup();

  01331	e8 00 00 00 00	 call	 ?EndGroup@ImGui@@YAXXZ	; ImGui::EndGroup

; 2816 :         ImGui::SameLine();

  01336	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0133e	0f 57 c0	 xorps	 xmm0, xmm0
  01341	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2817 : 
; 2818 :         ImGui::Button("LEVERAGE\nBUZZWORD", size);

  01346	48 8d 95 88 02
	00 00		 lea	 rdx, QWORD PTR size$38[rbp]
  0134d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@NCAPIIPH@LEVERAGE?6BUZZWORD?$AA@
  01354	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2819 :         ImGui::SameLine();

  01359	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01361	0f 57 c0	 xorps	 xmm0, xmm0
  01364	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2820 : 
; 2821 :         if (ImGui::BeginListBox("List", size))

  01369	48 8d 95 88 02
	00 00		 lea	 rdx, QWORD PTR size$38[rbp]
  01370	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04PPBEGPNI@List?$AA@
  01377	e8 00 00 00 00	 call	 ?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::BeginListBox
  0137c	0f b6 c0	 movzx	 eax, al
  0137f	85 c0		 test	 eax, eax
  01381	74 51		 je	 SHORT $LN134@ShowDemoWi

; 2822 :         {
; 2823 :             ImGui::Selectable("Selected", true);

  01383	0f 57 d2	 xorps	 xmm2, xmm2
  01386	0f 57 c9	 xorps	 xmm1, xmm1
  01389	48 8d 8d f4 11
	00 00		 lea	 rcx, QWORD PTR $T109[rbp]
  01390	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01395	4c 8b c8	 mov	 r9, rax
  01398	45 33 c0	 xor	 r8d, r8d
  0139b	b2 01		 mov	 dl, 1
  0139d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08KLEPBNHL@Selected?$AA@
  013a4	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable

; 2824 :             ImGui::Selectable("Not Selected", false);

  013a9	0f 57 d2	 xorps	 xmm2, xmm2
  013ac	0f 57 c9	 xorps	 xmm1, xmm1
  013af	48 8d 8d 14 12
	00 00		 lea	 rcx, QWORD PTR $T110[rbp]
  013b6	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  013bb	4c 8b c8	 mov	 r9, rax
  013be	45 33 c0	 xor	 r8d, r8d
  013c1	33 d2		 xor	 edx, edx
  013c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@FODJADJE@Not?5Selected?$AA@
  013ca	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable

; 2825 :             ImGui::EndListBox();

  013cf	e8 00 00 00 00	 call	 ?EndListBox@ImGui@@YAXXZ ; ImGui::EndListBox
$LN134@ShowDemoWi:

; 2826 :         }
; 2827 : 
; 2828 :         ImGui::TreePop();

  013d4	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN49@ShowDemoWi:

; 2829 :     }
; 2830 : 
; 2831 :     IMGUI_DEMO_MARKER("Layout/Text Baseline Alignment");

  013d9	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  013e1	74 28		 je	 SHORT $LN135@ShowDemoWi
  013e3	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA
  013e9	05 37 01 00 00	 add	 eax, 311		; 00000137H
  013ee	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  013f5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BP@BPEPNMPK@Layout?1Text?5Baseline?5Alignment?$AA@
  013fc	8b d0		 mov	 edx, eax
  013fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  01405	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN135@ShowDemoWi:
  0140b	33 c0		 xor	 eax, eax
  0140d	85 c0		 test	 eax, eax
  0140f	75 c8		 jne	 SHORT $LN49@ShowDemoWi

; 2832 :     if (ImGui::TreeNode("Text Baseline Alignment"))

  01411	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@DMCNFLHM@Text?5Baseline?5Alignment?$AA@
  01418	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  0141d	0f b6 c0	 movzx	 eax, al
  01420	85 c0		 test	 eax, eax
  01422	0f 84 e3 05 00
	00		 je	 $LN58@ShowDemoWi

; 2833 :     {
; 2834 :         {
; 2835 :             ImGui::BulletText("Text baseline:");

  01428	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@FLJDDPLM@Text?5baseline?3?$AA@
  0142f	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 2836 :             ImGui::SameLine(); HelpMarker(

  01434	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0143c	0f 57 c0	 xorps	 xmm0, xmm0
  0143f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01444	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0MJ@CEINBEPI@This?5is?5testing?5the?5vertical?5ali@
  0144b	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 2837 :                 "This is testing the vertical alignment that gets applied on text to keep it aligned with widgets. "
; 2838 :                 "Lines only composed of text or \"small\" widgets use less vertical space than lines with framed widgets.");
; 2839 :             ImGui::Indent();

  01450	0f 57 c0	 xorps	 xmm0, xmm0
  01453	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent

; 2840 : 
; 2841 :             ImGui::Text("KO Blahblah"); ImGui::SameLine();

  01458	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@HEDLMKK@KO?5Blahblah?$AA@
  0145f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  01464	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0146c	0f 57 c0	 xorps	 xmm0, xmm0
  0146f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2842 :             ImGui::Button("Some framed item"); ImGui::SameLine();

  01474	0f 57 d2	 xorps	 xmm2, xmm2
  01477	0f 57 c9	 xorps	 xmm1, xmm1
  0147a	48 8d 8d 34 12
	00 00		 lea	 rcx, QWORD PTR $T111[rbp]
  01481	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01486	48 8b d0	 mov	 rdx, rax
  01489	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@GBEAAIAC@Some?5framed?5item?$AA@
  01490	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  01495	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0149d	0f 57 c0	 xorps	 xmm0, xmm0
  014a0	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2843 :             HelpMarker("Baseline of button will look misaligned with text..");

  014a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DE@PMNLFDAO@Baseline?5of?5button?5will?5look?5mis@
  014ac	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 2844 : 
; 2845 :             // If your line starts with text, call AlignTextToFramePadding() to align text to upcoming widgets.
; 2846 :             // (because we don't know what's coming after the Text() statement, we need to move the text baseline
; 2847 :             // down by FramePadding.y ahead of time)
; 2848 :             ImGui::AlignTextToFramePadding();

  014b1	e8 00 00 00 00	 call	 ?AlignTextToFramePadding@ImGui@@YAXXZ ; ImGui::AlignTextToFramePadding

; 2849 :             ImGui::Text("OK Blahblah"); ImGui::SameLine();

  014b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LEJMPEFH@OK?5Blahblah?$AA@
  014bd	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  014c2	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  014ca	0f 57 c0	 xorps	 xmm0, xmm0
  014cd	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2850 :             ImGui::Button("Some framed item"); ImGui::SameLine();

  014d2	0f 57 d2	 xorps	 xmm2, xmm2
  014d5	0f 57 c9	 xorps	 xmm1, xmm1
  014d8	48 8d 8d 54 12
	00 00		 lea	 rcx, QWORD PTR $T112[rbp]
  014df	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  014e4	48 8b d0	 mov	 rdx, rax
  014e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@GBEAAIAC@Some?5framed?5item?$AA@
  014ee	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  014f3	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  014fb	0f 57 c0	 xorps	 xmm0, xmm0
  014fe	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2851 :             HelpMarker("We call AlignTextToFramePadding() to vertically align the text baseline by +FramePadding.y");

  01503	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FL@DLOHNEGO@We?5call?5AlignTextToFramePadding?$CI@
  0150a	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 2852 : 
; 2853 :             // SmallButton() uses the same vertical padding as Text
; 2854 :             ImGui::Button("TEST##1"); ImGui::SameLine();

  0150f	0f 57 d2	 xorps	 xmm2, xmm2
  01512	0f 57 c9	 xorps	 xmm1, xmm1
  01515	48 8d 8d 74 12
	00 00		 lea	 rcx, QWORD PTR $T113[rbp]
  0151c	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01521	48 8b d0	 mov	 rdx, rax
  01524	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07FENKGLPN@TEST?$CD?$CD1?$AA@
  0152b	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  01530	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01538	0f 57 c0	 xorps	 xmm0, xmm0
  0153b	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2855 :             ImGui::Text("TEST"); ImGui::SameLine();

  01540	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04OIKJMBFP@TEST?$AA@
  01547	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  0154c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01554	0f 57 c0	 xorps	 xmm0, xmm0
  01557	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2856 :             ImGui::SmallButton("TEST##2");

  0155c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07HPPHDIDO@TEST?$CD?$CD2?$AA@
  01563	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton

; 2857 : 
; 2858 :             // If your line starts with text, call AlignTextToFramePadding() to align text to upcoming widgets.
; 2859 :             ImGui::AlignTextToFramePadding();

  01568	e8 00 00 00 00	 call	 ?AlignTextToFramePadding@ImGui@@YAXXZ ; ImGui::AlignTextToFramePadding

; 2860 :             ImGui::Text("Text aligned to framed item"); ImGui::SameLine();

  0156d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@CCJJPIAI@Text?5aligned?5to?5framed?5item?$AA@
  01574	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  01579	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01581	0f 57 c0	 xorps	 xmm0, xmm0
  01584	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2861 :             ImGui::Button("Item##1"); ImGui::SameLine();

  01589	0f 57 d2	 xorps	 xmm2, xmm2
  0158c	0f 57 c9	 xorps	 xmm1, xmm1
  0158f	48 8d 8d 94 12
	00 00		 lea	 rcx, QWORD PTR $T114[rbp]
  01596	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0159b	48 8b d0	 mov	 rdx, rax
  0159e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07MDGCNPKG@Item?$CD?$CD1?$AA@
  015a5	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  015aa	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  015b2	0f 57 c0	 xorps	 xmm0, xmm0
  015b5	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2862 :             ImGui::Text("Item"); ImGui::SameLine();

  015ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BGCMBJDA@Item?$AA@
  015c1	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  015c6	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  015ce	0f 57 c0	 xorps	 xmm0, xmm0
  015d1	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2863 :             ImGui::SmallButton("Item##2"); ImGui::SameLine();

  015d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07OIEPIMGF@Item?$CD?$CD2?$AA@
  015dd	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton
  015e2	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  015ea	0f 57 c0	 xorps	 xmm0, xmm0
  015ed	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2864 :             ImGui::Button("Item##3");

  015f2	0f 57 d2	 xorps	 xmm2, xmm2
  015f5	0f 57 c9	 xorps	 xmm1, xmm1
  015f8	48 8d 8d b4 12
	00 00		 lea	 rcx, QWORD PTR $T115[rbp]
  015ff	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01604	48 8b d0	 mov	 rdx, rax
  01607	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07PBFELNCE@Item?$CD?$CD3?$AA@
  0160e	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2865 : 
; 2866 :             ImGui::Unindent();

  01613	0f 57 c0	 xorps	 xmm0, xmm0
  01616	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent

; 2867 :         }
; 2868 : 
; 2869 :         ImGui::Spacing();

  0161b	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 2870 : 
; 2871 :         {
; 2872 :             ImGui::BulletText("Multi-line text:");

  01620	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@IKLHLLAO@Multi?9line?5text?3?$AA@
  01627	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 2873 :             ImGui::Indent();

  0162c	0f 57 c0	 xorps	 xmm0, xmm0
  0162f	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent

; 2874 :             ImGui::Text("One\nTwo\nThree"); ImGui::SameLine();

  01634	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@LPFJLNGJ@One?6Two?6Three?$AA@
  0163b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  01640	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01648	0f 57 c0	 xorps	 xmm0, xmm0
  0164b	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2875 :             ImGui::Text("Hello\nWorld"); ImGui::SameLine();

  01650	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MEHCJFNA@Hello?6World?$AA@
  01657	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  0165c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01664	0f 57 c0	 xorps	 xmm0, xmm0
  01667	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2876 :             ImGui::Text("Banana");

  0166c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OJJIHNKI@Banana?$AA@
  01673	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2877 : 
; 2878 :             ImGui::Text("Banana"); ImGui::SameLine();

  01678	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OJJIHNKI@Banana?$AA@
  0167f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  01684	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0168c	0f 57 c0	 xorps	 xmm0, xmm0
  0168f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2879 :             ImGui::Text("Hello\nWorld"); ImGui::SameLine();

  01694	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MEHCJFNA@Hello?6World?$AA@
  0169b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  016a0	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  016a8	0f 57 c0	 xorps	 xmm0, xmm0
  016ab	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2880 :             ImGui::Text("One\nTwo\nThree");

  016b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@LPFJLNGJ@One?6Two?6Three?$AA@
  016b7	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2881 : 
; 2882 :             ImGui::Button("HOP##1"); ImGui::SameLine();

  016bc	0f 57 d2	 xorps	 xmm2, xmm2
  016bf	0f 57 c9	 xorps	 xmm1, xmm1
  016c2	48 8d 8d d4 12
	00 00		 lea	 rcx, QWORD PTR $T116[rbp]
  016c9	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  016ce	48 8b d0	 mov	 rdx, rax
  016d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06JNLLJDDG@HOP?$CD?$CD1?$AA@
  016d8	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  016dd	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  016e5	0f 57 c0	 xorps	 xmm0, xmm0
  016e8	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2883 :             ImGui::Text("Banana"); ImGui::SameLine();

  016ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OJJIHNKI@Banana?$AA@
  016f4	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  016f9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01701	0f 57 c0	 xorps	 xmm0, xmm0
  01704	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2884 :             ImGui::Text("Hello\nWorld"); ImGui::SameLine();

  01709	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MEHCJFNA@Hello?6World?$AA@
  01710	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  01715	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0171d	0f 57 c0	 xorps	 xmm0, xmm0
  01720	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2885 :             ImGui::Text("Banana");

  01725	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OJJIHNKI@Banana?$AA@
  0172c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2886 : 
; 2887 :             ImGui::Button("HOP##2"); ImGui::SameLine();

  01731	0f 57 d2	 xorps	 xmm2, xmm2
  01734	0f 57 c9	 xorps	 xmm1, xmm1
  01737	48 8d 8d f4 12
	00 00		 lea	 rcx, QWORD PTR $T117[rbp]
  0173e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01743	48 8b d0	 mov	 rdx, rax
  01746	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06LGJGMAPF@HOP?$CD?$CD2?$AA@
  0174d	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  01752	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0175a	0f 57 c0	 xorps	 xmm0, xmm0
  0175d	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2888 :             ImGui::Text("Hello\nWorld"); ImGui::SameLine();

  01762	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MEHCJFNA@Hello?6World?$AA@
  01769	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  0176e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01776	0f 57 c0	 xorps	 xmm0, xmm0
  01779	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2889 :             ImGui::Text("Banana");

  0177e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OJJIHNKI@Banana?$AA@
  01785	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2890 :             ImGui::Unindent();

  0178a	0f 57 c0	 xorps	 xmm0, xmm0
  0178d	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent

; 2891 :         }
; 2892 : 
; 2893 :         ImGui::Spacing();

  01792	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 2894 : 
; 2895 :         {
; 2896 :             ImGui::BulletText("Misc items:");

  01797	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@OFIEFPON@Misc?5items?3?$AA@
  0179e	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 2897 :             ImGui::Indent();

  017a3	0f 57 c0	 xorps	 xmm0, xmm0
  017a6	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent

; 2898 : 
; 2899 :             // SmallButton() sets FramePadding to zero. Text baseline is aligned to match baseline of previous Button.
; 2900 :             ImGui::Button("80x80", ImVec2(80, 80));

  017ab	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42a00000
  017b3	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42a00000
  017bb	48 8d 8d 14 13
	00 00		 lea	 rcx, QWORD PTR $T118[rbp]
  017c2	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  017c7	48 8b d0	 mov	 rdx, rax
  017ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FMIAGJLC@80x80?$AA@
  017d1	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2901 :             ImGui::SameLine();

  017d6	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  017de	0f 57 c0	 xorps	 xmm0, xmm0
  017e1	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2902 :             ImGui::Button("50x50", ImVec2(50, 50));

  017e6	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42480000
  017ee	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42480000
  017f6	48 8d 8d 34 13
	00 00		 lea	 rcx, QWORD PTR $T119[rbp]
  017fd	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01802	48 8b d0	 mov	 rdx, rax
  01805	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OIMGOJDP@50x50?$AA@
  0180c	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2903 :             ImGui::SameLine();

  01811	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01819	0f 57 c0	 xorps	 xmm0, xmm0
  0181c	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2904 :             ImGui::Button("Button()");

  01821	0f 57 d2	 xorps	 xmm2, xmm2
  01824	0f 57 c9	 xorps	 xmm1, xmm1
  01827	48 8d 8d 54 13
	00 00		 lea	 rcx, QWORD PTR $T120[rbp]
  0182e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01833	48 8b d0	 mov	 rdx, rax
  01836	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08DHDFAMNE@Button?$CI?$CJ?$AA@
  0183d	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2905 :             ImGui::SameLine();

  01842	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0184a	0f 57 c0	 xorps	 xmm0, xmm0
  0184d	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2906 :             ImGui::SmallButton("SmallButton()");

  01852	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DANAPFLN@SmallButton?$CI?$CJ?$AA@
  01859	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton

; 2907 : 
; 2908 :             // Tree
; 2909 :             const float spacing = ImGui::GetStyle().ItemInnerSpacing.x;

  0185e	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  01863	f3 0f 10 40 54	 movss	 xmm0, DWORD PTR [rax+84]
  01868	f3 0f 11 85 d4
	02 00 00	 movss	 DWORD PTR spacing$40[rbp], xmm0

; 2910 :             ImGui::Button("Button##1");

  01870	0f 57 d2	 xorps	 xmm2, xmm2
  01873	0f 57 c9	 xorps	 xmm1, xmm1
  01876	48 8d 8d 74 13
	00 00		 lea	 rcx, QWORD PTR $T121[rbp]
  0187d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01882	48 8b d0	 mov	 rdx, rax
  01885	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09JNECCGKE@Button?$CD?$CD1?$AA@
  0188c	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2911 :             ImGui::SameLine(0.0f, spacing);

  01891	f3 0f 10 8d d4
	02 00 00	 movss	 xmm1, DWORD PTR spacing$40[rbp]
  01899	0f 57 c0	 xorps	 xmm0, xmm0
  0189c	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2912 :             if (ImGui::TreeNode("Node##1"))

  018a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07FHFCIGOP@Node?$CD?$CD1?$AA@
  018a8	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  018ad	0f b6 c0	 movzx	 eax, al
  018b0	85 c0		 test	 eax, eax
  018b2	74 3c		 je	 SHORT $LN137@ShowDemoWi

; 2913 :             {
; 2914 :                 // Placeholder tree data
; 2915 :                 for (int i = 0; i < 6; i++)

  018b4	c7 85 f4 02 00
	00 00 00 00 00	 mov	 DWORD PTR i$41[rbp], 0
  018be	eb 0e		 jmp	 SHORT $LN52@ShowDemoWi
$LN50@ShowDemoWi:
  018c0	8b 85 f4 02 00
	00		 mov	 eax, DWORD PTR i$41[rbp]
  018c6	ff c0		 inc	 eax
  018c8	89 85 f4 02 00
	00		 mov	 DWORD PTR i$41[rbp], eax
$LN52@ShowDemoWi:
  018ce	83 bd f4 02 00
	00 06		 cmp	 DWORD PTR i$41[rbp], 6
  018d5	7d 14		 jge	 SHORT $LN51@ShowDemoWi

; 2916 :                     ImGui::BulletText("Item %d..", i);

  018d7	8b 95 f4 02 00
	00		 mov	 edx, DWORD PTR i$41[rbp]
  018dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09CCOCANBA@Item?5?$CFd?4?4?$AA@
  018e4	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText
  018e9	eb d5		 jmp	 SHORT $LN50@ShowDemoWi
$LN51@ShowDemoWi:

; 2917 :                 ImGui::TreePop();

  018eb	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN137@ShowDemoWi:

; 2918 :             }
; 2919 : 
; 2920 :             // Vertically align text node a bit lower so it'll be vertically centered with upcoming widget.
; 2921 :             // Otherwise you can use SmallButton() (smaller fit).
; 2922 :             ImGui::AlignTextToFramePadding();

  018f0	e8 00 00 00 00	 call	 ?AlignTextToFramePadding@ImGui@@YAXXZ ; ImGui::AlignTextToFramePadding

; 2923 : 
; 2924 :             // Common mistake to avoid: if we want to SameLine after TreeNode we need to do it before we add
; 2925 :             // other contents below the node.
; 2926 :             bool node_open = ImGui::TreeNode("Node##2");

  018f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07HMHPNFCM@Node?$CD?$CD2?$AA@
  018fc	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  01901	88 85 14 03 00
	00		 mov	 BYTE PTR node_open$42[rbp], al

; 2927 :             ImGui::SameLine(0.0f, spacing); ImGui::Button("Button##2");

  01907	f3 0f 10 8d d4
	02 00 00	 movss	 xmm1, DWORD PTR spacing$40[rbp]
  0190f	0f 57 c0	 xorps	 xmm0, xmm0
  01912	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01917	0f 57 d2	 xorps	 xmm2, xmm2
  0191a	0f 57 c9	 xorps	 xmm1, xmm1
  0191d	48 8d 8d 94 13
	00 00		 lea	 rcx, QWORD PTR $T122[rbp]
  01924	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01929	48 8b d0	 mov	 rdx, rax
  0192c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09LGGPHFGH@Button?$CD?$CD2?$AA@
  01933	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2928 :             if (node_open)

  01938	0f b6 85 14 03
	00 00		 movzx	 eax, BYTE PTR node_open$42[rbp]
  0193f	85 c0		 test	 eax, eax
  01941	74 3c		 je	 SHORT $LN138@ShowDemoWi

; 2929 :             {
; 2930 :                 // Placeholder tree data
; 2931 :                 for (int i = 0; i < 6; i++)

  01943	c7 85 34 03 00
	00 00 00 00 00	 mov	 DWORD PTR i$43[rbp], 0
  0194d	eb 0e		 jmp	 SHORT $LN55@ShowDemoWi
$LN53@ShowDemoWi:
  0194f	8b 85 34 03 00
	00		 mov	 eax, DWORD PTR i$43[rbp]
  01955	ff c0		 inc	 eax
  01957	89 85 34 03 00
	00		 mov	 DWORD PTR i$43[rbp], eax
$LN55@ShowDemoWi:
  0195d	83 bd 34 03 00
	00 06		 cmp	 DWORD PTR i$43[rbp], 6
  01964	7d 14		 jge	 SHORT $LN54@ShowDemoWi

; 2932 :                     ImGui::BulletText("Item %d..", i);

  01966	8b 95 34 03 00
	00		 mov	 edx, DWORD PTR i$43[rbp]
  0196c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09CCOCANBA@Item?5?$CFd?4?4?$AA@
  01973	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText
  01978	eb d5		 jmp	 SHORT $LN53@ShowDemoWi
$LN54@ShowDemoWi:

; 2933 :                 ImGui::TreePop();

  0197a	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN138@ShowDemoWi:

; 2934 :             }
; 2935 : 
; 2936 :             // Bullet
; 2937 :             ImGui::Button("Button##3");

  0197f	0f 57 d2	 xorps	 xmm2, xmm2
  01982	0f 57 c9	 xorps	 xmm1, xmm1
  01985	48 8d 8d b4 13
	00 00		 lea	 rcx, QWORD PTR $T123[rbp]
  0198c	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01991	48 8b d0	 mov	 rdx, rax
  01994	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09KPHEEECG@Button?$CD?$CD3?$AA@
  0199b	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2938 :             ImGui::SameLine(0.0f, spacing);

  019a0	f3 0f 10 8d d4
	02 00 00	 movss	 xmm1, DWORD PTR spacing$40[rbp]
  019a8	0f 57 c0	 xorps	 xmm0, xmm0
  019ab	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2939 :             ImGui::BulletText("Bullet text");

  019b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DABAODPF@Bullet?5text?$AA@
  019b7	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 2940 : 
; 2941 :             ImGui::AlignTextToFramePadding();

  019bc	e8 00 00 00 00	 call	 ?AlignTextToFramePadding@ImGui@@YAXXZ ; ImGui::AlignTextToFramePadding

; 2942 :             ImGui::BulletText("Node");

  019c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04OKAPPFIB@Node?$AA@
  019c8	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 2943 :             ImGui::SameLine(0.0f, spacing); ImGui::Button("Button##4");

  019cd	f3 0f 10 8d d4
	02 00 00	 movss	 xmm1, DWORD PTR spacing$40[rbp]
  019d5	0f 57 c0	 xorps	 xmm0, xmm0
  019d8	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  019dd	0f 57 d2	 xorps	 xmm2, xmm2
  019e0	0f 57 c9	 xorps	 xmm1, xmm1
  019e3	48 8d 8d d4 13
	00 00		 lea	 rcx, QWORD PTR $T124[rbp]
  019ea	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  019ef	48 8b d0	 mov	 rdx, rax
  019f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09OADFNCOB@Button?$CD?$CD4?$AA@
  019f9	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2944 :             ImGui::Unindent();

  019fe	0f 57 c0	 xorps	 xmm0, xmm0
  01a01	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent

; 2945 :         }
; 2946 : 
; 2947 :         ImGui::TreePop();

  01a06	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN58@ShowDemoWi:

; 2948 :     }
; 2949 : 
; 2950 :     IMGUI_DEMO_MARKER("Layout/Scrolling");

  01a0b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  01a13	74 28		 je	 SHORT $LN139@ShowDemoWi
  01a15	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA
  01a1b	05 ae 01 00 00	 add	 eax, 430		; 000001aeH
  01a20	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  01a27	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@PPJKDLIF@Layout?1Scrolling?$AA@
  01a2e	8b d0		 mov	 edx, eax
  01a30	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  01a37	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN139@ShowDemoWi:
  01a3d	33 c0		 xor	 eax, eax
  01a3f	85 c0		 test	 eax, eax
  01a41	75 c8		 jne	 SHORT $LN58@ShowDemoWi

; 2951 :     if (ImGui::TreeNode("Scrolling"))

  01a43	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09LFBMELOM@Scrolling?$AA@
  01a4a	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  01a4f	0f b6 c0	 movzx	 eax, al
  01a52	85 c0		 test	 eax, eax
  01a54	0f 84 53 14 00
	00		 je	 $LN97@ShowDemoWi
$LN61@ShowDemoWi:

; 2952 :     {
; 2953 :         // Vertical scroll functions
; 2954 :         IMGUI_DEMO_MARKER("Layout/Scrolling/Vertical");

  01a5a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  01a62	74 28		 je	 SHORT $LN141@ShowDemoWi
  01a64	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA
  01a6a	05 b2 01 00 00	 add	 eax, 434		; 000001b2H
  01a6f	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  01a76	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BK@KKKEAAFD@Layout?1Scrolling?1Vertical?$AA@
  01a7d	8b d0		 mov	 edx, eax
  01a7f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  01a86	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN141@ShowDemoWi:
  01a8c	33 c0		 xor	 eax, eax
  01a8e	85 c0		 test	 eax, eax
  01a90	75 c8		 jne	 SHORT $LN61@ShowDemoWi

; 2955 :         HelpMarker("Use SetScrollHereY() or SetScrollFromPosY() to scroll to a given vertical position.");

  01a92	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FE@KFLONGJI@Use?5SetScrollHereY?$CI?$CJ?5or?5SetScrol@
  01a99	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 2956 : 
; 2957 :         static int track_item = 50;
; 2958 :         static bool enable_track = true;
; 2959 :         static bool enable_extra_decorations = false;
; 2960 :         static float scroll_to_off_px = 0.0f;
; 2961 :         static float scroll_to_pos_px = 200.0f;
; 2962 : 
; 2963 :         ImGui::Checkbox("Decoration", &enable_extra_decorations);

  01a9e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?enable_extra_decorations@?IE@??ShowDemoWindowLayout@@YAXXZ@4_NA
  01aa5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@ODNEMNHD@Decoration?$AA@
  01aac	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 2964 : 
; 2965 :         ImGui::Checkbox("Track", &enable_track);

  01ab1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?enable_track@?IE@??ShowDemoWindowLayout@@YAXXZ@4_NA
  01ab8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05BFDCPAGB@Track?$AA@
  01abf	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 2966 :         ImGui::PushItemWidth(100);

  01ac4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  01acc	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth

; 2967 :         ImGui::SameLine(140); enable_track |= ImGui::DragInt("##item", &track_item, 0.25f, 0, 99, "Item = %d");

  01ad1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01ad9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@430c0000
  01ae1	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01ae6	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?enable_track@?IE@??ShowDemoWindowLayout@@YAXXZ@4_NA
  01aed	89 85 24 18 00
	00		 mov	 DWORD PTR tv1123[rbp], eax
  01af3	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  01afb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09GAMHFGFH@Item?5?$DN?5?$CFd?$AA@
  01b02	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01b07	c7 44 24 20 63
	00 00 00	 mov	 DWORD PTR [rsp+32], 99	; 00000063H
  01b0f	45 33 c9	 xor	 r9d, r9d
  01b12	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e800000
  01b1a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?track_item@?IE@??ShowDemoWindowLayout@@YAXXZ@4HA
  01b21	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06PDMOEKMO@?$CD?$CDitem?$AA@
  01b28	e8 00 00 00 00	 call	 ?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z ; ImGui::DragInt
  01b2d	0f b6 c0	 movzx	 eax, al
  01b30	8b 8d 24 18 00
	00		 mov	 ecx, DWORD PTR tv1123[rbp]
  01b36	0b c8		 or	 ecx, eax
  01b38	8b c1		 mov	 eax, ecx
  01b3a	88 05 00 00 00
	00		 mov	 BYTE PTR ?enable_track@?IE@??ShowDemoWindowLayout@@YAXXZ@4_NA, al

; 2968 : 
; 2969 :         bool scroll_to_off = ImGui::Button("Scroll Offset");

  01b40	0f 57 d2	 xorps	 xmm2, xmm2
  01b43	0f 57 c9	 xorps	 xmm1, xmm1
  01b46	48 8d 8d f4 13
	00 00		 lea	 rcx, QWORD PTR $T125[rbp]
  01b4d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01b52	48 8b d0	 mov	 rdx, rax
  01b55	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EDOJIGBC@Scroll?5Offset?$AA@
  01b5c	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  01b61	88 85 54 03 00
	00		 mov	 BYTE PTR scroll_to_off$44[rbp], al

; 2970 :         ImGui::SameLine(140); scroll_to_off |= ImGui::DragFloat("##off", &scroll_to_off_px, 1.00f, 0, FLT_MAX, "+%.0f px");

  01b67	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01b6f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@430c0000
  01b77	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01b7c	0f b6 85 54 03
	00 00		 movzx	 eax, BYTE PTR scroll_to_off$44[rbp]
  01b83	89 85 24 18 00
	00		 mov	 DWORD PTR tv1144[rbp], eax
  01b89	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  01b91	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08DGGLGIAM@?$CL?$CF?40f?5px?$AA@
  01b98	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01b9d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  01ba5	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01bab	0f 57 db	 xorps	 xmm3, xmm3
  01bae	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  01bb6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?scroll_to_off_px@?IE@??ShowDemoWindowLayout@@YAXXZ@4MA
  01bbd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FFNMOAPG@?$CD?$CDoff?$AA@
  01bc4	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat
  01bc9	0f b6 c0	 movzx	 eax, al
  01bcc	8b 8d 24 18 00
	00		 mov	 ecx, DWORD PTR tv1144[rbp]
  01bd2	0b c8		 or	 ecx, eax
  01bd4	8b c1		 mov	 eax, ecx
  01bd6	88 85 54 03 00
	00		 mov	 BYTE PTR scroll_to_off$44[rbp], al

; 2971 : 
; 2972 :         bool scroll_to_pos = ImGui::Button("Scroll To Pos");

  01bdc	0f 57 d2	 xorps	 xmm2, xmm2
  01bdf	0f 57 c9	 xorps	 xmm1, xmm1
  01be2	48 8d 8d 14 14
	00 00		 lea	 rcx, QWORD PTR $T126[rbp]
  01be9	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01bee	48 8b d0	 mov	 rdx, rax
  01bf1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@CGNNKBMG@Scroll?5To?5Pos?$AA@
  01bf8	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  01bfd	88 85 74 03 00
	00		 mov	 BYTE PTR scroll_to_pos$45[rbp], al

; 2973 :         ImGui::SameLine(140); scroll_to_pos |= ImGui::DragFloat("##pos", &scroll_to_pos_px, 1.00f, -10, FLT_MAX, "X/Y = %.0f px");

  01c03	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01c0b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@430c0000
  01c13	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01c18	0f b6 85 74 03
	00 00		 movzx	 eax, BYTE PTR scroll_to_pos$45[rbp]
  01c1f	89 85 24 18 00
	00		 mov	 DWORD PTR tv1197[rbp], eax
  01c25	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  01c2d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@LJJDDGBB@X?1Y?5?$DN?5?$CF?40f?5px?$AA@
  01c34	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01c39	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  01c41	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01c47	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@c1200000
  01c4f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  01c57	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?scroll_to_pos_px@?IE@??ShowDemoWindowLayout@@YAXXZ@4MA
  01c5e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05GFMCHKKE@?$CD?$CDpos?$AA@
  01c65	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat
  01c6a	0f b6 c0	 movzx	 eax, al
  01c6d	8b 8d 24 18 00
	00		 mov	 ecx, DWORD PTR tv1197[rbp]
  01c73	0b c8		 or	 ecx, eax
  01c75	8b c1		 mov	 eax, ecx
  01c77	88 85 74 03 00
	00		 mov	 BYTE PTR scroll_to_pos$45[rbp], al

; 2974 :         ImGui::PopItemWidth();

  01c7d	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 2975 : 
; 2976 :         if (scroll_to_off || scroll_to_pos)

  01c82	0f b6 85 54 03
	00 00		 movzx	 eax, BYTE PTR scroll_to_off$44[rbp]
  01c89	85 c0		 test	 eax, eax
  01c8b	75 0b		 jne	 SHORT $LN143@ShowDemoWi
  01c8d	0f b6 85 74 03
	00 00		 movzx	 eax, BYTE PTR scroll_to_pos$45[rbp]
  01c94	85 c0		 test	 eax, eax
  01c96	74 07		 je	 SHORT $LN142@ShowDemoWi
$LN143@ShowDemoWi:

; 2977 :             enable_track = false;

  01c98	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?enable_track@?IE@??ShowDemoWindowLayout@@YAXXZ@4_NA, 0
$LN142@ShowDemoWi:

; 2978 : 
; 2979 :         ImGuiStyle& style = ImGui::GetStyle();

  01c9f	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  01ca4	48 89 85 98 03
	00 00		 mov	 QWORD PTR style$46[rbp], rax

; 2980 :         float child_w = (ImGui::GetContentRegionAvail().x - 4 * style.ItemSpacing.x) / 5;

  01cab	48 8d 8d 34 14
	00 00		 lea	 rcx, QWORD PTR $T127[rbp]
  01cb2	e8 00 00 00 00	 call	 ?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
  01cb7	48 8b 8d 98 03
	00 00		 mov	 rcx, QWORD PTR style$46[rbp]
  01cbe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  01cc6	f3 0f 59 41 4c	 mulss	 xmm0, DWORD PTR [rcx+76]
  01ccb	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  01ccf	f3 0f 5c c8	 subss	 xmm1, xmm0
  01cd3	0f 28 c1	 movaps	 xmm0, xmm1
  01cd6	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40a00000
  01cde	f3 0f 11 85 b4
	03 00 00	 movss	 DWORD PTR child_w$47[rbp], xmm0

; 2981 :         if (child_w < 1.0f)

  01ce6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01cee	0f 2f 85 b4 03
	00 00		 comiss	 xmm0, DWORD PTR child_w$47[rbp]
  01cf5	76 10		 jbe	 SHORT $LN144@ShowDemoWi

; 2982 :             child_w = 1.0f;

  01cf7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01cff	f3 0f 11 85 b4
	03 00 00	 movss	 DWORD PTR child_w$47[rbp], xmm0
$LN144@ShowDemoWi:

; 2983 :         ImGui::PushID("##VerticalScrolling");

  01d07	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@NILALFMA@?$CD?$CDVerticalScrolling?$AA@
  01d0e	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPEBD@Z ; ImGui::PushID

; 2984 :         for (int i = 0; i < 5; i++)

  01d13	c7 85 d4 03 00
	00 00 00 00 00	 mov	 DWORD PTR i$48[rbp], 0
  01d1d	eb 0e		 jmp	 SHORT $LN64@ShowDemoWi
$LN62@ShowDemoWi:
  01d1f	8b 85 d4 03 00
	00		 mov	 eax, DWORD PTR i$48[rbp]
  01d25	ff c0		 inc	 eax
  01d27	89 85 d4 03 00
	00		 mov	 DWORD PTR i$48[rbp], eax
$LN64@ShowDemoWi:
  01d2d	83 bd d4 03 00
	00 05		 cmp	 DWORD PTR i$48[rbp], 5
  01d34	0f 8d 88 02 00
	00		 jge	 $LN63@ShowDemoWi

; 2985 :         {
; 2986 :             if (i > 0) ImGui::SameLine();

  01d3a	83 bd d4 03 00
	00 00		 cmp	 DWORD PTR i$48[rbp], 0
  01d41	7e 10		 jle	 SHORT $LN145@ShowDemoWi
  01d43	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01d4b	0f 57 c0	 xorps	 xmm0, xmm0
  01d4e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
$LN145@ShowDemoWi:

; 2987 :             ImGui::BeginGroup();

  01d53	e8 00 00 00 00	 call	 ?BeginGroup@ImGui@@YAXXZ ; ImGui::BeginGroup

; 2988 :             const char* names[] = { "Top", "25%", "Center", "75%", "Bottom" };

  01d58	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03PGGAENPN@Top?$AA@
  01d5f	48 89 85 f8 03
	00 00		 mov	 QWORD PTR names$49[rbp], rax
  01d66	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03EOMKOHFF@25?$CF?$AA@
  01d6d	48 89 85 00 04
	00 00		 mov	 QWORD PTR names$49[rbp+8], rax
  01d74	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06NOADDNNE@Center?$AA@
  01d7b	48 89 85 08 04
	00 00		 mov	 QWORD PTR names$49[rbp+16], rax
  01d82	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03HJBEBHGH@75?$CF?$AA@
  01d89	48 89 85 10 04
	00 00		 mov	 QWORD PTR names$49[rbp+24], rax
  01d90	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06DDHCBBGN@Bottom?$AA@
  01d97	48 89 85 18 04
	00 00		 mov	 QWORD PTR names$49[rbp+32], rax

; 2989 :             ImGui::TextUnformatted(names[i]);

  01d9e	48 63 85 d4 03
	00 00		 movsxd	 rax, DWORD PTR i$48[rbp]
  01da5	33 d2		 xor	 edx, edx
  01da7	48 8b 8c c5 f8
	03 00 00	 mov	 rcx, QWORD PTR names$49[rbp+rax*8]
  01daf	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted

; 2990 : 
; 2991 :             const ImGuiWindowFlags child_flags = enable_extra_decorations ? ImGuiWindowFlags_MenuBar : 0;

  01db4	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?enable_extra_decorations@?IE@??ShowDemoWindowLayout@@YAXXZ@4_NA
  01dbb	85 c0		 test	 eax, eax
  01dbd	74 0c		 je	 SHORT $LN190@ShowDemoWi
  01dbf	c7 85 24 18 00
	00 00 04 00 00	 mov	 DWORD PTR tv1268[rbp], 1024 ; 00000400H
  01dc9	eb 0a		 jmp	 SHORT $LN191@ShowDemoWi
$LN190@ShowDemoWi:
  01dcb	c7 85 24 18 00
	00 00 00 00 00	 mov	 DWORD PTR tv1268[rbp], 0
$LN191@ShowDemoWi:
  01dd5	8b 85 24 18 00
	00		 mov	 eax, DWORD PTR tv1268[rbp]
  01ddb	89 85 34 04 00
	00		 mov	 DWORD PTR child_flags$50[rbp], eax

; 2992 :             const ImGuiID child_id = ImGui::GetID((void*)(intptr_t)i);

  01de1	48 63 85 d4 03
	00 00		 movsxd	 rax, DWORD PTR i$48[rbp]
  01de8	48 8b c8	 mov	 rcx, rax
  01deb	e8 00 00 00 00	 call	 ?GetID@ImGui@@YAIPEBX@Z	; ImGui::GetID
  01df0	89 85 54 04 00
	00		 mov	 DWORD PTR child_id$51[rbp], eax

; 2993 :             const bool child_is_visible = ImGui::BeginChild(child_id, ImVec2(child_w, 200.0f), true, child_flags);

  01df6	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43480000
  01dfe	f3 0f 10 8d b4
	03 00 00	 movss	 xmm1, DWORD PTR child_w$47[rbp]
  01e06	48 8d 8d 54 14
	00 00		 lea	 rcx, QWORD PTR $T128[rbp]
  01e0d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01e12	44 8b 8d 34 04
	00 00		 mov	 r9d, DWORD PTR child_flags$50[rbp]
  01e19	41 b0 01	 mov	 r8b, 1
  01e1c	48 8b d0	 mov	 rdx, rax
  01e1f	8b 8d 54 04 00
	00		 mov	 ecx, DWORD PTR child_id$51[rbp]
  01e25	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NIAEBUImVec2@@_NH@Z ; ImGui::BeginChild
  01e2a	88 85 74 04 00
	00		 mov	 BYTE PTR child_is_visible$52[rbp], al

; 2994 :             if (ImGui::BeginMenuBar())

  01e30	e8 00 00 00 00	 call	 ?BeginMenuBar@ImGui@@YA_NXZ ; ImGui::BeginMenuBar
  01e35	0f b6 c0	 movzx	 eax, al
  01e38	85 c0		 test	 eax, eax
  01e3a	74 13		 je	 SHORT $LN146@ShowDemoWi

; 2995 :             {
; 2996 :                 ImGui::TextUnformatted("abc");

  01e3c	33 d2		 xor	 edx, edx
  01e3e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03FIKCJHKP@abc?$AA@
  01e45	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted

; 2997 :                 ImGui::EndMenuBar();

  01e4a	e8 00 00 00 00	 call	 ?EndMenuBar@ImGui@@YAXXZ ; ImGui::EndMenuBar
$LN146@ShowDemoWi:

; 2998 :             }
; 2999 :             if (scroll_to_off)

  01e4f	0f b6 85 54 03
	00 00		 movzx	 eax, BYTE PTR scroll_to_off$44[rbp]
  01e56	85 c0		 test	 eax, eax
  01e58	74 0d		 je	 SHORT $LN147@ShowDemoWi

; 3000 :                 ImGui::SetScrollY(scroll_to_off_px);

  01e5a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?scroll_to_off_px@?IE@??ShowDemoWindowLayout@@YAXXZ@4MA
  01e62	e8 00 00 00 00	 call	 ?SetScrollY@ImGui@@YAXM@Z ; ImGui::SetScrollY
$LN147@ShowDemoWi:

; 3001 :             if (scroll_to_pos)

  01e67	0f b6 85 74 03
	00 00		 movzx	 eax, BYTE PTR scroll_to_pos$45[rbp]
  01e6e	85 c0		 test	 eax, eax
  01e70	74 3e		 je	 SHORT $LN148@ShowDemoWi

; 3002 :                 ImGui::SetScrollFromPosY(ImGui::GetCursorStartPos().y + scroll_to_pos_px, i * 0.25f);

  01e72	f3 0f 2a 85 d4
	03 00 00	 cvtsi2ss xmm0, DWORD PTR i$48[rbp]
  01e7a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  01e82	f3 0f 11 85 24
	18 00 00	 movss	 DWORD PTR tv1292[rbp], xmm0
  01e8a	48 8d 8d 74 14
	00 00		 lea	 rcx, QWORD PTR $T129[rbp]
  01e91	e8 00 00 00 00	 call	 ?GetCursorStartPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorStartPos
  01e96	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  01e9b	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?scroll_to_pos_px@?IE@??ShowDemoWindowLayout@@YAXXZ@4MA
  01ea3	f3 0f 10 8d 24
	18 00 00	 movss	 xmm1, DWORD PTR tv1292[rbp]
  01eab	e8 00 00 00 00	 call	 ?SetScrollFromPosY@ImGui@@YAXMM@Z ; ImGui::SetScrollFromPosY
$LN148@ShowDemoWi:

; 3003 :             if (child_is_visible) // Avoid calling SetScrollHereY when running with culled items

  01eb0	0f b6 85 74 04
	00 00		 movzx	 eax, BYTE PTR child_is_visible$52[rbp]
  01eb7	85 c0		 test	 eax, eax
  01eb9	0f 84 b1 00 00
	00		 je	 $LN149@ShowDemoWi

; 3004 :             {
; 3005 :                 for (int item = 0; item < 100; item++)

  01ebf	c7 85 94 04 00
	00 00 00 00 00	 mov	 DWORD PTR item$53[rbp], 0
  01ec9	eb 0e		 jmp	 SHORT $LN67@ShowDemoWi
$LN65@ShowDemoWi:
  01ecb	8b 85 94 04 00
	00		 mov	 eax, DWORD PTR item$53[rbp]
  01ed1	ff c0		 inc	 eax
  01ed3	89 85 94 04 00
	00		 mov	 DWORD PTR item$53[rbp], eax
$LN67@ShowDemoWi:
  01ed9	83 bd 94 04 00
	00 64		 cmp	 DWORD PTR item$53[rbp], 100 ; 00000064H
  01ee0	0f 8d 8a 00 00
	00		 jge	 $LN149@ShowDemoWi

; 3006 :                 {
; 3007 :                     if (enable_track && item == track_item)

  01ee6	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?enable_track@?IE@??ShowDemoWindowLayout@@YAXXZ@4_NA
  01eed	85 c0		 test	 eax, eax
  01eef	74 68		 je	 SHORT $LN150@ShowDemoWi
  01ef1	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?track_item@?IE@??ShowDemoWindowLayout@@YAXXZ@4HA
  01ef7	39 85 94 04 00
	00		 cmp	 DWORD PTR item$53[rbp], eax
  01efd	75 5a		 jne	 SHORT $LN150@ShowDemoWi

; 3008 :                     {
; 3009 :                         ImGui::TextColored(ImVec4(1, 1, 0, 1), "Item %d", item);

  01eff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01f07	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01f0d	0f 57 db	 xorps	 xmm3, xmm3
  01f10	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  01f18	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  01f20	48 8d 8d 94 14
	00 00		 lea	 rcx, QWORD PTR $T130[rbp]
  01f27	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  01f2c	44 8b 85 94 04
	00 00		 mov	 r8d, DWORD PTR item$53[rbp]
  01f33	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07BCJGKFOL@Item?5?$CFd?$AA@
  01f3a	48 8b c8	 mov	 rcx, rax
  01f3d	e8 00 00 00 00	 call	 ?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ ; ImGui::TextColored

; 3010 :                         ImGui::SetScrollHereY(i * 0.25f); // 0.0f:top, 0.5f:center, 1.0f:bottom

  01f42	f3 0f 2a 85 d4
	03 00 00	 cvtsi2ss xmm0, DWORD PTR i$48[rbp]
  01f4a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  01f52	e8 00 00 00 00	 call	 ?SetScrollHereY@ImGui@@YAXM@Z ; ImGui::SetScrollHereY

; 3011 :                     }
; 3012 :                     else

  01f57	eb 12		 jmp	 SHORT $LN151@ShowDemoWi
$LN150@ShowDemoWi:

; 3013 :                     {
; 3014 :                         ImGui::Text("Item %d", item);

  01f59	8b 95 94 04 00
	00		 mov	 edx, DWORD PTR item$53[rbp]
  01f5f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07BCJGKFOL@Item?5?$CFd?$AA@
  01f66	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN151@ShowDemoWi:

; 3015 :                     }
; 3016 :                 }

  01f6b	e9 5b ff ff ff	 jmp	 $LN65@ShowDemoWi
$LN149@ShowDemoWi:

; 3017 :             }
; 3018 :             float scroll_y = ImGui::GetScrollY();

  01f70	e8 00 00 00 00	 call	 ?GetScrollY@ImGui@@YAMXZ ; ImGui::GetScrollY
  01f75	f3 0f 11 85 b4
	04 00 00	 movss	 DWORD PTR scroll_y$54[rbp], xmm0

; 3019 :             float scroll_max_y = ImGui::GetScrollMaxY();

  01f7d	e8 00 00 00 00	 call	 ?GetScrollMaxY@ImGui@@YAMXZ ; ImGui::GetScrollMaxY
  01f82	f3 0f 11 85 d4
	04 00 00	 movss	 DWORD PTR scroll_max_y$55[rbp], xmm0

; 3020 :             ImGui::EndChild();

  01f8a	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 3021 :             ImGui::Text("%.0f/%.0f", scroll_y, scroll_max_y);

  01f8f	f3 0f 5a 85 d4
	04 00 00	 cvtss2sd xmm0, DWORD PTR scroll_max_y$55[rbp]
  01f97	f3 0f 5a 8d b4
	04 00 00	 cvtss2sd xmm1, DWORD PTR scroll_y$54[rbp]
  01f9f	0f 28 d0	 movaps	 xmm2, xmm0
  01fa2	66 49 0f 7e d0	 movq	 r8, xmm2
  01fa7	66 48 0f 7e ca	 movq	 rdx, xmm1
  01fac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09DKGDMKKF@?$CF?40f?1?$CF?40f?$AA@
  01fb3	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3022 :             ImGui::EndGroup();

  01fb8	e8 00 00 00 00	 call	 ?EndGroup@ImGui@@YAXXZ	; ImGui::EndGroup

; 3023 :         }

  01fbd	e9 5d fd ff ff	 jmp	 $LN62@ShowDemoWi
$LN63@ShowDemoWi:

; 3024 :         ImGui::PopID();

  01fc2	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID
$LN70@ShowDemoWi:

; 3025 : 
; 3026 :         // Horizontal scroll functions
; 3027 :         IMGUI_DEMO_MARKER("Layout/Scrolling/Horizontal");

  01fc7	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  01fcf	74 28		 je	 SHORT $LN152@ShowDemoWi
  01fd1	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA
  01fd7	05 fb 01 00 00	 add	 eax, 507		; 000001fbH
  01fdc	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  01fe3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BM@CLNONEPI@Layout?1Scrolling?1Horizontal?$AA@
  01fea	8b d0		 mov	 edx, eax
  01fec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  01ff3	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN152@ShowDemoWi:
  01ff9	33 c0		 xor	 eax, eax
  01ffb	85 c0		 test	 eax, eax
  01ffd	75 c8		 jne	 SHORT $LN70@ShowDemoWi

; 3028 :         ImGui::Spacing();

  01fff	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 3029 :         HelpMarker(

  02004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BDB@LNFKBNGF@Use?5SetScrollHereX?$CI?$CJ?5or?5SetScrol@
  0200b	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 3030 :             "Use SetScrollHereX() or SetScrollFromPosX() to scroll to a given horizontal position.\n\n"
; 3031 :             "Because the clipping rectangle of most window hides half worth of WindowPadding on the "
; 3032 :             "left/right, using SetScrollFromPosX(+1) will usually result in clipped text whereas the "
; 3033 :             "equivalent SetScrollFromPosY(+1) wouldn't.");
; 3034 :         ImGui::PushID("##HorizontalScrolling");

  02010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@BEAADLOE@?$CD?$CDHorizontalScrolling?$AA@
  02017	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPEBD@Z ; ImGui::PushID

; 3035 :         for (int i = 0; i < 5; i++)

  0201c	c7 85 f4 04 00
	00 00 00 00 00	 mov	 DWORD PTR i$56[rbp], 0
  02026	eb 0e		 jmp	 SHORT $LN73@ShowDemoWi
$LN71@ShowDemoWi:
  02028	8b 85 f4 04 00
	00		 mov	 eax, DWORD PTR i$56[rbp]
  0202e	ff c0		 inc	 eax
  02030	89 85 f4 04 00
	00		 mov	 DWORD PTR i$56[rbp], eax
$LN73@ShowDemoWi:
  02036	83 bd f4 04 00
	00 05		 cmp	 DWORD PTR i$56[rbp], 5
  0203d	0f 8d a4 02 00
	00		 jge	 $LN72@ShowDemoWi

; 3036 :         {
; 3037 :             float child_height = ImGui::GetTextLineHeight() + style.ScrollbarSize + style.WindowPadding.y * 2.0f;

  02043	e8 00 00 00 00	 call	 ?GetTextLineHeight@ImGui@@YAMXZ ; ImGui::GetTextLineHeight
  02048	48 8b 85 98 03
	00 00		 mov	 rax, QWORD PTR style$46[rbp]
  0204f	f3 0f 58 40 74	 addss	 xmm0, DWORD PTR [rax+116]
  02054	48 8b 85 98 03
	00 00		 mov	 rax, QWORD PTR style$46[rbp]
  0205b	f3 0f 10 48 0c	 movss	 xmm1, DWORD PTR [rax+12]
  02060	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  02068	f3 0f 58 c1	 addss	 xmm0, xmm1
  0206c	f3 0f 11 85 14
	05 00 00	 movss	 DWORD PTR child_height$57[rbp], xmm0

; 3038 :             ImGuiWindowFlags child_flags = ImGuiWindowFlags_HorizontalScrollbar | (enable_extra_decorations ? ImGuiWindowFlags_AlwaysVerticalScrollbar : 0);

  02074	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?enable_extra_decorations@?IE@??ShowDemoWindowLayout@@YAXXZ@4_NA
  0207b	85 c0		 test	 eax, eax
  0207d	74 0c		 je	 SHORT $LN192@ShowDemoWi
  0207f	c7 85 24 18 00
	00 00 40 00 00	 mov	 DWORD PTR tv1347[rbp], 16384 ; 00004000H
  02089	eb 0a		 jmp	 SHORT $LN193@ShowDemoWi
$LN192@ShowDemoWi:
  0208b	c7 85 24 18 00
	00 00 00 00 00	 mov	 DWORD PTR tv1347[rbp], 0
$LN193@ShowDemoWi:
  02095	8b 85 24 18 00
	00		 mov	 eax, DWORD PTR tv1347[rbp]
  0209b	0f ba e8 0b	 bts	 eax, 11
  0209f	89 85 34 05 00
	00		 mov	 DWORD PTR child_flags$58[rbp], eax

; 3039 :             ImGuiID child_id = ImGui::GetID((void*)(intptr_t)i);

  020a5	48 63 85 f4 04
	00 00		 movsxd	 rax, DWORD PTR i$56[rbp]
  020ac	48 8b c8	 mov	 rcx, rax
  020af	e8 00 00 00 00	 call	 ?GetID@ImGui@@YAIPEBX@Z	; ImGui::GetID
  020b4	89 85 54 05 00
	00		 mov	 DWORD PTR child_id$59[rbp], eax

; 3040 :             bool child_is_visible = ImGui::BeginChild(child_id, ImVec2(-100, child_height), true, child_flags);

  020ba	f3 0f 10 95 14
	05 00 00	 movss	 xmm2, DWORD PTR child_height$57[rbp]
  020c2	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@c2c80000
  020ca	48 8d 8d c4 14
	00 00		 lea	 rcx, QWORD PTR $T131[rbp]
  020d1	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  020d6	44 8b 8d 34 05
	00 00		 mov	 r9d, DWORD PTR child_flags$58[rbp]
  020dd	41 b0 01	 mov	 r8b, 1
  020e0	48 8b d0	 mov	 rdx, rax
  020e3	8b 8d 54 05 00
	00		 mov	 ecx, DWORD PTR child_id$59[rbp]
  020e9	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NIAEBUImVec2@@_NH@Z ; ImGui::BeginChild
  020ee	88 85 74 05 00
	00		 mov	 BYTE PTR child_is_visible$60[rbp], al

; 3041 :             if (scroll_to_off)

  020f4	0f b6 85 54 03
	00 00		 movzx	 eax, BYTE PTR scroll_to_off$44[rbp]
  020fb	85 c0		 test	 eax, eax
  020fd	74 0d		 je	 SHORT $LN153@ShowDemoWi

; 3042 :                 ImGui::SetScrollX(scroll_to_off_px);

  020ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?scroll_to_off_px@?IE@??ShowDemoWindowLayout@@YAXXZ@4MA
  02107	e8 00 00 00 00	 call	 ?SetScrollX@ImGui@@YAXM@Z ; ImGui::SetScrollX
$LN153@ShowDemoWi:

; 3043 :             if (scroll_to_pos)

  0210c	0f b6 85 74 03
	00 00		 movzx	 eax, BYTE PTR scroll_to_pos$45[rbp]
  02113	85 c0		 test	 eax, eax
  02115	74 3d		 je	 SHORT $LN154@ShowDemoWi

; 3044 :                 ImGui::SetScrollFromPosX(ImGui::GetCursorStartPos().x + scroll_to_pos_px, i * 0.25f);

  02117	f3 0f 2a 85 f4
	04 00 00	 cvtsi2ss xmm0, DWORD PTR i$56[rbp]
  0211f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  02127	f3 0f 11 85 24
	18 00 00	 movss	 DWORD PTR tv1367[rbp], xmm0
  0212f	48 8d 8d e4 14
	00 00		 lea	 rcx, QWORD PTR $T132[rbp]
  02136	e8 00 00 00 00	 call	 ?GetCursorStartPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorStartPos
  0213b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  0213f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?scroll_to_pos_px@?IE@??ShowDemoWindowLayout@@YAXXZ@4MA
  02147	f3 0f 10 8d 24
	18 00 00	 movss	 xmm1, DWORD PTR tv1367[rbp]
  0214f	e8 00 00 00 00	 call	 ?SetScrollFromPosX@ImGui@@YAXMM@Z ; ImGui::SetScrollFromPosX
$LN154@ShowDemoWi:

; 3045 :             if (child_is_visible) // Avoid calling SetScrollHereY when running with culled items

  02154	0f b6 85 74 05
	00 00		 movzx	 eax, BYTE PTR child_is_visible$60[rbp]
  0215b	85 c0		 test	 eax, eax
  0215d	0f 84 ca 00 00
	00		 je	 $LN155@ShowDemoWi

; 3046 :             {
; 3047 :                 for (int item = 0; item < 100; item++)

  02163	c7 85 94 05 00
	00 00 00 00 00	 mov	 DWORD PTR item$61[rbp], 0
  0216d	eb 0e		 jmp	 SHORT $LN76@ShowDemoWi
$LN74@ShowDemoWi:
  0216f	8b 85 94 05 00
	00		 mov	 eax, DWORD PTR item$61[rbp]
  02175	ff c0		 inc	 eax
  02177	89 85 94 05 00
	00		 mov	 DWORD PTR item$61[rbp], eax
$LN76@ShowDemoWi:
  0217d	83 bd 94 05 00
	00 64		 cmp	 DWORD PTR item$61[rbp], 100 ; 00000064H
  02184	0f 8d a3 00 00
	00		 jge	 $LN155@ShowDemoWi

; 3048 :                 {
; 3049 :                     if (item > 0)

  0218a	83 bd 94 05 00
	00 00		 cmp	 DWORD PTR item$61[rbp], 0
  02191	7e 10		 jle	 SHORT $LN156@ShowDemoWi

; 3050 :                         ImGui::SameLine();

  02193	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0219b	0f 57 c0	 xorps	 xmm0, xmm0
  0219e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
$LN156@ShowDemoWi:

; 3051 :                     if (enable_track && item == track_item)

  021a3	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?enable_track@?IE@??ShowDemoWindowLayout@@YAXXZ@4_NA
  021aa	85 c0		 test	 eax, eax
  021ac	74 68		 je	 SHORT $LN157@ShowDemoWi
  021ae	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?track_item@?IE@??ShowDemoWindowLayout@@YAXXZ@4HA
  021b4	39 85 94 05 00
	00		 cmp	 DWORD PTR item$61[rbp], eax
  021ba	75 5a		 jne	 SHORT $LN157@ShowDemoWi

; 3052 :                     {
; 3053 :                         ImGui::TextColored(ImVec4(1, 1, 0, 1), "Item %d", item);

  021bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  021c4	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  021ca	0f 57 db	 xorps	 xmm3, xmm3
  021cd	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  021d5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  021dd	48 8d 8d 04 15
	00 00		 lea	 rcx, QWORD PTR $T133[rbp]
  021e4	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  021e9	44 8b 85 94 05
	00 00		 mov	 r8d, DWORD PTR item$61[rbp]
  021f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07BCJGKFOL@Item?5?$CFd?$AA@
  021f7	48 8b c8	 mov	 rcx, rax
  021fa	e8 00 00 00 00	 call	 ?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ ; ImGui::TextColored

; 3054 :                         ImGui::SetScrollHereX(i * 0.25f); // 0.0f:left, 0.5f:center, 1.0f:right

  021ff	f3 0f 2a 85 f4
	04 00 00	 cvtsi2ss xmm0, DWORD PTR i$56[rbp]
  02207	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  0220f	e8 00 00 00 00	 call	 ?SetScrollHereX@ImGui@@YAXM@Z ; ImGui::SetScrollHereX

; 3055 :                     }
; 3056 :                     else

  02214	eb 12		 jmp	 SHORT $LN158@ShowDemoWi
$LN157@ShowDemoWi:

; 3057 :                     {
; 3058 :                         ImGui::Text("Item %d", item);

  02216	8b 95 94 05 00
	00		 mov	 edx, DWORD PTR item$61[rbp]
  0221c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07BCJGKFOL@Item?5?$CFd?$AA@
  02223	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN158@ShowDemoWi:

; 3059 :                     }
; 3060 :                 }

  02228	e9 42 ff ff ff	 jmp	 $LN74@ShowDemoWi
$LN155@ShowDemoWi:

; 3061 :             }
; 3062 :             float scroll_x = ImGui::GetScrollX();

  0222d	e8 00 00 00 00	 call	 ?GetScrollX@ImGui@@YAMXZ ; ImGui::GetScrollX
  02232	f3 0f 11 85 b4
	05 00 00	 movss	 DWORD PTR scroll_x$62[rbp], xmm0

; 3063 :             float scroll_max_x = ImGui::GetScrollMaxX();

  0223a	e8 00 00 00 00	 call	 ?GetScrollMaxX@ImGui@@YAMXZ ; ImGui::GetScrollMaxX
  0223f	f3 0f 11 85 d4
	05 00 00	 movss	 DWORD PTR scroll_max_x$63[rbp], xmm0

; 3064 :             ImGui::EndChild();

  02247	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 3065 :             ImGui::SameLine();

  0224c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  02254	0f 57 c0	 xorps	 xmm0, xmm0
  02257	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 3066 :             const char* names[] = { "Left", "25%", "Center", "75%", "Right" };

  0225c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04KPCPLBPL@Left?$AA@
  02263	48 89 85 f8 05
	00 00		 mov	 QWORD PTR names$64[rbp], rax
  0226a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03EOMKOHFF@25?$CF?$AA@
  02271	48 89 85 00 06
	00 00		 mov	 QWORD PTR names$64[rbp+8], rax
  02278	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06NOADDNNE@Center?$AA@
  0227f	48 89 85 08 06
	00 00		 mov	 QWORD PTR names$64[rbp+16], rax
  02286	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03HJBEBHGH@75?$CF?$AA@
  0228d	48 89 85 10 06
	00 00		 mov	 QWORD PTR names$64[rbp+24], rax
  02294	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05DADPALEM@Right?$AA@
  0229b	48 89 85 18 06
	00 00		 mov	 QWORD PTR names$64[rbp+32], rax

; 3067 :             ImGui::Text("%s\n%.0f/%.0f", names[i], scroll_x, scroll_max_x);

  022a2	f3 0f 5a 85 d4
	05 00 00	 cvtss2sd xmm0, DWORD PTR scroll_max_x$63[rbp]
  022aa	f3 0f 5a 8d b4
	05 00 00	 cvtss2sd xmm1, DWORD PTR scroll_x$62[rbp]
  022b2	48 63 85 f4 04
	00 00		 movsxd	 rax, DWORD PTR i$56[rbp]
  022b9	0f 28 d8	 movaps	 xmm3, xmm0
  022bc	66 49 0f 7e d9	 movq	 r9, xmm3
  022c1	0f 28 d1	 movaps	 xmm2, xmm1
  022c4	66 49 0f 7e d0	 movq	 r8, xmm2
  022c9	48 8b 94 c5 f8
	05 00 00	 mov	 rdx, QWORD PTR names$64[rbp+rax*8]
  022d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MJLHBHDH@?$CFs?6?$CF?40f?1?$CF?40f?$AA@
  022d8	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3068 :             ImGui::Spacing();

  022dd	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 3069 :         }

  022e2	e9 41 fd ff ff	 jmp	 $LN71@ShowDemoWi
$LN72@ShowDemoWi:

; 3070 :         ImGui::PopID();

  022e7	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID
$LN79@ShowDemoWi:

; 3071 : 
; 3072 :         // Miscellaneous Horizontal Scrolling Demo
; 3073 :         IMGUI_DEMO_MARKER("Layout/Scrolling/Horizontal (more)");

  022ec	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  022f4	74 28		 je	 SHORT $LN159@ShowDemoWi
  022f6	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA
  022fc	05 29 02 00 00	 add	 eax, 553		; 00000229H
  02301	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  02308	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CD@POIINEAC@Layout?1Scrolling?1Horizontal?5?$CImor@
  0230f	8b d0		 mov	 edx, eax
  02311	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  02318	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN159@ShowDemoWi:
  0231e	33 c0		 xor	 eax, eax
  02320	85 c0		 test	 eax, eax
  02322	75 c8		 jne	 SHORT $LN79@ShowDemoWi

; 3074 :         HelpMarker(

  02324	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0MM@GGDOLBND@Horizontal?5scrolling?5for?5a?5windo@
  0232b	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 3075 :             "Horizontal scrolling for a window is enabled via the ImGuiWindowFlags_HorizontalScrollbar flag.\n\n"
; 3076 :             "You may want to also explicitly specify content width by using SetNextWindowContentWidth() before Begin().");
; 3077 :         static int lines = 7;
; 3078 :         ImGui::SliderInt("Lines", &lines, 1, 15);

  02330	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  02338	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  0233f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02344	41 b9 0f 00 00
	00		 mov	 r9d, 15
  0234a	41 b8 01 00 00
	00		 mov	 r8d, 1
  02350	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?lines@?IE@??ShowDemoWindowLayout@@YAXXZ@4HA
  02357	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05DDHCCCLJ@Lines?$AA@
  0235e	e8 00 00 00 00	 call	 ?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z ; ImGui::SliderInt

; 3079 :         ImGui::PushStyleVar(ImGuiStyleVar_FrameRounding, 3.0f);

  02363	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40400000
  0236b	b9 0c 00 00 00	 mov	 ecx, 12
  02370	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHM@Z ; ImGui::PushStyleVar

; 3080 :         ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2.0f, 1.0f));

  02375	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  0237d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  02385	48 8d 8d 34 15
	00 00		 lea	 rcx, QWORD PTR $T134[rbp]
  0238c	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02391	48 8b d0	 mov	 rdx, rax
  02394	b9 0b 00 00 00	 mov	 ecx, 11
  02399	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z ; ImGui::PushStyleVar

; 3081 :         ImVec2 scrolling_child_size = ImVec2(0, ImGui::GetFrameHeightWithSpacing() * 7 + 30);

  0239e	e8 00 00 00 00	 call	 ?GetFrameHeightWithSpacing@ImGui@@YAMXZ ; ImGui::GetFrameHeightWithSpacing
  023a3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40e00000
  023ab	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41f00000
  023b3	0f 28 d0	 movaps	 xmm2, xmm0
  023b6	0f 57 c9	 xorps	 xmm1, xmm1
  023b9	48 8d 8d 38 06
	00 00		 lea	 rcx, QWORD PTR scrolling_child_size$65[rbp]
  023c0	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 3082 :         ImGui::BeginChild("scrolling", scrolling_child_size, true, ImGuiWindowFlags_HorizontalScrollbar);

  023c5	41 b9 00 08 00
	00		 mov	 r9d, 2048		; 00000800H
  023cb	41 b0 01	 mov	 r8b, 1
  023ce	48 8d 95 38 06
	00 00		 lea	 rdx, QWORD PTR scrolling_child_size$65[rbp]
  023d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09PKEBEIDM@scrolling?$AA@
  023dc	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z ; ImGui::BeginChild

; 3083 :         for (int line = 0; line < lines; line++)

  023e1	c7 85 54 06 00
	00 00 00 00 00	 mov	 DWORD PTR line$66[rbp], 0
  023eb	eb 0e		 jmp	 SHORT $LN82@ShowDemoWi
$LN80@ShowDemoWi:
  023ed	8b 85 54 06 00
	00		 mov	 eax, DWORD PTR line$66[rbp]
  023f3	ff c0		 inc	 eax
  023f5	89 85 54 06 00
	00		 mov	 DWORD PTR line$66[rbp], eax
$LN82@ShowDemoWi:
  023fb	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?lines@?IE@??ShowDemoWindowLayout@@YAXXZ@4HA
  02401	39 85 54 06 00
	00		 cmp	 DWORD PTR line$66[rbp], eax
  02407	0f 8d c3 02 00
	00		 jge	 $LN81@ShowDemoWi

; 3084 :         {
; 3085 :             // Display random stuff. For the sake of this trivial demo we are using basic Button() + SameLine()
; 3086 :             // If you want to create your own time line for a real application you may be better off manipulating
; 3087 :             // the cursor position yourself, aka using SetCursorPos/SetCursorScreenPos to position the widgets
; 3088 :             // yourself. You may also want to use the lower-level ImDrawList API.
; 3089 :             int num_buttons = 10 + ((line & 1) ? line * 9 : line * 3);

  0240d	8b 85 54 06 00
	00		 mov	 eax, DWORD PTR line$66[rbp]
  02413	83 e0 01	 and	 eax, 1
  02416	85 c0		 test	 eax, eax
  02418	74 0f		 je	 SHORT $LN194@ShowDemoWi
  0241a	6b 85 54 06 00
	00 09		 imul	 eax, DWORD PTR line$66[rbp], 9
  02421	89 85 24 18 00
	00		 mov	 DWORD PTR tv1481[rbp], eax
  02427	eb 0d		 jmp	 SHORT $LN195@ShowDemoWi
$LN194@ShowDemoWi:
  02429	6b 85 54 06 00
	00 03		 imul	 eax, DWORD PTR line$66[rbp], 3
  02430	89 85 24 18 00
	00		 mov	 DWORD PTR tv1481[rbp], eax
$LN195@ShowDemoWi:
  02436	8b 85 24 18 00
	00		 mov	 eax, DWORD PTR tv1481[rbp]
  0243c	83 c0 0a	 add	 eax, 10
  0243f	89 85 74 06 00
	00		 mov	 DWORD PTR num_buttons$67[rbp], eax

; 3090 :             for (int n = 0; n < num_buttons; n++)

  02445	c7 85 94 06 00
	00 00 00 00 00	 mov	 DWORD PTR n$68[rbp], 0
  0244f	eb 0e		 jmp	 SHORT $LN85@ShowDemoWi
$LN83@ShowDemoWi:
  02451	8b 85 94 06 00
	00		 mov	 eax, DWORD PTR n$68[rbp]
  02457	ff c0		 inc	 eax
  02459	89 85 94 06 00
	00		 mov	 DWORD PTR n$68[rbp], eax
$LN85@ShowDemoWi:
  0245f	8b 85 74 06 00
	00		 mov	 eax, DWORD PTR num_buttons$67[rbp]
  02465	39 85 94 06 00
	00		 cmp	 DWORD PTR n$68[rbp], eax
  0246b	0f 8d 5a 02 00
	00		 jge	 $LN84@ShowDemoWi

; 3091 :             {
; 3092 :                 if (n > 0) ImGui::SameLine();

  02471	83 bd 94 06 00
	00 00		 cmp	 DWORD PTR n$68[rbp], 0
  02478	7e 10		 jle	 SHORT $LN160@ShowDemoWi
  0247a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  02482	0f 57 c0	 xorps	 xmm0, xmm0
  02485	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
$LN160@ShowDemoWi:

; 3093 :                 ImGui::PushID(n + line * 1000);

  0248a	69 85 54 06 00
	00 e8 03 00 00	 imul	 eax, DWORD PTR line$66[rbp], 1000 ; 000003e8H
  02494	8b 8d 94 06 00
	00		 mov	 ecx, DWORD PTR n$68[rbp]
  0249a	03 c8		 add	 ecx, eax
  0249c	8b c1		 mov	 eax, ecx
  0249e	8b c8		 mov	 ecx, eax
  024a0	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 3094 :                 char num_buf[16];
; 3095 :                 sprintf(num_buf, "%d", n);

  024a5	44 8b 85 94 06
	00 00		 mov	 r8d, DWORD PTR n$68[rbp]
  024ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  024b3	48 8d 8d b8 06
	00 00		 lea	 rcx, QWORD PTR num_buf$69[rbp]
  024ba	e8 00 00 00 00	 call	 sprintf

; 3096 :                 const char* label = (!(n % 15)) ? "FizzBuzz" : (!(n % 3)) ? "Fizz" : (!(n % 5)) ? "Buzz" : num_buf;

  024bf	8b 85 94 06 00
	00		 mov	 eax, DWORD PTR n$68[rbp]
  024c5	99		 cdq
  024c6	b9 0f 00 00 00	 mov	 ecx, 15
  024cb	f7 f9		 idiv	 ecx
  024cd	8b c2		 mov	 eax, edx
  024cf	85 c0		 test	 eax, eax
  024d1	75 10		 jne	 SHORT $LN200@ShowDemoWi
  024d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08GLBPKMPD@FizzBuzz?$AA@
  024da	48 89 85 28 18
	00 00		 mov	 QWORD PTR tv1502[rbp], rax
  024e1	eb 72		 jmp	 SHORT $LN201@ShowDemoWi
$LN200@ShowDemoWi:
  024e3	8b 85 94 06 00
	00		 mov	 eax, DWORD PTR n$68[rbp]
  024e9	99		 cdq
  024ea	b9 03 00 00 00	 mov	 ecx, 3
  024ef	f7 f9		 idiv	 ecx
  024f1	8b c2		 mov	 eax, edx
  024f3	85 c0		 test	 eax, eax
  024f5	75 10		 jne	 SHORT $LN198@ShowDemoWi
  024f7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04CEPGGBHI@Fizz?$AA@
  024fe	48 89 85 30 18
	00 00		 mov	 QWORD PTR tv1501[rbp], rax
  02505	eb 40		 jmp	 SHORT $LN199@ShowDemoWi
$LN198@ShowDemoWi:
  02507	8b 85 94 06 00
	00		 mov	 eax, DWORD PTR n$68[rbp]
  0250d	99		 cdq
  0250e	b9 05 00 00 00	 mov	 ecx, 5
  02513	f7 f9		 idiv	 ecx
  02515	8b c2		 mov	 eax, edx
  02517	85 c0		 test	 eax, eax
  02519	75 10		 jne	 SHORT $LN196@ShowDemoWi
  0251b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04MLLJCPJP@Buzz?$AA@
  02522	48 89 85 38 18
	00 00		 mov	 QWORD PTR tv1500[rbp], rax
  02529	eb 0e		 jmp	 SHORT $LN197@ShowDemoWi
$LN196@ShowDemoWi:
  0252b	48 8d 85 b8 06
	00 00		 lea	 rax, QWORD PTR num_buf$69[rbp]
  02532	48 89 85 38 18
	00 00		 mov	 QWORD PTR tv1500[rbp], rax
$LN197@ShowDemoWi:
  02539	48 8b 85 38 18
	00 00		 mov	 rax, QWORD PTR tv1500[rbp]
  02540	48 89 85 30 18
	00 00		 mov	 QWORD PTR tv1501[rbp], rax
$LN199@ShowDemoWi:
  02547	48 8b 85 30 18
	00 00		 mov	 rax, QWORD PTR tv1501[rbp]
  0254e	48 89 85 28 18
	00 00		 mov	 QWORD PTR tv1502[rbp], rax
$LN201@ShowDemoWi:
  02555	48 8b 85 28 18
	00 00		 mov	 rax, QWORD PTR tv1502[rbp]
  0255c	48 89 85 e8 06
	00 00		 mov	 QWORD PTR label$70[rbp], rax

; 3097 :                 float hue = n * 0.05f;

  02563	f3 0f 2a 85 94
	06 00 00	 cvtsi2ss xmm0, DWORD PTR n$68[rbp]
  0256b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3d4ccccd
  02573	f3 0f 11 85 04
	07 00 00	 movss	 DWORD PTR hue$71[rbp], xmm0

; 3098 :                 ImGui::PushStyleColor(ImGuiCol_Button, (ImVec4)ImColor::HSV(hue, 0.6f, 0.6f));

  0257b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02583	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  02589	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f19999a
  02591	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f19999a
  02599	f3 0f 10 8d 04
	07 00 00	 movss	 xmm1, DWORD PTR hue$71[rbp]
  025a1	48 8d 8d 54 15
	00 00		 lea	 rcx, QWORD PTR $T135[rbp]
  025a8	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  025ad	48 8d 95 84 15
	00 00		 lea	 rdx, QWORD PTR $T136[rbp]
  025b4	48 8b c8	 mov	 rcx, rax
  025b7	e8 00 00 00 00	 call	 ??BImColor@@QEBA?AUImVec4@@XZ ; ImColor::operator ImVec4
  025bc	48 8b d0	 mov	 rdx, rax
  025bf	b9 15 00 00 00	 mov	 ecx, 21
  025c4	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor

; 3099 :                 ImGui::PushStyleColor(ImGuiCol_ButtonHovered, (ImVec4)ImColor::HSV(hue, 0.7f, 0.7f));

  025c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  025d1	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  025d7	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f333333
  025df	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f333333
  025e7	f3 0f 10 8d 04
	07 00 00	 movss	 xmm1, DWORD PTR hue$71[rbp]
  025ef	48 8d 8d b4 15
	00 00		 lea	 rcx, QWORD PTR $T137[rbp]
  025f6	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  025fb	48 8d 95 e4 15
	00 00		 lea	 rdx, QWORD PTR $T138[rbp]
  02602	48 8b c8	 mov	 rcx, rax
  02605	e8 00 00 00 00	 call	 ??BImColor@@QEBA?AUImVec4@@XZ ; ImColor::operator ImVec4
  0260a	48 8b d0	 mov	 rdx, rax
  0260d	b9 16 00 00 00	 mov	 ecx, 22
  02612	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor

; 3100 :                 ImGui::PushStyleColor(ImGuiCol_ButtonActive, (ImVec4)ImColor::HSV(hue, 0.8f, 0.8f));

  02617	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0261f	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  02625	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f4ccccd
  0262d	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f4ccccd
  02635	f3 0f 10 8d 04
	07 00 00	 movss	 xmm1, DWORD PTR hue$71[rbp]
  0263d	48 8d 8d 14 16
	00 00		 lea	 rcx, QWORD PTR $T139[rbp]
  02644	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  02649	48 8d 95 44 16
	00 00		 lea	 rdx, QWORD PTR $T140[rbp]
  02650	48 8b c8	 mov	 rcx, rax
  02653	e8 00 00 00 00	 call	 ??BImColor@@QEBA?AUImVec4@@XZ ; ImColor::operator ImVec4
  02658	48 8b d0	 mov	 rdx, rax
  0265b	b9 17 00 00 00	 mov	 ecx, 23
  02660	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor

; 3101 :                 ImGui::Button(label, ImVec2(40.0f + sinf((float)(line + n)) * 20.0f, 0.0f));

  02665	8b 85 94 06 00
	00		 mov	 eax, DWORD PTR n$68[rbp]
  0266b	8b 8d 54 06 00
	00		 mov	 ecx, DWORD PTR line$66[rbp]
  02671	03 c8		 add	 ecx, eax
  02673	8b c1		 mov	 eax, ecx
  02675	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  02679	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sinf
  0267f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41a00000
  02687	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42200000
  0268f	f3 0f 58 c8	 addss	 xmm1, xmm0
  02693	0f 28 c1	 movaps	 xmm0, xmm1
  02696	0f 57 d2	 xorps	 xmm2, xmm2
  02699	0f 28 c8	 movaps	 xmm1, xmm0
  0269c	48 8d 8d 74 16
	00 00		 lea	 rcx, QWORD PTR $T141[rbp]
  026a3	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  026a8	48 8b d0	 mov	 rdx, rax
  026ab	48 8b 8d e8 06
	00 00		 mov	 rcx, QWORD PTR label$70[rbp]
  026b2	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 3102 :                 ImGui::PopStyleColor(3);

  026b7	b9 03 00 00 00	 mov	 ecx, 3
  026bc	e8 00 00 00 00	 call	 ?PopStyleColor@ImGui@@YAXH@Z ; ImGui::PopStyleColor

; 3103 :                 ImGui::PopID();

  026c1	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 3104 :             }

  026c6	e9 86 fd ff ff	 jmp	 $LN83@ShowDemoWi
$LN84@ShowDemoWi:

; 3105 :         }

  026cb	e9 1d fd ff ff	 jmp	 $LN80@ShowDemoWi
$LN81@ShowDemoWi:

; 3106 :         float scroll_x = ImGui::GetScrollX();

  026d0	e8 00 00 00 00	 call	 ?GetScrollX@ImGui@@YAMXZ ; ImGui::GetScrollX
  026d5	f3 0f 11 85 24
	07 00 00	 movss	 DWORD PTR scroll_x$72[rbp], xmm0

; 3107 :         float scroll_max_x = ImGui::GetScrollMaxX();

  026dd	e8 00 00 00 00	 call	 ?GetScrollMaxX@ImGui@@YAMXZ ; ImGui::GetScrollMaxX
  026e2	f3 0f 11 85 44
	07 00 00	 movss	 DWORD PTR scroll_max_x$73[rbp], xmm0

; 3108 :         ImGui::EndChild();

  026ea	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 3109 :         ImGui::PopStyleVar(2);

  026ef	b9 02 00 00 00	 mov	 ecx, 2
  026f4	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar

; 3110 :         float scroll_x_delta = 0.0f;

  026f9	0f 57 c0	 xorps	 xmm0, xmm0
  026fc	f3 0f 11 85 64
	07 00 00	 movss	 DWORD PTR scroll_x_delta$74[rbp], xmm0

; 3111 :         ImGui::SmallButton("<<");

  02704	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02FODMEDOG@?$DM?$DM?$AA@
  0270b	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton

; 3112 :         if (ImGui::IsItemActive())

  02710	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  02715	0f b6 c0	 movzx	 eax, al
  02718	85 c0		 test	 eax, eax
  0271a	74 21		 je	 SHORT $LN161@ShowDemoWi

; 3113 :             scroll_x_delta = -ImGui::GetIO().DeltaTime * 1000.0f;

  0271c	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  02721	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  02726	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0272d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@447a0000
  02735	f3 0f 11 85 64
	07 00 00	 movss	 DWORD PTR scroll_x_delta$74[rbp], xmm0
$LN161@ShowDemoWi:

; 3114 :         ImGui::SameLine();

  0273d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  02745	0f 57 c0	 xorps	 xmm0, xmm0
  02748	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 3115 :         ImGui::Text("Scroll from code"); ImGui::SameLine();

  0274d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@HICDBOJF@Scroll?5from?5code?$AA@
  02754	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  02759	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  02761	0f 57 c0	 xorps	 xmm0, xmm0
  02764	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 3116 :         ImGui::SmallButton(">>");

  02769	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02GPIOPFAK@?$DO?$DO?$AA@
  02770	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton

; 3117 :         if (ImGui::IsItemActive())

  02775	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  0277a	0f b6 c0	 movzx	 eax, al
  0277d	85 c0		 test	 eax, eax
  0277f	74 1a		 je	 SHORT $LN162@ShowDemoWi

; 3118 :             scroll_x_delta = +ImGui::GetIO().DeltaTime * 1000.0f;

  02781	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  02786	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  0278b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@447a0000
  02793	f3 0f 11 85 64
	07 00 00	 movss	 DWORD PTR scroll_x_delta$74[rbp], xmm0
$LN162@ShowDemoWi:

; 3119 :         ImGui::SameLine();

  0279b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  027a3	0f 57 c0	 xorps	 xmm0, xmm0
  027a6	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 3120 :         ImGui::Text("%.0f/%.0f", scroll_x, scroll_max_x);

  027ab	f3 0f 5a 85 44
	07 00 00	 cvtss2sd xmm0, DWORD PTR scroll_max_x$73[rbp]
  027b3	f3 0f 5a 8d 24
	07 00 00	 cvtss2sd xmm1, DWORD PTR scroll_x$72[rbp]
  027bb	0f 28 d0	 movaps	 xmm2, xmm0
  027be	66 49 0f 7e d0	 movq	 r8, xmm2
  027c3	66 48 0f 7e ca	 movq	 rdx, xmm1
  027c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09DKGDMKKF@?$CF?40f?1?$CF?40f?$AA@
  027cf	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3121 :         if (scroll_x_delta != 0.0f)

  027d4	f3 0f 10 85 64
	07 00 00	 movss	 xmm0, DWORD PTR scroll_x_delta$74[rbp]
  027dc	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  027e3	7a 02		 jp	 SHORT $LN206@ShowDemoWi
  027e5	74 3e		 je	 SHORT $LN163@ShowDemoWi
$LN206@ShowDemoWi:

; 3122 :         {
; 3123 :             // Demonstrate a trick: you can use Begin to set yourself in the context of another window
; 3124 :             // (here we are already out of your child window)
; 3125 :             ImGui::BeginChild("scrolling");

  027e7	0f 57 d2	 xorps	 xmm2, xmm2
  027ea	0f 57 c9	 xorps	 xmm1, xmm1
  027ed	48 8d 8d 94 16
	00 00		 lea	 rcx, QWORD PTR $T142[rbp]
  027f4	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  027f9	45 33 c9	 xor	 r9d, r9d
  027fc	45 33 c0	 xor	 r8d, r8d
  027ff	48 8b d0	 mov	 rdx, rax
  02802	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09PKEBEIDM@scrolling?$AA@
  02809	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z ; ImGui::BeginChild

; 3126 :             ImGui::SetScrollX(ImGui::GetScrollX() + scroll_x_delta);

  0280e	e8 00 00 00 00	 call	 ?GetScrollX@ImGui@@YAMXZ ; ImGui::GetScrollX
  02813	f3 0f 58 85 64
	07 00 00	 addss	 xmm0, DWORD PTR scroll_x_delta$74[rbp]
  0281b	e8 00 00 00 00	 call	 ?SetScrollX@ImGui@@YAXM@Z ; ImGui::SetScrollX

; 3127 :             ImGui::EndChild();

  02820	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild
$LN163@ShowDemoWi:

; 3128 :         }
; 3129 :         ImGui::Spacing();

  02825	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 3130 : 
; 3131 :         static bool show_horizontal_contents_size_demo_window = false;
; 3132 :         ImGui::Checkbox("Show Horizontal contents size demo window", &show_horizontal_contents_size_demo_window);

  0282a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?show_horizontal_contents_size_demo_window@?IE@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02831	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CK@KHHLOHPL@Show?5Horizontal?5contents?5size?5de@
  02838	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 3133 : 
; 3134 :         if (show_horizontal_contents_size_demo_window)

  0283d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_horizontal_contents_size_demo_window@?IE@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02844	85 c0		 test	 eax, eax
  02846	0f 84 5c 06 00
	00		 je	 $LN164@ShowDemoWi

; 3135 :         {
; 3136 :             static bool show_h_scrollbar = true;
; 3137 :             static bool show_button = true;
; 3138 :             static bool show_tree_nodes = true;
; 3139 :             static bool show_text_wrapped = false;
; 3140 :             static bool show_columns = true;
; 3141 :             static bool show_tab_bar = true;
; 3142 :             static bool show_child = false;
; 3143 :             static bool explicit_content_size = false;
; 3144 :             static float contents_size_x = 300.0f;
; 3145 :             if (explicit_content_size)

  0284c	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?explicit_content_size@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02853	85 c0		 test	 eax, eax
  02855	74 1f		 je	 SHORT $LN165@ShowDemoWi

; 3146 :                 ImGui::SetNextWindowContentSize(ImVec2(contents_size_x, 0.0f));

  02857	0f 57 d2	 xorps	 xmm2, xmm2
  0285a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?contents_size_x@?ML@??ShowDemoWindowLayout@@YAXXZ@4MA
  02862	48 8d 8d b4 16
	00 00		 lea	 rcx, QWORD PTR $T143[rbp]
  02869	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0286e	48 8b c8	 mov	 rcx, rax
  02871	e8 00 00 00 00	 call	 ?SetNextWindowContentSize@ImGui@@YAXAEBUImVec2@@@Z ; ImGui::SetNextWindowContentSize
$LN165@ShowDemoWi:

; 3147 :             ImGui::Begin("Horizontal contents size demo window", &show_horizontal_contents_size_demo_window, show_h_scrollbar ? ImGuiWindowFlags_HorizontalScrollbar : 0);

  02876	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_h_scrollbar@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA
  0287d	85 c0		 test	 eax, eax
  0287f	74 0c		 je	 SHORT $LN202@ShowDemoWi
  02881	c7 85 24 18 00
	00 00 08 00 00	 mov	 DWORD PTR tv1639[rbp], 2048 ; 00000800H
  0288b	eb 0a		 jmp	 SHORT $LN203@ShowDemoWi
$LN202@ShowDemoWi:
  0288d	c7 85 24 18 00
	00 00 00 00 00	 mov	 DWORD PTR tv1639[rbp], 0
$LN203@ShowDemoWi:
  02897	44 8b 85 24 18
	00 00		 mov	 r8d, DWORD PTR tv1639[rbp]
  0289e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?show_horizontal_contents_size_demo_window@?IE@??ShowDemoWindowLayout@@YAXXZ@4_NA
  028a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@OHGKBEFE@Horizontal?5contents?5size?5demo?5wi@
  028ac	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin
$LN88@ShowDemoWi:

; 3148 :             IMGUI_DEMO_MARKER("Layout/Scrolling/Horizontal contents size demo window");

  028b1	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  028b9	74 28		 je	 SHORT $LN166@ShowDemoWi
  028bb	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA
  028c1	05 74 02 00 00	 add	 eax, 628		; 00000274H
  028c6	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  028cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DG@FFKEOKBG@Layout?1Scrolling?1Horizontal?5cont@
  028d4	8b d0		 mov	 edx, eax
  028d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  028dd	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN166@ShowDemoWi:
  028e3	33 c0		 xor	 eax, eax
  028e5	85 c0		 test	 eax, eax
  028e7	75 c8		 jne	 SHORT $LN88@ShowDemoWi

; 3149 :             ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(2, 0));

  028e9	0f 57 d2	 xorps	 xmm2, xmm2
  028ec	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  028f4	48 8d 8d d4 16
	00 00		 lea	 rcx, QWORD PTR $T144[rbp]
  028fb	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02900	48 8b d0	 mov	 rdx, rax
  02903	b9 0e 00 00 00	 mov	 ecx, 14
  02908	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z ; ImGui::PushStyleVar

; 3150 :             ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2, 0));

  0290d	0f 57 d2	 xorps	 xmm2, xmm2
  02910	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  02918	48 8d 8d f4 16
	00 00		 lea	 rcx, QWORD PTR $T145[rbp]
  0291f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02924	48 8b d0	 mov	 rdx, rax
  02927	b9 0b 00 00 00	 mov	 ecx, 11
  0292c	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z ; ImGui::PushStyleVar

; 3151 :             HelpMarker("Test of different widgets react and impact the work rectangle growing when horizontal scrolling is enabled.\n\nUse 'Metrics->Tools->Show windows rectangles' to visualize rectangles.");

  02931	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0LE@BCMFBNBD@Test?5of?5different?5widgets?5react?5@
  02938	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 3152 :             ImGui::Checkbox("H-scrollbar", &show_h_scrollbar);

  0293d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?show_h_scrollbar@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02944	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PCJBMDND@H?9scrollbar?$AA@
  0294b	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 3153 :             ImGui::Checkbox("Button", &show_button);            // Will grow contents size (unless explicitly overwritten)

  02950	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?show_button@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02957	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06LKBCGDFD@Button?$AA@
  0295e	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 3154 :             ImGui::Checkbox("Tree nodes", &show_tree_nodes);    // Will grow contents size and display highlight over full width

  02963	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?show_tree_nodes@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA
  0296a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DIDHCLKE@Tree?5nodes?$AA@
  02971	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 3155 :             ImGui::Checkbox("Text wrapped", &show_text_wrapped);// Will grow and use contents size

  02976	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?show_text_wrapped@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA
  0297d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HDFBIJDK@Text?5wrapped?$AA@
  02984	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 3156 :             ImGui::Checkbox("Columns", &show_columns);          // Will use contents size

  02989	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?show_columns@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02990	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07IBCCJKML@Columns?$AA@
  02997	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 3157 :             ImGui::Checkbox("Tab bar", &show_tab_bar);          // Will use contents size

  0299c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?show_tab_bar@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA
  029a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07CHLOJOEF@Tab?5bar?$AA@
  029aa	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 3158 :             ImGui::Checkbox("Child", &show_child);              // Will grow and use contents size

  029af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?show_child@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA
  029b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05GIMBDOHM@Child?$AA@
  029bd	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 3159 :             ImGui::Checkbox("Explicit content size", &explicit_content_size);

  029c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?explicit_content_size@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA
  029c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@GEDBKKBK@Explicit?5content?5size?$AA@
  029d0	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 3160 :             ImGui::Text("Scroll %.1f/%.1f %.1f/%.1f", ImGui::GetScrollX(), ImGui::GetScrollMaxX(), ImGui::GetScrollY(), ImGui::GetScrollMaxY());

  029d5	e8 00 00 00 00	 call	 ?GetScrollMaxY@ImGui@@YAMXZ ; ImGui::GetScrollMaxY
  029da	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  029de	f2 0f 11 85 28
	18 00 00	 movsd	 QWORD PTR tv1711[rbp], xmm0
  029e6	e8 00 00 00 00	 call	 ?GetScrollY@ImGui@@YAMXZ ; ImGui::GetScrollY
  029eb	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  029ef	f2 0f 11 85 30
	18 00 00	 movsd	 QWORD PTR tv1714[rbp], xmm0
  029f7	e8 00 00 00 00	 call	 ?GetScrollMaxX@ImGui@@YAMXZ ; ImGui::GetScrollMaxX
  029fc	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  02a00	f2 0f 11 85 38
	18 00 00	 movsd	 QWORD PTR tv1717[rbp], xmm0
  02a08	e8 00 00 00 00	 call	 ?GetScrollX@ImGui@@YAMXZ ; ImGui::GetScrollX
  02a0d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  02a11	f2 0f 10 8d 28
	18 00 00	 movsd	 xmm1, QWORD PTR tv1711[rbp]
  02a19	f2 0f 11 4c 24
	20		 movsd	 QWORD PTR [rsp+32], xmm1
  02a1f	f2 0f 10 8d 30
	18 00 00	 movsd	 xmm1, QWORD PTR tv1714[rbp]
  02a27	0f 28 d9	 movaps	 xmm3, xmm1
  02a2a	66 49 0f 7e d9	 movq	 r9, xmm3
  02a2f	f2 0f 10 8d 38
	18 00 00	 movsd	 xmm1, QWORD PTR tv1717[rbp]
  02a37	0f 28 d1	 movaps	 xmm2, xmm1
  02a3a	66 49 0f 7e d0	 movq	 r8, xmm2
  02a3f	0f 28 c8	 movaps	 xmm1, xmm0
  02a42	66 48 0f 7e ca	 movq	 rdx, xmm1
  02a47	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@EDCBBBDH@Scroll?5?$CF?41f?1?$CF?41f?5?$CF?41f?1?$CF?41f?$AA@
  02a4e	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3161 :             if (explicit_content_size)

  02a53	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?explicit_content_size@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02a5a	85 c0		 test	 eax, eax
  02a5c	0f 84 92 01 00
	00		 je	 $LN167@ShowDemoWi

; 3162 :             {
; 3163 :                 ImGui::SameLine();

  02a62	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  02a6a	0f 57 c0	 xorps	 xmm0, xmm0
  02a6d	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 3164 :                 ImGui::SetNextItemWidth(100);

  02a72	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  02a7a	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth

; 3165 :                 ImGui::DragFloat("##csx", &contents_size_x);

  02a7f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  02a87	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  02a8e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  02a93	0f 57 c0	 xorps	 xmm0, xmm0
  02a96	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  02a9c	0f 57 db	 xorps	 xmm3, xmm3
  02a9f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  02aa7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?contents_size_x@?ML@??ShowDemoWindowLayout@@YAXXZ@4MA
  02aae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05NBKGABAK@?$CD?$CDcsx?$AA@
  02ab5	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 3166 :                 ImVec2 p = ImGui::GetCursorScreenPos();

  02aba	48 8d 8d 88 07
	00 00		 lea	 rcx, QWORD PTR p$75[rbp]
  02ac1	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos

; 3167 :                 ImGui::GetWindowDrawList()->AddRectFilled(p, ImVec2(p.x + 10, p.y + 10), IM_COL32_WHITE);

  02ac6	f3 0f 10 85 8c
	07 00 00	 movss	 xmm0, DWORD PTR p$75[rbp+4]
  02ace	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  02ad6	f3 0f 10 8d 88
	07 00 00	 movss	 xmm1, DWORD PTR p$75[rbp]
  02ade	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@41200000
  02ae6	0f 28 d0	 movaps	 xmm2, xmm0
  02ae9	48 8d 8d 14 17
	00 00		 lea	 rcx, QWORD PTR $T146[rbp]
  02af0	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02af5	48 89 85 28 18
	00 00		 mov	 QWORD PTR tv1742[rbp], rax
  02afc	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPEAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  02b01	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  02b09	0f 57 c0	 xorps	 xmm0, xmm0
  02b0c	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  02b12	41 b9 ff ff ff
	ff		 mov	 r9d, -1			; ffffffffH
  02b18	48 8b 8d 28 18
	00 00		 mov	 rcx, QWORD PTR tv1742[rbp]
  02b1f	4c 8b c1	 mov	 r8, rcx
  02b22	48 8d 95 88 07
	00 00		 lea	 rdx, QWORD PTR p$75[rbp]
  02b29	48 8b c8	 mov	 rcx, rax
  02b2c	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled

; 3168 :                 ImGui::GetWindowDrawList()->AddRectFilled(ImVec2(p.x + contents_size_x - 10, p.y), ImVec2(p.x + contents_size_x, p.y + 10), IM_COL32_WHITE);

  02b31	f3 0f 10 85 8c
	07 00 00	 movss	 xmm0, DWORD PTR p$75[rbp+4]
  02b39	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  02b41	f3 0f 10 8d 88
	07 00 00	 movss	 xmm1, DWORD PTR p$75[rbp]
  02b49	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?contents_size_x@?ML@??ShowDemoWindowLayout@@YAXXZ@4MA
  02b51	0f 28 d0	 movaps	 xmm2, xmm0
  02b54	48 8d 8d 34 17
	00 00		 lea	 rcx, QWORD PTR $T147[rbp]
  02b5b	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02b60	48 89 85 28 18
	00 00		 mov	 QWORD PTR tv1755[rbp], rax
  02b67	f3 0f 10 85 88
	07 00 00	 movss	 xmm0, DWORD PTR p$75[rbp]
  02b6f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?contents_size_x@?ML@??ShowDemoWindowLayout@@YAXXZ@4MA
  02b77	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@41200000
  02b7f	f3 0f 10 95 8c
	07 00 00	 movss	 xmm2, DWORD PTR p$75[rbp+4]
  02b87	0f 28 c8	 movaps	 xmm1, xmm0
  02b8a	48 8d 8d 54 17
	00 00		 lea	 rcx, QWORD PTR $T148[rbp]
  02b91	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02b96	48 89 85 30 18
	00 00		 mov	 QWORD PTR tv1762[rbp], rax
  02b9d	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPEAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  02ba2	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  02baa	0f 57 c0	 xorps	 xmm0, xmm0
  02bad	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  02bb3	41 b9 ff ff ff
	ff		 mov	 r9d, -1			; ffffffffH
  02bb9	48 8b 8d 28 18
	00 00		 mov	 rcx, QWORD PTR tv1755[rbp]
  02bc0	4c 8b c1	 mov	 r8, rcx
  02bc3	48 8b 8d 30 18
	00 00		 mov	 rcx, QWORD PTR tv1762[rbp]
  02bca	48 8b d1	 mov	 rdx, rcx
  02bcd	48 8b c8	 mov	 rcx, rax
  02bd0	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled

; 3169 :                 ImGui::Dummy(ImVec2(0, 10));

  02bd5	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@41200000
  02bdd	0f 57 c9	 xorps	 xmm1, xmm1
  02be0	48 8d 8d 74 17
	00 00		 lea	 rcx, QWORD PTR $T149[rbp]
  02be7	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02bec	48 8b c8	 mov	 rcx, rax
  02bef	e8 00 00 00 00	 call	 ?Dummy@ImGui@@YAXAEBUImVec2@@@Z ; ImGui::Dummy
$LN167@ShowDemoWi:

; 3170 :             }
; 3171 :             ImGui::PopStyleVar(2);

  02bf4	b9 02 00 00 00	 mov	 ecx, 2
  02bf9	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar

; 3172 :             ImGui::Separator();

  02bfe	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3173 :             if (show_button)

  02c03	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_button@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02c0a	85 c0		 test	 eax, eax
  02c0c	74 26		 je	 SHORT $LN168@ShowDemoWi

; 3174 :             {
; 3175 :                 ImGui::Button("this is a 300-wide button", ImVec2(300, 0));

  02c0e	0f 57 d2	 xorps	 xmm2, xmm2
  02c11	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@43960000
  02c19	48 8d 8d 94 17
	00 00		 lea	 rcx, QWORD PTR $T150[rbp]
  02c20	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02c25	48 8b d0	 mov	 rdx, rax
  02c28	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@GGAJDBIL@this?5is?5a?5300?9wide?5button?$AA@
  02c2f	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
$LN168@ShowDemoWi:

; 3176 :             }
; 3177 :             if (show_tree_nodes)

  02c34	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_tree_nodes@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02c3b	85 c0		 test	 eax, eax
  02c3d	74 59		 je	 SHORT $LN169@ShowDemoWi

; 3178 :             {
; 3179 :                 bool open = true;

  02c3f	c6 85 a4 07 00
	00 01		 mov	 BYTE PTR open$76[rbp], 1

; 3180 :                 if (ImGui::TreeNode("this is a tree node"))

  02c46	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@HNGLJJLH@this?5is?5a?5tree?5node?$AA@
  02c4d	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  02c52	0f b6 c0	 movzx	 eax, al
  02c55	85 c0		 test	 eax, eax
  02c57	74 29		 je	 SHORT $LN170@ShowDemoWi

; 3181 :                 {
; 3182 :                     if (ImGui::TreeNode("another one of those tree node..."))

  02c59	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@FFNCLEGA@another?5one?5of?5those?5tree?5node?4?4@
  02c60	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  02c65	0f b6 c0	 movzx	 eax, al
  02c68	85 c0		 test	 eax, eax
  02c6a	74 11		 je	 SHORT $LN171@ShowDemoWi

; 3183 :                     {
; 3184 :                         ImGui::Text("Some tree contents");

  02c6c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@GOEDKDLO@Some?5tree?5contents?$AA@
  02c73	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3185 :                         ImGui::TreePop();

  02c78	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN171@ShowDemoWi:

; 3186 :                     }
; 3187 :                     ImGui::TreePop();

  02c7d	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN170@ShowDemoWi:

; 3188 :                 }
; 3189 :                 ImGui::CollapsingHeader("CollapsingHeader", &open);

  02c82	45 33 c0	 xor	 r8d, r8d
  02c85	48 8d 95 a4 07
	00 00		 lea	 rdx, QWORD PTR open$76[rbp]
  02c8c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@LBMIMLJO@CollapsingHeader?$AA@
  02c93	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::CollapsingHeader
$LN169@ShowDemoWi:

; 3190 :             }
; 3191 :             if (show_text_wrapped)

  02c98	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_text_wrapped@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02c9f	85 c0		 test	 eax, eax
  02ca1	74 0c		 je	 SHORT $LN172@ShowDemoWi

; 3192 :             {
; 3193 :                 ImGui::TextWrapped("This text should automatically wrap on the edge of the work rectangle.");

  02ca3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EH@ECONPGGJ@This?5text?5should?5automatically?5w@
  02caa	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped
$LN172@ShowDemoWi:

; 3194 :             }
; 3195 :             if (show_columns)

  02caf	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_columns@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02cb6	85 c0		 test	 eax, eax
  02cb8	0f 84 11 01 00
	00		 je	 $LN173@ShowDemoWi

; 3196 :             {
; 3197 :                 ImGui::Text("Tables:");

  02cbe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07GIKBKH@Tables?3?$AA@
  02cc5	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3198 :                 if (ImGui::BeginTable("table", 4, ImGuiTableFlags_Borders))

  02cca	0f 57 d2	 xorps	 xmm2, xmm2
  02ccd	0f 57 c9	 xorps	 xmm1, xmm1
  02cd0	48 8d 8d b4 17
	00 00		 lea	 rcx, QWORD PTR $T151[rbp]
  02cd7	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02cdc	0f 57 c0	 xorps	 xmm0, xmm0
  02cdf	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  02ce5	4c 8b c8	 mov	 r9, rax
  02ce8	41 b8 80 07 00
	00		 mov	 r8d, 1920		; 00000780H
  02cee	ba 04 00 00 00	 mov	 edx, 4
  02cf3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LCLENNFI@table?$AA@
  02cfa	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  02cff	0f b6 c0	 movzx	 eax, al
  02d02	85 c0		 test	 eax, eax
  02d04	74 53		 je	 SHORT $LN174@ShowDemoWi

; 3199 :                 {
; 3200 :                     for (int n = 0; n < 4; n++)

  02d06	c7 85 c4 07 00
	00 00 00 00 00	 mov	 DWORD PTR n$77[rbp], 0
  02d10	eb 0e		 jmp	 SHORT $LN91@ShowDemoWi
$LN89@ShowDemoWi:
  02d12	8b 85 c4 07 00
	00		 mov	 eax, DWORD PTR n$77[rbp]
  02d18	ff c0		 inc	 eax
  02d1a	89 85 c4 07 00
	00		 mov	 DWORD PTR n$77[rbp], eax
$LN91@ShowDemoWi:
  02d20	83 bd c4 07 00
	00 04		 cmp	 DWORD PTR n$77[rbp], 4
  02d27	7d 2b		 jge	 SHORT $LN90@ShowDemoWi

; 3201 :                     {
; 3202 :                         ImGui::TableNextColumn();

  02d29	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 3203 :                         ImGui::Text("Width %.2f", ImGui::GetContentRegionAvail().x);

  02d2e	48 8d 8d d4 17
	00 00		 lea	 rcx, QWORD PTR $T152[rbp]
  02d35	e8 00 00 00 00	 call	 ?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
  02d3a	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [rax]
  02d3e	0f 28 c8	 movaps	 xmm1, xmm0
  02d41	66 48 0f 7e ca	 movq	 rdx, xmm1
  02d46	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@CDOLGENO@Width?5?$CF?42f?$AA@
  02d4d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3204 :                     }

  02d52	eb be		 jmp	 SHORT $LN89@ShowDemoWi
$LN90@ShowDemoWi:

; 3205 :                     ImGui::EndTable();

  02d54	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN174@ShowDemoWi:

; 3206 :                 }
; 3207 :                 ImGui::Text("Columns:");

  02d59	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08CJJOOHNL@Columns?3?$AA@
  02d60	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3208 :                 ImGui::Columns(4);

  02d65	41 b0 01	 mov	 r8b, 1
  02d68	33 d2		 xor	 edx, edx
  02d6a	b9 04 00 00 00	 mov	 ecx, 4
  02d6f	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPEBD_N@Z ; ImGui::Columns

; 3209 :                 for (int n = 0; n < 4; n++)

  02d74	c7 85 e4 07 00
	00 00 00 00 00	 mov	 DWORD PTR n$78[rbp], 0
  02d7e	eb 0e		 jmp	 SHORT $LN94@ShowDemoWi
$LN92@ShowDemoWi:
  02d80	8b 85 e4 07 00
	00		 mov	 eax, DWORD PTR n$78[rbp]
  02d86	ff c0		 inc	 eax
  02d88	89 85 e4 07 00
	00		 mov	 DWORD PTR n$78[rbp], eax
$LN94@ShowDemoWi:
  02d8e	83 bd e4 07 00
	00 04		 cmp	 DWORD PTR n$78[rbp], 4
  02d95	7d 29		 jge	 SHORT $LN93@ShowDemoWi

; 3210 :                 {
; 3211 :                     ImGui::Text("Width %.2f", ImGui::GetColumnWidth());

  02d97	b9 ff ff ff ff	 mov	 ecx, -1
  02d9c	e8 00 00 00 00	 call	 ?GetColumnWidth@ImGui@@YAMH@Z ; ImGui::GetColumnWidth
  02da1	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  02da5	0f 28 c8	 movaps	 xmm1, xmm0
  02da8	66 48 0f 7e ca	 movq	 rdx, xmm1
  02dad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@CDOLGENO@Width?5?$CF?42f?$AA@
  02db4	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 3212 :                     ImGui::NextColumn();

  02db9	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 3213 :                 }

  02dbe	eb c0		 jmp	 SHORT $LN92@ShowDemoWi
$LN93@ShowDemoWi:

; 3214 :                 ImGui::Columns(1);

  02dc0	41 b0 01	 mov	 r8b, 1
  02dc3	33 d2		 xor	 edx, edx
  02dc5	b9 01 00 00 00	 mov	 ecx, 1
  02dca	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPEBD_N@Z ; ImGui::Columns
$LN173@ShowDemoWi:

; 3215 :             }
; 3216 :             if (show_tab_bar && ImGui::BeginTabBar("Hello"))

  02dcf	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_tab_bar@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02dd6	85 c0		 test	 eax, eax
  02dd8	0f 84 8e 00 00
	00		 je	 $LN175@ShowDemoWi
  02dde	33 d2		 xor	 edx, edx
  02de0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05COLMCDPH@Hello?$AA@
  02de7	e8 00 00 00 00	 call	 ?BeginTabBar@ImGui@@YA_NPEBDH@Z ; ImGui::BeginTabBar
  02dec	0f b6 c0	 movzx	 eax, al
  02def	85 c0		 test	 eax, eax
  02df1	74 79		 je	 SHORT $LN175@ShowDemoWi

; 3217 :             {
; 3218 :                 if (ImGui::BeginTabItem("OneOneOne")) { ImGui::EndTabItem(); }

  02df3	45 33 c0	 xor	 r8d, r8d
  02df6	33 d2		 xor	 edx, edx
  02df8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09DHLFJNGJ@OneOneOne?$AA@
  02dff	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginTabItem
  02e04	0f b6 c0	 movzx	 eax, al
  02e07	85 c0		 test	 eax, eax
  02e09	74 05		 je	 SHORT $LN176@ShowDemoWi
  02e0b	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN176@ShowDemoWi:

; 3219 :                 if (ImGui::BeginTabItem("TwoTwoTwo")) { ImGui::EndTabItem(); }

  02e10	45 33 c0	 xor	 r8d, r8d
  02e13	33 d2		 xor	 edx, edx
  02e15	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09BMOICMLJ@TwoTwoTwo?$AA@
  02e1c	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginTabItem
  02e21	0f b6 c0	 movzx	 eax, al
  02e24	85 c0		 test	 eax, eax
  02e26	74 05		 je	 SHORT $LN177@ShowDemoWi
  02e28	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN177@ShowDemoWi:

; 3220 :                 if (ImGui::BeginTabItem("ThreeThreeThree")) { ImGui::EndTabItem(); }

  02e2d	45 33 c0	 xor	 r8d, r8d
  02e30	33 d2		 xor	 edx, edx
  02e32	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BGMNPICP@ThreeThreeThree?$AA@
  02e39	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginTabItem
  02e3e	0f b6 c0	 movzx	 eax, al
  02e41	85 c0		 test	 eax, eax
  02e43	74 05		 je	 SHORT $LN178@ShowDemoWi
  02e45	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN178@ShowDemoWi:

; 3221 :                 if (ImGui::BeginTabItem("FourFourFour")) { ImGui::EndTabItem(); }

  02e4a	45 33 c0	 xor	 r8d, r8d
  02e4d	33 d2		 xor	 edx, edx
  02e4f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@GNNAMPMJ@FourFourFour?$AA@
  02e56	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginTabItem
  02e5b	0f b6 c0	 movzx	 eax, al
  02e5e	85 c0		 test	 eax, eax
  02e60	74 05		 je	 SHORT $LN179@ShowDemoWi
  02e62	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN179@ShowDemoWi:

; 3222 :                 ImGui::EndTabBar();

  02e67	e8 00 00 00 00	 call	 ?EndTabBar@ImGui@@YAXXZ	; ImGui::EndTabBar
$LN175@ShowDemoWi:

; 3223 :             }
; 3224 :             if (show_child)

  02e6c	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_child@?ML@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02e73	85 c0		 test	 eax, eax
  02e75	74 2c		 je	 SHORT $LN180@ShowDemoWi

; 3225 :             {
; 3226 :                 ImGui::BeginChild("child", ImVec2(0, 0), true);

  02e77	0f 57 d2	 xorps	 xmm2, xmm2
  02e7a	0f 57 c9	 xorps	 xmm1, xmm1
  02e7d	48 8d 8d f4 17
	00 00		 lea	 rcx, QWORD PTR $T153[rbp]
  02e84	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02e89	45 33 c9	 xor	 r9d, r9d
  02e8c	41 b0 01	 mov	 r8b, 1
  02e8f	48 8b d0	 mov	 rdx, rax
  02e92	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05GPGNDLEK@child?$AA@
  02e99	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z ; ImGui::BeginChild

; 3227 :                 ImGui::EndChild();

  02e9e	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild
$LN180@ShowDemoWi:

; 3228 :             }
; 3229 :             ImGui::End();

  02ea3	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN164@ShowDemoWi:

; 3230 :         }
; 3231 : 
; 3232 :         ImGui::TreePop();

  02ea8	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN97@ShowDemoWi:

; 3233 :     }
; 3234 : 
; 3235 :     IMGUI_DEMO_MARKER("Layout/Clipping");

  02ead	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  02eb5	74 28		 je	 SHORT $LN181@ShowDemoWi
  02eb7	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowLayout@@YAXXZ@4JA
  02ebd	05 cb 02 00 00	 add	 eax, 715		; 000002cbH
  02ec2	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  02ec9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@OCHNAOPI@Layout?1Clipping?$AA@
  02ed0	8b d0		 mov	 edx, eax
  02ed2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  02ed9	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN181@ShowDemoWi:
  02edf	33 c0		 xor	 eax, eax
  02ee1	85 c0		 test	 eax, eax
  02ee3	75 c8		 jne	 SHORT $LN97@ShowDemoWi

; 3236 :     if (ImGui::TreeNode("Clipping"))

  02ee5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08LLKICGJM@Clipping?$AA@
  02eec	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  02ef1	0f b6 c0	 movzx	 eax, al
  02ef4	85 c0		 test	 eax, eax
  02ef6	0f 84 5f 04 00
	00		 je	 $LN1@ShowDemoWi

; 3237 :     {
; 3238 :         static ImVec2 size(100.0f, 100.0f);

  02efc	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  02f01	8b c0		 mov	 eax, eax
  02f03	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02f09	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02f12	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  02f16	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  02f19	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS0@?BAG@??ShowDemoWindowLayout@@YAXXZ@4HA, eax
  02f1f	7e 3e		 jle	 SHORT $LN98@ShowDemoWi
  02f21	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?BAG@??ShowDemoWindowLayout@@YAXXZ@4HA
  02f28	e8 00 00 00 00	 call	 _Init_thread_header
  02f2d	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?BAG@??ShowDemoWindowLayout@@YAXXZ@4HA, -1
  02f34	75 29		 jne	 SHORT $LN98@ShowDemoWi
  02f36	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42c80000
  02f3e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42c80000
  02f46	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?size@?BAG@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A
  02f4d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02f52	90		 npad	 1
  02f53	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?BAG@??ShowDemoWindowLayout@@YAXXZ@4HA
  02f5a	e8 00 00 00 00	 call	 _Init_thread_footer
$LN98@ShowDemoWi:

; 3239 :         static ImVec2 offset(30.0f, 30.0f);

  02f5f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  02f64	8b c0		 mov	 eax, eax
  02f66	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  02f6c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  02f75	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  02f79	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  02f7c	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS1@?BAG@??ShowDemoWindowLayout@@YAXXZ@4HA, eax
  02f82	7e 3e		 jle	 SHORT $LN99@ShowDemoWi
  02f84	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?BAG@??ShowDemoWindowLayout@@YAXXZ@4HA
  02f8b	e8 00 00 00 00	 call	 _Init_thread_header
  02f90	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS1@?BAG@??ShowDemoWindowLayout@@YAXXZ@4HA, -1
  02f97	75 29		 jne	 SHORT $LN99@ShowDemoWi
  02f99	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@41f00000
  02fa1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41f00000
  02fa9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?offset@?BAG@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A
  02fb0	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02fb5	90		 npad	 1
  02fb6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?BAG@??ShowDemoWindowLayout@@YAXXZ@4HA
  02fbd	e8 00 00 00 00	 call	 _Init_thread_footer
$LN99@ShowDemoWi:

; 3240 :         ImGui::DragFloat2("size", (float*)&size, 0.5f, 1.0f, 200.0f, "%.0f");

  02fc2	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  02fca	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  02fd1	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  02fd6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43480000
  02fde	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  02fe4	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  02fec	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f000000
  02ff4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?size@?BAG@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A
  02ffb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04IAGNFIBA@size?$AA@
  03002	e8 00 00 00 00	 call	 ?DragFloat2@ImGui@@YA_NPEBDQEAMMMM0H@Z ; ImGui::DragFloat2

; 3241 :         ImGui::TextWrapped("(Click and drag to scroll)");

  03007	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@MNBDPJCG@?$CIClick?5and?5drag?5to?5scroll?$CJ?$AA@
  0300e	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped

; 3242 : 
; 3243 :         HelpMarker(

  03013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CBB@PALAFPED@?$CILeft?$CJ?5Using?5ImGui?3?3PushClipRect@
  0301a	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 3244 :             "(Left) Using ImGui::PushClipRect():\n"
; 3245 :             "Will alter ImGui hit-testing logic + ImDrawList rendering.\n"
; 3246 :             "(use this if you want your clipping rectangle to affect interactions)\n\n"
; 3247 :             "(Center) Using ImDrawList::PushClipRect():\n"
; 3248 :             "Will alter ImDrawList rendering only.\n"
; 3249 :             "(use this as a shortcut if you are only using ImDrawList calls)\n\n"
; 3250 :             "(Right) Using ImDrawList::AddText() with a fine ClipRect:\n"
; 3251 :             "Will alter only this specific ImDrawList::AddText() rendering.\n"
; 3252 :             "This is often used internally to avoid altering the clipping rectangle and minimize draw calls.");
; 3253 : 
; 3254 :         for (int n = 0; n < 3; n++)

  0301f	c7 85 04 08 00
	00 00 00 00 00	 mov	 DWORD PTR n$79[rbp], 0
  03029	eb 0e		 jmp	 SHORT $LN102@ShowDemoWi
$LN100@ShowDemoWi:
  0302b	8b 85 04 08 00
	00		 mov	 eax, DWORD PTR n$79[rbp]
  03031	ff c0		 inc	 eax
  03033	89 85 04 08 00
	00		 mov	 DWORD PTR n$79[rbp], eax
$LN102@ShowDemoWi:
  03039	83 bd 04 08 00
	00 03		 cmp	 DWORD PTR n$79[rbp], 3
  03040	0f 8d 10 03 00
	00		 jge	 $LN101@ShowDemoWi

; 3255 :         {
; 3256 :             if (n > 0)

  03046	83 bd 04 08 00
	00 00		 cmp	 DWORD PTR n$79[rbp], 0
  0304d	7e 10		 jle	 SHORT $LN183@ShowDemoWi

; 3257 :                 ImGui::SameLine();

  0304f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  03057	0f 57 c0	 xorps	 xmm0, xmm0
  0305a	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
$LN183@ShowDemoWi:

; 3258 : 
; 3259 :             ImGui::PushID(n);

  0305f	8b 8d 04 08 00
	00		 mov	 ecx, DWORD PTR n$79[rbp]
  03065	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 3260 :             ImGui::InvisibleButton("##canvas", size);

  0306a	45 33 c0	 xor	 r8d, r8d
  0306d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?size@?BAG@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A
  03074	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08IJNEAHEL@?$CD?$CDcanvas?$AA@
  0307b	e8 00 00 00 00	 call	 ?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z ; ImGui::InvisibleButton

; 3261 :             if (ImGui::IsItemActive() && ImGui::IsMouseDragging(ImGuiMouseButton_Left))

  03080	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  03085	0f b6 c0	 movzx	 eax, al
  03088	85 c0		 test	 eax, eax
  0308a	74 50		 je	 SHORT $LN184@ShowDemoWi
  0308c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  03094	33 c9		 xor	 ecx, ecx
  03096	e8 00 00 00 00	 call	 ?IsMouseDragging@ImGui@@YA_NHM@Z ; ImGui::IsMouseDragging
  0309b	0f b6 c0	 movzx	 eax, al
  0309e	85 c0		 test	 eax, eax
  030a0	74 3a		 je	 SHORT $LN184@ShowDemoWi

; 3262 :             {
; 3263 :                 offset.x += ImGui::GetIO().MouseDelta.x;

  030a2	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  030a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?offset@?BAG@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A
  030af	f3 0f 58 80 f0
	00 00 00	 addss	 xmm0, DWORD PTR [rax+240]
  030b7	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?offset@?BAG@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A, xmm0

; 3264 :                 offset.y += ImGui::GetIO().MouseDelta.y;

  030bf	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  030c4	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?offset@?BAG@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A+4
  030cc	f3 0f 58 80 f4
	00 00 00	 addss	 xmm0, DWORD PTR [rax+244]
  030d4	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?offset@?BAG@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A+4, xmm0
$LN184@ShowDemoWi:

; 3265 :             }
; 3266 :             ImGui::PopID();

  030dc	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 3267 :             if (!ImGui::IsItemVisible()) // Skip rendering as ImDrawList elements are not clipped.

  030e1	e8 00 00 00 00	 call	 ?IsItemVisible@ImGui@@YA_NXZ ; ImGui::IsItemVisible
  030e6	0f b6 c0	 movzx	 eax, al
  030e9	85 c0		 test	 eax, eax
  030eb	75 05		 jne	 SHORT $LN185@ShowDemoWi

; 3268 :                 continue;

  030ed	e9 39 ff ff ff	 jmp	 $LN100@ShowDemoWi
$LN185@ShowDemoWi:

; 3269 : 
; 3270 :             const ImVec2 p0 = ImGui::GetItemRectMin();

  030f2	48 8d 8d 28 08
	00 00		 lea	 rcx, QWORD PTR p0$80[rbp]
  030f9	e8 00 00 00 00	 call	 ?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMin

; 3271 :             const ImVec2 p1 = ImGui::GetItemRectMax();

  030fe	48 8d 8d 48 08
	00 00		 lea	 rcx, QWORD PTR p1$81[rbp]
  03105	e8 00 00 00 00	 call	 ?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMax

; 3272 :             const char* text_str = "Line 1 hello\nLine 2 clip me!";

  0310a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BN@MKAJBHJO@Line?51?5hello?6Line?52?5clip?5me?$CB?$AA@
  03111	48 89 85 68 08
	00 00		 mov	 QWORD PTR text_str$82[rbp], rax

; 3273 :             const ImVec2 text_pos = ImVec2(p0.x + offset.x, p0.y + offset.y);

  03118	f3 0f 10 85 2c
	08 00 00	 movss	 xmm0, DWORD PTR p0$80[rbp+4]
  03120	f3 0f 58 05 04
	00 00 00	 addss	 xmm0, DWORD PTR ?offset@?BAG@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A+4
  03128	f3 0f 10 8d 28
	08 00 00	 movss	 xmm1, DWORD PTR p0$80[rbp]
  03130	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?offset@?BAG@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A
  03138	0f 28 d0	 movaps	 xmm2, xmm0
  0313b	48 8d 8d 88 08
	00 00		 lea	 rcx, QWORD PTR text_pos$83[rbp]
  03142	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 3274 :             ImDrawList* draw_list = ImGui::GetWindowDrawList();

  03147	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPEAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  0314c	48 89 85 a8 08
	00 00		 mov	 QWORD PTR draw_list$84[rbp], rax

; 3275 :             switch (n)

  03153	8b 85 04 08 00
	00		 mov	 eax, DWORD PTR n$79[rbp]
  03159	89 85 24 18 00
	00		 mov	 DWORD PTR tv1993[rbp], eax
  0315f	83 bd 24 18 00
	00 00		 cmp	 DWORD PTR tv1993[rbp], 0
  03166	74 1f		 je	 SHORT $LN186@ShowDemoWi
  03168	83 bd 24 18 00
	00 01		 cmp	 DWORD PTR tv1993[rbp], 1
  0316f	0f 84 8c 00 00
	00		 je	 $LN187@ShowDemoWi
  03175	83 bd 24 18 00
	00 02		 cmp	 DWORD PTR tv1993[rbp], 2
  0317c	0f 84 07 01 00
	00		 je	 $LN188@ShowDemoWi
  03182	e9 ca 01 00 00	 jmp	 $LN103@ShowDemoWi
$LN186@ShowDemoWi:

; 3276 :             {
; 3277 :             case 0:
; 3278 :                 ImGui::PushClipRect(p0, p1, true);

  03187	41 b0 01	 mov	 r8b, 1
  0318a	48 8d 95 48 08
	00 00		 lea	 rdx, QWORD PTR p1$81[rbp]
  03191	48 8d 8d 28 08
	00 00		 lea	 rcx, QWORD PTR p0$80[rbp]
  03198	e8 00 00 00 00	 call	 ?PushClipRect@ImGui@@YAXAEBUImVec2@@0_N@Z ; ImGui::PushClipRect

; 3279 :                 draw_list->AddRectFilled(p0, p1, IM_COL32(90, 90, 120, 255));

  0319d	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  031a5	0f 57 c0	 xorps	 xmm0, xmm0
  031a8	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  031ae	41 b9 5a 5a 78
	ff		 mov	 r9d, -8889766		; ff785a5aH
  031b4	4c 8d 85 48 08
	00 00		 lea	 r8, QWORD PTR p1$81[rbp]
  031bb	48 8d 95 28 08
	00 00		 lea	 rdx, QWORD PTR p0$80[rbp]
  031c2	48 8b 8d a8 08
	00 00		 mov	 rcx, QWORD PTR draw_list$84[rbp]
  031c9	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled

; 3280 :                 draw_list->AddText(text_pos, IM_COL32_WHITE, text_str);

  031ce	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  031d7	4c 8b 8d 68 08
	00 00		 mov	 r9, QWORD PTR text_str$82[rbp]
  031de	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  031e4	48 8d 95 88 08
	00 00		 lea	 rdx, QWORD PTR text_pos$83[rbp]
  031eb	48 8b 8d a8 08
	00 00		 mov	 rcx, QWORD PTR draw_list$84[rbp]
  031f2	e8 00 00 00 00	 call	 ?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z ; ImDrawList::AddText

; 3281 :                 ImGui::PopClipRect();

  031f7	e8 00 00 00 00	 call	 ?PopClipRect@ImGui@@YAXXZ ; ImGui::PopClipRect

; 3282 :                 break;

  031fc	e9 50 01 00 00	 jmp	 $LN103@ShowDemoWi
$LN187@ShowDemoWi:

; 3283 :             case 1:
; 3284 :                 draw_list->PushClipRect(p0, p1, true);

  03201	41 b1 01	 mov	 r9b, 1
  03204	4c 8d 85 48 08
	00 00		 lea	 r8, QWORD PTR p1$81[rbp]
  0320b	48 8d 95 28 08
	00 00		 lea	 rdx, QWORD PTR p0$80[rbp]
  03212	48 8b 8d a8 08
	00 00		 mov	 rcx, QWORD PTR draw_list$84[rbp]
  03219	e8 00 00 00 00	 call	 ?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z ; ImDrawList::PushClipRect

; 3285 :                 draw_list->AddRectFilled(p0, p1, IM_COL32(90, 90, 120, 255));

  0321e	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  03226	0f 57 c0	 xorps	 xmm0, xmm0
  03229	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0322f	41 b9 5a 5a 78
	ff		 mov	 r9d, -8889766		; ff785a5aH
  03235	4c 8d 85 48 08
	00 00		 lea	 r8, QWORD PTR p1$81[rbp]
  0323c	48 8d 95 28 08
	00 00		 lea	 rdx, QWORD PTR p0$80[rbp]
  03243	48 8b 8d a8 08
	00 00		 mov	 rcx, QWORD PTR draw_list$84[rbp]
  0324a	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled

; 3286 :                 draw_list->AddText(text_pos, IM_COL32_WHITE, text_str);

  0324f	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  03258	4c 8b 8d 68 08
	00 00		 mov	 r9, QWORD PTR text_str$82[rbp]
  0325f	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  03265	48 8d 95 88 08
	00 00		 lea	 rdx, QWORD PTR text_pos$83[rbp]
  0326c	48 8b 8d a8 08
	00 00		 mov	 rcx, QWORD PTR draw_list$84[rbp]
  03273	e8 00 00 00 00	 call	 ?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z ; ImDrawList::AddText

; 3287 :                 draw_list->PopClipRect();

  03278	48 8b 8d a8 08
	00 00		 mov	 rcx, QWORD PTR draw_list$84[rbp]
  0327f	e8 00 00 00 00	 call	 ?PopClipRect@ImDrawList@@QEAAXXZ ; ImDrawList::PopClipRect

; 3288 :                 break;

  03284	e9 c8 00 00 00	 jmp	 $LN103@ShowDemoWi
$LN188@ShowDemoWi:

; 3289 :             case 2:
; 3290 :                 ImVec4 clip_rect(p0.x, p0.y, p1.x, p1.y); // AddText() takes a ImVec4* here so let's convert.

  03289	f3 0f 10 85 4c
	08 00 00	 movss	 xmm0, DWORD PTR p1$81[rbp+4]
  03291	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  03297	f3 0f 10 9d 48
	08 00 00	 movss	 xmm3, DWORD PTR p1$81[rbp]
  0329f	f3 0f 10 95 2c
	08 00 00	 movss	 xmm2, DWORD PTR p0$80[rbp+4]
  032a7	f3 0f 10 8d 28
	08 00 00	 movss	 xmm1, DWORD PTR p0$80[rbp]
  032af	48 8d 8d c8 08
	00 00		 lea	 rcx, QWORD PTR clip_rect$85[rbp]
  032b6	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4

; 3291 :                 draw_list->AddRectFilled(p0, p1, IM_COL32(90, 90, 120, 255));

  032bb	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  032c3	0f 57 c0	 xorps	 xmm0, xmm0
  032c6	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  032cc	41 b9 5a 5a 78
	ff		 mov	 r9d, -8889766		; ff785a5aH
  032d2	4c 8d 85 48 08
	00 00		 lea	 r8, QWORD PTR p1$81[rbp]
  032d9	48 8d 95 28 08
	00 00		 lea	 rdx, QWORD PTR p0$80[rbp]
  032e0	48 8b 8d a8 08
	00 00		 mov	 rcx, QWORD PTR draw_list$84[rbp]
  032e7	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled

; 3292 :                 draw_list->AddText(ImGui::GetFont(), ImGui::GetFontSize(), text_pos, IM_COL32_WHITE, text_str, NULL, 0.0f, &clip_rect);

  032ec	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  032f1	f3 0f 11 85 24
	18 00 00	 movss	 DWORD PTR tv2042[rbp], xmm0
  032f9	e8 00 00 00 00	 call	 ?GetFont@ImGui@@YAPEAUImFont@@XZ ; ImGui::GetFont
  032fe	48 8d 8d c8 08
	00 00		 lea	 rcx, QWORD PTR clip_rect$85[rbp]
  03305	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0330a	0f 57 c0	 xorps	 xmm0, xmm0
  0330d	f3 0f 11 44 24
	38		 movss	 DWORD PTR [rsp+56], xmm0
  03313	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  0331c	48 8b 8d 68 08
	00 00		 mov	 rcx, QWORD PTR text_str$82[rbp]
  03323	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03328	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1	; ffffffffH
  03330	4c 8d 8d 88 08
	00 00		 lea	 r9, QWORD PTR text_pos$83[rbp]
  03337	f3 0f 10 85 24
	18 00 00	 movss	 xmm0, DWORD PTR tv2042[rbp]
  0333f	0f 28 d0	 movaps	 xmm2, xmm0
  03342	48 8b d0	 mov	 rdx, rax
  03345	48 8b 8d a8 08
	00 00		 mov	 rcx, QWORD PTR draw_list$84[rbp]
  0334c	e8 00 00 00 00	 call	 ?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z ; ImDrawList::AddText
$LN103@ShowDemoWi:

; 3293 :                 break;
; 3294 :             }
; 3295 :         }

  03351	e9 d5 fc ff ff	 jmp	 $LN100@ShowDemoWi
$LN101@ShowDemoWi:

; 3296 : 
; 3297 :         ImGui::TreePop();

  03356	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN1@ShowDemoWi:

; 3298 :     }
; 3299 : }

  0335b	48 8d 4d b0	 lea	 rcx, QWORD PTR [rbp-80]
  0335f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShowDemoWindowLayout@@YAXXZ$rtcFrameData
  03366	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0336b	48 8b 8d 40 18
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  03372	48 33 cd	 xor	 rcx, rbp
  03375	e8 00 00 00 00	 call	 __security_check_cookie
  0337a	48 8d a5 58 18
	00 00		 lea	 rsp, QWORD PTR [rbp+6232]
  03381	5f		 pop	 rdi
  03382	5d		 pop	 rbp
  03383	c3		 ret	 0
?ShowDemoWindowLayout@@YAXXZ ENDP			; ShowDemoWindowLayout
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
window_flags$20 = 4
i$21 = 36
window_flags$22 = 68
i$23 = 100
buf$24 = 136
n$25 = 196
child_is_hovered$26 = 228
child_rect_min$27 = 264
child_rect_max$28 = 296
items$29 = 328
i$30 = 388
button_sz$31 = 424
style$32 = 456
buttons_count$33 = 484
window_visible_x2$34 = 516
n$35 = 548
last_button_x2$36 = 580
next_button_x2$37 = 612
size$38 = 648
values$39 = 680
spacing$40 = 724
i$41 = 756
node_open$42 = 788
i$43 = 820
scroll_to_off$44 = 852
scroll_to_pos$45 = 884
style$46 = 920
child_w$47 = 948
i$48 = 980
names$49 = 1016
child_flags$50 = 1076
child_id$51 = 1108
child_is_visible$52 = 1140
item$53 = 1172
scroll_y$54 = 1204
scroll_max_y$55 = 1236
i$56 = 1268
child_height$57 = 1300
child_flags$58 = 1332
child_id$59 = 1364
child_is_visible$60 = 1396
item$61 = 1428
scroll_x$62 = 1460
scroll_max_x$63 = 1492
names$64 = 1528
scrolling_child_size$65 = 1592
line$66 = 1620
num_buttons$67 = 1652
n$68 = 1684
num_buf$69 = 1720
label$70 = 1768
hue$71 = 1796
scroll_x$72 = 1828
scroll_max_x$73 = 1860
scroll_x_delta$74 = 1892
p$75 = 1928
open$76 = 1956
n$77 = 1988
n$78 = 2020
n$79 = 2052
p0$80 = 2088
p1$81 = 2120
text_str$82 = 2152
text_pos$83 = 2184
draw_list$84 = 2216
clip_rect$85 = 2248
$T86 = 3828
$T87 = 3860
$T88 = 3892
$T89 = 3924
$T90 = 3956
$T91 = 3988
$T92 = 4020
$T93 = 4052
$T94 = 4084
$T95 = 4132
$T96 = 4180
$T97 = 4212
$T98 = 4244
$T99 = 4276
$T100 = 4308
$T101 = 4340
$T102 = 4372
$T103 = 4404
$T104 = 4436
$T105 = 4468
$T106 = 4500
$T107 = 4532
$T108 = 4564
$T109 = 4596
$T110 = 4628
$T111 = 4660
$T112 = 4692
$T113 = 4724
$T114 = 4756
$T115 = 4788
$T116 = 4820
$T117 = 4852
$T118 = 4884
$T119 = 4916
$T120 = 4948
$T121 = 4980
$T122 = 5012
$T123 = 5044
$T124 = 5076
$T125 = 5108
$T126 = 5140
$T127 = 5172
$T128 = 5204
$T129 = 5236
$T130 = 5268
$T131 = 5316
$T132 = 5348
$T133 = 5380
$T134 = 5428
$T135 = 5460
$T136 = 5508
$T137 = 5556
$T138 = 5604
$T139 = 5652
$T140 = 5700
$T141 = 5748
$T142 = 5780
$T143 = 5812
$T144 = 5844
$T145 = 5876
$T146 = 5908
$T147 = 5940
$T148 = 5972
$T149 = 6004
$T150 = 6036
$T151 = 6068
$T152 = 6100
$T153 = 6132
$T154 = 6168
tv2042 = 6180
tv1993 = 6180
tv1639 = 6180
tv1481 = 6180
tv1367 = 6180
tv1347 = 6180
tv1292 = 6180
tv1268 = 6180
tv1197 = 6180
tv1144 = 6180
tv1123 = 6180
tv1755 = 6184
tv1742 = 6184
tv1711 = 6184
tv1502 = 6184
tv662 = 6184
tv237 = 6184
tv1762 = 6192
tv1714 = 6192
tv1501 = 6192
tv1717 = 6200
tv1500 = 6200
__$ArrayPad$ = 6208
?dtor$0@?0??ShowDemoWindowLayout@@YAXXZ@4HA PROC	; `ShowDemoWindowLayout'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 50	 lea	 rbp, QWORD PTR [rdx+80]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?BAG@??ShowDemoWindowLayout@@YAXXZ@4HA
  0001b	e8 00 00 00 00	 call	 _Init_thread_abort
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??ShowDemoWindowLayout@@YAXXZ@4HA ENDP	; `ShowDemoWindowLayout'::`1'::dtor$0
window_flags$20 = 4
i$21 = 36
window_flags$22 = 68
i$23 = 100
buf$24 = 136
n$25 = 196
child_is_hovered$26 = 228
child_rect_min$27 = 264
child_rect_max$28 = 296
items$29 = 328
i$30 = 388
button_sz$31 = 424
style$32 = 456
buttons_count$33 = 484
window_visible_x2$34 = 516
n$35 = 548
last_button_x2$36 = 580
next_button_x2$37 = 612
size$38 = 648
values$39 = 680
spacing$40 = 724
i$41 = 756
node_open$42 = 788
i$43 = 820
scroll_to_off$44 = 852
scroll_to_pos$45 = 884
style$46 = 920
child_w$47 = 948
i$48 = 980
names$49 = 1016
child_flags$50 = 1076
child_id$51 = 1108
child_is_visible$52 = 1140
item$53 = 1172
scroll_y$54 = 1204
scroll_max_y$55 = 1236
i$56 = 1268
child_height$57 = 1300
child_flags$58 = 1332
child_id$59 = 1364
child_is_visible$60 = 1396
item$61 = 1428
scroll_x$62 = 1460
scroll_max_x$63 = 1492
names$64 = 1528
scrolling_child_size$65 = 1592
line$66 = 1620
num_buttons$67 = 1652
n$68 = 1684
num_buf$69 = 1720
label$70 = 1768
hue$71 = 1796
scroll_x$72 = 1828
scroll_max_x$73 = 1860
scroll_x_delta$74 = 1892
p$75 = 1928
open$76 = 1956
n$77 = 1988
n$78 = 2020
n$79 = 2052
p0$80 = 2088
p1$81 = 2120
text_str$82 = 2152
text_pos$83 = 2184
draw_list$84 = 2216
clip_rect$85 = 2248
$T86 = 3828
$T87 = 3860
$T88 = 3892
$T89 = 3924
$T90 = 3956
$T91 = 3988
$T92 = 4020
$T93 = 4052
$T94 = 4084
$T95 = 4132
$T96 = 4180
$T97 = 4212
$T98 = 4244
$T99 = 4276
$T100 = 4308
$T101 = 4340
$T102 = 4372
$T103 = 4404
$T104 = 4436
$T105 = 4468
$T106 = 4500
$T107 = 4532
$T108 = 4564
$T109 = 4596
$T110 = 4628
$T111 = 4660
$T112 = 4692
$T113 = 4724
$T114 = 4756
$T115 = 4788
$T116 = 4820
$T117 = 4852
$T118 = 4884
$T119 = 4916
$T120 = 4948
$T121 = 4980
$T122 = 5012
$T123 = 5044
$T124 = 5076
$T125 = 5108
$T126 = 5140
$T127 = 5172
$T128 = 5204
$T129 = 5236
$T130 = 5268
$T131 = 5316
$T132 = 5348
$T133 = 5380
$T134 = 5428
$T135 = 5460
$T136 = 5508
$T137 = 5556
$T138 = 5604
$T139 = 5652
$T140 = 5700
$T141 = 5748
$T142 = 5780
$T143 = 5812
$T144 = 5844
$T145 = 5876
$T146 = 5908
$T147 = 5940
$T148 = 5972
$T149 = 6004
$T150 = 6036
$T151 = 6068
$T152 = 6100
$T153 = 6132
$T154 = 6168
tv2042 = 6180
tv1993 = 6180
tv1639 = 6180
tv1481 = 6180
tv1367 = 6180
tv1347 = 6180
tv1292 = 6180
tv1268 = 6180
tv1197 = 6180
tv1144 = 6180
tv1123 = 6180
tv1755 = 6184
tv1742 = 6184
tv1711 = 6184
tv1502 = 6184
tv662 = 6184
tv237 = 6184
tv1762 = 6192
tv1714 = 6192
tv1501 = 6192
tv1717 = 6200
tv1500 = 6200
__$ArrayPad$ = 6208
?dtor$1@?0??ShowDemoWindowLayout@@YAXXZ@4HA PROC	; `ShowDemoWindowLayout'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 50	 lea	 rbp, QWORD PTR [rdx+80]
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?BAG@??ShowDemoWindowLayout@@YAXXZ@4HA
  00042	e8 00 00 00 00	 call	 _Init_thread_abort
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?dtor$1@?0??ShowDemoWindowLayout@@YAXXZ@4HA ENDP	; `ShowDemoWindowLayout'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
window_flags$20 = 4
i$21 = 36
window_flags$22 = 68
i$23 = 100
buf$24 = 136
n$25 = 196
child_is_hovered$26 = 228
child_rect_min$27 = 264
child_rect_max$28 = 296
items$29 = 328
i$30 = 388
button_sz$31 = 424
style$32 = 456
buttons_count$33 = 484
window_visible_x2$34 = 516
n$35 = 548
last_button_x2$36 = 580
next_button_x2$37 = 612
size$38 = 648
values$39 = 680
spacing$40 = 724
i$41 = 756
node_open$42 = 788
i$43 = 820
scroll_to_off$44 = 852
scroll_to_pos$45 = 884
style$46 = 920
child_w$47 = 948
i$48 = 980
names$49 = 1016
child_flags$50 = 1076
child_id$51 = 1108
child_is_visible$52 = 1140
item$53 = 1172
scroll_y$54 = 1204
scroll_max_y$55 = 1236
i$56 = 1268
child_height$57 = 1300
child_flags$58 = 1332
child_id$59 = 1364
child_is_visible$60 = 1396
item$61 = 1428
scroll_x$62 = 1460
scroll_max_x$63 = 1492
names$64 = 1528
scrolling_child_size$65 = 1592
line$66 = 1620
num_buttons$67 = 1652
n$68 = 1684
num_buf$69 = 1720
label$70 = 1768
hue$71 = 1796
scroll_x$72 = 1828
scroll_max_x$73 = 1860
scroll_x_delta$74 = 1892
p$75 = 1928
open$76 = 1956
n$77 = 1988
n$78 = 2020
n$79 = 2052
p0$80 = 2088
p1$81 = 2120
text_str$82 = 2152
text_pos$83 = 2184
draw_list$84 = 2216
clip_rect$85 = 2248
$T86 = 3828
$T87 = 3860
$T88 = 3892
$T89 = 3924
$T90 = 3956
$T91 = 3988
$T92 = 4020
$T93 = 4052
$T94 = 4084
$T95 = 4132
$T96 = 4180
$T97 = 4212
$T98 = 4244
$T99 = 4276
$T100 = 4308
$T101 = 4340
$T102 = 4372
$T103 = 4404
$T104 = 4436
$T105 = 4468
$T106 = 4500
$T107 = 4532
$T108 = 4564
$T109 = 4596
$T110 = 4628
$T111 = 4660
$T112 = 4692
$T113 = 4724
$T114 = 4756
$T115 = 4788
$T116 = 4820
$T117 = 4852
$T118 = 4884
$T119 = 4916
$T120 = 4948
$T121 = 4980
$T122 = 5012
$T123 = 5044
$T124 = 5076
$T125 = 5108
$T126 = 5140
$T127 = 5172
$T128 = 5204
$T129 = 5236
$T130 = 5268
$T131 = 5316
$T132 = 5348
$T133 = 5380
$T134 = 5428
$T135 = 5460
$T136 = 5508
$T137 = 5556
$T138 = 5604
$T139 = 5652
$T140 = 5700
$T141 = 5748
$T142 = 5780
$T143 = 5812
$T144 = 5844
$T145 = 5876
$T146 = 5908
$T147 = 5940
$T148 = 5972
$T149 = 6004
$T150 = 6036
$T151 = 6068
$T152 = 6100
$T153 = 6132
$T154 = 6168
tv2042 = 6180
tv1993 = 6180
tv1639 = 6180
tv1481 = 6180
tv1367 = 6180
tv1347 = 6180
tv1292 = 6180
tv1268 = 6180
tv1197 = 6180
tv1144 = 6180
tv1123 = 6180
tv1755 = 6184
tv1742 = 6184
tv1711 = 6184
tv1502 = 6184
tv662 = 6184
tv237 = 6184
tv1762 = 6192
tv1714 = 6192
tv1501 = 6192
tv1717 = 6200
tv1500 = 6200
__$ArrayPad$ = 6208
?dtor$0@?0??ShowDemoWindowLayout@@YAXXZ@4HA PROC	; `ShowDemoWindowLayout'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 50	 lea	 rbp, QWORD PTR [rdx+80]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?BAG@??ShowDemoWindowLayout@@YAXXZ@4HA
  0001b	e8 00 00 00 00	 call	 _Init_thread_abort
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??ShowDemoWindowLayout@@YAXXZ@4HA ENDP	; `ShowDemoWindowLayout'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
window_flags$20 = 4
i$21 = 36
window_flags$22 = 68
i$23 = 100
buf$24 = 136
n$25 = 196
child_is_hovered$26 = 228
child_rect_min$27 = 264
child_rect_max$28 = 296
items$29 = 328
i$30 = 388
button_sz$31 = 424
style$32 = 456
buttons_count$33 = 484
window_visible_x2$34 = 516
n$35 = 548
last_button_x2$36 = 580
next_button_x2$37 = 612
size$38 = 648
values$39 = 680
spacing$40 = 724
i$41 = 756
node_open$42 = 788
i$43 = 820
scroll_to_off$44 = 852
scroll_to_pos$45 = 884
style$46 = 920
child_w$47 = 948
i$48 = 980
names$49 = 1016
child_flags$50 = 1076
child_id$51 = 1108
child_is_visible$52 = 1140
item$53 = 1172
scroll_y$54 = 1204
scroll_max_y$55 = 1236
i$56 = 1268
child_height$57 = 1300
child_flags$58 = 1332
child_id$59 = 1364
child_is_visible$60 = 1396
item$61 = 1428
scroll_x$62 = 1460
scroll_max_x$63 = 1492
names$64 = 1528
scrolling_child_size$65 = 1592
line$66 = 1620
num_buttons$67 = 1652
n$68 = 1684
num_buf$69 = 1720
label$70 = 1768
hue$71 = 1796
scroll_x$72 = 1828
scroll_max_x$73 = 1860
scroll_x_delta$74 = 1892
p$75 = 1928
open$76 = 1956
n$77 = 1988
n$78 = 2020
n$79 = 2052
p0$80 = 2088
p1$81 = 2120
text_str$82 = 2152
text_pos$83 = 2184
draw_list$84 = 2216
clip_rect$85 = 2248
$T86 = 3828
$T87 = 3860
$T88 = 3892
$T89 = 3924
$T90 = 3956
$T91 = 3988
$T92 = 4020
$T93 = 4052
$T94 = 4084
$T95 = 4132
$T96 = 4180
$T97 = 4212
$T98 = 4244
$T99 = 4276
$T100 = 4308
$T101 = 4340
$T102 = 4372
$T103 = 4404
$T104 = 4436
$T105 = 4468
$T106 = 4500
$T107 = 4532
$T108 = 4564
$T109 = 4596
$T110 = 4628
$T111 = 4660
$T112 = 4692
$T113 = 4724
$T114 = 4756
$T115 = 4788
$T116 = 4820
$T117 = 4852
$T118 = 4884
$T119 = 4916
$T120 = 4948
$T121 = 4980
$T122 = 5012
$T123 = 5044
$T124 = 5076
$T125 = 5108
$T126 = 5140
$T127 = 5172
$T128 = 5204
$T129 = 5236
$T130 = 5268
$T131 = 5316
$T132 = 5348
$T133 = 5380
$T134 = 5428
$T135 = 5460
$T136 = 5508
$T137 = 5556
$T138 = 5604
$T139 = 5652
$T140 = 5700
$T141 = 5748
$T142 = 5780
$T143 = 5812
$T144 = 5844
$T145 = 5876
$T146 = 5908
$T147 = 5940
$T148 = 5972
$T149 = 6004
$T150 = 6036
$T151 = 6068
$T152 = 6100
$T153 = 6132
$T154 = 6168
tv2042 = 6180
tv1993 = 6180
tv1639 = 6180
tv1481 = 6180
tv1367 = 6180
tv1347 = 6180
tv1292 = 6180
tv1268 = 6180
tv1197 = 6180
tv1144 = 6180
tv1123 = 6180
tv1755 = 6184
tv1742 = 6184
tv1711 = 6184
tv1502 = 6184
tv662 = 6184
tv237 = 6184
tv1762 = 6192
tv1714 = 6192
tv1501 = 6192
tv1717 = 6200
tv1500 = 6200
__$ArrayPad$ = 6208
?dtor$1@?0??ShowDemoWindowLayout@@YAXXZ@4HA PROC	; `ShowDemoWindowLayout'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 50	 lea	 rbp, QWORD PTR [rdx+80]
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?BAG@??ShowDemoWindowLayout@@YAXXZ@4HA
  00042	e8 00 00 00 00	 call	 _Init_thread_abort
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?dtor$1@?0??ShowDemoWindowLayout@@YAXXZ@4HA ENDP	; `ShowDemoWindowLayout'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowDemoWindowWidgets@@YAXXZ
_TEXT	SEGMENT
i$97 = 4
spacing$98 = 36
elems_names$99 = 72
elem_name$100 = 136
items$101 = 176
items$102 = 304
i$103 = 404
node_clicked$104 = 436
i$105 = 468
node_flags$106 = 500
is_selected$107 = 532
node_open$108 = 564
i$109 = 596
i$110 = 628
draw_list$111 = 664
n$112 = 692
pos$113 = 728
marker_min$114 = 760
marker_max$115 = 792
io$116 = 824
my_tex_id$117 = 856
my_tex_w$118 = 884
my_tex_h$119 = 916
pos$120 = 952
uv_min$121 = 984
uv_max$122 = 1016
tint_col$123 = 1048
border_col$124 = 1096
region_sz$125 = 1140
region_x$126 = 1172
region_y$127 = 1204
zoom$128 = 1236
uv0$129 = 1272
uv1$130 = 1304
i$131 = 1332
size$132 = 1368
uv0$133 = 1400
uv1$134 = 1432
bg_col$135 = 1464
tint_col$136 = 1512
items$137 = 1568
combo_preview_value$138 = 1704
n$139 = 1732
is_selected$140 = 1764
items$141 = 1808
n$142 = 1940
is_selected$143 = 1972
n$144 = 2004
is_selected$145 = 2036
n$146 = 2068
buf$147 = 2104
n$148 = 2164
buf$149 = 2200
i$150 = 2260
label$151 = 2296
i$152 = 2356
label$153 = 2392
time$154 = 2452
winning_state$155 = 2484
y$156 = 2516
x$157 = 2548
y$158 = 2580
x$159 = 2612
alignment$160 = 2648
name$161 = 2680
tab_bar_flags$162 = 2740
names$163 = 2776
n$164 = 2836
n$165 = 2868
i$166 = 2900
n$167 = 2932
open$168 = 2964
name$169 = 3000
average$170 = 3044
n$171 = 3076
overlay$172 = 3112
func$173 = 3176
progress_saturated$174 = 3204
buf$175 = 3240
misc_flags$176 = 3300
n$177 = 3332
open_popup$178 = 3364
n$179 = 3396
palette_button_flags$180 = 3428
payload$181 = 3464
payload$182 = 3496
flags$183 = 3524
w$184 = 3556
s8_zero$185 = 3588
s8_one$186 = 3620
s8_fifty$187 = 3652
s8_min$188 = 3684
s8_max$189 = 3716
u8_zero$190 = 3748
u8_one$191 = 3780
u8_fifty$192 = 3812
u8_min$193 = 3844
u8_max$194 = 3876
s16_zero$195 = 3908
s16_one$196 = 3940
s16_fifty$197 = 3972
s16_min$198 = 4004
s16_max$199 = 4036
u16_zero$200 = 4068
u16_one$201 = 4100
u16_fifty$202 = 4132
u16_min$203 = 4164
u16_max$204 = 4196
s32_zero$205 = 4228
s32_one$206 = 4260
s32_fifty$207 = 4292
s32_min$208 = 4324
s32_max$209 = 4356
s32_hi_a$210 = 4388
s32_hi_b$211 = 4420
u32_zero$212 = 4452
u32_one$213 = 4484
u32_fifty$214 = 4516
u32_min$215 = 4548
u32_max$216 = 4580
u32_hi_a$217 = 4612
u32_hi_b$218 = 4644
s64_zero$219 = 4680
s64_one$220 = 4712
s64_fifty$221 = 4744
s64_min$222 = 4776
s64_max$223 = 4808
s64_hi_a$224 = 4840
s64_hi_b$225 = 4872
u64_zero$226 = 4904
u64_one$227 = 4936
u64_fifty$228 = 4968
u64_min$229 = 5000
u64_max$230 = 5032
u64_hi_a$231 = 5064
u64_hi_b$232 = 5096
f32_zero$233 = 5124
f32_one$234 = 5156
f32_lo_a$235 = 5188
f32_hi_a$236 = 5220
f64_zero$237 = 5256
f64_one$238 = 5288
f64_lo_a$239 = 5320
f64_hi_a$240 = 5352
drag_speed$241 = 5380
spacing$242 = 5412
i$243 = 5444
rows$244 = 5476
small_slider_size$245 = 5512
nx$246 = 5540
ny$247 = 5572
i$248 = 5604
n$249 = 5636
payload$250 = 5672
payload_n$251 = 5700
tmp$252 = 5736
n$253 = 5764
item$254 = 5800
n_next$255 = 5828
item_names$256 = 5872
ret$257 = 6020
items$258 = 6056
items$259 = 6120
hovered_delay_none$260 = 6180
hovered_delay_short$261 = 6212
hovered_delay_normal$262 = 6244
buf$263 = 6276
lines$264 = 6320
i$265 = 6404
$T266 = 7972
$T267 = 8004
$T268 = 8052
$T269 = 8100
$T270 = 8148
$T271 = 8196
$T272 = 8244
$T273 = 8292
$T274 = 8324
$T275 = 8356
$T276 = 8404
$T277 = 8452
$T278 = 8484
$T279 = 8516
$T280 = 8548
$T281 = 8580
$T282 = 8612
$T283 = 8644
$T284 = 8676
$T285 = 8708
$T286 = 8740
$T287 = 8772
$T288 = 8804
$T289 = 8836
$T290 = 8868
$T291 = 8900
$T292 = 8932
$T293 = 8964
$T294 = 8996
$T295 = 9028
$T296 = 9060
$T297 = 9092
$T298 = 9124
$T299 = 9156
$T300 = 9188
$T301 = 9220
$T302 = 9252
$T303 = 9284
$T304 = 9316
$T305 = 9348
$T306 = 9380
$T307 = 9412
$T308 = 9444
$T309 = 9476
$T310 = 9508
$T311 = 9540
$T312 = 9572
$T313 = 9604
$T314 = 9636
$T315 = 9668
$T316 = 9700
$T317 = 9732
$T318 = 9764
$T319 = 9796
$T320 = 9828
$T321 = 9860
$T322 = 9892
$T323 = 9940
$T324 = 9972
$T325 = 10004
$T326 = 10036
$T327 = 10068
$T328 = 10100
$T329 = 10132
$T330 = 10180
$T331 = 10228
$T332 = 10276
$T333 = 10324
$T334 = 10372
$T335 = 10420
$T336 = 10468
$T337 = 10516
$T338 = 10548
$T339 = 10580
$T340 = 10612
$T341 = 10644
$T342 = 10676
$T343 = 10708
$T344 = 10740
$T345 = 10772
$T346 = 10804
$T347 = 10836
$T348 = 10868
$T349 = 10900
$T350 = 10932
$T351 = 10964
$T352 = 10996
$T353 = 11028
$T354 = 11064
tv6279 = 11076
tv6275 = 11076
tv6266 = 11076
tv5446 = 11076
tv5340 = 11076
tv5307 = 11076
tv4882 = 11076
tv4750 = 11076
tv4741 = 11076
tv4732 = 11076
tv3328 = 11076
tv3127 = 11076
tv2950 = 11076
tv2890 = 11076
tv2865 = 11076
tv2376 = 11076
tv1967 = 11076
tv1932 = 11076
tv1923 = 11076
tv1668 = 11076
tv1642 = 11076
tv1549 = 11076
tv1485 = 11076
tv1366 = 11076
tv5602 = 11080
tv5344 = 11080
tv5311 = 11080
tv5173 = 11080
tv4681 = 11080
tv4603 = 11080
tv4361 = 11080
tv4351 = 11080
tv4341 = 11080
tv4331 = 11080
tv4321 = 11080
tv4279 = 11080
tv4269 = 11080
tv4259 = 11080
tv4249 = 11080
tv4239 = 11080
tv4229 = 11080
tv4219 = 11080
tv3918 = 11080
tv3904 = 11080
tv3890 = 11080
tv3876 = 11080
tv3830 = 11080
tv3816 = 11080
tv3802 = 11080
tv3788 = 11080
tv3710 = 11080
tv3439 = 11080
tv3410 = 11080
tv2953 = 11080
tv2889 = 11080
tv2829 = 11080
tv2379 = 11080
tv1056 = 11080
tv802 = 11080
tv536 = 11080
tv5348 = 11084
tv5315 = 11084
tv2960 = 11084
tv5352 = 11088
tv5319 = 11088
tv5178 = 11088
tv3922 = 11088
tv3908 = 11088
tv3894 = 11088
tv3880 = 11088
tv3834 = 11088
tv3820 = 11088
tv3806 = 11088
tv3792 = 11088
tv3778 = 11088
tv2957 = 11088
tv5356 = 11092
tv5323 = 11092
tv2964 = 11092
tv5360 = 11096
tv5327 = 11096
tv5183 = 11096
tv5364 = 11100
tv5331 = 11100
tv5368 = 11104
tv5188 = 11104
tv5372 = 11108
tv5376 = 11112
tv5193 = 11112
tv5198 = 11120
tv5201 = 11128
tv5205 = 11132
tv5208 = 11136
tv5211 = 11140
tv5214 = 11144
tv5217 = 11148
tv5220 = 11152
tv5223 = 11156
tv5227 = 11160
tv5231 = 11164
tv5235 = 11168
tv5239 = 11172
tv5243 = 11176
tv5247 = 11180
__$ArrayPad$ = 11184
?ShowDemoWindowWidgets@@YAXXZ PROC			; ShowDemoWindowWidgets, COMDAT

; 547  : {

  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	b8 80 2c 00 00	 mov	 eax, 11392		; 00002c80H
  00009	e8 00 00 00 00	 call	 __chkstk
  0000e	48 2b e0	 sub	 rsp, rax
  00011	48 8d ac 24 c0
	00 00 00	 lea	 rbp, QWORD PTR [rsp+192]
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 20 0b 00 00	 mov	 ecx, 2848		; 00000b20H
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 c7 85 38 2b
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T354[rbp], -2
  00033	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003a	48 33 c5	 xor	 rax, rbp
  0003d	48 89 85 b0 2b
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
$LN4@ShowDemoWi:

; 548  :     IMGUI_DEMO_MARKER("Widgets");

  00044	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0004c	74 25		 je	 SHORT $LN330@ShowDemoWi
  0004e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  00054	ff c0		 inc	 eax
  00056	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0005d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07DIHFNIOG@Widgets?$AA@
  00064	8b d0		 mov	 edx, eax
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN330@ShowDemoWi:
  00073	33 c0		 xor	 eax, eax
  00075	85 c0		 test	 eax, eax
  00077	75 cb		 jne	 SHORT $LN4@ShowDemoWi

; 549  :     if (!ImGui::CollapsingHeader("Widgets"))

  00079	33 d2		 xor	 edx, edx
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DIHFNIOG@Widgets?$AA@
  00082	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPEBDH@Z ; ImGui::CollapsingHeader
  00087	0f b6 c0	 movzx	 eax, al
  0008a	85 c0		 test	 eax, eax
  0008c	75 05		 jne	 SHORT $LN331@ShowDemoWi

; 550  :         return;

  0008e	e9 47 8f 00 00	 jmp	 $LN1@ShowDemoWi
$LN331@ShowDemoWi:

; 551  : 
; 552  :     static bool disable_all = false; // The Checkbox for that is inside the "Disabled" section at the bottom
; 553  :     if (disable_all)

  00093	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?disable_all@?1??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0009a	85 c0		 test	 eax, eax
  0009c	74 07		 je	 SHORT $LN7@ShowDemoWi

; 554  :         ImGui::BeginDisabled();

  0009e	b1 01		 mov	 cl, 1
  000a0	e8 00 00 00 00	 call	 ?BeginDisabled@ImGui@@YAX_N@Z ; ImGui::BeginDisabled
$LN7@ShowDemoWi:

; 555  : 
; 556  :     IMGUI_DEMO_MARKER("Widgets/Basic");

  000a5	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  000ad	74 26		 je	 SHORT $LN333@ShowDemoWi
  000af	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  000b5	83 c0 09	 add	 eax, 9
  000b8	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  000bf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@KAGKFDNH@Widgets?1Basic?$AA@
  000c6	8b d0		 mov	 edx, eax
  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN333@ShowDemoWi:
  000d5	33 c0		 xor	 eax, eax
  000d7	85 c0		 test	 eax, eax
  000d9	75 ca		 jne	 SHORT $LN7@ShowDemoWi

; 557  :     if (ImGui::TreeNode("Basic"))

  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05NIKDGMHP@Basic?$AA@
  000e2	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  000e7	0f b6 c0	 movzx	 eax, al
  000ea	85 c0		 test	 eax, eax
  000ec	0f 84 ca 0d 00
	00		 je	 $LN58@ShowDemoWi
$LN10@ShowDemoWi:

; 558  :     {
; 559  :         IMGUI_DEMO_MARKER("Widgets/Basic/Button");

  000f2	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  000fa	74 26		 je	 SHORT $LN335@ShowDemoWi
  000fc	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  00102	83 c0 0c	 add	 eax, 12
  00105	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0010c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BF@ICEAACFD@Widgets?1Basic?1Button?$AA@
  00113	8b d0		 mov	 edx, eax
  00115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0011c	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN335@ShowDemoWi:
  00122	33 c0		 xor	 eax, eax
  00124	85 c0		 test	 eax, eax
  00126	75 ca		 jne	 SHORT $LN10@ShowDemoWi

; 560  :         static int clicked = 0;
; 561  :         if (ImGui::Button("Button"))

  00128	0f 57 d2	 xorps	 xmm2, xmm2
  0012b	0f 57 c9	 xorps	 xmm1, xmm1
  0012e	48 8d 8d 24 1f
	00 00		 lea	 rcx, QWORD PTR $T266[rbp]
  00135	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0013a	48 8b d0	 mov	 rdx, rax
  0013d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06LKBCGDFD@Button?$AA@
  00144	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00149	0f b6 c0	 movzx	 eax, al
  0014c	85 c0		 test	 eax, eax
  0014e	74 0e		 je	 SHORT $LN336@ShowDemoWi

; 562  :             clicked++;

  00150	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?clicked@?BB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00156	ff c0		 inc	 eax
  00158	89 05 00 00 00
	00		 mov	 DWORD PTR ?clicked@?BB@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN336@ShowDemoWi:

; 563  :         if (clicked & 1)

  0015e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?clicked@?BB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00164	83 e0 01	 and	 eax, 1
  00167	85 c0		 test	 eax, eax
  00169	74 1c		 je	 SHORT $LN13@ShowDemoWi

; 564  :         {
; 565  :             ImGui::SameLine();

  0016b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00173	0f 57 c0	 xorps	 xmm0, xmm0
  00176	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 566  :             ImGui::Text("Thanks for clicking me!");

  0017b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@IPKGBENJ@Thanks?5for?5clicking?5me?$CB?$AA@
  00182	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN13@ShowDemoWi:

; 567  :         }
; 568  : 
; 569  :         IMGUI_DEMO_MARKER("Widgets/Basic/Checkbox");

  00187	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0018f	74 26		 je	 SHORT $LN338@ShowDemoWi
  00191	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  00197	83 c0 16	 add	 eax, 22
  0019a	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  001a1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@ELBMBOIA@Widgets?1Basic?1Checkbox?$AA@
  001a8	8b d0		 mov	 edx, eax
  001aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  001b1	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN338@ShowDemoWi:
  001b7	33 c0		 xor	 eax, eax
  001b9	85 c0		 test	 eax, eax
  001bb	75 ca		 jne	 SHORT $LN13@ShowDemoWi

; 570  :         static bool check = true;
; 571  :         ImGui::Checkbox("checkbox", &check);

  001bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?check@?BB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  001c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08PDFIPFLP@checkbox?$AA@
  001cb	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox
$LN16@ShowDemoWi:

; 572  : 
; 573  :         IMGUI_DEMO_MARKER("Widgets/Basic/RadioButton");

  001d0	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  001d8	74 26		 je	 SHORT $LN339@ShowDemoWi
  001da	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  001e0	83 c0 1a	 add	 eax, 26
  001e3	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  001ea	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BK@MHILAAII@Widgets?1Basic?1RadioButton?$AA@
  001f1	8b d0		 mov	 edx, eax
  001f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  001fa	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN339@ShowDemoWi:
  00200	33 c0		 xor	 eax, eax
  00202	85 c0		 test	 eax, eax
  00204	75 ca		 jne	 SHORT $LN16@ShowDemoWi

; 574  :         static int e = 0;
; 575  :         ImGui::RadioButton("radio a", &e, 0); ImGui::SameLine();

  00206	45 33 c0	 xor	 r8d, r8d
  00209	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?e@?BB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00210	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07HJMAFCAJ@radio?5a?$AA@
  00217	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::RadioButton
  0021c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00224	0f 57 c0	 xorps	 xmm0, xmm0
  00227	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 576  :         ImGui::RadioButton("radio b", &e, 1); ImGui::SameLine();

  0022c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00232	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?e@?BB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00239	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07FCONABMK@radio?5b?$AA@
  00240	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::RadioButton
  00245	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0024d	0f 57 c0	 xorps	 xmm0, xmm0
  00250	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 577  :         ImGui::RadioButton("radio c", &e, 2);

  00255	41 b8 02 00 00
	00		 mov	 r8d, 2
  0025b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?e@?BB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00262	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07ELPGDAIL@radio?5c?$AA@
  00269	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::RadioButton
$LN19@ShowDemoWi:

; 578  : 
; 579  :         // Color buttons, demonstrate using PushID() to add unique identifier in the ID stack, and changing style.
; 580  :         IMGUI_DEMO_MARKER("Widgets/Basic/Buttons (Colored)");

  0026e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00276	74 26		 je	 SHORT $LN340@ShowDemoWi
  00278	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  0027e	83 c0 21	 add	 eax, 33			; 00000021H
  00281	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00288	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CA@HMPFCLAN@Widgets?1Basic?1Buttons?5?$CIColored?$CJ?$AA@
  0028f	8b d0		 mov	 edx, eax
  00291	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00298	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN340@ShowDemoWi:
  0029e	33 c0		 xor	 eax, eax
  002a0	85 c0		 test	 eax, eax
  002a2	75 ca		 jne	 SHORT $LN19@ShowDemoWi

; 581  :         for (int i = 0; i < 7; i++)

  002a4	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$97[rbp], 0
  002ab	eb 08		 jmp	 SHORT $LN22@ShowDemoWi
$LN20@ShowDemoWi:
  002ad	8b 45 04	 mov	 eax, DWORD PTR i$97[rbp]
  002b0	ff c0		 inc	 eax
  002b2	89 45 04	 mov	 DWORD PTR i$97[rbp], eax
$LN22@ShowDemoWi:
  002b5	83 7d 04 07	 cmp	 DWORD PTR i$97[rbp], 7
  002b9	0f 8d 55 01 00
	00		 jge	 $LN21@ShowDemoWi

; 582  :         {
; 583  :             if (i > 0)

  002bf	83 7d 04 00	 cmp	 DWORD PTR i$97[rbp], 0
  002c3	7e 10		 jle	 SHORT $LN341@ShowDemoWi

; 584  :                 ImGui::SameLine();

  002c5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  002cd	0f 57 c0	 xorps	 xmm0, xmm0
  002d0	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
$LN341@ShowDemoWi:

; 585  :             ImGui::PushID(i);

  002d5	8b 4d 04	 mov	 ecx, DWORD PTR i$97[rbp]
  002d8	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 586  :             ImGui::PushStyleColor(ImGuiCol_Button, (ImVec4)ImColor::HSV(i / 7.0f, 0.6f, 0.6f));

  002dd	f3 0f 2a 45 04	 cvtsi2ss xmm0, DWORD PTR i$97[rbp]
  002e2	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40e00000
  002ea	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  002f2	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [rsp+32], xmm1
  002f8	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f19999a
  00300	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f19999a
  00308	0f 28 c8	 movaps	 xmm1, xmm0
  0030b	48 8d 8d 44 1f
	00 00		 lea	 rcx, QWORD PTR $T267[rbp]
  00312	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  00317	48 8d 95 74 1f
	00 00		 lea	 rdx, QWORD PTR $T268[rbp]
  0031e	48 8b c8	 mov	 rcx, rax
  00321	e8 00 00 00 00	 call	 ??BImColor@@QEBA?AUImVec4@@XZ ; ImColor::operator ImVec4
  00326	48 8b d0	 mov	 rdx, rax
  00329	b9 15 00 00 00	 mov	 ecx, 21
  0032e	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor

; 587  :             ImGui::PushStyleColor(ImGuiCol_ButtonHovered, (ImVec4)ImColor::HSV(i / 7.0f, 0.7f, 0.7f));

  00333	f3 0f 2a 45 04	 cvtsi2ss xmm0, DWORD PTR i$97[rbp]
  00338	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40e00000
  00340	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00348	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [rsp+32], xmm1
  0034e	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f333333
  00356	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f333333
  0035e	0f 28 c8	 movaps	 xmm1, xmm0
  00361	48 8d 8d a4 1f
	00 00		 lea	 rcx, QWORD PTR $T269[rbp]
  00368	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  0036d	48 8d 95 d4 1f
	00 00		 lea	 rdx, QWORD PTR $T270[rbp]
  00374	48 8b c8	 mov	 rcx, rax
  00377	e8 00 00 00 00	 call	 ??BImColor@@QEBA?AUImVec4@@XZ ; ImColor::operator ImVec4
  0037c	48 8b d0	 mov	 rdx, rax
  0037f	b9 16 00 00 00	 mov	 ecx, 22
  00384	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor

; 588  :             ImGui::PushStyleColor(ImGuiCol_ButtonActive, (ImVec4)ImColor::HSV(i / 7.0f, 0.8f, 0.8f));

  00389	f3 0f 2a 45 04	 cvtsi2ss xmm0, DWORD PTR i$97[rbp]
  0038e	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40e00000
  00396	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0039e	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [rsp+32], xmm1
  003a4	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f4ccccd
  003ac	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f4ccccd
  003b4	0f 28 c8	 movaps	 xmm1, xmm0
  003b7	48 8d 8d 04 20
	00 00		 lea	 rcx, QWORD PTR $T271[rbp]
  003be	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  003c3	48 8d 95 34 20
	00 00		 lea	 rdx, QWORD PTR $T272[rbp]
  003ca	48 8b c8	 mov	 rcx, rax
  003cd	e8 00 00 00 00	 call	 ??BImColor@@QEBA?AUImVec4@@XZ ; ImColor::operator ImVec4
  003d2	48 8b d0	 mov	 rdx, rax
  003d5	b9 17 00 00 00	 mov	 ecx, 23
  003da	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor

; 589  :             ImGui::Button("Click");

  003df	0f 57 d2	 xorps	 xmm2, xmm2
  003e2	0f 57 c9	 xorps	 xmm1, xmm1
  003e5	48 8d 8d 64 20
	00 00		 lea	 rcx, QWORD PTR $T273[rbp]
  003ec	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  003f1	48 8b d0	 mov	 rdx, rax
  003f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05BBIFMDEO@Click?$AA@
  003fb	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 590  :             ImGui::PopStyleColor(3);

  00400	b9 03 00 00 00	 mov	 ecx, 3
  00405	e8 00 00 00 00	 call	 ?PopStyleColor@ImGui@@YAXH@Z ; ImGui::PopStyleColor

; 591  :             ImGui::PopID();

  0040a	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 592  :         }

  0040f	e9 99 fe ff ff	 jmp	 $LN20@ShowDemoWi
$LN21@ShowDemoWi:

; 593  : 
; 594  :         // Use AlignTextToFramePadding() to align text baseline to the baseline of framed widgets elements
; 595  :         // (otherwise a Text+SameLine+Button sequence will have the text a little too high by default!)
; 596  :         // See 'Demo->Layout->Text Baseline Alignment' for details.
; 597  :         ImGui::AlignTextToFramePadding();

  00414	e8 00 00 00 00	 call	 ?AlignTextToFramePadding@ImGui@@YAXXZ ; ImGui::AlignTextToFramePadding

; 598  :         ImGui::Text("Hold to repeat:");

  00419	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@FMOKFMLK@Hold?5to?5repeat?3?$AA@
  00420	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 599  :         ImGui::SameLine();

  00425	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0042d	0f 57 c0	 xorps	 xmm0, xmm0
  00430	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
$LN25@ShowDemoWi:

; 600  : 
; 601  :         // Arrow buttons with Repeater
; 602  :         IMGUI_DEMO_MARKER("Widgets/Basic/Buttons (Repeating)");

  00435	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0043d	74 26		 je	 SHORT $LN342@ShowDemoWi
  0043f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  00445	83 c0 37	 add	 eax, 55			; 00000037H
  00448	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0044f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CC@NDENGMIB@Widgets?1Basic?1Buttons?5?$CIRepeating@
  00456	8b d0		 mov	 edx, eax
  00458	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0045f	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN342@ShowDemoWi:
  00465	33 c0		 xor	 eax, eax
  00467	85 c0		 test	 eax, eax
  00469	75 ca		 jne	 SHORT $LN25@ShowDemoWi

; 603  :         static int counter = 0;
; 604  :         float spacing = ImGui::GetStyle().ItemInnerSpacing.x;

  0046b	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  00470	f3 0f 10 40 54	 movss	 xmm0, DWORD PTR [rax+84]
  00475	f3 0f 11 45 24	 movss	 DWORD PTR spacing$98[rbp], xmm0

; 605  :         ImGui::PushButtonRepeat(true);

  0047a	b1 01		 mov	 cl, 1
  0047c	e8 00 00 00 00	 call	 ?PushButtonRepeat@ImGui@@YAX_N@Z ; ImGui::PushButtonRepeat

; 606  :         if (ImGui::ArrowButton("##left", ImGuiDir_Left)) { counter--; }

  00481	33 d2		 xor	 edx, edx
  00483	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06EKMNOCAF@?$CD?$CDleft?$AA@
  0048a	e8 00 00 00 00	 call	 ?ArrowButton@ImGui@@YA_NPEBDH@Z ; ImGui::ArrowButton
  0048f	0f b6 c0	 movzx	 eax, al
  00492	85 c0		 test	 eax, eax
  00494	74 0e		 je	 SHORT $LN343@ShowDemoWi
  00496	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?counter@?BB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0049c	ff c8		 dec	 eax
  0049e	89 05 00 00 00
	00		 mov	 DWORD PTR ?counter@?BB@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN343@ShowDemoWi:

; 607  :         ImGui::SameLine(0.0f, spacing);

  004a4	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR spacing$98[rbp]
  004a9	0f 57 c0	 xorps	 xmm0, xmm0
  004ac	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 608  :         if (ImGui::ArrowButton("##right", ImGuiDir_Right)) { counter++; }

  004b1	ba 01 00 00 00	 mov	 edx, 1
  004b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07GKNPDGAE@?$CD?$CDright?$AA@
  004bd	e8 00 00 00 00	 call	 ?ArrowButton@ImGui@@YA_NPEBDH@Z ; ImGui::ArrowButton
  004c2	0f b6 c0	 movzx	 eax, al
  004c5	85 c0		 test	 eax, eax
  004c7	74 0e		 je	 SHORT $LN344@ShowDemoWi
  004c9	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?counter@?BB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  004cf	ff c0		 inc	 eax
  004d1	89 05 00 00 00
	00		 mov	 DWORD PTR ?counter@?BB@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN344@ShowDemoWi:

; 609  :         ImGui::PopButtonRepeat();

  004d7	e8 00 00 00 00	 call	 ?PopButtonRepeat@ImGui@@YAXXZ ; ImGui::PopButtonRepeat

; 610  :         ImGui::SameLine();

  004dc	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  004e4	0f 57 c0	 xorps	 xmm0, xmm0
  004e7	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 611  :         ImGui::Text("%d", counter);

  004ec	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?counter@?BB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  004f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  004f9	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN28@ShowDemoWi:

; 612  : 
; 613  :         {
; 614  :             // Tooltips
; 615  :             IMGUI_DEMO_MARKER("Widgets/Basic/Tooltips");

  004fe	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00506	74 26		 je	 SHORT $LN345@ShowDemoWi
  00508	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  0050e	83 c0 44	 add	 eax, 68			; 00000044H
  00511	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00518	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@BNGBGPGO@Widgets?1Basic?1Tooltips?$AA@
  0051f	8b d0		 mov	 edx, eax
  00521	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00528	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN345@ShowDemoWi:
  0052e	33 c0		 xor	 eax, eax
  00530	85 c0		 test	 eax, eax
  00532	75 ca		 jne	 SHORT $LN28@ShowDemoWi

; 616  :             //ImGui::AlignTextToFramePadding();
; 617  :             ImGui::Text("Tooltips:");

  00534	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09HGDNJJEP@Tooltips?3?$AA@
  0053b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 618  : 
; 619  :             ImGui::SameLine();

  00540	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00548	0f 57 c0	 xorps	 xmm0, xmm0
  0054b	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 620  :             ImGui::SmallButton("Button");

  00550	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06LKBCGDFD@Button?$AA@
  00557	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton

; 621  :             if (ImGui::IsItemHovered())

  0055c	33 c9		 xor	 ecx, ecx
  0055e	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  00563	0f b6 c0	 movzx	 eax, al
  00566	85 c0		 test	 eax, eax
  00568	74 0c		 je	 SHORT $LN346@ShowDemoWi

; 622  :                 ImGui::SetTooltip("I am a tooltip");

  0056a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@HKPBNOOC@I?5am?5a?5tooltip?$AA@
  00571	e8 00 00 00 00	 call	 ?SetTooltip@ImGui@@YAXPEBDZZ ; ImGui::SetTooltip
$LN346@ShowDemoWi:

; 623  : 
; 624  :             ImGui::SameLine();

  00576	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0057e	0f 57 c0	 xorps	 xmm0, xmm0
  00581	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 625  :             ImGui::SmallButton("Fancy");

  00586	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FMPLNOCG@Fancy?$AA@
  0058d	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton

; 626  :             if (ImGui::IsItemHovered())

  00592	33 c9		 xor	 ecx, ecx
  00594	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  00599	0f b6 c0	 movzx	 eax, al
  0059c	85 c0		 test	 eax, eax
  0059e	0f 84 a0 00 00
	00		 je	 $LN347@ShowDemoWi

; 627  :             {
; 628  :                 ImGui::BeginTooltip();

  005a4	e8 00 00 00 00	 call	 ?BeginTooltip@ImGui@@YAXXZ ; ImGui::BeginTooltip

; 629  :                 ImGui::Text("I am a fancy tooltip");

  005a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@CIONDOGG@I?5am?5a?5fancy?5tooltip?$AA@
  005b0	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 630  :                 static float arr[] = { 0.6f, 0.1f, 1.0f, 0.5f, 0.92f, 0.1f, 0.2f };
; 631  :                 ImGui::PlotLines("Curve", arr, IM_ARRAYSIZE(arr));

  005b5	0f 57 d2	 xorps	 xmm2, xmm2
  005b8	0f 57 c9	 xorps	 xmm1, xmm1
  005bb	48 8d 8d 84 20
	00 00		 lea	 rcx, QWORD PTR $T274[rbp]
  005c2	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  005c7	c7 44 24 40 04
	00 00 00	 mov	 DWORD PTR [rsp+64], 4
  005cf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005d2	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  005d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  005df	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  005e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  005ed	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  005f3	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  005fc	45 33 c9	 xor	 r9d, r9d
  005ff	41 b8 07 00 00
	00		 mov	 r8d, 7
  00605	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?arr@?DO@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  0060c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05HPADKKDG@Curve?$AA@
  00613	e8 00 00 00 00	 call	 ?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z ; ImGui::PlotLines

; 632  :                 ImGui::Text("Sin(time) = %f", sinf((float)ImGui::GetTime()));

  00618	e8 00 00 00 00	 call	 ?GetTime@ImGui@@YANXZ	; ImGui::GetTime
  0061d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00621	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sinf
  00627	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0062b	0f 28 c8	 movaps	 xmm1, xmm0
  0062e	66 48 0f 7e ca	 movq	 rdx, xmm1
  00633	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@IAGOFNGP@Sin?$CItime?$CJ?5?$DN?5?$CFf?$AA@
  0063a	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 633  :                 ImGui::EndTooltip();

  0063f	e8 00 00 00 00	 call	 ?EndTooltip@ImGui@@YAXXZ ; ImGui::EndTooltip
$LN347@ShowDemoWi:

; 634  :             }
; 635  : 
; 636  :             ImGui::SameLine();

  00644	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0064c	0f 57 c0	 xorps	 xmm0, xmm0
  0064f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 637  :             ImGui::SmallButton("Delayed");

  00654	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07GMFKFGGB@Delayed?$AA@
  0065b	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton

; 638  :             if (ImGui::IsItemHovered(ImGuiHoveredFlags_DelayNormal)) // With a delay

  00660	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00665	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  0066a	0f b6 c0	 movzx	 eax, al
  0066d	85 c0		 test	 eax, eax
  0066f	74 0c		 je	 SHORT $LN348@ShowDemoWi

; 639  :                 ImGui::SetTooltip("I am a tooltip with a delay.");

  00671	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@GILFHKEA@I?5am?5a?5tooltip?5with?5a?5delay?4?$AA@
  00678	e8 00 00 00 00	 call	 ?SetTooltip@ImGui@@YAXPEBDZZ ; ImGui::SetTooltip
$LN348@ShowDemoWi:

; 640  : 
; 641  :             ImGui::SameLine();

  0067d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00685	0f 57 c0	 xorps	 xmm0, xmm0
  00688	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 642  :             HelpMarker(

  0068d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FB@OEHHDLEI@Tooltip?5are?5created?5by?5using?5the@
  00694	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 643  :                 "Tooltip are created by using the IsItemHovered() function over any kind of item.");
; 644  :         }
; 645  : 
; 646  :         ImGui::LabelText("label", "Value");

  00699	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05LPIJGKJ@Value?$AA@
  006a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IDCCNNGI@label?$AA@
  006a7	e8 00 00 00 00	 call	 ?LabelText@ImGui@@YAXPEBD0ZZ ; ImGui::LabelText
$LN31@ShowDemoWi:

; 647  : 
; 648  :         {
; 649  :             // To wire InputText() with std::string or any other custom string type,
; 650  :             // see the "Text Input > Resize Callback" section of this demo, and the misc/cpp/imgui_stdlib.h file.
; 651  :             IMGUI_DEMO_MARKER("Widgets/Basic/InputText");

  006ac	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  006b4	74 26		 je	 SHORT $LN349@ShowDemoWi
  006b6	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  006bc	83 c0 68	 add	 eax, 104		; 00000068H
  006bf	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  006c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BI@EBJBEBDI@Widgets?1Basic?1InputText?$AA@
  006cd	8b d0		 mov	 edx, eax
  006cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  006d6	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN349@ShowDemoWi:
  006dc	33 c0		 xor	 eax, eax
  006de	85 c0		 test	 eax, eax
  006e0	75 ca		 jne	 SHORT $LN31@ShowDemoWi

; 652  :             static char str0[128] = "Hello, world!";
; 653  :             ImGui::InputText("input text", str0, IM_ARRAYSIZE(str0));

  006e2	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  006eb	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  006f4	45 33 c9	 xor	 r9d, r9d
  006f7	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  006fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?str0@?EB@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  00704	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@GKEMLLGG@input?5text?$AA@
  0070b	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 654  :             ImGui::SameLine(); HelpMarker(

  00710	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00718	0f 57 c0	 xorps	 xmm0, xmm0
  0071b	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00720	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJJ@PIFHNINF@USER?3?6Hold?5SHIFT?5or?5use?5mouse?5to@
  00727	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 655  :                 "USER:\n"
; 656  :                 "Hold SHIFT or use mouse to select text.\n"
; 657  :                 "CTRL+Left/Right to word jump.\n"
; 658  :                 "CTRL+A or Double-Click to select all.\n"
; 659  :                 "CTRL+X,CTRL+C,CTRL+V clipboard.\n"
; 660  :                 "CTRL+Z,CTRL+Y undo/redo.\n"
; 661  :                 "ESCAPE to revert.\n\n"
; 662  :                 "PROGRAMMER:\n"
; 663  :                 "You can use the ImGuiInputTextFlags_CallbackResize facility if you need to wire InputText() "
; 664  :                 "to a dynamic string type. See misc/cpp/imgui_stdlib.h for an example (this is not demonstrated "
; 665  :                 "in imgui_demo.cpp).");
; 666  : 
; 667  :             static char str1[128] = "";
; 668  :             ImGui::InputTextWithHint("input text (w/ hint)", "enter text here", str1, IM_ARRAYSIZE(str1));

  0072c	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00735	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0073e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00746	41 b9 80 00 00
	00		 mov	 r9d, 128		; 00000080H
  0074c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?str1@?EB@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  00753	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@DCMOPOEB@enter?5text?5here?$AA@
  0075a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@FKMBICKL@input?5text?5?$CIw?1?5hint?$CJ?$AA@
  00761	e8 00 00 00 00	 call	 ?InputTextWithHint@ImGui@@YA_NPEBD0PEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputTextWithHint
$LN34@ShowDemoWi:

; 669  : 
; 670  :             IMGUI_DEMO_MARKER("Widgets/Basic/InputInt, InputFloat");

  00766	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0076e	74 26		 je	 SHORT $LN350@ShowDemoWi
  00770	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  00776	83 c0 7b	 add	 eax, 123		; 0000007bH
  00779	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00780	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CD@BADBEAE@Widgets?1Basic?1InputInt?0?5InputFlo@
  00787	8b d0		 mov	 edx, eax
  00789	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00790	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN350@ShowDemoWi:
  00796	33 c0		 xor	 eax, eax
  00798	85 c0		 test	 eax, eax
  0079a	75 ca		 jne	 SHORT $LN34@ShowDemoWi

; 671  :             static int i0 = 123;
; 672  :             ImGui::InputInt("input int", &i0);

  0079c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  007a4	41 b9 64 00 00
	00		 mov	 r9d, 100		; 00000064H
  007aa	41 b8 01 00 00
	00		 mov	 r8d, 1
  007b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?i0@?EB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  007b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09KJGAAOJL@input?5int?$AA@
  007be	e8 00 00 00 00	 call	 ?InputInt@ImGui@@YA_NPEBDPEAHHHH@Z ; ImGui::InputInt

; 673  : 
; 674  :             static float f0 = 0.001f;
; 675  :             ImGui::InputFloat("input float", &f0, 0.01f, 1.0f, "%.3f");

  007c3	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  007cb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  007d2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007d7	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  007df	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3c23d70a
  007e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f0@?EB@??ShowDemoWindowWidgets@@YAXXZ@4MA
  007ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@HLMFPLHI@input?5float?$AA@
  007f5	e8 00 00 00 00	 call	 ?InputFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::InputFloat

; 676  : 
; 677  :             static double d0 = 999999.00000001;
; 678  :             ImGui::InputDouble("input double", &d0, 0.01f, 1.0f, "%.8f");

  007fa	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00802	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GJMOAIJC@?$CF?48f?$AA@
  00809	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0080e	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  00816	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3f847ae140000000
  0081e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?d0@?EB@??ShowDemoWindowWidgets@@YAXXZ@4NA
  00825	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HNPEBCJF@input?5double?$AA@
  0082c	e8 00 00 00 00	 call	 ?InputDouble@ImGui@@YA_NPEBDPEANNN0H@Z ; ImGui::InputDouble

; 679  : 
; 680  :             static float f1 = 1.e10f;
; 681  :             ImGui::InputFloat("input scientific", &f1, 0.0f, 0.0f, "%e");

  00831	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00839	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02CGLCDNAE@?$CFe?$AA@
  00840	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00845	0f 57 db	 xorps	 xmm3, xmm3
  00848	0f 57 d2	 xorps	 xmm2, xmm2
  0084b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f1@?EB@??ShowDemoWindowWidgets@@YAXXZ@4MA
  00852	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MKDEHDDF@input?5scientific?$AA@
  00859	e8 00 00 00 00	 call	 ?InputFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::InputFloat

; 682  :             ImGui::SameLine(); HelpMarker(

  0085e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00866	0f 57 c0	 xorps	 xmm0, xmm0
  00869	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0086e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FG@KKFDAGLG@You?5can?5input?5value?5using?5the?5sc@
  00875	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 683  :                 "You can input value using the scientific notation,\n"
; 684  :                 "  e.g. \"1e+8\" becomes \"100000000\".");
; 685  : 
; 686  :             static float vec4a[4] = { 0.10f, 0.20f, 0.30f, 0.44f };
; 687  :             ImGui::InputFloat3("input float3", vec4a);

  0087a	45 33 c9	 xor	 r9d, r9d
  0087d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  00884	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?vec4a@?EB@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  0088b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@KKMOFJMF@input?5float3?$AA@
  00892	e8 00 00 00 00	 call	 ?InputFloat3@ImGui@@YA_NPEBDQEAM0H@Z ; ImGui::InputFloat3
$LN37@ShowDemoWi:

; 688  :         }
; 689  : 
; 690  :         {
; 691  :             IMGUI_DEMO_MARKER("Widgets/Basic/DragInt, DragFloat");

  00897	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0089f	74 28		 je	 SHORT $LN351@ShowDemoWi
  008a1	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  008a7	05 90 00 00 00	 add	 eax, 144		; 00000090H
  008ac	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  008b3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CB@CBDDBCCE@Widgets?1Basic?1DragInt?0?5DragFloat@
  008ba	8b d0		 mov	 edx, eax
  008bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  008c3	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN351@ShowDemoWi:
  008c9	33 c0		 xor	 eax, eax
  008cb	85 c0		 test	 eax, eax
  008cd	75 c8		 jne	 SHORT $LN37@ShowDemoWi

; 692  :             static int i1 = 50, i2 = 42;
; 693  :             ImGui::DragInt("drag int", &i1, 1);

  008cf	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  008d7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  008de	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  008e3	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  008eb	45 33 c9	 xor	 r9d, r9d
  008ee	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  008f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?i1@?EK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  008fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08EAMJBIPC@drag?5int?$AA@
  00904	e8 00 00 00 00	 call	 ?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z ; ImGui::DragInt

; 694  :             ImGui::SameLine(); HelpMarker(

  00909	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00911	0f 57 c0	 xorps	 xmm0, xmm0
  00914	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00919	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0HA@JJHPNEPM@Click?5and?5drag?5to?5edit?5value?4?6Ho@
  00920	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 695  :                 "Click and drag to edit value.\n"
; 696  :                 "Hold SHIFT/ALT for faster/slower edit.\n"
; 697  :                 "Double-click or CTRL+click to input value.");
; 698  : 
; 699  :             ImGui::DragInt("drag int 0..100", &i2, 1, 0, 100, "%d%%", ImGuiSliderFlags_AlwaysClamp);

  00925	c7 44 24 30 10
	00 00 00	 mov	 DWORD PTR [rsp+48], 16
  0092d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04FCMNJMCO@?$CFd?$CF?$CF?$AA@
  00934	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00939	c7 44 24 20 64
	00 00 00	 mov	 DWORD PTR [rsp+32], 100	; 00000064H
  00941	45 33 c9	 xor	 r9d, r9d
  00944	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  0094c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?i2@?EK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00953	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@MCINAHBB@drag?5int?50?4?4100?$AA@
  0095a	e8 00 00 00 00	 call	 ?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z ; ImGui::DragInt

; 700  : 
; 701  :             static float f1 = 1.00f, f2 = 0.0067f;
; 702  :             ImGui::DragFloat("drag float", &f1, 0.005f);

  0095f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00967	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  0096e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00973	0f 57 c0	 xorps	 xmm0, xmm0
  00976	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0097c	0f 57 db	 xorps	 xmm3, xmm3
  0097f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ba3d70a
  00987	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f1@?EK@??ShowDemoWindowWidgets@@YAXXZ@4MA
  0098e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DLCOHHGO@drag?5float?$AA@
  00995	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 703  :             ImGui::DragFloat("drag small float", &f2, 0.0001f, 0.0f, 0.0f, "%.06f ns");

  0099a	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  009a2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08LHDHPMPH@?$CF?406f?5ns?$AA@
  009a9	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  009ae	0f 57 c0	 xorps	 xmm0, xmm0
  009b1	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  009b7	0f 57 db	 xorps	 xmm3, xmm3
  009ba	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@38d1b717
  009c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f2@?EK@??ShowDemoWindowWidgets@@YAXXZ@4MA
  009c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@CIODINPI@drag?5small?5float?$AA@
  009d0	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat
$LN40@ShowDemoWi:

; 704  :         }
; 705  : 
; 706  :         {
; 707  :             IMGUI_DEMO_MARKER("Widgets/Basic/SliderInt, SliderFloat");

  009d5	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  009dd	74 28		 je	 SHORT $LN352@ShowDemoWi
  009df	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  009e5	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  009ea	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  009f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CF@NOCPNFME@Widgets?1Basic?1SliderInt?0?5SliderF@
  009f8	8b d0		 mov	 edx, eax
  009fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00a01	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN352@ShowDemoWi:
  00a07	33 c0		 xor	 eax, eax
  00a09	85 c0		 test	 eax, eax
  00a0b	75 c8		 jne	 SHORT $LN40@ShowDemoWi

; 708  :             static int i1 = 0;
; 709  :             ImGui::SliderInt("slider int", &i1, -1, 3);

  00a0d	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00a15	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  00a1c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a21	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a27	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  00a2d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?i1@?EP@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00a34	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@INJDAFHM@slider?5int?$AA@
  00a3b	e8 00 00 00 00	 call	 ?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z ; ImGui::SliderInt

; 710  :             ImGui::SameLine(); HelpMarker("CTRL+click to input value.");

  00a40	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00a48	0f 57 c0	 xorps	 xmm0, xmm0
  00a4b	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00a50	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@FBJLFMJ@CTRL?$CLclick?5to?5input?5value?4?$AA@
  00a57	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 711  : 
; 712  :             static float f1 = 0.123f, f2 = 0.0f;
; 713  :             ImGui::SliderFloat("slider float", &f1, 0.0f, 1.0f, "ratio = %.3f");

  00a5c	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00a64	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0N@BCCPFMAI@ratio?5?$DN?5?$CF?43f?$AA@
  00a6b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a70	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00a78	0f 57 d2	 xorps	 xmm2, xmm2
  00a7b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f1@?EP@??ShowDemoWindowWidgets@@YAXXZ@4MA
  00a82	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PNCIGDCI@slider?5float?$AA@
  00a89	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 714  :             ImGui::SliderFloat("slider float (log)", &f2, -10.0f, 10.0f, "%.4f", ImGuiSliderFlags_Logarithmic);

  00a8e	c7 44 24 28 20
	00 00 00	 mov	 DWORD PTR [rsp+40], 32	; 00000020H
  00a96	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GANEPBPG@?$CF?44f?$AA@
  00a9d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00aa2	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41200000
  00aaa	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@c1200000
  00ab2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f2@?EP@??ShowDemoWindowWidgets@@YAXXZ@4MA
  00ab9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@PPOMGMAE@slider?5float?5?$CIlog?$CJ?$AA@
  00ac0	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat
$LN43@ShowDemoWi:

; 715  : 
; 716  :             IMGUI_DEMO_MARKER("Widgets/Basic/SliderAngle");

  00ac5	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00acd	74 28		 je	 SHORT $LN353@ShowDemoWi
  00acf	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  00ad5	05 a9 00 00 00	 add	 eax, 169		; 000000a9H
  00ada	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00ae1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BK@LMANIBOG@Widgets?1Basic?1SliderAngle?$AA@
  00ae8	8b d0		 mov	 edx, eax
  00aea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00af1	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN353@ShowDemoWi:
  00af7	33 c0		 xor	 eax, eax
  00af9	85 c0		 test	 eax, eax
  00afb	75 c8		 jne	 SHORT $LN43@ShowDemoWi

; 717  :             static float angle = 0.0f;
; 718  :             ImGui::SliderAngle("slider angle", &angle);

  00afd	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00b05	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08FKIHKODH@?$CF?40f?5deg?$AA@
  00b0c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b11	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@43b40000
  00b19	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@c3b40000
  00b21	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?angle@?EP@??ShowDemoWindowWidgets@@YAXXZ@4MA
  00b28	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@EFIJIFM@slider?5angle?$AA@
  00b2f	e8 00 00 00 00	 call	 ?SliderAngle@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderAngle
$LN46@ShowDemoWi:

; 719  : 
; 720  :             // Using the format string to display a name instead of an integer.
; 721  :             // Here we completely omit '%d' from the format string, so it'll only display a name.
; 722  :             // This technique can also be used with DragInt().
; 723  :             IMGUI_DEMO_MARKER("Widgets/Basic/Slider (enum)");

  00b34	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00b3c	74 28		 je	 SHORT $LN354@ShowDemoWi
  00b3e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  00b44	05 b0 00 00 00	 add	 eax, 176		; 000000b0H
  00b49	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00b50	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BM@MKFJNJNL@Widgets?1Basic?1Slider?5?$CIenum?$CJ?$AA@
  00b57	8b d0		 mov	 edx, eax
  00b59	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00b60	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN354@ShowDemoWi:
  00b66	33 c0		 xor	 eax, eax
  00b68	85 c0		 test	 eax, eax
  00b6a	75 c8		 jne	 SHORT $LN46@ShowDemoWi

; 724  :             enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUNT };
; 725  :             static int elem = Element_Fire;
; 726  :             const char* elems_names[Element_COUNT] = { "Fire", "Earth", "Air", "Water" };

  00b6c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04OHLPDOFO@Fire?$AA@
  00b73	48 89 45 48	 mov	 QWORD PTR elems_names$99[rbp], rax
  00b77	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05IKBANCEK@Earth?$AA@
  00b7e	48 89 45 50	 mov	 QWORD PTR elems_names$99[rbp+8], rax
  00b82	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03KHBMPEGA@Air?$AA@
  00b89	48 89 45 58	 mov	 QWORD PTR elems_names$99[rbp+16], rax
  00b8d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05EMKMBNJK@Water?$AA@
  00b94	48 89 45 60	 mov	 QWORD PTR elems_names$99[rbp+24], rax

; 727  :             const char* elem_name = (elem >= 0 && elem < Element_COUNT) ? elems_names[elem] : "Unknown";

  00b98	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?elem@?EP@??ShowDemoWindowWidgets@@YAXXZ@4HA, 0
  00b9f	7c 1e		 jl	 SHORT $LN618@ShowDemoWi
  00ba1	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?elem@?EP@??ShowDemoWindowWidgets@@YAXXZ@4HA, 4
  00ba8	7d 15		 jge	 SHORT $LN618@ShowDemoWi
  00baa	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR ?elem@?EP@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00bb1	48 8b 44 c5 48	 mov	 rax, QWORD PTR elems_names$99[rbp+rax*8]
  00bb6	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv536[rbp], rax
  00bbd	eb 0e		 jmp	 SHORT $LN619@ShowDemoWi
$LN618@ShowDemoWi:
  00bbf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07NBCGADJA@Unknown?$AA@
  00bc6	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv536[rbp], rax
$LN619@ShowDemoWi:
  00bcd	48 8b 85 48 2b
	00 00		 mov	 rax, QWORD PTR tv536[rbp]
  00bd4	48 89 85 88 00
	00 00		 mov	 QWORD PTR elem_name$100[rbp], rax

; 728  :             ImGui::SliderInt("slider enum", &elem, 0, Element_COUNT - 1, elem_name);

  00bdb	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00be3	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR elem_name$100[rbp]
  00bea	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00bef	41 b9 03 00 00
	00		 mov	 r9d, 3
  00bf5	45 33 c0	 xor	 r8d, r8d
  00bf8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?elem@?EP@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00bff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@ENFPDMMO@slider?5enum?$AA@
  00c06	e8 00 00 00 00	 call	 ?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z ; ImGui::SliderInt

; 729  :             ImGui::SameLine(); HelpMarker("Using the format string parameter to display a name instead of the underlying integer.");

  00c0b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00c13	0f 57 c0	 xorps	 xmm0, xmm0
  00c16	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00c1b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FH@BEBFOFKH@Using?5the?5format?5string?5paramete@
  00c22	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker
$LN49@ShowDemoWi:

; 730  :         }
; 731  : 
; 732  :         {
; 733  :             IMGUI_DEMO_MARKER("Widgets/Basic/ColorEdit3, ColorEdit4");

  00c27	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00c2f	74 28		 je	 SHORT $LN355@ShowDemoWi
  00c31	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  00c37	05 ba 00 00 00	 add	 eax, 186		; 000000baH
  00c3c	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00c43	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CF@OBBGEKML@Widgets?1Basic?1ColorEdit3?0?5ColorE@
  00c4a	8b d0		 mov	 edx, eax
  00c4c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00c53	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN355@ShowDemoWi:
  00c59	33 c0		 xor	 eax, eax
  00c5b	85 c0		 test	 eax, eax
  00c5d	75 c8		 jne	 SHORT $LN49@ShowDemoWi

; 734  :             static float col1[3] = { 1.0f, 0.0f, 0.2f };
; 735  :             static float col2[4] = { 0.4f, 0.7f, 0.0f, 0.5f };
; 736  :             ImGui::ColorEdit3("color 1", col1);

  00c5f	45 33 c0	 xor	 r8d, r8d
  00c62	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?col1@?FM@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  00c69	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07OCDFLNDK@color?51?$AA@
  00c70	e8 00 00 00 00	 call	 ?ColorEdit3@ImGui@@YA_NPEBDQEAMH@Z ; ImGui::ColorEdit3

; 737  :             ImGui::SameLine(); HelpMarker(

  00c75	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00c7d	0f 57 c0	 xorps	 xmm0, xmm0
  00c80	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00c85	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0LM@JNIPGMLP@Click?5on?5the?5color?5square?5to?5ope@
  00c8c	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 738  :                 "Click on the color square to open a color picker.\n"
; 739  :                 "Click and hold to use drag and drop.\n"
; 740  :                 "Right-click on the color square to show options.\n"
; 741  :                 "CTRL+click on individual component to input value.\n");
; 742  : 
; 743  :             ImGui::ColorEdit4("color 2", col2);

  00c91	45 33 c0	 xor	 r8d, r8d
  00c94	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?col2@?FM@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  00c9b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07MJBIOOPJ@color?52?$AA@
  00ca2	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z ; ImGui::ColorEdit4
$LN52@ShowDemoWi:

; 744  :         }
; 745  : 
; 746  :         {
; 747  :             // Using the _simplified_ one-liner Combo() api here
; 748  :             // See "Combo" section for examples of how to use the more flexible BeginCombo()/EndCombo() api.
; 749  :             IMGUI_DEMO_MARKER("Widgets/Basic/Combo");

  00ca7	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00caf	74 28		 je	 SHORT $LN356@ShowDemoWi
  00cb1	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  00cb7	05 ca 00 00 00	 add	 eax, 202		; 000000caH
  00cbc	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00cc3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BE@DGEKEFFI@Widgets?1Basic?1Combo?$AA@
  00cca	8b d0		 mov	 edx, eax
  00ccc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00cd3	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN356@ShowDemoWi:
  00cd9	33 c0		 xor	 eax, eax
  00cdb	85 c0		 test	 eax, eax
  00cdd	75 c8		 jne	 SHORT $LN52@ShowDemoWi

; 750  :             const char* items[] = { "AAAA", "BBBB", "CCCC", "DDDD", "EEEE", "FFFF", "GGGG", "HHHH", "IIIIIII", "JJJJ", "KKKKKKK" };

  00cdf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04OHNMNPPA@AAAA?$AA@
  00ce6	48 89 85 b0 00
	00 00		 mov	 QWORD PTR items$101[rbp], rax
  00ced	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04JLKCOHFE@BBBB?$AA@
  00cf4	48 89 85 b8 00
	00 00		 mov	 QWORD PTR items$101[rbp+8], rax
  00cfb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GKHPCPH@CCCC?$AA@
  00d02	48 89 85 c0 00
	00 00		 mov	 QWORD PTR items$101[rbp+16], rax
  00d09	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GDFOJGBM@DDDD?$AA@
  00d10	48 89 85 c8 00
	00 00		 mov	 QWORD PTR items$101[rbp+24], rax
  00d17	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04POFLIDLP@EEEE?$AA@
  00d1e	48 89 85 d0 00
	00 00		 mov	 QWORD PTR items$101[rbp+32], rax
  00d25	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04ICCFLLBL@FFFF?$AA@
  00d2c	48 89 85 d8 00
	00 00		 mov	 QWORD PTR items$101[rbp+40], rax
  00d33	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04BPCAKOLI@GGGG?$AA@
  00d3a	48 89 85 e0 00
	00 00		 mov	 QWORD PTR items$101[rbp+48], rax
  00d41	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04EJNHHCMN@HHHH?$AA@
  00d48	48 89 85 e8 00
	00 00		 mov	 QWORD PTR items$101[rbp+56], rax
  00d4f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07LIMEPNNC@IIIIIII?$AA@
  00d56	48 89 85 f0 00
	00 00		 mov	 QWORD PTR items$101[rbp+64], rax
  00d5d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04KIKMFPMK@JJJJ?$AA@
  00d64	48 89 85 f8 00
	00 00		 mov	 QWORD PTR items$101[rbp+72], rax
  00d6b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07MBMNGHIK@KKKKKKK?$AA@
  00d72	48 89 85 00 01
	00 00		 mov	 QWORD PTR items$101[rbp+80], rax

; 751  :             static int item_current = 0;
; 752  :             ImGui::Combo("combo", &item_current, items, IM_ARRAYSIZE(items));

  00d79	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  00d81	41 b9 0b 00 00
	00		 mov	 r9d, 11
  00d87	4c 8d 85 b0 00
	00 00		 lea	 r8, QWORD PTR items$101[rbp]
  00d8e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?item_current@?GB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00d95	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LLEFIEMM@combo?$AA@
  00d9c	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z ; ImGui::Combo

; 753  :             ImGui::SameLine(); HelpMarker(

  00da1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00da9	0f 57 c0	 xorps	 xmm0, xmm0
  00dac	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00db1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0KK@EOPNBDJP@Using?5the?5simplified?5one?9liner?5C@
  00db8	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker
$LN55@ShowDemoWi:

; 754  :                 "Using the simplified one-liner Combo API here.\nRefer to the \"Combo\" section below for an explanation of how to use the more flexible and general BeginCombo/EndCombo API.");
; 755  :         }
; 756  : 
; 757  :         {
; 758  :             // Using the _simplified_ one-liner ListBox() api here
; 759  :             // See "List boxes" section for examples of how to use the more flexible BeginListBox()/EndListBox() api.
; 760  :             IMGUI_DEMO_MARKER("Widgets/Basic/ListBox");

  00dbd	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00dc5	74 28		 je	 SHORT $LN357@ShowDemoWi
  00dc7	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  00dcd	05 d5 00 00 00	 add	 eax, 213		; 000000d5H
  00dd2	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00dd9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@OOGNHKFG@Widgets?1Basic?1ListBox?$AA@
  00de0	8b d0		 mov	 edx, eax
  00de2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00de9	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN357@ShowDemoWi:
  00def	33 c0		 xor	 eax, eax
  00df1	85 c0		 test	 eax, eax
  00df3	75 c8		 jne	 SHORT $LN55@ShowDemoWi

; 761  :             const char* items[] = { "Apple", "Banana", "Cherry", "Kiwi", "Mango", "Orange", "Pineapple", "Strawberry", "Watermelon" };

  00df5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05EBJDGKGA@Apple?$AA@
  00dfc	48 89 85 30 01
	00 00		 mov	 QWORD PTR items$102[rbp], rax
  00e03	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06OJJIHNKI@Banana?$AA@
  00e0a	48 89 85 38 01
	00 00		 mov	 QWORD PTR items$102[rbp+8], rax
  00e11	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06MKLLCMPJ@Cherry?$AA@
  00e18	48 89 85 40 01
	00 00		 mov	 QWORD PTR items$102[rbp+16], rax
  00e1f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04LFFBHHAI@Kiwi?$AA@
  00e26	48 89 85 48 01
	00 00		 mov	 QWORD PTR items$102[rbp+24], rax
  00e2d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05CNKNDDOO@Mango?$AA@
  00e34	48 89 85 50 01
	00 00		 mov	 QWORD PTR items$102[rbp+32], rax
  00e3b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06LMIDBFFB@Orange?$AA@
  00e42	48 89 85 58 01
	00 00		 mov	 QWORD PTR items$102[rbp+40], rax
  00e49	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09EBEMMGPP@Pineapple?$AA@
  00e50	48 89 85 60 01
	00 00		 mov	 QWORD PTR items$102[rbp+48], rax
  00e57	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0L@BNANDFPN@Strawberry?$AA@
  00e5e	48 89 85 68 01
	00 00		 mov	 QWORD PTR items$102[rbp+56], rax
  00e65	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0L@JJNGHCMI@Watermelon?$AA@
  00e6c	48 89 85 70 01
	00 00		 mov	 QWORD PTR items$102[rbp+64], rax

; 762  :             static int item_current = 1;
; 763  :             ImGui::ListBox("listbox", &item_current, items, IM_ARRAYSIZE(items), 4);

  00e73	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00e7b	41 b9 09 00 00
	00		 mov	 r9d, 9
  00e81	4c 8d 85 30 01
	00 00		 lea	 r8, QWORD PTR items$102[rbp]
  00e88	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?item_current@?GG@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00e8f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07LHBBOFFP@listbox?$AA@
  00e96	e8 00 00 00 00	 call	 ?ListBox@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z ; ImGui::ListBox

; 764  :             ImGui::SameLine(); HelpMarker(

  00e9b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00ea3	0f 57 c0	 xorps	 xmm0, xmm0
  00ea6	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00eab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0LF@POLFDEKB@Using?5the?5simplified?5one?9liner?5L@
  00eb2	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 765  :                 "Using the simplified one-liner ListBox API here.\nRefer to the \"List boxes\" section below for an explanation of how to use the more flexible and general BeginListBox/EndListBox API.");
; 766  :         }
; 767  : 
; 768  :         ImGui::TreePop();

  00eb7	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN58@ShowDemoWi:

; 769  :     }
; 770  : 
; 771  :     // Testing ImGuiOnceUponAFrame helper.
; 772  :     //static ImGuiOnceUponAFrame once;
; 773  :     //for (int i = 0; i < 5; i++)
; 774  :     //    if (once)
; 775  :     //        ImGui::Text("This will be displayed only once.");
; 776  : 
; 777  :     IMGUI_DEMO_MARKER("Widgets/Trees");

  00ebc	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00ec4	74 28		 je	 SHORT $LN358@ShowDemoWi
  00ec6	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  00ecc	05 e6 00 00 00	 add	 eax, 230		; 000000e6H
  00ed1	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00ed8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@GEAPLMHF@Widgets?1Trees?$AA@
  00edf	8b d0		 mov	 edx, eax
  00ee1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00ee8	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN358@ShowDemoWi:
  00eee	33 c0		 xor	 eax, eax
  00ef0	85 c0		 test	 eax, eax
  00ef2	75 c8		 jne	 SHORT $LN58@ShowDemoWi

; 778  :     if (ImGui::TreeNode("Trees"))

  00ef4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05BMMGIDNN@Trees?$AA@
  00efb	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  00f00	0f b6 c0	 movzx	 eax, al
  00f03	85 c0		 test	 eax, eax
  00f05	0f 84 85 04 00
	00		 je	 $LN73@ShowDemoWi
$LN61@ShowDemoWi:

; 779  :     {
; 780  :         IMGUI_DEMO_MARKER("Widgets/Trees/Basic trees");

  00f0b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00f13	74 28		 je	 SHORT $LN360@ShowDemoWi
  00f15	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  00f1b	05 e9 00 00 00	 add	 eax, 233		; 000000e9H
  00f20	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00f27	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BK@OJMACAMF@Widgets?1Trees?1Basic?5trees?$AA@
  00f2e	8b d0		 mov	 edx, eax
  00f30	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00f37	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN360@ShowDemoWi:
  00f3d	33 c0		 xor	 eax, eax
  00f3f	85 c0		 test	 eax, eax
  00f41	75 c8		 jne	 SHORT $LN61@ShowDemoWi

; 781  :         if (ImGui::TreeNode("Basic trees"))

  00f43	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@OABIBGBA@Basic?5trees?$AA@
  00f4a	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  00f4f	0f b6 c0	 movzx	 eax, al
  00f52	85 c0		 test	 eax, eax
  00f54	0f 84 96 00 00
	00		 je	 $LN67@ShowDemoWi

; 782  :         {
; 783  :             for (int i = 0; i < 5; i++)

  00f5a	c7 85 94 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$103[rbp], 0
  00f64	eb 0e		 jmp	 SHORT $LN64@ShowDemoWi
$LN62@ShowDemoWi:
  00f66	8b 85 94 01 00
	00		 mov	 eax, DWORD PTR i$103[rbp]
  00f6c	ff c0		 inc	 eax
  00f6e	89 85 94 01 00
	00		 mov	 DWORD PTR i$103[rbp], eax
$LN64@ShowDemoWi:
  00f74	83 bd 94 01 00
	00 05		 cmp	 DWORD PTR i$103[rbp], 5
  00f7b	7d 6e		 jge	 SHORT $LN63@ShowDemoWi

; 784  :             {
; 785  :                 // Use SetNextItemOpen() so set the default state of a node to be open. We could
; 786  :                 // also use TreeNodeEx() with the ImGuiTreeNodeFlags_DefaultOpen flag to achieve the same thing!
; 787  :                 if (i == 0)

  00f7d	83 bd 94 01 00
	00 00		 cmp	 DWORD PTR i$103[rbp], 0
  00f84	75 0c		 jne	 SHORT $LN362@ShowDemoWi

; 788  :                     ImGui::SetNextItemOpen(true, ImGuiCond_Once);

  00f86	ba 02 00 00 00	 mov	 edx, 2
  00f8b	b1 01		 mov	 cl, 1
  00f8d	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
$LN362@ShowDemoWi:

; 789  : 
; 790  :                 if (ImGui::TreeNode((void*)(intptr_t)i, "Child %d", i))

  00f92	48 63 85 94 01
	00 00		 movsxd	 rax, DWORD PTR i$103[rbp]
  00f99	44 8b 85 94 01
	00 00		 mov	 r8d, DWORD PTR i$103[rbp]
  00fa0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08GPGIPNJB@Child?5?$CFd?$AA@
  00fa7	48 8b c8	 mov	 rcx, rax
  00faa	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBXPEBDZZ ; ImGui::TreeNode
  00faf	0f b6 c0	 movzx	 eax, al
  00fb2	85 c0		 test	 eax, eax
  00fb4	74 30		 je	 SHORT $LN363@ShowDemoWi

; 791  :                 {
; 792  :                     ImGui::Text("blah blah");

  00fb6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09KGLHLKML@blah?5blah?$AA@
  00fbd	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 793  :                     ImGui::SameLine();

  00fc2	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00fca	0f 57 c0	 xorps	 xmm0, xmm0
  00fcd	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 794  :                     if (ImGui::SmallButton("button")) {}

  00fd2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06HFKPFKMP@button?$AA@
  00fd9	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton
  00fde	0f b6 c0	 movzx	 eax, al

; 795  :                     ImGui::TreePop();

  00fe1	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN363@ShowDemoWi:

; 796  :                 }
; 797  :             }

  00fe6	e9 7b ff ff ff	 jmp	 $LN62@ShowDemoWi
$LN63@ShowDemoWi:

; 798  :             ImGui::TreePop();

  00feb	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN67@ShowDemoWi:

; 799  :         }
; 800  : 
; 801  :         IMGUI_DEMO_MARKER("Widgets/Trees/Advanced, with Selectable nodes");

  00ff0	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00ff8	74 28		 je	 SHORT $LN365@ShowDemoWi
  00ffa	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  01000	05 fe 00 00 00	 add	 eax, 254		; 000000feH
  01005	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0100c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CO@HKMALMNH@Widgets?1Trees?1Advanced?0?5with?5Sel@
  01013	8b d0		 mov	 edx, eax
  01015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0101c	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN365@ShowDemoWi:
  01022	33 c0		 xor	 eax, eax
  01024	85 c0		 test	 eax, eax
  01026	75 c8		 jne	 SHORT $LN67@ShowDemoWi

; 802  :         if (ImGui::TreeNode("Advanced, with Selectable nodes"))

  01028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@LDNIBPC@Advanced?0?5with?5Selectable?5nodes?$AA@
  0102f	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  01034	0f b6 c0	 movzx	 eax, al
  01037	85 c0		 test	 eax, eax
  01039	0f 84 4c 03 00
	00		 je	 $LN366@ShowDemoWi

; 803  :         {
; 804  :             HelpMarker(

  0103f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0IL@PMAJKNJG@This?5is?5a?5more?5typical?5looking?5t@
  01046	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 805  :                 "This is a more typical looking tree with selectable nodes.\n"
; 806  :                 "Click to select, CTRL+Click to toggle, click on arrows or double-click to open.");
; 807  :             static ImGuiTreeNodeFlags base_flags = ImGuiTreeNodeFlags_OpenOnArrow | ImGuiTreeNodeFlags_OpenOnDoubleClick | ImGuiTreeNodeFlags_SpanAvailWidth;
; 808  :             static bool align_label_with_current_x_position = false;
; 809  :             static bool test_drag_and_drop = false;
; 810  :             ImGui::CheckboxFlags("ImGuiTreeNodeFlags_OpenOnArrow",       &base_flags, ImGuiTreeNodeFlags_OpenOnArrow);

  0104b	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  01051	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?base_flags@?IJ@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01058	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@JJAJNCOF@ImGuiTreeNodeFlags_OpenOnArrow?$AA@
  0105f	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 811  :             ImGui::CheckboxFlags("ImGuiTreeNodeFlags_OpenOnDoubleClick", &base_flags, ImGuiTreeNodeFlags_OpenOnDoubleClick);

  01064	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0106a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?base_flags@?IJ@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@HDMDLLCC@ImGuiTreeNodeFlags_OpenOnDoubleC@
  01078	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 812  :             ImGui::CheckboxFlags("ImGuiTreeNodeFlags_SpanAvailWidth",    &base_flags, ImGuiTreeNodeFlags_SpanAvailWidth); ImGui::SameLine(); HelpMarker("Extend hit area to all available width instead of allowing more items to be laid out after the node.");

  0107d	41 b8 00 08 00
	00		 mov	 r8d, 2048		; 00000800H
  01083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?base_flags@?IJ@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0108a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@CLHKBONF@ImGuiTreeNodeFlags_SpanAvailWidt@
  01091	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags
  01096	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0109e	0f 57 c0	 xorps	 xmm0, xmm0
  010a1	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  010a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GF@HJHHKMOH@Extend?5hit?5area?5to?5all?5available@
  010ad	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 813  :             ImGui::CheckboxFlags("ImGuiTreeNodeFlags_SpanFullWidth",     &base_flags, ImGuiTreeNodeFlags_SpanFullWidth);

  010b2	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  010b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?base_flags@?IJ@??ShowDemoWindowWidgets@@YAXXZ@4HA
  010bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@OHNGGEGD@ImGuiTreeNodeFlags_SpanFullWidth@
  010c6	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 814  :             ImGui::Checkbox("Align label with current X position", &align_label_with_current_x_position);

  010cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?align_label_with_current_x_position@?IJ@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  010d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@CFMFIOLL@Align?5label?5with?5current?5X?5posit@
  010d9	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 815  :             ImGui::Checkbox("Test tree node as drag source", &test_drag_and_drop);

  010de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?test_drag_and_drop@?IJ@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  010e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@ICNOHPIE@Test?5tree?5node?5as?5drag?5source?$AA@
  010ec	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 816  :             ImGui::Text("Hello!");

  010f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KPGIMOHP@Hello?$CB?$AA@
  010f8	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 817  :             if (align_label_with_current_x_position)

  010fd	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?align_label_with_current_x_position@?IJ@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  01104	85 c0		 test	 eax, eax
  01106	74 0a		 je	 SHORT $LN367@ShowDemoWi

; 818  :                 ImGui::Unindent(ImGui::GetTreeNodeToLabelSpacing());

  01108	e8 00 00 00 00	 call	 ?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ ; ImGui::GetTreeNodeToLabelSpacing
  0110d	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent
$LN367@ShowDemoWi:

; 819  : 
; 820  :             // 'selection_mask' is dumb representation of what may be user-side selection state.
; 821  :             //  You may retain selection state inside or outside your objects in whatever format you see fit.
; 822  :             // 'node_clicked' is temporary storage of what node we have clicked to process selection at the end
; 823  :             /// of the loop. May be a pointer to your own node type, etc.
; 824  :             static int selection_mask = (1 << 2);
; 825  :             int node_clicked = -1;

  01112	c7 85 b4 01 00
	00 ff ff ff ff	 mov	 DWORD PTR node_clicked$104[rbp], -1

; 826  :             for (int i = 0; i < 6; i++)

  0111c	c7 85 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$105[rbp], 0
  01126	eb 0e		 jmp	 SHORT $LN70@ShowDemoWi
$LN68@ShowDemoWi:
  01128	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$105[rbp]
  0112e	ff c0		 inc	 eax
  01130	89 85 d4 01 00
	00		 mov	 DWORD PTR i$105[rbp], eax
$LN70@ShowDemoWi:
  01136	83 bd d4 01 00
	00 06		 cmp	 DWORD PTR i$105[rbp], 6
  0113d	0f 8d c5 01 00
	00		 jge	 $LN69@ShowDemoWi

; 827  :             {
; 828  :                 // Disable the default "open on single-click behavior" + set Selected flag according to our selection.
; 829  :                 // To alter selection we use IsItemClicked() && !IsItemToggledOpen(), so clicking on an arrow doesn't alter selection.
; 830  :                 ImGuiTreeNodeFlags node_flags = base_flags;

  01143	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?base_flags@?IJ@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01149	89 85 f4 01 00
	00		 mov	 DWORD PTR node_flags$106[rbp], eax

; 831  :                 const bool is_selected = (selection_mask & (1 << i)) != 0;

  0114f	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$105[rbp]
  01155	b9 01 00 00 00	 mov	 ecx, 1
  0115a	89 8d 44 2b 00
	00		 mov	 DWORD PTR tv6266[rbp], ecx
  01160	0f b6 c8	 movzx	 ecx, al
  01163	8b 85 44 2b 00
	00		 mov	 eax, DWORD PTR tv6266[rbp]
  01169	d3 e0		 shl	 eax, cl
  0116b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?selection_mask@?IJ@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01171	23 c8		 and	 ecx, eax
  01173	8b c1		 mov	 eax, ecx
  01175	85 c0		 test	 eax, eax
  01177	74 09		 je	 SHORT $LN620@ShowDemoWi
  01179	c6 85 48 2b 00
	00 01		 mov	 BYTE PTR tv802[rbp], 1
  01180	eb 07		 jmp	 SHORT $LN621@ShowDemoWi
$LN620@ShowDemoWi:
  01182	c6 85 48 2b 00
	00 00		 mov	 BYTE PTR tv802[rbp], 0
$LN621@ShowDemoWi:
  01189	0f b6 85 48 2b
	00 00		 movzx	 eax, BYTE PTR tv802[rbp]
  01190	88 85 14 02 00
	00		 mov	 BYTE PTR is_selected$107[rbp], al

; 832  :                 if (is_selected)

  01196	0f b6 85 14 02
	00 00		 movzx	 eax, BYTE PTR is_selected$107[rbp]
  0119d	85 c0		 test	 eax, eax
  0119f	74 0f		 je	 SHORT $LN368@ShowDemoWi

; 833  :                     node_flags |= ImGuiTreeNodeFlags_Selected;

  011a1	8b 85 f4 01 00
	00		 mov	 eax, DWORD PTR node_flags$106[rbp]
  011a7	83 c8 01	 or	 eax, 1
  011aa	89 85 f4 01 00
	00		 mov	 DWORD PTR node_flags$106[rbp], eax
$LN368@ShowDemoWi:

; 834  :                 if (i < 3)

  011b0	83 bd d4 01 00
	00 03		 cmp	 DWORD PTR i$105[rbp], 3
  011b7	0f 8d ae 00 00
	00		 jge	 $LN369@ShowDemoWi

; 835  :                 {
; 836  :                     // Items 0..2 are Tree Node
; 837  :                     bool node_open = ImGui::TreeNodeEx((void*)(intptr_t)i, node_flags, "Selectable Node %d", i);

  011bd	48 63 85 d4 01
	00 00		 movsxd	 rax, DWORD PTR i$105[rbp]
  011c4	44 8b 8d d4 01
	00 00		 mov	 r9d, DWORD PTR i$105[rbp]
  011cb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@DKDJNGLG@Selectable?5Node?5?$CFd?$AA@
  011d2	8b 95 f4 01 00
	00		 mov	 edx, DWORD PTR node_flags$106[rbp]
  011d8	48 8b c8	 mov	 rcx, rax
  011db	e8 00 00 00 00	 call	 ?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ ; ImGui::TreeNodeEx
  011e0	88 85 34 02 00
	00		 mov	 BYTE PTR node_open$108[rbp], al

; 838  :                     if (ImGui::IsItemClicked() && !ImGui::IsItemToggledOpen())

  011e6	33 c9		 xor	 ecx, ecx
  011e8	e8 00 00 00 00	 call	 ?IsItemClicked@ImGui@@YA_NH@Z ; ImGui::IsItemClicked
  011ed	0f b6 c0	 movzx	 eax, al
  011f0	85 c0		 test	 eax, eax
  011f2	74 18		 je	 SHORT $LN371@ShowDemoWi
  011f4	e8 00 00 00 00	 call	 ?IsItemToggledOpen@ImGui@@YA_NXZ ; ImGui::IsItemToggledOpen
  011f9	0f b6 c0	 movzx	 eax, al
  011fc	85 c0		 test	 eax, eax
  011fe	75 0c		 jne	 SHORT $LN371@ShowDemoWi

; 839  :                         node_clicked = i;

  01200	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$105[rbp]
  01206	89 85 b4 01 00
	00		 mov	 DWORD PTR node_clicked$104[rbp], eax
$LN371@ShowDemoWi:

; 840  :                     if (test_drag_and_drop && ImGui::BeginDragDropSource())

  0120c	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?test_drag_and_drop@?IJ@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  01213	85 c0		 test	 eax, eax
  01215	74 33		 je	 SHORT $LN372@ShowDemoWi
  01217	33 c9		 xor	 ecx, ecx
  01219	e8 00 00 00 00	 call	 ?BeginDragDropSource@ImGui@@YA_NH@Z ; ImGui::BeginDragDropSource
  0121e	0f b6 c0	 movzx	 eax, al
  01221	85 c0		 test	 eax, eax
  01223	74 25		 je	 SHORT $LN372@ShowDemoWi

; 841  :                     {
; 842  :                         ImGui::SetDragDropPayload("_TREENODE", NULL, 0);

  01225	45 33 c9	 xor	 r9d, r9d
  01228	45 33 c0	 xor	 r8d, r8d
  0122b	33 d2		 xor	 edx, edx
  0122d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09PLFIFPJD@_TREENODE?$AA@
  01234	e8 00 00 00 00	 call	 ?SetDragDropPayload@ImGui@@YA_NPEBDPEBX_KH@Z ; ImGui::SetDragDropPayload

; 843  :                         ImGui::Text("This is a drag and drop source");

  01239	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@LHBEHNKM@This?5is?5a?5drag?5and?5drop?5source?$AA@
  01240	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 844  :                         ImGui::EndDragDropSource();

  01245	e8 00 00 00 00	 call	 ?EndDragDropSource@ImGui@@YAXXZ ; ImGui::EndDragDropSource
$LN372@ShowDemoWi:

; 845  :                     }
; 846  :                     if (node_open)

  0124a	0f b6 85 34 02
	00 00		 movzx	 eax, BYTE PTR node_open$108[rbp]
  01251	85 c0		 test	 eax, eax
  01253	74 11		 je	 SHORT $LN373@ShowDemoWi

; 847  :                     {
; 848  :                         ImGui::BulletText("Blah blah\nBlah Blah");

  01255	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@GJFAIPKG@Blah?5blah?6Blah?5Blah?$AA@
  0125c	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 849  :                         ImGui::TreePop();

  01261	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN373@ShowDemoWi:

; 850  :                     }
; 851  :                 }
; 852  :                 else

  01266	e9 98 00 00 00	 jmp	 $LN370@ShowDemoWi
$LN369@ShowDemoWi:

; 853  :                 {
; 854  :                     // Items 3..5 are Tree Leaves
; 855  :                     // The only reason we use TreeNode at all is to allow selection of the leaf. Otherwise we can
; 856  :                     // use BulletText() or advance the cursor by GetTreeNodeToLabelSpacing() and call Text().
; 857  :                     node_flags |= ImGuiTreeNodeFlags_Leaf | ImGuiTreeNodeFlags_NoTreePushOnOpen; // ImGuiTreeNodeFlags_Bullet

  0126b	8b 85 f4 01 00
	00		 mov	 eax, DWORD PTR node_flags$106[rbp]
  01271	0d 08 01 00 00	 or	 eax, 264		; 00000108H
  01276	89 85 f4 01 00
	00		 mov	 DWORD PTR node_flags$106[rbp], eax

; 858  :                     ImGui::TreeNodeEx((void*)(intptr_t)i, node_flags, "Selectable Leaf %d", i);

  0127c	48 63 85 d4 01
	00 00		 movsxd	 rax, DWORD PTR i$105[rbp]
  01283	44 8b 8d d4 01
	00 00		 mov	 r9d, DWORD PTR i$105[rbp]
  0128a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@MLABGFOG@Selectable?5Leaf?5?$CFd?$AA@
  01291	8b 95 f4 01 00
	00		 mov	 edx, DWORD PTR node_flags$106[rbp]
  01297	48 8b c8	 mov	 rcx, rax
  0129a	e8 00 00 00 00	 call	 ?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ ; ImGui::TreeNodeEx

; 859  :                     if (ImGui::IsItemClicked() && !ImGui::IsItemToggledOpen())

  0129f	33 c9		 xor	 ecx, ecx
  012a1	e8 00 00 00 00	 call	 ?IsItemClicked@ImGui@@YA_NH@Z ; ImGui::IsItemClicked
  012a6	0f b6 c0	 movzx	 eax, al
  012a9	85 c0		 test	 eax, eax
  012ab	74 18		 je	 SHORT $LN374@ShowDemoWi
  012ad	e8 00 00 00 00	 call	 ?IsItemToggledOpen@ImGui@@YA_NXZ ; ImGui::IsItemToggledOpen
  012b2	0f b6 c0	 movzx	 eax, al
  012b5	85 c0		 test	 eax, eax
  012b7	75 0c		 jne	 SHORT $LN374@ShowDemoWi

; 860  :                         node_clicked = i;

  012b9	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$105[rbp]
  012bf	89 85 b4 01 00
	00		 mov	 DWORD PTR node_clicked$104[rbp], eax
$LN374@ShowDemoWi:

; 861  :                     if (test_drag_and_drop && ImGui::BeginDragDropSource())

  012c5	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?test_drag_and_drop@?IJ@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  012cc	85 c0		 test	 eax, eax
  012ce	74 33		 je	 SHORT $LN370@ShowDemoWi
  012d0	33 c9		 xor	 ecx, ecx
  012d2	e8 00 00 00 00	 call	 ?BeginDragDropSource@ImGui@@YA_NH@Z ; ImGui::BeginDragDropSource
  012d7	0f b6 c0	 movzx	 eax, al
  012da	85 c0		 test	 eax, eax
  012dc	74 25		 je	 SHORT $LN370@ShowDemoWi

; 862  :                     {
; 863  :                         ImGui::SetDragDropPayload("_TREENODE", NULL, 0);

  012de	45 33 c9	 xor	 r9d, r9d
  012e1	45 33 c0	 xor	 r8d, r8d
  012e4	33 d2		 xor	 edx, edx
  012e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09PLFIFPJD@_TREENODE?$AA@
  012ed	e8 00 00 00 00	 call	 ?SetDragDropPayload@ImGui@@YA_NPEBDPEBX_KH@Z ; ImGui::SetDragDropPayload

; 864  :                         ImGui::Text("This is a drag and drop source");

  012f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@LHBEHNKM@This?5is?5a?5drag?5and?5drop?5source?$AA@
  012f9	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 865  :                         ImGui::EndDragDropSource();

  012fe	e8 00 00 00 00	 call	 ?EndDragDropSource@ImGui@@YAXXZ ; ImGui::EndDragDropSource
$LN370@ShowDemoWi:

; 866  :                     }
; 867  :                 }
; 868  :             }

  01303	e9 20 fe ff ff	 jmp	 $LN68@ShowDemoWi
$LN69@ShowDemoWi:

; 869  :             if (node_clicked != -1)

  01308	83 bd b4 01 00
	00 ff		 cmp	 DWORD PTR node_clicked$104[rbp], -1
  0130f	74 60		 je	 SHORT $LN376@ShowDemoWi

; 870  :             {
; 871  :                 // Update selection state
; 872  :                 // (process outside of tree loop to avoid visual inconsistencies during the clicking frame)
; 873  :                 if (ImGui::GetIO().KeyCtrl)

  01311	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  01316	0f b6 80 0c 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3596]
  0131d	85 c0		 test	 eax, eax
  0131f	74 2e		 je	 SHORT $LN377@ShowDemoWi

; 874  :                     selection_mask ^= (1 << node_clicked);          // CTRL+click to toggle

  01321	8b 85 b4 01 00
	00		 mov	 eax, DWORD PTR node_clicked$104[rbp]
  01327	b9 01 00 00 00	 mov	 ecx, 1
  0132c	89 8d 44 2b 00
	00		 mov	 DWORD PTR tv6275[rbp], ecx
  01332	0f b6 c8	 movzx	 ecx, al
  01335	8b 85 44 2b 00
	00		 mov	 eax, DWORD PTR tv6275[rbp]
  0133b	d3 e0		 shl	 eax, cl
  0133d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?selection_mask@?IJ@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01343	33 c8		 xor	 ecx, eax
  01345	8b c1		 mov	 eax, ecx
  01347	89 05 00 00 00
	00		 mov	 DWORD PTR ?selection_mask@?IJ@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax

; 875  :                 else //if (!(selection_mask & (1 << node_clicked))) // Depending on selection behavior you want, may want to preserve selection when clicking on item that is part of the selection

  0134d	eb 22		 jmp	 SHORT $LN376@ShowDemoWi
$LN377@ShowDemoWi:

; 876  :                     selection_mask = (1 << node_clicked);           // Click to single-select

  0134f	8b 85 b4 01 00
	00		 mov	 eax, DWORD PTR node_clicked$104[rbp]
  01355	b9 01 00 00 00	 mov	 ecx, 1
  0135a	89 8d 44 2b 00
	00		 mov	 DWORD PTR tv6279[rbp], ecx
  01360	0f b6 c8	 movzx	 ecx, al
  01363	8b 85 44 2b 00
	00		 mov	 eax, DWORD PTR tv6279[rbp]
  01369	d3 e0		 shl	 eax, cl
  0136b	89 05 00 00 00
	00		 mov	 DWORD PTR ?selection_mask@?IJ@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN376@ShowDemoWi:

; 877  :             }
; 878  :             if (align_label_with_current_x_position)

  01371	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?align_label_with_current_x_position@?IJ@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  01378	85 c0		 test	 eax, eax
  0137a	74 0a		 je	 SHORT $LN379@ShowDemoWi

; 879  :                 ImGui::Indent(ImGui::GetTreeNodeToLabelSpacing());

  0137c	e8 00 00 00 00	 call	 ?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ ; ImGui::GetTreeNodeToLabelSpacing
  01381	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent
$LN379@ShowDemoWi:

; 880  :             ImGui::TreePop();

  01386	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN366@ShowDemoWi:

; 881  :         }
; 882  :         ImGui::TreePop();

  0138b	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN73@ShowDemoWi:

; 883  :     }
; 884  : 
; 885  :     IMGUI_DEMO_MARKER("Widgets/Collapsing Headers");

  01390	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  01398	74 28		 je	 SHORT $LN380@ShowDemoWi
  0139a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  013a0	05 52 01 00 00	 add	 eax, 338		; 00000152H
  013a5	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  013ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BL@HBCHPPAB@Widgets?1Collapsing?5Headers?$AA@
  013b3	8b d0		 mov	 edx, eax
  013b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  013bc	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN380@ShowDemoWi:
  013c2	33 c0		 xor	 eax, eax
  013c4	85 c0		 test	 eax, eax
  013c6	75 c8		 jne	 SHORT $LN73@ShowDemoWi

; 886  :     if (ImGui::TreeNode("Collapsing Headers"))

  013c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@GBPHDMGC@Collapsing?5Headers?$AA@
  013cf	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  013d4	0f b6 c0	 movzx	 eax, al
  013d7	85 c0		 test	 eax, eax
  013d9	0f 84 e8 00 00
	00		 je	 $LN82@ShowDemoWi

; 887  :     {
; 888  :         static bool closable_group = true;
; 889  :         ImGui::Checkbox("Show 2nd header", &closable_group);

  013df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?closable_group@?LA@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  013e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JOCPBPDO@Show?52nd?5header?$AA@
  013ed	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 890  :         if (ImGui::CollapsingHeader("Header", ImGuiTreeNodeFlags_None))

  013f2	33 d2		 xor	 edx, edx
  013f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OENKJGA@Header?$AA@
  013fb	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPEBDH@Z ; ImGui::CollapsingHeader
  01400	0f b6 c0	 movzx	 eax, al
  01403	85 c0		 test	 eax, eax
  01405	74 4f		 je	 SHORT $LN382@ShowDemoWi

; 891  :         {
; 892  :             ImGui::Text("IsItemHovered: %d", ImGui::IsItemHovered());

  01407	33 c9		 xor	 ecx, ecx
  01409	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  0140e	0f b6 c0	 movzx	 eax, al
  01411	8b d0		 mov	 edx, eax
  01413	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@BLAKNONB@IsItemHovered?3?5?$CFd?$AA@
  0141a	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 893  :             for (int i = 0; i < 5; i++)

  0141f	c7 85 54 02 00
	00 00 00 00 00	 mov	 DWORD PTR i$109[rbp], 0
  01429	eb 0e		 jmp	 SHORT $LN76@ShowDemoWi
$LN74@ShowDemoWi:
  0142b	8b 85 54 02 00
	00		 mov	 eax, DWORD PTR i$109[rbp]
  01431	ff c0		 inc	 eax
  01433	89 85 54 02 00
	00		 mov	 DWORD PTR i$109[rbp], eax
$LN76@ShowDemoWi:
  01439	83 bd 54 02 00
	00 05		 cmp	 DWORD PTR i$109[rbp], 5
  01440	7d 14		 jge	 SHORT $LN382@ShowDemoWi

; 894  :                 ImGui::Text("Some content %d", i);

  01442	8b 95 54 02 00
	00		 mov	 edx, DWORD PTR i$109[rbp]
  01448	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@PJMPKHOM@Some?5content?5?$CFd?$AA@
  0144f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  01454	eb d5		 jmp	 SHORT $LN74@ShowDemoWi
$LN382@ShowDemoWi:

; 895  :         }
; 896  :         if (ImGui::CollapsingHeader("Header with a close button", &closable_group))

  01456	45 33 c0	 xor	 r8d, r8d
  01459	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?closable_group@?LA@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  01460	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@IHHHIKPE@Header?5with?5a?5close?5button?$AA@
  01467	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::CollapsingHeader
  0146c	0f b6 c0	 movzx	 eax, al
  0146f	85 c0		 test	 eax, eax
  01471	74 4f		 je	 SHORT $LN383@ShowDemoWi

; 897  :         {
; 898  :             ImGui::Text("IsItemHovered: %d", ImGui::IsItemHovered());

  01473	33 c9		 xor	 ecx, ecx
  01475	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  0147a	0f b6 c0	 movzx	 eax, al
  0147d	8b d0		 mov	 edx, eax
  0147f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@BLAKNONB@IsItemHovered?3?5?$CFd?$AA@
  01486	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 899  :             for (int i = 0; i < 5; i++)

  0148b	c7 85 74 02 00
	00 00 00 00 00	 mov	 DWORD PTR i$110[rbp], 0
  01495	eb 0e		 jmp	 SHORT $LN79@ShowDemoWi
$LN77@ShowDemoWi:
  01497	8b 85 74 02 00
	00		 mov	 eax, DWORD PTR i$110[rbp]
  0149d	ff c0		 inc	 eax
  0149f	89 85 74 02 00
	00		 mov	 DWORD PTR i$110[rbp], eax
$LN79@ShowDemoWi:
  014a5	83 bd 74 02 00
	00 05		 cmp	 DWORD PTR i$110[rbp], 5
  014ac	7d 14		 jge	 SHORT $LN383@ShowDemoWi

; 900  :                 ImGui::Text("More content %d", i);

  014ae	8b 95 74 02 00
	00		 mov	 edx, DWORD PTR i$110[rbp]
  014b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@PEMOHED@More?5content?5?$CFd?$AA@
  014bb	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  014c0	eb d5		 jmp	 SHORT $LN77@ShowDemoWi
$LN383@ShowDemoWi:

; 901  :         }
; 902  :         /*
; 903  :         if (ImGui::CollapsingHeader("Header with a bullet", ImGuiTreeNodeFlags_Bullet))
; 904  :             ImGui::Text("IsItemHovered: %d", ImGui::IsItemHovered());
; 905  :         */
; 906  :         ImGui::TreePop();

  014c2	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN82@ShowDemoWi:

; 907  :     }
; 908  : 
; 909  :     IMGUI_DEMO_MARKER("Widgets/Bullets");

  014c7	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  014cf	74 28		 je	 SHORT $LN384@ShowDemoWi
  014d1	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  014d7	05 6a 01 00 00	 add	 eax, 362		; 0000016aH
  014dc	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  014e3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@OHGLMBHK@Widgets?1Bullets?$AA@
  014ea	8b d0		 mov	 edx, eax
  014ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  014f3	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN384@ShowDemoWi:
  014f9	33 c0		 xor	 eax, eax
  014fb	85 c0		 test	 eax, eax
  014fd	75 c8		 jne	 SHORT $LN82@ShowDemoWi

; 910  :     if (ImGui::TreeNode("Bullets"))

  014ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DHNDKCGP@Bullets?$AA@
  01506	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  0150b	0f b6 c0	 movzx	 eax, al
  0150e	85 c0		 test	 eax, eax
  01510	74 63		 je	 SHORT $LN85@ShowDemoWi

; 911  :     {
; 912  :         ImGui::BulletText("Bullet point 1");

  01512	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@DEGHIHA@Bullet?5point?51?$AA@
  01519	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 913  :         ImGui::BulletText("Bullet point 2\nOn multiple lines");

  0151e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@LFMFDEHN@Bullet?5point?52?6On?5multiple?5lines@
  01525	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 914  :         if (ImGui::TreeNode("Tree node"))

  0152a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09CGOFEACE@Tree?5node?$AA@
  01531	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  01536	0f b6 c0	 movzx	 eax, al
  01539	85 c0		 test	 eax, eax
  0153b	74 11		 je	 SHORT $LN386@ShowDemoWi

; 915  :         {
; 916  :             ImGui::BulletText("Another bullet point");

  0153d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@FBMIEPNI@Another?5bullet?5point?$AA@
  01544	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 917  :             ImGui::TreePop();

  01549	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN386@ShowDemoWi:

; 918  :         }
; 919  :         ImGui::Bullet(); ImGui::Text("Bullet point 3 (two calls)");

  0154e	e8 00 00 00 00	 call	 ?Bullet@ImGui@@YAXXZ	; ImGui::Bullet
  01553	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@OAFINJBP@Bullet?5point?53?5?$CItwo?5calls?$CJ?$AA@
  0155a	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 920  :         ImGui::Bullet(); ImGui::SmallButton("Button");

  0155f	e8 00 00 00 00	 call	 ?Bullet@ImGui@@YAXXZ	; ImGui::Bullet
  01564	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06LKBCGDFD@Button?$AA@
  0156b	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton

; 921  :         ImGui::TreePop();

  01570	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN85@ShowDemoWi:

; 922  :     }
; 923  : 
; 924  :     IMGUI_DEMO_MARKER("Widgets/Text");

  01575	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0157d	74 28		 je	 SHORT $LN387@ShowDemoWi
  0157f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  01585	05 79 01 00 00	 add	 eax, 377		; 00000179H
  0158a	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  01591	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@CHPBOJIK@Widgets?1Text?$AA@
  01598	8b d0		 mov	 edx, eax
  0159a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  015a1	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN387@ShowDemoWi:
  015a7	33 c0		 xor	 eax, eax
  015a9	85 c0		 test	 eax, eax
  015ab	75 c8		 jne	 SHORT $LN85@ShowDemoWi

; 925  :     if (ImGui::TreeNode("Text"))

  015ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04OJAHODMC@Text?$AA@
  015b4	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  015b9	0f b6 c0	 movzx	 eax, al
  015bc	85 c0		 test	 eax, eax
  015be	0f 84 d2 03 00
	00		 je	 $LN100@ShowDemoWi
$LN88@ShowDemoWi:

; 926  :     {
; 927  :         IMGUI_DEMO_MARKER("Widgets/Text/Colored Text");

  015c4	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  015cc	74 28		 je	 SHORT $LN389@ShowDemoWi
  015ce	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  015d4	05 7c 01 00 00	 add	 eax, 380		; 0000017cH
  015d9	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  015e0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BK@PPEHIABB@Widgets?1Text?1Colored?5Text?$AA@
  015e7	8b d0		 mov	 edx, eax
  015e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  015f0	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN389@ShowDemoWi:
  015f6	33 c0		 xor	 eax, eax
  015f8	85 c0		 test	 eax, eax
  015fa	75 c8		 jne	 SHORT $LN88@ShowDemoWi

; 928  :         if (ImGui::TreeNode("Colorful Text"))

  015fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@HGHOOCPG@Colorful?5Text?$AA@
  01603	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  01608	0f b6 c0	 movzx	 eax, al
  0160b	85 c0		 test	 eax, eax
  0160d	0f 84 a5 00 00
	00		 je	 $LN91@ShowDemoWi

; 929  :         {
; 930  :             // Using shortcut. You can use PushStyleColor()/PopStyleColor() for more flexibility.
; 931  :             ImGui::TextColored(ImVec4(1.0f, 0.0f, 1.0f, 1.0f), "Pink");

  01613	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0161b	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01621	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  01629	0f 57 d2	 xorps	 xmm2, xmm2
  0162c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  01634	48 8d 8d a4 20
	00 00		 lea	 rcx, QWORD PTR $T275[rbp]
  0163b	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  01640	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04IDKACLOG@Pink?$AA@
  01647	48 8b c8	 mov	 rcx, rax
  0164a	e8 00 00 00 00	 call	 ?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ ; ImGui::TextColored

; 932  :             ImGui::TextColored(ImVec4(1.0f, 1.0f, 0.0f, 1.0f), "Yellow");

  0164f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01657	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0165d	0f 57 db	 xorps	 xmm3, xmm3
  01660	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  01668	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  01670	48 8d 8d d4 20
	00 00		 lea	 rcx, QWORD PTR $T276[rbp]
  01677	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0167c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06ICCAKDNH@Yellow?$AA@
  01683	48 8b c8	 mov	 rcx, rax
  01686	e8 00 00 00 00	 call	 ?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ ; ImGui::TextColored

; 933  :             ImGui::TextDisabled("Disabled");

  0168b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08JGILNPHN@Disabled?$AA@
  01692	e8 00 00 00 00	 call	 ?TextDisabled@ImGui@@YAXPEBDZZ ; ImGui::TextDisabled

; 934  :             ImGui::SameLine(); HelpMarker("The TextDisabled color is stored in ImGuiStyle.");

  01697	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0169f	0f 57 c0	 xorps	 xmm0, xmm0
  016a2	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  016a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DA@EPJPAHDI@The?5TextDisabled?5color?5is?5stored@
  016ae	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 935  :             ImGui::TreePop();

  016b3	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN91@ShowDemoWi:

; 936  :         }
; 937  : 
; 938  :         IMGUI_DEMO_MARKER("Widgets/Text/Word Wrapping");

  016b8	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  016c0	74 28		 je	 SHORT $LN391@ShowDemoWi
  016c2	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  016c8	05 87 01 00 00	 add	 eax, 391		; 00000187H
  016cd	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  016d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BL@NBECCBAN@Widgets?1Text?1Word?5Wrapping?$AA@
  016db	8b d0		 mov	 edx, eax
  016dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  016e4	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN391@ShowDemoWi:
  016ea	33 c0		 xor	 eax, eax
  016ec	85 c0		 test	 eax, eax
  016ee	75 c8		 jne	 SHORT $LN91@ShowDemoWi

; 939  :         if (ImGui::TreeNode("Word Wrapping"))

  016f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@CLIMKCMB@Word?5Wrapping?$AA@
  016f7	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  016fc	0f b6 c0	 movzx	 eax, al
  016ff	85 c0		 test	 eax, eax
  01701	0f 84 e8 01 00
	00		 je	 $LN97@ShowDemoWi

; 940  :         {
; 941  :             // Using shortcut. You can use PushTextWrapPos()/PopTextWrapPos() for more flexibility.
; 942  :             ImGui::TextWrapped(

  01707	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0LE@LBABKNFA@This?5text?5should?5automatically?5w@
  0170e	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped

; 943  :                 "This text should automatically wrap on the edge of the window. The current implementation "
; 944  :                 "for text wrapping follows simple rules suitable for English and possibly other languages.");
; 945  :             ImGui::Spacing();

  01713	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 946  : 
; 947  :             static float wrap_width = 200.0f;
; 948  :             ImGui::SliderFloat("Wrap width", &wrap_width, -20, 600, "%.0f");

  01718	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  01720	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  01727	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0172c	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@44160000
  01734	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@c1a00000
  0173c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?wrap_width@?NH@??ShowDemoWindowWidgets@@YAXXZ@4MA
  01743	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@NHCJIHMI@Wrap?5width?$AA@
  0174a	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 949  : 
; 950  :             ImDrawList* draw_list = ImGui::GetWindowDrawList();

  0174f	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPEAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  01754	48 89 85 98 02
	00 00		 mov	 QWORD PTR draw_list$111[rbp], rax

; 951  :             for (int n = 0; n < 2; n++)

  0175b	c7 85 b4 02 00
	00 00 00 00 00	 mov	 DWORD PTR n$112[rbp], 0
  01765	eb 0e		 jmp	 SHORT $LN94@ShowDemoWi
$LN92@ShowDemoWi:
  01767	8b 85 b4 02 00
	00		 mov	 eax, DWORD PTR n$112[rbp]
  0176d	ff c0		 inc	 eax
  0176f	89 85 b4 02 00
	00		 mov	 DWORD PTR n$112[rbp], eax
$LN94@ShowDemoWi:
  01775	83 bd b4 02 00
	00 02		 cmp	 DWORD PTR n$112[rbp], 2
  0177c	0f 8d 68 01 00
	00		 jge	 $LN93@ShowDemoWi

; 952  :             {
; 953  :                 ImGui::Text("Test paragraph %d:", n);

  01782	8b 95 b4 02 00
	00		 mov	 edx, DWORD PTR n$112[rbp]
  01788	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@IAMDDDPD@Test?5paragraph?5?$CFd?3?$AA@
  0178f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 954  :                 ImVec2 pos = ImGui::GetCursorScreenPos();

  01794	48 8d 8d d8 02
	00 00		 lea	 rcx, QWORD PTR pos$113[rbp]
  0179b	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos

; 955  :                 ImVec2 marker_min = ImVec2(pos.x + wrap_width, pos.y);

  017a0	f3 0f 10 85 d8
	02 00 00	 movss	 xmm0, DWORD PTR pos$113[rbp]
  017a8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?wrap_width@?NH@??ShowDemoWindowWidgets@@YAXXZ@4MA
  017b0	f3 0f 10 95 dc
	02 00 00	 movss	 xmm2, DWORD PTR pos$113[rbp+4]
  017b8	0f 28 c8	 movaps	 xmm1, xmm0
  017bb	48 8d 8d f8 02
	00 00		 lea	 rcx, QWORD PTR marker_min$114[rbp]
  017c2	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 956  :                 ImVec2 marker_max = ImVec2(pos.x + wrap_width + 10, pos.y + ImGui::GetTextLineHeight());

  017c7	e8 00 00 00 00	 call	 ?GetTextLineHeight@ImGui@@YAMXZ ; ImGui::GetTextLineHeight
  017cc	f3 0f 10 8d dc
	02 00 00	 movss	 xmm1, DWORD PTR pos$113[rbp+4]
  017d4	f3 0f 58 c8	 addss	 xmm1, xmm0
  017d8	0f 28 c1	 movaps	 xmm0, xmm1
  017db	f3 0f 10 8d d8
	02 00 00	 movss	 xmm1, DWORD PTR pos$113[rbp]
  017e3	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?wrap_width@?NH@??ShowDemoWindowWidgets@@YAXXZ@4MA
  017eb	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@41200000
  017f3	0f 28 d0	 movaps	 xmm2, xmm0
  017f6	48 8d 8d 18 03
	00 00		 lea	 rcx, QWORD PTR marker_max$115[rbp]
  017fd	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 957  :                 ImGui::PushTextWrapPos(ImGui::GetCursorPos().x + wrap_width);

  01802	48 8d 8d 04 21
	00 00		 lea	 rcx, QWORD PTR $T277[rbp]
  01809	e8 00 00 00 00	 call	 ?GetCursorPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorPos
  0180e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  01812	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?wrap_width@?NH@??ShowDemoWindowWidgets@@YAXXZ@4MA
  0181a	e8 00 00 00 00	 call	 ?PushTextWrapPos@ImGui@@YAXM@Z ; ImGui::PushTextWrapPos

; 958  :                 if (n == 0)

  0181f	83 bd b4 02 00
	00 00		 cmp	 DWORD PTR n$112[rbp], 0
  01826	75 1e		 jne	 SHORT $LN393@ShowDemoWi

; 959  :                     ImGui::Text("The lazy dog is a good dog. This paragraph should fit within %.0f pixels. Testing a 1 character word. The quick brown fox jumps over the lazy dog.", wrap_width);

  01828	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?wrap_width@?NH@??ShowDemoWindowWidgets@@YAXXZ@4MA
  01830	0f 28 c8	 movaps	 xmm1, xmm0
  01833	66 48 0f 7e ca	 movq	 rdx, xmm1
  01838	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0JD@HKNKABEJ@The?5lazy?5dog?5is?5a?5good?5dog?4?5This@
  0183f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 960  :                 else

  01844	eb 0c		 jmp	 SHORT $LN394@ShowDemoWi
$LN393@ShowDemoWi:

; 961  :                     ImGui::Text("aaaaaaaa bbbbbbbb, c cccccccc,dddddddd. d eeeeeeee   ffffffff. gggggggg!hhhhhhhh");

  01846	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FB@BGHPBDIA@aaaaaaaa?5bbbbbbbb?0?5c?5cccccccc?0dd@
  0184d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN394@ShowDemoWi:

; 962  : 
; 963  :                 // Draw actual text bounding box, following by marker of our expected limit (should not overlap!)
; 964  :                 draw_list->AddRect(ImGui::GetItemRectMin(), ImGui::GetItemRectMax(), IM_COL32(255, 255, 0, 255));

  01852	48 8d 8d 24 21
	00 00		 lea	 rcx, QWORD PTR $T278[rbp]
  01859	e8 00 00 00 00	 call	 ?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMax
  0185e	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv1056[rbp], rax
  01865	48 8d 8d 44 21
	00 00		 lea	 rcx, QWORD PTR $T279[rbp]
  0186c	e8 00 00 00 00	 call	 ?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMin
  01871	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01879	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  0187f	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  01887	0f 57 c0	 xorps	 xmm0, xmm0
  0188a	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01890	41 b9 ff ff 00
	ff		 mov	 r9d, -16711681		; ff00ffffH
  01896	48 8b 8d 48 2b
	00 00		 mov	 rcx, QWORD PTR tv1056[rbp]
  0189d	4c 8b c1	 mov	 r8, rcx
  018a0	48 8b d0	 mov	 rdx, rax
  018a3	48 8b 8d 98 02
	00 00		 mov	 rcx, QWORD PTR draw_list$111[rbp]
  018aa	e8 00 00 00 00	 call	 ?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z ; ImDrawList::AddRect

; 965  :                 draw_list->AddRectFilled(marker_min, marker_max, IM_COL32(255, 0, 255, 255));

  018af	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  018b7	0f 57 c0	 xorps	 xmm0, xmm0
  018ba	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  018c0	41 b9 ff 00 ff
	ff		 mov	 r9d, -65281		; ffff00ffH
  018c6	4c 8d 85 18 03
	00 00		 lea	 r8, QWORD PTR marker_max$115[rbp]
  018cd	48 8d 95 f8 02
	00 00		 lea	 rdx, QWORD PTR marker_min$114[rbp]
  018d4	48 8b 8d 98 02
	00 00		 mov	 rcx, QWORD PTR draw_list$111[rbp]
  018db	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled

; 966  :                 ImGui::PopTextWrapPos();

  018e0	e8 00 00 00 00	 call	 ?PopTextWrapPos@ImGui@@YAXXZ ; ImGui::PopTextWrapPos

; 967  :             }

  018e5	e9 7d fe ff ff	 jmp	 $LN92@ShowDemoWi
$LN93@ShowDemoWi:

; 968  : 
; 969  :             ImGui::TreePop();

  018ea	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN97@ShowDemoWi:

; 970  :         }
; 971  : 
; 972  :         IMGUI_DEMO_MARKER("Widgets/Text/UTF-8 Text");

  018ef	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  018f7	74 28		 je	 SHORT $LN395@ShowDemoWi
  018f9	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  018ff	05 a9 01 00 00	 add	 eax, 425		; 000001a9H
  01904	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0190b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BI@HMDFOMMC@Widgets?1Text?1UTF?98?5Text?$AA@
  01912	8b d0		 mov	 edx, eax
  01914	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0191b	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN395@ShowDemoWi:
  01921	33 c0		 xor	 eax, eax
  01923	85 c0		 test	 eax, eax
  01925	75 c8		 jne	 SHORT $LN97@ShowDemoWi

; 973  :         if (ImGui::TreeNode("UTF-8 Text"))

  01927	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@KOGPBBGO@UTF?98?5Text?$AA@
  0192e	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  01933	0f b6 c0	 movzx	 eax, al
  01936	85 c0		 test	 eax, eax
  01938	74 57		 je	 SHORT $LN396@ShowDemoWi

; 974  :         {
; 975  :             // UTF-8 test with Japanese characters
; 976  :             // (Needs a suitable font? Try "Google Noto" or "Arial Unicode". See docs/FONTS.md for details.)
; 977  :             // - From C++11 you can use the u8"my text" syntax to encode literal strings as UTF-8
; 978  :             // - For earlier compiler, you may be able to encode your sources as UTF-8 (e.g. in Visual Studio, you
; 979  :             //   can save your source files as 'UTF-8 without signature').
; 980  :             // - FOR THIS DEMO FILE ONLY, BECAUSE WE WANT TO SUPPORT OLD COMPILERS, WE ARE *NOT* INCLUDING RAW UTF-8
; 981  :             //   CHARACTERS IN THIS SOURCE FILE. Instead we are encoding a few strings with hexadecimal constants.
; 982  :             //   Don't do this in your application! Please use u8"text in any language" in your application!
; 983  :             // Note that characters values are preserved even by InputText() if the font cannot be displayed,
; 984  :             // so you can safely copy & paste garbled characters into another application.
; 985  :             ImGui::TextWrapped(

  0193a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0MJ@DIENCCGD@CJK?5text?5will?5only?5appear?5if?5the@
  01941	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped

; 986  :                 "CJK text will only appear if the font was loaded with the appropriate CJK character ranges. "
; 987  :                 "Call io.Fonts->AddFontFromFileTTF() manually to load extra character ranges. "
; 988  :                 "Read docs/FONTS.md for details.");
; 989  :             ImGui::Text("Hiragana: \xe3\x81\x8b\xe3\x81\x8d\xe3\x81\x8f\xe3\x81\x91\xe3\x81\x93 (kakikukeko)"); // Normally we would use u8"blah blah" with the proper characters directly in the string.

  01946	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CH@EHCMNMLI@Hiragana?3?5?c?$IB?$IL?c?$IB?$IN?c?$IB?$IP?c?$IB?$JB?c?$IB?$JD?5?$CIkakik@
  0194d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 990  :             ImGui::Text("Kanjis: \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e (nihongo)");

  01952	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@BCACPCEP@Kanjis?3?5?f?$JH?$KF?f?$JM?$KM?h?$KK?$JO?5?$CInihongo?$CJ?$AA@
  01959	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 991  :             static char buf[32] = "\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e";
; 992  :             //static char buf[32] = u8"NIHONGO"; // <- this is how you would write it with C++11, using real kanjis
; 993  :             ImGui::InputText("UTF-8 input", buf, IM_ARRAYSIZE(buf));

  0195e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  01967	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  01970	45 33 c9	 xor	 r9d, r9d
  01973	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  01979	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf@?OD@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  01980	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@OKLFPIAG@UTF?98?5input?$AA@
  01987	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 994  :             ImGui::TreePop();

  0198c	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN396@ShowDemoWi:

; 995  :         }
; 996  :         ImGui::TreePop();

  01991	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN100@ShowDemoWi:

; 997  :     }
; 998  : 
; 999  :     IMGUI_DEMO_MARKER("Widgets/Images");

  01996	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0199e	74 28		 je	 SHORT $LN397@ShowDemoWi
  019a0	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  019a6	05 c4 01 00 00	 add	 eax, 452		; 000001c4H
  019ab	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  019b2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@JHLCFMPD@Widgets?1Images?$AA@
  019b9	8b d0		 mov	 edx, eax
  019bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  019c2	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN397@ShowDemoWi:
  019c8	33 c0		 xor	 eax, eax
  019ca	85 c0		 test	 eax, eax
  019cc	75 c8		 jne	 SHORT $LN100@ShowDemoWi

; 1000 :     if (ImGui::TreeNode("Images"))

  019ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06EPMHLOBG@Images?$AA@
  019d5	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  019da	0f b6 c0	 movzx	 eax, al
  019dd	85 c0		 test	 eax, eax
  019df	0f 84 00 06 00
	00		 je	 $LN109@ShowDemoWi

; 1001 :     {
; 1002 :         ImGuiIO& io = ImGui::GetIO();

  019e5	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  019ea	48 89 85 38 03
	00 00		 mov	 QWORD PTR io$116[rbp], rax

; 1003 :         ImGui::TextWrapped(

  019f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0OJ@IGJPGIOP@Below?5we?5are?5displaying?5the?5font@
  019f8	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped

; 1004 :             "Below we are displaying the font texture (which is the only texture we have access to in this demo). "
; 1005 :             "Use the 'ImTextureID' type as storage to pass pointers or identifier to your own texture data. "
; 1006 :             "Hover the texture for a zoomed view!");
; 1007 : 
; 1008 :         // Below we are displaying the font texture because it is the only texture we have access to inside the demo!
; 1009 :         // Remember that ImTextureID is just storage for whatever you want it to be. It is essentially a value that
; 1010 :         // will be passed to the rendering backend via the ImDrawCmd structure.
; 1011 :         // If you use one of the default imgui_impl_XXXX.cpp rendering backend, they all have comments at the top
; 1012 :         // of their respective source file to specify what they expect to be stored in ImTextureID, for example:
; 1013 :         // - The imgui_impl_dx11.cpp renderer expect a 'ID3D11ShaderResourceView*' pointer
; 1014 :         // - The imgui_impl_opengl3.cpp renderer expect a GLuint OpenGL texture identifier, etc.
; 1015 :         // More:
; 1016 :         // - If you decided that ImTextureID = MyEngineTexture*, then you can pass your MyEngineTexture* pointers
; 1017 :         //   to ImGui::Image(), and gather width/height through your own functions, etc.
; 1018 :         // - You can use ShowMetricsWindow() to inspect the draw data that are being passed to your renderer,
; 1019 :         //   it will help you debug issues if you are confused about it.
; 1020 :         // - Consider using the lower-level ImDrawList::AddImage() API, via ImGui::GetWindowDrawList()->AddImage().
; 1021 :         // - Read https://github.com/ocornut/imgui/blob/master/docs/FAQ.md
; 1022 :         // - Read https://github.com/ocornut/imgui/wiki/Image-Loading-and-Displaying-Examples
; 1023 :         ImTextureID my_tex_id = io.Fonts->TexID;

  019fd	48 8b 85 38 03
	00 00		 mov	 rax, QWORD PTR io$116[rbp]
  01a04	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  01a08	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  01a0c	48 89 85 58 03
	00 00		 mov	 QWORD PTR my_tex_id$117[rbp], rax

; 1024 :         float my_tex_w = (float)io.Fonts->TexWidth;

  01a13	48 8b 85 38 03
	00 00		 mov	 rax, QWORD PTR io$116[rbp]
  01a1a	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  01a1e	f3 0f 2a 40 40	 cvtsi2ss xmm0, DWORD PTR [rax+64]
  01a23	f3 0f 11 85 74
	03 00 00	 movss	 DWORD PTR my_tex_w$118[rbp], xmm0

; 1025 :         float my_tex_h = (float)io.Fonts->TexHeight;

  01a2b	48 8b 85 38 03
	00 00		 mov	 rax, QWORD PTR io$116[rbp]
  01a32	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  01a36	f3 0f 2a 40 44	 cvtsi2ss xmm0, DWORD PTR [rax+68]
  01a3b	f3 0f 11 85 94
	03 00 00	 movss	 DWORD PTR my_tex_h$119[rbp], xmm0

; 1026 :         {
; 1027 :             ImGui::Text("%.0fx%.0f", my_tex_w, my_tex_h);

  01a43	f3 0f 5a 85 94
	03 00 00	 cvtss2sd xmm0, DWORD PTR my_tex_h$119[rbp]
  01a4b	f3 0f 5a 8d 74
	03 00 00	 cvtss2sd xmm1, DWORD PTR my_tex_w$118[rbp]
  01a53	0f 28 d0	 movaps	 xmm2, xmm0
  01a56	66 49 0f 7e d0	 movq	 r8, xmm2
  01a5b	66 48 0f 7e ca	 movq	 rdx, xmm1
  01a60	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09CLOIPCOK@?$CF?40fx?$CF?40f?$AA@
  01a67	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1028 :             ImVec2 pos = ImGui::GetCursorScreenPos();

  01a6c	48 8d 8d b8 03
	00 00		 lea	 rcx, QWORD PTR pos$120[rbp]
  01a73	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos

; 1029 :             ImVec2 uv_min = ImVec2(0.0f, 0.0f);                 // Top-left

  01a78	0f 57 d2	 xorps	 xmm2, xmm2
  01a7b	0f 57 c9	 xorps	 xmm1, xmm1
  01a7e	48 8d 8d d8 03
	00 00		 lea	 rcx, QWORD PTR uv_min$121[rbp]
  01a85	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 1030 :             ImVec2 uv_max = ImVec2(1.0f, 1.0f);                 // Lower-right

  01a8a	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  01a92	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  01a9a	48 8d 8d f8 03
	00 00		 lea	 rcx, QWORD PTR uv_max$122[rbp]
  01aa1	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 1031 :             ImVec4 tint_col = ImVec4(1.0f, 1.0f, 1.0f, 1.0f);   // No tint

  01aa6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01aae	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01ab4	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  01abc	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  01ac4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  01acc	48 8d 8d 18 04
	00 00		 lea	 rcx, QWORD PTR tint_col$123[rbp]
  01ad3	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4

; 1032 :             ImVec4 border_col = ImVec4(1.0f, 1.0f, 1.0f, 0.5f); // 50% opaque white

  01ad8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  01ae0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01ae6	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  01aee	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  01af6	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  01afe	48 8d 8d 48 04
	00 00		 lea	 rcx, QWORD PTR border_col$124[rbp]
  01b05	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4

; 1033 :             ImGui::Image(my_tex_id, ImVec2(my_tex_w, my_tex_h), uv_min, uv_max, tint_col, border_col);

  01b0a	f3 0f 10 95 94
	03 00 00	 movss	 xmm2, DWORD PTR my_tex_h$119[rbp]
  01b12	f3 0f 10 8d 74
	03 00 00	 movss	 xmm1, DWORD PTR my_tex_w$118[rbp]
  01b1a	48 8d 8d 64 21
	00 00		 lea	 rcx, QWORD PTR $T280[rbp]
  01b21	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01b26	48 8d 8d 48 04
	00 00		 lea	 rcx, QWORD PTR border_col$124[rbp]
  01b2d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01b32	48 8d 8d 18 04
	00 00		 lea	 rcx, QWORD PTR tint_col$123[rbp]
  01b39	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  01b3e	4c 8d 8d f8 03
	00 00		 lea	 r9, QWORD PTR uv_max$122[rbp]
  01b45	4c 8d 85 d8 03
	00 00		 lea	 r8, QWORD PTR uv_min$121[rbp]
  01b4c	48 8b d0	 mov	 rdx, rax
  01b4f	48 8b 8d 58 03
	00 00		 mov	 rcx, QWORD PTR my_tex_id$117[rbp]
  01b56	e8 00 00 00 00	 call	 ?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z ; ImGui::Image

; 1034 :             if (ImGui::IsItemHovered())

  01b5b	33 c9		 xor	 ecx, ecx
  01b5d	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  01b62	0f b6 c0	 movzx	 eax, al
  01b65	85 c0		 test	 eax, eax
  01b67	0f 84 68 02 00
	00		 je	 $LN103@ShowDemoWi

; 1035 :             {
; 1036 :                 ImGui::BeginTooltip();

  01b6d	e8 00 00 00 00	 call	 ?BeginTooltip@ImGui@@YAXXZ ; ImGui::BeginTooltip

; 1037 :                 float region_sz = 32.0f;

  01b72	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42000000
  01b7a	f3 0f 11 85 74
	04 00 00	 movss	 DWORD PTR region_sz$125[rbp], xmm0

; 1038 :                 float region_x = io.MousePos.x - pos.x - region_sz * 0.5f;

  01b82	48 8b 85 38 03
	00 00		 mov	 rax, QWORD PTR io$116[rbp]
  01b89	f3 0f 10 80 f4
	0d 00 00	 movss	 xmm0, DWORD PTR [rax+3572]
  01b91	f3 0f 5c 85 b8
	03 00 00	 subss	 xmm0, DWORD PTR pos$120[rbp]
  01b99	f3 0f 10 8d 74
	04 00 00	 movss	 xmm1, DWORD PTR region_sz$125[rbp]
  01ba1	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  01ba9	f3 0f 5c c1	 subss	 xmm0, xmm1
  01bad	f3 0f 11 85 94
	04 00 00	 movss	 DWORD PTR region_x$126[rbp], xmm0

; 1039 :                 float region_y = io.MousePos.y - pos.y - region_sz * 0.5f;

  01bb5	48 8b 85 38 03
	00 00		 mov	 rax, QWORD PTR io$116[rbp]
  01bbc	f3 0f 10 80 f8
	0d 00 00	 movss	 xmm0, DWORD PTR [rax+3576]
  01bc4	f3 0f 5c 85 bc
	03 00 00	 subss	 xmm0, DWORD PTR pos$120[rbp+4]
  01bcc	f3 0f 10 8d 74
	04 00 00	 movss	 xmm1, DWORD PTR region_sz$125[rbp]
  01bd4	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  01bdc	f3 0f 5c c1	 subss	 xmm0, xmm1
  01be0	f3 0f 11 85 b4
	04 00 00	 movss	 DWORD PTR region_y$127[rbp], xmm0

; 1040 :                 float zoom = 4.0f;

  01be8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  01bf0	f3 0f 11 85 d4
	04 00 00	 movss	 DWORD PTR zoom$128[rbp], xmm0

; 1041 :                 if (region_x < 0.0f) { region_x = 0.0f; }

  01bf8	0f 57 c0	 xorps	 xmm0, xmm0
  01bfb	0f 2f 85 94 04
	00 00		 comiss	 xmm0, DWORD PTR region_x$126[rbp]
  01c02	76 0d		 jbe	 SHORT $LN400@ShowDemoWi
  01c04	0f 57 c0	 xorps	 xmm0, xmm0
  01c07	f3 0f 11 85 94
	04 00 00	 movss	 DWORD PTR region_x$126[rbp], xmm0
  01c0f	eb 35		 jmp	 SHORT $LN401@ShowDemoWi
$LN400@ShowDemoWi:

; 1042 :                 else if (region_x > my_tex_w - region_sz) { region_x = my_tex_w - region_sz; }

  01c11	f3 0f 10 85 74
	03 00 00	 movss	 xmm0, DWORD PTR my_tex_w$118[rbp]
  01c19	f3 0f 5c 85 74
	04 00 00	 subss	 xmm0, DWORD PTR region_sz$125[rbp]
  01c21	f3 0f 10 8d 94
	04 00 00	 movss	 xmm1, DWORD PTR region_x$126[rbp]
  01c29	0f 2f c8	 comiss	 xmm1, xmm0
  01c2c	76 18		 jbe	 SHORT $LN401@ShowDemoWi
  01c2e	f3 0f 10 85 74
	03 00 00	 movss	 xmm0, DWORD PTR my_tex_w$118[rbp]
  01c36	f3 0f 5c 85 74
	04 00 00	 subss	 xmm0, DWORD PTR region_sz$125[rbp]
  01c3e	f3 0f 11 85 94
	04 00 00	 movss	 DWORD PTR region_x$126[rbp], xmm0
$LN401@ShowDemoWi:

; 1043 :                 if (region_y < 0.0f) { region_y = 0.0f; }

  01c46	0f 57 c0	 xorps	 xmm0, xmm0
  01c49	0f 2f 85 b4 04
	00 00		 comiss	 xmm0, DWORD PTR region_y$127[rbp]
  01c50	76 0d		 jbe	 SHORT $LN403@ShowDemoWi
  01c52	0f 57 c0	 xorps	 xmm0, xmm0
  01c55	f3 0f 11 85 b4
	04 00 00	 movss	 DWORD PTR region_y$127[rbp], xmm0
  01c5d	eb 35		 jmp	 SHORT $LN404@ShowDemoWi
$LN403@ShowDemoWi:

; 1044 :                 else if (region_y > my_tex_h - region_sz) { region_y = my_tex_h - region_sz; }

  01c5f	f3 0f 10 85 94
	03 00 00	 movss	 xmm0, DWORD PTR my_tex_h$119[rbp]
  01c67	f3 0f 5c 85 74
	04 00 00	 subss	 xmm0, DWORD PTR region_sz$125[rbp]
  01c6f	f3 0f 10 8d b4
	04 00 00	 movss	 xmm1, DWORD PTR region_y$127[rbp]
  01c77	0f 2f c8	 comiss	 xmm1, xmm0
  01c7a	76 18		 jbe	 SHORT $LN404@ShowDemoWi
  01c7c	f3 0f 10 85 94
	03 00 00	 movss	 xmm0, DWORD PTR my_tex_h$119[rbp]
  01c84	f3 0f 5c 85 74
	04 00 00	 subss	 xmm0, DWORD PTR region_sz$125[rbp]
  01c8c	f3 0f 11 85 b4
	04 00 00	 movss	 DWORD PTR region_y$127[rbp], xmm0
$LN404@ShowDemoWi:

; 1045 :                 ImGui::Text("Min: (%.2f, %.2f)", region_x, region_y);

  01c94	f3 0f 5a 85 b4
	04 00 00	 cvtss2sd xmm0, DWORD PTR region_y$127[rbp]
  01c9c	f3 0f 5a 8d 94
	04 00 00	 cvtss2sd xmm1, DWORD PTR region_x$126[rbp]
  01ca4	0f 28 d0	 movaps	 xmm2, xmm0
  01ca7	66 49 0f 7e d0	 movq	 r8, xmm2
  01cac	66 48 0f 7e ca	 movq	 rdx, xmm1
  01cb1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@FICOOKGF@Min?3?5?$CI?$CF?42f?0?5?$CF?42f?$CJ?$AA@
  01cb8	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1046 :                 ImGui::Text("Max: (%.2f, %.2f)", region_x + region_sz, region_y + region_sz);

  01cbd	f3 0f 10 85 b4
	04 00 00	 movss	 xmm0, DWORD PTR region_y$127[rbp]
  01cc5	f3 0f 58 85 74
	04 00 00	 addss	 xmm0, DWORD PTR region_sz$125[rbp]
  01ccd	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01cd1	f3 0f 10 8d 94
	04 00 00	 movss	 xmm1, DWORD PTR region_x$126[rbp]
  01cd9	f3 0f 58 8d 74
	04 00 00	 addss	 xmm1, DWORD PTR region_sz$125[rbp]
  01ce1	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  01ce5	0f 28 d0	 movaps	 xmm2, xmm0
  01ce8	66 49 0f 7e d0	 movq	 r8, xmm2
  01ced	66 48 0f 7e ca	 movq	 rdx, xmm1
  01cf2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@LIIPCIB@Max?3?5?$CI?$CF?42f?0?5?$CF?42f?$CJ?$AA@
  01cf9	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1047 :                 ImVec2 uv0 = ImVec2((region_x) / my_tex_w, (region_y) / my_tex_h);

  01cfe	f3 0f 10 85 b4
	04 00 00	 movss	 xmm0, DWORD PTR region_y$127[rbp]
  01d06	f3 0f 5e 85 94
	03 00 00	 divss	 xmm0, DWORD PTR my_tex_h$119[rbp]
  01d0e	f3 0f 10 8d 94
	04 00 00	 movss	 xmm1, DWORD PTR region_x$126[rbp]
  01d16	f3 0f 5e 8d 74
	03 00 00	 divss	 xmm1, DWORD PTR my_tex_w$118[rbp]
  01d1e	0f 28 d0	 movaps	 xmm2, xmm0
  01d21	48 8d 8d f8 04
	00 00		 lea	 rcx, QWORD PTR uv0$129[rbp]
  01d28	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 1048 :                 ImVec2 uv1 = ImVec2((region_x + region_sz) / my_tex_w, (region_y + region_sz) / my_tex_h);

  01d2d	f3 0f 10 85 b4
	04 00 00	 movss	 xmm0, DWORD PTR region_y$127[rbp]
  01d35	f3 0f 58 85 74
	04 00 00	 addss	 xmm0, DWORD PTR region_sz$125[rbp]
  01d3d	f3 0f 5e 85 94
	03 00 00	 divss	 xmm0, DWORD PTR my_tex_h$119[rbp]
  01d45	f3 0f 10 8d 94
	04 00 00	 movss	 xmm1, DWORD PTR region_x$126[rbp]
  01d4d	f3 0f 58 8d 74
	04 00 00	 addss	 xmm1, DWORD PTR region_sz$125[rbp]
  01d55	f3 0f 5e 8d 74
	03 00 00	 divss	 xmm1, DWORD PTR my_tex_w$118[rbp]
  01d5d	0f 28 d0	 movaps	 xmm2, xmm0
  01d60	48 8d 8d 18 05
	00 00		 lea	 rcx, QWORD PTR uv1$130[rbp]
  01d67	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 1049 :                 ImGui::Image(my_tex_id, ImVec2(region_sz * zoom, region_sz * zoom), uv0, uv1, tint_col, border_col);

  01d6c	f3 0f 10 85 74
	04 00 00	 movss	 xmm0, DWORD PTR region_sz$125[rbp]
  01d74	f3 0f 59 85 d4
	04 00 00	 mulss	 xmm0, DWORD PTR zoom$128[rbp]
  01d7c	f3 0f 10 8d 74
	04 00 00	 movss	 xmm1, DWORD PTR region_sz$125[rbp]
  01d84	f3 0f 59 8d d4
	04 00 00	 mulss	 xmm1, DWORD PTR zoom$128[rbp]
  01d8c	0f 28 d0	 movaps	 xmm2, xmm0
  01d8f	48 8d 8d 84 21
	00 00		 lea	 rcx, QWORD PTR $T281[rbp]
  01d96	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01d9b	48 8d 8d 48 04
	00 00		 lea	 rcx, QWORD PTR border_col$124[rbp]
  01da2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01da7	48 8d 8d 18 04
	00 00		 lea	 rcx, QWORD PTR tint_col$123[rbp]
  01dae	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  01db3	4c 8d 8d 18 05
	00 00		 lea	 r9, QWORD PTR uv1$130[rbp]
  01dba	4c 8d 85 f8 04
	00 00		 lea	 r8, QWORD PTR uv0$129[rbp]
  01dc1	48 8b d0	 mov	 rdx, rax
  01dc4	48 8b 8d 58 03
	00 00		 mov	 rcx, QWORD PTR my_tex_id$117[rbp]
  01dcb	e8 00 00 00 00	 call	 ?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z ; ImGui::Image

; 1050 :                 ImGui::EndTooltip();

  01dd0	e8 00 00 00 00	 call	 ?EndTooltip@ImGui@@YAXXZ ; ImGui::EndTooltip
$LN103@ShowDemoWi:

; 1051 :             }
; 1052 :         }
; 1053 : 
; 1054 :         IMGUI_DEMO_MARKER("Widgets/Images/Textured buttons");

  01dd5	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  01ddd	74 28		 je	 SHORT $LN406@ShowDemoWi
  01ddf	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  01de5	05 fb 01 00 00	 add	 eax, 507		; 000001fbH
  01dea	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  01df1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CA@CCOONHAL@Widgets?1Images?1Textured?5buttons?$AA@
  01df8	8b d0		 mov	 edx, eax
  01dfa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  01e01	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN406@ShowDemoWi:
  01e07	33 c0		 xor	 eax, eax
  01e09	85 c0		 test	 eax, eax
  01e0b	75 c8		 jne	 SHORT $LN103@ShowDemoWi

; 1055 :         ImGui::TextWrapped("And now some textured buttons..");

  01e0d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@KAEHPGML@And?5now?5some?5textured?5buttons?4?4?$AA@
  01e14	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped

; 1056 :         static int pressed_count = 0;
; 1057 :         for (int i = 0; i < 8; i++)

  01e19	c7 85 34 05 00
	00 00 00 00 00	 mov	 DWORD PTR i$131[rbp], 0
  01e23	eb 0e		 jmp	 SHORT $LN106@ShowDemoWi
$LN104@ShowDemoWi:
  01e25	8b 85 34 05 00
	00		 mov	 eax, DWORD PTR i$131[rbp]
  01e2b	ff c0		 inc	 eax
  01e2d	89 85 34 05 00
	00		 mov	 DWORD PTR i$131[rbp], eax
$LN106@ShowDemoWi:
  01e33	83 bd 34 05 00
	00 08		 cmp	 DWORD PTR i$131[rbp], 8
  01e3a	0f 8d 89 01 00
	00		 jge	 $LN105@ShowDemoWi

; 1058 :         {
; 1059 :             // UV coordinates are often (0.0f, 0.0f) and (1.0f, 1.0f) to display an entire textures.
; 1060 :             // Here are trying to display only a 32x32 pixels area of the texture, hence the UV computation.
; 1061 :             // Read about UV coordinates here: https://github.com/ocornut/imgui/wiki/Image-Loading-and-Displaying-Examples
; 1062 :             ImGui::PushID(i);

  01e40	8b 8d 34 05 00
	00		 mov	 ecx, DWORD PTR i$131[rbp]
  01e46	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 1063 :             if (i > 0)

  01e4b	83 bd 34 05 00
	00 00		 cmp	 DWORD PTR i$131[rbp], 0
  01e52	7e 3c		 jle	 SHORT $LN407@ShowDemoWi

; 1064 :                 ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(i - 1.0f, i - 1.0f));

  01e54	f3 0f 2a 85 34
	05 00 00	 cvtsi2ss xmm0, DWORD PTR i$131[rbp]
  01e5c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  01e64	f3 0f 2a 8d 34
	05 00 00	 cvtsi2ss xmm1, DWORD PTR i$131[rbp]
  01e6c	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f800000
  01e74	0f 28 d0	 movaps	 xmm2, xmm0
  01e77	48 8d 8d a4 21
	00 00		 lea	 rcx, QWORD PTR $T282[rbp]
  01e7e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01e83	48 8b d0	 mov	 rdx, rax
  01e86	b9 0b 00 00 00	 mov	 ecx, 11
  01e8b	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z ; ImGui::PushStyleVar
$LN407@ShowDemoWi:

; 1065 :             ImVec2 size = ImVec2(32.0f, 32.0f);                         // Size of the image we want to make visible

  01e90	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42000000
  01e98	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42000000
  01ea0	48 8d 8d 58 05
	00 00		 lea	 rcx, QWORD PTR size$132[rbp]
  01ea7	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 1066 :             ImVec2 uv0 = ImVec2(0.0f, 0.0f);                            // UV coordinates for lower-left

  01eac	0f 57 d2	 xorps	 xmm2, xmm2
  01eaf	0f 57 c9	 xorps	 xmm1, xmm1
  01eb2	48 8d 8d 78 05
	00 00		 lea	 rcx, QWORD PTR uv0$133[rbp]
  01eb9	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 1067 :             ImVec2 uv1 = ImVec2(32.0f / my_tex_w, 32.0f / my_tex_h);    // UV coordinates for (32,32) in our texture

  01ebe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42000000
  01ec6	f3 0f 5e 85 94
	03 00 00	 divss	 xmm0, DWORD PTR my_tex_h$119[rbp]
  01ece	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42000000
  01ed6	f3 0f 5e 8d 74
	03 00 00	 divss	 xmm1, DWORD PTR my_tex_w$118[rbp]
  01ede	0f 28 d0	 movaps	 xmm2, xmm0
  01ee1	48 8d 8d 98 05
	00 00		 lea	 rcx, QWORD PTR uv1$134[rbp]
  01ee8	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 1068 :             ImVec4 bg_col = ImVec4(0.0f, 0.0f, 0.0f, 1.0f);             // Black background

  01eed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01ef5	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01efb	0f 57 db	 xorps	 xmm3, xmm3
  01efe	0f 57 d2	 xorps	 xmm2, xmm2
  01f01	0f 57 c9	 xorps	 xmm1, xmm1
  01f04	48 8d 8d b8 05
	00 00		 lea	 rcx, QWORD PTR bg_col$135[rbp]
  01f0b	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4

; 1069 :             ImVec4 tint_col = ImVec4(1.0f, 1.0f, 1.0f, 1.0f);           // No tint

  01f10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01f18	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01f1e	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  01f26	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  01f2e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  01f36	48 8d 8d e8 05
	00 00		 lea	 rcx, QWORD PTR tint_col$136[rbp]
  01f3d	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4

; 1070 :             if (ImGui::ImageButton("", my_tex_id, size, uv0, uv1, bg_col, tint_col))

  01f42	48 8d 85 e8 05
	00 00		 lea	 rax, QWORD PTR tint_col$136[rbp]
  01f49	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  01f4e	48 8d 85 b8 05
	00 00		 lea	 rax, QWORD PTR bg_col$135[rbp]
  01f55	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  01f5a	48 8d 85 98 05
	00 00		 lea	 rax, QWORD PTR uv1$134[rbp]
  01f61	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01f66	4c 8d 8d 78 05
	00 00		 lea	 r9, QWORD PTR uv0$133[rbp]
  01f6d	4c 8d 85 58 05
	00 00		 lea	 r8, QWORD PTR size$132[rbp]
  01f74	48 8b 95 58 03
	00 00		 mov	 rdx, QWORD PTR my_tex_id$117[rbp]
  01f7b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  01f82	e8 00 00 00 00	 call	 ?ImageButton@ImGui@@YA_NPEBDPEAXAEBUImVec2@@22AEBUImVec4@@3@Z ; ImGui::ImageButton
  01f87	0f b6 c0	 movzx	 eax, al
  01f8a	85 c0		 test	 eax, eax
  01f8c	74 0e		 je	 SHORT $LN408@ShowDemoWi

; 1071 :                 pressed_count += 1;

  01f8e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?pressed_count@?OK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01f94	ff c0		 inc	 eax
  01f96	89 05 00 00 00
	00		 mov	 DWORD PTR ?pressed_count@?OK@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN408@ShowDemoWi:

; 1072 :             if (i > 0)

  01f9c	83 bd 34 05 00
	00 00		 cmp	 DWORD PTR i$131[rbp], 0
  01fa3	7e 0a		 jle	 SHORT $LN409@ShowDemoWi

; 1073 :                 ImGui::PopStyleVar();

  01fa5	b9 01 00 00 00	 mov	 ecx, 1
  01faa	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
$LN409@ShowDemoWi:

; 1074 :             ImGui::PopID();

  01faf	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 1075 :             ImGui::SameLine();

  01fb4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01fbc	0f 57 c0	 xorps	 xmm0, xmm0
  01fbf	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 1076 :         }

  01fc4	e9 5c fe ff ff	 jmp	 $LN104@ShowDemoWi
$LN105@ShowDemoWi:

; 1077 :         ImGui::NewLine();

  01fc9	e8 00 00 00 00	 call	 ?NewLine@ImGui@@YAXXZ	; ImGui::NewLine

; 1078 :         ImGui::Text("Pressed %d times.", pressed_count);

  01fce	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pressed_count@?OK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01fd4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@JGNKDOGB@Pressed?5?$CFd?5times?4?$AA@
  01fdb	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1079 :         ImGui::TreePop();

  01fe0	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN109@ShowDemoWi:

; 1080 :     }
; 1081 : 
; 1082 :     IMGUI_DEMO_MARKER("Widgets/Combo");

  01fe5	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  01fed	74 28		 je	 SHORT $LN410@ShowDemoWi
  01fef	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  01ff5	05 17 02 00 00	 add	 eax, 535		; 00000217H
  01ffa	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  02001	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@MECALOFC@Widgets?1Combo?$AA@
  02008	8b d0		 mov	 edx, eax
  0200a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  02011	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN410@ShowDemoWi:
  02017	33 c0		 xor	 eax, eax
  02019	85 c0		 test	 eax, eax
  0201b	75 c8		 jne	 SHORT $LN109@ShowDemoWi

; 1083 :     if (ImGui::TreeNode("Combo"))

  0201d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LMOJIBPK@Combo?$AA@
  02024	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  02029	0f b6 c0	 movzx	 eax, al
  0202c	85 c0		 test	 eax, eax
  0202e	0f 84 c2 02 00
	00		 je	 $LN115@ShowDemoWi

; 1084 :     {
; 1085 :         // Combo Boxes are also called "Dropdown" in other systems
; 1086 :         // Expose flags as checkbox for the demo
; 1087 :         static ImGuiComboFlags flags = 0;
; 1088 :         ImGui::CheckboxFlags("ImGuiComboFlags_PopupAlignLeft", &flags, ImGuiComboFlags_PopupAlignLeft);

  02034	41 b8 01 00 00
	00		 mov	 r8d, 1
  0203a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?BAP@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@KDFGPNLK@ImGuiComboFlags_PopupAlignLeft?$AA@
  02048	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 1089 :         ImGui::SameLine(); HelpMarker("Only makes a difference if the popup is larger than the combo");

  0204d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  02055	0f 57 c0	 xorps	 xmm0, xmm0
  02058	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0205d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DO@LDFFHHPN@Only?5makes?5a?5difference?5if?5the?5p@
  02064	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1090 :         if (ImGui::CheckboxFlags("ImGuiComboFlags_NoArrowButton", &flags, ImGuiComboFlags_NoArrowButton))

  02069	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  0206f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?BAP@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@IADJEHHH@ImGuiComboFlags_NoArrowButton?$AA@
  0207d	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags
  02082	0f b6 c0	 movzx	 eax, al
  02085	85 c0		 test	 eax, eax
  02087	74 0f		 je	 SHORT $LN412@ShowDemoWi

; 1091 :             flags &= ~ImGuiComboFlags_NoPreview;     // Clear the other flag, as we cannot combine both

  02089	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?flags@?BAP@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0208f	83 e0 bf	 and	 eax, -65		; ffffffffffffffbfH
  02092	89 05 00 00 00
	00		 mov	 DWORD PTR ?flags@?BAP@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN412@ShowDemoWi:

; 1092 :         if (ImGui::CheckboxFlags("ImGuiComboFlags_NoPreview", &flags, ImGuiComboFlags_NoPreview))

  02098	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0209e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?BAP@??ShowDemoWindowWidgets@@YAXXZ@4HA
  020a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@CFAPHAND@ImGuiComboFlags_NoPreview?$AA@
  020ac	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags
  020b1	0f b6 c0	 movzx	 eax, al
  020b4	85 c0		 test	 eax, eax
  020b6	74 0f		 je	 SHORT $LN413@ShowDemoWi

; 1093 :             flags &= ~ImGuiComboFlags_NoArrowButton; // Clear the other flag, as we cannot combine both

  020b8	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?flags@?BAP@??ShowDemoWindowWidgets@@YAXXZ@4HA
  020be	83 e0 df	 and	 eax, -33		; ffffffffffffffdfH
  020c1	89 05 00 00 00
	00		 mov	 DWORD PTR ?flags@?BAP@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN413@ShowDemoWi:

; 1094 : 
; 1095 :         // Using the generic BeginCombo() API, you have full control over how to display the combo contents.
; 1096 :         // (your selection data could be an index, a pointer to the object, an id for the object, a flag intrusively
; 1097 :         // stored in the object itself, etc.)
; 1098 :         const char* items[] = { "AAAA", "BBBB", "CCCC", "DDDD", "EEEE", "FFFF", "GGGG", "HHHH", "IIII", "JJJJ", "KKKK", "LLLLLLL", "MMMM", "OOOOOOO" };

  020c7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04OHNMNPPA@AAAA?$AA@
  020ce	48 89 85 20 06
	00 00		 mov	 QWORD PTR items$137[rbp], rax
  020d5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04JLKCOHFE@BBBB?$AA@
  020dc	48 89 85 28 06
	00 00		 mov	 QWORD PTR items$137[rbp+8], rax
  020e3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GKHPCPH@CCCC?$AA@
  020ea	48 89 85 30 06
	00 00		 mov	 QWORD PTR items$137[rbp+16], rax
  020f1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GDFOJGBM@DDDD?$AA@
  020f8	48 89 85 38 06
	00 00		 mov	 QWORD PTR items$137[rbp+24], rax
  020ff	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04POFLIDLP@EEEE?$AA@
  02106	48 89 85 40 06
	00 00		 mov	 QWORD PTR items$137[rbp+32], rax
  0210d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04ICCFLLBL@FFFF?$AA@
  02114	48 89 85 48 06
	00 00		 mov	 QWORD PTR items$137[rbp+40], rax
  0211b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04BPCAKOLI@GGGG?$AA@
  02122	48 89 85 50 06
	00 00		 mov	 QWORD PTR items$137[rbp+48], rax
  02129	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04EJNHHCMN@HHHH?$AA@
  02130	48 89 85 58 06
	00 00		 mov	 QWORD PTR items$137[rbp+56], rax
  02137	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04NENCGHGO@IIII?$AA@
  0213e	48 89 85 60 06
	00 00		 mov	 QWORD PTR items$137[rbp+64], rax
  02145	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04KIKMFPMK@JJJJ?$AA@
  0214c	48 89 85 68 06
	00 00		 mov	 QWORD PTR items$137[rbp+72], rax
  02153	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04DFKJEKGJ@KKKK?$AA@
  0215a	48 89 85 70 06
	00 00		 mov	 QWORD PTR items$137[rbp+80], rax
  02161	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07HGFDAEEO@LLLLLLL?$AA@
  02168	48 89 85 78 06
	00 00		 mov	 QWORD PTR items$137[rbp+88], rax
  0216f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04MNFFDLCB@MMMM?$AA@
  02176	48 89 85 80 06
	00 00		 mov	 QWORD PTR items$137[rbp+96], rax
  0217d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07DDNOFDDK@OOOOOOO?$AA@
  02184	48 89 85 88 06
	00 00		 mov	 QWORD PTR items$137[rbp+104], rax

; 1099 :         static int item_current_idx = 0; // Here we store our selection data as an index.
; 1100 :         const char* combo_preview_value = items[item_current_idx];  // Pass in the preview value visible before opening the combo (it could be anything)

  0218b	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR ?item_current_idx@?BAP@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02192	48 8b 84 c5 20
	06 00 00	 mov	 rax, QWORD PTR items$137[rbp+rax*8]
  0219a	48 89 85 a8 06
	00 00		 mov	 QWORD PTR combo_preview_value$138[rbp], rax

; 1101 :         if (ImGui::BeginCombo("combo 1", combo_preview_value, flags))

  021a1	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags@?BAP@??ShowDemoWindowWidgets@@YAXXZ@4HA
  021a8	48 8b 95 a8 06
	00 00		 mov	 rdx, QWORD PTR combo_preview_value$138[rbp]
  021af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07HDIKCFGM@combo?51?$AA@
  021b6	e8 00 00 00 00	 call	 ?BeginCombo@ImGui@@YA_NPEBD0H@Z ; ImGui::BeginCombo
  021bb	0f b6 c0	 movzx	 eax, al
  021be	85 c0		 test	 eax, eax
  021c0	0f 84 b2 00 00
	00		 je	 $LN414@ShowDemoWi

; 1102 :         {
; 1103 :             for (int n = 0; n < IM_ARRAYSIZE(items); n++)

  021c6	c7 85 c4 06 00
	00 00 00 00 00	 mov	 DWORD PTR n$139[rbp], 0
  021d0	eb 0e		 jmp	 SHORT $LN112@ShowDemoWi
$LN110@ShowDemoWi:
  021d2	8b 85 c4 06 00
	00		 mov	 eax, DWORD PTR n$139[rbp]
  021d8	ff c0		 inc	 eax
  021da	89 85 c4 06 00
	00		 mov	 DWORD PTR n$139[rbp], eax
$LN112@ShowDemoWi:
  021e0	83 bd c4 06 00
	00 0e		 cmp	 DWORD PTR n$139[rbp], 14
  021e7	0f 8d 86 00 00
	00		 jge	 $LN111@ShowDemoWi

; 1104 :             {
; 1105 :                 const bool is_selected = (item_current_idx == n);

  021ed	8b 85 c4 06 00
	00		 mov	 eax, DWORD PTR n$139[rbp]
  021f3	39 05 00 00 00
	00		 cmp	 DWORD PTR ?item_current_idx@?BAP@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
  021f9	75 09		 jne	 SHORT $LN622@ShowDemoWi
  021fb	c6 85 44 2b 00
	00 01		 mov	 BYTE PTR tv1366[rbp], 1
  02202	eb 07		 jmp	 SHORT $LN623@ShowDemoWi
$LN622@ShowDemoWi:
  02204	c6 85 44 2b 00
	00 00		 mov	 BYTE PTR tv1366[rbp], 0
$LN623@ShowDemoWi:
  0220b	0f b6 85 44 2b
	00 00		 movzx	 eax, BYTE PTR tv1366[rbp]
  02212	88 85 e4 06 00
	00		 mov	 BYTE PTR is_selected$140[rbp], al

; 1106 :                 if (ImGui::Selectable(items[n], is_selected))

  02218	0f 57 d2	 xorps	 xmm2, xmm2
  0221b	0f 57 c9	 xorps	 xmm1, xmm1
  0221e	48 8d 8d c4 21
	00 00		 lea	 rcx, QWORD PTR $T283[rbp]
  02225	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0222a	48 63 8d c4 06
	00 00		 movsxd	 rcx, DWORD PTR n$139[rbp]
  02231	4c 8b c8	 mov	 r9, rax
  02234	45 33 c0	 xor	 r8d, r8d
  02237	0f b6 95 e4 06
	00 00		 movzx	 edx, BYTE PTR is_selected$140[rbp]
  0223e	48 8b 8c cd 20
	06 00 00	 mov	 rcx, QWORD PTR items$137[rbp+rcx*8]
  02246	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
  0224b	0f b6 c0	 movzx	 eax, al
  0224e	85 c0		 test	 eax, eax
  02250	74 0c		 je	 SHORT $LN415@ShowDemoWi

; 1107 :                     item_current_idx = n;

  02252	8b 85 c4 06 00
	00		 mov	 eax, DWORD PTR n$139[rbp]
  02258	89 05 00 00 00
	00		 mov	 DWORD PTR ?item_current_idx@?BAP@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN415@ShowDemoWi:

; 1108 : 
; 1109 :                 // Set the initial focus when opening the combo (scrolling + keyboard navigation focus)
; 1110 :                 if (is_selected)

  0225e	0f b6 85 e4 06
	00 00		 movzx	 eax, BYTE PTR is_selected$140[rbp]
  02265	85 c0		 test	 eax, eax
  02267	74 05		 je	 SHORT $LN416@ShowDemoWi

; 1111 :                     ImGui::SetItemDefaultFocus();

  02269	e8 00 00 00 00	 call	 ?SetItemDefaultFocus@ImGui@@YAXXZ ; ImGui::SetItemDefaultFocus
$LN416@ShowDemoWi:

; 1112 :             }

  0226e	e9 5f ff ff ff	 jmp	 $LN110@ShowDemoWi
$LN111@ShowDemoWi:

; 1113 :             ImGui::EndCombo();

  02273	e8 00 00 00 00	 call	 ?EndCombo@ImGui@@YAXXZ	; ImGui::EndCombo
$LN414@ShowDemoWi:

; 1114 :         }
; 1115 : 
; 1116 :         // Simplified one-liner Combo() API, using values packed in a single constant string
; 1117 :         // This is a convenience for when the selection set is small and known at compile-time.
; 1118 :         static int item_current_2 = 0;
; 1119 :         ImGui::Combo("combo 2 (one-liner)", &item_current_2, "aaaa\0bbbb\0cccc\0dddd\0eeee\0\0");

  02278	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  0227e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BL@ICCGGBKH@aaaa?$AAbbbb?$AAcccc?$AAdddd?$AAeeee?$AA?$AA?$AA@
  02285	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?item_current_2@?BAP@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0228c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@BBBJNHHG@combo?52?5?$CIone?9liner?$CJ?$AA@
  02293	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAH0H@Z ; ImGui::Combo

; 1120 : 
; 1121 :         // Simplified one-liner Combo() using an array of const char*
; 1122 :         // This is not very useful (may obsolete): prefer using BeginCombo()/EndCombo() for full control.
; 1123 :         static int item_current_3 = -1; // If the selection isn't within 0..count, Combo won't display a preview
; 1124 :         ImGui::Combo("combo 3 (array)", &item_current_3, items, IM_ARRAYSIZE(items));

  02298	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  022a0	41 b9 0e 00 00
	00		 mov	 r9d, 14
  022a6	4c 8d 85 20 06
	00 00		 lea	 r8, QWORD PTR items$137[rbp]
  022ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?item_current_3@?BAP@??ShowDemoWindowWidgets@@YAXXZ@4HA
  022b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@MDMKCBHF@combo?53?5?$CIarray?$CJ?$AA@
  022bb	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z ; ImGui::Combo

; 1125 : 
; 1126 :         // Simplified one-liner Combo() using an accessor function
; 1127 :         struct Funcs { static bool ItemGetter(void* data, int n, const char** out_str) { *out_str = ((const char**)data)[n]; return true; } };
; 1128 :         static int item_current_4 = 0;
; 1129 :         ImGui::Combo("combo 4 (function)", &item_current_4, &Funcs::ItemGetter, items, IM_ARRAYSIZE(items));

  022c0	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR [rsp+40], -1
  022c8	c7 44 24 20 0e
	00 00 00	 mov	 DWORD PTR [rsp+32], 14
  022d0	4c 8d 8d 20 06
	00 00		 lea	 r9, QWORD PTR items$137[rbp]
  022d7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?ItemGetter@Funcs@?BAP@??ShowDemoWindowWidgets@@YAXXZ@SA_NPEAXHPEAPEBD@Z ; `ShowDemoWindowWidgets'::`271'::Funcs::ItemGetter
  022de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?item_current_4@?BAP@??ShowDemoWindowWidgets@@YAXXZ@4HA
  022e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@GDHGAEJD@combo?54?5?$CIfunction?$CJ?$AA@
  022ec	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z ; ImGui::Combo

; 1130 : 
; 1131 :         ImGui::TreePop();

  022f1	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN115@ShowDemoWi:

; 1132 :     }
; 1133 : 
; 1134 :     IMGUI_DEMO_MARKER("Widgets/List Boxes");

  022f6	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  022fe	74 28		 je	 SHORT $LN417@ShowDemoWi
  02300	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  02306	05 4b 02 00 00	 add	 eax, 587		; 0000024bH
  0230b	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  02312	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@GHKBDBIA@Widgets?1List?5Boxes?$AA@
  02319	8b d0		 mov	 edx, eax
  0231b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  02322	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN417@ShowDemoWi:
  02328	33 c0		 xor	 eax, eax
  0232a	85 c0		 test	 eax, eax
  0232c	75 c8		 jne	 SHORT $LN115@ShowDemoWi

; 1135 :     if (ImGui::TreeNode("List boxes"))

  0232e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@PBIKFGCH@List?5boxes?$AA@
  02335	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  0233a	0f b6 c0	 movzx	 eax, al
  0233d	85 c0		 test	 eax, eax
  0233f	0f 84 aa 02 00
	00		 je	 $LN124@ShowDemoWi

; 1136 :     {
; 1137 :         // Using the generic BeginListBox() API, you have full control over how to display the combo contents.
; 1138 :         // (your selection data could be an index, a pointer to the object, an id for the object, a flag intrusively
; 1139 :         // stored in the object itself, etc.)
; 1140 :         const char* items[] = { "AAAA", "BBBB", "CCCC", "DDDD", "EEEE", "FFFF", "GGGG", "HHHH", "IIII", "JJJJ", "KKKK", "LLLLLLL", "MMMM", "OOOOOOO" };

  02345	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04OHNMNPPA@AAAA?$AA@
  0234c	48 89 85 10 07
	00 00		 mov	 QWORD PTR items$141[rbp], rax
  02353	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04JLKCOHFE@BBBB?$AA@
  0235a	48 89 85 18 07
	00 00		 mov	 QWORD PTR items$141[rbp+8], rax
  02361	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GKHPCPH@CCCC?$AA@
  02368	48 89 85 20 07
	00 00		 mov	 QWORD PTR items$141[rbp+16], rax
  0236f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GDFOJGBM@DDDD?$AA@
  02376	48 89 85 28 07
	00 00		 mov	 QWORD PTR items$141[rbp+24], rax
  0237d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04POFLIDLP@EEEE?$AA@
  02384	48 89 85 30 07
	00 00		 mov	 QWORD PTR items$141[rbp+32], rax
  0238b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04ICCFLLBL@FFFF?$AA@
  02392	48 89 85 38 07
	00 00		 mov	 QWORD PTR items$141[rbp+40], rax
  02399	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04BPCAKOLI@GGGG?$AA@
  023a0	48 89 85 40 07
	00 00		 mov	 QWORD PTR items$141[rbp+48], rax
  023a7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04EJNHHCMN@HHHH?$AA@
  023ae	48 89 85 48 07
	00 00		 mov	 QWORD PTR items$141[rbp+56], rax
  023b5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04NENCGHGO@IIII?$AA@
  023bc	48 89 85 50 07
	00 00		 mov	 QWORD PTR items$141[rbp+64], rax
  023c3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04KIKMFPMK@JJJJ?$AA@
  023ca	48 89 85 58 07
	00 00		 mov	 QWORD PTR items$141[rbp+72], rax
  023d1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04DFKJEKGJ@KKKK?$AA@
  023d8	48 89 85 60 07
	00 00		 mov	 QWORD PTR items$141[rbp+80], rax
  023df	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07HGFDAEEO@LLLLLLL?$AA@
  023e6	48 89 85 68 07
	00 00		 mov	 QWORD PTR items$141[rbp+88], rax
  023ed	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04MNFFDLCB@MMMM?$AA@
  023f4	48 89 85 70 07
	00 00		 mov	 QWORD PTR items$141[rbp+96], rax
  023fb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07DDNOFDDK@OOOOOOO?$AA@
  02402	48 89 85 78 07
	00 00		 mov	 QWORD PTR items$141[rbp+104], rax

; 1141 :         static int item_current_idx = 0; // Here we store our selection data as an index.
; 1142 :         if (ImGui::BeginListBox("listbox 1"))

  02409	0f 57 d2	 xorps	 xmm2, xmm2
  0240c	0f 57 c9	 xorps	 xmm1, xmm1
  0240f	48 8d 8d e4 21
	00 00		 lea	 rcx, QWORD PTR $T284[rbp]
  02416	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0241b	48 8b d0	 mov	 rdx, rax
  0241e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09BDFDKBCP@listbox?51?$AA@
  02425	e8 00 00 00 00	 call	 ?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::BeginListBox
  0242a	0f b6 c0	 movzx	 eax, al
  0242d	85 c0		 test	 eax, eax
  0242f	0f 84 b2 00 00
	00		 je	 $LN419@ShowDemoWi

; 1143 :         {
; 1144 :             for (int n = 0; n < IM_ARRAYSIZE(items); n++)

  02435	c7 85 94 07 00
	00 00 00 00 00	 mov	 DWORD PTR n$142[rbp], 0
  0243f	eb 0e		 jmp	 SHORT $LN118@ShowDemoWi
$LN116@ShowDemoWi:
  02441	8b 85 94 07 00
	00		 mov	 eax, DWORD PTR n$142[rbp]
  02447	ff c0		 inc	 eax
  02449	89 85 94 07 00
	00		 mov	 DWORD PTR n$142[rbp], eax
$LN118@ShowDemoWi:
  0244f	83 bd 94 07 00
	00 0e		 cmp	 DWORD PTR n$142[rbp], 14
  02456	0f 8d 86 00 00
	00		 jge	 $LN117@ShowDemoWi

; 1145 :             {
; 1146 :                 const bool is_selected = (item_current_idx == n);

  0245c	8b 85 94 07 00
	00		 mov	 eax, DWORD PTR n$142[rbp]
  02462	39 05 00 00 00
	00		 cmp	 DWORD PTR ?item_current_idx@?BCD@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
  02468	75 09		 jne	 SHORT $LN624@ShowDemoWi
  0246a	c6 85 44 2b 00
	00 01		 mov	 BYTE PTR tv1485[rbp], 1
  02471	eb 07		 jmp	 SHORT $LN625@ShowDemoWi
$LN624@ShowDemoWi:
  02473	c6 85 44 2b 00
	00 00		 mov	 BYTE PTR tv1485[rbp], 0
$LN625@ShowDemoWi:
  0247a	0f b6 85 44 2b
	00 00		 movzx	 eax, BYTE PTR tv1485[rbp]
  02481	88 85 b4 07 00
	00		 mov	 BYTE PTR is_selected$143[rbp], al

; 1147 :                 if (ImGui::Selectable(items[n], is_selected))

  02487	0f 57 d2	 xorps	 xmm2, xmm2
  0248a	0f 57 c9	 xorps	 xmm1, xmm1
  0248d	48 8d 8d 04 22
	00 00		 lea	 rcx, QWORD PTR $T285[rbp]
  02494	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02499	48 63 8d 94 07
	00 00		 movsxd	 rcx, DWORD PTR n$142[rbp]
  024a0	4c 8b c8	 mov	 r9, rax
  024a3	45 33 c0	 xor	 r8d, r8d
  024a6	0f b6 95 b4 07
	00 00		 movzx	 edx, BYTE PTR is_selected$143[rbp]
  024ad	48 8b 8c cd 10
	07 00 00	 mov	 rcx, QWORD PTR items$141[rbp+rcx*8]
  024b5	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
  024ba	0f b6 c0	 movzx	 eax, al
  024bd	85 c0		 test	 eax, eax
  024bf	74 0c		 je	 SHORT $LN420@ShowDemoWi

; 1148 :                     item_current_idx = n;

  024c1	8b 85 94 07 00
	00		 mov	 eax, DWORD PTR n$142[rbp]
  024c7	89 05 00 00 00
	00		 mov	 DWORD PTR ?item_current_idx@?BCD@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN420@ShowDemoWi:

; 1149 : 
; 1150 :                 // Set the initial focus when opening the combo (scrolling + keyboard navigation focus)
; 1151 :                 if (is_selected)

  024cd	0f b6 85 b4 07
	00 00		 movzx	 eax, BYTE PTR is_selected$143[rbp]
  024d4	85 c0		 test	 eax, eax
  024d6	74 05		 je	 SHORT $LN421@ShowDemoWi

; 1152 :                     ImGui::SetItemDefaultFocus();

  024d8	e8 00 00 00 00	 call	 ?SetItemDefaultFocus@ImGui@@YAXXZ ; ImGui::SetItemDefaultFocus
$LN421@ShowDemoWi:

; 1153 :             }

  024dd	e9 5f ff ff ff	 jmp	 $LN116@ShowDemoWi
$LN117@ShowDemoWi:

; 1154 :             ImGui::EndListBox();

  024e2	e8 00 00 00 00	 call	 ?EndListBox@ImGui@@YAXXZ ; ImGui::EndListBox
$LN419@ShowDemoWi:

; 1155 :         }
; 1156 : 
; 1157 :         // Custom size: use all width, 5 items tall
; 1158 :         ImGui::Text("Full-width:");

  024e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@CKEICGGI@Full?9width?3?$AA@
  024ee	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1159 :         if (ImGui::BeginListBox("##listbox 2", ImVec2(-FLT_MIN, 5 * ImGui::GetTextLineHeightWithSpacing())))

  024f3	e8 00 00 00 00	 call	 ?GetTextLineHeightWithSpacing@ImGui@@YAMXZ ; ImGui::GetTextLineHeightWithSpacing
  024f8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40a00000
  02500	f3 0f 59 c8	 mulss	 xmm1, xmm0
  02504	0f 28 c1	 movaps	 xmm0, xmm1
  02507	0f 28 d0	 movaps	 xmm2, xmm0
  0250a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@80800000
  02512	48 8d 8d 24 22
	00 00		 lea	 rcx, QWORD PTR $T286[rbp]
  02519	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0251e	48 8b d0	 mov	 rdx, rax
  02521	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@NAPALMCL@?$CD?$CDlistbox?52?$AA@
  02528	e8 00 00 00 00	 call	 ?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::BeginListBox
  0252d	0f b6 c0	 movzx	 eax, al
  02530	85 c0		 test	 eax, eax
  02532	0f 84 b2 00 00
	00		 je	 $LN422@ShowDemoWi

; 1160 :         {
; 1161 :             for (int n = 0; n < IM_ARRAYSIZE(items); n++)

  02538	c7 85 d4 07 00
	00 00 00 00 00	 mov	 DWORD PTR n$144[rbp], 0
  02542	eb 0e		 jmp	 SHORT $LN121@ShowDemoWi
$LN119@ShowDemoWi:
  02544	8b 85 d4 07 00
	00		 mov	 eax, DWORD PTR n$144[rbp]
  0254a	ff c0		 inc	 eax
  0254c	89 85 d4 07 00
	00		 mov	 DWORD PTR n$144[rbp], eax
$LN121@ShowDemoWi:
  02552	83 bd d4 07 00
	00 0e		 cmp	 DWORD PTR n$144[rbp], 14
  02559	0f 8d 86 00 00
	00		 jge	 $LN120@ShowDemoWi

; 1162 :             {
; 1163 :                 const bool is_selected = (item_current_idx == n);

  0255f	8b 85 d4 07 00
	00		 mov	 eax, DWORD PTR n$144[rbp]
  02565	39 05 00 00 00
	00		 cmp	 DWORD PTR ?item_current_idx@?BCD@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
  0256b	75 09		 jne	 SHORT $LN626@ShowDemoWi
  0256d	c6 85 44 2b 00
	00 01		 mov	 BYTE PTR tv1549[rbp], 1
  02574	eb 07		 jmp	 SHORT $LN627@ShowDemoWi
$LN626@ShowDemoWi:
  02576	c6 85 44 2b 00
	00 00		 mov	 BYTE PTR tv1549[rbp], 0
$LN627@ShowDemoWi:
  0257d	0f b6 85 44 2b
	00 00		 movzx	 eax, BYTE PTR tv1549[rbp]
  02584	88 85 f4 07 00
	00		 mov	 BYTE PTR is_selected$145[rbp], al

; 1164 :                 if (ImGui::Selectable(items[n], is_selected))

  0258a	0f 57 d2	 xorps	 xmm2, xmm2
  0258d	0f 57 c9	 xorps	 xmm1, xmm1
  02590	48 8d 8d 44 22
	00 00		 lea	 rcx, QWORD PTR $T287[rbp]
  02597	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0259c	48 63 8d d4 07
	00 00		 movsxd	 rcx, DWORD PTR n$144[rbp]
  025a3	4c 8b c8	 mov	 r9, rax
  025a6	45 33 c0	 xor	 r8d, r8d
  025a9	0f b6 95 f4 07
	00 00		 movzx	 edx, BYTE PTR is_selected$145[rbp]
  025b0	48 8b 8c cd 10
	07 00 00	 mov	 rcx, QWORD PTR items$141[rbp+rcx*8]
  025b8	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
  025bd	0f b6 c0	 movzx	 eax, al
  025c0	85 c0		 test	 eax, eax
  025c2	74 0c		 je	 SHORT $LN423@ShowDemoWi

; 1165 :                     item_current_idx = n;

  025c4	8b 85 d4 07 00
	00		 mov	 eax, DWORD PTR n$144[rbp]
  025ca	89 05 00 00 00
	00		 mov	 DWORD PTR ?item_current_idx@?BCD@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN423@ShowDemoWi:

; 1166 : 
; 1167 :                 // Set the initial focus when opening the combo (scrolling + keyboard navigation focus)
; 1168 :                 if (is_selected)

  025d0	0f b6 85 f4 07
	00 00		 movzx	 eax, BYTE PTR is_selected$145[rbp]
  025d7	85 c0		 test	 eax, eax
  025d9	74 05		 je	 SHORT $LN424@ShowDemoWi

; 1169 :                     ImGui::SetItemDefaultFocus();

  025db	e8 00 00 00 00	 call	 ?SetItemDefaultFocus@ImGui@@YAXXZ ; ImGui::SetItemDefaultFocus
$LN424@ShowDemoWi:

; 1170 :             }

  025e0	e9 5f ff ff ff	 jmp	 $LN119@ShowDemoWi
$LN120@ShowDemoWi:

; 1171 :             ImGui::EndListBox();

  025e5	e8 00 00 00 00	 call	 ?EndListBox@ImGui@@YAXXZ ; ImGui::EndListBox
$LN422@ShowDemoWi:

; 1172 :         }
; 1173 : 
; 1174 :         ImGui::TreePop();

  025ea	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN124@ShowDemoWi:

; 1175 :     }
; 1176 : 
; 1177 :     IMGUI_DEMO_MARKER("Widgets/Selectables");

  025ef	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  025f7	74 28		 je	 SHORT $LN425@ShowDemoWi
  025f9	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  025ff	05 76 02 00 00	 add	 eax, 630		; 00000276H
  02604	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0260b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BE@OJBNEPEE@Widgets?1Selectables?$AA@
  02612	8b d0		 mov	 edx, eax
  02614	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0261b	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN425@ShowDemoWi:
  02621	33 c0		 xor	 eax, eax
  02623	85 c0		 test	 eax, eax
  02625	75 c8		 jne	 SHORT $LN124@ShowDemoWi

; 1178 :     if (ImGui::TreeNode("Selectables"))

  02627	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GOIEGLPE@Selectables?$AA@
  0262e	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  02633	0f b6 c0	 movzx	 eax, al
  02636	85 c0		 test	 eax, eax
  02638	0f 84 b8 0c 00
	00		 je	 $LN172@ShowDemoWi
$LN127@ShowDemoWi:

; 1179 :     {
; 1180 :         // Selectable() has 2 overloads:
; 1181 :         // - The one taking "bool selected" as a read-only selection information.
; 1182 :         //   When Selectable() has been clicked it returns true and you can alter selection state accordingly.
; 1183 :         // - The one taking "bool* p_selected" as a read-write selection information (convenient in some cases)
; 1184 :         // The earlier is more flexible, as in real application your selection may be stored in many different ways
; 1185 :         // and not necessarily inside a bool value (e.g. in flags within objects, as an external list, etc).
; 1186 :         IMGUI_DEMO_MARKER("Widgets/Selectables/Basic");

  0263e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  02646	74 28		 je	 SHORT $LN427@ShowDemoWi
  02648	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  0264e	05 7f 02 00 00	 add	 eax, 639		; 0000027fH
  02653	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0265a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BK@OFEBJINJ@Widgets?1Selectables?1Basic?$AA@
  02661	8b d0		 mov	 edx, eax
  02663	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0266a	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN427@ShowDemoWi:
  02670	33 c0		 xor	 eax, eax
  02672	85 c0		 test	 eax, eax
  02674	75 c8		 jne	 SHORT $LN127@ShowDemoWi

; 1187 :         if (ImGui::TreeNode("Basic"))

  02676	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05NIKDGMHP@Basic?$AA@
  0267d	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  02682	0f b6 c0	 movzx	 eax, al
  02685	85 c0		 test	 eax, eax
  02687	0f 84 60 01 00
	00		 je	 $LN130@ShowDemoWi

; 1188 :         {
; 1189 :             static bool selection[5] = { false, true, false, false, false };
; 1190 :             ImGui::Selectable("1. I am selectable", &selection[0]);

  0268d	0f 57 d2	 xorps	 xmm2, xmm2
  02690	0f 57 c9	 xorps	 xmm1, xmm1
  02693	48 8d 8d 64 22
	00 00		 lea	 rcx, QWORD PTR $T288[rbp]
  0269a	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0269f	b9 01 00 00 00	 mov	 ecx, 1
  026a4	48 6b c9 00	 imul	 rcx, rcx, 0
  026a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?selection@?BED@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  026af	48 03 d1	 add	 rdx, rcx
  026b2	48 8b ca	 mov	 rcx, rdx
  026b5	4c 8b c8	 mov	 r9, rax
  026b8	45 33 c0	 xor	 r8d, r8d
  026bb	48 8b d1	 mov	 rdx, rcx
  026be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@KCGCFIHN@1?4?5I?5am?5selectable?$AA@
  026c5	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z ; ImGui::Selectable

; 1191 :             ImGui::Selectable("2. I am selectable", &selection[1]);

  026ca	0f 57 d2	 xorps	 xmm2, xmm2
  026cd	0f 57 c9	 xorps	 xmm1, xmm1
  026d0	48 8d 8d 84 22
	00 00		 lea	 rcx, QWORD PTR $T289[rbp]
  026d7	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  026dc	b9 01 00 00 00	 mov	 ecx, 1
  026e1	48 6b c9 01	 imul	 rcx, rcx, 1
  026e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?selection@?BED@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  026ec	48 03 d1	 add	 rdx, rcx
  026ef	48 8b ca	 mov	 rcx, rdx
  026f2	4c 8b c8	 mov	 r9, rax
  026f5	45 33 c0	 xor	 r8d, r8d
  026f8	48 8b d1	 mov	 rdx, rcx
  026fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@BDENONE@2?4?5I?5am?5selectable?$AA@
  02702	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z ; ImGui::Selectable

; 1192 :             ImGui::Text("(I am not selectable)");

  02707	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@EJJBPEFA@?$CII?5am?5not?5selectable?$CJ?$AA@
  0270e	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1193 :             ImGui::Selectable("4. I am selectable", &selection[3]);

  02713	0f 57 d2	 xorps	 xmm2, xmm2
  02716	0f 57 c9	 xorps	 xmm1, xmm1
  02719	48 8d 8d a4 22
	00 00		 lea	 rcx, QWORD PTR $T290[rbp]
  02720	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02725	b9 01 00 00 00	 mov	 ecx, 1
  0272a	48 6b c9 03	 imul	 rcx, rcx, 3
  0272e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?selection@?BED@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  02735	48 03 d1	 add	 rdx, rcx
  02738	48 8b ca	 mov	 rcx, rdx
  0273b	4c 8b c8	 mov	 r9, rax
  0273e	45 33 c0	 xor	 r8d, r8d
  02741	48 8b d1	 mov	 rdx, rcx
  02744	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@JMOINFMH@4?4?5I?5am?5selectable?$AA@
  0274b	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z ; ImGui::Selectable

; 1194 :             if (ImGui::Selectable("5. I am double clickable", selection[4], ImGuiSelectableFlags_AllowDoubleClick))

  02750	0f 57 d2	 xorps	 xmm2, xmm2
  02753	0f 57 c9	 xorps	 xmm1, xmm1
  02756	48 8d 8d c4 22
	00 00		 lea	 rcx, QWORD PTR $T291[rbp]
  0275d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02762	b9 01 00 00 00	 mov	 ecx, 1
  02767	48 6b c9 04	 imul	 rcx, rcx, 4
  0276b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?selection@?BED@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  02772	4c 8b c8	 mov	 r9, rax
  02775	41 b8 04 00 00
	00		 mov	 r8d, 4
  0277b	0f b6 14 0a	 movzx	 edx, BYTE PTR [rdx+rcx]
  0277f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@DACNLCFI@5?4?5I?5am?5double?5clickable?$AA@
  02786	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
  0278b	0f b6 c0	 movzx	 eax, al
  0278e	85 c0		 test	 eax, eax
  02790	74 56		 je	 SHORT $LN429@ShowDemoWi

; 1195 :                 if (ImGui::IsMouseDoubleClicked(0))

  02792	33 c9		 xor	 ecx, ecx
  02794	e8 00 00 00 00	 call	 ?IsMouseDoubleClicked@ImGui@@YA_NH@Z ; ImGui::IsMouseDoubleClicked
  02799	0f b6 c0	 movzx	 eax, al
  0279c	85 c0		 test	 eax, eax
  0279e	74 48		 je	 SHORT $LN429@ShowDemoWi

; 1196 :                     selection[4] = !selection[4];

  027a0	b8 01 00 00 00	 mov	 eax, 1
  027a5	48 6b c0 04	 imul	 rax, rax, 4
  027a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selection@?BED@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  027b0	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  027b4	85 c0		 test	 eax, eax
  027b6	75 0c		 jne	 SHORT $LN628@ShowDemoWi
  027b8	c7 85 44 2b 00
	00 01 00 00 00	 mov	 DWORD PTR tv1642[rbp], 1
  027c2	eb 0a		 jmp	 SHORT $LN629@ShowDemoWi
$LN628@ShowDemoWi:
  027c4	c7 85 44 2b 00
	00 00 00 00 00	 mov	 DWORD PTR tv1642[rbp], 0
$LN629@ShowDemoWi:
  027ce	b8 01 00 00 00	 mov	 eax, 1
  027d3	48 6b c0 04	 imul	 rax, rax, 4
  027d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selection@?BED@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  027de	0f b6 95 44 2b
	00 00		 movzx	 edx, BYTE PTR tv1642[rbp]
  027e5	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
$LN429@ShowDemoWi:

; 1197 :             ImGui::TreePop();

  027e8	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN130@ShowDemoWi:

; 1198 :         }
; 1199 :         IMGUI_DEMO_MARKER("Widgets/Selectables/Single Selection");

  027ed	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  027f5	74 28		 je	 SHORT $LN431@ShowDemoWi
  027f7	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  027fd	05 8c 02 00 00	 add	 eax, 652		; 0000028cH
  02802	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  02809	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CF@EDENHAHK@Widgets?1Selectables?1Single?5Selec@
  02810	8b d0		 mov	 edx, eax
  02812	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  02819	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN431@ShowDemoWi:
  0281f	33 c0		 xor	 eax, eax
  02821	85 c0		 test	 eax, eax
  02823	75 c8		 jne	 SHORT $LN130@ShowDemoWi

; 1200 :         if (ImGui::TreeNode("Selection State: Single Selection"))

  02825	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@NGMIMNBC@Selection?5State?3?5Single?5Selectio@
  0282c	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  02831	0f b6 c0	 movzx	 eax, al
  02834	85 c0		 test	 eax, eax
  02836	0f 84 a3 00 00
	00		 je	 $LN136@ShowDemoWi

; 1201 :         {
; 1202 :             static int selected = -1;
; 1203 :             for (int n = 0; n < 5; n++)

  0283c	c7 85 14 08 00
	00 00 00 00 00	 mov	 DWORD PTR n$146[rbp], 0
  02846	eb 0e		 jmp	 SHORT $LN133@ShowDemoWi
$LN131@ShowDemoWi:
  02848	8b 85 14 08 00
	00		 mov	 eax, DWORD PTR n$146[rbp]
  0284e	ff c0		 inc	 eax
  02850	89 85 14 08 00
	00		 mov	 DWORD PTR n$146[rbp], eax
$LN133@ShowDemoWi:
  02856	83 bd 14 08 00
	00 05		 cmp	 DWORD PTR n$146[rbp], 5
  0285d	7d 7b		 jge	 SHORT $LN132@ShowDemoWi

; 1204 :             {
; 1205 :                 char buf[32];
; 1206 :                 sprintf(buf, "Object %d", n);

  0285f	44 8b 85 14 08
	00 00		 mov	 r8d, DWORD PTR n$146[rbp]
  02866	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09IEODADNK@Object?5?$CFd?$AA@
  0286d	48 8d 8d 38 08
	00 00		 lea	 rcx, QWORD PTR buf$147[rbp]
  02874	e8 00 00 00 00	 call	 sprintf

; 1207 :                 if (ImGui::Selectable(buf, selected == n))

  02879	8b 85 14 08 00
	00		 mov	 eax, DWORD PTR n$146[rbp]
  0287f	39 05 00 00 00
	00		 cmp	 DWORD PTR ?selected@?BEO@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
  02885	75 09		 jne	 SHORT $LN630@ShowDemoWi
  02887	c6 85 44 2b 00
	00 01		 mov	 BYTE PTR tv1668[rbp], 1
  0288e	eb 07		 jmp	 SHORT $LN631@ShowDemoWi
$LN630@ShowDemoWi:
  02890	c6 85 44 2b 00
	00 00		 mov	 BYTE PTR tv1668[rbp], 0
$LN631@ShowDemoWi:
  02897	0f 57 d2	 xorps	 xmm2, xmm2
  0289a	0f 57 c9	 xorps	 xmm1, xmm1
  0289d	48 8d 8d e4 22
	00 00		 lea	 rcx, QWORD PTR $T292[rbp]
  028a4	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  028a9	4c 8b c8	 mov	 r9, rax
  028ac	45 33 c0	 xor	 r8d, r8d
  028af	0f b6 95 44 2b
	00 00		 movzx	 edx, BYTE PTR tv1668[rbp]
  028b6	48 8d 8d 38 08
	00 00		 lea	 rcx, QWORD PTR buf$147[rbp]
  028bd	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
  028c2	0f b6 c0	 movzx	 eax, al
  028c5	85 c0		 test	 eax, eax
  028c7	74 0c		 je	 SHORT $LN433@ShowDemoWi

; 1208 :                     selected = n;

  028c9	8b 85 14 08 00
	00		 mov	 eax, DWORD PTR n$146[rbp]
  028cf	89 05 00 00 00
	00		 mov	 DWORD PTR ?selected@?BEO@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN433@ShowDemoWi:

; 1209 :             }

  028d5	e9 6e ff ff ff	 jmp	 $LN131@ShowDemoWi
$LN132@ShowDemoWi:

; 1210 :             ImGui::TreePop();

  028da	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN136@ShowDemoWi:

; 1211 :         }
; 1212 :         IMGUI_DEMO_MARKER("Widgets/Selectables/Multiple Selection");

  028df	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  028e7	74 28		 je	 SHORT $LN434@ShowDemoWi
  028e9	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  028ef	05 99 02 00 00	 add	 eax, 665		; 00000299H
  028f4	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  028fb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CH@JDDBHIKA@Widgets?1Selectables?1Multiple?5Sel@
  02902	8b d0		 mov	 edx, eax
  02904	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0290b	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN434@ShowDemoWi:
  02911	33 c0		 xor	 eax, eax
  02913	85 c0		 test	 eax, eax
  02915	75 c8		 jne	 SHORT $LN136@ShowDemoWi

; 1213 :         if (ImGui::TreeNode("Selection State: Multiple Selection"))

  02917	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@ILMFMDLL@Selection?5State?3?5Multiple?5Select@
  0291e	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  02923	0f b6 c0	 movzx	 eax, al
  02926	85 c0		 test	 eax, eax
  02928	0f 84 de 00 00
	00		 je	 $LN142@ShowDemoWi

; 1214 :         {
; 1215 :             HelpMarker("Hold CTRL and click to select multiple items.");

  0292e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@HEGMKIIH@Hold?5CTRL?5and?5click?5to?5select?5mu@
  02935	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1216 :             static bool selection[5] = { false, false, false, false, false };
; 1217 :             for (int n = 0; n < 5; n++)

  0293a	c7 85 74 08 00
	00 00 00 00 00	 mov	 DWORD PTR n$148[rbp], 0
  02944	eb 0e		 jmp	 SHORT $LN139@ShowDemoWi
$LN137@ShowDemoWi:
  02946	8b 85 74 08 00
	00		 mov	 eax, DWORD PTR n$148[rbp]
  0294c	ff c0		 inc	 eax
  0294e	89 85 74 08 00
	00		 mov	 DWORD PTR n$148[rbp], eax
$LN139@ShowDemoWi:
  02954	83 bd 74 08 00
	00 05		 cmp	 DWORD PTR n$148[rbp], 5
  0295b	0f 8d a6 00 00
	00		 jge	 $LN138@ShowDemoWi

; 1218 :             {
; 1219 :                 char buf[32];
; 1220 :                 sprintf(buf, "Object %d", n);

  02961	44 8b 85 74 08
	00 00		 mov	 r8d, DWORD PTR n$148[rbp]
  02968	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09IEODADNK@Object?5?$CFd?$AA@
  0296f	48 8d 8d 98 08
	00 00		 lea	 rcx, QWORD PTR buf$149[rbp]
  02976	e8 00 00 00 00	 call	 sprintf

; 1221 :                 if (ImGui::Selectable(buf, selection[n]))

  0297b	0f 57 d2	 xorps	 xmm2, xmm2
  0297e	0f 57 c9	 xorps	 xmm1, xmm1
  02981	48 8d 8d 04 23
	00 00		 lea	 rcx, QWORD PTR $T293[rbp]
  02988	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0298d	48 63 8d 74 08
	00 00		 movsxd	 rcx, DWORD PTR n$148[rbp]
  02994	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?selection@?BFJ@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  0299b	4c 8b c8	 mov	 r9, rax
  0299e	45 33 c0	 xor	 r8d, r8d
  029a1	0f b6 14 0a	 movzx	 edx, BYTE PTR [rdx+rcx]
  029a5	48 8d 8d 98 08
	00 00		 lea	 rcx, QWORD PTR buf$149[rbp]
  029ac	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
  029b1	0f b6 c0	 movzx	 eax, al
  029b4	85 c0		 test	 eax, eax
  029b6	74 4a		 je	 SHORT $LN436@ShowDemoWi

; 1222 :                 {
; 1223 :                     if (!ImGui::GetIO().KeyCtrl)    // Clear selection when CTRL is not held

  029b8	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  029bd	0f b6 80 0c 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3596]
  029c4	85 c0		 test	 eax, eax
  029c6	75 14		 jne	 SHORT $LN437@ShowDemoWi

; 1224 :                         memset(selection, 0, sizeof(selection));

  029c8	41 b8 05 00 00
	00		 mov	 r8d, 5
  029ce	33 d2		 xor	 edx, edx
  029d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selection@?BFJ@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  029d7	e8 00 00 00 00	 call	 memset
$LN437@ShowDemoWi:

; 1225 :                     selection[n] ^= 1;

  029dc	48 63 85 74 08
	00 00		 movsxd	 rax, DWORD PTR n$148[rbp]
  029e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selection@?BFJ@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  029ea	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  029ee	83 f0 01	 xor	 eax, 1
  029f1	48 63 8d 74 08
	00 00		 movsxd	 rcx, DWORD PTR n$148[rbp]
  029f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?selection@?BFJ@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  029ff	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN436@ShowDemoWi:

; 1226 :                 }
; 1227 :             }

  02a02	e9 3f ff ff ff	 jmp	 $LN137@ShowDemoWi
$LN138@ShowDemoWi:

; 1228 :             ImGui::TreePop();

  02a07	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN142@ShowDemoWi:

; 1229 :         }
; 1230 :         IMGUI_DEMO_MARKER("Widgets/Selectables/Rendering more text into the same line");

  02a0c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  02a14	74 28		 je	 SHORT $LN438@ShowDemoWi
  02a16	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  02a1c	05 ab 02 00 00	 add	 eax, 683		; 000002abH
  02a21	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  02a28	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DL@PHDOHIFN@Widgets?1Selectables?1Rendering?5mo@
  02a2f	8b d0		 mov	 edx, eax
  02a31	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  02a38	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN438@ShowDemoWi:
  02a3e	33 c0		 xor	 eax, eax
  02a40	85 c0		 test	 eax, eax
  02a42	75 c8		 jne	 SHORT $LN142@ShowDemoWi

; 1231 :         if (ImGui::TreeNode("Rendering more text into the same line"))

  02a44	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CH@PHBOMNNA@Rendering?5more?5text?5into?5the?5sam@
  02a4b	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  02a50	0f b6 c0	 movzx	 eax, al
  02a53	85 c0		 test	 eax, eax
  02a55	0f 84 1f 01 00
	00		 je	 $LN145@ShowDemoWi

; 1232 :         {
; 1233 :             // Using the Selectable() override that takes "bool* p_selected" parameter,
; 1234 :             // this function toggle your bool value automatically.
; 1235 :             static bool selected[3] = { false, false, false };
; 1236 :             ImGui::Selectable("main.c",    &selected[0]); ImGui::SameLine(300); ImGui::Text(" 2,345 bytes");

  02a5b	0f 57 d2	 xorps	 xmm2, xmm2
  02a5e	0f 57 c9	 xorps	 xmm1, xmm1
  02a61	48 8d 8d 24 23
	00 00		 lea	 rcx, QWORD PTR $T294[rbp]
  02a68	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02a6d	b9 01 00 00 00	 mov	 ecx, 1
  02a72	48 6b c9 00	 imul	 rcx, rcx, 0
  02a76	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?selected@?BGH@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  02a7d	48 03 d1	 add	 rdx, rcx
  02a80	48 8b ca	 mov	 rcx, rdx
  02a83	4c 8b c8	 mov	 r9, rax
  02a86	45 33 c0	 xor	 r8d, r8d
  02a89	48 8b d1	 mov	 rdx, rcx
  02a8c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06HIICBHNJ@main?4c?$AA@
  02a93	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z ; ImGui::Selectable
  02a98	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  02aa0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43960000
  02aa8	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  02aad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@NKEFLDLJ@?52?0345?5bytes?$AA@
  02ab4	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1237 :             ImGui::Selectable("Hello.cpp", &selected[1]); ImGui::SameLine(300); ImGui::Text("12,345 bytes");

  02ab9	0f 57 d2	 xorps	 xmm2, xmm2
  02abc	0f 57 c9	 xorps	 xmm1, xmm1
  02abf	48 8d 8d 44 23
	00 00		 lea	 rcx, QWORD PTR $T295[rbp]
  02ac6	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02acb	b9 01 00 00 00	 mov	 ecx, 1
  02ad0	48 6b c9 01	 imul	 rcx, rcx, 1
  02ad4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?selected@?BGH@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  02adb	48 03 d1	 add	 rdx, rcx
  02ade	48 8b ca	 mov	 rcx, rdx
  02ae1	4c 8b c8	 mov	 r9, rax
  02ae4	45 33 c0	 xor	 r8d, r8d
  02ae7	48 8b d1	 mov	 rdx, rcx
  02aea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09JJLAOCPC@Hello?4cpp?$AA@
  02af1	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z ; ImGui::Selectable
  02af6	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  02afe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43960000
  02b06	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  02b0b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LDNEMMOG@12?0345?5bytes?$AA@
  02b12	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1238 :             ImGui::Selectable("Hello.h",   &selected[2]); ImGui::SameLine(300); ImGui::Text(" 2,345 bytes");

  02b17	0f 57 d2	 xorps	 xmm2, xmm2
  02b1a	0f 57 c9	 xorps	 xmm1, xmm1
  02b1d	48 8d 8d 64 23
	00 00		 lea	 rcx, QWORD PTR $T296[rbp]
  02b24	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02b29	b9 01 00 00 00	 mov	 ecx, 1
  02b2e	48 6b c9 02	 imul	 rcx, rcx, 2
  02b32	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?selected@?BGH@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  02b39	48 03 d1	 add	 rdx, rcx
  02b3c	48 8b ca	 mov	 rcx, rdx
  02b3f	4c 8b c8	 mov	 r9, rax
  02b42	45 33 c0	 xor	 r8d, r8d
  02b45	48 8b d1	 mov	 rdx, rcx
  02b48	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07GGGNKCPB@Hello?4h?$AA@
  02b4f	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z ; ImGui::Selectable
  02b54	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  02b5c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43960000
  02b64	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  02b69	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@NKEFLDLJ@?52?0345?5bytes?$AA@
  02b70	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1239 :             ImGui::TreePop();

  02b75	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN145@ShowDemoWi:

; 1240 :         }
; 1241 :         IMGUI_DEMO_MARKER("Widgets/Selectables/In columns");

  02b7a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  02b82	74 28		 je	 SHORT $LN440@ShowDemoWi
  02b84	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  02b8a	05 b6 02 00 00	 add	 eax, 694		; 000002b6H
  02b8f	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  02b96	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BP@KAMGKAKE@Widgets?1Selectables?1In?5columns?$AA@
  02b9d	8b d0		 mov	 edx, eax
  02b9f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  02ba6	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN440@ShowDemoWi:
  02bac	33 c0		 xor	 eax, eax
  02bae	85 c0		 test	 eax, eax
  02bb0	75 c8		 jne	 SHORT $LN145@ShowDemoWi

; 1242 :         if (ImGui::TreeNode("In columns"))

  02bb2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@JGCLAHBC@In?5columns?$AA@
  02bb9	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  02bbe	0f b6 c0	 movzx	 eax, al
  02bc1	85 c0		 test	 eax, eax
  02bc3	0f 84 c8 01 00
	00		 je	 $LN154@ShowDemoWi

; 1243 :         {
; 1244 :             static bool selected[10] = {};
; 1245 : 
; 1246 :             if (ImGui::BeginTable("split1", 3, ImGuiTableFlags_Resizable | ImGuiTableFlags_NoSavedSettings | ImGuiTableFlags_Borders))

  02bc9	0f 57 d2	 xorps	 xmm2, xmm2
  02bcc	0f 57 c9	 xorps	 xmm1, xmm1
  02bcf	48 8d 8d 84 23
	00 00		 lea	 rcx, QWORD PTR $T297[rbp]
  02bd6	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02bdb	0f 57 c0	 xorps	 xmm0, xmm0
  02bde	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  02be4	4c 8b c8	 mov	 r9, rax
  02be7	41 b8 91 07 00
	00		 mov	 r8d, 1937		; 00000791H
  02bed	ba 03 00 00 00	 mov	 edx, 3
  02bf2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DLHIACAN@split1?$AA@
  02bf9	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  02bfe	0f b6 c0	 movzx	 eax, al
  02c01	85 c0		 test	 eax, eax
  02c03	0f 84 84 00 00
	00		 je	 $LN442@ShowDemoWi

; 1247 :             {
; 1248 :                 for (int i = 0; i < 10; i++)

  02c09	c7 85 d4 08 00
	00 00 00 00 00	 mov	 DWORD PTR i$150[rbp], 0
  02c13	eb 0e		 jmp	 SHORT $LN148@ShowDemoWi
$LN146@ShowDemoWi:
  02c15	8b 85 d4 08 00
	00		 mov	 eax, DWORD PTR i$150[rbp]
  02c1b	ff c0		 inc	 eax
  02c1d	89 85 d4 08 00
	00		 mov	 DWORD PTR i$150[rbp], eax
$LN148@ShowDemoWi:
  02c23	83 bd d4 08 00
	00 0a		 cmp	 DWORD PTR i$150[rbp], 10
  02c2a	7d 5c		 jge	 SHORT $LN147@ShowDemoWi

; 1249 :                 {
; 1250 :                     char label[32];
; 1251 :                     sprintf(label, "Item %d", i);

  02c2c	44 8b 85 d4 08
	00 00		 mov	 r8d, DWORD PTR i$150[rbp]
  02c33	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07BCJGKFOL@Item?5?$CFd?$AA@
  02c3a	48 8d 8d f8 08
	00 00		 lea	 rcx, QWORD PTR label$151[rbp]
  02c41	e8 00 00 00 00	 call	 sprintf

; 1252 :                     ImGui::TableNextColumn();

  02c46	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 1253 :                     ImGui::Selectable(label, &selected[i]); // FIXME-TABLE: Selection overlap

  02c4b	0f 57 d2	 xorps	 xmm2, xmm2
  02c4e	0f 57 c9	 xorps	 xmm1, xmm1
  02c51	48 8d 8d a4 23
	00 00		 lea	 rcx, QWORD PTR $T298[rbp]
  02c58	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02c5d	48 63 8d d4 08
	00 00		 movsxd	 rcx, DWORD PTR i$150[rbp]
  02c64	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?selected@?BGO@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  02c6b	48 03 d1	 add	 rdx, rcx
  02c6e	48 8b ca	 mov	 rcx, rdx
  02c71	4c 8b c8	 mov	 r9, rax
  02c74	45 33 c0	 xor	 r8d, r8d
  02c77	48 8b d1	 mov	 rdx, rcx
  02c7a	48 8d 8d f8 08
	00 00		 lea	 rcx, QWORD PTR label$151[rbp]
  02c81	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z ; ImGui::Selectable

; 1254 :                 }

  02c86	eb 8d		 jmp	 SHORT $LN146@ShowDemoWi
$LN147@ShowDemoWi:

; 1255 :                 ImGui::EndTable();

  02c88	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN442@ShowDemoWi:

; 1256 :             }
; 1257 :             ImGui::Spacing();

  02c8d	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 1258 :             if (ImGui::BeginTable("split2", 3, ImGuiTableFlags_Resizable | ImGuiTableFlags_NoSavedSettings | ImGuiTableFlags_Borders))

  02c92	0f 57 d2	 xorps	 xmm2, xmm2
  02c95	0f 57 c9	 xorps	 xmm1, xmm1
  02c98	48 8d 8d c4 23
	00 00		 lea	 rcx, QWORD PTR $T299[rbp]
  02c9f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02ca4	0f 57 c0	 xorps	 xmm0, xmm0
  02ca7	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  02cad	4c 8b c8	 mov	 r9, rax
  02cb0	41 b8 91 07 00
	00		 mov	 r8d, 1937		; 00000791H
  02cb6	ba 03 00 00 00	 mov	 edx, 3
  02cbb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06BAFFFBMO@split2?$AA@
  02cc2	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  02cc7	0f b6 c0	 movzx	 eax, al
  02cca	85 c0		 test	 eax, eax
  02ccc	0f 84 ba 00 00
	00		 je	 $LN443@ShowDemoWi

; 1259 :             {
; 1260 :                 for (int i = 0; i < 10; i++)

  02cd2	c7 85 34 09 00
	00 00 00 00 00	 mov	 DWORD PTR i$152[rbp], 0
  02cdc	eb 0e		 jmp	 SHORT $LN151@ShowDemoWi
$LN149@ShowDemoWi:
  02cde	8b 85 34 09 00
	00		 mov	 eax, DWORD PTR i$152[rbp]
  02ce4	ff c0		 inc	 eax
  02ce6	89 85 34 09 00
	00		 mov	 DWORD PTR i$152[rbp], eax
$LN151@ShowDemoWi:
  02cec	83 bd 34 09 00
	00 0a		 cmp	 DWORD PTR i$152[rbp], 10
  02cf3	0f 8d 8e 00 00
	00		 jge	 $LN150@ShowDemoWi

; 1261 :                 {
; 1262 :                     char label[32];
; 1263 :                     sprintf(label, "Item %d", i);

  02cf9	44 8b 85 34 09
	00 00		 mov	 r8d, DWORD PTR i$152[rbp]
  02d00	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07BCJGKFOL@Item?5?$CFd?$AA@
  02d07	48 8d 8d 58 09
	00 00		 lea	 rcx, QWORD PTR label$153[rbp]
  02d0e	e8 00 00 00 00	 call	 sprintf

; 1264 :                     ImGui::TableNextRow();

  02d13	0f 57 c9	 xorps	 xmm1, xmm1
  02d16	33 c9		 xor	 ecx, ecx
  02d18	e8 00 00 00 00	 call	 ?TableNextRow@ImGui@@YAXHM@Z ; ImGui::TableNextRow

; 1265 :                     ImGui::TableNextColumn();

  02d1d	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 1266 :                     ImGui::Selectable(label, &selected[i], ImGuiSelectableFlags_SpanAllColumns);

  02d22	0f 57 d2	 xorps	 xmm2, xmm2
  02d25	0f 57 c9	 xorps	 xmm1, xmm1
  02d28	48 8d 8d e4 23
	00 00		 lea	 rcx, QWORD PTR $T300[rbp]
  02d2f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02d34	48 63 8d 34 09
	00 00		 movsxd	 rcx, DWORD PTR i$152[rbp]
  02d3b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?selected@?BGO@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  02d42	48 03 d1	 add	 rdx, rcx
  02d45	48 8b ca	 mov	 rcx, rdx
  02d48	4c 8b c8	 mov	 r9, rax
  02d4b	41 b8 02 00 00
	00		 mov	 r8d, 2
  02d51	48 8b d1	 mov	 rdx, rcx
  02d54	48 8d 8d 58 09
	00 00		 lea	 rcx, QWORD PTR label$153[rbp]
  02d5b	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z ; ImGui::Selectable

; 1267 :                     ImGui::TableNextColumn();

  02d60	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 1268 :                     ImGui::Text("Some other contents");

  02d65	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@DEADEMHJ@Some?5other?5contents?$AA@
  02d6c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1269 :                     ImGui::TableNextColumn();

  02d71	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn

; 1270 :                     ImGui::Text("123456");

  02d76	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06BHEBDDGP@123456?$AA@
  02d7d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1271 :                 }

  02d82	e9 57 ff ff ff	 jmp	 $LN149@ShowDemoWi
$LN150@ShowDemoWi:

; 1272 :                 ImGui::EndTable();

  02d87	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN443@ShowDemoWi:

; 1273 :             }
; 1274 :             ImGui::TreePop();

  02d8c	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN154@ShowDemoWi:

; 1275 :         }
; 1276 :         IMGUI_DEMO_MARKER("Widgets/Selectables/Grid");

  02d91	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  02d99	74 28		 je	 SHORT $LN444@ShowDemoWi
  02d9b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  02da1	05 d9 02 00 00	 add	 eax, 729		; 000002d9H
  02da6	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  02dad	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BJ@GOMOMLMF@Widgets?1Selectables?1Grid?$AA@
  02db4	8b d0		 mov	 edx, eax
  02db6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  02dbd	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN444@ShowDemoWi:
  02dc3	33 c0		 xor	 eax, eax
  02dc5	85 c0		 test	 eax, eax
  02dc7	75 c8		 jne	 SHORT $LN154@ShowDemoWi

; 1277 :         if (ImGui::TreeNode("Grid"))

  02dc9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04FEKPLKKA@Grid?$AA@
  02dd0	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  02dd5	0f b6 c0	 movzx	 eax, al
  02dd8	85 c0		 test	 eax, eax
  02dda	0f 84 75 03 00
	00		 je	 $LN163@ShowDemoWi

; 1278 :         {
; 1279 :             static char selected[4][4] = { { 1, 0, 0, 0 }, { 0, 1, 0, 0 }, { 0, 0, 1, 0 }, { 0, 0, 0, 1 } };
; 1280 : 
; 1281 :             // Add in a bit of silly fun...
; 1282 :             const float time = (float)ImGui::GetTime();

  02de0	e8 00 00 00 00	 call	 ?GetTime@ImGui@@YANXZ	; ImGui::GetTime
  02de5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02de9	f3 0f 11 85 94
	09 00 00	 movss	 DWORD PTR time$154[rbp], xmm0

; 1283 :             const bool winning_state = memchr(selected, 0, sizeof(selected)) == NULL; // If all cells are selected...

  02df1	41 b8 10 00 00
	00		 mov	 r8d, 16
  02df7	33 d2		 xor	 edx, edx
  02df9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selected@?BHP@??ShowDemoWindowWidgets@@YAXXZ@4PAY03DA
  02e00	e8 00 00 00 00	 call	 ?memchr@@YAPEAXPEAXH_K@Z ; memchr
  02e05	48 85 c0	 test	 rax, rax
  02e08	75 09		 jne	 SHORT $LN632@ShowDemoWi
  02e0a	c6 85 44 2b 00
	00 01		 mov	 BYTE PTR tv1923[rbp], 1
  02e11	eb 07		 jmp	 SHORT $LN633@ShowDemoWi
$LN632@ShowDemoWi:
  02e13	c6 85 44 2b 00
	00 00		 mov	 BYTE PTR tv1923[rbp], 0
$LN633@ShowDemoWi:
  02e1a	0f b6 85 44 2b
	00 00		 movzx	 eax, BYTE PTR tv1923[rbp]
  02e21	88 85 b4 09 00
	00		 mov	 BYTE PTR winning_state$155[rbp], al

; 1284 :             if (winning_state)

  02e27	0f b6 85 b4 09
	00 00		 movzx	 eax, BYTE PTR winning_state$155[rbp]
  02e2e	85 c0		 test	 eax, eax
  02e30	0f 84 9a 00 00
	00		 je	 $LN446@ShowDemoWi

; 1285 :                 ImGui::PushStyleVar(ImGuiStyleVar_SelectableTextAlign, ImVec2(0.5f + 0.5f * cosf(time * 2.0f), 0.5f + 0.5f * sinf(time * 3.0f)));

  02e36	f3 0f 10 85 94
	09 00 00	 movss	 xmm0, DWORD PTR time$154[rbp]
  02e3e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40400000
  02e46	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sinf
  02e4c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  02e54	f3 0f 59 c8	 mulss	 xmm1, xmm0
  02e58	0f 28 c1	 movaps	 xmm0, xmm1
  02e5b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  02e63	f3 0f 58 c8	 addss	 xmm1, xmm0
  02e67	0f 28 c1	 movaps	 xmm0, xmm1
  02e6a	f3 0f 11 85 44
	2b 00 00	 movss	 DWORD PTR tv1932[rbp], xmm0
  02e72	f3 0f 10 8d 94
	09 00 00	 movss	 xmm1, DWORD PTR time$154[rbp]
  02e7a	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  02e82	0f 28 c1	 movaps	 xmm0, xmm1
  02e85	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cosf
  02e8b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  02e93	f3 0f 59 c8	 mulss	 xmm1, xmm0
  02e97	0f 28 c1	 movaps	 xmm0, xmm1
  02e9a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  02ea2	f3 0f 58 c8	 addss	 xmm1, xmm0
  02ea6	0f 28 c1	 movaps	 xmm0, xmm1
  02ea9	f3 0f 10 8d 44
	2b 00 00	 movss	 xmm1, DWORD PTR tv1932[rbp]
  02eb1	0f 28 d1	 movaps	 xmm2, xmm1
  02eb4	0f 28 c8	 movaps	 xmm1, xmm0
  02eb7	48 8d 8d 04 24
	00 00		 lea	 rcx, QWORD PTR $T301[rbp]
  02ebe	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02ec3	48 8b d0	 mov	 rdx, rax
  02ec6	b9 18 00 00 00	 mov	 ecx, 24
  02ecb	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z ; ImGui::PushStyleVar
$LN446@ShowDemoWi:

; 1286 : 
; 1287 :             for (int y = 0; y < 4; y++)

  02ed0	c7 85 d4 09 00
	00 00 00 00 00	 mov	 DWORD PTR y$156[rbp], 0
  02eda	eb 0e		 jmp	 SHORT $LN157@ShowDemoWi
$LN155@ShowDemoWi:
  02edc	8b 85 d4 09 00
	00		 mov	 eax, DWORD PTR y$156[rbp]
  02ee2	ff c0		 inc	 eax
  02ee4	89 85 d4 09 00
	00		 mov	 DWORD PTR y$156[rbp], eax
$LN157@ShowDemoWi:
  02eea	83 bd d4 09 00
	00 04		 cmp	 DWORD PTR y$156[rbp], 4
  02ef1	0f 8d 44 02 00
	00		 jge	 $LN156@ShowDemoWi

; 1288 :                 for (int x = 0; x < 4; x++)

  02ef7	c7 85 f4 09 00
	00 00 00 00 00	 mov	 DWORD PTR x$157[rbp], 0
  02f01	eb 0e		 jmp	 SHORT $LN160@ShowDemoWi
$LN158@ShowDemoWi:
  02f03	8b 85 f4 09 00
	00		 mov	 eax, DWORD PTR x$157[rbp]
  02f09	ff c0		 inc	 eax
  02f0b	89 85 f4 09 00
	00		 mov	 DWORD PTR x$157[rbp], eax
$LN160@ShowDemoWi:
  02f11	83 bd f4 09 00
	00 04		 cmp	 DWORD PTR x$157[rbp], 4
  02f18	0f 8d 18 02 00
	00		 jge	 $LN159@ShowDemoWi

; 1289 :                 {
; 1290 :                     if (x > 0)

  02f1e	83 bd f4 09 00
	00 00		 cmp	 DWORD PTR x$157[rbp], 0
  02f25	7e 10		 jle	 SHORT $LN447@ShowDemoWi

; 1291 :                         ImGui::SameLine();

  02f27	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  02f2f	0f 57 c0	 xorps	 xmm0, xmm0
  02f32	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
$LN447@ShowDemoWi:

; 1292 :                     ImGui::PushID(y * 4 + x);

  02f37	8b 85 f4 09 00
	00		 mov	 eax, DWORD PTR x$157[rbp]
  02f3d	8b 8d d4 09 00
	00		 mov	 ecx, DWORD PTR y$156[rbp]
  02f43	8d 04 88	 lea	 eax, DWORD PTR [rax+rcx*4]
  02f46	8b c8		 mov	 ecx, eax
  02f48	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 1293 :                     if (ImGui::Selectable("Sailor", selected[y][x] != 0, 0, ImVec2(50, 50)))

  02f4d	48 63 85 d4 09
	00 00		 movsxd	 rax, DWORD PTR y$156[rbp]
  02f54	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selected@?BHP@??ShowDemoWindowWidgets@@YAXXZ@4PAY03DA
  02f5b	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  02f5f	48 63 8d f4 09
	00 00		 movsxd	 rcx, DWORD PTR x$157[rbp]
  02f66	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  02f6a	85 c0		 test	 eax, eax
  02f6c	74 09		 je	 SHORT $LN634@ShowDemoWi
  02f6e	c6 85 44 2b 00
	00 01		 mov	 BYTE PTR tv1967[rbp], 1
  02f75	eb 07		 jmp	 SHORT $LN635@ShowDemoWi
$LN634@ShowDemoWi:
  02f77	c6 85 44 2b 00
	00 00		 mov	 BYTE PTR tv1967[rbp], 0
$LN635@ShowDemoWi:
  02f7e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42480000
  02f86	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42480000
  02f8e	48 8d 8d 24 24
	00 00		 lea	 rcx, QWORD PTR $T302[rbp]
  02f95	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  02f9a	4c 8b c8	 mov	 r9, rax
  02f9d	45 33 c0	 xor	 r8d, r8d
  02fa0	0f b6 95 44 2b
	00 00		 movzx	 edx, BYTE PTR tv1967[rbp]
  02fa7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IFGMFLK@Sailor?$AA@
  02fae	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
  02fb3	0f b6 c0	 movzx	 eax, al
  02fb6	85 c0		 test	 eax, eax
  02fb8	0f 84 6e 01 00
	00		 je	 $LN448@ShowDemoWi

; 1294 :                     {
; 1295 :                         // Toggle clicked cell + toggle neighbors
; 1296 :                         selected[y][x] ^= 1;

  02fbe	48 63 85 d4 09
	00 00		 movsxd	 rax, DWORD PTR y$156[rbp]
  02fc5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selected@?BHP@??ShowDemoWindowWidgets@@YAXXZ@4PAY03DA
  02fcc	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  02fd0	48 63 8d f4 09
	00 00		 movsxd	 rcx, DWORD PTR x$157[rbp]
  02fd7	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  02fdb	83 f0 01	 xor	 eax, 1
  02fde	48 63 8d f4 09
	00 00		 movsxd	 rcx, DWORD PTR x$157[rbp]
  02fe5	48 63 95 d4 09
	00 00		 movsxd	 rdx, DWORD PTR y$156[rbp]
  02fec	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?selected@?BHP@??ShowDemoWindowWidgets@@YAXXZ@4PAY03DA
  02ff3	49 8d 14 90	 lea	 rdx, QWORD PTR [r8+rdx*4]
  02ff7	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 1297 :                         if (x > 0) { selected[y][x - 1] ^= 1; }

  02ffa	83 bd f4 09 00
	00 00		 cmp	 DWORD PTR x$157[rbp], 0
  03001	7e 44		 jle	 SHORT $LN449@ShowDemoWi
  03003	48 63 85 d4 09
	00 00		 movsxd	 rax, DWORD PTR y$156[rbp]
  0300a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selected@?BHP@??ShowDemoWindowWidgets@@YAXXZ@4PAY03DA
  03011	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  03015	8b 8d f4 09 00
	00		 mov	 ecx, DWORD PTR x$157[rbp]
  0301b	ff c9		 dec	 ecx
  0301d	48 63 c9	 movsxd	 rcx, ecx
  03020	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  03024	83 f0 01	 xor	 eax, 1
  03027	8b 8d f4 09 00
	00		 mov	 ecx, DWORD PTR x$157[rbp]
  0302d	ff c9		 dec	 ecx
  0302f	48 63 c9	 movsxd	 rcx, ecx
  03032	48 63 95 d4 09
	00 00		 movsxd	 rdx, DWORD PTR y$156[rbp]
  03039	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?selected@?BHP@??ShowDemoWindowWidgets@@YAXXZ@4PAY03DA
  03040	49 8d 14 90	 lea	 rdx, QWORD PTR [r8+rdx*4]
  03044	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN449@ShowDemoWi:

; 1298 :                         if (x < 3) { selected[y][x + 1] ^= 1; }

  03047	83 bd f4 09 00
	00 03		 cmp	 DWORD PTR x$157[rbp], 3
  0304e	7d 44		 jge	 SHORT $LN450@ShowDemoWi
  03050	48 63 85 d4 09
	00 00		 movsxd	 rax, DWORD PTR y$156[rbp]
  03057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selected@?BHP@??ShowDemoWindowWidgets@@YAXXZ@4PAY03DA
  0305e	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  03062	8b 8d f4 09 00
	00		 mov	 ecx, DWORD PTR x$157[rbp]
  03068	ff c1		 inc	 ecx
  0306a	48 63 c9	 movsxd	 rcx, ecx
  0306d	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  03071	83 f0 01	 xor	 eax, 1
  03074	8b 8d f4 09 00
	00		 mov	 ecx, DWORD PTR x$157[rbp]
  0307a	ff c1		 inc	 ecx
  0307c	48 63 c9	 movsxd	 rcx, ecx
  0307f	48 63 95 d4 09
	00 00		 movsxd	 rdx, DWORD PTR y$156[rbp]
  03086	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?selected@?BHP@??ShowDemoWindowWidgets@@YAXXZ@4PAY03DA
  0308d	49 8d 14 90	 lea	 rdx, QWORD PTR [r8+rdx*4]
  03091	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN450@ShowDemoWi:

; 1299 :                         if (y > 0) { selected[y - 1][x] ^= 1; }

  03094	83 bd d4 09 00
	00 00		 cmp	 DWORD PTR y$156[rbp], 0
  0309b	7e 43		 jle	 SHORT $LN451@ShowDemoWi
  0309d	8b 85 d4 09 00
	00		 mov	 eax, DWORD PTR y$156[rbp]
  030a3	ff c8		 dec	 eax
  030a5	48 98		 cdqe
  030a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selected@?BHP@??ShowDemoWindowWidgets@@YAXXZ@4PAY03DA
  030ae	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  030b2	48 63 8d f4 09
	00 00		 movsxd	 rcx, DWORD PTR x$157[rbp]
  030b9	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  030bd	83 f0 01	 xor	 eax, 1
  030c0	48 63 8d f4 09
	00 00		 movsxd	 rcx, DWORD PTR x$157[rbp]
  030c7	8b 95 d4 09 00
	00		 mov	 edx, DWORD PTR y$156[rbp]
  030cd	ff ca		 dec	 edx
  030cf	48 63 d2	 movsxd	 rdx, edx
  030d2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?selected@?BHP@??ShowDemoWindowWidgets@@YAXXZ@4PAY03DA
  030d9	49 8d 14 90	 lea	 rdx, QWORD PTR [r8+rdx*4]
  030dd	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN451@ShowDemoWi:

; 1300 :                         if (y < 3) { selected[y + 1][x] ^= 1; }

  030e0	83 bd d4 09 00
	00 03		 cmp	 DWORD PTR y$156[rbp], 3
  030e7	7d 43		 jge	 SHORT $LN448@ShowDemoWi
  030e9	8b 85 d4 09 00
	00		 mov	 eax, DWORD PTR y$156[rbp]
  030ef	ff c0		 inc	 eax
  030f1	48 98		 cdqe
  030f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?selected@?BHP@??ShowDemoWindowWidgets@@YAXXZ@4PAY03DA
  030fa	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  030fe	48 63 8d f4 09
	00 00		 movsxd	 rcx, DWORD PTR x$157[rbp]
  03105	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  03109	83 f0 01	 xor	 eax, 1
  0310c	48 63 8d f4 09
	00 00		 movsxd	 rcx, DWORD PTR x$157[rbp]
  03113	8b 95 d4 09 00
	00		 mov	 edx, DWORD PTR y$156[rbp]
  03119	ff c2		 inc	 edx
  0311b	48 63 d2	 movsxd	 rdx, edx
  0311e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?selected@?BHP@??ShowDemoWindowWidgets@@YAXXZ@4PAY03DA
  03125	49 8d 14 90	 lea	 rdx, QWORD PTR [r8+rdx*4]
  03129	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN448@ShowDemoWi:

; 1301 :                     }
; 1302 :                     ImGui::PopID();

  0312c	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 1303 :                 }

  03131	e9 cd fd ff ff	 jmp	 $LN158@ShowDemoWi
$LN159@ShowDemoWi:
  03136	e9 a1 fd ff ff	 jmp	 $LN155@ShowDemoWi
$LN156@ShowDemoWi:

; 1304 : 
; 1305 :             if (winning_state)

  0313b	0f b6 85 b4 09
	00 00		 movzx	 eax, BYTE PTR winning_state$155[rbp]
  03142	85 c0		 test	 eax, eax
  03144	74 0a		 je	 SHORT $LN453@ShowDemoWi

; 1306 :                 ImGui::PopStyleVar();

  03146	b9 01 00 00 00	 mov	 ecx, 1
  0314b	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
$LN453@ShowDemoWi:

; 1307 :             ImGui::TreePop();

  03150	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN163@ShowDemoWi:

; 1308 :         }
; 1309 :         IMGUI_DEMO_MARKER("Widgets/Selectables/Alignment");

  03155	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0315d	74 28		 je	 SHORT $LN454@ShowDemoWi
  0315f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  03165	05 fa 02 00 00	 add	 eax, 762		; 000002faH
  0316a	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  03171	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BO@OOLMIAMJ@Widgets?1Selectables?1Alignment?$AA@
  03178	8b d0		 mov	 edx, eax
  0317a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  03181	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN454@ShowDemoWi:
  03187	33 c0		 xor	 eax, eax
  03189	85 c0		 test	 eax, eax
  0318b	75 c8		 jne	 SHORT $LN163@ShowDemoWi

; 1310 :         if (ImGui::TreeNode("Alignment"))

  0318d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09FBMAGD@Alignment?$AA@
  03194	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  03199	0f b6 c0	 movzx	 eax, al
  0319c	85 c0		 test	 eax, eax
  0319e	0f 84 4d 01 00
	00		 je	 $LN455@ShowDemoWi

; 1311 :         {
; 1312 :             HelpMarker(

  031a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BAK@CHANFCAG@By?5default?0?5Selectables?5uses?5sty@
  031ab	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1313 :                 "By default, Selectables uses style.SelectableTextAlign but it can be overridden on a per-item "
; 1314 :                 "basis using PushStyleVar(). You'll probably want to always keep your default situation to "
; 1315 :                 "left-align otherwise it becomes difficult to layout multiple items on a same line");
; 1316 :             static bool selected[3 * 3] = { true, false, true, false, true, false, true, false, true };
; 1317 :             for (int y = 0; y < 3; y++)

  031b0	c7 85 14 0a 00
	00 00 00 00 00	 mov	 DWORD PTR y$158[rbp], 0
  031ba	eb 0e		 jmp	 SHORT $LN166@ShowDemoWi
$LN164@ShowDemoWi:
  031bc	8b 85 14 0a 00
	00		 mov	 eax, DWORD PTR y$158[rbp]
  031c2	ff c0		 inc	 eax
  031c4	89 85 14 0a 00
	00		 mov	 DWORD PTR y$158[rbp], eax
$LN166@ShowDemoWi:
  031ca	83 bd 14 0a 00
	00 03		 cmp	 DWORD PTR y$158[rbp], 3
  031d1	0f 8d 15 01 00
	00		 jge	 $LN165@ShowDemoWi

; 1318 :             {
; 1319 :                 for (int x = 0; x < 3; x++)

  031d7	c7 85 34 0a 00
	00 00 00 00 00	 mov	 DWORD PTR x$159[rbp], 0
  031e1	eb 0e		 jmp	 SHORT $LN169@ShowDemoWi
$LN167@ShowDemoWi:
  031e3	8b 85 34 0a 00
	00		 mov	 eax, DWORD PTR x$159[rbp]
  031e9	ff c0		 inc	 eax
  031eb	89 85 34 0a 00
	00		 mov	 DWORD PTR x$159[rbp], eax
$LN169@ShowDemoWi:
  031f1	83 bd 34 0a 00
	00 03		 cmp	 DWORD PTR x$159[rbp], 3
  031f8	0f 8d e9 00 00
	00		 jge	 $LN168@ShowDemoWi

; 1320 :                 {
; 1321 :                     ImVec2 alignment = ImVec2((float)x / 2.0f, (float)y / 2.0f);

  031fe	f3 0f 2a 85 14
	0a 00 00	 cvtsi2ss xmm0, DWORD PTR y$158[rbp]
  03206	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0320e	f3 0f 2a 8d 34
	0a 00 00	 cvtsi2ss xmm1, DWORD PTR x$159[rbp]
  03216	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40000000
  0321e	0f 28 d0	 movaps	 xmm2, xmm0
  03221	48 8d 8d 58 0a
	00 00		 lea	 rcx, QWORD PTR alignment$160[rbp]
  03228	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 1322 :                     char name[32];
; 1323 :                     sprintf(name, "(%.1f,%.1f)", alignment.x, alignment.y);

  0322d	f3 0f 5a 85 5c
	0a 00 00	 cvtss2sd xmm0, DWORD PTR alignment$160[rbp+4]
  03235	f3 0f 5a 8d 58
	0a 00 00	 cvtss2sd xmm1, DWORD PTR alignment$160[rbp]
  0323d	0f 28 d8	 movaps	 xmm3, xmm0
  03240	66 49 0f 7e d9	 movq	 r9, xmm3
  03245	0f 28 d1	 movaps	 xmm2, xmm1
  03248	66 49 0f 7e d0	 movq	 r8, xmm2
  0324d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@HCIABIHI@?$CI?$CF?41f?0?$CF?41f?$CJ?$AA@
  03254	48 8d 8d 78 0a
	00 00		 lea	 rcx, QWORD PTR name$161[rbp]
  0325b	e8 00 00 00 00	 call	 sprintf

; 1324 :                     if (x > 0) ImGui::SameLine();

  03260	83 bd 34 0a 00
	00 00		 cmp	 DWORD PTR x$159[rbp], 0
  03267	7e 10		 jle	 SHORT $LN456@ShowDemoWi
  03269	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  03271	0f 57 c0	 xorps	 xmm0, xmm0
  03274	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
$LN456@ShowDemoWi:

; 1325 :                     ImGui::PushStyleVar(ImGuiStyleVar_SelectableTextAlign, alignment);

  03279	48 8d 95 58 0a
	00 00		 lea	 rdx, QWORD PTR alignment$160[rbp]
  03280	b9 18 00 00 00	 mov	 ecx, 24
  03285	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z ; ImGui::PushStyleVar

; 1326 :                     ImGui::Selectable(name, &selected[3 * y + x], ImGuiSelectableFlags_None, ImVec2(80, 80));

  0328a	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42a00000
  03292	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42a00000
  0329a	48 8d 8d 44 24
	00 00		 lea	 rcx, QWORD PTR $T303[rbp]
  032a1	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  032a6	6b 8d 14 0a 00
	00 03		 imul	 ecx, DWORD PTR y$158[rbp], 3
  032ad	03 8d 34 0a 00
	00		 add	 ecx, DWORD PTR x$159[rbp]
  032b3	48 63 c9	 movsxd	 rcx, ecx
  032b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?selected@?BJO@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  032bd	48 03 d1	 add	 rdx, rcx
  032c0	48 8b ca	 mov	 rcx, rdx
  032c3	4c 8b c8	 mov	 r9, rax
  032c6	45 33 c0	 xor	 r8d, r8d
  032c9	48 8b d1	 mov	 rdx, rcx
  032cc	48 8d 8d 78 0a
	00 00		 lea	 rcx, QWORD PTR name$161[rbp]
  032d3	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z ; ImGui::Selectable

; 1327 :                     ImGui::PopStyleVar();

  032d8	b9 01 00 00 00	 mov	 ecx, 1
  032dd	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar

; 1328 :                 }

  032e2	e9 fc fe ff ff	 jmp	 $LN167@ShowDemoWi
$LN168@ShowDemoWi:

; 1329 :             }

  032e7	e9 d0 fe ff ff	 jmp	 $LN164@ShowDemoWi
$LN165@ShowDemoWi:

; 1330 :             ImGui::TreePop();

  032ec	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN455@ShowDemoWi:

; 1331 :         }
; 1332 :         ImGui::TreePop();

  032f1	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN172@ShowDemoWi:

; 1333 :     }
; 1334 : 
; 1335 :     // To wire InputText() with std::string or any other custom string type,
; 1336 :     // see the "Text Input > Resize Callback" section of this demo, and the misc/cpp/imgui_stdlib.h file.
; 1337 :     IMGUI_DEMO_MARKER("Widgets/Text Input");

  032f6	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  032fe	74 28		 je	 SHORT $LN457@ShowDemoWi
  03300	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  03306	05 16 03 00 00	 add	 eax, 790		; 00000316H
  0330b	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  03312	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@CKIJKOHG@Widgets?1Text?5Input?$AA@
  03319	8b d0		 mov	 edx, eax
  0331b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  03322	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN457@ShowDemoWi:
  03328	33 c0		 xor	 eax, eax
  0332a	85 c0		 test	 eax, eax
  0332c	75 c8		 jne	 SHORT $LN172@ShowDemoWi

; 1338 :     if (ImGui::TreeNode("Text Input"))

  0332e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@LLAOMMOH@Text?5Input?$AA@
  03335	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  0333a	0f b6 c0	 movzx	 eax, al
  0333d	85 c0		 test	 eax, eax
  0333f	0f 84 3a 06 00
	00		 je	 $LN188@ShowDemoWi
$LN175@ShowDemoWi:

; 1339 :     {
; 1340 :         IMGUI_DEMO_MARKER("Widgets/Text Input/Multi-line Text Input");

  03345	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0334d	74 28		 je	 SHORT $LN459@ShowDemoWi
  0334f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  03355	05 19 03 00 00	 add	 eax, 793		; 00000319H
  0335a	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  03361	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CJ@EJIDMLBN@Widgets?1Text?5Input?1Multi?9line?5Te@
  03368	8b d0		 mov	 edx, eax
  0336a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  03371	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN459@ShowDemoWi:
  03377	33 c0		 xor	 eax, eax
  03379	85 c0		 test	 eax, eax
  0337b	75 c8		 jne	 SHORT $LN175@ShowDemoWi

; 1341 :         if (ImGui::TreeNode("Multi-line Text Input"))

  0337d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@ENAPIHKE@Multi?9line?5Text?5Input?$AA@
  03384	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  03389	0f b6 c0	 movzx	 eax, al
  0338c	85 c0		 test	 eax, eax
  0338e	0f 84 b8 00 00
	00		 je	 $LN178@ShowDemoWi

; 1342 :         {
; 1343 :             // Note: we are using a fixed-sized buffer for simplicity here. See ImGuiInputTextFlags_CallbackResize
; 1344 :             // and the code in misc/cpp/imgui_stdlib.h for how to setup InputText() for dynamically resizing strings.
; 1345 :             static char text[1024 * 16] =
; 1346 :                 "/*\n"
; 1347 :                 " The Pentium F00F bug, shorthand for F0 0F C7 C8,\n"
; 1348 :                 " the hexadecimal encoding of one offending instruction,\n"
; 1349 :                 " more formally, the invalid operand with locked CMPXCHG8B\n"
; 1350 :                 " instruction bug, is a design flaw in the majority of\n"
; 1351 :                 " Intel Pentium, Pentium MMX, and Pentium OverDrive\n"
; 1352 :                 " processors (all in the P5 microarchitecture).\n"
; 1353 :                 "*/\n\n"
; 1354 :                 "label:\n"
; 1355 :                 "\tlock cmpxchg8b eax\n";
; 1356 : 
; 1357 :             static ImGuiInputTextFlags flags = ImGuiInputTextFlags_AllowTabInput;
; 1358 :             HelpMarker("You can use the ImGuiInputTextFlags_CallbackResize facility if you need to wire InputTextMultiline() to a dynamic string type. See misc/cpp/imgui_stdlib.h for an example. (This is not demonstrated in imgui_demo.cpp because we don't want to include <string> in here)");

  03394	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BAK@IFEHCPKB@You?5can?5use?5the?5ImGuiInputTextFl@
  0339b	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1359 :             ImGui::CheckboxFlags("ImGuiInputTextFlags_ReadOnly", &flags, ImGuiInputTextFlags_ReadOnly);

  033a0	41 b8 00 40 00
	00		 mov	 r8d, 16384		; 00004000H
  033a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?BLC@??ShowDemoWindowWidgets@@YAXXZ@4HA
  033ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@IHHKAKNM@ImGuiInputTextFlags_ReadOnly?$AA@
  033b4	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 1360 :             ImGui::CheckboxFlags("ImGuiInputTextFlags_AllowTabInput", &flags, ImGuiInputTextFlags_AllowTabInput);

  033b9	41 b8 00 04 00
	00		 mov	 r8d, 1024		; 00000400H
  033bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?BLC@??ShowDemoWindowWidgets@@YAXXZ@4HA
  033c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@GMDAHFPL@ImGuiInputTextFlags_AllowTabInpu@
  033cd	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 1361 :             ImGui::CheckboxFlags("ImGuiInputTextFlags_CtrlEnterForNewLine", &flags, ImGuiInputTextFlags_CtrlEnterForNewLine);

  033d2	41 b8 00 08 00
	00		 mov	 r8d, 2048		; 00000800H
  033d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?BLC@??ShowDemoWindowWidgets@@YAXXZ@4HA
  033df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@LIKAMPDL@ImGuiInputTextFlags_CtrlEnterFor@
  033e6	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 1362 :             ImGui::InputTextMultiline("##source", text, IM_ARRAYSIZE(text), ImVec2(-FLT_MIN, ImGui::GetTextLineHeight() * 16), flags);

  033eb	e8 00 00 00 00	 call	 ?GetTextLineHeight@ImGui@@YAMXZ ; ImGui::GetTextLineHeight
  033f0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  033f8	0f 28 d0	 movaps	 xmm2, xmm0
  033fb	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@80800000
  03403	48 8d 8d 64 24
	00 00		 lea	 rcx, QWORD PTR $T304[rbp]
  0340a	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0340f	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  03418	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  03421	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?flags@?BLC@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03427	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0342b	4c 8b c8	 mov	 r9, rax
  0342e	41 b8 00 40 00
	00		 mov	 r8d, 16384		; 00004000H
  03434	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?text@?BLC@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  0343b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08FDEOKKII@?$CD?$CDsource?$AA@
  03442	e8 00 00 00 00	 call	 ?InputTextMultiline@ImGui@@YA_NPEBDPEAD_KAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputTextMultiline

; 1363 :             ImGui::TreePop();

  03447	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN178@ShowDemoWi:

; 1364 :         }
; 1365 : 
; 1366 :         IMGUI_DEMO_MARKER("Widgets/Text Input/Filtered Text Input");

  0344c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  03454	74 28		 je	 SHORT $LN461@ShowDemoWi
  03456	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  0345c	05 33 03 00 00	 add	 eax, 819		; 00000333H
  03461	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  03468	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CH@GBIJGOO@Widgets?1Text?5Input?1Filtered?5Text@
  0346f	8b d0		 mov	 edx, eax
  03471	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  03478	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN461@ShowDemoWi:
  0347e	33 c0		 xor	 eax, eax
  03480	85 c0		 test	 eax, eax
  03482	75 c8		 jne	 SHORT $LN178@ShowDemoWi

; 1367 :         if (ImGui::TreeNode("Filtered Text Input"))

  03484	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@EABDFJK@Filtered?5Text?5Input?$AA@
  0348b	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  03490	0f b6 c0	 movzx	 eax, al
  03493	85 c0		 test	 eax, eax
  03495	0f 84 2b 01 00
	00		 je	 $LN181@ShowDemoWi

; 1368 :         {
; 1369 :             struct TextFilters
; 1370 :             {
; 1371 :                 // Return 0 (pass) if the character is 'i' or 'm' or 'g' or 'u' or 'i'
; 1372 :                 static int FilterImGuiLetters(ImGuiInputTextCallbackData* data)
; 1373 :                 {
; 1374 :                     if (data->EventChar < 256 && strchr("imgui", (char)data->EventChar))
; 1375 :                         return 0;
; 1376 :                     return 1;
; 1377 :                 }
; 1378 :             };
; 1379 : 
; 1380 :             static char buf1[64] = ""; ImGui::InputText("default",     buf1, 64);

  0349b	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  034a4	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  034ad	45 33 c9	 xor	 r9d, r9d
  034b0	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  034b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf1@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  034bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DLHCIBDH@default?$AA@
  034c4	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 1381 :             static char buf2[64] = ""; ImGui::InputText("decimal",     buf2, 64, ImGuiInputTextFlags_CharsDecimal);

  034c9	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  034d2	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  034db	41 b9 01 00 00
	00		 mov	 r9d, 1
  034e1	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  034e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf2@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  034ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07EEKBCPDP@decimal?$AA@
  034f5	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 1382 :             static char buf3[64] = ""; ImGui::InputText("hexadecimal", buf3, 64, ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsUppercase);

  034fa	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  03503	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0350c	41 b9 06 00 00
	00		 mov	 r9d, 6
  03512	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  03518	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf3@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  0351f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PLANEGDO@hexadecimal?$AA@
  03526	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 1383 :             static char buf4[64] = ""; ImGui::InputText("uppercase",   buf4, 64, ImGuiInputTextFlags_CharsUppercase);

  0352b	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  03534	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0353d	41 b9 04 00 00
	00		 mov	 r9d, 4
  03543	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  03549	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf4@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  03550	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09NMLHJAII@uppercase?$AA@
  03557	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 1384 :             static char buf5[64] = ""; ImGui::InputText("no blank",    buf5, 64, ImGuiInputTextFlags_CharsNoBlank);

  0355c	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  03565	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0356e	41 b9 08 00 00
	00		 mov	 r9d, 8
  03574	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0357a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf5@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  03581	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08BFAFMKNB@no?5blank?$AA@
  03588	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 1385 :             static char buf6[64] = ""; ImGui::InputText("\"imgui\" letters", buf6, 64, ImGuiInputTextFlags_CallbackCharFilter, TextFilters::FilterImGuiLetters);

  0358d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  03596	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?FilterImGuiLetters@TextFilters@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z ; `ShowDemoWindowWidgets'::`441'::TextFilters::FilterImGuiLetters
  0359d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  035a2	41 b9 00 02 00
	00		 mov	 r9d, 512		; 00000200H
  035a8	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  035ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf6@?BLJ@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  035b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@DMKNNKAP@?$CCimgui?$CC?5letters?$AA@
  035bc	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 1386 :             ImGui::TreePop();

  035c1	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN181@ShowDemoWi:

; 1387 :         }
; 1388 : 
; 1389 :         IMGUI_DEMO_MARKER("Widgets/Text Input/Password input");

  035c6	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  035ce	74 28		 je	 SHORT $LN463@ShowDemoWi
  035d0	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  035d6	05 4a 03 00 00	 add	 eax, 842		; 0000034aH
  035db	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  035e2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CC@OPLEEAIO@Widgets?1Text?5Input?1Password?5inpu@
  035e9	8b d0		 mov	 edx, eax
  035eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  035f2	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN463@ShowDemoWi:
  035f8	33 c0		 xor	 eax, eax
  035fa	85 c0		 test	 eax, eax
  035fc	75 c8		 jne	 SHORT $LN181@ShowDemoWi

; 1390 :         if (ImGui::TreeNode("Password Input"))

  035fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CNDCHFGF@Password?5Input?$AA@
  03605	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  0360a	0f b6 c0	 movzx	 eax, al
  0360d	85 c0		 test	 eax, eax
  0360f	0f 84 ba 00 00
	00		 je	 $LN464@ShowDemoWi

; 1391 :         {
; 1392 :             static char password[64] = "password123";
; 1393 :             ImGui::InputText("password", password, IM_ARRAYSIZE(password), ImGuiInputTextFlags_Password);

  03615	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0361e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  03627	41 b9 00 80 00
	00		 mov	 r9d, 32768		; 00008000H
  0362d	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  03633	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?password@?BMA@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  0363a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NLHBPEGP@password?$AA@
  03641	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 1394 :             ImGui::SameLine(); HelpMarker("Display all characters as '*'.\nDisable clipboard cut and copy.\nDisable logging.\n");

  03646	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0364e	0f 57 c0	 xorps	 xmm0, xmm0
  03651	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  03656	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FB@LAANLENK@Display?5all?5characters?5as?5?8?$CK?8?4?6D@
  0365d	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1395 :             ImGui::InputTextWithHint("password (w/ hint)", "<password>", password, IM_ARRAYSIZE(password), ImGuiInputTextFlags_Password);

  03662	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  0366b	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  03674	c7 44 24 20 00
	80 00 00	 mov	 DWORD PTR [rsp+32], 32768 ; 00008000H
  0367c	41 b9 40 00 00
	00		 mov	 r9d, 64			; 00000040H
  03682	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?password@?BMA@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  03689	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@DGGOBGAB@?$DMpassword?$DO?$AA@
  03690	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@DPDFGHAP@password?5?$CIw?1?5hint?$CJ?$AA@
  03697	e8 00 00 00 00	 call	 ?InputTextWithHint@ImGui@@YA_NPEBD0PEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputTextWithHint

; 1396 :             ImGui::InputText("password (clear)", password, IM_ARRAYSIZE(password));

  0369c	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  036a5	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  036ae	45 33 c9	 xor	 r9d, r9d
  036b1	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  036b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?password@?BMA@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  036be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@LNABFGG@password?5?$CIclear?$CJ?$AA@
  036c5	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 1397 :             ImGui::TreePop();

  036ca	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN464@ShowDemoWi:

; 1398 :         }
; 1399 : 
; 1400 :         if (ImGui::TreeNode("Completion, History, Edit Callbacks"))

  036cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@HIDJCAJO@Completion?0?5History?0?5Edit?5Callba@
  036d6	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  036db	0f b6 c0	 movzx	 eax, al
  036de	85 c0		 test	 eax, eax
  036e0	0f 84 1a 01 00
	00		 je	 $LN184@ShowDemoWi

; 1401 :         {
; 1402 :             struct Funcs
; 1403 :             {
; 1404 :                 static int MyCallback(ImGuiInputTextCallbackData* data)
; 1405 :                 {
; 1406 :                     if (data->EventFlag == ImGuiInputTextFlags_CallbackCompletion)
; 1407 :                     {
; 1408 :                         data->InsertChars(data->CursorPos, "..");
; 1409 :                     }
; 1410 :                     else if (data->EventFlag == ImGuiInputTextFlags_CallbackHistory)
; 1411 :                     {
; 1412 :                         if (data->EventKey == ImGuiKey_UpArrow)
; 1413 :                         {
; 1414 :                             data->DeleteChars(0, data->BufTextLen);
; 1415 :                             data->InsertChars(0, "Pressed Up!");
; 1416 :                             data->SelectAll();
; 1417 :                         }
; 1418 :                         else if (data->EventKey == ImGuiKey_DownArrow)
; 1419 :                         {
; 1420 :                             data->DeleteChars(0, data->BufTextLen);
; 1421 :                             data->InsertChars(0, "Pressed Down!");
; 1422 :                             data->SelectAll();
; 1423 :                         }
; 1424 :                     }
; 1425 :                     else if (data->EventFlag == ImGuiInputTextFlags_CallbackEdit)
; 1426 :                     {
; 1427 :                         // Toggle casing of first character
; 1428 :                         char c = data->Buf[0];
; 1429 :                         if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) data->Buf[0] ^= 32;
; 1430 :                         data->BufDirty = true;
; 1431 : 
; 1432 :                         // Increment a counter
; 1433 :                         int* p_int = (int*)data->UserData;
; 1434 :                         *p_int = *p_int + 1;
; 1435 :                     }
; 1436 :                     return 0;
; 1437 :                 }
; 1438 :             };
; 1439 :             static char buf1[64];
; 1440 :             ImGui::InputText("Completion", buf1, 64, ImGuiInputTextFlags_CallbackCompletion, Funcs::MyCallback);

  036e6	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  036ef	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?MyCallback@Funcs@?BMD@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z ; `ShowDemoWindowWidgets'::`451'::Funcs::MyCallback
  036f6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  036fb	41 b9 40 00 00
	00		 mov	 r9d, 64			; 00000040H
  03701	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  03707	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf1@?BMD@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  0370e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@BMOEBFKJ@Completion?$AA@
  03715	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 1441 :             ImGui::SameLine(); HelpMarker("Here we append \"..\" each time Tab is pressed. See 'Examples>Console' for a more meaningful demonstration of using this callback.");

  0371a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  03722	0f 57 c0	 xorps	 xmm0, xmm0
  03725	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0372a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0IB@POFCECKB@Here?5we?5append?5?$CC?4?4?$CC?5each?5time?5Ta@
  03731	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1442 : 
; 1443 :             static char buf2[64];
; 1444 :             ImGui::InputText("History", buf2, 64, ImGuiInputTextFlags_CallbackHistory, Funcs::MyCallback);

  03736	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0373f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?MyCallback@Funcs@?BMD@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z ; `ShowDemoWindowWidgets'::`451'::Funcs::MyCallback
  03746	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0374b	41 b9 80 00 00
	00		 mov	 r9d, 128		; 00000080H
  03751	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  03757	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf2@?BMD@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  0375e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DFKCFAEM@History?$AA@
  03765	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 1445 :             ImGui::SameLine(); HelpMarker("Here we replace and select text each time Up/Down are pressed. See 'Examples>Console' for a more meaningful demonstration of using this callback.");

  0376a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  03772	0f 57 c0	 xorps	 xmm0, xmm0
  03775	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0377a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0JC@JNBHNBHO@Here?5we?5replace?5and?5select?5text?5@
  03781	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1446 : 
; 1447 :             static char buf3[64];
; 1448 :             static int edit_count = 0;
; 1449 :             ImGui::InputText("Edit", buf3, 64, ImGuiInputTextFlags_CallbackEdit, Funcs::MyCallback, (void*)&edit_count);

  03786	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?edit_count@?BMD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0378d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  03792	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?MyCallback@Funcs@?BMD@??ShowDemoWindowWidgets@@YAXXZ@SAHPEAUImGuiInputTextCallbackData@@@Z ; `ShowDemoWindowWidgets'::`451'::Funcs::MyCallback
  03799	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0379e	41 b9 00 00 08
	00		 mov	 r9d, 524288		; 00080000H
  037a4	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  037aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf3@?BMD@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  037b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BBNPPDNC@Edit?$AA@
  037b8	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 1450 :             ImGui::SameLine(); HelpMarker("Here we toggle the casing of the first character on every edit + count edits.");

  037bd	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  037c5	0f 57 c0	 xorps	 xmm0, xmm0
  037c8	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  037cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EO@BKNGEHGN@Here?5we?5toggle?5the?5casing?5of?5the@
  037d4	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1451 :             ImGui::SameLine(); ImGui::Text("(%d)", edit_count);

  037d9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  037e1	0f 57 c0	 xorps	 xmm0, xmm0
  037e4	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  037e9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?edit_count@?BMD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  037ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04FEBIMPDM@?$CI?$CFd?$CJ?$AA@
  037f6	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1452 : 
; 1453 :             ImGui::TreePop();

  037fb	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN184@ShowDemoWi:

; 1454 :         }
; 1455 : 
; 1456 :         IMGUI_DEMO_MARKER("Widgets/Text Input/Resize Callback");

  03800	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  03808	74 28		 je	 SHORT $LN466@ShowDemoWi
  0380a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  03810	05 8d 03 00 00	 add	 eax, 909		; 0000038dH
  03815	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0381c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CD@OOGDFIC@Widgets?1Text?5Input?1Resize?5Callba@
  03823	8b d0		 mov	 edx, eax
  03825	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0382c	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN466@ShowDemoWi:
  03832	33 c0		 xor	 eax, eax
  03834	85 c0		 test	 eax, eax
  03836	75 c8		 jne	 SHORT $LN184@ShowDemoWi

; 1457 :         if (ImGui::TreeNode("Resize Callback"))

  03838	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@PGEBLBNL@Resize?5Callback?$AA@
  0383f	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  03844	0f b6 c0	 movzx	 eax, al
  03847	85 c0		 test	 eax, eax
  03849	0f 84 2b 01 00
	00		 je	 $LN467@ShowDemoWi

; 1458 :         {
; 1459 :             // To wire InputText() with std::string or any other custom string type,
; 1460 :             // you can use the ImGuiInputTextFlags_CallbackResize flag + create a custom ImGui::InputText() wrapper
; 1461 :             // using your preferred type. See misc/cpp/imgui_stdlib.h for an implementation of this using std::string.
; 1462 :             HelpMarker(

  0384f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0KF@ELKLKFLA@Using?5ImGuiInputTextFlags_Callba@
  03856	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1463 :                 "Using ImGuiInputTextFlags_CallbackResize to wire your custom string type to InputText().\n\n"
; 1464 :                 "See misc/cpp/imgui_stdlib.h for an implementation of this for std::string.");
; 1465 :             struct Funcs
; 1466 :             {
; 1467 :                 static int MyResizeCallback(ImGuiInputTextCallbackData* data)
; 1468 :                 {
; 1469 :                     if (data->EventFlag == ImGuiInputTextFlags_CallbackResize)
; 1470 :                     {
; 1471 :                         ImVector<char>* my_str = (ImVector<char>*)data->UserData;
; 1472 :                         IM_ASSERT(my_str->begin() == data->Buf);
; 1473 :                         my_str->resize(data->BufSize); // NB: On resizing calls, generally data->BufSize == data->BufTextLen + 1
; 1474 :                         data->Buf = my_str->begin();
; 1475 :                     }
; 1476 :                     return 0;
; 1477 :                 }
; 1478 : 
; 1479 :                 // Note: Because ImGui:: is a namespace you would typically add your own function into the namespace.
; 1480 :                 // For example, you code may declare a function 'ImGui::InputText(const char* label, MyString* my_str)'
; 1481 :                 static bool MyInputTextMultiline(const char* label, ImVector<char>* my_str, const ImVec2& size = ImVec2(0, 0), ImGuiInputTextFlags flags = 0)
; 1482 :                 {
; 1483 :                     IM_ASSERT((flags & ImGuiInputTextFlags_CallbackResize) == 0);
; 1484 :                     return ImGui::InputTextMultiline(label, my_str->begin(), (size_t)my_str->size(), size, flags | ImGuiInputTextFlags_CallbackResize, Funcs::MyResizeCallback, (void*)my_str);
; 1485 :                 }
; 1486 :             };
; 1487 : 
; 1488 :             // For this demo we are using ImVector as a string container.
; 1489 :             // Note that because we need to store a terminating zero character, our size/capacity are 1 more
; 1490 :             // than usually reported by a typical string class.
; 1491 :             static ImVector<char> my_str;

  0385b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  03860	8b c0		 mov	 eax, eax
  03862	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03868	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03871	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  03875	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  03878	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS0@?BMK@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
  0387e	7e 3a		 jle	 SHORT $LN185@ShowDemoWi
  03880	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?BMK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03887	e8 00 00 00 00	 call	 _Init_thread_header
  0388c	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?BMK@??ShowDemoWindowWidgets@@YAXXZ@4HA, -1
  03893	75 25		 jne	 SHORT $LN185@ShowDemoWi
  03895	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?my_str@?BMK@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@D@@A
  0389c	e8 00 00 00 00	 call	 ??0?$ImVector@D@@QEAA@XZ ; ImVector<char>::ImVector<char>
  038a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__Fmy_str@?BMK@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ ; `ShowDemoWindowWidgets'::`458'::`dynamic atexit destructor for 'my_str''
  038a8	e8 00 00 00 00	 call	 atexit
  038ad	90		 npad	 1
  038ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?BMK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  038b5	e8 00 00 00 00	 call	 _Init_thread_footer
$LN185@ShowDemoWi:

; 1492 :             if (my_str.empty())

  038ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?my_str@?BMK@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@D@@A
  038c1	e8 00 00 00 00	 call	 ?empty@?$ImVector@D@@QEBA_NXZ ; ImVector<char>::empty
  038c6	0f b6 c0	 movzx	 eax, al
  038c9	85 c0		 test	 eax, eax
  038cb	74 1a		 je	 SHORT $LN468@ShowDemoWi

; 1493 :                 my_str.push_back(0);

  038cd	c6 85 84 24 00
	00 00		 mov	 BYTE PTR $T305[rbp], 0
  038d4	48 8d 95 84 24
	00 00		 lea	 rdx, QWORD PTR $T305[rbp]
  038db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?my_str@?BMK@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@D@@A
  038e2	e8 00 00 00 00	 call	 ?push_back@?$ImVector@D@@QEAAXAEBD@Z ; ImVector<char>::push_back
$LN468@ShowDemoWi:

; 1494 :             Funcs::MyInputTextMultiline("##MyStr", &my_str, ImVec2(-FLT_MIN, ImGui::GetTextLineHeight() * 16));

  038e7	e8 00 00 00 00	 call	 ?GetTextLineHeight@ImGui@@YAMXZ ; ImGui::GetTextLineHeight
  038ec	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  038f4	0f 28 d0	 movaps	 xmm2, xmm0
  038f7	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@80800000
  038ff	48 8d 8d a4 24
	00 00		 lea	 rcx, QWORD PTR $T306[rbp]
  03906	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0390b	45 33 c9	 xor	 r9d, r9d
  0390e	4c 8b c0	 mov	 r8, rax
  03911	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?my_str@?BMK@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@D@@A
  03918	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07MDDMIGJK@?$CD?$CDMyStr?$AA@
  0391f	e8 00 00 00 00	 call	 ?MyInputTextMultiline@Funcs@?BMK@??ShowDemoWindowWidgets@@YAXXZ@SA_NPEBDPEAU?$ImVector@D@@AEBUImVec2@@H@Z ; `ShowDemoWindowWidgets'::`458'::Funcs::MyInputTextMultiline

; 1495 :             ImGui::Text("Data: %p\nSize: %d\nCapacity: %d", (void*)my_str.begin(), my_str.size(), my_str.capacity());

  03924	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?my_str@?BMK@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@D@@A
  0392b	e8 00 00 00 00	 call	 ?capacity@?$ImVector@D@@QEBAHXZ ; ImVector<char>::capacity
  03930	89 85 44 2b 00
	00		 mov	 DWORD PTR tv2376[rbp], eax
  03936	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?my_str@?BMK@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@D@@A
  0393d	e8 00 00 00 00	 call	 ?size@?$ImVector@D@@QEBAHXZ ; ImVector<char>::size
  03942	89 85 48 2b 00
	00		 mov	 DWORD PTR tv2379[rbp], eax
  03948	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?my_str@?BMK@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@D@@A
  0394f	e8 00 00 00 00	 call	 ?begin@?$ImVector@D@@QEAAPEADXZ ; ImVector<char>::begin
  03954	8b 8d 44 2b 00
	00		 mov	 ecx, DWORD PTR tv2376[rbp]
  0395a	44 8b c9	 mov	 r9d, ecx
  0395d	8b 8d 48 2b 00
	00		 mov	 ecx, DWORD PTR tv2379[rbp]
  03963	44 8b c1	 mov	 r8d, ecx
  03966	48 8b d0	 mov	 rdx, rax
  03969	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@HFIMENAP@Data?3?5?$CFp?6Size?3?5?$CFd?6Capacity?3?5?$CFd?$AA@
  03970	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1496 :             ImGui::TreePop();

  03975	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN467@ShowDemoWi:

; 1497 :         }
; 1498 : 
; 1499 :         ImGui::TreePop();

  0397a	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN188@ShowDemoWi:

; 1500 :     }
; 1501 : 
; 1502 :     // Tabs
; 1503 :     IMGUI_DEMO_MARKER("Widgets/Tabs");

  0397f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  03987	74 28		 je	 SHORT $LN469@ShowDemoWi
  03989	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  0398f	05 bc 03 00 00	 add	 eax, 956		; 000003bcH
  03994	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0399b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@PGGDMOLM@Widgets?1Tabs?$AA@
  039a2	8b d0		 mov	 edx, eax
  039a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  039ab	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN469@ShowDemoWi:
  039b1	33 c0		 xor	 eax, eax
  039b3	85 c0		 test	 eax, eax
  039b5	75 c8		 jne	 SHORT $LN188@ShowDemoWi

; 1504 :     if (ImGui::TreeNode("Tabs"))

  039b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04DIJFMEPE@Tabs?$AA@
  039be	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  039c3	0f b6 c0	 movzx	 eax, al
  039c6	85 c0		 test	 eax, eax
  039c8	0f 84 0c 07 00
	00		 je	 $LN213@ShowDemoWi
$LN191@ShowDemoWi:

; 1505 :     {
; 1506 :         IMGUI_DEMO_MARKER("Widgets/Tabs/Basic");

  039ce	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  039d6	74 28		 je	 SHORT $LN471@ShowDemoWi
  039d8	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  039de	05 bf 03 00 00	 add	 eax, 959		; 000003bfH
  039e3	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  039ea	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@MJMKJGN@Widgets?1Tabs?1Basic?$AA@
  039f1	8b d0		 mov	 edx, eax
  039f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  039fa	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN471@ShowDemoWi:
  03a00	33 c0		 xor	 eax, eax
  03a02	85 c0		 test	 eax, eax
  03a04	75 c8		 jne	 SHORT $LN191@ShowDemoWi

; 1507 :         if (ImGui::TreeNode("Basic"))

  03a06	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05NIKDGMHP@Basic?$AA@
  03a0d	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  03a12	0f b6 c0	 movzx	 eax, al
  03a15	85 c0		 test	 eax, eax
  03a17	0f 84 b1 00 00
	00		 je	 $LN194@ShowDemoWi

; 1508 :         {
; 1509 :             ImGuiTabBarFlags tab_bar_flags = ImGuiTabBarFlags_None;

  03a1d	c7 85 b4 0a 00
	00 00 00 00 00	 mov	 DWORD PTR tab_bar_flags$162[rbp], 0

; 1510 :             if (ImGui::BeginTabBar("MyTabBar", tab_bar_flags))

  03a27	8b 95 b4 0a 00
	00		 mov	 edx, DWORD PTR tab_bar_flags$162[rbp]
  03a2d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08BHPFJKBJ@MyTabBar?$AA@
  03a34	e8 00 00 00 00	 call	 ?BeginTabBar@ImGui@@YA_NPEBDH@Z ; ImGui::BeginTabBar
  03a39	0f b6 c0	 movzx	 eax, al
  03a3c	85 c0		 test	 eax, eax
  03a3e	0f 84 80 00 00
	00		 je	 $LN473@ShowDemoWi

; 1511 :             {
; 1512 :                 if (ImGui::BeginTabItem("Avocado"))

  03a44	45 33 c0	 xor	 r8d, r8d
  03a47	33 d2		 xor	 edx, edx
  03a49	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07PJEDDDBE@Avocado?$AA@
  03a50	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginTabItem
  03a55	0f b6 c0	 movzx	 eax, al
  03a58	85 c0		 test	 eax, eax
  03a5a	74 11		 je	 SHORT $LN474@ShowDemoWi

; 1513 :                 {
; 1514 :                     ImGui::Text("This is the Avocado tab!\nblah blah blah blah blah");

  03a5c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DC@GCKNABCK@This?5is?5the?5Avocado?5tab?$CB?6blah?5bl@
  03a63	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1515 :                     ImGui::EndTabItem();

  03a68	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN474@ShowDemoWi:

; 1516 :                 }
; 1517 :                 if (ImGui::BeginTabItem("Broccoli"))

  03a6d	45 33 c0	 xor	 r8d, r8d
  03a70	33 d2		 xor	 edx, edx
  03a72	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08LMFMBPKH@Broccoli?$AA@
  03a79	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginTabItem
  03a7e	0f b6 c0	 movzx	 eax, al
  03a81	85 c0		 test	 eax, eax
  03a83	74 11		 je	 SHORT $LN475@ShowDemoWi

; 1518 :                 {
; 1519 :                     ImGui::Text("This is the Broccoli tab!\nblah blah blah blah blah");

  03a85	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DD@MJGBNDMM@This?5is?5the?5Broccoli?5tab?$CB?6blah?5b@
  03a8c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1520 :                     ImGui::EndTabItem();

  03a91	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN475@ShowDemoWi:

; 1521 :                 }
; 1522 :                 if (ImGui::BeginTabItem("Cucumber"))

  03a96	45 33 c0	 xor	 r8d, r8d
  03a99	33 d2		 xor	 edx, edx
  03a9b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08FIHABPKG@Cucumber?$AA@
  03aa2	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginTabItem
  03aa7	0f b6 c0	 movzx	 eax, al
  03aaa	85 c0		 test	 eax, eax
  03aac	74 11		 je	 SHORT $LN476@ShowDemoWi

; 1523 :                 {
; 1524 :                     ImGui::Text("This is the Cucumber tab!\nblah blah blah blah blah");

  03aae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DD@CJPLEJGJ@This?5is?5the?5Cucumber?5tab?$CB?6blah?5b@
  03ab5	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1525 :                     ImGui::EndTabItem();

  03aba	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN476@ShowDemoWi:

; 1526 :                 }
; 1527 :                 ImGui::EndTabBar();

  03abf	e8 00 00 00 00	 call	 ?EndTabBar@ImGui@@YAXXZ	; ImGui::EndTabBar
$LN473@ShowDemoWi:

; 1528 :             }
; 1529 :             ImGui::Separator();

  03ac4	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 1530 :             ImGui::TreePop();

  03ac9	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN194@ShowDemoWi:

; 1531 :         }
; 1532 : 
; 1533 :         IMGUI_DEMO_MARKER("Widgets/Tabs/Advanced & Close Button");

  03ace	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  03ad6	74 28		 je	 SHORT $LN477@ShowDemoWi
  03ad8	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  03ade	05 da 03 00 00	 add	 eax, 986		; 000003daH
  03ae3	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  03aea	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CF@NNMDIAIK@Widgets?1Tabs?1Advanced?5?$CG?5Close?5Bu@
  03af1	8b d0		 mov	 edx, eax
  03af3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  03afa	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN477@ShowDemoWi:
  03b00	33 c0		 xor	 eax, eax
  03b02	85 c0		 test	 eax, eax
  03b04	75 c8		 jne	 SHORT $LN194@ShowDemoWi

; 1534 :         if (ImGui::TreeNode("Advanced & Close Button"))

  03b06	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@NAEAKGLC@Advanced?5?$CG?5Close?5Button?$AA@
  03b0d	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  03b12	0f b6 c0	 movzx	 eax, al
  03b15	85 c0		 test	 eax, eax
  03b17	0f 84 5e 02 00
	00		 je	 $LN203@ShowDemoWi

; 1535 :         {
; 1536 :             // Expose a couple of the available flags. In most cases you may just call BeginTabBar() with no flags (0).
; 1537 :             static ImGuiTabBarFlags tab_bar_flags = ImGuiTabBarFlags_Reorderable;
; 1538 :             ImGui::CheckboxFlags("ImGuiTabBarFlags_Reorderable", &tab_bar_flags, ImGuiTabBarFlags_Reorderable);

  03b1d	41 b8 01 00 00
	00		 mov	 r8d, 1
  03b23	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?tab_bar_flags@?BON@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03b2a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@FKNGBAKI@ImGuiTabBarFlags_Reorderable?$AA@
  03b31	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 1539 :             ImGui::CheckboxFlags("ImGuiTabBarFlags_AutoSelectNewTabs", &tab_bar_flags, ImGuiTabBarFlags_AutoSelectNewTabs);

  03b36	41 b8 02 00 00
	00		 mov	 r8d, 2
  03b3c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?tab_bar_flags@?BON@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03b43	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@CJJDGNCL@ImGuiTabBarFlags_AutoSelectNewTa@
  03b4a	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 1540 :             ImGui::CheckboxFlags("ImGuiTabBarFlags_TabListPopupButton", &tab_bar_flags, ImGuiTabBarFlags_TabListPopupButton);

  03b4f	41 b8 04 00 00
	00		 mov	 r8d, 4
  03b55	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?tab_bar_flags@?BON@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03b5c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@ODMHCKNA@ImGuiTabBarFlags_TabListPopupBut@
  03b63	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 1541 :             ImGui::CheckboxFlags("ImGuiTabBarFlags_NoCloseWithMiddleMouseButton", &tab_bar_flags, ImGuiTabBarFlags_NoCloseWithMiddleMouseButton);

  03b68	41 b8 08 00 00
	00		 mov	 r8d, 8
  03b6e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?tab_bar_flags@?BON@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03b75	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PEFOKBDP@ImGuiTabBarFlags_NoCloseWithMidd@
  03b7c	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 1542 :             if ((tab_bar_flags & ImGuiTabBarFlags_FittingPolicyMask_) == 0)

  03b81	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?tab_bar_flags@?BON@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03b87	25 c0 00 00 00	 and	 eax, 192		; 000000c0H
  03b8c	85 c0		 test	 eax, eax
  03b8e	75 0f		 jne	 SHORT $LN479@ShowDemoWi

; 1543 :                 tab_bar_flags |= ImGuiTabBarFlags_FittingPolicyDefault_;

  03b90	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?tab_bar_flags@?BON@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03b96	83 c8 40	 or	 eax, 64			; 00000040H
  03b99	89 05 00 00 00
	00		 mov	 DWORD PTR ?tab_bar_flags@?BON@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN479@ShowDemoWi:

; 1544 :             if (ImGui::CheckboxFlags("ImGuiTabBarFlags_FittingPolicyResizeDown", &tab_bar_flags, ImGuiTabBarFlags_FittingPolicyResizeDown))

  03b9f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  03ba5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?tab_bar_flags@?BON@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03bac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@IIIJDEBN@ImGuiTabBarFlags_FittingPolicyRe@
  03bb3	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags
  03bb8	0f b6 c0	 movzx	 eax, al
  03bbb	85 c0		 test	 eax, eax
  03bbd	74 10		 je	 SHORT $LN480@ShowDemoWi

; 1545 :                 tab_bar_flags &= ~(ImGuiTabBarFlags_FittingPolicyMask_ ^ ImGuiTabBarFlags_FittingPolicyResizeDown);

  03bbf	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?tab_bar_flags@?BON@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03bc5	0f ba f0 07	 btr	 eax, 7
  03bc9	89 05 00 00 00
	00		 mov	 DWORD PTR ?tab_bar_flags@?BON@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN480@ShowDemoWi:

; 1546 :             if (ImGui::CheckboxFlags("ImGuiTabBarFlags_FittingPolicyScroll", &tab_bar_flags, ImGuiTabBarFlags_FittingPolicyScroll))

  03bcf	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  03bd5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?tab_bar_flags@?BON@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03bdc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@NLLNBILH@ImGuiTabBarFlags_FittingPolicySc@
  03be3	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags
  03be8	0f b6 c0	 movzx	 eax, al
  03beb	85 c0		 test	 eax, eax
  03bed	74 0f		 je	 SHORT $LN481@ShowDemoWi

; 1547 :                 tab_bar_flags &= ~(ImGuiTabBarFlags_FittingPolicyMask_ ^ ImGuiTabBarFlags_FittingPolicyScroll);

  03bef	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?tab_bar_flags@?BON@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03bf5	83 e0 bf	 and	 eax, -65		; ffffffffffffffbfH
  03bf8	89 05 00 00 00
	00		 mov	 DWORD PTR ?tab_bar_flags@?BON@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN481@ShowDemoWi:

; 1548 : 
; 1549 :             // Tab Bar
; 1550 :             const char* names[4] = { "Artichoke", "Beetroot", "Celery", "Daikon" };

  03bfe	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09JNADJLBG@Artichoke?$AA@
  03c05	48 89 85 d8 0a
	00 00		 mov	 QWORD PTR names$163[rbp], rax
  03c0c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08NACLCGIP@Beetroot?$AA@
  03c13	48 89 85 e0 0a
	00 00		 mov	 QWORD PTR names$163[rbp+8], rax
  03c1a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06LGPLDCHA@Celery?$AA@
  03c21	48 89 85 e8 0a
	00 00		 mov	 QWORD PTR names$163[rbp+16], rax
  03c28	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06NBIPACBO@Daikon?$AA@
  03c2f	48 89 85 f0 0a
	00 00		 mov	 QWORD PTR names$163[rbp+24], rax

; 1551 :             static bool opened[4] = { true, true, true, true }; // Persistent user state
; 1552 :             for (int n = 0; n < IM_ARRAYSIZE(opened); n++)

  03c36	c7 85 14 0b 00
	00 00 00 00 00	 mov	 DWORD PTR n$164[rbp], 0
  03c40	eb 0e		 jmp	 SHORT $LN197@ShowDemoWi
$LN195@ShowDemoWi:
  03c42	8b 85 14 0b 00
	00		 mov	 eax, DWORD PTR n$164[rbp]
  03c48	ff c0		 inc	 eax
  03c4a	89 85 14 0b 00
	00		 mov	 DWORD PTR n$164[rbp], eax
$LN197@ShowDemoWi:
  03c50	83 bd 14 0b 00
	00 04		 cmp	 DWORD PTR n$164[rbp], 4
  03c57	7d 46		 jge	 SHORT $LN196@ShowDemoWi

; 1553 :             {
; 1554 :                 if (n > 0) { ImGui::SameLine(); }

  03c59	83 bd 14 0b 00
	00 00		 cmp	 DWORD PTR n$164[rbp], 0
  03c60	7e 10		 jle	 SHORT $LN482@ShowDemoWi
  03c62	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  03c6a	0f 57 c0	 xorps	 xmm0, xmm0
  03c6d	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
$LN482@ShowDemoWi:

; 1555 :                 ImGui::Checkbox(names[n], &opened[n]);

  03c72	48 63 85 14 0b
	00 00		 movsxd	 rax, DWORD PTR n$164[rbp]
  03c79	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?opened@?BON@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  03c80	48 03 c8	 add	 rcx, rax
  03c83	48 8b c1	 mov	 rax, rcx
  03c86	48 63 8d 14 0b
	00 00		 movsxd	 rcx, DWORD PTR n$164[rbp]
  03c8d	48 8b d0	 mov	 rdx, rax
  03c90	48 8b 8c cd d8
	0a 00 00	 mov	 rcx, QWORD PTR names$163[rbp+rcx*8]
  03c98	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 1556 :             }

  03c9d	eb a3		 jmp	 SHORT $LN195@ShowDemoWi
$LN196@ShowDemoWi:

; 1557 : 
; 1558 :             // Passing a bool* to BeginTabItem() is similar to passing one to Begin():
; 1559 :             // the underlying bool will be set to false when the tab is closed.
; 1560 :             if (ImGui::BeginTabBar("MyTabBar", tab_bar_flags))

  03c9f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?tab_bar_flags@?BON@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03ca5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08BHPFJKBJ@MyTabBar?$AA@
  03cac	e8 00 00 00 00	 call	 ?BeginTabBar@ImGui@@YA_NPEBDH@Z ; ImGui::BeginTabBar
  03cb1	0f b6 c0	 movzx	 eax, al
  03cb4	85 c0		 test	 eax, eax
  03cb6	0f 84 b5 00 00
	00		 je	 $LN483@ShowDemoWi

; 1561 :             {
; 1562 :                 for (int n = 0; n < IM_ARRAYSIZE(opened); n++)

  03cbc	c7 85 34 0b 00
	00 00 00 00 00	 mov	 DWORD PTR n$165[rbp], 0
  03cc6	eb 0e		 jmp	 SHORT $LN200@ShowDemoWi
$LN198@ShowDemoWi:
  03cc8	8b 85 34 0b 00
	00		 mov	 eax, DWORD PTR n$165[rbp]
  03cce	ff c0		 inc	 eax
  03cd0	89 85 34 0b 00
	00		 mov	 DWORD PTR n$165[rbp], eax
$LN200@ShowDemoWi:
  03cd6	83 bd 34 0b 00
	00 04		 cmp	 DWORD PTR n$165[rbp], 4
  03cdd	0f 8d 89 00 00
	00		 jge	 $LN199@ShowDemoWi

; 1563 :                     if (opened[n] && ImGui::BeginTabItem(names[n], &opened[n], ImGuiTabItemFlags_None))

  03ce3	48 63 85 34 0b
	00 00		 movsxd	 rax, DWORD PTR n$165[rbp]
  03cea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?opened@?BON@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  03cf1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03cf5	85 c0		 test	 eax, eax
  03cf7	74 6e		 je	 SHORT $LN484@ShowDemoWi
  03cf9	48 63 85 34 0b
	00 00		 movsxd	 rax, DWORD PTR n$165[rbp]
  03d00	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?opened@?BON@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  03d07	48 03 c8	 add	 rcx, rax
  03d0a	48 8b c1	 mov	 rax, rcx
  03d0d	48 63 8d 34 0b
	00 00		 movsxd	 rcx, DWORD PTR n$165[rbp]
  03d14	45 33 c0	 xor	 r8d, r8d
  03d17	48 8b d0	 mov	 rdx, rax
  03d1a	48 8b 8c cd d8
	0a 00 00	 mov	 rcx, QWORD PTR names$163[rbp+rcx*8]
  03d22	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginTabItem
  03d27	0f b6 c0	 movzx	 eax, al
  03d2a	85 c0		 test	 eax, eax
  03d2c	74 39		 je	 SHORT $LN484@ShowDemoWi

; 1564 :                     {
; 1565 :                         ImGui::Text("This is the %s tab!", names[n]);

  03d2e	48 63 85 34 0b
	00 00		 movsxd	 rax, DWORD PTR n$165[rbp]
  03d35	48 8b 94 c5 d8
	0a 00 00	 mov	 rdx, QWORD PTR names$163[rbp+rax*8]
  03d3d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@HMOLENGG@This?5is?5the?5?$CFs?5tab?$CB?$AA@
  03d44	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1566 :                         if (n & 1)

  03d49	8b 85 34 0b 00
	00		 mov	 eax, DWORD PTR n$165[rbp]
  03d4f	83 e0 01	 and	 eax, 1
  03d52	85 c0		 test	 eax, eax
  03d54	74 0c		 je	 SHORT $LN485@ShowDemoWi

; 1567 :                             ImGui::Text("I am an odd tab.");

  03d56	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@PAPJGNOM@I?5am?5an?5odd?5tab?4?$AA@
  03d5d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN485@ShowDemoWi:

; 1568 :                         ImGui::EndTabItem();

  03d62	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN484@ShowDemoWi:

; 1569 :                     }

  03d67	e9 5c ff ff ff	 jmp	 $LN198@ShowDemoWi
$LN199@ShowDemoWi:

; 1570 :                 ImGui::EndTabBar();

  03d6c	e8 00 00 00 00	 call	 ?EndTabBar@ImGui@@YAXXZ	; ImGui::EndTabBar
$LN483@ShowDemoWi:

; 1571 :             }
; 1572 :             ImGui::Separator();

  03d71	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 1573 :             ImGui::TreePop();

  03d76	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN203@ShowDemoWi:

; 1574 :         }
; 1575 : 
; 1576 :         IMGUI_DEMO_MARKER("Widgets/Tabs/TabItemButton & Leading-Trailing flags");

  03d7b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  03d83	74 28		 je	 SHORT $LN486@ShowDemoWi
  03d85	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  03d8b	05 05 04 00 00	 add	 eax, 1029		; 00000405H
  03d90	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  03d97	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DE@GLBBPDDL@Widgets?1Tabs?1TabItemButton?5?$CG?5Lea@
  03d9e	8b d0		 mov	 edx, eax
  03da0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  03da7	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN486@ShowDemoWi:
  03dad	33 c0		 xor	 eax, eax
  03daf	85 c0		 test	 eax, eax
  03db1	75 c8		 jne	 SHORT $LN203@ShowDemoWi

; 1577 :         if (ImGui::TreeNode("TabItemButton & Leading/Trailing flags"))

  03db3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CH@FJDGMAFH@TabItemButton?5?$CG?5Leading?1Trailing@
  03dba	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  03dbf	0f b6 c0	 movzx	 eax, al
  03dc2	85 c0		 test	 eax, eax
  03dc4	0f 84 0b 03 00
	00		 je	 $LN487@ShowDemoWi

; 1578 :         {
; 1579 :             static ImVector<int> active_tabs;

  03dca	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  03dcf	8b c0		 mov	 eax, eax
  03dd1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  03dd7	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  03de0	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  03de4	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  03de7	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS1@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
  03ded	7e 3a		 jle	 SHORT $LN204@ShowDemoWi
  03def	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03df6	e8 00 00 00 00	 call	 _Init_thread_header
  03dfb	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS1@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA, -1
  03e02	75 25		 jne	 SHORT $LN204@ShowDemoWi
  03e04	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?active_tabs@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@H@@A
  03e0b	e8 00 00 00 00	 call	 ??0?$ImVector@H@@QEAA@XZ ; ImVector<int>::ImVector<int>
  03e10	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__Factive_tabs@?CAI@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ ; `ShowDemoWindowWidgets'::`520'::`dynamic atexit destructor for 'active_tabs''
  03e17	e8 00 00 00 00	 call	 atexit
  03e1c	90		 npad	 1
  03e1d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03e24	e8 00 00 00 00	 call	 _Init_thread_footer
$LN204@ShowDemoWi:

; 1580 :             static int next_tab_id = 0;
; 1581 :             if (next_tab_id == 0) // Initialize with some default tabs

  03e29	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?next_tab_id@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA, 0
  03e30	75 52		 jne	 SHORT $LN488@ShowDemoWi

; 1582 :                 for (int i = 0; i < 3; i++)

  03e32	c7 85 54 0b 00
	00 00 00 00 00	 mov	 DWORD PTR i$166[rbp], 0
  03e3c	eb 0e		 jmp	 SHORT $LN207@ShowDemoWi
$LN205@ShowDemoWi:
  03e3e	8b 85 54 0b 00
	00		 mov	 eax, DWORD PTR i$166[rbp]
  03e44	ff c0		 inc	 eax
  03e46	89 85 54 0b 00
	00		 mov	 DWORD PTR i$166[rbp], eax
$LN207@ShowDemoWi:
  03e4c	83 bd 54 0b 00
	00 03		 cmp	 DWORD PTR i$166[rbp], 3
  03e53	7d 2f		 jge	 SHORT $LN488@ShowDemoWi

; 1583 :                     active_tabs.push_back(next_tab_id++);

  03e55	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?next_tab_id@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03e5b	89 85 c4 24 00
	00		 mov	 DWORD PTR $T307[rbp], eax
  03e61	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?next_tab_id@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03e67	ff c0		 inc	 eax
  03e69	89 05 00 00 00
	00		 mov	 DWORD PTR ?next_tab_id@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
  03e6f	48 8d 95 c4 24
	00 00		 lea	 rdx, QWORD PTR $T307[rbp]
  03e76	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?active_tabs@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@H@@A
  03e7d	e8 00 00 00 00	 call	 ?push_back@?$ImVector@H@@QEAAXAEBH@Z ; ImVector<int>::push_back
  03e82	eb ba		 jmp	 SHORT $LN205@ShowDemoWi
$LN488@ShowDemoWi:

; 1584 : 
; 1585 :             // TabItemButton() and Leading/Trailing flags are distinct features which we will demo together.
; 1586 :             // (It is possible to submit regular tabs with Leading/Trailing flags, or TabItemButton tabs without Leading/Trailing flags...
; 1587 :             // but they tend to make more sense together)
; 1588 :             static bool show_leading_button = true;
; 1589 :             static bool show_trailing_button = true;
; 1590 :             ImGui::Checkbox("Show Leading TabItemButton()", &show_leading_button);

  03e84	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?show_leading_button@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  03e8b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@OJPKMGDH@Show?5Leading?5TabItemButton?$CI?$CJ?$AA@
  03e92	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 1591 :             ImGui::Checkbox("Show Trailing TabItemButton()", &show_trailing_button);

  03e97	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?show_trailing_button@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  03e9e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@GMKHPNHK@Show?5Trailing?5TabItemButton?$CI?$CJ?$AA@
  03ea5	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 1592 : 
; 1593 :             // Expose some other flags which are useful to showcase how they interact with Leading/Trailing tabs
; 1594 :             static ImGuiTabBarFlags tab_bar_flags = ImGuiTabBarFlags_AutoSelectNewTabs | ImGuiTabBarFlags_Reorderable | ImGuiTabBarFlags_FittingPolicyResizeDown;
; 1595 :             ImGui::CheckboxFlags("ImGuiTabBarFlags_TabListPopupButton", &tab_bar_flags, ImGuiTabBarFlags_TabListPopupButton);

  03eaa	41 b8 04 00 00
	00		 mov	 r8d, 4
  03eb0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?tab_bar_flags@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03eb7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@ODMHCKNA@ImGuiTabBarFlags_TabListPopupBut@
  03ebe	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 1596 :             if (ImGui::CheckboxFlags("ImGuiTabBarFlags_FittingPolicyResizeDown", &tab_bar_flags, ImGuiTabBarFlags_FittingPolicyResizeDown))

  03ec3	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  03ec9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?tab_bar_flags@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03ed0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@IIIJDEBN@ImGuiTabBarFlags_FittingPolicyRe@
  03ed7	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags
  03edc	0f b6 c0	 movzx	 eax, al
  03edf	85 c0		 test	 eax, eax
  03ee1	74 10		 je	 SHORT $LN489@ShowDemoWi

; 1597 :                 tab_bar_flags &= ~(ImGuiTabBarFlags_FittingPolicyMask_ ^ ImGuiTabBarFlags_FittingPolicyResizeDown);

  03ee3	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?tab_bar_flags@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03ee9	0f ba f0 07	 btr	 eax, 7
  03eed	89 05 00 00 00
	00		 mov	 DWORD PTR ?tab_bar_flags@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN489@ShowDemoWi:

; 1598 :             if (ImGui::CheckboxFlags("ImGuiTabBarFlags_FittingPolicyScroll", &tab_bar_flags, ImGuiTabBarFlags_FittingPolicyScroll))

  03ef3	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  03ef9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?tab_bar_flags@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03f00	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@NLLNBILH@ImGuiTabBarFlags_FittingPolicySc@
  03f07	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags
  03f0c	0f b6 c0	 movzx	 eax, al
  03f0f	85 c0		 test	 eax, eax
  03f11	74 0f		 je	 SHORT $LN490@ShowDemoWi

; 1599 :                 tab_bar_flags &= ~(ImGuiTabBarFlags_FittingPolicyMask_ ^ ImGuiTabBarFlags_FittingPolicyScroll);

  03f13	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?tab_bar_flags@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03f19	83 e0 bf	 and	 eax, -65		; ffffffffffffffbfH
  03f1c	89 05 00 00 00
	00		 mov	 DWORD PTR ?tab_bar_flags@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN490@ShowDemoWi:

; 1600 : 
; 1601 :             if (ImGui::BeginTabBar("MyTabBar", tab_bar_flags))

  03f22	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?tab_bar_flags@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03f28	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08BHPFJKBJ@MyTabBar?$AA@
  03f2f	e8 00 00 00 00	 call	 ?BeginTabBar@ImGui@@YA_NPEBDH@Z ; ImGui::BeginTabBar
  03f34	0f b6 c0	 movzx	 eax, al
  03f37	85 c0		 test	 eax, eax
  03f39	0f 84 8c 01 00
	00		 je	 $LN491@ShowDemoWi

; 1602 :             {
; 1603 :                 // Demo a Leading TabItemButton(): click the "?" button to open a menu
; 1604 :                 if (show_leading_button)

  03f3f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_leading_button@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  03f46	85 c0		 test	 eax, eax
  03f48	74 26		 je	 SHORT $LN492@ShowDemoWi

; 1605 :                     if (ImGui::TabItemButton("?", ImGuiTabItemFlags_Leading | ImGuiTabItemFlags_NoTooltip))

  03f4a	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  03f4f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  03f56	e8 00 00 00 00	 call	 ?TabItemButton@ImGui@@YA_NPEBDH@Z ; ImGui::TabItemButton
  03f5b	0f b6 c0	 movzx	 eax, al
  03f5e	85 c0		 test	 eax, eax
  03f60	74 0e		 je	 SHORT $LN492@ShowDemoWi

; 1606 :                         ImGui::OpenPopup("MyHelpMenu");

  03f62	33 d2		 xor	 edx, edx
  03f64	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@IFBHGAGJ@MyHelpMenu?$AA@
  03f6b	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPEBDH@Z ; ImGui::OpenPopup
$LN492@ShowDemoWi:

; 1607 :                 if (ImGui::BeginPopup("MyHelpMenu"))

  03f70	33 d2		 xor	 edx, edx
  03f72	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@IFBHGAGJ@MyHelpMenu?$AA@
  03f79	e8 00 00 00 00	 call	 ?BeginPopup@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopup
  03f7e	0f b6 c0	 movzx	 eax, al
  03f81	85 c0		 test	 eax, eax
  03f83	74 2b		 je	 SHORT $LN494@ShowDemoWi

; 1608 :                 {
; 1609 :                     ImGui::Selectable("Hello!");

  03f85	0f 57 d2	 xorps	 xmm2, xmm2
  03f88	0f 57 c9	 xorps	 xmm1, xmm1
  03f8b	48 8d 8d e4 24
	00 00		 lea	 rcx, QWORD PTR $T308[rbp]
  03f92	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  03f97	4c 8b c8	 mov	 r9, rax
  03f9a	45 33 c0	 xor	 r8d, r8d
  03f9d	33 d2		 xor	 edx, edx
  03f9f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KPGIMOHP@Hello?$CB?$AA@
  03fa6	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable

; 1610 :                     ImGui::EndPopup();

  03fab	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN494@ShowDemoWi:

; 1611 :                 }
; 1612 : 
; 1613 :                 // Demo Trailing Tabs: click the "+" button to add a new tab (in your app you may want to use a font icon instead of the "+")
; 1614 :                 // Note that we submit it before the regular tabs, but because of the ImGuiTabItemFlags_Trailing flag it will always appear at the end.
; 1615 :                 if (show_trailing_button)

  03fb0	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_trailing_button@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  03fb7	85 c0		 test	 eax, eax
  03fb9	74 45		 je	 SHORT $LN495@ShowDemoWi

; 1616 :                     if (ImGui::TabItemButton("+", ImGuiTabItemFlags_Trailing | ImGuiTabItemFlags_NoTooltip))

  03fbb	ba 90 00 00 00	 mov	 edx, 144		; 00000090H
  03fc0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01MIFGBAGJ@?$CL?$AA@
  03fc7	e8 00 00 00 00	 call	 ?TabItemButton@ImGui@@YA_NPEBDH@Z ; ImGui::TabItemButton
  03fcc	0f b6 c0	 movzx	 eax, al
  03fcf	85 c0		 test	 eax, eax
  03fd1	74 2d		 je	 SHORT $LN495@ShowDemoWi

; 1617 :                         active_tabs.push_back(next_tab_id++); // Add new tab

  03fd3	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?next_tab_id@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03fd9	89 85 04 25 00
	00		 mov	 DWORD PTR $T309[rbp], eax
  03fdf	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?next_tab_id@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03fe5	ff c0		 inc	 eax
  03fe7	89 05 00 00 00
	00		 mov	 DWORD PTR ?next_tab_id@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
  03fed	48 8d 95 04 25
	00 00		 lea	 rdx, QWORD PTR $T309[rbp]
  03ff4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?active_tabs@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@H@@A
  03ffb	e8 00 00 00 00	 call	 ?push_back@?$ImVector@H@@QEAAXAEBH@Z ; ImVector<int>::push_back
$LN495@ShowDemoWi:

; 1618 : 
; 1619 :                 // Submit our regular tabs
; 1620 :                 for (int n = 0; n < active_tabs.Size; )

  04000	c7 85 74 0b 00
	00 00 00 00 00	 mov	 DWORD PTR n$167[rbp], 0
$LN208@ShowDemoWi:
  0400a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?active_tabs@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@H@@A
  04010	39 85 74 0b 00
	00		 cmp	 DWORD PTR n$167[rbp], eax
  04016	0f 8d aa 00 00
	00		 jge	 $LN209@ShowDemoWi

; 1621 :                 {
; 1622 :                     bool open = true;

  0401c	c6 85 94 0b 00
	00 01		 mov	 BYTE PTR open$168[rbp], 1

; 1623 :                     char name[16];
; 1624 :                     snprintf(name, IM_ARRAYSIZE(name), "%04d", active_tabs[n]);

  04023	8b 95 74 0b 00
	00		 mov	 edx, DWORD PTR n$167[rbp]
  04029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?active_tabs@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@H@@A
  04030	e8 00 00 00 00	 call	 ??A?$ImVector@H@@QEAAAEAHH@Z ; ImVector<int>::operator[]
  04035	44 8b 08	 mov	 r9d, DWORD PTR [rax]
  04038	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04OCCELDNI@?$CF04d?$AA@
  0403f	ba 10 00 00 00	 mov	 edx, 16
  04044	48 8d 8d b8 0b
	00 00		 lea	 rcx, QWORD PTR name$169[rbp]
  0404b	e8 00 00 00 00	 call	 _snprintf

; 1625 :                     if (ImGui::BeginTabItem(name, &open, ImGuiTabItemFlags_None))

  04050	45 33 c0	 xor	 r8d, r8d
  04053	48 8d 95 94 0b
	00 00		 lea	 rdx, QWORD PTR open$168[rbp]
  0405a	48 8d 8d b8 0b
	00 00		 lea	 rcx, QWORD PTR name$169[rbp]
  04061	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginTabItem
  04066	0f b6 c0	 movzx	 eax, al
  04069	85 c0		 test	 eax, eax
  0406b	74 18		 je	 SHORT $LN497@ShowDemoWi

; 1626 :                     {
; 1627 :                         ImGui::Text("This is the %s tab!", name);

  0406d	48 8d 95 b8 0b
	00 00		 lea	 rdx, QWORD PTR name$169[rbp]
  04074	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@HMOLENGG@This?5is?5the?5?$CFs?5tab?$CB?$AA@
  0407b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1628 :                         ImGui::EndTabItem();

  04080	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN497@ShowDemoWi:

; 1629 :                     }
; 1630 : 
; 1631 :                     if (!open)

  04085	0f b6 85 94 0b
	00 00		 movzx	 eax, BYTE PTR open$168[rbp]
  0408c	85 c0		 test	 eax, eax
  0408e	75 23		 jne	 SHORT $LN498@ShowDemoWi

; 1632 :                         active_tabs.erase(active_tabs.Data + n);

  04090	48 63 85 74 0b
	00 00		 movsxd	 rax, DWORD PTR n$167[rbp]
  04097	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR ?active_tabs@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@H@@A+8
  0409e	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  040a2	48 8b d0	 mov	 rdx, rax
  040a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?active_tabs@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@H@@A
  040ac	e8 00 00 00 00	 call	 ?erase@?$ImVector@H@@QEAAPEAHPEBH@Z ; ImVector<int>::erase

; 1633 :                     else

  040b1	eb 0e		 jmp	 SHORT $LN499@ShowDemoWi
$LN498@ShowDemoWi:

; 1634 :                         n++;

  040b3	8b 85 74 0b 00
	00		 mov	 eax, DWORD PTR n$167[rbp]
  040b9	ff c0		 inc	 eax
  040bb	89 85 74 0b 00
	00		 mov	 DWORD PTR n$167[rbp], eax
$LN499@ShowDemoWi:

; 1635 :                 }

  040c1	e9 44 ff ff ff	 jmp	 $LN208@ShowDemoWi
$LN209@ShowDemoWi:

; 1636 : 
; 1637 :                 ImGui::EndTabBar();

  040c6	e8 00 00 00 00	 call	 ?EndTabBar@ImGui@@YAXXZ	; ImGui::EndTabBar
$LN491@ShowDemoWi:

; 1638 :             }
; 1639 :             ImGui::Separator();

  040cb	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 1640 :             ImGui::TreePop();

  040d0	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN487@ShowDemoWi:

; 1641 :         }
; 1642 :         ImGui::TreePop();

  040d5	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN213@ShowDemoWi:

; 1643 :     }
; 1644 : 
; 1645 :     // Plot/Graph widgets are not very good.
; 1646 :     // Consider using a third-party library such as ImPlot: https://github.com/epezent/implot
; 1647 :     // (see others https://github.com/ocornut/imgui/wiki/Useful-Extensions)
; 1648 :     IMGUI_DEMO_MARKER("Widgets/Plotting");

  040da	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  040e2	74 28		 je	 SHORT $LN500@ShowDemoWi
  040e4	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  040ea	05 4d 04 00 00	 add	 eax, 1101		; 0000044dH
  040ef	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  040f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@EOCJNFEM@Widgets?1Plotting?$AA@
  040fd	8b d0		 mov	 edx, eax
  040ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  04106	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN500@ShowDemoWi:
  0410c	33 c0		 xor	 eax, eax
  0410e	85 c0		 test	 eax, eax
  04110	75 c8		 jne	 SHORT $LN213@ShowDemoWi

; 1649 :     if (ImGui::TreeNode("Plotting"))

  04112	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08CDCEIJME@Plotting?$AA@
  04119	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  0411e	0f b6 c0	 movzx	 eax, al
  04121	85 c0		 test	 eax, eax
  04123	0f 84 5e 06 00
	00		 je	 $LN227@ShowDemoWi

; 1650 :     {
; 1651 :         static bool animate = true;
; 1652 :         ImGui::Checkbox("Animate", &animate);

  04129	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?animate@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07CCNCPHDL@Animate?$AA@
  04137	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox
$LN216@ShowDemoWi:

; 1653 : 
; 1654 :         // Plot as lines and plot as histogram
; 1655 :         IMGUI_DEMO_MARKER("Widgets/Plotting/PlotLines, PlotHistogram");

  0413c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  04144	74 28		 je	 SHORT $LN502@ShowDemoWi
  04146	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  0414c	05 54 04 00 00	 add	 eax, 1108		; 00000454H
  04151	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  04158	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CK@MBEHLAAJ@Widgets?1Plotting?1PlotLines?0?5Plot@
  0415f	8b d0		 mov	 edx, eax
  04161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  04168	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN502@ShowDemoWi:
  0416e	33 c0		 xor	 eax, eax
  04170	85 c0		 test	 eax, eax
  04172	75 c8		 jne	 SHORT $LN216@ShowDemoWi

; 1656 :         static float arr[] = { 0.6f, 0.1f, 1.0f, 0.5f, 0.92f, 0.1f, 0.2f };
; 1657 :         ImGui::PlotLines("Frame Times", arr, IM_ARRAYSIZE(arr));

  04174	0f 57 d2	 xorps	 xmm2, xmm2
  04177	0f 57 c9	 xorps	 xmm1, xmm1
  0417a	48 8d 8d 24 25
	00 00		 lea	 rcx, QWORD PTR $T310[rbp]
  04181	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  04186	c7 44 24 40 04
	00 00 00	 mov	 DWORD PTR [rsp+64], 4
  0418e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  04191	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  04196	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  0419e	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  041a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  041ac	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  041b2	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  041bb	45 33 c9	 xor	 r9d, r9d
  041be	41 b8 07 00 00
	00		 mov	 r8d, 7
  041c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?arr@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  041cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LJPKANLB@Frame?5Times?$AA@
  041d2	e8 00 00 00 00	 call	 ?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z ; ImGui::PlotLines

; 1658 :         ImGui::PlotHistogram("Histogram", arr, IM_ARRAYSIZE(arr), 0, NULL, 0.0f, 1.0f, ImVec2(0, 80.0f));

  041d7	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42a00000
  041df	0f 57 c9	 xorps	 xmm1, xmm1
  041e2	48 8d 8d 44 25
	00 00		 lea	 rcx, QWORD PTR $T311[rbp]
  041e9	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  041ee	c7 44 24 40 04
	00 00 00	 mov	 DWORD PTR [rsp+64], 4
  041f6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  041f9	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  041fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04206	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  0420c	0f 57 c0	 xorps	 xmm0, xmm0
  0420f	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  04215	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0421e	45 33 c9	 xor	 r9d, r9d
  04221	41 b8 07 00 00
	00		 mov	 r8d, 7
  04227	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?arr@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  0422e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09NBOAEPFB@Histogram?$AA@
  04235	e8 00 00 00 00	 call	 ?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z ; ImGui::PlotHistogram

; 1659 : 
; 1660 :         // Fill an array of contiguous float values to plot
; 1661 :         // Tip: If your float aren't contiguous but part of a structure, you can pass a pointer to your first float
; 1662 :         // and the sizeof() of your structure in the "stride" parameter.
; 1663 :         static float values[90] = {};
; 1664 :         static int values_offset = 0;
; 1665 :         static double refresh_time = 0.0;
; 1666 :         if (!animate || refresh_time == 0.0)

  0423a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?animate@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04241	85 c0		 test	 eax, eax
  04243	74 14		 je	 SHORT $LN504@ShowDemoWi
  04245	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?refresh_time@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4NA
  0424d	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  04255	7a 0f		 jp	 SHORT $LN217@ShowDemoWi
  04257	75 0d		 jne	 SHORT $LN217@ShowDemoWi
$LN504@ShowDemoWi:

; 1667 :             refresh_time = ImGui::GetTime();

  04259	e8 00 00 00 00	 call	 ?GetTime@ImGui@@YANXZ	; ImGui::GetTime
  0425e	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR ?refresh_time@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4NA, xmm0
$LN217@ShowDemoWi:

; 1668 :         while (refresh_time < ImGui::GetTime()) // Create data at fixed 60 Hz rate for the demo

  04266	e8 00 00 00 00	 call	 ?GetTime@ImGui@@YANXZ	; ImGui::GetTime
  0426b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR ?refresh_time@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4NA
  04273	0f 86 84 00 00
	00		 jbe	 $LN218@ShowDemoWi

; 1669 :         {
; 1670 :             static float phase = 0.0f;
; 1671 :             values[values_offset] = cosf(phase);

  04279	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?phase@?CDE@??ShowDemoWindowWidgets@@YAXXZ@4MA
  04281	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cosf
  04287	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR ?values_offset@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0428e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?values@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  04295	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 1672 :             values_offset = (values_offset + 1) % IM_ARRAYSIZE(values);

  0429a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?values_offset@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4HA
  042a0	ff c0		 inc	 eax
  042a2	99		 cdq
  042a3	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  042a8	f7 f9		 idiv	 ecx
  042aa	8b c2		 mov	 eax, edx
  042ac	89 05 00 00 00
	00		 mov	 DWORD PTR ?values_offset@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax

; 1673 :             phase += 0.10f * values_offset;

  042b2	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?values_offset@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4HA
  042ba	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3dcccccd
  042c2	f3 0f 59 c8	 mulss	 xmm1, xmm0
  042c6	0f 28 c1	 movaps	 xmm0, xmm1
  042c9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?phase@?CDE@??ShowDemoWindowWidgets@@YAXXZ@4MA
  042d1	f3 0f 58 c8	 addss	 xmm1, xmm0
  042d5	0f 28 c1	 movaps	 xmm0, xmm1
  042d8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?phase@?CDE@??ShowDemoWindowWidgets@@YAXXZ@4MA, xmm0

; 1674 :             refresh_time += 1.0f / 60.0f;

  042e0	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?refresh_time@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4NA
  042e8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f91111120000000
  042f0	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR ?refresh_time@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4NA, xmm0

; 1675 :         }

  042f8	e9 69 ff ff ff	 jmp	 $LN217@ShowDemoWi
$LN218@ShowDemoWi:

; 1676 : 
; 1677 :         // Plots can display overlay texts
; 1678 :         // (in this example, we will display an average value)
; 1679 :         {
; 1680 :             float average = 0.0f;

  042fd	0f 57 c0	 xorps	 xmm0, xmm0
  04300	f3 0f 11 85 e4
	0b 00 00	 movss	 DWORD PTR average$170[rbp], xmm0

; 1681 :             for (int n = 0; n < IM_ARRAYSIZE(values); n++)

  04308	c7 85 04 0c 00
	00 00 00 00 00	 mov	 DWORD PTR n$171[rbp], 0
  04312	eb 0e		 jmp	 SHORT $LN221@ShowDemoWi
$LN219@ShowDemoWi:
  04314	8b 85 04 0c 00
	00		 mov	 eax, DWORD PTR n$171[rbp]
  0431a	ff c0		 inc	 eax
  0431c	89 85 04 0c 00
	00		 mov	 DWORD PTR n$171[rbp], eax
$LN221@ShowDemoWi:
  04322	83 bd 04 0c 00
	00 5a		 cmp	 DWORD PTR n$171[rbp], 90 ; 0000005aH
  04329	7d 25		 jge	 SHORT $LN220@ShowDemoWi

; 1682 :                 average += values[n];

  0432b	48 63 85 04 0c
	00 00		 movsxd	 rax, DWORD PTR n$171[rbp]
  04332	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?values@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  04339	f3 0f 10 85 e4
	0b 00 00	 movss	 xmm0, DWORD PTR average$170[rbp]
  04341	f3 0f 58 04 81	 addss	 xmm0, DWORD PTR [rcx+rax*4]
  04346	f3 0f 11 85 e4
	0b 00 00	 movss	 DWORD PTR average$170[rbp], xmm0
  0434e	eb c4		 jmp	 SHORT $LN219@ShowDemoWi
$LN220@ShowDemoWi:

; 1683 :             average /= (float)IM_ARRAYSIZE(values);

  04350	f3 0f 10 85 e4
	0b 00 00	 movss	 xmm0, DWORD PTR average$170[rbp]
  04358	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42b40000
  04360	f3 0f 11 85 e4
	0b 00 00	 movss	 DWORD PTR average$170[rbp], xmm0

; 1684 :             char overlay[32];
; 1685 :             sprintf(overlay, "avg %f", average);

  04368	f3 0f 5a 85 e4
	0b 00 00	 cvtss2sd xmm0, DWORD PTR average$170[rbp]
  04370	0f 28 d0	 movaps	 xmm2, xmm0
  04373	66 49 0f 7e d0	 movq	 r8, xmm2
  04378	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06BECIMFEF@avg?5?$CFf?$AA@
  0437f	48 8d 8d 28 0c
	00 00		 lea	 rcx, QWORD PTR overlay$172[rbp]
  04386	e8 00 00 00 00	 call	 sprintf

; 1686 :             ImGui::PlotLines("Lines", values, IM_ARRAYSIZE(values), values_offset, overlay, -1.0f, 1.0f, ImVec2(0, 80.0f));

  0438b	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42a00000
  04393	0f 57 c9	 xorps	 xmm1, xmm1
  04396	48 8d 8d 64 25
	00 00		 lea	 rcx, QWORD PTR $T312[rbp]
  0439d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  043a2	c7 44 24 40 04
	00 00 00	 mov	 DWORD PTR [rsp+64], 4
  043aa	48 8b 00	 mov	 rax, QWORD PTR [rax]
  043ad	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  043b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  043ba	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  043c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  043c8	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  043ce	48 8d 85 28 0c
	00 00		 lea	 rax, QWORD PTR overlay$172[rbp]
  043d5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  043da	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR ?values_offset@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4HA
  043e1	41 b8 5a 00 00
	00		 mov	 r8d, 90			; 0000005aH
  043e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?values@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  043ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05DDHCCCLJ@Lines?$AA@
  043f5	e8 00 00 00 00	 call	 ?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z ; ImGui::PlotLines

; 1687 :         }
; 1688 : 
; 1689 :         // Use functions to generate output
; 1690 :         // FIXME: This is rather awkward because current plot API only pass in indices.
; 1691 :         // We probably want an API passing floats and user provide sample rate/count.
; 1692 :         struct Funcs
; 1693 :         {
; 1694 :             static float Sin(void*, int i) { return sinf(i * 0.1f); }
; 1695 :             static float Saw(void*, int i) { return (i & 1) ? 1.0f : -1.0f; }
; 1696 :         };
; 1697 :         static int func_type = 0, display_count = 70;
; 1698 :         ImGui::Separator();

  043fa	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 1699 :         ImGui::SetNextItemWidth(ImGui::GetFontSize() * 8);

  043ff	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  04404	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41000000
  0440c	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth

; 1700 :         ImGui::Combo("func", &func_type, "Sin\0Saw\0");

  04411	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  04417	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08OLJDEBGC@Sin?$AASaw?$AA?$AA@
  0441e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?func_type@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4HA
  04425	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04HPNHAEOP@func?$AA@
  0442c	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAH0H@Z ; ImGui::Combo

; 1701 :         ImGui::SameLine();

  04431	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  04439	0f 57 c0	 xorps	 xmm0, xmm0
  0443c	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 1702 :         ImGui::SliderInt("Sample count", &display_count, 1, 400);

  04441	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  04449	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  04450	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  04455	41 b9 90 01 00
	00		 mov	 r9d, 400		; 00000190H
  0445b	41 b8 01 00 00
	00		 mov	 r8d, 1
  04461	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?display_count@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4HA
  04468	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LHCNOOOP@Sample?5count?$AA@
  0446f	e8 00 00 00 00	 call	 ?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z ; ImGui::SliderInt

; 1703 :         float (*func)(void*, int) = (func_type == 0) ? Funcs::Sin : Funcs::Saw;

  04474	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?func_type@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4HA, 0
  0447b	75 10		 jne	 SHORT $LN636@ShowDemoWi
  0447d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?Sin@Funcs@?CCM@??ShowDemoWindowWidgets@@YAXXZ@SAMPEAXH@Z ; `ShowDemoWindowWidgets'::`556'::Funcs::Sin
  04484	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv2829[rbp], rax
  0448b	eb 0e		 jmp	 SHORT $LN637@ShowDemoWi
$LN636@ShowDemoWi:
  0448d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?Saw@Funcs@?CCM@??ShowDemoWindowWidgets@@YAXXZ@SAMPEAXH@Z ; `ShowDemoWindowWidgets'::`556'::Funcs::Saw
  04494	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv2829[rbp], rax
$LN637@ShowDemoWi:
  0449b	48 8b 85 48 2b
	00 00		 mov	 rax, QWORD PTR tv2829[rbp]
  044a2	48 89 85 68 0c
	00 00		 mov	 QWORD PTR func$173[rbp], rax

; 1704 :         ImGui::PlotLines("Lines", func, NULL, display_count, 0, NULL, -1.0f, 1.0f, ImVec2(0, 80));

  044a9	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42a00000
  044b1	0f 57 c9	 xorps	 xmm1, xmm1
  044b4	48 8d 8d 84 25
	00 00		 lea	 rcx, QWORD PTR $T313[rbp]
  044bb	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  044c0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  044c3	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  044c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  044d0	f3 0f 11 44 24
	38		 movss	 DWORD PTR [rsp+56], xmm0
  044d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  044de	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  044e4	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  044ed	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  044f5	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR ?display_count@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4HA
  044fc	45 33 c0	 xor	 r8d, r8d
  044ff	48 8b 95 68 0c
	00 00		 mov	 rdx, QWORD PTR func$173[rbp]
  04506	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05DDHCCCLJ@Lines?$AA@
  0450d	e8 00 00 00 00	 call	 ?PlotLines@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z ; ImGui::PlotLines

; 1705 :         ImGui::PlotHistogram("Histogram", func, NULL, display_count, 0, NULL, -1.0f, 1.0f, ImVec2(0, 80));

  04512	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42a00000
  0451a	0f 57 c9	 xorps	 xmm1, xmm1
  0451d	48 8d 8d a4 25
	00 00		 lea	 rcx, QWORD PTR $T314[rbp]
  04524	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  04529	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0452c	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  04531	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04539	f3 0f 11 44 24
	38		 movss	 DWORD PTR [rsp+56], xmm0
  0453f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  04547	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  0454d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  04556	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  0455e	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR ?display_count@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4HA
  04565	45 33 c0	 xor	 r8d, r8d
  04568	48 8b 95 68 0c
	00 00		 mov	 rdx, QWORD PTR func$173[rbp]
  0456f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09NBOAEPFB@Histogram?$AA@
  04576	e8 00 00 00 00	 call	 ?PlotHistogram@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z ; ImGui::PlotHistogram

; 1706 :         ImGui::Separator();

  0457b	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator
$LN224@ShowDemoWi:

; 1707 : 
; 1708 :         // Animate a simple progress bar
; 1709 :         IMGUI_DEMO_MARKER("Widgets/Plotting/ProgressBar");

  04580	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  04588	74 28		 je	 SHORT $LN505@ShowDemoWi
  0458a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  04590	05 8a 04 00 00	 add	 eax, 1162		; 0000048aH
  04595	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0459c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BN@JJJCOIGD@Widgets?1Plotting?1ProgressBar?$AA@
  045a3	8b d0		 mov	 edx, eax
  045a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  045ac	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN505@ShowDemoWi:
  045b2	33 c0		 xor	 eax, eax
  045b4	85 c0		 test	 eax, eax
  045b6	75 c8		 jne	 SHORT $LN224@ShowDemoWi

; 1710 :         static float progress = 0.0f, progress_dir = 1.0f;
; 1711 :         if (animate)

  045b8	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?animate@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  045bf	85 c0		 test	 eax, eax
  045c1	0f 84 b3 00 00
	00		 je	 $LN506@ShowDemoWi

; 1712 :         {
; 1713 :             progress += progress_dir * 0.4f * ImGui::GetIO().DeltaTime;

  045c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?progress_dir@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4MA
  045cf	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ecccccd
  045d7	f3 0f 11 85 44
	2b 00 00	 movss	 DWORD PTR tv2865[rbp], xmm0
  045df	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  045e4	f3 0f 10 85 44
	2b 00 00	 movss	 xmm0, DWORD PTR tv2865[rbp]
  045ec	f3 0f 59 40 10	 mulss	 xmm0, DWORD PTR [rax+16]
  045f1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?progress@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4MA
  045f9	f3 0f 58 c8	 addss	 xmm1, xmm0
  045fd	0f 28 c1	 movaps	 xmm0, xmm1
  04600	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?progress@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4MA, xmm0

; 1714 :             if (progress >= +1.1f) { progress = +1.1f; progress_dir *= -1.0f; }

  04608	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?progress@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4MA
  04610	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f8ccccd
  04617	72 28		 jb	 SHORT $LN507@ShowDemoWi
  04619	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  04621	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?progress@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4MA, xmm0
  04629	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?progress_dir@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4MA
  04631	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@bf800000
  04639	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?progress_dir@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4MA, xmm0
$LN507@ShowDemoWi:

; 1715 :             if (progress <= -0.1f) { progress = -0.1f; progress_dir *= -1.0f; }

  04641	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  04649	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?progress@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4MA
  04650	72 28		 jb	 SHORT $LN506@ShowDemoWi
  04652	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  0465a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?progress@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4MA, xmm0
  04662	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?progress_dir@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4MA
  0466a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@bf800000
  04672	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?progress_dir@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4MA, xmm0
$LN506@ShowDemoWi:

; 1716 :         }
; 1717 : 
; 1718 :         // Typically we would use ImVec2(-1.0f,0.0f) or ImVec2(-FLT_MIN,0.0f) to use all available width,
; 1719 :         // or ImVec2(width,0.0f) for a specified width. ImVec2(0.0f,0.0f) uses ItemWidth.
; 1720 :         ImGui::ProgressBar(progress, ImVec2(0.0f, 0.0f));

  0467a	0f 57 d2	 xorps	 xmm2, xmm2
  0467d	0f 57 c9	 xorps	 xmm1, xmm1
  04680	48 8d 8d c4 25
	00 00		 lea	 rcx, QWORD PTR $T315[rbp]
  04687	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0468c	45 33 c0	 xor	 r8d, r8d
  0468f	48 8b d0	 mov	 rdx, rax
  04692	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?progress@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4MA
  0469a	e8 00 00 00 00	 call	 ?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z ; ImGui::ProgressBar

; 1721 :         ImGui::SameLine(0.0f, ImGui::GetStyle().ItemInnerSpacing.x);

  0469f	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  046a4	f3 0f 10 48 54	 movss	 xmm1, DWORD PTR [rax+84]
  046a9	0f 57 c0	 xorps	 xmm0, xmm0
  046ac	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 1722 :         ImGui::Text("Progress Bar");

  046b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HDMPBJBE@Progress?5Bar?$AA@
  046b8	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1723 : 
; 1724 :         float progress_saturated = IM_CLAMP(progress, 0.0f, 1.0f);

  046bd	0f 57 c0	 xorps	 xmm0, xmm0
  046c0	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?progress@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4MA
  046c7	76 0d		 jbe	 SHORT $LN640@ShowDemoWi
  046c9	0f 57 c0	 xorps	 xmm0, xmm0
  046cc	f3 0f 11 85 44
	2b 00 00	 movss	 DWORD PTR tv2890[rbp], xmm0
  046d4	eb 43		 jmp	 SHORT $LN641@ShowDemoWi
$LN640@ShowDemoWi:
  046d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?progress@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4MA
  046de	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  046e5	76 12		 jbe	 SHORT $LN638@ShowDemoWi
  046e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  046ef	f3 0f 11 85 48
	2b 00 00	 movss	 DWORD PTR tv2889[rbp], xmm0
  046f7	eb 10		 jmp	 SHORT $LN639@ShowDemoWi
$LN638@ShowDemoWi:
  046f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?progress@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4MA
  04701	f3 0f 11 85 48
	2b 00 00	 movss	 DWORD PTR tv2889[rbp], xmm0
$LN639@ShowDemoWi:
  04709	f3 0f 10 85 48
	2b 00 00	 movss	 xmm0, DWORD PTR tv2889[rbp]
  04711	f3 0f 11 85 44
	2b 00 00	 movss	 DWORD PTR tv2890[rbp], xmm0
$LN641@ShowDemoWi:
  04719	f3 0f 10 85 44
	2b 00 00	 movss	 xmm0, DWORD PTR tv2890[rbp]
  04721	f3 0f 11 85 84
	0c 00 00	 movss	 DWORD PTR progress_saturated$174[rbp], xmm0

; 1725 :         char buf[32];
; 1726 :         sprintf(buf, "%d/%d", (int)(progress_saturated * 1753), 1753);

  04729	f3 0f 10 85 84
	0c 00 00	 movss	 xmm0, DWORD PTR progress_saturated$174[rbp]
  04731	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@44db2000
  04739	f3 0f 2c c0	 cvttss2si eax, xmm0
  0473d	41 b9 d9 06 00
	00		 mov	 r9d, 1753		; 000006d9H
  04743	44 8b c0	 mov	 r8d, eax
  04746	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05LCKIIOJE@?$CFd?1?$CFd?$AA@
  0474d	48 8d 8d a8 0c
	00 00		 lea	 rcx, QWORD PTR buf$175[rbp]
  04754	e8 00 00 00 00	 call	 sprintf

; 1727 :         ImGui::ProgressBar(progress, ImVec2(0.f, 0.f), buf);

  04759	0f 57 d2	 xorps	 xmm2, xmm2
  0475c	0f 57 c9	 xorps	 xmm1, xmm1
  0475f	48 8d 8d e4 25
	00 00		 lea	 rcx, QWORD PTR $T316[rbp]
  04766	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0476b	4c 8d 85 a8 0c
	00 00		 lea	 r8, QWORD PTR buf$175[rbp]
  04772	48 8b d0	 mov	 rdx, rax
  04775	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?progress@?CCM@??ShowDemoWindowWidgets@@YAXXZ@4MA
  0477d	e8 00 00 00 00	 call	 ?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z ; ImGui::ProgressBar

; 1728 :         ImGui::TreePop();

  04782	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN227@ShowDemoWi:

; 1729 :     }
; 1730 : 
; 1731 :     IMGUI_DEMO_MARKER("Widgets/Color");

  04787	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0478f	74 28		 je	 SHORT $LN509@ShowDemoWi
  04791	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  04797	05 a0 04 00 00	 add	 eax, 1184		; 000004a0H
  0479c	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  047a3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@ILCICGHI@Widgets?1Color?$AA@
  047aa	8b d0		 mov	 edx, eax
  047ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  047b3	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN509@ShowDemoWi:
  047b9	33 c0		 xor	 eax, eax
  047bb	85 c0		 test	 eax, eax
  047bd	75 c8		 jne	 SHORT $LN227@ShowDemoWi

; 1732 :     if (ImGui::TreeNode("Color/Picker Widgets"))

  047bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@GELOCOAL@Color?1Picker?5Widgets?$AA@
  047c6	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  047cb	0f b6 c0	 movzx	 eax, al
  047ce	85 c0		 test	 eax, eax
  047d0	0f 84 3c 0f 00
	00		 je	 $LN262@ShowDemoWi

; 1733 :     {
; 1734 :         static ImVec4 color = ImVec4(114.0f / 255.0f, 144.0f / 255.0f, 154.0f / 255.0f, 200.0f / 255.0f);

  047d6	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  047db	8b c0		 mov	 eax, eax
  047dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  047e3	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  047ec	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  047f0	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  047f3	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS2@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
  047f9	7e 54		 jle	 SHORT $LN228@ShowDemoWi
  047fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS2@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  04802	e8 00 00 00 00	 call	 _Init_thread_header
  04807	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS2@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA, -1
  0480e	75 3f		 jne	 SHORT $LN228@ShowDemoWi
  04810	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f48c8c9
  04818	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0481e	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f1a9a9b
  04826	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f109091
  0482e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ee4e4e5
  04836	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  0483d	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  04842	90		 npad	 1
  04843	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS2@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0484a	e8 00 00 00 00	 call	 _Init_thread_footer
$LN228@ShowDemoWi:

; 1735 : 
; 1736 :         static bool alpha_preview = true;
; 1737 :         static bool alpha_half_preview = false;
; 1738 :         static bool drag_and_drop = true;
; 1739 :         static bool options_menu = true;
; 1740 :         static bool hdr = false;
; 1741 :         ImGui::Checkbox("With Alpha Preview", &alpha_preview);

  0484f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?alpha_preview@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04856	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@KJCAPGNJ@With?5Alpha?5Preview?$AA@
  0485d	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 1742 :         ImGui::Checkbox("With Half Alpha Preview", &alpha_half_preview);

  04862	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?alpha_half_preview@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04869	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@FJEMIBKC@With?5Half?5Alpha?5Preview?$AA@
  04870	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 1743 :         ImGui::Checkbox("With Drag and Drop", &drag_and_drop);

  04875	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?drag_and_drop@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0487c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@KEFEHFM@With?5Drag?5and?5Drop?$AA@
  04883	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 1744 :         ImGui::Checkbox("With Options Menu", &options_menu); ImGui::SameLine(); HelpMarker("Right-click on the individual color widget to show options.");

  04888	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?options_menu@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0488f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@EJIAMDNC@With?5Options?5Menu?$AA@
  04896	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox
  0489b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  048a3	0f 57 c0	 xorps	 xmm0, xmm0
  048a6	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  048ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DM@KEMLELAP@Right?9click?5on?5the?5individual?5co@
  048b2	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1745 :         ImGui::Checkbox("With HDR", &hdr); ImGui::SameLine(); HelpMarker("Currently all this does is to lift the 0..1 limits on dragging widgets.");

  048b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdr@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  048be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08FMJOEAGN@With?5HDR?$AA@
  048c5	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox
  048ca	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  048d2	0f 57 c0	 xorps	 xmm0, xmm0
  048d5	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  048da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EI@FHFBEIHN@Currently?5all?5this?5does?5is?5to?5li@
  048e1	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1746 :         ImGuiColorEditFlags misc_flags = (hdr ? ImGuiColorEditFlags_HDR : 0) | (drag_and_drop ? 0 : ImGuiColorEditFlags_NoDragDrop) | (alpha_half_preview ? ImGuiColorEditFlags_AlphaPreviewHalf : (alpha_preview ? ImGuiColorEditFlags_AlphaPreview : 0)) | (options_menu ? 0 : ImGuiColorEditFlags_NoOptions);

  048e6	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?hdr@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  048ed	85 c0		 test	 eax, eax
  048ef	74 0c		 je	 SHORT $LN642@ShowDemoWi
  048f1	c7 85 44 2b 00
	00 00 00 08 00	 mov	 DWORD PTR tv2950[rbp], 524288 ; 00080000H
  048fb	eb 0a		 jmp	 SHORT $LN643@ShowDemoWi
$LN642@ShowDemoWi:
  048fd	c7 85 44 2b 00
	00 00 00 00 00	 mov	 DWORD PTR tv2950[rbp], 0
$LN643@ShowDemoWi:
  04907	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_and_drop@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0490e	85 c0		 test	 eax, eax
  04910	74 0c		 je	 SHORT $LN644@ShowDemoWi
  04912	c7 85 48 2b 00
	00 00 00 00 00	 mov	 DWORD PTR tv2953[rbp], 0
  0491c	eb 0a		 jmp	 SHORT $LN645@ShowDemoWi
$LN644@ShowDemoWi:
  0491e	c7 85 48 2b 00
	00 00 02 00 00	 mov	 DWORD PTR tv2953[rbp], 512 ; 00000200H
$LN645@ShowDemoWi:
  04928	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?alpha_half_preview@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0492f	85 c0		 test	 eax, eax
  04931	74 0c		 je	 SHORT $LN648@ShowDemoWi
  04933	c7 85 4c 2b 00
	00 00 00 04 00	 mov	 DWORD PTR tv2960[rbp], 262144 ; 00040000H
  0493d	eb 2d		 jmp	 SHORT $LN649@ShowDemoWi
$LN648@ShowDemoWi:
  0493f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?alpha_preview@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04946	85 c0		 test	 eax, eax
  04948	74 0c		 je	 SHORT $LN646@ShowDemoWi
  0494a	c7 85 50 2b 00
	00 00 00 02 00	 mov	 DWORD PTR tv2957[rbp], 131072 ; 00020000H
  04954	eb 0a		 jmp	 SHORT $LN647@ShowDemoWi
$LN646@ShowDemoWi:
  04956	c7 85 50 2b 00
	00 00 00 00 00	 mov	 DWORD PTR tv2957[rbp], 0
$LN647@ShowDemoWi:
  04960	8b 85 50 2b 00
	00		 mov	 eax, DWORD PTR tv2957[rbp]
  04966	89 85 4c 2b 00
	00		 mov	 DWORD PTR tv2960[rbp], eax
$LN649@ShowDemoWi:
  0496c	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?options_menu@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04973	85 c0		 test	 eax, eax
  04975	74 0c		 je	 SHORT $LN650@ShowDemoWi
  04977	c7 85 54 2b 00
	00 00 00 00 00	 mov	 DWORD PTR tv2964[rbp], 0
  04981	eb 0a		 jmp	 SHORT $LN651@ShowDemoWi
$LN650@ShowDemoWi:
  04983	c7 85 54 2b 00
	00 08 00 00 00	 mov	 DWORD PTR tv2964[rbp], 8
$LN651@ShowDemoWi:
  0498d	8b 85 48 2b 00
	00		 mov	 eax, DWORD PTR tv2953[rbp]
  04993	8b 8d 44 2b 00
	00		 mov	 ecx, DWORD PTR tv2950[rbp]
  04999	0b c8		 or	 ecx, eax
  0499b	8b c1		 mov	 eax, ecx
  0499d	0b 85 4c 2b 00
	00		 or	 eax, DWORD PTR tv2960[rbp]
  049a3	0b 85 54 2b 00
	00		 or	 eax, DWORD PTR tv2964[rbp]
  049a9	89 85 e4 0c 00
	00		 mov	 DWORD PTR misc_flags$176[rbp], eax
$LN231@ShowDemoWi:

; 1747 : 
; 1748 :         IMGUI_DEMO_MARKER("Widgets/Color/ColorEdit");

  049af	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  049b7	74 28		 je	 SHORT $LN511@ShowDemoWi
  049b9	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  049bf	05 b1 04 00 00	 add	 eax, 1201		; 000004b1H
  049c4	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  049cb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BI@MDJGKOGL@Widgets?1Color?1ColorEdit?$AA@
  049d2	8b d0		 mov	 edx, eax
  049d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  049db	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN511@ShowDemoWi:
  049e1	33 c0		 xor	 eax, eax
  049e3	85 c0		 test	 eax, eax
  049e5	75 c8		 jne	 SHORT $LN231@ShowDemoWi

; 1749 :         ImGui::Text("Color widget:");

  049e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NOEDKBGC@Color?5widget?3?$AA@
  049ee	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1750 :         ImGui::SameLine(); HelpMarker(

  049f3	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  049fb	0f 57 c0	 xorps	 xmm0, xmm0
  049fe	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  04a03	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GG@EFLMCGPH@Click?5on?5the?5color?5square?5to?5ope@
  04a0a	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1751 :             "Click on the color square to open a color picker.\n"
; 1752 :             "CTRL+click on individual component to input value.\n");
; 1753 :         ImGui::ColorEdit3("MyColor##1", (float*)&color, misc_flags);

  04a0f	44 8b 85 e4 0c
	00 00		 mov	 r8d, DWORD PTR misc_flags$176[rbp]
  04a16	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  04a1d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@BFFLOOBG@MyColor?$CD?$CD1?$AA@
  04a24	e8 00 00 00 00	 call	 ?ColorEdit3@ImGui@@YA_NPEBDQEAMH@Z ; ImGui::ColorEdit3
$LN234@ShowDemoWi:

; 1754 : 
; 1755 :         IMGUI_DEMO_MARKER("Widgets/Color/ColorEdit (HSV, with Alpha)");

  04a29	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  04a31	74 28		 je	 SHORT $LN512@ShowDemoWi
  04a33	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  04a39	05 b8 04 00 00	 add	 eax, 1208		; 000004b8H
  04a3e	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  04a45	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CK@HAPIFBGC@Widgets?1Color?1ColorEdit?5?$CIHSV?0?5wi@
  04a4c	8b d0		 mov	 edx, eax
  04a4e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  04a55	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN512@ShowDemoWi:
  04a5b	33 c0		 xor	 eax, eax
  04a5d	85 c0		 test	 eax, eax
  04a5f	75 c8		 jne	 SHORT $LN234@ShowDemoWi

; 1756 :         ImGui::Text("Color widget HSV with Alpha:");

  04a61	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@GLLLKGMC@Color?5widget?5HSV?5with?5Alpha?3?$AA@
  04a68	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1757 :         ImGui::ColorEdit4("MyColor##2", (float*)&color, ImGuiColorEditFlags_DisplayHSV | misc_flags);

  04a6d	8b 85 e4 0c 00
	00		 mov	 eax, DWORD PTR misc_flags$176[rbp]
  04a73	0f ba e8 15	 bts	 eax, 21
  04a77	44 8b c0	 mov	 r8d, eax
  04a7a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  04a81	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DOHGLNNF@MyColor?$CD?$CD2?$AA@
  04a88	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z ; ImGui::ColorEdit4
$LN237@ShowDemoWi:

; 1758 : 
; 1759 :         IMGUI_DEMO_MARKER("Widgets/Color/ColorEdit (float display)");

  04a8d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  04a95	74 28		 je	 SHORT $LN513@ShowDemoWi
  04a97	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  04a9d	05 bc 04 00 00	 add	 eax, 1212		; 000004bcH
  04aa2	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  04aa9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CI@DKIDAOAB@Widgets?1Color?1ColorEdit?5?$CIfloat?5d@
  04ab0	8b d0		 mov	 edx, eax
  04ab2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  04ab9	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN513@ShowDemoWi:
  04abf	33 c0		 xor	 eax, eax
  04ac1	85 c0		 test	 eax, eax
  04ac3	75 c8		 jne	 SHORT $LN237@ShowDemoWi

; 1760 :         ImGui::Text("Color widget with Float Display:");

  04ac5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@GHOEMJO@Color?5widget?5with?5Float?5Display?3@
  04acc	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1761 :         ImGui::ColorEdit4("MyColor##2f", (float*)&color, ImGuiColorEditFlags_Float | misc_flags);

  04ad1	8b 85 e4 0c 00
	00		 mov	 eax, DWORD PTR misc_flags$176[rbp]
  04ad7	0f ba e8 18	 bts	 eax, 24
  04adb	44 8b c0	 mov	 r8d, eax
  04ade	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  04ae5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MFCAJMMH@MyColor?$CD?$CD2f?$AA@
  04aec	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z ; ImGui::ColorEdit4
$LN240@ShowDemoWi:

; 1762 : 
; 1763 :         IMGUI_DEMO_MARKER("Widgets/Color/ColorButton (with Picker)");

  04af1	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  04af9	74 28		 je	 SHORT $LN514@ShowDemoWi
  04afb	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  04b01	05 c0 04 00 00	 add	 eax, 1216		; 000004c0H
  04b06	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  04b0d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CI@KPPBOEAG@Widgets?1Color?1ColorButton?5?$CIwith?5@
  04b14	8b d0		 mov	 edx, eax
  04b16	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  04b1d	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN514@ShowDemoWi:
  04b23	33 c0		 xor	 eax, eax
  04b25	85 c0		 test	 eax, eax
  04b27	75 c8		 jne	 SHORT $LN240@ShowDemoWi

; 1764 :         ImGui::Text("Color button with Picker:");

  04b29	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@EFMOKOBO@Color?5button?5with?5Picker?3?$AA@
  04b30	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1765 :         ImGui::SameLine(); HelpMarker(

  04b35	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  04b3d	0f 57 c0	 xorps	 xmm0, xmm0
  04b40	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  04b45	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0NH@CMBOCHE@With?5the?5ImGuiColorEditFlags_NoI@
  04b4c	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1766 :             "With the ImGuiColorEditFlags_NoInputs flag you can hide all the slider/text inputs.\n"
; 1767 :             "With the ImGuiColorEditFlags_NoLabel flag you can pass a non-empty label which will only "
; 1768 :             "be used for the tooltip and picker popup.");
; 1769 :         ImGui::ColorEdit4("MyColor##3", (float*)&color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel | misc_flags);

  04b51	8b 85 e4 0c 00
	00		 mov	 eax, DWORD PTR misc_flags$176[rbp]
  04b57	0d a0 00 00 00	 or	 eax, 160		; 000000a0H
  04b5c	44 8b c0	 mov	 r8d, eax
  04b5f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  04b66	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@CHGNIMJE@MyColor?$CD?$CD3?$AA@
  04b6d	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z ; ImGui::ColorEdit4
$LN243@ShowDemoWi:

; 1770 : 
; 1771 :         IMGUI_DEMO_MARKER("Widgets/Color/ColorButton (with custom Picker popup)");

  04b72	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  04b7a	74 28		 je	 SHORT $LN515@ShowDemoWi
  04b7c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  04b82	05 c8 04 00 00	 add	 eax, 1224		; 000004c8H
  04b87	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  04b8e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DF@LKFAKHKL@Widgets?1Color?1ColorButton?5?$CIwith?5@
  04b95	8b d0		 mov	 edx, eax
  04b97	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  04b9e	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN515@ShowDemoWi:
  04ba4	33 c0		 xor	 eax, eax
  04ba6	85 c0		 test	 eax, eax
  04ba8	75 c8		 jne	 SHORT $LN243@ShowDemoWi

; 1772 :         ImGui::Text("Color button with Custom Picker Popup:");

  04baa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CH@HJNHAHAP@Color?5button?5with?5Custom?5Picker?5@
  04bb1	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1773 : 
; 1774 :         // Generate a default palette. The palette will persist and can be edited.
; 1775 :         static bool saved_palette_init = true;
; 1776 :         static ImVec4 saved_palette[32] = {};

  04bb6	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  04bbb	8b c0		 mov	 eax, eax
  04bbd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04bc3	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04bcc	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  04bd0	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  04bd3	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS3@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
  04bd9	7e 3f		 jle	 SHORT $LN244@ShowDemoWi
  04bdb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS3@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  04be2	e8 00 00 00 00	 call	 _Init_thread_header
  04be7	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS3@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA, -1
  04bee	75 2a		 jne	 SHORT $LN244@ShowDemoWi
  04bf0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??0ImVec4@@QEAA@XZ ; ImVec4::ImVec4
  04bf7	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  04bfd	ba 10 00 00 00	 mov	 edx, 16
  04c02	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?saved_palette@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A
  04c09	e8 00 00 00 00	 call	 ??_H@YAXPEAX_K1P6APEAX0@Z@Z
  04c0e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS3@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  04c15	e8 00 00 00 00	 call	 _Init_thread_footer
$LN244@ShowDemoWi:

; 1777 :         if (saved_palette_init)

  04c1a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?saved_palette_init@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04c21	85 c0		 test	 eax, eax
  04c23	0f 84 cb 00 00
	00		 je	 $LN516@ShowDemoWi

; 1778 :         {
; 1779 :             for (int n = 0; n < IM_ARRAYSIZE(saved_palette); n++)

  04c29	c7 85 04 0d 00
	00 00 00 00 00	 mov	 DWORD PTR n$177[rbp], 0
  04c33	eb 0e		 jmp	 SHORT $LN247@ShowDemoWi
$LN245@ShowDemoWi:
  04c35	8b 85 04 0d 00
	00		 mov	 eax, DWORD PTR n$177[rbp]
  04c3b	ff c0		 inc	 eax
  04c3d	89 85 04 0d 00
	00		 mov	 DWORD PTR n$177[rbp], eax
$LN247@ShowDemoWi:
  04c43	83 bd 04 0d 00
	00 20		 cmp	 DWORD PTR n$177[rbp], 32 ; 00000020H
  04c4a	0f 8d 9d 00 00
	00		 jge	 $LN246@ShowDemoWi

; 1780 :             {
; 1781 :                 ImGui::ColorConvertHSVtoRGB(n / 31.0f, 0.8f, 0.8f,

  04c50	48 63 85 04 0d
	00 00		 movsxd	 rax, DWORD PTR n$177[rbp]
  04c57	48 6b c0 10	 imul	 rax, rax, 16
  04c5b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?saved_palette@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A
  04c62	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  04c67	48 63 8d 04 0d
	00 00		 movsxd	 rcx, DWORD PTR n$177[rbp]
  04c6e	48 6b c9 10	 imul	 rcx, rcx, 16
  04c72	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?saved_palette@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A
  04c79	48 8d 4c 0a 04	 lea	 rcx, QWORD PTR [rdx+rcx+4]
  04c7e	48 63 95 04 0d
	00 00		 movsxd	 rdx, DWORD PTR n$177[rbp]
  04c85	48 6b d2 10	 imul	 rdx, rdx, 16
  04c89	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?saved_palette@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A
  04c90	4c 03 c2	 add	 r8, rdx
  04c93	49 8b d0	 mov	 rdx, r8
  04c96	f3 0f 2a 85 04
	0d 00 00	 cvtsi2ss xmm0, DWORD PTR n$177[rbp]
  04c9e	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41f80000
  04ca6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  04cab	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  04cb0	4c 8b ca	 mov	 r9, rdx
  04cb3	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f4ccccd
  04cbb	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f4ccccd
  04cc3	e8 00 00 00 00	 call	 ?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z ; ImGui::ColorConvertHSVtoRGB

; 1782 :                     saved_palette[n].x, saved_palette[n].y, saved_palette[n].z);
; 1783 :                 saved_palette[n].w = 1.0f; // Alpha

  04cc8	48 63 85 04 0d
	00 00		 movsxd	 rax, DWORD PTR n$177[rbp]
  04ccf	48 6b c0 10	 imul	 rax, rax, 16
  04cd3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?saved_palette@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A
  04cda	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04ce2	f3 0f 11 44 01
	0c		 movss	 DWORD PTR [rcx+rax+12], xmm0

; 1784 :             }

  04ce8	e9 48 ff ff ff	 jmp	 $LN245@ShowDemoWi
$LN246@ShowDemoWi:

; 1785 :             saved_palette_init = false;

  04ced	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?saved_palette_init@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA, 0
$LN516@ShowDemoWi:

; 1786 :         }
; 1787 : 
; 1788 :         static ImVec4 backup_color;

  04cf4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  04cf9	8b c0		 mov	 eax, eax
  04cfb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  04d01	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  04d0a	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  04d0e	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  04d11	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS4@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
  04d17	7e 2e		 jle	 SHORT $LN248@ShowDemoWi
  04d19	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS4@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  04d20	e8 00 00 00 00	 call	 _Init_thread_header
  04d25	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS4@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA, -1
  04d2c	75 19		 jne	 SHORT $LN248@ShowDemoWi
  04d2e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?backup_color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  04d35	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@XZ	; ImVec4::ImVec4
  04d3a	90		 npad	 1
  04d3b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS4@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  04d42	e8 00 00 00 00	 call	 _Init_thread_footer
$LN248@ShowDemoWi:

; 1789 :         bool open_popup = ImGui::ColorButton("MyColor##3b", color, misc_flags);

  04d47	0f 57 d2	 xorps	 xmm2, xmm2
  04d4a	0f 57 c9	 xorps	 xmm1, xmm1
  04d4d	48 8d 8d 04 26
	00 00		 lea	 rcx, QWORD PTR $T317[rbp]
  04d54	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  04d59	4c 8b c8	 mov	 r9, rax
  04d5c	44 8b 85 e4 0c
	00 00		 mov	 r8d, DWORD PTR misc_flags$176[rbp]
  04d63	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  04d6a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@KAIODDPE@MyColor?$CD?$CD3b?$AA@
  04d71	e8 00 00 00 00	 call	 ?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HAEBUImVec2@@@Z ; ImGui::ColorButton
  04d76	88 85 24 0d 00
	00		 mov	 BYTE PTR open_popup$178[rbp], al

; 1790 :         ImGui::SameLine(0, ImGui::GetStyle().ItemInnerSpacing.x);

  04d7c	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  04d81	f3 0f 10 48 54	 movss	 xmm1, DWORD PTR [rax+84]
  04d86	0f 57 c0	 xorps	 xmm0, xmm0
  04d89	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 1791 :         open_popup |= ImGui::Button("Palette");

  04d8e	0f b6 85 24 0d
	00 00		 movzx	 eax, BYTE PTR open_popup$178[rbp]
  04d95	89 85 44 2b 00
	00		 mov	 DWORD PTR tv3127[rbp], eax
  04d9b	0f 57 d2	 xorps	 xmm2, xmm2
  04d9e	0f 57 c9	 xorps	 xmm1, xmm1
  04da1	48 8d 8d 24 26
	00 00		 lea	 rcx, QWORD PTR $T318[rbp]
  04da8	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  04dad	48 8b d0	 mov	 rdx, rax
  04db0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07GDPBMLLI@Palette?$AA@
  04db7	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  04dbc	0f b6 c0	 movzx	 eax, al
  04dbf	8b 8d 44 2b 00
	00		 mov	 ecx, DWORD PTR tv3127[rbp]
  04dc5	0b c8		 or	 ecx, eax
  04dc7	8b c1		 mov	 eax, ecx
  04dc9	88 85 24 0d 00
	00		 mov	 BYTE PTR open_popup$178[rbp], al

; 1792 :         if (open_popup)

  04dcf	0f b6 85 24 0d
	00 00		 movzx	 eax, BYTE PTR open_popup$178[rbp]
  04dd6	85 c0		 test	 eax, eax
  04dd8	74 29		 je	 SHORT $LN517@ShowDemoWi

; 1793 :         {
; 1794 :             ImGui::OpenPopup("mypicker");

  04dda	33 d2		 xor	 edx, edx
  04ddc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08KFPGOGIA@mypicker?$AA@
  04de3	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPEBDH@Z ; ImGui::OpenPopup

; 1795 :             backup_color = color;

  04de8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?backup_color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  04def	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  04df6	48 8b f8	 mov	 rdi, rax
  04df9	48 8b f1	 mov	 rsi, rcx
  04dfc	b9 10 00 00 00	 mov	 ecx, 16
  04e01	f3 a4		 rep movsb
$LN517@ShowDemoWi:

; 1796 :         }
; 1797 :         if (ImGui::BeginPopup("mypicker"))

  04e03	33 d2		 xor	 edx, edx
  04e05	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08KFPGOGIA@mypicker?$AA@
  04e0c	e8 00 00 00 00	 call	 ?BeginPopup@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopup
  04e11	0f b6 c0	 movzx	 eax, al
  04e14	85 c0		 test	 eax, eax
  04e16	0f 84 fb 02 00
	00		 je	 $LN254@ShowDemoWi

; 1798 :         {
; 1799 :             ImGui::Text("MY CUSTOM COLOR PICKER WITH AN AMAZING PALETTE!");

  04e1c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DA@DKOICBGC@MY?5CUSTOM?5COLOR?5PICKER?5WITH?5AN?5A@
  04e23	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1800 :             ImGui::Separator();

  04e28	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 1801 :             ImGui::ColorPicker4("##picker", (float*)&color, misc_flags | ImGuiColorEditFlags_NoSidePreview | ImGuiColorEditFlags_NoSmallPreview);

  04e2d	8b 85 e4 0c 00
	00		 mov	 eax, DWORD PTR misc_flags$176[rbp]
  04e33	0f ba e8 08	 bts	 eax, 8
  04e37	83 c8 10	 or	 eax, 16
  04e3a	45 33 c9	 xor	 r9d, r9d
  04e3d	44 8b c0	 mov	 r8d, eax
  04e40	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  04e47	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08HHEANBBL@?$CD?$CDpicker?$AA@
  04e4e	e8 00 00 00 00	 call	 ?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z ; ImGui::ColorPicker4

; 1802 :             ImGui::SameLine();

  04e53	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  04e5b	0f 57 c0	 xorps	 xmm0, xmm0
  04e5e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 1803 : 
; 1804 :             ImGui::BeginGroup(); // Lock X position

  04e63	e8 00 00 00 00	 call	 ?BeginGroup@ImGui@@YAXXZ ; ImGui::BeginGroup

; 1805 :             ImGui::Text("Current");

  04e68	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07EDIFFIJI@Current?$AA@
  04e6f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1806 :             ImGui::ColorButton("##current", color, ImGuiColorEditFlags_NoPicker | ImGuiColorEditFlags_AlphaPreviewHalf, ImVec2(60, 40));

  04e74	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42200000
  04e7c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42700000
  04e84	48 8d 8d 44 26
	00 00		 lea	 rcx, QWORD PTR $T319[rbp]
  04e8b	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  04e90	4c 8b c8	 mov	 r9, rax
  04e93	41 b8 04 00 04
	00		 mov	 r8d, 262148		; 00040004H
  04e99	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  04ea0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09CDENILGE@?$CD?$CDcurrent?$AA@
  04ea7	e8 00 00 00 00	 call	 ?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HAEBUImVec2@@@Z ; ImGui::ColorButton

; 1807 :             ImGui::Text("Previous");

  04eac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08CAGLMDLD@Previous?$AA@
  04eb3	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1808 :             if (ImGui::ColorButton("##previous", backup_color, ImGuiColorEditFlags_NoPicker | ImGuiColorEditFlags_AlphaPreviewHalf, ImVec2(60, 40)))

  04eb8	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42200000
  04ec0	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42700000
  04ec8	48 8d 8d 64 26
	00 00		 lea	 rcx, QWORD PTR $T320[rbp]
  04ecf	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  04ed4	4c 8b c8	 mov	 r9, rax
  04ed7	41 b8 04 00 04
	00		 mov	 r8d, 262148		; 00040004H
  04edd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?backup_color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  04ee4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@JEAALFFH@?$CD?$CDprevious?$AA@
  04eeb	e8 00 00 00 00	 call	 ?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HAEBUImVec2@@@Z ; ImGui::ColorButton
  04ef0	0f b6 c0	 movzx	 eax, al
  04ef3	85 c0		 test	 eax, eax
  04ef5	74 1b		 je	 SHORT $LN519@ShowDemoWi

; 1809 :                 color = backup_color;

  04ef7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  04efe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?backup_color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  04f05	48 8b f8	 mov	 rdi, rax
  04f08	48 8b f1	 mov	 rsi, rcx
  04f0b	b9 10 00 00 00	 mov	 ecx, 16
  04f10	f3 a4		 rep movsb
$LN519@ShowDemoWi:

; 1810 :             ImGui::Separator();

  04f12	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 1811 :             ImGui::Text("Palette");

  04f17	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07GDPBMLLI@Palette?$AA@
  04f1e	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1812 :             for (int n = 0; n < IM_ARRAYSIZE(saved_palette); n++)

  04f23	c7 85 44 0d 00
	00 00 00 00 00	 mov	 DWORD PTR n$179[rbp], 0
  04f2d	eb 0e		 jmp	 SHORT $LN251@ShowDemoWi
$LN249@ShowDemoWi:
  04f2f	8b 85 44 0d 00
	00		 mov	 eax, DWORD PTR n$179[rbp]
  04f35	ff c0		 inc	 eax
  04f37	89 85 44 0d 00
	00		 mov	 DWORD PTR n$179[rbp], eax
$LN251@ShowDemoWi:
  04f3d	83 bd 44 0d 00
	00 20		 cmp	 DWORD PTR n$179[rbp], 32 ; 00000020H
  04f44	0f 8d c3 01 00
	00		 jge	 $LN250@ShowDemoWi

; 1813 :             {
; 1814 :                 ImGui::PushID(n);

  04f4a	8b 8d 44 0d 00
	00		 mov	 ecx, DWORD PTR n$179[rbp]
  04f50	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 1815 :                 if ((n % 8) != 0)

  04f55	8b 85 44 0d 00
	00		 mov	 eax, DWORD PTR n$179[rbp]
  04f5b	99		 cdq
  04f5c	83 e2 07	 and	 edx, 7
  04f5f	03 c2		 add	 eax, edx
  04f61	83 e0 07	 and	 eax, 7
  04f64	2b c2		 sub	 eax, edx
  04f66	85 c0		 test	 eax, eax
  04f68	74 12		 je	 SHORT $LN520@ShowDemoWi

; 1816 :                     ImGui::SameLine(0.0f, ImGui::GetStyle().ItemSpacing.y);

  04f6a	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  04f6f	f3 0f 10 48 50	 movss	 xmm1, DWORD PTR [rax+80]
  04f74	0f 57 c0	 xorps	 xmm0, xmm0
  04f77	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
$LN520@ShowDemoWi:

; 1817 : 
; 1818 :                 ImGuiColorEditFlags palette_button_flags = ImGuiColorEditFlags_NoAlpha | ImGuiColorEditFlags_NoPicker | ImGuiColorEditFlags_NoTooltip;

  04f7c	c7 85 64 0d 00
	00 46 00 00 00	 mov	 DWORD PTR palette_button_flags$180[rbp], 70 ; 00000046H

; 1819 :                 if (ImGui::ColorButton("##palette", saved_palette[n], palette_button_flags, ImVec2(20, 20)))

  04f86	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@41a00000
  04f8e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41a00000
  04f96	48 8d 8d 84 26
	00 00		 lea	 rcx, QWORD PTR $T321[rbp]
  04f9d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  04fa2	48 63 8d 44 0d
	00 00		 movsxd	 rcx, DWORD PTR n$179[rbp]
  04fa9	48 6b c9 10	 imul	 rcx, rcx, 16
  04fad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?saved_palette@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A
  04fb4	48 03 d1	 add	 rdx, rcx
  04fb7	48 8b ca	 mov	 rcx, rdx
  04fba	4c 8b c8	 mov	 r9, rax
  04fbd	44 8b 85 64 0d
	00 00		 mov	 r8d, DWORD PTR palette_button_flags$180[rbp]
  04fc4	48 8b d1	 mov	 rdx, rcx
  04fc7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09DDJBIEE@?$CD?$CDpalette?$AA@
  04fce	e8 00 00 00 00	 call	 ?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HAEBUImVec2@@@Z ; ImGui::ColorButton
  04fd3	0f b6 c0	 movzx	 eax, al
  04fd6	85 c0		 test	 eax, eax
  04fd8	74 76		 je	 SHORT $LN521@ShowDemoWi

; 1820 :                     color = ImVec4(saved_palette[n].x, saved_palette[n].y, saved_palette[n].z, color.w); // Preserve alpha!

  04fda	48 63 85 44 0d
	00 00		 movsxd	 rax, DWORD PTR n$179[rbp]
  04fe1	48 6b c0 10	 imul	 rax, rax, 16
  04fe5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?saved_palette@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A
  04fec	48 63 95 44 0d
	00 00		 movsxd	 rdx, DWORD PTR n$179[rbp]
  04ff3	48 6b d2 10	 imul	 rdx, rdx, 16
  04ff7	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:?saved_palette@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A
  04ffe	48 63 b5 44 0d
	00 00		 movsxd	 rsi, DWORD PTR n$179[rbp]
  05005	48 6b f6 10	 imul	 rsi, rsi, 16
  05009	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?saved_palette@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A
  05010	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A+12
  05018	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0501e	f3 0f 10 5c 01
	08		 movss	 xmm3, DWORD PTR [rcx+rax+8]
  05024	f3 0f 10 54 17
	04		 movss	 xmm2, DWORD PTR [rdi+rdx+4]
  0502a	f3 41 0f 10 0c
	30		 movss	 xmm1, DWORD PTR [r8+rsi]
  05030	48 8d 8d a4 26
	00 00		 lea	 rcx, QWORD PTR $T322[rbp]
  05037	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0503c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  05043	48 8b f9	 mov	 rdi, rcx
  05046	48 8b f0	 mov	 rsi, rax
  05049	b9 10 00 00 00	 mov	 ecx, 16
  0504e	f3 a4		 rep movsb
$LN521@ShowDemoWi:

; 1821 : 
; 1822 :                 // Allow user to drop colors into each palette entry. Note that ColorButton() is already a
; 1823 :                 // drag source by default, unless specifying the ImGuiColorEditFlags_NoDragDrop flag.
; 1824 :                 if (ImGui::BeginDragDropTarget())

  05050	e8 00 00 00 00	 call	 ?BeginDragDropTarget@ImGui@@YA_NXZ ; ImGui::BeginDragDropTarget
  05055	0f b6 c0	 movzx	 eax, al
  05058	85 c0		 test	 eax, eax
  0505a	0f 84 a3 00 00
	00		 je	 $LN522@ShowDemoWi

; 1825 :                 {
; 1826 :                     if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_3F))

  05060	33 d2		 xor	 edx, edx
  05062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06LFKNFKEK@_COL3F?$AA@
  05069	e8 00 00 00 00	 call	 ?AcceptDragDropPayload@ImGui@@YAPEBUImGuiPayload@@PEBDH@Z ; ImGui::AcceptDragDropPayload
  0506e	48 89 85 88 0d
	00 00		 mov	 QWORD PTR payload$181[rbp], rax
  05075	48 83 bd 88 0d
	00 00 00	 cmp	 QWORD PTR payload$181[rbp], 0
  0507d	74 30		 je	 SHORT $LN523@ShowDemoWi

; 1827 :                         memcpy((float*)&saved_palette[n], payload->Data, sizeof(float) * 3);

  0507f	48 63 85 44 0d
	00 00		 movsxd	 rax, DWORD PTR n$179[rbp]
  05086	48 6b c0 10	 imul	 rax, rax, 16
  0508a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?saved_palette@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A
  05091	48 03 c8	 add	 rcx, rax
  05094	48 8b c1	 mov	 rax, rcx
  05097	41 b8 0c 00 00
	00		 mov	 r8d, 12
  0509d	48 8b 8d 88 0d
	00 00		 mov	 rcx, QWORD PTR payload$181[rbp]
  050a4	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  050a7	48 8b c8	 mov	 rcx, rax
  050aa	e8 00 00 00 00	 call	 memcpy
$LN523@ShowDemoWi:

; 1828 :                     if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_4F))

  050af	33 d2		 xor	 edx, edx
  050b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06LAOCEMMP@_COL4F?$AA@
  050b8	e8 00 00 00 00	 call	 ?AcceptDragDropPayload@ImGui@@YAPEBUImGuiPayload@@PEBDH@Z ; ImGui::AcceptDragDropPayload
  050bd	48 89 85 a8 0d
	00 00		 mov	 QWORD PTR payload$182[rbp], rax
  050c4	48 83 bd a8 0d
	00 00 00	 cmp	 QWORD PTR payload$182[rbp], 0
  050cc	74 30		 je	 SHORT $LN524@ShowDemoWi

; 1829 :                         memcpy((float*)&saved_palette[n], payload->Data, sizeof(float) * 4);

  050ce	48 63 85 44 0d
	00 00		 movsxd	 rax, DWORD PTR n$179[rbp]
  050d5	48 6b c0 10	 imul	 rax, rax, 16
  050d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?saved_palette@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A
  050e0	48 03 c8	 add	 rcx, rax
  050e3	48 8b c1	 mov	 rax, rcx
  050e6	41 b8 10 00 00
	00		 mov	 r8d, 16
  050ec	48 8b 8d a8 0d
	00 00		 mov	 rcx, QWORD PTR payload$182[rbp]
  050f3	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  050f6	48 8b c8	 mov	 rcx, rax
  050f9	e8 00 00 00 00	 call	 memcpy
$LN524@ShowDemoWi:

; 1830 :                     ImGui::EndDragDropTarget();

  050fe	e8 00 00 00 00	 call	 ?EndDragDropTarget@ImGui@@YAXXZ ; ImGui::EndDragDropTarget
$LN522@ShowDemoWi:

; 1831 :                 }
; 1832 : 
; 1833 :                 ImGui::PopID();

  05103	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 1834 :             }

  05108	e9 22 fe ff ff	 jmp	 $LN249@ShowDemoWi
$LN250@ShowDemoWi:

; 1835 :             ImGui::EndGroup();

  0510d	e8 00 00 00 00	 call	 ?EndGroup@ImGui@@YAXXZ	; ImGui::EndGroup

; 1836 :             ImGui::EndPopup();

  05112	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN254@ShowDemoWi:

; 1837 :         }
; 1838 : 
; 1839 :         IMGUI_DEMO_MARKER("Widgets/Color/ColorButton (simple)");

  05117	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0511f	74 28		 je	 SHORT $LN525@ShowDemoWi
  05121	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  05127	05 0c 05 00 00	 add	 eax, 1292		; 0000050cH
  0512c	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  05133	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CD@HMBJHACC@Widgets?1Color?1ColorButton?5?$CIsimpl@
  0513a	8b d0		 mov	 edx, eax
  0513c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  05143	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN525@ShowDemoWi:
  05149	33 c0		 xor	 eax, eax
  0514b	85 c0		 test	 eax, eax
  0514d	75 c8		 jne	 SHORT $LN254@ShowDemoWi

; 1840 :         ImGui::Text("Color button only:");

  0514f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@NCDFBPJC@Color?5button?5only?3?$AA@
  05156	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1841 :         static bool no_border = false;
; 1842 :         ImGui::Checkbox("ImGuiColorEditFlags_NoBorder", &no_border);

  0515b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?no_border@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  05162	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@HLFBDHDP@ImGuiColorEditFlags_NoBorder?$AA@
  05169	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 1843 :         ImGui::ColorButton("MyColor##3c", *(ImVec4*)&color, misc_flags | (no_border ? ImGuiColorEditFlags_NoBorder : 0), ImVec2(80, 80));

  0516e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_border@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  05175	85 c0		 test	 eax, eax
  05177	74 0c		 je	 SHORT $LN652@ShowDemoWi
  05179	c7 85 44 2b 00
	00 00 04 00 00	 mov	 DWORD PTR tv3328[rbp], 1024 ; 00000400H
  05183	eb 0a		 jmp	 SHORT $LN653@ShowDemoWi
$LN652@ShowDemoWi:
  05185	c7 85 44 2b 00
	00 00 00 00 00	 mov	 DWORD PTR tv3328[rbp], 0
$LN653@ShowDemoWi:
  0518f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42a00000
  05197	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42a00000
  0519f	48 8d 8d d4 26
	00 00		 lea	 rcx, QWORD PTR $T323[rbp]
  051a6	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  051ab	8b 8d 44 2b 00
	00		 mov	 ecx, DWORD PTR tv3328[rbp]
  051b1	8b 95 e4 0c 00
	00		 mov	 edx, DWORD PTR misc_flags$176[rbp]
  051b7	0b d1		 or	 edx, ecx
  051b9	8b ca		 mov	 ecx, edx
  051bb	4c 8b c8	 mov	 r9, rax
  051be	44 8b c1	 mov	 r8d, ecx
  051c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  051c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LJJFACLF@MyColor?$CD?$CD3c?$AA@
  051cf	e8 00 00 00 00	 call	 ?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HAEBUImVec2@@@Z ; ImGui::ColorButton
$LN257@ShowDemoWi:

; 1844 : 
; 1845 :         IMGUI_DEMO_MARKER("Widgets/Color/ColorPicker");

  051d4	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  051dc	74 28		 je	 SHORT $LN526@ShowDemoWi
  051de	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  051e4	05 12 05 00 00	 add	 eax, 1298		; 00000512H
  051e9	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  051f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BK@CPMABCHF@Widgets?1Color?1ColorPicker?$AA@
  051f7	8b d0		 mov	 edx, eax
  051f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  05200	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN526@ShowDemoWi:
  05206	33 c0		 xor	 eax, eax
  05208	85 c0		 test	 eax, eax
  0520a	75 c8		 jne	 SHORT $LN257@ShowDemoWi

; 1846 :         ImGui::Text("Color picker:");

  0520c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IPOAJHA@Color?5picker?3?$AA@
  05213	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1847 :         static bool alpha = true;
; 1848 :         static bool alpha_bar = true;
; 1849 :         static bool side_preview = true;
; 1850 :         static bool ref_color = false;
; 1851 :         static ImVec4 ref_color_v(1.0f, 0.0f, 1.0f, 0.5f);

  05218	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  0521d	8b c0		 mov	 eax, eax
  0521f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  05225	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0522e	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  05232	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  05235	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS5@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
  0523b	7e 4f		 jle	 SHORT $LN258@ShowDemoWi
  0523d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS5@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  05244	e8 00 00 00 00	 call	 _Init_thread_header
  05249	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS5@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA, -1
  05250	75 3a		 jne	 SHORT $LN258@ShowDemoWi
  05252	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0525a	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  05260	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  05268	0f 57 d2	 xorps	 xmm2, xmm2
  0526b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  05273	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?ref_color_v@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  0527a	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  0527f	90		 npad	 1
  05280	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS5@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  05287	e8 00 00 00 00	 call	 _Init_thread_footer
$LN258@ShowDemoWi:

; 1852 :         static int display_mode = 0;
; 1853 :         static int picker_mode = 0;
; 1854 :         ImGui::Checkbox("With Alpha", &alpha);

  0528c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?alpha@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  05293	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@EACIJKCC@With?5Alpha?$AA@
  0529a	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 1855 :         ImGui::Checkbox("With Alpha Bar", &alpha_bar);

  0529f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?alpha_bar@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  052a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@HFPOLAHI@With?5Alpha?5Bar?$AA@
  052ad	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 1856 :         ImGui::Checkbox("With Side Preview", &side_preview);

  052b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?side_preview@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  052b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@IIIMIJGF@With?5Side?5Preview?$AA@
  052c0	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 1857 :         if (side_preview)

  052c5	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?side_preview@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  052cc	85 c0		 test	 eax, eax
  052ce	74 5d		 je	 SHORT $LN527@ShowDemoWi

; 1858 :         {
; 1859 :             ImGui::SameLine();

  052d0	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  052d8	0f 57 c0	 xorps	 xmm0, xmm0
  052db	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 1860 :             ImGui::Checkbox("With Ref Color", &ref_color);

  052e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ref_color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  052e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CEAKBNI@With?5Ref?5Color?$AA@
  052ee	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 1861 :             if (ref_color)

  052f3	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?ref_color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  052fa	85 c0		 test	 eax, eax
  052fc	74 2f		 je	 SHORT $LN527@ShowDemoWi

; 1862 :             {
; 1863 :                 ImGui::SameLine();

  052fe	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  05306	0f 57 c0	 xorps	 xmm0, xmm0
  05309	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 1864 :                 ImGui::ColorEdit4("##RefColor", &ref_color_v.x, ImGuiColorEditFlags_NoInputs | misc_flags);

  0530e	8b 85 e4 0c 00
	00		 mov	 eax, DWORD PTR misc_flags$176[rbp]
  05314	83 c8 20	 or	 eax, 32			; 00000020H
  05317	44 8b c0	 mov	 r8d, eax
  0531a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ref_color_v@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  05321	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@LOHJOGGK@?$CD?$CDRefColor?$AA@
  05328	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z ; ImGui::ColorEdit4
$LN527@ShowDemoWi:

; 1865 :             }
; 1866 :         }
; 1867 :         ImGui::Combo("Display Mode", &display_mode, "Auto/Current\0None\0RGB Only\0HSV Only\0Hex Only\0");

  0532d	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  05333	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CO@EADBOKOE@Auto?1Current?$AANone?$AARGB?5Only?$AAHSV?5O@
  0533a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?display_mode@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  05341	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@OFPFGAFL@Display?5Mode?$AA@
  05348	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAH0H@Z ; ImGui::Combo

; 1868 :         ImGui::SameLine(); HelpMarker(

  0534d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  05355	0f 57 c0	 xorps	 xmm0, xmm0
  05358	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0535d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BBP@JAIDJLF@ColorEdit?5defaults?5to?5displaying@
  05364	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1869 :             "ColorEdit defaults to displaying RGB inputs if you don't specify a display mode, "
; 1870 :             "but the user can change it with a right-click on those inputs.\n\nColorPicker defaults to displaying RGB+HSV+Hex "
; 1871 :             "if you don't specify a display mode.\n\nYou can change the defaults using SetColorEditOptions().");
; 1872 :         ImGui::SameLine(); HelpMarker("When not specified explicitly (Auto/Current mode), user can right-click the picker to change mode.");

  05369	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  05371	0f 57 c0	 xorps	 xmm0, xmm0
  05374	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  05379	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GD@OPONKGG@When?5not?5specified?5explicitly?5?$CIA@
  05380	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1873 :         ImGuiColorEditFlags flags = misc_flags;

  05385	8b 85 e4 0c 00
	00		 mov	 eax, DWORD PTR misc_flags$176[rbp]
  0538b	89 85 c4 0d 00
	00		 mov	 DWORD PTR flags$183[rbp], eax

; 1874 :         if (!alpha)            flags |= ImGuiColorEditFlags_NoAlpha;        // This is by default if you call ColorPicker3() instead of ColorPicker4()

  05391	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?alpha@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  05398	85 c0		 test	 eax, eax
  0539a	75 0f		 jne	 SHORT $LN529@ShowDemoWi
  0539c	8b 85 c4 0d 00
	00		 mov	 eax, DWORD PTR flags$183[rbp]
  053a2	83 c8 02	 or	 eax, 2
  053a5	89 85 c4 0d 00
	00		 mov	 DWORD PTR flags$183[rbp], eax
$LN529@ShowDemoWi:

; 1875 :         if (alpha_bar)         flags |= ImGuiColorEditFlags_AlphaBar;

  053ab	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?alpha_bar@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  053b2	85 c0		 test	 eax, eax
  053b4	74 10		 je	 SHORT $LN530@ShowDemoWi
  053b6	8b 85 c4 0d 00
	00		 mov	 eax, DWORD PTR flags$183[rbp]
  053bc	0f ba e8 10	 bts	 eax, 16
  053c0	89 85 c4 0d 00
	00		 mov	 DWORD PTR flags$183[rbp], eax
$LN530@ShowDemoWi:

; 1876 :         if (!side_preview)     flags |= ImGuiColorEditFlags_NoSidePreview;

  053c6	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?side_preview@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  053cd	85 c0		 test	 eax, eax
  053cf	75 10		 jne	 SHORT $LN531@ShowDemoWi
  053d1	8b 85 c4 0d 00
	00		 mov	 eax, DWORD PTR flags$183[rbp]
  053d7	0f ba e8 08	 bts	 eax, 8
  053db	89 85 c4 0d 00
	00		 mov	 DWORD PTR flags$183[rbp], eax
$LN531@ShowDemoWi:

; 1877 :         if (picker_mode == 1)  flags |= ImGuiColorEditFlags_PickerHueBar;

  053e1	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?picker_mode@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA, 1
  053e8	75 10		 jne	 SHORT $LN532@ShowDemoWi
  053ea	8b 85 c4 0d 00
	00		 mov	 eax, DWORD PTR flags$183[rbp]
  053f0	0f ba e8 19	 bts	 eax, 25
  053f4	89 85 c4 0d 00
	00		 mov	 DWORD PTR flags$183[rbp], eax
$LN532@ShowDemoWi:

; 1878 :         if (picker_mode == 2)  flags |= ImGuiColorEditFlags_PickerHueWheel;

  053fa	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?picker_mode@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA, 2
  05401	75 10		 jne	 SHORT $LN533@ShowDemoWi
  05403	8b 85 c4 0d 00
	00		 mov	 eax, DWORD PTR flags$183[rbp]
  05409	0f ba e8 1a	 bts	 eax, 26
  0540d	89 85 c4 0d 00
	00		 mov	 DWORD PTR flags$183[rbp], eax
$LN533@ShowDemoWi:

; 1879 :         if (display_mode == 1) flags |= ImGuiColorEditFlags_NoInputs;       // Disable all RGB/HSV/Hex displays

  05413	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?display_mode@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA, 1
  0541a	75 0f		 jne	 SHORT $LN534@ShowDemoWi
  0541c	8b 85 c4 0d 00
	00		 mov	 eax, DWORD PTR flags$183[rbp]
  05422	83 c8 20	 or	 eax, 32			; 00000020H
  05425	89 85 c4 0d 00
	00		 mov	 DWORD PTR flags$183[rbp], eax
$LN534@ShowDemoWi:

; 1880 :         if (display_mode == 2) flags |= ImGuiColorEditFlags_DisplayRGB;     // Override display mode

  0542b	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?display_mode@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA, 2
  05432	75 10		 jne	 SHORT $LN535@ShowDemoWi
  05434	8b 85 c4 0d 00
	00		 mov	 eax, DWORD PTR flags$183[rbp]
  0543a	0f ba e8 14	 bts	 eax, 20
  0543e	89 85 c4 0d 00
	00		 mov	 DWORD PTR flags$183[rbp], eax
$LN535@ShowDemoWi:

; 1881 :         if (display_mode == 3) flags |= ImGuiColorEditFlags_DisplayHSV;

  05444	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?display_mode@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA, 3
  0544b	75 10		 jne	 SHORT $LN536@ShowDemoWi
  0544d	8b 85 c4 0d 00
	00		 mov	 eax, DWORD PTR flags$183[rbp]
  05453	0f ba e8 15	 bts	 eax, 21
  05457	89 85 c4 0d 00
	00		 mov	 DWORD PTR flags$183[rbp], eax
$LN536@ShowDemoWi:

; 1882 :         if (display_mode == 4) flags |= ImGuiColorEditFlags_DisplayHex;

  0545d	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?display_mode@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA, 4
  05464	75 10		 jne	 SHORT $LN537@ShowDemoWi
  05466	8b 85 c4 0d 00
	00		 mov	 eax, DWORD PTR flags$183[rbp]
  0546c	0f ba e8 16	 bts	 eax, 22
  05470	89 85 c4 0d 00
	00		 mov	 DWORD PTR flags$183[rbp], eax
$LN537@ShowDemoWi:

; 1883 :         ImGui::ColorPicker4("MyColor##4", (float*)&color, flags, ref_color ? &ref_color_v.x : NULL);

  05476	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?ref_color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0547d	85 c0		 test	 eax, eax
  0547f	74 10		 je	 SHORT $LN654@ShowDemoWi
  05481	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?ref_color_v@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  05488	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv3410[rbp], rax
  0548f	eb 0b		 jmp	 SHORT $LN655@ShowDemoWi
$LN654@ShowDemoWi:
  05491	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv3410[rbp], 0
$LN655@ShowDemoWi:
  0549c	4c 8b 8d 48 2b
	00 00		 mov	 r9, QWORD PTR tv3410[rbp]
  054a3	44 8b 85 c4 0d
	00 00		 mov	 r8d, DWORD PTR flags$183[rbp]
  054aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  054b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@GICMBKFD@MyColor?$CD?$CD4?$AA@
  054b8	e8 00 00 00 00	 call	 ?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z ; ImGui::ColorPicker4

; 1884 : 
; 1885 :         ImGui::Text("Set defaults in code:");

  054bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@PLDANIFM@Set?5defaults?5in?5code?3?$AA@
  054c4	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1886 :         ImGui::SameLine(); HelpMarker(

  054c9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  054d1	0f 57 c0	 xorps	 xmm0, xmm0
  054d4	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  054d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BFC@FHNBCNON@SetColorEditOptions?$CI?$CJ?5is?5designe@
  054e0	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1887 :             "SetColorEditOptions() is designed to allow you to set boot-time default.\n"
; 1888 :             "We don't have Push/Pop functions because you can force options on a per-widget basis if needed,"
; 1889 :             "and the user can change non-forced ones with the options menu.\nWe don't have a getter to avoid"
; 1890 :             "encouraging you to persistently save values that aren't forward-compatible.");
; 1891 :         if (ImGui::Button("Default: Uint8 + HSV + Hue Bar"))

  054e5	0f 57 d2	 xorps	 xmm2, xmm2
  054e8	0f 57 c9	 xorps	 xmm1, xmm1
  054eb	48 8d 8d f4 26
	00 00		 lea	 rcx, QWORD PTR $T324[rbp]
  054f2	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  054f7	48 8b d0	 mov	 rdx, rax
  054fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@GBPCDFBG@Default?3?5Uint8?5?$CL?5HSV?5?$CL?5Hue?5Bar?$AA@
  05501	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  05506	0f b6 c0	 movzx	 eax, al
  05509	85 c0		 test	 eax, eax
  0550b	74 0a		 je	 SHORT $LN538@ShowDemoWi

; 1892 :             ImGui::SetColorEditOptions(ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_PickerHueBar);

  0550d	b9 00 00 a0 02	 mov	 ecx, 44040192		; 02a00000H
  05512	e8 00 00 00 00	 call	 ?SetColorEditOptions@ImGui@@YAXH@Z ; ImGui::SetColorEditOptions
$LN538@ShowDemoWi:

; 1893 :         if (ImGui::Button("Default: Float + HDR + Hue Wheel"))

  05517	0f 57 d2	 xorps	 xmm2, xmm2
  0551a	0f 57 c9	 xorps	 xmm1, xmm1
  0551d	48 8d 8d 14 27
	00 00		 lea	 rcx, QWORD PTR $T325[rbp]
  05524	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  05529	48 8b d0	 mov	 rdx, rax
  0552c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@BDAOENPB@Default?3?5Float?5?$CL?5HDR?5?$CL?5Hue?5Wheel@
  05533	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  05538	0f b6 c0	 movzx	 eax, al
  0553b	85 c0		 test	 eax, eax
  0553d	74 0a		 je	 SHORT $LN539@ShowDemoWi

; 1894 :             ImGui::SetColorEditOptions(ImGuiColorEditFlags_Float | ImGuiColorEditFlags_HDR | ImGuiColorEditFlags_PickerHueWheel);

  0553f	b9 00 00 08 05	 mov	 ecx, 84410368		; 05080000H
  05544	e8 00 00 00 00	 call	 ?SetColorEditOptions@ImGui@@YAXH@Z ; ImGui::SetColorEditOptions
$LN539@ShowDemoWi:

; 1895 : 
; 1896 :         // Always both a small version of both types of pickers (to make it more visible in the demo to people who are skimming quickly through it)
; 1897 :         ImGui::Text("Both types:");

  05549	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MIAPFBLG@Both?5types?3?$AA@
  05550	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1898 :         float w = (ImGui::GetContentRegionAvail().x - ImGui::GetStyle().ItemSpacing.y) * 0.40f;

  05555	48 8d 8d 34 27
	00 00		 lea	 rcx, QWORD PTR $T326[rbp]
  0555c	e8 00 00 00 00	 call	 ?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
  05561	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv3439[rbp], rax
  05568	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  0556d	48 8b 8d 48 2b
	00 00		 mov	 rcx, QWORD PTR tv3439[rbp]
  05574	f3 0f 10 01	 movss	 xmm0, DWORD PTR [rcx]
  05578	f3 0f 5c 40 50	 subss	 xmm0, DWORD PTR [rax+80]
  0557d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ecccccd
  05585	f3 0f 11 85 e4
	0d 00 00	 movss	 DWORD PTR w$184[rbp], xmm0

; 1899 :         ImGui::SetNextItemWidth(w);

  0558d	f3 0f 10 85 e4
	0d 00 00	 movss	 xmm0, DWORD PTR w$184[rbp]
  05595	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth

; 1900 :         ImGui::ColorPicker3("##MyColor##5", (float*)&color, ImGuiColorEditFlags_PickerHueBar | ImGuiColorEditFlags_NoSidePreview | ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoAlpha);

  0559a	41 b8 22 01 00
	02		 mov	 r8d, 33554722		; 02000122H
  055a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  055a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HENPPCEP@?$CD?$CDMyColor?$CD?$CD5?$AA@
  055ae	e8 00 00 00 00	 call	 ?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z ; ImGui::ColorPicker3

; 1901 :         ImGui::SameLine();

  055b3	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  055bb	0f 57 c0	 xorps	 xmm0, xmm0
  055be	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 1902 :         ImGui::SetNextItemWidth(w);

  055c3	f3 0f 10 85 e4
	0d 00 00	 movss	 xmm0, DWORD PTR w$184[rbp]
  055cb	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth

; 1903 :         ImGui::ColorPicker3("##MyColor##6", (float*)&color, ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFlags_NoSidePreview | ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoAlpha);

  055d0	41 b8 22 01 00
	04		 mov	 r8d, 67109154		; 04000122H
  055d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?color@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  055dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@FPPCKBIM@?$CD?$CDMyColor?$CD?$CD6?$AA@
  055e4	e8 00 00 00 00	 call	 ?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z ; ImGui::ColorPicker3

; 1904 : 
; 1905 :         // HSV encoded support (to avoid RGB<>HSV round trips and singularities when S==0 or V==0)
; 1906 :         static ImVec4 color_hsv(0.23f, 1.0f, 1.0f, 1.0f); // Stored as HSV!

  055e9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  055ee	8b c0		 mov	 eax, eax
  055f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  055f6	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  055ff	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  05603	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  05606	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS6@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
  0560c	7e 54		 jle	 SHORT $LN259@ShowDemoWi
  0560e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS6@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  05615	e8 00 00 00 00	 call	 _Init_thread_header
  0561a	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS6@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA, -1
  05621	75 3f		 jne	 SHORT $LN259@ShowDemoWi
  05623	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0562b	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  05631	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  05639	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  05641	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e6b851f
  05649	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?color_hsv@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  05650	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  05655	90		 npad	 1
  05656	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS6@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0565d	e8 00 00 00 00	 call	 _Init_thread_footer
$LN259@ShowDemoWi:

; 1907 :         ImGui::Spacing();

  05662	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 1908 :         ImGui::Text("HSV encoded colors");

  05667	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@DKMMPKGG@HSV?5encoded?5colors?$AA@
  0566e	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1909 :         ImGui::SameLine(); HelpMarker(

  05673	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0567b	0f 57 c0	 xorps	 xmm0, xmm0
  0567e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  05683	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BDD@IKIAIDKH@By?5default?0?5colors?5are?5given?5to?5@
  0568a	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1910 :             "By default, colors are given to ColorEdit and ColorPicker in RGB, but ImGuiColorEditFlags_InputHSV"
; 1911 :             "allows you to store colors as HSV and pass them to ColorEdit and ColorPicker as HSV. This comes with the"
; 1912 :             "added benefit that you can manipulate hue values with the picker even when saturation or value are zero.");
; 1913 :         ImGui::Text("Color widget with InputHSV:");

  0568f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@EODGJACI@Color?5widget?5with?5InputHSV?3?$AA@
  05696	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1914 :         ImGui::ColorEdit4("HSV shown as RGB##1", (float*)&color_hsv, ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_InputHSV | ImGuiColorEditFlags_Float);

  0569b	41 b8 00 00 10
	11		 mov	 r8d, 286261248		; 11100000H
  056a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?color_hsv@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  056a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@PEEENKKH@HSV?5shown?5as?5RGB?$CD?$CD1?$AA@
  056af	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z ; ImGui::ColorEdit4

; 1915 :         ImGui::ColorEdit4("HSV shown as HSV##1", (float*)&color_hsv, ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_InputHSV | ImGuiColorEditFlags_Float);

  056b4	41 b8 00 00 20
	11		 mov	 r8d, 287309824		; 11200000H
  056ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?color_hsv@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  056c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@DKMNGIOI@HSV?5shown?5as?5HSV?$CD?$CD1?$AA@
  056c8	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z ; ImGui::ColorEdit4

; 1916 :         ImGui::DragFloat4("Raw HSV values", (float*)&color_hsv, 0.01f, 0.0f, 1.0f);

  056cd	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  056d5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  056dc	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  056e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  056e9	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  056ef	0f 57 db	 xorps	 xmm3, xmm3
  056f2	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3c23d70a
  056fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?color_hsv@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  05701	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@PMCJHJ@Raw?5HSV?5values?$AA@
  05708	e8 00 00 00 00	 call	 ?DragFloat4@ImGui@@YA_NPEBDQEAMMMM0H@Z ; ImGui::DragFloat4

; 1917 : 
; 1918 :         ImGui::TreePop();

  0570d	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN262@ShowDemoWi:

; 1919 :     }
; 1920 : 
; 1921 :     IMGUI_DEMO_MARKER("Widgets/Drag and Slider Flags");

  05712	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0571a	74 28		 je	 SHORT $LN540@ShowDemoWi
  0571c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  05722	05 5e 05 00 00	 add	 eax, 1374		; 0000055eH
  05727	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0572e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BO@ONPGHCKF@Widgets?1Drag?5and?5Slider?5Flags?$AA@
  05735	8b d0		 mov	 edx, eax
  05737	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0573e	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN540@ShowDemoWi:
  05744	33 c0		 xor	 eax, eax
  05746	85 c0		 test	 eax, eax
  05748	75 c8		 jne	 SHORT $LN262@ShowDemoWi

; 1922 :     if (ImGui::TreeNode("Drag/Slider Flags"))

  0574a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@FOMNFKHB@Drag?1Slider?5Flags?$AA@
  05751	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  05756	0f b6 c0	 movzx	 eax, al
  05759	85 c0		 test	 eax, eax
  0575b	0f 84 c5 02 00
	00		 je	 $LN265@ShowDemoWi

; 1923 :     {
; 1924 :         // Demonstrate using advanced flags for DragXXX and SliderXXX functions. Note that the flags are the same!
; 1925 :         static ImGuiSliderFlags flags = ImGuiSliderFlags_None;
; 1926 :         ImGui::CheckboxFlags("ImGuiSliderFlags_AlwaysClamp", &flags, ImGuiSliderFlags_AlwaysClamp);

  05761	41 b8 10 00 00
	00		 mov	 r8d, 16
  05767	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0576e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@OEAGPOC@ImGuiSliderFlags_AlwaysClamp?$AA@
  05775	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 1927 :         ImGui::SameLine(); HelpMarker("Always clamp value to min/max bounds (if any) when input manually with CTRL+Click.");

  0577a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  05782	0f 57 c0	 xorps	 xmm0, xmm0
  05785	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0578a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FD@BLABLEIF@Always?5clamp?5value?5to?5min?1max?5bo@
  05791	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1928 :         ImGui::CheckboxFlags("ImGuiSliderFlags_Logarithmic", &flags, ImGuiSliderFlags_Logarithmic);

  05796	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  0579c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  057a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@HAKIJBBA@ImGuiSliderFlags_Logarithmic?$AA@
  057aa	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 1929 :         ImGui::SameLine(); HelpMarker("Enable logarithmic editing (more precision for small values).");

  057af	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  057b7	0f 57 c0	 xorps	 xmm0, xmm0
  057ba	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  057bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DO@HKODNILP@Enable?5logarithmic?5editing?5?$CImore@
  057c6	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1930 :         ImGui::CheckboxFlags("ImGuiSliderFlags_NoRoundToFormat", &flags, ImGuiSliderFlags_NoRoundToFormat);

  057cb	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  057d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  057d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@DOCCIAEK@ImGuiSliderFlags_NoRoundToFormat@
  057df	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 1931 :         ImGui::SameLine(); HelpMarker("Disable rounding underlying value to match precision of the format string (e.g. %.3f values are rounded to those 3 digits).");

  057e4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  057ec	0f 57 c0	 xorps	 xmm0, xmm0
  057ef	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  057f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0HM@PJMLMMLP@Disable?5rounding?5underlying?5valu@
  057fb	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1932 :         ImGui::CheckboxFlags("ImGuiSliderFlags_NoInput", &flags, ImGuiSliderFlags_NoInput);

  05800	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  05806	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0580d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@KFAEJGBN@ImGuiSliderFlags_NoInput?$AA@
  05814	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 1933 :         ImGui::SameLine(); HelpMarker("Disable CTRL+Click or Enter key allowing to input text directly into the widget.");

  05819	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  05821	0f 57 c0	 xorps	 xmm0, xmm0
  05824	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  05829	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FB@JPLHIJIO@Disable?5CTRL?$CLClick?5or?5Enter?5key?5@
  05830	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 1934 : 
; 1935 :         // Drags
; 1936 :         static float drag_f = 0.5f;
; 1937 :         static int drag_i = 50;
; 1938 :         ImGui::Text("Underlying float value: %f", drag_f);

  05835	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?drag_f@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4MA
  0583d	0f 28 c8	 movaps	 xmm1, xmm0
  05840	66 48 0f 7e ca	 movq	 rdx, xmm1
  05845	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@HLOFLJPB@Underlying?5float?5value?3?5?$CFf?$AA@
  0584c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1939 :         ImGui::DragFloat("DragFloat (0 -> 1)", &drag_f, 0.005f, 0.0f, 1.0f, "%.3f", flags);

  05851	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?flags@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  05857	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0585b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  05862	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  05867	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0586f	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  05875	0f 57 db	 xorps	 xmm3, xmm3
  05878	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ba3d70a
  05880	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?drag_f@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4MA
  05887	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@LPIMJICP@DragFloat?5?$CI0?5?9?$DO?51?$CJ?$AA@
  0588e	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 1940 :         ImGui::DragFloat("DragFloat (0 -> +inf)", &drag_f, 0.005f, 0.0f, FLT_MAX, "%.3f", flags);

  05893	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?flags@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  05899	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0589d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  058a4	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  058a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  058b1	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  058b7	0f 57 db	 xorps	 xmm3, xmm3
  058ba	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ba3d70a
  058c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?drag_f@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4MA
  058c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@EHNMBPIG@DragFloat?5?$CI0?5?9?$DO?5?$CLinf?$CJ?$AA@
  058d0	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 1941 :         ImGui::DragFloat("DragFloat (-inf -> 1)", &drag_f, 0.005f, -FLT_MAX, 1.0f, "%.3f", flags);

  058d5	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?flags@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  058db	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  058df	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  058e6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  058eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  058f3	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  058f9	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@ff7fffff
  05901	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ba3d70a
  05909	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?drag_f@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4MA
  05910	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@GPJPIKGM@DragFloat?5?$CI?9inf?5?9?$DO?51?$CJ?$AA@
  05917	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 1942 :         ImGui::DragFloat("DragFloat (-inf -> +inf)", &drag_f, 0.005f, -FLT_MAX, +FLT_MAX, "%.3f", flags);

  0591c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?flags@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  05922	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  05926	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  0592d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  05932	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  0593a	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  05940	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@ff7fffff
  05948	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ba3d70a
  05950	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?drag_f@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4MA
  05957	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@MJEKBNMC@DragFloat?5?$CI?9inf?5?9?$DO?5?$CLinf?$CJ?$AA@
  0595e	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 1943 :         ImGui::DragInt("DragInt (0 -> 100)", &drag_i, 0.5f, 0, 100, "%d", flags);

  05963	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?flags@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  05969	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0596d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  05974	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  05979	c7 44 24 20 64
	00 00 00	 mov	 DWORD PTR [rsp+32], 100	; 00000064H
  05981	45 33 c9	 xor	 r9d, r9d
  05984	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f000000
  0598c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?drag_i@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  05993	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@KDPKGLCE@DragInt?5?$CI0?5?9?$DO?5100?$CJ?$AA@
  0599a	e8 00 00 00 00	 call	 ?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z ; ImGui::DragInt

; 1944 : 
; 1945 :         // Sliders
; 1946 :         static float slider_f = 0.5f;
; 1947 :         static int slider_i = 50;
; 1948 :         ImGui::Text("Underlying float value: %f", slider_f);

  0599f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?slider_f@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4MA
  059a7	0f 28 c8	 movaps	 xmm1, xmm0
  059aa	66 48 0f 7e ca	 movq	 rdx, xmm1
  059af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@HLOFLJPB@Underlying?5float?5value?3?5?$CFf?$AA@
  059b6	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 1949 :         ImGui::SliderFloat("SliderFloat (0 -> 1)", &slider_f, 0.0f, 1.0f, "%.3f", flags);

  059bb	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?flags@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  059c1	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  059c5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  059cc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  059d1	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  059d9	0f 57 d2	 xorps	 xmm2, xmm2
  059dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?slider_f@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4MA
  059e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@MCKPEGDC@SliderFloat?5?$CI0?5?9?$DO?51?$CJ?$AA@
  059ea	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 1950 :         ImGui::SliderInt("SliderInt (0 -> 100)", &slider_i, 0, 100, "%d", flags);

  059ef	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?flags@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  059f5	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  059f9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  05a00	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  05a05	41 b9 64 00 00
	00		 mov	 r9d, 100		; 00000064H
  05a0b	45 33 c0	 xor	 r8d, r8d
  05a0e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?slider_i@?CKD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  05a15	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@NONJLFDJ@SliderInt?5?$CI0?5?9?$DO?5100?$CJ?$AA@
  05a1c	e8 00 00 00 00	 call	 ?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z ; ImGui::SliderInt

; 1951 : 
; 1952 :         ImGui::TreePop();

  05a21	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN265@ShowDemoWi:

; 1953 :     }
; 1954 : 
; 1955 :     IMGUI_DEMO_MARKER("Widgets/Range Widgets");

  05a26	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  05a2e	74 28		 je	 SHORT $LN542@ShowDemoWi
  05a30	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  05a36	05 80 05 00 00	 add	 eax, 1408		; 00000580H
  05a3b	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  05a42	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@EMJJMOGJ@Widgets?1Range?5Widgets?$AA@
  05a49	8b d0		 mov	 edx, eax
  05a4b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  05a52	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN542@ShowDemoWi:
  05a58	33 c0		 xor	 eax, eax
  05a5a	85 c0		 test	 eax, eax
  05a5c	75 c8		 jne	 SHORT $LN265@ShowDemoWi

; 1956 :     if (ImGui::TreeNode("Range Widgets"))

  05a5e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@JEFPADJJ@Range?5Widgets?$AA@
  05a65	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  05a6a	0f b6 c0	 movzx	 eax, al
  05a6d	85 c0		 test	 eax, eax
  05a6f	0f 84 02 01 00
	00		 je	 $LN268@ShowDemoWi

; 1957 :     {
; 1958 :         static float begin = 10, end = 90;
; 1959 :         static int begin_i = 100, end_i = 1000;
; 1960 :         ImGui::DragFloatRange2("range float", &begin, &end, 0.25f, 0.0f, 100.0f, "Min: %.1f %%", "Max: %.1f %%", ImGuiSliderFlags_AlwaysClamp);

  05a75	c7 44 24 40 10
	00 00 00	 mov	 DWORD PTR [rsp+64], 16
  05a7d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0N@IBBLMIOP@Max?3?5?$CF?41f?5?$CF?$CF?$AA@
  05a84	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  05a89	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0N@MBFELAJJ@Min?3?5?$CF?41f?5?$CF?$CF?$AA@
  05a90	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  05a95	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  05a9d	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  05aa3	0f 57 c0	 xorps	 xmm0, xmm0
  05aa6	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  05aac	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e800000
  05ab4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?end@?CKK@??ShowDemoWindowWidgets@@YAXXZ@4MA
  05abb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?begin@?CKK@??ShowDemoWindowWidgets@@YAXXZ@4MA
  05ac2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@JOPHKMFF@range?5float?$AA@
  05ac9	e8 00 00 00 00	 call	 ?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z ; ImGui::DragFloatRange2

; 1961 :         ImGui::DragIntRange2("range int", &begin_i, &end_i, 5, 0, 1000, "Min: %d units", "Max: %d units");

  05ace	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR [rsp+64], 0
  05ad6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@JDOPLCFE@Max?3?5?$CFd?5units?$AA@
  05add	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  05ae2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@CKMJCJCF@Min?3?5?$CFd?5units?$AA@
  05ae9	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  05aee	c7 44 24 28 e8
	03 00 00	 mov	 DWORD PTR [rsp+40], 1000 ; 000003e8H
  05af6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  05afe	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@40a00000
  05b06	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?end_i@?CKK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  05b0d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?begin_i@?CKK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  05b14	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09PIGNMEJF@range?5int?$AA@
  05b1b	e8 00 00 00 00	 call	 ?DragIntRange2@ImGui@@YA_NPEBDPEAH1MHH00H@Z ; ImGui::DragIntRange2

; 1962 :         ImGui::DragIntRange2("range int (no bounds)", &begin_i, &end_i, 5, 0, 0, "Min: %d units", "Max: %d units");

  05b20	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR [rsp+64], 0
  05b28	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@JDOPLCFE@Max?3?5?$CFd?5units?$AA@
  05b2f	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  05b34	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@CKMJCJCF@Min?3?5?$CFd?5units?$AA@
  05b3b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  05b40	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  05b48	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  05b50	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@40a00000
  05b58	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?end_i@?CKK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  05b5f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?begin_i@?CKK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  05b66	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@NFKPCFAN@range?5int?5?$CIno?5bounds?$CJ?$AA@
  05b6d	e8 00 00 00 00	 call	 ?DragIntRange2@ImGui@@YA_NPEBDPEAH1MHH00H@Z ; ImGui::DragIntRange2

; 1963 :         ImGui::TreePop();

  05b72	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN268@ShowDemoWi:

; 1964 :     }
; 1965 : 
; 1966 :     IMGUI_DEMO_MARKER("Widgets/Data Types");

  05b77	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  05b7f	74 28		 je	 SHORT $LN544@ShowDemoWi
  05b81	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  05b87	05 8b 05 00 00	 add	 eax, 1419		; 0000058bH
  05b8c	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  05b93	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@GBBEGJPM@Widgets?1Data?5Types?$AA@
  05b9a	8b d0		 mov	 edx, eax
  05b9c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  05ba3	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN544@ShowDemoWi:
  05ba9	33 c0		 xor	 eax, eax
  05bab	85 c0		 test	 eax, eax
  05bad	75 c8		 jne	 SHORT $LN268@ShowDemoWi

; 1967 :     if (ImGui::TreeNode("Data Types"))

  05baf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@PAJDALGN@Data?5Types?$AA@
  05bb6	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  05bbb	0f b6 c0	 movzx	 eax, al
  05bbe	85 c0		 test	 eax, eax
  05bc0	0f 84 c0 15 00
	00		 je	 $LN280@ShowDemoWi

; 1968 :     {
; 1969 :         // DragScalar/InputScalar/SliderScalar functions allow various data types
; 1970 :         // - signed/unsigned
; 1971 :         // - 8/16/32/64-bits
; 1972 :         // - integer/float/double
; 1973 :         // To avoid polluting the public API with all possible combinations, we use the ImGuiDataType enum
; 1974 :         // to pass the type, and passing all arguments by pointer.
; 1975 :         // This is the reason the test code below creates local variables to hold "zero" "one" etc. for each type.
; 1976 :         // In practice, if you frequently use a given type that is not covered by the normal API entry points,
; 1977 :         // you can wrap it yourself inside a 1 line function which can take typed argument as value instead of void*,
; 1978 :         // and then pass their address to the generic function. For example:
; 1979 :         //   bool MySliderU64(const char *label, u64* value, u64 min = 0, u64 max = 0, const char* format = "%lld")
; 1980 :         //   {
; 1981 :         //      return SliderScalar(label, ImGuiDataType_U64, value, &min, &max, format);
; 1982 :         //   }
; 1983 : 
; 1984 :         // Setup limits (as helper variables so we can take their address, as explained above)
; 1985 :         // Note: SliderScalar() functions have a maximum usable range of half the natural type maximum, hence the /2.
; 1986 :         #ifndef LLONG_MIN
; 1987 :         ImS64 LLONG_MIN = -9223372036854775807LL - 1;
; 1988 :         ImS64 LLONG_MAX = 9223372036854775807LL;
; 1989 :         ImU64 ULLONG_MAX = (2ULL * 9223372036854775807LL + 1);
; 1990 :         #endif
; 1991 :         const char    s8_zero  = 0,   s8_one  = 1,   s8_fifty  = 50, s8_min  = -128,        s8_max = 127;

  05bc6	c6 85 04 0e 00
	00 00		 mov	 BYTE PTR s8_zero$185[rbp], 0
  05bcd	c6 85 24 0e 00
	00 01		 mov	 BYTE PTR s8_one$186[rbp], 1
  05bd4	c6 85 44 0e 00
	00 32		 mov	 BYTE PTR s8_fifty$187[rbp], 50 ; 00000032H
  05bdb	c6 85 64 0e 00
	00 80		 mov	 BYTE PTR s8_min$188[rbp], -128 ; ffffffffffffff80H
  05be2	c6 85 84 0e 00
	00 7f		 mov	 BYTE PTR s8_max$189[rbp], 127 ; 0000007fH

; 1992 :         const ImU8    u8_zero  = 0,   u8_one  = 1,   u8_fifty  = 50, u8_min  = 0,           u8_max = 255;

  05be9	c6 85 a4 0e 00
	00 00		 mov	 BYTE PTR u8_zero$190[rbp], 0
  05bf0	c6 85 c4 0e 00
	00 01		 mov	 BYTE PTR u8_one$191[rbp], 1
  05bf7	c6 85 e4 0e 00
	00 32		 mov	 BYTE PTR u8_fifty$192[rbp], 50 ; 00000032H
  05bfe	c6 85 04 0f 00
	00 00		 mov	 BYTE PTR u8_min$193[rbp], 0
  05c05	c6 85 24 0f 00
	00 ff		 mov	 BYTE PTR u8_max$194[rbp], 255 ; 000000ffH

; 1993 :         const short   s16_zero = 0,   s16_one = 1,   s16_fifty = 50, s16_min = -32768,      s16_max = 32767;

  05c0c	33 c0		 xor	 eax, eax
  05c0e	66 89 85 44 0f
	00 00		 mov	 WORD PTR s16_zero$195[rbp], ax
  05c15	b8 01 00 00 00	 mov	 eax, 1
  05c1a	66 89 85 64 0f
	00 00		 mov	 WORD PTR s16_one$196[rbp], ax
  05c21	b8 32 00 00 00	 mov	 eax, 50			; 00000032H
  05c26	66 89 85 84 0f
	00 00		 mov	 WORD PTR s16_fifty$197[rbp], ax
  05c2d	b8 00 80 ff ff	 mov	 eax, -32768		; ffffffffffff8000H
  05c32	66 89 85 a4 0f
	00 00		 mov	 WORD PTR s16_min$198[rbp], ax
  05c39	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  05c3e	66 89 85 c4 0f
	00 00		 mov	 WORD PTR s16_max$199[rbp], ax

; 1994 :         const ImU16   u16_zero = 0,   u16_one = 1,   u16_fifty = 50, u16_min = 0,           u16_max = 65535;

  05c45	33 c0		 xor	 eax, eax
  05c47	66 89 85 e4 0f
	00 00		 mov	 WORD PTR u16_zero$200[rbp], ax
  05c4e	b8 01 00 00 00	 mov	 eax, 1
  05c53	66 89 85 04 10
	00 00		 mov	 WORD PTR u16_one$201[rbp], ax
  05c5a	b8 32 00 00 00	 mov	 eax, 50			; 00000032H
  05c5f	66 89 85 24 10
	00 00		 mov	 WORD PTR u16_fifty$202[rbp], ax
  05c66	33 c0		 xor	 eax, eax
  05c68	66 89 85 44 10
	00 00		 mov	 WORD PTR u16_min$203[rbp], ax
  05c6f	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  05c74	66 89 85 64 10
	00 00		 mov	 WORD PTR u16_max$204[rbp], ax

; 1995 :         const ImS32   s32_zero = 0,   s32_one = 1,   s32_fifty = 50, s32_min = INT_MIN/2,   s32_max = INT_MAX/2,    s32_hi_a = INT_MAX/2 - 100,    s32_hi_b = INT_MAX/2;

  05c7b	c7 85 84 10 00
	00 00 00 00 00	 mov	 DWORD PTR s32_zero$205[rbp], 0
  05c85	c7 85 a4 10 00
	00 01 00 00 00	 mov	 DWORD PTR s32_one$206[rbp], 1
  05c8f	c7 85 c4 10 00
	00 32 00 00 00	 mov	 DWORD PTR s32_fifty$207[rbp], 50 ; 00000032H
  05c99	c7 85 e4 10 00
	00 00 00 00 c0	 mov	 DWORD PTR s32_min$208[rbp], -1073741824 ; ffffffffc0000000H
  05ca3	c7 85 04 11 00
	00 ff ff ff 3f	 mov	 DWORD PTR s32_max$209[rbp], 1073741823 ; 3fffffffH
  05cad	c7 85 24 11 00
	00 9b ff ff 3f	 mov	 DWORD PTR s32_hi_a$210[rbp], 1073741723 ; 3fffff9bH
  05cb7	c7 85 44 11 00
	00 ff ff ff 3f	 mov	 DWORD PTR s32_hi_b$211[rbp], 1073741823 ; 3fffffffH

; 1996 :         const ImU32   u32_zero = 0,   u32_one = 1,   u32_fifty = 50, u32_min = 0,           u32_max = UINT_MAX/2,   u32_hi_a = UINT_MAX/2 - 100,   u32_hi_b = UINT_MAX/2;

  05cc1	c7 85 64 11 00
	00 00 00 00 00	 mov	 DWORD PTR u32_zero$212[rbp], 0
  05ccb	c7 85 84 11 00
	00 01 00 00 00	 mov	 DWORD PTR u32_one$213[rbp], 1
  05cd5	c7 85 a4 11 00
	00 32 00 00 00	 mov	 DWORD PTR u32_fifty$214[rbp], 50 ; 00000032H
  05cdf	c7 85 c4 11 00
	00 00 00 00 00	 mov	 DWORD PTR u32_min$215[rbp], 0
  05ce9	c7 85 e4 11 00
	00 ff ff ff 7f	 mov	 DWORD PTR u32_max$216[rbp], 2147483647 ; 7fffffffH
  05cf3	c7 85 04 12 00
	00 9b ff ff 7f	 mov	 DWORD PTR u32_hi_a$217[rbp], 2147483547 ; 7fffff9bH
  05cfd	c7 85 24 12 00
	00 ff ff ff 7f	 mov	 DWORD PTR u32_hi_b$218[rbp], 2147483647 ; 7fffffffH

; 1997 :         const ImS64   s64_zero = 0,   s64_one = 1,   s64_fifty = 50, s64_min = LLONG_MIN/2, s64_max = LLONG_MAX/2,  s64_hi_a = LLONG_MAX/2 - 100,  s64_hi_b = LLONG_MAX/2;

  05d07	48 c7 85 48 12
	00 00 00 00 00
	00		 mov	 QWORD PTR s64_zero$219[rbp], 0
  05d12	48 c7 85 68 12
	00 00 01 00 00
	00		 mov	 QWORD PTR s64_one$220[rbp], 1
  05d1d	48 c7 85 88 12
	00 00 32 00 00
	00		 mov	 QWORD PTR s64_fifty$221[rbp], 50 ; 00000032H
  05d28	48 b8 00 00 00
	00 00 00 00 c0	 mov	 rax, -4611686018427387904 ; c000000000000000H
  05d32	48 89 85 a8 12
	00 00		 mov	 QWORD PTR s64_min$222[rbp], rax
  05d39	48 b8 ff ff ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427387903 ; 3fffffffffffffffH
  05d43	48 89 85 c8 12
	00 00		 mov	 QWORD PTR s64_max$223[rbp], rax
  05d4a	48 b8 9b ff ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427387803 ; 3fffffffffffff9bH
  05d54	48 89 85 e8 12
	00 00		 mov	 QWORD PTR s64_hi_a$224[rbp], rax
  05d5b	48 b8 ff ff ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427387903 ; 3fffffffffffffffH
  05d65	48 89 85 08 13
	00 00		 mov	 QWORD PTR s64_hi_b$225[rbp], rax

; 1998 :         const ImU64   u64_zero = 0,   u64_one = 1,   u64_fifty = 50, u64_min = 0,           u64_max = ULLONG_MAX/2, u64_hi_a = ULLONG_MAX/2 - 100, u64_hi_b = ULLONG_MAX/2;

  05d6c	48 c7 85 28 13
	00 00 00 00 00
	00		 mov	 QWORD PTR u64_zero$226[rbp], 0
  05d77	48 c7 85 48 13
	00 00 01 00 00
	00		 mov	 QWORD PTR u64_one$227[rbp], 1
  05d82	48 c7 85 68 13
	00 00 32 00 00
	00		 mov	 QWORD PTR u64_fifty$228[rbp], 50 ; 00000032H
  05d8d	48 c7 85 88 13
	00 00 00 00 00
	00		 mov	 QWORD PTR u64_min$229[rbp], 0
  05d98	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  05da2	48 89 85 a8 13
	00 00		 mov	 QWORD PTR u64_max$230[rbp], rax
  05da9	48 b8 9b ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775707 ; 7fffffffffffff9bH
  05db3	48 89 85 c8 13
	00 00		 mov	 QWORD PTR u64_hi_a$231[rbp], rax
  05dba	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  05dc4	48 89 85 e8 13
	00 00		 mov	 QWORD PTR u64_hi_b$232[rbp], rax

; 1999 :         const float   f32_zero = 0.f, f32_one = 1.f, f32_lo_a = -10000000000.0f, f32_hi_a = +10000000000.0f;

  05dcb	0f 57 c0	 xorps	 xmm0, xmm0
  05dce	f3 0f 11 85 04
	14 00 00	 movss	 DWORD PTR f32_zero$233[rbp], xmm0
  05dd6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  05dde	f3 0f 11 85 24
	14 00 00	 movss	 DWORD PTR f32_one$234[rbp], xmm0
  05de6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@d01502f9
  05dee	f3 0f 11 85 44
	14 00 00	 movss	 DWORD PTR f32_lo_a$235[rbp], xmm0
  05df6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@501502f9
  05dfe	f3 0f 11 85 64
	14 00 00	 movss	 DWORD PTR f32_hi_a$236[rbp], xmm0

; 2000 :         const double  f64_zero = 0.,  f64_one = 1.,  f64_lo_a = -1000000000000000.0, f64_hi_a = +1000000000000000.0;

  05e06	0f 57 c0	 xorps	 xmm0, xmm0
  05e09	f2 0f 11 85 88
	14 00 00	 movsd	 QWORD PTR f64_zero$237[rbp], xmm0
  05e11	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  05e19	f2 0f 11 85 a8
	14 00 00	 movsd	 QWORD PTR f64_one$238[rbp], xmm0
  05e21	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c30c6bf526340000
  05e29	f2 0f 11 85 c8
	14 00 00	 movsd	 QWORD PTR f64_lo_a$239[rbp], xmm0
  05e31	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@430c6bf526340000
  05e39	f2 0f 11 85 e8
	14 00 00	 movsd	 QWORD PTR f64_hi_a$240[rbp], xmm0

; 2001 : 
; 2002 :         // State
; 2003 :         static char   s8_v  = 127;
; 2004 :         static ImU8   u8_v  = 255;
; 2005 :         static short  s16_v = 32767;
; 2006 :         static ImU16  u16_v = 65535;
; 2007 :         static ImS32  s32_v = -1;
; 2008 :         static ImU32  u32_v = (ImU32)-1;
; 2009 :         static ImS64  s64_v = -1;
; 2010 :         static ImU64  u64_v = (ImU64)-1;
; 2011 :         static float  f32_v = 0.123f;
; 2012 :         static double f64_v = 90000.01234567890123456789;
; 2013 : 
; 2014 :         const float drag_speed = 0.2f;

  05e41	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  05e49	f3 0f 11 85 04
	15 00 00	 movss	 DWORD PTR drag_speed$241[rbp], xmm0
$LN271@ShowDemoWi:

; 2015 :         static bool drag_clamp = false;
; 2016 :         IMGUI_DEMO_MARKER("Widgets/Data Types/Drags");

  05e51	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  05e59	74 28		 je	 SHORT $LN546@ShowDemoWi
  05e5b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  05e61	05 bd 05 00 00	 add	 eax, 1469		; 000005bdH
  05e66	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  05e6d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BJ@IECCHINH@Widgets?1Data?5Types?1Drags?$AA@
  05e74	8b d0		 mov	 edx, eax
  05e76	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  05e7d	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN546@ShowDemoWi:
  05e83	33 c0		 xor	 eax, eax
  05e85	85 c0		 test	 eax, eax
  05e87	75 c8		 jne	 SHORT $LN271@ShowDemoWi

; 2017 :         ImGui::Text("Drags:");

  05e89	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OFIAEEBG@Drags?3?$AA@
  05e90	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2018 :         ImGui::Checkbox("Clamp integers to 0..50", &drag_clamp);

  05e95	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  05e9c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LDAPNGOM@Clamp?5integers?5to?50?4?450?$AA@
  05ea3	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 2019 :         ImGui::SameLine(); HelpMarker(

  05ea8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  05eb0	0f 57 c0	 xorps	 xmm0, xmm0
  05eb3	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  05eb8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0KK@PJCBLLDP@As?5with?5every?5widget?5in?5dear?5img@
  05ebf	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 2020 :             "As with every widget in dear imgui, we never modify values unless there is a user interaction.\n"
; 2021 :             "You can override the clamping limits by using CTRL+Click to input a value.");
; 2022 :         ImGui::DragScalar("drag s8",        ImGuiDataType_S8,     &s8_v,  drag_speed, drag_clamp ? &s8_zero  : NULL, drag_clamp ? &s8_fifty  : NULL);

  05ec4	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  05ecb	85 c0		 test	 eax, eax
  05ecd	74 10		 je	 SHORT $LN656@ShowDemoWi
  05ecf	48 8d 85 44 0e
	00 00		 lea	 rax, QWORD PTR s8_fifty$187[rbp]
  05ed6	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv3710[rbp], rax
  05edd	eb 0b		 jmp	 SHORT $LN657@ShowDemoWi
$LN656@ShowDemoWi:
  05edf	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv3710[rbp], 0
$LN657@ShowDemoWi:
  05eea	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  05ef1	85 c0		 test	 eax, eax
  05ef3	74 10		 je	 SHORT $LN658@ShowDemoWi
  05ef5	48 8d 85 04 0e
	00 00		 lea	 rax, QWORD PTR s8_zero$185[rbp]
  05efc	48 89 85 50 2b
	00 00		 mov	 QWORD PTR tv3778[rbp], rax
  05f03	eb 0b		 jmp	 SHORT $LN659@ShowDemoWi
$LN658@ShowDemoWi:
  05f05	48 c7 85 50 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv3778[rbp], 0
$LN659@ShowDemoWi:
  05f10	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  05f18	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  05f21	48 8b 85 48 2b
	00 00		 mov	 rax, QWORD PTR tv3710[rbp]
  05f28	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  05f2d	48 8b 85 50 2b
	00 00		 mov	 rax, QWORD PTR tv3778[rbp]
  05f34	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  05f39	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e4ccccd
  05f41	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s8_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4DA
  05f48	33 d2		 xor	 edx, edx
  05f4a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07LMCLPNLL@drag?5s8?$AA@
  05f51	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ; ImGui::DragScalar

; 2023 :         ImGui::DragScalar("drag u8",        ImGuiDataType_U8,     &u8_v,  drag_speed, drag_clamp ? &u8_zero  : NULL, drag_clamp ? &u8_fifty  : NULL, "%u ms");

  05f56	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  05f5d	85 c0		 test	 eax, eax
  05f5f	74 10		 je	 SHORT $LN660@ShowDemoWi
  05f61	48 8d 85 e4 0e
	00 00		 lea	 rax, QWORD PTR u8_fifty$192[rbp]
  05f68	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv3788[rbp], rax
  05f6f	eb 0b		 jmp	 SHORT $LN661@ShowDemoWi
$LN660@ShowDemoWi:
  05f71	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv3788[rbp], 0
$LN661@ShowDemoWi:
  05f7c	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  05f83	85 c0		 test	 eax, eax
  05f85	74 10		 je	 SHORT $LN662@ShowDemoWi
  05f87	48 8d 85 a4 0e
	00 00		 lea	 rax, QWORD PTR u8_zero$190[rbp]
  05f8e	48 89 85 50 2b
	00 00		 mov	 QWORD PTR tv3792[rbp], rax
  05f95	eb 0b		 jmp	 SHORT $LN663@ShowDemoWi
$LN662@ShowDemoWi:
  05f97	48 c7 85 50 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv3792[rbp], 0
$LN663@ShowDemoWi:
  05fa2	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  05faa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05MMEBHIBO@?$CFu?5ms?$AA@
  05fb1	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  05fb6	48 8b 85 48 2b
	00 00		 mov	 rax, QWORD PTR tv3788[rbp]
  05fbd	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  05fc2	48 8b 85 50 2b
	00 00		 mov	 rax, QWORD PTR tv3792[rbp]
  05fc9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  05fce	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e4ccccd
  05fd6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u8_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4EA
  05fdd	ba 01 00 00 00	 mov	 edx, 1
  05fe2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07LIKGIBAJ@drag?5u8?$AA@
  05fe9	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ; ImGui::DragScalar

; 2024 :         ImGui::DragScalar("drag s16",       ImGuiDataType_S16,    &s16_v, drag_speed, drag_clamp ? &s16_zero : NULL, drag_clamp ? &s16_fifty : NULL);

  05fee	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  05ff5	85 c0		 test	 eax, eax
  05ff7	74 10		 je	 SHORT $LN664@ShowDemoWi
  05ff9	48 8d 85 84 0f
	00 00		 lea	 rax, QWORD PTR s16_fifty$197[rbp]
  06000	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv3802[rbp], rax
  06007	eb 0b		 jmp	 SHORT $LN665@ShowDemoWi
$LN664@ShowDemoWi:
  06009	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv3802[rbp], 0
$LN665@ShowDemoWi:
  06014	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0601b	85 c0		 test	 eax, eax
  0601d	74 10		 je	 SHORT $LN666@ShowDemoWi
  0601f	48 8d 85 44 0f
	00 00		 lea	 rax, QWORD PTR s16_zero$195[rbp]
  06026	48 89 85 50 2b
	00 00		 mov	 QWORD PTR tv3806[rbp], rax
  0602d	eb 0b		 jmp	 SHORT $LN667@ShowDemoWi
$LN666@ShowDemoWi:
  0602f	48 c7 85 50 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv3806[rbp], 0
$LN667@ShowDemoWi:
  0603a	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  06042	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  0604b	48 8b 85 48 2b
	00 00		 mov	 rax, QWORD PTR tv3802[rbp]
  06052	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06057	48 8b 85 50 2b
	00 00		 mov	 rax, QWORD PTR tv3806[rbp]
  0605e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06063	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e4ccccd
  0606b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s16_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4FA
  06072	ba 02 00 00 00	 mov	 edx, 2
  06077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NKMCOLAD@drag?5s16?$AA@
  0607e	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ; ImGui::DragScalar

; 2025 :         ImGui::DragScalar("drag u16",       ImGuiDataType_U16,    &u16_v, drag_speed, drag_clamp ? &u16_zero : NULL, drag_clamp ? &u16_fifty : NULL, "%u ms");

  06083	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0608a	85 c0		 test	 eax, eax
  0608c	74 10		 je	 SHORT $LN668@ShowDemoWi
  0608e	48 8d 85 24 10
	00 00		 lea	 rax, QWORD PTR u16_fifty$202[rbp]
  06095	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv3816[rbp], rax
  0609c	eb 0b		 jmp	 SHORT $LN669@ShowDemoWi
$LN668@ShowDemoWi:
  0609e	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv3816[rbp], 0
$LN669@ShowDemoWi:
  060a9	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  060b0	85 c0		 test	 eax, eax
  060b2	74 10		 je	 SHORT $LN670@ShowDemoWi
  060b4	48 8d 85 e4 0f
	00 00		 lea	 rax, QWORD PTR u16_zero$200[rbp]
  060bb	48 89 85 50 2b
	00 00		 mov	 QWORD PTR tv3820[rbp], rax
  060c2	eb 0b		 jmp	 SHORT $LN671@ShowDemoWi
$LN670@ShowDemoWi:
  060c4	48 c7 85 50 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv3820[rbp], 0
$LN671@ShowDemoWi:
  060cf	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  060d7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05MMEBHIBO@?$CFu?5ms?$AA@
  060de	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  060e3	48 8b 85 48 2b
	00 00		 mov	 rax, QWORD PTR tv3816[rbp]
  060ea	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  060ef	48 8b 85 50 2b
	00 00		 mov	 rax, QWORD PTR tv3820[rbp]
  060f6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  060fb	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e4ccccd
  06103	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u16_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4GA
  0610a	ba 03 00 00 00	 mov	 edx, 3
  0610f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08PPKJLENP@drag?5u16?$AA@
  06116	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ; ImGui::DragScalar

; 2026 :         ImGui::DragScalar("drag s32",       ImGuiDataType_S32,    &s32_v, drag_speed, drag_clamp ? &s32_zero : NULL, drag_clamp ? &s32_fifty : NULL);

  0611b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  06122	85 c0		 test	 eax, eax
  06124	74 10		 je	 SHORT $LN672@ShowDemoWi
  06126	48 8d 85 c4 10
	00 00		 lea	 rax, QWORD PTR s32_fifty$207[rbp]
  0612d	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv3830[rbp], rax
  06134	eb 0b		 jmp	 SHORT $LN673@ShowDemoWi
$LN672@ShowDemoWi:
  06136	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv3830[rbp], 0
$LN673@ShowDemoWi:
  06141	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  06148	85 c0		 test	 eax, eax
  0614a	74 10		 je	 SHORT $LN674@ShowDemoWi
  0614c	48 8d 85 84 10
	00 00		 lea	 rax, QWORD PTR s32_zero$205[rbp]
  06153	48 89 85 50 2b
	00 00		 mov	 QWORD PTR tv3834[rbp], rax
  0615a	eb 0b		 jmp	 SHORT $LN675@ShowDemoWi
$LN674@ShowDemoWi:
  0615c	48 c7 85 50 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv3834[rbp], 0
$LN675@ShowDemoWi:
  06167	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  0616f	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  06178	48 8b 85 48 2b
	00 00		 mov	 rax, QWORD PTR tv3830[rbp]
  0617f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06184	48 8b 85 50 2b
	00 00		 mov	 rax, QWORD PTR tv3834[rbp]
  0618b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06190	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e4ccccd
  06198	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0619f	ba 04 00 00 00	 mov	 edx, 4
  061a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08LNCKPKGJ@drag?5s32?$AA@
  061ab	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ; ImGui::DragScalar

; 2027 :         ImGui::DragScalar("drag s32 hex",   ImGuiDataType_S32,    &s32_v, drag_speed, drag_clamp ? &s32_zero : NULL, drag_clamp ? &s32_fifty : NULL, "0x%08X");

  061b0	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  061b7	85 c0		 test	 eax, eax
  061b9	74 10		 je	 SHORT $LN676@ShowDemoWi
  061bb	48 8d 85 c4 10
	00 00		 lea	 rax, QWORD PTR s32_fifty$207[rbp]
  061c2	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv3876[rbp], rax
  061c9	eb 0b		 jmp	 SHORT $LN677@ShowDemoWi
$LN676@ShowDemoWi:
  061cb	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv3876[rbp], 0
$LN677@ShowDemoWi:
  061d6	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  061dd	85 c0		 test	 eax, eax
  061df	74 10		 je	 SHORT $LN678@ShowDemoWi
  061e1	48 8d 85 84 10
	00 00		 lea	 rax, QWORD PTR s32_zero$205[rbp]
  061e8	48 89 85 50 2b
	00 00		 mov	 QWORD PTR tv3880[rbp], rax
  061ef	eb 0b		 jmp	 SHORT $LN679@ShowDemoWi
$LN678@ShowDemoWi:
  061f1	48 c7 85 50 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv3880[rbp], 0
$LN679@ShowDemoWi:
  061fc	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  06204	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06IMJBDBNO@0x?$CF08X?$AA@
  0620b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  06210	48 8b 85 48 2b
	00 00		 mov	 rax, QWORD PTR tv3876[rbp]
  06217	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0621c	48 8b 85 50 2b
	00 00		 mov	 rax, QWORD PTR tv3880[rbp]
  06223	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06228	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e4ccccd
  06230	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  06237	ba 04 00 00 00	 mov	 edx, 4
  0623c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LCGPEHEL@drag?5s32?5hex?$AA@
  06243	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ; ImGui::DragScalar

; 2028 :         ImGui::DragScalar("drag u32",       ImGuiDataType_U32,    &u32_v, drag_speed, drag_clamp ? &u32_zero : NULL, drag_clamp ? &u32_fifty : NULL, "%u ms");

  06248	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0624f	85 c0		 test	 eax, eax
  06251	74 10		 je	 SHORT $LN680@ShowDemoWi
  06253	48 8d 85 a4 11
	00 00		 lea	 rax, QWORD PTR u32_fifty$214[rbp]
  0625a	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv3890[rbp], rax
  06261	eb 0b		 jmp	 SHORT $LN681@ShowDemoWi
$LN680@ShowDemoWi:
  06263	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv3890[rbp], 0
$LN681@ShowDemoWi:
  0626e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  06275	85 c0		 test	 eax, eax
  06277	74 10		 je	 SHORT $LN682@ShowDemoWi
  06279	48 8d 85 64 11
	00 00		 lea	 rax, QWORD PTR u32_zero$212[rbp]
  06280	48 89 85 50 2b
	00 00		 mov	 QWORD PTR tv3894[rbp], rax
  06287	eb 0b		 jmp	 SHORT $LN683@ShowDemoWi
$LN682@ShowDemoWi:
  06289	48 c7 85 50 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv3894[rbp], 0
$LN683@ShowDemoWi:
  06294	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  0629c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05MMEBHIBO@?$CFu?5ms?$AA@
  062a3	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  062a8	48 8b 85 48 2b
	00 00		 mov	 rax, QWORD PTR tv3890[rbp]
  062af	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  062b4	48 8b 85 50 2b
	00 00		 mov	 rax, QWORD PTR tv3894[rbp]
  062bb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  062c0	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e4ccccd
  062c8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4IA
  062cf	ba 05 00 00 00	 mov	 edx, 5
  062d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08JIEBKFLF@drag?5u32?$AA@
  062db	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ; ImGui::DragScalar

; 2029 :         ImGui::DragScalar("drag s64",       ImGuiDataType_S64,    &s64_v, drag_speed, drag_clamp ? &s64_zero : NULL, drag_clamp ? &s64_fifty : NULL);

  062e0	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  062e7	85 c0		 test	 eax, eax
  062e9	74 10		 je	 SHORT $LN684@ShowDemoWi
  062eb	48 8d 85 88 12
	00 00		 lea	 rax, QWORD PTR s64_fifty$221[rbp]
  062f2	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv3904[rbp], rax
  062f9	eb 0b		 jmp	 SHORT $LN685@ShowDemoWi
$LN684@ShowDemoWi:
  062fb	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv3904[rbp], 0
$LN685@ShowDemoWi:
  06306	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0630d	85 c0		 test	 eax, eax
  0630f	74 10		 je	 SHORT $LN686@ShowDemoWi
  06311	48 8d 85 48 12
	00 00		 lea	 rax, QWORD PTR s64_zero$219[rbp]
  06318	48 89 85 50 2b
	00 00		 mov	 QWORD PTR tv3908[rbp], rax
  0631f	eb 0b		 jmp	 SHORT $LN687@ShowDemoWi
$LN686@ShowDemoWi:
  06321	48 c7 85 50 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv3908[rbp], 0
$LN687@ShowDemoWi:
  0632c	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  06334	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  0633d	48 8b 85 48 2b
	00 00		 mov	 rax, QWORD PTR tv3904[rbp]
  06344	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06349	48 8b 85 50 2b
	00 00		 mov	 rax, QWORD PTR tv3908[rbp]
  06350	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06355	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e4ccccd
  0635d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_JA
  06364	ba 06 00 00 00	 mov	 edx, 6
  06369	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08ONLLJPAE@drag?5s64?$AA@
  06370	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ; ImGui::DragScalar

; 2030 :         ImGui::DragScalar("drag u64",       ImGuiDataType_U64,    &u64_v, drag_speed, drag_clamp ? &u64_zero : NULL, drag_clamp ? &u64_fifty : NULL);

  06375	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0637c	85 c0		 test	 eax, eax
  0637e	74 10		 je	 SHORT $LN688@ShowDemoWi
  06380	48 8d 85 68 13
	00 00		 lea	 rax, QWORD PTR u64_fifty$228[rbp]
  06387	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv3918[rbp], rax
  0638e	eb 0b		 jmp	 SHORT $LN689@ShowDemoWi
$LN688@ShowDemoWi:
  06390	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv3918[rbp], 0
$LN689@ShowDemoWi:
  0639b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  063a2	85 c0		 test	 eax, eax
  063a4	74 10		 je	 SHORT $LN690@ShowDemoWi
  063a6	48 8d 85 28 13
	00 00		 lea	 rax, QWORD PTR u64_zero$226[rbp]
  063ad	48 89 85 50 2b
	00 00		 mov	 QWORD PTR tv3922[rbp], rax
  063b4	eb 0b		 jmp	 SHORT $LN691@ShowDemoWi
$LN690@ShowDemoWi:
  063b6	48 c7 85 50 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv3922[rbp], 0
$LN691@ShowDemoWi:
  063c1	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  063c9	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  063d2	48 8b 85 48 2b
	00 00		 mov	 rax, QWORD PTR tv3918[rbp]
  063d9	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  063de	48 8b 85 50 2b
	00 00		 mov	 rax, QWORD PTR tv3922[rbp]
  063e5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  063ea	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e4ccccd
  063f2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_KA
  063f9	ba 07 00 00 00	 mov	 edx, 7
  063fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08MINAMANI@drag?5u64?$AA@
  06405	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ; ImGui::DragScalar

; 2031 :         ImGui::DragScalar("drag float",     ImGuiDataType_Float,  &f32_v, 0.005f,  &f32_zero, &f32_one, "%f");

  0640a	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  06412	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02NJPGOMH@?$CFf?$AA@
  06419	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0641e	48 8d 85 24 14
	00 00		 lea	 rax, QWORD PTR f32_one$234[rbp]
  06425	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0642a	48 8d 85 04 14
	00 00		 lea	 rax, QWORD PTR f32_zero$233[rbp]
  06431	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06436	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3ba3d70a
  0643e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?f32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4MA
  06445	ba 08 00 00 00	 mov	 edx, 8
  0644a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DLCOHHGO@drag?5float?$AA@
  06451	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ; ImGui::DragScalar

; 2032 :         ImGui::DragScalar("drag float log", ImGuiDataType_Float,  &f32_v, 0.005f,  &f32_zero, &f32_one, "%f", ImGuiSliderFlags_Logarithmic);

  06456	c7 44 24 38 20
	00 00 00	 mov	 DWORD PTR [rsp+56], 32	; 00000020H
  0645e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02NJPGOMH@?$CFf?$AA@
  06465	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0646a	48 8d 85 24 14
	00 00		 lea	 rax, QWORD PTR f32_one$234[rbp]
  06471	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06476	48 8d 85 04 14
	00 00		 lea	 rax, QWORD PTR f32_zero$233[rbp]
  0647d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06482	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3ba3d70a
  0648a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?f32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4MA
  06491	ba 08 00 00 00	 mov	 edx, 8
  06496	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@OJENAICP@drag?5float?5log?$AA@
  0649d	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ; ImGui::DragScalar

; 2033 :         ImGui::DragScalar("drag double",    ImGuiDataType_Double, &f64_v, 0.0005f, &f64_zero, NULL,     "%.10f grams");

  064a2	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  064aa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0M@PBAPOGLA@?$CF?410f?5grams?$AA@
  064b1	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  064b6	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  064bf	48 8d 85 88 14
	00 00		 lea	 rax, QWORD PTR f64_zero$237[rbp]
  064c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  064cb	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3a03126f
  064d3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?f64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4NA
  064da	ba 09 00 00 00	 mov	 edx, 9
  064df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@IJGAEMEI@drag?5double?$AA@
  064e6	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ; ImGui::DragScalar

; 2034 :         ImGui::DragScalar("drag double log",ImGuiDataType_Double, &f64_v, 0.0005f, &f64_zero, &f64_one, "0 < %.10f < 1", ImGuiSliderFlags_Logarithmic);

  064eb	c7 44 24 38 20
	00 00 00	 mov	 DWORD PTR [rsp+56], 32	; 00000020H
  064f3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@PIJBNPDH@0?5?$DM?5?$CF?410f?5?$DM?51?$AA@
  064fa	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  064ff	48 8d 85 a8 14
	00 00		 lea	 rax, QWORD PTR f64_one$238[rbp]
  06506	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0650b	48 8d 85 88 14
	00 00		 lea	 rax, QWORD PTR f64_zero$237[rbp]
  06512	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06517	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3a03126f
  0651f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?f64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4NA
  06526	ba 09 00 00 00	 mov	 edx, 9
  0652b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@PLPECJH@drag?5double?5log?$AA@
  06532	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ; ImGui::DragScalar
$LN274@ShowDemoWi:

; 2035 : 
; 2036 :         IMGUI_DEMO_MARKER("Widgets/Data Types/Sliders");

  06537	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0653f	74 28		 je	 SHORT $LN547@ShowDemoWi
  06541	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  06547	05 d1 05 00 00	 add	 eax, 1489		; 000005d1H
  0654c	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  06553	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BL@FMNOJHKA@Widgets?1Data?5Types?1Sliders?$AA@
  0655a	8b d0		 mov	 edx, eax
  0655c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  06563	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN547@ShowDemoWi:
  06569	33 c0		 xor	 eax, eax
  0656b	85 c0		 test	 eax, eax
  0656d	75 c8		 jne	 SHORT $LN274@ShowDemoWi

; 2037 :         ImGui::Text("Sliders");

  0656f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07BBLEOMAH@Sliders?$AA@
  06576	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2038 :         ImGui::SliderScalar("slider s8 full",       ImGuiDataType_S8,     &s8_v,  &s8_min,   &s8_max,   "%d");

  0657b	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06583	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  0658a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0658f	48 8d 85 84 0e
	00 00		 lea	 rax, QWORD PTR s8_max$189[rbp]
  06596	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0659b	4c 8d 8d 64 0e
	00 00		 lea	 r9, QWORD PTR s8_min$188[rbp]
  065a2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s8_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4DA
  065a9	33 d2		 xor	 edx, edx
  065ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@BGDAIEKI@slider?5s8?5full?$AA@
  065b2	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2039 :         ImGui::SliderScalar("slider u8 full",       ImGuiDataType_U8,     &u8_v,  &u8_min,   &u8_max,   "%u");

  065b7	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  065bf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02GMHACPFF@?$CFu?$AA@
  065c6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  065cb	48 8d 85 24 0f
	00 00		 lea	 rax, QWORD PTR u8_max$194[rbp]
  065d2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  065d7	4c 8d 8d 04 0f
	00 00		 lea	 r9, QWORD PTR u8_min$193[rbp]
  065de	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u8_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4EA
  065e5	ba 01 00 00 00	 mov	 edx, 1
  065ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@NAFPINCP@slider?5u8?5full?$AA@
  065f1	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2040 :         ImGui::SliderScalar("slider s16 full",      ImGuiDataType_S16,    &s16_v, &s16_min,  &s16_max,  "%d");

  065f6	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  065fe	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  06605	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0660a	48 8d 85 c4 0f
	00 00		 lea	 rax, QWORD PTR s16_max$199[rbp]
  06611	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06616	4c 8d 8d a4 0f
	00 00		 lea	 r9, QWORD PTR s16_min$198[rbp]
  0661d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s16_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4FA
  06624	ba 02 00 00 00	 mov	 edx, 2
  06629	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@NJECJBBM@slider?5s16?5full?$AA@
  06630	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2041 :         ImGui::SliderScalar("slider u16 full",      ImGuiDataType_U16,    &u16_v, &u16_min,  &u16_max,  "%u");

  06635	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0663d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02GMHACPFF@?$CFu?$AA@
  06644	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06649	48 8d 85 64 10
	00 00		 lea	 rax, QWORD PTR u16_max$204[rbp]
  06650	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06655	4c 8d 8d 44 10
	00 00		 lea	 r9, QWORD PTR u16_min$203[rbp]
  0665c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u16_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4GA
  06663	ba 03 00 00 00	 mov	 edx, 3
  06668	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@KKFIOIJG@slider?5u16?5full?$AA@
  0666f	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2042 :         ImGui::SliderScalar("slider s32 low",       ImGuiDataType_S32,    &s32_v, &s32_zero, &s32_fifty,"%d");

  06674	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0667c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  06683	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06688	48 8d 85 c4 10
	00 00		 lea	 rax, QWORD PTR s32_fifty$207[rbp]
  0668f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06694	4c 8d 8d 84 10
	00 00		 lea	 r9, QWORD PTR s32_zero$205[rbp]
  0669b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  066a2	ba 04 00 00 00	 mov	 edx, 4
  066a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@LPLLDPN@slider?5s32?5low?$AA@
  066ae	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2043 :         ImGui::SliderScalar("slider s32 high",      ImGuiDataType_S32,    &s32_v, &s32_hi_a, &s32_hi_b, "%d");

  066b3	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  066bb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  066c2	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  066c7	48 8d 85 44 11
	00 00		 lea	 rax, QWORD PTR s32_hi_b$211[rbp]
  066ce	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  066d3	4c 8d 8d 24 11
	00 00		 lea	 r9, QWORD PTR s32_hi_a$210[rbp]
  066da	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  066e1	ba 04 00 00 00	 mov	 edx, 4
  066e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@KCOOMONB@slider?5s32?5high?$AA@
  066ed	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2044 :         ImGui::SliderScalar("slider s32 full",      ImGuiDataType_S32,    &s32_v, &s32_min,  &s32_max,  "%d");

  066f2	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  066fa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  06701	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06706	48 8d 85 04 11
	00 00		 lea	 rax, QWORD PTR s32_max$209[rbp]
  0670d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06712	4c 8d 8d e4 10
	00 00		 lea	 r9, QWORD PTR s32_min$208[rbp]
  06719	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  06720	ba 04 00 00 00	 mov	 edx, 4
  06725	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@GPCILCHC@slider?5s32?5full?$AA@
  0672c	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2045 :         ImGui::SliderScalar("slider s32 hex",       ImGuiDataType_S32,    &s32_v, &s32_zero, &s32_fifty, "0x%04X");

  06731	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06739	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06IFILMILK@0x?$CF04X?$AA@
  06740	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06745	48 8d 85 c4 10
	00 00		 lea	 rax, QWORD PTR s32_fifty$207[rbp]
  0674c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06751	4c 8d 8d 84 10
	00 00		 lea	 r9, QWORD PTR s32_zero$205[rbp]
  06758	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0675f	ba 04 00 00 00	 mov	 edx, 4
  06764	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@OJGLNLD@slider?5s32?5hex?$AA@
  0676b	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2046 :         ImGui::SliderScalar("slider u32 low",       ImGuiDataType_U32,    &u32_v, &u32_zero, &u32_fifty,"%u");

  06770	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06778	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02GMHACPFF@?$CFu?$AA@
  0677f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06784	48 8d 85 a4 11
	00 00		 lea	 rax, QWORD PTR u32_fifty$214[rbp]
  0678b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06790	4c 8d 8d 64 11
	00 00		 lea	 r9, QWORD PTR u32_zero$212[rbp]
  06797	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4IA
  0679e	ba 05 00 00 00	 mov	 edx, 5
  067a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@MNJELKHK@slider?5u32?5low?$AA@
  067aa	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2047 :         ImGui::SliderScalar("slider u32 high",      ImGuiDataType_U32,    &u32_v, &u32_hi_a, &u32_hi_b, "%u");

  067af	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  067b7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02GMHACPFF@?$CFu?$AA@
  067be	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  067c3	48 8d 85 24 12
	00 00		 lea	 rax, QWORD PTR u32_hi_b$218[rbp]
  067ca	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  067cf	4c 8d 8d 04 12
	00 00		 lea	 r9, QWORD PTR u32_hi_a$217[rbp]
  067d6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4IA
  067dd	ba 05 00 00 00	 mov	 edx, 5
  067e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@NBPELHFL@slider?5u32?5high?$AA@
  067e9	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2048 :         ImGui::SliderScalar("slider u32 full",      ImGuiDataType_U32,    &u32_v, &u32_min,  &u32_max,  "%u");

  067ee	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  067f6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02GMHACPFF@?$CFu?$AA@
  067fd	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06802	48 8d 85 e4 11
	00 00		 lea	 rax, QWORD PTR u32_max$216[rbp]
  06809	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0680e	4c 8d 8d c4 11
	00 00		 lea	 r9, QWORD PTR u32_min$215[rbp]
  06815	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4IA
  0681c	ba 05 00 00 00	 mov	 edx, 5
  06821	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BMDCMLPI@slider?5u32?5full?$AA@
  06828	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2049 :         ImGui::SliderScalar("slider s64 low",       ImGuiDataType_S64,    &s64_v, &s64_zero, &s64_fifty,"%" IM_PRId64);

  0682d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06835	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05LLAMLEHD@?$CFI64d?$AA@
  0683c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06841	48 8d 85 88 12
	00 00		 lea	 rax, QWORD PTR s64_fifty$221[rbp]
  06848	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0684d	4c 8d 8d 48 12
	00 00		 lea	 r9, QWORD PTR s64_zero$219[rbp]
  06854	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_JA
  0685b	ba 06 00 00 00	 mov	 edx, 6
  06860	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@IPJKHPEH@slider?5s64?5low?$AA@
  06867	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2050 :         ImGui::SliderScalar("slider s64 high",      ImGuiDataType_S64,    &s64_v, &s64_hi_a, &s64_hi_b, "%" IM_PRId64);

  0686c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06874	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05LLAMLEHD@?$CFI64d?$AA@
  0687b	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06880	48 8d 85 08 13
	00 00		 lea	 rax, QWORD PTR s64_hi_b$225[rbp]
  06887	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0688c	4c 8d 8d e8 12
	00 00		 lea	 r9, QWORD PTR s64_hi_a$224[rbp]
  06893	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_JA
  0689a	ba 06 00 00 00	 mov	 edx, 6
  0689f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@IJNOPFIP@slider?5s64?5high?$AA@
  068a6	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2051 :         ImGui::SliderScalar("slider s64 full",      ImGuiDataType_S64,    &s64_v, &s64_min,  &s64_max,  "%" IM_PRId64);

  068ab	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  068b3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05LLAMLEHD@?$CFI64d?$AA@
  068ba	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  068bf	48 8d 85 c8 12
	00 00		 lea	 rax, QWORD PTR s64_max$223[rbp]
  068c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  068cb	4c 8d 8d a8 12
	00 00		 lea	 r9, QWORD PTR s64_min$222[rbp]
  068d2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_JA
  068d9	ba 06 00 00 00	 mov	 edx, 6
  068de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@EEBIIJCM@slider?5s64?5full?$AA@
  068e5	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2052 :         ImGui::SliderScalar("slider u64 low",       ImGuiDataType_U64,    &u64_v, &u64_zero, &u64_fifty,"%" IM_PRIu64 " ms");

  068ea	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  068f2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08GGAHJCGP@?$CFI64u?5ms?$AA@
  068f9	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  068fe	48 8d 85 68 13
	00 00		 lea	 rax, QWORD PTR u64_fifty$228[rbp]
  06905	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0690a	4c 8d 8d 28 13
	00 00		 lea	 r9, QWORD PTR u64_zero$226[rbp]
  06911	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_KA
  06918	ba 07 00 00 00	 mov	 edx, 7
  0691d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@EJPFHGMA@slider?5u64?5low?$AA@
  06924	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2053 :         ImGui::SliderScalar("slider u64 high",      ImGuiDataType_U64,    &u64_v, &u64_hi_a, &u64_hi_b, "%" IM_PRIu64 " ms");

  06929	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06931	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08GGAHJCGP@?$CFI64u?5ms?$AA@
  06938	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0693d	48 8d 85 e8 13
	00 00		 lea	 rax, QWORD PTR u64_hi_b$232[rbp]
  06944	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06949	4c 8d 8d c8 13
	00 00		 lea	 r9, QWORD PTR u64_hi_a$231[rbp]
  06950	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_KA
  06957	ba 07 00 00 00	 mov	 edx, 7
  0695c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@PKMEIMAF@slider?5u64?5high?$AA@
  06963	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2054 :         ImGui::SliderScalar("slider u64 full",      ImGuiDataType_U64,    &u64_v, &u64_min,  &u64_max,  "%" IM_PRIu64 " ms");

  06968	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06970	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08GGAHJCGP@?$CFI64u?5ms?$AA@
  06977	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0697c	48 8d 85 a8 13
	00 00		 lea	 rax, QWORD PTR u64_max$230[rbp]
  06983	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06988	4c 8d 8d 88 13
	00 00		 lea	 r9, QWORD PTR u64_min$229[rbp]
  0698f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_KA
  06996	ba 07 00 00 00	 mov	 edx, 7
  0699b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@DHACPAKG@slider?5u64?5full?$AA@
  069a2	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2055 :         ImGui::SliderScalar("slider float low",     ImGuiDataType_Float,  &f32_v, &f32_zero, &f32_one);

  069a7	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  069af	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  069b8	48 8d 85 24 14
	00 00		 lea	 rax, QWORD PTR f32_one$234[rbp]
  069bf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  069c4	4c 8d 8d 04 14
	00 00		 lea	 r9, QWORD PTR f32_zero$233[rbp]
  069cb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?f32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4MA
  069d2	ba 08 00 00 00	 mov	 edx, 8
  069d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@CCICNGDA@slider?5float?5low?$AA@
  069de	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2056 :         ImGui::SliderScalar("slider float low log", ImGuiDataType_Float,  &f32_v, &f32_zero, &f32_one,  "%.10f", ImGuiSliderFlags_Logarithmic);

  069e3	c7 44 24 30 20
	00 00 00	 mov	 DWORD PTR [rsp+48], 32	; 00000020H
  069eb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05DIPGONMJ@?$CF?410f?$AA@
  069f2	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  069f7	48 8d 85 24 14
	00 00		 lea	 rax, QWORD PTR f32_one$234[rbp]
  069fe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06a03	4c 8d 8d 04 14
	00 00		 lea	 r9, QWORD PTR f32_zero$233[rbp]
  06a0a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?f32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4MA
  06a11	ba 08 00 00 00	 mov	 edx, 8
  06a16	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@HMPMBMMM@slider?5float?5low?5log?$AA@
  06a1d	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2057 :         ImGui::SliderScalar("slider float high",    ImGuiDataType_Float,  &f32_v, &f32_lo_a, &f32_hi_a, "%e");

  06a22	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06a2a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02CGLCDNAE@?$CFe?$AA@
  06a31	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06a36	48 8d 85 64 14
	00 00		 lea	 rax, QWORD PTR f32_hi_a$236[rbp]
  06a3d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06a42	4c 8d 8d 44 14
	00 00		 lea	 r9, QWORD PTR f32_lo_a$235[rbp]
  06a49	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?f32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4MA
  06a50	ba 08 00 00 00	 mov	 edx, 8
  06a55	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@EHBCAJLJ@slider?5float?5high?$AA@
  06a5c	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2058 :         ImGui::SliderScalar("slider double low",    ImGuiDataType_Double, &f64_v, &f64_zero, &f64_one,  "%.10f grams");

  06a61	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06a69	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0M@PBAPOGLA@?$CF?410f?5grams?$AA@
  06a70	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06a75	48 8d 85 a8 14
	00 00		 lea	 rax, QWORD PTR f64_one$238[rbp]
  06a7c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06a81	4c 8d 8d 88 14
	00 00		 lea	 r9, QWORD PTR f64_zero$237[rbp]
  06a88	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?f64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4NA
  06a8f	ba 09 00 00 00	 mov	 edx, 9
  06a94	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@NEJIDBJN@slider?5double?5low?$AA@
  06a9b	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2059 :         ImGui::SliderScalar("slider double low log",ImGuiDataType_Double, &f64_v, &f64_zero, &f64_one,  "%.10f", ImGuiSliderFlags_Logarithmic);

  06aa0	c7 44 24 30 20
	00 00 00	 mov	 DWORD PTR [rsp+48], 32	; 00000020H
  06aa8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05DIPGONMJ@?$CF?410f?$AA@
  06aaf	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06ab4	48 8d 85 a8 14
	00 00		 lea	 rax, QWORD PTR f64_one$238[rbp]
  06abb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06ac0	4c 8d 8d 88 14
	00 00		 lea	 r9, QWORD PTR f64_zero$237[rbp]
  06ac7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?f64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4NA
  06ace	ba 09 00 00 00	 mov	 edx, 9
  06ad3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@ILKDLGMD@slider?5double?5low?5log?$AA@
  06ada	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2060 :         ImGui::SliderScalar("slider double high",   ImGuiDataType_Double, &f64_v, &f64_lo_a, &f64_hi_a, "%e grams");

  06adf	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06ae7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08NHECNFJD@?$CFe?5grams?$AA@
  06aee	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06af3	48 8d 85 e8 14
	00 00		 lea	 rax, QWORD PTR f64_hi_a$240[rbp]
  06afa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06aff	4c 8d 8d c8 14
	00 00		 lea	 r9, QWORD PTR f64_lo_a$239[rbp]
  06b06	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?f64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4NA
  06b0d	ba 09 00 00 00	 mov	 edx, 9
  06b12	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@OPIDMMAL@slider?5double?5high?$AA@
  06b19	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2061 : 
; 2062 :         ImGui::Text("Sliders (reverse)");

  06b1e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@BGMAPONL@Sliders?5?$CIreverse?$CJ?$AA@
  06b25	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2063 :         ImGui::SliderScalar("slider s8 reverse",    ImGuiDataType_S8,   &s8_v,  &s8_max,    &s8_min,   "%d");

  06b2a	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06b32	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  06b39	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06b3e	48 8d 85 64 0e
	00 00		 lea	 rax, QWORD PTR s8_min$188[rbp]
  06b45	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06b4a	4c 8d 8d 84 0e
	00 00		 lea	 r9, QWORD PTR s8_max$189[rbp]
  06b51	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s8_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4DA
  06b58	33 d2		 xor	 edx, edx
  06b5a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@BBCEKAEC@slider?5s8?5reverse?$AA@
  06b61	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2064 :         ImGui::SliderScalar("slider u8 reverse",    ImGuiDataType_U8,   &u8_v,  &u8_max,    &u8_min,   "%u");

  06b66	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06b6e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02GMHACPFF@?$CFu?$AA@
  06b75	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06b7a	48 8d 85 04 0f
	00 00		 lea	 rax, QWORD PTR u8_min$193[rbp]
  06b81	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06b86	4c 8d 8d 24 0f
	00 00		 lea	 r9, QWORD PTR u8_max$194[rbp]
  06b8d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u8_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4EA
  06b94	ba 01 00 00 00	 mov	 edx, 1
  06b99	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@PJJBGKAB@slider?5u8?5reverse?$AA@
  06ba0	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2065 :         ImGui::SliderScalar("slider s32 reverse",   ImGuiDataType_S32,  &s32_v, &s32_fifty, &s32_zero, "%d");

  06ba5	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06bad	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  06bb4	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06bb9	48 8d 85 84 10
	00 00		 lea	 rax, QWORD PTR s32_zero$205[rbp]
  06bc0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06bc5	4c 8d 8d c4 10
	00 00		 lea	 r9, QWORD PTR s32_fifty$207[rbp]
  06bcc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  06bd3	ba 04 00 00 00	 mov	 edx, 4
  06bd8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@LEKBJPO@slider?5s32?5reverse?$AA@
  06bdf	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2066 :         ImGui::SliderScalar("slider u32 reverse",   ImGuiDataType_U32,  &u32_v, &u32_fifty, &u32_zero, "%u");

  06be4	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06bec	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02GMHACPFF@?$CFu?$AA@
  06bf3	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06bf8	48 8d 85 64 11
	00 00		 lea	 rax, QWORD PTR u32_zero$212[rbp]
  06bff	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06c04	4c 8d 8d a4 11
	00 00		 lea	 r9, QWORD PTR u32_fifty$214[rbp]
  06c0b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4IA
  06c12	ba 05 00 00 00	 mov	 edx, 5
  06c17	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@OEHHLMBO@slider?5u32?5reverse?$AA@
  06c1e	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2067 :         ImGui::SliderScalar("slider s64 reverse",   ImGuiDataType_S64,  &s64_v, &s64_fifty, &s64_zero, "%" IM_PRId64);

  06c23	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06c2b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05LLAMLEHD@?$CFI64d?$AA@
  06c32	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06c37	48 8d 85 48 12
	00 00		 lea	 rax, QWORD PTR s64_zero$219[rbp]
  06c3e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06c43	4c 8d 8d 88 12
	00 00		 lea	 r9, QWORD PTR s64_fifty$221[rbp]
  06c4a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_JA
  06c51	ba 06 00 00 00	 mov	 edx, 6
  06c56	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@HHADMFPL@slider?5s64?5reverse?$AA@
  06c5d	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar

; 2068 :         ImGui::SliderScalar("slider u64 reverse",   ImGuiDataType_U64,  &u64_v, &u64_fifty, &u64_zero, "%" IM_PRIu64 " ms");

  06c62	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06c6a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08GGAHJCGP@?$CFI64u?5ms?$AA@
  06c71	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06c76	48 8d 85 28 13
	00 00		 lea	 rax, QWORD PTR u64_zero$226[rbp]
  06c7d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06c82	4c 8d 8d 68 13
	00 00		 lea	 r9, QWORD PTR u64_fifty$228[rbp]
  06c89	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_KA
  06c90	ba 07 00 00 00	 mov	 edx, 7
  06c95	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@JIDOGABL@slider?5u64?5reverse?$AA@
  06c9c	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar
$LN277@ShowDemoWi:

; 2069 : 
; 2070 :         IMGUI_DEMO_MARKER("Widgets/Data Types/Inputs");

  06ca1	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  06ca9	74 28		 je	 SHORT $LN548@ShowDemoWi
  06cab	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  06cb1	05 f3 05 00 00	 add	 eax, 1523		; 000005f3H
  06cb6	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  06cbd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BK@KLDNNLLJ@Widgets?1Data?5Types?1Inputs?$AA@
  06cc4	8b d0		 mov	 edx, eax
  06cc6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  06ccd	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN548@ShowDemoWi:
  06cd3	33 c0		 xor	 eax, eax
  06cd5	85 c0		 test	 eax, eax
  06cd7	75 c8		 jne	 SHORT $LN277@ShowDemoWi

; 2071 :         static bool inputs_step = true;
; 2072 :         ImGui::Text("Inputs");

  06cd9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06HDCHCENJ@Inputs?$AA@
  06ce0	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2073 :         ImGui::Checkbox("Show step buttons", &inputs_step);

  06ce5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?inputs_step@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  06cec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@HEADHDLD@Show?5step?5buttons?$AA@
  06cf3	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 2074 :         ImGui::InputScalar("input s8",      ImGuiDataType_S8,     &s8_v,  inputs_step ? &s8_one  : NULL, NULL, "%d");

  06cf8	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  06cff	85 c0		 test	 eax, eax
  06d01	74 10		 je	 SHORT $LN692@ShowDemoWi
  06d03	48 8d 85 24 0e
	00 00		 lea	 rax, QWORD PTR s8_one$186[rbp]
  06d0a	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv4219[rbp], rax
  06d11	eb 0b		 jmp	 SHORT $LN693@ShowDemoWi
$LN692@ShowDemoWi:
  06d13	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv4219[rbp], 0
$LN693@ShowDemoWi:
  06d1e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06d26	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  06d2d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06d32	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  06d3b	4c 8b 8d 48 2b
	00 00		 mov	 r9, QWORD PTR tv4219[rbp]
  06d42	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s8_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4DA
  06d49	33 d2		 xor	 edx, edx
  06d4b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08HGJIKBLN@input?5s8?$AA@
  06d52	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::InputScalar

; 2075 :         ImGui::InputScalar("input u8",      ImGuiDataType_U8,     &u8_v,  inputs_step ? &u8_one  : NULL, NULL, "%u");

  06d57	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  06d5e	85 c0		 test	 eax, eax
  06d60	74 10		 je	 SHORT $LN694@ShowDemoWi
  06d62	48 8d 85 c4 0e
	00 00		 lea	 rax, QWORD PTR u8_one$191[rbp]
  06d69	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv4229[rbp], rax
  06d70	eb 0b		 jmp	 SHORT $LN695@ShowDemoWi
$LN694@ShowDemoWi:
  06d72	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv4229[rbp], 0
$LN695@ShowDemoWi:
  06d7d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06d85	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02GMHACPFF@?$CFu?$AA@
  06d8c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06d91	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  06d9a	4c 8b 8d 48 2b
	00 00		 mov	 r9, QWORD PTR tv4229[rbp]
  06da1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u8_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4EA
  06da8	ba 01 00 00 00	 mov	 edx, 1
  06dad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08HCBFNNAP@input?5u8?$AA@
  06db4	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::InputScalar

; 2076 :         ImGui::InputScalar("input s16",     ImGuiDataType_S16,    &s16_v, inputs_step ? &s16_one : NULL, NULL, "%d");

  06db9	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  06dc0	85 c0		 test	 eax, eax
  06dc2	74 10		 je	 SHORT $LN696@ShowDemoWi
  06dc4	48 8d 85 64 0f
	00 00		 lea	 rax, QWORD PTR s16_one$196[rbp]
  06dcb	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv4239[rbp], rax
  06dd2	eb 0b		 jmp	 SHORT $LN697@ShowDemoWi
$LN696@ShowDemoWi:
  06dd4	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv4239[rbp], 0
$LN697@ShowDemoWi:
  06ddf	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06de7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  06dee	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06df3	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  06dfc	4c 8b 8d 48 2b
	00 00		 mov	 r9, QWORD PTR tv4239[rbp]
  06e03	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s16_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4FA
  06e0a	ba 02 00 00 00	 mov	 edx, 2
  06e0f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09DDGLPNGK@input?5s16?$AA@
  06e16	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::InputScalar

; 2077 :         ImGui::InputScalar("input u16",     ImGuiDataType_U16,    &u16_v, inputs_step ? &u16_one : NULL, NULL, "%u");

  06e1b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  06e22	85 c0		 test	 eax, eax
  06e24	74 10		 je	 SHORT $LN698@ShowDemoWi
  06e26	48 8d 85 04 10
	00 00		 lea	 rax, QWORD PTR u16_one$201[rbp]
  06e2d	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv4249[rbp], rax
  06e34	eb 0b		 jmp	 SHORT $LN699@ShowDemoWi
$LN698@ShowDemoWi:
  06e36	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv4249[rbp], 0
$LN699@ShowDemoWi:
  06e41	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06e49	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02GMHACPFF@?$CFu?$AA@
  06e50	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06e55	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  06e5e	4c 8b 8d 48 2b
	00 00		 mov	 r9, QWORD PTR tv4249[rbp]
  06e65	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u16_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4GA
  06e6c	ba 03 00 00 00	 mov	 edx, 3
  06e71	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09BGAAKCLG@input?5u16?$AA@
  06e78	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::InputScalar

; 2078 :         ImGui::InputScalar("input s32",     ImGuiDataType_S32,    &s32_v, inputs_step ? &s32_one : NULL, NULL, "%d");

  06e7d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  06e84	85 c0		 test	 eax, eax
  06e86	74 10		 je	 SHORT $LN700@ShowDemoWi
  06e88	48 8d 85 a4 10
	00 00		 lea	 rax, QWORD PTR s32_one$206[rbp]
  06e8f	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv4259[rbp], rax
  06e96	eb 0b		 jmp	 SHORT $LN701@ShowDemoWi
$LN700@ShowDemoWi:
  06e98	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv4259[rbp], 0
$LN701@ShowDemoWi:
  06ea3	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06eab	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  06eb2	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06eb7	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  06ec0	4c 8b 8d 48 2b
	00 00		 mov	 r9, QWORD PTR tv4259[rbp]
  06ec7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  06ece	ba 04 00 00 00	 mov	 edx, 4
  06ed3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09FEIDOMAA@input?5s32?$AA@
  06eda	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::InputScalar

; 2079 :         ImGui::InputScalar("input s32 hex", ImGuiDataType_S32,    &s32_v, inputs_step ? &s32_one : NULL, NULL, "%04X");

  06edf	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  06ee6	85 c0		 test	 eax, eax
  06ee8	74 10		 je	 SHORT $LN702@ShowDemoWi
  06eea	48 8d 85 a4 10
	00 00		 lea	 rax, QWORD PTR s32_one$206[rbp]
  06ef1	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv4269[rbp], rax
  06ef8	eb 0b		 jmp	 SHORT $LN703@ShowDemoWi
$LN702@ShowDemoWi:
  06efa	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv4269[rbp], 0
$LN703@ShowDemoWi:
  06f05	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06f0d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04JBNHMKCH@?$CF04X?$AA@
  06f14	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06f19	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  06f22	4c 8b 8d 48 2b
	00 00		 mov	 r9, QWORD PTR tv4269[rbp]
  06f29	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  06f30	ba 04 00 00 00	 mov	 edx, 4
  06f35	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EKPJHNHM@input?5s32?5hex?$AA@
  06f3c	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::InputScalar

; 2080 :         ImGui::InputScalar("input u32",     ImGuiDataType_U32,    &u32_v, inputs_step ? &u32_one : NULL, NULL, "%u");

  06f41	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  06f48	85 c0		 test	 eax, eax
  06f4a	74 10		 je	 SHORT $LN704@ShowDemoWi
  06f4c	48 8d 85 84 11
	00 00		 lea	 rax, QWORD PTR u32_one$213[rbp]
  06f53	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv4279[rbp], rax
  06f5a	eb 0b		 jmp	 SHORT $LN705@ShowDemoWi
$LN704@ShowDemoWi:
  06f5c	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv4279[rbp], 0
$LN705@ShowDemoWi:
  06f67	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06f6f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02GMHACPFF@?$CFu?$AA@
  06f76	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06f7b	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  06f84	4c 8b 8d 48 2b
	00 00		 mov	 r9, QWORD PTR tv4279[rbp]
  06f8b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4IA
  06f92	ba 05 00 00 00	 mov	 edx, 5
  06f97	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09HBOILDNM@input?5u32?$AA@
  06f9e	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::InputScalar

; 2081 :         ImGui::InputScalar("input u32 hex", ImGuiDataType_U32,    &u32_v, inputs_step ? &u32_one : NULL, NULL, "%08X");

  06fa3	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  06faa	85 c0		 test	 eax, eax
  06fac	74 10		 je	 SHORT $LN706@ShowDemoWi
  06fae	48 8d 85 84 11
	00 00		 lea	 rax, QWORD PTR u32_one$213[rbp]
  06fb5	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv4321[rbp], rax
  06fbc	eb 0b		 jmp	 SHORT $LN707@ShowDemoWi
$LN706@ShowDemoWi:
  06fbe	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv4321[rbp], 0
$LN707@ShowDemoWi:
  06fc9	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  06fd1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04JIMNDDED@?$CF08X?$AA@
  06fd8	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  06fdd	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  06fe6	4c 8b 8d 48 2b
	00 00		 mov	 r9, QWORD PTR tv4321[rbp]
  06fed	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4IA
  06ff4	ba 05 00 00 00	 mov	 edx, 5
  06ff9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IMJGHEPL@input?5u32?5hex?$AA@
  07000	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::InputScalar

; 2082 :         ImGui::InputScalar("input s64",     ImGuiDataType_S64,    &s64_v, inputs_step ? &s64_one : NULL);

  07005	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0700c	85 c0		 test	 eax, eax
  0700e	74 10		 je	 SHORT $LN708@ShowDemoWi
  07010	48 8d 85 68 12
	00 00		 lea	 rax, QWORD PTR s64_one$220[rbp]
  07017	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv4331[rbp], rax
  0701e	eb 0b		 jmp	 SHORT $LN709@ShowDemoWi
$LN708@ShowDemoWi:
  07020	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv4331[rbp], 0
$LN709@ShowDemoWi:
  0702b	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  07033	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0703c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  07045	4c 8b 8d 48 2b
	00 00		 mov	 r9, QWORD PTR tv4331[rbp]
  0704c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?s64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_JA
  07053	ba 06 00 00 00	 mov	 edx, 6
  07058	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EBCIJGN@input?5s64?$AA@
  0705f	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::InputScalar

; 2083 :         ImGui::InputScalar("input u64",     ImGuiDataType_U64,    &u64_v, inputs_step ? &u64_one : NULL);

  07064	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0706b	85 c0		 test	 eax, eax
  0706d	74 10		 je	 SHORT $LN710@ShowDemoWi
  0706f	48 8d 85 48 13
	00 00		 lea	 rax, QWORD PTR u64_one$227[rbp]
  07076	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv4341[rbp], rax
  0707d	eb 0b		 jmp	 SHORT $LN711@ShowDemoWi
$LN710@ShowDemoWi:
  0707f	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv4341[rbp], 0
$LN711@ShowDemoWi:
  0708a	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  07092	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0709b	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  070a4	4c 8b 8d 48 2b
	00 00		 mov	 r9, QWORD PTR tv4341[rbp]
  070ab	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?u64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_KA
  070b2	ba 07 00 00 00	 mov	 edx, 7
  070b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09CBHJNGLB@input?5u64?$AA@
  070be	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::InputScalar

; 2084 :         ImGui::InputScalar("input float",   ImGuiDataType_Float,  &f32_v, inputs_step ? &f32_one : NULL);

  070c3	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  070ca	85 c0		 test	 eax, eax
  070cc	74 10		 je	 SHORT $LN712@ShowDemoWi
  070ce	48 8d 85 24 14
	00 00		 lea	 rax, QWORD PTR f32_one$234[rbp]
  070d5	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv4351[rbp], rax
  070dc	eb 0b		 jmp	 SHORT $LN713@ShowDemoWi
$LN712@ShowDemoWi:
  070de	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv4351[rbp], 0
$LN713@ShowDemoWi:
  070e9	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  070f1	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  070fa	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  07103	4c 8b 8d 48 2b
	00 00		 mov	 r9, QWORD PTR tv4351[rbp]
  0710a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?f32_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4MA
  07111	ba 08 00 00 00	 mov	 edx, 8
  07116	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@HLMFPLHI@input?5float?$AA@
  0711d	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::InputScalar

; 2085 :         ImGui::InputScalar("input double",  ImGuiDataType_Double, &f64_v, inputs_step ? &f64_one : NULL);

  07122	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  07129	85 c0		 test	 eax, eax
  0712b	74 10		 je	 SHORT $LN714@ShowDemoWi
  0712d	48 8d 85 a8 14
	00 00		 lea	 rax, QWORD PTR f64_one$238[rbp]
  07134	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv4361[rbp], rax
  0713b	eb 0b		 jmp	 SHORT $LN715@ShowDemoWi
$LN714@ShowDemoWi:
  0713d	48 c7 85 48 2b
	00 00 00 00 00
	00		 mov	 QWORD PTR tv4361[rbp], 0
$LN715@ShowDemoWi:
  07148	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  07150	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  07159	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  07162	4c 8b 8d 48 2b
	00 00		 mov	 r9, QWORD PTR tv4361[rbp]
  07169	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?f64_v@?CLB@??ShowDemoWindowWidgets@@YAXXZ@4NA
  07170	ba 09 00 00 00	 mov	 edx, 9
  07175	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HNPEBCJF@input?5double?$AA@
  0717c	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::InputScalar

; 2086 : 
; 2087 :         ImGui::TreePop();

  07181	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN280@ShowDemoWi:

; 2088 :     }
; 2089 : 
; 2090 :     IMGUI_DEMO_MARKER("Widgets/Multi-component Widgets");

  07186	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0718e	74 28		 je	 SHORT $LN549@ShowDemoWi
  07190	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  07196	05 07 06 00 00	 add	 eax, 1543		; 00000607H
  0719b	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  071a2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CA@DGAGEKBO@Widgets?1Multi?9component?5Widgets?$AA@
  071a9	8b d0		 mov	 edx, eax
  071ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  071b2	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN549@ShowDemoWi:
  071b8	33 c0		 xor	 eax, eax
  071ba	85 c0		 test	 eax, eax
  071bc	75 c8		 jne	 SHORT $LN280@ShowDemoWi

; 2091 :     if (ImGui::TreeNode("Multi-component Widgets"))

  071be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@ELCHCBAK@Multi?9component?5Widgets?$AA@
  071c5	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  071ca	0f b6 c0	 movzx	 eax, al
  071cd	85 c0		 test	 eax, eax
  071cf	0f 84 3c 03 00
	00		 je	 $LN283@ShowDemoWi

; 2092 :     {
; 2093 :         static float vec4f[4] = { 0.10f, 0.20f, 0.30f, 0.44f };
; 2094 :         static int vec4i[4] = { 1, 5, 100, 255 };
; 2095 : 
; 2096 :         ImGui::InputFloat2("input float2", vec4f);

  071d5	45 33 c9	 xor	 r9d, r9d
  071d8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  071df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?vec4f@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  071e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LDNFGIIE@input?5float2?$AA@
  071ed	e8 00 00 00 00	 call	 ?InputFloat2@ImGui@@YA_NPEBDQEAM0H@Z ; ImGui::InputFloat2

; 2097 :         ImGui::DragFloat2("drag float2", vec4f, 0.01f, 0.0f, 1.0f);

  071f2	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  071fa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  07201	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  07206	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0720e	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  07214	0f 57 db	 xorps	 xmm3, xmm3
  07217	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3c23d70a
  0721f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?vec4f@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  07226	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@EHEBDGFJ@drag?5float2?$AA@
  0722d	e8 00 00 00 00	 call	 ?DragFloat2@ImGui@@YA_NPEBDQEAMMMM0H@Z ; ImGui::DragFloat2

; 2098 :         ImGui::SliderFloat2("slider float2", vec4f, 0.0f, 1.0f);

  07232	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0723a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  07241	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  07246	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  0724e	0f 57 d2	 xorps	 xmm2, xmm2
  07251	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?vec4f@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  07258	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NIDINEOI@slider?5float2?$AA@
  0725f	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z ; ImGui::SliderFloat2

; 2099 :         ImGui::InputInt2("input int2", vec4i);

  07264	45 33 c0	 xor	 r8d, r8d
  07267	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?vec4i@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAHA
  0726e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@IKAEHOLD@input?5int2?$AA@
  07275	e8 00 00 00 00	 call	 ?InputInt2@ImGui@@YA_NPEBDQEAHH@Z ; ImGui::InputInt2

; 2100 :         ImGui::DragInt2("drag int2", vec4i, 1, 0, 255);

  0727a	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  07282	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  07289	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0728e	c7 44 24 20 ff
	00 00 00	 mov	 DWORD PTR [rsp+32], 255	; 000000ffH
  07296	45 33 c9	 xor	 r9d, r9d
  07299	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  072a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?vec4i@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAHA
  072a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09LOIDAOFJ@drag?5int2?$AA@
  072af	e8 00 00 00 00	 call	 ?DragInt2@ImGui@@YA_NPEBDQEAHMHH0H@Z ; ImGui::DragInt2

; 2101 :         ImGui::SliderInt2("slider int2", vec4i, 0, 255);

  072b4	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  072bc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  072c3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  072c8	41 b9 ff 00 00
	00		 mov	 r9d, 255		; 000000ffH
  072ce	45 33 c0	 xor	 r8d, r8d
  072d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?vec4i@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAHA
  072d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LEEOPKGD@slider?5int2?$AA@
  072df	e8 00 00 00 00	 call	 ?SliderInt2@ImGui@@YA_NPEBDQEAHHH0H@Z ; ImGui::SliderInt2

; 2102 :         ImGui::Spacing();

  072e4	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 2103 : 
; 2104 :         ImGui::InputFloat3("input float3", vec4f);

  072e9	45 33 c9	 xor	 r9d, r9d
  072ec	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  072f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?vec4f@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  072fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@KKMOFJMF@input?5float3?$AA@
  07301	e8 00 00 00 00	 call	 ?InputFloat3@ImGui@@YA_NPEBDQEAM0H@Z ; ImGui::InputFloat3

; 2105 :         ImGui::DragFloat3("drag float3", vec4f, 0.01f, 0.0f, 1.0f);

  07306	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0730e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  07315	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0731a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  07322	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  07328	0f 57 db	 xorps	 xmm3, xmm3
  0732b	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3c23d70a
  07333	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?vec4f@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  0733a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@FOFKAHBI@drag?5float3?$AA@
  07341	e8 00 00 00 00	 call	 ?DragFloat3@ImGui@@YA_NPEBDQEAMMMM0H@Z ; ImGui::DragFloat3

; 2106 :         ImGui::SliderFloat3("slider float3", vec4f, 0.0f, 1.0f);

  07346	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0734e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  07355	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0735a	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  07362	0f 57 d2	 xorps	 xmm2, xmm2
  07365	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?vec4f@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  0736c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@MBCDOFKJ@slider?5float3?$AA@
  07373	e8 00 00 00 00	 call	 ?SliderFloat3@ImGui@@YA_NPEBDQEAMMM0H@Z ; ImGui::SliderFloat3

; 2107 :         ImGui::InputInt3("input int3", vec4i);

  07378	45 33 c0	 xor	 r8d, r8d
  0737b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?vec4i@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAHA
  07382	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@JDBPEPPC@input?5int3?$AA@
  07389	e8 00 00 00 00	 call	 ?InputInt3@ImGui@@YA_NPEBDQEAHH@Z ; ImGui::InputInt3

; 2108 :         ImGui::DragInt3("drag int3", vec4i, 1, 0, 255);

  0738e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  07396	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  0739d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  073a2	c7 44 24 20 ff
	00 00 00	 mov	 DWORD PTR [rsp+32], 255	; 000000ffH
  073aa	45 33 c9	 xor	 r9d, r9d
  073ad	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  073b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?vec4i@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAHA
  073bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09KHJIDPBI@drag?5int3?$AA@
  073c3	e8 00 00 00 00	 call	 ?DragInt3@ImGui@@YA_NPEBDQEAHMHH0H@Z ; ImGui::DragInt3

; 2109 :         ImGui::SliderInt3("slider int3", vec4i, 0, 255);

  073c8	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  073d0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  073d7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  073dc	41 b9 ff 00 00
	00		 mov	 r9d, 255		; 000000ffH
  073e2	45 33 c0	 xor	 r8d, r8d
  073e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?vec4i@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAHA
  073ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@KNFFMLCC@slider?5int3?$AA@
  073f3	e8 00 00 00 00	 call	 ?SliderInt3@ImGui@@YA_NPEBDQEAHHH0H@Z ; ImGui::SliderInt3

; 2110 :         ImGui::Spacing();

  073f8	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 2111 : 
; 2112 :         ImGui::InputFloat4("input float4", vec4f);

  073fd	45 33 c9	 xor	 r9d, r9d
  07400	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  07407	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?vec4f@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  0740e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@OFIPMPAC@input?5float4?$AA@
  07415	e8 00 00 00 00	 call	 ?InputFloat4@ImGui@@YA_NPEBDQEAM0H@Z ; ImGui::InputFloat4

; 2113 :         ImGui::DragFloat4("drag float4", vec4f, 0.01f, 0.0f, 1.0f);

  0741a	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  07422	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  07429	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0742e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  07436	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0743c	0f 57 db	 xorps	 xmm3, xmm3
  0743f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3c23d70a
  07447	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?vec4f@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  0744e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@BBBLJBNP@drag?5float4?$AA@
  07455	e8 00 00 00 00	 call	 ?DragFloat4@ImGui@@YA_NPEBDQEAMMMM0H@Z ; ImGui::DragFloat4

; 2114 :         ImGui::SliderFloat4("slider float4", vec4f, 0.0f, 1.0f);

  0745a	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  07462	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  07469	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0746e	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  07476	0f 57 d2	 xorps	 xmm2, xmm2
  07479	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?vec4f@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  07480	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IOGCHDGO@slider?5float4?$AA@
  07487	e8 00 00 00 00	 call	 ?SliderFloat4@ImGui@@YA_NPEBDQEAMMM0H@Z ; ImGui::SliderFloat4

; 2115 :         ImGui::InputInt4("input int4", vec4i);

  0748c	45 33 c0	 xor	 r8d, r8d
  0748f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?vec4i@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAHA
  07496	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@NMFONJDF@input?5int4?$AA@
  0749d	e8 00 00 00 00	 call	 ?InputInt4@ImGui@@YA_NPEBDQEAHH@Z ; ImGui::InputInt4

; 2116 :         ImGui::DragInt4("drag int4", vec4i, 1, 0, 255);

  074a2	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  074aa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  074b1	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  074b6	c7 44 24 20 ff
	00 00 00	 mov	 DWORD PTR [rsp+32], 255	; 000000ffH
  074be	45 33 c9	 xor	 r9d, r9d
  074c1	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  074c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?vec4i@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAHA
  074d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09OINJKJNP@drag?5int4?$AA@
  074d7	e8 00 00 00 00	 call	 ?DragInt4@ImGui@@YA_NPEBDQEAHMHH0H@Z ; ImGui::DragInt4

; 2117 :         ImGui::SliderInt4("slider int4", vec4i, 0, 255);

  074dc	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  074e4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  074eb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  074f0	41 b9 ff 00 00
	00		 mov	 r9d, 255		; 000000ffH
  074f6	45 33 c0	 xor	 r8d, r8d
  074f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?vec4i@?CME@??ShowDemoWindowWidgets@@YAXXZ@4PAHA
  07500	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@OCBEFNOF@slider?5int4?$AA@
  07507	e8 00 00 00 00	 call	 ?SliderInt4@ImGui@@YA_NPEBDQEAHHH0H@Z ; ImGui::SliderInt4

; 2118 : 
; 2119 :         ImGui::TreePop();

  0750c	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN283@ShowDemoWi:

; 2120 :     }
; 2121 : 
; 2122 :     IMGUI_DEMO_MARKER("Widgets/Vertical Sliders");

  07511	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  07519	74 28		 je	 SHORT $LN551@ShowDemoWi
  0751b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  07521	05 27 06 00 00	 add	 eax, 1575		; 00000627H
  07526	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0752d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BJ@PJBGHCMF@Widgets?1Vertical?5Sliders?$AA@
  07534	8b d0		 mov	 edx, eax
  07536	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0753d	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN551@ShowDemoWi:
  07543	33 c0		 xor	 eax, eax
  07545	85 c0		 test	 eax, eax
  07547	75 c8		 jne	 SHORT $LN283@ShowDemoWi

; 2123 :     if (ImGui::TreeNode("Vertical Sliders"))

  07549	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@EAIBMPEL@Vertical?5Sliders?$AA@
  07550	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  07555	0f b6 c0	 movzx	 eax, al
  07558	85 c0		 test	 eax, eax
  0755a	0f 84 9f 05 00
	00		 je	 $LN298@ShowDemoWi

; 2124 :     {
; 2125 :         const float spacing = 4;

  07560	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  07568	f3 0f 11 85 24
	15 00 00	 movss	 DWORD PTR spacing$242[rbp], xmm0

; 2126 :         ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(spacing, spacing));

  07570	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@40800000
  07578	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40800000
  07580	48 8d 8d 54 27
	00 00		 lea	 rcx, QWORD PTR $T327[rbp]
  07587	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0758c	48 8b d0	 mov	 rdx, rax
  0758f	b9 0e 00 00 00	 mov	 ecx, 14
  07594	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z ; ImGui::PushStyleVar

; 2127 : 
; 2128 :         static int int_value = 0;
; 2129 :         ImGui::VSliderInt("##int", ImVec2(18, 160), &int_value, 0, 5);

  07599	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43200000
  075a1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41900000
  075a9	48 8d 8d 74 27
	00 00		 lea	 rcx, QWORD PTR $T328[rbp]
  075b0	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  075b5	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  075bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  075c4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  075c9	c7 44 24 20 05
	00 00 00	 mov	 DWORD PTR [rsp+32], 5
  075d1	45 33 c9	 xor	 r9d, r9d
  075d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?int_value@?CML@??ShowDemoWindowWidgets@@YAXXZ@4HA
  075db	48 8b d0	 mov	 rdx, rax
  075de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05GFAJOEB@?$CD?$CDint?$AA@
  075e5	e8 00 00 00 00	 call	 ?VSliderInt@ImGui@@YA_NPEBDAEBUImVec2@@PEAHHH0H@Z ; ImGui::VSliderInt

; 2130 :         ImGui::SameLine();

  075ea	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  075f2	0f 57 c0	 xorps	 xmm0, xmm0
  075f5	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2131 : 
; 2132 :         static float values[7] = { 0.0f, 0.60f, 0.35f, 0.9f, 0.70f, 0.20f, 0.0f };
; 2133 :         ImGui::PushID("set1");

  075fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BOPCFCPC@set1?$AA@
  07601	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPEBD@Z ; ImGui::PushID

; 2134 :         for (int i = 0; i < 7; i++)

  07606	c7 85 44 15 00
	00 00 00 00 00	 mov	 DWORD PTR i$243[rbp], 0
  07610	eb 0e		 jmp	 SHORT $LN286@ShowDemoWi
$LN284@ShowDemoWi:
  07612	8b 85 44 15 00
	00		 mov	 eax, DWORD PTR i$243[rbp]
  07618	ff c0		 inc	 eax
  0761a	89 85 44 15 00
	00		 mov	 DWORD PTR i$243[rbp], eax
$LN286@ShowDemoWi:
  07620	83 bd 44 15 00
	00 07		 cmp	 DWORD PTR i$243[rbp], 7
  07627	0f 8d 50 02 00
	00		 jge	 $LN285@ShowDemoWi

; 2135 :         {
; 2136 :             if (i > 0) ImGui::SameLine();

  0762d	83 bd 44 15 00
	00 00		 cmp	 DWORD PTR i$243[rbp], 0
  07634	7e 10		 jle	 SHORT $LN553@ShowDemoWi
  07636	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0763e	0f 57 c0	 xorps	 xmm0, xmm0
  07641	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
$LN553@ShowDemoWi:

; 2137 :             ImGui::PushID(i);

  07646	8b 8d 44 15 00
	00		 mov	 ecx, DWORD PTR i$243[rbp]
  0764c	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 2138 :             ImGui::PushStyleColor(ImGuiCol_FrameBg, (ImVec4)ImColor::HSV(i / 7.0f, 0.5f, 0.5f));

  07651	f3 0f 2a 85 44
	15 00 00	 cvtsi2ss xmm0, DWORD PTR i$243[rbp]
  07659	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40e00000
  07661	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  07669	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [rsp+32], xmm1
  0766f	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000
  07677	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f000000
  0767f	0f 28 c8	 movaps	 xmm1, xmm0
  07682	48 8d 8d 94 27
	00 00		 lea	 rcx, QWORD PTR $T329[rbp]
  07689	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  0768e	48 8d 95 c4 27
	00 00		 lea	 rdx, QWORD PTR $T330[rbp]
  07695	48 8b c8	 mov	 rcx, rax
  07698	e8 00 00 00 00	 call	 ??BImColor@@QEBA?AUImVec4@@XZ ; ImColor::operator ImVec4
  0769d	48 8b d0	 mov	 rdx, rax
  076a0	b9 07 00 00 00	 mov	 ecx, 7
  076a5	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor

; 2139 :             ImGui::PushStyleColor(ImGuiCol_FrameBgHovered, (ImVec4)ImColor::HSV(i / 7.0f, 0.6f, 0.5f));

  076aa	f3 0f 2a 85 44
	15 00 00	 cvtsi2ss xmm0, DWORD PTR i$243[rbp]
  076b2	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40e00000
  076ba	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  076c2	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [rsp+32], xmm1
  076c8	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000
  076d0	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f19999a
  076d8	0f 28 c8	 movaps	 xmm1, xmm0
  076db	48 8d 8d f4 27
	00 00		 lea	 rcx, QWORD PTR $T331[rbp]
  076e2	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  076e7	48 8d 95 24 28
	00 00		 lea	 rdx, QWORD PTR $T332[rbp]
  076ee	48 8b c8	 mov	 rcx, rax
  076f1	e8 00 00 00 00	 call	 ??BImColor@@QEBA?AUImVec4@@XZ ; ImColor::operator ImVec4
  076f6	48 8b d0	 mov	 rdx, rax
  076f9	b9 08 00 00 00	 mov	 ecx, 8
  076fe	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor

; 2140 :             ImGui::PushStyleColor(ImGuiCol_FrameBgActive, (ImVec4)ImColor::HSV(i / 7.0f, 0.7f, 0.5f));

  07703	f3 0f 2a 85 44
	15 00 00	 cvtsi2ss xmm0, DWORD PTR i$243[rbp]
  0770b	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40e00000
  07713	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0771b	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [rsp+32], xmm1
  07721	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000
  07729	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f333333
  07731	0f 28 c8	 movaps	 xmm1, xmm0
  07734	48 8d 8d 54 28
	00 00		 lea	 rcx, QWORD PTR $T333[rbp]
  0773b	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  07740	48 8d 95 84 28
	00 00		 lea	 rdx, QWORD PTR $T334[rbp]
  07747	48 8b c8	 mov	 rcx, rax
  0774a	e8 00 00 00 00	 call	 ??BImColor@@QEBA?AUImVec4@@XZ ; ImColor::operator ImVec4
  0774f	48 8b d0	 mov	 rdx, rax
  07752	b9 09 00 00 00	 mov	 ecx, 9
  07757	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor

; 2141 :             ImGui::PushStyleColor(ImGuiCol_SliderGrab, (ImVec4)ImColor::HSV(i / 7.0f, 0.9f, 0.9f));

  0775c	f3 0f 2a 85 44
	15 00 00	 cvtsi2ss xmm0, DWORD PTR i$243[rbp]
  07764	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40e00000
  0776c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  07774	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [rsp+32], xmm1
  0777a	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f666666
  07782	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f666666
  0778a	0f 28 c8	 movaps	 xmm1, xmm0
  0778d	48 8d 8d b4 28
	00 00		 lea	 rcx, QWORD PTR $T335[rbp]
  07794	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  07799	48 8d 95 e4 28
	00 00		 lea	 rdx, QWORD PTR $T336[rbp]
  077a0	48 8b c8	 mov	 rcx, rax
  077a3	e8 00 00 00 00	 call	 ??BImColor@@QEBA?AUImVec4@@XZ ; ImColor::operator ImVec4
  077a8	48 8b d0	 mov	 rdx, rax
  077ab	b9 13 00 00 00	 mov	 ecx, 19
  077b0	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor

; 2142 :             ImGui::VSliderFloat("##v", ImVec2(18, 160), &values[i], 0.0f, 1.0f, "");

  077b5	48 63 85 44 15
	00 00		 movsxd	 rax, DWORD PTR i$243[rbp]
  077bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?values@?CML@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  077c3	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  077c7	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv4603[rbp], rax
  077ce	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43200000
  077d6	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41900000
  077de	48 8d 8d 14 29
	00 00		 lea	 rcx, QWORD PTR $T337[rbp]
  077e5	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  077ea	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  077f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  077f9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  077fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  07806	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0780c	0f 57 db	 xorps	 xmm3, xmm3
  0780f	48 8b 8d 48 2b
	00 00		 mov	 rcx, QWORD PTR tv4603[rbp]
  07816	4c 8b c1	 mov	 r8, rcx
  07819	48 8b d0	 mov	 rdx, rax
  0781c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CPFCAGPK@?$CD?$CDv?$AA@
  07823	e8 00 00 00 00	 call	 ?VSliderFloat@ImGui@@YA_NPEBDAEBUImVec2@@PEAMMM0H@Z ; ImGui::VSliderFloat

; 2143 :             if (ImGui::IsItemActive() || ImGui::IsItemHovered())

  07828	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  0782d	0f b6 c0	 movzx	 eax, al
  07830	85 c0		 test	 eax, eax
  07832	75 0e		 jne	 SHORT $LN555@ShowDemoWi
  07834	33 c9		 xor	 ecx, ecx
  07836	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  0783b	0f b6 c0	 movzx	 eax, al
  0783e	85 c0		 test	 eax, eax
  07840	74 27		 je	 SHORT $LN554@ShowDemoWi
$LN555@ShowDemoWi:

; 2144 :                 ImGui::SetTooltip("%.3f", values[i]);

  07842	48 63 85 44 15
	00 00		 movsxd	 rax, DWORD PTR i$243[rbp]
  07849	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?values@?CML@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  07850	f3 0f 5a 04 81	 cvtss2sd xmm0, DWORD PTR [rcx+rax*4]
  07855	0f 28 c8	 movaps	 xmm1, xmm0
  07858	66 48 0f 7e ca	 movq	 rdx, xmm1
  0785d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  07864	e8 00 00 00 00	 call	 ?SetTooltip@ImGui@@YAXPEBDZZ ; ImGui::SetTooltip
$LN554@ShowDemoWi:

; 2145 :             ImGui::PopStyleColor(4);

  07869	b9 04 00 00 00	 mov	 ecx, 4
  0786e	e8 00 00 00 00	 call	 ?PopStyleColor@ImGui@@YAXH@Z ; ImGui::PopStyleColor

; 2146 :             ImGui::PopID();

  07873	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 2147 :         }

  07878	e9 95 fd ff ff	 jmp	 $LN284@ShowDemoWi
$LN285@ShowDemoWi:

; 2148 :         ImGui::PopID();

  0787d	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 2149 : 
; 2150 :         ImGui::SameLine();

  07882	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0788a	0f 57 c0	 xorps	 xmm0, xmm0
  0788d	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2151 :         ImGui::PushID("set2");

  07892	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04DFNPABDB@set2?$AA@
  07899	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPEBD@Z ; ImGui::PushID

; 2152 :         static float values2[4] = { 0.20f, 0.80f, 0.40f, 0.25f };
; 2153 :         const int rows = 3;

  0789e	c7 85 64 15 00
	00 03 00 00 00	 mov	 DWORD PTR rows$244[rbp], 3

; 2154 :         const ImVec2 small_slider_size(18, (float)(int)((160.0f - (rows - 1) * spacing) / rows));

  078a8	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42480000
  078b0	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41900000
  078b8	48 8d 8d 88 15
	00 00		 lea	 rcx, QWORD PTR small_slider_size$245[rbp]
  078bf	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 2155 :         for (int nx = 0; nx < 4; nx++)

  078c4	c7 85 a4 15 00
	00 00 00 00 00	 mov	 DWORD PTR nx$246[rbp], 0
  078ce	eb 0e		 jmp	 SHORT $LN289@ShowDemoWi
$LN287@ShowDemoWi:
  078d0	8b 85 a4 15 00
	00		 mov	 eax, DWORD PTR nx$246[rbp]
  078d6	ff c0		 inc	 eax
  078d8	89 85 a4 15 00
	00		 mov	 DWORD PTR nx$246[rbp], eax
$LN289@ShowDemoWi:
  078de	83 bd a4 15 00
	00 04		 cmp	 DWORD PTR nx$246[rbp], 4
  078e5	0f 8d fb 00 00
	00		 jge	 $LN288@ShowDemoWi

; 2156 :         {
; 2157 :             if (nx > 0) ImGui::SameLine();

  078eb	83 bd a4 15 00
	00 00		 cmp	 DWORD PTR nx$246[rbp], 0
  078f2	7e 10		 jle	 SHORT $LN556@ShowDemoWi
  078f4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  078fc	0f 57 c0	 xorps	 xmm0, xmm0
  078ff	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
$LN556@ShowDemoWi:

; 2158 :             ImGui::BeginGroup();

  07904	e8 00 00 00 00	 call	 ?BeginGroup@ImGui@@YAXXZ ; ImGui::BeginGroup

; 2159 :             for (int ny = 0; ny < rows; ny++)

  07909	c7 85 c4 15 00
	00 00 00 00 00	 mov	 DWORD PTR ny$247[rbp], 0
  07913	eb 0e		 jmp	 SHORT $LN292@ShowDemoWi
$LN290@ShowDemoWi:
  07915	8b 85 c4 15 00
	00		 mov	 eax, DWORD PTR ny$247[rbp]
  0791b	ff c0		 inc	 eax
  0791d	89 85 c4 15 00
	00		 mov	 DWORD PTR ny$247[rbp], eax
$LN292@ShowDemoWi:
  07923	83 bd c4 15 00
	00 03		 cmp	 DWORD PTR ny$247[rbp], 3
  0792a	0f 8d ac 00 00
	00		 jge	 $LN291@ShowDemoWi

; 2160 :             {
; 2161 :                 ImGui::PushID(nx * rows + ny);

  07930	6b 85 a4 15 00
	00 03		 imul	 eax, DWORD PTR nx$246[rbp], 3
  07937	03 85 c4 15 00
	00		 add	 eax, DWORD PTR ny$247[rbp]
  0793d	8b c8		 mov	 ecx, eax
  0793f	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 2162 :                 ImGui::VSliderFloat("##v", small_slider_size, &values2[nx], 0.0f, 1.0f, "");

  07944	48 63 85 a4 15
	00 00		 movsxd	 rax, DWORD PTR nx$246[rbp]
  0794b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?values2@?CML@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  07952	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  07956	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0795e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  07965	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0796a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  07972	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  07978	0f 57 db	 xorps	 xmm3, xmm3
  0797b	4c 8b c0	 mov	 r8, rax
  0797e	48 8d 95 88 15
	00 00		 lea	 rdx, QWORD PTR small_slider_size$245[rbp]
  07985	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CPFCAGPK@?$CD?$CDv?$AA@
  0798c	e8 00 00 00 00	 call	 ?VSliderFloat@ImGui@@YA_NPEBDAEBUImVec2@@PEAMMM0H@Z ; ImGui::VSliderFloat

; 2163 :                 if (ImGui::IsItemActive() || ImGui::IsItemHovered())

  07991	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  07996	0f b6 c0	 movzx	 eax, al
  07999	85 c0		 test	 eax, eax
  0799b	75 0e		 jne	 SHORT $LN558@ShowDemoWi
  0799d	33 c9		 xor	 ecx, ecx
  0799f	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  079a4	0f b6 c0	 movzx	 eax, al
  079a7	85 c0		 test	 eax, eax
  079a9	74 27		 je	 SHORT $LN557@ShowDemoWi
$LN558@ShowDemoWi:

; 2164 :                     ImGui::SetTooltip("%.3f", values2[nx]);

  079ab	48 63 85 a4 15
	00 00		 movsxd	 rax, DWORD PTR nx$246[rbp]
  079b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?values2@?CML@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  079b9	f3 0f 5a 04 81	 cvtss2sd xmm0, DWORD PTR [rcx+rax*4]
  079be	0f 28 c8	 movaps	 xmm1, xmm0
  079c1	66 48 0f 7e ca	 movq	 rdx, xmm1
  079c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  079cd	e8 00 00 00 00	 call	 ?SetTooltip@ImGui@@YAXPEBDZZ ; ImGui::SetTooltip
$LN557@ShowDemoWi:

; 2165 :                 ImGui::PopID();

  079d2	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 2166 :             }

  079d7	e9 39 ff ff ff	 jmp	 $LN290@ShowDemoWi
$LN291@ShowDemoWi:

; 2167 :             ImGui::EndGroup();

  079dc	e8 00 00 00 00	 call	 ?EndGroup@ImGui@@YAXXZ	; ImGui::EndGroup

; 2168 :         }

  079e1	e9 ea fe ff ff	 jmp	 $LN287@ShowDemoWi
$LN288@ShowDemoWi:

; 2169 :         ImGui::PopID();

  079e6	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 2170 : 
; 2171 :         ImGui::SameLine();

  079eb	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  079f3	0f 57 c0	 xorps	 xmm0, xmm0
  079f6	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2172 :         ImGui::PushID("set3");

  079fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04CMMEDAHA@set3?$AA@
  07a02	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPEBD@Z ; ImGui::PushID

; 2173 :         for (int i = 0; i < 4; i++)

  07a07	c7 85 e4 15 00
	00 00 00 00 00	 mov	 DWORD PTR i$248[rbp], 0
  07a11	eb 0e		 jmp	 SHORT $LN295@ShowDemoWi
$LN293@ShowDemoWi:
  07a13	8b 85 e4 15 00
	00		 mov	 eax, DWORD PTR i$248[rbp]
  07a19	ff c0		 inc	 eax
  07a1b	89 85 e4 15 00
	00		 mov	 DWORD PTR i$248[rbp], eax
$LN295@ShowDemoWi:
  07a21	83 bd e4 15 00
	00 04		 cmp	 DWORD PTR i$248[rbp], 4
  07a28	0f 8d bd 00 00
	00		 jge	 $LN294@ShowDemoWi

; 2174 :         {
; 2175 :             if (i > 0) ImGui::SameLine();

  07a2e	83 bd e4 15 00
	00 00		 cmp	 DWORD PTR i$248[rbp], 0
  07a35	7e 10		 jle	 SHORT $LN559@ShowDemoWi
  07a37	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  07a3f	0f 57 c0	 xorps	 xmm0, xmm0
  07a42	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
$LN559@ShowDemoWi:

; 2176 :             ImGui::PushID(i);

  07a47	8b 8d e4 15 00
	00		 mov	 ecx, DWORD PTR i$248[rbp]
  07a4d	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 2177 :             ImGui::PushStyleVar(ImGuiStyleVar_GrabMinSize, 40);

  07a52	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42200000
  07a5a	b9 14 00 00 00	 mov	 ecx, 20
  07a5f	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHM@Z ; ImGui::PushStyleVar

; 2178 :             ImGui::VSliderFloat("##v", ImVec2(40, 160), &values[i], 0.0f, 1.0f, "%.2f\nsec");

  07a64	48 63 85 e4 15
	00 00		 movsxd	 rax, DWORD PTR i$248[rbp]
  07a6b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?values@?CML@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  07a72	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  07a76	48 89 85 48 2b
	00 00		 mov	 QWORD PTR tv4681[rbp], rax
  07a7d	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43200000
  07a85	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42200000
  07a8d	48 8d 8d 34 29
	00 00		 lea	 rcx, QWORD PTR $T338[rbp]
  07a94	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  07a99	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  07aa1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OPMLCCJJ@?$CF?42f?6sec?$AA@
  07aa8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  07aad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  07ab5	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  07abb	0f 57 db	 xorps	 xmm3, xmm3
  07abe	48 8b 8d 48 2b
	00 00		 mov	 rcx, QWORD PTR tv4681[rbp]
  07ac5	4c 8b c1	 mov	 r8, rcx
  07ac8	48 8b d0	 mov	 rdx, rax
  07acb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CPFCAGPK@?$CD?$CDv?$AA@
  07ad2	e8 00 00 00 00	 call	 ?VSliderFloat@ImGui@@YA_NPEBDAEBUImVec2@@PEAMMM0H@Z ; ImGui::VSliderFloat

; 2179 :             ImGui::PopStyleVar();

  07ad7	b9 01 00 00 00	 mov	 ecx, 1
  07adc	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar

; 2180 :             ImGui::PopID();

  07ae1	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 2181 :         }

  07ae6	e9 28 ff ff ff	 jmp	 $LN293@ShowDemoWi
$LN294@ShowDemoWi:

; 2182 :         ImGui::PopID();

  07aeb	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 2183 :         ImGui::PopStyleVar();

  07af0	b9 01 00 00 00	 mov	 ecx, 1
  07af5	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar

; 2184 :         ImGui::TreePop();

  07afa	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN298@ShowDemoWi:

; 2185 :     }
; 2186 : 
; 2187 :     IMGUI_DEMO_MARKER("Widgets/Drag and drop");

  07aff	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  07b07	74 28		 je	 SHORT $LN560@ShowDemoWi
  07b09	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  07b0f	05 68 06 00 00	 add	 eax, 1640		; 00000668H
  07b14	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  07b1b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@MGGGFMDO@Widgets?1Drag?5and?5drop?$AA@
  07b22	8b d0		 mov	 edx, eax
  07b24	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  07b2b	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN560@ShowDemoWi:
  07b31	33 c0		 xor	 eax, eax
  07b33	85 c0		 test	 eax, eax
  07b35	75 c8		 jne	 SHORT $LN298@ShowDemoWi

; 2188 :     if (ImGui::TreeNode("Drag and Drop"))

  07b37	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NPGBLOMK@Drag?5and?5Drop?$AA@
  07b3e	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  07b43	0f b6 c0	 movzx	 eax, al
  07b46	85 c0		 test	 eax, eax
  07b48	0f 84 e3 05 00
	00		 je	 $LN316@ShowDemoWi
$LN301@ShowDemoWi:

; 2189 :     {
; 2190 :         IMGUI_DEMO_MARKER("Widgets/Drag and drop/Standard widgets");

  07b4e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  07b56	74 28		 je	 SHORT $LN562@ShowDemoWi
  07b58	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  07b5e	05 6b 06 00 00	 add	 eax, 1643		; 0000066bH
  07b63	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  07b6a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CH@JCNBENHC@Widgets?1Drag?5and?5drop?1Standard?5w@
  07b71	8b d0		 mov	 edx, eax
  07b73	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  07b7a	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN562@ShowDemoWi:
  07b80	33 c0		 xor	 eax, eax
  07b82	85 c0		 test	 eax, eax
  07b84	75 c8		 jne	 SHORT $LN301@ShowDemoWi

; 2191 :         if (ImGui::TreeNode("Drag and drop in standard widgets"))

  07b86	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@EPFBCHH@Drag?5and?5drop?5in?5standard?5widget@
  07b8d	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  07b92	0f b6 c0	 movzx	 eax, al
  07b95	85 c0		 test	 eax, eax
  07b97	74 3d		 je	 SHORT $LN304@ShowDemoWi

; 2192 :         {
; 2193 :             // ColorEdit widgets automatically act as drag source and drag target.
; 2194 :             // They are using standardized payload strings IMGUI_PAYLOAD_TYPE_COLOR_3F and IMGUI_PAYLOAD_TYPE_COLOR_4F
; 2195 :             // to allow your own widgets to use colors in their drag and drop interaction.
; 2196 :             // Also see 'Demo->Widgets->Color/Picker Widgets->Palette' demo.
; 2197 :             HelpMarker("You can drag from the color squares.");

  07b99	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@BONKBAOB@You?5can?5drag?5from?5the?5color?5squa@
  07ba0	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 2198 :             static float col1[3] = { 1.0f, 0.0f, 0.2f };
; 2199 :             static float col2[4] = { 0.4f, 0.7f, 0.0f, 0.5f };
; 2200 :             ImGui::ColorEdit3("color 1", col1);

  07ba5	45 33 c0	 xor	 r8d, r8d
  07ba8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?col1@?COL@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  07baf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07OCDFLNDK@color?51?$AA@
  07bb6	e8 00 00 00 00	 call	 ?ColorEdit3@ImGui@@YA_NPEBDQEAMH@Z ; ImGui::ColorEdit3

; 2201 :             ImGui::ColorEdit4("color 2", col2);

  07bbb	45 33 c0	 xor	 r8d, r8d
  07bbe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?col2@?COL@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  07bc5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07MJBIOOPJ@color?52?$AA@
  07bcc	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z ; ImGui::ColorEdit4

; 2202 :             ImGui::TreePop();

  07bd1	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN304@ShowDemoWi:

; 2203 :         }
; 2204 : 
; 2205 :         IMGUI_DEMO_MARKER("Widgets/Drag and drop/Copy-swap items");

  07bd6	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  07bde	74 28		 je	 SHORT $LN564@ShowDemoWi
  07be0	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  07be6	05 7a 06 00 00	 add	 eax, 1658		; 0000067aH
  07beb	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  07bf2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CG@ELLGHBBE@Widgets?1Drag?5and?5drop?1Copy?9swap?5@
  07bf9	8b d0		 mov	 edx, eax
  07bfb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  07c02	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN564@ShowDemoWi:
  07c08	33 c0		 xor	 eax, eax
  07c0a	85 c0		 test	 eax, eax
  07c0c	75 c8		 jne	 SHORT $LN304@ShowDemoWi

; 2206 :         if (ImGui::TreeNode("Drag and drop to copy/swap items"))

  07c0e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@EBEBHJBF@Drag?5and?5drop?5to?5copy?1swap?5items@
  07c15	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  07c1a	0f b6 c0	 movzx	 eax, al
  07c1d	85 c0		 test	 eax, eax
  07c1f	0f 84 79 03 00
	00		 je	 $LN310@ShowDemoWi

; 2207 :         {
; 2208 :             enum Mode
; 2209 :             {
; 2210 :                 Mode_Copy,
; 2211 :                 Mode_Move,
; 2212 :                 Mode_Swap
; 2213 :             };
; 2214 :             static int mode = 0;
; 2215 :             if (ImGui::RadioButton("Copy", mode == Mode_Copy)) { mode = Mode_Copy; } ImGui::SameLine();

  07c25	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mode@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4HA, 0
  07c2c	75 09		 jne	 SHORT $LN716@ShowDemoWi
  07c2e	c6 85 44 2b 00
	00 01		 mov	 BYTE PTR tv4732[rbp], 1
  07c35	eb 07		 jmp	 SHORT $LN717@ShowDemoWi
$LN716@ShowDemoWi:
  07c37	c6 85 44 2b 00
	00 00		 mov	 BYTE PTR tv4732[rbp], 0
$LN717@ShowDemoWi:
  07c3e	0f b6 95 44 2b
	00 00		 movzx	 edx, BYTE PTR tv4732[rbp]
  07c45	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04OPMHGHMB@Copy?$AA@
  07c4c	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPEBD_N@Z ; ImGui::RadioButton
  07c51	0f b6 c0	 movzx	 eax, al
  07c54	85 c0		 test	 eax, eax
  07c56	74 0a		 je	 SHORT $LN566@ShowDemoWi
  07c58	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mode@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4HA, 0
$LN566@ShowDemoWi:
  07c62	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  07c6a	0f 57 c0	 xorps	 xmm0, xmm0
  07c6d	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2216 :             if (ImGui::RadioButton("Move", mode == Mode_Move)) { mode = Mode_Move; } ImGui::SameLine();

  07c72	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?mode@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4HA, 1
  07c79	75 09		 jne	 SHORT $LN718@ShowDemoWi
  07c7b	c6 85 44 2b 00
	00 01		 mov	 BYTE PTR tv4741[rbp], 1
  07c82	eb 07		 jmp	 SHORT $LN719@ShowDemoWi
$LN718@ShowDemoWi:
  07c84	c6 85 44 2b 00
	00 00		 mov	 BYTE PTR tv4741[rbp], 0
$LN719@ShowDemoWi:
  07c8b	0f b6 95 44 2b
	00 00		 movzx	 edx, BYTE PTR tv4741[rbp]
  07c92	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LCANPIEP@Move?$AA@
  07c99	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPEBD_N@Z ; ImGui::RadioButton
  07c9e	0f b6 c0	 movzx	 eax, al
  07ca1	85 c0		 test	 eax, eax
  07ca3	74 0a		 je	 SHORT $LN567@ShowDemoWi
  07ca5	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mode@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4HA, 1
$LN567@ShowDemoWi:
  07caf	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  07cb7	0f 57 c0	 xorps	 xmm0, xmm0
  07cba	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2217 :             if (ImGui::RadioButton("Swap", mode == Mode_Swap)) { mode = Mode_Swap; }

  07cbf	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?mode@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4HA, 2
  07cc6	75 09		 jne	 SHORT $LN720@ShowDemoWi
  07cc8	c6 85 44 2b 00
	00 01		 mov	 BYTE PTR tv4750[rbp], 1
  07ccf	eb 07		 jmp	 SHORT $LN721@ShowDemoWi
$LN720@ShowDemoWi:
  07cd1	c6 85 44 2b 00
	00 00		 mov	 BYTE PTR tv4750[rbp], 0
$LN721@ShowDemoWi:
  07cd8	0f b6 95 44 2b
	00 00		 movzx	 edx, BYTE PTR tv4750[rbp]
  07cdf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04NGKMPNDN@Swap?$AA@
  07ce6	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPEBD_N@Z ; ImGui::RadioButton
  07ceb	0f b6 c0	 movzx	 eax, al
  07cee	85 c0		 test	 eax, eax
  07cf0	74 0a		 je	 SHORT $LN568@ShowDemoWi
  07cf2	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?mode@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4HA, 2
$LN568@ShowDemoWi:

; 2218 :             static const char* names[9] =
; 2219 :             {
; 2220 :                 "Bobby", "Beatrice", "Betty",
; 2221 :                 "Brianna", "Barry", "Bernard",
; 2222 :                 "Bibi", "Blaine", "Bryn"
; 2223 :             };
; 2224 :             for (int n = 0; n < IM_ARRAYSIZE(names); n++)

  07cfc	c7 85 04 16 00
	00 00 00 00 00	 mov	 DWORD PTR n$249[rbp], 0
  07d06	eb 0e		 jmp	 SHORT $LN307@ShowDemoWi
$LN305@ShowDemoWi:
  07d08	8b 85 04 16 00
	00		 mov	 eax, DWORD PTR n$249[rbp]
  07d0e	ff c0		 inc	 eax
  07d10	89 85 04 16 00
	00		 mov	 DWORD PTR n$249[rbp], eax
$LN307@ShowDemoWi:
  07d16	83 bd 04 16 00
	00 09		 cmp	 DWORD PTR n$249[rbp], 9
  07d1d	0f 8d 76 02 00
	00		 jge	 $LN306@ShowDemoWi

; 2225 :             {
; 2226 :                 ImGui::PushID(n);

  07d23	8b 8d 04 16 00
	00		 mov	 ecx, DWORD PTR n$249[rbp]
  07d29	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 2227 :                 if ((n % 3) != 0)

  07d2e	8b 85 04 16 00
	00		 mov	 eax, DWORD PTR n$249[rbp]
  07d34	99		 cdq
  07d35	b9 03 00 00 00	 mov	 ecx, 3
  07d3a	f7 f9		 idiv	 ecx
  07d3c	8b c2		 mov	 eax, edx
  07d3e	85 c0		 test	 eax, eax
  07d40	74 10		 je	 SHORT $LN569@ShowDemoWi

; 2228 :                     ImGui::SameLine();

  07d42	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  07d4a	0f 57 c0	 xorps	 xmm0, xmm0
  07d4d	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
$LN569@ShowDemoWi:

; 2229 :                 ImGui::Button(names[n], ImVec2(60, 60));

  07d52	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42700000
  07d5a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42700000
  07d62	48 8d 8d 54 29
	00 00		 lea	 rcx, QWORD PTR $T339[rbp]
  07d69	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  07d6e	48 63 8d 04 16
	00 00		 movsxd	 rcx, DWORD PTR n$249[rbp]
  07d75	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?names@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4PAPEBDA
  07d7c	48 89 95 48 2b
	00 00		 mov	 QWORD PTR tv5602[rbp], rdx
  07d83	48 8b d0	 mov	 rdx, rax
  07d86	48 8b 85 48 2b
	00 00		 mov	 rax, QWORD PTR tv5602[rbp]
  07d8d	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  07d91	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button

; 2230 : 
; 2231 :                 // Our buttons are both drag sources and drag targets here!
; 2232 :                 if (ImGui::BeginDragDropSource(ImGuiDragDropFlags_None))

  07d96	33 c9		 xor	 ecx, ecx
  07d98	e8 00 00 00 00	 call	 ?BeginDragDropSource@ImGui@@YA_NH@Z ; ImGui::BeginDragDropSource
  07d9d	0f b6 c0	 movzx	 eax, al
  07da0	85 c0		 test	 eax, eax
  07da2	0f 84 96 00 00
	00		 je	 $LN570@ShowDemoWi

; 2233 :                 {
; 2234 :                     // Set payload to carry the index of our item (could be anything)
; 2235 :                     ImGui::SetDragDropPayload("DND_DEMO_CELL", &n, sizeof(int));

  07da8	45 33 c9	 xor	 r9d, r9d
  07dab	41 b8 04 00 00
	00		 mov	 r8d, 4
  07db1	48 8d 95 04 16
	00 00		 lea	 rdx, QWORD PTR n$249[rbp]
  07db8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IBJLLBID@DND_DEMO_CELL?$AA@
  07dbf	e8 00 00 00 00	 call	 ?SetDragDropPayload@ImGui@@YA_NPEBDPEBX_KH@Z ; ImGui::SetDragDropPayload

; 2236 : 
; 2237 :                     // Display preview (could be anything, e.g. when dragging an image we could decide to display
; 2238 :                     // the filename and a small preview of the image, etc.)
; 2239 :                     if (mode == Mode_Copy) { ImGui::Text("Copy %s", names[n]); }

  07dc4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mode@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4HA, 0
  07dcb	75 1e		 jne	 SHORT $LN571@ShowDemoWi
  07dcd	48 63 85 04 16
	00 00		 movsxd	 rax, DWORD PTR n$249[rbp]
  07dd4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?names@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4PAPEBDA
  07ddb	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  07ddf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07CFHHFHOL@Copy?5?$CFs?$AA@
  07de6	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN571@ShowDemoWi:

; 2240 :                     if (mode == Mode_Move) { ImGui::Text("Move %s", names[n]); }

  07deb	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?mode@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4HA, 1
  07df2	75 1e		 jne	 SHORT $LN572@ShowDemoWi
  07df4	48 63 85 04 16
	00 00		 movsxd	 rax, DWORD PTR n$249[rbp]
  07dfb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?names@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4PAPEBDA
  07e02	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  07e06	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07EDLENMEH@Move?5?$CFs?$AA@
  07e0d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN572@ShowDemoWi:

; 2241 :                     if (mode == Mode_Swap) { ImGui::Text("Swap %s", names[n]); }

  07e12	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?mode@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4HA, 2
  07e19	75 1e		 jne	 SHORT $LN573@ShowDemoWi
  07e1b	48 63 85 04 16
	00 00		 movsxd	 rax, DWORD PTR n$249[rbp]
  07e22	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?names@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4PAPEBDA
  07e29	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  07e2d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07MIGHAHCG@Swap?5?$CFs?$AA@
  07e34	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN573@ShowDemoWi:

; 2242 :                     ImGui::EndDragDropSource();

  07e39	e8 00 00 00 00	 call	 ?EndDragDropSource@ImGui@@YAXXZ ; ImGui::EndDragDropSource
$LN570@ShowDemoWi:

; 2243 :                 }
; 2244 :                 if (ImGui::BeginDragDropTarget())

  07e3e	e8 00 00 00 00	 call	 ?BeginDragDropTarget@ImGui@@YA_NXZ ; ImGui::BeginDragDropTarget
  07e43	0f b6 c0	 movzx	 eax, al
  07e46	85 c0		 test	 eax, eax
  07e48	0f 84 41 01 00
	00		 je	 $LN574@ShowDemoWi

; 2245 :                 {
; 2246 :                     if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload("DND_DEMO_CELL"))

  07e4e	33 d2		 xor	 edx, edx
  07e50	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IBJLLBID@DND_DEMO_CELL?$AA@
  07e57	e8 00 00 00 00	 call	 ?AcceptDragDropPayload@ImGui@@YAPEBUImGuiPayload@@PEBDH@Z ; ImGui::AcceptDragDropPayload
  07e5c	48 89 85 28 16
	00 00		 mov	 QWORD PTR payload$250[rbp], rax
  07e63	48 83 bd 28 16
	00 00 00	 cmp	 QWORD PTR payload$250[rbp], 0
  07e6b	0f 84 19 01 00
	00		 je	 $LN575@ShowDemoWi

; 2247 :                     {
; 2248 :                         IM_ASSERT(payload->DataSize == sizeof(int));

  07e71	48 8b 85 28 16
	00 00		 mov	 rax, QWORD PTR payload$250[rbp]
  07e78	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  07e7c	48 83 f8 04	 cmp	 rax, 4
  07e80	74 24		 je	 SHORT $LN722@ShowDemoWi
  07e82	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  07e88	05 a5 06 00 00	 add	 eax, 1701		; 000006a5H
  07e8d	44 8b c0	 mov	 r8d, eax
  07e90	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@DPDGFNDC@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  07e97	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@PPPBDLLH@?$AAp?$AAa?$AAy?$AAl?$AAo?$AAa?$AAd?$AA?9?$AA?$DO?$AAD?$AAa?$AAt?$AAa?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ@
  07e9e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  07ea4	33 c0		 xor	 eax, eax
$LN722@ShowDemoWi:

; 2249 :                         int payload_n = *(const int*)payload->Data;

  07ea6	48 8b 85 28 16
	00 00		 mov	 rax, QWORD PTR payload$250[rbp]
  07ead	48 8b 00	 mov	 rax, QWORD PTR [rax]
  07eb0	8b 00		 mov	 eax, DWORD PTR [rax]
  07eb2	89 85 44 16 00
	00		 mov	 DWORD PTR payload_n$251[rbp], eax

; 2250 :                         if (mode == Mode_Copy)

  07eb8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mode@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4HA, 0
  07ebf	75 24		 jne	 SHORT $LN576@ShowDemoWi

; 2251 :                         {
; 2252 :                             names[n] = names[payload_n];

  07ec1	48 63 85 44 16
	00 00		 movsxd	 rax, DWORD PTR payload_n$251[rbp]
  07ec8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?names@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4PAPEBDA
  07ecf	48 63 95 04 16
	00 00		 movsxd	 rdx, DWORD PTR n$249[rbp]
  07ed6	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:?names@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4PAPEBDA
  07edd	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  07ee1	48 89 04 d7	 mov	 QWORD PTR [rdi+rdx*8], rax
$LN576@ShowDemoWi:

; 2253 :                         }
; 2254 :                         if (mode == Mode_Move)

  07ee5	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?mode@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4HA, 1
  07eec	75 3d		 jne	 SHORT $LN577@ShowDemoWi

; 2255 :                         {
; 2256 :                             names[n] = names[payload_n];

  07eee	48 63 85 44 16
	00 00		 movsxd	 rax, DWORD PTR payload_n$251[rbp]
  07ef5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?names@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4PAPEBDA
  07efc	48 63 95 04 16
	00 00		 movsxd	 rdx, DWORD PTR n$249[rbp]
  07f03	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:?names@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4PAPEBDA
  07f0a	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  07f0e	48 89 04 d7	 mov	 QWORD PTR [rdi+rdx*8], rax

; 2257 :                             names[payload_n] = "";

  07f12	48 63 85 44 16
	00 00		 movsxd	 rax, DWORD PTR payload_n$251[rbp]
  07f19	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?names@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4PAPEBDA
  07f20	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  07f27	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx
$LN577@ShowDemoWi:

; 2258 :                         }
; 2259 :                         if (mode == Mode_Swap)

  07f2b	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?mode@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4HA, 2
  07f32	75 56		 jne	 SHORT $LN575@ShowDemoWi

; 2260 :                         {
; 2261 :                             const char* tmp = names[n];

  07f34	48 63 85 04 16
	00 00		 movsxd	 rax, DWORD PTR n$249[rbp]
  07f3b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?names@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4PAPEBDA
  07f42	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  07f46	48 89 85 68 16
	00 00		 mov	 QWORD PTR tmp$252[rbp], rax

; 2262 :                             names[n] = names[payload_n];

  07f4d	48 63 85 44 16
	00 00		 movsxd	 rax, DWORD PTR payload_n$251[rbp]
  07f54	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?names@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4PAPEBDA
  07f5b	48 63 95 04 16
	00 00		 movsxd	 rdx, DWORD PTR n$249[rbp]
  07f62	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:?names@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4PAPEBDA
  07f69	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  07f6d	48 89 04 d7	 mov	 QWORD PTR [rdi+rdx*8], rax

; 2263 :                             names[payload_n] = tmp;

  07f71	48 63 85 44 16
	00 00		 movsxd	 rax, DWORD PTR payload_n$251[rbp]
  07f78	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?names@?CPC@??ShowDemoWindowWidgets@@YAXXZ@4PAPEBDA
  07f7f	48 8b 95 68 16
	00 00		 mov	 rdx, QWORD PTR tmp$252[rbp]
  07f86	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx
$LN575@ShowDemoWi:

; 2264 :                         }
; 2265 :                     }
; 2266 :                     ImGui::EndDragDropTarget();

  07f8a	e8 00 00 00 00	 call	 ?EndDragDropTarget@ImGui@@YAXXZ ; ImGui::EndDragDropTarget
$LN574@ShowDemoWi:

; 2267 :                 }
; 2268 :                 ImGui::PopID();

  07f8f	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 2269 :             }

  07f94	e9 6f fd ff ff	 jmp	 $LN305@ShowDemoWi
$LN306@ShowDemoWi:

; 2270 :             ImGui::TreePop();

  07f99	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN310@ShowDemoWi:

; 2271 :         }
; 2272 : 
; 2273 :         IMGUI_DEMO_MARKER("Widgets/Drag and Drop/Drag to reorder items (simple)");

  07f9e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  07fa6	74 28		 je	 SHORT $LN579@ShowDemoWi
  07fa8	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  07fae	05 be 06 00 00	 add	 eax, 1726		; 000006beH
  07fb3	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  07fba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DF@EMDCONLH@Widgets?1Drag?5and?5Drop?1Drag?5to?5re@
  07fc1	8b d0		 mov	 edx, eax
  07fc3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  07fca	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN579@ShowDemoWi:
  07fd0	33 c0		 xor	 eax, eax
  07fd2	85 c0		 test	 eax, eax
  07fd4	75 c8		 jne	 SHORT $LN310@ShowDemoWi

; 2274 :         if (ImGui::TreeNode("Drag to reorder items (simple)"))

  07fd6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@DIEMEPOM@Drag?5to?5reorder?5items?5?$CIsimple?$CJ?$AA@
  07fdd	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  07fe2	0f b6 c0	 movzx	 eax, al
  07fe5	85 c0		 test	 eax, eax
  07fe7	0f 84 3f 01 00
	00		 je	 $LN580@ShowDemoWi

; 2275 :         {
; 2276 :             // Simple reordering
; 2277 :             HelpMarker(

  07fed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0IF@PPHKDPML@We?5don?8t?5use?5the?5drag?5and?5drop?5a@
  07ff4	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 2278 :                 "We don't use the drag and drop api at all here! "
; 2279 :                 "Instead we query when the item is held but not hovered, and order items accordingly.");
; 2280 :             static const char* item_names[] = { "Item One", "Item Two", "Item Three", "Item Four", "Item Five" };
; 2281 :             for (int n = 0; n < IM_ARRAYSIZE(item_names); n++)

  07ff9	c7 85 84 16 00
	00 00 00 00 00	 mov	 DWORD PTR n$253[rbp], 0
  08003	eb 0e		 jmp	 SHORT $LN313@ShowDemoWi
$LN311@ShowDemoWi:
  08005	8b 85 84 16 00
	00		 mov	 eax, DWORD PTR n$253[rbp]
  0800b	ff c0		 inc	 eax
  0800d	89 85 84 16 00
	00		 mov	 DWORD PTR n$253[rbp], eax
$LN313@ShowDemoWi:
  08013	83 bd 84 16 00
	00 05		 cmp	 DWORD PTR n$253[rbp], 5
  0801a	0f 8d 07 01 00
	00		 jge	 $LN312@ShowDemoWi

; 2282 :             {
; 2283 :                 const char* item = item_names[n];

  08020	48 63 85 84 16
	00 00		 movsxd	 rax, DWORD PTR n$253[rbp]
  08027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?item_names@?DCB@??ShowDemoWindowWidgets@@YAXXZ@4PAPEBDA
  0802e	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  08032	48 89 85 a8 16
	00 00		 mov	 QWORD PTR item$254[rbp], rax

; 2284 :                 ImGui::Selectable(item);

  08039	0f 57 d2	 xorps	 xmm2, xmm2
  0803c	0f 57 c9	 xorps	 xmm1, xmm1
  0803f	48 8d 8d 74 29
	00 00		 lea	 rcx, QWORD PTR $T340[rbp]
  08046	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0804b	4c 8b c8	 mov	 r9, rax
  0804e	45 33 c0	 xor	 r8d, r8d
  08051	33 d2		 xor	 edx, edx
  08053	48 8b 8d a8 16
	00 00		 mov	 rcx, QWORD PTR item$254[rbp]
  0805a	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable

; 2285 : 
; 2286 :                 if (ImGui::IsItemActive() && !ImGui::IsItemHovered())

  0805f	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  08064	0f b6 c0	 movzx	 eax, al
  08067	85 c0		 test	 eax, eax
  08069	0f 84 b3 00 00
	00		 je	 $LN581@ShowDemoWi
  0806f	33 c9		 xor	 ecx, ecx
  08071	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  08076	0f b6 c0	 movzx	 eax, al
  08079	85 c0		 test	 eax, eax
  0807b	0f 85 a1 00 00
	00		 jne	 $LN581@ShowDemoWi

; 2287 :                 {
; 2288 :                     int n_next = n + (ImGui::GetMouseDragDelta(0).y < 0.f ? -1 : 1);

  08081	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  08089	33 d2		 xor	 edx, edx
  0808b	48 8d 8d 94 29
	00 00		 lea	 rcx, QWORD PTR $T341[rbp]
  08092	e8 00 00 00 00	 call	 ?GetMouseDragDelta@ImGui@@YA?AUImVec2@@HM@Z ; ImGui::GetMouseDragDelta
  08097	0f 57 c0	 xorps	 xmm0, xmm0
  0809a	0f 2f 40 04	 comiss	 xmm0, DWORD PTR [rax+4]
  0809e	76 0c		 jbe	 SHORT $LN723@ShowDemoWi
  080a0	c7 85 44 2b 00
	00 ff ff ff ff	 mov	 DWORD PTR tv4882[rbp], -1
  080aa	eb 0a		 jmp	 SHORT $LN724@ShowDemoWi
$LN723@ShowDemoWi:
  080ac	c7 85 44 2b 00
	00 01 00 00 00	 mov	 DWORD PTR tv4882[rbp], 1
$LN724@ShowDemoWi:
  080b6	8b 85 44 2b 00
	00		 mov	 eax, DWORD PTR tv4882[rbp]
  080bc	8b 8d 84 16 00
	00		 mov	 ecx, DWORD PTR n$253[rbp]
  080c2	03 c8		 add	 ecx, eax
  080c4	8b c1		 mov	 eax, ecx
  080c6	89 85 c4 16 00
	00		 mov	 DWORD PTR n_next$255[rbp], eax

; 2289 :                     if (n_next >= 0 && n_next < IM_ARRAYSIZE(item_names))

  080cc	83 bd c4 16 00
	00 00		 cmp	 DWORD PTR n_next$255[rbp], 0
  080d3	7c 4d		 jl	 SHORT $LN581@ShowDemoWi
  080d5	83 bd c4 16 00
	00 05		 cmp	 DWORD PTR n_next$255[rbp], 5
  080dc	7d 44		 jge	 SHORT $LN581@ShowDemoWi

; 2290 :                     {
; 2291 :                         item_names[n] = item_names[n_next];

  080de	48 63 85 c4 16
	00 00		 movsxd	 rax, DWORD PTR n_next$255[rbp]
  080e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?item_names@?DCB@??ShowDemoWindowWidgets@@YAXXZ@4PAPEBDA
  080ec	48 63 95 84 16
	00 00		 movsxd	 rdx, DWORD PTR n$253[rbp]
  080f3	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:?item_names@?DCB@??ShowDemoWindowWidgets@@YAXXZ@4PAPEBDA
  080fa	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  080fe	48 89 04 d7	 mov	 QWORD PTR [rdi+rdx*8], rax

; 2292 :                         item_names[n_next] = item;

  08102	48 63 85 c4 16
	00 00		 movsxd	 rax, DWORD PTR n_next$255[rbp]
  08109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?item_names@?DCB@??ShowDemoWindowWidgets@@YAXXZ@4PAPEBDA
  08110	48 8b 95 a8 16
	00 00		 mov	 rdx, QWORD PTR item$254[rbp]
  08117	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx

; 2293 :                         ImGui::ResetMouseDragDelta();

  0811b	33 c9		 xor	 ecx, ecx
  0811d	e8 00 00 00 00	 call	 ?ResetMouseDragDelta@ImGui@@YAXH@Z ; ImGui::ResetMouseDragDelta
$LN581@ShowDemoWi:

; 2294 :                     }
; 2295 :                 }
; 2296 :             }

  08122	e9 de fe ff ff	 jmp	 $LN311@ShowDemoWi
$LN312@ShowDemoWi:

; 2297 :             ImGui::TreePop();

  08127	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN580@ShowDemoWi:

; 2298 :         }
; 2299 : 
; 2300 :         ImGui::TreePop();

  0812c	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN316@ShowDemoWi:

; 2301 :     }
; 2302 : 
; 2303 :     IMGUI_DEMO_MARKER("Widgets/Querying Item Status (Edited,Active,Hovered etc.)");

  08131	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  08139	74 28		 je	 SHORT $LN583@ShowDemoWi
  0813b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  08141	05 dc 06 00 00	 add	 eax, 1756		; 000006dcH
  08146	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0814d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DK@EFBKDNNE@Widgets?1Querying?5Item?5Status?5?$CIEd@
  08154	8b d0		 mov	 edx, eax
  08156	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0815d	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN583@ShowDemoWi:
  08163	33 c0		 xor	 eax, eax
  08165	85 c0		 test	 eax, eax
  08167	75 c8		 jne	 SHORT $LN316@ShowDemoWi

; 2304 :     if (ImGui::TreeNode("Querying Item Status (Edited/Active/Hovered etc.)"))

  08169	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DC@BNAEMHFC@Querying?5Item?5Status?5?$CIEdited?1Act@
  08170	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  08175	0f b6 c0	 movzx	 eax, al
  08178	85 c0		 test	 eax, eax
  0817a	0f 84 5c 08 00
	00		 je	 $LN319@ShowDemoWi

; 2305 :     {
; 2306 :         // Select an item type
; 2307 :         const char* item_names[] =
; 2308 :         {
; 2309 :             "Text", "Button", "Button (w/ repeat)", "Checkbox", "SliderFloat", "InputText", "InputTextMultiline", "InputFloat",

  08180	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04OJAHODMC@Text?$AA@
  08187	48 89 85 f0 16
	00 00		 mov	 QWORD PTR item_names$256[rbp], rax
  0818e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06LKBCGDFD@Button?$AA@
  08195	48 89 85 f8 16
	00 00		 mov	 QWORD PTR item_names$256[rbp+8], rax
  0819c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BD@MDBANHDM@Button?5?$CIw?1?5repeat?$CJ?$AA@
  081a3	48 89 85 00 17
	00 00		 mov	 QWORD PTR item_names$256[rbp+16], rax
  081aa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08HBKJHHBM@Checkbox?$AA@
  081b1	48 89 85 08 17
	00 00		 mov	 QWORD PTR item_names$256[rbp+24], rax
  081b8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0M@LOEAKMNB@SliderFloat?$AA@
  081bf	48 89 85 10 17
	00 00		 mov	 QWORD PTR item_names$256[rbp+32], rax
  081c6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09LIBCCLDO@InputText?$AA@
  081cd	48 89 85 18 17
	00 00		 mov	 QWORD PTR item_names$256[rbp+40], rax
  081d4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BD@GFPADHGG@InputTextMultiline?$AA@
  081db	48 89 85 20 17
	00 00		 mov	 QWORD PTR item_names$256[rbp+48], rax
  081e2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0L@BOKHHMCO@InputFloat?$AA@
  081e9	48 89 85 28 17
	00 00		 mov	 QWORD PTR item_names$256[rbp+56], rax

; 2310 :             "InputFloat3", "ColorEdit4", "Selectable", "MenuItem", "TreeNode", "TreeNode (w/ double-click)", "Combo", "ListBox"

  081f0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0M@CIKDMPID@InputFloat3?$AA@
  081f7	48 89 85 30 17
	00 00		 mov	 QWORD PTR item_names$256[rbp+64], rax
  081fe	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0L@KOIOKOAF@ColorEdit4?$AA@
  08205	48 89 85 38 17
	00 00		 mov	 QWORD PTR item_names$256[rbp+72], rax
  0820c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0L@CGGBDDBB@Selectable?$AA@
  08213	48 89 85 40 17
	00 00		 mov	 QWORD PTR item_names$256[rbp+80], rax
  0821a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08BLHBLMG@MenuItem?$AA@
  08221	48 89 85 48 17
	00 00		 mov	 QWORD PTR item_names$256[rbp+88], rax
  08228	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08IKFIGNAO@TreeNode?$AA@
  0822f	48 89 85 50 17
	00 00		 mov	 QWORD PTR item_names$256[rbp+96], rax
  08236	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BL@BMPDCCKO@TreeNode?5?$CIw?1?5double?9click?$CJ?$AA@
  0823d	48 89 85 58 17
	00 00		 mov	 QWORD PTR item_names$256[rbp+104], rax
  08244	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05LMOJIBPK@Combo?$AA@
  0824b	48 89 85 60 17
	00 00		 mov	 QWORD PTR item_names$256[rbp+112], rax
  08252	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07OOFFCIDH@ListBox?$AA@
  08259	48 89 85 68 17
	00 00		 mov	 QWORD PTR item_names$256[rbp+120], rax

; 2311 :         };
; 2312 :         static int item_type = 4;
; 2313 :         static bool item_disabled = false;
; 2314 :         ImGui::Combo("Item Type", &item_type, item_names, IM_ARRAYSIZE(item_names), IM_ARRAYSIZE(item_names));

  08260	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  08268	41 b9 10 00 00
	00		 mov	 r9d, 16
  0826e	4c 8d 85 f0 16
	00 00		 lea	 r8, QWORD PTR item_names$256[rbp]
  08275	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?item_type@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0827c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09DBIMNOFJ@Item?5Type?$AA@
  08283	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z ; ImGui::Combo

; 2315 :         ImGui::SameLine();

  08288	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  08290	0f 57 c0	 xorps	 xmm0, xmm0
  08293	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2316 :         HelpMarker("Testing how various types of items are interacting with the IsItemXXX functions. Note that the bool return value of most ImGui function is generally equivalent to calling ImGui::IsItemHovered().");

  08298	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0MD@CGCEADDG@Testing?5how?5various?5types?5of?5ite@
  0829f	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 2317 :         ImGui::Checkbox("Item Disabled",  &item_disabled);

  082a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?item_disabled@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  082ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FAHHGPEA@Item?5Disabled?$AA@
  082b2	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 2318 : 
; 2319 :         // Submit selected items so we can query their status in the code following it.
; 2320 :         bool ret = false;

  082b7	c6 85 84 17 00
	00 00		 mov	 BYTE PTR ret$257[rbp], 0

; 2321 :         static bool b = false;
; 2322 :         static float col4f[4] = { 1.0f, 0.5, 0.0f, 1.0f };
; 2323 :         static char str[16] = {};
; 2324 :         if (item_disabled)

  082be	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?item_disabled@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  082c5	85 c0		 test	 eax, eax
  082c7	74 07		 je	 SHORT $LN585@ShowDemoWi

; 2325 :             ImGui::BeginDisabled(true);

  082c9	b1 01		 mov	 cl, 1
  082cb	e8 00 00 00 00	 call	 ?BeginDisabled@ImGui@@YAX_N@Z ; ImGui::BeginDisabled
$LN585@ShowDemoWi:

; 2326 :         if (item_type == 0) { ImGui::Text("ITEM: Text"); }                                              // Testing text items with no identifier/interaction

  082d0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?item_type@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4HA, 0
  082d7	75 0c		 jne	 SHORT $LN586@ShowDemoWi
  082d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@HEHKMKDF@ITEM?3?5Text?$AA@
  082e0	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN586@ShowDemoWi:

; 2327 :         if (item_type == 1) { ret = ImGui::Button("ITEM: Button"); }                                    // Testing button

  082e5	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?item_type@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4HA, 1
  082ec	75 27		 jne	 SHORT $LN587@ShowDemoWi
  082ee	0f 57 d2	 xorps	 xmm2, xmm2
  082f1	0f 57 c9	 xorps	 xmm1, xmm1
  082f4	48 8d 8d b4 29
	00 00		 lea	 rcx, QWORD PTR $T342[rbp]
  082fb	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  08300	48 8b d0	 mov	 rdx, rax
  08303	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@KDFNBBDI@ITEM?3?5Button?$AA@
  0830a	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  0830f	88 85 84 17 00
	00		 mov	 BYTE PTR ret$257[rbp], al
$LN587@ShowDemoWi:

; 2328 :         if (item_type == 2) { ImGui::PushButtonRepeat(true); ret = ImGui::Button("ITEM: Button"); ImGui::PopButtonRepeat(); } // Testing button (with repeater)

  08315	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?item_type@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4HA, 2
  0831c	75 33		 jne	 SHORT $LN588@ShowDemoWi
  0831e	b1 01		 mov	 cl, 1
  08320	e8 00 00 00 00	 call	 ?PushButtonRepeat@ImGui@@YAX_N@Z ; ImGui::PushButtonRepeat
  08325	0f 57 d2	 xorps	 xmm2, xmm2
  08328	0f 57 c9	 xorps	 xmm1, xmm1
  0832b	48 8d 8d d4 29
	00 00		 lea	 rcx, QWORD PTR $T343[rbp]
  08332	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  08337	48 8b d0	 mov	 rdx, rax
  0833a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@KDFNBBDI@ITEM?3?5Button?$AA@
  08341	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  08346	88 85 84 17 00
	00		 mov	 BYTE PTR ret$257[rbp], al
  0834c	e8 00 00 00 00	 call	 ?PopButtonRepeat@ImGui@@YAXXZ ; ImGui::PopButtonRepeat
$LN588@ShowDemoWi:

; 2329 :         if (item_type == 3) { ret = ImGui::Checkbox("ITEM: Checkbox", &b); }                            // Testing checkbox

  08351	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?item_type@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4HA, 3
  08358	75 19		 jne	 SHORT $LN589@ShowDemoWi
  0835a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?b@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  08361	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@EJKLMMCP@ITEM?3?5Checkbox?$AA@
  08368	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox
  0836d	88 85 84 17 00
	00		 mov	 BYTE PTR ret$257[rbp], al
$LN589@ShowDemoWi:

; 2330 :         if (item_type == 4) { ret = ImGui::SliderFloat("ITEM: SliderFloat", &col4f[0], 0.0f, 1.0f); }   // Testing basic item

  08373	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?item_type@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4HA, 4
  0837a	75 4a		 jne	 SHORT $LN590@ShowDemoWi
  0837c	b8 04 00 00 00	 mov	 eax, 4
  08381	48 6b c0 00	 imul	 rax, rax, 0
  08385	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?col4f@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  0838c	48 03 c8	 add	 rcx, rax
  0838f	48 8b c1	 mov	 rax, rcx
  08392	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0839a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  083a1	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  083a6	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  083ae	0f 57 d2	 xorps	 xmm2, xmm2
  083b1	48 8b d0	 mov	 rdx, rax
  083b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@HBFCOBHP@ITEM?3?5SliderFloat?$AA@
  083bb	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat
  083c0	88 85 84 17 00
	00		 mov	 BYTE PTR ret$257[rbp], al
$LN590@ShowDemoWi:

; 2331 :         if (item_type == 5) { ret = ImGui::InputText("ITEM: InputText", &str[0], IM_ARRAYSIZE(str)); }  // Testing input text (which handles tabbing)

  083c6	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?item_type@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4HA, 5
  083cd	75 46		 jne	 SHORT $LN591@ShowDemoWi
  083cf	b8 01 00 00 00	 mov	 eax, 1
  083d4	48 6b c0 00	 imul	 rax, rax, 0
  083d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?str@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  083df	48 03 c8	 add	 rcx, rax
  083e2	48 8b c1	 mov	 rax, rcx
  083e5	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  083ee	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  083f7	45 33 c9	 xor	 r9d, r9d
  083fa	41 b8 10 00 00
	00		 mov	 r8d, 16
  08400	48 8b d0	 mov	 rdx, rax
  08403	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@HPKEIJD@ITEM?3?5InputText?$AA@
  0840a	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText
  0840f	88 85 84 17 00
	00		 mov	 BYTE PTR ret$257[rbp], al
$LN591@ShowDemoWi:

; 2332 :         if (item_type == 6) { ret = ImGui::InputTextMultiline("ITEM: InputTextMultiline", &str[0], IM_ARRAYSIZE(str)); } // Testing input text (which uses a child window)

  08415	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?item_type@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4HA, 6
  0841c	75 60		 jne	 SHORT $LN592@ShowDemoWi
  0841e	0f 57 d2	 xorps	 xmm2, xmm2
  08421	0f 57 c9	 xorps	 xmm1, xmm1
  08424	48 8d 8d f4 29
	00 00		 lea	 rcx, QWORD PTR $T344[rbp]
  0842b	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  08430	b9 01 00 00 00	 mov	 ecx, 1
  08435	48 6b c9 00	 imul	 rcx, rcx, 0
  08439	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?str@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  08440	48 03 d1	 add	 rdx, rcx
  08443	48 8b ca	 mov	 rcx, rdx
  08446	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  0844f	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  08458	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  08460	4c 8b c8	 mov	 r9, rax
  08463	41 b8 10 00 00
	00		 mov	 r8d, 16
  08469	48 8b d1	 mov	 rdx, rcx
  0846c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@PFKMLMFF@ITEM?3?5InputTextMultiline?$AA@
  08473	e8 00 00 00 00	 call	 ?InputTextMultiline@ImGui@@YA_NPEBDPEAD_KAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputTextMultiline
  08478	88 85 84 17 00
	00		 mov	 BYTE PTR ret$257[rbp], al
$LN592@ShowDemoWi:

; 2333 :         if (item_type == 7) { ret = ImGui::InputFloat("ITEM: InputFloat", col4f, 1.0f); }               // Testing +/- buttons on scalar input

  0847e	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR ?item_type@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4HA, 7
  08485	75 38		 jne	 SHORT $LN593@ShowDemoWi
  08487	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0848f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  08496	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0849b	0f 57 db	 xorps	 xmm3, xmm3
  0849e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  084a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?col4f@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  084ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@LGHPELBI@ITEM?3?5InputFloat?$AA@
  084b4	e8 00 00 00 00	 call	 ?InputFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::InputFloat
  084b9	88 85 84 17 00
	00		 mov	 BYTE PTR ret$257[rbp], al
$LN593@ShowDemoWi:

; 2334 :         if (item_type == 8) { ret = ImGui::InputFloat3("ITEM: InputFloat3", col4f); }                   // Testing multi-component items (IsItemXXX flags are reported merged)

  084bf	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR ?item_type@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4HA, 8
  084c6	75 23		 jne	 SHORT $LN594@ShowDemoWi
  084c8	45 33 c9	 xor	 r9d, r9d
  084cb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  084d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?col4f@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  084d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@OHLBICCN@ITEM?3?5InputFloat3?$AA@
  084e0	e8 00 00 00 00	 call	 ?InputFloat3@ImGui@@YA_NPEBDQEAM0H@Z ; ImGui::InputFloat3
  084e5	88 85 84 17 00
	00		 mov	 BYTE PTR ret$257[rbp], al
$LN594@ShowDemoWi:

; 2335 :         if (item_type == 9) { ret = ImGui::ColorEdit4("ITEM: ColorEdit4", col4f); }                     // Testing multi-component items (IsItemXXX flags are reported merged)

  084eb	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?item_type@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4HA, 9
  084f2	75 1c		 jne	 SHORT $LN595@ShowDemoWi
  084f4	45 33 c0	 xor	 r8d, r8d
  084f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?col4f@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  084fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@GFGJJDD@ITEM?3?5ColorEdit4?$AA@
  08505	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z ; ImGui::ColorEdit4
  0850a	88 85 84 17 00
	00		 mov	 BYTE PTR ret$257[rbp], al
$LN595@ShowDemoWi:

; 2336 :         if (item_type == 10){ ret = ImGui::Selectable("ITEM: Selectable"); }                            // Testing selectable item

  08510	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?item_type@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4HA, 10
  08517	75 2c		 jne	 SHORT $LN596@ShowDemoWi
  08519	0f 57 d2	 xorps	 xmm2, xmm2
  0851c	0f 57 c9	 xorps	 xmm1, xmm1
  0851f	48 8d 8d 14 2a
	00 00		 lea	 rcx, QWORD PTR $T345[rbp]
  08526	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0852b	4c 8b c8	 mov	 r9, rax
  0852e	45 33 c0	 xor	 r8d, r8d
  08531	33 d2		 xor	 edx, edx
  08533	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@IOLJAECH@ITEM?3?5Selectable?$AA@
  0853a	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
  0853f	88 85 84 17 00
	00		 mov	 BYTE PTR ret$257[rbp], al
$LN596@ShowDemoWi:

; 2337 :         if (item_type == 11){ ret = ImGui::MenuItem("ITEM: MenuItem"); }                                // Testing menu item (they use ImGuiButtonFlags_PressedOnRelease button policy)

  08545	83 3d 00 00 00
	00 0b		 cmp	 DWORD PTR ?item_type@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4HA, 11
  0854c	75 1a		 jne	 SHORT $LN597@ShowDemoWi
  0854e	41 b1 01	 mov	 r9b, 1
  08551	45 33 c0	 xor	 r8d, r8d
  08554	33 d2		 xor	 edx, edx
  08556	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@DJLFKAPF@ITEM?3?5MenuItem?$AA@
  0855d	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  08562	88 85 84 17 00
	00		 mov	 BYTE PTR ret$257[rbp], al
$LN597@ShowDemoWi:

; 2338 :         if (item_type == 12){ ret = ImGui::TreeNode("ITEM: TreeNode"); if (ret) ImGui::TreePop(); }     // Testing tree node

  08568	83 3d 00 00 00
	00 0c		 cmp	 DWORD PTR ?item_type@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4HA, 12
  0856f	75 22		 jne	 SHORT $LN598@ShowDemoWi
  08571	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@LCFKNGDN@ITEM?3?5TreeNode?$AA@
  08578	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  0857d	88 85 84 17 00
	00		 mov	 BYTE PTR ret$257[rbp], al
  08583	0f b6 85 84 17
	00 00		 movzx	 eax, BYTE PTR ret$257[rbp]
  0858a	85 c0		 test	 eax, eax
  0858c	74 05		 je	 SHORT $LN598@ShowDemoWi
  0858e	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN598@ShowDemoWi:

; 2339 :         if (item_type == 13){ ret = ImGui::TreeNodeEx("ITEM: TreeNode w/ ImGuiTreeNodeFlags_OpenOnDoubleClick", ImGuiTreeNodeFlags_OpenOnDoubleClick | ImGuiTreeNodeFlags_NoTreePushOnOpen); } // Testing tree node with ImGuiButtonFlags_PressedOnDoubleClick button policy.

  08593	83 3d 00 00 00
	00 0d		 cmp	 DWORD PTR ?item_type@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4HA, 13
  0859a	75 17		 jne	 SHORT $LN600@ShowDemoWi
  0859c	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  085a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DH@BOEHHDDC@ITEM?3?5TreeNode?5w?1?5ImGuiTreeNodeF@
  085a8	e8 00 00 00 00	 call	 ?TreeNodeEx@ImGui@@YA_NPEBDH@Z ; ImGui::TreeNodeEx
  085ad	88 85 84 17 00
	00		 mov	 BYTE PTR ret$257[rbp], al
$LN600@ShowDemoWi:

; 2340 :         if (item_type == 14){ const char* items[] = { "Apple", "Banana", "Cherry", "Kiwi" }; static int current = 1; ret = ImGui::Combo("ITEM: Combo", &current, items, IM_ARRAYSIZE(items)); }

  085b3	83 3d 00 00 00
	00 0e		 cmp	 DWORD PTR ?item_type@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4HA, 14
  085ba	75 66		 jne	 SHORT $LN601@ShowDemoWi
  085bc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05EBJDGKGA@Apple?$AA@
  085c3	48 89 85 a8 17
	00 00		 mov	 QWORD PTR items$258[rbp], rax
  085ca	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06OJJIHNKI@Banana?$AA@
  085d1	48 89 85 b0 17
	00 00		 mov	 QWORD PTR items$258[rbp+8], rax
  085d8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06MKLLCMPJ@Cherry?$AA@
  085df	48 89 85 b8 17
	00 00		 mov	 QWORD PTR items$258[rbp+16], rax
  085e6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04LFFBHHAI@Kiwi?$AA@
  085ed	48 89 85 c0 17
	00 00		 mov	 QWORD PTR items$258[rbp+24], rax
  085f4	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  085fc	41 b9 04 00 00
	00		 mov	 r9d, 4
  08602	4c 8d 85 a8 17
	00 00		 lea	 r8, QWORD PTR items$258[rbp]
  08609	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?current@?DGB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  08610	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@JPKNJLGM@ITEM?3?5Combo?$AA@
  08617	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z ; ImGui::Combo
  0861c	88 85 84 17 00
	00		 mov	 BYTE PTR ret$257[rbp], al
$LN601@ShowDemoWi:

; 2341 :         if (item_type == 15){ const char* items[] = { "Apple", "Banana", "Cherry", "Kiwi" }; static int current = 1; ret = ImGui::ListBox("ITEM: ListBox", &current, items, IM_ARRAYSIZE(items), IM_ARRAYSIZE(items)); }

  08622	83 3d 00 00 00
	00 0f		 cmp	 DWORD PTR ?item_type@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4HA, 15
  08629	75 66		 jne	 SHORT $LN602@ShowDemoWi
  0862b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05EBJDGKGA@Apple?$AA@
  08632	48 89 85 e8 17
	00 00		 mov	 QWORD PTR items$259[rbp], rax
  08639	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06OJJIHNKI@Banana?$AA@
  08640	48 89 85 f0 17
	00 00		 mov	 QWORD PTR items$259[rbp+8], rax
  08647	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06MKLLCMPJ@Cherry?$AA@
  0864e	48 89 85 f8 17
	00 00		 mov	 QWORD PTR items$259[rbp+16], rax
  08655	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04LFFBHHAI@Kiwi?$AA@
  0865c	48 89 85 00 18
	00 00		 mov	 QWORD PTR items$259[rbp+24], rax
  08663	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0866b	41 b9 04 00 00
	00		 mov	 r9d, 4
  08671	4c 8d 85 e8 17
	00 00		 lea	 r8, QWORD PTR items$259[rbp]
  08678	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?current@?DGE@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0867f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DECMNPJF@ITEM?3?5ListBox?$AA@
  08686	e8 00 00 00 00	 call	 ?ListBox@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z ; ImGui::ListBox
  0868b	88 85 84 17 00
	00		 mov	 BYTE PTR ret$257[rbp], al
$LN602@ShowDemoWi:

; 2342 : 
; 2343 :         bool hovered_delay_none = ImGui::IsItemHovered();

  08691	33 c9		 xor	 ecx, ecx
  08693	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  08698	88 85 24 18 00
	00		 mov	 BYTE PTR hovered_delay_none$260[rbp], al

; 2344 :         bool hovered_delay_short = ImGui::IsItemHovered(ImGuiHoveredFlags_DelayShort);

  0869e	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  086a3	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  086a8	88 85 44 18 00
	00		 mov	 BYTE PTR hovered_delay_short$261[rbp], al

; 2345 :         bool hovered_delay_normal = ImGui::IsItemHovered(ImGuiHoveredFlags_DelayNormal);

  086ae	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  086b3	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  086b8	88 85 64 18 00
	00		 mov	 BYTE PTR hovered_delay_normal$262[rbp], al

; 2346 : 
; 2347 :         // Display the values of IsItemHovered() and other common item state functions.
; 2348 :         // Note that the ImGuiHoveredFlags_XXX flags can be combined.
; 2349 :         // Because BulletText is an item itself and that would affect the output of IsItemXXX functions,
; 2350 :         // we query every state in a single call to avoid storing them and to simplify the code.
; 2351 :         ImGui::BulletText(

  086be	48 8d 8d 34 2a
	00 00		 lea	 rcx, QWORD PTR $T346[rbp]
  086c5	e8 00 00 00 00	 call	 ?GetItemRectSize@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectSize
  086ca	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [rax+4]
  086cf	f2 0f 11 85 48
	2b 00 00	 movsd	 QWORD PTR tv5173[rbp], xmm0
  086d7	48 8d 8d 54 2a
	00 00		 lea	 rcx, QWORD PTR $T347[rbp]
  086de	e8 00 00 00 00	 call	 ?GetItemRectSize@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectSize
  086e3	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [rax]
  086e7	f2 0f 11 85 50
	2b 00 00	 movsd	 QWORD PTR tv5178[rbp], xmm0
  086ef	48 8d 8d 74 2a
	00 00		 lea	 rcx, QWORD PTR $T348[rbp]
  086f6	e8 00 00 00 00	 call	 ?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMax
  086fb	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [rax+4]
  08700	f2 0f 11 85 58
	2b 00 00	 movsd	 QWORD PTR tv5183[rbp], xmm0
  08708	48 8d 8d 94 2a
	00 00		 lea	 rcx, QWORD PTR $T349[rbp]
  0870f	e8 00 00 00 00	 call	 ?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMax
  08714	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [rax]
  08718	f2 0f 11 85 60
	2b 00 00	 movsd	 QWORD PTR tv5188[rbp], xmm0
  08720	48 8d 8d b4 2a
	00 00		 lea	 rcx, QWORD PTR $T350[rbp]
  08727	e8 00 00 00 00	 call	 ?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMin
  0872c	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [rax+4]
  08731	f2 0f 11 85 68
	2b 00 00	 movsd	 QWORD PTR tv5193[rbp], xmm0
  08739	48 8d 8d d4 2a
	00 00		 lea	 rcx, QWORD PTR $T351[rbp]
  08740	e8 00 00 00 00	 call	 ?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMin
  08745	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [rax]
  08749	f2 0f 11 85 70
	2b 00 00	 movsd	 QWORD PTR tv5198[rbp], xmm0
  08751	e8 00 00 00 00	 call	 ?IsItemToggledOpen@ImGui@@YA_NXZ ; ImGui::IsItemToggledOpen
  08756	0f b6 c0	 movzx	 eax, al
  08759	89 85 78 2b 00
	00		 mov	 DWORD PTR tv5201[rbp], eax
  0875f	33 c9		 xor	 ecx, ecx
  08761	e8 00 00 00 00	 call	 ?IsItemClicked@ImGui@@YA_NH@Z ; ImGui::IsItemClicked
  08766	0f b6 c0	 movzx	 eax, al
  08769	89 85 7c 2b 00
	00		 mov	 DWORD PTR tv5205[rbp], eax
  0876f	e8 00 00 00 00	 call	 ?IsItemVisible@ImGui@@YA_NXZ ; ImGui::IsItemVisible
  08774	0f b6 c0	 movzx	 eax, al
  08777	89 85 80 2b 00
	00		 mov	 DWORD PTR tv5208[rbp], eax
  0877d	e8 00 00 00 00	 call	 ?IsItemDeactivatedAfterEdit@ImGui@@YA_NXZ ; ImGui::IsItemDeactivatedAfterEdit
  08782	0f b6 c0	 movzx	 eax, al
  08785	89 85 84 2b 00
	00		 mov	 DWORD PTR tv5211[rbp], eax
  0878b	e8 00 00 00 00	 call	 ?IsItemDeactivated@ImGui@@YA_NXZ ; ImGui::IsItemDeactivated
  08790	0f b6 c0	 movzx	 eax, al
  08793	89 85 88 2b 00
	00		 mov	 DWORD PTR tv5214[rbp], eax
  08799	e8 00 00 00 00	 call	 ?IsItemActivated@ImGui@@YA_NXZ ; ImGui::IsItemActivated
  0879e	0f b6 c0	 movzx	 eax, al
  087a1	89 85 8c 2b 00
	00		 mov	 DWORD PTR tv5217[rbp], eax
  087a7	e8 00 00 00 00	 call	 ?IsItemEdited@ImGui@@YA_NXZ ; ImGui::IsItemEdited
  087ac	0f b6 c0	 movzx	 eax, al
  087af	89 85 90 2b 00
	00		 mov	 DWORD PTR tv5220[rbp], eax
  087b5	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  087ba	0f b6 c0	 movzx	 eax, al
  087bd	89 85 94 2b 00
	00		 mov	 DWORD PTR tv5223[rbp], eax
  087c3	b9 a0 01 00 00	 mov	 ecx, 416		; 000001a0H
  087c8	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  087cd	0f b6 c0	 movzx	 eax, al
  087d0	89 85 98 2b 00
	00		 mov	 DWORD PTR tv5227[rbp], eax
  087d6	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  087db	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  087e0	0f b6 c0	 movzx	 eax, al
  087e3	89 85 9c 2b 00
	00		 mov	 DWORD PTR tv5231[rbp], eax
  087e9	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  087ee	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  087f3	0f b6 c0	 movzx	 eax, al
  087f6	89 85 a0 2b 00
	00		 mov	 DWORD PTR tv5235[rbp], eax
  087fc	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  08801	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  08806	0f b6 c0	 movzx	 eax, al
  08809	89 85 a4 2b 00
	00		 mov	 DWORD PTR tv5239[rbp], eax
  0880f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  08814	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  08819	0f b6 c0	 movzx	 eax, al
  0881c	89 85 a8 2b 00
	00		 mov	 DWORD PTR tv5243[rbp], eax
  08822	33 c9		 xor	 ecx, ecx
  08824	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  08829	0f b6 c0	 movzx	 eax, al
  0882c	89 85 ac 2b 00
	00		 mov	 DWORD PTR tv5247[rbp], eax
  08832	e8 00 00 00 00	 call	 ?IsItemFocused@ImGui@@YA_NXZ ; ImGui::IsItemFocused
  08837	0f b6 c0	 movzx	 eax, al
  0883a	0f b6 8d 84 17
	00 00		 movzx	 ecx, BYTE PTR ret$257[rbp]
  08841	f2 0f 10 85 48
	2b 00 00	 movsd	 xmm0, QWORD PTR tv5173[rbp]
  08849	f2 0f 11 84 24
	b0 00 00 00	 movsd	 QWORD PTR [rsp+176], xmm0
  08852	f2 0f 10 85 50
	2b 00 00	 movsd	 xmm0, QWORD PTR tv5178[rbp]
  0885a	f2 0f 11 84 24
	a8 00 00 00	 movsd	 QWORD PTR [rsp+168], xmm0
  08863	f2 0f 10 85 58
	2b 00 00	 movsd	 xmm0, QWORD PTR tv5183[rbp]
  0886b	f2 0f 11 84 24
	a0 00 00 00	 movsd	 QWORD PTR [rsp+160], xmm0
  08874	f2 0f 10 85 60
	2b 00 00	 movsd	 xmm0, QWORD PTR tv5188[rbp]
  0887c	f2 0f 11 84 24
	98 00 00 00	 movsd	 QWORD PTR [rsp+152], xmm0
  08885	f2 0f 10 85 68
	2b 00 00	 movsd	 xmm0, QWORD PTR tv5193[rbp]
  0888d	f2 0f 11 84 24
	90 00 00 00	 movsd	 QWORD PTR [rsp+144], xmm0
  08896	f2 0f 10 85 70
	2b 00 00	 movsd	 xmm0, QWORD PTR tv5198[rbp]
  0889e	f2 0f 11 84 24
	88 00 00 00	 movsd	 QWORD PTR [rsp+136], xmm0
  088a7	8b 95 78 2b 00
	00		 mov	 edx, DWORD PTR tv5201[rbp]
  088ad	89 94 24 80 00
	00 00		 mov	 DWORD PTR [rsp+128], edx
  088b4	8b 95 7c 2b 00
	00		 mov	 edx, DWORD PTR tv5205[rbp]
  088ba	89 54 24 78	 mov	 DWORD PTR [rsp+120], edx
  088be	8b 95 80 2b 00
	00		 mov	 edx, DWORD PTR tv5208[rbp]
  088c4	89 54 24 70	 mov	 DWORD PTR [rsp+112], edx
  088c8	8b 95 84 2b 00
	00		 mov	 edx, DWORD PTR tv5211[rbp]
  088ce	89 54 24 68	 mov	 DWORD PTR [rsp+104], edx
  088d2	8b 95 88 2b 00
	00		 mov	 edx, DWORD PTR tv5214[rbp]
  088d8	89 54 24 60	 mov	 DWORD PTR [rsp+96], edx
  088dc	8b 95 8c 2b 00
	00		 mov	 edx, DWORD PTR tv5217[rbp]
  088e2	89 54 24 58	 mov	 DWORD PTR [rsp+88], edx
  088e6	8b 95 90 2b 00
	00		 mov	 edx, DWORD PTR tv5220[rbp]
  088ec	89 54 24 50	 mov	 DWORD PTR [rsp+80], edx
  088f0	8b 95 94 2b 00
	00		 mov	 edx, DWORD PTR tv5223[rbp]
  088f6	89 54 24 48	 mov	 DWORD PTR [rsp+72], edx
  088fa	8b 95 98 2b 00
	00		 mov	 edx, DWORD PTR tv5227[rbp]
  08900	89 54 24 40	 mov	 DWORD PTR [rsp+64], edx
  08904	8b 95 9c 2b 00
	00		 mov	 edx, DWORD PTR tv5231[rbp]
  0890a	89 54 24 38	 mov	 DWORD PTR [rsp+56], edx
  0890e	8b 95 a0 2b 00
	00		 mov	 edx, DWORD PTR tv5235[rbp]
  08914	89 54 24 30	 mov	 DWORD PTR [rsp+48], edx
  08918	8b 95 a4 2b 00
	00		 mov	 edx, DWORD PTR tv5239[rbp]
  0891e	89 54 24 28	 mov	 DWORD PTR [rsp+40], edx
  08922	8b 95 a8 2b 00
	00		 mov	 edx, DWORD PTR tv5243[rbp]
  08928	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  0892c	8b 95 ac 2b 00
	00		 mov	 edx, DWORD PTR tv5247[rbp]
  08932	44 8b ca	 mov	 r9d, edx
  08935	44 8b c0	 mov	 r8d, eax
  08938	8b d1		 mov	 edx, ecx
  0893a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CCH@GLOAKFDB@Return?5value?5?$DN?5?$CFd?6IsItemFocused?$CI@
  08941	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 2352 :             "Return value = %d\n"
; 2353 :             "IsItemFocused() = %d\n"
; 2354 :             "IsItemHovered() = %d\n"
; 2355 :             "IsItemHovered(_AllowWhenBlockedByPopup) = %d\n"
; 2356 :             "IsItemHovered(_AllowWhenBlockedByActiveItem) = %d\n"
; 2357 :             "IsItemHovered(_AllowWhenOverlapped) = %d\n"
; 2358 :             "IsItemHovered(_AllowWhenDisabled) = %d\n"
; 2359 :             "IsItemHovered(_RectOnly) = %d\n"
; 2360 :             "IsItemActive() = %d\n"
; 2361 :             "IsItemEdited() = %d\n"
; 2362 :             "IsItemActivated() = %d\n"
; 2363 :             "IsItemDeactivated() = %d\n"
; 2364 :             "IsItemDeactivatedAfterEdit() = %d\n"
; 2365 :             "IsItemVisible() = %d\n"
; 2366 :             "IsItemClicked() = %d\n"
; 2367 :             "IsItemToggledOpen() = %d\n"
; 2368 :             "GetItemRectMin() = (%.1f, %.1f)\n"
; 2369 :             "GetItemRectMax() = (%.1f, %.1f)\n"
; 2370 :             "GetItemRectSize() = (%.1f, %.1f)",
; 2371 :             ret,
; 2372 :             ImGui::IsItemFocused(),
; 2373 :             ImGui::IsItemHovered(),
; 2374 :             ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup),
; 2375 :             ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem),
; 2376 :             ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenOverlapped),
; 2377 :             ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenDisabled),
; 2378 :             ImGui::IsItemHovered(ImGuiHoveredFlags_RectOnly),
; 2379 :             ImGui::IsItemActive(),
; 2380 :             ImGui::IsItemEdited(),
; 2381 :             ImGui::IsItemActivated(),
; 2382 :             ImGui::IsItemDeactivated(),
; 2383 :             ImGui::IsItemDeactivatedAfterEdit(),
; 2384 :             ImGui::IsItemVisible(),
; 2385 :             ImGui::IsItemClicked(),
; 2386 :             ImGui::IsItemToggledOpen(),
; 2387 :             ImGui::GetItemRectMin().x, ImGui::GetItemRectMin().y,
; 2388 :             ImGui::GetItemRectMax().x, ImGui::GetItemRectMax().y,
; 2389 :             ImGui::GetItemRectSize().x, ImGui::GetItemRectSize().y
; 2390 :         );
; 2391 :         ImGui::BulletText(

  08946	0f b6 85 64 18
	00 00		 movzx	 eax, BYTE PTR hovered_delay_normal$262[rbp]
  0894d	0f b6 8d 44 18
	00 00		 movzx	 ecx, BYTE PTR hovered_delay_short$261[rbp]
  08954	0f b6 95 24 18
	00 00		 movzx	 edx, BYTE PTR hovered_delay_none$260[rbp]
  0895b	44 8b c8	 mov	 r9d, eax
  0895e	44 8b c1	 mov	 r8d, ecx
  08961	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DD@FBICNHKB@w?1?5Hovering?5Delay?3?5None?5?$DN?5?$CFd?0?5Fa@
  08968	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 2392 :             "w/ Hovering Delay: None = %d, Fast %d, Normal = %d", hovered_delay_none, hovered_delay_short, hovered_delay_normal);
; 2393 : 
; 2394 :         if (item_disabled)

  0896d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?item_disabled@?DDA@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  08974	85 c0		 test	 eax, eax
  08976	74 05		 je	 SHORT $LN603@ShowDemoWi

; 2395 :             ImGui::EndDisabled();

  08978	e8 00 00 00 00	 call	 ?EndDisabled@ImGui@@YAXXZ ; ImGui::EndDisabled
$LN603@ShowDemoWi:

; 2396 : 
; 2397 :         char buf[1] = "";

  0897d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  08984	88 85 84 18 00
	00		 mov	 BYTE PTR buf$263[rbp], al

; 2398 :         ImGui::InputText("unused", buf, IM_ARRAYSIZE(buf), ImGuiInputTextFlags_ReadOnly);

  0898a	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  08993	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0899c	41 b9 00 40 00
	00		 mov	 r9d, 16384		; 00004000H
  089a2	41 b8 01 00 00
	00		 mov	 r8d, 1
  089a8	48 8d 95 84 18
	00 00		 lea	 rdx, QWORD PTR buf$263[rbp]
  089af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OJAIHGIC@unused?$AA@
  089b6	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText

; 2399 :         ImGui::SameLine();

  089bb	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  089c3	0f 57 c0	 xorps	 xmm0, xmm0
  089c6	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 2400 :         HelpMarker("This widget is only here to be able to tab-out of the widgets above and see e.g. Deactivated() status.");

  089cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GH@DPFHCGHD@This?5widget?5is?5only?5here?5to?5be?5a@
  089d2	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 2401 : 
; 2402 :         ImGui::TreePop();

  089d7	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN319@ShowDemoWi:

; 2403 :     }
; 2404 : 
; 2405 :     IMGUI_DEMO_MARKER("Widgets/Querying Window Status (Focused,Hovered etc.)");

  089dc	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  089e4	74 28		 je	 SHORT $LN604@ShowDemoWi
  089e6	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  089ec	05 42 07 00 00	 add	 eax, 1858		; 00000742H
  089f1	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  089f8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DG@IOBCHNLH@Widgets?1Querying?5Window?5Status?5?$CI@
  089ff	8b d0		 mov	 edx, eax
  08a01	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  08a08	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN604@ShowDemoWi:
  08a0e	33 c0		 xor	 eax, eax
  08a10	85 c0		 test	 eax, eax
  08a12	75 c8		 jne	 SHORT $LN319@ShowDemoWi

; 2406 :     if (ImGui::TreeNode("Querying Window Status (Focused/Hovered etc.)"))

  08a14	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@GHICHHHH@Querying?5Window?5Status?5?$CIFocused?1@
  08a1b	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  08a20	0f b6 c0	 movzx	 eax, al
  08a23	85 c0		 test	 eax, eax
  08a25	0f 84 63 03 00
	00		 je	 $LN605@ShowDemoWi

; 2407 :     {
; 2408 :         static bool embed_all_inside_a_child_window = false;
; 2409 :         ImGui::Checkbox("Embed everything inside a child window for testing _RootWindow flag.", &embed_all_inside_a_child_window);

  08a2b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?embed_all_inside_a_child_window@?DGN@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  08a32	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EF@HEEHLIKF@Embed?5everything?5inside?5a?5child?5@
  08a39	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 2410 :         if (embed_all_inside_a_child_window)

  08a3e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?embed_all_inside_a_child_window@?DGN@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  08a45	85 c0		 test	 eax, eax
  08a47	74 34		 je	 SHORT $LN606@ShowDemoWi

; 2411 :             ImGui::BeginChild("outer_child", ImVec2(0, ImGui::GetFontSize() * 20.0f), true);

  08a49	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  08a4e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41a00000
  08a56	0f 28 d0	 movaps	 xmm2, xmm0
  08a59	0f 57 c9	 xorps	 xmm1, xmm1
  08a5c	48 8d 8d f4 2a
	00 00		 lea	 rcx, QWORD PTR $T352[rbp]
  08a63	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  08a68	45 33 c9	 xor	 r9d, r9d
  08a6b	41 b0 01	 mov	 r8b, 1
  08a6e	48 8b d0	 mov	 rdx, rax
  08a71	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@KCHHLPPE@outer_child?$AA@
  08a78	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z ; ImGui::BeginChild
$LN606@ShowDemoWi:

; 2412 : 
; 2413 :         // Testing IsWindowFocused() function with its various flags.
; 2414 :         ImGui::BulletText(

  08a7d	b9 04 00 00 00	 mov	 ecx, 4
  08a82	e8 00 00 00 00	 call	 ?IsWindowFocused@ImGui@@YA_NH@Z ; ImGui::IsWindowFocused
  08a87	0f b6 c0	 movzx	 eax, al
  08a8a	89 85 44 2b 00
	00		 mov	 DWORD PTR tv5307[rbp], eax
  08a90	b9 0a 00 00 00	 mov	 ecx, 10
  08a95	e8 00 00 00 00	 call	 ?IsWindowFocused@ImGui@@YA_NH@Z ; ImGui::IsWindowFocused
  08a9a	0f b6 c0	 movzx	 eax, al
  08a9d	89 85 48 2b 00
	00		 mov	 DWORD PTR tv5311[rbp], eax
  08aa3	b9 02 00 00 00	 mov	 ecx, 2
  08aa8	e8 00 00 00 00	 call	 ?IsWindowFocused@ImGui@@YA_NH@Z ; ImGui::IsWindowFocused
  08aad	0f b6 c0	 movzx	 eax, al
  08ab0	89 85 4c 2b 00
	00		 mov	 DWORD PTR tv5315[rbp], eax
  08ab6	b9 0b 00 00 00	 mov	 ecx, 11
  08abb	e8 00 00 00 00	 call	 ?IsWindowFocused@ImGui@@YA_NH@Z ; ImGui::IsWindowFocused
  08ac0	0f b6 c0	 movzx	 eax, al
  08ac3	89 85 50 2b 00
	00		 mov	 DWORD PTR tv5319[rbp], eax
  08ac9	b9 03 00 00 00	 mov	 ecx, 3
  08ace	e8 00 00 00 00	 call	 ?IsWindowFocused@ImGui@@YA_NH@Z ; ImGui::IsWindowFocused
  08ad3	0f b6 c0	 movzx	 eax, al
  08ad6	89 85 54 2b 00
	00		 mov	 DWORD PTR tv5323[rbp], eax
  08adc	b9 09 00 00 00	 mov	 ecx, 9
  08ae1	e8 00 00 00 00	 call	 ?IsWindowFocused@ImGui@@YA_NH@Z ; ImGui::IsWindowFocused
  08ae6	0f b6 c0	 movzx	 eax, al
  08ae9	89 85 58 2b 00
	00		 mov	 DWORD PTR tv5327[rbp], eax
  08aef	b9 01 00 00 00	 mov	 ecx, 1
  08af4	e8 00 00 00 00	 call	 ?IsWindowFocused@ImGui@@YA_NH@Z ; ImGui::IsWindowFocused
  08af9	0f b6 c0	 movzx	 eax, al
  08afc	89 85 5c 2b 00
	00		 mov	 DWORD PTR tv5331[rbp], eax
  08b02	33 c9		 xor	 ecx, ecx
  08b04	e8 00 00 00 00	 call	 ?IsWindowFocused@ImGui@@YA_NH@Z ; ImGui::IsWindowFocused
  08b09	0f b6 c0	 movzx	 eax, al
  08b0c	8b 8d 44 2b 00
	00		 mov	 ecx, DWORD PTR tv5307[rbp]
  08b12	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  08b16	8b 8d 48 2b 00
	00		 mov	 ecx, DWORD PTR tv5311[rbp]
  08b1c	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  08b20	8b 8d 4c 2b 00
	00		 mov	 ecx, DWORD PTR tv5315[rbp]
  08b26	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  08b2a	8b 8d 50 2b 00
	00		 mov	 ecx, DWORD PTR tv5319[rbp]
  08b30	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  08b34	8b 8d 54 2b 00
	00		 mov	 ecx, DWORD PTR tv5323[rbp]
  08b3a	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  08b3e	8b 8d 58 2b 00
	00		 mov	 ecx, DWORD PTR tv5327[rbp]
  08b44	44 8b c9	 mov	 r9d, ecx
  08b47	8b 8d 5c 2b 00
	00		 mov	 ecx, DWORD PTR tv5331[rbp]
  08b4d	44 8b c1	 mov	 r8d, ecx
  08b50	8b d0		 mov	 edx, eax
  08b52	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BFL@IGCCLIMC@IsWindowFocused?$CI?$CJ?5?$DN?5?$CFd?6IsWindowF@
  08b59	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 2415 :             "IsWindowFocused() = %d\n"
; 2416 :             "IsWindowFocused(_ChildWindows) = %d\n"
; 2417 :             "IsWindowFocused(_ChildWindows|_NoPopupHierarchy) = %d\n"
; 2418 :             "IsWindowFocused(_ChildWindows|_RootWindow) = %d\n"
; 2419 :             "IsWindowFocused(_ChildWindows|_RootWindow|_NoPopupHierarchy) = %d\n"
; 2420 :             "IsWindowFocused(_RootWindow) = %d\n"
; 2421 :             "IsWindowFocused(_RootWindow|_NoPopupHierarchy) = %d\n"
; 2422 :             "IsWindowFocused(_AnyWindow) = %d\n",
; 2423 :             ImGui::IsWindowFocused(),
; 2424 :             ImGui::IsWindowFocused(ImGuiFocusedFlags_ChildWindows),
; 2425 :             ImGui::IsWindowFocused(ImGuiFocusedFlags_ChildWindows | ImGuiFocusedFlags_NoPopupHierarchy),
; 2426 :             ImGui::IsWindowFocused(ImGuiFocusedFlags_ChildWindows | ImGuiFocusedFlags_RootWindow),
; 2427 :             ImGui::IsWindowFocused(ImGuiFocusedFlags_ChildWindows | ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_NoPopupHierarchy),
; 2428 :             ImGui::IsWindowFocused(ImGuiFocusedFlags_RootWindow),
; 2429 :             ImGui::IsWindowFocused(ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_NoPopupHierarchy),
; 2430 :             ImGui::IsWindowFocused(ImGuiFocusedFlags_AnyWindow));
; 2431 : 
; 2432 :         // Testing IsWindowHovered() function with its various flags.
; 2433 :         ImGui::BulletText(

  08b5e	b9 04 00 00 00	 mov	 ecx, 4
  08b63	e8 00 00 00 00	 call	 ?IsWindowHovered@ImGui@@YA_NH@Z ; ImGui::IsWindowHovered
  08b68	0f b6 c0	 movzx	 eax, al
  08b6b	89 85 44 2b 00
	00		 mov	 DWORD PTR tv5340[rbp], eax
  08b71	b9 21 00 00 00	 mov	 ecx, 33			; 00000021H
  08b76	e8 00 00 00 00	 call	 ?IsWindowHovered@ImGui@@YA_NH@Z ; ImGui::IsWindowHovered
  08b7b	0f b6 c0	 movzx	 eax, al
  08b7e	89 85 48 2b 00
	00		 mov	 DWORD PTR tv5344[rbp], eax
  08b84	b9 0a 00 00 00	 mov	 ecx, 10
  08b89	e8 00 00 00 00	 call	 ?IsWindowHovered@ImGui@@YA_NH@Z ; ImGui::IsWindowHovered
  08b8e	0f b6 c0	 movzx	 eax, al
  08b91	89 85 4c 2b 00
	00		 mov	 DWORD PTR tv5348[rbp], eax
  08b97	b9 02 00 00 00	 mov	 ecx, 2
  08b9c	e8 00 00 00 00	 call	 ?IsWindowHovered@ImGui@@YA_NH@Z ; ImGui::IsWindowHovered
  08ba1	0f b6 c0	 movzx	 eax, al
  08ba4	89 85 50 2b 00
	00		 mov	 DWORD PTR tv5352[rbp], eax
  08baa	b9 0b 00 00 00	 mov	 ecx, 11
  08baf	e8 00 00 00 00	 call	 ?IsWindowHovered@ImGui@@YA_NH@Z ; ImGui::IsWindowHovered
  08bb4	0f b6 c0	 movzx	 eax, al
  08bb7	89 85 54 2b 00
	00		 mov	 DWORD PTR tv5356[rbp], eax
  08bbd	b9 03 00 00 00	 mov	 ecx, 3
  08bc2	e8 00 00 00 00	 call	 ?IsWindowHovered@ImGui@@YA_NH@Z ; ImGui::IsWindowHovered
  08bc7	0f b6 c0	 movzx	 eax, al
  08bca	89 85 58 2b 00
	00		 mov	 DWORD PTR tv5360[rbp], eax
  08bd0	b9 09 00 00 00	 mov	 ecx, 9
  08bd5	e8 00 00 00 00	 call	 ?IsWindowHovered@ImGui@@YA_NH@Z ; ImGui::IsWindowHovered
  08bda	0f b6 c0	 movzx	 eax, al
  08bdd	89 85 5c 2b 00
	00		 mov	 DWORD PTR tv5364[rbp], eax
  08be3	b9 01 00 00 00	 mov	 ecx, 1
  08be8	e8 00 00 00 00	 call	 ?IsWindowHovered@ImGui@@YA_NH@Z ; ImGui::IsWindowHovered
  08bed	0f b6 c0	 movzx	 eax, al
  08bf0	89 85 60 2b 00
	00		 mov	 DWORD PTR tv5368[rbp], eax
  08bf6	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  08bfb	e8 00 00 00 00	 call	 ?IsWindowHovered@ImGui@@YA_NH@Z ; ImGui::IsWindowHovered
  08c00	0f b6 c0	 movzx	 eax, al
  08c03	89 85 64 2b 00
	00		 mov	 DWORD PTR tv5372[rbp], eax
  08c09	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  08c0e	e8 00 00 00 00	 call	 ?IsWindowHovered@ImGui@@YA_NH@Z ; ImGui::IsWindowHovered
  08c13	0f b6 c0	 movzx	 eax, al
  08c16	89 85 68 2b 00
	00		 mov	 DWORD PTR tv5376[rbp], eax
  08c1c	33 c9		 xor	 ecx, ecx
  08c1e	e8 00 00 00 00	 call	 ?IsWindowHovered@ImGui@@YA_NH@Z ; ImGui::IsWindowHovered
  08c23	0f b6 c0	 movzx	 eax, al
  08c26	8b 8d 44 2b 00
	00		 mov	 ecx, DWORD PTR tv5340[rbp]
  08c2c	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  08c30	8b 8d 48 2b 00
	00		 mov	 ecx, DWORD PTR tv5344[rbp]
  08c36	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  08c3a	8b 8d 4c 2b 00
	00		 mov	 ecx, DWORD PTR tv5348[rbp]
  08c40	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  08c44	8b 8d 50 2b 00
	00		 mov	 ecx, DWORD PTR tv5352[rbp]
  08c4a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  08c4e	8b 8d 54 2b 00
	00		 mov	 ecx, DWORD PTR tv5356[rbp]
  08c54	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  08c58	8b 8d 58 2b 00
	00		 mov	 ecx, DWORD PTR tv5360[rbp]
  08c5e	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  08c62	8b 8d 5c 2b 00
	00		 mov	 ecx, DWORD PTR tv5364[rbp]
  08c68	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  08c6c	8b 8d 60 2b 00
	00		 mov	 ecx, DWORD PTR tv5368[rbp]
  08c72	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  08c76	8b 8d 64 2b 00
	00		 mov	 ecx, DWORD PTR tv5372[rbp]
  08c7c	44 8b c9	 mov	 r9d, ecx
  08c7f	8b 8d 68 2b 00
	00		 mov	 ecx, DWORD PTR tv5376[rbp]
  08c85	44 8b c1	 mov	 r8d, ecx
  08c88	8b d0		 mov	 edx, eax
  08c8a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BPL@PECCPJNF@IsWindowHovered?$CI?$CJ?5?$DN?5?$CFd?6IsWindowH@
  08c91	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 2434 :             "IsWindowHovered() = %d\n"
; 2435 :             "IsWindowHovered(_AllowWhenBlockedByPopup) = %d\n"
; 2436 :             "IsWindowHovered(_AllowWhenBlockedByActiveItem) = %d\n"
; 2437 :             "IsWindowHovered(_ChildWindows) = %d\n"
; 2438 :             "IsWindowHovered(_ChildWindows|_NoPopupHierarchy) = %d\n"
; 2439 :             "IsWindowHovered(_ChildWindows|_RootWindow) = %d\n"
; 2440 :             "IsWindowHovered(_ChildWindows|_RootWindow|_NoPopupHierarchy) = %d\n"
; 2441 :             "IsWindowHovered(_RootWindow) = %d\n"
; 2442 :             "IsWindowHovered(_RootWindow|_NoPopupHierarchy) = %d\n"
; 2443 :             "IsWindowHovered(_ChildWindows|_AllowWhenBlockedByPopup) = %d\n"
; 2444 :             "IsWindowHovered(_AnyWindow) = %d\n",
; 2445 :             ImGui::IsWindowHovered(),
; 2446 :             ImGui::IsWindowHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup),
; 2447 :             ImGui::IsWindowHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem),
; 2448 :             ImGui::IsWindowHovered(ImGuiHoveredFlags_ChildWindows),
; 2449 :             ImGui::IsWindowHovered(ImGuiHoveredFlags_ChildWindows | ImGuiHoveredFlags_NoPopupHierarchy),
; 2450 :             ImGui::IsWindowHovered(ImGuiHoveredFlags_ChildWindows | ImGuiHoveredFlags_RootWindow),
; 2451 :             ImGui::IsWindowHovered(ImGuiHoveredFlags_ChildWindows | ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_NoPopupHierarchy),
; 2452 :             ImGui::IsWindowHovered(ImGuiHoveredFlags_RootWindow),
; 2453 :             ImGui::IsWindowHovered(ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_NoPopupHierarchy),
; 2454 :             ImGui::IsWindowHovered(ImGuiHoveredFlags_ChildWindows | ImGuiHoveredFlags_AllowWhenBlockedByPopup),
; 2455 :             ImGui::IsWindowHovered(ImGuiHoveredFlags_AnyWindow));
; 2456 : 
; 2457 :         ImGui::BeginChild("child", ImVec2(0, 50), true);

  08c96	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42480000
  08c9e	0f 57 c9	 xorps	 xmm1, xmm1
  08ca1	48 8d 8d 14 2b
	00 00		 lea	 rcx, QWORD PTR $T353[rbp]
  08ca8	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  08cad	45 33 c9	 xor	 r9d, r9d
  08cb0	41 b0 01	 mov	 r8b, 1
  08cb3	48 8b d0	 mov	 rdx, rax
  08cb6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05GPGNDLEK@child?$AA@
  08cbd	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z ; ImGui::BeginChild

; 2458 :         ImGui::Text("This is another child window for testing the _ChildWindows flag.");

  08cc2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EB@JLFLAMNL@This?5is?5another?5child?5window?5for@
  08cc9	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2459 :         ImGui::EndChild();

  08cce	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 2460 :         if (embed_all_inside_a_child_window)

  08cd3	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?embed_all_inside_a_child_window@?DGN@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  08cda	85 c0		 test	 eax, eax
  08cdc	74 05		 je	 SHORT $LN607@ShowDemoWi

; 2461 :             ImGui::EndChild();

  08cde	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild
$LN607@ShowDemoWi:

; 2462 : 
; 2463 :         // Calling IsItemHovered() after begin returns the hovered status of the title bar.
; 2464 :         // This is useful in particular if you want to create a context menu associated to the title bar of a window.
; 2465 :         static bool test_window = false;
; 2466 :         ImGui::Checkbox("Hovered/Active tests after Begin() for title bar testing", &test_window);

  08ce3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?test_window@?DGN@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  08cea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DJ@OKFMLKNH@Hovered?1Active?5tests?5after?5Begin@
  08cf1	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 2467 :         if (test_window)

  08cf6	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?test_window@?DGN@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  08cfd	85 c0		 test	 eax, eax
  08cff	0f 84 84 00 00
	00		 je	 $LN608@ShowDemoWi

; 2468 :         {
; 2469 :             ImGui::Begin("Title bar Hovered/Active tests", &test_window);

  08d05	45 33 c0	 xor	 r8d, r8d
  08d08	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?test_window@?DGN@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  08d0f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@MFKNMHP@Title?5bar?5Hovered?1Active?5tests?$AA@
  08d16	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin

; 2470 :             if (ImGui::BeginPopupContextItem()) // <-- This is using IsItemHovered()

  08d1b	ba 01 00 00 00	 mov	 edx, 1
  08d20	33 c9		 xor	 ecx, ecx
  08d22	e8 00 00 00 00	 call	 ?BeginPopupContextItem@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopupContextItem
  08d27	0f b6 c0	 movzx	 eax, al
  08d2a	85 c0		 test	 eax, eax
  08d2c	74 27		 je	 SHORT $LN609@ShowDemoWi

; 2471 :             {
; 2472 :                 if (ImGui::MenuItem("Close")) { test_window = false; }

  08d2e	41 b1 01	 mov	 r9b, 1
  08d31	45 33 c0	 xor	 r8d, r8d
  08d34	33 d2		 xor	 edx, edx
  08d36	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LGELBCGM@Close?$AA@
  08d3d	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  08d42	0f b6 c0	 movzx	 eax, al
  08d45	85 c0		 test	 eax, eax
  08d47	74 07		 je	 SHORT $LN610@ShowDemoWi
  08d49	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?test_window@?DGN@??ShowDemoWindowWidgets@@YAXXZ@4_NA, 0
$LN610@ShowDemoWi:

; 2473 :                 ImGui::EndPopup();

  08d50	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN609@ShowDemoWi:

; 2474 :             }
; 2475 :             ImGui::Text(

  08d55	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  08d5a	0f b6 c0	 movzx	 eax, al
  08d5d	89 85 44 2b 00
	00		 mov	 DWORD PTR tv5446[rbp], eax
  08d63	33 c9		 xor	 ecx, ecx
  08d65	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  08d6a	0f b6 c0	 movzx	 eax, al
  08d6d	8b 8d 44 2b 00
	00		 mov	 ecx, DWORD PTR tv5446[rbp]
  08d73	44 8b c1	 mov	 r8d, ecx
  08d76	8b d0		 mov	 edx, eax
  08d78	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0HP@CKBHJIAM@IsItemHovered?$CI?$CJ?5after?5begin?5?$DN?5?$CFd@
  08d7f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2476 :                 "IsItemHovered() after begin = %d (== is title bar hovered)\n"
; 2477 :                 "IsItemActive() after begin = %d (== is window being clicked/moved)\n",
; 2478 :                 ImGui::IsItemHovered(), ImGui::IsItemActive());
; 2479 :             ImGui::End();

  08d84	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN608@ShowDemoWi:

; 2480 :         }
; 2481 : 
; 2482 :         ImGui::TreePop();

  08d89	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN605@ShowDemoWi:

; 2483 :     }
; 2484 : 
; 2485 :     // Demonstrate BeginDisabled/EndDisabled using a checkbox located at the bottom of the section (which is a bit odd:
; 2486 :     // logically we'd have this checkbox at the top of the section, but we don't want this feature to steal that space)
; 2487 :     if (disable_all)

  08d8e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?disable_all@?1??ShowDemoWindowWidgets@@YAXXZ@4_NA
  08d95	85 c0		 test	 eax, eax
  08d97	74 05		 je	 SHORT $LN322@ShowDemoWi

; 2488 :         ImGui::EndDisabled();

  08d99	e8 00 00 00 00	 call	 ?EndDisabled@ImGui@@YAXXZ ; ImGui::EndDisabled
$LN322@ShowDemoWi:

; 2489 : 
; 2490 :     IMGUI_DEMO_MARKER("Widgets/Disable Block");

  08d9e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  08da6	74 28		 je	 SHORT $LN612@ShowDemoWi
  08da8	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  08dae	05 97 07 00 00	 add	 eax, 1943		; 00000797H
  08db3	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  08dba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@GMADNJLN@Widgets?1Disable?5Block?$AA@
  08dc1	8b d0		 mov	 edx, eax
  08dc3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  08dca	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN612@ShowDemoWi:
  08dd0	33 c0		 xor	 eax, eax
  08dd2	85 c0		 test	 eax, eax
  08dd4	75 c8		 jne	 SHORT $LN322@ShowDemoWi

; 2491 :     if (ImGui::TreeNode("Disable block"))

  08dd6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@LDGJBBHL@Disable?5block?$AA@
  08ddd	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  08de2	0f b6 c0	 movzx	 eax, al
  08de5	85 c0		 test	 eax, eax
  08de7	74 34		 je	 SHORT $LN325@ShowDemoWi

; 2492 :     {
; 2493 :         ImGui::Checkbox("Disable entire section above", &disable_all);

  08de9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?disable_all@?1??ShowDemoWindowWidgets@@YAXXZ@4_NA
  08df0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@CHNIACDP@Disable?5entire?5section?5above?$AA@
  08df7	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 2494 :         ImGui::SameLine(); HelpMarker("Demonstrate using BeginDisabled()/EndDisabled() across this section.");

  08dfc	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  08e04	0f 57 c0	 xorps	 xmm0, xmm0
  08e07	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  08e0c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EF@FEKDLMNJ@Demonstrate?5using?5BeginDisabled?$CI@
  08e13	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 2495 :         ImGui::TreePop();

  08e18	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN325@ShowDemoWi:

; 2496 :     }
; 2497 : 
; 2498 :     IMGUI_DEMO_MARKER("Widgets/Text Filter");

  08e1d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  08e25	74 28		 je	 SHORT $LN614@ShowDemoWi
  08e27	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  08e2d	05 9f 07 00 00	 add	 eax, 1951		; 0000079fH
  08e32	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  08e39	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BE@EPEANCCD@Widgets?1Text?5Filter?$AA@
  08e40	8b d0		 mov	 edx, eax
  08e42	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  08e49	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN614@ShowDemoWi:
  08e4f	33 c0		 xor	 eax, eax
  08e51	85 c0		 test	 eax, eax
  08e53	75 c8		 jne	 SHORT $LN325@ShowDemoWi

; 2499 :     if (ImGui::TreeNode("Text Filter"))

  08e55	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MINJPGJD@Text?5Filter?$AA@
  08e5c	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  08e61	0f b6 c0	 movzx	 eax, al
  08e64	85 c0		 test	 eax, eax
  08e66	0f 84 6e 01 00
	00		 je	 $LN1@ShowDemoWi

; 2500 :     {
; 2501 :         // Helper class to easy setup a text filter.
; 2502 :         // You may want to implement a more feature-full filtering scheme in your own application.
; 2503 :         HelpMarker("Not a widget per-se, but ImGuiTextFilter is a helper to perform simple filtering on text strings.");

  08e6c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GC@CDJPIFKB@Not?5a?5widget?5per?9se?0?5but?5ImGuiTe@
  08e73	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 2504 :         static ImGuiTextFilter filter;

  08e78	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  08e7d	8b c0		 mov	 eax, eax
  08e7f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  08e85	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  08e8e	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  08e92	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  08e95	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS7@?DIK@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
  08e9b	7e 41		 jle	 SHORT $LN326@ShowDemoWi
  08e9d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS7@?DIK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  08ea4	e8 00 00 00 00	 call	 _Init_thread_header
  08ea9	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS7@?DIK@??ShowDemoWindowWidgets@@YAXXZ@4HA, -1
  08eb0	75 2c		 jne	 SHORT $LN326@ShowDemoWi
  08eb2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  08eb9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?filter@?DIK@??ShowDemoWindowWidgets@@YAXXZ@4UImGuiTextFilter@@A
  08ec0	e8 00 00 00 00	 call	 ??0ImGuiTextFilter@@QEAA@PEBD@Z ; ImGuiTextFilter::ImGuiTextFilter
  08ec5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__Ffilter@?DIK@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ ; `ShowDemoWindowWidgets'::`906'::`dynamic atexit destructor for 'filter''
  08ecc	e8 00 00 00 00	 call	 atexit
  08ed1	90		 npad	 1
  08ed2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS7@?DIK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  08ed9	e8 00 00 00 00	 call	 _Init_thread_footer
$LN326@ShowDemoWi:

; 2505 :         ImGui::Text("Filter usage:\n"

  08ede	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0LH@KANOFBLE@Filter?5usage?3?6?5?5?$CC?$CC?5?5?5?5?5?5?5?5?5displ@
  08ee5	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 2506 :             "  \"\"         display all lines\n"
; 2507 :             "  \"xxx\"      display lines containing \"xxx\"\n"
; 2508 :             "  \"xxx,yyy\"  display lines containing \"xxx\" or \"yyy\"\n"
; 2509 :             "  \"-xxx\"     hide lines containing \"xxx\"");
; 2510 :         filter.Draw();

  08eea	0f 57 d2	 xorps	 xmm2, xmm2
  08eed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@HPCLFOON@Filter?5?$CIinc?0?9exc?$CJ?$AA@
  08ef4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?filter@?DIK@??ShowDemoWindowWidgets@@YAXXZ@4UImGuiTextFilter@@A
  08efb	e8 00 00 00 00	 call	 ?Draw@ImGuiTextFilter@@QEAA_NPEBDM@Z ; ImGuiTextFilter::Draw

; 2511 :         const char* lines[] = { "aaa1.c", "bbb1.c", "ccc1.c", "aaa2.cpp", "bbb2.cpp", "ccc2.cpp", "abc.h", "hello, world" };

  08f00	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06BMDMCJJI@aaa1?4c?$AA@
  08f07	48 89 85 b0 18
	00 00		 mov	 QWORD PTR lines$264[rbp], rax
  08f0e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06OMOADLHL@bbb1?4c?$AA@
  08f15	48 89 85 b8 18
	00 00		 mov	 QWORD PTR lines$264[rbp+8], rax
  08f1c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06LMKLMKNK@ccc1?4c?$AA@
  08f23	48 89 85 c0 18
	00 00		 mov	 QWORD PTR lines$264[rbp+16], rax
  08f2a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08GHAOHEK@aaa2?4cpp?$AA@
  08f31	48 89 85 c8 18
	00 00		 mov	 QWORD PTR lines$264[rbp+24], rax
  08f38	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08IAJKMGPB@bbb2?4cpp?$AA@
  08f3f	48 89 85 d0 18
	00 00		 mov	 QWORD PTR lines$264[rbp+32], rax
  08f46	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08PNDMNJJI@ccc2?4cpp?$AA@
  08f4d	48 89 85 d8 18
	00 00		 mov	 QWORD PTR lines$264[rbp+40], rax
  08f54	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05NIADHECG@abc?4h?$AA@
  08f5b	48 89 85 e0 18
	00 00		 mov	 QWORD PTR lines$264[rbp+48], rax
  08f62	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0N@OLAOGCLC@hello?0?5world?$AA@
  08f69	48 89 85 e8 18
	00 00		 mov	 QWORD PTR lines$264[rbp+56], rax

; 2512 :         for (int i = 0; i < IM_ARRAYSIZE(lines); i++)

  08f70	c7 85 04 19 00
	00 00 00 00 00	 mov	 DWORD PTR i$265[rbp], 0
  08f7a	eb 0e		 jmp	 SHORT $LN329@ShowDemoWi
$LN327@ShowDemoWi:
  08f7c	8b 85 04 19 00
	00		 mov	 eax, DWORD PTR i$265[rbp]
  08f82	ff c0		 inc	 eax
  08f84	89 85 04 19 00
	00		 mov	 DWORD PTR i$265[rbp], eax
$LN329@ShowDemoWi:
  08f8a	83 bd 04 19 00
	00 08		 cmp	 DWORD PTR i$265[rbp], 8
  08f91	7d 42		 jge	 SHORT $LN328@ShowDemoWi

; 2513 :             if (filter.PassFilter(lines[i]))

  08f93	48 63 85 04 19
	00 00		 movsxd	 rax, DWORD PTR i$265[rbp]
  08f9a	45 33 c0	 xor	 r8d, r8d
  08f9d	48 8b 94 c5 b0
	18 00 00	 mov	 rdx, QWORD PTR lines$264[rbp+rax*8]
  08fa5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?filter@?DIK@??ShowDemoWindowWidgets@@YAXXZ@4UImGuiTextFilter@@A
  08fac	e8 00 00 00 00	 call	 ?PassFilter@ImGuiTextFilter@@QEBA_NPEBD0@Z ; ImGuiTextFilter::PassFilter
  08fb1	0f b6 c0	 movzx	 eax, al
  08fb4	85 c0		 test	 eax, eax
  08fb6	74 1b		 je	 SHORT $LN616@ShowDemoWi

; 2514 :                 ImGui::BulletText("%s", lines[i]);

  08fb8	48 63 85 04 19
	00 00		 movsxd	 rax, DWORD PTR i$265[rbp]
  08fbf	48 8b 94 c5 b0
	18 00 00	 mov	 rdx, QWORD PTR lines$264[rbp+rax*8]
  08fc7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs?$AA@
  08fce	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText
$LN616@ShowDemoWi:

; 2515 :         ImGui::TreePop();

  08fd3	eb a7		 jmp	 SHORT $LN327@ShowDemoWi
$LN328@ShowDemoWi:
  08fd5	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN1@ShowDemoWi:

; 2516 :     }
; 2517 : }

  08fda	48 8d 8d 40 ff
	ff ff		 lea	 rcx, QWORD PTR [rbp-192]
  08fe1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShowDemoWindowWidgets@@YAXXZ$rtcFrameData
  08fe8	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  08fed	48 8b 8d b0 2b
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  08ff4	48 33 cd	 xor	 rcx, rbp
  08ff7	e8 00 00 00 00	 call	 __security_check_cookie
  08ffc	48 8d a5 c0 2b
	00 00		 lea	 rsp, QWORD PTR [rbp+11200]
  09003	5f		 pop	 rdi
  09004	5e		 pop	 rsi
  09005	5d		 pop	 rbp
  09006	c3		 ret	 0
?ShowDemoWindowWidgets@@YAXXZ ENDP			; ShowDemoWindowWidgets
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
i$97 = 4
spacing$98 = 36
elems_names$99 = 72
elem_name$100 = 136
items$101 = 176
items$102 = 304
i$103 = 404
node_clicked$104 = 436
i$105 = 468
node_flags$106 = 500
is_selected$107 = 532
node_open$108 = 564
i$109 = 596
i$110 = 628
draw_list$111 = 664
n$112 = 692
pos$113 = 728
marker_min$114 = 760
marker_max$115 = 792
io$116 = 824
my_tex_id$117 = 856
my_tex_w$118 = 884
my_tex_h$119 = 916
pos$120 = 952
uv_min$121 = 984
uv_max$122 = 1016
tint_col$123 = 1048
border_col$124 = 1096
region_sz$125 = 1140
region_x$126 = 1172
region_y$127 = 1204
zoom$128 = 1236
uv0$129 = 1272
uv1$130 = 1304
i$131 = 1332
size$132 = 1368
uv0$133 = 1400
uv1$134 = 1432
bg_col$135 = 1464
tint_col$136 = 1512
items$137 = 1568
combo_preview_value$138 = 1704
n$139 = 1732
is_selected$140 = 1764
items$141 = 1808
n$142 = 1940
is_selected$143 = 1972
n$144 = 2004
is_selected$145 = 2036
n$146 = 2068
buf$147 = 2104
n$148 = 2164
buf$149 = 2200
i$150 = 2260
label$151 = 2296
i$152 = 2356
label$153 = 2392
time$154 = 2452
winning_state$155 = 2484
y$156 = 2516
x$157 = 2548
y$158 = 2580
x$159 = 2612
alignment$160 = 2648
name$161 = 2680
tab_bar_flags$162 = 2740
names$163 = 2776
n$164 = 2836
n$165 = 2868
i$166 = 2900
n$167 = 2932
open$168 = 2964
name$169 = 3000
average$170 = 3044
n$171 = 3076
overlay$172 = 3112
func$173 = 3176
progress_saturated$174 = 3204
buf$175 = 3240
misc_flags$176 = 3300
n$177 = 3332
open_popup$178 = 3364
n$179 = 3396
palette_button_flags$180 = 3428
payload$181 = 3464
payload$182 = 3496
flags$183 = 3524
w$184 = 3556
s8_zero$185 = 3588
s8_one$186 = 3620
s8_fifty$187 = 3652
s8_min$188 = 3684
s8_max$189 = 3716
u8_zero$190 = 3748
u8_one$191 = 3780
u8_fifty$192 = 3812
u8_min$193 = 3844
u8_max$194 = 3876
s16_zero$195 = 3908
s16_one$196 = 3940
s16_fifty$197 = 3972
s16_min$198 = 4004
s16_max$199 = 4036
u16_zero$200 = 4068
u16_one$201 = 4100
u16_fifty$202 = 4132
u16_min$203 = 4164
u16_max$204 = 4196
s32_zero$205 = 4228
s32_one$206 = 4260
s32_fifty$207 = 4292
s32_min$208 = 4324
s32_max$209 = 4356
s32_hi_a$210 = 4388
s32_hi_b$211 = 4420
u32_zero$212 = 4452
u32_one$213 = 4484
u32_fifty$214 = 4516
u32_min$215 = 4548
u32_max$216 = 4580
u32_hi_a$217 = 4612
u32_hi_b$218 = 4644
s64_zero$219 = 4680
s64_one$220 = 4712
s64_fifty$221 = 4744
s64_min$222 = 4776
s64_max$223 = 4808
s64_hi_a$224 = 4840
s64_hi_b$225 = 4872
u64_zero$226 = 4904
u64_one$227 = 4936
u64_fifty$228 = 4968
u64_min$229 = 5000
u64_max$230 = 5032
u64_hi_a$231 = 5064
u64_hi_b$232 = 5096
f32_zero$233 = 5124
f32_one$234 = 5156
f32_lo_a$235 = 5188
f32_hi_a$236 = 5220
f64_zero$237 = 5256
f64_one$238 = 5288
f64_lo_a$239 = 5320
f64_hi_a$240 = 5352
drag_speed$241 = 5380
spacing$242 = 5412
i$243 = 5444
rows$244 = 5476
small_slider_size$245 = 5512
nx$246 = 5540
ny$247 = 5572
i$248 = 5604
n$249 = 5636
payload$250 = 5672
payload_n$251 = 5700
tmp$252 = 5736
n$253 = 5764
item$254 = 5800
n_next$255 = 5828
item_names$256 = 5872
ret$257 = 6020
items$258 = 6056
items$259 = 6120
hovered_delay_none$260 = 6180
hovered_delay_short$261 = 6212
hovered_delay_normal$262 = 6244
buf$263 = 6276
lines$264 = 6320
i$265 = 6404
$T266 = 7972
$T267 = 8004
$T268 = 8052
$T269 = 8100
$T270 = 8148
$T271 = 8196
$T272 = 8244
$T273 = 8292
$T274 = 8324
$T275 = 8356
$T276 = 8404
$T277 = 8452
$T278 = 8484
$T279 = 8516
$T280 = 8548
$T281 = 8580
$T282 = 8612
$T283 = 8644
$T284 = 8676
$T285 = 8708
$T286 = 8740
$T287 = 8772
$T288 = 8804
$T289 = 8836
$T290 = 8868
$T291 = 8900
$T292 = 8932
$T293 = 8964
$T294 = 8996
$T295 = 9028
$T296 = 9060
$T297 = 9092
$T298 = 9124
$T299 = 9156
$T300 = 9188
$T301 = 9220
$T302 = 9252
$T303 = 9284
$T304 = 9316
$T305 = 9348
$T306 = 9380
$T307 = 9412
$T308 = 9444
$T309 = 9476
$T310 = 9508
$T311 = 9540
$T312 = 9572
$T313 = 9604
$T314 = 9636
$T315 = 9668
$T316 = 9700
$T317 = 9732
$T318 = 9764
$T319 = 9796
$T320 = 9828
$T321 = 9860
$T322 = 9892
$T323 = 9940
$T324 = 9972
$T325 = 10004
$T326 = 10036
$T327 = 10068
$T328 = 10100
$T329 = 10132
$T330 = 10180
$T331 = 10228
$T332 = 10276
$T333 = 10324
$T334 = 10372
$T335 = 10420
$T336 = 10468
$T337 = 10516
$T338 = 10548
$T339 = 10580
$T340 = 10612
$T341 = 10644
$T342 = 10676
$T343 = 10708
$T344 = 10740
$T345 = 10772
$T346 = 10804
$T347 = 10836
$T348 = 10868
$T349 = 10900
$T350 = 10932
$T351 = 10964
$T352 = 10996
$T353 = 11028
$T354 = 11064
tv6279 = 11076
tv6275 = 11076
tv6266 = 11076
tv5446 = 11076
tv5340 = 11076
tv5307 = 11076
tv4882 = 11076
tv4750 = 11076
tv4741 = 11076
tv4732 = 11076
tv3328 = 11076
tv3127 = 11076
tv2950 = 11076
tv2890 = 11076
tv2865 = 11076
tv2376 = 11076
tv1967 = 11076
tv1932 = 11076
tv1923 = 11076
tv1668 = 11076
tv1642 = 11076
tv1549 = 11076
tv1485 = 11076
tv1366 = 11076
tv5602 = 11080
tv5344 = 11080
tv5311 = 11080
tv5173 = 11080
tv4681 = 11080
tv4603 = 11080
tv4361 = 11080
tv4351 = 11080
tv4341 = 11080
tv4331 = 11080
tv4321 = 11080
tv4279 = 11080
tv4269 = 11080
tv4259 = 11080
tv4249 = 11080
tv4239 = 11080
tv4229 = 11080
tv4219 = 11080
tv3918 = 11080
tv3904 = 11080
tv3890 = 11080
tv3876 = 11080
tv3830 = 11080
tv3816 = 11080
tv3802 = 11080
tv3788 = 11080
tv3710 = 11080
tv3439 = 11080
tv3410 = 11080
tv2953 = 11080
tv2889 = 11080
tv2829 = 11080
tv2379 = 11080
tv1056 = 11080
tv802 = 11080
tv536 = 11080
tv5348 = 11084
tv5315 = 11084
tv2960 = 11084
tv5352 = 11088
tv5319 = 11088
tv5178 = 11088
tv3922 = 11088
tv3908 = 11088
tv3894 = 11088
tv3880 = 11088
tv3834 = 11088
tv3820 = 11088
tv3806 = 11088
tv3792 = 11088
tv3778 = 11088
tv2957 = 11088
tv5356 = 11092
tv5323 = 11092
tv2964 = 11092
tv5360 = 11096
tv5327 = 11096
tv5183 = 11096
tv5364 = 11100
tv5331 = 11100
tv5368 = 11104
tv5188 = 11104
tv5372 = 11108
tv5376 = 11112
tv5193 = 11112
tv5198 = 11120
tv5201 = 11128
tv5205 = 11132
tv5208 = 11136
tv5211 = 11140
tv5214 = 11144
tv5217 = 11148
tv5220 = 11152
tv5223 = 11156
tv5227 = 11160
tv5231 = 11164
tv5235 = 11168
tv5239 = 11172
tv5243 = 11176
tv5247 = 11180
__$ArrayPad$ = 11184
?dtor$0@?0??ShowDemoWindowWidgets@@YAXXZ@4HA PROC	; `ShowDemoWindowWidgets'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d aa c0 00
	00 00		 lea	 rbp, QWORD PTR [rdx+192]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?BMK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0001e	e8 00 00 00 00	 call	 _Init_thread_abort
  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
?dtor$0@?0??ShowDemoWindowWidgets@@YAXXZ@4HA ENDP	; `ShowDemoWindowWidgets'::`1'::dtor$0
i$97 = 4
spacing$98 = 36
elems_names$99 = 72
elem_name$100 = 136
items$101 = 176
items$102 = 304
i$103 = 404
node_clicked$104 = 436
i$105 = 468
node_flags$106 = 500
is_selected$107 = 532
node_open$108 = 564
i$109 = 596
i$110 = 628
draw_list$111 = 664
n$112 = 692
pos$113 = 728
marker_min$114 = 760
marker_max$115 = 792
io$116 = 824
my_tex_id$117 = 856
my_tex_w$118 = 884
my_tex_h$119 = 916
pos$120 = 952
uv_min$121 = 984
uv_max$122 = 1016
tint_col$123 = 1048
border_col$124 = 1096
region_sz$125 = 1140
region_x$126 = 1172
region_y$127 = 1204
zoom$128 = 1236
uv0$129 = 1272
uv1$130 = 1304
i$131 = 1332
size$132 = 1368
uv0$133 = 1400
uv1$134 = 1432
bg_col$135 = 1464
tint_col$136 = 1512
items$137 = 1568
combo_preview_value$138 = 1704
n$139 = 1732
is_selected$140 = 1764
items$141 = 1808
n$142 = 1940
is_selected$143 = 1972
n$144 = 2004
is_selected$145 = 2036
n$146 = 2068
buf$147 = 2104
n$148 = 2164
buf$149 = 2200
i$150 = 2260
label$151 = 2296
i$152 = 2356
label$153 = 2392
time$154 = 2452
winning_state$155 = 2484
y$156 = 2516
x$157 = 2548
y$158 = 2580
x$159 = 2612
alignment$160 = 2648
name$161 = 2680
tab_bar_flags$162 = 2740
names$163 = 2776
n$164 = 2836
n$165 = 2868
i$166 = 2900
n$167 = 2932
open$168 = 2964
name$169 = 3000
average$170 = 3044
n$171 = 3076
overlay$172 = 3112
func$173 = 3176
progress_saturated$174 = 3204
buf$175 = 3240
misc_flags$176 = 3300
n$177 = 3332
open_popup$178 = 3364
n$179 = 3396
palette_button_flags$180 = 3428
payload$181 = 3464
payload$182 = 3496
flags$183 = 3524
w$184 = 3556
s8_zero$185 = 3588
s8_one$186 = 3620
s8_fifty$187 = 3652
s8_min$188 = 3684
s8_max$189 = 3716
u8_zero$190 = 3748
u8_one$191 = 3780
u8_fifty$192 = 3812
u8_min$193 = 3844
u8_max$194 = 3876
s16_zero$195 = 3908
s16_one$196 = 3940
s16_fifty$197 = 3972
s16_min$198 = 4004
s16_max$199 = 4036
u16_zero$200 = 4068
u16_one$201 = 4100
u16_fifty$202 = 4132
u16_min$203 = 4164
u16_max$204 = 4196
s32_zero$205 = 4228
s32_one$206 = 4260
s32_fifty$207 = 4292
s32_min$208 = 4324
s32_max$209 = 4356
s32_hi_a$210 = 4388
s32_hi_b$211 = 4420
u32_zero$212 = 4452
u32_one$213 = 4484
u32_fifty$214 = 4516
u32_min$215 = 4548
u32_max$216 = 4580
u32_hi_a$217 = 4612
u32_hi_b$218 = 4644
s64_zero$219 = 4680
s64_one$220 = 4712
s64_fifty$221 = 4744
s64_min$222 = 4776
s64_max$223 = 4808
s64_hi_a$224 = 4840
s64_hi_b$225 = 4872
u64_zero$226 = 4904
u64_one$227 = 4936
u64_fifty$228 = 4968
u64_min$229 = 5000
u64_max$230 = 5032
u64_hi_a$231 = 5064
u64_hi_b$232 = 5096
f32_zero$233 = 5124
f32_one$234 = 5156
f32_lo_a$235 = 5188
f32_hi_a$236 = 5220
f64_zero$237 = 5256
f64_one$238 = 5288
f64_lo_a$239 = 5320
f64_hi_a$240 = 5352
drag_speed$241 = 5380
spacing$242 = 5412
i$243 = 5444
rows$244 = 5476
small_slider_size$245 = 5512
nx$246 = 5540
ny$247 = 5572
i$248 = 5604
n$249 = 5636
payload$250 = 5672
payload_n$251 = 5700
tmp$252 = 5736
n$253 = 5764
item$254 = 5800
n_next$255 = 5828
item_names$256 = 5872
ret$257 = 6020
items$258 = 6056
items$259 = 6120
hovered_delay_none$260 = 6180
hovered_delay_short$261 = 6212
hovered_delay_normal$262 = 6244
buf$263 = 6276
lines$264 = 6320
i$265 = 6404
$T266 = 7972
$T267 = 8004
$T268 = 8052
$T269 = 8100
$T270 = 8148
$T271 = 8196
$T272 = 8244
$T273 = 8292
$T274 = 8324
$T275 = 8356
$T276 = 8404
$T277 = 8452
$T278 = 8484
$T279 = 8516
$T280 = 8548
$T281 = 8580
$T282 = 8612
$T283 = 8644
$T284 = 8676
$T285 = 8708
$T286 = 8740
$T287 = 8772
$T288 = 8804
$T289 = 8836
$T290 = 8868
$T291 = 8900
$T292 = 8932
$T293 = 8964
$T294 = 8996
$T295 = 9028
$T296 = 9060
$T297 = 9092
$T298 = 9124
$T299 = 9156
$T300 = 9188
$T301 = 9220
$T302 = 9252
$T303 = 9284
$T304 = 9316
$T305 = 9348
$T306 = 9380
$T307 = 9412
$T308 = 9444
$T309 = 9476
$T310 = 9508
$T311 = 9540
$T312 = 9572
$T313 = 9604
$T314 = 9636
$T315 = 9668
$T316 = 9700
$T317 = 9732
$T318 = 9764
$T319 = 9796
$T320 = 9828
$T321 = 9860
$T322 = 9892
$T323 = 9940
$T324 = 9972
$T325 = 10004
$T326 = 10036
$T327 = 10068
$T328 = 10100
$T329 = 10132
$T330 = 10180
$T331 = 10228
$T332 = 10276
$T333 = 10324
$T334 = 10372
$T335 = 10420
$T336 = 10468
$T337 = 10516
$T338 = 10548
$T339 = 10580
$T340 = 10612
$T341 = 10644
$T342 = 10676
$T343 = 10708
$T344 = 10740
$T345 = 10772
$T346 = 10804
$T347 = 10836
$T348 = 10868
$T349 = 10900
$T350 = 10932
$T351 = 10964
$T352 = 10996
$T353 = 11028
$T354 = 11064
tv6279 = 11076
tv6275 = 11076
tv6266 = 11076
tv5446 = 11076
tv5340 = 11076
tv5307 = 11076
tv4882 = 11076
tv4750 = 11076
tv4741 = 11076
tv4732 = 11076
tv3328 = 11076
tv3127 = 11076
tv2950 = 11076
tv2890 = 11076
tv2865 = 11076
tv2376 = 11076
tv1967 = 11076
tv1932 = 11076
tv1923 = 11076
tv1668 = 11076
tv1642 = 11076
tv1549 = 11076
tv1485 = 11076
tv1366 = 11076
tv5602 = 11080
tv5344 = 11080
tv5311 = 11080
tv5173 = 11080
tv4681 = 11080
tv4603 = 11080
tv4361 = 11080
tv4351 = 11080
tv4341 = 11080
tv4331 = 11080
tv4321 = 11080
tv4279 = 11080
tv4269 = 11080
tv4259 = 11080
tv4249 = 11080
tv4239 = 11080
tv4229 = 11080
tv4219 = 11080
tv3918 = 11080
tv3904 = 11080
tv3890 = 11080
tv3876 = 11080
tv3830 = 11080
tv3816 = 11080
tv3802 = 11080
tv3788 = 11080
tv3710 = 11080
tv3439 = 11080
tv3410 = 11080
tv2953 = 11080
tv2889 = 11080
tv2829 = 11080
tv2379 = 11080
tv1056 = 11080
tv802 = 11080
tv536 = 11080
tv5348 = 11084
tv5315 = 11084
tv2960 = 11084
tv5352 = 11088
tv5319 = 11088
tv5178 = 11088
tv3922 = 11088
tv3908 = 11088
tv3894 = 11088
tv3880 = 11088
tv3834 = 11088
tv3820 = 11088
tv3806 = 11088
tv3792 = 11088
tv3778 = 11088
tv2957 = 11088
tv5356 = 11092
tv5323 = 11092
tv2964 = 11092
tv5360 = 11096
tv5327 = 11096
tv5183 = 11096
tv5364 = 11100
tv5331 = 11100
tv5368 = 11104
tv5188 = 11104
tv5372 = 11108
tv5376 = 11112
tv5193 = 11112
tv5198 = 11120
tv5201 = 11128
tv5205 = 11132
tv5208 = 11136
tv5211 = 11140
tv5214 = 11144
tv5217 = 11148
tv5220 = 11152
tv5223 = 11156
tv5227 = 11160
tv5231 = 11164
tv5235 = 11168
tv5239 = 11172
tv5243 = 11176
tv5247 = 11180
__$ArrayPad$ = 11184
?dtor$1@?0??ShowDemoWindowWidgets@@YAXXZ@4HA PROC	; `ShowDemoWindowWidgets'::`1'::dtor$1
  0002a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002f	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00034	55		 push	 rbp
  00035	57		 push	 rdi
  00036	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0003a	48 8d aa c0 00
	00 00		 lea	 rbp, QWORD PTR [rdx+192]
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00048	e8 00 00 00 00	 call	 _Init_thread_abort
  0004d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
?dtor$1@?0??ShowDemoWindowWidgets@@YAXXZ@4HA ENDP	; `ShowDemoWindowWidgets'::`1'::dtor$1
i$97 = 4
spacing$98 = 36
elems_names$99 = 72
elem_name$100 = 136
items$101 = 176
items$102 = 304
i$103 = 404
node_clicked$104 = 436
i$105 = 468
node_flags$106 = 500
is_selected$107 = 532
node_open$108 = 564
i$109 = 596
i$110 = 628
draw_list$111 = 664
n$112 = 692
pos$113 = 728
marker_min$114 = 760
marker_max$115 = 792
io$116 = 824
my_tex_id$117 = 856
my_tex_w$118 = 884
my_tex_h$119 = 916
pos$120 = 952
uv_min$121 = 984
uv_max$122 = 1016
tint_col$123 = 1048
border_col$124 = 1096
region_sz$125 = 1140
region_x$126 = 1172
region_y$127 = 1204
zoom$128 = 1236
uv0$129 = 1272
uv1$130 = 1304
i$131 = 1332
size$132 = 1368
uv0$133 = 1400
uv1$134 = 1432
bg_col$135 = 1464
tint_col$136 = 1512
items$137 = 1568
combo_preview_value$138 = 1704
n$139 = 1732
is_selected$140 = 1764
items$141 = 1808
n$142 = 1940
is_selected$143 = 1972
n$144 = 2004
is_selected$145 = 2036
n$146 = 2068
buf$147 = 2104
n$148 = 2164
buf$149 = 2200
i$150 = 2260
label$151 = 2296
i$152 = 2356
label$153 = 2392
time$154 = 2452
winning_state$155 = 2484
y$156 = 2516
x$157 = 2548
y$158 = 2580
x$159 = 2612
alignment$160 = 2648
name$161 = 2680
tab_bar_flags$162 = 2740
names$163 = 2776
n$164 = 2836
n$165 = 2868
i$166 = 2900
n$167 = 2932
open$168 = 2964
name$169 = 3000
average$170 = 3044
n$171 = 3076
overlay$172 = 3112
func$173 = 3176
progress_saturated$174 = 3204
buf$175 = 3240
misc_flags$176 = 3300
n$177 = 3332
open_popup$178 = 3364
n$179 = 3396
palette_button_flags$180 = 3428
payload$181 = 3464
payload$182 = 3496
flags$183 = 3524
w$184 = 3556
s8_zero$185 = 3588
s8_one$186 = 3620
s8_fifty$187 = 3652
s8_min$188 = 3684
s8_max$189 = 3716
u8_zero$190 = 3748
u8_one$191 = 3780
u8_fifty$192 = 3812
u8_min$193 = 3844
u8_max$194 = 3876
s16_zero$195 = 3908
s16_one$196 = 3940
s16_fifty$197 = 3972
s16_min$198 = 4004
s16_max$199 = 4036
u16_zero$200 = 4068
u16_one$201 = 4100
u16_fifty$202 = 4132
u16_min$203 = 4164
u16_max$204 = 4196
s32_zero$205 = 4228
s32_one$206 = 4260
s32_fifty$207 = 4292
s32_min$208 = 4324
s32_max$209 = 4356
s32_hi_a$210 = 4388
s32_hi_b$211 = 4420
u32_zero$212 = 4452
u32_one$213 = 4484
u32_fifty$214 = 4516
u32_min$215 = 4548
u32_max$216 = 4580
u32_hi_a$217 = 4612
u32_hi_b$218 = 4644
s64_zero$219 = 4680
s64_one$220 = 4712
s64_fifty$221 = 4744
s64_min$222 = 4776
s64_max$223 = 4808
s64_hi_a$224 = 4840
s64_hi_b$225 = 4872
u64_zero$226 = 4904
u64_one$227 = 4936
u64_fifty$228 = 4968
u64_min$229 = 5000
u64_max$230 = 5032
u64_hi_a$231 = 5064
u64_hi_b$232 = 5096
f32_zero$233 = 5124
f32_one$234 = 5156
f32_lo_a$235 = 5188
f32_hi_a$236 = 5220
f64_zero$237 = 5256
f64_one$238 = 5288
f64_lo_a$239 = 5320
f64_hi_a$240 = 5352
drag_speed$241 = 5380
spacing$242 = 5412
i$243 = 5444
rows$244 = 5476
small_slider_size$245 = 5512
nx$246 = 5540
ny$247 = 5572
i$248 = 5604
n$249 = 5636
payload$250 = 5672
payload_n$251 = 5700
tmp$252 = 5736
n$253 = 5764
item$254 = 5800
n_next$255 = 5828
item_names$256 = 5872
ret$257 = 6020
items$258 = 6056
items$259 = 6120
hovered_delay_none$260 = 6180
hovered_delay_short$261 = 6212
hovered_delay_normal$262 = 6244
buf$263 = 6276
lines$264 = 6320
i$265 = 6404
$T266 = 7972
$T267 = 8004
$T268 = 8052
$T269 = 8100
$T270 = 8148
$T271 = 8196
$T272 = 8244
$T273 = 8292
$T274 = 8324
$T275 = 8356
$T276 = 8404
$T277 = 8452
$T278 = 8484
$T279 = 8516
$T280 = 8548
$T281 = 8580
$T282 = 8612
$T283 = 8644
$T284 = 8676
$T285 = 8708
$T286 = 8740
$T287 = 8772
$T288 = 8804
$T289 = 8836
$T290 = 8868
$T291 = 8900
$T292 = 8932
$T293 = 8964
$T294 = 8996
$T295 = 9028
$T296 = 9060
$T297 = 9092
$T298 = 9124
$T299 = 9156
$T300 = 9188
$T301 = 9220
$T302 = 9252
$T303 = 9284
$T304 = 9316
$T305 = 9348
$T306 = 9380
$T307 = 9412
$T308 = 9444
$T309 = 9476
$T310 = 9508
$T311 = 9540
$T312 = 9572
$T313 = 9604
$T314 = 9636
$T315 = 9668
$T316 = 9700
$T317 = 9732
$T318 = 9764
$T319 = 9796
$T320 = 9828
$T321 = 9860
$T322 = 9892
$T323 = 9940
$T324 = 9972
$T325 = 10004
$T326 = 10036
$T327 = 10068
$T328 = 10100
$T329 = 10132
$T330 = 10180
$T331 = 10228
$T332 = 10276
$T333 = 10324
$T334 = 10372
$T335 = 10420
$T336 = 10468
$T337 = 10516
$T338 = 10548
$T339 = 10580
$T340 = 10612
$T341 = 10644
$T342 = 10676
$T343 = 10708
$T344 = 10740
$T345 = 10772
$T346 = 10804
$T347 = 10836
$T348 = 10868
$T349 = 10900
$T350 = 10932
$T351 = 10964
$T352 = 10996
$T353 = 11028
$T354 = 11064
tv6279 = 11076
tv6275 = 11076
tv6266 = 11076
tv5446 = 11076
tv5340 = 11076
tv5307 = 11076
tv4882 = 11076
tv4750 = 11076
tv4741 = 11076
tv4732 = 11076
tv3328 = 11076
tv3127 = 11076
tv2950 = 11076
tv2890 = 11076
tv2865 = 11076
tv2376 = 11076
tv1967 = 11076
tv1932 = 11076
tv1923 = 11076
tv1668 = 11076
tv1642 = 11076
tv1549 = 11076
tv1485 = 11076
tv1366 = 11076
tv5602 = 11080
tv5344 = 11080
tv5311 = 11080
tv5173 = 11080
tv4681 = 11080
tv4603 = 11080
tv4361 = 11080
tv4351 = 11080
tv4341 = 11080
tv4331 = 11080
tv4321 = 11080
tv4279 = 11080
tv4269 = 11080
tv4259 = 11080
tv4249 = 11080
tv4239 = 11080
tv4229 = 11080
tv4219 = 11080
tv3918 = 11080
tv3904 = 11080
tv3890 = 11080
tv3876 = 11080
tv3830 = 11080
tv3816 = 11080
tv3802 = 11080
tv3788 = 11080
tv3710 = 11080
tv3439 = 11080
tv3410 = 11080
tv2953 = 11080
tv2889 = 11080
tv2829 = 11080
tv2379 = 11080
tv1056 = 11080
tv802 = 11080
tv536 = 11080
tv5348 = 11084
tv5315 = 11084
tv2960 = 11084
tv5352 = 11088
tv5319 = 11088
tv5178 = 11088
tv3922 = 11088
tv3908 = 11088
tv3894 = 11088
tv3880 = 11088
tv3834 = 11088
tv3820 = 11088
tv3806 = 11088
tv3792 = 11088
tv3778 = 11088
tv2957 = 11088
tv5356 = 11092
tv5323 = 11092
tv2964 = 11092
tv5360 = 11096
tv5327 = 11096
tv5183 = 11096
tv5364 = 11100
tv5331 = 11100
tv5368 = 11104
tv5188 = 11104
tv5372 = 11108
tv5376 = 11112
tv5193 = 11112
tv5198 = 11120
tv5201 = 11128
tv5205 = 11132
tv5208 = 11136
tv5211 = 11140
tv5214 = 11144
tv5217 = 11148
tv5220 = 11152
tv5223 = 11156
tv5227 = 11160
tv5231 = 11164
tv5235 = 11168
tv5239 = 11172
tv5243 = 11176
tv5247 = 11180
__$ArrayPad$ = 11184
?dtor$2@?0??ShowDemoWindowWidgets@@YAXXZ@4HA PROC	; `ShowDemoWindowWidgets'::`1'::dtor$2
  00054	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00059	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0005e	55		 push	 rbp
  0005f	57		 push	 rdi
  00060	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00064	48 8d aa c0 00
	00 00		 lea	 rbp, QWORD PTR [rdx+192]
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS2@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00072	e8 00 00 00 00	 call	 _Init_thread_abort
  00077	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007b	5f		 pop	 rdi
  0007c	5d		 pop	 rbp
  0007d	c3		 ret	 0
?dtor$2@?0??ShowDemoWindowWidgets@@YAXXZ@4HA ENDP	; `ShowDemoWindowWidgets'::`1'::dtor$2
i$97 = 4
spacing$98 = 36
elems_names$99 = 72
elem_name$100 = 136
items$101 = 176
items$102 = 304
i$103 = 404
node_clicked$104 = 436
i$105 = 468
node_flags$106 = 500
is_selected$107 = 532
node_open$108 = 564
i$109 = 596
i$110 = 628
draw_list$111 = 664
n$112 = 692
pos$113 = 728
marker_min$114 = 760
marker_max$115 = 792
io$116 = 824
my_tex_id$117 = 856
my_tex_w$118 = 884
my_tex_h$119 = 916
pos$120 = 952
uv_min$121 = 984
uv_max$122 = 1016
tint_col$123 = 1048
border_col$124 = 1096
region_sz$125 = 1140
region_x$126 = 1172
region_y$127 = 1204
zoom$128 = 1236
uv0$129 = 1272
uv1$130 = 1304
i$131 = 1332
size$132 = 1368
uv0$133 = 1400
uv1$134 = 1432
bg_col$135 = 1464
tint_col$136 = 1512
items$137 = 1568
combo_preview_value$138 = 1704
n$139 = 1732
is_selected$140 = 1764
items$141 = 1808
n$142 = 1940
is_selected$143 = 1972
n$144 = 2004
is_selected$145 = 2036
n$146 = 2068
buf$147 = 2104
n$148 = 2164
buf$149 = 2200
i$150 = 2260
label$151 = 2296
i$152 = 2356
label$153 = 2392
time$154 = 2452
winning_state$155 = 2484
y$156 = 2516
x$157 = 2548
y$158 = 2580
x$159 = 2612
alignment$160 = 2648
name$161 = 2680
tab_bar_flags$162 = 2740
names$163 = 2776
n$164 = 2836
n$165 = 2868
i$166 = 2900
n$167 = 2932
open$168 = 2964
name$169 = 3000
average$170 = 3044
n$171 = 3076
overlay$172 = 3112
func$173 = 3176
progress_saturated$174 = 3204
buf$175 = 3240
misc_flags$176 = 3300
n$177 = 3332
open_popup$178 = 3364
n$179 = 3396
palette_button_flags$180 = 3428
payload$181 = 3464
payload$182 = 3496
flags$183 = 3524
w$184 = 3556
s8_zero$185 = 3588
s8_one$186 = 3620
s8_fifty$187 = 3652
s8_min$188 = 3684
s8_max$189 = 3716
u8_zero$190 = 3748
u8_one$191 = 3780
u8_fifty$192 = 3812
u8_min$193 = 3844
u8_max$194 = 3876
s16_zero$195 = 3908
s16_one$196 = 3940
s16_fifty$197 = 3972
s16_min$198 = 4004
s16_max$199 = 4036
u16_zero$200 = 4068
u16_one$201 = 4100
u16_fifty$202 = 4132
u16_min$203 = 4164
u16_max$204 = 4196
s32_zero$205 = 4228
s32_one$206 = 4260
s32_fifty$207 = 4292
s32_min$208 = 4324
s32_max$209 = 4356
s32_hi_a$210 = 4388
s32_hi_b$211 = 4420
u32_zero$212 = 4452
u32_one$213 = 4484
u32_fifty$214 = 4516
u32_min$215 = 4548
u32_max$216 = 4580
u32_hi_a$217 = 4612
u32_hi_b$218 = 4644
s64_zero$219 = 4680
s64_one$220 = 4712
s64_fifty$221 = 4744
s64_min$222 = 4776
s64_max$223 = 4808
s64_hi_a$224 = 4840
s64_hi_b$225 = 4872
u64_zero$226 = 4904
u64_one$227 = 4936
u64_fifty$228 = 4968
u64_min$229 = 5000
u64_max$230 = 5032
u64_hi_a$231 = 5064
u64_hi_b$232 = 5096
f32_zero$233 = 5124
f32_one$234 = 5156
f32_lo_a$235 = 5188
f32_hi_a$236 = 5220
f64_zero$237 = 5256
f64_one$238 = 5288
f64_lo_a$239 = 5320
f64_hi_a$240 = 5352
drag_speed$241 = 5380
spacing$242 = 5412
i$243 = 5444
rows$244 = 5476
small_slider_size$245 = 5512
nx$246 = 5540
ny$247 = 5572
i$248 = 5604
n$249 = 5636
payload$250 = 5672
payload_n$251 = 5700
tmp$252 = 5736
n$253 = 5764
item$254 = 5800
n_next$255 = 5828
item_names$256 = 5872
ret$257 = 6020
items$258 = 6056
items$259 = 6120
hovered_delay_none$260 = 6180
hovered_delay_short$261 = 6212
hovered_delay_normal$262 = 6244
buf$263 = 6276
lines$264 = 6320
i$265 = 6404
$T266 = 7972
$T267 = 8004
$T268 = 8052
$T269 = 8100
$T270 = 8148
$T271 = 8196
$T272 = 8244
$T273 = 8292
$T274 = 8324
$T275 = 8356
$T276 = 8404
$T277 = 8452
$T278 = 8484
$T279 = 8516
$T280 = 8548
$T281 = 8580
$T282 = 8612
$T283 = 8644
$T284 = 8676
$T285 = 8708
$T286 = 8740
$T287 = 8772
$T288 = 8804
$T289 = 8836
$T290 = 8868
$T291 = 8900
$T292 = 8932
$T293 = 8964
$T294 = 8996
$T295 = 9028
$T296 = 9060
$T297 = 9092
$T298 = 9124
$T299 = 9156
$T300 = 9188
$T301 = 9220
$T302 = 9252
$T303 = 9284
$T304 = 9316
$T305 = 9348
$T306 = 9380
$T307 = 9412
$T308 = 9444
$T309 = 9476
$T310 = 9508
$T311 = 9540
$T312 = 9572
$T313 = 9604
$T314 = 9636
$T315 = 9668
$T316 = 9700
$T317 = 9732
$T318 = 9764
$T319 = 9796
$T320 = 9828
$T321 = 9860
$T322 = 9892
$T323 = 9940
$T324 = 9972
$T325 = 10004
$T326 = 10036
$T327 = 10068
$T328 = 10100
$T329 = 10132
$T330 = 10180
$T331 = 10228
$T332 = 10276
$T333 = 10324
$T334 = 10372
$T335 = 10420
$T336 = 10468
$T337 = 10516
$T338 = 10548
$T339 = 10580
$T340 = 10612
$T341 = 10644
$T342 = 10676
$T343 = 10708
$T344 = 10740
$T345 = 10772
$T346 = 10804
$T347 = 10836
$T348 = 10868
$T349 = 10900
$T350 = 10932
$T351 = 10964
$T352 = 10996
$T353 = 11028
$T354 = 11064
tv6279 = 11076
tv6275 = 11076
tv6266 = 11076
tv5446 = 11076
tv5340 = 11076
tv5307 = 11076
tv4882 = 11076
tv4750 = 11076
tv4741 = 11076
tv4732 = 11076
tv3328 = 11076
tv3127 = 11076
tv2950 = 11076
tv2890 = 11076
tv2865 = 11076
tv2376 = 11076
tv1967 = 11076
tv1932 = 11076
tv1923 = 11076
tv1668 = 11076
tv1642 = 11076
tv1549 = 11076
tv1485 = 11076
tv1366 = 11076
tv5602 = 11080
tv5344 = 11080
tv5311 = 11080
tv5173 = 11080
tv4681 = 11080
tv4603 = 11080
tv4361 = 11080
tv4351 = 11080
tv4341 = 11080
tv4331 = 11080
tv4321 = 11080
tv4279 = 11080
tv4269 = 11080
tv4259 = 11080
tv4249 = 11080
tv4239 = 11080
tv4229 = 11080
tv4219 = 11080
tv3918 = 11080
tv3904 = 11080
tv3890 = 11080
tv3876 = 11080
tv3830 = 11080
tv3816 = 11080
tv3802 = 11080
tv3788 = 11080
tv3710 = 11080
tv3439 = 11080
tv3410 = 11080
tv2953 = 11080
tv2889 = 11080
tv2829 = 11080
tv2379 = 11080
tv1056 = 11080
tv802 = 11080
tv536 = 11080
tv5348 = 11084
tv5315 = 11084
tv2960 = 11084
tv5352 = 11088
tv5319 = 11088
tv5178 = 11088
tv3922 = 11088
tv3908 = 11088
tv3894 = 11088
tv3880 = 11088
tv3834 = 11088
tv3820 = 11088
tv3806 = 11088
tv3792 = 11088
tv3778 = 11088
tv2957 = 11088
tv5356 = 11092
tv5323 = 11092
tv2964 = 11092
tv5360 = 11096
tv5327 = 11096
tv5183 = 11096
tv5364 = 11100
tv5331 = 11100
tv5368 = 11104
tv5188 = 11104
tv5372 = 11108
tv5376 = 11112
tv5193 = 11112
tv5198 = 11120
tv5201 = 11128
tv5205 = 11132
tv5208 = 11136
tv5211 = 11140
tv5214 = 11144
tv5217 = 11148
tv5220 = 11152
tv5223 = 11156
tv5227 = 11160
tv5231 = 11164
tv5235 = 11168
tv5239 = 11172
tv5243 = 11176
tv5247 = 11180
__$ArrayPad$ = 11184
?dtor$3@?0??ShowDemoWindowWidgets@@YAXXZ@4HA PROC	; `ShowDemoWindowWidgets'::`1'::dtor$3
  0007e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00083	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00088	55		 push	 rbp
  00089	57		 push	 rdi
  0008a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0008e	48 8d aa c0 00
	00 00		 lea	 rbp, QWORD PTR [rdx+192]
  00095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS4@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0009c	e8 00 00 00 00	 call	 _Init_thread_abort
  000a1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000a5	5f		 pop	 rdi
  000a6	5d		 pop	 rbp
  000a7	c3		 ret	 0
?dtor$3@?0??ShowDemoWindowWidgets@@YAXXZ@4HA ENDP	; `ShowDemoWindowWidgets'::`1'::dtor$3
i$97 = 4
spacing$98 = 36
elems_names$99 = 72
elem_name$100 = 136
items$101 = 176
items$102 = 304
i$103 = 404
node_clicked$104 = 436
i$105 = 468
node_flags$106 = 500
is_selected$107 = 532
node_open$108 = 564
i$109 = 596
i$110 = 628
draw_list$111 = 664
n$112 = 692
pos$113 = 728
marker_min$114 = 760
marker_max$115 = 792
io$116 = 824
my_tex_id$117 = 856
my_tex_w$118 = 884
my_tex_h$119 = 916
pos$120 = 952
uv_min$121 = 984
uv_max$122 = 1016
tint_col$123 = 1048
border_col$124 = 1096
region_sz$125 = 1140
region_x$126 = 1172
region_y$127 = 1204
zoom$128 = 1236
uv0$129 = 1272
uv1$130 = 1304
i$131 = 1332
size$132 = 1368
uv0$133 = 1400
uv1$134 = 1432
bg_col$135 = 1464
tint_col$136 = 1512
items$137 = 1568
combo_preview_value$138 = 1704
n$139 = 1732
is_selected$140 = 1764
items$141 = 1808
n$142 = 1940
is_selected$143 = 1972
n$144 = 2004
is_selected$145 = 2036
n$146 = 2068
buf$147 = 2104
n$148 = 2164
buf$149 = 2200
i$150 = 2260
label$151 = 2296
i$152 = 2356
label$153 = 2392
time$154 = 2452
winning_state$155 = 2484
y$156 = 2516
x$157 = 2548
y$158 = 2580
x$159 = 2612
alignment$160 = 2648
name$161 = 2680
tab_bar_flags$162 = 2740
names$163 = 2776
n$164 = 2836
n$165 = 2868
i$166 = 2900
n$167 = 2932
open$168 = 2964
name$169 = 3000
average$170 = 3044
n$171 = 3076
overlay$172 = 3112
func$173 = 3176
progress_saturated$174 = 3204
buf$175 = 3240
misc_flags$176 = 3300
n$177 = 3332
open_popup$178 = 3364
n$179 = 3396
palette_button_flags$180 = 3428
payload$181 = 3464
payload$182 = 3496
flags$183 = 3524
w$184 = 3556
s8_zero$185 = 3588
s8_one$186 = 3620
s8_fifty$187 = 3652
s8_min$188 = 3684
s8_max$189 = 3716
u8_zero$190 = 3748
u8_one$191 = 3780
u8_fifty$192 = 3812
u8_min$193 = 3844
u8_max$194 = 3876
s16_zero$195 = 3908
s16_one$196 = 3940
s16_fifty$197 = 3972
s16_min$198 = 4004
s16_max$199 = 4036
u16_zero$200 = 4068
u16_one$201 = 4100
u16_fifty$202 = 4132
u16_min$203 = 4164
u16_max$204 = 4196
s32_zero$205 = 4228
s32_one$206 = 4260
s32_fifty$207 = 4292
s32_min$208 = 4324
s32_max$209 = 4356
s32_hi_a$210 = 4388
s32_hi_b$211 = 4420
u32_zero$212 = 4452
u32_one$213 = 4484
u32_fifty$214 = 4516
u32_min$215 = 4548
u32_max$216 = 4580
u32_hi_a$217 = 4612
u32_hi_b$218 = 4644
s64_zero$219 = 4680
s64_one$220 = 4712
s64_fifty$221 = 4744
s64_min$222 = 4776
s64_max$223 = 4808
s64_hi_a$224 = 4840
s64_hi_b$225 = 4872
u64_zero$226 = 4904
u64_one$227 = 4936
u64_fifty$228 = 4968
u64_min$229 = 5000
u64_max$230 = 5032
u64_hi_a$231 = 5064
u64_hi_b$232 = 5096
f32_zero$233 = 5124
f32_one$234 = 5156
f32_lo_a$235 = 5188
f32_hi_a$236 = 5220
f64_zero$237 = 5256
f64_one$238 = 5288
f64_lo_a$239 = 5320
f64_hi_a$240 = 5352
drag_speed$241 = 5380
spacing$242 = 5412
i$243 = 5444
rows$244 = 5476
small_slider_size$245 = 5512
nx$246 = 5540
ny$247 = 5572
i$248 = 5604
n$249 = 5636
payload$250 = 5672
payload_n$251 = 5700
tmp$252 = 5736
n$253 = 5764
item$254 = 5800
n_next$255 = 5828
item_names$256 = 5872
ret$257 = 6020
items$258 = 6056
items$259 = 6120
hovered_delay_none$260 = 6180
hovered_delay_short$261 = 6212
hovered_delay_normal$262 = 6244
buf$263 = 6276
lines$264 = 6320
i$265 = 6404
$T266 = 7972
$T267 = 8004
$T268 = 8052
$T269 = 8100
$T270 = 8148
$T271 = 8196
$T272 = 8244
$T273 = 8292
$T274 = 8324
$T275 = 8356
$T276 = 8404
$T277 = 8452
$T278 = 8484
$T279 = 8516
$T280 = 8548
$T281 = 8580
$T282 = 8612
$T283 = 8644
$T284 = 8676
$T285 = 8708
$T286 = 8740
$T287 = 8772
$T288 = 8804
$T289 = 8836
$T290 = 8868
$T291 = 8900
$T292 = 8932
$T293 = 8964
$T294 = 8996
$T295 = 9028
$T296 = 9060
$T297 = 9092
$T298 = 9124
$T299 = 9156
$T300 = 9188
$T301 = 9220
$T302 = 9252
$T303 = 9284
$T304 = 9316
$T305 = 9348
$T306 = 9380
$T307 = 9412
$T308 = 9444
$T309 = 9476
$T310 = 9508
$T311 = 9540
$T312 = 9572
$T313 = 9604
$T314 = 9636
$T315 = 9668
$T316 = 9700
$T317 = 9732
$T318 = 9764
$T319 = 9796
$T320 = 9828
$T321 = 9860
$T322 = 9892
$T323 = 9940
$T324 = 9972
$T325 = 10004
$T326 = 10036
$T327 = 10068
$T328 = 10100
$T329 = 10132
$T330 = 10180
$T331 = 10228
$T332 = 10276
$T333 = 10324
$T334 = 10372
$T335 = 10420
$T336 = 10468
$T337 = 10516
$T338 = 10548
$T339 = 10580
$T340 = 10612
$T341 = 10644
$T342 = 10676
$T343 = 10708
$T344 = 10740
$T345 = 10772
$T346 = 10804
$T347 = 10836
$T348 = 10868
$T349 = 10900
$T350 = 10932
$T351 = 10964
$T352 = 10996
$T353 = 11028
$T354 = 11064
tv6279 = 11076
tv6275 = 11076
tv6266 = 11076
tv5446 = 11076
tv5340 = 11076
tv5307 = 11076
tv4882 = 11076
tv4750 = 11076
tv4741 = 11076
tv4732 = 11076
tv3328 = 11076
tv3127 = 11076
tv2950 = 11076
tv2890 = 11076
tv2865 = 11076
tv2376 = 11076
tv1967 = 11076
tv1932 = 11076
tv1923 = 11076
tv1668 = 11076
tv1642 = 11076
tv1549 = 11076
tv1485 = 11076
tv1366 = 11076
tv5602 = 11080
tv5344 = 11080
tv5311 = 11080
tv5173 = 11080
tv4681 = 11080
tv4603 = 11080
tv4361 = 11080
tv4351 = 11080
tv4341 = 11080
tv4331 = 11080
tv4321 = 11080
tv4279 = 11080
tv4269 = 11080
tv4259 = 11080
tv4249 = 11080
tv4239 = 11080
tv4229 = 11080
tv4219 = 11080
tv3918 = 11080
tv3904 = 11080
tv3890 = 11080
tv3876 = 11080
tv3830 = 11080
tv3816 = 11080
tv3802 = 11080
tv3788 = 11080
tv3710 = 11080
tv3439 = 11080
tv3410 = 11080
tv2953 = 11080
tv2889 = 11080
tv2829 = 11080
tv2379 = 11080
tv1056 = 11080
tv802 = 11080
tv536 = 11080
tv5348 = 11084
tv5315 = 11084
tv2960 = 11084
tv5352 = 11088
tv5319 = 11088
tv5178 = 11088
tv3922 = 11088
tv3908 = 11088
tv3894 = 11088
tv3880 = 11088
tv3834 = 11088
tv3820 = 11088
tv3806 = 11088
tv3792 = 11088
tv3778 = 11088
tv2957 = 11088
tv5356 = 11092
tv5323 = 11092
tv2964 = 11092
tv5360 = 11096
tv5327 = 11096
tv5183 = 11096
tv5364 = 11100
tv5331 = 11100
tv5368 = 11104
tv5188 = 11104
tv5372 = 11108
tv5376 = 11112
tv5193 = 11112
tv5198 = 11120
tv5201 = 11128
tv5205 = 11132
tv5208 = 11136
tv5211 = 11140
tv5214 = 11144
tv5217 = 11148
tv5220 = 11152
tv5223 = 11156
tv5227 = 11160
tv5231 = 11164
tv5235 = 11168
tv5239 = 11172
tv5243 = 11176
tv5247 = 11180
__$ArrayPad$ = 11184
?dtor$4@?0??ShowDemoWindowWidgets@@YAXXZ@4HA PROC	; `ShowDemoWindowWidgets'::`1'::dtor$4
  000a8	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000ad	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000b2	55		 push	 rbp
  000b3	57		 push	 rdi
  000b4	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000b8	48 8d aa c0 00
	00 00		 lea	 rbp, QWORD PTR [rdx+192]
  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS5@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  000c6	e8 00 00 00 00	 call	 _Init_thread_abort
  000cb	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000cf	5f		 pop	 rdi
  000d0	5d		 pop	 rbp
  000d1	c3		 ret	 0
?dtor$4@?0??ShowDemoWindowWidgets@@YAXXZ@4HA ENDP	; `ShowDemoWindowWidgets'::`1'::dtor$4
i$97 = 4
spacing$98 = 36
elems_names$99 = 72
elem_name$100 = 136
items$101 = 176
items$102 = 304
i$103 = 404
node_clicked$104 = 436
i$105 = 468
node_flags$106 = 500
is_selected$107 = 532
node_open$108 = 564
i$109 = 596
i$110 = 628
draw_list$111 = 664
n$112 = 692
pos$113 = 728
marker_min$114 = 760
marker_max$115 = 792
io$116 = 824
my_tex_id$117 = 856
my_tex_w$118 = 884
my_tex_h$119 = 916
pos$120 = 952
uv_min$121 = 984
uv_max$122 = 1016
tint_col$123 = 1048
border_col$124 = 1096
region_sz$125 = 1140
region_x$126 = 1172
region_y$127 = 1204
zoom$128 = 1236
uv0$129 = 1272
uv1$130 = 1304
i$131 = 1332
size$132 = 1368
uv0$133 = 1400
uv1$134 = 1432
bg_col$135 = 1464
tint_col$136 = 1512
items$137 = 1568
combo_preview_value$138 = 1704
n$139 = 1732
is_selected$140 = 1764
items$141 = 1808
n$142 = 1940
is_selected$143 = 1972
n$144 = 2004
is_selected$145 = 2036
n$146 = 2068
buf$147 = 2104
n$148 = 2164
buf$149 = 2200
i$150 = 2260
label$151 = 2296
i$152 = 2356
label$153 = 2392
time$154 = 2452
winning_state$155 = 2484
y$156 = 2516
x$157 = 2548
y$158 = 2580
x$159 = 2612
alignment$160 = 2648
name$161 = 2680
tab_bar_flags$162 = 2740
names$163 = 2776
n$164 = 2836
n$165 = 2868
i$166 = 2900
n$167 = 2932
open$168 = 2964
name$169 = 3000
average$170 = 3044
n$171 = 3076
overlay$172 = 3112
func$173 = 3176
progress_saturated$174 = 3204
buf$175 = 3240
misc_flags$176 = 3300
n$177 = 3332
open_popup$178 = 3364
n$179 = 3396
palette_button_flags$180 = 3428
payload$181 = 3464
payload$182 = 3496
flags$183 = 3524
w$184 = 3556
s8_zero$185 = 3588
s8_one$186 = 3620
s8_fifty$187 = 3652
s8_min$188 = 3684
s8_max$189 = 3716
u8_zero$190 = 3748
u8_one$191 = 3780
u8_fifty$192 = 3812
u8_min$193 = 3844
u8_max$194 = 3876
s16_zero$195 = 3908
s16_one$196 = 3940
s16_fifty$197 = 3972
s16_min$198 = 4004
s16_max$199 = 4036
u16_zero$200 = 4068
u16_one$201 = 4100
u16_fifty$202 = 4132
u16_min$203 = 4164
u16_max$204 = 4196
s32_zero$205 = 4228
s32_one$206 = 4260
s32_fifty$207 = 4292
s32_min$208 = 4324
s32_max$209 = 4356
s32_hi_a$210 = 4388
s32_hi_b$211 = 4420
u32_zero$212 = 4452
u32_one$213 = 4484
u32_fifty$214 = 4516
u32_min$215 = 4548
u32_max$216 = 4580
u32_hi_a$217 = 4612
u32_hi_b$218 = 4644
s64_zero$219 = 4680
s64_one$220 = 4712
s64_fifty$221 = 4744
s64_min$222 = 4776
s64_max$223 = 4808
s64_hi_a$224 = 4840
s64_hi_b$225 = 4872
u64_zero$226 = 4904
u64_one$227 = 4936
u64_fifty$228 = 4968
u64_min$229 = 5000
u64_max$230 = 5032
u64_hi_a$231 = 5064
u64_hi_b$232 = 5096
f32_zero$233 = 5124
f32_one$234 = 5156
f32_lo_a$235 = 5188
f32_hi_a$236 = 5220
f64_zero$237 = 5256
f64_one$238 = 5288
f64_lo_a$239 = 5320
f64_hi_a$240 = 5352
drag_speed$241 = 5380
spacing$242 = 5412
i$243 = 5444
rows$244 = 5476
small_slider_size$245 = 5512
nx$246 = 5540
ny$247 = 5572
i$248 = 5604
n$249 = 5636
payload$250 = 5672
payload_n$251 = 5700
tmp$252 = 5736
n$253 = 5764
item$254 = 5800
n_next$255 = 5828
item_names$256 = 5872
ret$257 = 6020
items$258 = 6056
items$259 = 6120
hovered_delay_none$260 = 6180
hovered_delay_short$261 = 6212
hovered_delay_normal$262 = 6244
buf$263 = 6276
lines$264 = 6320
i$265 = 6404
$T266 = 7972
$T267 = 8004
$T268 = 8052
$T269 = 8100
$T270 = 8148
$T271 = 8196
$T272 = 8244
$T273 = 8292
$T274 = 8324
$T275 = 8356
$T276 = 8404
$T277 = 8452
$T278 = 8484
$T279 = 8516
$T280 = 8548
$T281 = 8580
$T282 = 8612
$T283 = 8644
$T284 = 8676
$T285 = 8708
$T286 = 8740
$T287 = 8772
$T288 = 8804
$T289 = 8836
$T290 = 8868
$T291 = 8900
$T292 = 8932
$T293 = 8964
$T294 = 8996
$T295 = 9028
$T296 = 9060
$T297 = 9092
$T298 = 9124
$T299 = 9156
$T300 = 9188
$T301 = 9220
$T302 = 9252
$T303 = 9284
$T304 = 9316
$T305 = 9348
$T306 = 9380
$T307 = 9412
$T308 = 9444
$T309 = 9476
$T310 = 9508
$T311 = 9540
$T312 = 9572
$T313 = 9604
$T314 = 9636
$T315 = 9668
$T316 = 9700
$T317 = 9732
$T318 = 9764
$T319 = 9796
$T320 = 9828
$T321 = 9860
$T322 = 9892
$T323 = 9940
$T324 = 9972
$T325 = 10004
$T326 = 10036
$T327 = 10068
$T328 = 10100
$T329 = 10132
$T330 = 10180
$T331 = 10228
$T332 = 10276
$T333 = 10324
$T334 = 10372
$T335 = 10420
$T336 = 10468
$T337 = 10516
$T338 = 10548
$T339 = 10580
$T340 = 10612
$T341 = 10644
$T342 = 10676
$T343 = 10708
$T344 = 10740
$T345 = 10772
$T346 = 10804
$T347 = 10836
$T348 = 10868
$T349 = 10900
$T350 = 10932
$T351 = 10964
$T352 = 10996
$T353 = 11028
$T354 = 11064
tv6279 = 11076
tv6275 = 11076
tv6266 = 11076
tv5446 = 11076
tv5340 = 11076
tv5307 = 11076
tv4882 = 11076
tv4750 = 11076
tv4741 = 11076
tv4732 = 11076
tv3328 = 11076
tv3127 = 11076
tv2950 = 11076
tv2890 = 11076
tv2865 = 11076
tv2376 = 11076
tv1967 = 11076
tv1932 = 11076
tv1923 = 11076
tv1668 = 11076
tv1642 = 11076
tv1549 = 11076
tv1485 = 11076
tv1366 = 11076
tv5602 = 11080
tv5344 = 11080
tv5311 = 11080
tv5173 = 11080
tv4681 = 11080
tv4603 = 11080
tv4361 = 11080
tv4351 = 11080
tv4341 = 11080
tv4331 = 11080
tv4321 = 11080
tv4279 = 11080
tv4269 = 11080
tv4259 = 11080
tv4249 = 11080
tv4239 = 11080
tv4229 = 11080
tv4219 = 11080
tv3918 = 11080
tv3904 = 11080
tv3890 = 11080
tv3876 = 11080
tv3830 = 11080
tv3816 = 11080
tv3802 = 11080
tv3788 = 11080
tv3710 = 11080
tv3439 = 11080
tv3410 = 11080
tv2953 = 11080
tv2889 = 11080
tv2829 = 11080
tv2379 = 11080
tv1056 = 11080
tv802 = 11080
tv536 = 11080
tv5348 = 11084
tv5315 = 11084
tv2960 = 11084
tv5352 = 11088
tv5319 = 11088
tv5178 = 11088
tv3922 = 11088
tv3908 = 11088
tv3894 = 11088
tv3880 = 11088
tv3834 = 11088
tv3820 = 11088
tv3806 = 11088
tv3792 = 11088
tv3778 = 11088
tv2957 = 11088
tv5356 = 11092
tv5323 = 11092
tv2964 = 11092
tv5360 = 11096
tv5327 = 11096
tv5183 = 11096
tv5364 = 11100
tv5331 = 11100
tv5368 = 11104
tv5188 = 11104
tv5372 = 11108
tv5376 = 11112
tv5193 = 11112
tv5198 = 11120
tv5201 = 11128
tv5205 = 11132
tv5208 = 11136
tv5211 = 11140
tv5214 = 11144
tv5217 = 11148
tv5220 = 11152
tv5223 = 11156
tv5227 = 11160
tv5231 = 11164
tv5235 = 11168
tv5239 = 11172
tv5243 = 11176
tv5247 = 11180
__$ArrayPad$ = 11184
?dtor$5@?0??ShowDemoWindowWidgets@@YAXXZ@4HA PROC	; `ShowDemoWindowWidgets'::`1'::dtor$5
  000d2	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000d7	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000dc	55		 push	 rbp
  000dd	57		 push	 rdi
  000de	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000e2	48 8d aa c0 00
	00 00		 lea	 rbp, QWORD PTR [rdx+192]
  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS6@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  000f0	e8 00 00 00 00	 call	 _Init_thread_abort
  000f5	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000f9	5f		 pop	 rdi
  000fa	5d		 pop	 rbp
  000fb	c3		 ret	 0
?dtor$5@?0??ShowDemoWindowWidgets@@YAXXZ@4HA ENDP	; `ShowDemoWindowWidgets'::`1'::dtor$5
i$97 = 4
spacing$98 = 36
elems_names$99 = 72
elem_name$100 = 136
items$101 = 176
items$102 = 304
i$103 = 404
node_clicked$104 = 436
i$105 = 468
node_flags$106 = 500
is_selected$107 = 532
node_open$108 = 564
i$109 = 596
i$110 = 628
draw_list$111 = 664
n$112 = 692
pos$113 = 728
marker_min$114 = 760
marker_max$115 = 792
io$116 = 824
my_tex_id$117 = 856
my_tex_w$118 = 884
my_tex_h$119 = 916
pos$120 = 952
uv_min$121 = 984
uv_max$122 = 1016
tint_col$123 = 1048
border_col$124 = 1096
region_sz$125 = 1140
region_x$126 = 1172
region_y$127 = 1204
zoom$128 = 1236
uv0$129 = 1272
uv1$130 = 1304
i$131 = 1332
size$132 = 1368
uv0$133 = 1400
uv1$134 = 1432
bg_col$135 = 1464
tint_col$136 = 1512
items$137 = 1568
combo_preview_value$138 = 1704
n$139 = 1732
is_selected$140 = 1764
items$141 = 1808
n$142 = 1940
is_selected$143 = 1972
n$144 = 2004
is_selected$145 = 2036
n$146 = 2068
buf$147 = 2104
n$148 = 2164
buf$149 = 2200
i$150 = 2260
label$151 = 2296
i$152 = 2356
label$153 = 2392
time$154 = 2452
winning_state$155 = 2484
y$156 = 2516
x$157 = 2548
y$158 = 2580
x$159 = 2612
alignment$160 = 2648
name$161 = 2680
tab_bar_flags$162 = 2740
names$163 = 2776
n$164 = 2836
n$165 = 2868
i$166 = 2900
n$167 = 2932
open$168 = 2964
name$169 = 3000
average$170 = 3044
n$171 = 3076
overlay$172 = 3112
func$173 = 3176
progress_saturated$174 = 3204
buf$175 = 3240
misc_flags$176 = 3300
n$177 = 3332
open_popup$178 = 3364
n$179 = 3396
palette_button_flags$180 = 3428
payload$181 = 3464
payload$182 = 3496
flags$183 = 3524
w$184 = 3556
s8_zero$185 = 3588
s8_one$186 = 3620
s8_fifty$187 = 3652
s8_min$188 = 3684
s8_max$189 = 3716
u8_zero$190 = 3748
u8_one$191 = 3780
u8_fifty$192 = 3812
u8_min$193 = 3844
u8_max$194 = 3876
s16_zero$195 = 3908
s16_one$196 = 3940
s16_fifty$197 = 3972
s16_min$198 = 4004
s16_max$199 = 4036
u16_zero$200 = 4068
u16_one$201 = 4100
u16_fifty$202 = 4132
u16_min$203 = 4164
u16_max$204 = 4196
s32_zero$205 = 4228
s32_one$206 = 4260
s32_fifty$207 = 4292
s32_min$208 = 4324
s32_max$209 = 4356
s32_hi_a$210 = 4388
s32_hi_b$211 = 4420
u32_zero$212 = 4452
u32_one$213 = 4484
u32_fifty$214 = 4516
u32_min$215 = 4548
u32_max$216 = 4580
u32_hi_a$217 = 4612
u32_hi_b$218 = 4644
s64_zero$219 = 4680
s64_one$220 = 4712
s64_fifty$221 = 4744
s64_min$222 = 4776
s64_max$223 = 4808
s64_hi_a$224 = 4840
s64_hi_b$225 = 4872
u64_zero$226 = 4904
u64_one$227 = 4936
u64_fifty$228 = 4968
u64_min$229 = 5000
u64_max$230 = 5032
u64_hi_a$231 = 5064
u64_hi_b$232 = 5096
f32_zero$233 = 5124
f32_one$234 = 5156
f32_lo_a$235 = 5188
f32_hi_a$236 = 5220
f64_zero$237 = 5256
f64_one$238 = 5288
f64_lo_a$239 = 5320
f64_hi_a$240 = 5352
drag_speed$241 = 5380
spacing$242 = 5412
i$243 = 5444
rows$244 = 5476
small_slider_size$245 = 5512
nx$246 = 5540
ny$247 = 5572
i$248 = 5604
n$249 = 5636
payload$250 = 5672
payload_n$251 = 5700
tmp$252 = 5736
n$253 = 5764
item$254 = 5800
n_next$255 = 5828
item_names$256 = 5872
ret$257 = 6020
items$258 = 6056
items$259 = 6120
hovered_delay_none$260 = 6180
hovered_delay_short$261 = 6212
hovered_delay_normal$262 = 6244
buf$263 = 6276
lines$264 = 6320
i$265 = 6404
$T266 = 7972
$T267 = 8004
$T268 = 8052
$T269 = 8100
$T270 = 8148
$T271 = 8196
$T272 = 8244
$T273 = 8292
$T274 = 8324
$T275 = 8356
$T276 = 8404
$T277 = 8452
$T278 = 8484
$T279 = 8516
$T280 = 8548
$T281 = 8580
$T282 = 8612
$T283 = 8644
$T284 = 8676
$T285 = 8708
$T286 = 8740
$T287 = 8772
$T288 = 8804
$T289 = 8836
$T290 = 8868
$T291 = 8900
$T292 = 8932
$T293 = 8964
$T294 = 8996
$T295 = 9028
$T296 = 9060
$T297 = 9092
$T298 = 9124
$T299 = 9156
$T300 = 9188
$T301 = 9220
$T302 = 9252
$T303 = 9284
$T304 = 9316
$T305 = 9348
$T306 = 9380
$T307 = 9412
$T308 = 9444
$T309 = 9476
$T310 = 9508
$T311 = 9540
$T312 = 9572
$T313 = 9604
$T314 = 9636
$T315 = 9668
$T316 = 9700
$T317 = 9732
$T318 = 9764
$T319 = 9796
$T320 = 9828
$T321 = 9860
$T322 = 9892
$T323 = 9940
$T324 = 9972
$T325 = 10004
$T326 = 10036
$T327 = 10068
$T328 = 10100
$T329 = 10132
$T330 = 10180
$T331 = 10228
$T332 = 10276
$T333 = 10324
$T334 = 10372
$T335 = 10420
$T336 = 10468
$T337 = 10516
$T338 = 10548
$T339 = 10580
$T340 = 10612
$T341 = 10644
$T342 = 10676
$T343 = 10708
$T344 = 10740
$T345 = 10772
$T346 = 10804
$T347 = 10836
$T348 = 10868
$T349 = 10900
$T350 = 10932
$T351 = 10964
$T352 = 10996
$T353 = 11028
$T354 = 11064
tv6279 = 11076
tv6275 = 11076
tv6266 = 11076
tv5446 = 11076
tv5340 = 11076
tv5307 = 11076
tv4882 = 11076
tv4750 = 11076
tv4741 = 11076
tv4732 = 11076
tv3328 = 11076
tv3127 = 11076
tv2950 = 11076
tv2890 = 11076
tv2865 = 11076
tv2376 = 11076
tv1967 = 11076
tv1932 = 11076
tv1923 = 11076
tv1668 = 11076
tv1642 = 11076
tv1549 = 11076
tv1485 = 11076
tv1366 = 11076
tv5602 = 11080
tv5344 = 11080
tv5311 = 11080
tv5173 = 11080
tv4681 = 11080
tv4603 = 11080
tv4361 = 11080
tv4351 = 11080
tv4341 = 11080
tv4331 = 11080
tv4321 = 11080
tv4279 = 11080
tv4269 = 11080
tv4259 = 11080
tv4249 = 11080
tv4239 = 11080
tv4229 = 11080
tv4219 = 11080
tv3918 = 11080
tv3904 = 11080
tv3890 = 11080
tv3876 = 11080
tv3830 = 11080
tv3816 = 11080
tv3802 = 11080
tv3788 = 11080
tv3710 = 11080
tv3439 = 11080
tv3410 = 11080
tv2953 = 11080
tv2889 = 11080
tv2829 = 11080
tv2379 = 11080
tv1056 = 11080
tv802 = 11080
tv536 = 11080
tv5348 = 11084
tv5315 = 11084
tv2960 = 11084
tv5352 = 11088
tv5319 = 11088
tv5178 = 11088
tv3922 = 11088
tv3908 = 11088
tv3894 = 11088
tv3880 = 11088
tv3834 = 11088
tv3820 = 11088
tv3806 = 11088
tv3792 = 11088
tv3778 = 11088
tv2957 = 11088
tv5356 = 11092
tv5323 = 11092
tv2964 = 11092
tv5360 = 11096
tv5327 = 11096
tv5183 = 11096
tv5364 = 11100
tv5331 = 11100
tv5368 = 11104
tv5188 = 11104
tv5372 = 11108
tv5376 = 11112
tv5193 = 11112
tv5198 = 11120
tv5201 = 11128
tv5205 = 11132
tv5208 = 11136
tv5211 = 11140
tv5214 = 11144
tv5217 = 11148
tv5220 = 11152
tv5223 = 11156
tv5227 = 11160
tv5231 = 11164
tv5235 = 11168
tv5239 = 11172
tv5243 = 11176
tv5247 = 11180
__$ArrayPad$ = 11184
?dtor$6@?0??ShowDemoWindowWidgets@@YAXXZ@4HA PROC	; `ShowDemoWindowWidgets'::`1'::dtor$6
  000fc	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00101	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00106	55		 push	 rbp
  00107	57		 push	 rdi
  00108	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0010c	48 8d aa c0 00
	00 00		 lea	 rbp, QWORD PTR [rdx+192]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS7@?DIK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0011a	e8 00 00 00 00	 call	 _Init_thread_abort
  0011f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00123	5f		 pop	 rdi
  00124	5d		 pop	 rbp
  00125	c3		 ret	 0
?dtor$6@?0??ShowDemoWindowWidgets@@YAXXZ@4HA ENDP	; `ShowDemoWindowWidgets'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
i$97 = 4
spacing$98 = 36
elems_names$99 = 72
elem_name$100 = 136
items$101 = 176
items$102 = 304
i$103 = 404
node_clicked$104 = 436
i$105 = 468
node_flags$106 = 500
is_selected$107 = 532
node_open$108 = 564
i$109 = 596
i$110 = 628
draw_list$111 = 664
n$112 = 692
pos$113 = 728
marker_min$114 = 760
marker_max$115 = 792
io$116 = 824
my_tex_id$117 = 856
my_tex_w$118 = 884
my_tex_h$119 = 916
pos$120 = 952
uv_min$121 = 984
uv_max$122 = 1016
tint_col$123 = 1048
border_col$124 = 1096
region_sz$125 = 1140
region_x$126 = 1172
region_y$127 = 1204
zoom$128 = 1236
uv0$129 = 1272
uv1$130 = 1304
i$131 = 1332
size$132 = 1368
uv0$133 = 1400
uv1$134 = 1432
bg_col$135 = 1464
tint_col$136 = 1512
items$137 = 1568
combo_preview_value$138 = 1704
n$139 = 1732
is_selected$140 = 1764
items$141 = 1808
n$142 = 1940
is_selected$143 = 1972
n$144 = 2004
is_selected$145 = 2036
n$146 = 2068
buf$147 = 2104
n$148 = 2164
buf$149 = 2200
i$150 = 2260
label$151 = 2296
i$152 = 2356
label$153 = 2392
time$154 = 2452
winning_state$155 = 2484
y$156 = 2516
x$157 = 2548
y$158 = 2580
x$159 = 2612
alignment$160 = 2648
name$161 = 2680
tab_bar_flags$162 = 2740
names$163 = 2776
n$164 = 2836
n$165 = 2868
i$166 = 2900
n$167 = 2932
open$168 = 2964
name$169 = 3000
average$170 = 3044
n$171 = 3076
overlay$172 = 3112
func$173 = 3176
progress_saturated$174 = 3204
buf$175 = 3240
misc_flags$176 = 3300
n$177 = 3332
open_popup$178 = 3364
n$179 = 3396
palette_button_flags$180 = 3428
payload$181 = 3464
payload$182 = 3496
flags$183 = 3524
w$184 = 3556
s8_zero$185 = 3588
s8_one$186 = 3620
s8_fifty$187 = 3652
s8_min$188 = 3684
s8_max$189 = 3716
u8_zero$190 = 3748
u8_one$191 = 3780
u8_fifty$192 = 3812
u8_min$193 = 3844
u8_max$194 = 3876
s16_zero$195 = 3908
s16_one$196 = 3940
s16_fifty$197 = 3972
s16_min$198 = 4004
s16_max$199 = 4036
u16_zero$200 = 4068
u16_one$201 = 4100
u16_fifty$202 = 4132
u16_min$203 = 4164
u16_max$204 = 4196
s32_zero$205 = 4228
s32_one$206 = 4260
s32_fifty$207 = 4292
s32_min$208 = 4324
s32_max$209 = 4356
s32_hi_a$210 = 4388
s32_hi_b$211 = 4420
u32_zero$212 = 4452
u32_one$213 = 4484
u32_fifty$214 = 4516
u32_min$215 = 4548
u32_max$216 = 4580
u32_hi_a$217 = 4612
u32_hi_b$218 = 4644
s64_zero$219 = 4680
s64_one$220 = 4712
s64_fifty$221 = 4744
s64_min$222 = 4776
s64_max$223 = 4808
s64_hi_a$224 = 4840
s64_hi_b$225 = 4872
u64_zero$226 = 4904
u64_one$227 = 4936
u64_fifty$228 = 4968
u64_min$229 = 5000
u64_max$230 = 5032
u64_hi_a$231 = 5064
u64_hi_b$232 = 5096
f32_zero$233 = 5124
f32_one$234 = 5156
f32_lo_a$235 = 5188
f32_hi_a$236 = 5220
f64_zero$237 = 5256
f64_one$238 = 5288
f64_lo_a$239 = 5320
f64_hi_a$240 = 5352
drag_speed$241 = 5380
spacing$242 = 5412
i$243 = 5444
rows$244 = 5476
small_slider_size$245 = 5512
nx$246 = 5540
ny$247 = 5572
i$248 = 5604
n$249 = 5636
payload$250 = 5672
payload_n$251 = 5700
tmp$252 = 5736
n$253 = 5764
item$254 = 5800
n_next$255 = 5828
item_names$256 = 5872
ret$257 = 6020
items$258 = 6056
items$259 = 6120
hovered_delay_none$260 = 6180
hovered_delay_short$261 = 6212
hovered_delay_normal$262 = 6244
buf$263 = 6276
lines$264 = 6320
i$265 = 6404
$T266 = 7972
$T267 = 8004
$T268 = 8052
$T269 = 8100
$T270 = 8148
$T271 = 8196
$T272 = 8244
$T273 = 8292
$T274 = 8324
$T275 = 8356
$T276 = 8404
$T277 = 8452
$T278 = 8484
$T279 = 8516
$T280 = 8548
$T281 = 8580
$T282 = 8612
$T283 = 8644
$T284 = 8676
$T285 = 8708
$T286 = 8740
$T287 = 8772
$T288 = 8804
$T289 = 8836
$T290 = 8868
$T291 = 8900
$T292 = 8932
$T293 = 8964
$T294 = 8996
$T295 = 9028
$T296 = 9060
$T297 = 9092
$T298 = 9124
$T299 = 9156
$T300 = 9188
$T301 = 9220
$T302 = 9252
$T303 = 9284
$T304 = 9316
$T305 = 9348
$T306 = 9380
$T307 = 9412
$T308 = 9444
$T309 = 9476
$T310 = 9508
$T311 = 9540
$T312 = 9572
$T313 = 9604
$T314 = 9636
$T315 = 9668
$T316 = 9700
$T317 = 9732
$T318 = 9764
$T319 = 9796
$T320 = 9828
$T321 = 9860
$T322 = 9892
$T323 = 9940
$T324 = 9972
$T325 = 10004
$T326 = 10036
$T327 = 10068
$T328 = 10100
$T329 = 10132
$T330 = 10180
$T331 = 10228
$T332 = 10276
$T333 = 10324
$T334 = 10372
$T335 = 10420
$T336 = 10468
$T337 = 10516
$T338 = 10548
$T339 = 10580
$T340 = 10612
$T341 = 10644
$T342 = 10676
$T343 = 10708
$T344 = 10740
$T345 = 10772
$T346 = 10804
$T347 = 10836
$T348 = 10868
$T349 = 10900
$T350 = 10932
$T351 = 10964
$T352 = 10996
$T353 = 11028
$T354 = 11064
tv6279 = 11076
tv6275 = 11076
tv6266 = 11076
tv5446 = 11076
tv5340 = 11076
tv5307 = 11076
tv4882 = 11076
tv4750 = 11076
tv4741 = 11076
tv4732 = 11076
tv3328 = 11076
tv3127 = 11076
tv2950 = 11076
tv2890 = 11076
tv2865 = 11076
tv2376 = 11076
tv1967 = 11076
tv1932 = 11076
tv1923 = 11076
tv1668 = 11076
tv1642 = 11076
tv1549 = 11076
tv1485 = 11076
tv1366 = 11076
tv5602 = 11080
tv5344 = 11080
tv5311 = 11080
tv5173 = 11080
tv4681 = 11080
tv4603 = 11080
tv4361 = 11080
tv4351 = 11080
tv4341 = 11080
tv4331 = 11080
tv4321 = 11080
tv4279 = 11080
tv4269 = 11080
tv4259 = 11080
tv4249 = 11080
tv4239 = 11080
tv4229 = 11080
tv4219 = 11080
tv3918 = 11080
tv3904 = 11080
tv3890 = 11080
tv3876 = 11080
tv3830 = 11080
tv3816 = 11080
tv3802 = 11080
tv3788 = 11080
tv3710 = 11080
tv3439 = 11080
tv3410 = 11080
tv2953 = 11080
tv2889 = 11080
tv2829 = 11080
tv2379 = 11080
tv1056 = 11080
tv802 = 11080
tv536 = 11080
tv5348 = 11084
tv5315 = 11084
tv2960 = 11084
tv5352 = 11088
tv5319 = 11088
tv5178 = 11088
tv3922 = 11088
tv3908 = 11088
tv3894 = 11088
tv3880 = 11088
tv3834 = 11088
tv3820 = 11088
tv3806 = 11088
tv3792 = 11088
tv3778 = 11088
tv2957 = 11088
tv5356 = 11092
tv5323 = 11092
tv2964 = 11092
tv5360 = 11096
tv5327 = 11096
tv5183 = 11096
tv5364 = 11100
tv5331 = 11100
tv5368 = 11104
tv5188 = 11104
tv5372 = 11108
tv5376 = 11112
tv5193 = 11112
tv5198 = 11120
tv5201 = 11128
tv5205 = 11132
tv5208 = 11136
tv5211 = 11140
tv5214 = 11144
tv5217 = 11148
tv5220 = 11152
tv5223 = 11156
tv5227 = 11160
tv5231 = 11164
tv5235 = 11168
tv5239 = 11172
tv5243 = 11176
tv5247 = 11180
__$ArrayPad$ = 11184
?dtor$0@?0??ShowDemoWindowWidgets@@YAXXZ@4HA PROC	; `ShowDemoWindowWidgets'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d aa c0 00
	00 00		 lea	 rbp, QWORD PTR [rdx+192]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?BMK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0001e	e8 00 00 00 00	 call	 _Init_thread_abort
  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
?dtor$0@?0??ShowDemoWindowWidgets@@YAXXZ@4HA ENDP	; `ShowDemoWindowWidgets'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
i$97 = 4
spacing$98 = 36
elems_names$99 = 72
elem_name$100 = 136
items$101 = 176
items$102 = 304
i$103 = 404
node_clicked$104 = 436
i$105 = 468
node_flags$106 = 500
is_selected$107 = 532
node_open$108 = 564
i$109 = 596
i$110 = 628
draw_list$111 = 664
n$112 = 692
pos$113 = 728
marker_min$114 = 760
marker_max$115 = 792
io$116 = 824
my_tex_id$117 = 856
my_tex_w$118 = 884
my_tex_h$119 = 916
pos$120 = 952
uv_min$121 = 984
uv_max$122 = 1016
tint_col$123 = 1048
border_col$124 = 1096
region_sz$125 = 1140
region_x$126 = 1172
region_y$127 = 1204
zoom$128 = 1236
uv0$129 = 1272
uv1$130 = 1304
i$131 = 1332
size$132 = 1368
uv0$133 = 1400
uv1$134 = 1432
bg_col$135 = 1464
tint_col$136 = 1512
items$137 = 1568
combo_preview_value$138 = 1704
n$139 = 1732
is_selected$140 = 1764
items$141 = 1808
n$142 = 1940
is_selected$143 = 1972
n$144 = 2004
is_selected$145 = 2036
n$146 = 2068
buf$147 = 2104
n$148 = 2164
buf$149 = 2200
i$150 = 2260
label$151 = 2296
i$152 = 2356
label$153 = 2392
time$154 = 2452
winning_state$155 = 2484
y$156 = 2516
x$157 = 2548
y$158 = 2580
x$159 = 2612
alignment$160 = 2648
name$161 = 2680
tab_bar_flags$162 = 2740
names$163 = 2776
n$164 = 2836
n$165 = 2868
i$166 = 2900
n$167 = 2932
open$168 = 2964
name$169 = 3000
average$170 = 3044
n$171 = 3076
overlay$172 = 3112
func$173 = 3176
progress_saturated$174 = 3204
buf$175 = 3240
misc_flags$176 = 3300
n$177 = 3332
open_popup$178 = 3364
n$179 = 3396
palette_button_flags$180 = 3428
payload$181 = 3464
payload$182 = 3496
flags$183 = 3524
w$184 = 3556
s8_zero$185 = 3588
s8_one$186 = 3620
s8_fifty$187 = 3652
s8_min$188 = 3684
s8_max$189 = 3716
u8_zero$190 = 3748
u8_one$191 = 3780
u8_fifty$192 = 3812
u8_min$193 = 3844
u8_max$194 = 3876
s16_zero$195 = 3908
s16_one$196 = 3940
s16_fifty$197 = 3972
s16_min$198 = 4004
s16_max$199 = 4036
u16_zero$200 = 4068
u16_one$201 = 4100
u16_fifty$202 = 4132
u16_min$203 = 4164
u16_max$204 = 4196
s32_zero$205 = 4228
s32_one$206 = 4260
s32_fifty$207 = 4292
s32_min$208 = 4324
s32_max$209 = 4356
s32_hi_a$210 = 4388
s32_hi_b$211 = 4420
u32_zero$212 = 4452
u32_one$213 = 4484
u32_fifty$214 = 4516
u32_min$215 = 4548
u32_max$216 = 4580
u32_hi_a$217 = 4612
u32_hi_b$218 = 4644
s64_zero$219 = 4680
s64_one$220 = 4712
s64_fifty$221 = 4744
s64_min$222 = 4776
s64_max$223 = 4808
s64_hi_a$224 = 4840
s64_hi_b$225 = 4872
u64_zero$226 = 4904
u64_one$227 = 4936
u64_fifty$228 = 4968
u64_min$229 = 5000
u64_max$230 = 5032
u64_hi_a$231 = 5064
u64_hi_b$232 = 5096
f32_zero$233 = 5124
f32_one$234 = 5156
f32_lo_a$235 = 5188
f32_hi_a$236 = 5220
f64_zero$237 = 5256
f64_one$238 = 5288
f64_lo_a$239 = 5320
f64_hi_a$240 = 5352
drag_speed$241 = 5380
spacing$242 = 5412
i$243 = 5444
rows$244 = 5476
small_slider_size$245 = 5512
nx$246 = 5540
ny$247 = 5572
i$248 = 5604
n$249 = 5636
payload$250 = 5672
payload_n$251 = 5700
tmp$252 = 5736
n$253 = 5764
item$254 = 5800
n_next$255 = 5828
item_names$256 = 5872
ret$257 = 6020
items$258 = 6056
items$259 = 6120
hovered_delay_none$260 = 6180
hovered_delay_short$261 = 6212
hovered_delay_normal$262 = 6244
buf$263 = 6276
lines$264 = 6320
i$265 = 6404
$T266 = 7972
$T267 = 8004
$T268 = 8052
$T269 = 8100
$T270 = 8148
$T271 = 8196
$T272 = 8244
$T273 = 8292
$T274 = 8324
$T275 = 8356
$T276 = 8404
$T277 = 8452
$T278 = 8484
$T279 = 8516
$T280 = 8548
$T281 = 8580
$T282 = 8612
$T283 = 8644
$T284 = 8676
$T285 = 8708
$T286 = 8740
$T287 = 8772
$T288 = 8804
$T289 = 8836
$T290 = 8868
$T291 = 8900
$T292 = 8932
$T293 = 8964
$T294 = 8996
$T295 = 9028
$T296 = 9060
$T297 = 9092
$T298 = 9124
$T299 = 9156
$T300 = 9188
$T301 = 9220
$T302 = 9252
$T303 = 9284
$T304 = 9316
$T305 = 9348
$T306 = 9380
$T307 = 9412
$T308 = 9444
$T309 = 9476
$T310 = 9508
$T311 = 9540
$T312 = 9572
$T313 = 9604
$T314 = 9636
$T315 = 9668
$T316 = 9700
$T317 = 9732
$T318 = 9764
$T319 = 9796
$T320 = 9828
$T321 = 9860
$T322 = 9892
$T323 = 9940
$T324 = 9972
$T325 = 10004
$T326 = 10036
$T327 = 10068
$T328 = 10100
$T329 = 10132
$T330 = 10180
$T331 = 10228
$T332 = 10276
$T333 = 10324
$T334 = 10372
$T335 = 10420
$T336 = 10468
$T337 = 10516
$T338 = 10548
$T339 = 10580
$T340 = 10612
$T341 = 10644
$T342 = 10676
$T343 = 10708
$T344 = 10740
$T345 = 10772
$T346 = 10804
$T347 = 10836
$T348 = 10868
$T349 = 10900
$T350 = 10932
$T351 = 10964
$T352 = 10996
$T353 = 11028
$T354 = 11064
tv6279 = 11076
tv6275 = 11076
tv6266 = 11076
tv5446 = 11076
tv5340 = 11076
tv5307 = 11076
tv4882 = 11076
tv4750 = 11076
tv4741 = 11076
tv4732 = 11076
tv3328 = 11076
tv3127 = 11076
tv2950 = 11076
tv2890 = 11076
tv2865 = 11076
tv2376 = 11076
tv1967 = 11076
tv1932 = 11076
tv1923 = 11076
tv1668 = 11076
tv1642 = 11076
tv1549 = 11076
tv1485 = 11076
tv1366 = 11076
tv5602 = 11080
tv5344 = 11080
tv5311 = 11080
tv5173 = 11080
tv4681 = 11080
tv4603 = 11080
tv4361 = 11080
tv4351 = 11080
tv4341 = 11080
tv4331 = 11080
tv4321 = 11080
tv4279 = 11080
tv4269 = 11080
tv4259 = 11080
tv4249 = 11080
tv4239 = 11080
tv4229 = 11080
tv4219 = 11080
tv3918 = 11080
tv3904 = 11080
tv3890 = 11080
tv3876 = 11080
tv3830 = 11080
tv3816 = 11080
tv3802 = 11080
tv3788 = 11080
tv3710 = 11080
tv3439 = 11080
tv3410 = 11080
tv2953 = 11080
tv2889 = 11080
tv2829 = 11080
tv2379 = 11080
tv1056 = 11080
tv802 = 11080
tv536 = 11080
tv5348 = 11084
tv5315 = 11084
tv2960 = 11084
tv5352 = 11088
tv5319 = 11088
tv5178 = 11088
tv3922 = 11088
tv3908 = 11088
tv3894 = 11088
tv3880 = 11088
tv3834 = 11088
tv3820 = 11088
tv3806 = 11088
tv3792 = 11088
tv3778 = 11088
tv2957 = 11088
tv5356 = 11092
tv5323 = 11092
tv2964 = 11092
tv5360 = 11096
tv5327 = 11096
tv5183 = 11096
tv5364 = 11100
tv5331 = 11100
tv5368 = 11104
tv5188 = 11104
tv5372 = 11108
tv5376 = 11112
tv5193 = 11112
tv5198 = 11120
tv5201 = 11128
tv5205 = 11132
tv5208 = 11136
tv5211 = 11140
tv5214 = 11144
tv5217 = 11148
tv5220 = 11152
tv5223 = 11156
tv5227 = 11160
tv5231 = 11164
tv5235 = 11168
tv5239 = 11172
tv5243 = 11176
tv5247 = 11180
__$ArrayPad$ = 11184
?dtor$1@?0??ShowDemoWindowWidgets@@YAXXZ@4HA PROC	; `ShowDemoWindowWidgets'::`1'::dtor$1
  0002a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002f	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00034	55		 push	 rbp
  00035	57		 push	 rdi
  00036	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0003a	48 8d aa c0 00
	00 00		 lea	 rbp, QWORD PTR [rdx+192]
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?CAI@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00048	e8 00 00 00 00	 call	 _Init_thread_abort
  0004d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
?dtor$1@?0??ShowDemoWindowWidgets@@YAXXZ@4HA ENDP	; `ShowDemoWindowWidgets'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
i$97 = 4
spacing$98 = 36
elems_names$99 = 72
elem_name$100 = 136
items$101 = 176
items$102 = 304
i$103 = 404
node_clicked$104 = 436
i$105 = 468
node_flags$106 = 500
is_selected$107 = 532
node_open$108 = 564
i$109 = 596
i$110 = 628
draw_list$111 = 664
n$112 = 692
pos$113 = 728
marker_min$114 = 760
marker_max$115 = 792
io$116 = 824
my_tex_id$117 = 856
my_tex_w$118 = 884
my_tex_h$119 = 916
pos$120 = 952
uv_min$121 = 984
uv_max$122 = 1016
tint_col$123 = 1048
border_col$124 = 1096
region_sz$125 = 1140
region_x$126 = 1172
region_y$127 = 1204
zoom$128 = 1236
uv0$129 = 1272
uv1$130 = 1304
i$131 = 1332
size$132 = 1368
uv0$133 = 1400
uv1$134 = 1432
bg_col$135 = 1464
tint_col$136 = 1512
items$137 = 1568
combo_preview_value$138 = 1704
n$139 = 1732
is_selected$140 = 1764
items$141 = 1808
n$142 = 1940
is_selected$143 = 1972
n$144 = 2004
is_selected$145 = 2036
n$146 = 2068
buf$147 = 2104
n$148 = 2164
buf$149 = 2200
i$150 = 2260
label$151 = 2296
i$152 = 2356
label$153 = 2392
time$154 = 2452
winning_state$155 = 2484
y$156 = 2516
x$157 = 2548
y$158 = 2580
x$159 = 2612
alignment$160 = 2648
name$161 = 2680
tab_bar_flags$162 = 2740
names$163 = 2776
n$164 = 2836
n$165 = 2868
i$166 = 2900
n$167 = 2932
open$168 = 2964
name$169 = 3000
average$170 = 3044
n$171 = 3076
overlay$172 = 3112
func$173 = 3176
progress_saturated$174 = 3204
buf$175 = 3240
misc_flags$176 = 3300
n$177 = 3332
open_popup$178 = 3364
n$179 = 3396
palette_button_flags$180 = 3428
payload$181 = 3464
payload$182 = 3496
flags$183 = 3524
w$184 = 3556
s8_zero$185 = 3588
s8_one$186 = 3620
s8_fifty$187 = 3652
s8_min$188 = 3684
s8_max$189 = 3716
u8_zero$190 = 3748
u8_one$191 = 3780
u8_fifty$192 = 3812
u8_min$193 = 3844
u8_max$194 = 3876
s16_zero$195 = 3908
s16_one$196 = 3940
s16_fifty$197 = 3972
s16_min$198 = 4004
s16_max$199 = 4036
u16_zero$200 = 4068
u16_one$201 = 4100
u16_fifty$202 = 4132
u16_min$203 = 4164
u16_max$204 = 4196
s32_zero$205 = 4228
s32_one$206 = 4260
s32_fifty$207 = 4292
s32_min$208 = 4324
s32_max$209 = 4356
s32_hi_a$210 = 4388
s32_hi_b$211 = 4420
u32_zero$212 = 4452
u32_one$213 = 4484
u32_fifty$214 = 4516
u32_min$215 = 4548
u32_max$216 = 4580
u32_hi_a$217 = 4612
u32_hi_b$218 = 4644
s64_zero$219 = 4680
s64_one$220 = 4712
s64_fifty$221 = 4744
s64_min$222 = 4776
s64_max$223 = 4808
s64_hi_a$224 = 4840
s64_hi_b$225 = 4872
u64_zero$226 = 4904
u64_one$227 = 4936
u64_fifty$228 = 4968
u64_min$229 = 5000
u64_max$230 = 5032
u64_hi_a$231 = 5064
u64_hi_b$232 = 5096
f32_zero$233 = 5124
f32_one$234 = 5156
f32_lo_a$235 = 5188
f32_hi_a$236 = 5220
f64_zero$237 = 5256
f64_one$238 = 5288
f64_lo_a$239 = 5320
f64_hi_a$240 = 5352
drag_speed$241 = 5380
spacing$242 = 5412
i$243 = 5444
rows$244 = 5476
small_slider_size$245 = 5512
nx$246 = 5540
ny$247 = 5572
i$248 = 5604
n$249 = 5636
payload$250 = 5672
payload_n$251 = 5700
tmp$252 = 5736
n$253 = 5764
item$254 = 5800
n_next$255 = 5828
item_names$256 = 5872
ret$257 = 6020
items$258 = 6056
items$259 = 6120
hovered_delay_none$260 = 6180
hovered_delay_short$261 = 6212
hovered_delay_normal$262 = 6244
buf$263 = 6276
lines$264 = 6320
i$265 = 6404
$T266 = 7972
$T267 = 8004
$T268 = 8052
$T269 = 8100
$T270 = 8148
$T271 = 8196
$T272 = 8244
$T273 = 8292
$T274 = 8324
$T275 = 8356
$T276 = 8404
$T277 = 8452
$T278 = 8484
$T279 = 8516
$T280 = 8548
$T281 = 8580
$T282 = 8612
$T283 = 8644
$T284 = 8676
$T285 = 8708
$T286 = 8740
$T287 = 8772
$T288 = 8804
$T289 = 8836
$T290 = 8868
$T291 = 8900
$T292 = 8932
$T293 = 8964
$T294 = 8996
$T295 = 9028
$T296 = 9060
$T297 = 9092
$T298 = 9124
$T299 = 9156
$T300 = 9188
$T301 = 9220
$T302 = 9252
$T303 = 9284
$T304 = 9316
$T305 = 9348
$T306 = 9380
$T307 = 9412
$T308 = 9444
$T309 = 9476
$T310 = 9508
$T311 = 9540
$T312 = 9572
$T313 = 9604
$T314 = 9636
$T315 = 9668
$T316 = 9700
$T317 = 9732
$T318 = 9764
$T319 = 9796
$T320 = 9828
$T321 = 9860
$T322 = 9892
$T323 = 9940
$T324 = 9972
$T325 = 10004
$T326 = 10036
$T327 = 10068
$T328 = 10100
$T329 = 10132
$T330 = 10180
$T331 = 10228
$T332 = 10276
$T333 = 10324
$T334 = 10372
$T335 = 10420
$T336 = 10468
$T337 = 10516
$T338 = 10548
$T339 = 10580
$T340 = 10612
$T341 = 10644
$T342 = 10676
$T343 = 10708
$T344 = 10740
$T345 = 10772
$T346 = 10804
$T347 = 10836
$T348 = 10868
$T349 = 10900
$T350 = 10932
$T351 = 10964
$T352 = 10996
$T353 = 11028
$T354 = 11064
tv6279 = 11076
tv6275 = 11076
tv6266 = 11076
tv5446 = 11076
tv5340 = 11076
tv5307 = 11076
tv4882 = 11076
tv4750 = 11076
tv4741 = 11076
tv4732 = 11076
tv3328 = 11076
tv3127 = 11076
tv2950 = 11076
tv2890 = 11076
tv2865 = 11076
tv2376 = 11076
tv1967 = 11076
tv1932 = 11076
tv1923 = 11076
tv1668 = 11076
tv1642 = 11076
tv1549 = 11076
tv1485 = 11076
tv1366 = 11076
tv5602 = 11080
tv5344 = 11080
tv5311 = 11080
tv5173 = 11080
tv4681 = 11080
tv4603 = 11080
tv4361 = 11080
tv4351 = 11080
tv4341 = 11080
tv4331 = 11080
tv4321 = 11080
tv4279 = 11080
tv4269 = 11080
tv4259 = 11080
tv4249 = 11080
tv4239 = 11080
tv4229 = 11080
tv4219 = 11080
tv3918 = 11080
tv3904 = 11080
tv3890 = 11080
tv3876 = 11080
tv3830 = 11080
tv3816 = 11080
tv3802 = 11080
tv3788 = 11080
tv3710 = 11080
tv3439 = 11080
tv3410 = 11080
tv2953 = 11080
tv2889 = 11080
tv2829 = 11080
tv2379 = 11080
tv1056 = 11080
tv802 = 11080
tv536 = 11080
tv5348 = 11084
tv5315 = 11084
tv2960 = 11084
tv5352 = 11088
tv5319 = 11088
tv5178 = 11088
tv3922 = 11088
tv3908 = 11088
tv3894 = 11088
tv3880 = 11088
tv3834 = 11088
tv3820 = 11088
tv3806 = 11088
tv3792 = 11088
tv3778 = 11088
tv2957 = 11088
tv5356 = 11092
tv5323 = 11092
tv2964 = 11092
tv5360 = 11096
tv5327 = 11096
tv5183 = 11096
tv5364 = 11100
tv5331 = 11100
tv5368 = 11104
tv5188 = 11104
tv5372 = 11108
tv5376 = 11112
tv5193 = 11112
tv5198 = 11120
tv5201 = 11128
tv5205 = 11132
tv5208 = 11136
tv5211 = 11140
tv5214 = 11144
tv5217 = 11148
tv5220 = 11152
tv5223 = 11156
tv5227 = 11160
tv5231 = 11164
tv5235 = 11168
tv5239 = 11172
tv5243 = 11176
tv5247 = 11180
__$ArrayPad$ = 11184
?dtor$2@?0??ShowDemoWindowWidgets@@YAXXZ@4HA PROC	; `ShowDemoWindowWidgets'::`1'::dtor$2
  00054	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00059	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0005e	55		 push	 rbp
  0005f	57		 push	 rdi
  00060	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00064	48 8d aa c0 00
	00 00		 lea	 rbp, QWORD PTR [rdx+192]
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS2@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00072	e8 00 00 00 00	 call	 _Init_thread_abort
  00077	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007b	5f		 pop	 rdi
  0007c	5d		 pop	 rbp
  0007d	c3		 ret	 0
?dtor$2@?0??ShowDemoWindowWidgets@@YAXXZ@4HA ENDP	; `ShowDemoWindowWidgets'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
i$97 = 4
spacing$98 = 36
elems_names$99 = 72
elem_name$100 = 136
items$101 = 176
items$102 = 304
i$103 = 404
node_clicked$104 = 436
i$105 = 468
node_flags$106 = 500
is_selected$107 = 532
node_open$108 = 564
i$109 = 596
i$110 = 628
draw_list$111 = 664
n$112 = 692
pos$113 = 728
marker_min$114 = 760
marker_max$115 = 792
io$116 = 824
my_tex_id$117 = 856
my_tex_w$118 = 884
my_tex_h$119 = 916
pos$120 = 952
uv_min$121 = 984
uv_max$122 = 1016
tint_col$123 = 1048
border_col$124 = 1096
region_sz$125 = 1140
region_x$126 = 1172
region_y$127 = 1204
zoom$128 = 1236
uv0$129 = 1272
uv1$130 = 1304
i$131 = 1332
size$132 = 1368
uv0$133 = 1400
uv1$134 = 1432
bg_col$135 = 1464
tint_col$136 = 1512
items$137 = 1568
combo_preview_value$138 = 1704
n$139 = 1732
is_selected$140 = 1764
items$141 = 1808
n$142 = 1940
is_selected$143 = 1972
n$144 = 2004
is_selected$145 = 2036
n$146 = 2068
buf$147 = 2104
n$148 = 2164
buf$149 = 2200
i$150 = 2260
label$151 = 2296
i$152 = 2356
label$153 = 2392
time$154 = 2452
winning_state$155 = 2484
y$156 = 2516
x$157 = 2548
y$158 = 2580
x$159 = 2612
alignment$160 = 2648
name$161 = 2680
tab_bar_flags$162 = 2740
names$163 = 2776
n$164 = 2836
n$165 = 2868
i$166 = 2900
n$167 = 2932
open$168 = 2964
name$169 = 3000
average$170 = 3044
n$171 = 3076
overlay$172 = 3112
func$173 = 3176
progress_saturated$174 = 3204
buf$175 = 3240
misc_flags$176 = 3300
n$177 = 3332
open_popup$178 = 3364
n$179 = 3396
palette_button_flags$180 = 3428
payload$181 = 3464
payload$182 = 3496
flags$183 = 3524
w$184 = 3556
s8_zero$185 = 3588
s8_one$186 = 3620
s8_fifty$187 = 3652
s8_min$188 = 3684
s8_max$189 = 3716
u8_zero$190 = 3748
u8_one$191 = 3780
u8_fifty$192 = 3812
u8_min$193 = 3844
u8_max$194 = 3876
s16_zero$195 = 3908
s16_one$196 = 3940
s16_fifty$197 = 3972
s16_min$198 = 4004
s16_max$199 = 4036
u16_zero$200 = 4068
u16_one$201 = 4100
u16_fifty$202 = 4132
u16_min$203 = 4164
u16_max$204 = 4196
s32_zero$205 = 4228
s32_one$206 = 4260
s32_fifty$207 = 4292
s32_min$208 = 4324
s32_max$209 = 4356
s32_hi_a$210 = 4388
s32_hi_b$211 = 4420
u32_zero$212 = 4452
u32_one$213 = 4484
u32_fifty$214 = 4516
u32_min$215 = 4548
u32_max$216 = 4580
u32_hi_a$217 = 4612
u32_hi_b$218 = 4644
s64_zero$219 = 4680
s64_one$220 = 4712
s64_fifty$221 = 4744
s64_min$222 = 4776
s64_max$223 = 4808
s64_hi_a$224 = 4840
s64_hi_b$225 = 4872
u64_zero$226 = 4904
u64_one$227 = 4936
u64_fifty$228 = 4968
u64_min$229 = 5000
u64_max$230 = 5032
u64_hi_a$231 = 5064
u64_hi_b$232 = 5096
f32_zero$233 = 5124
f32_one$234 = 5156
f32_lo_a$235 = 5188
f32_hi_a$236 = 5220
f64_zero$237 = 5256
f64_one$238 = 5288
f64_lo_a$239 = 5320
f64_hi_a$240 = 5352
drag_speed$241 = 5380
spacing$242 = 5412
i$243 = 5444
rows$244 = 5476
small_slider_size$245 = 5512
nx$246 = 5540
ny$247 = 5572
i$248 = 5604
n$249 = 5636
payload$250 = 5672
payload_n$251 = 5700
tmp$252 = 5736
n$253 = 5764
item$254 = 5800
n_next$255 = 5828
item_names$256 = 5872
ret$257 = 6020
items$258 = 6056
items$259 = 6120
hovered_delay_none$260 = 6180
hovered_delay_short$261 = 6212
hovered_delay_normal$262 = 6244
buf$263 = 6276
lines$264 = 6320
i$265 = 6404
$T266 = 7972
$T267 = 8004
$T268 = 8052
$T269 = 8100
$T270 = 8148
$T271 = 8196
$T272 = 8244
$T273 = 8292
$T274 = 8324
$T275 = 8356
$T276 = 8404
$T277 = 8452
$T278 = 8484
$T279 = 8516
$T280 = 8548
$T281 = 8580
$T282 = 8612
$T283 = 8644
$T284 = 8676
$T285 = 8708
$T286 = 8740
$T287 = 8772
$T288 = 8804
$T289 = 8836
$T290 = 8868
$T291 = 8900
$T292 = 8932
$T293 = 8964
$T294 = 8996
$T295 = 9028
$T296 = 9060
$T297 = 9092
$T298 = 9124
$T299 = 9156
$T300 = 9188
$T301 = 9220
$T302 = 9252
$T303 = 9284
$T304 = 9316
$T305 = 9348
$T306 = 9380
$T307 = 9412
$T308 = 9444
$T309 = 9476
$T310 = 9508
$T311 = 9540
$T312 = 9572
$T313 = 9604
$T314 = 9636
$T315 = 9668
$T316 = 9700
$T317 = 9732
$T318 = 9764
$T319 = 9796
$T320 = 9828
$T321 = 9860
$T322 = 9892
$T323 = 9940
$T324 = 9972
$T325 = 10004
$T326 = 10036
$T327 = 10068
$T328 = 10100
$T329 = 10132
$T330 = 10180
$T331 = 10228
$T332 = 10276
$T333 = 10324
$T334 = 10372
$T335 = 10420
$T336 = 10468
$T337 = 10516
$T338 = 10548
$T339 = 10580
$T340 = 10612
$T341 = 10644
$T342 = 10676
$T343 = 10708
$T344 = 10740
$T345 = 10772
$T346 = 10804
$T347 = 10836
$T348 = 10868
$T349 = 10900
$T350 = 10932
$T351 = 10964
$T352 = 10996
$T353 = 11028
$T354 = 11064
tv6279 = 11076
tv6275 = 11076
tv6266 = 11076
tv5446 = 11076
tv5340 = 11076
tv5307 = 11076
tv4882 = 11076
tv4750 = 11076
tv4741 = 11076
tv4732 = 11076
tv3328 = 11076
tv3127 = 11076
tv2950 = 11076
tv2890 = 11076
tv2865 = 11076
tv2376 = 11076
tv1967 = 11076
tv1932 = 11076
tv1923 = 11076
tv1668 = 11076
tv1642 = 11076
tv1549 = 11076
tv1485 = 11076
tv1366 = 11076
tv5602 = 11080
tv5344 = 11080
tv5311 = 11080
tv5173 = 11080
tv4681 = 11080
tv4603 = 11080
tv4361 = 11080
tv4351 = 11080
tv4341 = 11080
tv4331 = 11080
tv4321 = 11080
tv4279 = 11080
tv4269 = 11080
tv4259 = 11080
tv4249 = 11080
tv4239 = 11080
tv4229 = 11080
tv4219 = 11080
tv3918 = 11080
tv3904 = 11080
tv3890 = 11080
tv3876 = 11080
tv3830 = 11080
tv3816 = 11080
tv3802 = 11080
tv3788 = 11080
tv3710 = 11080
tv3439 = 11080
tv3410 = 11080
tv2953 = 11080
tv2889 = 11080
tv2829 = 11080
tv2379 = 11080
tv1056 = 11080
tv802 = 11080
tv536 = 11080
tv5348 = 11084
tv5315 = 11084
tv2960 = 11084
tv5352 = 11088
tv5319 = 11088
tv5178 = 11088
tv3922 = 11088
tv3908 = 11088
tv3894 = 11088
tv3880 = 11088
tv3834 = 11088
tv3820 = 11088
tv3806 = 11088
tv3792 = 11088
tv3778 = 11088
tv2957 = 11088
tv5356 = 11092
tv5323 = 11092
tv2964 = 11092
tv5360 = 11096
tv5327 = 11096
tv5183 = 11096
tv5364 = 11100
tv5331 = 11100
tv5368 = 11104
tv5188 = 11104
tv5372 = 11108
tv5376 = 11112
tv5193 = 11112
tv5198 = 11120
tv5201 = 11128
tv5205 = 11132
tv5208 = 11136
tv5211 = 11140
tv5214 = 11144
tv5217 = 11148
tv5220 = 11152
tv5223 = 11156
tv5227 = 11160
tv5231 = 11164
tv5235 = 11168
tv5239 = 11172
tv5243 = 11176
tv5247 = 11180
__$ArrayPad$ = 11184
?dtor$3@?0??ShowDemoWindowWidgets@@YAXXZ@4HA PROC	; `ShowDemoWindowWidgets'::`1'::dtor$3
  0007e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00083	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00088	55		 push	 rbp
  00089	57		 push	 rdi
  0008a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0008e	48 8d aa c0 00
	00 00		 lea	 rbp, QWORD PTR [rdx+192]
  00095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS4@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0009c	e8 00 00 00 00	 call	 _Init_thread_abort
  000a1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000a5	5f		 pop	 rdi
  000a6	5d		 pop	 rbp
  000a7	c3		 ret	 0
?dtor$3@?0??ShowDemoWindowWidgets@@YAXXZ@4HA ENDP	; `ShowDemoWindowWidgets'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
i$97 = 4
spacing$98 = 36
elems_names$99 = 72
elem_name$100 = 136
items$101 = 176
items$102 = 304
i$103 = 404
node_clicked$104 = 436
i$105 = 468
node_flags$106 = 500
is_selected$107 = 532
node_open$108 = 564
i$109 = 596
i$110 = 628
draw_list$111 = 664
n$112 = 692
pos$113 = 728
marker_min$114 = 760
marker_max$115 = 792
io$116 = 824
my_tex_id$117 = 856
my_tex_w$118 = 884
my_tex_h$119 = 916
pos$120 = 952
uv_min$121 = 984
uv_max$122 = 1016
tint_col$123 = 1048
border_col$124 = 1096
region_sz$125 = 1140
region_x$126 = 1172
region_y$127 = 1204
zoom$128 = 1236
uv0$129 = 1272
uv1$130 = 1304
i$131 = 1332
size$132 = 1368
uv0$133 = 1400
uv1$134 = 1432
bg_col$135 = 1464
tint_col$136 = 1512
items$137 = 1568
combo_preview_value$138 = 1704
n$139 = 1732
is_selected$140 = 1764
items$141 = 1808
n$142 = 1940
is_selected$143 = 1972
n$144 = 2004
is_selected$145 = 2036
n$146 = 2068
buf$147 = 2104
n$148 = 2164
buf$149 = 2200
i$150 = 2260
label$151 = 2296
i$152 = 2356
label$153 = 2392
time$154 = 2452
winning_state$155 = 2484
y$156 = 2516
x$157 = 2548
y$158 = 2580
x$159 = 2612
alignment$160 = 2648
name$161 = 2680
tab_bar_flags$162 = 2740
names$163 = 2776
n$164 = 2836
n$165 = 2868
i$166 = 2900
n$167 = 2932
open$168 = 2964
name$169 = 3000
average$170 = 3044
n$171 = 3076
overlay$172 = 3112
func$173 = 3176
progress_saturated$174 = 3204
buf$175 = 3240
misc_flags$176 = 3300
n$177 = 3332
open_popup$178 = 3364
n$179 = 3396
palette_button_flags$180 = 3428
payload$181 = 3464
payload$182 = 3496
flags$183 = 3524
w$184 = 3556
s8_zero$185 = 3588
s8_one$186 = 3620
s8_fifty$187 = 3652
s8_min$188 = 3684
s8_max$189 = 3716
u8_zero$190 = 3748
u8_one$191 = 3780
u8_fifty$192 = 3812
u8_min$193 = 3844
u8_max$194 = 3876
s16_zero$195 = 3908
s16_one$196 = 3940
s16_fifty$197 = 3972
s16_min$198 = 4004
s16_max$199 = 4036
u16_zero$200 = 4068
u16_one$201 = 4100
u16_fifty$202 = 4132
u16_min$203 = 4164
u16_max$204 = 4196
s32_zero$205 = 4228
s32_one$206 = 4260
s32_fifty$207 = 4292
s32_min$208 = 4324
s32_max$209 = 4356
s32_hi_a$210 = 4388
s32_hi_b$211 = 4420
u32_zero$212 = 4452
u32_one$213 = 4484
u32_fifty$214 = 4516
u32_min$215 = 4548
u32_max$216 = 4580
u32_hi_a$217 = 4612
u32_hi_b$218 = 4644
s64_zero$219 = 4680
s64_one$220 = 4712
s64_fifty$221 = 4744
s64_min$222 = 4776
s64_max$223 = 4808
s64_hi_a$224 = 4840
s64_hi_b$225 = 4872
u64_zero$226 = 4904
u64_one$227 = 4936
u64_fifty$228 = 4968
u64_min$229 = 5000
u64_max$230 = 5032
u64_hi_a$231 = 5064
u64_hi_b$232 = 5096
f32_zero$233 = 5124
f32_one$234 = 5156
f32_lo_a$235 = 5188
f32_hi_a$236 = 5220
f64_zero$237 = 5256
f64_one$238 = 5288
f64_lo_a$239 = 5320
f64_hi_a$240 = 5352
drag_speed$241 = 5380
spacing$242 = 5412
i$243 = 5444
rows$244 = 5476
small_slider_size$245 = 5512
nx$246 = 5540
ny$247 = 5572
i$248 = 5604
n$249 = 5636
payload$250 = 5672
payload_n$251 = 5700
tmp$252 = 5736
n$253 = 5764
item$254 = 5800
n_next$255 = 5828
item_names$256 = 5872
ret$257 = 6020
items$258 = 6056
items$259 = 6120
hovered_delay_none$260 = 6180
hovered_delay_short$261 = 6212
hovered_delay_normal$262 = 6244
buf$263 = 6276
lines$264 = 6320
i$265 = 6404
$T266 = 7972
$T267 = 8004
$T268 = 8052
$T269 = 8100
$T270 = 8148
$T271 = 8196
$T272 = 8244
$T273 = 8292
$T274 = 8324
$T275 = 8356
$T276 = 8404
$T277 = 8452
$T278 = 8484
$T279 = 8516
$T280 = 8548
$T281 = 8580
$T282 = 8612
$T283 = 8644
$T284 = 8676
$T285 = 8708
$T286 = 8740
$T287 = 8772
$T288 = 8804
$T289 = 8836
$T290 = 8868
$T291 = 8900
$T292 = 8932
$T293 = 8964
$T294 = 8996
$T295 = 9028
$T296 = 9060
$T297 = 9092
$T298 = 9124
$T299 = 9156
$T300 = 9188
$T301 = 9220
$T302 = 9252
$T303 = 9284
$T304 = 9316
$T305 = 9348
$T306 = 9380
$T307 = 9412
$T308 = 9444
$T309 = 9476
$T310 = 9508
$T311 = 9540
$T312 = 9572
$T313 = 9604
$T314 = 9636
$T315 = 9668
$T316 = 9700
$T317 = 9732
$T318 = 9764
$T319 = 9796
$T320 = 9828
$T321 = 9860
$T322 = 9892
$T323 = 9940
$T324 = 9972
$T325 = 10004
$T326 = 10036
$T327 = 10068
$T328 = 10100
$T329 = 10132
$T330 = 10180
$T331 = 10228
$T332 = 10276
$T333 = 10324
$T334 = 10372
$T335 = 10420
$T336 = 10468
$T337 = 10516
$T338 = 10548
$T339 = 10580
$T340 = 10612
$T341 = 10644
$T342 = 10676
$T343 = 10708
$T344 = 10740
$T345 = 10772
$T346 = 10804
$T347 = 10836
$T348 = 10868
$T349 = 10900
$T350 = 10932
$T351 = 10964
$T352 = 10996
$T353 = 11028
$T354 = 11064
tv6279 = 11076
tv6275 = 11076
tv6266 = 11076
tv5446 = 11076
tv5340 = 11076
tv5307 = 11076
tv4882 = 11076
tv4750 = 11076
tv4741 = 11076
tv4732 = 11076
tv3328 = 11076
tv3127 = 11076
tv2950 = 11076
tv2890 = 11076
tv2865 = 11076
tv2376 = 11076
tv1967 = 11076
tv1932 = 11076
tv1923 = 11076
tv1668 = 11076
tv1642 = 11076
tv1549 = 11076
tv1485 = 11076
tv1366 = 11076
tv5602 = 11080
tv5344 = 11080
tv5311 = 11080
tv5173 = 11080
tv4681 = 11080
tv4603 = 11080
tv4361 = 11080
tv4351 = 11080
tv4341 = 11080
tv4331 = 11080
tv4321 = 11080
tv4279 = 11080
tv4269 = 11080
tv4259 = 11080
tv4249 = 11080
tv4239 = 11080
tv4229 = 11080
tv4219 = 11080
tv3918 = 11080
tv3904 = 11080
tv3890 = 11080
tv3876 = 11080
tv3830 = 11080
tv3816 = 11080
tv3802 = 11080
tv3788 = 11080
tv3710 = 11080
tv3439 = 11080
tv3410 = 11080
tv2953 = 11080
tv2889 = 11080
tv2829 = 11080
tv2379 = 11080
tv1056 = 11080
tv802 = 11080
tv536 = 11080
tv5348 = 11084
tv5315 = 11084
tv2960 = 11084
tv5352 = 11088
tv5319 = 11088
tv5178 = 11088
tv3922 = 11088
tv3908 = 11088
tv3894 = 11088
tv3880 = 11088
tv3834 = 11088
tv3820 = 11088
tv3806 = 11088
tv3792 = 11088
tv3778 = 11088
tv2957 = 11088
tv5356 = 11092
tv5323 = 11092
tv2964 = 11092
tv5360 = 11096
tv5327 = 11096
tv5183 = 11096
tv5364 = 11100
tv5331 = 11100
tv5368 = 11104
tv5188 = 11104
tv5372 = 11108
tv5376 = 11112
tv5193 = 11112
tv5198 = 11120
tv5201 = 11128
tv5205 = 11132
tv5208 = 11136
tv5211 = 11140
tv5214 = 11144
tv5217 = 11148
tv5220 = 11152
tv5223 = 11156
tv5227 = 11160
tv5231 = 11164
tv5235 = 11168
tv5239 = 11172
tv5243 = 11176
tv5247 = 11180
__$ArrayPad$ = 11184
?dtor$4@?0??ShowDemoWindowWidgets@@YAXXZ@4HA PROC	; `ShowDemoWindowWidgets'::`1'::dtor$4
  000a8	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000ad	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000b2	55		 push	 rbp
  000b3	57		 push	 rdi
  000b4	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000b8	48 8d aa c0 00
	00 00		 lea	 rbp, QWORD PTR [rdx+192]
  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS5@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  000c6	e8 00 00 00 00	 call	 _Init_thread_abort
  000cb	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000cf	5f		 pop	 rdi
  000d0	5d		 pop	 rbp
  000d1	c3		 ret	 0
?dtor$4@?0??ShowDemoWindowWidgets@@YAXXZ@4HA ENDP	; `ShowDemoWindowWidgets'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
i$97 = 4
spacing$98 = 36
elems_names$99 = 72
elem_name$100 = 136
items$101 = 176
items$102 = 304
i$103 = 404
node_clicked$104 = 436
i$105 = 468
node_flags$106 = 500
is_selected$107 = 532
node_open$108 = 564
i$109 = 596
i$110 = 628
draw_list$111 = 664
n$112 = 692
pos$113 = 728
marker_min$114 = 760
marker_max$115 = 792
io$116 = 824
my_tex_id$117 = 856
my_tex_w$118 = 884
my_tex_h$119 = 916
pos$120 = 952
uv_min$121 = 984
uv_max$122 = 1016
tint_col$123 = 1048
border_col$124 = 1096
region_sz$125 = 1140
region_x$126 = 1172
region_y$127 = 1204
zoom$128 = 1236
uv0$129 = 1272
uv1$130 = 1304
i$131 = 1332
size$132 = 1368
uv0$133 = 1400
uv1$134 = 1432
bg_col$135 = 1464
tint_col$136 = 1512
items$137 = 1568
combo_preview_value$138 = 1704
n$139 = 1732
is_selected$140 = 1764
items$141 = 1808
n$142 = 1940
is_selected$143 = 1972
n$144 = 2004
is_selected$145 = 2036
n$146 = 2068
buf$147 = 2104
n$148 = 2164
buf$149 = 2200
i$150 = 2260
label$151 = 2296
i$152 = 2356
label$153 = 2392
time$154 = 2452
winning_state$155 = 2484
y$156 = 2516
x$157 = 2548
y$158 = 2580
x$159 = 2612
alignment$160 = 2648
name$161 = 2680
tab_bar_flags$162 = 2740
names$163 = 2776
n$164 = 2836
n$165 = 2868
i$166 = 2900
n$167 = 2932
open$168 = 2964
name$169 = 3000
average$170 = 3044
n$171 = 3076
overlay$172 = 3112
func$173 = 3176
progress_saturated$174 = 3204
buf$175 = 3240
misc_flags$176 = 3300
n$177 = 3332
open_popup$178 = 3364
n$179 = 3396
palette_button_flags$180 = 3428
payload$181 = 3464
payload$182 = 3496
flags$183 = 3524
w$184 = 3556
s8_zero$185 = 3588
s8_one$186 = 3620
s8_fifty$187 = 3652
s8_min$188 = 3684
s8_max$189 = 3716
u8_zero$190 = 3748
u8_one$191 = 3780
u8_fifty$192 = 3812
u8_min$193 = 3844
u8_max$194 = 3876
s16_zero$195 = 3908
s16_one$196 = 3940
s16_fifty$197 = 3972
s16_min$198 = 4004
s16_max$199 = 4036
u16_zero$200 = 4068
u16_one$201 = 4100
u16_fifty$202 = 4132
u16_min$203 = 4164
u16_max$204 = 4196
s32_zero$205 = 4228
s32_one$206 = 4260
s32_fifty$207 = 4292
s32_min$208 = 4324
s32_max$209 = 4356
s32_hi_a$210 = 4388
s32_hi_b$211 = 4420
u32_zero$212 = 4452
u32_one$213 = 4484
u32_fifty$214 = 4516
u32_min$215 = 4548
u32_max$216 = 4580
u32_hi_a$217 = 4612
u32_hi_b$218 = 4644
s64_zero$219 = 4680
s64_one$220 = 4712
s64_fifty$221 = 4744
s64_min$222 = 4776
s64_max$223 = 4808
s64_hi_a$224 = 4840
s64_hi_b$225 = 4872
u64_zero$226 = 4904
u64_one$227 = 4936
u64_fifty$228 = 4968
u64_min$229 = 5000
u64_max$230 = 5032
u64_hi_a$231 = 5064
u64_hi_b$232 = 5096
f32_zero$233 = 5124
f32_one$234 = 5156
f32_lo_a$235 = 5188
f32_hi_a$236 = 5220
f64_zero$237 = 5256
f64_one$238 = 5288
f64_lo_a$239 = 5320
f64_hi_a$240 = 5352
drag_speed$241 = 5380
spacing$242 = 5412
i$243 = 5444
rows$244 = 5476
small_slider_size$245 = 5512
nx$246 = 5540
ny$247 = 5572
i$248 = 5604
n$249 = 5636
payload$250 = 5672
payload_n$251 = 5700
tmp$252 = 5736
n$253 = 5764
item$254 = 5800
n_next$255 = 5828
item_names$256 = 5872
ret$257 = 6020
items$258 = 6056
items$259 = 6120
hovered_delay_none$260 = 6180
hovered_delay_short$261 = 6212
hovered_delay_normal$262 = 6244
buf$263 = 6276
lines$264 = 6320
i$265 = 6404
$T266 = 7972
$T267 = 8004
$T268 = 8052
$T269 = 8100
$T270 = 8148
$T271 = 8196
$T272 = 8244
$T273 = 8292
$T274 = 8324
$T275 = 8356
$T276 = 8404
$T277 = 8452
$T278 = 8484
$T279 = 8516
$T280 = 8548
$T281 = 8580
$T282 = 8612
$T283 = 8644
$T284 = 8676
$T285 = 8708
$T286 = 8740
$T287 = 8772
$T288 = 8804
$T289 = 8836
$T290 = 8868
$T291 = 8900
$T292 = 8932
$T293 = 8964
$T294 = 8996
$T295 = 9028
$T296 = 9060
$T297 = 9092
$T298 = 9124
$T299 = 9156
$T300 = 9188
$T301 = 9220
$T302 = 9252
$T303 = 9284
$T304 = 9316
$T305 = 9348
$T306 = 9380
$T307 = 9412
$T308 = 9444
$T309 = 9476
$T310 = 9508
$T311 = 9540
$T312 = 9572
$T313 = 9604
$T314 = 9636
$T315 = 9668
$T316 = 9700
$T317 = 9732
$T318 = 9764
$T319 = 9796
$T320 = 9828
$T321 = 9860
$T322 = 9892
$T323 = 9940
$T324 = 9972
$T325 = 10004
$T326 = 10036
$T327 = 10068
$T328 = 10100
$T329 = 10132
$T330 = 10180
$T331 = 10228
$T332 = 10276
$T333 = 10324
$T334 = 10372
$T335 = 10420
$T336 = 10468
$T337 = 10516
$T338 = 10548
$T339 = 10580
$T340 = 10612
$T341 = 10644
$T342 = 10676
$T343 = 10708
$T344 = 10740
$T345 = 10772
$T346 = 10804
$T347 = 10836
$T348 = 10868
$T349 = 10900
$T350 = 10932
$T351 = 10964
$T352 = 10996
$T353 = 11028
$T354 = 11064
tv6279 = 11076
tv6275 = 11076
tv6266 = 11076
tv5446 = 11076
tv5340 = 11076
tv5307 = 11076
tv4882 = 11076
tv4750 = 11076
tv4741 = 11076
tv4732 = 11076
tv3328 = 11076
tv3127 = 11076
tv2950 = 11076
tv2890 = 11076
tv2865 = 11076
tv2376 = 11076
tv1967 = 11076
tv1932 = 11076
tv1923 = 11076
tv1668 = 11076
tv1642 = 11076
tv1549 = 11076
tv1485 = 11076
tv1366 = 11076
tv5602 = 11080
tv5344 = 11080
tv5311 = 11080
tv5173 = 11080
tv4681 = 11080
tv4603 = 11080
tv4361 = 11080
tv4351 = 11080
tv4341 = 11080
tv4331 = 11080
tv4321 = 11080
tv4279 = 11080
tv4269 = 11080
tv4259 = 11080
tv4249 = 11080
tv4239 = 11080
tv4229 = 11080
tv4219 = 11080
tv3918 = 11080
tv3904 = 11080
tv3890 = 11080
tv3876 = 11080
tv3830 = 11080
tv3816 = 11080
tv3802 = 11080
tv3788 = 11080
tv3710 = 11080
tv3439 = 11080
tv3410 = 11080
tv2953 = 11080
tv2889 = 11080
tv2829 = 11080
tv2379 = 11080
tv1056 = 11080
tv802 = 11080
tv536 = 11080
tv5348 = 11084
tv5315 = 11084
tv2960 = 11084
tv5352 = 11088
tv5319 = 11088
tv5178 = 11088
tv3922 = 11088
tv3908 = 11088
tv3894 = 11088
tv3880 = 11088
tv3834 = 11088
tv3820 = 11088
tv3806 = 11088
tv3792 = 11088
tv3778 = 11088
tv2957 = 11088
tv5356 = 11092
tv5323 = 11092
tv2964 = 11092
tv5360 = 11096
tv5327 = 11096
tv5183 = 11096
tv5364 = 11100
tv5331 = 11100
tv5368 = 11104
tv5188 = 11104
tv5372 = 11108
tv5376 = 11112
tv5193 = 11112
tv5198 = 11120
tv5201 = 11128
tv5205 = 11132
tv5208 = 11136
tv5211 = 11140
tv5214 = 11144
tv5217 = 11148
tv5220 = 11152
tv5223 = 11156
tv5227 = 11160
tv5231 = 11164
tv5235 = 11168
tv5239 = 11172
tv5243 = 11176
tv5247 = 11180
__$ArrayPad$ = 11184
?dtor$5@?0??ShowDemoWindowWidgets@@YAXXZ@4HA PROC	; `ShowDemoWindowWidgets'::`1'::dtor$5
  000d2	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000d7	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000dc	55		 push	 rbp
  000dd	57		 push	 rdi
  000de	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000e2	48 8d aa c0 00
	00 00		 lea	 rbp, QWORD PTR [rdx+192]
  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS6@?CEK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  000f0	e8 00 00 00 00	 call	 _Init_thread_abort
  000f5	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000f9	5f		 pop	 rdi
  000fa	5d		 pop	 rbp
  000fb	c3		 ret	 0
?dtor$5@?0??ShowDemoWindowWidgets@@YAXXZ@4HA ENDP	; `ShowDemoWindowWidgets'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
i$97 = 4
spacing$98 = 36
elems_names$99 = 72
elem_name$100 = 136
items$101 = 176
items$102 = 304
i$103 = 404
node_clicked$104 = 436
i$105 = 468
node_flags$106 = 500
is_selected$107 = 532
node_open$108 = 564
i$109 = 596
i$110 = 628
draw_list$111 = 664
n$112 = 692
pos$113 = 728
marker_min$114 = 760
marker_max$115 = 792
io$116 = 824
my_tex_id$117 = 856
my_tex_w$118 = 884
my_tex_h$119 = 916
pos$120 = 952
uv_min$121 = 984
uv_max$122 = 1016
tint_col$123 = 1048
border_col$124 = 1096
region_sz$125 = 1140
region_x$126 = 1172
region_y$127 = 1204
zoom$128 = 1236
uv0$129 = 1272
uv1$130 = 1304
i$131 = 1332
size$132 = 1368
uv0$133 = 1400
uv1$134 = 1432
bg_col$135 = 1464
tint_col$136 = 1512
items$137 = 1568
combo_preview_value$138 = 1704
n$139 = 1732
is_selected$140 = 1764
items$141 = 1808
n$142 = 1940
is_selected$143 = 1972
n$144 = 2004
is_selected$145 = 2036
n$146 = 2068
buf$147 = 2104
n$148 = 2164
buf$149 = 2200
i$150 = 2260
label$151 = 2296
i$152 = 2356
label$153 = 2392
time$154 = 2452
winning_state$155 = 2484
y$156 = 2516
x$157 = 2548
y$158 = 2580
x$159 = 2612
alignment$160 = 2648
name$161 = 2680
tab_bar_flags$162 = 2740
names$163 = 2776
n$164 = 2836
n$165 = 2868
i$166 = 2900
n$167 = 2932
open$168 = 2964
name$169 = 3000
average$170 = 3044
n$171 = 3076
overlay$172 = 3112
func$173 = 3176
progress_saturated$174 = 3204
buf$175 = 3240
misc_flags$176 = 3300
n$177 = 3332
open_popup$178 = 3364
n$179 = 3396
palette_button_flags$180 = 3428
payload$181 = 3464
payload$182 = 3496
flags$183 = 3524
w$184 = 3556
s8_zero$185 = 3588
s8_one$186 = 3620
s8_fifty$187 = 3652
s8_min$188 = 3684
s8_max$189 = 3716
u8_zero$190 = 3748
u8_one$191 = 3780
u8_fifty$192 = 3812
u8_min$193 = 3844
u8_max$194 = 3876
s16_zero$195 = 3908
s16_one$196 = 3940
s16_fifty$197 = 3972
s16_min$198 = 4004
s16_max$199 = 4036
u16_zero$200 = 4068
u16_one$201 = 4100
u16_fifty$202 = 4132
u16_min$203 = 4164
u16_max$204 = 4196
s32_zero$205 = 4228
s32_one$206 = 4260
s32_fifty$207 = 4292
s32_min$208 = 4324
s32_max$209 = 4356
s32_hi_a$210 = 4388
s32_hi_b$211 = 4420
u32_zero$212 = 4452
u32_one$213 = 4484
u32_fifty$214 = 4516
u32_min$215 = 4548
u32_max$216 = 4580
u32_hi_a$217 = 4612
u32_hi_b$218 = 4644
s64_zero$219 = 4680
s64_one$220 = 4712
s64_fifty$221 = 4744
s64_min$222 = 4776
s64_max$223 = 4808
s64_hi_a$224 = 4840
s64_hi_b$225 = 4872
u64_zero$226 = 4904
u64_one$227 = 4936
u64_fifty$228 = 4968
u64_min$229 = 5000
u64_max$230 = 5032
u64_hi_a$231 = 5064
u64_hi_b$232 = 5096
f32_zero$233 = 5124
f32_one$234 = 5156
f32_lo_a$235 = 5188
f32_hi_a$236 = 5220
f64_zero$237 = 5256
f64_one$238 = 5288
f64_lo_a$239 = 5320
f64_hi_a$240 = 5352
drag_speed$241 = 5380
spacing$242 = 5412
i$243 = 5444
rows$244 = 5476
small_slider_size$245 = 5512
nx$246 = 5540
ny$247 = 5572
i$248 = 5604
n$249 = 5636
payload$250 = 5672
payload_n$251 = 5700
tmp$252 = 5736
n$253 = 5764
item$254 = 5800
n_next$255 = 5828
item_names$256 = 5872
ret$257 = 6020
items$258 = 6056
items$259 = 6120
hovered_delay_none$260 = 6180
hovered_delay_short$261 = 6212
hovered_delay_normal$262 = 6244
buf$263 = 6276
lines$264 = 6320
i$265 = 6404
$T266 = 7972
$T267 = 8004
$T268 = 8052
$T269 = 8100
$T270 = 8148
$T271 = 8196
$T272 = 8244
$T273 = 8292
$T274 = 8324
$T275 = 8356
$T276 = 8404
$T277 = 8452
$T278 = 8484
$T279 = 8516
$T280 = 8548
$T281 = 8580
$T282 = 8612
$T283 = 8644
$T284 = 8676
$T285 = 8708
$T286 = 8740
$T287 = 8772
$T288 = 8804
$T289 = 8836
$T290 = 8868
$T291 = 8900
$T292 = 8932
$T293 = 8964
$T294 = 8996
$T295 = 9028
$T296 = 9060
$T297 = 9092
$T298 = 9124
$T299 = 9156
$T300 = 9188
$T301 = 9220
$T302 = 9252
$T303 = 9284
$T304 = 9316
$T305 = 9348
$T306 = 9380
$T307 = 9412
$T308 = 9444
$T309 = 9476
$T310 = 9508
$T311 = 9540
$T312 = 9572
$T313 = 9604
$T314 = 9636
$T315 = 9668
$T316 = 9700
$T317 = 9732
$T318 = 9764
$T319 = 9796
$T320 = 9828
$T321 = 9860
$T322 = 9892
$T323 = 9940
$T324 = 9972
$T325 = 10004
$T326 = 10036
$T327 = 10068
$T328 = 10100
$T329 = 10132
$T330 = 10180
$T331 = 10228
$T332 = 10276
$T333 = 10324
$T334 = 10372
$T335 = 10420
$T336 = 10468
$T337 = 10516
$T338 = 10548
$T339 = 10580
$T340 = 10612
$T341 = 10644
$T342 = 10676
$T343 = 10708
$T344 = 10740
$T345 = 10772
$T346 = 10804
$T347 = 10836
$T348 = 10868
$T349 = 10900
$T350 = 10932
$T351 = 10964
$T352 = 10996
$T353 = 11028
$T354 = 11064
tv6279 = 11076
tv6275 = 11076
tv6266 = 11076
tv5446 = 11076
tv5340 = 11076
tv5307 = 11076
tv4882 = 11076
tv4750 = 11076
tv4741 = 11076
tv4732 = 11076
tv3328 = 11076
tv3127 = 11076
tv2950 = 11076
tv2890 = 11076
tv2865 = 11076
tv2376 = 11076
tv1967 = 11076
tv1932 = 11076
tv1923 = 11076
tv1668 = 11076
tv1642 = 11076
tv1549 = 11076
tv1485 = 11076
tv1366 = 11076
tv5602 = 11080
tv5344 = 11080
tv5311 = 11080
tv5173 = 11080
tv4681 = 11080
tv4603 = 11080
tv4361 = 11080
tv4351 = 11080
tv4341 = 11080
tv4331 = 11080
tv4321 = 11080
tv4279 = 11080
tv4269 = 11080
tv4259 = 11080
tv4249 = 11080
tv4239 = 11080
tv4229 = 11080
tv4219 = 11080
tv3918 = 11080
tv3904 = 11080
tv3890 = 11080
tv3876 = 11080
tv3830 = 11080
tv3816 = 11080
tv3802 = 11080
tv3788 = 11080
tv3710 = 11080
tv3439 = 11080
tv3410 = 11080
tv2953 = 11080
tv2889 = 11080
tv2829 = 11080
tv2379 = 11080
tv1056 = 11080
tv802 = 11080
tv536 = 11080
tv5348 = 11084
tv5315 = 11084
tv2960 = 11084
tv5352 = 11088
tv5319 = 11088
tv5178 = 11088
tv3922 = 11088
tv3908 = 11088
tv3894 = 11088
tv3880 = 11088
tv3834 = 11088
tv3820 = 11088
tv3806 = 11088
tv3792 = 11088
tv3778 = 11088
tv2957 = 11088
tv5356 = 11092
tv5323 = 11092
tv2964 = 11092
tv5360 = 11096
tv5327 = 11096
tv5183 = 11096
tv5364 = 11100
tv5331 = 11100
tv5368 = 11104
tv5188 = 11104
tv5372 = 11108
tv5376 = 11112
tv5193 = 11112
tv5198 = 11120
tv5201 = 11128
tv5205 = 11132
tv5208 = 11136
tv5211 = 11140
tv5214 = 11144
tv5217 = 11148
tv5220 = 11152
tv5223 = 11156
tv5227 = 11160
tv5231 = 11164
tv5235 = 11168
tv5239 = 11172
tv5243 = 11176
tv5247 = 11180
__$ArrayPad$ = 11184
?dtor$6@?0??ShowDemoWindowWidgets@@YAXXZ@4HA PROC	; `ShowDemoWindowWidgets'::`1'::dtor$6
  000fc	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00101	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00106	55		 push	 rbp
  00107	57		 push	 rdi
  00108	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0010c	48 8d aa c0 00
	00 00		 lea	 rbp, QWORD PTR [rdx+192]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS7@?DIK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0011a	e8 00 00 00 00	 call	 _Init_thread_abort
  0011f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00123	5f		 pop	 rdi
  00124	5d		 pop	 rbp
  00125	c3		 ret	 0
?dtor$6@?0??ShowDemoWindowWidgets@@YAXXZ@4HA ENDP	; `ShowDemoWindowWidgets'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleMenuFile@@YAXXZ
_TEXT	SEGMENT
i$4 = 4
sz$5 = 36
i$6 = 68
name$7 = 104
p$8 = 136
$T9 = 356
$T10 = 388
$T11 = 420
tv268 = 436
tv273 = 440
__$ArrayPad$ = 448
?ShowExampleMenuFile@@YAXXZ PROC			; ShowExampleMenuFile, COMDAT

; 6414 : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 08 02
	00 00		 sub	 rsp, 520		; 00000208H
  0000a	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00025	48 33 c5	 xor	 rax, rbp
  00028	48 89 85 c0 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
$LN4@ShowExampl:

; 6415 :     IMGUI_DEMO_MARKER("Examples/Menu");

  0002f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00037	74 25		 je	 SHORT $LN20@ShowExampl
  00039	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowExampleMenuFile@@YAXXZ@4JA
  0003f	ff c0		 inc	 eax
  00041	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00048	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@GAOLJPOH@Examples?1Menu?$AA@
  0004f	8b d0		 mov	 edx, eax
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN20@ShowExampl:
  0005e	33 c0		 xor	 eax, eax
  00060	85 c0		 test	 eax, eax
  00062	75 cb		 jne	 SHORT $LN4@ShowExampl

; 6416 :     ImGui::MenuItem("(demo menu)", NULL, false, false);

  00064	45 33 c9	 xor	 r9d, r9d
  00067	45 33 c0	 xor	 r8d, r8d
  0006a	33 d2		 xor	 edx, edx
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@OLDACLJ@?$CIdemo?5menu?$CJ?$AA@
  00073	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem

; 6417 :     if (ImGui::MenuItem("New")) {}

  00078	41 b1 01	 mov	 r9b, 1
  0007b	45 33 c0	 xor	 r8d, r8d
  0007e	33 d2		 xor	 edx, edx
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03ILBCOJBH@New?$AA@
  00087	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  0008c	0f b6 c0	 movzx	 eax, al

; 6418 :     if (ImGui::MenuItem("Open", "Ctrl+O")) {}

  0008f	41 b1 01	 mov	 r9b, 1
  00092	45 33 c0	 xor	 r8d, r8d
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06DGNIABGN@Ctrl?$CLO?$AA@
  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04DNCDCIAE@Open?$AA@
  000a3	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  000a8	0f b6 c0	 movzx	 eax, al

; 6419 :     if (ImGui::BeginMenu("Open Recent"))

  000ab	b2 01		 mov	 dl, 1
  000ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@FFOFICLF@Open?5Recent?$AA@
  000b4	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  000b9	0f b6 c0	 movzx	 eax, al
  000bc	85 c0		 test	 eax, eax
  000be	0f 84 a2 00 00
	00		 je	 $LN23@ShowExampl

; 6420 :     {
; 6421 :         ImGui::MenuItem("fish_hat.c");

  000c4	41 b1 01	 mov	 r9b, 1
  000c7	45 33 c0	 xor	 r8d, r8d
  000ca	33 d2		 xor	 edx, edx
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@MGPNFHBN@fish_hat?4c?$AA@
  000d3	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem

; 6422 :         ImGui::MenuItem("fish_hat.inl");

  000d8	41 b1 01	 mov	 r9b, 1
  000db	45 33 c0	 xor	 r8d, r8d
  000de	33 d2		 xor	 edx, edx
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@OONPEMFD@fish_hat?4inl?$AA@
  000e7	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem

; 6423 :         ImGui::MenuItem("fish_hat.h");

  000ec	41 b1 01	 mov	 r9b, 1
  000ef	45 33 c0	 xor	 r8d, r8d
  000f2	33 d2		 xor	 edx, edx
  000f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@CFAJIONG@fish_hat?4h?$AA@
  000fb	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem

; 6424 :         if (ImGui::BeginMenu("More.."))

  00100	b2 01		 mov	 dl, 1
  00102	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06INDFPOP@More?4?4?$AA@
  00109	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  0010e	0f b6 c0	 movzx	 eax, al
  00111	85 c0		 test	 eax, eax
  00113	74 4c		 je	 SHORT $LN24@ShowExampl

; 6425 :         {
; 6426 :             ImGui::MenuItem("Hello");

  00115	41 b1 01	 mov	 r9b, 1
  00118	45 33 c0	 xor	 r8d, r8d
  0011b	33 d2		 xor	 edx, edx
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05COLMCDPH@Hello?$AA@
  00124	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem

; 6427 :             ImGui::MenuItem("Sailor");

  00129	41 b1 01	 mov	 r9b, 1
  0012c	45 33 c0	 xor	 r8d, r8d
  0012f	33 d2		 xor	 edx, edx
  00131	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IFGMFLK@Sailor?$AA@
  00138	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem

; 6428 :             if (ImGui::BeginMenu("Recurse.."))

  0013d	b2 01		 mov	 dl, 1
  0013f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09JKOAAOOB@Recurse?4?4?$AA@
  00146	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  0014b	0f b6 c0	 movzx	 eax, al
  0014e	85 c0		 test	 eax, eax
  00150	74 0a		 je	 SHORT $LN25@ShowExampl

; 6429 :             {
; 6430 :                 ShowExampleMenuFile();

  00152	e8 00 00 00 00	 call	 ?ShowExampleMenuFile@@YAXXZ ; ShowExampleMenuFile

; 6431 :                 ImGui::EndMenu();

  00157	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN25@ShowExampl:

; 6432 :             }
; 6433 :             ImGui::EndMenu();

  0015c	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN24@ShowExampl:

; 6434 :         }
; 6435 :         ImGui::EndMenu();

  00161	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN23@ShowExampl:

; 6436 :     }
; 6437 :     if (ImGui::MenuItem("Save", "Ctrl+S")) {}

  00166	41 b1 01	 mov	 r9b, 1
  00169	45 33 c0	 xor	 r8d, r8d
  0016c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06NAKPFMDA@Ctrl?$CLS?$AA@
  00173	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04INACKGJP@Save?$AA@
  0017a	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  0017f	0f b6 c0	 movzx	 eax, al

; 6438 :     if (ImGui::MenuItem("Save As..")) {}

  00182	41 b1 01	 mov	 r9b, 1
  00185	45 33 c0	 xor	 r8d, r8d
  00188	33 d2		 xor	 edx, edx
  0018a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09JEJONNAL@Save?5As?4?4?$AA@
  00191	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  00196	0f b6 c0	 movzx	 eax, al

; 6439 : 
; 6440 :     ImGui::Separator();

  00199	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator
$LN7@ShowExampl:

; 6441 :     IMGUI_DEMO_MARKER("Examples/Menu/Options");

  0019e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  001a6	74 26		 je	 SHORT $LN28@ShowExampl
  001a8	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowExampleMenuFile@@YAXXZ@4JA
  001ae	83 c0 1b	 add	 eax, 27
  001b1	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  001b8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BG@BFDGIKBI@Examples?1Menu?1Options?$AA@
  001bf	8b d0		 mov	 edx, eax
  001c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  001c8	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN28@ShowExampl:
  001ce	33 c0		 xor	 eax, eax
  001d0	85 c0		 test	 eax, eax
  001d2	75 ca		 jne	 SHORT $LN7@ShowExampl

; 6442 :     if (ImGui::BeginMenu("Options"))

  001d4	b2 01		 mov	 dl, 1
  001d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07KHIHFBFN@Options?$AA@
  001dd	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  001e2	0f b6 c0	 movzx	 eax, al
  001e5	85 c0		 test	 eax, eax
  001e7	0f 84 ff 00 00
	00		 je	 $LN29@ShowExampl

; 6443 :     {
; 6444 :         static bool enabled = true;
; 6445 :         ImGui::MenuItem("Enabled", "", &enabled);

  001ed	41 b1 01	 mov	 r9b, 1
  001f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?enabled@?CC@??ShowExampleMenuFile@@YAXXZ@4_NA
  001f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  001fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DOAOMMKG@Enabled?$AA@
  00205	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem

; 6446 :         ImGui::BeginChild("child", ImVec2(0, 60), true);

  0020a	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42700000
  00212	0f 57 c9	 xorps	 xmm1, xmm1
  00215	48 8d 8d 64 01
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  0021c	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00221	45 33 c9	 xor	 r9d, r9d
  00224	41 b0 01	 mov	 r8b, 1
  00227	48 8b d0	 mov	 rdx, rax
  0022a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05GPGNDLEK@child?$AA@
  00231	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z ; ImGui::BeginChild

; 6447 :         for (int i = 0; i < 10; i++)

  00236	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  0023d	eb 08		 jmp	 SHORT $LN10@ShowExampl
$LN8@ShowExampl:
  0023f	8b 45 04	 mov	 eax, DWORD PTR i$4[rbp]
  00242	ff c0		 inc	 eax
  00244	89 45 04	 mov	 DWORD PTR i$4[rbp], eax
$LN10@ShowExampl:
  00247	83 7d 04 0a	 cmp	 DWORD PTR i$4[rbp], 10
  0024b	7d 11		 jge	 SHORT $LN9@ShowExampl

; 6448 :             ImGui::Text("Scrolling Text %d", i);

  0024d	8b 55 04	 mov	 edx, DWORD PTR i$4[rbp]
  00250	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@MAFFAEMB@Scrolling?5Text?5?$CFd?$AA@
  00257	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  0025c	eb e1		 jmp	 SHORT $LN8@ShowExampl
$LN9@ShowExampl:

; 6449 :         ImGui::EndChild();

  0025e	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 6450 :         static float f = 0.5f;
; 6451 :         static int n = 0;
; 6452 :         ImGui::SliderFloat("Value", &f, 0.0f, 1.0f);

  00263	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0026b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  00272	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00277	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  0027f	0f 57 d2	 xorps	 xmm2, xmm2
  00282	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f@?CC@??ShowExampleMenuFile@@YAXXZ@4MA
  00289	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LPIJGKJ@Value?$AA@
  00290	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 6453 :         ImGui::InputFloat("Input", &f, 0.1f);

  00295	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0029d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GFJLOHHD@?$CF?43f?$AA@
  002a4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002a9	0f 57 db	 xorps	 xmm3, xmm3
  002ac	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3dcccccd
  002b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?f@?CC@??ShowExampleMenuFile@@YAXXZ@4MA
  002bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05DCDOHKAB@Input?$AA@
  002c2	e8 00 00 00 00	 call	 ?InputFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::InputFloat

; 6454 :         ImGui::Combo("Combo", &n, "Yes\0No\0Maybe\0\0");

  002c7	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  002cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@CHCLHMCH@Yes?$AANo?$AAMaybe?$AA?$AA?$AA@
  002d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?n@?CC@??ShowExampleMenuFile@@YAXXZ@4HA
  002db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LMOJIBPK@Combo?$AA@
  002e2	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAH0H@Z ; ImGui::Combo

; 6455 :         ImGui::EndMenu();

  002e7	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN29@ShowExampl:
$LN13@ShowExampl:

; 6456 :     }
; 6457 : 
; 6458 :     IMGUI_DEMO_MARKER("Examples/Menu/Colors");

  002ec	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  002f4	74 26		 je	 SHORT $LN30@ShowExampl
  002f6	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowExampleMenuFile@@YAXXZ@4JA
  002fc	83 c0 2c	 add	 eax, 44			; 0000002cH
  002ff	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00306	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BF@IOOCHEEB@Examples?1Menu?1Colors?$AA@
  0030d	8b d0		 mov	 edx, eax
  0030f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00316	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN30@ShowExampl:
  0031c	33 c0		 xor	 eax, eax
  0031e	85 c0		 test	 eax, eax
  00320	75 ca		 jne	 SHORT $LN13@ShowExampl

; 6459 :     if (ImGui::BeginMenu("Colors"))

  00322	b2 01		 mov	 dl, 1
  00324	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06ICDCBJPI@Colors?$AA@
  0032b	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  00330	0f b6 c0	 movzx	 eax, al
  00333	85 c0		 test	 eax, eax
  00335	0f 84 04 01 00
	00		 je	 $LN31@ShowExampl

; 6460 :     {
; 6461 :         float sz = ImGui::GetTextLineHeight();

  0033b	e8 00 00 00 00	 call	 ?GetTextLineHeight@ImGui@@YAMXZ ; ImGui::GetTextLineHeight
  00340	f3 0f 11 45 24	 movss	 DWORD PTR sz$5[rbp], xmm0

; 6462 :         for (int i = 0; i < ImGuiCol_COUNT; i++)

  00345	c7 45 44 00 00
	00 00		 mov	 DWORD PTR i$6[rbp], 0
  0034c	eb 08		 jmp	 SHORT $LN16@ShowExampl
$LN14@ShowExampl:
  0034e	8b 45 44	 mov	 eax, DWORD PTR i$6[rbp]
  00351	ff c0		 inc	 eax
  00353	89 45 44	 mov	 DWORD PTR i$6[rbp], eax
$LN16@ShowExampl:
  00356	83 7d 44 35	 cmp	 DWORD PTR i$6[rbp], 53	; 00000035H
  0035a	0f 8d da 00 00
	00		 jge	 $LN15@ShowExampl

; 6463 :         {
; 6464 :             const char* name = ImGui::GetStyleColorName((ImGuiCol)i);

  00360	8b 4d 44	 mov	 ecx, DWORD PTR i$6[rbp]
  00363	e8 00 00 00 00	 call	 ?GetStyleColorName@ImGui@@YAPEBDH@Z ; ImGui::GetStyleColorName
  00368	48 89 45 68	 mov	 QWORD PTR name$7[rbp], rax

; 6465 :             ImVec2 p = ImGui::GetCursorScreenPos();

  0036c	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR p$8[rbp]
  00373	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos

; 6466 :             ImGui::GetWindowDrawList()->AddRectFilled(p, ImVec2(p.x + sz, p.y + sz), ImGui::GetColorU32((ImGuiCol)i));

  00378	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00380	8b 4d 44	 mov	 ecx, DWORD PTR i$6[rbp]
  00383	e8 00 00 00 00	 call	 ?GetColorU32@ImGui@@YAIHM@Z ; ImGui::GetColorU32
  00388	89 85 b4 01 00
	00		 mov	 DWORD PTR tv268[rbp], eax
  0038e	f3 0f 10 85 8c
	00 00 00	 movss	 xmm0, DWORD PTR p$8[rbp+4]
  00396	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR sz$5[rbp]
  0039b	f3 0f 10 8d 88
	00 00 00	 movss	 xmm1, DWORD PTR p$8[rbp]
  003a3	f3 0f 58 4d 24	 addss	 xmm1, DWORD PTR sz$5[rbp]
  003a8	0f 28 d0	 movaps	 xmm2, xmm0
  003ab	48 8d 8d 84 01
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  003b2	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  003b7	48 89 85 b8 01
	00 00		 mov	 QWORD PTR tv273[rbp], rax
  003be	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPEAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  003c3	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  003cb	0f 57 c0	 xorps	 xmm0, xmm0
  003ce	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  003d4	8b 8d b4 01 00
	00		 mov	 ecx, DWORD PTR tv268[rbp]
  003da	44 8b c9	 mov	 r9d, ecx
  003dd	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR tv273[rbp]
  003e4	4c 8b c1	 mov	 r8, rcx
  003e7	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR p$8[rbp]
  003ee	48 8b c8	 mov	 rcx, rax
  003f1	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled

; 6467 :             ImGui::Dummy(ImVec2(sz, sz));

  003f6	f3 0f 10 55 24	 movss	 xmm2, DWORD PTR sz$5[rbp]
  003fb	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR sz$5[rbp]
  00400	48 8d 8d a4 01
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00407	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0040c	48 8b c8	 mov	 rcx, rax
  0040f	e8 00 00 00 00	 call	 ?Dummy@ImGui@@YAXAEBUImVec2@@@Z ; ImGui::Dummy

; 6468 :             ImGui::SameLine();

  00414	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0041c	0f 57 c0	 xorps	 xmm0, xmm0
  0041f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6469 :             ImGui::MenuItem(name);

  00424	41 b1 01	 mov	 r9b, 1
  00427	45 33 c0	 xor	 r8d, r8d
  0042a	33 d2		 xor	 edx, edx
  0042c	48 8b 4d 68	 mov	 rcx, QWORD PTR name$7[rbp]
  00430	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem

; 6470 :         }

  00435	e9 14 ff ff ff	 jmp	 $LN14@ShowExampl
$LN15@ShowExampl:

; 6471 :         ImGui::EndMenu();

  0043a	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN31@ShowExampl:

; 6472 :     }
; 6473 : 
; 6474 :     // Here we demonstrate appending again to the "Options" menu (which we already created above)
; 6475 :     // Of course in this demo it is a little bit silly that this function calls BeginMenu("Options") twice.
; 6476 :     // In a real code-base using it would make senses to use this feature from very different code locations.
; 6477 :     if (ImGui::BeginMenu("Options")) // <-- Append!

  0043f	b2 01		 mov	 dl, 1
  00441	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07KHIHFBFN@Options?$AA@
  00448	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  0044d	0f b6 c0	 movzx	 eax, al
  00450	85 c0		 test	 eax, eax
  00452	74 4e		 je	 SHORT $LN32@ShowExampl
$LN19@ShowExampl:

; 6478 :     {
; 6479 :         IMGUI_DEMO_MARKER("Examples/Menu/Append to an existing menu");

  00454	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0045c	74 26		 je	 SHORT $LN33@ShowExampl
  0045e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowExampleMenuFile@@YAXXZ@4JA
  00464	83 c0 41	 add	 eax, 65			; 00000041H
  00467	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0046e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CJ@HMLLIHM@Examples?1Menu?1Append?5to?5an?5exist@
  00475	8b d0		 mov	 edx, eax
  00477	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0047e	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN33@ShowExampl:
  00484	33 c0		 xor	 eax, eax
  00486	85 c0		 test	 eax, eax
  00488	75 ca		 jne	 SHORT $LN19@ShowExampl

; 6480 :         static bool b = true;
; 6481 :         ImGui::Checkbox("SomeOption", &b);

  0048a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?b@?CP@??ShowExampleMenuFile@@YAXXZ@4_NA
  00491	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@CLAHFOAE@SomeOption?$AA@
  00498	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 6482 :         ImGui::EndMenu();

  0049d	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN32@ShowExampl:

; 6483 :     }
; 6484 : 
; 6485 :     if (ImGui::BeginMenu("Disabled", false)) // Disabled

  004a2	33 d2		 xor	 edx, edx
  004a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08JGILNPHN@Disabled?$AA@
  004ab	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  004b0	0f b6 c0	 movzx	 eax, al
  004b3	85 c0		 test	 eax, eax
  004b5	74 28		 je	 SHORT $LN34@ShowExampl

; 6486 :     {
; 6487 :         IM_ASSERT(0);

  004b7	33 c0		 xor	 eax, eax
  004b9	85 c0		 test	 eax, eax
  004bb	75 22		 jne	 SHORT $LN38@ShowExampl
  004bd	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowExampleMenuFile@@YAXXZ@4JA
  004c3	83 c0 49	 add	 eax, 73			; 00000049H
  004c6	44 8b c0	 mov	 r8d, eax
  004c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@DPDGFNDC@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  004d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  004d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004dd	33 c0		 xor	 eax, eax
$LN38@ShowExampl:
$LN34@ShowExampl:

; 6488 :     }
; 6489 :     if (ImGui::MenuItem("Checked", NULL, true)) {}

  004df	41 b1 01	 mov	 r9b, 1
  004e2	41 b0 01	 mov	 r8b, 1
  004e5	33 d2		 xor	 edx, edx
  004e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07KAJHKDAE@Checked?$AA@
  004ee	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  004f3	0f b6 c0	 movzx	 eax, al

; 6490 :     if (ImGui::MenuItem("Quit", "Alt+F4")) {}

  004f6	41 b1 01	 mov	 r9b, 1
  004f9	45 33 c0	 xor	 r8d, r8d
  004fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06ELIFPNNI@Alt?$CLF4?$AA@
  00503	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GMBKPCGK@Quit?$AA@
  0050a	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  0050f	0f b6 c0	 movzx	 eax, al

; 6491 : }

  00512	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00516	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShowExampleMenuFile@@YAXXZ$rtcFrameData
  0051d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00522	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00529	48 33 cd	 xor	 rcx, rbp
  0052c	e8 00 00 00 00	 call	 __security_check_cookie
  00531	48 8d a5 d8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+472]
  00538	5f		 pop	 rdi
  00539	5d		 pop	 rbp
  0053a	c3		 ret	 0
?ShowExampleMenuFile@@YAXXZ ENDP			; ShowExampleMenuFile
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppCustomRendering@@YAXPEA_N@Z
_TEXT	SEGMENT
draw_list$20 = 8
gradient_size$21 = 40
p0$22 = 72
p1$23 = 104
col_a$24 = 132
col_b$25 = 164
p0$26 = 200
p1$27 = 232
col_a$28 = 260
col_b$29 = 292
p$30 = 328
col$31 = 356
spacing$32 = 388
corners_tl_br$33 = 420
rounding$34 = 452
circle_segments$35 = 484
curve_segments$36 = 516
x$37 = 548
y$38 = 580
n$39 = 612
th$40 = 644
cp3$41 = 680
cp4$42 = 728
canvas_p0$43 = 792
canvas_sz$44 = 824
canvas_p1$45 = 856
io$46 = 888
draw_list$47 = 920
is_hovered$48 = 948
is_active$49 = 980
origin$50 = 1016
mouse_pos_in_canvas$51 = 1048
mouse_threshold_for_pan$52 = 1076
drag_delta$53 = 1112
GRID_STEP$54 = 1140
x$55 = 1172
y$56 = 1204
n$57 = 1236
window_pos$58 = 1272
window_size$59 = 1304
window_center$60 = 1336
$T61 = 2516
$T62 = 2564
$T63 = 2596
$T64 = 2628
$T65 = 2660
$T66 = 2692
$T67 = 2724
$T68 = 2756
$T69 = 2788
$T70 = 2820
$T71 = 2852
$T72 = 2884
$T73 = 2916
$T74 = 2948
$T75 = 2980
$T76 = 3012
$T77 = 3044
$T78 = 3076
$T79 = 3108
$T80 = 3140
$T81 = 3172
$T82 = 3204
$T83 = 3236
$T84 = 3268
$T85 = 3300
$T86 = 3332
$T87 = 3364
$T88 = 3396
$T89 = 3428
$T90 = 3460
$T91 = 3492
$T92 = 3524
$T93 = 3556
$T94 = 3588
$T95 = 3620
$T96 = 3652
$T97 = 3684
$T98 = 3716
$T99 = 3748
$T100 = 3780
$T101 = 3812
$T102 = 3844
$T103 = 3876
$T104 = 3908
$T105 = 3944
tv1115 = 3956
tv1105 = 3956
tv1047 = 3956
tv981 = 3956
tv967 = 3956
tv930 = 3956
tv590 = 3956
tv574 = 3956
tv319 = 3956
tv302 = 3956
tv297 = 3956
tv291 = 3956
tv288 = 3956
tv233 = 3956
tv215 = 3956
tv128 = 3956
tv1041 = 3960
tv1024 = 3960
tv1004 = 3960
tv773 = 3960
tv755 = 3960
tv738 = 3960
tv720 = 3960
tv692 = 3960
tv676 = 3960
tv626 = 3960
tv608 = 3960
tv598 = 3960
tv582 = 3960
tv566 = 3960
tv483 = 3960
tv468 = 3960
tv452 = 3960
tv425 = 3960
tv408 = 3960
tv389 = 3960
tv370 = 3960
tv359 = 3960
tv310 = 3960
tv1063 = 3968
tv699 = 3968
tv432 = 3968
__$ArrayPad$ = 3976
p_open$ = 4016
?ShowExampleAppCustomRendering@@YAXPEA_N@Z PROC		; ShowExampleAppCustomRendering, COMDAT

; 7475 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 0f
	00 00		 sub	 rsp, 4056		; 00000fd8H
  0000e	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 f6 03 00 00	 mov	 ecx, 1014		; 000003f6H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 f8
	0f 00 00	 mov	 rcx, QWORD PTR [rsp+4088]
  0002a	48 c7 85 68 0f
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T105[rbp], -2
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 88 0f
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 7476 :     if (!ImGui::Begin("Example: Custom rendering", p_open))

  00046	45 33 c0	 xor	 r8d, r8d
  00049	48 8b 95 b0 0f
	00 00		 mov	 rdx, QWORD PTR p_open$[rbp]
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@LABFKPJJ@Example?3?5Custom?5rendering?$AA@
  00057	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin
  0005c	0f b6 c0	 movzx	 eax, al
  0005f	85 c0		 test	 eax, eax
  00061	75 0a		 jne	 SHORT $LN4@ShowExampl

; 7477 :     {
; 7478 :         ImGui::End();

  00063	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 7479 :         return;

  00068	e9 4b 20 00 00	 jmp	 $LN1@ShowExampl
$LN4@ShowExampl:

; 7480 :     }
; 7481 :     IMGUI_DEMO_MARKER("Examples/Custom Rendering");

  0006d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00075	74 26		 je	 SHORT $LN21@ShowExampl
  00077	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4JA
  0007d	83 c0 06	 add	 eax, 6
  00080	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00087	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BK@JKHMHJNE@Examples?1Custom?5Rendering?$AA@
  0008e	8b d0		 mov	 edx, eax
  00090	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN21@ShowExampl:
  0009d	33 c0		 xor	 eax, eax
  0009f	85 c0		 test	 eax, eax
  000a1	75 ca		 jne	 SHORT $LN4@ShowExampl

; 7482 : 
; 7483 :     // Tip: If you do a lot of custom rendering, you probably want to use your own geometrical types and benefit of
; 7484 :     // overloaded operators, etc. Define IM_VEC2_CLASS_EXTRA in imconfig.h to create implicit conversions between your
; 7485 :     // types and ImVec2/ImVec4. Dear ImGui defines overloaded operators but they are internal to imgui.cpp and not
; 7486 :     // exposed outside (to avoid messing with your types) In this example we are not using the maths operators!
; 7487 : 
; 7488 :     if (ImGui::BeginTabBar("##TabBar"))

  000a3	33 d2		 xor	 edx, edx
  000a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08EHLCCPCB@?$CD?$CDTabBar?$AA@
  000ac	e8 00 00 00 00	 call	 ?BeginTabBar@ImGui@@YA_NPEBDH@Z ; ImGui::BeginTabBar
  000b1	0f b6 c0	 movzx	 eax, al
  000b4	85 c0		 test	 eax, eax
  000b6	0f 84 f7 1f 00
	00		 je	 $LN22@ShowExampl

; 7489 :     {
; 7490 :         if (ImGui::BeginTabItem("Primitives"))

  000bc	45 33 c0	 xor	 r8d, r8d
  000bf	33 d2		 xor	 edx, edx
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@LLLBMLGE@Primitives?$AA@
  000c8	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginTabItem
  000cd	0f b6 c0	 movzx	 eax, al
  000d0	85 c0		 test	 eax, eax
  000d2	0f 84 fb 15 00
	00		 je	 $LN23@ShowExampl

; 7491 :         {
; 7492 :             ImGui::PushItemWidth(-ImGui::GetFontSize() * 15);

  000d8	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  000dd	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000e4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41700000
  000ec	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth

; 7493 :             ImDrawList* draw_list = ImGui::GetWindowDrawList();

  000f1	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPEAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  000f6	48 89 45 08	 mov	 QWORD PTR draw_list$20[rbp], rax

; 7494 : 
; 7495 :             // Draw gradients
; 7496 :             // (note that those are currently exacerbating our sRGB/Linear issues)
; 7497 :             // Calling ImGui::GetColorU32() multiplies the given colors by the current Style Alpha, but you may pass the IM_COL32() directly as well..
; 7498 :             ImGui::Text("Gradients");

  000fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09CPMEGEPG@Gradients?$AA@
  00101	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 7499 :             ImVec2 gradient_size = ImVec2(ImGui::CalcItemWidth(), ImGui::GetFrameHeight());

  00106	e8 00 00 00 00	 call	 ?GetFrameHeight@ImGui@@YAMXZ ; ImGui::GetFrameHeight
  0010b	f3 0f 11 85 74
	0f 00 00	 movss	 DWORD PTR tv128[rbp], xmm0
  00113	e8 00 00 00 00	 call	 ?CalcItemWidth@ImGui@@YAMXZ ; ImGui::CalcItemWidth
  00118	f3 0f 10 8d 74
	0f 00 00	 movss	 xmm1, DWORD PTR tv128[rbp]
  00120	0f 28 d1	 movaps	 xmm2, xmm1
  00123	0f 28 c8	 movaps	 xmm1, xmm0
  00126	48 8d 4d 28	 lea	 rcx, QWORD PTR gradient_size$21[rbp]
  0012a	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 7500 :             {
; 7501 :                 ImVec2 p0 = ImGui::GetCursorScreenPos();

  0012f	48 8d 4d 48	 lea	 rcx, QWORD PTR p0$22[rbp]
  00133	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos

; 7502 :                 ImVec2 p1 = ImVec2(p0.x + gradient_size.x, p0.y + gradient_size.y);

  00138	f3 0f 10 45 4c	 movss	 xmm0, DWORD PTR p0$22[rbp+4]
  0013d	f3 0f 58 45 2c	 addss	 xmm0, DWORD PTR gradient_size$21[rbp+4]
  00142	f3 0f 10 4d 48	 movss	 xmm1, DWORD PTR p0$22[rbp]
  00147	f3 0f 58 4d 28	 addss	 xmm1, DWORD PTR gradient_size$21[rbp]
  0014c	0f 28 d0	 movaps	 xmm2, xmm0
  0014f	48 8d 4d 68	 lea	 rcx, QWORD PTR p1$23[rbp]
  00153	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 7503 :                 ImU32 col_a = ImGui::GetColorU32(IM_COL32(0, 0, 0, 255));

  00158	b9 00 00 00 ff	 mov	 ecx, -16777216		; ff000000H
  0015d	e8 00 00 00 00	 call	 ?GetColorU32@ImGui@@YAII@Z ; ImGui::GetColorU32
  00162	89 85 84 00 00
	00		 mov	 DWORD PTR col_a$24[rbp], eax

; 7504 :                 ImU32 col_b = ImGui::GetColorU32(IM_COL32(255, 255, 255, 255));

  00168	b9 ff ff ff ff	 mov	 ecx, -1			; ffffffffH
  0016d	e8 00 00 00 00	 call	 ?GetColorU32@ImGui@@YAII@Z ; ImGui::GetColorU32
  00172	89 85 a4 00 00
	00		 mov	 DWORD PTR col_b$25[rbp], eax

; 7505 :                 draw_list->AddRectFilledMultiColor(p0, p1, col_a, col_b, col_b, col_a);

  00178	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR col_a$24[rbp]
  0017e	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00182	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR col_b$25[rbp]
  00188	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0018c	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR col_b$25[rbp]
  00192	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00196	44 8b 8d 84 00
	00 00		 mov	 r9d, DWORD PTR col_a$24[rbp]
  0019d	4c 8d 45 68	 lea	 r8, QWORD PTR p1$23[rbp]
  001a1	48 8d 55 48	 lea	 rdx, QWORD PTR p0$22[rbp]
  001a5	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  001a9	e8 00 00 00 00	 call	 ?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z ; ImDrawList::AddRectFilledMultiColor

; 7506 :                 ImGui::InvisibleButton("##gradient1", gradient_size);

  001ae	45 33 c0	 xor	 r8d, r8d
  001b1	48 8d 55 28	 lea	 rdx, QWORD PTR gradient_size$21[rbp]
  001b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@EKFIAEGG@?$CD?$CDgradient1?$AA@
  001bc	e8 00 00 00 00	 call	 ?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z ; ImGui::InvisibleButton

; 7507 :             }
; 7508 :             {
; 7509 :                 ImVec2 p0 = ImGui::GetCursorScreenPos();

  001c1	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR p0$26[rbp]
  001c8	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos

; 7510 :                 ImVec2 p1 = ImVec2(p0.x + gradient_size.x, p0.y + gradient_size.y);

  001cd	f3 0f 10 85 cc
	00 00 00	 movss	 xmm0, DWORD PTR p0$26[rbp+4]
  001d5	f3 0f 58 45 2c	 addss	 xmm0, DWORD PTR gradient_size$21[rbp+4]
  001da	f3 0f 10 8d c8
	00 00 00	 movss	 xmm1, DWORD PTR p0$26[rbp]
  001e2	f3 0f 58 4d 28	 addss	 xmm1, DWORD PTR gradient_size$21[rbp]
  001e7	0f 28 d0	 movaps	 xmm2, xmm0
  001ea	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR p1$27[rbp]
  001f1	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 7511 :                 ImU32 col_a = ImGui::GetColorU32(IM_COL32(0, 255, 0, 255));

  001f6	b9 00 ff 00 ff	 mov	 ecx, -16711936		; ff00ff00H
  001fb	e8 00 00 00 00	 call	 ?GetColorU32@ImGui@@YAII@Z ; ImGui::GetColorU32
  00200	89 85 04 01 00
	00		 mov	 DWORD PTR col_a$28[rbp], eax

; 7512 :                 ImU32 col_b = ImGui::GetColorU32(IM_COL32(255, 0, 0, 255));

  00206	b9 ff 00 00 ff	 mov	 ecx, -16776961		; ff0000ffH
  0020b	e8 00 00 00 00	 call	 ?GetColorU32@ImGui@@YAII@Z ; ImGui::GetColorU32
  00210	89 85 24 01 00
	00		 mov	 DWORD PTR col_b$29[rbp], eax

; 7513 :                 draw_list->AddRectFilledMultiColor(p0, p1, col_a, col_b, col_b, col_a);

  00216	8b 85 04 01 00
	00		 mov	 eax, DWORD PTR col_a$28[rbp]
  0021c	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00220	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR col_b$29[rbp]
  00226	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0022a	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR col_b$29[rbp]
  00230	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00234	44 8b 8d 04 01
	00 00		 mov	 r9d, DWORD PTR col_a$28[rbp]
  0023b	4c 8d 85 e8 00
	00 00		 lea	 r8, QWORD PTR p1$27[rbp]
  00242	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR p0$26[rbp]
  00249	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  0024d	e8 00 00 00 00	 call	 ?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z ; ImDrawList::AddRectFilledMultiColor

; 7514 :                 ImGui::InvisibleButton("##gradient2", gradient_size);

  00252	45 33 c0	 xor	 r8d, r8d
  00255	48 8d 55 28	 lea	 rdx, QWORD PTR gradient_size$21[rbp]
  00259	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GBHFFHKF@?$CD?$CDgradient2?$AA@
  00260	e8 00 00 00 00	 call	 ?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z ; ImGui::InvisibleButton

; 7515 :             }
; 7516 : 
; 7517 :             // Draw a bunch of primitives
; 7518 :             ImGui::Text("All primitives");

  00265	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@NICJPAHE@All?5primitives?$AA@
  0026c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 7519 :             static float sz = 36.0f;
; 7520 :             static float thickness = 3.0f;
; 7521 :             static int ngon_sides = 6;
; 7522 :             static bool circle_segments_override = false;
; 7523 :             static int circle_segments_override_v = 12;
; 7524 :             static bool curve_segments_override = false;
; 7525 :             static int curve_segments_override_v = 8;
; 7526 :             static ImVec4 colf = ImVec4(1.0f, 1.0f, 0.4f, 1.0f);

  00271	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  00276	8b c0		 mov	 eax, eax
  00278	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0027e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00287	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0028b	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  0028e	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS0@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA, eax
  00294	7e 54		 jle	 SHORT $LN5@ShowExampl
  00296	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
  0029d	e8 00 00 00 00	 call	 _Init_thread_header
  002a2	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA, -1
  002a9	75 3f		 jne	 SHORT $LN5@ShowExampl
  002ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002b3	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  002b9	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3ecccccd
  002c1	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  002c9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  002d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?colf@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4UImVec4@@A
  002d8	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  002dd	90		 npad	 1
  002de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
  002e5	e8 00 00 00 00	 call	 _Init_thread_footer
$LN5@ShowExampl:

; 7527 :             ImGui::DragFloat("Size", &sz, 0.2f, 2.0f, 100.0f, "%.0f");

  002ea	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  002f2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  002f9	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  002fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00306	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0030c	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@40000000
  00314	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e4ccccd
  0031c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00323	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04EBKMHHBE@Size?$AA@
  0032a	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 7528 :             ImGui::DragFloat("Thickness", &thickness, 0.05f, 1.0f, 8.0f, "%.02f");

  0032f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00337	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05IDMOFOMC@?$CF?402f?$AA@
  0033e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00343	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  0034b	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00351	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00359	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3d4ccccd
  00361	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?thickness@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00368	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09CEKHLCFH@Thickness?$AA@
  0036f	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 7529 :             ImGui::SliderInt("N-gon sides", &ngon_sides, 3, 12);

  00374	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0037c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  00383	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00388	41 b9 0c 00 00
	00		 mov	 r9d, 12
  0038e	41 b8 03 00 00
	00		 mov	 r8d, 3
  00394	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ngon_sides@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
  0039b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@ENJDGMDO@N?9gon?5sides?$AA@
  003a2	e8 00 00 00 00	 call	 ?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z ; ImGui::SliderInt

; 7530 :             ImGui::Checkbox("##circlesegmentoverride", &circle_segments_override);

  003a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?circle_segments_override@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA
  003ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@BDDBJMAI@?$CD?$CDcirclesegmentoverride?$AA@
  003b5	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 7531 :             ImGui::SameLine(0.0f, ImGui::GetStyle().ItemInnerSpacing.x);

  003ba	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  003bf	f3 0f 10 48 54	 movss	 xmm1, DWORD PTR [rax+84]
  003c4	0f 57 c0	 xorps	 xmm0, xmm0
  003c7	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 7532 :             circle_segments_override |= ImGui::SliderInt("Circle segments override", &circle_segments_override_v, 3, 40);

  003cc	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?circle_segments_override@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA
  003d3	89 85 74 0f 00
	00		 mov	 DWORD PTR tv215[rbp], eax
  003d9	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  003e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  003e8	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  003ed	41 b9 28 00 00
	00		 mov	 r9d, 40			; 00000028H
  003f3	41 b8 03 00 00
	00		 mov	 r8d, 3
  003f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?circle_segments_override_v@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
  00400	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@DMOGAKFD@Circle?5segments?5override?$AA@
  00407	e8 00 00 00 00	 call	 ?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z ; ImGui::SliderInt
  0040c	0f b6 c0	 movzx	 eax, al
  0040f	8b 8d 74 0f 00
	00		 mov	 ecx, DWORD PTR tv215[rbp]
  00415	0b c8		 or	 ecx, eax
  00417	8b c1		 mov	 eax, ecx
  00419	88 05 00 00 00
	00		 mov	 BYTE PTR ?circle_segments_override@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA, al

; 7533 :             ImGui::Checkbox("##curvessegmentoverride", &curve_segments_override);

  0041f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?curve_segments_override@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA
  00426	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@KHAADAB@?$CD?$CDcurvessegmentoverride?$AA@
  0042d	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 7534 :             ImGui::SameLine(0.0f, ImGui::GetStyle().ItemInnerSpacing.x);

  00432	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  00437	f3 0f 10 48 54	 movss	 xmm1, DWORD PTR [rax+84]
  0043c	0f 57 c0	 xorps	 xmm0, xmm0
  0043f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 7535 :             curve_segments_override |= ImGui::SliderInt("Curves segments override", &curve_segments_override_v, 3, 40);

  00444	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?curve_segments_override@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA
  0044b	89 85 74 0f 00
	00		 mov	 DWORD PTR tv233[rbp], eax
  00451	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00459	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  00460	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00465	41 b9 28 00 00
	00		 mov	 r9d, 40			; 00000028H
  0046b	41 b8 03 00 00
	00		 mov	 r8d, 3
  00471	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?curve_segments_override_v@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
  00478	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@MEDFNGBG@Curves?5segments?5override?$AA@
  0047f	e8 00 00 00 00	 call	 ?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z ; ImGui::SliderInt
  00484	0f b6 c0	 movzx	 eax, al
  00487	8b 8d 74 0f 00
	00		 mov	 ecx, DWORD PTR tv233[rbp]
  0048d	0b c8		 or	 ecx, eax
  0048f	8b c1		 mov	 eax, ecx
  00491	88 05 00 00 00
	00		 mov	 BYTE PTR ?curve_segments_override@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA, al

; 7536 :             ImGui::ColorEdit4("Color", &colf.x);

  00497	45 33 c0	 xor	 r8d, r8d
  0049a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?colf@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4UImVec4@@A
  004a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05PDOBBJNA@Color?$AA@
  004a8	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z ; ImGui::ColorEdit4

; 7537 : 
; 7538 :             const ImVec2 p = ImGui::GetCursorScreenPos();

  004ad	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR p$30[rbp]
  004b4	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos

; 7539 :             const ImU32 col = ImColor(colf);

  004b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?colf@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4UImVec4@@A
  004c0	48 8d 8d d4 09
	00 00		 lea	 rcx, QWORD PTR $T61[rbp]
  004c7	e8 00 00 00 00	 call	 ??0ImColor@@QEAA@AEBUImVec4@@@Z ; ImColor::ImColor
  004cc	48 8b c8	 mov	 rcx, rax
  004cf	e8 00 00 00 00	 call	 ??BImColor@@QEBAIXZ	; ImColor::operator unsigned int
  004d4	89 85 64 01 00
	00		 mov	 DWORD PTR col$31[rbp], eax

; 7540 :             const float spacing = 10.0f;

  004da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  004e2	f3 0f 11 85 84
	01 00 00	 movss	 DWORD PTR spacing$32[rbp], xmm0

; 7541 :             const ImDrawFlags corners_tl_br = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersBottomRight;

  004ea	c7 85 a4 01 00
	00 90 00 00 00	 mov	 DWORD PTR corners_tl_br$33[rbp], 144 ; 00000090H

; 7542 :             const float rounding = sz / 5.0f;

  004f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  004fc	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40a00000
  00504	f3 0f 11 85 c4
	01 00 00	 movss	 DWORD PTR rounding$34[rbp], xmm0

; 7543 :             const int circle_segments = circle_segments_override ? circle_segments_override_v : 0;

  0050c	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?circle_segments_override@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA
  00513	85 c0		 test	 eax, eax
  00515	74 0e		 je	 SHORT $LN41@ShowExampl
  00517	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?circle_segments_override_v@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
  0051d	89 85 74 0f 00
	00		 mov	 DWORD PTR tv288[rbp], eax
  00523	eb 0a		 jmp	 SHORT $LN42@ShowExampl
$LN41@ShowExampl:
  00525	c7 85 74 0f 00
	00 00 00 00 00	 mov	 DWORD PTR tv288[rbp], 0
$LN42@ShowExampl:
  0052f	8b 85 74 0f 00
	00		 mov	 eax, DWORD PTR tv288[rbp]
  00535	89 85 e4 01 00
	00		 mov	 DWORD PTR circle_segments$35[rbp], eax

; 7544 :             const int curve_segments = curve_segments_override ? curve_segments_override_v : 0;

  0053b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?curve_segments_override@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA
  00542	85 c0		 test	 eax, eax
  00544	74 0e		 je	 SHORT $LN43@ShowExampl
  00546	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?curve_segments_override_v@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
  0054c	89 85 74 0f 00
	00		 mov	 DWORD PTR tv291[rbp], eax
  00552	eb 0a		 jmp	 SHORT $LN44@ShowExampl
$LN43@ShowExampl:
  00554	c7 85 74 0f 00
	00 00 00 00 00	 mov	 DWORD PTR tv291[rbp], 0
$LN44@ShowExampl:
  0055e	8b 85 74 0f 00
	00		 mov	 eax, DWORD PTR tv291[rbp]
  00564	89 85 04 02 00
	00		 mov	 DWORD PTR curve_segments$36[rbp], eax

; 7545 :             float x = p.x + 4.0f;

  0056a	f3 0f 10 85 48
	01 00 00	 movss	 xmm0, DWORD PTR p$30[rbp]
  00572	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40800000
  0057a	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7546 :             float y = p.y + 4.0f;

  00582	f3 0f 10 85 4c
	01 00 00	 movss	 xmm0, DWORD PTR p$30[rbp+4]
  0058a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40800000
  00592	f3 0f 11 85 44
	02 00 00	 movss	 DWORD PTR y$38[rbp], xmm0

; 7547 :             for (int n = 0; n < 2; n++)

  0059a	c7 85 64 02 00
	00 00 00 00 00	 mov	 DWORD PTR n$39[rbp], 0
  005a4	eb 0e		 jmp	 SHORT $LN8@ShowExampl
$LN6@ShowExampl:
  005a6	8b 85 64 02 00
	00		 mov	 eax, DWORD PTR n$39[rbp]
  005ac	ff c0		 inc	 eax
  005ae	89 85 64 02 00
	00		 mov	 DWORD PTR n$39[rbp], eax
$LN8@ShowExampl:
  005b4	83 bd 64 02 00
	00 02		 cmp	 DWORD PTR n$39[rbp], 2
  005bb	0f 8d e2 09 00
	00		 jge	 $LN7@ShowExampl

; 7548 :             {
; 7549 :                 // First line uses a thickness of 1.0f, second line uses the configurable thickness
; 7550 :                 float th = (n == 0) ? 1.0f : thickness;

  005c1	83 bd 64 02 00
	00 00		 cmp	 DWORD PTR n$39[rbp], 0
  005c8	75 12		 jne	 SHORT $LN45@ShowExampl
  005ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005d2	f3 0f 11 85 74
	0f 00 00	 movss	 DWORD PTR tv297[rbp], xmm0
  005da	eb 10		 jmp	 SHORT $LN46@ShowExampl
$LN45@ShowExampl:
  005dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?thickness@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  005e4	f3 0f 11 85 74
	0f 00 00	 movss	 DWORD PTR tv297[rbp], xmm0
$LN46@ShowExampl:
  005ec	f3 0f 10 85 74
	0f 00 00	 movss	 xmm0, DWORD PTR tv297[rbp]
  005f4	f3 0f 11 85 84
	02 00 00	 movss	 DWORD PTR th$40[rbp], xmm0

; 7551 :                 draw_list->AddNgon(ImVec2(x + sz*0.5f, y + sz*0.5f), sz*0.5f, col, ngon_sides, th);                 x += sz + spacing;  // N-gon

  005fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00604	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0060c	f3 0f 11 85 74
	0f 00 00	 movss	 DWORD PTR tv302[rbp], xmm0
  00614	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  0061c	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  00624	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  0062c	f3 0f 58 d1	 addss	 xmm2, xmm1
  00630	0f 28 ca	 movaps	 xmm1, xmm2
  00633	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  0063b	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@3f000000
  00643	f3 0f 10 9d 24
	02 00 00	 movss	 xmm3, DWORD PTR x$37[rbp]
  0064b	f3 0f 58 da	 addss	 xmm3, xmm2
  0064f	0f 28 d3	 movaps	 xmm2, xmm3
  00652	f3 0f 11 95 78
	0f 00 00	 movss	 DWORD PTR tv310[rbp], xmm2
  0065a	0f 28 d1	 movaps	 xmm2, xmm1
  0065d	f3 0f 10 8d 78
	0f 00 00	 movss	 xmm1, DWORD PTR tv310[rbp]
  00665	48 8d 8d 04 0a
	00 00		 lea	 rcx, QWORD PTR $T62[rbp]
  0066c	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00671	f3 0f 10 85 84
	02 00 00	 movss	 xmm0, DWORD PTR th$40[rbp]
  00679	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  0067f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ngon_sides@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
  00685	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00689	44 8b 8d 64 01
	00 00		 mov	 r9d, DWORD PTR col$31[rbp]
  00690	f3 0f 10 85 74
	0f 00 00	 movss	 xmm0, DWORD PTR tv302[rbp]
  00698	0f 28 d0	 movaps	 xmm2, xmm0
  0069b	48 8b d0	 mov	 rdx, rax
  0069e	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  006a2	e8 00 00 00 00	 call	 ?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z ; ImDrawList::AddNgon
  006a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  006af	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  006b7	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  006bf	f3 0f 58 c8	 addss	 xmm1, xmm0
  006c3	0f 28 c1	 movaps	 xmm0, xmm1
  006c6	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7552 :                 draw_list->AddCircle(ImVec2(x + sz*0.5f, y + sz*0.5f), sz*0.5f, col, circle_segments, th);          x += sz + spacing;  // Circle

  006ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  006d6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  006de	f3 0f 11 85 74
	0f 00 00	 movss	 DWORD PTR tv319[rbp], xmm0
  006e6	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  006ee	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  006f6	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  006fe	f3 0f 58 d1	 addss	 xmm2, xmm1
  00702	0f 28 ca	 movaps	 xmm1, xmm2
  00705	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  0070d	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@3f000000
  00715	f3 0f 10 9d 24
	02 00 00	 movss	 xmm3, DWORD PTR x$37[rbp]
  0071d	f3 0f 58 da	 addss	 xmm3, xmm2
  00721	0f 28 d3	 movaps	 xmm2, xmm3
  00724	f3 0f 11 95 78
	0f 00 00	 movss	 DWORD PTR tv359[rbp], xmm2
  0072c	0f 28 d1	 movaps	 xmm2, xmm1
  0072f	f3 0f 10 8d 78
	0f 00 00	 movss	 xmm1, DWORD PTR tv359[rbp]
  00737	48 8d 8d 24 0a
	00 00		 lea	 rcx, QWORD PTR $T63[rbp]
  0073e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00743	f3 0f 10 85 84
	02 00 00	 movss	 xmm0, DWORD PTR th$40[rbp]
  0074b	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00751	8b 8d e4 01 00
	00		 mov	 ecx, DWORD PTR circle_segments$35[rbp]
  00757	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0075b	44 8b 8d 64 01
	00 00		 mov	 r9d, DWORD PTR col$31[rbp]
  00762	f3 0f 10 85 74
	0f 00 00	 movss	 xmm0, DWORD PTR tv319[rbp]
  0076a	0f 28 d0	 movaps	 xmm2, xmm0
  0076d	48 8b d0	 mov	 rdx, rax
  00770	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  00774	e8 00 00 00 00	 call	 ?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z ; ImDrawList::AddCircle
  00779	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00781	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  00789	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00791	f3 0f 58 c8	 addss	 xmm1, xmm0
  00795	0f 28 c1	 movaps	 xmm0, xmm1
  00798	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7553 :                 draw_list->AddRect(ImVec2(x, y), ImVec2(x + sz, y + sz), col, 0.0f, ImDrawFlags_None, th);          x += sz + spacing;  // Square

  007a0	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR y$38[rbp]
  007a8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  007b0	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  007b8	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  007c0	0f 28 d0	 movaps	 xmm2, xmm0
  007c3	48 8d 8d 44 0a
	00 00		 lea	 rcx, QWORD PTR $T64[rbp]
  007ca	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  007cf	48 89 85 78 0f
	00 00		 mov	 QWORD PTR tv370[rbp], rax
  007d6	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  007de	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  007e6	48 8d 8d 64 0a
	00 00		 lea	 rcx, QWORD PTR $T65[rbp]
  007ed	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  007f2	f3 0f 10 85 84
	02 00 00	 movss	 xmm0, DWORD PTR th$40[rbp]
  007fa	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00800	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00808	0f 57 c0	 xorps	 xmm0, xmm0
  0080b	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00811	44 8b 8d 64 01
	00 00		 mov	 r9d, DWORD PTR col$31[rbp]
  00818	48 8b 8d 78 0f
	00 00		 mov	 rcx, QWORD PTR tv370[rbp]
  0081f	4c 8b c1	 mov	 r8, rcx
  00822	48 8b d0	 mov	 rdx, rax
  00825	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  00829	e8 00 00 00 00	 call	 ?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z ; ImDrawList::AddRect
  0082e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00836	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  0083e	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00846	f3 0f 58 c8	 addss	 xmm1, xmm0
  0084a	0f 28 c1	 movaps	 xmm0, xmm1
  0084d	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7554 :                 draw_list->AddRect(ImVec2(x, y), ImVec2(x + sz, y + sz), col, rounding, ImDrawFlags_None, th);      x += sz + spacing;  // Square with all rounded corners

  00855	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR y$38[rbp]
  0085d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00865	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  0086d	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00875	0f 28 d0	 movaps	 xmm2, xmm0
  00878	48 8d 8d 84 0a
	00 00		 lea	 rcx, QWORD PTR $T66[rbp]
  0087f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00884	48 89 85 78 0f
	00 00		 mov	 QWORD PTR tv389[rbp], rax
  0088b	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  00893	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  0089b	48 8d 8d a4 0a
	00 00		 lea	 rcx, QWORD PTR $T67[rbp]
  008a2	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  008a7	f3 0f 10 85 84
	02 00 00	 movss	 xmm0, DWORD PTR th$40[rbp]
  008af	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  008b5	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  008bd	f3 0f 10 85 c4
	01 00 00	 movss	 xmm0, DWORD PTR rounding$34[rbp]
  008c5	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  008cb	44 8b 8d 64 01
	00 00		 mov	 r9d, DWORD PTR col$31[rbp]
  008d2	48 8b 8d 78 0f
	00 00		 mov	 rcx, QWORD PTR tv389[rbp]
  008d9	4c 8b c1	 mov	 r8, rcx
  008dc	48 8b d0	 mov	 rdx, rax
  008df	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  008e3	e8 00 00 00 00	 call	 ?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z ; ImDrawList::AddRect
  008e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  008f0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  008f8	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00900	f3 0f 58 c8	 addss	 xmm1, xmm0
  00904	0f 28 c1	 movaps	 xmm0, xmm1
  00907	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7555 :                 draw_list->AddRect(ImVec2(x, y), ImVec2(x + sz, y + sz), col, rounding, corners_tl_br, th);         x += sz + spacing;  // Square with two rounded corners

  0090f	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR y$38[rbp]
  00917	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  0091f	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00927	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  0092f	0f 28 d0	 movaps	 xmm2, xmm0
  00932	48 8d 8d c4 0a
	00 00		 lea	 rcx, QWORD PTR $T68[rbp]
  00939	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0093e	48 89 85 78 0f
	00 00		 mov	 QWORD PTR tv408[rbp], rax
  00945	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  0094d	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00955	48 8d 8d e4 0a
	00 00		 lea	 rcx, QWORD PTR $T69[rbp]
  0095c	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00961	f3 0f 10 85 84
	02 00 00	 movss	 xmm0, DWORD PTR th$40[rbp]
  00969	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  0096f	c7 44 24 28 90
	00 00 00	 mov	 DWORD PTR [rsp+40], 144	; 00000090H
  00977	f3 0f 10 85 c4
	01 00 00	 movss	 xmm0, DWORD PTR rounding$34[rbp]
  0097f	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00985	44 8b 8d 64 01
	00 00		 mov	 r9d, DWORD PTR col$31[rbp]
  0098c	48 8b 8d 78 0f
	00 00		 mov	 rcx, QWORD PTR tv408[rbp]
  00993	4c 8b c1	 mov	 r8, rcx
  00996	48 8b d0	 mov	 rdx, rax
  00999	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  0099d	e8 00 00 00 00	 call	 ?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z ; ImDrawList::AddRect
  009a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  009aa	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  009b2	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  009ba	f3 0f 58 c8	 addss	 xmm1, xmm0
  009be	0f 28 c1	 movaps	 xmm0, xmm1
  009c1	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7556 :                 draw_list->AddTriangle(ImVec2(x+sz*0.5f,y), ImVec2(x+sz, y+sz-0.5f), ImVec2(x, y+sz-0.5f), col, th);x += sz + spacing;  // Triangle

  009c9	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR y$38[rbp]
  009d1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  009d9	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  009e1	0f 28 d0	 movaps	 xmm2, xmm0
  009e4	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  009ec	48 8d 8d 04 0b
	00 00		 lea	 rcx, QWORD PTR $T70[rbp]
  009f3	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  009f8	48 89 85 78 0f
	00 00		 mov	 QWORD PTR tv425[rbp], rax
  009ff	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR y$38[rbp]
  00a07	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00a0f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  00a17	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00a1f	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00a27	0f 28 d0	 movaps	 xmm2, xmm0
  00a2a	48 8d 8d 24 0b
	00 00		 lea	 rcx, QWORD PTR $T71[rbp]
  00a31	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00a36	48 89 85 80 0f
	00 00		 mov	 QWORD PTR tv432[rbp], rax
  00a3d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00a45	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00a4d	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00a55	f3 0f 58 c8	 addss	 xmm1, xmm0
  00a59	0f 28 c1	 movaps	 xmm0, xmm1
  00a5c	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  00a64	0f 28 c8	 movaps	 xmm1, xmm0
  00a67	48 8d 8d 44 0b
	00 00		 lea	 rcx, QWORD PTR $T72[rbp]
  00a6e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00a73	f3 0f 10 85 84
	02 00 00	 movss	 xmm0, DWORD PTR th$40[rbp]
  00a7b	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00a81	8b 8d 64 01 00
	00		 mov	 ecx, DWORD PTR col$31[rbp]
  00a87	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00a8b	48 8b 8d 78 0f
	00 00		 mov	 rcx, QWORD PTR tv425[rbp]
  00a92	4c 8b c9	 mov	 r9, rcx
  00a95	48 8b 8d 80 0f
	00 00		 mov	 rcx, QWORD PTR tv432[rbp]
  00a9c	4c 8b c1	 mov	 r8, rcx
  00a9f	48 8b d0	 mov	 rdx, rax
  00aa2	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  00aa6	e8 00 00 00 00	 call	 ?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z ; ImDrawList::AddTriangle
  00aab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00ab3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  00abb	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00ac3	f3 0f 58 c8	 addss	 xmm1, xmm0
  00ac7	0f 28 c1	 movaps	 xmm0, xmm1
  00aca	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7557 :                 //draw_list->AddTriangle(ImVec2(x+sz*0.2f,y), ImVec2(x, y+sz-0.5f), ImVec2(x+sz*0.4f, y+sz-0.5f), col, th);x+= sz*0.4f + spacing; // Thin triangle
; 7558 :                 draw_list->AddLine(ImVec2(x, y), ImVec2(x + sz, y), col, th);                                       x += sz + spacing;  // Horizontal line (note: drawing a filled rectangle will be faster!)

  00ad2	f3 0f 10 85 24
	02 00 00	 movss	 xmm0, DWORD PTR x$37[rbp]
  00ada	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00ae2	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  00aea	0f 28 c8	 movaps	 xmm1, xmm0
  00aed	48 8d 8d 64 0b
	00 00		 lea	 rcx, QWORD PTR $T73[rbp]
  00af4	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00af9	48 89 85 78 0f
	00 00		 mov	 QWORD PTR tv452[rbp], rax
  00b00	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  00b08	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00b10	48 8d 8d 84 0b
	00 00		 lea	 rcx, QWORD PTR $T74[rbp]
  00b17	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00b1c	f3 0f 10 85 84
	02 00 00	 movss	 xmm0, DWORD PTR th$40[rbp]
  00b24	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00b2a	44 8b 8d 64 01
	00 00		 mov	 r9d, DWORD PTR col$31[rbp]
  00b31	48 8b 8d 78 0f
	00 00		 mov	 rcx, QWORD PTR tv452[rbp]
  00b38	4c 8b c1	 mov	 r8, rcx
  00b3b	48 8b d0	 mov	 rdx, rax
  00b3e	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  00b42	e8 00 00 00 00	 call	 ?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
  00b47	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00b4f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  00b57	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00b5f	f3 0f 58 c8	 addss	 xmm1, xmm0
  00b63	0f 28 c1	 movaps	 xmm0, xmm1
  00b66	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7559 :                 draw_list->AddLine(ImVec2(x, y), ImVec2(x, y + sz), col, th);                                       x += spacing;       // Vertical line (note: drawing a filled rectangle will be faster!)

  00b6e	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR y$38[rbp]
  00b76	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00b7e	0f 28 d0	 movaps	 xmm2, xmm0
  00b81	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00b89	48 8d 8d a4 0b
	00 00		 lea	 rcx, QWORD PTR $T75[rbp]
  00b90	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00b95	48 89 85 78 0f
	00 00		 mov	 QWORD PTR tv468[rbp], rax
  00b9c	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  00ba4	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00bac	48 8d 8d c4 0b
	00 00		 lea	 rcx, QWORD PTR $T76[rbp]
  00bb3	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00bb8	f3 0f 10 85 84
	02 00 00	 movss	 xmm0, DWORD PTR th$40[rbp]
  00bc0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00bc6	44 8b 8d 64 01
	00 00		 mov	 r9d, DWORD PTR col$31[rbp]
  00bcd	48 8b 8d 78 0f
	00 00		 mov	 rcx, QWORD PTR tv468[rbp]
  00bd4	4c 8b c1	 mov	 r8, rcx
  00bd7	48 8b d0	 mov	 rdx, rax
  00bda	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  00bde	e8 00 00 00 00	 call	 ?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
  00be3	f3 0f 10 85 24
	02 00 00	 movss	 xmm0, DWORD PTR x$37[rbp]
  00beb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  00bf3	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7560 :                 draw_list->AddLine(ImVec2(x, y), ImVec2(x + sz, y + sz), col, th);                                  x += sz + spacing;  // Diagonal line

  00bfb	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR y$38[rbp]
  00c03	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00c0b	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00c13	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00c1b	0f 28 d0	 movaps	 xmm2, xmm0
  00c1e	48 8d 8d e4 0b
	00 00		 lea	 rcx, QWORD PTR $T77[rbp]
  00c25	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00c2a	48 89 85 78 0f
	00 00		 mov	 QWORD PTR tv483[rbp], rax
  00c31	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  00c39	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00c41	48 8d 8d 04 0c
	00 00		 lea	 rcx, QWORD PTR $T78[rbp]
  00c48	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00c4d	f3 0f 10 85 84
	02 00 00	 movss	 xmm0, DWORD PTR th$40[rbp]
  00c55	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00c5b	44 8b 8d 64 01
	00 00		 mov	 r9d, DWORD PTR col$31[rbp]
  00c62	48 8b 8d 78 0f
	00 00		 mov	 rcx, QWORD PTR tv483[rbp]
  00c69	4c 8b c1	 mov	 r8, rcx
  00c6c	48 8b d0	 mov	 rdx, rax
  00c6f	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  00c73	e8 00 00 00 00	 call	 ?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
  00c78	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00c80	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  00c88	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00c90	f3 0f 58 c8	 addss	 xmm1, xmm0
  00c94	0f 28 c1	 movaps	 xmm0, xmm1
  00c97	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7561 : 
; 7562 :                 // Quadratic Bezier Curve (3 control points)
; 7563 :                 ImVec2 cp3[3] = { ImVec2(x, y + sz * 0.6f), ImVec2(x + sz * 0.5f, y - sz * 0.4f), ImVec2(x + sz, y + sz) };

  00c9f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00ca7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f19999a
  00caf	f3 0f 10 8d 44
	02 00 00	 movss	 xmm1, DWORD PTR y$38[rbp]
  00cb7	f3 0f 58 c8	 addss	 xmm1, xmm0
  00cbb	0f 28 c1	 movaps	 xmm0, xmm1
  00cbe	0f 28 d0	 movaps	 xmm2, xmm0
  00cc1	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00cc9	48 8d 8d a8 02
	00 00		 lea	 rcx, QWORD PTR cp3$41[rbp]
  00cd0	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00cd5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00cdd	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ecccccd
  00ce5	f3 0f 10 8d 44
	02 00 00	 movss	 xmm1, DWORD PTR y$38[rbp]
  00ced	f3 0f 5c c8	 subss	 xmm1, xmm0
  00cf1	0f 28 c1	 movaps	 xmm0, xmm1
  00cf4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00cfc	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  00d04	f3 0f 10 95 24
	02 00 00	 movss	 xmm2, DWORD PTR x$37[rbp]
  00d0c	f3 0f 58 d1	 addss	 xmm2, xmm1
  00d10	0f 28 ca	 movaps	 xmm1, xmm2
  00d13	0f 28 d0	 movaps	 xmm2, xmm0
  00d16	48 8d 8d b0 02
	00 00		 lea	 rcx, QWORD PTR cp3$41[rbp+8]
  00d1d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00d22	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR y$38[rbp]
  00d2a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00d32	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00d3a	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00d42	0f 28 d0	 movaps	 xmm2, xmm0
  00d45	48 8d 8d b8 02
	00 00		 lea	 rcx, QWORD PTR cp3$41[rbp+16]
  00d4c	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 7564 :                 draw_list->AddBezierQuadratic(cp3[0], cp3[1], cp3[2], col, th, curve_segments); x += sz + spacing;

  00d51	b8 08 00 00 00	 mov	 eax, 8
  00d56	48 6b c0 02	 imul	 rax, rax, 2
  00d5a	48 8d 84 05 a8
	02 00 00	 lea	 rax, QWORD PTR cp3$41[rbp+rax]
  00d62	b9 08 00 00 00	 mov	 ecx, 8
  00d67	48 6b c9 01	 imul	 rcx, rcx, 1
  00d6b	48 8d 8c 0d a8
	02 00 00	 lea	 rcx, QWORD PTR cp3$41[rbp+rcx]
  00d73	ba 08 00 00 00	 mov	 edx, 8
  00d78	48 6b d2 00	 imul	 rdx, rdx, 0
  00d7c	48 8d 94 15 a8
	02 00 00	 lea	 rdx, QWORD PTR cp3$41[rbp+rdx]
  00d84	44 8b 85 04 02
	00 00		 mov	 r8d, DWORD PTR curve_segments$36[rbp]
  00d8b	44 89 44 24 30	 mov	 DWORD PTR [rsp+48], r8d
  00d90	f3 0f 10 85 84
	02 00 00	 movss	 xmm0, DWORD PTR th$40[rbp]
  00d98	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  00d9e	44 8b 85 64 01
	00 00		 mov	 r8d, DWORD PTR col$31[rbp]
  00da5	44 89 44 24 20	 mov	 DWORD PTR [rsp+32], r8d
  00daa	4c 8b c8	 mov	 r9, rax
  00dad	4c 8b c1	 mov	 r8, rcx
  00db0	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  00db4	e8 00 00 00 00	 call	 ?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z ; ImDrawList::AddBezierQuadratic
  00db9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00dc1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  00dc9	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00dd1	f3 0f 58 c8	 addss	 xmm1, xmm0
  00dd5	0f 28 c1	 movaps	 xmm0, xmm1
  00dd8	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7565 : 
; 7566 :                 // Cubic Bezier Curve (4 control points)
; 7567 :                 ImVec2 cp4[4] = { ImVec2(x, y), ImVec2(x + sz * 1.3f, y + sz * 0.3f), ImVec2(x + sz - sz * 1.3f, y + sz - sz * 0.3f), ImVec2(x + sz, y + sz) };

  00de0	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  00de8	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00df0	48 8d 8d d8 02
	00 00		 lea	 rcx, QWORD PTR cp4$42[rbp]
  00df7	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00dfc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00e04	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e99999a
  00e0c	f3 0f 10 8d 44
	02 00 00	 movss	 xmm1, DWORD PTR y$38[rbp]
  00e14	f3 0f 58 c8	 addss	 xmm1, xmm0
  00e18	0f 28 c1	 movaps	 xmm0, xmm1
  00e1b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00e23	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3fa66666
  00e2b	f3 0f 10 95 24
	02 00 00	 movss	 xmm2, DWORD PTR x$37[rbp]
  00e33	f3 0f 58 d1	 addss	 xmm2, xmm1
  00e37	0f 28 ca	 movaps	 xmm1, xmm2
  00e3a	0f 28 d0	 movaps	 xmm2, xmm0
  00e3d	48 8d 8d e0 02
	00 00		 lea	 rcx, QWORD PTR cp4$42[rbp+8]
  00e44	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00e49	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR y$38[rbp]
  00e51	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00e59	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00e61	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3e99999a
  00e69	f3 0f 5c c1	 subss	 xmm0, xmm1
  00e6d	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00e75	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00e7d	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00e85	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@3fa66666
  00e8d	f3 0f 5c ca	 subss	 xmm1, xmm2
  00e91	0f 28 d0	 movaps	 xmm2, xmm0
  00e94	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR cp4$42[rbp+16]
  00e9b	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00ea0	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR y$38[rbp]
  00ea8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00eb0	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  00eb8	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00ec0	0f 28 d0	 movaps	 xmm2, xmm0
  00ec3	48 8d 8d f0 02
	00 00		 lea	 rcx, QWORD PTR cp4$42[rbp+24]
  00eca	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 7568 :                 draw_list->AddBezierCubic(cp4[0], cp4[1], cp4[2], cp4[3], col, th, curve_segments);

  00ecf	b8 08 00 00 00	 mov	 eax, 8
  00ed4	48 6b c0 03	 imul	 rax, rax, 3
  00ed8	48 8d 84 05 d8
	02 00 00	 lea	 rax, QWORD PTR cp4$42[rbp+rax]
  00ee0	b9 08 00 00 00	 mov	 ecx, 8
  00ee5	48 6b c9 02	 imul	 rcx, rcx, 2
  00ee9	48 8d 8c 0d d8
	02 00 00	 lea	 rcx, QWORD PTR cp4$42[rbp+rcx]
  00ef1	ba 08 00 00 00	 mov	 edx, 8
  00ef6	48 6b d2 01	 imul	 rdx, rdx, 1
  00efa	48 8d 94 15 d8
	02 00 00	 lea	 rdx, QWORD PTR cp4$42[rbp+rdx]
  00f02	41 b8 08 00 00
	00		 mov	 r8d, 8
  00f08	4d 6b c0 00	 imul	 r8, r8, 0
  00f0c	4e 8d 84 05 d8
	02 00 00	 lea	 r8, QWORD PTR cp4$42[rbp+r8]
  00f14	4c 89 85 78 0f
	00 00		 mov	 QWORD PTR tv566[rbp], r8
  00f1b	44 8b 8d 04 02
	00 00		 mov	 r9d, DWORD PTR curve_segments$36[rbp]
  00f22	44 89 4c 24 38	 mov	 DWORD PTR [rsp+56], r9d
  00f27	f3 0f 10 85 84
	02 00 00	 movss	 xmm0, DWORD PTR th$40[rbp]
  00f2f	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  00f35	44 8b 8d 64 01
	00 00		 mov	 r9d, DWORD PTR col$31[rbp]
  00f3c	44 89 4c 24 28	 mov	 DWORD PTR [rsp+40], r9d
  00f41	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00f46	4c 8b c9	 mov	 r9, rcx
  00f49	4c 8b c2	 mov	 r8, rdx
  00f4c	48 8b 85 78 0f
	00 00		 mov	 rax, QWORD PTR tv566[rbp]
  00f53	48 8b d0	 mov	 rdx, rax
  00f56	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  00f5a	e8 00 00 00 00	 call	 ?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z ; ImDrawList::AddBezierCubic

; 7569 : 
; 7570 :                 x = p.x + 4;

  00f5f	f3 0f 10 85 48
	01 00 00	 movss	 xmm0, DWORD PTR p$30[rbp]
  00f67	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40800000
  00f6f	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7571 :                 y += sz + spacing;

  00f77	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00f7f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  00f87	f3 0f 10 8d 44
	02 00 00	 movss	 xmm1, DWORD PTR y$38[rbp]
  00f8f	f3 0f 58 c8	 addss	 xmm1, xmm0
  00f93	0f 28 c1	 movaps	 xmm0, xmm1
  00f96	f3 0f 11 85 44
	02 00 00	 movss	 DWORD PTR y$38[rbp], xmm0

; 7572 :             }

  00f9e	e9 03 f6 ff ff	 jmp	 $LN6@ShowExampl
$LN7@ShowExampl:

; 7573 :             draw_list->AddNgonFilled(ImVec2(x + sz * 0.5f, y + sz * 0.5f), sz*0.5f, col, ngon_sides);               x += sz + spacing;  // N-gon

  00fa3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00fab	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00fb3	f3 0f 11 85 74
	0f 00 00	 movss	 DWORD PTR tv574[rbp], xmm0
  00fbb	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00fc3	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  00fcb	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  00fd3	f3 0f 58 d1	 addss	 xmm2, xmm1
  00fd7	0f 28 ca	 movaps	 xmm1, xmm2
  00fda	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  00fe2	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@3f000000
  00fea	f3 0f 10 9d 24
	02 00 00	 movss	 xmm3, DWORD PTR x$37[rbp]
  00ff2	f3 0f 58 da	 addss	 xmm3, xmm2
  00ff6	0f 28 d3	 movaps	 xmm2, xmm3
  00ff9	f3 0f 11 95 78
	0f 00 00	 movss	 DWORD PTR tv582[rbp], xmm2
  01001	0f 28 d1	 movaps	 xmm2, xmm1
  01004	f3 0f 10 8d 78
	0f 00 00	 movss	 xmm1, DWORD PTR tv582[rbp]
  0100c	48 8d 8d 24 0c
	00 00		 lea	 rcx, QWORD PTR $T79[rbp]
  01013	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01018	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ngon_sides@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
  0101e	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  01022	44 8b 8d 64 01
	00 00		 mov	 r9d, DWORD PTR col$31[rbp]
  01029	f3 0f 10 85 74
	0f 00 00	 movss	 xmm0, DWORD PTR tv574[rbp]
  01031	0f 28 d0	 movaps	 xmm2, xmm0
  01034	48 8b d0	 mov	 rdx, rax
  01037	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  0103b	e8 00 00 00 00	 call	 ?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z ; ImDrawList::AddNgonFilled
  01040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  01048	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  01050	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  01058	f3 0f 58 c8	 addss	 xmm1, xmm0
  0105c	0f 28 c1	 movaps	 xmm0, xmm1
  0105f	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7574 :             draw_list->AddCircleFilled(ImVec2(x + sz*0.5f, y + sz*0.5f), sz*0.5f, col, circle_segments);            x += sz + spacing;  // Circle

  01067	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  0106f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  01077	f3 0f 11 85 74
	0f 00 00	 movss	 DWORD PTR tv590[rbp], xmm0
  0107f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  01087	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  0108f	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  01097	f3 0f 58 d1	 addss	 xmm2, xmm1
  0109b	0f 28 ca	 movaps	 xmm1, xmm2
  0109e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  010a6	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@3f000000
  010ae	f3 0f 10 9d 24
	02 00 00	 movss	 xmm3, DWORD PTR x$37[rbp]
  010b6	f3 0f 58 da	 addss	 xmm3, xmm2
  010ba	0f 28 d3	 movaps	 xmm2, xmm3
  010bd	f3 0f 11 95 78
	0f 00 00	 movss	 DWORD PTR tv598[rbp], xmm2
  010c5	0f 28 d1	 movaps	 xmm2, xmm1
  010c8	f3 0f 10 8d 78
	0f 00 00	 movss	 xmm1, DWORD PTR tv598[rbp]
  010d0	48 8d 8d 44 0c
	00 00		 lea	 rcx, QWORD PTR $T80[rbp]
  010d7	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  010dc	8b 8d e4 01 00
	00		 mov	 ecx, DWORD PTR circle_segments$35[rbp]
  010e2	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  010e6	44 8b 8d 64 01
	00 00		 mov	 r9d, DWORD PTR col$31[rbp]
  010ed	f3 0f 10 85 74
	0f 00 00	 movss	 xmm0, DWORD PTR tv590[rbp]
  010f5	0f 28 d0	 movaps	 xmm2, xmm0
  010f8	48 8b d0	 mov	 rdx, rax
  010fb	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  010ff	e8 00 00 00 00	 call	 ?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z ; ImDrawList::AddCircleFilled
  01104	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  0110c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  01114	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  0111c	f3 0f 58 c8	 addss	 xmm1, xmm0
  01120	0f 28 c1	 movaps	 xmm0, xmm1
  01123	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7575 :             draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + sz, y + sz), col);                                    x += sz + spacing;  // Square

  0112b	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR y$38[rbp]
  01133	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  0113b	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  01143	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  0114b	0f 28 d0	 movaps	 xmm2, xmm0
  0114e	48 8d 8d 64 0c
	00 00		 lea	 rcx, QWORD PTR $T81[rbp]
  01155	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0115a	48 89 85 78 0f
	00 00		 mov	 QWORD PTR tv608[rbp], rax
  01161	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  01169	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  01171	48 8d 8d 84 0c
	00 00		 lea	 rcx, QWORD PTR $T82[rbp]
  01178	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0117d	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  01185	0f 57 c0	 xorps	 xmm0, xmm0
  01188	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0118e	44 8b 8d 64 01
	00 00		 mov	 r9d, DWORD PTR col$31[rbp]
  01195	48 8b 8d 78 0f
	00 00		 mov	 rcx, QWORD PTR tv608[rbp]
  0119c	4c 8b c1	 mov	 r8, rcx
  0119f	48 8b d0	 mov	 rdx, rax
  011a2	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  011a6	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
  011ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  011b3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  011bb	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  011c3	f3 0f 58 c8	 addss	 xmm1, xmm0
  011c7	0f 28 c1	 movaps	 xmm0, xmm1
  011ca	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7576 :             draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + sz, y + sz), col, 10.0f);                             x += sz + spacing;  // Square with all rounded corners

  011d2	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR y$38[rbp]
  011da	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  011e2	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  011ea	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  011f2	0f 28 d0	 movaps	 xmm2, xmm0
  011f5	48 8d 8d a4 0c
	00 00		 lea	 rcx, QWORD PTR $T83[rbp]
  011fc	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01201	48 89 85 78 0f
	00 00		 mov	 QWORD PTR tv626[rbp], rax
  01208	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  01210	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  01218	48 8d 8d c4 0c
	00 00		 lea	 rcx, QWORD PTR $T84[rbp]
  0121f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01224	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0122c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  01234	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0123a	44 8b 8d 64 01
	00 00		 mov	 r9d, DWORD PTR col$31[rbp]
  01241	48 8b 8d 78 0f
	00 00		 mov	 rcx, QWORD PTR tv626[rbp]
  01248	4c 8b c1	 mov	 r8, rcx
  0124b	48 8b d0	 mov	 rdx, rax
  0124e	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  01252	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
  01257	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  0125f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  01267	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  0126f	f3 0f 58 c8	 addss	 xmm1, xmm0
  01273	0f 28 c1	 movaps	 xmm0, xmm1
  01276	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7577 :             draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + sz, y + sz), col, 10.0f, corners_tl_br);              x += sz + spacing;  // Square with two rounded corners

  0127e	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR y$38[rbp]
  01286	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  0128e	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  01296	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  0129e	0f 28 d0	 movaps	 xmm2, xmm0
  012a1	48 8d 8d e4 0c
	00 00		 lea	 rcx, QWORD PTR $T85[rbp]
  012a8	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  012ad	48 89 85 78 0f
	00 00		 mov	 QWORD PTR tv676[rbp], rax
  012b4	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  012bc	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  012c4	48 8d 8d 04 0d
	00 00		 lea	 rcx, QWORD PTR $T86[rbp]
  012cb	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  012d0	c7 44 24 28 90
	00 00 00	 mov	 DWORD PTR [rsp+40], 144	; 00000090H
  012d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  012e0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  012e6	44 8b 8d 64 01
	00 00		 mov	 r9d, DWORD PTR col$31[rbp]
  012ed	48 8b 8d 78 0f
	00 00		 mov	 rcx, QWORD PTR tv676[rbp]
  012f4	4c 8b c1	 mov	 r8, rcx
  012f7	48 8b d0	 mov	 rdx, rax
  012fa	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  012fe	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
  01303	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  0130b	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  01313	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  0131b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0131f	0f 28 c1	 movaps	 xmm0, xmm1
  01322	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7578 :             draw_list->AddTriangleFilled(ImVec2(x+sz*0.5f,y), ImVec2(x+sz, y+sz-0.5f), ImVec2(x, y+sz-0.5f), col);  x += sz + spacing;  // Triangle

  0132a	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR y$38[rbp]
  01332	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  0133a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  01342	0f 28 d0	 movaps	 xmm2, xmm0
  01345	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  0134d	48 8d 8d 24 0d
	00 00		 lea	 rcx, QWORD PTR $T87[rbp]
  01354	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01359	48 89 85 78 0f
	00 00		 mov	 QWORD PTR tv692[rbp], rax
  01360	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR y$38[rbp]
  01368	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  01370	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  01378	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  01380	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  01388	0f 28 d0	 movaps	 xmm2, xmm0
  0138b	48 8d 8d 44 0d
	00 00		 lea	 rcx, QWORD PTR $T88[rbp]
  01392	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01397	48 89 85 80 0f
	00 00		 mov	 QWORD PTR tv699[rbp], rax
  0139e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  013a6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  013ae	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  013b6	f3 0f 58 c8	 addss	 xmm1, xmm0
  013ba	0f 28 c1	 movaps	 xmm0, xmm1
  013bd	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  013c5	0f 28 c8	 movaps	 xmm1, xmm0
  013c8	48 8d 8d 64 0d
	00 00		 lea	 rcx, QWORD PTR $T89[rbp]
  013cf	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  013d4	8b 8d 64 01 00
	00		 mov	 ecx, DWORD PTR col$31[rbp]
  013da	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  013de	48 8b 8d 78 0f
	00 00		 mov	 rcx, QWORD PTR tv692[rbp]
  013e5	4c 8b c9	 mov	 r9, rcx
  013e8	48 8b 8d 80 0f
	00 00		 mov	 rcx, QWORD PTR tv699[rbp]
  013ef	4c 8b c1	 mov	 r8, rcx
  013f2	48 8b d0	 mov	 rdx, rax
  013f5	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  013f9	e8 00 00 00 00	 call	 ?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z ; ImDrawList::AddTriangleFilled
  013fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  01406	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  0140e	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  01416	f3 0f 58 c8	 addss	 xmm1, xmm0
  0141a	0f 28 c1	 movaps	 xmm0, xmm1
  0141d	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7579 :             //draw_list->AddTriangleFilled(ImVec2(x+sz*0.2f,y), ImVec2(x, y+sz-0.5f), ImVec2(x+sz*0.4f, y+sz-0.5f), col); x += sz*0.4f + spacing; // Thin triangle
; 7580 :             draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + sz, y + thickness), col);                             x += sz + spacing;  // Horizontal line (faster than AddLine, but only handle integer thickness)

  01425	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR y$38[rbp]
  0142d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?thickness@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  01435	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  0143d	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  01445	0f 28 d0	 movaps	 xmm2, xmm0
  01448	48 8d 8d 84 0d
	00 00		 lea	 rcx, QWORD PTR $T90[rbp]
  0144f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01454	48 89 85 78 0f
	00 00		 mov	 QWORD PTR tv720[rbp], rax
  0145b	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  01463	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  0146b	48 8d 8d a4 0d
	00 00		 lea	 rcx, QWORD PTR $T91[rbp]
  01472	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01477	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0147f	0f 57 c0	 xorps	 xmm0, xmm0
  01482	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01488	44 8b 8d 64 01
	00 00		 mov	 r9d, DWORD PTR col$31[rbp]
  0148f	48 8b 8d 78 0f
	00 00		 mov	 rcx, QWORD PTR tv720[rbp]
  01496	4c 8b c1	 mov	 r8, rcx
  01499	48 8b d0	 mov	 rdx, rax
  0149c	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  014a0	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
  014a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  014ad	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  014b5	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  014bd	f3 0f 58 c8	 addss	 xmm1, xmm0
  014c1	0f 28 c1	 movaps	 xmm0, xmm1
  014c4	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7581 :             draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + thickness, y + sz), col);                             x += spacing * 2.0f;// Vertical line (faster than AddLine, but only handle integer thickness)

  014cc	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR y$38[rbp]
  014d4	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  014dc	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  014e4	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?thickness@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  014ec	0f 28 d0	 movaps	 xmm2, xmm0
  014ef	48 8d 8d c4 0d
	00 00		 lea	 rcx, QWORD PTR $T92[rbp]
  014f6	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  014fb	48 89 85 78 0f
	00 00		 mov	 QWORD PTR tv738[rbp], rax
  01502	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  0150a	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  01512	48 8d 8d e4 0d
	00 00		 lea	 rcx, QWORD PTR $T93[rbp]
  01519	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0151e	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  01526	0f 57 c0	 xorps	 xmm0, xmm0
  01529	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0152f	44 8b 8d 64 01
	00 00		 mov	 r9d, DWORD PTR col$31[rbp]
  01536	48 8b 8d 78 0f
	00 00		 mov	 rcx, QWORD PTR tv738[rbp]
  0153d	4c 8b c1	 mov	 r8, rcx
  01540	48 8b d0	 mov	 rdx, rax
  01543	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  01547	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
  0154c	f3 0f 10 85 24
	02 00 00	 movss	 xmm0, DWORD PTR x$37[rbp]
  01554	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41a00000
  0155c	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7582 :             draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + 1, y + 1), col);                                      x += sz;            // Pixel (faster than AddLine)

  01564	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR y$38[rbp]
  0156c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  01574	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  0157c	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f800000
  01584	0f 28 d0	 movaps	 xmm2, xmm0
  01587	48 8d 8d 04 0e
	00 00		 lea	 rcx, QWORD PTR $T94[rbp]
  0158e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01593	48 89 85 78 0f
	00 00		 mov	 QWORD PTR tv755[rbp], rax
  0159a	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  015a2	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  015aa	48 8d 8d 24 0e
	00 00		 lea	 rcx, QWORD PTR $T95[rbp]
  015b1	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  015b6	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  015be	0f 57 c0	 xorps	 xmm0, xmm0
  015c1	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  015c7	44 8b 8d 64 01
	00 00		 mov	 r9d, DWORD PTR col$31[rbp]
  015ce	48 8b 8d 78 0f
	00 00		 mov	 rcx, QWORD PTR tv755[rbp]
  015d5	4c 8b c1	 mov	 r8, rcx
  015d8	48 8b d0	 mov	 rdx, rax
  015db	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  015df	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
  015e4	f3 0f 10 85 24
	02 00 00	 movss	 xmm0, DWORD PTR x$37[rbp]
  015ec	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  015f4	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR x$37[rbp], xmm0

; 7583 :             draw_list->AddRectFilledMultiColor(ImVec2(x, y), ImVec2(x + sz, y + sz), IM_COL32(0, 0, 0, 255), IM_COL32(255, 0, 0, 255), IM_COL32(255, 255, 0, 255), IM_COL32(0, 255, 0, 255));

  015fc	f3 0f 10 85 44
	02 00 00	 movss	 xmm0, DWORD PTR y$38[rbp]
  01604	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  0160c	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  01614	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  0161c	0f 28 d0	 movaps	 xmm2, xmm0
  0161f	48 8d 8d 44 0e
	00 00		 lea	 rcx, QWORD PTR $T96[rbp]
  01626	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0162b	48 89 85 78 0f
	00 00		 mov	 QWORD PTR tv773[rbp], rax
  01632	f3 0f 10 95 44
	02 00 00	 movss	 xmm2, DWORD PTR y$38[rbp]
  0163a	f3 0f 10 8d 24
	02 00 00	 movss	 xmm1, DWORD PTR x$37[rbp]
  01642	48 8d 8d 64 0e
	00 00		 lea	 rcx, QWORD PTR $T97[rbp]
  01649	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0164e	c7 44 24 30 00
	ff 00 ff	 mov	 DWORD PTR [rsp+48], -16711936 ; ff00ff00H
  01656	c7 44 24 28 ff
	ff 00 ff	 mov	 DWORD PTR [rsp+40], -16711681 ; ff00ffffH
  0165e	c7 44 24 20 ff
	00 00 ff	 mov	 DWORD PTR [rsp+32], -16776961 ; ff0000ffH
  01666	41 b9 00 00 00
	ff		 mov	 r9d, -16777216		; ff000000H
  0166c	48 8b 8d 78 0f
	00 00		 mov	 rcx, QWORD PTR tv773[rbp]
  01673	4c 8b c1	 mov	 r8, rcx
  01676	48 8b d0	 mov	 rdx, rax
  01679	48 8b 4d 08	 mov	 rcx, QWORD PTR draw_list$20[rbp]
  0167d	e8 00 00 00 00	 call	 ?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z ; ImDrawList::AddRectFilledMultiColor

; 7584 : 
; 7585 :             ImGui::Dummy(ImVec2((sz + spacing) * 10.2f, (sz + spacing) * 3.0f));

  01682	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  0168a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  01692	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40400000
  0169a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?sz@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4MA
  016a2	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@41200000
  016aa	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@41233333
  016b2	0f 28 d0	 movaps	 xmm2, xmm0
  016b5	48 8d 8d 84 0e
	00 00		 lea	 rcx, QWORD PTR $T98[rbp]
  016bc	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  016c1	48 8b c8	 mov	 rcx, rax
  016c4	e8 00 00 00 00	 call	 ?Dummy@ImGui@@YAXAEBUImVec2@@@Z ; ImGui::Dummy

; 7586 :             ImGui::PopItemWidth();

  016c9	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 7587 :             ImGui::EndTabItem();

  016ce	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN23@ShowExampl:

; 7588 :         }
; 7589 : 
; 7590 :         if (ImGui::BeginTabItem("Canvas"))

  016d3	45 33 c0	 xor	 r8d, r8d
  016d6	33 d2		 xor	 edx, edx
  016d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06PBIJCONE@Canvas?$AA@
  016df	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginTabItem
  016e4	0f b6 c0	 movzx	 eax, al
  016e7	85 c0		 test	 eax, eax
  016e9	0f 84 1f 08 00
	00		 je	 $LN24@ShowExampl

; 7591 :         {
; 7592 :             static ImVector<ImVec2> points;

  016ef	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  016f4	8b c0		 mov	 eax, eax
  016f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  016fc	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01705	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  01709	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  0170c	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS1@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA, eax
  01712	7e 3a		 jle	 SHORT $LN9@ShowExampl
  01714	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
  0171b	e8 00 00 00 00	 call	 _Init_thread_header
  01720	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS1@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA, -1
  01727	75 25		 jne	 SHORT $LN9@ShowExampl
  01729	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?points@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4U?$ImVector@UImVec2@@@@A
  01730	e8 00 00 00 00	 call	 ??0?$ImVector@UImVec2@@@@QEAA@XZ ; ImVector<ImVec2>::ImVector<ImVec2>
  01735	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__Fpoints@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@YAXXZ ; `ShowExampleAppCustomRendering'::`22'::`dynamic atexit destructor for 'points''
  0173c	e8 00 00 00 00	 call	 atexit
  01741	90		 npad	 1
  01742	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
  01749	e8 00 00 00 00	 call	 _Init_thread_footer
$LN9@ShowExampl:

; 7593 :             static ImVec2 scrolling(0.0f, 0.0f);

  0174e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  01753	8b c0		 mov	 eax, eax
  01755	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0175b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01764	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  01768	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  0176b	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS2@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA, eax
  01771	7e 34		 jle	 SHORT $LN10@ShowExampl
  01773	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS2@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
  0177a	e8 00 00 00 00	 call	 _Init_thread_header
  0177f	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS2@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA, -1
  01786	75 1f		 jne	 SHORT $LN10@ShowExampl
  01788	0f 57 d2	 xorps	 xmm2, xmm2
  0178b	0f 57 c9	 xorps	 xmm1, xmm1
  0178e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?scrolling@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4UImVec2@@A
  01795	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0179a	90		 npad	 1
  0179b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS2@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
  017a2	e8 00 00 00 00	 call	 _Init_thread_footer
$LN10@ShowExampl:

; 7594 :             static bool opt_enable_grid = true;
; 7595 :             static bool opt_enable_context_menu = true;
; 7596 :             static bool adding_line = false;
; 7597 : 
; 7598 :             ImGui::Checkbox("Enable grid", &opt_enable_grid);

  017a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?opt_enable_grid@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA
  017ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@JHCNMMOE@Enable?5grid?$AA@
  017b5	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 7599 :             ImGui::Checkbox("Enable context menu", &opt_enable_context_menu);

  017ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?opt_enable_context_menu@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA
  017c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@IDDJEBPH@Enable?5context?5menu?$AA@
  017c8	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 7600 :             ImGui::Text("Mouse Left: drag to add lines,\nMouse Right: drag to scroll, click for context menu.");

  017cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FE@MNMLMGAD@Mouse?5Left?3?5drag?5to?5add?5lines?0?6M@
  017d4	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 7601 : 
; 7602 :             // Typically you would use a BeginChild()/EndChild() pair to benefit from a clipping region + own scrolling.
; 7603 :             // Here we demonstrate that this can be replaced by simple offsetting + custom drawing + PushClipRect/PopClipRect() calls.
; 7604 :             // To use a child window instead we could use, e.g:
; 7605 :             //      ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0, 0));      // Disable padding
; 7606 :             //      ImGui::PushStyleColor(ImGuiCol_ChildBg, IM_COL32(50, 50, 50, 255));  // Set a background color
; 7607 :             //      ImGui::BeginChild("canvas", ImVec2(0.0f, 0.0f), true, ImGuiWindowFlags_NoMove);
; 7608 :             //      ImGui::PopStyleColor();
; 7609 :             //      ImGui::PopStyleVar();
; 7610 :             //      [...]
; 7611 :             //      ImGui::EndChild();
; 7612 : 
; 7613 :             // Using InvisibleButton() as a convenience 1) it will advance the layout cursor and 2) allows us to use IsItemHovered()/IsItemActive()
; 7614 :             ImVec2 canvas_p0 = ImGui::GetCursorScreenPos();      // ImDrawList API uses screen coordinates!

  017d9	48 8d 8d 18 03
	00 00		 lea	 rcx, QWORD PTR canvas_p0$43[rbp]
  017e0	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos

; 7615 :             ImVec2 canvas_sz = ImGui::GetContentRegionAvail();   // Resize canvas to what's available

  017e5	48 8d 8d 38 03
	00 00		 lea	 rcx, QWORD PTR canvas_sz$44[rbp]
  017ec	e8 00 00 00 00	 call	 ?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail

; 7616 :             if (canvas_sz.x < 50.0f) canvas_sz.x = 50.0f;

  017f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  017f9	0f 2f 85 38 03
	00 00		 comiss	 xmm0, DWORD PTR canvas_sz$44[rbp]
  01800	76 10		 jbe	 SHORT $LN25@ShowExampl
  01802	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  0180a	f3 0f 11 85 38
	03 00 00	 movss	 DWORD PTR canvas_sz$44[rbp], xmm0
$LN25@ShowExampl:

; 7617 :             if (canvas_sz.y < 50.0f) canvas_sz.y = 50.0f;

  01812	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  0181a	0f 2f 85 3c 03
	00 00		 comiss	 xmm0, DWORD PTR canvas_sz$44[rbp+4]
  01821	76 10		 jbe	 SHORT $LN26@ShowExampl
  01823	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  0182b	f3 0f 11 85 3c
	03 00 00	 movss	 DWORD PTR canvas_sz$44[rbp+4], xmm0
$LN26@ShowExampl:

; 7618 :             ImVec2 canvas_p1 = ImVec2(canvas_p0.x + canvas_sz.x, canvas_p0.y + canvas_sz.y);

  01833	f3 0f 10 85 1c
	03 00 00	 movss	 xmm0, DWORD PTR canvas_p0$43[rbp+4]
  0183b	f3 0f 58 85 3c
	03 00 00	 addss	 xmm0, DWORD PTR canvas_sz$44[rbp+4]
  01843	f3 0f 10 8d 18
	03 00 00	 movss	 xmm1, DWORD PTR canvas_p0$43[rbp]
  0184b	f3 0f 58 8d 38
	03 00 00	 addss	 xmm1, DWORD PTR canvas_sz$44[rbp]
  01853	0f 28 d0	 movaps	 xmm2, xmm0
  01856	48 8d 8d 58 03
	00 00		 lea	 rcx, QWORD PTR canvas_p1$45[rbp]
  0185d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 7619 : 
; 7620 :             // Draw border and background color
; 7621 :             ImGuiIO& io = ImGui::GetIO();

  01862	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  01867	48 89 85 78 03
	00 00		 mov	 QWORD PTR io$46[rbp], rax

; 7622 :             ImDrawList* draw_list = ImGui::GetWindowDrawList();

  0186e	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPEAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  01873	48 89 85 98 03
	00 00		 mov	 QWORD PTR draw_list$47[rbp], rax

; 7623 :             draw_list->AddRectFilled(canvas_p0, canvas_p1, IM_COL32(50, 50, 50, 255));

  0187a	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  01882	0f 57 c0	 xorps	 xmm0, xmm0
  01885	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0188b	41 b9 32 32 32
	ff		 mov	 r9d, -13487566		; ff323232H
  01891	4c 8d 85 58 03
	00 00		 lea	 r8, QWORD PTR canvas_p1$45[rbp]
  01898	48 8d 95 18 03
	00 00		 lea	 rdx, QWORD PTR canvas_p0$43[rbp]
  0189f	48 8b 8d 98 03
	00 00		 mov	 rcx, QWORD PTR draw_list$47[rbp]
  018a6	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled

; 7624 :             draw_list->AddRect(canvas_p0, canvas_p1, IM_COL32(255, 255, 255, 255));

  018ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  018b3	f3 0f 11 44 24
	30		 movss	 DWORD PTR [rsp+48], xmm0
  018b9	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  018c1	0f 57 c0	 xorps	 xmm0, xmm0
  018c4	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  018ca	41 b9 ff ff ff
	ff		 mov	 r9d, -1			; ffffffffH
  018d0	4c 8d 85 58 03
	00 00		 lea	 r8, QWORD PTR canvas_p1$45[rbp]
  018d7	48 8d 95 18 03
	00 00		 lea	 rdx, QWORD PTR canvas_p0$43[rbp]
  018de	48 8b 8d 98 03
	00 00		 mov	 rcx, QWORD PTR draw_list$47[rbp]
  018e5	e8 00 00 00 00	 call	 ?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z ; ImDrawList::AddRect

; 7625 : 
; 7626 :             // This will catch our interactions
; 7627 :             ImGui::InvisibleButton("canvas", canvas_sz, ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlags_MouseButtonRight);

  018ea	41 b8 03 00 00
	00		 mov	 r8d, 3
  018f0	48 8d 95 38 03
	00 00		 lea	 rdx, QWORD PTR canvas_sz$44[rbp]
  018f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DODEBHEI@canvas?$AA@
  018fe	e8 00 00 00 00	 call	 ?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z ; ImGui::InvisibleButton

; 7628 :             const bool is_hovered = ImGui::IsItemHovered(); // Hovered

  01903	33 c9		 xor	 ecx, ecx
  01905	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  0190a	88 85 b4 03 00
	00		 mov	 BYTE PTR is_hovered$48[rbp], al

; 7629 :             const bool is_active = ImGui::IsItemActive();   // Held

  01910	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  01915	88 85 d4 03 00
	00		 mov	 BYTE PTR is_active$49[rbp], al

; 7630 :             const ImVec2 origin(canvas_p0.x + scrolling.x, canvas_p0.y + scrolling.y); // Lock scrolled origin

  0191b	f3 0f 10 85 1c
	03 00 00	 movss	 xmm0, DWORD PTR canvas_p0$43[rbp+4]
  01923	f3 0f 58 05 04
	00 00 00	 addss	 xmm0, DWORD PTR ?scrolling@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4UImVec2@@A+4
  0192b	f3 0f 10 8d 18
	03 00 00	 movss	 xmm1, DWORD PTR canvas_p0$43[rbp]
  01933	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?scrolling@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4UImVec2@@A
  0193b	0f 28 d0	 movaps	 xmm2, xmm0
  0193e	48 8d 8d f8 03
	00 00		 lea	 rcx, QWORD PTR origin$50[rbp]
  01945	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 7631 :             const ImVec2 mouse_pos_in_canvas(io.MousePos.x - origin.x, io.MousePos.y - origin.y);

  0194a	48 8b 85 78 03
	00 00		 mov	 rax, QWORD PTR io$46[rbp]
  01951	f3 0f 10 80 f8
	0d 00 00	 movss	 xmm0, DWORD PTR [rax+3576]
  01959	f3 0f 5c 85 fc
	03 00 00	 subss	 xmm0, DWORD PTR origin$50[rbp+4]
  01961	48 8b 85 78 03
	00 00		 mov	 rax, QWORD PTR io$46[rbp]
  01968	f3 0f 10 88 f4
	0d 00 00	 movss	 xmm1, DWORD PTR [rax+3572]
  01970	f3 0f 5c 8d f8
	03 00 00	 subss	 xmm1, DWORD PTR origin$50[rbp]
  01978	0f 28 d0	 movaps	 xmm2, xmm0
  0197b	48 8d 8d 18 04
	00 00		 lea	 rcx, QWORD PTR mouse_pos_in_canvas$51[rbp]
  01982	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 7632 : 
; 7633 :             // Add first and second point
; 7634 :             if (is_hovered && !adding_line && ImGui::IsMouseClicked(ImGuiMouseButton_Left))

  01987	0f b6 85 b4 03
	00 00		 movzx	 eax, BYTE PTR is_hovered$48[rbp]
  0198e	85 c0		 test	 eax, eax
  01990	74 48		 je	 SHORT $LN27@ShowExampl
  01992	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?adding_line@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA
  01999	85 c0		 test	 eax, eax
  0199b	75 3d		 jne	 SHORT $LN27@ShowExampl
  0199d	33 d2		 xor	 edx, edx
  0199f	33 c9		 xor	 ecx, ecx
  019a1	e8 00 00 00 00	 call	 ?IsMouseClicked@ImGui@@YA_NH_N@Z ; ImGui::IsMouseClicked
  019a6	0f b6 c0	 movzx	 eax, al
  019a9	85 c0		 test	 eax, eax
  019ab	74 2d		 je	 SHORT $LN27@ShowExampl

; 7635 :             {
; 7636 :                 points.push_back(mouse_pos_in_canvas);

  019ad	48 8d 95 18 04
	00 00		 lea	 rdx, QWORD PTR mouse_pos_in_canvas$51[rbp]
  019b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?points@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4U?$ImVector@UImVec2@@@@A
  019bb	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back

; 7637 :                 points.push_back(mouse_pos_in_canvas);

  019c0	48 8d 95 18 04
	00 00		 lea	 rdx, QWORD PTR mouse_pos_in_canvas$51[rbp]
  019c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?points@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4U?$ImVector@UImVec2@@@@A
  019ce	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back

; 7638 :                 adding_line = true;

  019d3	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?adding_line@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA, 1
$LN27@ShowExampl:

; 7639 :             }
; 7640 :             if (adding_line)

  019da	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?adding_line@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA
  019e1	85 c0		 test	 eax, eax
  019e3	74 2b		 je	 SHORT $LN28@ShowExampl

; 7641 :             {
; 7642 :                 points.back() = mouse_pos_in_canvas;

  019e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?points@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4U?$ImVector@UImVec2@@@@A
  019ec	e8 00 00 00 00	 call	 ?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ ; ImVector<ImVec2>::back
  019f1	48 8b 8d 18 04
	00 00		 mov	 rcx, QWORD PTR mouse_pos_in_canvas$51[rbp]
  019f8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 7643 :                 if (!ImGui::IsMouseDown(ImGuiMouseButton_Left))

  019fb	33 c9		 xor	 ecx, ecx
  019fd	e8 00 00 00 00	 call	 ?IsMouseDown@ImGui@@YA_NH@Z ; ImGui::IsMouseDown
  01a02	0f b6 c0	 movzx	 eax, al
  01a05	85 c0		 test	 eax, eax
  01a07	75 07		 jne	 SHORT $LN28@ShowExampl

; 7644 :                     adding_line = false;

  01a09	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?adding_line@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA, 0
$LN28@ShowExampl:

; 7645 :             }
; 7646 : 
; 7647 :             // Pan (we use a zero mouse threshold when there's no context menu)
; 7648 :             // You may decide to make that threshold dynamic based on whether the mouse is hovering something etc.
; 7649 :             const float mouse_threshold_for_pan = opt_enable_context_menu ? -1.0f : 0.0f;

  01a10	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?opt_enable_context_menu@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA
  01a17	85 c0		 test	 eax, eax
  01a19	74 12		 je	 SHORT $LN47@ShowExampl
  01a1b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01a23	f3 0f 11 85 74
	0f 00 00	 movss	 DWORD PTR tv930[rbp], xmm0
  01a2b	eb 0b		 jmp	 SHORT $LN48@ShowExampl
$LN47@ShowExampl:
  01a2d	0f 57 c0	 xorps	 xmm0, xmm0
  01a30	f3 0f 11 85 74
	0f 00 00	 movss	 DWORD PTR tv930[rbp], xmm0
$LN48@ShowExampl:
  01a38	f3 0f 10 85 74
	0f 00 00	 movss	 xmm0, DWORD PTR tv930[rbp]
  01a40	f3 0f 11 85 34
	04 00 00	 movss	 DWORD PTR mouse_threshold_for_pan$52[rbp], xmm0

; 7650 :             if (is_active && ImGui::IsMouseDragging(ImGuiMouseButton_Right, mouse_threshold_for_pan))

  01a48	0f b6 85 d4 03
	00 00		 movzx	 eax, BYTE PTR is_active$49[rbp]
  01a4f	85 c0		 test	 eax, eax
  01a51	74 57		 je	 SHORT $LN30@ShowExampl
  01a53	f3 0f 10 8d 34
	04 00 00	 movss	 xmm1, DWORD PTR mouse_threshold_for_pan$52[rbp]
  01a5b	b9 01 00 00 00	 mov	 ecx, 1
  01a60	e8 00 00 00 00	 call	 ?IsMouseDragging@ImGui@@YA_NHM@Z ; ImGui::IsMouseDragging
  01a65	0f b6 c0	 movzx	 eax, al
  01a68	85 c0		 test	 eax, eax
  01a6a	74 3e		 je	 SHORT $LN30@ShowExampl

; 7651 :             {
; 7652 :                 scrolling.x += io.MouseDelta.x;

  01a6c	48 8b 85 78 03
	00 00		 mov	 rax, QWORD PTR io$46[rbp]
  01a73	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?scrolling@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4UImVec2@@A
  01a7b	f3 0f 58 80 f0
	00 00 00	 addss	 xmm0, DWORD PTR [rax+240]
  01a83	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?scrolling@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4UImVec2@@A, xmm0

; 7653 :                 scrolling.y += io.MouseDelta.y;

  01a8b	48 8b 85 78 03
	00 00		 mov	 rax, QWORD PTR io$46[rbp]
  01a92	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?scrolling@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4UImVec2@@A+4
  01a9a	f3 0f 58 80 f4
	00 00 00	 addss	 xmm0, DWORD PTR [rax+244]
  01aa2	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?scrolling@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4UImVec2@@A+4, xmm0
$LN30@ShowExampl:

; 7654 :             }
; 7655 : 
; 7656 :             // Context menu (under default mouse threshold)
; 7657 :             ImVec2 drag_delta = ImGui::GetMouseDragDelta(ImGuiMouseButton_Right);

  01aaa	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  01ab2	ba 01 00 00 00	 mov	 edx, 1
  01ab7	48 8d 8d 58 04
	00 00		 lea	 rcx, QWORD PTR drag_delta$53[rbp]
  01abe	e8 00 00 00 00	 call	 ?GetMouseDragDelta@ImGui@@YA?AUImVec2@@HM@Z ; ImGui::GetMouseDragDelta

; 7658 :             if (opt_enable_context_menu && drag_delta.x == 0.0f && drag_delta.y == 0.0f)

  01ac3	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?opt_enable_context_menu@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA
  01aca	85 c0		 test	 eax, eax
  01acc	74 37		 je	 SHORT $LN31@ShowExampl
  01ace	f3 0f 10 85 58
	04 00 00	 movss	 xmm0, DWORD PTR drag_delta$53[rbp]
  01ad6	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  01add	7a 26		 jp	 SHORT $LN31@ShowExampl
  01adf	75 24		 jne	 SHORT $LN31@ShowExampl
  01ae1	f3 0f 10 85 5c
	04 00 00	 movss	 xmm0, DWORD PTR drag_delta$53[rbp+4]
  01ae9	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  01af0	7a 13		 jp	 SHORT $LN31@ShowExampl
  01af2	75 11		 jne	 SHORT $LN31@ShowExampl

; 7659 :                 ImGui::OpenPopupOnItemClick("context", ImGuiPopupFlags_MouseButtonRight);

  01af4	ba 01 00 00 00	 mov	 edx, 1
  01af9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07JKKCBBMM@context?$AA@
  01b00	e8 00 00 00 00	 call	 ?OpenPopupOnItemClick@ImGui@@YAXPEBDH@Z ; ImGui::OpenPopupOnItemClick
$LN31@ShowExampl:

; 7660 :             if (ImGui::BeginPopup("context"))

  01b05	33 d2		 xor	 edx, edx
  01b07	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07JKKCBBMM@context?$AA@
  01b0e	e8 00 00 00 00	 call	 ?BeginPopup@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopup
  01b13	0f b6 c0	 movzx	 eax, al
  01b16	85 c0		 test	 eax, eax
  01b18	0f 84 cf 00 00
	00		 je	 $LN32@ShowExampl

; 7661 :             {
; 7662 :                 if (adding_line)

  01b1e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?adding_line@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA
  01b25	85 c0		 test	 eax, eax
  01b27	74 1d		 je	 SHORT $LN33@ShowExampl

; 7663 :                     points.resize(points.size() - 2);

  01b29	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?points@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4U?$ImVector@UImVec2@@@@A
  01b30	e8 00 00 00 00	 call	 ?size@?$ImVector@UImVec2@@@@QEBAHXZ ; ImVector<ImVec2>::size
  01b35	83 e8 02	 sub	 eax, 2
  01b38	8b d0		 mov	 edx, eax
  01b3a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?points@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4U?$ImVector@UImVec2@@@@A
  01b41	e8 00 00 00 00	 call	 ?resize@?$ImVector@UImVec2@@@@QEAAXH@Z ; ImVector<ImVec2>::resize
$LN33@ShowExampl:

; 7664 :                 adding_line = false;

  01b46	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?adding_line@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA, 0

; 7665 :                 if (ImGui::MenuItem("Remove one", NULL, false, points.Size > 0)) { points.resize(points.size() - 2); }

  01b4d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?points@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4U?$ImVector@UImVec2@@@@A, 0
  01b54	7e 09		 jle	 SHORT $LN49@ShowExampl
  01b56	c6 85 74 0f 00
	00 01		 mov	 BYTE PTR tv967[rbp], 1
  01b5d	eb 07		 jmp	 SHORT $LN50@ShowExampl
$LN49@ShowExampl:
  01b5f	c6 85 74 0f 00
	00 00		 mov	 BYTE PTR tv967[rbp], 0
$LN50@ShowExampl:
  01b66	44 0f b6 8d 74
	0f 00 00	 movzx	 r9d, BYTE PTR tv967[rbp]
  01b6e	45 33 c0	 xor	 r8d, r8d
  01b71	33 d2		 xor	 edx, edx
  01b73	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@IEFPLEH@Remove?5one?$AA@
  01b7a	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  01b7f	0f b6 c0	 movzx	 eax, al
  01b82	85 c0		 test	 eax, eax
  01b84	74 1d		 je	 SHORT $LN34@ShowExampl
  01b86	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?points@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4U?$ImVector@UImVec2@@@@A
  01b8d	e8 00 00 00 00	 call	 ?size@?$ImVector@UImVec2@@@@QEBAHXZ ; ImVector<ImVec2>::size
  01b92	83 e8 02	 sub	 eax, 2
  01b95	8b d0		 mov	 edx, eax
  01b97	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?points@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4U?$ImVector@UImVec2@@@@A
  01b9e	e8 00 00 00 00	 call	 ?resize@?$ImVector@UImVec2@@@@QEAAXH@Z ; ImVector<ImVec2>::resize
$LN34@ShowExampl:

; 7666 :                 if (ImGui::MenuItem("Remove all", NULL, false, points.Size > 0)) { points.clear(); }

  01ba3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?points@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4U?$ImVector@UImVec2@@@@A, 0
  01baa	7e 09		 jle	 SHORT $LN51@ShowExampl
  01bac	c6 85 74 0f 00
	00 01		 mov	 BYTE PTR tv981[rbp], 1
  01bb3	eb 07		 jmp	 SHORT $LN52@ShowExampl
$LN51@ShowExampl:
  01bb5	c6 85 74 0f 00
	00 00		 mov	 BYTE PTR tv981[rbp], 0
$LN52@ShowExampl:
  01bbc	44 0f b6 8d 74
	0f 00 00	 movzx	 r9d, BYTE PTR tv981[rbp]
  01bc4	45 33 c0	 xor	 r8d, r8d
  01bc7	33 d2		 xor	 edx, edx
  01bc9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DKNMODFD@Remove?5all?$AA@
  01bd0	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  01bd5	0f b6 c0	 movzx	 eax, al
  01bd8	85 c0		 test	 eax, eax
  01bda	74 0c		 je	 SHORT $LN35@ShowExampl
  01bdc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?points@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4U?$ImVector@UImVec2@@@@A
  01be3	e8 00 00 00 00	 call	 ?clear@?$ImVector@UImVec2@@@@QEAAXXZ ; ImVector<ImVec2>::clear
$LN35@ShowExampl:

; 7667 :                 ImGui::EndPopup();

  01be8	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN32@ShowExampl:

; 7668 :             }
; 7669 : 
; 7670 :             // Draw grid + all lines in the canvas
; 7671 :             draw_list->PushClipRect(canvas_p0, canvas_p1, true);

  01bed	41 b1 01	 mov	 r9b, 1
  01bf0	4c 8d 85 58 03
	00 00		 lea	 r8, QWORD PTR canvas_p1$45[rbp]
  01bf7	48 8d 95 18 03
	00 00		 lea	 rdx, QWORD PTR canvas_p0$43[rbp]
  01bfe	48 8b 8d 98 03
	00 00		 mov	 rcx, QWORD PTR draw_list$47[rbp]
  01c05	e8 00 00 00 00	 call	 ?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z ; ImDrawList::PushClipRect

; 7672 :             if (opt_enable_grid)

  01c0a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?opt_enable_grid@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA
  01c11	85 c0		 test	 eax, eax
  01c13	0f 84 b8 01 00
	00		 je	 $LN36@ShowExampl

; 7673 :             {
; 7674 :                 const float GRID_STEP = 64.0f;

  01c19	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42800000
  01c21	f3 0f 11 85 74
	04 00 00	 movss	 DWORD PTR GRID_STEP$54[rbp], xmm0

; 7675 :                 for (float x = fmodf(scrolling.x, GRID_STEP); x < canvas_sz.x; x += GRID_STEP)

  01c29	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42800000
  01c31	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?scrolling@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4UImVec2@@A
  01c39	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmodf
  01c3f	f3 0f 11 85 94
	04 00 00	 movss	 DWORD PTR x$55[rbp], xmm0
  01c47	eb 18		 jmp	 SHORT $LN13@ShowExampl
$LN11@ShowExampl:
  01c49	f3 0f 10 85 94
	04 00 00	 movss	 xmm0, DWORD PTR x$55[rbp]
  01c51	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@42800000
  01c59	f3 0f 11 85 94
	04 00 00	 movss	 DWORD PTR x$55[rbp], xmm0
$LN13@ShowExampl:
  01c61	f3 0f 10 85 38
	03 00 00	 movss	 xmm0, DWORD PTR canvas_sz$44[rbp]
  01c69	0f 2f 85 94 04
	00 00		 comiss	 xmm0, DWORD PTR x$55[rbp]
  01c70	0f 86 87 00 00
	00		 jbe	 $LN12@ShowExampl

; 7676 :                     draw_list->AddLine(ImVec2(canvas_p0.x + x, canvas_p0.y), ImVec2(canvas_p0.x + x, canvas_p1.y), IM_COL32(200, 200, 200, 40));

  01c76	f3 0f 10 85 18
	03 00 00	 movss	 xmm0, DWORD PTR canvas_p0$43[rbp]
  01c7e	f3 0f 58 85 94
	04 00 00	 addss	 xmm0, DWORD PTR x$55[rbp]
  01c86	f3 0f 10 95 5c
	03 00 00	 movss	 xmm2, DWORD PTR canvas_p1$45[rbp+4]
  01c8e	0f 28 c8	 movaps	 xmm1, xmm0
  01c91	48 8d 8d a4 0e
	00 00		 lea	 rcx, QWORD PTR $T99[rbp]
  01c98	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01c9d	48 89 85 78 0f
	00 00		 mov	 QWORD PTR tv1004[rbp], rax
  01ca4	f3 0f 10 85 18
	03 00 00	 movss	 xmm0, DWORD PTR canvas_p0$43[rbp]
  01cac	f3 0f 58 85 94
	04 00 00	 addss	 xmm0, DWORD PTR x$55[rbp]
  01cb4	f3 0f 10 95 1c
	03 00 00	 movss	 xmm2, DWORD PTR canvas_p0$43[rbp+4]
  01cbc	0f 28 c8	 movaps	 xmm1, xmm0
  01cbf	48 8d 8d c4 0e
	00 00		 lea	 rcx, QWORD PTR $T100[rbp]
  01cc6	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01ccb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01cd3	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01cd9	41 b9 c8 c8 c8
	28		 mov	 r9d, 684247240		; 28c8c8c8H
  01cdf	48 8b 8d 78 0f
	00 00		 mov	 rcx, QWORD PTR tv1004[rbp]
  01ce6	4c 8b c1	 mov	 r8, rcx
  01ce9	48 8b d0	 mov	 rdx, rax
  01cec	48 8b 8d 98 03
	00 00		 mov	 rcx, QWORD PTR draw_list$47[rbp]
  01cf3	e8 00 00 00 00	 call	 ?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
  01cf8	e9 4c ff ff ff	 jmp	 $LN11@ShowExampl
$LN12@ShowExampl:

; 7677 :                 for (float y = fmodf(scrolling.y, GRID_STEP); y < canvas_sz.y; y += GRID_STEP)

  01cfd	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42800000
  01d05	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?scrolling@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4UImVec2@@A+4
  01d0d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmodf
  01d13	f3 0f 11 85 b4
	04 00 00	 movss	 DWORD PTR y$56[rbp], xmm0
  01d1b	eb 18		 jmp	 SHORT $LN16@ShowExampl
$LN14@ShowExampl:
  01d1d	f3 0f 10 85 b4
	04 00 00	 movss	 xmm0, DWORD PTR y$56[rbp]
  01d25	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@42800000
  01d2d	f3 0f 11 85 b4
	04 00 00	 movss	 DWORD PTR y$56[rbp], xmm0
$LN16@ShowExampl:
  01d35	f3 0f 10 85 3c
	03 00 00	 movss	 xmm0, DWORD PTR canvas_sz$44[rbp+4]
  01d3d	0f 2f 85 b4 04
	00 00		 comiss	 xmm0, DWORD PTR y$56[rbp]
  01d44	0f 86 87 00 00
	00		 jbe	 $LN36@ShowExampl

; 7678 :                     draw_list->AddLine(ImVec2(canvas_p0.x, canvas_p0.y + y), ImVec2(canvas_p1.x, canvas_p0.y + y), IM_COL32(200, 200, 200, 40));

  01d4a	f3 0f 10 85 1c
	03 00 00	 movss	 xmm0, DWORD PTR canvas_p0$43[rbp+4]
  01d52	f3 0f 58 85 b4
	04 00 00	 addss	 xmm0, DWORD PTR y$56[rbp]
  01d5a	0f 28 d0	 movaps	 xmm2, xmm0
  01d5d	f3 0f 10 8d 58
	03 00 00	 movss	 xmm1, DWORD PTR canvas_p1$45[rbp]
  01d65	48 8d 8d e4 0e
	00 00		 lea	 rcx, QWORD PTR $T101[rbp]
  01d6c	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01d71	48 89 85 78 0f
	00 00		 mov	 QWORD PTR tv1024[rbp], rax
  01d78	f3 0f 10 85 1c
	03 00 00	 movss	 xmm0, DWORD PTR canvas_p0$43[rbp+4]
  01d80	f3 0f 58 85 b4
	04 00 00	 addss	 xmm0, DWORD PTR y$56[rbp]
  01d88	0f 28 d0	 movaps	 xmm2, xmm0
  01d8b	f3 0f 10 8d 18
	03 00 00	 movss	 xmm1, DWORD PTR canvas_p0$43[rbp]
  01d93	48 8d 8d 04 0f
	00 00		 lea	 rcx, QWORD PTR $T102[rbp]
  01d9a	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01d9f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01da7	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01dad	41 b9 c8 c8 c8
	28		 mov	 r9d, 684247240		; 28c8c8c8H
  01db3	48 8b 8d 78 0f
	00 00		 mov	 rcx, QWORD PTR tv1024[rbp]
  01dba	4c 8b c1	 mov	 r8, rcx
  01dbd	48 8b d0	 mov	 rdx, rax
  01dc0	48 8b 8d 98 03
	00 00		 mov	 rcx, QWORD PTR draw_list$47[rbp]
  01dc7	e8 00 00 00 00	 call	 ?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
  01dcc	e9 4c ff ff ff	 jmp	 $LN14@ShowExampl
$LN36@ShowExampl:

; 7679 :             }
; 7680 :             for (int n = 0; n < points.Size; n += 2)

  01dd1	c7 85 d4 04 00
	00 00 00 00 00	 mov	 DWORD PTR n$57[rbp], 0
  01ddb	eb 0f		 jmp	 SHORT $LN19@ShowExampl
$LN17@ShowExampl:
  01ddd	8b 85 d4 04 00
	00		 mov	 eax, DWORD PTR n$57[rbp]
  01de3	83 c0 02	 add	 eax, 2
  01de6	89 85 d4 04 00
	00		 mov	 DWORD PTR n$57[rbp], eax
$LN19@ShowExampl:
  01dec	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?points@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4U?$ImVector@UImVec2@@@@A
  01df2	39 85 d4 04 00
	00		 cmp	 DWORD PTR n$57[rbp], eax
  01df8	0f 8d ff 00 00
	00		 jge	 $LN18@ShowExampl

; 7681 :                 draw_list->AddLine(ImVec2(origin.x + points[n].x, origin.y + points[n].y), ImVec2(origin.x + points[n + 1].x, origin.y + points[n + 1].y), IM_COL32(255, 255, 0, 255), 2.0f);

  01dfe	8b 85 d4 04 00
	00		 mov	 eax, DWORD PTR n$57[rbp]
  01e04	ff c0		 inc	 eax
  01e06	8b d0		 mov	 edx, eax
  01e08	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?points@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4U?$ImVector@UImVec2@@@@A
  01e0f	e8 00 00 00 00	 call	 ??A?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@H@Z ; ImVector<ImVec2>::operator[]
  01e14	f3 0f 10 85 fc
	03 00 00	 movss	 xmm0, DWORD PTR origin$50[rbp+4]
  01e1c	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [rax+4]
  01e21	f3 0f 11 85 74
	0f 00 00	 movss	 DWORD PTR tv1047[rbp], xmm0
  01e29	8b 85 d4 04 00
	00		 mov	 eax, DWORD PTR n$57[rbp]
  01e2f	ff c0		 inc	 eax
  01e31	8b d0		 mov	 edx, eax
  01e33	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?points@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4U?$ImVector@UImVec2@@@@A
  01e3a	e8 00 00 00 00	 call	 ??A?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@H@Z ; ImVector<ImVec2>::operator[]
  01e3f	f3 0f 10 85 f8
	03 00 00	 movss	 xmm0, DWORD PTR origin$50[rbp]
  01e47	f3 0f 58 00	 addss	 xmm0, DWORD PTR [rax]
  01e4b	f3 0f 10 8d 74
	0f 00 00	 movss	 xmm1, DWORD PTR tv1047[rbp]
  01e53	0f 28 d1	 movaps	 xmm2, xmm1
  01e56	0f 28 c8	 movaps	 xmm1, xmm0
  01e59	48 8d 8d 24 0f
	00 00		 lea	 rcx, QWORD PTR $T103[rbp]
  01e60	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01e65	48 89 85 78 0f
	00 00		 mov	 QWORD PTR tv1041[rbp], rax
  01e6c	8b 95 d4 04 00
	00		 mov	 edx, DWORD PTR n$57[rbp]
  01e72	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?points@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4U?$ImVector@UImVec2@@@@A
  01e79	e8 00 00 00 00	 call	 ??A?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@H@Z ; ImVector<ImVec2>::operator[]
  01e7e	f3 0f 10 85 fc
	03 00 00	 movss	 xmm0, DWORD PTR origin$50[rbp+4]
  01e86	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [rax+4]
  01e8b	f3 0f 11 85 80
	0f 00 00	 movss	 DWORD PTR tv1063[rbp], xmm0
  01e93	8b 95 d4 04 00
	00		 mov	 edx, DWORD PTR n$57[rbp]
  01e99	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?points@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4U?$ImVector@UImVec2@@@@A
  01ea0	e8 00 00 00 00	 call	 ??A?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@H@Z ; ImVector<ImVec2>::operator[]
  01ea5	f3 0f 10 85 f8
	03 00 00	 movss	 xmm0, DWORD PTR origin$50[rbp]
  01ead	f3 0f 58 00	 addss	 xmm0, DWORD PTR [rax]
  01eb1	f3 0f 10 8d 80
	0f 00 00	 movss	 xmm1, DWORD PTR tv1063[rbp]
  01eb9	0f 28 d1	 movaps	 xmm2, xmm1
  01ebc	0f 28 c8	 movaps	 xmm1, xmm0
  01ebf	48 8d 8d 44 0f
	00 00		 lea	 rcx, QWORD PTR $T104[rbp]
  01ec6	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01ecb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01ed3	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01ed9	41 b9 ff ff 00
	ff		 mov	 r9d, -16711681		; ff00ffffH
  01edf	48 8b 8d 78 0f
	00 00		 mov	 rcx, QWORD PTR tv1041[rbp]
  01ee6	4c 8b c1	 mov	 r8, rcx
  01ee9	48 8b d0	 mov	 rdx, rax
  01eec	48 8b 8d 98 03
	00 00		 mov	 rcx, QWORD PTR draw_list$47[rbp]
  01ef3	e8 00 00 00 00	 call	 ?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
  01ef8	e9 e0 fe ff ff	 jmp	 $LN17@ShowExampl
$LN18@ShowExampl:

; 7682 :             draw_list->PopClipRect();

  01efd	48 8b 8d 98 03
	00 00		 mov	 rcx, QWORD PTR draw_list$47[rbp]
  01f04	e8 00 00 00 00	 call	 ?PopClipRect@ImDrawList@@QEAAXXZ ; ImDrawList::PopClipRect

; 7683 : 
; 7684 :             ImGui::EndTabItem();

  01f09	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN24@ShowExampl:

; 7685 :         }
; 7686 : 
; 7687 :         if (ImGui::BeginTabItem("BG/FG draw lists"))

  01f0e	45 33 c0	 xor	 r8d, r8d
  01f11	33 d2		 xor	 edx, edx
  01f13	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@CEOBEDIK@BG?1FG?5draw?5lists?$AA@
  01f1a	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginTabItem
  01f1f	0f b6 c0	 movzx	 eax, al
  01f22	85 c0		 test	 eax, eax
  01f24	0f 84 84 01 00
	00		 je	 $LN37@ShowExampl

; 7688 :         {
; 7689 :             static bool draw_bg = true;
; 7690 :             static bool draw_fg = true;
; 7691 :             ImGui::Checkbox("Draw in Background draw list", &draw_bg);

  01f2a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?draw_bg@?DL@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA
  01f31	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@BHPCJJNA@Draw?5in?5Background?5draw?5list?$AA@
  01f38	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 7692 :             ImGui::SameLine(); HelpMarker("The Background draw list will be rendered below every Dear ImGui windows.");

  01f3d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01f45	0f 57 c0	 xorps	 xmm0, xmm0
  01f48	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01f4d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EK@HADEKICD@The?5Background?5draw?5list?5will?5be@
  01f54	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 7693 :             ImGui::Checkbox("Draw in Foreground draw list", &draw_fg);

  01f59	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?draw_fg@?DL@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA
  01f60	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@MBHOHPNH@Draw?5in?5Foreground?5draw?5list?$AA@
  01f67	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 7694 :             ImGui::SameLine(); HelpMarker("The Foreground draw list will be rendered over every Dear ImGui windows.");

  01f6c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01f74	0f 57 c0	 xorps	 xmm0, xmm0
  01f77	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01f7c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EJ@MJHHHC@The?5Foreground?5draw?5list?5will?5be@
  01f83	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 7695 :             ImVec2 window_pos = ImGui::GetWindowPos();

  01f88	48 8d 8d f8 04
	00 00		 lea	 rcx, QWORD PTR window_pos$58[rbp]
  01f8f	e8 00 00 00 00	 call	 ?GetWindowPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetWindowPos

; 7696 :             ImVec2 window_size = ImGui::GetWindowSize();

  01f94	48 8d 8d 18 05
	00 00		 lea	 rcx, QWORD PTR window_size$59[rbp]
  01f9b	e8 00 00 00 00	 call	 ?GetWindowSize@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetWindowSize

; 7697 :             ImVec2 window_center = ImVec2(window_pos.x + window_size.x * 0.5f, window_pos.y + window_size.y * 0.5f);

  01fa0	f3 0f 10 85 1c
	05 00 00	 movss	 xmm0, DWORD PTR window_size$59[rbp+4]
  01fa8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  01fb0	f3 0f 10 8d fc
	04 00 00	 movss	 xmm1, DWORD PTR window_pos$58[rbp+4]
  01fb8	f3 0f 58 c8	 addss	 xmm1, xmm0
  01fbc	0f 28 c1	 movaps	 xmm0, xmm1
  01fbf	f3 0f 10 8d 18
	05 00 00	 movss	 xmm1, DWORD PTR window_size$59[rbp]
  01fc7	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  01fcf	f3 0f 10 95 f8
	04 00 00	 movss	 xmm2, DWORD PTR window_pos$58[rbp]
  01fd7	f3 0f 58 d1	 addss	 xmm2, xmm1
  01fdb	0f 28 ca	 movaps	 xmm1, xmm2
  01fde	0f 28 d0	 movaps	 xmm2, xmm0
  01fe1	48 8d 8d 38 05
	00 00		 lea	 rcx, QWORD PTR window_center$60[rbp]
  01fe8	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 7698 :             if (draw_bg)

  01fed	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?draw_bg@?DL@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA
  01ff4	85 c0		 test	 eax, eax
  01ff6	74 53		 je	 SHORT $LN38@ShowExampl

; 7699 :                 ImGui::GetBackgroundDrawList()->AddCircle(window_center, window_size.x * 0.6f, IM_COL32(255, 0, 0, 200), 0, 10 + 4);

  01ff8	f3 0f 10 85 18
	05 00 00	 movss	 xmm0, DWORD PTR window_size$59[rbp]
  02000	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f19999a
  02008	f3 0f 11 85 74
	0f 00 00	 movss	 DWORD PTR tv1105[rbp], xmm0
  02010	e8 00 00 00 00	 call	 ?GetBackgroundDrawList@ImGui@@YAPEAUImDrawList@@XZ ; ImGui::GetBackgroundDrawList
  02015	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41600000
  0201d	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  02023	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  0202b	41 b9 ff 00 00
	c8		 mov	 r9d, -939523841		; c80000ffH
  02031	f3 0f 10 85 74
	0f 00 00	 movss	 xmm0, DWORD PTR tv1105[rbp]
  02039	0f 28 d0	 movaps	 xmm2, xmm0
  0203c	48 8d 95 38 05
	00 00		 lea	 rdx, QWORD PTR window_center$60[rbp]
  02043	48 8b c8	 mov	 rcx, rax
  02046	e8 00 00 00 00	 call	 ?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z ; ImDrawList::AddCircle
$LN38@ShowExampl:

; 7700 :             if (draw_fg)

  0204b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?draw_fg@?DL@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4_NA
  02052	85 c0		 test	 eax, eax
  02054	74 53		 je	 SHORT $LN39@ShowExampl

; 7701 :                 ImGui::GetForegroundDrawList()->AddCircle(window_center, window_size.y * 0.6f, IM_COL32(0, 255, 0, 200), 0, 10);

  02056	f3 0f 10 85 1c
	05 00 00	 movss	 xmm0, DWORD PTR window_size$59[rbp+4]
  0205e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f19999a
  02066	f3 0f 11 85 74
	0f 00 00	 movss	 DWORD PTR tv1115[rbp], xmm0
  0206e	e8 00 00 00 00	 call	 ?GetForegroundDrawList@ImGui@@YAPEAUImDrawList@@XZ ; ImGui::GetForegroundDrawList
  02073	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  0207b	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  02081	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  02089	41 b9 00 ff 00
	c8		 mov	 r9d, -939458816		; c800ff00H
  0208f	f3 0f 10 85 74
	0f 00 00	 movss	 xmm0, DWORD PTR tv1115[rbp]
  02097	0f 28 d0	 movaps	 xmm2, xmm0
  0209a	48 8d 95 38 05
	00 00		 lea	 rdx, QWORD PTR window_center$60[rbp]
  020a1	48 8b c8	 mov	 rcx, rax
  020a4	e8 00 00 00 00	 call	 ?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z ; ImDrawList::AddCircle
$LN39@ShowExampl:

; 7702 :             ImGui::EndTabItem();

  020a9	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN37@ShowExampl:

; 7703 :         }
; 7704 : 
; 7705 :         ImGui::EndTabBar();

  020ae	e8 00 00 00 00	 call	 ?EndTabBar@ImGui@@YAXXZ	; ImGui::EndTabBar
$LN22@ShowExampl:

; 7706 :     }
; 7707 : 
; 7708 :     ImGui::End();

  020b3	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN1@ShowExampl:

; 7709 : }

  020b8	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  020bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShowExampleAppCustomRendering@@YAXPEA_N@Z$rtcFrameData
  020c3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  020c8	48 8b 8d 88 0f
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  020cf	48 33 cd	 xor	 rcx, rbp
  020d2	e8 00 00 00 00	 call	 __security_check_cookie
  020d7	48 8d a5 98 0f
	00 00		 lea	 rsp, QWORD PTR [rbp+3992]
  020de	5f		 pop	 rdi
  020df	5d		 pop	 rbp
  020e0	c3		 ret	 0
?ShowExampleAppCustomRendering@@YAXPEA_N@Z ENDP		; ShowExampleAppCustomRendering
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
draw_list$20 = 8
gradient_size$21 = 40
p0$22 = 72
p1$23 = 104
col_a$24 = 132
col_b$25 = 164
p0$26 = 200
p1$27 = 232
col_a$28 = 260
col_b$29 = 292
p$30 = 328
col$31 = 356
spacing$32 = 388
corners_tl_br$33 = 420
rounding$34 = 452
circle_segments$35 = 484
curve_segments$36 = 516
x$37 = 548
y$38 = 580
n$39 = 612
th$40 = 644
cp3$41 = 680
cp4$42 = 728
canvas_p0$43 = 792
canvas_sz$44 = 824
canvas_p1$45 = 856
io$46 = 888
draw_list$47 = 920
is_hovered$48 = 948
is_active$49 = 980
origin$50 = 1016
mouse_pos_in_canvas$51 = 1048
mouse_threshold_for_pan$52 = 1076
drag_delta$53 = 1112
GRID_STEP$54 = 1140
x$55 = 1172
y$56 = 1204
n$57 = 1236
window_pos$58 = 1272
window_size$59 = 1304
window_center$60 = 1336
$T61 = 2516
$T62 = 2564
$T63 = 2596
$T64 = 2628
$T65 = 2660
$T66 = 2692
$T67 = 2724
$T68 = 2756
$T69 = 2788
$T70 = 2820
$T71 = 2852
$T72 = 2884
$T73 = 2916
$T74 = 2948
$T75 = 2980
$T76 = 3012
$T77 = 3044
$T78 = 3076
$T79 = 3108
$T80 = 3140
$T81 = 3172
$T82 = 3204
$T83 = 3236
$T84 = 3268
$T85 = 3300
$T86 = 3332
$T87 = 3364
$T88 = 3396
$T89 = 3428
$T90 = 3460
$T91 = 3492
$T92 = 3524
$T93 = 3556
$T94 = 3588
$T95 = 3620
$T96 = 3652
$T97 = 3684
$T98 = 3716
$T99 = 3748
$T100 = 3780
$T101 = 3812
$T102 = 3844
$T103 = 3876
$T104 = 3908
$T105 = 3944
tv1115 = 3956
tv1105 = 3956
tv1047 = 3956
tv981 = 3956
tv967 = 3956
tv930 = 3956
tv590 = 3956
tv574 = 3956
tv319 = 3956
tv302 = 3956
tv297 = 3956
tv291 = 3956
tv288 = 3956
tv233 = 3956
tv215 = 3956
tv128 = 3956
tv1041 = 3960
tv1024 = 3960
tv1004 = 3960
tv773 = 3960
tv755 = 3960
tv738 = 3960
tv720 = 3960
tv692 = 3960
tv676 = 3960
tv626 = 3960
tv608 = 3960
tv598 = 3960
tv582 = 3960
tv566 = 3960
tv483 = 3960
tv468 = 3960
tv452 = 3960
tv425 = 3960
tv408 = 3960
tv389 = 3960
tv370 = 3960
tv359 = 3960
tv310 = 3960
tv1063 = 3968
tv699 = 3968
tv432 = 3968
__$ArrayPad$ = 3976
p_open$ = 4016
?dtor$0@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA PROC ; `ShowExampleAppCustomRendering'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
  0001b	e8 00 00 00 00	 call	 _Init_thread_abort
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA ENDP ; `ShowExampleAppCustomRendering'::`1'::dtor$0
draw_list$20 = 8
gradient_size$21 = 40
p0$22 = 72
p1$23 = 104
col_a$24 = 132
col_b$25 = 164
p0$26 = 200
p1$27 = 232
col_a$28 = 260
col_b$29 = 292
p$30 = 328
col$31 = 356
spacing$32 = 388
corners_tl_br$33 = 420
rounding$34 = 452
circle_segments$35 = 484
curve_segments$36 = 516
x$37 = 548
y$38 = 580
n$39 = 612
th$40 = 644
cp3$41 = 680
cp4$42 = 728
canvas_p0$43 = 792
canvas_sz$44 = 824
canvas_p1$45 = 856
io$46 = 888
draw_list$47 = 920
is_hovered$48 = 948
is_active$49 = 980
origin$50 = 1016
mouse_pos_in_canvas$51 = 1048
mouse_threshold_for_pan$52 = 1076
drag_delta$53 = 1112
GRID_STEP$54 = 1140
x$55 = 1172
y$56 = 1204
n$57 = 1236
window_pos$58 = 1272
window_size$59 = 1304
window_center$60 = 1336
$T61 = 2516
$T62 = 2564
$T63 = 2596
$T64 = 2628
$T65 = 2660
$T66 = 2692
$T67 = 2724
$T68 = 2756
$T69 = 2788
$T70 = 2820
$T71 = 2852
$T72 = 2884
$T73 = 2916
$T74 = 2948
$T75 = 2980
$T76 = 3012
$T77 = 3044
$T78 = 3076
$T79 = 3108
$T80 = 3140
$T81 = 3172
$T82 = 3204
$T83 = 3236
$T84 = 3268
$T85 = 3300
$T86 = 3332
$T87 = 3364
$T88 = 3396
$T89 = 3428
$T90 = 3460
$T91 = 3492
$T92 = 3524
$T93 = 3556
$T94 = 3588
$T95 = 3620
$T96 = 3652
$T97 = 3684
$T98 = 3716
$T99 = 3748
$T100 = 3780
$T101 = 3812
$T102 = 3844
$T103 = 3876
$T104 = 3908
$T105 = 3944
tv1115 = 3956
tv1105 = 3956
tv1047 = 3956
tv981 = 3956
tv967 = 3956
tv930 = 3956
tv590 = 3956
tv574 = 3956
tv319 = 3956
tv302 = 3956
tv297 = 3956
tv291 = 3956
tv288 = 3956
tv233 = 3956
tv215 = 3956
tv128 = 3956
tv1041 = 3960
tv1024 = 3960
tv1004 = 3960
tv773 = 3960
tv755 = 3960
tv738 = 3960
tv720 = 3960
tv692 = 3960
tv676 = 3960
tv626 = 3960
tv608 = 3960
tv598 = 3960
tv582 = 3960
tv566 = 3960
tv483 = 3960
tv468 = 3960
tv452 = 3960
tv425 = 3960
tv408 = 3960
tv389 = 3960
tv370 = 3960
tv359 = 3960
tv310 = 3960
tv1063 = 3968
tv699 = 3968
tv432 = 3968
__$ArrayPad$ = 3976
p_open$ = 4016
?dtor$1@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA PROC ; `ShowExampleAppCustomRendering'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
  00042	e8 00 00 00 00	 call	 _Init_thread_abort
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?dtor$1@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA ENDP ; `ShowExampleAppCustomRendering'::`1'::dtor$1
draw_list$20 = 8
gradient_size$21 = 40
p0$22 = 72
p1$23 = 104
col_a$24 = 132
col_b$25 = 164
p0$26 = 200
p1$27 = 232
col_a$28 = 260
col_b$29 = 292
p$30 = 328
col$31 = 356
spacing$32 = 388
corners_tl_br$33 = 420
rounding$34 = 452
circle_segments$35 = 484
curve_segments$36 = 516
x$37 = 548
y$38 = 580
n$39 = 612
th$40 = 644
cp3$41 = 680
cp4$42 = 728
canvas_p0$43 = 792
canvas_sz$44 = 824
canvas_p1$45 = 856
io$46 = 888
draw_list$47 = 920
is_hovered$48 = 948
is_active$49 = 980
origin$50 = 1016
mouse_pos_in_canvas$51 = 1048
mouse_threshold_for_pan$52 = 1076
drag_delta$53 = 1112
GRID_STEP$54 = 1140
x$55 = 1172
y$56 = 1204
n$57 = 1236
window_pos$58 = 1272
window_size$59 = 1304
window_center$60 = 1336
$T61 = 2516
$T62 = 2564
$T63 = 2596
$T64 = 2628
$T65 = 2660
$T66 = 2692
$T67 = 2724
$T68 = 2756
$T69 = 2788
$T70 = 2820
$T71 = 2852
$T72 = 2884
$T73 = 2916
$T74 = 2948
$T75 = 2980
$T76 = 3012
$T77 = 3044
$T78 = 3076
$T79 = 3108
$T80 = 3140
$T81 = 3172
$T82 = 3204
$T83 = 3236
$T84 = 3268
$T85 = 3300
$T86 = 3332
$T87 = 3364
$T88 = 3396
$T89 = 3428
$T90 = 3460
$T91 = 3492
$T92 = 3524
$T93 = 3556
$T94 = 3588
$T95 = 3620
$T96 = 3652
$T97 = 3684
$T98 = 3716
$T99 = 3748
$T100 = 3780
$T101 = 3812
$T102 = 3844
$T103 = 3876
$T104 = 3908
$T105 = 3944
tv1115 = 3956
tv1105 = 3956
tv1047 = 3956
tv981 = 3956
tv967 = 3956
tv930 = 3956
tv590 = 3956
tv574 = 3956
tv319 = 3956
tv302 = 3956
tv297 = 3956
tv291 = 3956
tv288 = 3956
tv233 = 3956
tv215 = 3956
tv128 = 3956
tv1041 = 3960
tv1024 = 3960
tv1004 = 3960
tv773 = 3960
tv755 = 3960
tv738 = 3960
tv720 = 3960
tv692 = 3960
tv676 = 3960
tv626 = 3960
tv608 = 3960
tv598 = 3960
tv582 = 3960
tv566 = 3960
tv483 = 3960
tv468 = 3960
tv452 = 3960
tv425 = 3960
tv408 = 3960
tv389 = 3960
tv370 = 3960
tv359 = 3960
tv310 = 3960
tv1063 = 3968
tv699 = 3968
tv432 = 3968
__$ArrayPad$ = 3976
p_open$ = 4016
?dtor$2@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA PROC ; `ShowExampleAppCustomRendering'::`1'::dtor$2
  0004e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00053	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00058	55		 push	 rbp
  00059	57		 push	 rdi
  0005a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005e	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS2@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
  00069	e8 00 00 00 00	 call	 _Init_thread_abort
  0006e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
?dtor$2@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA ENDP ; `ShowExampleAppCustomRendering'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
draw_list$20 = 8
gradient_size$21 = 40
p0$22 = 72
p1$23 = 104
col_a$24 = 132
col_b$25 = 164
p0$26 = 200
p1$27 = 232
col_a$28 = 260
col_b$29 = 292
p$30 = 328
col$31 = 356
spacing$32 = 388
corners_tl_br$33 = 420
rounding$34 = 452
circle_segments$35 = 484
curve_segments$36 = 516
x$37 = 548
y$38 = 580
n$39 = 612
th$40 = 644
cp3$41 = 680
cp4$42 = 728
canvas_p0$43 = 792
canvas_sz$44 = 824
canvas_p1$45 = 856
io$46 = 888
draw_list$47 = 920
is_hovered$48 = 948
is_active$49 = 980
origin$50 = 1016
mouse_pos_in_canvas$51 = 1048
mouse_threshold_for_pan$52 = 1076
drag_delta$53 = 1112
GRID_STEP$54 = 1140
x$55 = 1172
y$56 = 1204
n$57 = 1236
window_pos$58 = 1272
window_size$59 = 1304
window_center$60 = 1336
$T61 = 2516
$T62 = 2564
$T63 = 2596
$T64 = 2628
$T65 = 2660
$T66 = 2692
$T67 = 2724
$T68 = 2756
$T69 = 2788
$T70 = 2820
$T71 = 2852
$T72 = 2884
$T73 = 2916
$T74 = 2948
$T75 = 2980
$T76 = 3012
$T77 = 3044
$T78 = 3076
$T79 = 3108
$T80 = 3140
$T81 = 3172
$T82 = 3204
$T83 = 3236
$T84 = 3268
$T85 = 3300
$T86 = 3332
$T87 = 3364
$T88 = 3396
$T89 = 3428
$T90 = 3460
$T91 = 3492
$T92 = 3524
$T93 = 3556
$T94 = 3588
$T95 = 3620
$T96 = 3652
$T97 = 3684
$T98 = 3716
$T99 = 3748
$T100 = 3780
$T101 = 3812
$T102 = 3844
$T103 = 3876
$T104 = 3908
$T105 = 3944
tv1115 = 3956
tv1105 = 3956
tv1047 = 3956
tv981 = 3956
tv967 = 3956
tv930 = 3956
tv590 = 3956
tv574 = 3956
tv319 = 3956
tv302 = 3956
tv297 = 3956
tv291 = 3956
tv288 = 3956
tv233 = 3956
tv215 = 3956
tv128 = 3956
tv1041 = 3960
tv1024 = 3960
tv1004 = 3960
tv773 = 3960
tv755 = 3960
tv738 = 3960
tv720 = 3960
tv692 = 3960
tv676 = 3960
tv626 = 3960
tv608 = 3960
tv598 = 3960
tv582 = 3960
tv566 = 3960
tv483 = 3960
tv468 = 3960
tv452 = 3960
tv425 = 3960
tv408 = 3960
tv389 = 3960
tv370 = 3960
tv359 = 3960
tv310 = 3960
tv1063 = 3968
tv699 = 3968
tv432 = 3968
__$ArrayPad$ = 3976
p_open$ = 4016
?dtor$0@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA PROC ; `ShowExampleAppCustomRendering'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?P@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
  0001b	e8 00 00 00 00	 call	 _Init_thread_abort
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA ENDP ; `ShowExampleAppCustomRendering'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
draw_list$20 = 8
gradient_size$21 = 40
p0$22 = 72
p1$23 = 104
col_a$24 = 132
col_b$25 = 164
p0$26 = 200
p1$27 = 232
col_a$28 = 260
col_b$29 = 292
p$30 = 328
col$31 = 356
spacing$32 = 388
corners_tl_br$33 = 420
rounding$34 = 452
circle_segments$35 = 484
curve_segments$36 = 516
x$37 = 548
y$38 = 580
n$39 = 612
th$40 = 644
cp3$41 = 680
cp4$42 = 728
canvas_p0$43 = 792
canvas_sz$44 = 824
canvas_p1$45 = 856
io$46 = 888
draw_list$47 = 920
is_hovered$48 = 948
is_active$49 = 980
origin$50 = 1016
mouse_pos_in_canvas$51 = 1048
mouse_threshold_for_pan$52 = 1076
drag_delta$53 = 1112
GRID_STEP$54 = 1140
x$55 = 1172
y$56 = 1204
n$57 = 1236
window_pos$58 = 1272
window_size$59 = 1304
window_center$60 = 1336
$T61 = 2516
$T62 = 2564
$T63 = 2596
$T64 = 2628
$T65 = 2660
$T66 = 2692
$T67 = 2724
$T68 = 2756
$T69 = 2788
$T70 = 2820
$T71 = 2852
$T72 = 2884
$T73 = 2916
$T74 = 2948
$T75 = 2980
$T76 = 3012
$T77 = 3044
$T78 = 3076
$T79 = 3108
$T80 = 3140
$T81 = 3172
$T82 = 3204
$T83 = 3236
$T84 = 3268
$T85 = 3300
$T86 = 3332
$T87 = 3364
$T88 = 3396
$T89 = 3428
$T90 = 3460
$T91 = 3492
$T92 = 3524
$T93 = 3556
$T94 = 3588
$T95 = 3620
$T96 = 3652
$T97 = 3684
$T98 = 3716
$T99 = 3748
$T100 = 3780
$T101 = 3812
$T102 = 3844
$T103 = 3876
$T104 = 3908
$T105 = 3944
tv1115 = 3956
tv1105 = 3956
tv1047 = 3956
tv981 = 3956
tv967 = 3956
tv930 = 3956
tv590 = 3956
tv574 = 3956
tv319 = 3956
tv302 = 3956
tv297 = 3956
tv291 = 3956
tv288 = 3956
tv233 = 3956
tv215 = 3956
tv128 = 3956
tv1041 = 3960
tv1024 = 3960
tv1004 = 3960
tv773 = 3960
tv755 = 3960
tv738 = 3960
tv720 = 3960
tv692 = 3960
tv676 = 3960
tv626 = 3960
tv608 = 3960
tv598 = 3960
tv582 = 3960
tv566 = 3960
tv483 = 3960
tv468 = 3960
tv452 = 3960
tv425 = 3960
tv408 = 3960
tv389 = 3960
tv370 = 3960
tv359 = 3960
tv310 = 3960
tv1063 = 3968
tv699 = 3968
tv432 = 3968
__$ArrayPad$ = 3976
p_open$ = 4016
?dtor$1@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA PROC ; `ShowExampleAppCustomRendering'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
  00042	e8 00 00 00 00	 call	 _Init_thread_abort
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?dtor$1@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA ENDP ; `ShowExampleAppCustomRendering'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
draw_list$20 = 8
gradient_size$21 = 40
p0$22 = 72
p1$23 = 104
col_a$24 = 132
col_b$25 = 164
p0$26 = 200
p1$27 = 232
col_a$28 = 260
col_b$29 = 292
p$30 = 328
col$31 = 356
spacing$32 = 388
corners_tl_br$33 = 420
rounding$34 = 452
circle_segments$35 = 484
curve_segments$36 = 516
x$37 = 548
y$38 = 580
n$39 = 612
th$40 = 644
cp3$41 = 680
cp4$42 = 728
canvas_p0$43 = 792
canvas_sz$44 = 824
canvas_p1$45 = 856
io$46 = 888
draw_list$47 = 920
is_hovered$48 = 948
is_active$49 = 980
origin$50 = 1016
mouse_pos_in_canvas$51 = 1048
mouse_threshold_for_pan$52 = 1076
drag_delta$53 = 1112
GRID_STEP$54 = 1140
x$55 = 1172
y$56 = 1204
n$57 = 1236
window_pos$58 = 1272
window_size$59 = 1304
window_center$60 = 1336
$T61 = 2516
$T62 = 2564
$T63 = 2596
$T64 = 2628
$T65 = 2660
$T66 = 2692
$T67 = 2724
$T68 = 2756
$T69 = 2788
$T70 = 2820
$T71 = 2852
$T72 = 2884
$T73 = 2916
$T74 = 2948
$T75 = 2980
$T76 = 3012
$T77 = 3044
$T78 = 3076
$T79 = 3108
$T80 = 3140
$T81 = 3172
$T82 = 3204
$T83 = 3236
$T84 = 3268
$T85 = 3300
$T86 = 3332
$T87 = 3364
$T88 = 3396
$T89 = 3428
$T90 = 3460
$T91 = 3492
$T92 = 3524
$T93 = 3556
$T94 = 3588
$T95 = 3620
$T96 = 3652
$T97 = 3684
$T98 = 3716
$T99 = 3748
$T100 = 3780
$T101 = 3812
$T102 = 3844
$T103 = 3876
$T104 = 3908
$T105 = 3944
tv1115 = 3956
tv1105 = 3956
tv1047 = 3956
tv981 = 3956
tv967 = 3956
tv930 = 3956
tv590 = 3956
tv574 = 3956
tv319 = 3956
tv302 = 3956
tv297 = 3956
tv291 = 3956
tv288 = 3956
tv233 = 3956
tv215 = 3956
tv128 = 3956
tv1041 = 3960
tv1024 = 3960
tv1004 = 3960
tv773 = 3960
tv755 = 3960
tv738 = 3960
tv720 = 3960
tv692 = 3960
tv676 = 3960
tv626 = 3960
tv608 = 3960
tv598 = 3960
tv582 = 3960
tv566 = 3960
tv483 = 3960
tv468 = 3960
tv452 = 3960
tv425 = 3960
tv408 = 3960
tv389 = 3960
tv370 = 3960
tv359 = 3960
tv310 = 3960
tv1063 = 3968
tv699 = 3968
tv432 = 3968
__$ArrayPad$ = 3976
p_open$ = 4016
?dtor$2@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA PROC ; `ShowExampleAppCustomRendering'::`1'::dtor$2
  0004e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00053	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00058	55		 push	 rbp
  00059	57		 push	 rdi
  0005a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005e	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS2@?BG@??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA
  00069	e8 00 00 00 00	 call	 _Init_thread_abort
  0006e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
?dtor$2@?0??ShowExampleAppCustomRendering@@YAXPEA_N@Z@4HA ENDP ; `ShowExampleAppCustomRendering'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppWindowTitles@@YAXPEA_N@Z
_TEXT	SEGMENT
viewport$ = 8
base_pos$ = 40
buf$ = 80
$T5 = 420
$T6 = 452
$T7 = 484
$T8 = 516
$T9 = 548
$T10 = 580
tv141 = 596
tv155 = 600
tv92 = 600
tv68 = 600
__$ArrayPad$ = 608
__formal$ = 656
?ShowExampleAppWindowTitles@@YAXPEA_N@Z PROC		; ShowExampleAppWindowTitles, COMDAT

; 7441 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 98 02
	00 00		 sub	 rsp, 664		; 00000298H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 a6 00 00 00	 mov	 ecx, 166		; 000000a6H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+696]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 60 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 7442 :     const ImGuiViewport* viewport = ImGui::GetMainViewport();

  0003b	e8 00 00 00 00	 call	 ?GetMainViewport@ImGui@@YAPEAUImGuiViewport@@XZ ; ImGui::GetMainViewport
  00040	48 89 45 08	 mov	 QWORD PTR viewport$[rbp], rax

; 7443 :     const ImVec2 base_pos = viewport->Pos;

  00044	48 8b 45 08	 mov	 rax, QWORD PTR viewport$[rbp]
  00048	48 8b 40 04	 mov	 rax, QWORD PTR [rax+4]
  0004c	48 89 45 28	 mov	 QWORD PTR base_pos$[rbp], rax

; 7444 : 
; 7445 :     // By default, Windows are uniquely identified by their title.
; 7446 :     // You can use the "##" and "###" markers to manipulate the display/ID.
; 7447 : 
; 7448 :     // Using "##" to display same title but have unique identifier.
; 7449 :     ImGui::SetNextWindowPos(ImVec2(base_pos.x + 100, base_pos.y + 100), ImGuiCond_FirstUseEver);

  00050	0f 57 d2	 xorps	 xmm2, xmm2
  00053	0f 57 c9	 xorps	 xmm1, xmm1
  00056	48 8d 8d a4 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  0005d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00062	48 89 85 58 02
	00 00		 mov	 QWORD PTR tv68[rbp], rax
  00069	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR base_pos$[rbp+4]
  0006e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@42c80000
  00076	f3 0f 10 4d 28	 movss	 xmm1, DWORD PTR base_pos$[rbp]
  0007b	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@42c80000
  00083	0f 28 d0	 movaps	 xmm2, xmm0
  00086	48 8d 8d c4 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  0008d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00092	48 8b 8d 58 02
	00 00		 mov	 rcx, QWORD PTR tv68[rbp]
  00099	4c 8b c1	 mov	 r8, rcx
  0009c	ba 04 00 00 00	 mov	 edx, 4
  000a1	48 8b c8	 mov	 rcx, rax
  000a4	e8 00 00 00 00	 call	 ?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H0@Z ; ImGui::SetNextWindowPos

; 7450 :     ImGui::Begin("Same title as another window##1");

  000a9	45 33 c0	 xor	 r8d, r8d
  000ac	33 d2		 xor	 edx, edx
  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@BDOLKHNF@Same?5title?5as?5another?5window?$CD?$CD1?$AA@
  000b5	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin
$LN4@ShowExampl:

; 7451 :     IMGUI_DEMO_MARKER("Examples/Manipulating window titles");

  000ba	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  000c2	74 26		 je	 SHORT $LN5@ShowExampl
  000c4	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowExampleAppWindowTitles@@YAXPEA_N@Z@4JA
  000ca	83 c0 0a	 add	 eax, 10
  000cd	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  000d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CE@IMLLBKBG@Examples?1Manipulating?5window?5tit@
  000db	8b d0		 mov	 edx, eax
  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN5@ShowExampl:
  000ea	33 c0		 xor	 eax, eax
  000ec	85 c0		 test	 eax, eax
  000ee	75 ca		 jne	 SHORT $LN4@ShowExampl

; 7452 :     ImGui::Text("This is window 1.\nMy title is the same as window 2, but my identifier is unique.");

  000f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FB@NGKGAEMM@This?5is?5window?51?4?6My?5title?5is?5th@
  000f7	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 7453 :     ImGui::End();

  000fc	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 7454 : 
; 7455 :     ImGui::SetNextWindowPos(ImVec2(base_pos.x + 100, base_pos.y + 200), ImGuiCond_FirstUseEver);

  00101	0f 57 d2	 xorps	 xmm2, xmm2
  00104	0f 57 c9	 xorps	 xmm1, xmm1
  00107	48 8d 8d e4 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  0010e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00113	48 89 85 58 02
	00 00		 mov	 QWORD PTR tv92[rbp], rax
  0011a	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR base_pos$[rbp+4]
  0011f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@43480000
  00127	f3 0f 10 4d 28	 movss	 xmm1, DWORD PTR base_pos$[rbp]
  0012c	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@42c80000
  00134	0f 28 d0	 movaps	 xmm2, xmm0
  00137	48 8d 8d 04 02
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0013e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00143	48 8b 8d 58 02
	00 00		 mov	 rcx, QWORD PTR tv92[rbp]
  0014a	4c 8b c1	 mov	 r8, rcx
  0014d	ba 04 00 00 00	 mov	 edx, 4
  00152	48 8b c8	 mov	 rcx, rax
  00155	e8 00 00 00 00	 call	 ?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H0@Z ; ImGui::SetNextWindowPos

; 7456 :     ImGui::Begin("Same title as another window##2");

  0015a	45 33 c0	 xor	 r8d, r8d
  0015d	33 d2		 xor	 edx, edx
  0015f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@DIMGPEBG@Same?5title?5as?5another?5window?$CD?$CD2?$AA@
  00166	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin

; 7457 :     ImGui::Text("This is window 2.\nMy title is the same as window 1, but my identifier is unique.");

  0016b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FB@MFIDPLFC@This?5is?5window?52?4?6My?5title?5is?5th@
  00172	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 7458 :     ImGui::End();

  00177	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 7459 : 
; 7460 :     // Using "###" to display a changing title but keep a static identifier "AnimatedTitle"
; 7461 :     char buf[128];
; 7462 :     sprintf(buf, "Animated title %c %d###AnimatedTitle", "|/-\\"[(int)(ImGui::GetTime() / 0.25f) & 3], ImGui::GetFrameCount());

  0017c	e8 00 00 00 00	 call	 ?GetFrameCount@ImGui@@YAHXZ ; ImGui::GetFrameCount
  00181	89 85 54 02 00
	00		 mov	 DWORD PTR tv141[rbp], eax
  00187	e8 00 00 00 00	 call	 ?GetTime@ImGui@@YANXZ	; ImGui::GetTime
  0018c	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@3fd0000000000000
  00194	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00198	83 e0 03	 and	 eax, 3
  0019b	48 98		 cdqe
  0019d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04NLDFHNKP@?$HM?1?9?2?$AA@
  001a4	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  001a8	8b 8d 54 02 00
	00		 mov	 ecx, DWORD PTR tv141[rbp]
  001ae	44 8b c9	 mov	 r9d, ecx
  001b1	44 8b c0	 mov	 r8d, eax
  001b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@MMFFJKJN@Animated?5title?5?$CFc?5?$CFd?$CD?$CD?$CDAnimatedT@
  001bb	48 8d 4d 50	 lea	 rcx, QWORD PTR buf$[rbp]
  001bf	e8 00 00 00 00	 call	 sprintf

; 7463 :     ImGui::SetNextWindowPos(ImVec2(base_pos.x + 100, base_pos.y + 300), ImGuiCond_FirstUseEver);

  001c4	0f 57 d2	 xorps	 xmm2, xmm2
  001c7	0f 57 c9	 xorps	 xmm1, xmm1
  001ca	48 8d 8d 24 02
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  001d1	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001d6	48 89 85 58 02
	00 00		 mov	 QWORD PTR tv155[rbp], rax
  001dd	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR base_pos$[rbp+4]
  001e2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@43960000
  001ea	f3 0f 10 4d 28	 movss	 xmm1, DWORD PTR base_pos$[rbp]
  001ef	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@42c80000
  001f7	0f 28 d0	 movaps	 xmm2, xmm0
  001fa	48 8d 8d 44 02
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00201	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00206	48 8b 8d 58 02
	00 00		 mov	 rcx, QWORD PTR tv155[rbp]
  0020d	4c 8b c1	 mov	 r8, rcx
  00210	ba 04 00 00 00	 mov	 edx, 4
  00215	48 8b c8	 mov	 rcx, rax
  00218	e8 00 00 00 00	 call	 ?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H0@Z ; ImGui::SetNextWindowPos

; 7464 :     ImGui::Begin(buf);

  0021d	45 33 c0	 xor	 r8d, r8d
  00220	33 d2		 xor	 edx, edx
  00222	48 8d 4d 50	 lea	 rcx, QWORD PTR buf$[rbp]
  00226	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin

; 7465 :     ImGui::Text("This window has a changing title.");

  0022b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@JFOMGEPF@This?5window?5has?5a?5changing?5title@
  00232	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 7466 :     ImGui::End();

  00237	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 7467 : }

  0023c	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00240	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShowExampleAppWindowTitles@@YAXPEA_N@Z$rtcFrameData
  00247	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0024c	48 8b 8d 60 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00253	48 33 cd	 xor	 rcx, rbp
  00256	e8 00 00 00 00	 call	 __security_check_cookie
  0025b	48 8d a5 78 02
	00 00		 lea	 rsp, QWORD PTR [rbp+632]
  00262	5f		 pop	 rdi
  00263	5d		 pop	 rbp
  00264	c3		 ret	 0
?ShowExampleAppWindowTitles@@YAXPEA_N@Z ENDP		; ShowExampleAppWindowTitles
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppFullscreen@@YAXPEA_N@Z
_TEXT	SEGMENT
viewport$ = 8
$T1 = 228
$T2 = 264
$T3 = 296
$T4 = 324
tv82 = 344
tv75 = 344
p_open$ = 384
?ShowExampleAppFullscreen@@YAXPEA_N@Z PROC		; ShowExampleAppFullscreen, COMDAT

; 7403 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]

; 7404 :     static bool use_work_area = true;
; 7405 :     static ImGuiWindowFlags flags = ImGuiWindowFlags_NoDecoration | ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoSavedSettings;
; 7406 : 
; 7407 :     // We demonstrate using the full viewport area or the work area (without menu-bars, task-bars etc.)
; 7408 :     // Based on your use case you may want one of the other.
; 7409 :     const ImGuiViewport* viewport = ImGui::GetMainViewport();

  0002a	e8 00 00 00 00	 call	 ?GetMainViewport@ImGui@@YAPEAUImGuiViewport@@XZ ; ImGui::GetMainViewport
  0002f	48 89 45 08	 mov	 QWORD PTR viewport$[rbp], rax

; 7410 :     ImGui::SetNextWindowPos(use_work_area ? viewport->WorkPos : viewport->Pos);

  00033	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?use_work_area@?1??ShowExampleAppFullscreen@@YAXPEA_N@Z@4_NA
  0003a	85 c0		 test	 eax, eax
  0003c	74 11		 je	 SHORT $LN5@ShowExampl
  0003e	48 8b 45 08	 mov	 rax, QWORD PTR viewport$[rbp]
  00042	48 83 c0 14	 add	 rax, 20
  00046	48 89 85 58 01
	00 00		 mov	 QWORD PTR tv75[rbp], rax
  0004d	eb 0f		 jmp	 SHORT $LN6@ShowExampl
$LN5@ShowExampl:
  0004f	48 8b 45 08	 mov	 rax, QWORD PTR viewport$[rbp]
  00053	48 83 c0 04	 add	 rax, 4
  00057	48 89 85 58 01
	00 00		 mov	 QWORD PTR tv75[rbp], rax
$LN6@ShowExampl:
  0005e	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR tv75[rbp]
  00065	48 89 85 08 01
	00 00		 mov	 QWORD PTR $T2[rbp], rax
  0006c	0f 57 d2	 xorps	 xmm2, xmm2
  0006f	0f 57 c9	 xorps	 xmm1, xmm1
  00072	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00079	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0007e	4c 8b c0	 mov	 r8, rax
  00081	33 d2		 xor	 edx, edx
  00083	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR $T2[rbp]
  0008a	e8 00 00 00 00	 call	 ?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H0@Z ; ImGui::SetNextWindowPos

; 7411 :     ImGui::SetNextWindowSize(use_work_area ? viewport->WorkSize : viewport->Size);

  0008f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?use_work_area@?1??ShowExampleAppFullscreen@@YAXPEA_N@Z@4_NA
  00096	85 c0		 test	 eax, eax
  00098	74 11		 je	 SHORT $LN7@ShowExampl
  0009a	48 8b 45 08	 mov	 rax, QWORD PTR viewport$[rbp]
  0009e	48 83 c0 1c	 add	 rax, 28
  000a2	48 89 85 58 01
	00 00		 mov	 QWORD PTR tv82[rbp], rax
  000a9	eb 0f		 jmp	 SHORT $LN8@ShowExampl
$LN7@ShowExampl:
  000ab	48 8b 45 08	 mov	 rax, QWORD PTR viewport$[rbp]
  000af	48 83 c0 0c	 add	 rax, 12
  000b3	48 89 85 58 01
	00 00		 mov	 QWORD PTR tv82[rbp], rax
$LN8@ShowExampl:
  000ba	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR tv82[rbp]
  000c1	48 89 85 28 01
	00 00		 mov	 QWORD PTR $T3[rbp], rax
  000c8	33 d2		 xor	 edx, edx
  000ca	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR $T3[rbp]
  000d1	e8 00 00 00 00	 call	 ?SetNextWindowSize@ImGui@@YAXAEBUImVec2@@H@Z ; ImGui::SetNextWindowSize

; 7412 : 
; 7413 :     if (ImGui::Begin("Example: Fullscreen window", p_open, flags))

  000d6	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR ?flags@?1??ShowExampleAppFullscreen@@YAXPEA_N@Z@4HA
  000dd	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR p_open$[rbp]
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@OIOENALL@Example?3?5Fullscreen?5window?$AA@
  000eb	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin
  000f0	0f b6 c0	 movzx	 eax, al
  000f3	85 c0		 test	 eax, eax
  000f5	0f 84 f8 00 00
	00		 je	 $LN2@ShowExampl

; 7414 :     {
; 7415 :         ImGui::Checkbox("Use work area instead of main area", &use_work_area);

  000fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?use_work_area@?1??ShowExampleAppFullscreen@@YAXPEA_N@Z@4_NA
  00102	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@LIJNANIG@Use?5work?5area?5instead?5of?5main?5ar@
  00109	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 7416 :         ImGui::SameLine();

  0010e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00116	0f 57 c0	 xorps	 xmm0, xmm0
  00119	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 7417 :         HelpMarker("Main Area = entire viewport,\nWork Area = entire viewport minus sections used by the main menu bars, task bars etc.\n\nEnable the main-menu bar in Examples menu to see the difference.");

  0011e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0LF@IPIHCBEA@Main?5Area?5?$DN?5entire?5viewport?0?6Wor@
  00125	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 7418 : 
; 7419 :         ImGui::CheckboxFlags("ImGuiWindowFlags_NoBackground", &flags, ImGuiWindowFlags_NoBackground);

  0012a	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  00130	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?1??ShowExampleAppFullscreen@@YAXPEA_N@Z@4HA
  00137	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@GBGIKPEE@ImGuiWindowFlags_NoBackground?$AA@
  0013e	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 7420 :         ImGui::CheckboxFlags("ImGuiWindowFlags_NoDecoration", &flags, ImGuiWindowFlags_NoDecoration);

  00143	41 b8 2b 00 00
	00		 mov	 r8d, 43			; 0000002bH
  00149	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?1??ShowExampleAppFullscreen@@YAXPEA_N@Z@4HA
  00150	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@ECAKMENC@ImGuiWindowFlags_NoDecoration?$AA@
  00157	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 7421 :         ImGui::Indent();

  0015c	0f 57 c0	 xorps	 xmm0, xmm0
  0015f	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent

; 7422 :         ImGui::CheckboxFlags("ImGuiWindowFlags_NoTitleBar", &flags, ImGuiWindowFlags_NoTitleBar);

  00164	41 b8 01 00 00
	00		 mov	 r8d, 1
  0016a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?1??ShowExampleAppFullscreen@@YAXPEA_N@Z@4HA
  00171	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@DAAIDMAD@ImGuiWindowFlags_NoTitleBar?$AA@
  00178	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 7423 :         ImGui::CheckboxFlags("ImGuiWindowFlags_NoCollapse", &flags, ImGuiWindowFlags_NoCollapse);

  0017d	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00183	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?1??ShowExampleAppFullscreen@@YAXPEA_N@Z@4HA
  0018a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@NPHEKNPH@ImGuiWindowFlags_NoCollapse?$AA@
  00191	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 7424 :         ImGui::CheckboxFlags("ImGuiWindowFlags_NoScrollbar", &flags, ImGuiWindowFlags_NoScrollbar);

  00196	41 b8 08 00 00
	00		 mov	 r8d, 8
  0019c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?flags@?1??ShowExampleAppFullscreen@@YAXPEA_N@Z@4HA
  001a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@FBGOLCGF@ImGuiWindowFlags_NoScrollbar?$AA@
  001aa	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 7425 :         ImGui::Unindent();

  001af	0f 57 c0	 xorps	 xmm0, xmm0
  001b2	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent

; 7426 : 
; 7427 :         if (p_open && ImGui::Button("Close this window"))

  001b7	48 83 bd 80 01
	00 00 00	 cmp	 QWORD PTR p_open$[rbp], 0
  001bf	74 32		 je	 SHORT $LN3@ShowExampl
  001c1	0f 57 d2	 xorps	 xmm2, xmm2
  001c4	0f 57 c9	 xorps	 xmm1, xmm1
  001c7	48 8d 8d 44 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  001ce	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001d3	48 8b d0	 mov	 rdx, rax
  001d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@FCOOFHFP@Close?5this?5window?$AA@
  001dd	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  001e2	0f b6 c0	 movzx	 eax, al
  001e5	85 c0		 test	 eax, eax
  001e7	74 0a		 je	 SHORT $LN3@ShowExampl

; 7428 :             *p_open = false;

  001e9	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR p_open$[rbp]
  001f0	c6 00 00	 mov	 BYTE PTR [rax], 0
$LN3@ShowExampl:
$LN2@ShowExampl:

; 7429 :     }
; 7430 :     ImGui::End();

  001f3	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 7431 : }

  001f8	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  001ff	5f		 pop	 rdi
  00200	5d		 pop	 rbp
  00201	c3		 ret	 0
?ShowExampleAppFullscreen@@YAXPEA_N@Z ENDP		; ShowExampleAppFullscreen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z
_TEXT	SEGMENT
io$ = 8
window_flags$ = 36
PAD$7 = 68
viewport$8 = 104
work_pos$9 = 136
work_size$10 = 168
window_pos$11 = 200
window_pos_pivot$12 = 232
$T13 = 452
$T14 = 484
tv222 = 500
tv213 = 500
tv204 = 500
tv195 = 500
tv186 = 500
tv177 = 500
tv90 = 500
tv87 = 500
tv84 = 500
tv78 = 500
tv129 = 504
__$ArrayPad$ = 512
p_open$ = 560
?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z PROC		; ShowExampleAppSimpleOverlay, COMDAT

; 7348 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 8e 00 00 00	 mov	 ecx, 142		; 0000008eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR [rsp+600]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 00 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 7349 :     static int location = 0;
; 7350 :     ImGuiIO& io = ImGui::GetIO();

  0003b	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  00040	48 89 45 08	 mov	 QWORD PTR io$[rbp], rax

; 7351 :     ImGuiWindowFlags window_flags = ImGuiWindowFlags_NoDecoration | ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoFocusOnAppearing | ImGuiWindowFlags_NoNav;

  00044	c7 45 24 6b 11
	0c 00		 mov	 DWORD PTR window_flags$[rbp], 790891 ; 000c116bH

; 7352 :     if (location >= 0)

  0004b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?location@?1??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4HA, 0
  00052	0f 8c 91 01 00
	00		 jl	 $LN5@ShowExampl

; 7353 :     {
; 7354 :         const float PAD = 10.0f;

  00058	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00060	f3 0f 11 45 44	 movss	 DWORD PTR PAD$7[rbp], xmm0

; 7355 :         const ImGuiViewport* viewport = ImGui::GetMainViewport();

  00065	e8 00 00 00 00	 call	 ?GetMainViewport@ImGui@@YAPEAUImGuiViewport@@XZ ; ImGui::GetMainViewport
  0006a	48 89 45 68	 mov	 QWORD PTR viewport$8[rbp], rax

; 7356 :         ImVec2 work_pos = viewport->WorkPos; // Use work area to avoid menu-bar/task-bar, if any!

  0006e	48 8b 45 68	 mov	 rax, QWORD PTR viewport$8[rbp]
  00072	48 8b 40 14	 mov	 rax, QWORD PTR [rax+20]
  00076	48 89 85 88 00
	00 00		 mov	 QWORD PTR work_pos$9[rbp], rax

; 7357 :         ImVec2 work_size = viewport->WorkSize;

  0007d	48 8b 45 68	 mov	 rax, QWORD PTR viewport$8[rbp]
  00081	48 8b 40 1c	 mov	 rax, QWORD PTR [rax+28]
  00085	48 89 85 a8 00
	00 00		 mov	 QWORD PTR work_size$10[rbp], rax

; 7358 :         ImVec2 window_pos, window_pos_pivot;

  0008c	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR window_pos$11[rbp]
  00093	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@XZ	; ImVec2::ImVec2
  00098	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR window_pos_pivot$12[rbp]
  0009f	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@XZ	; ImVec2::ImVec2

; 7359 :         window_pos.x = (location & 1) ? (work_pos.x + work_size.x - PAD) : (work_pos.x + PAD);

  000a4	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?location@?1??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4HA
  000aa	83 e0 01	 and	 eax, 1
  000ad	85 c0		 test	 eax, eax
  000af	74 22		 je	 SHORT $LN21@ShowExampl
  000b1	f3 0f 10 85 88
	00 00 00	 movss	 xmm0, DWORD PTR work_pos$9[rbp]
  000b9	f3 0f 58 85 a8
	00 00 00	 addss	 xmm0, DWORD PTR work_size$10[rbp]
  000c1	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@41200000
  000c9	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv78[rbp], xmm0
  000d1	eb 18		 jmp	 SHORT $LN22@ShowExampl
$LN21@ShowExampl:
  000d3	f3 0f 10 85 88
	00 00 00	 movss	 xmm0, DWORD PTR work_pos$9[rbp]
  000db	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  000e3	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv78[rbp], xmm0
$LN22@ShowExampl:
  000eb	f3 0f 10 85 f4
	01 00 00	 movss	 xmm0, DWORD PTR tv78[rbp]
  000f3	f3 0f 11 85 c8
	00 00 00	 movss	 DWORD PTR window_pos$11[rbp], xmm0

; 7360 :         window_pos.y = (location & 2) ? (work_pos.y + work_size.y - PAD) : (work_pos.y + PAD);

  000fb	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?location@?1??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4HA
  00101	83 e0 02	 and	 eax, 2
  00104	85 c0		 test	 eax, eax
  00106	74 22		 je	 SHORT $LN23@ShowExampl
  00108	f3 0f 10 85 8c
	00 00 00	 movss	 xmm0, DWORD PTR work_pos$9[rbp+4]
  00110	f3 0f 58 85 ac
	00 00 00	 addss	 xmm0, DWORD PTR work_size$10[rbp+4]
  00118	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@41200000
  00120	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv84[rbp], xmm0
  00128	eb 18		 jmp	 SHORT $LN24@ShowExampl
$LN23@ShowExampl:
  0012a	f3 0f 10 85 8c
	00 00 00	 movss	 xmm0, DWORD PTR work_pos$9[rbp+4]
  00132	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  0013a	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv84[rbp], xmm0
$LN24@ShowExampl:
  00142	f3 0f 10 85 f4
	01 00 00	 movss	 xmm0, DWORD PTR tv84[rbp]
  0014a	f3 0f 11 85 cc
	00 00 00	 movss	 DWORD PTR window_pos$11[rbp+4], xmm0

; 7361 :         window_pos_pivot.x = (location & 1) ? 1.0f : 0.0f;

  00152	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?location@?1??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4HA
  00158	83 e0 01	 and	 eax, 1
  0015b	85 c0		 test	 eax, eax
  0015d	74 12		 je	 SHORT $LN25@ShowExampl
  0015f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00167	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv87[rbp], xmm0
  0016f	eb 0b		 jmp	 SHORT $LN26@ShowExampl
$LN25@ShowExampl:
  00171	0f 57 c0	 xorps	 xmm0, xmm0
  00174	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv87[rbp], xmm0
$LN26@ShowExampl:
  0017c	f3 0f 10 85 f4
	01 00 00	 movss	 xmm0, DWORD PTR tv87[rbp]
  00184	f3 0f 11 85 e8
	00 00 00	 movss	 DWORD PTR window_pos_pivot$12[rbp], xmm0

; 7362 :         window_pos_pivot.y = (location & 2) ? 1.0f : 0.0f;

  0018c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?location@?1??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4HA
  00192	83 e0 02	 and	 eax, 2
  00195	85 c0		 test	 eax, eax
  00197	74 12		 je	 SHORT $LN27@ShowExampl
  00199	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001a1	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv90[rbp], xmm0
  001a9	eb 0b		 jmp	 SHORT $LN28@ShowExampl
$LN27@ShowExampl:
  001ab	0f 57 c0	 xorps	 xmm0, xmm0
  001ae	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR tv90[rbp], xmm0
$LN28@ShowExampl:
  001b6	f3 0f 10 85 f4
	01 00 00	 movss	 xmm0, DWORD PTR tv90[rbp]
  001be	f3 0f 11 85 ec
	00 00 00	 movss	 DWORD PTR window_pos_pivot$12[rbp+4], xmm0

; 7363 :         ImGui::SetNextWindowPos(window_pos, ImGuiCond_Always, window_pos_pivot);

  001c6	4c 8d 85 e8 00
	00 00		 lea	 r8, QWORD PTR window_pos_pivot$12[rbp]
  001cd	ba 01 00 00 00	 mov	 edx, 1
  001d2	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR window_pos$11[rbp]
  001d9	e8 00 00 00 00	 call	 ?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H0@Z ; ImGui::SetNextWindowPos

; 7364 :         window_flags |= ImGuiWindowFlags_NoMove;

  001de	8b 45 24	 mov	 eax, DWORD PTR window_flags$[rbp]
  001e1	83 c8 04	 or	 eax, 4
  001e4	89 45 24	 mov	 DWORD PTR window_flags$[rbp], eax
  001e7	eb 60		 jmp	 SHORT $LN6@ShowExampl
$LN5@ShowExampl:

; 7365 :     }
; 7366 :     else if (location == -2)

  001e9	83 3d 00 00 00
	00 fe		 cmp	 DWORD PTR ?location@?1??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4HA, -2
  001f0	75 57		 jne	 SHORT $LN7@ShowExampl

; 7367 :     {
; 7368 :         // Center window
; 7369 :         ImGui::SetNextWindowPos(ImGui::GetMainViewport()->GetCenter(), ImGuiCond_Always, ImVec2(0.5f, 0.5f));

  001f2	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f000000
  001fa	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  00202	48 8d 8d c4 01
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  00209	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0020e	48 89 85 f8 01
	00 00		 mov	 QWORD PTR tv129[rbp], rax
  00215	e8 00 00 00 00	 call	 ?GetMainViewport@ImGui@@YAPEAUImGuiViewport@@XZ ; ImGui::GetMainViewport
  0021a	48 8d 95 e4 01
	00 00		 lea	 rdx, QWORD PTR $T14[rbp]
  00221	48 8b c8	 mov	 rcx, rax
  00224	e8 00 00 00 00	 call	 ?GetCenter@ImGuiViewport@@QEBA?AUImVec2@@XZ ; ImGuiViewport::GetCenter
  00229	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR tv129[rbp]
  00230	4c 8b c1	 mov	 r8, rcx
  00233	ba 01 00 00 00	 mov	 edx, 1
  00238	48 8b c8	 mov	 rcx, rax
  0023b	e8 00 00 00 00	 call	 ?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H0@Z ; ImGui::SetNextWindowPos

; 7370 :         window_flags |= ImGuiWindowFlags_NoMove;

  00240	8b 45 24	 mov	 eax, DWORD PTR window_flags$[rbp]
  00243	83 c8 04	 or	 eax, 4
  00246	89 45 24	 mov	 DWORD PTR window_flags$[rbp], eax
$LN7@ShowExampl:
$LN6@ShowExampl:

; 7371 :     }
; 7372 :     ImGui::SetNextWindowBgAlpha(0.35f); // Transparent background

  00249	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  00251	e8 00 00 00 00	 call	 ?SetNextWindowBgAlpha@ImGui@@YAXM@Z ; ImGui::SetNextWindowBgAlpha

; 7373 :     if (ImGui::Begin("Example: Simple overlay", p_open, window_flags))

  00256	44 8b 45 24	 mov	 r8d, DWORD PTR window_flags$[rbp]
  0025a	48 8b 95 30 02
	00 00		 mov	 rdx, QWORD PTR p_open$[rbp]
  00261	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@PFDIHNNE@Example?3?5Simple?5overlay?$AA@
  00268	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin
  0026d	0f b6 c0	 movzx	 eax, al
  00270	85 c0		 test	 eax, eax
  00272	0f 84 71 02 00
	00		 je	 $LN8@ShowExampl
$LN4@ShowExampl:

; 7374 :     {
; 7375 :         IMGUI_DEMO_MARKER("Examples/Simple Overlay");

  00278	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00280	74 26		 je	 SHORT $LN9@ShowExampl
  00282	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4JA
  00288	83 c0 1b	 add	 eax, 27
  0028b	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00292	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BI@LOFEJJJB@Examples?1Simple?5Overlay?$AA@
  00299	8b d0		 mov	 edx, eax
  0029b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  002a2	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN9@ShowExampl:
  002a8	33 c0		 xor	 eax, eax
  002aa	85 c0		 test	 eax, eax
  002ac	75 ca		 jne	 SHORT $LN4@ShowExampl

; 7376 :         ImGui::Text("Simple overlay\n" "(right-click to change position)");

  002ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DA@NHHAMFHG@Simple?5overlay?6?$CIright?9click?5to?5c@
  002b5	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 7377 :         ImGui::Separator();

  002ba	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 7378 :         if (ImGui::IsMousePosValid())

  002bf	33 c9		 xor	 ecx, ecx
  002c1	e8 00 00 00 00	 call	 ?IsMousePosValid@ImGui@@YA_NPEBUImVec2@@@Z ; ImGui::IsMousePosValid
  002c6	0f b6 c0	 movzx	 eax, al
  002c9	85 c0		 test	 eax, eax
  002cb	74 33		 je	 SHORT $LN10@ShowExampl

; 7379 :             ImGui::Text("Mouse Position: (%.1f,%.1f)", io.MousePos.x, io.MousePos.y);

  002cd	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  002d1	f3 0f 5a 80 f8
	0d 00 00	 cvtss2sd xmm0, DWORD PTR [rax+3576]
  002d9	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  002dd	f3 0f 5a 88 f4
	0d 00 00	 cvtss2sd xmm1, DWORD PTR [rax+3572]
  002e5	0f 28 d0	 movaps	 xmm2, xmm0
  002e8	66 49 0f 7e d0	 movq	 r8, xmm2
  002ed	66 48 0f 7e ca	 movq	 rdx, xmm1
  002f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@DKAAEOG@Mouse?5Position?3?5?$CI?$CF?41f?0?$CF?41f?$CJ?$AA@
  002f9	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 7380 :         else

  002fe	eb 0c		 jmp	 SHORT $LN11@ShowExampl
$LN10@ShowExampl:

; 7381 :             ImGui::Text("Mouse Position: <invalid>");

  00300	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@POIHMAKN@Mouse?5Position?3?5?$DMinvalid?$DO?$AA@
  00307	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN11@ShowExampl:

; 7382 :         if (ImGui::BeginPopupContextWindow())

  0030c	ba 01 00 00 00	 mov	 edx, 1
  00311	33 c9		 xor	 ecx, ecx
  00313	e8 00 00 00 00	 call	 ?BeginPopupContextWindow@ImGui@@YA_NPEBDH@Z ; ImGui::BeginPopupContextWindow
  00318	0f b6 c0	 movzx	 eax, al
  0031b	85 c0		 test	 eax, eax
  0031d	0f 84 c6 01 00
	00		 je	 $LN12@ShowExampl

; 7383 :         {
; 7384 :             if (ImGui::MenuItem("Custom",       NULL, location == -1)) location = -1;

  00323	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?location@?1??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4HA, -1
  0032a	75 09		 jne	 SHORT $LN29@ShowExampl
  0032c	c6 85 f4 01 00
	00 01		 mov	 BYTE PTR tv177[rbp], 1
  00333	eb 07		 jmp	 SHORT $LN30@ShowExampl
$LN29@ShowExampl:
  00335	c6 85 f4 01 00
	00 00		 mov	 BYTE PTR tv177[rbp], 0
$LN30@ShowExampl:
  0033c	41 b1 01	 mov	 r9b, 1
  0033f	44 0f b6 85 f4
	01 00 00	 movzx	 r8d, BYTE PTR tv177[rbp]
  00347	33 d2		 xor	 edx, edx
  00349	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06IFGIOHDE@Custom?$AA@
  00350	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  00355	0f b6 c0	 movzx	 eax, al
  00358	85 c0		 test	 eax, eax
  0035a	74 0a		 je	 SHORT $LN13@ShowExampl
  0035c	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?location@?1??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4HA, -1
$LN13@ShowExampl:

; 7385 :             if (ImGui::MenuItem("Center",       NULL, location == -2)) location = -2;

  00366	83 3d 00 00 00
	00 fe		 cmp	 DWORD PTR ?location@?1??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4HA, -2
  0036d	75 09		 jne	 SHORT $LN31@ShowExampl
  0036f	c6 85 f4 01 00
	00 01		 mov	 BYTE PTR tv186[rbp], 1
  00376	eb 07		 jmp	 SHORT $LN32@ShowExampl
$LN31@ShowExampl:
  00378	c6 85 f4 01 00
	00 00		 mov	 BYTE PTR tv186[rbp], 0
$LN32@ShowExampl:
  0037f	41 b1 01	 mov	 r9b, 1
  00382	44 0f b6 85 f4
	01 00 00	 movzx	 r8d, BYTE PTR tv186[rbp]
  0038a	33 d2		 xor	 edx, edx
  0038c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06NOADDNNE@Center?$AA@
  00393	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  00398	0f b6 c0	 movzx	 eax, al
  0039b	85 c0		 test	 eax, eax
  0039d	74 0a		 je	 SHORT $LN14@ShowExampl
  0039f	c7 05 00 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?location@?1??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4HA, -2
$LN14@ShowExampl:

; 7386 :             if (ImGui::MenuItem("Top-left",     NULL, location == 0)) location = 0;

  003a9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?location@?1??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4HA, 0
  003b0	75 09		 jne	 SHORT $LN33@ShowExampl
  003b2	c6 85 f4 01 00
	00 01		 mov	 BYTE PTR tv195[rbp], 1
  003b9	eb 07		 jmp	 SHORT $LN34@ShowExampl
$LN33@ShowExampl:
  003bb	c6 85 f4 01 00
	00 00		 mov	 BYTE PTR tv195[rbp], 0
$LN34@ShowExampl:
  003c2	41 b1 01	 mov	 r9b, 1
  003c5	44 0f b6 85 f4
	01 00 00	 movzx	 r8d, BYTE PTR tv195[rbp]
  003cd	33 d2		 xor	 edx, edx
  003cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08DPOKBJOC@Top?9left?$AA@
  003d6	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  003db	0f b6 c0	 movzx	 eax, al
  003de	85 c0		 test	 eax, eax
  003e0	74 0a		 je	 SHORT $LN15@ShowExampl
  003e2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?location@?1??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4HA, 0
$LN15@ShowExampl:

; 7387 :             if (ImGui::MenuItem("Top-right",    NULL, location == 1)) location = 1;

  003ec	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?location@?1??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4HA, 1
  003f3	75 09		 jne	 SHORT $LN35@ShowExampl
  003f5	c6 85 f4 01 00
	00 01		 mov	 BYTE PTR tv204[rbp], 1
  003fc	eb 07		 jmp	 SHORT $LN36@ShowExampl
$LN35@ShowExampl:
  003fe	c6 85 f4 01 00
	00 00		 mov	 BYTE PTR tv204[rbp], 0
$LN36@ShowExampl:
  00405	41 b1 01	 mov	 r9b, 1
  00408	44 0f b6 85 f4
	01 00 00	 movzx	 r8d, BYTE PTR tv204[rbp]
  00410	33 d2		 xor	 edx, edx
  00412	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09FEMEGGCE@Top?9right?$AA@
  00419	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  0041e	0f b6 c0	 movzx	 eax, al
  00421	85 c0		 test	 eax, eax
  00423	74 0a		 je	 SHORT $LN16@ShowExampl
  00425	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?location@?1??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4HA, 1
$LN16@ShowExampl:

; 7388 :             if (ImGui::MenuItem("Bottom-left",  NULL, location == 2)) location = 2;

  0042f	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?location@?1??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4HA, 2
  00436	75 09		 jne	 SHORT $LN37@ShowExampl
  00438	c6 85 f4 01 00
	00 01		 mov	 BYTE PTR tv213[rbp], 1
  0043f	eb 07		 jmp	 SHORT $LN38@ShowExampl
$LN37@ShowExampl:
  00441	c6 85 f4 01 00
	00 00		 mov	 BYTE PTR tv213[rbp], 0
$LN38@ShowExampl:
  00448	41 b1 01	 mov	 r9b, 1
  0044b	44 0f b6 85 f4
	01 00 00	 movzx	 r8d, BYTE PTR tv213[rbp]
  00453	33 d2		 xor	 edx, edx
  00455	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MGBINKPN@Bottom?9left?$AA@
  0045c	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  00461	0f b6 c0	 movzx	 eax, al
  00464	85 c0		 test	 eax, eax
  00466	74 0a		 je	 SHORT $LN17@ShowExampl
  00468	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?location@?1??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4HA, 2
$LN17@ShowExampl:

; 7389 :             if (ImGui::MenuItem("Bottom-right", NULL, location == 3)) location = 3;

  00472	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?location@?1??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4HA, 3
  00479	75 09		 jne	 SHORT $LN39@ShowExampl
  0047b	c6 85 f4 01 00
	00 01		 mov	 BYTE PTR tv222[rbp], 1
  00482	eb 07		 jmp	 SHORT $LN40@ShowExampl
$LN39@ShowExampl:
  00484	c6 85 f4 01 00
	00 00		 mov	 BYTE PTR tv222[rbp], 0
$LN40@ShowExampl:
  0048b	41 b1 01	 mov	 r9b, 1
  0048e	44 0f b6 85 f4
	01 00 00	 movzx	 r8d, BYTE PTR tv222[rbp]
  00496	33 d2		 xor	 edx, edx
  00498	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@NJDFJJBC@Bottom?9right?$AA@
  0049f	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  004a4	0f b6 c0	 movzx	 eax, al
  004a7	85 c0		 test	 eax, eax
  004a9	74 0a		 je	 SHORT $LN18@ShowExampl
  004ab	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?location@?1??ShowExampleAppSimpleOverlay@@YAXPEA_N@Z@4HA, 3
$LN18@ShowExampl:

; 7390 :             if (p_open && ImGui::MenuItem("Close")) *p_open = false;

  004b5	48 83 bd 30 02
	00 00 00	 cmp	 QWORD PTR p_open$[rbp], 0
  004bd	74 25		 je	 SHORT $LN19@ShowExampl
  004bf	41 b1 01	 mov	 r9b, 1
  004c2	45 33 c0	 xor	 r8d, r8d
  004c5	33 d2		 xor	 edx, edx
  004c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LGELBCGM@Close?$AA@
  004ce	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  004d3	0f b6 c0	 movzx	 eax, al
  004d6	85 c0		 test	 eax, eax
  004d8	74 0a		 je	 SHORT $LN19@ShowExampl
  004da	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR p_open$[rbp]
  004e1	c6 00 00	 mov	 BYTE PTR [rax], 0
$LN19@ShowExampl:

; 7391 :             ImGui::EndPopup();

  004e4	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN12@ShowExampl:
$LN8@ShowExampl:

; 7392 :         }
; 7393 :     }
; 7394 :     ImGui::End();

  004e9	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 7395 : }

  004ee	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  004f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z$rtcFrameData
  004f9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  004fe	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00505	48 33 cd	 xor	 rcx, rbp
  00508	e8 00 00 00 00	 call	 __security_check_cookie
  0050d	48 8d a5 18 02
	00 00		 lea	 rsp, QWORD PTR [rbp+536]
  00514	5f		 pop	 rdi
  00515	5d		 pop	 rbp
  00516	c3		 ret	 0
?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z ENDP		; ShowExampleAppSimpleOverlay
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppConstrainedResize@@YAXPEA_N@Z
_TEXT	SEGMENT
test_desc$ = 16
aspect_ratio$ = 100
fixed_step$ = 132
window_flags$ = 164
window_open$ = 196
avail_size$8 = 232
pos$9 = 264
i$10 = 292
$T11 = 900
$T12 = 932
$T13 = 964
$T14 = 996
$T15 = 1028
$T16 = 1060
$T17 = 1092
$T18 = 1124
$T19 = 1156
$T20 = 1188
$T21 = 1220
$T22 = 1252
$T23 = 1284
$T24 = 1316
$T25 = 1348
$T26 = 1380
$T27 = 1412
$T28 = 1444
$T29 = 1492
$T30 = 1524
$T31 = 1556
$T32 = 1588
$T33 = 1620
$T34 = 1652
$T35 = 1684
tv242 = 1700
tv191 = 1704
tv178 = 1704
tv165 = 1704
tv152 = 1704
tv139 = 1704
tv94 = 1704
tv81 = 1704
tv68 = 1704
__$ArrayPad$ = 1712
p_open$ = 1760
?ShowExampleAppConstrainedResize@@YAXPEA_N@Z PROC	; ShowExampleAppConstrainedResize, COMDAT

; 7263 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 07
	00 00		 sub	 rsp, 1800		; 00000708H
  0000e	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 c2 01 00 00	 mov	 ecx, 450		; 000001c2H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR [rsp+1832]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 b0 06
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 7264 :     struct CustomConstraints
; 7265 :     {
; 7266 :         // Helper functions to demonstrate programmatic constraints
; 7267 :         // FIXME: This doesn't take account of decoration size (e.g. title bar), library should make this easier.
; 7268 :         static void AspectRatio(ImGuiSizeCallbackData* data)    { float aspect_ratio = *(float*)data->UserData; data->DesiredSize.x = IM_MAX(data->CurrentSize.x, data->CurrentSize.y); data->DesiredSize.y = (float)(int)(data->DesiredSize.x / aspect_ratio); }
; 7269 :         static void Square(ImGuiSizeCallbackData* data)         { data->DesiredSize.x = data->DesiredSize.y = IM_MAX(data->CurrentSize.x, data->CurrentSize.y); }
; 7270 :         static void Step(ImGuiSizeCallbackData* data)           { float step = *(float*)data->UserData; data->DesiredSize = ImVec2((int)(data->CurrentSize.x / step + 0.5f) * step, (int)(data->CurrentSize.y / step + 0.5f) * step); }
; 7271 :     };
; 7272 : 
; 7273 :     const char* test_desc[] =
; 7274 :     {
; 7275 :         "Between 100x100 and 500x500",

  0003b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BM@ELFAEDLN@Between?5100x100?5and?5500x500?$AA@
  00042	48 89 45 10	 mov	 QWORD PTR test_desc$[rbp], rax

; 7276 :         "At least 100x100",

  00046	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BB@OMJELDNN@At?5least?5100x100?$AA@
  0004d	48 89 45 18	 mov	 QWORD PTR test_desc$[rbp+8], rax

; 7277 :         "Resize vertical only",

  00051	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BF@FPBGOCLL@Resize?5vertical?5only?$AA@
  00058	48 89 45 20	 mov	 QWORD PTR test_desc$[rbp+16], rax

; 7278 :         "Resize horizontal only",

  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BH@FIOIJIGG@Resize?5horizontal?5only?$AA@
  00063	48 89 45 28	 mov	 QWORD PTR test_desc$[rbp+24], rax

; 7279 :         "Width Between 400 and 500",

  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BK@CJDAKIAB@Width?5Between?5400?5and?5500?$AA@
  0006e	48 89 45 30	 mov	 QWORD PTR test_desc$[rbp+32], rax

; 7280 :         "Custom: Aspect Ratio 16:9",

  00072	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BK@HKADNNEP@Custom?3?5Aspect?5Ratio?516?39?$AA@
  00079	48 89 45 38	 mov	 QWORD PTR test_desc$[rbp+40], rax

; 7281 :         "Custom: Always Square",

  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BG@JBCFEINF@Custom?3?5Always?5Square?$AA@
  00084	48 89 45 40	 mov	 QWORD PTR test_desc$[rbp+48], rax

; 7282 :         "Custom: Fixed Steps (100)",

  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BK@NJBCHMME@Custom?3?5Fixed?5Steps?5?$CI100?$CJ?$AA@
  0008f	48 89 45 48	 mov	 QWORD PTR test_desc$[rbp+56], rax

; 7283 :     };
; 7284 : 
; 7285 :     // Options
; 7286 :     static bool auto_resize = false;
; 7287 :     static bool window_padding = true;
; 7288 :     static int type = 5; // Aspect Ratio
; 7289 :     static int display_lines = 10;
; 7290 : 
; 7291 :     // Submit constraint
; 7292 :     float aspect_ratio = 16.0f / 9.0f;

  00093	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fe38e39
  0009b	f3 0f 11 45 64	 movss	 DWORD PTR aspect_ratio$[rbp], xmm0

; 7293 :     float fixed_step = 100.0f;

  000a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  000a8	f3 0f 11 85 84
	00 00 00	 movss	 DWORD PTR fixed_step$[rbp], xmm0

; 7294 :     if (type == 0) ImGui::SetNextWindowSizeConstraints(ImVec2(100, 100), ImVec2(500, 500));         // Between 100x100 and 500x500

  000b0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?type@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4HA, 0
  000b7	75 57		 jne	 SHORT $LN8@ShowExampl
  000b9	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43fa0000
  000c1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@43fa0000
  000c9	48 8d 8d 84 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  000d0	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000d5	48 89 85 a8 06
	00 00		 mov	 QWORD PTR tv68[rbp], rax
  000dc	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42c80000
  000e4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42c80000
  000ec	48 8d 8d a4 03
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  000f3	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000f8	45 33 c9	 xor	 r9d, r9d
  000fb	45 33 c0	 xor	 r8d, r8d
  000fe	48 8b 8d a8 06
	00 00		 mov	 rcx, QWORD PTR tv68[rbp]
  00105	48 8b d1	 mov	 rdx, rcx
  00108	48 8b c8	 mov	 rcx, rax
  0010b	e8 00 00 00 00	 call	 ?SetNextWindowSizeConstraints@ImGui@@YAXAEBUImVec2@@0P6AXPEAUImGuiSizeCallbackData@@@ZPEAX@Z ; ImGui::SetNextWindowSizeConstraints
$LN8@ShowExampl:

; 7295 :     if (type == 1) ImGui::SetNextWindowSizeConstraints(ImVec2(100, 100), ImVec2(FLT_MAX, FLT_MAX)); // Width > 100, Height > 100

  00110	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?type@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4HA, 1
  00117	75 57		 jne	 SHORT $LN9@ShowExampl
  00119	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@7f7fffff
  00121	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@7f7fffff
  00129	48 8d 8d c4 03
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  00130	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00135	48 89 85 a8 06
	00 00		 mov	 QWORD PTR tv81[rbp], rax
  0013c	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42c80000
  00144	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42c80000
  0014c	48 8d 8d e4 03
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  00153	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00158	45 33 c9	 xor	 r9d, r9d
  0015b	45 33 c0	 xor	 r8d, r8d
  0015e	48 8b 8d a8 06
	00 00		 mov	 rcx, QWORD PTR tv81[rbp]
  00165	48 8b d1	 mov	 rdx, rcx
  00168	48 8b c8	 mov	 rcx, rax
  0016b	e8 00 00 00 00	 call	 ?SetNextWindowSizeConstraints@ImGui@@YAXAEBUImVec2@@0P6AXPEAUImGuiSizeCallbackData@@@ZPEAX@Z ; ImGui::SetNextWindowSizeConstraints
$LN9@ShowExampl:

; 7296 :     if (type == 2) ImGui::SetNextWindowSizeConstraints(ImVec2(-1, 0),    ImVec2(-1, FLT_MAX));      // Vertical only

  00170	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?type@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4HA, 2
  00177	75 52		 jne	 SHORT $LN10@ShowExampl
  00179	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@7f7fffff
  00181	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00189	48 8d 8d 04 04
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  00190	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00195	48 89 85 a8 06
	00 00		 mov	 QWORD PTR tv94[rbp], rax
  0019c	0f 57 d2	 xorps	 xmm2, xmm2
  0019f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  001a7	48 8d 8d 24 04
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  001ae	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001b3	45 33 c9	 xor	 r9d, r9d
  001b6	45 33 c0	 xor	 r8d, r8d
  001b9	48 8b 8d a8 06
	00 00		 mov	 rcx, QWORD PTR tv94[rbp]
  001c0	48 8b d1	 mov	 rdx, rcx
  001c3	48 8b c8	 mov	 rcx, rax
  001c6	e8 00 00 00 00	 call	 ?SetNextWindowSizeConstraints@ImGui@@YAXAEBUImVec2@@0P6AXPEAUImGuiSizeCallbackData@@@ZPEAX@Z ; ImGui::SetNextWindowSizeConstraints
$LN10@ShowExampl:

; 7297 :     if (type == 3) ImGui::SetNextWindowSizeConstraints(ImVec2(0, -1),    ImVec2(FLT_MAX, -1));      // Horizontal only

  001cb	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?type@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4HA, 3
  001d2	75 52		 jne	 SHORT $LN11@ShowExampl
  001d4	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  001dc	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@7f7fffff
  001e4	48 8d 8d 44 04
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  001eb	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001f0	48 89 85 a8 06
	00 00		 mov	 QWORD PTR tv139[rbp], rax
  001f7	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  001ff	0f 57 c9	 xorps	 xmm1, xmm1
  00202	48 8d 8d 64 04
	00 00		 lea	 rcx, QWORD PTR $T18[rbp]
  00209	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0020e	45 33 c9	 xor	 r9d, r9d
  00211	45 33 c0	 xor	 r8d, r8d
  00214	48 8b 8d a8 06
	00 00		 mov	 rcx, QWORD PTR tv139[rbp]
  0021b	48 8b d1	 mov	 rdx, rcx
  0021e	48 8b c8	 mov	 rcx, rax
  00221	e8 00 00 00 00	 call	 ?SetNextWindowSizeConstraints@ImGui@@YAXAEBUImVec2@@0P6AXPEAUImGuiSizeCallbackData@@@ZPEAX@Z ; ImGui::SetNextWindowSizeConstraints
$LN11@ShowExampl:

; 7298 :     if (type == 4) ImGui::SetNextWindowSizeConstraints(ImVec2(400, -1),  ImVec2(500, -1));          // Width Between and 400 and 500

  00226	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?type@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4HA, 4
  0022d	75 57		 jne	 SHORT $LN12@ShowExampl
  0022f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  00237	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@43fa0000
  0023f	48 8d 8d 84 04
	00 00		 lea	 rcx, QWORD PTR $T19[rbp]
  00246	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0024b	48 89 85 a8 06
	00 00		 mov	 QWORD PTR tv152[rbp], rax
  00252	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  0025a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@43c80000
  00262	48 8d 8d a4 04
	00 00		 lea	 rcx, QWORD PTR $T20[rbp]
  00269	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0026e	45 33 c9	 xor	 r9d, r9d
  00271	45 33 c0	 xor	 r8d, r8d
  00274	48 8b 8d a8 06
	00 00		 mov	 rcx, QWORD PTR tv152[rbp]
  0027b	48 8b d1	 mov	 rdx, rcx
  0027e	48 8b c8	 mov	 rcx, rax
  00281	e8 00 00 00 00	 call	 ?SetNextWindowSizeConstraints@ImGui@@YAXAEBUImVec2@@0P6AXPEAUImGuiSizeCallbackData@@@ZPEAX@Z ; ImGui::SetNextWindowSizeConstraints
$LN12@ShowExampl:

; 7299 :     if (type == 5) ImGui::SetNextWindowSizeConstraints(ImVec2(0, 0),     ImVec2(FLT_MAX, FLT_MAX), CustomConstraints::AspectRatio, (void*)&aspect_ratio);   // Aspect ratio

  00286	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?type@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4HA, 5
  0028d	75 52		 jne	 SHORT $LN13@ShowExampl
  0028f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@7f7fffff
  00297	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@7f7fffff
  0029f	48 8d 8d c4 04
	00 00		 lea	 rcx, QWORD PTR $T21[rbp]
  002a6	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  002ab	48 89 85 a8 06
	00 00		 mov	 QWORD PTR tv165[rbp], rax
  002b2	0f 57 d2	 xorps	 xmm2, xmm2
  002b5	0f 57 c9	 xorps	 xmm1, xmm1
  002b8	48 8d 8d e4 04
	00 00		 lea	 rcx, QWORD PTR $T22[rbp]
  002bf	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  002c4	4c 8d 4d 64	 lea	 r9, QWORD PTR aspect_ratio$[rbp]
  002c8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?AspectRatio@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z ; `ShowExampleAppConstrainedResize'::`2'::CustomConstraints::AspectRatio
  002cf	48 8b 8d a8 06
	00 00		 mov	 rcx, QWORD PTR tv165[rbp]
  002d6	48 8b d1	 mov	 rdx, rcx
  002d9	48 8b c8	 mov	 rcx, rax
  002dc	e8 00 00 00 00	 call	 ?SetNextWindowSizeConstraints@ImGui@@YAXAEBUImVec2@@0P6AXPEAUImGuiSizeCallbackData@@@ZPEAX@Z ; ImGui::SetNextWindowSizeConstraints
$LN13@ShowExampl:

; 7300 :     if (type == 6) ImGui::SetNextWindowSizeConstraints(ImVec2(0, 0),     ImVec2(FLT_MAX, FLT_MAX), CustomConstraints::Square);                              // Always Square

  002e1	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?type@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4HA, 6
  002e8	75 51		 jne	 SHORT $LN14@ShowExampl
  002ea	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@7f7fffff
  002f2	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@7f7fffff
  002fa	48 8d 8d 04 05
	00 00		 lea	 rcx, QWORD PTR $T23[rbp]
  00301	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00306	48 89 85 a8 06
	00 00		 mov	 QWORD PTR tv178[rbp], rax
  0030d	0f 57 d2	 xorps	 xmm2, xmm2
  00310	0f 57 c9	 xorps	 xmm1, xmm1
  00313	48 8d 8d 24 05
	00 00		 lea	 rcx, QWORD PTR $T24[rbp]
  0031a	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0031f	45 33 c9	 xor	 r9d, r9d
  00322	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?Square@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z ; `ShowExampleAppConstrainedResize'::`2'::CustomConstraints::Square
  00329	48 8b 8d a8 06
	00 00		 mov	 rcx, QWORD PTR tv178[rbp]
  00330	48 8b d1	 mov	 rdx, rcx
  00333	48 8b c8	 mov	 rcx, rax
  00336	e8 00 00 00 00	 call	 ?SetNextWindowSizeConstraints@ImGui@@YAXAEBUImVec2@@0P6AXPEAUImGuiSizeCallbackData@@@ZPEAX@Z ; ImGui::SetNextWindowSizeConstraints
$LN14@ShowExampl:

; 7301 :     if (type == 7) ImGui::SetNextWindowSizeConstraints(ImVec2(0, 0),     ImVec2(FLT_MAX, FLT_MAX), CustomConstraints::Step, (void*)&fixed_step);            // Fixed Step

  0033b	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR ?type@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4HA, 7
  00342	75 55		 jne	 SHORT $LN15@ShowExampl
  00344	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@7f7fffff
  0034c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@7f7fffff
  00354	48 8d 8d 44 05
	00 00		 lea	 rcx, QWORD PTR $T25[rbp]
  0035b	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00360	48 89 85 a8 06
	00 00		 mov	 QWORD PTR tv191[rbp], rax
  00367	0f 57 d2	 xorps	 xmm2, xmm2
  0036a	0f 57 c9	 xorps	 xmm1, xmm1
  0036d	48 8d 8d 64 05
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  00374	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00379	4c 8d 8d 84 00
	00 00		 lea	 r9, QWORD PTR fixed_step$[rbp]
  00380	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?Step@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@SAXPEAUImGuiSizeCallbackData@@@Z ; `ShowExampleAppConstrainedResize'::`2'::CustomConstraints::Step
  00387	48 8b 8d a8 06
	00 00		 mov	 rcx, QWORD PTR tv191[rbp]
  0038e	48 8b d1	 mov	 rdx, rcx
  00391	48 8b c8	 mov	 rcx, rax
  00394	e8 00 00 00 00	 call	 ?SetNextWindowSizeConstraints@ImGui@@YAXAEBUImVec2@@0P6AXPEAUImGuiSizeCallbackData@@@ZPEAX@Z ; ImGui::SetNextWindowSizeConstraints
$LN15@ShowExampl:

; 7302 : 
; 7303 :     // Submit window
; 7304 :     if (!window_padding)

  00399	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?window_padding@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4_NA
  003a0	85 c0		 test	 eax, eax
  003a2	75 1f		 jne	 SHORT $LN16@ShowExampl

; 7305 :         ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0.0f, 0.0f));

  003a4	0f 57 d2	 xorps	 xmm2, xmm2
  003a7	0f 57 c9	 xorps	 xmm1, xmm1
  003aa	48 8d 8d 84 05
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  003b1	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  003b6	48 8b d0	 mov	 rdx, rax
  003b9	b9 02 00 00 00	 mov	 ecx, 2
  003be	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z ; ImGui::PushStyleVar
$LN16@ShowExampl:

; 7306 :     const ImGuiWindowFlags window_flags = auto_resize ? ImGuiWindowFlags_AlwaysAutoResize : 0;

  003c3	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?auto_resize@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4_NA
  003ca	85 c0		 test	 eax, eax
  003cc	74 0c		 je	 SHORT $LN26@ShowExampl
  003ce	c7 85 a4 06 00
	00 40 00 00 00	 mov	 DWORD PTR tv242[rbp], 64 ; 00000040H
  003d8	eb 0a		 jmp	 SHORT $LN27@ShowExampl
$LN26@ShowExampl:
  003da	c7 85 a4 06 00
	00 00 00 00 00	 mov	 DWORD PTR tv242[rbp], 0
$LN27@ShowExampl:
  003e4	8b 85 a4 06 00
	00		 mov	 eax, DWORD PTR tv242[rbp]
  003ea	89 85 a4 00 00
	00		 mov	 DWORD PTR window_flags$[rbp], eax

; 7307 :     const bool window_open = ImGui::Begin("Example: Constrained Resize", p_open, window_flags);

  003f0	44 8b 85 a4 00
	00 00		 mov	 r8d, DWORD PTR window_flags$[rbp]
  003f7	48 8b 95 e0 06
	00 00		 mov	 rdx, QWORD PTR p_open$[rbp]
  003fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@KOHLMLPM@Example?3?5Constrained?5Resize?$AA@
  00405	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin
  0040a	88 85 c4 00 00
	00		 mov	 BYTE PTR window_open$[rbp], al

; 7308 :     if (!window_padding)

  00410	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?window_padding@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4_NA
  00417	85 c0		 test	 eax, eax
  00419	75 0a		 jne	 SHORT $LN17@ShowExampl

; 7309 :         ImGui::PopStyleVar();

  0041b	b9 01 00 00 00	 mov	 ecx, 1
  00420	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
$LN17@ShowExampl:

; 7310 :     if (window_open)

  00425	0f b6 85 c4 00
	00 00		 movzx	 eax, BYTE PTR window_open$[rbp]
  0042c	85 c0		 test	 eax, eax
  0042e	0f 84 1f 03 00
	00		 je	 $LN18@ShowExampl
$LN4@ShowExampl:

; 7311 :     {
; 7312 :         IMGUI_DEMO_MARKER("Examples/Constrained Resizing window");

  00434	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0043c	74 26		 je	 SHORT $LN19@ShowExampl
  0043e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4JA
  00444	83 c0 31	 add	 eax, 49			; 00000031H
  00447	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0044e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CF@GJNNAKKD@Examples?1Constrained?5Resizing?5wi@
  00455	8b d0		 mov	 edx, eax
  00457	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0045e	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN19@ShowExampl:
  00464	33 c0		 xor	 eax, eax
  00466	85 c0		 test	 eax, eax
  00468	75 ca		 jne	 SHORT $LN4@ShowExampl

; 7313 :         if (ImGui::GetIO().KeyShift)

  0046a	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  0046f	0f b6 80 0d 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3597]
  00476	85 c0		 test	 eax, eax
  00478	0f 84 cb 00 00
	00		 je	 $LN20@ShowExampl

; 7314 :         {
; 7315 :             // Display a dummy viewport (in your real app you would likely use ImageButton() to display a texture.
; 7316 :             ImVec2 avail_size = ImGui::GetContentRegionAvail();

  0047e	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR avail_size$8[rbp]
  00485	e8 00 00 00 00	 call	 ?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail

; 7317 :             ImVec2 pos = ImGui::GetCursorScreenPos();

  0048a	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR pos$9[rbp]
  00491	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos

; 7318 :             ImGui::ColorButton("viewport", ImVec4(0.5f, 0.2f, 0.5f, 1.0f), ImGuiColorEditFlags_NoTooltip | ImGuiColorEditFlags_NoDragDrop, avail_size);

  00496	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0049e	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  004a4	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000
  004ac	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e4ccccd
  004b4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  004bc	48 8d 8d a4 05
	00 00		 lea	 rcx, QWORD PTR $T28[rbp]
  004c3	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  004c8	4c 8d 8d e8 00
	00 00		 lea	 r9, QWORD PTR avail_size$8[rbp]
  004cf	41 b8 40 02 00
	00		 mov	 r8d, 576		; 00000240H
  004d5	48 8b d0	 mov	 rdx, rax
  004d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08BMPDLDPD@viewport?$AA@
  004df	e8 00 00 00 00	 call	 ?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HAEBUImVec2@@@Z ; ImGui::ColorButton

; 7319 :             ImGui::SetCursorScreenPos(ImVec2(pos.x + 10, pos.y + 10));

  004e4	f3 0f 10 85 0c
	01 00 00	 movss	 xmm0, DWORD PTR pos$9[rbp+4]
  004ec	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  004f4	f3 0f 10 8d 08
	01 00 00	 movss	 xmm1, DWORD PTR pos$9[rbp]
  004fc	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@41200000
  00504	0f 28 d0	 movaps	 xmm2, xmm0
  00507	48 8d 8d d4 05
	00 00		 lea	 rcx, QWORD PTR $T29[rbp]
  0050e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00513	48 8b c8	 mov	 rcx, rax
  00516	e8 00 00 00 00	 call	 ?SetCursorScreenPos@ImGui@@YAXAEBUImVec2@@@Z ; ImGui::SetCursorScreenPos

; 7320 :             ImGui::Text("%.2f x %.2f", avail_size.x, avail_size.y);

  0051b	f3 0f 5a 85 ec
	00 00 00	 cvtss2sd xmm0, DWORD PTR avail_size$8[rbp+4]
  00523	f3 0f 5a 8d e8
	00 00 00	 cvtss2sd xmm1, DWORD PTR avail_size$8[rbp]
  0052b	0f 28 d0	 movaps	 xmm2, xmm0
  0052e	66 49 0f 7e d0	 movq	 r8, xmm2
  00533	66 48 0f 7e ca	 movq	 rdx, xmm1
  00538	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@OPPEOHAI@?$CF?42f?5x?5?$CF?42f?$AA@
  0053f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 7321 :         }
; 7322 :         else

  00544	e9 0a 02 00 00	 jmp	 $LN21@ShowExampl
$LN20@ShowExampl:

; 7323 :         {
; 7324 :             ImGui::Text("(Hold SHIFT to display a dummy viewport)");

  00549	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@FGKPOBFJ@?$CIHold?5SHIFT?5to?5display?5a?5dummy?5v@
  00550	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 7325 :             if (ImGui::Button("Set 200x200")) { ImGui::SetWindowSize(ImVec2(200, 200)); } ImGui::SameLine();

  00555	0f 57 d2	 xorps	 xmm2, xmm2
  00558	0f 57 c9	 xorps	 xmm1, xmm1
  0055b	48 8d 8d f4 05
	00 00		 lea	 rcx, QWORD PTR $T30[rbp]
  00562	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00567	48 8b d0	 mov	 rdx, rax
  0056a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@JAEDJCOP@Set?5200x200?$AA@
  00571	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00576	0f b6 c0	 movzx	 eax, al
  00579	85 c0		 test	 eax, eax
  0057b	74 26		 je	 SHORT $LN22@ShowExampl
  0057d	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43480000
  00585	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@43480000
  0058d	48 8d 8d 14 06
	00 00		 lea	 rcx, QWORD PTR $T31[rbp]
  00594	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00599	33 d2		 xor	 edx, edx
  0059b	48 8b c8	 mov	 rcx, rax
  0059e	e8 00 00 00 00	 call	 ?SetWindowSize@ImGui@@YAXAEBUImVec2@@H@Z ; ImGui::SetWindowSize
$LN22@ShowExampl:
  005a3	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  005ab	0f 57 c0	 xorps	 xmm0, xmm0
  005ae	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 7326 :             if (ImGui::Button("Set 500x500")) { ImGui::SetWindowSize(ImVec2(500, 500)); } ImGui::SameLine();

  005b3	0f 57 d2	 xorps	 xmm2, xmm2
  005b6	0f 57 c9	 xorps	 xmm1, xmm1
  005b9	48 8d 8d 34 06
	00 00		 lea	 rcx, QWORD PTR $T32[rbp]
  005c0	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  005c5	48 8b d0	 mov	 rdx, rax
  005c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@HFBKDEP@Set?5500x500?$AA@
  005cf	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  005d4	0f b6 c0	 movzx	 eax, al
  005d7	85 c0		 test	 eax, eax
  005d9	74 26		 je	 SHORT $LN23@ShowExampl
  005db	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43fa0000
  005e3	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@43fa0000
  005eb	48 8d 8d 54 06
	00 00		 lea	 rcx, QWORD PTR $T33[rbp]
  005f2	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  005f7	33 d2		 xor	 edx, edx
  005f9	48 8b c8	 mov	 rcx, rax
  005fc	e8 00 00 00 00	 call	 ?SetWindowSize@ImGui@@YAXAEBUImVec2@@H@Z ; ImGui::SetWindowSize
$LN23@ShowExampl:
  00601	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00609	0f 57 c0	 xorps	 xmm0, xmm0
  0060c	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 7327 :             if (ImGui::Button("Set 800x200")) { ImGui::SetWindowSize(ImVec2(800, 200)); }

  00611	0f 57 d2	 xorps	 xmm2, xmm2
  00614	0f 57 c9	 xorps	 xmm1, xmm1
  00617	48 8d 8d 74 06
	00 00		 lea	 rcx, QWORD PTR $T34[rbp]
  0061e	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00623	48 8b d0	 mov	 rdx, rax
  00626	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@BIDIOCH@Set?5800x200?$AA@
  0062d	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00632	0f b6 c0	 movzx	 eax, al
  00635	85 c0		 test	 eax, eax
  00637	74 26		 je	 SHORT $LN24@ShowExampl
  00639	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43480000
  00641	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@44480000
  00649	48 8d 8d 94 06
	00 00		 lea	 rcx, QWORD PTR $T35[rbp]
  00650	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00655	33 d2		 xor	 edx, edx
  00657	48 8b c8	 mov	 rcx, rax
  0065a	e8 00 00 00 00	 call	 ?SetWindowSize@ImGui@@YAXAEBUImVec2@@H@Z ; ImGui::SetWindowSize
$LN24@ShowExampl:

; 7328 :             ImGui::SetNextItemWidth(ImGui::GetFontSize() * 20);

  0065f	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  00664	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41a00000
  0066c	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth

; 7329 :             ImGui::Combo("Constraint", &type, test_desc, IM_ARRAYSIZE(test_desc));

  00671	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  00679	41 b9 08 00 00
	00		 mov	 r9d, 8
  0067f	4c 8d 45 10	 lea	 r8, QWORD PTR test_desc$[rbp]
  00683	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?type@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4HA
  0068a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@PIOLEGBL@Constraint?$AA@
  00691	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z ; ImGui::Combo

; 7330 :             ImGui::SetNextItemWidth(ImGui::GetFontSize() * 20);

  00696	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  0069b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41a00000
  006a3	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth

; 7331 :             ImGui::DragInt("Lines", &display_lines, 0.2f, 1, 100);

  006a8	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  006b0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  006b7	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  006bc	c7 44 24 20 64
	00 00 00	 mov	 DWORD PTR [rsp+32], 100	; 00000064H
  006c4	41 b9 01 00 00
	00		 mov	 r9d, 1
  006ca	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3e4ccccd
  006d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?display_lines@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4HA
  006d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05DDHCCCLJ@Lines?$AA@
  006e0	e8 00 00 00 00	 call	 ?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z ; ImGui::DragInt

; 7332 :             ImGui::Checkbox("Auto-resize", &auto_resize);

  006e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?auto_resize@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4_NA
  006ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@CEOMCPLH@Auto?9resize?$AA@
  006f3	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 7333 :             ImGui::Checkbox("Window padding", &window_padding);

  006f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?window_padding@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4_NA
  006ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@MFKLHBLP@Window?5padding?$AA@
  00706	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 7334 :             for (int i = 0; i < display_lines; i++)

  0070b	c7 85 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$10[rbp], 0
  00715	eb 0e		 jmp	 SHORT $LN7@ShowExampl
$LN5@ShowExampl:
  00717	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR i$10[rbp]
  0071d	ff c0		 inc	 eax
  0071f	89 85 24 01 00
	00		 mov	 DWORD PTR i$10[rbp], eax
$LN7@ShowExampl:
  00725	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?display_lines@?1??ShowExampleAppConstrainedResize@@YAXPEA_N@Z@4HA
  0072b	39 85 24 01 00
	00		 cmp	 DWORD PTR i$10[rbp], eax
  00731	7d 20		 jge	 SHORT $LN6@ShowExampl

; 7335 :                 ImGui::Text("%*sHello, sailor! Making this line long enough for the example.", i * 4, "");

  00733	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR i$10[rbp]
  00739	c1 e0 02	 shl	 eax, 2
  0073c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00743	8b d0		 mov	 edx, eax
  00745	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EA@CCNBDEKJ@?$CF?$CKsHello?0?5sailor?$CB?5Making?5this?5li@
  0074c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  00751	eb c4		 jmp	 SHORT $LN5@ShowExampl
$LN6@ShowExampl:
$LN21@ShowExampl:
$LN18@ShowExampl:

; 7336 :         }
; 7337 :     }
; 7338 :     ImGui::End();

  00753	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 7339 : }

  00758	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  0075c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShowExampleAppConstrainedResize@@YAXPEA_N@Z$rtcFrameData
  00763	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00768	48 8b 8d b0 06
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0076f	48 33 cd	 xor	 rcx, rbp
  00772	e8 00 00 00 00	 call	 __security_check_cookie
  00777	48 8d a5 c8 06
	00 00		 lea	 rsp, QWORD PTR [rbp+1736]
  0077e	5f		 pop	 rdi
  0077f	5d		 pop	 rbp
  00780	c3		 ret	 0
?ShowExampleAppConstrainedResize@@YAXPEA_N@Z ENDP	; ShowExampleAppConstrainedResize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppAutoResize@@YAXPEA_N@Z
_TEXT	SEGMENT
i$1 = 4
p_open$ = 256
?ShowExampleAppAutoResize@@YAXPEA_N@Z PROC		; ShowExampleAppAutoResize, COMDAT

; 7237 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]

; 7238 :     if (!ImGui::Begin("Example: Auto-resizing window", p_open, ImGuiWindowFlags_AlwaysAutoResize))

  0002a	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00030	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR p_open$[rbp]
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@BJFILJPF@Example?3?5Auto?9resizing?5window?$AA@
  0003e	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin
  00043	0f b6 c0	 movzx	 eax, al
  00046	85 c0		 test	 eax, eax
  00048	75 0a		 jne	 SHORT $LN8@ShowExampl

; 7239 :     {
; 7240 :         ImGui::End();

  0004a	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 7241 :         return;

  0004f	e9 b9 00 00 00	 jmp	 $LN1@ShowExampl
$LN8@ShowExampl:
$LN4@ShowExampl:

; 7242 :     }
; 7243 :     IMGUI_DEMO_MARKER("Examples/Auto-resizing window");

  00054	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0005c	74 26		 je	 SHORT $LN9@ShowExampl
  0005e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowExampleAppAutoResize@@YAXPEA_N@Z@4JA
  00064	83 c0 06	 add	 eax, 6
  00067	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0006e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BO@FLMCBBHH@Examples?1Auto?9resizing?5window?$AA@
  00075	8b d0		 mov	 edx, eax
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN9@ShowExampl:
  00084	33 c0		 xor	 eax, eax
  00086	85 c0		 test	 eax, eax
  00088	75 ca		 jne	 SHORT $LN4@ShowExampl

; 7244 : 
; 7245 :     static int lines = 10;
; 7246 :     ImGui::TextUnformatted(

  0008a	33 d2		 xor	 edx, edx
  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0LI@CEDCIBKO@Window?5will?5resize?5every?9frame?5t@
  00093	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted

; 7247 :         "Window will resize every-frame to the size of its content.\n"
; 7248 :         "Note that you probably don't want to query the window size to\n"
; 7249 :         "output your content because that would create a feedback loop.");
; 7250 :     ImGui::SliderInt("Number of lines", &lines, 1, 20);

  00098	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  000a0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd?$AA@
  000a7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ac	41 b9 14 00 00
	00		 mov	 r9d, 20
  000b2	41 b8 01 00 00
	00		 mov	 r8d, 1
  000b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?lines@?1??ShowExampleAppAutoResize@@YAXPEA_N@Z@4HA
  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@EAJBEEH@Number?5of?5lines?$AA@
  000c6	e8 00 00 00 00	 call	 ?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z ; ImGui::SliderInt

; 7251 :     for (int i = 0; i < lines; i++)

  000cb	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$1[rbp], 0
  000d2	eb 08		 jmp	 SHORT $LN7@ShowExampl
$LN5@ShowExampl:
  000d4	8b 45 04	 mov	 eax, DWORD PTR i$1[rbp]
  000d7	ff c0		 inc	 eax
  000d9	89 45 04	 mov	 DWORD PTR i$1[rbp], eax
$LN7@ShowExampl:
  000dc	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?lines@?1??ShowExampleAppAutoResize@@YAXPEA_N@Z@4HA
  000e2	39 45 04	 cmp	 DWORD PTR i$1[rbp], eax
  000e5	7d 21		 jge	 SHORT $LN6@ShowExampl

; 7252 :         ImGui::Text("%*sThis is line %d", i * 4, "", i); // Pad with space to extend size horizontally

  000e7	8b 45 04	 mov	 eax, DWORD PTR i$1[rbp]
  000ea	c1 e0 02	 shl	 eax, 2
  000ed	44 8b 4d 04	 mov	 r9d, DWORD PTR i$1[rbp]
  000f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000f8	8b d0		 mov	 edx, eax
  000fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@DIDKCIOM@?$CF?$CKsThis?5is?5line?5?$CFd?$AA@
  00101	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  00106	eb cc		 jmp	 SHORT $LN5@ShowExampl
$LN6@ShowExampl:

; 7253 :     ImGui::End();

  00108	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN1@ShowExampl:

; 7254 : }

  0010d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00114	5f		 pop	 rdi
  00115	5d		 pop	 rbp
  00116	c3		 ret	 0
?ShowExampleAppAutoResize@@YAXPEA_N@Z ENDP		; ShowExampleAppAutoResize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppLongText@@YAXPEA_N@Z
_TEXT	SEGMENT
i$4 = 4
clipper$5 = 40
i$6 = 100
i$7 = 132
$T8 = 356
$T9 = 388
$T10 = 420
$T11 = 452
$T12 = 484
$T13 = 516
$T14 = 552
tv166 = 564
tv176 = 568
__$ArrayPad$ = 576
p_open$ = 624
?ShowExampleAppLongText@@YAXPEA_N@Z PROC		; ShowExampleAppLongText, COMDAT

; 7174 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 78 02
	00 00		 sub	 rsp, 632		; 00000278H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 9e 00 00 00	 mov	 ecx, 158		; 0000009eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR [rsp+664]
  0002a	48 c7 85 28 02
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T14[rbp], -2
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 40 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 7175 :     ImGui::SetNextWindowSize(ImVec2(520, 600), ImGuiCond_FirstUseEver);

  00046	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@44160000
  0004e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@44020000
  00056	48 8d 8d 64 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0005d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00062	ba 04 00 00 00	 mov	 edx, 4
  00067	48 8b c8	 mov	 rcx, rax
  0006a	e8 00 00 00 00	 call	 ?SetNextWindowSize@ImGui@@YAXAEBUImVec2@@H@Z ; ImGui::SetNextWindowSize

; 7176 :     if (!ImGui::Begin("Example: Long text display", p_open))

  0006f	45 33 c0	 xor	 r8d, r8d
  00072	48 8b 95 70 02
	00 00		 mov	 rdx, QWORD PTR p_open$[rbp]
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@GBIKCKEE@Example?3?5Long?5text?5display?$AA@
  00080	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin
  00085	0f b6 c0	 movzx	 eax, al
  00088	85 c0		 test	 eax, eax
  0008a	75 0a		 jne	 SHORT $LN4@ShowExampl

; 7177 :     {
; 7178 :         ImGui::End();

  0008c	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 7179 :         return;

  00091	e9 3f 03 00 00	 jmp	 $LN1@ShowExampl
$LN4@ShowExampl:

; 7180 :     }
; 7181 :     IMGUI_DEMO_MARKER("Examples/Long text display");

  00096	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0009e	74 26		 je	 SHORT $LN20@ShowExampl
  000a0	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4JA
  000a6	83 c0 07	 add	 eax, 7
  000a9	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  000b0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BL@OPFBPBGI@Examples?1Long?5text?5display?$AA@
  000b7	8b d0		 mov	 edx, eax
  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  000c0	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN20@ShowExampl:
  000c6	33 c0		 xor	 eax, eax
  000c8	85 c0		 test	 eax, eax
  000ca	75 ca		 jne	 SHORT $LN4@ShowExampl

; 7182 : 
; 7183 :     static int test_type = 0;
; 7184 :     static ImGuiTextBuffer log;

  000cc	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  000d1	8b c0		 mov	 eax, eax
  000d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000d9	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000e2	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  000e6	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  000e9	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS0@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4HA, eax
  000ef	7e 3a		 jle	 SHORT $LN5@ShowExampl
  000f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4HA
  000f8	e8 00 00 00 00	 call	 _Init_thread_header
  000fd	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4HA, -1
  00104	75 25		 jne	 SHORT $LN5@ShowExampl
  00106	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?log@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4UImGuiTextBuffer@@A
  0010d	e8 00 00 00 00	 call	 ??0ImGuiTextBuffer@@QEAA@XZ ; ImGuiTextBuffer::ImGuiTextBuffer
  00112	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__Flog@?1??ShowExampleAppLongText@@YAXPEA_N@Z@YAXXZ ; `ShowExampleAppLongText'::`2'::`dynamic atexit destructor for 'log''
  00119	e8 00 00 00 00	 call	 atexit
  0011e	90		 npad	 1
  0011f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4HA
  00126	e8 00 00 00 00	 call	 _Init_thread_footer
$LN5@ShowExampl:

; 7185 :     static int lines = 0;
; 7186 :     ImGui::Text("Printing unusually long amount of text.");

  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@JCGLFKAA@Printing?5unusually?5long?5amount?5o@
  00132	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 7187 :     ImGui::Combo("Test type", &test_type,

  00137	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  0013d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0HB@DAOOCDLA@Single?5call?5to?5TextUnformatted?$CI?$CJ@
  00144	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?test_type@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4HA
  0014b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09NBDEEMIG@Test?5type?$AA@
  00152	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAH0H@Z ; ImGui::Combo

; 7188 :         "Single call to TextUnformatted()\0"
; 7189 :         "Multiple calls to Text(), clipped\0"
; 7190 :         "Multiple calls to Text(), not clipped (slow)\0");
; 7191 :     ImGui::Text("Buffer contents: %d lines, %d bytes", lines, log.size());

  00157	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?log@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4UImGuiTextBuffer@@A
  0015e	e8 00 00 00 00	 call	 ?size@ImGuiTextBuffer@@QEBAHXZ ; ImGuiTextBuffer::size
  00163	44 8b c0	 mov	 r8d, eax
  00166	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?lines@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4HA
  0016c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@MABLKLGB@Buffer?5contents?3?5?$CFd?5lines?0?5?$CFd?5by@
  00173	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 7192 :     if (ImGui::Button("Clear")) { log.clear(); lines = 0; }

  00178	0f 57 d2	 xorps	 xmm2, xmm2
  0017b	0f 57 c9	 xorps	 xmm1, xmm1
  0017e	48 8d 8d 84 01
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  00185	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0018a	48 8b d0	 mov	 rdx, rax
  0018d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05MDNHABIA@Clear?$AA@
  00194	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00199	0f b6 c0	 movzx	 eax, al
  0019c	85 c0		 test	 eax, eax
  0019e	74 16		 je	 SHORT $LN21@ShowExampl
  001a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?log@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4UImGuiTextBuffer@@A
  001a7	e8 00 00 00 00	 call	 ?clear@ImGuiTextBuffer@@QEAAXXZ ; ImGuiTextBuffer::clear
  001ac	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?lines@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4HA, 0
$LN21@ShowExampl:

; 7193 :     ImGui::SameLine();

  001b6	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  001be	0f 57 c0	 xorps	 xmm0, xmm0
  001c1	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 7194 :     if (ImGui::Button("Add 1000 lines"))

  001c6	0f 57 d2	 xorps	 xmm2, xmm2
  001c9	0f 57 c9	 xorps	 xmm1, xmm1
  001cc	48 8d 8d a4 01
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  001d3	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001d8	48 8b d0	 mov	 rdx, rax
  001db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@IHJDPCIL@Add?51000?5lines?$AA@
  001e2	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  001e7	0f b6 c0	 movzx	 eax, al
  001ea	85 c0		 test	 eax, eax
  001ec	74 50		 je	 SHORT $LN22@ShowExampl

; 7195 :     {
; 7196 :         for (int i = 0; i < 1000; i++)

  001ee	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  001f5	eb 08		 jmp	 SHORT $LN8@ShowExampl
$LN6@ShowExampl:
  001f7	8b 45 04	 mov	 eax, DWORD PTR i$4[rbp]
  001fa	ff c0		 inc	 eax
  001fc	89 45 04	 mov	 DWORD PTR i$4[rbp], eax
$LN8@ShowExampl:
  001ff	81 7d 04 e8 03
	00 00		 cmp	 DWORD PTR i$4[rbp], 1000 ; 000003e8H
  00206	7d 25		 jge	 SHORT $LN7@ShowExampl

; 7197 :             log.appendf("%i The quick brown fox jumps over the lazy dog\n", lines + i);

  00208	8b 45 04	 mov	 eax, DWORD PTR i$4[rbp]
  0020b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?lines@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4HA
  00211	03 c8		 add	 ecx, eax
  00213	8b c1		 mov	 eax, ecx
  00215	44 8b c0	 mov	 r8d, eax
  00218	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@IKFBCOKM@?$CFi?5The?5quick?5brown?5fox?5jumps?5ove@
  0021f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?log@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4UImGuiTextBuffer@@A
  00226	e8 00 00 00 00	 call	 ?appendf@ImGuiTextBuffer@@QEAAXPEBDZZ ; ImGuiTextBuffer::appendf
  0022b	eb ca		 jmp	 SHORT $LN6@ShowExampl
$LN7@ShowExampl:

; 7198 :         lines += 1000;

  0022d	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?lines@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4HA
  00233	05 e8 03 00 00	 add	 eax, 1000		; 000003e8H
  00238	89 05 00 00 00
	00		 mov	 DWORD PTR ?lines@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4HA, eax
$LN22@ShowExampl:

; 7199 :     }
; 7200 :     ImGui::BeginChild("Log");

  0023e	0f 57 d2	 xorps	 xmm2, xmm2
  00241	0f 57 c9	 xorps	 xmm1, xmm1
  00244	48 8d 8d c4 01
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  0024b	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00250	45 33 c9	 xor	 r9d, r9d
  00253	45 33 c0	 xor	 r8d, r8d
  00256	48 8b d0	 mov	 rdx, rax
  00259	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03GGEOLGBL@Log?$AA@
  00260	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z ; ImGui::BeginChild

; 7201 :     switch (test_type)

  00265	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?test_type@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4HA
  0026b	89 85 34 02 00
	00		 mov	 DWORD PTR tv166[rbp], eax
  00271	83 bd 34 02 00
	00 00		 cmp	 DWORD PTR tv166[rbp], 0
  00278	74 1b		 je	 SHORT $LN23@ShowExampl
  0027a	83 bd 34 02 00
	00 01		 cmp	 DWORD PTR tv166[rbp], 1
  00281	74 48		 je	 SHORT $LN24@ShowExampl
  00283	83 bd 34 02 00
	00 02		 cmp	 DWORD PTR tv166[rbp], 2
  0028a	0f 84 d6 00 00
	00		 je	 $LN25@ShowExampl
  00290	e9 36 01 00 00	 jmp	 $LN9@ShowExampl
$LN23@ShowExampl:

; 7202 :     {
; 7203 :     case 0:
; 7204 :         // Single call to TextUnformatted() with a big buffer
; 7205 :         ImGui::TextUnformatted(log.begin(), log.end());

  00295	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?log@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4UImGuiTextBuffer@@A
  0029c	e8 00 00 00 00	 call	 ?end@ImGuiTextBuffer@@QEBAPEBDXZ ; ImGuiTextBuffer::end
  002a1	48 89 85 38 02
	00 00		 mov	 QWORD PTR tv176[rbp], rax
  002a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?log@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4UImGuiTextBuffer@@A
  002af	e8 00 00 00 00	 call	 ?begin@ImGuiTextBuffer@@QEBAPEBDXZ ; ImGuiTextBuffer::begin
  002b4	48 8b 8d 38 02
	00 00		 mov	 rcx, QWORD PTR tv176[rbp]
  002bb	48 8b d1	 mov	 rdx, rcx
  002be	48 8b c8	 mov	 rcx, rax
  002c1	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted

; 7206 :         break;

  002c6	e9 00 01 00 00	 jmp	 $LN9@ShowExampl
$LN24@ShowExampl:

; 7207 :     case 1:
; 7208 :         {
; 7209 :             // Multiple calls to Text(), manually coarsely clipped - demonstrate how to use the ImGuiListClipper helper.
; 7210 :             ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 0));

  002cb	0f 57 d2	 xorps	 xmm2, xmm2
  002ce	0f 57 c9	 xorps	 xmm1, xmm1
  002d1	48 8d 8d e4 01
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  002d8	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  002dd	48 8b d0	 mov	 rdx, rax
  002e0	b9 0e 00 00 00	 mov	 ecx, 14
  002e5	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z ; ImGui::PushStyleVar

; 7211 :             ImGuiListClipper clipper;

  002ea	48 8d 4d 28	 lea	 rcx, QWORD PTR clipper$5[rbp]
  002ee	e8 00 00 00 00	 call	 ??0ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::ImGuiListClipper
  002f3	90		 npad	 1

; 7212 :             clipper.Begin(lines);

  002f4	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  002fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?lines@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4HA
  00302	48 8d 4d 28	 lea	 rcx, QWORD PTR clipper$5[rbp]
  00306	e8 00 00 00 00	 call	 ?Begin@ImGuiListClipper@@QEAAXHM@Z ; ImGuiListClipper::Begin
$LN11@ShowExampl:

; 7213 :             while (clipper.Step())

  0030b	48 8d 4d 28	 lea	 rcx, QWORD PTR clipper$5[rbp]
  0030f	e8 00 00 00 00	 call	 ?Step@ImGuiListClipper@@QEAA_NXZ ; ImGuiListClipper::Step
  00314	0f b6 c0	 movzx	 eax, al
  00317	85 c0		 test	 eax, eax
  00319	74 2b		 je	 SHORT $LN12@ShowExampl

; 7214 :                 for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)

  0031b	8b 45 28	 mov	 eax, DWORD PTR clipper$5[rbp]
  0031e	89 45 64	 mov	 DWORD PTR i$6[rbp], eax
  00321	eb 08		 jmp	 SHORT $LN15@ShowExampl
$LN13@ShowExampl:
  00323	8b 45 64	 mov	 eax, DWORD PTR i$6[rbp]
  00326	ff c0		 inc	 eax
  00328	89 45 64	 mov	 DWORD PTR i$6[rbp], eax
$LN15@ShowExampl:
  0032b	8b 45 2c	 mov	 eax, DWORD PTR clipper$5[rbp+4]
  0032e	39 45 64	 cmp	 DWORD PTR i$6[rbp], eax
  00331	7d 11		 jge	 SHORT $LN14@ShowExampl

; 7215 :                     ImGui::Text("%i The quick brown fox jumps over the lazy dog", i);

  00333	8b 55 64	 mov	 edx, DWORD PTR i$6[rbp]
  00336	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CP@NEDCKJAF@?$CFi?5The?5quick?5brown?5fox?5jumps?5ove@
  0033d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  00342	eb df		 jmp	 SHORT $LN13@ShowExampl
$LN14@ShowExampl:
  00344	eb c5		 jmp	 SHORT $LN11@ShowExampl
$LN12@ShowExampl:

; 7216 :             ImGui::PopStyleVar();

  00346	b9 01 00 00 00	 mov	 ecx, 1
  0034b	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
  00350	90		 npad	 1

; 7217 :             break;

  00351	48 8d 4d 28	 lea	 rcx, QWORD PTR clipper$5[rbp]
  00355	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::~ImGuiListClipper
  0035a	eb 6f		 jmp	 SHORT $LN9@ShowExampl

; 7218 :         }

  0035c	48 8d 4d 28	 lea	 rcx, QWORD PTR clipper$5[rbp]
  00360	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::~ImGuiListClipper
  00365	90		 npad	 1
$LN25@ShowExampl:

; 7219 :     case 2:
; 7220 :         // Multiple calls to Text(), not clipped (slow)
; 7221 :         ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 0));

  00366	0f 57 d2	 xorps	 xmm2, xmm2
  00369	0f 57 c9	 xorps	 xmm1, xmm1
  0036c	48 8d 8d 04 02
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  00373	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00378	48 8b d0	 mov	 rdx, rax
  0037b	b9 0e 00 00 00	 mov	 ecx, 14
  00380	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z ; ImGui::PushStyleVar

; 7222 :         for (int i = 0; i < lines; i++)

  00385	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR i$7[rbp], 0
  0038f	eb 0e		 jmp	 SHORT $LN18@ShowExampl
$LN16@ShowExampl:
  00391	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR i$7[rbp]
  00397	ff c0		 inc	 eax
  00399	89 85 84 00 00
	00		 mov	 DWORD PTR i$7[rbp], eax
$LN18@ShowExampl:
  0039f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?lines@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4HA
  003a5	39 85 84 00 00
	00		 cmp	 DWORD PTR i$7[rbp], eax
  003ab	7d 14		 jge	 SHORT $LN17@ShowExampl

; 7223 :             ImGui::Text("%i The quick brown fox jumps over the lazy dog", i);

  003ad	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR i$7[rbp]
  003b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CP@NEDCKJAF@?$CFi?5The?5quick?5brown?5fox?5jumps?5ove@
  003ba	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
  003bf	eb d0		 jmp	 SHORT $LN16@ShowExampl
$LN17@ShowExampl:

; 7224 :         ImGui::PopStyleVar();

  003c1	b9 01 00 00 00	 mov	 ecx, 1
  003c6	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
$LN9@ShowExampl:

; 7225 :         break;
; 7226 :     }
; 7227 :     ImGui::EndChild();

  003cb	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 7228 :     ImGui::End();

  003d0	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN1@ShowExampl:

; 7229 : }

  003d5	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  003d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShowExampleAppLongText@@YAXPEA_N@Z$rtcFrameData
  003e0	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  003e5	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  003ec	48 33 cd	 xor	 rcx, rbp
  003ef	e8 00 00 00 00	 call	 __security_check_cookie
  003f4	48 8d a5 58 02
	00 00		 lea	 rsp, QWORD PTR [rbp+600]
  003fb	5f		 pop	 rdi
  003fc	5d		 pop	 rbp
  003fd	c3		 ret	 0
?ShowExampleAppLongText@@YAXPEA_N@Z ENDP		; ShowExampleAppLongText
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
i$4 = 4
clipper$5 = 40
i$6 = 100
i$7 = 132
$T8 = 356
$T9 = 388
$T10 = 420
$T11 = 452
$T12 = 484
$T13 = 516
$T14 = 552
tv166 = 564
tv176 = 568
__$ArrayPad$ = 576
p_open$ = 624
?dtor$0@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA PROC	; `ShowExampleAppLongText'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4HA
  0001b	e8 00 00 00 00	 call	 _Init_thread_abort
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA ENDP	; `ShowExampleAppLongText'::`1'::dtor$0
i$4 = 4
clipper$5 = 40
i$6 = 100
i$7 = 132
$T8 = 356
$T9 = 388
$T10 = 420
$T11 = 452
$T12 = 484
$T13 = 516
$T14 = 552
tv166 = 564
tv176 = 568
__$ArrayPad$ = 576
p_open$ = 624
?dtor$1@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA PROC	; `ShowExampleAppLongText'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0003b	48 8d 4d 28	 lea	 rcx, QWORD PTR clipper$5[rbp]
  0003f	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::~ImGuiListClipper
  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
?dtor$1@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA ENDP	; `ShowExampleAppLongText'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
i$4 = 4
clipper$5 = 40
i$6 = 100
i$7 = 132
$T8 = 356
$T9 = 388
$T10 = 420
$T11 = 452
$T12 = 484
$T13 = 516
$T14 = 552
tv166 = 564
tv176 = 568
__$ArrayPad$ = 576
p_open$ = 624
?dtor$0@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA PROC	; `ShowExampleAppLongText'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowExampleAppLongText@@YAXPEA_N@Z@4HA
  0001b	e8 00 00 00 00	 call	 _Init_thread_abort
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA ENDP	; `ShowExampleAppLongText'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
i$4 = 4
clipper$5 = 40
i$6 = 100
i$7 = 132
$T8 = 356
$T9 = 388
$T10 = 420
$T11 = 452
$T12 = 484
$T13 = 516
$T14 = 552
tv166 = 564
tv176 = 568
__$ArrayPad$ = 576
p_open$ = 624
?dtor$1@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA PROC	; `ShowExampleAppLongText'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0003b	48 8d 4d 28	 lea	 rcx, QWORD PTR clipper$5[rbp]
  0003f	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QEAA@XZ ; ImGuiListClipper::~ImGuiListClipper
  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
?dtor$1@?0??ShowExampleAppLongText@@YAXPEA_N@Z@4HA ENDP	; `ShowExampleAppLongText'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppPropertyEditor@@YAXPEA_N@Z
_TEXT	SEGMENT
obj_i$1 = 4
$T2 = 228
$T3 = 260
$T4 = 292
p_open$ = 352
?ShowExampleAppPropertyEditor@@YAXPEA_N@Z PROC		; ShowExampleAppPropertyEditor, COMDAT

; 7138 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 5e 00 00 00	 mov	 ecx, 94			; 0000005eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]

; 7139 :     ImGui::SetNextWindowSize(ImVec2(430, 450), ImGuiCond_FirstUseEver);

  0002a	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43e10000
  00032	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@43d70000
  0003a	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  00041	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00046	ba 04 00 00 00	 mov	 edx, 4
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 ?SetNextWindowSize@ImGui@@YAXAEBUImVec2@@H@Z ; ImGui::SetNextWindowSize

; 7140 :     if (!ImGui::Begin("Example: Property editor", p_open))

  00053	45 33 c0	 xor	 r8d, r8d
  00056	48 8b 95 60 01
	00 00		 mov	 rdx, QWORD PTR p_open$[rbp]
  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@EKHJGGOC@Example?3?5Property?5editor?$AA@
  00064	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin
  00069	0f b6 c0	 movzx	 eax, al
  0006c	85 c0		 test	 eax, eax
  0006e	75 0a		 jne	 SHORT $LN8@ShowExampl

; 7141 :     {
; 7142 :         ImGui::End();

  00070	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 7143 :         return;

  00075	e9 e3 00 00 00	 jmp	 $LN1@ShowExampl
$LN8@ShowExampl:
$LN4@ShowExampl:

; 7144 :     }
; 7145 :     IMGUI_DEMO_MARKER("Examples/Property Editor");

  0007a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00082	74 26		 je	 SHORT $LN9@ShowExampl
  00084	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowExampleAppPropertyEditor@@YAXPEA_N@Z@4JA
  0008a	83 c0 07	 add	 eax, 7
  0008d	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00094	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BJ@BMIAECG@Examples?1Property?5Editor?$AA@
  0009b	8b d0		 mov	 edx, eax
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN9@ShowExampl:
  000aa	33 c0		 xor	 eax, eax
  000ac	85 c0		 test	 eax, eax
  000ae	75 ca		 jne	 SHORT $LN4@ShowExampl

; 7146 : 
; 7147 :     HelpMarker(

  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BAG@IGIKGKDA@This?5example?5shows?5how?5you?5may?5i@
  000b7	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 7148 :         "This example shows how you may implement a property editor using two columns.\n"
; 7149 :         "All objects/fields data are dummies here.\n"
; 7150 :         "Remember that in many simple cases, you can use ImGui::SameLine(xxx) to position\n"
; 7151 :         "your cursor horizontally instead of using the Columns() API.");
; 7152 : 
; 7153 :     ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2, 2));

  000bc	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@40000000
  000c4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  000cc	48 8d 8d 04 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  000d3	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000d8	48 8b d0	 mov	 rdx, rax
  000db	b9 0b 00 00 00	 mov	 ecx, 11
  000e0	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z ; ImGui::PushStyleVar

; 7154 :     if (ImGui::BeginTable("split", 2, ImGuiTableFlags_BordersOuter | ImGuiTableFlags_Resizable))

  000e5	0f 57 d2	 xorps	 xmm2, xmm2
  000e8	0f 57 c9	 xorps	 xmm1, xmm1
  000eb	48 8d 8d 24 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  000f2	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000f7	0f 57 c0	 xorps	 xmm0, xmm0
  000fa	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00100	4c 8b c8	 mov	 r9, rax
  00103	41 b8 01 05 00
	00		 mov	 r8d, 1281		; 00000501H
  00109	ba 02 00 00 00	 mov	 edx, 2
  0010e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05EHPMMFBK@split?$AA@
  00115	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  0011a	0f b6 c0	 movzx	 eax, al
  0011d	85 c0		 test	 eax, eax
  0011f	74 2d		 je	 SHORT $LN10@ShowExampl

; 7155 :     {
; 7156 :         // Iterate placeholder objects (all the same data)
; 7157 :         for (int obj_i = 0; obj_i < 4; obj_i++)

  00121	c7 45 04 00 00
	00 00		 mov	 DWORD PTR obj_i$1[rbp], 0
  00128	eb 08		 jmp	 SHORT $LN7@ShowExampl
$LN5@ShowExampl:
  0012a	8b 45 04	 mov	 eax, DWORD PTR obj_i$1[rbp]
  0012d	ff c0		 inc	 eax
  0012f	89 45 04	 mov	 DWORD PTR obj_i$1[rbp], eax
$LN7@ShowExampl:
  00132	83 7d 04 04	 cmp	 DWORD PTR obj_i$1[rbp], 4
  00136	7d 11		 jge	 SHORT $LN6@ShowExampl

; 7158 :         {
; 7159 :             ShowPlaceholderObject("Object", obj_i);

  00138	8b 55 04	 mov	 edx, DWORD PTR obj_i$1[rbp]
  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06ELFECKBG@Object?$AA@
  00142	e8 00 00 00 00	 call	 ?ShowPlaceholderObject@@YAXPEBDH@Z ; ShowPlaceholderObject

; 7160 :             //ImGui::Separator();
; 7161 :         }

  00147	eb e1		 jmp	 SHORT $LN5@ShowExampl
$LN6@ShowExampl:

; 7162 :         ImGui::EndTable();

  00149	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN10@ShowExampl:

; 7163 :     }
; 7164 :     ImGui::PopStyleVar();

  0014e	b9 01 00 00 00	 mov	 ecx, 1
  00153	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar

; 7165 :     ImGui::End();

  00158	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN1@ShowExampl:

; 7166 : }

  0015d	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  00164	5f		 pop	 rdi
  00165	5d		 pop	 rbp
  00166	c3		 ret	 0
?ShowExampleAppPropertyEditor@@YAXPEA_N@Z ENDP		; ShowExampleAppPropertyEditor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppLayout@@YAXPEA_N@Z
_TEXT	SEGMENT
i$4 = 4
label$5 = 48
$T6 = 388
$T7 = 420
$T8 = 452
$T9 = 484
$T10 = 516
$T11 = 548
tv151 = 564
__$ArrayPad$ = 568
p_open$ = 608
?ShowExampleAppLayout@@YAXPEA_N@Z PROC			; ShowExampleAppLayout, COMDAT

; 7024 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 68 02
	00 00		 sub	 rsp, 616		; 00000268H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 9a 00 00 00	 mov	 ecx, 154		; 0000009aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 88
	02 00 00	 mov	 rcx, QWORD PTR [rsp+648]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 38 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 7025 :     ImGui::SetNextWindowSize(ImVec2(500, 440), ImGuiCond_FirstUseEver);

  0003b	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43dc0000
  00043	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@43fa0000
  0004b	48 8d 8d 84 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00052	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00057	ba 04 00 00 00	 mov	 edx, 4
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 ?SetNextWindowSize@ImGui@@YAXAEBUImVec2@@H@Z ; ImGui::SetNextWindowSize

; 7026 :     if (ImGui::Begin("Example: Simple layout", p_open, ImGuiWindowFlags_MenuBar))

  00064	41 b8 00 04 00
	00		 mov	 r8d, 1024		; 00000400H
  0006a	48 8b 95 60 02
	00 00		 mov	 rdx, QWORD PTR p_open$[rbp]
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@BCHKOJFL@Example?3?5Simple?5layout?$AA@
  00078	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin
  0007d	0f b6 c0	 movzx	 eax, al
  00080	85 c0		 test	 eax, eax
  00082	0f 84 69 02 00
	00		 je	 $LN8@ShowExampl
$LN4@ShowExampl:

; 7027 :     {
; 7028 :         IMGUI_DEMO_MARKER("Examples/Simple layout");

  00088	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00090	74 26		 je	 SHORT $LN9@ShowExampl
  00092	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowExampleAppLayout@@YAXPEA_N@Z@4JA
  00098	83 c0 04	 add	 eax, 4
  0009b	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  000a2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@LFPHNCOC@Examples?1Simple?5layout?$AA@
  000a9	8b d0		 mov	 edx, eax
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  000b2	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN9@ShowExampl:
  000b8	33 c0		 xor	 eax, eax
  000ba	85 c0		 test	 eax, eax
  000bc	75 ca		 jne	 SHORT $LN4@ShowExampl

; 7029 :         if (ImGui::BeginMenuBar())

  000be	e8 00 00 00 00	 call	 ?BeginMenuBar@ImGui@@YA_NXZ ; ImGui::BeginMenuBar
  000c3	0f b6 c0	 movzx	 eax, al
  000c6	85 c0		 test	 eax, eax
  000c8	74 49		 je	 SHORT $LN10@ShowExampl

; 7030 :         {
; 7031 :             if (ImGui::BeginMenu("File"))

  000ca	b2 01		 mov	 dl, 1
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04PBAHLACE@File?$AA@
  000d3	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  000d8	0f b6 c0	 movzx	 eax, al
  000db	85 c0		 test	 eax, eax
  000dd	74 2f		 je	 SHORT $LN11@ShowExampl

; 7032 :             {
; 7033 :                 if (ImGui::MenuItem("Close", "Ctrl+W")) { *p_open = false; }

  000df	41 b1 01	 mov	 r9b, 1
  000e2	45 33 c0	 xor	 r8d, r8d
  000e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06LEMDJJDE@Ctrl?$CLW?$AA@
  000ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LGELBCGM@Close?$AA@
  000f3	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  000f8	0f b6 c0	 movzx	 eax, al
  000fb	85 c0		 test	 eax, eax
  000fd	74 0a		 je	 SHORT $LN12@ShowExampl
  000ff	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR p_open$[rbp]
  00106	c6 00 00	 mov	 BYTE PTR [rax], 0
$LN12@ShowExampl:

; 7034 :                 ImGui::EndMenu();

  00109	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN11@ShowExampl:

; 7035 :             }
; 7036 :             ImGui::EndMenuBar();

  0010e	e8 00 00 00 00	 call	 ?EndMenuBar@ImGui@@YAXXZ ; ImGui::EndMenuBar
$LN10@ShowExampl:

; 7037 :         }
; 7038 : 
; 7039 :         // Left
; 7040 :         static int selected = 0;
; 7041 :         {
; 7042 :             ImGui::BeginChild("left pane", ImVec2(150, 0), true);

  00113	0f 57 d2	 xorps	 xmm2, xmm2
  00116	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@43160000
  0011e	48 8d 8d a4 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00125	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0012a	45 33 c9	 xor	 r9d, r9d
  0012d	41 b0 01	 mov	 r8b, 1
  00130	48 8b d0	 mov	 rdx, rax
  00133	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09OINOOGMP@left?5pane?$AA@
  0013a	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z ; ImGui::BeginChild

; 7043 :             for (int i = 0; i < 100; i++)

  0013f	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  00146	eb 08		 jmp	 SHORT $LN7@ShowExampl
$LN5@ShowExampl:
  00148	8b 45 04	 mov	 eax, DWORD PTR i$4[rbp]
  0014b	ff c0		 inc	 eax
  0014d	89 45 04	 mov	 DWORD PTR i$4[rbp], eax
$LN7@ShowExampl:
  00150	83 7d 04 64	 cmp	 DWORD PTR i$4[rbp], 100	; 00000064H
  00154	7d 69		 jge	 SHORT $LN6@ShowExampl

; 7044 :             {
; 7045 :                 // FIXME: Good candidate to use ImGuiSelectableFlags_SelectOnNav
; 7046 :                 char label[128];
; 7047 :                 sprintf(label, "MyObject %d", i);

  00156	44 8b 45 04	 mov	 r8d, DWORD PTR i$4[rbp]
  0015a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@DHBPHHKL@MyObject?5?$CFd?$AA@
  00161	48 8d 4d 30	 lea	 rcx, QWORD PTR label$5[rbp]
  00165	e8 00 00 00 00	 call	 sprintf

; 7048 :                 if (ImGui::Selectable(label, selected == i))

  0016a	8b 45 04	 mov	 eax, DWORD PTR i$4[rbp]
  0016d	39 05 00 00 00
	00		 cmp	 DWORD PTR ?selected@?4??ShowExampleAppLayout@@YAXPEA_N@Z@4HA, eax
  00173	75 09		 jne	 SHORT $LN20@ShowExampl
  00175	c6 85 34 02 00
	00 01		 mov	 BYTE PTR tv151[rbp], 1
  0017c	eb 07		 jmp	 SHORT $LN21@ShowExampl
$LN20@ShowExampl:
  0017e	c6 85 34 02 00
	00 00		 mov	 BYTE PTR tv151[rbp], 0
$LN21@ShowExampl:
  00185	0f 57 d2	 xorps	 xmm2, xmm2
  00188	0f 57 c9	 xorps	 xmm1, xmm1
  0018b	48 8d 8d c4 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00192	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00197	4c 8b c8	 mov	 r9, rax
  0019a	45 33 c0	 xor	 r8d, r8d
  0019d	0f b6 95 34 02
	00 00		 movzx	 edx, BYTE PTR tv151[rbp]
  001a4	48 8d 4d 30	 lea	 rcx, QWORD PTR label$5[rbp]
  001a8	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
  001ad	0f b6 c0	 movzx	 eax, al
  001b0	85 c0		 test	 eax, eax
  001b2	74 09		 je	 SHORT $LN13@ShowExampl

; 7049 :                     selected = i;

  001b4	8b 45 04	 mov	 eax, DWORD PTR i$4[rbp]
  001b7	89 05 00 00 00
	00		 mov	 DWORD PTR ?selected@?4??ShowExampleAppLayout@@YAXPEA_N@Z@4HA, eax
$LN13@ShowExampl:

; 7050 :             }

  001bd	eb 89		 jmp	 SHORT $LN5@ShowExampl
$LN6@ShowExampl:

; 7051 :             ImGui::EndChild();

  001bf	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 7052 :         }
; 7053 :         ImGui::SameLine();

  001c4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  001cc	0f 57 c0	 xorps	 xmm0, xmm0
  001cf	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 7054 : 
; 7055 :         // Right
; 7056 :         {
; 7057 :             ImGui::BeginGroup();

  001d4	e8 00 00 00 00	 call	 ?BeginGroup@ImGui@@YAXXZ ; ImGui::BeginGroup

; 7058 :             ImGui::BeginChild("item view", ImVec2(0, -ImGui::GetFrameHeightWithSpacing())); // Leave room for 1 line below us

  001d9	e8 00 00 00 00	 call	 ?GetFrameHeightWithSpacing@ImGui@@YAMXZ ; ImGui::GetFrameHeightWithSpacing
  001de	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001e5	0f 28 d0	 movaps	 xmm2, xmm0
  001e8	0f 57 c9	 xorps	 xmm1, xmm1
  001eb	48 8d 8d e4 01
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  001f2	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  001f7	45 33 c9	 xor	 r9d, r9d
  001fa	45 33 c0	 xor	 r8d, r8d
  001fd	48 8b d0	 mov	 rdx, rax
  00200	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09PHNAOHDK@item?5view?$AA@
  00207	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z ; ImGui::BeginChild

; 7059 :             ImGui::Text("MyObject: %d", selected);

  0020c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?selected@?4??ShowExampleAppLayout@@YAXPEA_N@Z@4HA
  00212	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@CMHEFDFC@MyObject?3?5?$CFd?$AA@
  00219	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 7060 :             ImGui::Separator();

  0021e	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 7061 :             if (ImGui::BeginTabBar("##Tabs", ImGuiTabBarFlags_None))

  00223	33 d2		 xor	 edx, edx
  00225	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06BMLGLIAO@?$CD?$CDTabs?$AA@
  0022c	e8 00 00 00 00	 call	 ?BeginTabBar@ImGui@@YA_NPEBDH@Z ; ImGui::BeginTabBar
  00231	0f b6 c0	 movzx	 eax, al
  00234	85 c0		 test	 eax, eax
  00236	74 57		 je	 SHORT $LN14@ShowExampl

; 7062 :             {
; 7063 :                 if (ImGui::BeginTabItem("Description"))

  00238	45 33 c0	 xor	 r8d, r8d
  0023b	33 d2		 xor	 edx, edx
  0023d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@OHKMKKDH@Description?$AA@
  00244	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginTabItem
  00249	0f b6 c0	 movzx	 eax, al
  0024c	85 c0		 test	 eax, eax
  0024e	74 11		 je	 SHORT $LN15@ShowExampl

; 7064 :                 {
; 7065 :                     ImGui::TextWrapped("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ");

  00250	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0HN@OJKIHMDC@Lorem?5ipsum?5dolor?5sit?5amet?0?5cons@
  00257	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPEBDZZ ; ImGui::TextWrapped

; 7066 :                     ImGui::EndTabItem();

  0025c	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN15@ShowExampl:

; 7067 :                 }
; 7068 :                 if (ImGui::BeginTabItem("Details"))

  00261	45 33 c0	 xor	 r8d, r8d
  00264	33 d2		 xor	 edx, edx
  00266	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07NJJEDOBB@Details?$AA@
  0026d	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginTabItem
  00272	0f b6 c0	 movzx	 eax, al
  00275	85 c0		 test	 eax, eax
  00277	74 11		 je	 SHORT $LN16@ShowExampl

; 7069 :                 {
; 7070 :                     ImGui::Text("ID: 0123456789");

  00279	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@CCIDAFDC@ID?3?50123456789?$AA@
  00280	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 7071 :                     ImGui::EndTabItem();

  00285	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN16@ShowExampl:

; 7072 :                 }
; 7073 :                 ImGui::EndTabBar();

  0028a	e8 00 00 00 00	 call	 ?EndTabBar@ImGui@@YAXXZ	; ImGui::EndTabBar
$LN14@ShowExampl:

; 7074 :             }
; 7075 :             ImGui::EndChild();

  0028f	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 7076 :             if (ImGui::Button("Revert")) {}

  00294	0f 57 d2	 xorps	 xmm2, xmm2
  00297	0f 57 c9	 xorps	 xmm1, xmm1
  0029a	48 8d 8d 04 02
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  002a1	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  002a6	48 8b d0	 mov	 rdx, rax
  002a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OIKMFEGE@Revert?$AA@
  002b0	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  002b5	0f b6 c0	 movzx	 eax, al

; 7077 :             ImGui::SameLine();

  002b8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  002c0	0f 57 c0	 xorps	 xmm0, xmm0
  002c3	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 7078 :             if (ImGui::Button("Save")) {}

  002c8	0f 57 d2	 xorps	 xmm2, xmm2
  002cb	0f 57 c9	 xorps	 xmm1, xmm1
  002ce	48 8d 8d 24 02
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  002d5	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  002da	48 8b d0	 mov	 rdx, rax
  002dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04INACKGJP@Save?$AA@
  002e4	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  002e9	0f b6 c0	 movzx	 eax, al

; 7079 :             ImGui::EndGroup();

  002ec	e8 00 00 00 00	 call	 ?EndGroup@ImGui@@YAXXZ	; ImGui::EndGroup
$LN8@ShowExampl:

; 7080 :         }
; 7081 :     }
; 7082 :     ImGui::End();

  002f1	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 7083 : }

  002f6	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  002fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShowExampleAppLayout@@YAXPEA_N@Z$rtcFrameData
  00301	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00306	48 8b 8d 38 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0030d	48 33 cd	 xor	 rcx, rbp
  00310	e8 00 00 00 00	 call	 __security_check_cookie
  00315	48 8d a5 48 02
	00 00		 lea	 rsp, QWORD PTR [rbp+584]
  0031c	5f		 pop	 rdi
  0031d	5d		 pop	 rbp
  0031e	c3		 ret	 0
?ShowExampleAppLayout@@YAXPEA_N@Z ENDP			; ShowExampleAppLayout
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppLog@@YAXPEA_N@Z
_TEXT	SEGMENT
categories$5 = 8
words$6 = 56
n$7 = 132
category$8 = 168
word$9 = 200
$T10 = 420
$T11 = 456
tv141 = 472
p_open$ = 512
?ShowExampleAppLog@@YAXPEA_N@Z PROC			; ShowExampleAppLog, COMDAT

; 6989 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 86 00 00 00	 mov	 ecx, 134		; 00000086H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR [rsp+568]
  0002a	48 c7 85 c8 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T11[rbp], -2

; 6990 :     static ExampleAppLog log;

  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  0003a	8b c0		 mov	 eax, eax
  0003c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00042	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0004b	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0004f	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  00052	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS0@?1??ShowExampleAppLog@@YAXPEA_N@Z@4HA, eax
  00058	7e 3a		 jle	 SHORT $LN2@ShowExampl
  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowExampleAppLog@@YAXPEA_N@Z@4HA
  00061	e8 00 00 00 00	 call	 _Init_thread_header
  00066	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??ShowExampleAppLog@@YAXPEA_N@Z@4HA, -1
  0006d	75 25		 jne	 SHORT $LN2@ShowExampl
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?log@?1??ShowExampleAppLog@@YAXPEA_N@Z@4UExampleAppLog@@A
  00076	e8 00 00 00 00	 call	 ??0ExampleAppLog@@QEAA@XZ ; ExampleAppLog::ExampleAppLog
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__Flog@?1??ShowExampleAppLog@@YAXPEA_N@Z@YAXXZ ; `ShowExampleAppLog'::`2'::`dynamic atexit destructor for 'log''
  00082	e8 00 00 00 00	 call	 atexit
  00087	90		 npad	 1
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowExampleAppLog@@YAXPEA_N@Z@4HA
  0008f	e8 00 00 00 00	 call	 _Init_thread_footer
$LN2@ShowExampl:

; 6991 : 
; 6992 :     // For the demo: add a debug button _BEFORE_ the normal log window contents
; 6993 :     // We take advantage of a rarely used feature: multiple calls to Begin()/End() are appending to the _same_ window.
; 6994 :     // Most of the contents of the window will be added by the log.Draw() call.
; 6995 :     ImGui::SetNextWindowSize(ImVec2(500, 400), ImGuiCond_FirstUseEver);

  00094	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43c80000
  0009c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@43fa0000
  000a4	48 8d 8d a4 01
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  000ab	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000b0	ba 04 00 00 00	 mov	 edx, 4
  000b5	48 8b c8	 mov	 rcx, rax
  000b8	e8 00 00 00 00	 call	 ?SetNextWindowSize@ImGui@@YAXAEBUImVec2@@H@Z ; ImGui::SetNextWindowSize

; 6996 :     ImGui::Begin("Example: Log", p_open);

  000bd	45 33 c0	 xor	 r8d, r8d
  000c0	48 8b 95 00 02
	00 00		 mov	 rdx, QWORD PTR p_open$[rbp]
  000c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LFJACCKD@Example?3?5Log?$AA@
  000ce	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin
$LN5@ShowExampl:

; 6997 :     IMGUI_DEMO_MARKER("Examples/Log");

  000d3	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  000db	74 26		 je	 SHORT $LN9@ShowExampl
  000dd	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowExampleAppLog@@YAXPEA_N@Z@4JA
  000e3	83 c0 08	 add	 eax, 8
  000e6	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  000ed	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@BPJHOONG@Examples?1Log?$AA@
  000f4	8b d0		 mov	 edx, eax
  000f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  000fd	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN9@ShowExampl:
  00103	33 c0		 xor	 eax, eax
  00105	85 c0		 test	 eax, eax
  00107	75 ca		 jne	 SHORT $LN5@ShowExampl

; 6998 :     if (ImGui::SmallButton("[Debug] Add 5 entries"))

  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@JBNFHIEN@?$FLDebug?$FN?5Add?55?5entries?$AA@
  00110	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPEBD@Z ; ImGui::SmallButton
  00115	0f b6 c0	 movzx	 eax, al
  00118	85 c0		 test	 eax, eax
  0011a	0f 84 2d 01 00
	00		 je	 $LN10@ShowExampl

; 6999 :     {
; 7000 :         static int counter = 0;
; 7001 :         const char* categories[3] = { "info", "warn", "error" };

  00120	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04NIDJFNBE@info?$AA@
  00127	48 89 45 08	 mov	 QWORD PTR categories$5[rbp], rax
  0012b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04FNLOFOEM@warn?$AA@
  00132	48 89 45 10	 mov	 QWORD PTR categories$5[rbp+8], rax
  00136	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05KKCIMGE@error?$AA@
  0013d	48 89 45 18	 mov	 QWORD PTR categories$5[rbp+16], rax

; 7002 :         const char* words[] = { "Bumfuzzled", "Cattywampus", "Snickersnee", "Abibliophobia", "Absquatulate", "Nincompoop", "Pauciloquent" };

  00141	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0L@CIGCKJLI@Bumfuzzled?$AA@
  00148	48 89 45 38	 mov	 QWORD PTR words$6[rbp], rax
  0014c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0M@FKNIJFM@Cattywampus?$AA@
  00153	48 89 45 40	 mov	 QWORD PTR words$6[rbp+8], rax
  00157	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0M@KEIJGBOK@Snickersnee?$AA@
  0015e	48 89 45 48	 mov	 QWORD PTR words$6[rbp+16], rax
  00162	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@KKKMMPJN@Abibliophobia?$AA@
  00169	48 89 45 50	 mov	 QWORD PTR words$6[rbp+24], rax
  0016d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0N@FLCFMCCB@Absquatulate?$AA@
  00174	48 89 45 58	 mov	 QWORD PTR words$6[rbp+32], rax
  00178	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0L@MIMGHMNH@Nincompoop?$AA@
  0017f	48 89 45 60	 mov	 QWORD PTR words$6[rbp+40], rax
  00183	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0N@BIHLNJM@Pauciloquent?$AA@
  0018a	48 89 45 68	 mov	 QWORD PTR words$6[rbp+48], rax

; 7003 :         for (int n = 0; n < 5; n++)

  0018e	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR n$7[rbp], 0
  00198	eb 0e		 jmp	 SHORT $LN8@ShowExampl
$LN6@ShowExampl:
  0019a	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR n$7[rbp]
  001a0	ff c0		 inc	 eax
  001a2	89 85 84 00 00
	00		 mov	 DWORD PTR n$7[rbp], eax
$LN8@ShowExampl:
  001a8	83 bd 84 00 00
	00 05		 cmp	 DWORD PTR n$7[rbp], 5
  001af	0f 8d 98 00 00
	00		 jge	 $LN10@ShowExampl

; 7004 :         {
; 7005 :             const char* category = categories[counter % IM_ARRAYSIZE(categories)];

  001b5	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?counter@?8??ShowExampleAppLog@@YAXPEA_N@Z@4HA
  001bb	99		 cdq
  001bc	b9 03 00 00 00	 mov	 ecx, 3
  001c1	f7 f9		 idiv	 ecx
  001c3	8b c2		 mov	 eax, edx
  001c5	48 98		 cdqe
  001c7	48 8b 44 c5 08	 mov	 rax, QWORD PTR categories$5[rbp+rax*8]
  001cc	48 89 85 a8 00
	00 00		 mov	 QWORD PTR category$8[rbp], rax

; 7006 :             const char* word = words[counter % IM_ARRAYSIZE(words)];

  001d3	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?counter@?8??ShowExampleAppLog@@YAXPEA_N@Z@4HA
  001d9	99		 cdq
  001da	b9 07 00 00 00	 mov	 ecx, 7
  001df	f7 f9		 idiv	 ecx
  001e1	8b c2		 mov	 eax, edx
  001e3	48 98		 cdqe
  001e5	48 8b 44 c5 38	 mov	 rax, QWORD PTR words$6[rbp+rax*8]
  001ea	48 89 85 c8 00
	00 00		 mov	 QWORD PTR word$9[rbp], rax

; 7007 :             log.AddLog("[%05d] [%s] Hello, current time is %.1f, here's a word: '%s'\n",

  001f1	e8 00 00 00 00	 call	 ?GetTime@ImGui@@YANXZ	; ImGui::GetTime
  001f6	f2 0f 11 85 d8
	01 00 00	 movsd	 QWORD PTR tv141[rbp], xmm0
  001fe	e8 00 00 00 00	 call	 ?GetFrameCount@ImGui@@YAHXZ ; ImGui::GetFrameCount
  00203	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR word$9[rbp]
  0020a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0020f	f2 0f 10 85 d8
	01 00 00	 movsd	 xmm0, QWORD PTR tv141[rbp]
  00217	f2 0f 11 44 24
	20		 movsd	 QWORD PTR [rsp+32], xmm0
  0021d	4c 8b 8d a8 00
	00 00		 mov	 r9, QWORD PTR category$8[rbp]
  00224	44 8b c0	 mov	 r8d, eax
  00227	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DO@NHFCPAIM@?$FL?$CF05d?$FN?5?$FL?$CFs?$FN?5Hello?0?5current?5time?5@
  0022e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?log@?1??ShowExampleAppLog@@YAXPEA_N@Z@4UExampleAppLog@@A
  00235	e8 00 00 00 00	 call	 ?AddLog@ExampleAppLog@@QEAAXPEBDZZ ; ExampleAppLog::AddLog

; 7008 :                 ImGui::GetFrameCount(), category, ImGui::GetTime(), word);
; 7009 :             counter++;

  0023a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?counter@?8??ShowExampleAppLog@@YAXPEA_N@Z@4HA
  00240	ff c0		 inc	 eax
  00242	89 05 00 00 00
	00		 mov	 DWORD PTR ?counter@?8??ShowExampleAppLog@@YAXPEA_N@Z@4HA, eax

; 7010 :         }

  00248	e9 4d ff ff ff	 jmp	 $LN6@ShowExampl
$LN10@ShowExampl:

; 7011 :     }
; 7012 :     ImGui::End();

  0024d	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 7013 : 
; 7014 :     // Actually call in the regular Log helper (which will Begin() into the same window as we just did)
; 7015 :     log.Draw("Example: Log", p_open);

  00252	4c 8b 85 00 02
	00 00		 mov	 r8, QWORD PTR p_open$[rbp]
  00259	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@LFJACCKD@Example?3?5Log?$AA@
  00260	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?log@?1??ShowExampleAppLog@@YAXPEA_N@Z@4UExampleAppLog@@A
  00267	e8 00 00 00 00	 call	 ?Draw@ExampleAppLog@@QEAAXPEBDPEA_N@Z ; ExampleAppLog::Draw

; 7016 : }

  0026c	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00270	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShowExampleAppLog@@YAXPEA_N@Z$rtcFrameData
  00277	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0027c	48 8d a5 e8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+488]
  00283	5f		 pop	 rdi
  00284	5d		 pop	 rbp
  00285	c3		 ret	 0
?ShowExampleAppLog@@YAXPEA_N@Z ENDP			; ShowExampleAppLog
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
categories$5 = 8
words$6 = 56
n$7 = 132
category$8 = 168
word$9 = 200
$T10 = 420
$T11 = 456
tv141 = 472
p_open$ = 512
?dtor$0@?0??ShowExampleAppLog@@YAXPEA_N@Z@4HA PROC	; `ShowExampleAppLog'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowExampleAppLog@@YAXPEA_N@Z@4HA
  0001b	e8 00 00 00 00	 call	 _Init_thread_abort
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??ShowExampleAppLog@@YAXPEA_N@Z@4HA ENDP	; `ShowExampleAppLog'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
categories$5 = 8
words$6 = 56
n$7 = 132
category$8 = 168
word$9 = 200
$T10 = 420
$T11 = 456
tv141 = 472
p_open$ = 512
?dtor$0@?0??ShowExampleAppLog@@YAXPEA_N@Z@4HA PROC	; `ShowExampleAppLog'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowExampleAppLog@@YAXPEA_N@Z@4HA
  0001b	e8 00 00 00 00	 call	 _Init_thread_abort
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??ShowExampleAppLog@@YAXPEA_N@Z@4HA ENDP	; `ShowExampleAppLog'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppConsole@@YAXPEA_N@Z
_TEXT	SEGMENT
$T1 = 200
p_open$ = 256
?ShowExampleAppConsole@@YAXPEA_N@Z PROC			; ShowExampleAppConsole, COMDAT

; 6851 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 6852 :     static ExampleAppConsole console;

  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  0003a	8b c0		 mov	 eax, eax
  0003c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00042	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0004b	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0004f	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  00052	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS0@?1??ShowExampleAppConsole@@YAXPEA_N@Z@4HA, eax
  00058	7e 3a		 jle	 SHORT $LN2@ShowExampl
  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowExampleAppConsole@@YAXPEA_N@Z@4HA
  00061	e8 00 00 00 00	 call	 _Init_thread_header
  00066	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??ShowExampleAppConsole@@YAXPEA_N@Z@4HA, -1
  0006d	75 25		 jne	 SHORT $LN2@ShowExampl
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?console@?1??ShowExampleAppConsole@@YAXPEA_N@Z@4UExampleAppConsole@@A
  00076	e8 00 00 00 00	 call	 ??0ExampleAppConsole@@QEAA@XZ ; ExampleAppConsole::ExampleAppConsole
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__Fconsole@?1??ShowExampleAppConsole@@YAXPEA_N@Z@YAXXZ ; `ShowExampleAppConsole'::`2'::`dynamic atexit destructor for 'console''
  00082	e8 00 00 00 00	 call	 atexit
  00087	90		 npad	 1
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowExampleAppConsole@@YAXPEA_N@Z@4HA
  0008f	e8 00 00 00 00	 call	 _Init_thread_footer
$LN2@ShowExampl:

; 6853 :     console.Draw("Example: Console", p_open);

  00094	4c 8b 85 00 01
	00 00		 mov	 r8, QWORD PTR p_open$[rbp]
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@NEACHKPE@Example?3?5Console?$AA@
  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?console@?1??ShowExampleAppConsole@@YAXPEA_N@Z@4UExampleAppConsole@@A
  000a9	e8 00 00 00 00	 call	 ?Draw@ExampleAppConsole@@QEAAXPEBDPEA_N@Z ; ExampleAppConsole::Draw

; 6854 : }

  000ae	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000b5	5f		 pop	 rdi
  000b6	5d		 pop	 rbp
  000b7	c3		 ret	 0
?ShowExampleAppConsole@@YAXPEA_N@Z ENDP			; ShowExampleAppConsole
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
p_open$ = 256
?dtor$0@?0??ShowExampleAppConsole@@YAXPEA_N@Z@4HA PROC	; `ShowExampleAppConsole'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowExampleAppConsole@@YAXPEA_N@Z@4HA
  0001b	e8 00 00 00 00	 call	 _Init_thread_abort
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??ShowExampleAppConsole@@YAXPEA_N@Z@4HA ENDP	; `ShowExampleAppConsole'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
p_open$ = 256
?dtor$0@?0??ShowExampleAppConsole@@YAXPEA_N@Z@4HA PROC	; `ShowExampleAppConsole'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowExampleAppConsole@@YAXPEA_N@Z@4HA
  0001b	e8 00 00 00 00	 call	 _Init_thread_abort
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??ShowExampleAppConsole@@YAXPEA_N@Z@4HA ENDP	; `ShowExampleAppConsole'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppMainMenuBar@@YAXXZ
_TEXT	SEGMENT
?ShowExampleAppMainMenuBar@@YAXXZ PROC			; ShowExampleAppMainMenuBar, COMDAT

; 6389 : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 6390 :     if (ImGui::BeginMainMenuBar())

  0001e	e8 00 00 00 00	 call	 ?BeginMainMenuBar@ImGui@@YA_NXZ ; ImGui::BeginMainMenuBar
  00023	0f b6 c0	 movzx	 eax, al
  00026	85 c0		 test	 eax, eax
  00028	0f 84 d3 00 00
	00		 je	 $LN2@ShowExampl

; 6391 :     {
; 6392 :         if (ImGui::BeginMenu("File"))

  0002e	b2 01		 mov	 dl, 1
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04PBAHLACE@File?$AA@
  00037	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  0003c	0f b6 c0	 movzx	 eax, al
  0003f	85 c0		 test	 eax, eax
  00041	74 0a		 je	 SHORT $LN3@ShowExampl

; 6393 :         {
; 6394 :             ShowExampleMenuFile();

  00043	e8 00 00 00 00	 call	 ?ShowExampleMenuFile@@YAXXZ ; ShowExampleMenuFile

; 6395 :             ImGui::EndMenu();

  00048	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN3@ShowExampl:

; 6396 :         }
; 6397 :         if (ImGui::BeginMenu("Edit"))

  0004d	b2 01		 mov	 dl, 1
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BBNPPDNC@Edit?$AA@
  00056	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  0005b	0f b6 c0	 movzx	 eax, al
  0005e	85 c0		 test	 eax, eax
  00060	0f 84 96 00 00
	00		 je	 $LN4@ShowExampl

; 6398 :         {
; 6399 :             if (ImGui::MenuItem("Undo", "CTRL+Z")) {}

  00066	41 b1 01	 mov	 r9b, 1
  00069	45 33 c0	 xor	 r8d, r8d
  0006c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06GHDCGCHF@CTRL?$CLZ?$AA@
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LPGMNMPN@Undo?$AA@
  0007a	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  0007f	0f b6 c0	 movzx	 eax, al

; 6400 :             if (ImGui::MenuItem("Redo", "CTRL+Y", false, false)) {}  // Disabled item

  00082	45 33 c9	 xor	 r9d, r9d
  00085	45 33 c0	 xor	 r8d, r8d
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06EMBPDBLG@CTRL?$CLY?$AA@
  0008f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04NKENIHOM@Redo?$AA@
  00096	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  0009b	0f b6 c0	 movzx	 eax, al

; 6401 :             ImGui::Separator();

  0009e	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 6402 :             if (ImGui::MenuItem("Cut", "CTRL+X")) {}

  000a3	41 b1 01	 mov	 r9b, 1
  000a6	45 33 c0	 xor	 r8d, r8d
  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06FFAEAAPH@CTRL?$CLX?$AA@
  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03EOHDMBHJ@Cut?$AA@
  000b7	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  000bc	0f b6 c0	 movzx	 eax, al

; 6403 :             if (ImGui::MenuItem("Copy", "CTRL+C")) {}

  000bf	41 b1 01	 mov	 r9b, 1
  000c2	45 33 c0	 xor	 r8d, r8d
  000c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06PMDCMLGN@CTRL?$CLC?$AA@
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04OPMHGHMB@Copy?$AA@
  000d3	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  000d8	0f b6 c0	 movzx	 eax, al

; 6404 :             if (ImGui::MenuItem("Paste", "CTRL+V")) {}

  000db	41 b1 01	 mov	 r9b, 1
  000de	45 33 c0	 xor	 r8d, r8d
  000e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06MLIHCNHJ@CTRL?$CLV?$AA@
  000e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05NEBJFIEK@Paste?$AA@
  000ef	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  000f4	0f b6 c0	 movzx	 eax, al

; 6405 :             ImGui::EndMenu();

  000f7	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN4@ShowExampl:

; 6406 :         }
; 6407 :         ImGui::EndMainMenuBar();

  000fc	e8 00 00 00 00	 call	 ?EndMainMenuBar@ImGui@@YAXXZ ; ImGui::EndMainMenuBar
$LN2@ShowExampl:

; 6408 :     }
; 6409 : }

  00101	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00108	5f		 pop	 rdi
  00109	5d		 pop	 rbp
  0010a	c3		 ret	 0
?ShowExampleAppMainMenuBar@@YAXXZ ENDP			; ShowExampleAppMainMenuBar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppDocuments@@YAXPEA_N@Z
_TEXT	SEGMENT
window_contents_visible$ = 4
open_count$5 = 36
doc_n$6 = 68
doc_n$7 = 100
doc$8 = 136
doc_n$9 = 164
doc_n$10 = 196
doc$11 = 232
tab_bar_flags$12 = 260
doc_n$13 = 292
doc$14 = 328
tab_flags$15 = 356
visible$16 = 388
doc_n$17 = 420
doc$18 = 456
close_queue_unsaved_documents$19 = 484
n$20 = 516
n$21 = 548
item_height$22 = 580
n$23 = 612
button_size$24 = 648
n$25 = 676
n$26 = 708
$T27 = 1124
$T28 = 1160
tv223 = 1172
tv202 = 1172
tv159 = 1172
tv135 = 1172
tv131 = 1172
tv309 = 1176
__$ArrayPad$ = 1184
p_open$ = 1232
?ShowExampleAppDocuments@@YAXPEA_N@Z PROC		; ShowExampleAppDocuments, COMDAT

; 7806 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 04
	00 00		 sub	 rsp, 1240		; 000004d8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 36 01 00 00	 mov	 ecx, 310		; 00000136H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 f8
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1272]
  0002a	48 c7 85 88 04
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T28[rbp], -2
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 a0 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 7807 :     static ExampleAppDocuments app;

  00046	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  0004b	8b c0		 mov	 eax, eax
  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00053	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0005c	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00060	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  00063	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS0@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA, eax
  00069	7e 3a		 jle	 SHORT $LN2@ShowExampl
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA
  00072	e8 00 00 00 00	 call	 _Init_thread_header
  00077	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA, -1
  0007e	75 25		 jne	 SHORT $LN2@ShowExampl
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?app@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4UExampleAppDocuments@@A
  00087	e8 00 00 00 00	 call	 ??0ExampleAppDocuments@@QEAA@XZ ; ExampleAppDocuments::ExampleAppDocuments
  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__Fapp@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@YAXXZ ; `ShowExampleAppDocuments'::`2'::`dynamic atexit destructor for 'app''
  00093	e8 00 00 00 00	 call	 atexit
  00098	90		 npad	 1
  00099	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA
  000a0	e8 00 00 00 00	 call	 _Init_thread_footer
$LN2@ShowExampl:

; 7808 : 
; 7809 :     // Options
; 7810 :     static bool opt_reorderable = true;
; 7811 :     static ImGuiTabBarFlags opt_fitting_flags = ImGuiTabBarFlags_FittingPolicyDefault_;
; 7812 : 
; 7813 :     bool window_contents_visible = ImGui::Begin("Example: Documents", p_open, ImGuiWindowFlags_MenuBar);

  000a5	41 b8 00 04 00
	00		 mov	 r8d, 1024		; 00000400H
  000ab	48 8b 95 d0 04
	00 00		 mov	 rdx, QWORD PTR p_open$[rbp]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@BKDKPNMJ@Example?3?5Documents?$AA@
  000b9	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin
  000be	88 45 04	 mov	 BYTE PTR window_contents_visible$[rbp], al

; 7814 :     if (!window_contents_visible)

  000c1	0f b6 45 04	 movzx	 eax, BYTE PTR window_contents_visible$[rbp]
  000c5	85 c0		 test	 eax, eax
  000c7	75 0a		 jne	 SHORT $LN37@ShowExampl

; 7815 :     {
; 7816 :         ImGui::End();

  000c9	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 7817 :         return;

  000ce	e9 88 08 00 00	 jmp	 $LN1@ShowExampl
$LN37@ShowExampl:

; 7818 :     }
; 7819 : 
; 7820 :     // Menu
; 7821 :     if (ImGui::BeginMenuBar())

  000d3	e8 00 00 00 00	 call	 ?BeginMenuBar@ImGui@@YA_NXZ ; ImGui::BeginMenuBar
  000d8	0f b6 c0	 movzx	 eax, al
  000db	85 c0		 test	 eax, eax
  000dd	0f 84 da 01 00
	00		 je	 $LN38@ShowExampl

; 7822 :     {
; 7823 :         if (ImGui::BeginMenu("File"))

  000e3	b2 01		 mov	 dl, 1
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04PBAHLACE@File?$AA@
  000ec	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  000f1	0f b6 c0	 movzx	 eax, al
  000f4	85 c0		 test	 eax, eax
  000f6	0f 84 bc 01 00
	00		 je	 $LN39@ShowExampl

; 7824 :         {
; 7825 :             int open_count = 0;

  000fc	c7 45 24 00 00
	00 00		 mov	 DWORD PTR open_count$5[rbp], 0

; 7826 :             for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)

  00103	c7 45 44 00 00
	00 00		 mov	 DWORD PTR doc_n$6[rbp], 0
  0010a	eb 08		 jmp	 SHORT $LN5@ShowExampl
$LN3@ShowExampl:
  0010c	8b 45 44	 mov	 eax, DWORD PTR doc_n$6[rbp]
  0010f	ff c0		 inc	 eax
  00111	89 45 44	 mov	 DWORD PTR doc_n$6[rbp], eax
$LN5@ShowExampl:
  00114	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?app@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4UExampleAppDocuments@@A
  0011a	39 45 44	 cmp	 DWORD PTR doc_n$6[rbp], eax
  0011d	7d 3f		 jge	 SHORT $LN4@ShowExampl

; 7827 :                 open_count += app.Documents[doc_n].Open ? 1 : 0;

  0011f	8b 55 44	 mov	 edx, DWORD PTR doc_n$6[rbp]
  00122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?app@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4UExampleAppDocuments@@A
  00129	e8 00 00 00 00	 call	 ??A?$ImVector@UMyDocument@@@@QEAAAEAUMyDocument@@H@Z ; ImVector<MyDocument>::operator[]
  0012e	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00132	85 c0		 test	 eax, eax
  00134	74 0c		 je	 SHORT $LN68@ShowExampl
  00136	c7 85 94 04 00
	00 01 00 00 00	 mov	 DWORD PTR tv131[rbp], 1
  00140	eb 0a		 jmp	 SHORT $LN69@ShowExampl
$LN68@ShowExampl:
  00142	c7 85 94 04 00
	00 00 00 00 00	 mov	 DWORD PTR tv131[rbp], 0
$LN69@ShowExampl:
  0014c	8b 85 94 04 00
	00		 mov	 eax, DWORD PTR tv131[rbp]
  00152	8b 4d 24	 mov	 ecx, DWORD PTR open_count$5[rbp]
  00155	03 c8		 add	 ecx, eax
  00157	8b c1		 mov	 eax, ecx
  00159	89 45 24	 mov	 DWORD PTR open_count$5[rbp], eax
  0015c	eb ae		 jmp	 SHORT $LN3@ShowExampl
$LN4@ShowExampl:

; 7828 : 
; 7829 :             if (ImGui::BeginMenu("Open", open_count < app.Documents.Size))

  0015e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?app@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4UExampleAppDocuments@@A
  00164	39 45 24	 cmp	 DWORD PTR open_count$5[rbp], eax
  00167	7d 09		 jge	 SHORT $LN70@ShowExampl
  00169	c6 85 94 04 00
	00 01		 mov	 BYTE PTR tv135[rbp], 1
  00170	eb 07		 jmp	 SHORT $LN71@ShowExampl
$LN70@ShowExampl:
  00172	c6 85 94 04 00
	00 00		 mov	 BYTE PTR tv135[rbp], 0
$LN71@ShowExampl:
  00179	0f b6 95 94 04
	00 00		 movzx	 edx, BYTE PTR tv135[rbp]
  00180	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04DNCDCIAE@Open?$AA@
  00187	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  0018c	0f b6 c0	 movzx	 eax, al
  0018f	85 c0		 test	 eax, eax
  00191	74 72		 je	 SHORT $LN40@ShowExampl

; 7830 :             {
; 7831 :                 for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)

  00193	c7 45 64 00 00
	00 00		 mov	 DWORD PTR doc_n$7[rbp], 0
  0019a	eb 08		 jmp	 SHORT $LN8@ShowExampl
$LN6@ShowExampl:
  0019c	8b 45 64	 mov	 eax, DWORD PTR doc_n$7[rbp]
  0019f	ff c0		 inc	 eax
  001a1	89 45 64	 mov	 DWORD PTR doc_n$7[rbp], eax
$LN8@ShowExampl:
  001a4	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?app@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4UExampleAppDocuments@@A
  001aa	39 45 64	 cmp	 DWORD PTR doc_n$7[rbp], eax
  001ad	7d 51		 jge	 SHORT $LN7@ShowExampl

; 7832 :                 {
; 7833 :                     MyDocument* doc = &app.Documents[doc_n];

  001af	8b 55 64	 mov	 edx, DWORD PTR doc_n$7[rbp]
  001b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?app@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4UExampleAppDocuments@@A
  001b9	e8 00 00 00 00	 call	 ??A?$ImVector@UMyDocument@@@@QEAAAEAUMyDocument@@H@Z ; ImVector<MyDocument>::operator[]
  001be	48 89 85 88 00
	00 00		 mov	 QWORD PTR doc$8[rbp], rax

; 7834 :                     if (!doc->Open)

  001c5	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR doc$8[rbp]
  001cc	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  001d0	85 c0		 test	 eax, eax
  001d2	75 2a		 jne	 SHORT $LN41@ShowExampl

; 7835 :                         if (ImGui::MenuItem(doc->Name))

  001d4	41 b1 01	 mov	 r9b, 1
  001d7	45 33 c0	 xor	 r8d, r8d
  001da	33 d2		 xor	 edx, edx
  001dc	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR doc$8[rbp]
  001e3	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  001e6	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  001eb	0f b6 c0	 movzx	 eax, al
  001ee	85 c0		 test	 eax, eax
  001f0	74 0c		 je	 SHORT $LN41@ShowExampl

; 7836 :                             doc->DoOpen();

  001f2	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR doc$8[rbp]
  001f9	e8 00 00 00 00	 call	 ?DoOpen@MyDocument@@QEAAXXZ ; MyDocument::DoOpen
$LN41@ShowExampl:

; 7837 :                 }

  001fe	eb 9c		 jmp	 SHORT $LN6@ShowExampl
$LN7@ShowExampl:

; 7838 :                 ImGui::EndMenu();

  00200	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN40@ShowExampl:

; 7839 :             }
; 7840 :             if (ImGui::MenuItem("Close All Documents", NULL, false, open_count > 0))

  00205	83 7d 24 00	 cmp	 DWORD PTR open_count$5[rbp], 0
  00209	7e 09		 jle	 SHORT $LN72@ShowExampl
  0020b	c6 85 94 04 00
	00 01		 mov	 BYTE PTR tv159[rbp], 1
  00212	eb 07		 jmp	 SHORT $LN73@ShowExampl
$LN72@ShowExampl:
  00214	c6 85 94 04 00
	00 00		 mov	 BYTE PTR tv159[rbp], 0
$LN73@ShowExampl:
  0021b	44 0f b6 8d 94
	04 00 00	 movzx	 r9d, BYTE PTR tv159[rbp]
  00223	45 33 c0	 xor	 r8d, r8d
  00226	33 d2		 xor	 edx, edx
  00228	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@HCFGHAAC@Close?5All?5Documents?$AA@
  0022f	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  00234	0f b6 c0	 movzx	 eax, al
  00237	85 c0		 test	 eax, eax
  00239	74 44		 je	 SHORT $LN43@ShowExampl

; 7841 :                 for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)

  0023b	c7 85 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR doc_n$9[rbp], 0
  00245	eb 0e		 jmp	 SHORT $LN11@ShowExampl
$LN9@ShowExampl:
  00247	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR doc_n$9[rbp]
  0024d	ff c0		 inc	 eax
  0024f	89 85 a4 00 00
	00		 mov	 DWORD PTR doc_n$9[rbp], eax
$LN11@ShowExampl:
  00255	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?app@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4UExampleAppDocuments@@A
  0025b	39 85 a4 00 00
	00		 cmp	 DWORD PTR doc_n$9[rbp], eax
  00261	7d 1c		 jge	 SHORT $LN43@ShowExampl

; 7842 :                     app.Documents[doc_n].DoQueueClose();

  00263	8b 95 a4 00 00
	00		 mov	 edx, DWORD PTR doc_n$9[rbp]
  00269	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?app@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4UExampleAppDocuments@@A
  00270	e8 00 00 00 00	 call	 ??A?$ImVector@UMyDocument@@@@QEAAAEAUMyDocument@@H@Z ; ImVector<MyDocument>::operator[]
  00275	48 8b c8	 mov	 rcx, rax
  00278	e8 00 00 00 00	 call	 ?DoQueueClose@MyDocument@@QEAAXXZ ; MyDocument::DoQueueClose
  0027d	eb c8		 jmp	 SHORT $LN9@ShowExampl
$LN43@ShowExampl:

; 7843 :             if (ImGui::MenuItem("Exit", "Ctrl+F4") && p_open)

  0027f	41 b1 01	 mov	 r9b, 1
  00282	45 33 c0	 xor	 r8d, r8d
  00285	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07IHMOANJM@Ctrl?$CLF4?$AA@
  0028c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LBABLPF@Exit?$AA@
  00293	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0_N1@Z ; ImGui::MenuItem
  00298	0f b6 c0	 movzx	 eax, al
  0029b	85 c0		 test	 eax, eax
  0029d	74 14		 je	 SHORT $LN44@ShowExampl
  0029f	48 83 bd d0 04
	00 00 00	 cmp	 QWORD PTR p_open$[rbp], 0
  002a7	74 0a		 je	 SHORT $LN44@ShowExampl

; 7844 :                 *p_open = false;

  002a9	48 8b 85 d0 04
	00 00		 mov	 rax, QWORD PTR p_open$[rbp]
  002b0	c6 00 00	 mov	 BYTE PTR [rax], 0
$LN44@ShowExampl:

; 7845 :             ImGui::EndMenu();

  002b3	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN39@ShowExampl:

; 7846 :         }
; 7847 :         ImGui::EndMenuBar();

  002b8	e8 00 00 00 00	 call	 ?EndMenuBar@ImGui@@YAXXZ ; ImGui::EndMenuBar
$LN38@ShowExampl:

; 7848 :     }
; 7849 : 
; 7850 :     // [Debug] List documents with one checkbox for each
; 7851 :     for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)

  002bd	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR doc_n$10[rbp], 0
  002c7	eb 0e		 jmp	 SHORT $LN14@ShowExampl
$LN12@ShowExampl:
  002c9	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR doc_n$10[rbp]
  002cf	ff c0		 inc	 eax
  002d1	89 85 c4 00 00
	00		 mov	 DWORD PTR doc_n$10[rbp], eax
$LN14@ShowExampl:
  002d7	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?app@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4UExampleAppDocuments@@A
  002dd	39 85 c4 00 00
	00		 cmp	 DWORD PTR doc_n$10[rbp], eax
  002e3	0f 8d 87 00 00
	00		 jge	 $LN13@ShowExampl

; 7852 :     {
; 7853 :         MyDocument* doc = &app.Documents[doc_n];

  002e9	8b 95 c4 00 00
	00		 mov	 edx, DWORD PTR doc_n$10[rbp]
  002ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?app@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4UExampleAppDocuments@@A
  002f6	e8 00 00 00 00	 call	 ??A?$ImVector@UMyDocument@@@@QEAAAEAUMyDocument@@H@Z ; ImVector<MyDocument>::operator[]
  002fb	48 89 85 e8 00
	00 00		 mov	 QWORD PTR doc$11[rbp], rax

; 7854 :         if (doc_n > 0)

  00302	83 bd c4 00 00
	00 00		 cmp	 DWORD PTR doc_n$10[rbp], 0
  00309	7e 10		 jle	 SHORT $LN45@ShowExampl

; 7855 :             ImGui::SameLine();

  0030b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00313	0f 57 c0	 xorps	 xmm0, xmm0
  00316	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
$LN45@ShowExampl:

; 7856 :         ImGui::PushID(doc);

  0031b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR doc$11[rbp]
  00322	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPEBX@Z ; ImGui::PushID

; 7857 :         if (ImGui::Checkbox(doc->Name, &doc->Open))

  00327	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR doc$11[rbp]
  0032e	48 83 c0 08	 add	 rax, 8
  00332	48 8b d0	 mov	 rdx, rax
  00335	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR doc$11[rbp]
  0033c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0033f	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox
  00344	0f b6 c0	 movzx	 eax, al
  00347	85 c0		 test	 eax, eax
  00349	74 1b		 je	 SHORT $LN46@ShowExampl

; 7858 :             if (!doc->Open)

  0034b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR doc$11[rbp]
  00352	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00356	85 c0		 test	 eax, eax
  00358	75 0c		 jne	 SHORT $LN46@ShowExampl

; 7859 :                 doc->DoForceClose();

  0035a	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR doc$11[rbp]
  00361	e8 00 00 00 00	 call	 ?DoForceClose@MyDocument@@QEAAXXZ ; MyDocument::DoForceClose
$LN46@ShowExampl:

; 7860 :         ImGui::PopID();

  00366	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 7861 :     }

  0036b	e9 59 ff ff ff	 jmp	 $LN12@ShowExampl
$LN13@ShowExampl:

; 7862 : 
; 7863 :     ImGui::Separator();

  00370	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 7864 : 
; 7865 :     // About the ImGuiWindowFlags_UnsavedDocument / ImGuiTabItemFlags_UnsavedDocument flags.
; 7866 :     // They have multiple effects:
; 7867 :     // - Display a dot next to the title.
; 7868 :     // - Tab is selected when clicking the X close button.
; 7869 :     // - Closure is not assumed (will wait for user to stop submitting the tab).
; 7870 :     //   Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.
; 7871 :     //   We need to assume closure by default otherwise waiting for "lack of submission" on the next frame would leave an empty
; 7872 :     //   hole for one-frame, both in the tab-bar and in tab-contents when closing a tab/window.
; 7873 :     //   The rarely used SetTabItemClosed() function is a way to notify of programmatic closure to avoid the one-frame hole.
; 7874 : 
; 7875 :     // Submit Tab Bar and Tabs
; 7876 :     {
; 7877 :         ImGuiTabBarFlags tab_bar_flags = (opt_fitting_flags) | (opt_reorderable ? ImGuiTabBarFlags_Reorderable : 0);

  00375	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?opt_reorderable@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4_NA
  0037c	85 c0		 test	 eax, eax
  0037e	74 0c		 je	 SHORT $LN74@ShowExampl
  00380	c7 85 94 04 00
	00 01 00 00 00	 mov	 DWORD PTR tv202[rbp], 1
  0038a	eb 0a		 jmp	 SHORT $LN75@ShowExampl
$LN74@ShowExampl:
  0038c	c7 85 94 04 00
	00 00 00 00 00	 mov	 DWORD PTR tv202[rbp], 0
$LN75@ShowExampl:
  00396	8b 85 94 04 00
	00		 mov	 eax, DWORD PTR tv202[rbp]
  0039c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?opt_fitting_flags@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA
  003a2	0b c8		 or	 ecx, eax
  003a4	8b c1		 mov	 eax, ecx
  003a6	89 85 04 01 00
	00		 mov	 DWORD PTR tab_bar_flags$12[rbp], eax

; 7878 :         if (ImGui::BeginTabBar("##tabs", tab_bar_flags))

  003ac	8b 95 04 01 00
	00		 mov	 edx, DWORD PTR tab_bar_flags$12[rbp]
  003b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06NNHHJHAK@?$CD?$CDtabs?$AA@
  003b9	e8 00 00 00 00	 call	 ?BeginTabBar@ImGui@@YA_NPEBDH@Z ; ImGui::BeginTabBar
  003be	0f b6 c0	 movzx	 eax, al
  003c1	85 c0		 test	 eax, eax
  003c3	0f 84 2f 01 00
	00		 je	 $LN48@ShowExampl

; 7879 :         {
; 7880 :             if (opt_reorderable)

  003c9	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?opt_reorderable@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4_NA
  003d0	85 c0		 test	 eax, eax
  003d2	74 0c		 je	 SHORT $LN49@ShowExampl

; 7881 :                 NotifyOfDocumentsClosedElsewhere(app);

  003d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?app@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4UExampleAppDocuments@@A
  003db	e8 00 00 00 00	 call	 ?NotifyOfDocumentsClosedElsewhere@@YAXAEAUExampleAppDocuments@@@Z ; NotifyOfDocumentsClosedElsewhere
$LN49@ShowExampl:

; 7882 : 
; 7883 :             // [DEBUG] Stress tests
; 7884 :             //if ((ImGui::GetFrameCount() % 30) == 0) docs[1].Open ^= 1;            // [DEBUG] Automatically show/hide a tab. Test various interactions e.g. dragging with this on.
; 7885 :             //if (ImGui::GetIO().KeyCtrl) ImGui::SetTabItemSelected(docs[1].Name);  // [DEBUG] Test SetTabItemSelected(), probably not very useful as-is anyway..
; 7886 : 
; 7887 :             // Submit Tabs
; 7888 :             for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)

  003e0	c7 85 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR doc_n$13[rbp], 0
  003ea	eb 0e		 jmp	 SHORT $LN17@ShowExampl
$LN15@ShowExampl:
  003ec	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR doc_n$13[rbp]
  003f2	ff c0		 inc	 eax
  003f4	89 85 24 01 00
	00		 mov	 DWORD PTR doc_n$13[rbp], eax
$LN17@ShowExampl:
  003fa	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?app@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4UExampleAppDocuments@@A
  00400	39 85 24 01 00
	00		 cmp	 DWORD PTR doc_n$13[rbp], eax
  00406	0f 8d e7 00 00
	00		 jge	 $LN16@ShowExampl

; 7889 :             {
; 7890 :                 MyDocument* doc = &app.Documents[doc_n];

  0040c	8b 95 24 01 00
	00		 mov	 edx, DWORD PTR doc_n$13[rbp]
  00412	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?app@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4UExampleAppDocuments@@A
  00419	e8 00 00 00 00	 call	 ??A?$ImVector@UMyDocument@@@@QEAAAEAUMyDocument@@H@Z ; ImVector<MyDocument>::operator[]
  0041e	48 89 85 48 01
	00 00		 mov	 QWORD PTR doc$14[rbp], rax

; 7891 :                 if (!doc->Open)

  00425	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR doc$14[rbp]
  0042c	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00430	85 c0		 test	 eax, eax
  00432	75 02		 jne	 SHORT $LN50@ShowExampl

; 7892 :                     continue;

  00434	eb b6		 jmp	 SHORT $LN15@ShowExampl
$LN50@ShowExampl:

; 7893 : 
; 7894 :                 ImGuiTabItemFlags tab_flags = (doc->Dirty ? ImGuiTabItemFlags_UnsavedDocument : 0);

  00436	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR doc$14[rbp]
  0043d	0f b6 40 0a	 movzx	 eax, BYTE PTR [rax+10]
  00441	85 c0		 test	 eax, eax
  00443	74 0c		 je	 SHORT $LN76@ShowExampl
  00445	c7 85 94 04 00
	00 01 00 00 00	 mov	 DWORD PTR tv223[rbp], 1
  0044f	eb 0a		 jmp	 SHORT $LN77@ShowExampl
$LN76@ShowExampl:
  00451	c7 85 94 04 00
	00 00 00 00 00	 mov	 DWORD PTR tv223[rbp], 0
$LN77@ShowExampl:
  0045b	8b 85 94 04 00
	00		 mov	 eax, DWORD PTR tv223[rbp]
  00461	89 85 64 01 00
	00		 mov	 DWORD PTR tab_flags$15[rbp], eax

; 7895 :                 bool visible = ImGui::BeginTabItem(doc->Name, &doc->Open, tab_flags);

  00467	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR doc$14[rbp]
  0046e	48 83 c0 08	 add	 rax, 8
  00472	44 8b 85 64 01
	00 00		 mov	 r8d, DWORD PTR tab_flags$15[rbp]
  00479	48 8b d0	 mov	 rdx, rax
  0047c	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR doc$14[rbp]
  00483	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00486	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginTabItem
  0048b	88 85 84 01 00
	00		 mov	 BYTE PTR visible$16[rbp], al

; 7896 : 
; 7897 :                 // Cancel attempt to close when unsaved add to save queue so we can display a popup.
; 7898 :                 if (!doc->Open && doc->Dirty)

  00491	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR doc$14[rbp]
  00498	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  0049c	85 c0		 test	 eax, eax
  0049e	75 26		 jne	 SHORT $LN51@ShowExampl
  004a0	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR doc$14[rbp]
  004a7	0f b6 40 0a	 movzx	 eax, BYTE PTR [rax+10]
  004ab	85 c0		 test	 eax, eax
  004ad	74 17		 je	 SHORT $LN51@ShowExampl

; 7899 :                 {
; 7900 :                     doc->Open = true;

  004af	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR doc$14[rbp]
  004b6	c6 40 08 01	 mov	 BYTE PTR [rax+8], 1

; 7901 :                     doc->DoQueueClose();

  004ba	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR doc$14[rbp]
  004c1	e8 00 00 00 00	 call	 ?DoQueueClose@MyDocument@@QEAAXXZ ; MyDocument::DoQueueClose
$LN51@ShowExampl:

; 7902 :                 }
; 7903 : 
; 7904 :                 MyDocument::DisplayContextMenu(doc);

  004c6	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR doc$14[rbp]
  004cd	e8 00 00 00 00	 call	 ?DisplayContextMenu@MyDocument@@SAXPEAU1@@Z ; MyDocument::DisplayContextMenu

; 7905 :                 if (visible)

  004d2	0f b6 85 84 01
	00 00		 movzx	 eax, BYTE PTR visible$16[rbp]
  004d9	85 c0		 test	 eax, eax
  004db	74 11		 je	 SHORT $LN52@ShowExampl

; 7906 :                 {
; 7907 :                     MyDocument::DisplayContents(doc);

  004dd	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR doc$14[rbp]
  004e4	e8 00 00 00 00	 call	 ?DisplayContents@MyDocument@@SAXPEAU1@@Z ; MyDocument::DisplayContents

; 7908 :                     ImGui::EndTabItem();

  004e9	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN52@ShowExampl:

; 7909 :                 }
; 7910 :             }

  004ee	e9 f9 fe ff ff	 jmp	 $LN15@ShowExampl
$LN16@ShowExampl:

; 7911 : 
; 7912 :             ImGui::EndTabBar();

  004f3	e8 00 00 00 00	 call	 ?EndTabBar@ImGui@@YAXXZ	; ImGui::EndTabBar
$LN48@ShowExampl:

; 7913 :         }
; 7914 :     }
; 7915 : 
; 7916 :     // Update closing queue
; 7917 :     static ImVector<MyDocument*> close_queue;

  004f8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  004fd	8b c0		 mov	 eax, eax
  004ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00505	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0050e	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00512	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  00515	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS1@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA, eax
  0051b	7e 3a		 jle	 SHORT $LN18@ShowExampl
  0051d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA
  00524	e8 00 00 00 00	 call	 _Init_thread_header
  00529	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS1@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA, -1
  00530	75 25		 jne	 SHORT $LN18@ShowExampl
  00532	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  00539	e8 00 00 00 00	 call	 ??0?$ImVector@PEAUMyDocument@@@@QEAA@XZ ; ImVector<MyDocument * __ptr64>::ImVector<MyDocument * __ptr64>
  0053e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__Fclose_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@YAXXZ ; `ShowExampleAppDocuments'::`2'::`dynamic atexit destructor for 'close_queue''
  00545	e8 00 00 00 00	 call	 atexit
  0054a	90		 npad	 1
  0054b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA
  00552	e8 00 00 00 00	 call	 _Init_thread_footer
$LN18@ShowExampl:

; 7918 :     if (close_queue.empty())

  00557	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  0055e	e8 00 00 00 00	 call	 ?empty@?$ImVector@PEAUMyDocument@@@@QEBA_NXZ ; ImVector<MyDocument * __ptr64>::empty
  00563	0f b6 c0	 movzx	 eax, al
  00566	85 c0		 test	 eax, eax
  00568	74 70		 je	 SHORT $LN53@ShowExampl

; 7919 :     {
; 7920 :         // Close queue is locked once we started a popup
; 7921 :         for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)

  0056a	c7 85 a4 01 00
	00 00 00 00 00	 mov	 DWORD PTR doc_n$17[rbp], 0
  00574	eb 0e		 jmp	 SHORT $LN21@ShowExampl
$LN19@ShowExampl:
  00576	8b 85 a4 01 00
	00		 mov	 eax, DWORD PTR doc_n$17[rbp]
  0057c	ff c0		 inc	 eax
  0057e	89 85 a4 01 00
	00		 mov	 DWORD PTR doc_n$17[rbp], eax
$LN21@ShowExampl:
  00584	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?app@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4UExampleAppDocuments@@A
  0058a	39 85 a4 01 00
	00		 cmp	 DWORD PTR doc_n$17[rbp], eax
  00590	7d 48		 jge	 SHORT $LN53@ShowExampl

; 7922 :         {
; 7923 :             MyDocument* doc = &app.Documents[doc_n];

  00592	8b 95 a4 01 00
	00		 mov	 edx, DWORD PTR doc_n$17[rbp]
  00598	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?app@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4UExampleAppDocuments@@A
  0059f	e8 00 00 00 00	 call	 ??A?$ImVector@UMyDocument@@@@QEAAAEAUMyDocument@@H@Z ; ImVector<MyDocument>::operator[]
  005a4	48 89 85 c8 01
	00 00		 mov	 QWORD PTR doc$18[rbp], rax

; 7924 :             if (doc->WantClose)

  005ab	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR doc$18[rbp]
  005b2	0f b6 40 0b	 movzx	 eax, BYTE PTR [rax+11]
  005b6	85 c0		 test	 eax, eax
  005b8	74 1e		 je	 SHORT $LN54@ShowExampl

; 7925 :             {
; 7926 :                 doc->WantClose = false;

  005ba	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR doc$18[rbp]
  005c1	c6 40 0b 00	 mov	 BYTE PTR [rax+11], 0

; 7927 :                 close_queue.push_back(doc);

  005c5	48 8d 95 c8 01
	00 00		 lea	 rdx, QWORD PTR doc$18[rbp]
  005cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  005d3	e8 00 00 00 00	 call	 ?push_back@?$ImVector@PEAUMyDocument@@@@QEAAXAEBQEAUMyDocument@@@Z ; ImVector<MyDocument * __ptr64>::push_back
$LN54@ShowExampl:

; 7928 :             }
; 7929 :         }

  005d8	eb 9c		 jmp	 SHORT $LN19@ShowExampl
$LN53@ShowExampl:

; 7930 :     }
; 7931 : 
; 7932 :     // Display closing confirmation UI
; 7933 :     if (!close_queue.empty())

  005da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  005e1	e8 00 00 00 00	 call	 ?empty@?$ImVector@PEAUMyDocument@@@@QEBA_NXZ ; ImVector<MyDocument * __ptr64>::empty
  005e6	0f b6 c0	 movzx	 eax, al
  005e9	85 c0		 test	 eax, eax
  005eb	0f 85 65 03 00
	00		 jne	 $LN55@ShowExampl

; 7934 :     {
; 7935 :         int close_queue_unsaved_documents = 0;

  005f1	c7 85 e4 01 00
	00 00 00 00 00	 mov	 DWORD PTR close_queue_unsaved_documents$19[rbp], 0

; 7936 :         for (int n = 0; n < close_queue.Size; n++)

  005fb	c7 85 04 02 00
	00 00 00 00 00	 mov	 DWORD PTR n$20[rbp], 0
  00605	eb 0e		 jmp	 SHORT $LN24@ShowExampl
$LN22@ShowExampl:
  00607	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR n$20[rbp]
  0060d	ff c0		 inc	 eax
  0060f	89 85 04 02 00
	00		 mov	 DWORD PTR n$20[rbp], eax
$LN24@ShowExampl:
  00615	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  0061b	39 85 04 02 00
	00		 cmp	 DWORD PTR n$20[rbp], eax
  00621	7d 2d		 jge	 SHORT $LN23@ShowExampl

; 7937 :             if (close_queue[n]->Dirty)

  00623	8b 95 04 02 00
	00		 mov	 edx, DWORD PTR n$20[rbp]
  00629	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  00630	e8 00 00 00 00	 call	 ??A?$ImVector@PEAUMyDocument@@@@QEAAAEAPEAUMyDocument@@H@Z ; ImVector<MyDocument * __ptr64>::operator[]
  00635	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00638	0f b6 40 0a	 movzx	 eax, BYTE PTR [rax+10]
  0063c	85 c0		 test	 eax, eax
  0063e	74 0e		 je	 SHORT $LN56@ShowExampl

; 7938 :                 close_queue_unsaved_documents++;

  00640	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR close_queue_unsaved_documents$19[rbp]
  00646	ff c0		 inc	 eax
  00648	89 85 e4 01 00
	00		 mov	 DWORD PTR close_queue_unsaved_documents$19[rbp], eax
$LN56@ShowExampl:

; 7939 : 
; 7940 :         if (close_queue_unsaved_documents == 0)

  0064e	eb b7		 jmp	 SHORT $LN22@ShowExampl
$LN23@ShowExampl:
  00650	83 bd e4 01 00
	00 00		 cmp	 DWORD PTR close_queue_unsaved_documents$19[rbp], 0
  00657	75 55		 jne	 SHORT $LN57@ShowExampl

; 7941 :         {
; 7942 :             // Close documents when all are unsaved
; 7943 :             for (int n = 0; n < close_queue.Size; n++)

  00659	c7 85 24 02 00
	00 00 00 00 00	 mov	 DWORD PTR n$21[rbp], 0
  00663	eb 0e		 jmp	 SHORT $LN27@ShowExampl
$LN25@ShowExampl:
  00665	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR n$21[rbp]
  0066b	ff c0		 inc	 eax
  0066d	89 85 24 02 00
	00		 mov	 DWORD PTR n$21[rbp], eax
$LN27@ShowExampl:
  00673	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  00679	39 85 24 02 00
	00		 cmp	 DWORD PTR n$21[rbp], eax
  0067f	7d 1c		 jge	 SHORT $LN26@ShowExampl

; 7944 :                 close_queue[n]->DoForceClose();

  00681	8b 95 24 02 00
	00		 mov	 edx, DWORD PTR n$21[rbp]
  00687	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  0068e	e8 00 00 00 00	 call	 ??A?$ImVector@PEAUMyDocument@@@@QEAAAEAPEAUMyDocument@@H@Z ; ImVector<MyDocument * __ptr64>::operator[]
  00693	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00696	e8 00 00 00 00	 call	 ?DoForceClose@MyDocument@@QEAAXXZ ; MyDocument::DoForceClose
  0069b	eb c8		 jmp	 SHORT $LN25@ShowExampl
$LN26@ShowExampl:

; 7945 :             close_queue.clear();

  0069d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  006a4	e8 00 00 00 00	 call	 ?clear@?$ImVector@PEAUMyDocument@@@@QEAAXXZ ; ImVector<MyDocument * __ptr64>::clear

; 7946 :         }
; 7947 :         else

  006a9	e9 a8 02 00 00	 jmp	 $LN55@ShowExampl
$LN57@ShowExampl:

; 7948 :         {
; 7949 :             if (!ImGui::IsPopupOpen("Save?"))

  006ae	33 d2		 xor	 edx, edx
  006b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05DIODKGEP@Save?$DP?$AA@
  006b7	e8 00 00 00 00	 call	 ?IsPopupOpen@ImGui@@YA_NPEBDH@Z ; ImGui::IsPopupOpen
  006bc	0f b6 c0	 movzx	 eax, al
  006bf	85 c0		 test	 eax, eax
  006c1	75 0e		 jne	 SHORT $LN59@ShowExampl

; 7950 :                 ImGui::OpenPopup("Save?");

  006c3	33 d2		 xor	 edx, edx
  006c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05DIODKGEP@Save?$DP?$AA@
  006cc	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPEBDH@Z ; ImGui::OpenPopup
$LN59@ShowExampl:

; 7951 :             if (ImGui::BeginPopupModal("Save?", NULL, ImGuiWindowFlags_AlwaysAutoResize))

  006d1	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  006d7	33 d2		 xor	 edx, edx
  006d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05DIODKGEP@Save?$DP?$AA@
  006e0	e8 00 00 00 00	 call	 ?BeginPopupModal@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginPopupModal
  006e5	0f b6 c0	 movzx	 eax, al
  006e8	85 c0		 test	 eax, eax
  006ea	0f 84 66 02 00
	00		 je	 $LN55@ShowExampl

; 7952 :             {
; 7953 :                 ImGui::Text("Save change to the following items?");

  006f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@FLCNDGLJ@Save?5change?5to?5the?5following?5ite@
  006f7	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 7954 :                 float item_height = ImGui::GetTextLineHeightWithSpacing();

  006fc	e8 00 00 00 00	 call	 ?GetTextLineHeightWithSpacing@ImGui@@YAMXZ ; ImGui::GetTextLineHeightWithSpacing
  00701	f3 0f 11 85 44
	02 00 00	 movss	 DWORD PTR item_height$22[rbp], xmm0

; 7955 :                 if (ImGui::BeginChildFrame(ImGui::GetID("frame"), ImVec2(-FLT_MIN, 6.25f * item_height)))

  00709	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c80000
  00711	f3 0f 59 85 44
	02 00 00	 mulss	 xmm0, DWORD PTR item_height$22[rbp]
  00719	0f 28 d0	 movaps	 xmm2, xmm0
  0071c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@80800000
  00724	48 8d 8d 64 04
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  0072b	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00730	48 89 85 98 04
	00 00		 mov	 QWORD PTR tv309[rbp], rax
  00737	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05MIJNFGED@frame?$AA@
  0073e	e8 00 00 00 00	 call	 ?GetID@ImGui@@YAIPEBD@Z	; ImGui::GetID
  00743	45 33 c0	 xor	 r8d, r8d
  00746	48 8b 8d 98 04
	00 00		 mov	 rcx, QWORD PTR tv309[rbp]
  0074d	48 8b d1	 mov	 rdx, rcx
  00750	8b c8		 mov	 ecx, eax
  00752	e8 00 00 00 00	 call	 ?BeginChildFrame@ImGui@@YA_NIAEBUImVec2@@H@Z ; ImGui::BeginChildFrame
  00757	0f b6 c0	 movzx	 eax, al
  0075a	85 c0		 test	 eax, eax
  0075c	74 70		 je	 SHORT $LN61@ShowExampl

; 7956 :                 {
; 7957 :                     for (int n = 0; n < close_queue.Size; n++)

  0075e	c7 85 64 02 00
	00 00 00 00 00	 mov	 DWORD PTR n$23[rbp], 0
  00768	eb 0e		 jmp	 SHORT $LN30@ShowExampl
$LN28@ShowExampl:
  0076a	8b 85 64 02 00
	00		 mov	 eax, DWORD PTR n$23[rbp]
  00770	ff c0		 inc	 eax
  00772	89 85 64 02 00
	00		 mov	 DWORD PTR n$23[rbp], eax
$LN30@ShowExampl:
  00778	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  0077e	39 85 64 02 00
	00		 cmp	 DWORD PTR n$23[rbp], eax
  00784	7d 43		 jge	 SHORT $LN29@ShowExampl

; 7958 :                         if (close_queue[n]->Dirty)

  00786	8b 95 64 02 00
	00		 mov	 edx, DWORD PTR n$23[rbp]
  0078c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  00793	e8 00 00 00 00	 call	 ??A?$ImVector@PEAUMyDocument@@@@QEAAAEAPEAUMyDocument@@H@Z ; ImVector<MyDocument * __ptr64>::operator[]
  00798	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0079b	0f b6 40 0a	 movzx	 eax, BYTE PTR [rax+10]
  0079f	85 c0		 test	 eax, eax
  007a1	74 24		 je	 SHORT $LN62@ShowExampl

; 7959 :                             ImGui::Text("%s", close_queue[n]->Name);

  007a3	8b 95 64 02 00
	00		 mov	 edx, DWORD PTR n$23[rbp]
  007a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  007b0	e8 00 00 00 00	 call	 ??A?$ImVector@PEAUMyDocument@@@@QEAAAEAPEAUMyDocument@@H@Z ; ImVector<MyDocument * __ptr64>::operator[]
  007b5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  007b8	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  007bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs?$AA@
  007c2	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN62@ShowExampl:

; 7960 :                     ImGui::EndChildFrame();

  007c7	eb a1		 jmp	 SHORT $LN28@ShowExampl
$LN29@ShowExampl:
  007c9	e8 00 00 00 00	 call	 ?EndChildFrame@ImGui@@YAXXZ ; ImGui::EndChildFrame
$LN61@ShowExampl:

; 7961 :                 }
; 7962 : 
; 7963 :                 ImVec2 button_size(ImGui::GetFontSize() * 7.0f, 0.0f);

  007ce	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  007d3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40e00000
  007db	0f 57 d2	 xorps	 xmm2, xmm2
  007de	0f 28 c8	 movaps	 xmm1, xmm0
  007e1	48 8d 8d 88 02
	00 00		 lea	 rcx, QWORD PTR button_size$24[rbp]
  007e8	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 7964 :                 if (ImGui::Button("Yes", button_size))

  007ed	48 8d 95 88 02
	00 00		 lea	 rdx, QWORD PTR button_size$24[rbp]
  007f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03CCLAEDDF@Yes?$AA@
  007fb	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00800	0f b6 c0	 movzx	 eax, al
  00803	85 c0		 test	 eax, eax
  00805	0f 84 8c 00 00
	00		 je	 $LN63@ShowExampl

; 7965 :                 {
; 7966 :                     for (int n = 0; n < close_queue.Size; n++)

  0080b	c7 85 a4 02 00
	00 00 00 00 00	 mov	 DWORD PTR n$25[rbp], 0
  00815	eb 0e		 jmp	 SHORT $LN33@ShowExampl
$LN31@ShowExampl:
  00817	8b 85 a4 02 00
	00		 mov	 eax, DWORD PTR n$25[rbp]
  0081d	ff c0		 inc	 eax
  0081f	89 85 a4 02 00
	00		 mov	 DWORD PTR n$25[rbp], eax
$LN33@ShowExampl:
  00825	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  0082b	39 85 a4 02 00
	00		 cmp	 DWORD PTR n$25[rbp], eax
  00831	7d 53		 jge	 SHORT $LN32@ShowExampl

; 7967 :                     {
; 7968 :                         if (close_queue[n]->Dirty)

  00833	8b 95 a4 02 00
	00		 mov	 edx, DWORD PTR n$25[rbp]
  00839	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  00840	e8 00 00 00 00	 call	 ??A?$ImVector@PEAUMyDocument@@@@QEAAAEAPEAUMyDocument@@H@Z ; ImVector<MyDocument * __ptr64>::operator[]
  00845	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00848	0f b6 40 0a	 movzx	 eax, BYTE PTR [rax+10]
  0084c	85 c0		 test	 eax, eax
  0084e	74 1a		 je	 SHORT $LN64@ShowExampl

; 7969 :                             close_queue[n]->DoSave();

  00850	8b 95 a4 02 00
	00		 mov	 edx, DWORD PTR n$25[rbp]
  00856	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  0085d	e8 00 00 00 00	 call	 ??A?$ImVector@PEAUMyDocument@@@@QEAAAEAPEAUMyDocument@@H@Z ; ImVector<MyDocument * __ptr64>::operator[]
  00862	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00865	e8 00 00 00 00	 call	 ?DoSave@MyDocument@@QEAAXXZ ; MyDocument::DoSave
$LN64@ShowExampl:

; 7970 :                         close_queue[n]->DoForceClose();

  0086a	8b 95 a4 02 00
	00		 mov	 edx, DWORD PTR n$25[rbp]
  00870	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  00877	e8 00 00 00 00	 call	 ??A?$ImVector@PEAUMyDocument@@@@QEAAAEAPEAUMyDocument@@H@Z ; ImVector<MyDocument * __ptr64>::operator[]
  0087c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0087f	e8 00 00 00 00	 call	 ?DoForceClose@MyDocument@@QEAAXXZ ; MyDocument::DoForceClose

; 7971 :                     }

  00884	eb 91		 jmp	 SHORT $LN31@ShowExampl
$LN32@ShowExampl:

; 7972 :                     close_queue.clear();

  00886	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  0088d	e8 00 00 00 00	 call	 ?clear@?$ImVector@PEAUMyDocument@@@@QEAAXXZ ; ImVector<MyDocument * __ptr64>::clear

; 7973 :                     ImGui::CloseCurrentPopup();

  00892	e8 00 00 00 00	 call	 ?CloseCurrentPopup@ImGui@@YAXXZ ; ImGui::CloseCurrentPopup
$LN63@ShowExampl:

; 7974 :                 }
; 7975 :                 ImGui::SameLine();

  00897	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0089f	0f 57 c0	 xorps	 xmm0, xmm0
  008a2	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 7976 :                 if (ImGui::Button("No", button_size))

  008a7	48 8d 95 88 02
	00 00		 lea	 rdx, QWORD PTR button_size$24[rbp]
  008ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02JINPPBEP@No?$AA@
  008b5	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  008ba	0f b6 c0	 movzx	 eax, al
  008bd	85 c0		 test	 eax, eax
  008bf	74 55		 je	 SHORT $LN65@ShowExampl

; 7977 :                 {
; 7978 :                     for (int n = 0; n < close_queue.Size; n++)

  008c1	c7 85 c4 02 00
	00 00 00 00 00	 mov	 DWORD PTR n$26[rbp], 0
  008cb	eb 0e		 jmp	 SHORT $LN36@ShowExampl
$LN34@ShowExampl:
  008cd	8b 85 c4 02 00
	00		 mov	 eax, DWORD PTR n$26[rbp]
  008d3	ff c0		 inc	 eax
  008d5	89 85 c4 02 00
	00		 mov	 DWORD PTR n$26[rbp], eax
$LN36@ShowExampl:
  008db	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  008e1	39 85 c4 02 00
	00		 cmp	 DWORD PTR n$26[rbp], eax
  008e7	7d 1c		 jge	 SHORT $LN35@ShowExampl

; 7979 :                         close_queue[n]->DoForceClose();

  008e9	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR n$26[rbp]
  008ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  008f6	e8 00 00 00 00	 call	 ??A?$ImVector@PEAUMyDocument@@@@QEAAAEAPEAUMyDocument@@H@Z ; ImVector<MyDocument * __ptr64>::operator[]
  008fb	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  008fe	e8 00 00 00 00	 call	 ?DoForceClose@MyDocument@@QEAAXXZ ; MyDocument::DoForceClose
  00903	eb c8		 jmp	 SHORT $LN34@ShowExampl
$LN35@ShowExampl:

; 7980 :                     close_queue.clear();

  00905	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  0090c	e8 00 00 00 00	 call	 ?clear@?$ImVector@PEAUMyDocument@@@@QEAAXXZ ; ImVector<MyDocument * __ptr64>::clear

; 7981 :                     ImGui::CloseCurrentPopup();

  00911	e8 00 00 00 00	 call	 ?CloseCurrentPopup@ImGui@@YAXXZ ; ImGui::CloseCurrentPopup
$LN65@ShowExampl:

; 7982 :                 }
; 7983 :                 ImGui::SameLine();

  00916	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0091e	0f 57 c0	 xorps	 xmm0, xmm0
  00921	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 7984 :                 if (ImGui::Button("Cancel", button_size))

  00926	48 8d 95 88 02
	00 00		 lea	 rdx, QWORD PTR button_size$24[rbp]
  0092d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FMBNCPDL@Cancel?$AA@
  00934	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00939	0f b6 c0	 movzx	 eax, al
  0093c	85 c0		 test	 eax, eax
  0093e	74 11		 je	 SHORT $LN66@ShowExampl

; 7985 :                 {
; 7986 :                     close_queue.clear();

  00940	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?close_queue@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4U?$ImVector@PEAUMyDocument@@@@A
  00947	e8 00 00 00 00	 call	 ?clear@?$ImVector@PEAUMyDocument@@@@QEAAXXZ ; ImVector<MyDocument * __ptr64>::clear

; 7987 :                     ImGui::CloseCurrentPopup();

  0094c	e8 00 00 00 00	 call	 ?CloseCurrentPopup@ImGui@@YAXXZ ; ImGui::CloseCurrentPopup
$LN66@ShowExampl:

; 7988 :                 }
; 7989 :                 ImGui::EndPopup();

  00951	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN55@ShowExampl:

; 7990 :             }
; 7991 :         }
; 7992 :     }
; 7993 : 
; 7994 :     ImGui::End();

  00956	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN1@ShowExampl:

; 7995 : }

  0095b	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0095f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShowExampleAppDocuments@@YAXPEA_N@Z$rtcFrameData
  00966	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0096b	48 8b 8d a0 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00972	48 33 cd	 xor	 rcx, rbp
  00975	e8 00 00 00 00	 call	 __security_check_cookie
  0097a	48 8d a5 b8 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1208]
  00981	5f		 pop	 rdi
  00982	5d		 pop	 rbp
  00983	c3		 ret	 0
?ShowExampleAppDocuments@@YAXPEA_N@Z ENDP		; ShowExampleAppDocuments
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
window_contents_visible$ = 4
open_count$5 = 36
doc_n$6 = 68
doc_n$7 = 100
doc$8 = 136
doc_n$9 = 164
doc_n$10 = 196
doc$11 = 232
tab_bar_flags$12 = 260
doc_n$13 = 292
doc$14 = 328
tab_flags$15 = 356
visible$16 = 388
doc_n$17 = 420
doc$18 = 456
close_queue_unsaved_documents$19 = 484
n$20 = 516
n$21 = 548
item_height$22 = 580
n$23 = 612
button_size$24 = 648
n$25 = 676
n$26 = 708
$T27 = 1124
$T28 = 1160
tv223 = 1172
tv202 = 1172
tv159 = 1172
tv135 = 1172
tv131 = 1172
tv309 = 1176
__$ArrayPad$ = 1184
p_open$ = 1232
?dtor$0@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA PROC ; `ShowExampleAppDocuments'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA
  0001b	e8 00 00 00 00	 call	 _Init_thread_abort
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA ENDP ; `ShowExampleAppDocuments'::`1'::dtor$0
window_contents_visible$ = 4
open_count$5 = 36
doc_n$6 = 68
doc_n$7 = 100
doc$8 = 136
doc_n$9 = 164
doc_n$10 = 196
doc$11 = 232
tab_bar_flags$12 = 260
doc_n$13 = 292
doc$14 = 328
tab_flags$15 = 356
visible$16 = 388
doc_n$17 = 420
doc$18 = 456
close_queue_unsaved_documents$19 = 484
n$20 = 516
n$21 = 548
item_height$22 = 580
n$23 = 612
button_size$24 = 648
n$25 = 676
n$26 = 708
$T27 = 1124
$T28 = 1160
tv223 = 1172
tv202 = 1172
tv159 = 1172
tv135 = 1172
tv131 = 1172
tv309 = 1176
__$ArrayPad$ = 1184
p_open$ = 1232
?dtor$1@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA PROC ; `ShowExampleAppDocuments'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA
  00042	e8 00 00 00 00	 call	 _Init_thread_abort
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?dtor$1@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA ENDP ; `ShowExampleAppDocuments'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
window_contents_visible$ = 4
open_count$5 = 36
doc_n$6 = 68
doc_n$7 = 100
doc$8 = 136
doc_n$9 = 164
doc_n$10 = 196
doc$11 = 232
tab_bar_flags$12 = 260
doc_n$13 = 292
doc$14 = 328
tab_flags$15 = 356
visible$16 = 388
doc_n$17 = 420
doc$18 = 456
close_queue_unsaved_documents$19 = 484
n$20 = 516
n$21 = 548
item_height$22 = 580
n$23 = 612
button_size$24 = 648
n$25 = 676
n$26 = 708
$T27 = 1124
$T28 = 1160
tv223 = 1172
tv202 = 1172
tv159 = 1172
tv135 = 1172
tv131 = 1172
tv309 = 1176
__$ArrayPad$ = 1184
p_open$ = 1232
?dtor$0@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA PROC ; `ShowExampleAppDocuments'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA
  0001b	e8 00 00 00 00	 call	 _Init_thread_abort
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA ENDP ; `ShowExampleAppDocuments'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
window_contents_visible$ = 4
open_count$5 = 36
doc_n$6 = 68
doc_n$7 = 100
doc$8 = 136
doc_n$9 = 164
doc_n$10 = 196
doc$11 = 232
tab_bar_flags$12 = 260
doc_n$13 = 292
doc$14 = 328
tab_flags$15 = 356
visible$16 = 388
doc_n$17 = 420
doc$18 = 456
close_queue_unsaved_documents$19 = 484
n$20 = 516
n$21 = 548
item_height$22 = 580
n$23 = 612
button_size$24 = 648
n$25 = 676
n$26 = 708
$T27 = 1124
$T28 = 1160
tv223 = 1172
tv202 = 1172
tv159 = 1172
tv135 = 1172
tv131 = 1172
tv309 = 1176
__$ArrayPad$ = 1184
p_open$ = 1232
?dtor$1@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA PROC ; `ShowExampleAppDocuments'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?1??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA
  00042	e8 00 00 00 00	 call	 _Init_thread_abort
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?dtor$1@?0??ShowExampleAppDocuments@@YAXPEA_N@Z@4HA ENDP ; `ShowExampleAppDocuments'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _snprintf
_TEXT	SEGMENT
_Result$ = 4
_ArgList$ = 40
__$ArrayPad$ = 248
_Buffer$ = 288
_BufferCount$ = 296
_Format$ = 304
_snprintf PROC						; COMDAT

; 1960 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 f8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1961 :     int _Result;
; 1962 :     va_list _ArgList;
; 1963 :     __crt_va_start(_ArgList, _Format);

  0004a	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
  0004f	48 8d 85 38 01
	00 00		 lea	 rax, QWORD PTR _Format$[rbp+8]
  00056	48 89 45 28	 mov	 QWORD PTR _ArgList$[rbp], rax

; 1964 : #pragma warning(suppress:28719)    // __WARNING_BANNED_API_USAGE
; 1965 :     _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);

  0005a	4c 8b 4d 28	 mov	 r9, QWORD PTR _ArgList$[rbp]
  0005e	4c 8b 85 30 01
	00 00		 mov	 r8, QWORD PTR _Format$[rbp]
  00065	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR _BufferCount$[rbp]
  0006c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR _Buffer$[rbp]
  00073	e8 00 00 00 00	 call	 _vsnprintf
  00078	89 45 04	 mov	 DWORD PTR _Result$[rbp], eax

; 1966 :     __crt_va_end(_ArgList);

  0007b	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR _ArgList$[rbp], 0

; 1967 :     return _Result;

  00083	8b 45 04	 mov	 eax, DWORD PTR _Result$[rbp]

; 1968 : }

  00086	8b f8		 mov	 edi, eax
  00088	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_snprintf$rtcFrameData
  00093	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00098	8b c7		 mov	 eax, edi
  0009a	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000a1	48 33 cd	 xor	 rcx, rbp
  000a4	e8 00 00 00 00	 call	 __security_check_cookie
  000a9	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000b0	5f		 pop	 rdi
  000b1	5d		 pop	 rbp
  000b2	c3		 ret	 0
_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 4
_ArgList$ = 40
__$ArrayPad$ = 248
_Buffer$ = 288
_Format$ = 296
sprintf	PROC						; COMDAT

; 1776 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 f8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);

  0004a	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
  0004f	48 8d 85 30 01
	00 00		 lea	 rax, QWORD PTR _Format$[rbp+8]
  00056	48 89 45 28	 mov	 QWORD PTR _ArgList$[rbp], rax

; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0005a	4c 8b 4d 28	 mov	 r9, QWORD PTR _ArgList$[rbp]
  0005e	45 33 c0	 xor	 r8d, r8d
  00061	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR _Format$[rbp]
  00068	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR _Buffer$[rbp]
  0006f	e8 00 00 00 00	 call	 _vsprintf_l
  00074	89 45 04	 mov	 DWORD PTR _Result$[rbp], eax

; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);

  00077	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR _ArgList$[rbp], 0

; 1787 :     return _Result;

  0007f	8b 45 04	 mov	 eax, DWORD PTR _Result$[rbp]

; 1788 : }

  00082	8b f8		 mov	 edi, eax
  00084	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:sprintf$rtcFrameData
  0008f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00094	8b c7		 mov	 eax, edi
  00096	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0009d	48 33 cd	 xor	 rcx, rbp
  000a0	e8 00 00 00 00	 call	 __security_check_cookie
  000a5	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000ac	5f		 pop	 rdi
  000ad	5d		 pop	 rbp
  000ae	c3		 ret	 0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 224
_Format$ = 232
_Locale$ = 240
_ArgList$ = 248
_vsprintf_l PROC					; COMDAT

; 1455 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00039	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR _ArgList$[rbp]
  00040	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00045	4c 8b 8d f0 00
	00 00		 mov	 r9, QWORD PTR _Locale$[rbp]
  0004c	4c 8b 85 e8 00
	00 00		 mov	 r8, QWORD PTR _Format$[rbp]
  00053	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  0005a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Buffer$[rbp]
  00061	e8 00 00 00 00	 call	 _vsnprintf_l

; 1459 :     #pragma warning(pop)
; 1460 : }

  00066	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006d	5f		 pop	 rdi
  0006e	5d		 pop	 rbp
  0006f	c3		 ret	 0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsnprintf
_TEXT	SEGMENT
_Buffer$ = 224
_BufferCount$ = 232
_Format$ = 240
_ArgList$ = 248
_vsnprintf PROC						; COMDAT

; 1405 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 1406 :     #pragma warning(push)
; 1407 :     #pragma warning(disable: 4996) // Deprecation
; 1408 :     return _vsnprintf_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00039	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR _ArgList$[rbp]
  00040	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00045	45 33 c9	 xor	 r9d, r9d
  00048	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR _Format$[rbp]
  0004f	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _BufferCount$[rbp]
  00056	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Buffer$[rbp]
  0005d	e8 00 00 00 00	 call	 _vsnprintf_l

; 1409 :     #pragma warning(pop)
; 1410 : }

  00062	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00069	5f		 pop	 rdi
  0006a	5d		 pop	 rbp
  0006b	c3		 ret	 0
_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 4
tv74 = 212
_Buffer$ = 256
_BufferCount$ = 264
_Format$ = 272
_Locale$ = 280
_ArgList$ = 288
_vsnprintf_l PROC					; COMDAT

; 1385 : {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00039	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0003e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00041	48 83 c8 01	 or	 rax, 1
  00045	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR _ArgList$[rbp]
  0004c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00051	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR _Locale$[rbp]
  00058	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0005d	4c 8b 8d 10 01
	00 00		 mov	 r9, QWORD PTR _Format$[rbp]
  00064	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR _BufferCount$[rbp]
  0006b	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR _Buffer$[rbp]
  00072	48 8b c8	 mov	 rcx, rax
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf
  0007b	89 45 04	 mov	 DWORD PTR _Result$[rbp], eax

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  0007e	83 7d 04 00	 cmp	 DWORD PTR _Result$[rbp], 0
  00082	7d 0c		 jge	 SHORT $LN3@vsnprintf_
  00084	c7 85 d4 00 00
	00 ff ff ff ff	 mov	 DWORD PTR tv74[rbp], -1
  0008e	eb 09		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00090	8b 45 04	 mov	 eax, DWORD PTR _Result$[rbp]
  00093	89 85 d4 00 00
	00		 mov	 DWORD PTR tv74[rbp], eax
$LN4@vsnprintf_:
  00099	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv74[rbp]

; 1391 : }

  0009f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000a6	5f		 pop	 rdi
  000a7	5d		 pop	 rbp
  000a8	c3		 ret	 0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ PROC ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>, COMDAT

; 144  :         {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000a	48 8b ec	 mov	 rbp, rsp
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  0001c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00023	5f		 pop	 rdi
  00024	5d		 pop	 rbp
  00025	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ENDP ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 73   : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000a	48 8b ec	 mov	 rbp, rsp
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  0001c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00023	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002a	5f		 pop	 rdi
  0002b	5d		 pop	 rbp
  0002c	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?GetCenter@ImGuiViewport@@QEBA?AUImVec2@@XZ
_TEXT	SEGMENT
this$ = 224
__$ReturnUdt$ = 232
?GetCenter@ImGuiViewport@@QEBA?AUImVec2@@XZ PROC	; ImGuiViewport::GetCenter, COMDAT

; 2932 :     ImVec2              GetCenter() const       { return ImVec2(Pos.x + Size.x * 0.5f, Pos.y + Size.y * 0.5f); }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [rax+16]
  0003b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [rax+8]
  0004f	f3 0f 58 c8	 addss	 xmm1, xmm0
  00053	0f 28 c1	 movaps	 xmm0, xmm1
  00056	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005d	f3 0f 10 48 0c	 movss	 xmm1, DWORD PTR [rax+12]
  00062	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  0006a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  00076	f3 0f 58 d1	 addss	 xmm2, xmm1
  0007a	0f 28 ca	 movaps	 xmm1, xmm2
  0007d	0f 28 d0	 movaps	 xmm2, xmm0
  00080	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00087	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0008c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00093	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0009a	5f		 pop	 rdi
  0009b	5d		 pop	 rbp
  0009c	c3		 ret	 0
?GetCenter@ImGuiViewport@@QEBA?AUImVec2@@XZ ENDP	; ImGuiViewport::GetCenter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?GetDebugName@ImFont@@QEBAPEBDXZ
_TEXT	SEGMENT
tv68 = 192
this$ = 240
?GetDebugName@ImFont@@QEBAPEBDXZ PROC			; ImFont::GetDebugName, COMDAT

; 2879 :     const char*                 GetDebugName() const                { return ConfigData ? ConfigData->Name : "<unknown>"; }

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+248]
  00028	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00034	74 18		 je	 SHORT $LN3@GetDebugNa
  00036	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00041	48 83 c0 56	 add	 rax, 86			; 00000056H
  00045	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv68[rbp], rax
  0004c	eb 0e		 jmp	 SHORT $LN4@GetDebugNa
$LN3@GetDebugNa:
  0004e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
  00055	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv68[rbp], rax
$LN4@GetDebugNa:
  0005c	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv68[rbp]
  00063	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0006a	5f		 pop	 rdi
  0006b	5d		 pop	 rbp
  0006c	c3		 ret	 0
?GetDebugName@ImFont@@QEBAPEBDXZ ENDP			; ImFont::GetDebugName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z PROC	; ImVector<ImFont * __ptr64>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ENDP	; ImVector<ImFont * __ptr64>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z PROC ; ImVector<ImVec2>::push_back, COMDAT

; 1807 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00040	39 08		 cmp	 DWORD PTR [rax], ecx
  00042	75 27		 jne	 SHORT $LN2@push_back
  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	8b 00		 mov	 eax, DWORD PTR [rax]
  0004d	ff c0		 inc	 eax
  0004f	8b d0		 mov	 edx, eax
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z ; ImVector<ImVec2>::_grow_capacity
  0005d	8b d0		 mov	 edx, eax
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z ; ImVector<ImVec2>::reserve
$LN2@push_back:
  0006b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00075	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00080	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00084	41 b8 08 00 00
	00		 mov	 r8d, 8
  0008a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00091	48 8b c8	 mov	 rcx, rax
  00094	e8 00 00 00 00	 call	 memcpy
  00099	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a0	8b 00		 mov	 eax, DWORD PTR [rax]
  000a2	ff c0		 inc	 eax
  000a4	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	89 01		 mov	 DWORD PTR [rcx], eax
  000ad	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b4	5f		 pop	 rdi
  000b5	5d		 pop	 rbp
  000b6	c3		 ret	 0
?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ENDP ; ImVector<ImVec2>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z PROC		; ImVector<ImVec2>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 79		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 c1 e0 03	 shl	 rax, 3
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00055	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00059	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00065	74 35		 je	 SHORT $LN3@reserve
  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00071	48 c1 e0 03	 shl	 rax, 3
  00075	4c 8b c0	 mov	 r8, rax
  00078	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  00087	e8 00 00 00 00	 call	 memcpy
  0008c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00097	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  0009c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  000a7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b8	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000bb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c2	5f		 pop	 rdi
  000c3	5d		 pop	 rbp
  000c4	c3		 ret	 0
?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z ENDP		; ImVector<ImVec2>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?resize@?$ImVector@UImVec2@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImVec2@@@@QEAAXH@Z PROC		; ImVector<ImVec2>::resize, COMDAT

; 1800 :     inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 e8 00 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  0003e	7e 20		 jle	 SHORT $LN2@resize
  00040	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  00046	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z ; ImVector<ImVec2>::_grow_capacity
  00052	8b d0		 mov	 edx, eax
  00054	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z ; ImVector<ImVec2>::reserve
$LN2@resize:
  00060	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  0006d	89 08		 mov	 DWORD PTR [rax], ecx
  0006f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
?resize@?$ImVector@UImVec2@@@@QEAAXH@Z ENDP		; ImVector<ImVec2>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z PROC	; ImVector<ImVec2>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z ENDP	; ImVector<ImVec2>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ PROC	; ImVector<ImVec2>::back, COMDAT

; 1795 :     inline T&           back()                              { IM_ASSERT(Size > 0); return Data[Size - 1]; }

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	83 38 00	 cmp	 DWORD PTR [rax], 0
  00034	7f 1c		 jg	 SHORT $LN3@back
  00036	41 b8 03 07 00
	00		 mov	 r8d, 1795		; 00000703H
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00050	33 c0		 xor	 eax, eax
$LN3@back:
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	8b 00		 mov	 eax, DWORD PTR [rax]
  0005b	ff c8		 dec	 eax
  0005d	48 98		 cdqe
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0006a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0006e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00075	5f		 pop	 rdi
  00076	5d		 pop	 rbp
  00077	c3		 ret	 0
?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ ENDP	; ImVector<ImVec2>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@H@Z PROC	; ImVector<ImVec2>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@H@Z ENDP	; ImVector<ImVec2>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?size@?$ImVector@UImVec2@@@@QEBAHXZ
_TEXT	SEGMENT
this$ = 224
?size@?$ImVector@UImVec2@@@@QEBAHXZ PROC		; ImVector<ImVec2>::size, COMDAT

; 1782 :     inline int          size() const                        { return Size; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	8b 00		 mov	 eax, DWORD PTR [rax]
  00031	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00038	5f		 pop	 rdi
  00039	5d		 pop	 rbp
  0003a	c3		 ret	 0
?size@?$ImVector@UImVec2@@@@QEBAHXZ ENDP		; ImVector<ImVec2>::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@UImVec2@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImVec2@@@@QEAAXXZ PROC		; ImVector<ImVec2>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@UImVec2@@@@QEAAXXZ ENDP		; ImVector<ImVec2>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@UImVec2@@@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@UImVec2@@@@QEAA@XZ PROC			; ImVector<ImVec2>::~ImVector<ImVec2>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@UImVec2@@@@QEAA@XZ ENDP			; ImVector<ImVec2>::~ImVector<ImVec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@UImVec2@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImVec2@@@@QEAA@XZ PROC			; ImVector<ImVec2>::ImVector<ImVec2>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@UImVec2@@@@QEAA@XZ ENDP			; ImVector<ImVec2>::ImVector<ImVec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?HSV@ImColor@@SA?AU1@MMMM@Z
_TEXT	SEGMENT
r$ = 4
g$ = 36
b$ = 68
__$ArrayPad$ = 280
__$ReturnUdt$ = 320
h$ = 328
s$ = 336
v$ = 344
a$ = 352
?HSV@ImColor@@SA?AU1@MMMM@Z PROC			; ImColor::HSV, COMDAT

; 2358 :     static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r, g, b; ImGui::ColorConvertHSVtoRGB(h, s, v, r, g, b); return ImColor(r, g, b, a); }

$LN3:
  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00012	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00017	55		 push	 rbp
  00018	57		 push	 rdi
  00019	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  00020	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00025	48 8b fc	 mov	 rdi, rsp
  00028	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  0002d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00032	f3 ab		 rep stosd
  00034	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]
  0003c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00043	48 33 c5	 xor	 rax, rbp
  00046	48 89 85 18 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004d	48 8d 45 44	 lea	 rax, QWORD PTR b$[rbp]
  00051	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00056	48 8d 45 24	 lea	 rax, QWORD PTR g$[rbp]
  0005a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005f	4c 8d 4d 04	 lea	 r9, QWORD PTR r$[rbp]
  00063	f3 0f 10 95 58
	01 00 00	 movss	 xmm2, DWORD PTR v$[rbp]
  0006b	f3 0f 10 8d 50
	01 00 00	 movss	 xmm1, DWORD PTR s$[rbp]
  00073	f3 0f 10 85 48
	01 00 00	 movss	 xmm0, DWORD PTR h$[rbp]
  0007b	e8 00 00 00 00	 call	 ?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z ; ImGui::ColorConvertHSVtoRGB
  00080	f3 0f 10 85 60
	01 00 00	 movss	 xmm0, DWORD PTR a$[rbp]
  00088	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0008e	f3 0f 10 5d 44	 movss	 xmm3, DWORD PTR b$[rbp]
  00093	f3 0f 10 55 24	 movss	 xmm2, DWORD PTR g$[rbp]
  00098	f3 0f 10 4d 04	 movss	 xmm1, DWORD PTR r$[rbp]
  0009d	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  000a4	e8 00 00 00 00	 call	 ??0ImColor@@QEAA@MMMM@Z	; ImColor::ImColor
  000a9	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  000b0	48 8b f8	 mov	 rdi, rax
  000b3	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?HSV@ImColor@@SA?AU1@MMMM@Z$rtcFrameData
  000be	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c3	48 8b c7	 mov	 rax, rdi
  000c6	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000cd	48 33 cd	 xor	 rcx, rbp
  000d0	e8 00 00 00 00	 call	 __security_check_cookie
  000d5	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000dc	5f		 pop	 rdi
  000dd	5d		 pop	 rbp
  000de	c3		 ret	 0
?HSV@ImColor@@SA?AU1@MMMM@Z ENDP			; ImColor::HSV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??BImColor@@QEBA?AUImVec4@@XZ
_TEXT	SEGMENT
this$ = 224
__$ReturnUdt$ = 232
??BImColor@@QEBA?AUImVec4@@XZ PROC			; ImColor::operator ImVec4, COMDAT

; 2354 :     inline operator ImVec4() const                                  { return Value; }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00014	48 8b ec	 mov	 rbp, rsp
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  0002e	48 8b bd e8 00
	00 00		 mov	 rdi, QWORD PTR __$ReturnUdt$[rbp]
  00035	48 8b b5 e0 00
	00 00		 mov	 rsi, QWORD PTR this$[rbp]
  0003c	b9 10 00 00 00	 mov	 ecx, 16
  00041	f3 a4		 rep movsb
  00043	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  0004a	48 8d a5 c0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+192]
  00051	5f		 pop	 rdi
  00052	5e		 pop	 rsi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
??BImColor@@QEBA?AUImVec4@@XZ ENDP			; ImColor::operator ImVec4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??BImColor@@QEBAIXZ
_TEXT	SEGMENT
this$ = 224
??BImColor@@QEBAIXZ PROC				; ImColor::operator unsigned int, COMDAT

; 2353 :     inline operator ImU32() const                                   { return ImGui::ColorConvertFloat4ToU32(Value); }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ?ColorConvertFloat4ToU32@ImGui@@YAIAEBUImVec4@@@Z ; ImGui::ColorConvertFloat4ToU32
  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
??BImColor@@QEBAIXZ ENDP				; ImColor::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0ImColor@@QEAA@AEBUImVec4@@@Z
_TEXT	SEGMENT
this$ = 224
col$ = 232
??0ImColor@@QEAA@AEBUImVec4@@@Z PROC			; ImColor::ImColor, COMDAT

; 2350 :     constexpr ImColor(const ImVec4& col)                            : Value(col) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00014	48 8b ec	 mov	 rbp, rsp
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  0002e	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  00035	48 8b b5 e8 00
	00 00		 mov	 rsi, QWORD PTR col$[rbp]
  0003c	b9 10 00 00 00	 mov	 ecx, 16
  00041	f3 a4		 rep movsb
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8d a5 c0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+192]
  00051	5f		 pop	 rdi
  00052	5e		 pop	 rsi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
??0ImColor@@QEAA@AEBUImVec4@@@Z ENDP			; ImColor::ImColor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0ImColor@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 224
r$ = 232
g$ = 240
b$ = 248
a$ = 256
??0ImColor@@QEAA@MMMM@Z PROC				; ImColor::ImColor, COMDAT

; 2349 :     constexpr ImColor(float r, float g, float b, float a = 1.0f)    : Value(r, g, b, a) { }

$LN3:
  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00012	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00017	55		 push	 rbp
  00018	57		 push	 rdi
  00019	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00020	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00025	48 8b fc	 mov	 rdi, rsp
  00028	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00032	f3 ab		 rep stosd
  00034	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0003c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00043	f3 0f 10 85 00
	01 00 00	 movss	 xmm0, DWORD PTR a$[rbp]
  0004b	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00051	f3 0f 10 9d f8
	00 00 00	 movss	 xmm3, DWORD PTR b$[rbp]
  00059	f3 0f 10 95 f0
	00 00 00	 movss	 xmm2, DWORD PTR g$[rbp]
  00061	f3 0f 10 8d e8
	00 00 00	 movss	 xmm1, DWORD PTR r$[rbp]
  00069	48 8b c8	 mov	 rcx, rax
  0006c	e8 00 00 00 00	 call	 ??0ImVec4@@QEAA@MMMM@Z	; ImVec4::ImVec4
  00071	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00078	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0007f	5f		 pop	 rdi
  00080	5d		 pop	 rbp
  00081	c3		 ret	 0
??0ImColor@@QEAA@MMMM@Z ENDP				; ImColor::ImColor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ImGuiTextBuffer@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1ImGuiTextBuffer@@QEAA@XZ PROC			; ImGuiTextBuffer::~ImGuiTextBuffer, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ??1?$ImVector@D@@QEAA@XZ ; ImVector<char>::~ImVector<char>
  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
??1ImGuiTextBuffer@@QEAA@XZ ENDP			; ImGuiTextBuffer::~ImGuiTextBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@ImGuiTextBuffer@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@ImGuiTextBuffer@@QEAAXXZ PROC			; ImGuiTextBuffer::clear, COMDAT

; 2214 :     void                clear()                 { Buf.clear(); }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ?clear@?$ImVector@D@@QEAAXXZ ; ImVector<char>::clear
  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?clear@ImGuiTextBuffer@@QEAAXXZ ENDP			; ImGuiTextBuffer::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?size@ImGuiTextBuffer@@QEBAHXZ
_TEXT	SEGMENT
tv70 = 192
this$ = 240
?size@ImGuiTextBuffer@@QEBAHXZ PROC			; ImGuiTextBuffer::size, COMDAT

; 2212 :     int                 size() const            { return Buf.Size ? Buf.Size - 1 : 0; }

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+248]
  00028	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	83 38 00	 cmp	 DWORD PTR [rax], 0
  00032	74 13		 je	 SHORT $LN3@size
  00034	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003b	8b 00		 mov	 eax, DWORD PTR [rax]
  0003d	ff c8		 dec	 eax
  0003f	89 85 c0 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00045	eb 0a		 jmp	 SHORT $LN4@size
$LN3@size:
  00047	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv70[rbp], 0
$LN4@size:
  00051	8b 85 c0 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  00057	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0005e	5f		 pop	 rdi
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
?size@ImGuiTextBuffer@@QEBAHXZ ENDP			; ImGuiTextBuffer::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?end@ImGuiTextBuffer@@QEBAPEBDXZ
_TEXT	SEGMENT
tv70 = 192
this$ = 240
?end@ImGuiTextBuffer@@QEBAPEBDXZ PROC			; ImGuiTextBuffer::end, COMDAT

; 2211 :     const char*         end() const             { return Buf.Data ? &Buf.back() : EmptyString; }   // Buf is zero-terminated, so end() will point on the zero-terminator

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 18		 je	 SHORT $LN3@end
  00038	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	48 8b c8	 mov	 rcx, rax
  00042	e8 00 00 00 00	 call	 ?back@?$ImVector@D@@QEBAAEBDXZ ; ImVector<char>::back
  00047	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv70[rbp], rax
  0004e	eb 0e		 jmp	 SHORT $LN4@end
$LN3@end:
  00050	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?EmptyString@ImGuiTextBuffer@@2PADA ; ImGuiTextBuffer::EmptyString
  00057	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv70[rbp], rax
$LN4@end:
  0005e	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv70[rbp]
  00065	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?end@ImGuiTextBuffer@@QEBAPEBDXZ ENDP			; ImGuiTextBuffer::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?begin@ImGuiTextBuffer@@QEBAPEBDXZ
_TEXT	SEGMENT
tv70 = 192
this$ = 240
?begin@ImGuiTextBuffer@@QEBAPEBDXZ PROC			; ImGuiTextBuffer::begin, COMDAT

; 2210 :     const char*         begin() const           { return Buf.Data ? &Buf.front() : EmptyString; }

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 18		 je	 SHORT $LN3@begin
  00038	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	48 8b c8	 mov	 rcx, rax
  00042	e8 00 00 00 00	 call	 ?front@?$ImVector@D@@QEBAAEBDXZ ; ImVector<char>::front
  00047	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv70[rbp], rax
  0004e	eb 0e		 jmp	 SHORT $LN4@begin
$LN3@begin:
  00050	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?EmptyString@ImGuiTextBuffer@@2PADA ; ImGuiTextBuffer::EmptyString
  00057	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv70[rbp], rax
$LN4@begin:
  0005e	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv70[rbp]
  00065	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?begin@ImGuiTextBuffer@@QEBAPEBDXZ ENDP			; ImGuiTextBuffer::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??AImGuiTextBuffer@@QEBADH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??AImGuiTextBuffer@@QEBADH@Z PROC			; ImGuiTextBuffer::operator[], COMDAT

; 2209 :     inline char         operator[](int i) const { IM_ASSERT(Buf.Data != NULL); return Buf.Data[i]; }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0003a	75 1c		 jne	 SHORT $LN3@operator
  0003c	41 b8 a1 08 00
	00		 mov	 r8d, 2209		; 000008a1H
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@COLNJNAB@?$AAB?$AAu?$AAf?$AA?4?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00056	33 c0		 xor	 eax, eax
$LN3@operator:
  00058	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0006a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0006e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00075	5f		 pop	 rdi
  00076	5d		 pop	 rbp
  00077	c3		 ret	 0
??AImGuiTextBuffer@@QEBADH@Z ENDP			; ImGuiTextBuffer::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0ImGuiTextBuffer@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGuiTextBuffer@@QEAA@XZ PROC			; ImGuiTextBuffer::ImGuiTextBuffer, COMDAT

; 2208 :     ImGuiTextBuffer()   { }

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ??0?$ImVector@D@@QEAA@XZ ; ImVector<char>::ImVector<char>
  00039	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00047	5f		 pop	 rdi
  00048	5d		 pop	 rbp
  00049	c3		 ret	 0
??0ImGuiTextBuffer@@QEAA@XZ ENDP			; ImGuiTextBuffer::ImGuiTextBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@D@@QEAAXAEBD@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@D@@QEAAXAEBD@Z PROC		; ImVector<char>::push_back, COMDAT

; 1807 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00040	39 08		 cmp	 DWORD PTR [rax], ecx
  00042	75 27		 jne	 SHORT $LN2@push_back
  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	8b 00		 mov	 eax, DWORD PTR [rax]
  0004d	ff c0		 inc	 eax
  0004f	8b d0		 mov	 edx, eax
  00051	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@D@@QEBAHH@Z ; ImVector<char>::_grow_capacity
  0005d	8b d0		 mov	 edx, eax
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?reserve@?$ImVector@D@@QEAAXH@Z ; ImVector<char>::reserve
$LN2@push_back:
  0006b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00075	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00080	48 03 c8	 add	 rcx, rax
  00083	48 8b c1	 mov	 rax, rcx
  00086	41 b8 01 00 00
	00		 mov	 r8d, 1
  0008c	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00093	48 8b c8	 mov	 rcx, rax
  00096	e8 00 00 00 00	 call	 memcpy
  0009b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a2	8b 00		 mov	 eax, DWORD PTR [rax]
  000a4	ff c0		 inc	 eax
  000a6	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ad	89 01		 mov	 DWORD PTR [rcx], eax
  000af	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b6	5f		 pop	 rdi
  000b7	5d		 pop	 rbp
  000b8	c3		 ret	 0
?push_back@?$ImVector@D@@QEAAXAEBD@Z ENDP		; ImVector<char>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@D@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@D@@QEAAXH@Z PROC			; ImVector<char>::reserve, COMDAT

; 1803 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 08 01 00
	00		 cmp	 DWORD PTR new_capacity$[rbp], eax
  0003e	7f 02		 jg	 SHORT $LN2@reserve
  00040	eb 71		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  00042	48 63 85 08 01
	00 00		 movsxd	 rax, DWORD PTR new_capacity$[rbp]
  00049	48 8b c8	 mov	 rcx, rax
  0004c	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  00051	48 89 45 08	 mov	 QWORD PTR new_data$[rbp], rax
  00055	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00061	74 31		 je	 SHORT $LN3@reserve
  00063	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0006d	4c 8b c0	 mov	 r8, rax
  00070	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00077	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0007b	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  0007f	e8 00 00 00 00	 call	 memcpy
  00084	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008b	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0008f	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN3@reserve:
  00094	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009b	48 8b 4d 08	 mov	 rcx, QWORD PTR new_data$[rbp]
  0009f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000a3	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000aa	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR new_capacity$[rbp]
  000b0	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN1@reserve:
  000b3	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000ba	5f		 pop	 rdi
  000bb	5d		 pop	 rbp
  000bc	c3		 ret	 0
?reserve@?$ImVector@D@@QEAAXH@Z ENDP			; ImVector<char>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?resize@?$ImVector@D@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@D@@QEAAXH@Z PROC			; ImVector<char>::resize, COMDAT

; 1800 :     inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00038	39 85 e8 00 00
	00		 cmp	 DWORD PTR new_size$[rbp], eax
  0003e	7e 20		 jle	 SHORT $LN2@resize
  00040	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR new_size$[rbp]
  00046	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@D@@QEBAHH@Z ; ImVector<char>::_grow_capacity
  00052	8b d0		 mov	 edx, eax
  00054	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	e8 00 00 00 00	 call	 ?reserve@?$ImVector@D@@QEAAXH@Z ; ImVector<char>::reserve
$LN2@resize:
  00060	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR new_size$[rbp]
  0006d	89 08		 mov	 DWORD PTR [rax], ecx
  0006f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
?resize@?$ImVector@D@@QEAAXH@Z ENDP			; ImVector<char>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@D@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@D@@QEBAHH@Z PROC		; ImVector<char>::_grow_capacity, COMDAT

; 1799 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00037	74 21		 je	 SHORT $LN3@grow_capac
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004f	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00052	89 85 d4 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00058	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0005a	c7 85 d4 00 00
	00 08 00 00 00	 mov	 DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
  00064	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  0006a	89 45 04	 mov	 DWORD PTR new_capacity$[rbp], eax
  0006d	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00073	39 45 04	 cmp	 DWORD PTR new_capacity$[rbp], eax
  00076	7e 0b		 jle	 SHORT $LN5@grow_capac
  00078	8b 45 04	 mov	 eax, DWORD PTR new_capacity$[rbp]
  0007b	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
  00081	eb 0c		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00083	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR sz$[rbp]
  00089	89 85 d4 00 00
	00		 mov	 DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
  0008f	8b 85 d4 00 00
	00		 mov	 eax, DWORD PTR tv72[rbp]
  00095	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009c	5f		 pop	 rdi
  0009d	5d		 pop	 rbp
  0009e	c3		 ret	 0
?_grow_capacity@?$ImVector@D@@QEBAHH@Z ENDP		; ImVector<char>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?back@?$ImVector@D@@QEBAAEBDXZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@D@@QEBAAEBDXZ PROC			; ImVector<char>::back, COMDAT

; 1796 :     inline const T&     back() const                        { IM_ASSERT(Size > 0); return Data[Size - 1]; }

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	83 38 00	 cmp	 DWORD PTR [rax], 0
  00034	7f 1c		 jg	 SHORT $LN3@back
  00036	41 b8 04 07 00
	00		 mov	 r8d, 1796		; 00000704H
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00050	33 c0		 xor	 eax, eax
$LN3@back:
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	8b 00		 mov	 eax, DWORD PTR [rax]
  0005b	ff c8		 dec	 eax
  0005d	48 98		 cdqe
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0006a	48 03 c8	 add	 rcx, rax
  0006d	48 8b c1	 mov	 rax, rcx
  00070	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00077	5f		 pop	 rdi
  00078	5d		 pop	 rbp
  00079	c3		 ret	 0
?back@?$ImVector@D@@QEBAAEBDXZ ENDP			; ImVector<char>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?front@?$ImVector@D@@QEBAAEBDXZ
_TEXT	SEGMENT
this$ = 224
?front@?$ImVector@D@@QEBAAEBDXZ PROC			; ImVector<char>::front, COMDAT

; 1794 :     inline const T&     front() const                       { IM_ASSERT(Size > 0); return Data[0]; }

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	83 38 00	 cmp	 DWORD PTR [rax], 0
  00034	7f 1c		 jg	 SHORT $LN3@front
  00036	41 b8 02 07 00
	00		 mov	 r8d, 1794		; 00000702H
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00050	33 c0		 xor	 eax, eax
$LN3@front:
  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	48 6b c0 00	 imul	 rax, rax, 0
  0005b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00062	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00066	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006d	5f		 pop	 rdi
  0006e	5d		 pop	 rbp
  0006f	c3		 ret	 0
?front@?$ImVector@D@@QEBAAEBDXZ ENDP			; ImVector<char>::front
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?begin@?$ImVector@D@@QEAAPEADXZ
_TEXT	SEGMENT
this$ = 224
?begin@?$ImVector@D@@QEAAPEADXZ PROC			; ImVector<char>::begin, COMDAT

; 1789 :     inline T*           begin()                             { return Data; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00033	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003a	5f		 pop	 rdi
  0003b	5d		 pop	 rbp
  0003c	c3		 ret	 0
?begin@?$ImVector@D@@QEAAPEADXZ ENDP			; ImVector<char>::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?capacity@?$ImVector@D@@QEBAHXZ
_TEXT	SEGMENT
this$ = 224
?capacity@?$ImVector@D@@QEBAHXZ PROC			; ImVector<char>::capacity, COMDAT

; 1785 :     inline int          capacity() const                    { return Capacity; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00032	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00039	5f		 pop	 rdi
  0003a	5d		 pop	 rbp
  0003b	c3		 ret	 0
?capacity@?$ImVector@D@@QEBAHXZ ENDP			; ImVector<char>::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?size@?$ImVector@D@@QEBAHXZ
_TEXT	SEGMENT
this$ = 224
?size@?$ImVector@D@@QEBAHXZ PROC			; ImVector<char>::size, COMDAT

; 1782 :     inline int          size() const                        { return Size; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	8b 00		 mov	 eax, DWORD PTR [rax]
  00031	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00038	5f		 pop	 rdi
  00039	5d		 pop	 rbp
  0003a	c3		 ret	 0
?size@?$ImVector@D@@QEBAHXZ ENDP			; ImVector<char>::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?empty@?$ImVector@D@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?empty@?$ImVector@D@@QEBA_NXZ PROC			; ImVector<char>::empty, COMDAT

; 1781 :     inline bool         empty() const                       { return Size == 0; }

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+248]
  00028	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	83 38 00	 cmp	 DWORD PTR [rax], 0
  00032	75 0c		 jne	 SHORT $LN3@empty
  00034	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv66[rbp], 1
  0003e	eb 0a		 jmp	 SHORT $LN4@empty
$LN3@empty:
  00040	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv66[rbp], 0
$LN4@empty:
  0004a	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv66[rbp]
  00051	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
?empty@?$ImVector@D@@QEBA_NXZ ENDP			; ImVector<char>::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@D@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@D@@QEAAXXZ PROC			; ImVector<char>::clear, COMDAT

; 1777 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }  // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00036	74 3a		 je	 SHORT $LN2@clear
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0005e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@clear:
  00072	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?clear@?$ImVector@D@@QEAAXXZ ENDP			; ImVector<char>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@D@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@D@@QEAA@XZ PROC				; ImVector<char>::~ImVector<char>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@D@@QEAA@XZ ENDP				; ImVector<char>::~ImVector<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0?$ImVector@D@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@D@@QEAA@XZ PROC				; ImVector<char>::ImVector<char>, COMDAT

; 1772 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??0?$ImVector@D@@QEAA@XZ ENDP				; ImVector<char>::ImVector<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ImGuiTextFilter@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1ImGuiTextFilter@@QEAA@XZ PROC			; ImGuiTextFilter::~ImGuiTextFilter, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00037	48 8b c8	 mov	 rcx, rax
  0003a	e8 00 00 00 00	 call	 ??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEAA@XZ ; ImVector<ImGuiTextFilter::ImGuiTextRange>::~ImVector<ImGuiTextFilter::ImGuiTextRange>
  0003f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
??1ImGuiTextFilter@@QEAA@XZ ENDP			; ImGuiTextFilter::~ImGuiTextFilter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?empty@?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?empty@?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEBA_NXZ PROC ; ImVector<ImGuiTextFilter::ImGuiTextRange>::empty, COMDAT

; 1781 :     inline bool         empty() const                       { return Size == 0; }

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+248]
  00028	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	83 38 00	 cmp	 DWORD PTR [rax], 0
  00032	75 0c		 jne	 SHORT $LN3@empty
  00034	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv66[rbp], 1
  0003e	eb 0a		 jmp	 SHORT $LN4@empty
$LN3@empty:
  00040	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv66[rbp], 0
$LN4@empty:
  0004a	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv66[rbp]
  00051	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
?empty@?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEBA_NXZ ENDP ; ImVector<ImGuiTextFilter::ImGuiTextRange>::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEAA@XZ PROC ; ImVector<ImGuiTextFilter::ImGuiTextRange>::~ImVector<ImGuiTextFilter::ImGuiTextRange>, COMDAT

; 1775 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); } // Important: does not destruct anything

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 11		 je	 SHORT $LN2@ImVector
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004e	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
  00053	90		 npad	 1
$LN2@ImVector:
  00054	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEAA@XZ ENDP ; ImVector<ImGuiTextFilter::ImGuiTextRange>::~ImVector<ImGuiTextFilter::ImGuiTextRange>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?IsActive@ImGuiTextFilter@@QEBA_NXZ
_TEXT	SEGMENT
tv69 = 192
this$ = 240
?IsActive@ImGuiTextFilter@@QEBA_NXZ PROC		; ImGuiTextFilter::IsActive, COMDAT

; 2183 :     bool                IsActive() const { return !Filters.empty(); }

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00037	48 8b c8	 mov	 rcx, rax
  0003a	e8 00 00 00 00	 call	 ?empty@?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QEBA_NXZ ; ImVector<ImGuiTextFilter::ImGuiTextRange>::empty
  0003f	0f b6 c0	 movzx	 eax, al
  00042	85 c0		 test	 eax, eax
  00044	75 0c		 jne	 SHORT $LN3@IsActive
  00046	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv69[rbp], 1
  00050	eb 0a		 jmp	 SHORT $LN4@IsActive
$LN3@IsActive:
  00052	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv69[rbp], 0
$LN4@IsActive:
  0005c	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv69[rbp]
  00063	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0006a	5f		 pop	 rdi
  0006b	5d		 pop	 rbp
  0006c	c3		 ret	 0
?IsActive@ImGuiTextFilter@@QEBA_NXZ ENDP		; ImGuiTextFilter::IsActive
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ?SelectAll@ImGuiInputTextCallbackData@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?SelectAll@ImGuiInputTextCallbackData@@QEAAXXZ PROC	; ImGuiInputTextCallbackData::SelectAll, COMDAT

; 2093 :     void                SelectAll()             { SelectionStart = 0; SelectionEnd = BufTextLen; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [rax+48], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00044	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  00047	89 48 34	 mov	 DWORD PTR [rax+52], ecx
  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
?SelectAll@ImGuiInputTextCallbackData@@QEAAXXZ ENDP	; ImGuiInputTextCallbackData::SelectAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@G@@QEAAAEAGH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@G@@QEAAAEAGH@Z PROC			; ImVector<unsigned short>::operator[], COMDAT

; 1786 :     inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fa 06 00
	00		 mov	 r8d, 1786		; 000006faH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@MGODAGF@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00076	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@G@@QEAAAEAGH@Z ENDP			; ImVector<unsigned short>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowUserGuide@ImGui@@YAXXZ
_TEXT	SEGMENT
io$ = 8
?ShowUserGuide@ImGui@@YAXXZ PROC			; ImGui::ShowUserGuide, COMDAT

; 6348 : {

$LN4:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 6349 :     ImGuiIO& io = ImGui::GetIO();

  0001e	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  00023	48 89 45 08	 mov	 QWORD PTR io$[rbp], rax

; 6350 :     ImGui::BulletText("Double-click on title bar to collapse window.");

  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@FFJHEDDC@Double?9click?5on?5title?5bar?5to?5col@
  0002e	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 6351 :     ImGui::BulletText(

  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GD@KHDHCLNB@Click?5and?5drag?5on?5lower?5corner?5t@
  0003a	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 6352 :         "Click and drag on lower corner to resize window\n"
; 6353 :         "(double-click to auto fit window to its contents).");
; 6354 :     ImGui::BulletText("CTRL+Click on a slider or drag box to input value as text.");

  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DL@LJHMLMPJ@CTRL?$CLClick?5on?5a?5slider?5or?5drag?5b@
  00046	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 6355 :     ImGui::BulletText("TAB/SHIFT+TAB to cycle through keyboard editable fields.");

  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DJ@LKCIFMEM@TAB?1SHIFT?$CLTAB?5to?5cycle?5through?5k@
  00052	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 6356 :     ImGui::BulletText("CTRL+Tab to select a window.");

  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@MNOOCJNJ@CTRL?$CLTab?5to?5select?5a?5window?4?$AA@
  0005e	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 6357 :     if (io.FontAllowUserScaling)

  00063	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  00067	0f b6 40 5c	 movzx	 eax, BYTE PTR [rax+92]
  0006b	85 c0		 test	 eax, eax
  0006d	74 0c		 je	 SHORT $LN2@ShowUserGu

; 6358 :         ImGui::BulletText("CTRL+Mouse Wheel to zoom window contents.");

  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CK@LADJDPFO@CTRL?$CLMouse?5Wheel?5to?5zoom?5window?5@
  00076	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText
$LN2@ShowUserGu:

; 6359 :     ImGui::BulletText("While inputing text:\n");

  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@NMLMAAHC@While?5inputing?5text?3?6?$AA@
  00082	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 6360 :     ImGui::Indent();

  00087	0f 57 c0	 xorps	 xmm0, xmm0
  0008a	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent

; 6361 :     ImGui::BulletText("CTRL+Left/Right to word jump.");

  0008f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@EGJGDBOL@CTRL?$CLLeft?1Right?5to?5word?5jump?4?$AA@
  00096	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 6362 :     ImGui::BulletText("CTRL+A or double-click to select all.");

  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@EHDHJJCE@CTRL?$CLA?5or?5double?9click?5to?5select@
  000a2	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 6363 :     ImGui::BulletText("CTRL+X/C/V to use clipboard cut/copy/paste.");

  000a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@COCDFHEI@CTRL?$CLX?1C?1V?5to?5use?5clipboard?5cut?1@
  000ae	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 6364 :     ImGui::BulletText("CTRL+Z,CTRL+Y to undo/redo.");

  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@KMMNEEIL@CTRL?$CLZ?0CTRL?$CLY?5to?5undo?1redo?4?$AA@
  000ba	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 6365 :     ImGui::BulletText("ESCAPE to revert.");

  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@PKENOIKO@ESCAPE?5to?5revert?4?$AA@
  000c6	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 6366 :     ImGui::Unindent();

  000cb	0f 57 c0	 xorps	 xmm0, xmm0
  000ce	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent

; 6367 :     ImGui::BulletText("With keyboard navigation enabled:");

  000d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@LHGBBELP@With?5keyboard?5navigation?5enabled@
  000da	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 6368 :     ImGui::Indent();

  000df	0f 57 c0	 xorps	 xmm0, xmm0
  000e2	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent

; 6369 :     ImGui::BulletText("Arrow keys to navigate.");

  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@PBJOMNMB@Arrow?5keys?5to?5navigate?4?$AA@
  000ee	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 6370 :     ImGui::BulletText("Space to activate a widget.");

  000f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@LKNGKCOD@Space?5to?5activate?5a?5widget?4?$AA@
  000fa	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 6371 :     ImGui::BulletText("Return to input text into a widget.");

  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@LIPDCNLP@Return?5to?5input?5text?5into?5a?5widg@
  00106	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 6372 :     ImGui::BulletText("Escape to deactivate a widget, close popup, exit child window.");

  0010b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DP@NLCDBEHA@Escape?5to?5deactivate?5a?5widget?0?5c@
  00112	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 6373 :     ImGui::BulletText("Alt to jump to the menu layer of a window.");

  00117	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@EBPMKFNL@Alt?5to?5jump?5to?5the?5menu?5layer?5of@
  0011e	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 6374 :     ImGui::Unindent();

  00123	0f 57 c0	 xorps	 xmm0, xmm0
  00126	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent

; 6375 : }

  0012b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00132	5f		 pop	 rdi
  00133	5d		 pop	 rbp
  00134	c3		 ret	 0
?ShowUserGuide@ImGui@@YAXXZ ENDP			; ImGui::ShowUserGuide
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowFontSelector@ImGui@@YAXPEBD@Z
_TEXT	SEGMENT
io$ = 8
font_current$ = 40
n$1 = 68
font$2 = 104
$T3 = 324
tv93 = 340
tv87 = 344
label$ = 384
?ShowFontSelector@ImGui@@YAXPEBD@Z PROC			; ImGui::ShowFontSelector, COMDAT

; 6053 : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]

; 6054 :     ImGuiIO& io = ImGui::GetIO();

  0002a	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  0002f	48 89 45 08	 mov	 QWORD PTR io$[rbp], rax

; 6055 :     ImFont* font_current = ImGui::GetFont();

  00033	e8 00 00 00 00	 call	 ?GetFont@ImGui@@YAPEAUImFont@@XZ ; ImGui::GetFont
  00038	48 89 45 28	 mov	 QWORD PTR font_current$[rbp], rax

; 6056 :     if (ImGui::BeginCombo(label, font_current->GetDebugName()))

  0003c	48 8b 4d 28	 mov	 rcx, QWORD PTR font_current$[rbp]
  00040	e8 00 00 00 00	 call	 ?GetDebugName@ImFont@@QEBAPEBDXZ ; ImFont::GetDebugName
  00045	45 33 c0	 xor	 r8d, r8d
  00048	48 8b d0	 mov	 rdx, rax
  0004b	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR label$[rbp]
  00052	e8 00 00 00 00	 call	 ?BeginCombo@ImGui@@YA_NPEBD0H@Z ; ImGui::BeginCombo
  00057	0f b6 c0	 movzx	 eax, al
  0005a	85 c0		 test	 eax, eax
  0005c	0f 84 c6 00 00
	00		 je	 $LN5@ShowFontSe

; 6057 :     {
; 6058 :         for (int n = 0; n < io.Fonts->Fonts.Size; n++)

  00062	c7 45 44 00 00
	00 00		 mov	 DWORD PTR n$1[rbp], 0
  00069	eb 08		 jmp	 SHORT $LN4@ShowFontSe
$LN2@ShowFontSe:
  0006b	8b 45 44	 mov	 eax, DWORD PTR n$1[rbp]
  0006e	ff c0		 inc	 eax
  00070	89 45 44	 mov	 DWORD PTR n$1[rbp], eax
$LN4@ShowFontSe:
  00073	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  00077	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  0007b	8b 40 58	 mov	 eax, DWORD PTR [rax+88]
  0007e	39 45 44	 cmp	 DWORD PTR n$1[rbp], eax
  00081	0f 8d 9c 00 00
	00		 jge	 $LN3@ShowFontSe

; 6059 :         {
; 6060 :             ImFont* font = io.Fonts->Fonts[n];

  00087	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  0008b	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  0008f	48 83 c0 58	 add	 rax, 88			; 00000058H
  00093	8b 55 44	 mov	 edx, DWORD PTR n$1[rbp]
  00096	48 8b c8	 mov	 rcx, rax
  00099	e8 00 00 00 00	 call	 ??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ; ImVector<ImFont * __ptr64>::operator[]
  0009e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a1	48 89 45 68	 mov	 QWORD PTR font$2[rbp], rax

; 6061 :             ImGui::PushID((void*)font);

  000a5	48 8b 4d 68	 mov	 rcx, QWORD PTR font$2[rbp]
  000a9	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPEBX@Z ; ImGui::PushID

; 6062 :             if (ImGui::Selectable(font->GetDebugName(), font == font_current))

  000ae	48 8b 45 28	 mov	 rax, QWORD PTR font_current$[rbp]
  000b2	48 39 45 68	 cmp	 QWORD PTR font$2[rbp], rax
  000b6	75 09		 jne	 SHORT $LN8@ShowFontSe
  000b8	c6 85 54 01 00
	00 01		 mov	 BYTE PTR tv93[rbp], 1
  000bf	eb 07		 jmp	 SHORT $LN9@ShowFontSe
$LN8@ShowFontSe:
  000c1	c6 85 54 01 00
	00 00		 mov	 BYTE PTR tv93[rbp], 0
$LN9@ShowFontSe:
  000c8	0f 57 d2	 xorps	 xmm2, xmm2
  000cb	0f 57 c9	 xorps	 xmm1, xmm1
  000ce	48 8d 8d 44 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  000d5	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  000da	48 89 85 58 01
	00 00		 mov	 QWORD PTR tv87[rbp], rax
  000e1	48 8b 4d 68	 mov	 rcx, QWORD PTR font$2[rbp]
  000e5	e8 00 00 00 00	 call	 ?GetDebugName@ImFont@@QEBAPEBDXZ ; ImFont::GetDebugName
  000ea	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR tv87[rbp]
  000f1	4c 8b c9	 mov	 r9, rcx
  000f4	45 33 c0	 xor	 r8d, r8d
  000f7	0f b6 95 54 01
	00 00		 movzx	 edx, BYTE PTR tv93[rbp]
  000fe	48 8b c8	 mov	 rcx, rax
  00101	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
  00106	0f b6 c0	 movzx	 eax, al
  00109	85 c0		 test	 eax, eax
  0010b	74 0c		 je	 SHORT $LN6@ShowFontSe

; 6063 :                 io.FontDefault = font;

  0010d	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  00111	48 8b 4d 68	 mov	 rcx, QWORD PTR font$2[rbp]
  00115	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx
$LN6@ShowFontSe:

; 6064 :             ImGui::PopID();

  00119	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 6065 :         }

  0011e	e9 48 ff ff ff	 jmp	 $LN2@ShowFontSe
$LN3@ShowFontSe:

; 6066 :         ImGui::EndCombo();

  00123	e8 00 00 00 00	 call	 ?EndCombo@ImGui@@YAXXZ	; ImGui::EndCombo
$LN5@ShowFontSe:

; 6067 :     }
; 6068 :     ImGui::SameLine();

  00128	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00130	0f 57 c0	 xorps	 xmm0, xmm0
  00133	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6069 :     HelpMarker(

  00138	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BCL@DICJLDFC@?9?5Load?5additional?5fonts?5with?5io?4@
  0013f	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 6070 :         "- Load additional fonts with io.Fonts->AddFontFromFileTTF().\n"
; 6071 :         "- The font atlas is built when calling io.Fonts->GetTexDataAsXXXX() or io.Fonts->Build().\n"
; 6072 :         "- Read FAQ and docs/FONTS.md for more details.\n"
; 6073 :         "- If you need to add/remove fonts at runtime (e.g. for DPI change), do it before calling NewFrame().");
; 6074 : }

  00144	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  0014b	5f		 pop	 rdi
  0014c	5d		 pop	 rbp
  0014d	c3		 ret	 0
?ShowFontSelector@ImGui@@YAXPEBD@Z ENDP			; ImGui::ShowFontSelector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowStyleSelector@ImGui@@YA_NPEBD@Z
_TEXT	SEGMENT
tv71 = 192
label$ = 240
?ShowStyleSelector@ImGui@@YA_NPEBD@Z PROC		; ImGui::ShowStyleSelector, COMDAT

; 6080 : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 6081 :     static int style_idx = -1;
; 6082 :     if (ImGui::Combo(label, &style_idx, "Dark\0Light\0Classic\0"))

  0002a	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  00030	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BE@PBMDCJBA@Dark?$AALight?$AAClassic?$AA?$AA@
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?style_idx@?1??ShowStyleSelector@ImGui@@YA_NPEBD@Z@4HA
  0003e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR label$[rbp]
  00045	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAH0H@Z ; ImGui::Combo
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	85 c0		 test	 eax, eax
  0004f	74 46		 je	 SHORT $LN4@ShowStyleS

; 6083 :     {
; 6084 :         switch (style_idx)

  00051	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?style_idx@?1??ShowStyleSelector@ImGui@@YA_NPEBD@Z@4HA
  00057	89 85 c0 00 00
	00		 mov	 DWORD PTR tv71[rbp], eax
  0005d	83 bd c0 00 00
	00 00		 cmp	 DWORD PTR tv71[rbp], 0
  00064	74 14		 je	 SHORT $LN5@ShowStyleS
  00066	83 bd c0 00 00
	00 01		 cmp	 DWORD PTR tv71[rbp], 1
  0006d	74 14		 je	 SHORT $LN6@ShowStyleS
  0006f	83 bd c0 00 00
	00 02		 cmp	 DWORD PTR tv71[rbp], 2
  00076	74 14		 je	 SHORT $LN7@ShowStyleS
  00078	eb 19		 jmp	 SHORT $LN2@ShowStyleS
$LN5@ShowStyleS:

; 6085 :         {
; 6086 :         case 0: ImGui::StyleColorsDark(); break;

  0007a	33 c9		 xor	 ecx, ecx
  0007c	e8 00 00 00 00	 call	 ?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z ; ImGui::StyleColorsDark
  00081	eb 10		 jmp	 SHORT $LN2@ShowStyleS
$LN6@ShowStyleS:

; 6087 :         case 1: ImGui::StyleColorsLight(); break;

  00083	33 c9		 xor	 ecx, ecx
  00085	e8 00 00 00 00	 call	 ?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z ; ImGui::StyleColorsLight
  0008a	eb 07		 jmp	 SHORT $LN2@ShowStyleS
$LN7@ShowStyleS:

; 6088 :         case 2: ImGui::StyleColorsClassic(); break;

  0008c	33 c9		 xor	 ecx, ecx
  0008e	e8 00 00 00 00	 call	 ?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z ; ImGui::StyleColorsClassic
$LN2@ShowStyleS:

; 6089 :         }
; 6090 :         return true;

  00093	b0 01		 mov	 al, 1
  00095	eb 02		 jmp	 SHORT $LN1@ShowStyleS
$LN4@ShowStyleS:

; 6091 :     }
; 6092 :     return false;

  00097	32 c0		 xor	 al, al
$LN1@ShowStyleS:

; 6093 : }

  00099	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000a0	5f		 pop	 rdi
  000a1	5d		 pop	 rbp
  000a2	c3		 ret	 0
?ShowStyleSelector@ImGui@@YA_NPEBD@Z ENDP		; ImGui::ShowStyleSelector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z
_TEXT	SEGMENT
style$ = 8
border$8 = 36
border$9 = 68
border$10 = 100
window_menu_button_position$11 = 132
i$12 = 164
col$13 = 200
name$14 = 232
i$15 = 260
name$16 = 296
io$17 = 328
atlas$18 = 360
MIN_SCALE$19 = 388
MAX_SCALE$20 = 420
draw_list$21 = 456
min_widget_width$22 = 484
n$23 = 516
RAD_MIN$24 = 548
RAD_MAX$25 = 580
rad$26 = 612
canvas_width$27 = 644
offset_x$28 = 676
offset_y$29 = 708
p1$30 = 744
$T31 = 1348
$T32 = 1380
$T33 = 1412
$T34 = 1444
$T35 = 1476
$T36 = 1508
$T37 = 1540
$T38 = 1572
$T39 = 1604
$T40 = 1636
$T41 = 1668
$T42 = 1704
tv860 = 1716
tv850 = 1716
tv605 = 1716
tv596 = 1716
tv587 = 1716
tv184 = 1716
tv174 = 1716
tv169 = 1716
tv159 = 1716
tv154 = 1716
tv144 = 1716
tv1153 = 1720
tv1147 = 1720
tv784 = 1720
tv504 = 1720
tv507 = 1728
tv510 = 1736
tv545 = 1744
__$ArrayPad$ = 1752
ref$ = 1792
?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z PROC	; ImGui::ShowStyleEditor, COMDAT

; 6096 : {

$LN70:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec 20 07
	00 00		 sub	 rsp, 1824		; 00000720H
  0000f	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 c8 01 00 00	 mov	 ecx, 456		; 000001c8H
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 48
	07 00 00	 mov	 rcx, QWORD PTR [rsp+1864]
  0002b	48 c7 85 a8 06
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T42[rbp], -2
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 d8 06
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
$LN4@ShowStyleE:

; 6097 :     IMGUI_DEMO_MARKER("Tools/Style Editor");

  00047	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0004f	74 25		 je	 SHORT $LN16@ShowStyleE
  00051	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4JA
  00057	ff c0		 inc	 eax
  00059	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00060	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@LNCFKLAK@Tools?1Style?5Editor?$AA@
  00067	8b d0		 mov	 edx, eax
  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00070	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN16@ShowStyleE:
  00076	33 c0		 xor	 eax, eax
  00078	85 c0		 test	 eax, eax
  0007a	75 cb		 jne	 SHORT $LN4@ShowStyleE

; 6098 :     // You can pass in a reference ImGuiStyle structure to compare to, revert to and save to
; 6099 :     // (without a reference style pointer, we will use one compared locally as a reference)
; 6100 :     ImGuiStyle& style = ImGui::GetStyle();

  0007c	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  00081	48 89 45 08	 mov	 QWORD PTR style$[rbp], rax

; 6101 :     static ImGuiStyle ref_saved_style;

  00085	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  0008a	8b c0		 mov	 eax, eax
  0008c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00092	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0009b	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0009f	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  000a2	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS0@?1??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA, eax
  000a8	7e 2e		 jle	 SHORT $LN5@ShowStyleE
  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA
  000b1	e8 00 00 00 00	 call	 _Init_thread_header
  000b6	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA, -1
  000bd	75 19		 jne	 SHORT $LN5@ShowStyleE
  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?ref_saved_style@?1??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4U3@A
  000c6	e8 00 00 00 00	 call	 ??0ImGuiStyle@@QEAA@XZ	; ImGuiStyle::ImGuiStyle
  000cb	90		 npad	 1
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA
  000d3	e8 00 00 00 00	 call	 _Init_thread_footer
$LN5@ShowStyleE:

; 6102 : 
; 6103 :     // Default to using internal storage as reference
; 6104 :     static bool init = true;
; 6105 :     if (init && ref == NULL)

  000d8	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?init@?1??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4_NA
  000df	85 c0		 test	 eax, eax
  000e1	74 1f		 je	 SHORT $LN17@ShowStyleE
  000e3	48 83 bd 00 07
	00 00 00	 cmp	 QWORD PTR ref$[rbp], 0
  000eb	75 15		 jne	 SHORT $LN17@ShowStyleE

; 6106 :         ref_saved_style = style;

  000ed	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?ref_saved_style@?1??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4U3@A
  000f4	48 8b f8	 mov	 rdi, rax
  000f7	48 8b 75 08	 mov	 rsi, QWORD PTR style$[rbp]
  000fb	b9 18 04 00 00	 mov	 ecx, 1048		; 00000418H
  00100	f3 a4		 rep movsb
$LN17@ShowStyleE:

; 6107 :     init = false;

  00102	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?init@?1??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4_NA, 0

; 6108 :     if (ref == NULL)

  00109	48 83 bd 00 07
	00 00 00	 cmp	 QWORD PTR ref$[rbp], 0
  00111	75 0e		 jne	 SHORT $LN18@ShowStyleE

; 6109 :         ref = &ref_saved_style;

  00113	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?ref_saved_style@?1??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4U3@A
  0011a	48 89 85 00 07
	00 00		 mov	 QWORD PTR ref$[rbp], rax
$LN18@ShowStyleE:

; 6110 : 
; 6111 :     ImGui::PushItemWidth(ImGui::GetWindowWidth() * 0.50f);

  00121	e8 00 00 00 00	 call	 ?GetWindowWidth@ImGui@@YAMXZ ; ImGui::GetWindowWidth
  00126	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0012e	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth

; 6112 : 
; 6113 :     if (ImGui::ShowStyleSelector("Colors##Selector"))

  00133	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MDDLAALC@Colors?$CD?$CDSelector?$AA@
  0013a	e8 00 00 00 00	 call	 ?ShowStyleSelector@ImGui@@YA_NPEBD@Z ; ImGui::ShowStyleSelector
  0013f	0f b6 c0	 movzx	 eax, al
  00142	85 c0		 test	 eax, eax
  00144	74 15		 je	 SHORT $LN19@ShowStyleE

; 6114 :         ref_saved_style = style;

  00146	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?ref_saved_style@?1??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4U3@A
  0014d	48 8b f8	 mov	 rdi, rax
  00150	48 8b 75 08	 mov	 rsi, QWORD PTR style$[rbp]
  00154	b9 18 04 00 00	 mov	 ecx, 1048		; 00000418H
  00159	f3 a4		 rep movsb
$LN19@ShowStyleE:

; 6115 :     ImGui::ShowFontSelector("Fonts##Selector");

  0015b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@OGAKFFL@Fonts?$CD?$CDSelector?$AA@
  00162	e8 00 00 00 00	 call	 ?ShowFontSelector@ImGui@@YAXPEBD@Z ; ImGui::ShowFontSelector

; 6116 : 
; 6117 :     // Simplified Settings (expose floating-pointer border sizes as boolean representing 0.0f or 1.0f)
; 6118 :     if (ImGui::SliderFloat("FrameRounding", &style.FrameRounding, 0.0f, 12.0f, "%.0f"))

  00167	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  0016b	48 83 c0 44	 add	 rax, 68			; 00000044H
  0016f	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00177	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  0017e	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00183	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41400000
  0018b	0f 57 d2	 xorps	 xmm2, xmm2
  0018e	48 8b d0	 mov	 rdx, rax
  00191	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@MJEGPPND@FrameRounding?$AA@
  00198	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat
  0019d	0f b6 c0	 movzx	 eax, al
  001a0	85 c0		 test	 eax, eax
  001a2	74 15		 je	 SHORT $LN20@ShowStyleE

; 6119 :         style.GrabRounding = style.FrameRounding; // Make GrabRounding always the same value as FrameRounding

  001a4	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  001a8	48 8b 4d 08	 mov	 rcx, QWORD PTR style$[rbp]
  001ac	f3 0f 10 41 44	 movss	 xmm0, DWORD PTR [rcx+68]
  001b1	f3 0f 11 80 80
	00 00 00	 movss	 DWORD PTR [rax+128], xmm0
$LN20@ShowStyleE:

; 6120 :     { bool border = (style.WindowBorderSize > 0.0f); if (ImGui::Checkbox("WindowBorder", &border)) { style.WindowBorderSize = border ? 1.0f : 0.0f; } }

  001b9	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  001bd	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [rax+20]
  001c2	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  001c9	76 0c		 jbe	 SHORT $LN48@ShowStyleE
  001cb	c7 85 b4 06 00
	00 01 00 00 00	 mov	 DWORD PTR tv144[rbp], 1
  001d5	eb 0a		 jmp	 SHORT $LN49@ShowStyleE
$LN48@ShowStyleE:
  001d7	c7 85 b4 06 00
	00 00 00 00 00	 mov	 DWORD PTR tv144[rbp], 0
$LN49@ShowStyleE:
  001e1	0f b6 85 b4 06
	00 00		 movzx	 eax, BYTE PTR tv144[rbp]
  001e8	88 45 24	 mov	 BYTE PTR border$8[rbp], al
  001eb	48 8d 55 24	 lea	 rdx, QWORD PTR border$8[rbp]
  001ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@IABNAJJO@WindowBorder?$AA@
  001f6	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox
  001fb	0f b6 c0	 movzx	 eax, al
  001fe	85 c0		 test	 eax, eax
  00200	74 36		 je	 SHORT $LN21@ShowStyleE
  00202	0f b6 45 24	 movzx	 eax, BYTE PTR border$8[rbp]
  00206	85 c0		 test	 eax, eax
  00208	74 12		 je	 SHORT $LN50@ShowStyleE
  0020a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00212	f3 0f 11 85 b4
	06 00 00	 movss	 DWORD PTR tv154[rbp], xmm0
  0021a	eb 0b		 jmp	 SHORT $LN51@ShowStyleE
$LN50@ShowStyleE:
  0021c	0f 57 c0	 xorps	 xmm0, xmm0
  0021f	f3 0f 11 85 b4
	06 00 00	 movss	 DWORD PTR tv154[rbp], xmm0
$LN51@ShowStyleE:
  00227	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  0022b	f3 0f 10 85 b4
	06 00 00	 movss	 xmm0, DWORD PTR tv154[rbp]
  00233	f3 0f 11 40 14	 movss	 DWORD PTR [rax+20], xmm0
$LN21@ShowStyleE:

; 6121 :     ImGui::SameLine();

  00238	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00240	0f 57 c0	 xorps	 xmm0, xmm0
  00243	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6122 :     { bool border = (style.FrameBorderSize > 0.0f);  if (ImGui::Checkbox("FrameBorder",  &border)) { style.FrameBorderSize  = border ? 1.0f : 0.0f; } }

  00248	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  0024c	f3 0f 10 40 48	 movss	 xmm0, DWORD PTR [rax+72]
  00251	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00258	76 0c		 jbe	 SHORT $LN52@ShowStyleE
  0025a	c7 85 b4 06 00
	00 01 00 00 00	 mov	 DWORD PTR tv159[rbp], 1
  00264	eb 0a		 jmp	 SHORT $LN53@ShowStyleE
$LN52@ShowStyleE:
  00266	c7 85 b4 06 00
	00 00 00 00 00	 mov	 DWORD PTR tv159[rbp], 0
$LN53@ShowStyleE:
  00270	0f b6 85 b4 06
	00 00		 movzx	 eax, BYTE PTR tv159[rbp]
  00277	88 45 44	 mov	 BYTE PTR border$9[rbp], al
  0027a	48 8d 55 44	 lea	 rdx, QWORD PTR border$9[rbp]
  0027e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LIENHPEL@FrameBorder?$AA@
  00285	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox
  0028a	0f b6 c0	 movzx	 eax, al
  0028d	85 c0		 test	 eax, eax
  0028f	74 36		 je	 SHORT $LN22@ShowStyleE
  00291	0f b6 45 44	 movzx	 eax, BYTE PTR border$9[rbp]
  00295	85 c0		 test	 eax, eax
  00297	74 12		 je	 SHORT $LN54@ShowStyleE
  00299	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002a1	f3 0f 11 85 b4
	06 00 00	 movss	 DWORD PTR tv169[rbp], xmm0
  002a9	eb 0b		 jmp	 SHORT $LN55@ShowStyleE
$LN54@ShowStyleE:
  002ab	0f 57 c0	 xorps	 xmm0, xmm0
  002ae	f3 0f 11 85 b4
	06 00 00	 movss	 DWORD PTR tv169[rbp], xmm0
$LN55@ShowStyleE:
  002b6	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  002ba	f3 0f 10 85 b4
	06 00 00	 movss	 xmm0, DWORD PTR tv169[rbp]
  002c2	f3 0f 11 40 48	 movss	 DWORD PTR [rax+72], xmm0
$LN22@ShowStyleE:

; 6123 :     ImGui::SameLine();

  002c7	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  002cf	0f 57 c0	 xorps	 xmm0, xmm0
  002d2	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6124 :     { bool border = (style.PopupBorderSize > 0.0f);  if (ImGui::Checkbox("PopupBorder",  &border)) { style.PopupBorderSize  = border ? 1.0f : 0.0f; } }

  002d7	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  002db	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [rax+56]
  002e0	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  002e7	76 0c		 jbe	 SHORT $LN56@ShowStyleE
  002e9	c7 85 b4 06 00
	00 01 00 00 00	 mov	 DWORD PTR tv174[rbp], 1
  002f3	eb 0a		 jmp	 SHORT $LN57@ShowStyleE
$LN56@ShowStyleE:
  002f5	c7 85 b4 06 00
	00 00 00 00 00	 mov	 DWORD PTR tv174[rbp], 0
$LN57@ShowStyleE:
  002ff	0f b6 85 b4 06
	00 00		 movzx	 eax, BYTE PTR tv174[rbp]
  00306	88 45 64	 mov	 BYTE PTR border$10[rbp], al
  00309	48 8d 55 64	 lea	 rdx, QWORD PTR border$10[rbp]
  0030d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@NFCFILGL@PopupBorder?$AA@
  00314	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox
  00319	0f b6 c0	 movzx	 eax, al
  0031c	85 c0		 test	 eax, eax
  0031e	74 36		 je	 SHORT $LN23@ShowStyleE
  00320	0f b6 45 64	 movzx	 eax, BYTE PTR border$10[rbp]
  00324	85 c0		 test	 eax, eax
  00326	74 12		 je	 SHORT $LN58@ShowStyleE
  00328	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00330	f3 0f 11 85 b4
	06 00 00	 movss	 DWORD PTR tv184[rbp], xmm0
  00338	eb 0b		 jmp	 SHORT $LN59@ShowStyleE
$LN58@ShowStyleE:
  0033a	0f 57 c0	 xorps	 xmm0, xmm0
  0033d	f3 0f 11 85 b4
	06 00 00	 movss	 DWORD PTR tv184[rbp], xmm0
$LN59@ShowStyleE:
  00345	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00349	f3 0f 10 85 b4
	06 00 00	 movss	 xmm0, DWORD PTR tv184[rbp]
  00351	f3 0f 11 40 38	 movss	 DWORD PTR [rax+56], xmm0
$LN23@ShowStyleE:

; 6125 : 
; 6126 :     // Save/Revert button
; 6127 :     if (ImGui::Button("Save Ref"))

  00356	0f 57 d2	 xorps	 xmm2, xmm2
  00359	0f 57 c9	 xorps	 xmm1, xmm1
  0035c	48 8d 8d 44 05
	00 00		 lea	 rcx, QWORD PTR $T31[rbp]
  00363	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00368	48 8b d0	 mov	 rdx, rax
  0036b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08EEJHGAPI@Save?5Ref?$AA@
  00372	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00377	0f b6 c0	 movzx	 eax, al
  0037a	85 c0		 test	 eax, eax
  0037c	74 2d		 je	 SHORT $LN24@ShowStyleE

; 6128 :         *ref = ref_saved_style = style;

  0037e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?ref_saved_style@?1??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4U3@A
  00385	48 8b f8	 mov	 rdi, rax
  00388	48 8b 75 08	 mov	 rsi, QWORD PTR style$[rbp]
  0038c	b9 18 04 00 00	 mov	 ecx, 1048		; 00000418H
  00391	f3 a4		 rep movsb
  00393	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?ref_saved_style@?1??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4U3@A
  0039a	48 8b bd 00 07
	00 00		 mov	 rdi, QWORD PTR ref$[rbp]
  003a1	48 8b f0	 mov	 rsi, rax
  003a4	b9 18 04 00 00	 mov	 ecx, 1048		; 00000418H
  003a9	f3 a4		 rep movsb
$LN24@ShowStyleE:

; 6129 :     ImGui::SameLine();

  003ab	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  003b3	0f 57 c0	 xorps	 xmm0, xmm0
  003b6	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6130 :     if (ImGui::Button("Revert Ref"))

  003bb	0f 57 d2	 xorps	 xmm2, xmm2
  003be	0f 57 c9	 xorps	 xmm1, xmm1
  003c1	48 8d 8d 64 05
	00 00		 lea	 rcx, QWORD PTR $T32[rbp]
  003c8	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  003cd	48 8b d0	 mov	 rdx, rax
  003d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@KOOMFCFA@Revert?5Ref?$AA@
  003d7	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  003dc	0f b6 c0	 movzx	 eax, al
  003df	85 c0		 test	 eax, eax
  003e1	74 12		 je	 SHORT $LN25@ShowStyleE

; 6131 :         style = *ref;

  003e3	48 8b 7d 08	 mov	 rdi, QWORD PTR style$[rbp]
  003e7	48 8b b5 00 07
	00 00		 mov	 rsi, QWORD PTR ref$[rbp]
  003ee	b9 18 04 00 00	 mov	 ecx, 1048		; 00000418H
  003f3	f3 a4		 rep movsb
$LN25@ShowStyleE:

; 6132 :     ImGui::SameLine();

  003f5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  003fd	0f 57 c0	 xorps	 xmm0, xmm0
  00400	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6133 :     HelpMarker(

  00405	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0IE@DBDEKJDM@Save?1Revert?5in?5local?5non?9persist@
  0040c	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 6134 :         "Save/Revert in local non-persistent storage. Default Colors definition are not affected. "
; 6135 :         "Use \"Export\" below to save them somewhere.");
; 6136 : 
; 6137 :     ImGui::Separator();

  00411	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 6138 : 
; 6139 :     if (ImGui::BeginTabBar("##tabs", ImGuiTabBarFlags_None))

  00416	33 d2		 xor	 edx, edx
  00418	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06NNHHJHAK@?$CD?$CDtabs?$AA@
  0041f	e8 00 00 00 00	 call	 ?BeginTabBar@ImGui@@YA_NPEBDH@Z ; ImGui::BeginTabBar
  00424	0f b6 c0	 movzx	 eax, al
  00427	85 c0		 test	 eax, eax
  00429	0f 84 d3 12 00
	00		 je	 $LN26@ShowStyleE

; 6140 :     {
; 6141 :         if (ImGui::BeginTabItem("Sizes"))

  0042f	45 33 c0	 xor	 r8d, r8d
  00432	33 d2		 xor	 edx, edx
  00434	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05BOIJFCDP@Sizes?$AA@
  0043b	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginTabItem
  00440	0f b6 c0	 movzx	 eax, al
  00443	85 c0		 test	 eax, eax
  00445	0f 84 94 06 00
	00		 je	 $LN27@ShowStyleE

; 6142 :         {
; 6143 :             ImGui::Text("Main");

  0044b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04KGFMLCPK@Main?$AA@
  00452	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 6144 :             ImGui::SliderFloat2("WindowPadding", (float*)&style.WindowPadding, 0.0f, 20.0f, "%.0f");

  00457	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  0045b	48 83 c0 08	 add	 rax, 8
  0045f	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00467	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  0046e	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00473	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41a00000
  0047b	0f 57 d2	 xorps	 xmm2, xmm2
  0047e	48 8b d0	 mov	 rdx, rax
  00481	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NJEPBHAL@WindowPadding?$AA@
  00488	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z ; ImGui::SliderFloat2

; 6145 :             ImGui::SliderFloat2("FramePadding", (float*)&style.FramePadding, 0.0f, 20.0f, "%.0f");

  0048d	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00491	48 83 c0 3c	 add	 rax, 60			; 0000003cH
  00495	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0049d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  004a4	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  004a9	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41a00000
  004b1	0f 57 d2	 xorps	 xmm2, xmm2
  004b4	48 8b d0	 mov	 rdx, rax
  004b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@CPMOGBCG@FramePadding?$AA@
  004be	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z ; ImGui::SliderFloat2

; 6146 :             ImGui::SliderFloat2("CellPadding", (float*)&style.CellPadding, 0.0f, 20.0f, "%.0f");

  004c3	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  004c7	48 83 c0 5c	 add	 rax, 92			; 0000005cH
  004cb	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  004d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  004da	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  004df	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41a00000
  004e7	0f 57 d2	 xorps	 xmm2, xmm2
  004ea	48 8b d0	 mov	 rdx, rax
  004ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@DKDDHLDB@CellPadding?$AA@
  004f4	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z ; ImGui::SliderFloat2

; 6147 :             ImGui::SliderFloat2("ItemSpacing", (float*)&style.ItemSpacing, 0.0f, 20.0f, "%.0f");

  004f9	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  004fd	48 83 c0 4c	 add	 rax, 76			; 0000004cH
  00501	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00509	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  00510	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00515	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41a00000
  0051d	0f 57 d2	 xorps	 xmm2, xmm2
  00520	48 8b d0	 mov	 rdx, rax
  00523	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PJNJGKOI@ItemSpacing?$AA@
  0052a	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z ; ImGui::SliderFloat2

; 6148 :             ImGui::SliderFloat2("ItemInnerSpacing", (float*)&style.ItemInnerSpacing, 0.0f, 20.0f, "%.0f");

  0052f	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00533	48 83 c0 54	 add	 rax, 84			; 00000054H
  00537	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0053f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  00546	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0054b	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41a00000
  00553	0f 57 d2	 xorps	 xmm2, xmm2
  00556	48 8b d0	 mov	 rdx, rax
  00559	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@FPELPPEM@ItemInnerSpacing?$AA@
  00560	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z ; ImGui::SliderFloat2

; 6149 :             ImGui::SliderFloat2("TouchExtraPadding", (float*)&style.TouchExtraPadding, 0.0f, 10.0f, "%.0f");

  00565	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00569	48 83 c0 64	 add	 rax, 100		; 00000064H
  0056d	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00575	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  0057c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00581	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41200000
  00589	0f 57 d2	 xorps	 xmm2, xmm2
  0058c	48 8b d0	 mov	 rdx, rax
  0058f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@CHKNMAIJ@TouchExtraPadding?$AA@
  00596	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z ; ImGui::SliderFloat2

; 6150 :             ImGui::SliderFloat("IndentSpacing", &style.IndentSpacing, 0.0f, 30.0f, "%.0f");

  0059b	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  0059f	48 83 c0 6c	 add	 rax, 108		; 0000006cH
  005a3	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  005ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  005b2	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  005b7	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41f00000
  005bf	0f 57 d2	 xorps	 xmm2, xmm2
  005c2	48 8b d0	 mov	 rdx, rax
  005c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FJCIMFNP@IndentSpacing?$AA@
  005cc	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 6151 :             ImGui::SliderFloat("ScrollbarSize", &style.ScrollbarSize, 1.0f, 20.0f, "%.0f");

  005d1	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  005d5	48 83 c0 74	 add	 rax, 116		; 00000074H
  005d9	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  005e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  005e8	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  005ed	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41a00000
  005f5	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  005fd	48 8b d0	 mov	 rdx, rax
  00600	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DNFCAGJO@ScrollbarSize?$AA@
  00607	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 6152 :             ImGui::SliderFloat("GrabMinSize", &style.GrabMinSize, 1.0f, 20.0f, "%.0f");

  0060c	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00610	48 83 c0 7c	 add	 rax, 124		; 0000007cH
  00614	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0061c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  00623	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00628	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41a00000
  00630	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00638	48 8b d0	 mov	 rdx, rax
  0063b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MMBGIFGH@GrabMinSize?$AA@
  00642	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 6153 :             ImGui::Text("Borders");

  00647	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07PJFMDFHH@Borders?$AA@
  0064e	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 6154 :             ImGui::SliderFloat("WindowBorderSize", &style.WindowBorderSize, 0.0f, 1.0f, "%.0f");

  00653	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00657	48 83 c0 14	 add	 rax, 20
  0065b	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00663	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  0066a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0066f	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00677	0f 57 d2	 xorps	 xmm2, xmm2
  0067a	48 8b d0	 mov	 rdx, rax
  0067d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@DIOLDNNC@WindowBorderSize?$AA@
  00684	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 6155 :             ImGui::SliderFloat("ChildBorderSize", &style.ChildBorderSize, 0.0f, 1.0f, "%.0f");

  00689	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  0068d	48 83 c0 30	 add	 rax, 48			; 00000030H
  00691	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00699	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  006a0	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  006a5	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  006ad	0f 57 d2	 xorps	 xmm2, xmm2
  006b0	48 8b d0	 mov	 rdx, rax
  006b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@MHPKDBMC@ChildBorderSize?$AA@
  006ba	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 6156 :             ImGui::SliderFloat("PopupBorderSize", &style.PopupBorderSize, 0.0f, 1.0f, "%.0f");

  006bf	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  006c3	48 83 c0 38	 add	 rax, 56			; 00000038H
  006c7	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  006cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  006d6	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  006db	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  006e3	0f 57 d2	 xorps	 xmm2, xmm2
  006e6	48 8b d0	 mov	 rdx, rax
  006e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@GHHMANCJ@PopupBorderSize?$AA@
  006f0	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 6157 :             ImGui::SliderFloat("FrameBorderSize", &style.FrameBorderSize, 0.0f, 1.0f, "%.0f");

  006f5	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  006f9	48 83 c0 48	 add	 rax, 72			; 00000048H
  006fd	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00705	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  0070c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00711	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00719	0f 57 d2	 xorps	 xmm2, xmm2
  0071c	48 8b d0	 mov	 rdx, rax
  0071f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@OLKEIFFB@FrameBorderSize?$AA@
  00726	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 6158 :             ImGui::SliderFloat("TabBorderSize", &style.TabBorderSize, 0.0f, 1.0f, "%.0f");

  0072b	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  0072f	48 05 8c 00 00
	00		 add	 rax, 140		; 0000008cH
  00735	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0073d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  00744	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00749	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00751	0f 57 d2	 xorps	 xmm2, xmm2
  00754	48 8b d0	 mov	 rdx, rax
  00757	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@MEMGDJEN@TabBorderSize?$AA@
  0075e	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 6159 :             ImGui::Text("Rounding");

  00763	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08ICFONDFO@Rounding?$AA@
  0076a	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 6160 :             ImGui::SliderFloat("WindowRounding", &style.WindowRounding, 0.0f, 12.0f, "%.0f");

  0076f	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00773	48 83 c0 10	 add	 rax, 16
  00777	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0077f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  00786	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0078b	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41400000
  00793	0f 57 d2	 xorps	 xmm2, xmm2
  00796	48 8b d0	 mov	 rdx, rax
  00799	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@IMGPCCNA@WindowRounding?$AA@
  007a0	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 6161 :             ImGui::SliderFloat("ChildRounding", &style.ChildRounding, 0.0f, 12.0f, "%.0f");

  007a5	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  007a9	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  007ad	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  007b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  007bc	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  007c1	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41400000
  007c9	0f 57 d2	 xorps	 xmm2, xmm2
  007cc	48 8b d0	 mov	 rdx, rax
  007cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@OLPNJDEC@ChildRounding?$AA@
  007d6	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 6162 :             ImGui::SliderFloat("FrameRounding", &style.FrameRounding, 0.0f, 12.0f, "%.0f");

  007db	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  007df	48 83 c0 44	 add	 rax, 68			; 00000044H
  007e3	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  007eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  007f2	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  007f7	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41400000
  007ff	0f 57 d2	 xorps	 xmm2, xmm2
  00802	48 8b d0	 mov	 rdx, rax
  00805	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@MJEGPPND@FrameRounding?$AA@
  0080c	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 6163 :             ImGui::SliderFloat("PopupRounding", &style.PopupRounding, 0.0f, 12.0f, "%.0f");

  00811	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00815	48 83 c0 34	 add	 rax, 52			; 00000034H
  00819	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00821	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  00828	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0082d	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41400000
  00835	0f 57 d2	 xorps	 xmm2, xmm2
  00838	48 8b d0	 mov	 rdx, rax
  0083b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@OGBCIABM@PopupRounding?$AA@
  00842	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 6164 :             ImGui::SliderFloat("ScrollbarRounding", &style.ScrollbarRounding, 0.0f, 12.0f, "%.0f");

  00847	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  0084b	48 83 c0 78	 add	 rax, 120		; 00000078H
  0084f	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00857	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  0085e	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00863	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41400000
  0086b	0f 57 d2	 xorps	 xmm2, xmm2
  0086e	48 8b d0	 mov	 rdx, rax
  00871	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@IGAFHGEC@ScrollbarRounding?$AA@
  00878	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 6165 :             ImGui::SliderFloat("GrabRounding", &style.GrabRounding, 0.0f, 12.0f, "%.0f");

  0087d	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00881	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00887	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0088f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  00896	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0089b	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41400000
  008a3	0f 57 d2	 xorps	 xmm2, xmm2
  008a6	48 8b d0	 mov	 rdx, rax
  008a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@CHOEJEFP@GrabRounding?$AA@
  008b0	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 6166 :             ImGui::SliderFloat("TabRounding", &style.TabRounding, 0.0f, 12.0f, "%.0f");

  008b5	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  008b9	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  008bf	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  008c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  008ce	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  008d3	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41400000
  008db	0f 57 d2	 xorps	 xmm2, xmm2
  008de	48 8b d0	 mov	 rdx, rax
  008e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GELHPNFJ@TabRounding?$AA@
  008e8	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 6167 :             ImGui::Text("Alignment");

  008ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09FBMAGD@Alignment?$AA@
  008f4	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 6168 :             ImGui::SliderFloat2("WindowTitleAlign", (float*)&style.WindowTitleAlign, 0.0f, 1.0f, "%.2f");

  008f9	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  008fd	48 83 c0 20	 add	 rax, 32			; 00000020H
  00901	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00909	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GEFJINEE@?$CF?42f?$AA@
  00910	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00915	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  0091d	0f 57 d2	 xorps	 xmm2, xmm2
  00920	48 8b d0	 mov	 rdx, rax
  00923	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@IFNMJCJO@WindowTitleAlign?$AA@
  0092a	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z ; ImGui::SliderFloat2

; 6169 :             int window_menu_button_position = style.WindowMenuButtonPosition + 1;

  0092f	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00933	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00936	ff c0		 inc	 eax
  00938	89 85 84 00 00
	00		 mov	 DWORD PTR window_menu_button_position$11[rbp], eax

; 6170 :             if (ImGui::Combo("WindowMenuButtonPosition", (int*)&window_menu_button_position, "None\0Left\0Right\0"))

  0093e	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  00944	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@ECHPPBJL@None?$AALeft?$AARight?$AA?$AA@
  0094b	48 8d 95 84 00
	00 00		 lea	 rdx, QWORD PTR window_menu_button_position$11[rbp]
  00952	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@INNLFKOF@WindowMenuButtonPosition?$AA@
  00959	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAH0H@Z ; ImGui::Combo
  0095e	0f b6 c0	 movzx	 eax, al
  00961	85 c0		 test	 eax, eax
  00963	74 0f		 je	 SHORT $LN28@ShowStyleE

; 6171 :                 style.WindowMenuButtonPosition = window_menu_button_position - 1;

  00965	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR window_menu_button_position$11[rbp]
  0096b	ff c8		 dec	 eax
  0096d	48 8b 4d 08	 mov	 rcx, QWORD PTR style$[rbp]
  00971	89 41 28	 mov	 DWORD PTR [rcx+40], eax
$LN28@ShowStyleE:

; 6172 :             ImGui::Combo("ColorButtonPosition", (int*)&style.ColorButtonPosition, "Left\0Right\0");

  00974	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00978	48 05 94 00 00
	00		 add	 rax, 148		; 00000094H
  0097e	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  00984	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@PMLPANEE@Left?$AARight?$AA?$AA@
  0098b	48 8b d0	 mov	 rdx, rax
  0098e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@HCCCHIDA@ColorButtonPosition?$AA@
  00995	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAH0H@Z ; ImGui::Combo

; 6173 :             ImGui::SliderFloat2("ButtonTextAlign", (float*)&style.ButtonTextAlign, 0.0f, 1.0f, "%.2f");

  0099a	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  0099e	48 05 98 00 00
	00		 add	 rax, 152		; 00000098H
  009a4	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  009ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GEFJINEE@?$CF?42f?$AA@
  009b3	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  009b8	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  009c0	0f 57 d2	 xorps	 xmm2, xmm2
  009c3	48 8b d0	 mov	 rdx, rax
  009c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@PHDMJLFL@ButtonTextAlign?$AA@
  009cd	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z ; ImGui::SliderFloat2

; 6174 :             ImGui::SameLine(); HelpMarker("Alignment applies when a button is larger than its text content.");

  009d2	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  009da	0f 57 c0	 xorps	 xmm0, xmm0
  009dd	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  009e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EB@KHCCNPEP@Alignment?5applies?5when?5a?5button?5@
  009e9	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 6175 :             ImGui::SliderFloat2("SelectableTextAlign", (float*)&style.SelectableTextAlign, 0.0f, 1.0f, "%.2f");

  009ee	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  009f2	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  009f8	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00a00	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GEFJINEE@?$CF?42f?$AA@
  00a07	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00a0c	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00a14	0f 57 d2	 xorps	 xmm2, xmm2
  00a17	48 8b d0	 mov	 rdx, rax
  00a1a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@OFFKFPJC@SelectableTextAlign?$AA@
  00a21	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z ; ImGui::SliderFloat2

; 6176 :             ImGui::SameLine(); HelpMarker("Alignment applies when a selectable is larger than its text content.");

  00a26	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00a2e	0f 57 c0	 xorps	 xmm0, xmm0
  00a31	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00a36	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EF@EIJADJPM@Alignment?5applies?5when?5a?5selecta@
  00a3d	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 6177 :             ImGui::Text("Safe Area Padding");

  00a42	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@FINEDBHB@Safe?5Area?5Padding?$AA@
  00a49	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 6178 :             ImGui::SameLine(); HelpMarker("Adjust if you cannot see the edges of your screen (e.g. on a TV where scaling has not been configured).");

  00a4e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00a56	0f 57 c0	 xorps	 xmm0, xmm0
  00a59	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00a5e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GI@OFDAJLLA@Adjust?5if?5you?5cannot?5see?5the?5edg@
  00a65	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 6179 :             ImGui::SliderFloat2("DisplaySafeAreaPadding", (float*)&style.DisplaySafeAreaPadding, 0.0f, 30.0f, "%.0f");

  00a6a	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00a6e	48 05 b0 00 00
	00		 add	 rax, 176		; 000000b0H
  00a74	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00a7c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  00a83	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00a88	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41f00000
  00a90	0f 57 d2	 xorps	 xmm2, xmm2
  00a93	48 8b d0	 mov	 rdx, rax
  00a96	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@NLJOADCC@DisplaySafeAreaPadding?$AA@
  00a9d	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z ; ImGui::SliderFloat2

; 6180 :             ImGui::SliderFloat("LogSliderDeadzone", &style.LogSliderDeadzone, 0.0f, 12.0f, "%.0f");

  00aa2	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00aa6	48 05 84 00 00
	00		 add	 rax, 132		; 00000084H
  00aac	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00ab4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHNNFJCK@?$CF?40f?$AA@
  00abb	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00ac0	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41400000
  00ac8	0f 57 d2	 xorps	 xmm2, xmm2
  00acb	48 8b d0	 mov	 rdx, rax
  00ace	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@CILLMAJK@LogSliderDeadzone?$AA@
  00ad5	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ; ImGui::SliderFloat

; 6181 :             ImGui::EndTabItem();

  00ada	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN27@ShowStyleE:

; 6182 :         }
; 6183 : 
; 6184 :         if (ImGui::BeginTabItem("Colors"))

  00adf	45 33 c0	 xor	 r8d, r8d
  00ae2	33 d2		 xor	 edx, edx
  00ae4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06ICDCBJPI@Colors?$AA@
  00aeb	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginTabItem
  00af0	0f b6 c0	 movzx	 eax, al
  00af3	85 c0		 test	 eax, eax
  00af5	0f 84 df 05 00
	00		 je	 $LN29@ShowStyleE

; 6185 :         {
; 6186 :             static int output_dest = 0;
; 6187 :             static bool output_only_modified = true;
; 6188 :             if (ImGui::Button("Export"))

  00afb	0f 57 d2	 xorps	 xmm2, xmm2
  00afe	0f 57 c9	 xorps	 xmm1, xmm1
  00b01	48 8d 8d 84 05
	00 00		 lea	 rcx, QWORD PTR $T33[rbp]
  00b08	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00b0d	48 8b d0	 mov	 rdx, rax
  00b10	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06BFGAPCKF@Export?$AA@
  00b17	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00b1c	0f b6 c0	 movzx	 eax, al
  00b1f	85 c0		 test	 eax, eax
  00b21	0f 84 87 01 00
	00		 je	 $LN30@ShowStyleE

; 6189 :             {
; 6190 :                 if (output_dest == 0)

  00b27	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?output_dest@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA, 0
  00b2e	75 0c		 jne	 SHORT $LN31@ShowStyleE

; 6191 :                     ImGui::LogToClipboard();

  00b30	b9 ff ff ff ff	 mov	 ecx, -1
  00b35	e8 00 00 00 00	 call	 ?LogToClipboard@ImGui@@YAXH@Z ; ImGui::LogToClipboard

; 6192 :                 else

  00b3a	eb 0a		 jmp	 SHORT $LN32@ShowStyleE
$LN31@ShowStyleE:

; 6193 :                     ImGui::LogToTTY();

  00b3c	b9 ff ff ff ff	 mov	 ecx, -1
  00b41	e8 00 00 00 00	 call	 ?LogToTTY@ImGui@@YAXH@Z	; ImGui::LogToTTY
$LN32@ShowStyleE:

; 6194 :                 ImGui::LogText("ImVec4* colors = ImGui::GetStyle().Colors;" IM_NEWLINE);

  00b46	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CN@IIGPHJOL@ImVec4?$CK?5colors?5?$DN?5ImGui?3?3GetStyle@
  00b4d	e8 00 00 00 00	 call	 ?LogText@ImGui@@YAXPEBDZZ ; ImGui::LogText

; 6195 :                 for (int i = 0; i < ImGuiCol_COUNT; i++)

  00b52	c7 85 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR i$12[rbp], 0
  00b5c	eb 0e		 jmp	 SHORT $LN8@ShowStyleE
$LN6@ShowStyleE:
  00b5e	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR i$12[rbp]
  00b64	ff c0		 inc	 eax
  00b66	89 85 a4 00 00
	00		 mov	 DWORD PTR i$12[rbp], eax
$LN8@ShowStyleE:
  00b6c	83 bd a4 00 00
	00 35		 cmp	 DWORD PTR i$12[rbp], 53	; 00000035H
  00b73	0f 8d 30 01 00
	00		 jge	 $LN7@ShowStyleE

; 6196 :                 {
; 6197 :                     const ImVec4& col = style.Colors[i];

  00b79	48 63 85 a4 00
	00 00		 movsxd	 rax, DWORD PTR i$12[rbp]
  00b80	48 6b c0 10	 imul	 rax, rax, 16
  00b84	48 8b 4d 08	 mov	 rcx, QWORD PTR style$[rbp]
  00b88	48 8d 84 01 c8
	00 00 00	 lea	 rax, QWORD PTR [rcx+rax+200]
  00b90	48 89 85 c8 00
	00 00		 mov	 QWORD PTR col$13[rbp], rax

; 6198 :                     const char* name = ImGui::GetStyleColorName(i);

  00b97	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR i$12[rbp]
  00b9d	e8 00 00 00 00	 call	 ?GetStyleColorName@ImGui@@YAPEBDH@Z ; ImGui::GetStyleColorName
  00ba2	48 89 85 e8 00
	00 00		 mov	 QWORD PTR name$14[rbp], rax

; 6199 :                     if (!output_only_modified || memcmp(&col, &ref->Colors[i], sizeof(ImVec4)) != 0)

  00ba9	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?output_only_modified@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4_NA
  00bb0	85 c0		 test	 eax, eax
  00bb2	74 37		 je	 SHORT $LN34@ShowStyleE
  00bb4	48 63 85 a4 00
	00 00		 movsxd	 rax, DWORD PTR i$12[rbp]
  00bbb	48 6b c0 10	 imul	 rax, rax, 16
  00bbf	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR ref$[rbp]
  00bc6	48 8d 84 01 c8
	00 00 00	 lea	 rax, QWORD PTR [rcx+rax+200]
  00bce	41 b8 10 00 00
	00		 mov	 r8d, 16
  00bd4	48 8b d0	 mov	 rdx, rax
  00bd7	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR col$13[rbp]
  00bde	e8 00 00 00 00	 call	 memcmp
  00be3	85 c0		 test	 eax, eax
  00be5	0f 84 b9 00 00
	00		 je	 $LN33@ShowStyleE
$LN34@ShowStyleE:

; 6200 :                         ImGui::LogText("colors[ImGuiCol_%s]%*s= ImVec4(%.2ff, %.2ff, %.2ff, %.2ff);" IM_NEWLINE,

  00beb	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR col$13[rbp]
  00bf2	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [rax+12]
  00bf7	f2 0f 11 85 b8
	06 00 00	 movsd	 QWORD PTR tv504[rbp], xmm0
  00bff	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR col$13[rbp]
  00c06	f3 0f 5a 48 08	 cvtss2sd xmm1, DWORD PTR [rax+8]
  00c0b	f2 0f 11 8d c0
	06 00 00	 movsd	 QWORD PTR tv507[rbp], xmm1
  00c13	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR col$13[rbp]
  00c1a	f3 0f 5a 50 04	 cvtss2sd xmm2, DWORD PTR [rax+4]
  00c1f	f2 0f 11 95 c8
	06 00 00	 movsd	 QWORD PTR tv510[rbp], xmm2
  00c27	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR col$13[rbp]
  00c2e	f3 0f 5a 18	 cvtss2sd xmm3, DWORD PTR [rax]
  00c32	f2 0f 11 9d d0
	06 00 00	 movsd	 QWORD PTR tv545[rbp], xmm3
  00c3a	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR name$14[rbp]
  00c41	e8 00 00 00 00	 call	 strlen
  00c46	b9 17 00 00 00	 mov	 ecx, 23
  00c4b	2b c8		 sub	 ecx, eax
  00c4d	8b c1		 mov	 eax, ecx
  00c4f	f2 0f 10 85 b8
	06 00 00	 movsd	 xmm0, QWORD PTR tv504[rbp]
  00c57	f2 0f 11 44 24
	38		 movsd	 QWORD PTR [rsp+56], xmm0
  00c5d	f2 0f 10 85 c0
	06 00 00	 movsd	 xmm0, QWORD PTR tv507[rbp]
  00c65	f2 0f 11 44 24
	30		 movsd	 QWORD PTR [rsp+48], xmm0
  00c6b	f2 0f 10 85 c8
	06 00 00	 movsd	 xmm0, QWORD PTR tv510[rbp]
  00c73	f2 0f 11 44 24
	28		 movsd	 QWORD PTR [rsp+40], xmm0
  00c79	f2 0f 10 85 d0
	06 00 00	 movsd	 xmm0, QWORD PTR tv545[rbp]
  00c81	f2 0f 11 44 24
	20		 movsd	 QWORD PTR [rsp+32], xmm0
  00c87	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00c8e	44 8b c0	 mov	 r8d, eax
  00c91	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR name$14[rbp]
  00c98	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DO@CEAFKMHA@colors?$FLImGuiCol_?$CFs?$FN?$CF?$CKs?$DN?5ImVec4?$CI?$CF@
  00c9f	e8 00 00 00 00	 call	 ?LogText@ImGui@@YAXPEBDZZ ; ImGui::LogText
$LN33@ShowStyleE:

; 6201 :                             name, 23 - (int)strlen(name), "", col.x, col.y, col.z, col.w);
; 6202 :                 }

  00ca4	e9 b5 fe ff ff	 jmp	 $LN6@ShowStyleE
$LN7@ShowStyleE:

; 6203 :                 ImGui::LogFinish();

  00ca9	e8 00 00 00 00	 call	 ?LogFinish@ImGui@@YAXXZ	; ImGui::LogFinish
$LN30@ShowStyleE:

; 6204 :             }
; 6205 :             ImGui::SameLine(); ImGui::SetNextItemWidth(120); ImGui::Combo("##output_type", &output_dest, "To Clipboard\0To TTY\0");

  00cae	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00cb6	0f 57 c0	 xorps	 xmm0, xmm0
  00cb9	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00cbe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42f00000
  00cc6	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth
  00ccb	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  00cd1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BF@PKKCFHCF@To?5Clipboard?$AATo?5TTY?$AA?$AA@
  00cd8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?output_dest@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA
  00cdf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@BMBGJILK@?$CD?$CDoutput_type?$AA@
  00ce6	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPEBDPEAH0H@Z ; ImGui::Combo

; 6206 :             ImGui::SameLine(); ImGui::Checkbox("Only Modified Colors", &output_only_modified);

  00ceb	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00cf3	0f 57 c0	 xorps	 xmm0, xmm0
  00cf6	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00cfb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?output_only_modified@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4_NA
  00d02	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@EKILLAGK@Only?5Modified?5Colors?$AA@
  00d09	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 6207 : 
; 6208 :             static ImGuiTextFilter filter;

  00d0e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  00d13	8b c0		 mov	 eax, eax
  00d15	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00d1b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00d24	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00d28	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  00d2b	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS1@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA, eax
  00d31	7e 41		 jle	 SHORT $LN9@ShowStyleE
  00d33	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA
  00d3a	e8 00 00 00 00	 call	 _Init_thread_header
  00d3f	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS1@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA, -1
  00d46	75 2c		 jne	 SHORT $LN9@ShowStyleE
  00d48	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00d4f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?filter@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4UImGuiTextFilter@@A
  00d56	e8 00 00 00 00	 call	 ??0ImGuiTextFilter@@QEAA@PEBD@Z ; ImGuiTextFilter::ImGuiTextFilter
  00d5b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__Ffilter@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@YAXXZ ; `ImGui::ShowStyleEditor'::`41'::`dynamic atexit destructor for 'filter''
  00d62	e8 00 00 00 00	 call	 atexit
  00d67	90		 npad	 1
  00d68	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA
  00d6f	e8 00 00 00 00	 call	 _Init_thread_footer
$LN9@ShowStyleE:

; 6209 :             filter.Draw("Filter colors", ImGui::GetFontSize() * 16);

  00d74	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  00d79	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  00d81	0f 28 d0	 movaps	 xmm2, xmm0
  00d84	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@ECALKMOF@Filter?5colors?$AA@
  00d8b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?filter@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4UImGuiTextFilter@@A
  00d92	e8 00 00 00 00	 call	 ?Draw@ImGuiTextFilter@@QEAA_NPEBDM@Z ; ImGuiTextFilter::Draw

; 6210 : 
; 6211 :             static ImGuiColorEditFlags alpha_flags = 0;
; 6212 :             if (ImGui::RadioButton("Opaque", alpha_flags == ImGuiColorEditFlags_None))             { alpha_flags = ImGuiColorEditFlags_None; } ImGui::SameLine();

  00d97	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?alpha_flags@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA, 0
  00d9e	75 09		 jne	 SHORT $LN60@ShowStyleE
  00da0	c6 85 b4 06 00
	00 01		 mov	 BYTE PTR tv587[rbp], 1
  00da7	eb 07		 jmp	 SHORT $LN61@ShowStyleE
$LN60@ShowStyleE:
  00da9	c6 85 b4 06 00
	00 00		 mov	 BYTE PTR tv587[rbp], 0
$LN61@ShowStyleE:
  00db0	0f b6 95 b4 06
	00 00		 movzx	 edx, BYTE PTR tv587[rbp]
  00db7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OGJDIEIN@Opaque?$AA@
  00dbe	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPEBD_N@Z ; ImGui::RadioButton
  00dc3	0f b6 c0	 movzx	 eax, al
  00dc6	85 c0		 test	 eax, eax
  00dc8	74 0a		 je	 SHORT $LN35@ShowStyleE
  00dca	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?alpha_flags@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA, 0
$LN35@ShowStyleE:
  00dd4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00ddc	0f 57 c0	 xorps	 xmm0, xmm0
  00ddf	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6213 :             if (ImGui::RadioButton("Alpha",  alpha_flags == ImGuiColorEditFlags_AlphaPreview))     { alpha_flags = ImGuiColorEditFlags_AlphaPreview; } ImGui::SameLine();

  00de4	81 3d 00 00 00
	00 00 00 02 00	 cmp	 DWORD PTR ?alpha_flags@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA, 131072 ; 00020000H
  00dee	75 09		 jne	 SHORT $LN62@ShowStyleE
  00df0	c6 85 b4 06 00
	00 01		 mov	 BYTE PTR tv596[rbp], 1
  00df7	eb 07		 jmp	 SHORT $LN63@ShowStyleE
$LN62@ShowStyleE:
  00df9	c6 85 b4 06 00
	00 00		 mov	 BYTE PTR tv596[rbp], 0
$LN63@ShowStyleE:
  00e00	0f b6 95 b4 06
	00 00		 movzx	 edx, BYTE PTR tv596[rbp]
  00e07	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IHOGHNDL@Alpha?$AA@
  00e0e	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPEBD_N@Z ; ImGui::RadioButton
  00e13	0f b6 c0	 movzx	 eax, al
  00e16	85 c0		 test	 eax, eax
  00e18	74 0a		 je	 SHORT $LN36@ShowStyleE
  00e1a	c7 05 00 00 00
	00 00 00 02 00	 mov	 DWORD PTR ?alpha_flags@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA, 131072 ; 00020000H
$LN36@ShowStyleE:
  00e24	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00e2c	0f 57 c0	 xorps	 xmm0, xmm0
  00e2f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6214 :             if (ImGui::RadioButton("Both",   alpha_flags == ImGuiColorEditFlags_AlphaPreviewHalf)) { alpha_flags = ImGuiColorEditFlags_AlphaPreviewHalf; } ImGui::SameLine();

  00e34	81 3d 00 00 00
	00 00 00 04 00	 cmp	 DWORD PTR ?alpha_flags@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA, 262144 ; 00040000H
  00e3e	75 09		 jne	 SHORT $LN64@ShowStyleE
  00e40	c6 85 b4 06 00
	00 01		 mov	 BYTE PTR tv605[rbp], 1
  00e47	eb 07		 jmp	 SHORT $LN65@ShowStyleE
$LN64@ShowStyleE:
  00e49	c6 85 b4 06 00
	00 00		 mov	 BYTE PTR tv605[rbp], 0
$LN65@ShowStyleE:
  00e50	0f b6 95 b4 06
	00 00		 movzx	 edx, BYTE PTR tv605[rbp]
  00e57	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04IGHHMFLN@Both?$AA@
  00e5e	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPEBD_N@Z ; ImGui::RadioButton
  00e63	0f b6 c0	 movzx	 eax, al
  00e66	85 c0		 test	 eax, eax
  00e68	74 0a		 je	 SHORT $LN37@ShowStyleE
  00e6a	c7 05 00 00 00
	00 00 00 04 00	 mov	 DWORD PTR ?alpha_flags@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA, 262144 ; 00040000H
$LN37@ShowStyleE:
  00e74	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00e7c	0f 57 c0	 xorps	 xmm0, xmm0
  00e7f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6215 :             HelpMarker(

  00e84	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GL@DGJKIMAI@In?5the?5color?5list?3?6Left?9click?5on@
  00e8b	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 6216 :                 "In the color list:\n"
; 6217 :                 "Left-click on color square to open color picker,\n"
; 6218 :                 "Right-click to open edit options menu.");
; 6219 : 
; 6220 :             ImGui::BeginChild("##colors", ImVec2(0, 0), true, ImGuiWindowFlags_AlwaysVerticalScrollbar | ImGuiWindowFlags_AlwaysHorizontalScrollbar | ImGuiWindowFlags_NavFlattened);

  00e90	0f 57 d2	 xorps	 xmm2, xmm2
  00e93	0f 57 c9	 xorps	 xmm1, xmm1
  00e96	48 8d 8d a4 05
	00 00		 lea	 rcx, QWORD PTR $T34[rbp]
  00e9d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00ea2	41 b9 00 c0 80
	00		 mov	 r9d, 8437760		; 0080c000H
  00ea8	41 b0 01	 mov	 r8b, 1
  00eab	48 8b d0	 mov	 rdx, rax
  00eae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08PKGPDAGH@?$CD?$CDcolors?$AA@
  00eb5	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@_NH@Z ; ImGui::BeginChild

; 6221 :             ImGui::PushItemWidth(-160);

  00eba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c3200000
  00ec2	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth

; 6222 :             for (int i = 0; i < ImGuiCol_COUNT; i++)

  00ec7	c7 85 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$15[rbp], 0
  00ed1	eb 0e		 jmp	 SHORT $LN12@ShowStyleE
$LN10@ShowStyleE:
  00ed3	8b 85 04 01 00
	00		 mov	 eax, DWORD PTR i$15[rbp]
  00ed9	ff c0		 inc	 eax
  00edb	89 85 04 01 00
	00		 mov	 DWORD PTR i$15[rbp], eax
$LN12@ShowStyleE:
  00ee1	83 bd 04 01 00
	00 35		 cmp	 DWORD PTR i$15[rbp], 53	; 00000035H
  00ee8	0f 8d dd 01 00
	00		 jge	 $LN11@ShowStyleE

; 6223 :             {
; 6224 :                 const char* name = ImGui::GetStyleColorName(i);

  00eee	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR i$15[rbp]
  00ef4	e8 00 00 00 00	 call	 ?GetStyleColorName@ImGui@@YAPEBDH@Z ; ImGui::GetStyleColorName
  00ef9	48 89 85 28 01
	00 00		 mov	 QWORD PTR name$16[rbp], rax

; 6225 :                 if (!filter.PassFilter(name))

  00f00	45 33 c0	 xor	 r8d, r8d
  00f03	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR name$16[rbp]
  00f0a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?filter@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4UImGuiTextFilter@@A
  00f11	e8 00 00 00 00	 call	 ?PassFilter@ImGuiTextFilter@@QEBA_NPEBD0@Z ; ImGuiTextFilter::PassFilter
  00f16	0f b6 c0	 movzx	 eax, al
  00f19	85 c0		 test	 eax, eax
  00f1b	75 02		 jne	 SHORT $LN38@ShowStyleE

; 6226 :                     continue;

  00f1d	eb b4		 jmp	 SHORT $LN10@ShowStyleE
$LN38@ShowStyleE:

; 6227 :                 ImGui::PushID(i);

  00f1f	8b 8d 04 01 00
	00		 mov	 ecx, DWORD PTR i$15[rbp]
  00f25	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID

; 6228 :                 ImGui::ColorEdit4("##color", (float*)&style.Colors[i], ImGuiColorEditFlags_AlphaBar | alpha_flags);

  00f2a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?alpha_flags@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA
  00f30	0f ba e8 10	 bts	 eax, 16
  00f34	48 63 8d 04 01
	00 00		 movsxd	 rcx, DWORD PTR i$15[rbp]
  00f3b	48 6b c9 10	 imul	 rcx, rcx, 16
  00f3f	48 8b 55 08	 mov	 rdx, QWORD PTR style$[rbp]
  00f43	48 8d 8c 0a c8
	00 00 00	 lea	 rcx, QWORD PTR [rdx+rcx+200]
  00f4b	44 8b c0	 mov	 r8d, eax
  00f4e	48 8b d1	 mov	 rdx, rcx
  00f51	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07KJABCEJI@?$CD?$CDcolor?$AA@
  00f58	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z ; ImGui::ColorEdit4

; 6229 :                 if (memcmp(&style.Colors[i], &ref->Colors[i], sizeof(ImVec4)) != 0)

  00f5d	48 63 85 04 01
	00 00		 movsxd	 rax, DWORD PTR i$15[rbp]
  00f64	48 6b c0 10	 imul	 rax, rax, 16
  00f68	48 8b 8d 00 07
	00 00		 mov	 rcx, QWORD PTR ref$[rbp]
  00f6f	48 8d 84 01 c8
	00 00 00	 lea	 rax, QWORD PTR [rcx+rax+200]
  00f77	48 63 8d 04 01
	00 00		 movsxd	 rcx, DWORD PTR i$15[rbp]
  00f7e	48 6b c9 10	 imul	 rcx, rcx, 16
  00f82	48 8b 55 08	 mov	 rdx, QWORD PTR style$[rbp]
  00f86	48 8d 8c 0a c8
	00 00 00	 lea	 rcx, QWORD PTR [rdx+rcx+200]
  00f8e	41 b8 10 00 00
	00		 mov	 r8d, 16
  00f94	48 8b d0	 mov	 rdx, rax
  00f97	e8 00 00 00 00	 call	 memcmp
  00f9c	85 c0		 test	 eax, eax
  00f9e	0f 84 fe 00 00
	00		 je	 $LN39@ShowStyleE

; 6230 :                 {
; 6231 :                     // Tips: in a real user application, you may want to merge and use an icon font into the main font,
; 6232 :                     // so instead of "Save"/"Revert" you'd use icons!
; 6233 :                     // Read the FAQ and docs/FONTS.md about using icon fonts. It's really easy and super convenient!
; 6234 :                     ImGui::SameLine(0.0f, style.ItemInnerSpacing.x); if (ImGui::Button("Save")) { ref->Colors[i] = style.Colors[i]; }

  00fa4	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  00fa8	f3 0f 10 48 54	 movss	 xmm1, DWORD PTR [rax+84]
  00fad	0f 57 c0	 xorps	 xmm0, xmm0
  00fb0	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00fb5	0f 57 d2	 xorps	 xmm2, xmm2
  00fb8	0f 57 c9	 xorps	 xmm1, xmm1
  00fbb	48 8d 8d c4 05
	00 00		 lea	 rcx, QWORD PTR $T35[rbp]
  00fc2	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00fc7	48 8b d0	 mov	 rdx, rax
  00fca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04INACKGJP@Save?$AA@
  00fd1	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00fd6	0f b6 c0	 movzx	 eax, al
  00fd9	85 c0		 test	 eax, eax
  00fdb	74 46		 je	 SHORT $LN40@ShowStyleE
  00fdd	48 63 85 04 01
	00 00		 movsxd	 rax, DWORD PTR i$15[rbp]
  00fe4	48 6b c0 10	 imul	 rax, rax, 16
  00fe8	48 63 8d 04 01
	00 00		 movsxd	 rcx, DWORD PTR i$15[rbp]
  00fef	48 6b c9 10	 imul	 rcx, rcx, 16
  00ff3	48 8b 95 00 07
	00 00		 mov	 rdx, QWORD PTR ref$[rbp]
  00ffa	48 8b 7d 08	 mov	 rdi, QWORD PTR style$[rbp]
  00ffe	48 89 bd b8 06
	00 00		 mov	 QWORD PTR tv1147[rbp], rdi
  01005	48 8d bc 0a c8
	00 00 00	 lea	 rdi, QWORD PTR [rdx+rcx+200]
  0100d	48 8b 8d b8 06
	00 00		 mov	 rcx, QWORD PTR tv1147[rbp]
  01014	48 8d b4 01 c8
	00 00 00	 lea	 rsi, QWORD PTR [rcx+rax+200]
  0101c	b9 10 00 00 00	 mov	 ecx, 16
  01021	f3 a4		 rep movsb
$LN40@ShowStyleE:

; 6235 :                     ImGui::SameLine(0.0f, style.ItemInnerSpacing.x); if (ImGui::Button("Revert")) { style.Colors[i] = ref->Colors[i]; }

  01023	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  01027	f3 0f 10 48 54	 movss	 xmm1, DWORD PTR [rax+84]
  0102c	0f 57 c0	 xorps	 xmm0, xmm0
  0102f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01034	0f 57 d2	 xorps	 xmm2, xmm2
  01037	0f 57 c9	 xorps	 xmm1, xmm1
  0103a	48 8d 8d e4 05
	00 00		 lea	 rcx, QWORD PTR $T36[rbp]
  01041	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  01046	48 8b d0	 mov	 rdx, rax
  01049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06OIKMFEGE@Revert?$AA@
  01050	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  01055	0f b6 c0	 movzx	 eax, al
  01058	85 c0		 test	 eax, eax
  0105a	74 46		 je	 SHORT $LN39@ShowStyleE
  0105c	48 63 85 04 01
	00 00		 movsxd	 rax, DWORD PTR i$15[rbp]
  01063	48 6b c0 10	 imul	 rax, rax, 16
  01067	48 63 8d 04 01
	00 00		 movsxd	 rcx, DWORD PTR i$15[rbp]
  0106e	48 6b c9 10	 imul	 rcx, rcx, 16
  01072	48 8b 55 08	 mov	 rdx, QWORD PTR style$[rbp]
  01076	48 8b bd 00 07
	00 00		 mov	 rdi, QWORD PTR ref$[rbp]
  0107d	48 89 bd b8 06
	00 00		 mov	 QWORD PTR tv1153[rbp], rdi
  01084	48 8d bc 0a c8
	00 00 00	 lea	 rdi, QWORD PTR [rdx+rcx+200]
  0108c	48 8b 8d b8 06
	00 00		 mov	 rcx, QWORD PTR tv1153[rbp]
  01093	48 8d b4 01 c8
	00 00 00	 lea	 rsi, QWORD PTR [rcx+rax+200]
  0109b	b9 10 00 00 00	 mov	 ecx, 16
  010a0	f3 a4		 rep movsb
$LN39@ShowStyleE:

; 6236 :                 }
; 6237 :                 ImGui::SameLine(0.0f, style.ItemInnerSpacing.x);

  010a2	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  010a6	f3 0f 10 48 54	 movss	 xmm1, DWORD PTR [rax+84]
  010ab	0f 57 c0	 xorps	 xmm0, xmm0
  010ae	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6238 :                 ImGui::TextUnformatted(name);

  010b3	33 d2		 xor	 edx, edx
  010b5	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR name$16[rbp]
  010bc	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted

; 6239 :                 ImGui::PopID();

  010c1	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 6240 :             }

  010c6	e9 08 fe ff ff	 jmp	 $LN10@ShowStyleE
$LN11@ShowStyleE:

; 6241 :             ImGui::PopItemWidth();

  010cb	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 6242 :             ImGui::EndChild();

  010d0	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 6243 : 
; 6244 :             ImGui::EndTabItem();

  010d5	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN29@ShowStyleE:

; 6245 :         }
; 6246 : 
; 6247 :         if (ImGui::BeginTabItem("Fonts"))

  010da	45 33 c0	 xor	 r8d, r8d
  010dd	33 d2		 xor	 edx, edx
  010df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05ENDNDI@Fonts?$AA@
  010e6	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginTabItem
  010eb	0f b6 c0	 movzx	 eax, al
  010ee	85 c0		 test	 eax, eax
  010f0	0f 84 23 01 00
	00		 je	 $LN42@ShowStyleE

; 6248 :         {
; 6249 :             ImGuiIO& io = ImGui::GetIO();

  010f6	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  010fb	48 89 85 48 01
	00 00		 mov	 QWORD PTR io$17[rbp], rax

; 6250 :             ImFontAtlas* atlas = io.Fonts;

  01102	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR io$17[rbp]
  01109	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  0110d	48 89 85 68 01
	00 00		 mov	 QWORD PTR atlas$18[rbp], rax

; 6251 :             HelpMarker("Read FAQ and docs/FONTS.md for details on font loading.");

  01114	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DI@LIBKHDAI@Read?5FAQ?5and?5docs?1FONTS?4md?5for?5d@
  0111b	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 6252 :             ImGui::ShowFontAtlas(atlas);

  01120	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR atlas$18[rbp]
  01127	e8 00 00 00 00	 call	 ?ShowFontAtlas@ImGui@@YAXPEAUImFontAtlas@@@Z ; ImGui::ShowFontAtlas

; 6253 : 
; 6254 :             // Post-baking font scaling. Note that this is NOT the nice way of scaling fonts, read below.
; 6255 :             // (we enforce hard clamping manually as by default DragFloat/SliderFloat allows CTRL+Click text to get out of bounds).
; 6256 :             const float MIN_SCALE = 0.3f;

  0112c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  01134	f3 0f 11 85 84
	01 00 00	 movss	 DWORD PTR MIN_SCALE$19[rbp], xmm0

; 6257 :             const float MAX_SCALE = 2.0f;

  0113c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01144	f3 0f 11 85 a4
	01 00 00	 movss	 DWORD PTR MAX_SCALE$20[rbp], xmm0

; 6258 :             HelpMarker(

  0114c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BDA@ONKGEIHO@Those?5are?5old?5settings?5provided?5@
  01153	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 6259 :                 "Those are old settings provided for convenience.\n"
; 6260 :                 "However, the _correct_ way of scaling your UI is currently to reload your font at the designed size, "
; 6261 :                 "rebuild the font atlas, and call style.ScaleAllSizes() on a reference ImGuiStyle structure.\n"
; 6262 :                 "Using those settings here will give you poor quality results.");
; 6263 :             static float window_scale = 1.0f;
; 6264 :             ImGui::PushItemWidth(ImGui::GetFontSize() * 8);

  01158	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  0115d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41000000
  01165	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth

; 6265 :             if (ImGui::DragFloat("window scale", &window_scale, 0.005f, MIN_SCALE, MAX_SCALE, "%.2f", ImGuiSliderFlags_AlwaysClamp)) // Scale only this window

  0116a	c7 44 24 30 10
	00 00 00	 mov	 DWORD PTR [rsp+48], 16
  01172	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04GEFJINEE@?$CF?42f?$AA@
  01179	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0117e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01186	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0118c	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e99999a
  01194	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ba3d70a
  0119c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?window_scale@?EM@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4MA
  011a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DLFCCMFO@window?5scale?$AA@
  011aa	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat
  011af	0f b6 c0	 movzx	 eax, al
  011b2	85 c0		 test	 eax, eax
  011b4	74 0d		 je	 SHORT $LN43@ShowStyleE

; 6266 :                 ImGui::SetWindowFontScale(window_scale);

  011b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?window_scale@?EM@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4MA
  011be	e8 00 00 00 00	 call	 ?SetWindowFontScale@ImGui@@YAXM@Z ; ImGui::SetWindowFontScale
$LN43@ShowStyleE:

; 6267 :             ImGui::DragFloat("global scale", &io.FontGlobalScale, 0.005f, MIN_SCALE, MAX_SCALE, "%.2f", ImGuiSliderFlags_AlwaysClamp); // Scale everything

  011c3	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR io$17[rbp]
  011ca	48 83 c0 58	 add	 rax, 88			; 00000058H
  011ce	c7 44 24 30 10
	00 00 00	 mov	 DWORD PTR [rsp+48], 16
  011d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GEFJINEE@?$CF?42f?$AA@
  011dd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  011e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  011ea	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  011f0	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e99999a
  011f8	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ba3d70a
  01200	48 8b d0	 mov	 rdx, rax
  01203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DCHFKEPM@global?5scale?$AA@
  0120a	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 6268 :             ImGui::PopItemWidth();

  0120f	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 6269 : 
; 6270 :             ImGui::EndTabItem();

  01214	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN42@ShowStyleE:

; 6271 :         }
; 6272 : 
; 6273 :         if (ImGui::BeginTabItem("Rendering"))

  01219	45 33 c0	 xor	 r8d, r8d
  0121c	33 d2		 xor	 edx, edx
  0121e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09PIAIFBON@Rendering?$AA@
  01225	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::BeginTabItem
  0122a	0f b6 c0	 movzx	 eax, al
  0122d	85 c0		 test	 eax, eax
  0122f	0f 84 c8 04 00
	00		 je	 $LN44@ShowStyleE

; 6274 :         {
; 6275 :             ImGui::Checkbox("Anti-aliased lines", &style.AntiAliasedLines);

  01235	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  01239	48 05 bc 00 00
	00		 add	 rax, 188		; 000000bcH
  0123f	48 8b d0	 mov	 rdx, rax
  01242	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@INPJKAKL@Anti?9aliased?5lines?$AA@
  01249	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 6276 :             ImGui::SameLine();

  0124e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01256	0f 57 c0	 xorps	 xmm0, xmm0
  01259	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6277 :             HelpMarker("When disabling anti-aliasing lines, you'll probably want to disable borders in your style as well.");

  0125e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GD@HJLOEILL@When?5disabling?5anti?9aliasing?5lin@
  01265	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 6278 : 
; 6279 :             ImGui::Checkbox("Anti-aliased lines use texture", &style.AntiAliasedLinesUseTex);

  0126a	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  0126e	48 05 bd 00 00
	00		 add	 rax, 189		; 000000bdH
  01274	48 8b d0	 mov	 rdx, rax
  01277	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@FHJLGIJI@Anti?9aliased?5lines?5use?5texture?$AA@
  0127e	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 6280 :             ImGui::SameLine();

  01283	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0128b	0f 57 c0	 xorps	 xmm0, xmm0
  0128e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6281 :             HelpMarker("Faster lines using texture data. Require backend to render with bilinear filtering (not point/nearest filtering).");

  01293	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0HC@GKHKBME@Faster?5lines?5using?5texture?5data?4@
  0129a	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 6282 : 
; 6283 :             ImGui::Checkbox("Anti-aliased fill", &style.AntiAliasedFill);

  0129f	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  012a3	48 05 be 00 00
	00		 add	 rax, 190		; 000000beH
  012a9	48 8b d0	 mov	 rdx, rax
  012ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@KAFHAJBP@Anti?9aliased?5fill?$AA@
  012b3	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 6284 :             ImGui::PushItemWidth(ImGui::GetFontSize() * 8);

  012b8	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  012bd	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41000000
  012c5	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth

; 6285 :             ImGui::DragFloat("Curve Tessellation Tolerance", &style.CurveTessellationTol, 0.02f, 0.10f, 10.0f, "%.2f");

  012ca	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  012ce	48 05 c0 00 00
	00		 add	 rax, 192		; 000000c0H
  012d4	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  012dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GEFJINEE@?$CF?42f?$AA@
  012e3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  012e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  012f0	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  012f6	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3dcccccd
  012fe	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ca3d70a
  01306	48 8b d0	 mov	 rdx, rax
  01309	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@KPCPFGKJ@Curve?5Tessellation?5Tolerance?$AA@
  01310	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 6286 :             if (style.CurveTessellationTol < 0.10f) style.CurveTessellationTol = 0.10f;

  01315	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  01319	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01321	0f 2f 80 c0 00
	00 00		 comiss	 xmm0, DWORD PTR [rax+192]
  01328	76 14		 jbe	 SHORT $LN45@ShowStyleE
  0132a	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  0132e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01336	f3 0f 11 80 c0
	00 00 00	 movss	 DWORD PTR [rax+192], xmm0
$LN45@ShowStyleE:

; 6287 : 
; 6288 :             // When editing the "Circle Segment Max Error" value, draw a preview of its effect on auto-tessellated circles.
; 6289 :             ImGui::DragFloat("Circle Tessellation Max Error", &style.CircleTessellationMaxError , 0.005f, 0.10f, 5.0f, "%.2f", ImGuiSliderFlags_AlwaysClamp);

  0133e	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  01342	48 05 c4 00 00
	00		 add	 rax, 196		; 000000c4H
  01348	c7 44 24 30 10
	00 00 00	 mov	 DWORD PTR [rsp+48], 16
  01350	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GEFJINEE@?$CF?42f?$AA@
  01357	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0135c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  01364	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  0136a	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3dcccccd
  01372	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ba3d70a
  0137a	48 8b d0	 mov	 rdx, rax
  0137d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@ENDODAAL@Circle?5Tessellation?5Max?5Error?$AA@
  01384	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 6290 :             if (ImGui::IsItemActive())

  01389	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  0138e	0f b6 c0	 movzx	 eax, al
  01391	85 c0		 test	 eax, eax
  01393	0f 84 99 02 00
	00		 je	 $LN46@ShowStyleE

; 6291 :             {
; 6292 :                 ImGui::SetNextWindowPos(ImGui::GetCursorScreenPos());

  01399	0f 57 d2	 xorps	 xmm2, xmm2
  0139c	0f 57 c9	 xorps	 xmm1, xmm1
  0139f	48 8d 8d 04 06
	00 00		 lea	 rcx, QWORD PTR $T37[rbp]
  013a6	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  013ab	48 89 85 b8 06
	00 00		 mov	 QWORD PTR tv784[rbp], rax
  013b2	48 8d 8d 24 06
	00 00		 lea	 rcx, QWORD PTR $T38[rbp]
  013b9	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos
  013be	48 8b 8d b8 06
	00 00		 mov	 rcx, QWORD PTR tv784[rbp]
  013c5	4c 8b c1	 mov	 r8, rcx
  013c8	33 d2		 xor	 edx, edx
  013ca	48 8b c8	 mov	 rcx, rax
  013cd	e8 00 00 00 00	 call	 ?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H0@Z ; ImGui::SetNextWindowPos

; 6293 :                 ImGui::BeginTooltip();

  013d2	e8 00 00 00 00	 call	 ?BeginTooltip@ImGui@@YAXXZ ; ImGui::BeginTooltip

; 6294 :                 ImGui::TextUnformatted("(R = radius, N = number of segments)");

  013d7	33 d2		 xor	 edx, edx
  013d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@PHDIKMAF@?$CIR?5?$DN?5radius?0?5N?5?$DN?5number?5of?5segme@
  013e0	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPEBD0@Z ; ImGui::TextUnformatted

; 6295 :                 ImGui::Spacing();

  013e5	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 6296 :                 ImDrawList* draw_list = ImGui::GetWindowDrawList();

  013ea	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPEAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  013ef	48 89 85 c8 01
	00 00		 mov	 QWORD PTR draw_list$21[rbp], rax

; 6297 :                 const float min_widget_width = ImGui::CalcTextSize("N: MMM\nR: MMM").x;

  013f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  013fe	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01404	45 33 c9	 xor	 r9d, r9d
  01407	45 33 c0	 xor	 r8d, r8d
  0140a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@MNHFAILC@N?3?5MMM?6R?3?5MMM?$AA@
  01411	48 8d 8d 44 06
	00 00		 lea	 rcx, QWORD PTR $T39[rbp]
  01418	e8 00 00 00 00	 call	 ?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
  0141d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  01421	f3 0f 11 85 e4
	01 00 00	 movss	 DWORD PTR min_widget_width$22[rbp], xmm0

; 6298 :                 for (int n = 0; n < 8; n++)

  01429	c7 85 04 02 00
	00 00 00 00 00	 mov	 DWORD PTR n$23[rbp], 0
  01433	eb 0e		 jmp	 SHORT $LN15@ShowStyleE
$LN13@ShowStyleE:
  01435	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR n$23[rbp]
  0143b	ff c0		 inc	 eax
  0143d	89 85 04 02 00
	00		 mov	 DWORD PTR n$23[rbp], eax
$LN15@ShowStyleE:
  01443	83 bd 04 02 00
	00 08		 cmp	 DWORD PTR n$23[rbp], 8
  0144a	0f 8d dd 01 00
	00		 jge	 $LN14@ShowStyleE

; 6299 :                 {
; 6300 :                     const float RAD_MIN = 5.0f;

  01450	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  01458	f3 0f 11 85 24
	02 00 00	 movss	 DWORD PTR RAD_MIN$24[rbp], xmm0

; 6301 :                     const float RAD_MAX = 70.0f;

  01460	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@428c0000
  01468	f3 0f 11 85 44
	02 00 00	 movss	 DWORD PTR RAD_MAX$25[rbp], xmm0

; 6302 :                     const float rad = RAD_MIN + (RAD_MAX - RAD_MIN) * (float)n / (8.0f - 1.0f);

  01470	f3 0f 2a 85 04
	02 00 00	 cvtsi2ss xmm0, DWORD PTR n$23[rbp]
  01478	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42820000
  01480	f3 0f 59 c8	 mulss	 xmm1, xmm0
  01484	0f 28 c1	 movaps	 xmm0, xmm1
  01487	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40e00000
  0148f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40a00000
  01497	f3 0f 58 c8	 addss	 xmm1, xmm0
  0149b	0f 28 c1	 movaps	 xmm0, xmm1
  0149e	f3 0f 11 85 64
	02 00 00	 movss	 DWORD PTR rad$26[rbp], xmm0

; 6303 : 
; 6304 :                     ImGui::BeginGroup();

  014a6	e8 00 00 00 00	 call	 ?BeginGroup@ImGui@@YAXXZ ; ImGui::BeginGroup

; 6305 : 
; 6306 :                     ImGui::Text("R: %.f\nN: %d", rad, draw_list->_CalcCircleAutoSegmentCount(rad));

  014ab	f3 0f 10 8d 64
	02 00 00	 movss	 xmm1, DWORD PTR rad$26[rbp]
  014b3	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR draw_list$21[rbp]
  014ba	e8 00 00 00 00	 call	 ?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z ; ImDrawList::_CalcCircleAutoSegmentCount
  014bf	f3 0f 5a 85 64
	02 00 00	 cvtss2sd xmm0, DWORD PTR rad$26[rbp]
  014c7	44 8b c0	 mov	 r8d, eax
  014ca	0f 28 c8	 movaps	 xmm1, xmm0
  014cd	66 48 0f 7e ca	 movq	 rdx, xmm1
  014d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@PBIKEDIP@R?3?5?$CF?4f?6N?3?5?$CFd?$AA@
  014d9	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 6307 : 
; 6308 :                     const float canvas_width = IM_MAX(min_widget_width, rad * 2.0f);

  014de	f3 0f 10 85 64
	02 00 00	 movss	 xmm0, DWORD PTR rad$26[rbp]
  014e6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  014ee	f3 0f 10 8d e4
	01 00 00	 movss	 xmm1, DWORD PTR min_widget_width$22[rbp]
  014f6	0f 2f c8	 comiss	 xmm1, xmm0
  014f9	72 12		 jb	 SHORT $LN66@ShowStyleE
  014fb	f3 0f 10 85 e4
	01 00 00	 movss	 xmm0, DWORD PTR min_widget_width$22[rbp]
  01503	f3 0f 11 85 b4
	06 00 00	 movss	 DWORD PTR tv850[rbp], xmm0
  0150b	eb 18		 jmp	 SHORT $LN67@ShowStyleE
$LN66@ShowStyleE:
  0150d	f3 0f 10 85 64
	02 00 00	 movss	 xmm0, DWORD PTR rad$26[rbp]
  01515	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0151d	f3 0f 11 85 b4
	06 00 00	 movss	 DWORD PTR tv850[rbp], xmm0
$LN67@ShowStyleE:
  01525	f3 0f 10 85 b4
	06 00 00	 movss	 xmm0, DWORD PTR tv850[rbp]
  0152d	f3 0f 11 85 84
	02 00 00	 movss	 DWORD PTR canvas_width$27[rbp], xmm0

; 6309 :                     const float offset_x     = floorf(canvas_width * 0.5f);

  01535	f3 0f 10 85 84
	02 00 00	 movss	 xmm0, DWORD PTR canvas_width$27[rbp]
  0153d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  01545	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_floorf
  0154b	f3 0f 11 85 a4
	02 00 00	 movss	 DWORD PTR offset_x$28[rbp], xmm0

; 6310 :                     const float offset_y     = floorf(RAD_MAX);

  01553	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@428c0000
  0155b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_floorf
  01561	f3 0f 11 85 c4
	02 00 00	 movss	 DWORD PTR offset_y$29[rbp], xmm0

; 6311 : 
; 6312 :                     const ImVec2 p1 = ImGui::GetCursorScreenPos();

  01569	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR p1$30[rbp]
  01570	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos

; 6313 :                     draw_list->AddCircle(ImVec2(p1.x + offset_x, p1.y + offset_y), rad, ImGui::GetColorU32(ImGuiCol_Text));

  01575	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0157d	33 c9		 xor	 ecx, ecx
  0157f	e8 00 00 00 00	 call	 ?GetColorU32@ImGui@@YAIHM@Z ; ImGui::GetColorU32
  01584	89 85 b4 06 00
	00		 mov	 DWORD PTR tv860[rbp], eax
  0158a	f3 0f 10 85 ec
	02 00 00	 movss	 xmm0, DWORD PTR p1$30[rbp+4]
  01592	f3 0f 58 85 c4
	02 00 00	 addss	 xmm0, DWORD PTR offset_y$29[rbp]
  0159a	f3 0f 10 8d e8
	02 00 00	 movss	 xmm1, DWORD PTR p1$30[rbp]
  015a2	f3 0f 58 8d a4
	02 00 00	 addss	 xmm1, DWORD PTR offset_x$28[rbp]
  015aa	0f 28 d0	 movaps	 xmm2, xmm0
  015ad	48 8d 8d 64 06
	00 00		 lea	 rcx, QWORD PTR $T40[rbp]
  015b4	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  015b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  015c1	f3 0f 11 44 24
	28		 movss	 DWORD PTR [rsp+40], xmm0
  015c7	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  015cf	8b 8d b4 06 00
	00		 mov	 ecx, DWORD PTR tv860[rbp]
  015d5	44 8b c9	 mov	 r9d, ecx
  015d8	f3 0f 10 95 64
	02 00 00	 movss	 xmm2, DWORD PTR rad$26[rbp]
  015e0	48 8b d0	 mov	 rdx, rax
  015e3	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR draw_list$21[rbp]
  015ea	e8 00 00 00 00	 call	 ?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z ; ImDrawList::AddCircle

; 6314 :                     ImGui::Dummy(ImVec2(canvas_width, RAD_MAX * 2));

  015ef	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@430c0000
  015f7	f3 0f 10 8d 84
	02 00 00	 movss	 xmm1, DWORD PTR canvas_width$27[rbp]
  015ff	48 8d 8d 84 06
	00 00		 lea	 rcx, QWORD PTR $T41[rbp]
  01606	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0160b	48 8b c8	 mov	 rcx, rax
  0160e	e8 00 00 00 00	 call	 ?Dummy@ImGui@@YAXAEBUImVec2@@@Z ; ImGui::Dummy

; 6315 : 
; 6316 :                     /*
; 6317 :                     const ImVec2 p2 = ImGui::GetCursorScreenPos();
; 6318 :                     draw_list->AddCircleFilled(ImVec2(p2.x + offset_x, p2.y + offset_y), rad, ImGui::GetColorU32(ImGuiCol_Text));
; 6319 :                     ImGui::Dummy(ImVec2(canvas_width, RAD_MAX * 2));
; 6320 :                     */
; 6321 : 
; 6322 :                     ImGui::EndGroup();

  01613	e8 00 00 00 00	 call	 ?EndGroup@ImGui@@YAXXZ	; ImGui::EndGroup

; 6323 :                     ImGui::SameLine();

  01618	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  01620	0f 57 c0	 xorps	 xmm0, xmm0
  01623	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6324 :                 }

  01628	e9 08 fe ff ff	 jmp	 $LN13@ShowStyleE
$LN14@ShowStyleE:

; 6325 :                 ImGui::EndTooltip();

  0162d	e8 00 00 00 00	 call	 ?EndTooltip@ImGui@@YAXXZ ; ImGui::EndTooltip
$LN46@ShowStyleE:

; 6326 :             }
; 6327 :             ImGui::SameLine();

  01632	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0163a	0f 57 c0	 xorps	 xmm0, xmm0
  0163d	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 6328 :             HelpMarker("When drawing circle primitives with \"num_segments == 0\" tesselation will be calculated automatically.");

  01642	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GG@GMJKIKDN@When?5drawing?5circle?5primitives?5w@
  01649	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 6329 : 
; 6330 :             ImGui::DragFloat("Global Alpha", &style.Alpha, 0.005f, 0.20f, 1.0f, "%.2f"); // Not exposing zero here so user doesn't "lose" the UI (zero alpha clips all widgets). But application code could have a toggle to switch between zero and non-zero.

  0164e	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  01652	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0165a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GEFJINEE@?$CF?42f?$AA@
  01661	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01666	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0166e	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  01674	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3e4ccccd
  0167c	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ba3d70a
  01684	48 8b d0	 mov	 rdx, rax
  01687	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MBCJIDFM@Global?5Alpha?$AA@
  0168e	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat

; 6331 :             ImGui::DragFloat("Disabled Alpha", &style.DisabledAlpha, 0.005f, 0.0f, 1.0f, "%.2f"); ImGui::SameLine(); HelpMarker("Additional alpha multiplier for disabled items (multiply over current value of Alpha).");

  01693	48 8b 45 08	 mov	 rax, QWORD PTR style$[rbp]
  01697	48 83 c0 04	 add	 rax, 4
  0169b	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  016a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GEFJINEE@?$CF?42f?$AA@
  016aa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  016af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  016b7	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  016bd	0f 57 db	 xorps	 xmm3, xmm3
  016c0	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3ba3d70a
  016c8	48 8b d0	 mov	 rdx, rax
  016cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@HJLJBJBE@Disabled?5Alpha?$AA@
  016d2	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ; ImGui::DragFloat
  016d7	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  016df	0f 57 c0	 xorps	 xmm0, xmm0
  016e2	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  016e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FH@NPBPGPJP@Additional?5alpha?5multiplier?5for?5@
  016ee	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 6332 :             ImGui::PopItemWidth();

  016f3	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 6333 : 
; 6334 :             ImGui::EndTabItem();

  016f8	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN44@ShowStyleE:

; 6335 :         }
; 6336 : 
; 6337 :         ImGui::EndTabBar();

  016fd	e8 00 00 00 00	 call	 ?EndTabBar@ImGui@@YAXXZ	; ImGui::EndTabBar
$LN26@ShowStyleE:

; 6338 :     }
; 6339 : 
; 6340 :     ImGui::PopItemWidth();

  01702	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 6341 : }

  01707	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  0170b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z$rtcFrameData
  01712	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  01717	48 8b 8d d8 06
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0171e	48 33 cd	 xor	 rcx, rbp
  01721	e8 00 00 00 00	 call	 __security_check_cookie
  01726	48 8d a5 e0 06
	00 00		 lea	 rsp, QWORD PTR [rbp+1760]
  0172d	5f		 pop	 rdi
  0172e	5e		 pop	 rsi
  0172f	5d		 pop	 rbp
  01730	c3		 ret	 0
?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z ENDP	; ImGui::ShowStyleEditor
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
style$ = 8
border$8 = 36
border$9 = 68
border$10 = 100
window_menu_button_position$11 = 132
i$12 = 164
col$13 = 200
name$14 = 232
i$15 = 260
name$16 = 296
io$17 = 328
atlas$18 = 360
MIN_SCALE$19 = 388
MAX_SCALE$20 = 420
draw_list$21 = 456
min_widget_width$22 = 484
n$23 = 516
RAD_MIN$24 = 548
RAD_MAX$25 = 580
rad$26 = 612
canvas_width$27 = 644
offset_x$28 = 676
offset_y$29 = 708
p1$30 = 744
$T31 = 1348
$T32 = 1380
$T33 = 1412
$T34 = 1444
$T35 = 1476
$T36 = 1508
$T37 = 1540
$T38 = 1572
$T39 = 1604
$T40 = 1636
$T41 = 1668
$T42 = 1704
tv860 = 1716
tv850 = 1716
tv605 = 1716
tv596 = 1716
tv587 = 1716
tv184 = 1716
tv174 = 1716
tv169 = 1716
tv159 = 1716
tv154 = 1716
tv144 = 1716
tv1153 = 1720
tv1147 = 1720
tv784 = 1720
tv504 = 1720
tv507 = 1728
tv510 = 1736
tv545 = 1744
__$ArrayPad$ = 1752
ref$ = 1792
?dtor$0@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA PROC ; `ImGui::ShowStyleEditor'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA
  0001b	e8 00 00 00 00	 call	 _Init_thread_abort
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA ENDP ; `ImGui::ShowStyleEditor'::`1'::dtor$0
style$ = 8
border$8 = 36
border$9 = 68
border$10 = 100
window_menu_button_position$11 = 132
i$12 = 164
col$13 = 200
name$14 = 232
i$15 = 260
name$16 = 296
io$17 = 328
atlas$18 = 360
MIN_SCALE$19 = 388
MAX_SCALE$20 = 420
draw_list$21 = 456
min_widget_width$22 = 484
n$23 = 516
RAD_MIN$24 = 548
RAD_MAX$25 = 580
rad$26 = 612
canvas_width$27 = 644
offset_x$28 = 676
offset_y$29 = 708
p1$30 = 744
$T31 = 1348
$T32 = 1380
$T33 = 1412
$T34 = 1444
$T35 = 1476
$T36 = 1508
$T37 = 1540
$T38 = 1572
$T39 = 1604
$T40 = 1636
$T41 = 1668
$T42 = 1704
tv860 = 1716
tv850 = 1716
tv605 = 1716
tv596 = 1716
tv587 = 1716
tv184 = 1716
tv174 = 1716
tv169 = 1716
tv159 = 1716
tv154 = 1716
tv144 = 1716
tv1153 = 1720
tv1147 = 1720
tv784 = 1720
tv504 = 1720
tv507 = 1728
tv510 = 1736
tv545 = 1744
__$ArrayPad$ = 1752
ref$ = 1792
?dtor$1@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA PROC ; `ImGui::ShowStyleEditor'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA
  00042	e8 00 00 00 00	 call	 _Init_thread_abort
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?dtor$1@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA ENDP ; `ImGui::ShowStyleEditor'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
style$ = 8
border$8 = 36
border$9 = 68
border$10 = 100
window_menu_button_position$11 = 132
i$12 = 164
col$13 = 200
name$14 = 232
i$15 = 260
name$16 = 296
io$17 = 328
atlas$18 = 360
MIN_SCALE$19 = 388
MAX_SCALE$20 = 420
draw_list$21 = 456
min_widget_width$22 = 484
n$23 = 516
RAD_MIN$24 = 548
RAD_MAX$25 = 580
rad$26 = 612
canvas_width$27 = 644
offset_x$28 = 676
offset_y$29 = 708
p1$30 = 744
$T31 = 1348
$T32 = 1380
$T33 = 1412
$T34 = 1444
$T35 = 1476
$T36 = 1508
$T37 = 1540
$T38 = 1572
$T39 = 1604
$T40 = 1636
$T41 = 1668
$T42 = 1704
tv860 = 1716
tv850 = 1716
tv605 = 1716
tv596 = 1716
tv587 = 1716
tv184 = 1716
tv174 = 1716
tv169 = 1716
tv159 = 1716
tv154 = 1716
tv144 = 1716
tv1153 = 1720
tv1147 = 1720
tv784 = 1720
tv504 = 1720
tv507 = 1728
tv510 = 1736
tv545 = 1744
__$ArrayPad$ = 1752
ref$ = 1792
?dtor$0@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA PROC ; `ImGui::ShowStyleEditor'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA
  0001b	e8 00 00 00 00	 call	 _Init_thread_abort
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA ENDP ; `ImGui::ShowStyleEditor'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
style$ = 8
border$8 = 36
border$9 = 68
border$10 = 100
window_menu_button_position$11 = 132
i$12 = 164
col$13 = 200
name$14 = 232
i$15 = 260
name$16 = 296
io$17 = 328
atlas$18 = 360
MIN_SCALE$19 = 388
MAX_SCALE$20 = 420
draw_list$21 = 456
min_widget_width$22 = 484
n$23 = 516
RAD_MIN$24 = 548
RAD_MAX$25 = 580
rad$26 = 612
canvas_width$27 = 644
offset_x$28 = 676
offset_y$29 = 708
p1$30 = 744
$T31 = 1348
$T32 = 1380
$T33 = 1412
$T34 = 1444
$T35 = 1476
$T36 = 1508
$T37 = 1540
$T38 = 1572
$T39 = 1604
$T40 = 1636
$T41 = 1668
$T42 = 1704
tv860 = 1716
tv850 = 1716
tv605 = 1716
tv596 = 1716
tv587 = 1716
tv184 = 1716
tv174 = 1716
tv169 = 1716
tv159 = 1716
tv154 = 1716
tv144 = 1716
tv1153 = 1720
tv1147 = 1720
tv784 = 1720
tv504 = 1720
tv507 = 1728
tv510 = 1736
tv545 = 1744
__$ArrayPad$ = 1752
ref$ = 1792
?dtor$1@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA PROC ; `ImGui::ShowStyleEditor'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS1@?CJ@??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA
  00042	e8 00 00 00 00	 call	 _Init_thread_abort
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?dtor$1@?0??ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z@4HA ENDP ; `ImGui::ShowStyleEditor'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowAboutWindow@ImGui@@YAXPEA_N@Z
_TEXT	SEGMENT
io$4 = 8
style$5 = 40
copy_to_clipboard$6 = 68
child_size$7 = 104
$T8 = 324
tv355 = 344
tv165 = 344
tv159 = 344
__$ArrayPad$ = 352
p_open$ = 400
?ShowAboutWindow@ImGui@@YAXPEA_N@Z PROC			; ImGui::ShowAboutWindow, COMDAT

; 5900 : {

$LN31:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+456]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 60 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 5901 :     if (!ImGui::Begin("About Dear ImGui", p_open, ImGuiWindowFlags_AlwaysAutoResize))

  0003b	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00041	48 8b 95 90 01
	00 00		 mov	 rdx, QWORD PTR p_open$[rbp]
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NKKLPDOL@About?5Dear?5ImGui?$AA@
  0004f	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin
  00054	0f b6 c0	 movzx	 eax, al
  00057	85 c0		 test	 eax, eax
  00059	75 0a		 jne	 SHORT $LN5@ShowAboutW

; 5902 :     {
; 5903 :         ImGui::End();

  0005b	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 5904 :         return;

  00060	e9 c2 05 00 00	 jmp	 $LN1@ShowAboutW
$LN5@ShowAboutW:
$LN4@ShowAboutW:

; 5905 :     }
; 5906 :     IMGUI_DEMO_MARKER("Tools/About Dear ImGui");

  00065	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0006d	74 26		 je	 SHORT $LN6@ShowAboutW
  0006f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowAboutWindow@ImGui@@YAXPEA_N@Z@4JA
  00075	83 c0 06	 add	 eax, 6
  00078	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  0007f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@FIOEKAIP@Tools?1About?5Dear?5ImGui?$AA@
  00086	8b d0		 mov	 edx, eax
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN6@ShowAboutW:
  00095	33 c0		 xor	 eax, eax
  00097	85 c0		 test	 eax, eax
  00099	75 ca		 jne	 SHORT $LN4@ShowAboutW

; 5907 :     ImGui::Text("Dear ImGui %s", ImGui::GetVersion());

  0009b	e8 00 00 00 00	 call	 ?GetVersion@ImGui@@YAPEBDXZ ; ImGui::GetVersion
  000a0	48 8b d0	 mov	 rdx, rax
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NCHBJMJF@Dear?5ImGui?5?$CFs?$AA@
  000aa	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5908 :     ImGui::Separator();

  000af	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 5909 :     ImGui::Text("By Omar Cornut and all Dear ImGui contributors.");

  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DA@LADNBCJ@By?5Omar?5Cornut?5and?5all?5Dear?5ImGu@
  000bb	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5910 :     ImGui::Text("Dear ImGui is licensed under the MIT License, see LICENSE for more information.");

  000c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FA@NMHKMBMB@Dear?5ImGui?5is?5licensed?5under?5the@
  000c7	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5911 : 
; 5912 :     static bool show_config_info = false;
; 5913 :     ImGui::Checkbox("Config/Build Information", &show_config_info);

  000cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?show_config_info@?1??ShowAboutWindow@ImGui@@YAXPEA_N@Z@4_NA
  000d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@CEAKAMCE@Config?1Build?5Information?$AA@
  000da	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 5914 :     if (show_config_info)

  000df	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_config_info@?1??ShowAboutWindow@ImGui@@YAXPEA_N@Z@4_NA
  000e6	85 c0		 test	 eax, eax
  000e8	0f 84 34 05 00
	00		 je	 $LN7@ShowAboutW

; 5915 :     {
; 5916 :         ImGuiIO& io = ImGui::GetIO();

  000ee	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  000f3	48 89 45 08	 mov	 QWORD PTR io$4[rbp], rax

; 5917 :         ImGuiStyle& style = ImGui::GetStyle();

  000f7	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ ; ImGui::GetStyle
  000fc	48 89 45 28	 mov	 QWORD PTR style$5[rbp], rax

; 5918 : 
; 5919 :         bool copy_to_clipboard = ImGui::Button("Copy to clipboard");

  00100	0f 57 d2	 xorps	 xmm2, xmm2
  00103	0f 57 c9	 xorps	 xmm1, xmm1
  00106	48 8d 8d 44 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0010d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00112	48 8b d0	 mov	 rdx, rax
  00115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@JBNIPPJL@Copy?5to?5clipboard?$AA@
  0011c	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00121	88 45 44	 mov	 BYTE PTR copy_to_clipboard$6[rbp], al

; 5920 :         ImVec2 child_size = ImVec2(0, ImGui::GetTextLineHeightWithSpacing() * 18);

  00124	e8 00 00 00 00	 call	 ?GetTextLineHeightWithSpacing@ImGui@@YAMXZ ; ImGui::GetTextLineHeightWithSpacing
  00129	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41900000
  00131	0f 28 d0	 movaps	 xmm2, xmm0
  00134	0f 57 c9	 xorps	 xmm1, xmm1
  00137	48 8d 4d 68	 lea	 rcx, QWORD PTR child_size$7[rbp]
  0013b	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 5921 :         ImGui::BeginChildFrame(ImGui::GetID("cfg_infos"), child_size, ImGuiWindowFlags_NoMove);

  00140	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09FGECHJGB@cfg_infos?$AA@
  00147	e8 00 00 00 00	 call	 ?GetID@ImGui@@YAIPEBD@Z	; ImGui::GetID
  0014c	41 b8 04 00 00
	00		 mov	 r8d, 4
  00152	48 8d 55 68	 lea	 rdx, QWORD PTR child_size$7[rbp]
  00156	8b c8		 mov	 ecx, eax
  00158	e8 00 00 00 00	 call	 ?BeginChildFrame@ImGui@@YA_NIAEBUImVec2@@H@Z ; ImGui::BeginChildFrame

; 5922 :         if (copy_to_clipboard)

  0015d	0f b6 45 44	 movzx	 eax, BYTE PTR copy_to_clipboard$6[rbp]
  00161	85 c0		 test	 eax, eax
  00163	74 16		 je	 SHORT $LN8@ShowAboutW

; 5923 :         {
; 5924 :             ImGui::LogToClipboard();

  00165	b9 ff ff ff ff	 mov	 ecx, -1
  0016a	e8 00 00 00 00	 call	 ?LogToClipboard@ImGui@@YAXH@Z ; ImGui::LogToClipboard

; 5925 :             ImGui::LogText("```\n"); // Back quotes will make text appears without formatting when pasting on GitHub

  0016f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04CJPBKLAG@?$GA?$GA?$GA?6?$AA@
  00176	e8 00 00 00 00	 call	 ?LogText@ImGui@@YAXPEBDZZ ; ImGui::LogText
$LN8@ShowAboutW:

; 5926 :         }
; 5927 : 
; 5928 :         ImGui::Text("Dear ImGui %s (%d)", IMGUI_VERSION, IMGUI_VERSION_NUM);

  0017b	41 b8 ec 49 00
	00		 mov	 r8d, 18924		; 000049ecH
  00181	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@GMOEAHPG@1?489?43?5WIP?$AA@
  00188	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@GCCEJBGO@Dear?5ImGui?5?$CFs?5?$CI?$CFd?$CJ?$AA@
  0018f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5929 :         ImGui::Separator();

  00194	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 5930 :         ImGui::Text("sizeof(size_t): %d, sizeof(ImDrawIdx): %d, sizeof(ImDrawVert): %d", (int)sizeof(size_t), (int)sizeof(ImDrawIdx), (int)sizeof(ImDrawVert));

  00199	41 b9 14 00 00
	00		 mov	 r9d, 20
  0019f	41 b8 02 00 00
	00		 mov	 r8d, 2
  001a5	ba 08 00 00 00	 mov	 edx, 8
  001aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EC@BJAMNCHD@sizeof?$CIsize_t?$CJ?3?5?$CFd?0?5sizeof?$CIImDra@
  001b1	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5931 :         ImGui::Text("define: __cplusplus=%d", (int)__cplusplus);

  001b6	ba 1f 0c 03 00	 mov	 edx, 199711		; 00030c1fH
  001bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KGAJBCNH@define?3?5__cplusplus?$DN?$CFd?$AA@
  001c2	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5932 : #ifdef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
; 5933 :         ImGui::Text("define: IMGUI_DISABLE_OBSOLETE_FUNCTIONS");
; 5934 : #endif
; 5935 : #ifdef IMGUI_DISABLE_OBSOLETE_KEYIO
; 5936 :         ImGui::Text("define: IMGUI_DISABLE_OBSOLETE_KEYIO");
; 5937 : #endif
; 5938 : #ifdef IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS
; 5939 :         ImGui::Text("define: IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS");
; 5940 : #endif
; 5941 : #ifdef IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS
; 5942 :         ImGui::Text("define: IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS");
; 5943 : #endif
; 5944 : #ifdef IMGUI_DISABLE_WIN32_FUNCTIONS
; 5945 :         ImGui::Text("define: IMGUI_DISABLE_WIN32_FUNCTIONS");
; 5946 : #endif
; 5947 : #ifdef IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS
; 5948 :         ImGui::Text("define: IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS");
; 5949 : #endif
; 5950 : #ifdef IMGUI_DISABLE_DEFAULT_MATH_FUNCTIONS
; 5951 :         ImGui::Text("define: IMGUI_DISABLE_DEFAULT_MATH_FUNCTIONS");
; 5952 : #endif
; 5953 : #ifdef IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS
; 5954 :         ImGui::Text("define: IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS");
; 5955 : #endif
; 5956 : #ifdef IMGUI_DISABLE_FILE_FUNCTIONS
; 5957 :         ImGui::Text("define: IMGUI_DISABLE_FILE_FUNCTIONS");
; 5958 : #endif
; 5959 : #ifdef IMGUI_DISABLE_DEFAULT_ALLOCATORS
; 5960 :         ImGui::Text("define: IMGUI_DISABLE_DEFAULT_ALLOCATORS");
; 5961 : #endif
; 5962 : #ifdef IMGUI_USE_BGRA_PACKED_COLOR
; 5963 :         ImGui::Text("define: IMGUI_USE_BGRA_PACKED_COLOR");
; 5964 : #endif
; 5965 : #ifdef _WIN32
; 5966 :         ImGui::Text("define: _WIN32");

  001c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@KFJLIPEJ@define?3?5_WIN32?$AA@
  001ce	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5967 : #endif
; 5968 : #ifdef _WIN64
; 5969 :         ImGui::Text("define: _WIN64");

  001d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@PFAKOKCE@define?3?5_WIN64?$AA@
  001da	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5970 : #endif
; 5971 : #ifdef __linux__
; 5972 :         ImGui::Text("define: __linux__");
; 5973 : #endif
; 5974 : #ifdef __APPLE__
; 5975 :         ImGui::Text("define: __APPLE__");
; 5976 : #endif
; 5977 : #ifdef _MSC_VER
; 5978 :         ImGui::Text("define: _MSC_VER=%d", _MSC_VER);

  001df	ba 6c 07 00 00	 mov	 edx, 1900		; 0000076cH
  001e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@JHNIDJHD@define?3?5_MSC_VER?$DN?$CFd?$AA@
  001eb	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5979 : #endif
; 5980 : #ifdef _MSVC_LANG
; 5981 :         ImGui::Text("define: _MSVC_LANG=%d", (int)_MSVC_LANG);

  001f0	ba ba 12 03 00	 mov	 edx, 201402		; 000312baH
  001f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@LLKICGOL@define?3?5_MSVC_LANG?$DN?$CFd?$AA@
  001fc	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5982 : #endif
; 5983 : #ifdef __MINGW32__
; 5984 :         ImGui::Text("define: __MINGW32__");
; 5985 : #endif
; 5986 : #ifdef __MINGW64__
; 5987 :         ImGui::Text("define: __MINGW64__");
; 5988 : #endif
; 5989 : #ifdef __GNUC__
; 5990 :         ImGui::Text("define: __GNUC__=%d", (int)__GNUC__);
; 5991 : #endif
; 5992 : #ifdef __clang_version__
; 5993 :         ImGui::Text("define: __clang_version__=%s", __clang_version__);
; 5994 : #endif
; 5995 :         ImGui::Separator();

  00201	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 5996 :         ImGui::Text("io.BackendPlatformName: %s", io.BackendPlatformName ? io.BackendPlatformName : "NULL");

  00206	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  0020a	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00212	74 14		 je	 SHORT $LN27@ShowAboutW
  00214	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  00218	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0021f	48 89 85 58 01
	00 00		 mov	 QWORD PTR tv159[rbp], rax
  00226	eb 0e		 jmp	 SHORT $LN28@ShowAboutW
$LN27@ShowAboutW:
  00228	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04HIBGFPH@NULL?$AA@
  0022f	48 89 85 58 01
	00 00		 mov	 QWORD PTR tv159[rbp], rax
$LN28@ShowAboutW:
  00236	48 8b 95 58 01
	00 00		 mov	 rdx, QWORD PTR tv159[rbp]
  0023d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@DHJKNAPN@io?4BackendPlatformName?3?5?$CFs?$AA@
  00244	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5997 :         ImGui::Text("io.BackendRendererName: %s", io.BackendRendererName ? io.BackendRendererName : "NULL");

  00249	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  0024d	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  00255	74 14		 je	 SHORT $LN29@ShowAboutW
  00257	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  0025b	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00262	48 89 85 58 01
	00 00		 mov	 QWORD PTR tv165[rbp], rax
  00269	eb 0e		 jmp	 SHORT $LN30@ShowAboutW
$LN29@ShowAboutW:
  0026b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04HIBGFPH@NULL?$AA@
  00272	48 89 85 58 01
	00 00		 mov	 QWORD PTR tv165[rbp], rax
$LN30@ShowAboutW:
  00279	48 8b 95 58 01
	00 00		 mov	 rdx, QWORD PTR tv165[rbp]
  00280	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@HCPCDKOE@io?4BackendRendererName?3?5?$CFs?$AA@
  00287	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5998 :         ImGui::Text("io.ConfigFlags: 0x%08X", io.ConfigFlags);

  0028c	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  00290	8b 10		 mov	 edx, DWORD PTR [rax]
  00292	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@DILJIOHM@io?4ConfigFlags?3?50x?$CF08X?$AA@
  00299	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 5999 :         if (io.ConfigFlags & ImGuiConfigFlags_NavEnableKeyboard)        ImGui::Text(" NavEnableKeyboard");

  0029e	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  002a2	8b 00		 mov	 eax, DWORD PTR [rax]
  002a4	83 e0 01	 and	 eax, 1
  002a7	85 c0		 test	 eax, eax
  002a9	74 0c		 je	 SHORT $LN9@ShowAboutW
  002ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@CKENCLMO@?5NavEnableKeyboard?$AA@
  002b2	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN9@ShowAboutW:

; 6000 :         if (io.ConfigFlags & ImGuiConfigFlags_NavEnableGamepad)         ImGui::Text(" NavEnableGamepad");

  002b7	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  002bb	8b 00		 mov	 eax, DWORD PTR [rax]
  002bd	83 e0 02	 and	 eax, 2
  002c0	85 c0		 test	 eax, eax
  002c2	74 0c		 je	 SHORT $LN10@ShowAboutW
  002c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@PFLKKAGF@?5NavEnableGamepad?$AA@
  002cb	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN10@ShowAboutW:

; 6001 :         if (io.ConfigFlags & ImGuiConfigFlags_NavEnableSetMousePos)     ImGui::Text(" NavEnableSetMousePos");

  002d0	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  002d4	8b 00		 mov	 eax, DWORD PTR [rax]
  002d6	83 e0 04	 and	 eax, 4
  002d9	85 c0		 test	 eax, eax
  002db	74 0c		 je	 SHORT $LN11@ShowAboutW
  002dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@KOLHMNKG@?5NavEnableSetMousePos?$AA@
  002e4	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN11@ShowAboutW:

; 6002 :         if (io.ConfigFlags & ImGuiConfigFlags_NavNoCaptureKeyboard)     ImGui::Text(" NavNoCaptureKeyboard");

  002e9	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  002ed	8b 00		 mov	 eax, DWORD PTR [rax]
  002ef	83 e0 08	 and	 eax, 8
  002f2	85 c0		 test	 eax, eax
  002f4	74 0c		 je	 SHORT $LN12@ShowAboutW
  002f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@DGPFDLKM@?5NavNoCaptureKeyboard?$AA@
  002fd	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN12@ShowAboutW:

; 6003 :         if (io.ConfigFlags & ImGuiConfigFlags_NoMouse)                  ImGui::Text(" NoMouse");

  00302	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  00306	8b 00		 mov	 eax, DWORD PTR [rax]
  00308	83 e0 10	 and	 eax, 16
  0030b	85 c0		 test	 eax, eax
  0030d	74 0c		 je	 SHORT $LN13@ShowAboutW
  0030f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08GAJGGFEK@?5NoMouse?$AA@
  00316	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN13@ShowAboutW:

; 6004 :         if (io.ConfigFlags & ImGuiConfigFlags_NoMouseCursorChange)      ImGui::Text(" NoMouseCursorChange");

  0031b	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  0031f	8b 00		 mov	 eax, DWORD PTR [rax]
  00321	83 e0 20	 and	 eax, 32			; 00000020H
  00324	85 c0		 test	 eax, eax
  00326	74 0c		 je	 SHORT $LN14@ShowAboutW
  00328	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@LKMNGEAI@?5NoMouseCursorChange?$AA@
  0032f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN14@ShowAboutW:

; 6005 :         if (io.MouseDrawCursor)                                         ImGui::Text("io.MouseDrawCursor");

  00334	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  00338	0f b6 40 70	 movzx	 eax, BYTE PTR [rax+112]
  0033c	85 c0		 test	 eax, eax
  0033e	74 0c		 je	 SHORT $LN15@ShowAboutW
  00340	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@PFDMJJAG@io?4MouseDrawCursor?$AA@
  00347	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN15@ShowAboutW:

; 6006 :         if (io.ConfigMacOSXBehaviors)                                   ImGui::Text("io.ConfigMacOSXBehaviors");

  0034c	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  00350	0f b6 40 71	 movzx	 eax, BYTE PTR [rax+113]
  00354	85 c0		 test	 eax, eax
  00356	74 0c		 je	 SHORT $LN16@ShowAboutW
  00358	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@PEAELIMN@io?4ConfigMacOSXBehaviors?$AA@
  0035f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN16@ShowAboutW:

; 6007 :         if (io.ConfigInputTextCursorBlink)                              ImGui::Text("io.ConfigInputTextCursorBlink");

  00364	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  00368	0f b6 40 73	 movzx	 eax, BYTE PTR [rax+115]
  0036c	85 c0		 test	 eax, eax
  0036e	74 0c		 je	 SHORT $LN17@ShowAboutW
  00370	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@GBANMLLJ@io?4ConfigInputTextCursorBlink?$AA@
  00377	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN17@ShowAboutW:

; 6008 :         if (io.ConfigWindowsResizeFromEdges)                            ImGui::Text("io.ConfigWindowsResizeFromEdges");

  0037c	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  00380	0f b6 40 76	 movzx	 eax, BYTE PTR [rax+118]
  00384	85 c0		 test	 eax, eax
  00386	74 0c		 je	 SHORT $LN18@ShowAboutW
  00388	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@IFIIDADM@io?4ConfigWindowsResizeFromEdges?$AA@
  0038f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN18@ShowAboutW:

; 6009 :         if (io.ConfigWindowsMoveFromTitleBarOnly)                       ImGui::Text("io.ConfigWindowsMoveFromTitleBarOnly");

  00394	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  00398	0f b6 40 77	 movzx	 eax, BYTE PTR [rax+119]
  0039c	85 c0		 test	 eax, eax
  0039e	74 0c		 je	 SHORT $LN19@ShowAboutW
  003a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@PKBLIGGG@io?4ConfigWindowsMoveFromTitleBar@
  003a7	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN19@ShowAboutW:

; 6010 :         if (io.ConfigMemoryCompactTimer >= 0.0f)                        ImGui::Text("io.ConfigMemoryCompactTimer = %.1f", io.ConfigMemoryCompactTimer);

  003ac	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  003b0	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [rax+120]
  003b5	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  003bc	72 1d		 jb	 SHORT $LN20@ShowAboutW
  003be	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  003c2	f3 0f 5a 40 78	 cvtss2sd xmm0, DWORD PTR [rax+120]
  003c7	0f 28 c8	 movaps	 xmm1, xmm0
  003ca	66 48 0f 7e ca	 movq	 rdx, xmm1
  003cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@LAKMNGBL@io?4ConfigMemoryCompactTimer?5?$DN?5?$CF?4@
  003d6	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN20@ShowAboutW:

; 6011 :         ImGui::Text("io.BackendFlags: 0x%08X", io.BackendFlags);

  003db	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  003df	8b 50 04	 mov	 edx, DWORD PTR [rax+4]
  003e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@GNGLPDFI@io?4BackendFlags?3?50x?$CF08X?$AA@
  003e9	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 6012 :         if (io.BackendFlags & ImGuiBackendFlags_HasGamepad)             ImGui::Text(" HasGamepad");

  003ee	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  003f2	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  003f5	83 e0 01	 and	 eax, 1
  003f8	85 c0		 test	 eax, eax
  003fa	74 0c		 je	 SHORT $LN21@ShowAboutW
  003fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@MPABENKI@?5HasGamepad?$AA@
  00403	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN21@ShowAboutW:

; 6013 :         if (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors)        ImGui::Text(" HasMouseCursors");

  00408	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  0040c	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0040f	83 e0 02	 and	 eax, 2
  00412	85 c0		 test	 eax, eax
  00414	74 0c		 je	 SHORT $LN22@ShowAboutW
  00416	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NNHFCGPM@?5HasMouseCursors?$AA@
  0041d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN22@ShowAboutW:

; 6014 :         if (io.BackendFlags & ImGuiBackendFlags_HasSetMousePos)         ImGui::Text(" HasSetMousePos");

  00422	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  00426	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00429	83 e0 04	 and	 eax, 4
  0042c	85 c0		 test	 eax, eax
  0042e	74 0c		 je	 SHORT $LN23@ShowAboutW
  00430	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@EKJHBGEP@?5HasSetMousePos?$AA@
  00437	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN23@ShowAboutW:

; 6015 :         if (io.BackendFlags & ImGuiBackendFlags_RendererHasVtxOffset)   ImGui::Text(" RendererHasVtxOffset");

  0043c	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  00440	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00443	83 e0 08	 and	 eax, 8
  00446	85 c0		 test	 eax, eax
  00448	74 0c		 je	 SHORT $LN24@ShowAboutW
  0044a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@GFLBPJOL@?5RendererHasVtxOffset?$AA@
  00451	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN24@ShowAboutW:

; 6016 :         ImGui::Separator();

  00456	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 6017 :         ImGui::Text("io.Fonts: %d fonts, Flags: 0x%08X, TexSize: %d,%d", io.Fonts->Fonts.Size, io.Fonts->Flags, io.Fonts->TexWidth, io.Fonts->TexHeight);

  0045b	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  0045f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00463	48 8b 4d 08	 mov	 rcx, QWORD PTR io$4[rbp]
  00467	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  0046b	48 8b 55 08	 mov	 rdx, QWORD PTR io$4[rbp]
  0046f	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00473	4c 8b 45 08	 mov	 r8, QWORD PTR io$4[rbp]
  00477	4d 8b 40 50	 mov	 r8, QWORD PTR [r8+80]
  0047b	4c 89 85 58 01
	00 00		 mov	 QWORD PTR tv355[rbp], r8
  00482	8b 40 44	 mov	 eax, DWORD PTR [rax+68]
  00485	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00489	44 8b 49 40	 mov	 r9d, DWORD PTR [rcx+64]
  0048d	44 8b 02	 mov	 r8d, DWORD PTR [rdx]
  00490	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR tv355[rbp]
  00497	8b 50 58	 mov	 edx, DWORD PTR [rax+88]
  0049a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DC@CPKPHKKN@io?4Fonts?3?5?$CFd?5fonts?0?5Flags?3?50x?$CF08@
  004a1	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 6018 :         ImGui::Text("io.DisplaySize: %.2f,%.2f", io.DisplaySize.x, io.DisplaySize.y);

  004a6	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  004aa	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [rax+12]
  004af	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  004b3	f3 0f 5a 48 08	 cvtss2sd xmm1, DWORD PTR [rax+8]
  004b8	0f 28 d0	 movaps	 xmm2, xmm0
  004bb	66 49 0f 7e d0	 movq	 r8, xmm2
  004c0	66 48 0f 7e ca	 movq	 rdx, xmm1
  004c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@EIINOCEN@io?4DisplaySize?3?5?$CF?42f?0?$CF?42f?$AA@
  004cc	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 6019 :         ImGui::Text("io.DisplayFramebufferScale: %.2f,%.2f", io.DisplayFramebufferScale.x, io.DisplayFramebufferScale.y);

  004d1	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  004d5	f3 0f 5a 40 6c	 cvtss2sd xmm0, DWORD PTR [rax+108]
  004da	48 8b 45 08	 mov	 rax, QWORD PTR io$4[rbp]
  004de	f3 0f 5a 48 68	 cvtss2sd xmm1, DWORD PTR [rax+104]
  004e3	0f 28 d0	 movaps	 xmm2, xmm0
  004e6	66 49 0f 7e d0	 movq	 r8, xmm2
  004eb	66 48 0f 7e ca	 movq	 rdx, xmm1
  004f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@MDJEGDDF@io?4DisplayFramebufferScale?3?5?$CF?42f@
  004f7	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 6020 :         ImGui::Separator();

  004fc	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 6021 :         ImGui::Text("style.WindowPadding: %.2f,%.2f", style.WindowPadding.x, style.WindowPadding.y);

  00501	48 8b 45 28	 mov	 rax, QWORD PTR style$5[rbp]
  00505	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [rax+12]
  0050a	48 8b 45 28	 mov	 rax, QWORD PTR style$5[rbp]
  0050e	f3 0f 5a 48 08	 cvtss2sd xmm1, DWORD PTR [rax+8]
  00513	0f 28 d0	 movaps	 xmm2, xmm0
  00516	66 49 0f 7e d0	 movq	 r8, xmm2
  0051b	66 48 0f 7e ca	 movq	 rdx, xmm1
  00520	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@CFKGJLOD@style?4WindowPadding?3?5?$CF?42f?0?$CF?42f?$AA@
  00527	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 6022 :         ImGui::Text("style.WindowBorderSize: %.2f", style.WindowBorderSize);

  0052c	48 8b 45 28	 mov	 rax, QWORD PTR style$5[rbp]
  00530	f3 0f 5a 40 14	 cvtss2sd xmm0, DWORD PTR [rax+20]
  00535	0f 28 c8	 movaps	 xmm1, xmm0
  00538	66 48 0f 7e ca	 movq	 rdx, xmm1
  0053d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@NGAGEFMI@style?4WindowBorderSize?3?5?$CF?42f?$AA@
  00544	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 6023 :         ImGui::Text("style.FramePadding: %.2f,%.2f", style.FramePadding.x, style.FramePadding.y);

  00549	48 8b 45 28	 mov	 rax, QWORD PTR style$5[rbp]
  0054d	f3 0f 5a 40 40	 cvtss2sd xmm0, DWORD PTR [rax+64]
  00552	48 8b 45 28	 mov	 rax, QWORD PTR style$5[rbp]
  00556	f3 0f 5a 48 3c	 cvtss2sd xmm1, DWORD PTR [rax+60]
  0055b	0f 28 d0	 movaps	 xmm2, xmm0
  0055e	66 49 0f 7e d0	 movq	 r8, xmm2
  00563	66 48 0f 7e ca	 movq	 rdx, xmm1
  00568	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@GOMLHPA@style?4FramePadding?3?5?$CF?42f?0?$CF?42f?$AA@
  0056f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 6024 :         ImGui::Text("style.FrameRounding: %.2f", style.FrameRounding);

  00574	48 8b 45 28	 mov	 rax, QWORD PTR style$5[rbp]
  00578	f3 0f 5a 40 44	 cvtss2sd xmm0, DWORD PTR [rax+68]
  0057d	0f 28 c8	 movaps	 xmm1, xmm0
  00580	66 48 0f 7e ca	 movq	 rdx, xmm1
  00585	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@INLCDPGI@style?4FrameRounding?3?5?$CF?42f?$AA@
  0058c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 6025 :         ImGui::Text("style.FrameBorderSize: %.2f", style.FrameBorderSize);

  00591	48 8b 45 28	 mov	 rax, QWORD PTR style$5[rbp]
  00595	f3 0f 5a 40 48	 cvtss2sd xmm0, DWORD PTR [rax+72]
  0059a	0f 28 c8	 movaps	 xmm1, xmm0
  0059d	66 48 0f 7e ca	 movq	 rdx, xmm1
  005a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@JEFFCPEF@style?4FrameBorderSize?3?5?$CF?42f?$AA@
  005a9	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 6026 :         ImGui::Text("style.ItemSpacing: %.2f,%.2f", style.ItemSpacing.x, style.ItemSpacing.y);

  005ae	48 8b 45 28	 mov	 rax, QWORD PTR style$5[rbp]
  005b2	f3 0f 5a 40 50	 cvtss2sd xmm0, DWORD PTR [rax+80]
  005b7	48 8b 45 28	 mov	 rax, QWORD PTR style$5[rbp]
  005bb	f3 0f 5a 48 4c	 cvtss2sd xmm1, DWORD PTR [rax+76]
  005c0	0f 28 d0	 movaps	 xmm2, xmm0
  005c3	66 49 0f 7e d0	 movq	 r8, xmm2
  005c8	66 48 0f 7e ca	 movq	 rdx, xmm1
  005cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@DHGOAPDN@style?4ItemSpacing?3?5?$CF?42f?0?$CF?42f?$AA@
  005d4	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 6027 :         ImGui::Text("style.ItemInnerSpacing: %.2f,%.2f", style.ItemInnerSpacing.x, style.ItemInnerSpacing.y);

  005d9	48 8b 45 28	 mov	 rax, QWORD PTR style$5[rbp]
  005dd	f3 0f 5a 40 58	 cvtss2sd xmm0, DWORD PTR [rax+88]
  005e2	48 8b 45 28	 mov	 rax, QWORD PTR style$5[rbp]
  005e6	f3 0f 5a 48 54	 cvtss2sd xmm1, DWORD PTR [rax+84]
  005eb	0f 28 d0	 movaps	 xmm2, xmm0
  005ee	66 49 0f 7e d0	 movq	 r8, xmm2
  005f3	66 48 0f 7e ca	 movq	 rdx, xmm1
  005f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@ECALHKFF@style?4ItemInnerSpacing?3?5?$CF?42f?0?$CF?42@
  005ff	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 6028 : 
; 6029 :         if (copy_to_clipboard)

  00604	0f b6 45 44	 movzx	 eax, BYTE PTR copy_to_clipboard$6[rbp]
  00608	85 c0		 test	 eax, eax
  0060a	74 11		 je	 SHORT $LN25@ShowAboutW

; 6030 :         {
; 6031 :             ImGui::LogText("\n```\n");

  0060c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05PPIKNONO@?6?$GA?$GA?$GA?6?$AA@
  00613	e8 00 00 00 00	 call	 ?LogText@ImGui@@YAXPEBDZZ ; ImGui::LogText

; 6032 :             ImGui::LogFinish();

  00618	e8 00 00 00 00	 call	 ?LogFinish@ImGui@@YAXXZ	; ImGui::LogFinish
$LN25@ShowAboutW:

; 6033 :         }
; 6034 :         ImGui::EndChildFrame();

  0061d	e8 00 00 00 00	 call	 ?EndChildFrame@ImGui@@YAXXZ ; ImGui::EndChildFrame
$LN7@ShowAboutW:

; 6035 :     }
; 6036 :     ImGui::End();

  00622	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN1@ShowAboutW:

; 6037 : }

  00627	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  0062b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShowAboutWindow@ImGui@@YAXPEA_N@Z$rtcFrameData
  00632	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00637	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0063e	48 33 cd	 xor	 rcx, rbp
  00641	e8 00 00 00 00	 call	 __security_check_cookie
  00646	48 8d a5 78 01
	00 00		 lea	 rsp, QWORD PTR [rbp+376]
  0064d	5f		 pop	 rdi
  0064e	5d		 pop	 rbp
  0064f	c3		 ret	 0
?ShowAboutWindow@ImGui@@YAXPEA_N@Z ENDP			; ImGui::ShowAboutWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\github\framework\tool\imgui\imgui_demo.cpp
;	COMDAT ?ShowDemoWindow@ImGui@@YAXPEA_N@Z
_TEXT	SEGMENT
window_flags$ = 4
main_viewport$ = 40
has_debug_tools$4 = 68
io$5 = 104
backend_flags$6 = 132
$T7 = 356
$T8 = 388
$T9 = 420
$T10 = 452
$T11 = 484
tv226 = 504
__$ArrayPad$ = 512
p_open$ = 560
?ShowDemoWindow@ImGui@@YAXPEA_N@Z PROC			; ImGui::ShowDemoWindow, COMDAT

; 248  : {

$LN87:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 02
	00 00		 sub	 rsp, 584		; 00000248H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 92 00 00 00	 mov	 ecx, 146		; 00000092H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR [rsp+616]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 00 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 249  :     // Exceptionally add an extra assert here for people confused about initial Dear ImGui setup
; 250  :     // Most functions would normally just crash if the context is missing.
; 251  :     IM_ASSERT(ImGui::GetCurrentContext() != NULL && "Missing dear imgui context. Refer to examples app!");

  0003b	e8 00 00 00 00	 call	 ?GetCurrentContext@ImGui@@YAPEAUImGuiContext@@XZ ; ImGui::GetCurrentContext
  00040	48 85 c0	 test	 rax, rax
  00043	74 0c		 je	 SHORT $LN85@ShowDemoWi
  00045	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DD@MGKHNCLH@Missing?5dear?5imgui?5context?4?5Refe@
  0004c	48 85 c0	 test	 rax, rax
  0004f	75 22		 jne	 SHORT $LN86@ShowDemoWi
$LN85@ShowDemoWi:
  00051	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4JA
  00057	83 c0 03	 add	 eax, 3
  0005a	44 8b c0	 mov	 r8d, eax
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FM@DPDGFNDC@?$AAc?$AA?3?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2?$AAf?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAt?$AAo?$AAo?$AAl?$AA?2?$AAi?$AAm?$AAg?$AAu?$AAi?$AA?2?$AAi@
  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1LA@COADBOEK@?$AAI?$AAm?$AAG?$AAu?$AAi?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5@
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00071	33 c0		 xor	 eax, eax
$LN86@ShowDemoWi:

; 252  : 
; 253  :     // Examples Apps (accessible from the "Examples" menu)
; 254  :     static bool show_app_main_menu_bar = false;
; 255  :     static bool show_app_documents = false;
; 256  :     static bool show_app_console = false;
; 257  :     static bool show_app_log = false;
; 258  :     static bool show_app_layout = false;
; 259  :     static bool show_app_property_editor = false;
; 260  :     static bool show_app_long_text = false;
; 261  :     static bool show_app_auto_resize = false;
; 262  :     static bool show_app_constrained_resize = false;
; 263  :     static bool show_app_simple_overlay = false;
; 264  :     static bool show_app_fullscreen = false;
; 265  :     static bool show_app_window_titles = false;
; 266  :     static bool show_app_custom_rendering = false;
; 267  : 
; 268  :     if (show_app_main_menu_bar)       ShowExampleAppMainMenuBar();

  00073	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_main_menu_bar@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  0007a	85 c0		 test	 eax, eax
  0007c	74 05		 je	 SHORT $LN29@ShowDemoWi
  0007e	e8 00 00 00 00	 call	 ?ShowExampleAppMainMenuBar@@YAXXZ ; ShowExampleAppMainMenuBar
$LN29@ShowDemoWi:

; 269  :     if (show_app_documents)           ShowExampleAppDocuments(&show_app_documents);

  00083	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_documents@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  0008a	85 c0		 test	 eax, eax
  0008c	74 0c		 je	 SHORT $LN30@ShowDemoWi
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?show_app_documents@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00095	e8 00 00 00 00	 call	 ?ShowExampleAppDocuments@@YAXPEA_N@Z ; ShowExampleAppDocuments
$LN30@ShowDemoWi:

; 270  :     if (show_app_console)             ShowExampleAppConsole(&show_app_console);

  0009a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_console@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  000a1	85 c0		 test	 eax, eax
  000a3	74 0c		 je	 SHORT $LN31@ShowDemoWi
  000a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?show_app_console@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  000ac	e8 00 00 00 00	 call	 ?ShowExampleAppConsole@@YAXPEA_N@Z ; ShowExampleAppConsole
$LN31@ShowDemoWi:

; 271  :     if (show_app_log)                 ShowExampleAppLog(&show_app_log);

  000b1	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_log@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  000b8	85 c0		 test	 eax, eax
  000ba	74 0c		 je	 SHORT $LN32@ShowDemoWi
  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?show_app_log@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  000c3	e8 00 00 00 00	 call	 ?ShowExampleAppLog@@YAXPEA_N@Z ; ShowExampleAppLog
$LN32@ShowDemoWi:

; 272  :     if (show_app_layout)              ShowExampleAppLayout(&show_app_layout);

  000c8	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_layout@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  000cf	85 c0		 test	 eax, eax
  000d1	74 0c		 je	 SHORT $LN33@ShowDemoWi
  000d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?show_app_layout@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  000da	e8 00 00 00 00	 call	 ?ShowExampleAppLayout@@YAXPEA_N@Z ; ShowExampleAppLayout
$LN33@ShowDemoWi:

; 273  :     if (show_app_property_editor)     ShowExampleAppPropertyEditor(&show_app_property_editor);

  000df	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_property_editor@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  000e6	85 c0		 test	 eax, eax
  000e8	74 0c		 je	 SHORT $LN34@ShowDemoWi
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?show_app_property_editor@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  000f1	e8 00 00 00 00	 call	 ?ShowExampleAppPropertyEditor@@YAXPEA_N@Z ; ShowExampleAppPropertyEditor
$LN34@ShowDemoWi:

; 274  :     if (show_app_long_text)           ShowExampleAppLongText(&show_app_long_text);

  000f6	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_long_text@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  000fd	85 c0		 test	 eax, eax
  000ff	74 0c		 je	 SHORT $LN35@ShowDemoWi
  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?show_app_long_text@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00108	e8 00 00 00 00	 call	 ?ShowExampleAppLongText@@YAXPEA_N@Z ; ShowExampleAppLongText
$LN35@ShowDemoWi:

; 275  :     if (show_app_auto_resize)         ShowExampleAppAutoResize(&show_app_auto_resize);

  0010d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_auto_resize@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00114	85 c0		 test	 eax, eax
  00116	74 0c		 je	 SHORT $LN36@ShowDemoWi
  00118	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?show_app_auto_resize@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  0011f	e8 00 00 00 00	 call	 ?ShowExampleAppAutoResize@@YAXPEA_N@Z ; ShowExampleAppAutoResize
$LN36@ShowDemoWi:

; 276  :     if (show_app_constrained_resize)  ShowExampleAppConstrainedResize(&show_app_constrained_resize);

  00124	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_constrained_resize@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  0012b	85 c0		 test	 eax, eax
  0012d	74 0c		 je	 SHORT $LN37@ShowDemoWi
  0012f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?show_app_constrained_resize@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00136	e8 00 00 00 00	 call	 ?ShowExampleAppConstrainedResize@@YAXPEA_N@Z ; ShowExampleAppConstrainedResize
$LN37@ShowDemoWi:

; 277  :     if (show_app_simple_overlay)      ShowExampleAppSimpleOverlay(&show_app_simple_overlay);

  0013b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_simple_overlay@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00142	85 c0		 test	 eax, eax
  00144	74 0c		 je	 SHORT $LN38@ShowDemoWi
  00146	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?show_app_simple_overlay@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  0014d	e8 00 00 00 00	 call	 ?ShowExampleAppSimpleOverlay@@YAXPEA_N@Z ; ShowExampleAppSimpleOverlay
$LN38@ShowDemoWi:

; 278  :     if (show_app_fullscreen)          ShowExampleAppFullscreen(&show_app_fullscreen);

  00152	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_fullscreen@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00159	85 c0		 test	 eax, eax
  0015b	74 0c		 je	 SHORT $LN39@ShowDemoWi
  0015d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?show_app_fullscreen@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00164	e8 00 00 00 00	 call	 ?ShowExampleAppFullscreen@@YAXPEA_N@Z ; ShowExampleAppFullscreen
$LN39@ShowDemoWi:

; 279  :     if (show_app_window_titles)       ShowExampleAppWindowTitles(&show_app_window_titles);

  00169	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_window_titles@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00170	85 c0		 test	 eax, eax
  00172	74 0c		 je	 SHORT $LN40@ShowDemoWi
  00174	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?show_app_window_titles@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  0017b	e8 00 00 00 00	 call	 ?ShowExampleAppWindowTitles@@YAXPEA_N@Z ; ShowExampleAppWindowTitles
$LN40@ShowDemoWi:

; 280  :     if (show_app_custom_rendering)    ShowExampleAppCustomRendering(&show_app_custom_rendering);

  00180	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_custom_rendering@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00187	85 c0		 test	 eax, eax
  00189	74 0c		 je	 SHORT $LN41@ShowDemoWi
  0018b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?show_app_custom_rendering@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00192	e8 00 00 00 00	 call	 ?ShowExampleAppCustomRendering@@YAXPEA_N@Z ; ShowExampleAppCustomRendering
$LN41@ShowDemoWi:

; 281  : 
; 282  :     // Dear ImGui Tools/Apps (accessible from the "Tools" menu)
; 283  :     static bool show_app_metrics = false;
; 284  :     static bool show_app_debug_log = false;
; 285  :     static bool show_app_stack_tool = false;
; 286  :     static bool show_app_about = false;
; 287  :     static bool show_app_style_editor = false;
; 288  : 
; 289  :     if (show_app_metrics)

  00197	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_metrics@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  0019e	85 c0		 test	 eax, eax
  001a0	74 0c		 je	 SHORT $LN42@ShowDemoWi

; 290  :         ImGui::ShowMetricsWindow(&show_app_metrics);

  001a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?show_app_metrics@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  001a9	e8 00 00 00 00	 call	 ?ShowMetricsWindow@ImGui@@YAXPEA_N@Z ; ImGui::ShowMetricsWindow
$LN42@ShowDemoWi:

; 291  :     if (show_app_debug_log)

  001ae	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_debug_log@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  001b5	85 c0		 test	 eax, eax
  001b7	74 0c		 je	 SHORT $LN43@ShowDemoWi

; 292  :         ImGui::ShowDebugLogWindow(&show_app_debug_log);

  001b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?show_app_debug_log@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  001c0	e8 00 00 00 00	 call	 ?ShowDebugLogWindow@ImGui@@YAXPEA_N@Z ; ImGui::ShowDebugLogWindow
$LN43@ShowDemoWi:

; 293  :     if (show_app_stack_tool)

  001c5	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_stack_tool@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  001cc	85 c0		 test	 eax, eax
  001ce	74 0c		 je	 SHORT $LN44@ShowDemoWi

; 294  :         ImGui::ShowStackToolWindow(&show_app_stack_tool);

  001d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?show_app_stack_tool@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  001d7	e8 00 00 00 00	 call	 ?ShowStackToolWindow@ImGui@@YAXPEA_N@Z ; ImGui::ShowStackToolWindow
$LN44@ShowDemoWi:

; 295  :     if (show_app_about)

  001dc	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_about@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  001e3	85 c0		 test	 eax, eax
  001e5	74 0c		 je	 SHORT $LN45@ShowDemoWi

; 296  :         ImGui::ShowAboutWindow(&show_app_about);

  001e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?show_app_about@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  001ee	e8 00 00 00 00	 call	 ?ShowAboutWindow@ImGui@@YAXPEA_N@Z ; ImGui::ShowAboutWindow
$LN45@ShowDemoWi:

; 297  :     if (show_app_style_editor)

  001f3	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_style_editor@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  001fa	85 c0		 test	 eax, eax
  001fc	74 22		 je	 SHORT $LN46@ShowDemoWi

; 298  :     {
; 299  :         ImGui::Begin("Dear ImGui Style Editor", &show_app_style_editor);

  001fe	45 33 c0	 xor	 r8d, r8d
  00201	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?show_app_style_editor@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00208	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@DDJBLHAK@Dear?5ImGui?5Style?5Editor?$AA@
  0020f	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin

; 300  :         ImGui::ShowStyleEditor();

  00214	33 c9		 xor	 ecx, ecx
  00216	e8 00 00 00 00	 call	 ?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z ; ImGui::ShowStyleEditor

; 301  :         ImGui::End();

  0021b	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN46@ShowDemoWi:

; 302  :     }
; 303  : 
; 304  :     // Demonstrate the various window flags. Typically you would just use the default!
; 305  :     static bool no_titlebar = false;
; 306  :     static bool no_scrollbar = false;
; 307  :     static bool no_menu = false;
; 308  :     static bool no_move = false;
; 309  :     static bool no_resize = false;
; 310  :     static bool no_collapse = false;
; 311  :     static bool no_close = false;
; 312  :     static bool no_nav = false;
; 313  :     static bool no_background = false;
; 314  :     static bool no_bring_to_front = false;
; 315  :     static bool unsaved_document = false;
; 316  : 
; 317  :     ImGuiWindowFlags window_flags = 0;

  00220	c7 45 04 00 00
	00 00		 mov	 DWORD PTR window_flags$[rbp], 0

; 318  :     if (no_titlebar)        window_flags |= ImGuiWindowFlags_NoTitleBar;

  00227	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_titlebar@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  0022e	85 c0		 test	 eax, eax
  00230	74 09		 je	 SHORT $LN47@ShowDemoWi
  00232	8b 45 04	 mov	 eax, DWORD PTR window_flags$[rbp]
  00235	83 c8 01	 or	 eax, 1
  00238	89 45 04	 mov	 DWORD PTR window_flags$[rbp], eax
$LN47@ShowDemoWi:

; 319  :     if (no_scrollbar)       window_flags |= ImGuiWindowFlags_NoScrollbar;

  0023b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_scrollbar@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00242	85 c0		 test	 eax, eax
  00244	74 09		 je	 SHORT $LN48@ShowDemoWi
  00246	8b 45 04	 mov	 eax, DWORD PTR window_flags$[rbp]
  00249	83 c8 08	 or	 eax, 8
  0024c	89 45 04	 mov	 DWORD PTR window_flags$[rbp], eax
$LN48@ShowDemoWi:

; 320  :     if (!no_menu)           window_flags |= ImGuiWindowFlags_MenuBar;

  0024f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_menu@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00256	85 c0		 test	 eax, eax
  00258	75 0a		 jne	 SHORT $LN49@ShowDemoWi
  0025a	8b 45 04	 mov	 eax, DWORD PTR window_flags$[rbp]
  0025d	0f ba e8 0a	 bts	 eax, 10
  00261	89 45 04	 mov	 DWORD PTR window_flags$[rbp], eax
$LN49@ShowDemoWi:

; 321  :     if (no_move)            window_flags |= ImGuiWindowFlags_NoMove;

  00264	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_move@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  0026b	85 c0		 test	 eax, eax
  0026d	74 09		 je	 SHORT $LN50@ShowDemoWi
  0026f	8b 45 04	 mov	 eax, DWORD PTR window_flags$[rbp]
  00272	83 c8 04	 or	 eax, 4
  00275	89 45 04	 mov	 DWORD PTR window_flags$[rbp], eax
$LN50@ShowDemoWi:

; 322  :     if (no_resize)          window_flags |= ImGuiWindowFlags_NoResize;

  00278	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_resize@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  0027f	85 c0		 test	 eax, eax
  00281	74 09		 je	 SHORT $LN51@ShowDemoWi
  00283	8b 45 04	 mov	 eax, DWORD PTR window_flags$[rbp]
  00286	83 c8 02	 or	 eax, 2
  00289	89 45 04	 mov	 DWORD PTR window_flags$[rbp], eax
$LN51@ShowDemoWi:

; 323  :     if (no_collapse)        window_flags |= ImGuiWindowFlags_NoCollapse;

  0028c	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_collapse@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00293	85 c0		 test	 eax, eax
  00295	74 09		 je	 SHORT $LN52@ShowDemoWi
  00297	8b 45 04	 mov	 eax, DWORD PTR window_flags$[rbp]
  0029a	83 c8 20	 or	 eax, 32			; 00000020H
  0029d	89 45 04	 mov	 DWORD PTR window_flags$[rbp], eax
$LN52@ShowDemoWi:

; 324  :     if (no_nav)             window_flags |= ImGuiWindowFlags_NoNav;

  002a0	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_nav@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  002a7	85 c0		 test	 eax, eax
  002a9	74 0b		 je	 SHORT $LN53@ShowDemoWi
  002ab	8b 45 04	 mov	 eax, DWORD PTR window_flags$[rbp]
  002ae	0d 00 00 0c 00	 or	 eax, 786432		; 000c0000H
  002b3	89 45 04	 mov	 DWORD PTR window_flags$[rbp], eax
$LN53@ShowDemoWi:

; 325  :     if (no_background)      window_flags |= ImGuiWindowFlags_NoBackground;

  002b6	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_background@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  002bd	85 c0		 test	 eax, eax
  002bf	74 0a		 je	 SHORT $LN54@ShowDemoWi
  002c1	8b 45 04	 mov	 eax, DWORD PTR window_flags$[rbp]
  002c4	0f ba e8 07	 bts	 eax, 7
  002c8	89 45 04	 mov	 DWORD PTR window_flags$[rbp], eax
$LN54@ShowDemoWi:

; 326  :     if (no_bring_to_front)  window_flags |= ImGuiWindowFlags_NoBringToFrontOnFocus;

  002cb	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_bring_to_front@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  002d2	85 c0		 test	 eax, eax
  002d4	74 0a		 je	 SHORT $LN55@ShowDemoWi
  002d6	8b 45 04	 mov	 eax, DWORD PTR window_flags$[rbp]
  002d9	0f ba e8 0d	 bts	 eax, 13
  002dd	89 45 04	 mov	 DWORD PTR window_flags$[rbp], eax
$LN55@ShowDemoWi:

; 327  :     if (unsaved_document)   window_flags |= ImGuiWindowFlags_UnsavedDocument;

  002e0	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?unsaved_document@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  002e7	85 c0		 test	 eax, eax
  002e9	74 0a		 je	 SHORT $LN56@ShowDemoWi
  002eb	8b 45 04	 mov	 eax, DWORD PTR window_flags$[rbp]
  002ee	0f ba e8 14	 bts	 eax, 20
  002f2	89 45 04	 mov	 DWORD PTR window_flags$[rbp], eax
$LN56@ShowDemoWi:

; 328  :     if (no_close)           p_open = NULL; // Don't pass our bool* to Begin

  002f5	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_close@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  002fc	85 c0		 test	 eax, eax
  002fe	74 0b		 je	 SHORT $LN57@ShowDemoWi
  00300	48 c7 85 30 02
	00 00 00 00 00
	00		 mov	 QWORD PTR p_open$[rbp], 0
$LN57@ShowDemoWi:

; 329  : 
; 330  :     // We specify a default position/size in case there's no data in the .ini file.
; 331  :     // We only do it to make the demo applications a little more welcoming, but typically this isn't required.
; 332  :     const ImGuiViewport* main_viewport = ImGui::GetMainViewport();

  0030b	e8 00 00 00 00	 call	 ?GetMainViewport@ImGui@@YAPEAUImGuiViewport@@XZ ; ImGui::GetMainViewport
  00310	48 89 45 28	 mov	 QWORD PTR main_viewport$[rbp], rax

; 333  :     ImGui::SetNextWindowPos(ImVec2(main_viewport->WorkPos.x + 650, main_viewport->WorkPos.y + 20), ImGuiCond_FirstUseEver);

  00314	0f 57 d2	 xorps	 xmm2, xmm2
  00317	0f 57 c9	 xorps	 xmm1, xmm1
  0031a	48 8d 8d 64 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00321	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00326	48 89 85 f8 01
	00 00		 mov	 QWORD PTR tv226[rbp], rax
  0032d	48 8b 4d 28	 mov	 rcx, QWORD PTR main_viewport$[rbp]
  00331	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [rcx+24]
  00336	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41a00000
  0033e	48 8b 4d 28	 mov	 rcx, QWORD PTR main_viewport$[rbp]
  00342	f3 0f 10 49 14	 movss	 xmm1, DWORD PTR [rcx+20]
  00347	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@44228000
  0034f	0f 28 d0	 movaps	 xmm2, xmm0
  00352	48 8d 8d 84 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00359	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  0035e	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR tv226[rbp]
  00365	4c 8b c1	 mov	 r8, rcx
  00368	ba 04 00 00 00	 mov	 edx, 4
  0036d	48 8b c8	 mov	 rcx, rax
  00370	e8 00 00 00 00	 call	 ?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H0@Z ; ImGui::SetNextWindowPos

; 334  :     ImGui::SetNextWindowSize(ImVec2(550, 680), ImGuiCond_FirstUseEver);

  00375	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@442a0000
  0037d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@44098000
  00385	48 8d 8d a4 01
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  0038c	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00391	ba 04 00 00 00	 mov	 edx, 4
  00396	48 8b c8	 mov	 rcx, rax
  00399	e8 00 00 00 00	 call	 ?SetNextWindowSize@ImGui@@YAXAEBUImVec2@@H@Z ; ImGui::SetNextWindowSize

; 335  : 
; 336  :     // Main body of the Demo window starts here.
; 337  :     if (!ImGui::Begin("Dear ImGui Demo", p_open, window_flags))

  0039e	44 8b 45 04	 mov	 r8d, DWORD PTR window_flags$[rbp]
  003a2	48 8b 95 30 02
	00 00		 mov	 rdx, QWORD PTR p_open$[rbp]
  003a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@IGMFAKOE@Dear?5ImGui?5Demo?$AA@
  003b0	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPEBDPEA_NH@Z ; ImGui::Begin
  003b5	0f b6 c0	 movzx	 eax, al
  003b8	85 c0		 test	 eax, eax
  003ba	75 0a		 jne	 SHORT $LN58@ShowDemoWi

; 338  :     {
; 339  :         // Early out if the window is collapsed, as an optimization.
; 340  :         ImGui::End();

  003bc	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 341  :         return;

  003c1	e9 c0 0a 00 00	 jmp	 $LN1@ShowDemoWi
$LN58@ShowDemoWi:

; 342  :     }
; 343  : 
; 344  :     // Most "big" widgets share a common width settings by default. See 'Demo->Layout->Widgets Width' for details.
; 345  :     // e.g. Use 2/3 of the space for widgets and 1/3 for labels (right align)
; 346  :     //ImGui::PushItemWidth(-ImGui::GetWindowWidth() * 0.35f);
; 347  :     // e.g. Leave a fixed amount of width for labels (by passing a negative value), the rest goes to widgets.
; 348  :     ImGui::PushItemWidth(ImGui::GetFontSize() * -12);

  003c6	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  003cb	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@c1400000
  003d3	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth

; 349  : 
; 350  :     // Menu Bar
; 351  :     if (ImGui::BeginMenuBar())

  003d8	e8 00 00 00 00	 call	 ?BeginMenuBar@ImGui@@YA_NXZ ; ImGui::BeginMenuBar
  003dd	0f b6 c0	 movzx	 eax, al
  003e0	85 c0		 test	 eax, eax
  003e2	0f 84 b8 02 00
	00		 je	 $LN59@ShowDemoWi

; 352  :     {
; 353  :         if (ImGui::BeginMenu("Menu"))

  003e8	b2 01		 mov	 dl, 1
  003ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04IFEHPILC@Menu?$AA@
  003f1	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  003f6	0f b6 c0	 movzx	 eax, al
  003f9	85 c0		 test	 eax, eax
  003fb	74 40		 je	 SHORT $LN60@ShowDemoWi
$LN4@ShowDemoWi:

; 354  :         {
; 355  :             IMGUI_DEMO_MARKER("Menu/File");

  003fd	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00405	74 26		 je	 SHORT $LN61@ShowDemoWi
  00407	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4JA
  0040d	83 c0 6b	 add	 eax, 107		; 0000006bH
  00410	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00417	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09CENEJNFC@Menu?1File?$AA@
  0041e	8b d0		 mov	 edx, eax
  00420	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00427	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN61@ShowDemoWi:
  0042d	33 c0		 xor	 eax, eax
  0042f	85 c0		 test	 eax, eax
  00431	75 ca		 jne	 SHORT $LN4@ShowDemoWi

; 356  :             ShowExampleMenuFile();

  00433	e8 00 00 00 00	 call	 ?ShowExampleMenuFile@@YAXXZ ; ShowExampleMenuFile

; 357  :             ImGui::EndMenu();

  00438	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN60@ShowDemoWi:

; 358  :         }
; 359  :         if (ImGui::BeginMenu("Examples"))

  0043d	b2 01		 mov	 dl, 1
  0043f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08KJMBPHGD@Examples?$AA@
  00446	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  0044b	0f b6 c0	 movzx	 eax, al
  0044e	85 c0		 test	 eax, eax
  00450	0f 84 73 01 00
	00		 je	 $LN62@ShowDemoWi
$LN7@ShowDemoWi:

; 360  :         {
; 361  :             IMGUI_DEMO_MARKER("Menu/Examples");

  00456	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  0045e	74 26		 je	 SHORT $LN63@ShowDemoWi
  00460	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4JA
  00466	83 c0 71	 add	 eax, 113		; 00000071H
  00469	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00470	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@ILKMGNBH@Menu?1Examples?$AA@
  00477	8b d0		 mov	 edx, eax
  00479	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00480	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN63@ShowDemoWi:
  00486	33 c0		 xor	 eax, eax
  00488	85 c0		 test	 eax, eax
  0048a	75 ca		 jne	 SHORT $LN7@ShowDemoWi

; 362  :             ImGui::MenuItem("Main menu bar", NULL, &show_app_main_menu_bar);

  0048c	41 b1 01	 mov	 r9b, 1
  0048f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?show_app_main_menu_bar@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00496	33 d2		 xor	 edx, edx
  00498	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@ECNFCDDH@Main?5menu?5bar?$AA@
  0049f	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem

; 363  :             ImGui::MenuItem("Console", NULL, &show_app_console);

  004a4	41 b1 01	 mov	 r9b, 1
  004a7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?show_app_console@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  004ae	33 d2		 xor	 edx, edx
  004b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07PGLPGHFC@Console?$AA@
  004b7	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem

; 364  :             ImGui::MenuItem("Log", NULL, &show_app_log);

  004bc	41 b1 01	 mov	 r9b, 1
  004bf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?show_app_log@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  004c6	33 d2		 xor	 edx, edx
  004c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03GGEOLGBL@Log?$AA@
  004cf	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem

; 365  :             ImGui::MenuItem("Simple layout", NULL, &show_app_layout);

  004d4	41 b1 01	 mov	 r9b, 1
  004d7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?show_app_layout@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  004de	33 d2		 xor	 edx, edx
  004e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@JBJOEMFC@Simple?5layout?$AA@
  004e7	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem

; 366  :             ImGui::MenuItem("Property editor", NULL, &show_app_property_editor);

  004ec	41 b1 01	 mov	 r9b, 1
  004ef	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?show_app_property_editor@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  004f6	33 d2		 xor	 edx, edx
  004f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@DNAHAJCI@Property?5editor?$AA@
  004ff	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem

; 367  :             ImGui::MenuItem("Long text display", NULL, &show_app_long_text);

  00504	41 b1 01	 mov	 r9b, 1
  00507	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?show_app_long_text@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  0050e	33 d2		 xor	 edx, edx
  00510	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@INJCBODH@Long?5text?5display?$AA@
  00517	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem

; 368  :             ImGui::MenuItem("Auto-resizing window", NULL, &show_app_auto_resize);

  0051c	41 b1 01	 mov	 r9b, 1
  0051f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?show_app_auto_resize@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00526	33 d2		 xor	 edx, edx
  00528	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@OHKJAELB@Auto?9resizing?5window?$AA@
  0052f	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem

; 369  :             ImGui::MenuItem("Constrained-resizing window", NULL, &show_app_constrained_resize);

  00534	41 b1 01	 mov	 r9b, 1
  00537	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?show_app_constrained_resize@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  0053e	33 d2		 xor	 edx, edx
  00540	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@CJMMFMCL@Constrained?9resizing?5window?$AA@
  00547	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem

; 370  :             ImGui::MenuItem("Simple overlay", NULL, &show_app_simple_overlay);

  0054c	41 b1 01	 mov	 r9b, 1
  0054f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?show_app_simple_overlay@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00556	33 d2		 xor	 edx, edx
  00558	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@IMGHCBNF@Simple?5overlay?$AA@
  0055f	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem

; 371  :             ImGui::MenuItem("Fullscreen window", NULL, &show_app_fullscreen);

  00564	41 b1 01	 mov	 r9b, 1
  00567	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?show_app_fullscreen@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  0056e	33 d2		 xor	 edx, edx
  00570	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@EPMOEMI@Fullscreen?5window?$AA@
  00577	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem

; 372  :             ImGui::MenuItem("Manipulating window titles", NULL, &show_app_window_titles);

  0057c	41 b1 01	 mov	 r9b, 1
  0057f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?show_app_window_titles@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00586	33 d2		 xor	 edx, edx
  00588	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@MDGJIIDL@Manipulating?5window?5titles?$AA@
  0058f	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem

; 373  :             ImGui::MenuItem("Custom rendering", NULL, &show_app_custom_rendering);

  00594	41 b1 01	 mov	 r9b, 1
  00597	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?show_app_custom_rendering@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  0059e	33 d2		 xor	 edx, edx
  005a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MLNDPKFI@Custom?5rendering?$AA@
  005a7	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem

; 374  :             ImGui::MenuItem("Documents", NULL, &show_app_documents);

  005ac	41 b1 01	 mov	 r9b, 1
  005af	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?show_app_documents@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  005b6	33 d2		 xor	 edx, edx
  005b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09IBGBKIMC@Documents?$AA@
  005bf	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem

; 375  :             ImGui::EndMenu();

  005c4	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN62@ShowDemoWi:

; 376  :         }
; 377  :         //if (ImGui::MenuItem("MenuItem")) {} // You can also use MenuItem() inside a menu bar!
; 378  :         if (ImGui::BeginMenu("Tools"))

  005c9	b2 01		 mov	 dl, 1
  005cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05OENKALAF@Tools?$AA@
  005d2	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPEBD_N@Z ; ImGui::BeginMenu
  005d7	0f b6 c0	 movzx	 eax, al
  005da	85 c0		 test	 eax, eax
  005dc	0f 84 b9 00 00
	00		 je	 $LN64@ShowDemoWi
$LN10@ShowDemoWi:

; 379  :         {
; 380  :             IMGUI_DEMO_MARKER("Menu/Tools");

  005e2	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  005ea	74 28		 je	 SHORT $LN65@ShowDemoWi
  005ec	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4JA
  005f2	05 84 00 00 00	 add	 eax, 132		; 00000084H
  005f7	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  005fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@FNGJAMCB@Menu?1Tools?$AA@
  00605	8b d0		 mov	 edx, eax
  00607	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  0060e	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN65@ShowDemoWi:
  00614	33 c0		 xor	 eax, eax
  00616	85 c0		 test	 eax, eax
  00618	75 c8		 jne	 SHORT $LN10@ShowDemoWi

; 381  : #ifndef IMGUI_DISABLE_DEBUG_TOOLS
; 382  :             const bool has_debug_tools = true;

  0061a	c6 45 44 01	 mov	 BYTE PTR has_debug_tools$4[rbp], 1

; 383  : #else
; 384  :             const bool has_debug_tools = false;
; 385  : #endif
; 386  :             ImGui::MenuItem("Metrics/Debugger", NULL, &show_app_metrics, has_debug_tools);

  0061e	41 b1 01	 mov	 r9b, 1
  00621	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?show_app_metrics@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00628	33 d2		 xor	 edx, edx
  0062a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@DAKIBJMB@Metrics?1Debugger?$AA@
  00631	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem

; 387  :             ImGui::MenuItem("Debug Log", NULL, &show_app_debug_log, has_debug_tools);

  00636	41 b1 01	 mov	 r9b, 1
  00639	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?show_app_debug_log@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00640	33 d2		 xor	 edx, edx
  00642	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09NNILCKOM@Debug?5Log?$AA@
  00649	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem

; 388  :             ImGui::MenuItem("Stack Tool", NULL, &show_app_stack_tool, has_debug_tools);

  0064e	41 b1 01	 mov	 r9b, 1
  00651	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?show_app_stack_tool@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00658	33 d2		 xor	 edx, edx
  0065a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DFPCNJKK@Stack?5Tool?$AA@
  00661	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem

; 389  :             ImGui::MenuItem("Style Editor", NULL, &show_app_style_editor);

  00666	41 b1 01	 mov	 r9b, 1
  00669	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?show_app_style_editor@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00670	33 d2		 xor	 edx, edx
  00672	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@GJBKNEHA@Style?5Editor?$AA@
  00679	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem

; 390  :             ImGui::MenuItem("About Dear ImGui", NULL, &show_app_about);

  0067e	41 b1 01	 mov	 r9b, 1
  00681	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?show_app_about@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00688	33 d2		 xor	 edx, edx
  0068a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NKKLPDOL@About?5Dear?5ImGui?$AA@
  00691	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ; ImGui::MenuItem

; 391  :             ImGui::EndMenu();

  00696	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN64@ShowDemoWi:

; 392  :         }
; 393  :         ImGui::EndMenuBar();

  0069b	e8 00 00 00 00	 call	 ?EndMenuBar@ImGui@@YAXXZ ; ImGui::EndMenuBar
$LN59@ShowDemoWi:

; 394  :     }
; 395  : 
; 396  :     ImGui::Text("dear imgui says hello! (%s) (%d)", IMGUI_VERSION, IMGUI_VERSION_NUM);

  006a0	41 b8 ec 49 00
	00		 mov	 r8d, 18924		; 000049ecH
  006a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@GMOEAHPG@1?489?43?5WIP?$AA@
  006ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@NIEBLCEF@dear?5imgui?5says?5hello?$CB?5?$CI?$CFs?$CJ?5?$CI?$CFd?$CJ@
  006b4	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 397  :     ImGui::Spacing();

  006b9	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing
$LN13@ShowDemoWi:

; 398  : 
; 399  :     IMGUI_DEMO_MARKER("Help");

  006be	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  006c6	74 28		 je	 SHORT $LN66@ShowDemoWi
  006c8	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4JA
  006ce	05 97 00 00 00	 add	 eax, 151		; 00000097H
  006d3	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  006da	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04DDFEFHOJ@Help?$AA@
  006e1	8b d0		 mov	 edx, eax
  006e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  006ea	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN66@ShowDemoWi:
  006f0	33 c0		 xor	 eax, eax
  006f2	85 c0		 test	 eax, eax
  006f4	75 c8		 jne	 SHORT $LN13@ShowDemoWi

; 400  :     if (ImGui::CollapsingHeader("Help"))

  006f6	33 d2		 xor	 edx, edx
  006f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04DDFEFHOJ@Help?$AA@
  006ff	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPEBDH@Z ; ImGui::CollapsingHeader
  00704	0f b6 c0	 movzx	 eax, al
  00707	85 c0		 test	 eax, eax
  00709	0f 84 9f 00 00
	00		 je	 $LN67@ShowDemoWi

; 401  :     {
; 402  :         ImGui::Text("ABOUT THIS DEMO:");

  0070f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@LJBDHCFD@ABOUT?5THIS?5DEMO?3?$AA@
  00716	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 403  :         ImGui::BulletText("Sections below are demonstrating many aspects of the library.");

  0071b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DO@FBJHOIEP@Sections?5below?5are?5demonstrating@
  00722	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 404  :         ImGui::BulletText("The \"Examples\" menu above leads to more demo contents.");

  00727	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DH@GKLDFKKO@The?5?$CCExamples?$CC?5menu?5above?5leads?5@
  0072e	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 405  :         ImGui::BulletText("The \"Tools\" menu above gives access to: About Box, Style Editor,\n"

  00733	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0ID@INLAEEEH@The?5?$CCTools?$CC?5menu?5above?5gives?5acc@
  0073a	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 406  :                           "and Metrics/Debugger (general purpose Dear ImGui debugging tool).");
; 407  :         ImGui::Separator();

  0073f	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 408  : 
; 409  :         ImGui::Text("PROGRAMMER GUIDE:");

  00744	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@GECCEBDK@PROGRAMMER?5GUIDE?3?$AA@
  0074b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 410  :         ImGui::BulletText("See the ShowDemoWindow() code in imgui_demo.cpp. <- you are here!");

  00750	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EC@GEILMFPK@See?5the?5ShowDemoWindow?$CI?$CJ?5code?5in@
  00757	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 411  :         ImGui::BulletText("See comments in imgui.cpp.");

  0075c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@CMPGJGKF@See?5comments?5in?5imgui?4cpp?4?$AA@
  00763	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 412  :         ImGui::BulletText("See example applications in the examples/ folder.");

  00768	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DC@LILBLMCJ@See?5example?5applications?5in?5the?5@
  0076f	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 413  :         ImGui::BulletText("Read the FAQ at http://www.dearimgui.org/faq/");

  00774	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@IHPGPBLH@Read?5the?5FAQ?5at?5http?3?1?1www?4deari@
  0077b	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 414  :         ImGui::BulletText("Set 'io.ConfigFlags |= NavEnableKeyboard' for keyboard controls.");

  00780	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EB@MLAMCLHL@Set?5?8io?4ConfigFlags?5?$HM?$DN?5NavEnable@
  00787	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 415  :         ImGui::BulletText("Set 'io.ConfigFlags |= NavEnableGamepad' for gamepad controls.");

  0078c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DP@CIADOILL@Set?5?8io?4ConfigFlags?5?$HM?$DN?5NavEnable@
  00793	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPEBDZZ ; ImGui::BulletText

; 416  :         ImGui::Separator();

  00798	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 417  : 
; 418  :         ImGui::Text("USER GUIDE:");

  0079d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@NDGNNOFI@USER?5GUIDE?3?$AA@
  007a4	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 419  :         ImGui::ShowUserGuide();

  007a9	e8 00 00 00 00	 call	 ?ShowUserGuide@ImGui@@YAXXZ ; ImGui::ShowUserGuide
$LN67@ShowDemoWi:
$LN16@ShowDemoWi:

; 420  :     }
; 421  : 
; 422  :     IMGUI_DEMO_MARKER("Configuration");

  007ae	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  007b6	74 28		 je	 SHORT $LN68@ShowDemoWi
  007b8	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4JA
  007be	05 ae 00 00 00	 add	 eax, 174		; 000000aeH
  007c3	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  007ca	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@PIILMNHI@Configuration?$AA@
  007d1	8b d0		 mov	 edx, eax
  007d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  007da	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN68@ShowDemoWi:
  007e0	33 c0		 xor	 eax, eax
  007e2	85 c0		 test	 eax, eax
  007e4	75 c8		 jne	 SHORT $LN16@ShowDemoWi

; 423  :     if (ImGui::CollapsingHeader("Configuration"))

  007e6	33 d2		 xor	 edx, edx
  007e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@PIILMNHI@Configuration?$AA@
  007ef	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPEBDH@Z ; ImGui::CollapsingHeader
  007f4	0f b6 c0	 movzx	 eax, al
  007f7	85 c0		 test	 eax, eax
  007f9	0f 84 c9 04 00
	00		 je	 $LN69@ShowDemoWi

; 424  :     {
; 425  :         ImGuiIO& io = ImGui::GetIO();

  007ff	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  00804	48 89 45 68	 mov	 QWORD PTR io$5[rbp], rax

; 426  : 
; 427  :         if (ImGui::TreeNode("Configuration##2"))

  00808	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@DLCAGGKD@Configuration?$CD?$CD2?$AA@
  0080f	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  00814	0f b6 c0	 movzx	 eax, al
  00817	85 c0		 test	 eax, eax
  00819	0f 84 bb 02 00
	00		 je	 $LN70@ShowDemoWi

; 428  :         {
; 429  :             ImGui::CheckboxFlags("io.ConfigFlags: NavEnableKeyboard",    &io.ConfigFlags, ImGuiConfigFlags_NavEnableKeyboard);

  0081f	48 8b 45 68	 mov	 rax, QWORD PTR io$5[rbp]
  00823	41 b8 01 00 00
	00		 mov	 r8d, 1
  00829	48 8b d0	 mov	 rdx, rax
  0082c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@MKDHACD@io?4ConfigFlags?3?5NavEnableKeyboar@
  00833	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 430  :             ImGui::SameLine(); HelpMarker("Enable keyboard controls.");

  00838	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00840	0f 57 c0	 xorps	 xmm0, xmm0
  00843	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00848	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@OJOJPPOF@Enable?5keyboard?5controls?4?$AA@
  0084f	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 431  :             ImGui::CheckboxFlags("io.ConfigFlags: NavEnableGamepad",     &io.ConfigFlags, ImGuiConfigFlags_NavEnableGamepad);

  00854	48 8b 45 68	 mov	 rax, QWORD PTR io$5[rbp]
  00858	41 b8 02 00 00
	00		 mov	 r8d, 2
  0085e	48 8b d0	 mov	 rdx, rax
  00861	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@MCNBOBFF@io?4ConfigFlags?3?5NavEnableGamepad@
  00868	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 432  :             ImGui::SameLine(); HelpMarker("Enable gamepad controls. Require backend to set io.BackendFlags |= ImGuiBackendFlags_HasGamepad.\n\nRead instructions in imgui.cpp for details.");

  0086d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00875	0f 57 c0	 xorps	 xmm0, xmm0
  00878	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0087d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0IO@MJIBAPFF@Enable?5gamepad?5controls?4?5Require@
  00884	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 433  :             ImGui::CheckboxFlags("io.ConfigFlags: NavEnableSetMousePos", &io.ConfigFlags, ImGuiConfigFlags_NavEnableSetMousePos);

  00889	48 8b 45 68	 mov	 rax, QWORD PTR io$5[rbp]
  0088d	41 b8 04 00 00
	00		 mov	 r8d, 4
  00893	48 8b d0	 mov	 rdx, rax
  00896	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@BBHAMFJD@io?4ConfigFlags?3?5NavEnableSetMous@
  0089d	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 434  :             ImGui::SameLine(); HelpMarker("Instruct navigation to move the mouse cursor. See comment for ImGuiConfigFlags_NavEnableSetMousePos.");

  008a2	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  008aa	0f 57 c0	 xorps	 xmm0, xmm0
  008ad	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  008b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GF@EIFIGBGA@Instruct?5navigation?5to?5move?5the?5@
  008b9	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 435  :             ImGui::CheckboxFlags("io.ConfigFlags: NoMouse",              &io.ConfigFlags, ImGuiConfigFlags_NoMouse);

  008be	48 8b 45 68	 mov	 rax, QWORD PTR io$5[rbp]
  008c2	41 b8 10 00 00
	00		 mov	 r8d, 16
  008c8	48 8b d0	 mov	 rdx, rax
  008cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@FJCAMGFF@io?4ConfigFlags?3?5NoMouse?$AA@
  008d2	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 436  :             if (io.ConfigFlags & ImGuiConfigFlags_NoMouse)

  008d7	48 8b 45 68	 mov	 rax, QWORD PTR io$5[rbp]
  008db	8b 00		 mov	 eax, DWORD PTR [rax]
  008dd	83 e0 10	 and	 eax, 16
  008e0	85 c0		 test	 eax, eax
  008e2	74 62		 je	 SHORT $LN71@ShowDemoWi

; 437  :             {
; 438  :                 // The "NoMouse" option can get us stuck with a disabled mouse! Let's provide an alternative way to fix it:
; 439  :                 if (fmodf((float)ImGui::GetTime(), 0.40f) < 0.20f)

  008e4	e8 00 00 00 00	 call	 ?GetTime@ImGui@@YANXZ	; ImGui::GetTime
  008e9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008ed	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ecccccd
  008f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmodf
  008fb	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3e4ccccd
  00903	0f 2f c8	 comiss	 xmm1, xmm0
  00906	76 1c		 jbe	 SHORT $LN72@ShowDemoWi

; 440  :                 {
; 441  :                     ImGui::SameLine();

  00908	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00910	0f 57 c0	 xorps	 xmm0, xmm0
  00913	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine

; 442  :                     ImGui::Text("<<PRESS SPACE TO DISABLE>>");

  00918	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@MKGMHIPJ@?$DM?$DMPRESS?5SPACE?5TO?5DISABLE?$DO?$DO?$AA@
  0091f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text
$LN72@ShowDemoWi:

; 443  :                 }
; 444  :                 if (ImGui::IsKeyPressed(ImGuiKey_Space))

  00924	b2 01		 mov	 dl, 1
  00926	b9 0c 02 00 00	 mov	 ecx, 524		; 0000020cH
  0092b	e8 00 00 00 00	 call	 ?IsKeyPressed@ImGui@@YA_NW4ImGuiKey@@_N@Z ; ImGui::IsKeyPressed
  00930	0f b6 c0	 movzx	 eax, al
  00933	85 c0		 test	 eax, eax
  00935	74 0f		 je	 SHORT $LN73@ShowDemoWi

; 445  :                     io.ConfigFlags &= ~ImGuiConfigFlags_NoMouse;

  00937	48 8b 45 68	 mov	 rax, QWORD PTR io$5[rbp]
  0093b	8b 00		 mov	 eax, DWORD PTR [rax]
  0093d	83 e0 ef	 and	 eax, -17
  00940	48 8b 4d 68	 mov	 rcx, QWORD PTR io$5[rbp]
  00944	89 01		 mov	 DWORD PTR [rcx], eax
$LN73@ShowDemoWi:
$LN71@ShowDemoWi:

; 446  :             }
; 447  :             ImGui::CheckboxFlags("io.ConfigFlags: NoMouseCursorChange", &io.ConfigFlags, ImGuiConfigFlags_NoMouseCursorChange);

  00946	48 8b 45 68	 mov	 rax, QWORD PTR io$5[rbp]
  0094a	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00950	48 8b d0	 mov	 rdx, rax
  00953	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@KNKEEHDL@io?4ConfigFlags?3?5NoMouseCursorCha@
  0095a	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 448  :             ImGui::SameLine(); HelpMarker("Instruct backend to not alter mouse cursor shape and visibility.");

  0095f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00967	0f 57 c0	 xorps	 xmm0, xmm0
  0096a	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0096f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EB@JJIOMJIM@Instruct?5backend?5to?5not?5alter?5mo@
  00976	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 449  :             ImGui::Checkbox("io.ConfigInputTrickleEventQueue", &io.ConfigInputTrickleEventQueue);

  0097b	48 8b 45 68	 mov	 rax, QWORD PTR io$5[rbp]
  0097f	48 83 c0 72	 add	 rax, 114		; 00000072H
  00983	48 8b d0	 mov	 rdx, rax
  00986	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@FACKLLEL@io?4ConfigInputTrickleEventQueue?$AA@
  0098d	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 450  :             ImGui::SameLine(); HelpMarker("Enable input queue trickling: some types of events submitted during the same frame (e.g. button down + up) will be spread over multiple frames, improving interactions with low framerates.");

  00992	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0099a	0f 57 c0	 xorps	 xmm0, xmm0
  0099d	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  009a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0LM@IEPLLLKB@Enable?5input?5queue?5trickling?3?5so@
  009a9	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 451  :             ImGui::Checkbox("io.ConfigInputTextCursorBlink", &io.ConfigInputTextCursorBlink);

  009ae	48 8b 45 68	 mov	 rax, QWORD PTR io$5[rbp]
  009b2	48 83 c0 73	 add	 rax, 115		; 00000073H
  009b6	48 8b d0	 mov	 rdx, rax
  009b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@GBANMLLJ@io?4ConfigInputTextCursorBlink?$AA@
  009c0	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 452  :             ImGui::SameLine(); HelpMarker("Enable blinking cursor (optional as some users consider it to be distracting).");

  009c5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  009cd	0f 57 c0	 xorps	 xmm0, xmm0
  009d0	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  009d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EP@OGONDEMG@Enable?5blinking?5cursor?5?$CIoptional@
  009dc	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 453  :             ImGui::Checkbox("io.ConfigInputTextEnterKeepActive", &io.ConfigInputTextEnterKeepActive);

  009e1	48 8b 45 68	 mov	 rax, QWORD PTR io$5[rbp]
  009e5	48 83 c0 74	 add	 rax, 116		; 00000074H
  009e9	48 8b d0	 mov	 rdx, rax
  009ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@CDNGJGDB@io?4ConfigInputTextEnterKeepActiv@
  009f3	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 454  :             ImGui::SameLine(); HelpMarker("Pressing Enter will keep item active and select contents (single-line only).");

  009f8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00a00	0f 57 c0	 xorps	 xmm0, xmm0
  00a03	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00a08	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EN@DGPMAAAP@Pressing?5Enter?5will?5keep?5item?5ac@
  00a0f	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 455  :             ImGui::Checkbox("io.ConfigDragClickToInputText", &io.ConfigDragClickToInputText);

  00a14	48 8b 45 68	 mov	 rax, QWORD PTR io$5[rbp]
  00a18	48 83 c0 75	 add	 rax, 117		; 00000075H
  00a1c	48 8b d0	 mov	 rdx, rax
  00a1f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@DELEKPMI@io?4ConfigDragClickToInputText?$AA@
  00a26	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 456  :             ImGui::SameLine(); HelpMarker("Enable turning DragXXX widgets into text input with a simple mouse click-release (without moving).");

  00a2b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00a33	0f 57 c0	 xorps	 xmm0, xmm0
  00a36	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00a3b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GD@MCICHOGF@Enable?5turning?5DragXXX?5widgets?5i@
  00a42	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 457  :             ImGui::Checkbox("io.ConfigWindowsResizeFromEdges", &io.ConfigWindowsResizeFromEdges);

  00a47	48 8b 45 68	 mov	 rax, QWORD PTR io$5[rbp]
  00a4b	48 83 c0 76	 add	 rax, 118		; 00000076H
  00a4f	48 8b d0	 mov	 rdx, rax
  00a52	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@IFIIDADM@io?4ConfigWindowsResizeFromEdges?$AA@
  00a59	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 458  :             ImGui::SameLine(); HelpMarker("Enable resizing of windows from their edges and from the lower-left corner.\nThis requires (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback.");

  00a5e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00a66	0f 57 c0	 xorps	 xmm0, xmm0
  00a69	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00a6e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0LI@DCCFFPOA@Enable?5resizing?5of?5windows?5from?5@
  00a75	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 459  :             ImGui::Checkbox("io.ConfigWindowsMoveFromTitleBarOnly", &io.ConfigWindowsMoveFromTitleBarOnly);

  00a7a	48 8b 45 68	 mov	 rax, QWORD PTR io$5[rbp]
  00a7e	48 83 c0 77	 add	 rax, 119		; 00000077H
  00a82	48 8b d0	 mov	 rdx, rax
  00a85	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@PKBLIGGG@io?4ConfigWindowsMoveFromTitleBar@
  00a8c	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 460  :             ImGui::Checkbox("io.MouseDrawCursor", &io.MouseDrawCursor);

  00a91	48 8b 45 68	 mov	 rax, QWORD PTR io$5[rbp]
  00a95	48 83 c0 70	 add	 rax, 112		; 00000070H
  00a99	48 8b d0	 mov	 rdx, rax
  00a9c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@PFDMJJAG@io?4MouseDrawCursor?$AA@
  00aa3	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 461  :             ImGui::SameLine(); HelpMarker("Instruct Dear ImGui to render a mouse cursor itself. Note that a mouse cursor rendered via your application GPU rendering path will feel more laggy than hardware cursor, but will be more in sync with your other visuals.\n\nSome desktop applications may use both kinds of cursors (e.g. enable software cursor only when resizing/dragging something).");

  00aa8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  00ab0	0f 57 c0	 xorps	 xmm0, xmm0
  00ab3	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00ab8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BFK@CKDHFBDH@Instruct?5Dear?5ImGui?5to?5render?5a?5@
  00abf	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 462  :             ImGui::Text("Also see Style->Rendering for rendering options.");

  00ac4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@KCBPEEMI@Also?5see?5Style?9?$DORendering?5for?5re@
  00acb	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPEBDZZ	; ImGui::Text

; 463  :             ImGui::TreePop();

  00ad0	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop

; 464  :             ImGui::Separator();

  00ad5	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator
$LN70@ShowDemoWi:
$LN19@ShowDemoWi:

; 465  :         }
; 466  : 
; 467  :         IMGUI_DEMO_MARKER("Configuration/Backend Flags");

  00ada	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00ae2	74 28		 je	 SHORT $LN74@ShowDemoWi
  00ae4	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4JA
  00aea	05 db 00 00 00	 add	 eax, 219		; 000000dbH
  00aef	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00af6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BM@FFMOEAGC@Configuration?1Backend?5Flags?$AA@
  00afd	8b d0		 mov	 edx, eax
  00aff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00b06	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN74@ShowDemoWi:
  00b0c	33 c0		 xor	 eax, eax
  00b0e	85 c0		 test	 eax, eax
  00b10	75 c8		 jne	 SHORT $LN19@ShowDemoWi

; 468  :         if (ImGui::TreeNode("Backend Flags"))

  00b12	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GGPAPCP@Backend?5Flags?$AA@
  00b19	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  00b1e	0f b6 c0	 movzx	 eax, al
  00b21	85 c0		 test	 eax, eax
  00b23	0f 84 87 00 00
	00		 je	 $LN75@ShowDemoWi

; 469  :         {
; 470  :             HelpMarker(

  00b29	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0LE@FBDHIPGL@Those?5flags?5are?5set?5by?5the?5backe@
  00b30	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 471  :                 "Those flags are set by the backends (imgui_impl_xxx files) to specify their capabilities.\n"
; 472  :                 "Here we expose them as read-only fields to avoid breaking interactions with your backend.");
; 473  : 
; 474  :             // Make a local copy to avoid modifying actual backend flags.
; 475  :             // FIXME: We don't use BeginDisabled() to keep label bright, maybe we need a BeginReadonly() equivalent..
; 476  :             ImGuiBackendFlags backend_flags = io.BackendFlags;

  00b35	48 8b 45 68	 mov	 rax, QWORD PTR io$5[rbp]
  00b39	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00b3c	89 85 84 00 00
	00		 mov	 DWORD PTR backend_flags$6[rbp], eax

; 477  :             ImGui::CheckboxFlags("io.BackendFlags: HasGamepad",           &backend_flags, ImGuiBackendFlags_HasGamepad);

  00b42	41 b8 01 00 00
	00		 mov	 r8d, 1
  00b48	48 8d 95 84 00
	00 00		 lea	 rdx, QWORD PTR backend_flags$6[rbp]
  00b4f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@KECFJBMD@io?4BackendFlags?3?5HasGamepad?$AA@
  00b56	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 478  :             ImGui::CheckboxFlags("io.BackendFlags: HasMouseCursors",      &backend_flags, ImGuiBackendFlags_HasMouseCursors);

  00b5b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00b61	48 8d 95 84 00
	00 00		 lea	 rdx, QWORD PTR backend_flags$6[rbp]
  00b68	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@OGFIDKNB@io?4BackendFlags?3?5HasMouseCursors@
  00b6f	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 479  :             ImGui::CheckboxFlags("io.BackendFlags: HasSetMousePos",       &backend_flags, ImGuiBackendFlags_HasSetMousePos);

  00b74	41 b8 04 00 00
	00		 mov	 r8d, 4
  00b7a	48 8d 95 84 00
	00 00		 lea	 rdx, QWORD PTR backend_flags$6[rbp]
  00b81	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@JKLPDGP@io?4BackendFlags?3?5HasSetMousePos?$AA@
  00b88	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 480  :             ImGui::CheckboxFlags("io.BackendFlags: RendererHasVtxOffset", &backend_flags, ImGuiBackendFlags_RendererHasVtxOffset);

  00b8d	41 b8 08 00 00
	00		 mov	 r8d, 8
  00b93	48 8d 95 84 00
	00 00		 lea	 rdx, QWORD PTR backend_flags$6[rbp]
  00b9a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@EKAIMAPC@io?4BackendFlags?3?5RendererHasVtxO@
  00ba1	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlags

; 481  :             ImGui::TreePop();

  00ba6	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop

; 482  :             ImGui::Separator();

  00bab	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator
$LN75@ShowDemoWi:
$LN22@ShowDemoWi:

; 483  :         }
; 484  : 
; 485  :         IMGUI_DEMO_MARKER("Configuration/Style");

  00bb0	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00bb8	74 28		 je	 SHORT $LN76@ShowDemoWi
  00bba	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4JA
  00bc0	05 ed 00 00 00	 add	 eax, 237		; 000000edH
  00bc5	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00bcc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BE@IHLGIHAH@Configuration?1Style?$AA@
  00bd3	8b d0		 mov	 edx, eax
  00bd5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00bdc	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN76@ShowDemoWi:
  00be2	33 c0		 xor	 eax, eax
  00be4	85 c0		 test	 eax, eax
  00be6	75 c8		 jne	 SHORT $LN22@ShowDemoWi

; 486  :         if (ImGui::TreeNode("Style"))

  00be8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IHAFCALK@Style?$AA@
  00bef	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  00bf4	0f b6 c0	 movzx	 eax, al
  00bf7	85 c0		 test	 eax, eax
  00bf9	74 1d		 je	 SHORT $LN77@ShowDemoWi

; 487  :         {
; 488  :             HelpMarker("The same contents can be accessed in 'Tools->Style Editor' or by calling the ShowStyleEditor() function.");

  00bfb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GJ@COKJKNBB@The?5same?5contents?5can?5be?5accesse@
  00c02	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 489  :             ImGui::ShowStyleEditor();

  00c07	33 c9		 xor	 ecx, ecx
  00c09	e8 00 00 00 00	 call	 ?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z ; ImGui::ShowStyleEditor

; 490  :             ImGui::TreePop();

  00c0e	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop

; 491  :             ImGui::Separator();

  00c13	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator
$LN77@ShowDemoWi:
$LN25@ShowDemoWi:

; 492  :         }
; 493  : 
; 494  :         IMGUI_DEMO_MARKER("Configuration/Capture, Logging");

  00c18	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00c20	74 28		 je	 SHORT $LN78@ShowDemoWi
  00c22	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4JA
  00c28	05 f6 00 00 00	 add	 eax, 246		; 000000f6H
  00c2d	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00c34	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BP@HOEFEDAL@Configuration?1Capture?0?5Logging?$AA@
  00c3b	8b d0		 mov	 edx, eax
  00c3d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00c44	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN78@ShowDemoWi:
  00c4a	33 c0		 xor	 eax, eax
  00c4c	85 c0		 test	 eax, eax
  00c4e	75 c8		 jne	 SHORT $LN25@ShowDemoWi

; 495  :         if (ImGui::TreeNode("Capture/Logging"))

  00c50	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BMMAIOLM@Capture?1Logging?$AA@
  00c57	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPEBD@Z ; ImGui::TreeNode
  00c5c	0f b6 c0	 movzx	 eax, al
  00c5f	85 c0		 test	 eax, eax
  00c61	74 65		 je	 SHORT $LN79@ShowDemoWi

; 496  :         {
; 497  :             HelpMarker(

  00c63	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0PC@PAKMBOJC@The?5logging?5API?5redirects?5all?5te@
  00c6a	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 498  :                 "The logging API redirects all text output so you can easily capture the content of "
; 499  :                 "a window or a block. Tree nodes can be automatically expanded.\n"
; 500  :                 "Try opening any of the contents below in this window and then click one of the \"Log To\" button.");
; 501  :             ImGui::LogButtons();

  00c6f	e8 00 00 00 00	 call	 ?LogButtons@ImGui@@YAXXZ ; ImGui::LogButtons

; 502  : 
; 503  :             HelpMarker("You can also call ImGui::LogText() to output directly to the log without a visual output.");

  00c74	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FK@CDOBPMKK@You?5can?5also?5call?5ImGui?3?3LogText@
  00c7b	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPEBD@Z	; HelpMarker

; 504  :             if (ImGui::Button("Copy \"Hello, world!\" to clipboard"))

  00c80	0f 57 d2	 xorps	 xmm2, xmm2
  00c83	0f 57 c9	 xorps	 xmm1, xmm1
  00c86	48 8d 8d c4 01
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00c8d	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00c92	48 8b d0	 mov	 rdx, rax
  00c95	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@DLICJJEI@Copy?5?$CCHello?0?5world?$CB?$CC?5to?5clipboar@
  00c9c	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::Button
  00ca1	0f b6 c0	 movzx	 eax, al
  00ca4	85 c0		 test	 eax, eax
  00ca6	74 1b		 je	 SHORT $LN80@ShowDemoWi

; 505  :             {
; 506  :                 ImGui::LogToClipboard();

  00ca8	b9 ff ff ff ff	 mov	 ecx, -1
  00cad	e8 00 00 00 00	 call	 ?LogToClipboard@ImGui@@YAXH@Z ; ImGui::LogToClipboard

; 507  :                 ImGui::LogText("Hello, world!");

  00cb2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GEHPLBPJ@Hello?0?5world?$CB?$AA@
  00cb9	e8 00 00 00 00	 call	 ?LogText@ImGui@@YAXPEBDZZ ; ImGui::LogText

; 508  :                 ImGui::LogFinish();

  00cbe	e8 00 00 00 00	 call	 ?LogFinish@ImGui@@YAXXZ	; ImGui::LogFinish
$LN80@ShowDemoWi:

; 509  :             }
; 510  :             ImGui::TreePop();

  00cc3	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN79@ShowDemoWi:
$LN69@ShowDemoWi:
$LN28@ShowDemoWi:

; 511  :         }
; 512  :     }
; 513  : 
; 514  :     IMGUI_DEMO_MARKER("Window options");

  00cc8	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA, 0 ; GImGuiDemoMarkerCallback
  00cd0	74 28		 je	 SHORT $LN81@ShowDemoWi
  00cd2	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4JA
  00cd8	05 0a 01 00 00	 add	 eax, 266		; 0000010aH
  00cdd	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?GImGuiDemoMarkerCallbackUserData@@3PEAXEA ; GImGuiDemoMarkerCallbackUserData
  00ce4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@FBBKILOB@Window?5options?$AA@
  00ceb	8b d0		 mov	 edx, eax
  00ced	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@PPMGEAFH@c?3?2github?2framework?2tool?2imgui?2i@
  00cf4	ff 15 00 00 00
	00		 call	 QWORD PTR ?GImGuiDemoMarkerCallback@@3P6AXPEBDH0PEAX@ZEA ; GImGuiDemoMarkerCallback
$LN81@ShowDemoWi:
  00cfa	33 c0		 xor	 eax, eax
  00cfc	85 c0		 test	 eax, eax
  00cfe	75 c8		 jne	 SHORT $LN28@ShowDemoWi

; 515  :     if (ImGui::CollapsingHeader("Window options"))

  00d00	33 d2		 xor	 edx, edx
  00d02	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@FBBKILOB@Window?5options?$AA@
  00d09	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPEBDH@Z ; ImGui::CollapsingHeader
  00d0e	0f b6 c0	 movzx	 eax, al
  00d11	85 c0		 test	 eax, eax
  00d13	0f 84 4a 01 00
	00		 je	 $LN82@ShowDemoWi

; 516  :     {
; 517  :         if (ImGui::BeginTable("split", 3))

  00d19	0f 57 d2	 xorps	 xmm2, xmm2
  00d1c	0f 57 c9	 xorps	 xmm1, xmm1
  00d1f	48 8d 8d e4 01
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00d26	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2
  00d2b	0f 57 c0	 xorps	 xmm0, xmm0
  00d2e	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00d34	4c 8b c8	 mov	 r9, rax
  00d37	45 33 c0	 xor	 r8d, r8d
  00d3a	ba 03 00 00 00	 mov	 edx, 3
  00d3f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05EHPMMFBK@split?$AA@
  00d46	e8 00 00 00 00	 call	 ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ; ImGui::BeginTable
  00d4b	0f b6 c0	 movzx	 eax, al
  00d4e	85 c0		 test	 eax, eax
  00d50	0f 84 0d 01 00
	00		 je	 $LN83@ShowDemoWi

; 518  :         {
; 519  :             ImGui::TableNextColumn(); ImGui::Checkbox("No titlebar", &no_titlebar);

  00d56	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  00d5b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?no_titlebar@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00d62	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@EABCFDNG@No?5titlebar?$AA@
  00d69	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 520  :             ImGui::TableNextColumn(); ImGui::Checkbox("No scrollbar", &no_scrollbar);

  00d6e	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  00d73	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?no_scrollbar@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00d7a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@GGGGKBFF@No?5scrollbar?$AA@
  00d81	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 521  :             ImGui::TableNextColumn(); ImGui::Checkbox("No menu", &no_menu);

  00d86	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  00d8b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?no_menu@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00d92	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07KBMDBGCH@No?5menu?$AA@
  00d99	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 522  :             ImGui::TableNextColumn(); ImGui::Checkbox("No move", &no_move);

  00d9e	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  00da3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?no_move@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00daa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07JGIJBGNK@No?5move?$AA@
  00db1	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 523  :             ImGui::TableNextColumn(); ImGui::Checkbox("No resize", &no_resize);

  00db6	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  00dbb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?no_resize@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00dc2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09HMNEIDKA@No?5resize?$AA@
  00dc9	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 524  :             ImGui::TableNextColumn(); ImGui::Checkbox("No collapse", &no_collapse);

  00dce	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  00dd3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?no_collapse@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00dda	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PFMGNBM@No?5collapse?$AA@
  00de1	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 525  :             ImGui::TableNextColumn(); ImGui::Checkbox("No close", &no_close);

  00de6	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  00deb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?no_close@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00df2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08DGAKPBEJ@No?5close?$AA@
  00df9	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 526  :             ImGui::TableNextColumn(); ImGui::Checkbox("No nav", &no_nav);

  00dfe	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  00e03	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?no_nav@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00e0a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KFENEDHJ@No?5nav?$AA@
  00e11	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 527  :             ImGui::TableNextColumn(); ImGui::Checkbox("No background", &no_background);

  00e16	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  00e1b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?no_background@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00e22	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EHIGJHPL@No?5background?$AA@
  00e29	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 528  :             ImGui::TableNextColumn(); ImGui::Checkbox("No bring to front", &no_bring_to_front);

  00e2e	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  00e33	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?no_bring_to_front@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00e3a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@FKMLNKJL@No?5bring?5to?5front?$AA@
  00e41	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 529  :             ImGui::TableNextColumn(); ImGui::Checkbox("Unsaved document", &unsaved_document);

  00e46	e8 00 00 00 00	 call	 ?TableNextColumn@ImGui@@YA_NXZ ; ImGui::TableNextColumn
  00e4b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?unsaved_document@?1??ShowDemoWindow@ImGui@@YAXPEA_N@Z@4_NA
  00e52	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@BPJMKDGK@Unsaved?5document?$AA@
  00e59	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ; ImGui::Checkbox

; 530  :             ImGui::EndTable();

  00e5e	e8 00 00 00 00	 call	 ?EndTable@ImGui@@YAXXZ	; ImGui::EndTable
$LN83@ShowDemoWi:
$LN82@ShowDemoWi:

; 531  :         }
; 532  :     }
; 533  : 
; 534  :     // All demo contents
; 535  :     ShowDemoWindowWidgets();

  00e63	e8 00 00 00 00	 call	 ?ShowDemoWindowWidgets@@YAXXZ ; ShowDemoWindowWidgets

; 536  :     ShowDemoWindowLayout();

  00e68	e8 00 00 00 00	 call	 ?ShowDemoWindowLayout@@YAXXZ ; ShowDemoWindowLayout

; 537  :     ShowDemoWindowPopups();

  00e6d	e8 00 00 00 00	 call	 ?ShowDemoWindowPopups@@YAXXZ ; ShowDemoWindowPopups

; 538  :     ShowDemoWindowTables();

  00e72	e8 00 00 00 00	 call	 ?ShowDemoWindowTables@@YAXXZ ; ShowDemoWindowTables

; 539  :     ShowDemoWindowInputs();

  00e77	e8 00 00 00 00	 call	 ?ShowDemoWindowInputs@@YAXXZ ; ShowDemoWindowInputs

; 540  : 
; 541  :     // End of ShowDemoWindow()
; 542  :     ImGui::PopItemWidth();

  00e7c	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 543  :     ImGui::End();

  00e81	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN1@ShowDemoWi:

; 544  : }

  00e86	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00e8a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ShowDemoWindow@ImGui@@YAXPEA_N@Z$rtcFrameData
  00e91	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00e96	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00e9d	48 33 cd	 xor	 rcx, rbp
  00ea0	e8 00 00 00 00	 call	 __security_check_cookie
  00ea5	48 8d a5 18 02
	00 00		 lea	 rsp, QWORD PTR [rbp+536]
  00eac	5f		 pop	 rdi
  00ead	5d		 pop	 rbp
  00eae	c3		 ret	 0
?ShowDemoWindow@ImGui@@YAXPEA_N@Z ENDP			; ImGui::ShowDemoWindow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0ImVec4@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 80
_x$ = 88
_y$ = 96
_z$ = 104
_w$ = 112
??0ImVec4@@QEAA@MMMM@Z PROC				; ImVec4::ImVec4, COMDAT

; 270  :     constexpr ImVec4(float _x, float _y, float _z, float _w)  : x(_x), y(_y), z(_z), w(_w) { }

$LN3:
  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00012	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00017	55		 push	 rbp
  00018	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0001c	48 8b ec	 mov	 rbp, rsp
  0001f	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00023	f3 0f 10 45 58	 movss	 xmm0, DWORD PTR _x$[rbp]
  00028	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  0002c	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00030	f3 0f 10 45 60	 movss	 xmm0, DWORD PTR _y$[rbp]
  00035	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  0003a	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0003e	f3 0f 10 45 68	 movss	 xmm0, DWORD PTR _z$[rbp]
  00043	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0
  00048	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0004c	f3 0f 10 45 70	 movss	 xmm0, DWORD PTR _w$[rbp]
  00051	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0
  00056	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0005e	5d		 pop	 rbp
  0005f	c3		 ret	 0
??0ImVec4@@QEAA@MMMM@Z ENDP				; ImVec4::ImVec4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0ImVec4@@QEAA@XZ
_TEXT	SEGMENT
this$ = 80
??0ImVec4@@QEAA@XZ PROC					; ImVec4::ImVec4, COMDAT

; 269  :     constexpr ImVec4()                                        : x(0.0f), y(0.0f), z(0.0f), w(0.0f) { }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b ec	 mov	 rbp, rsp
  0000d	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00011	0f 57 c0	 xorps	 xmm0, xmm0
  00014	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  00018	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0001c	0f 57 c0	 xorps	 xmm0, xmm0
  0001f	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  00024	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00028	0f 57 c0	 xorps	 xmm0, xmm0
  0002b	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0
  00030	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00034	0f 57 c0	 xorps	 xmm0, xmm0
  00037	f3 0f 11 40 0c	 movss	 DWORD PTR [rax+12], xmm0
  0003c	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00040	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
??0ImVec4@@QEAA@XZ ENDP					; ImVec4::ImVec4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0ImVec2@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 80
_x$ = 88
_y$ = 96
??0ImVec2@@QEAA@MM@Z PROC				; ImVec2::ImVec2, COMDAT

; 257  :     constexpr ImVec2(float _x, float _y)    : x(_x), y(_y) { }

$LN3:
  00000	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  00006	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  0000c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00011	55		 push	 rbp
  00012	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00016	48 8b ec	 mov	 rbp, rsp
  00019	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0001d	f3 0f 10 45 58	 movss	 xmm0, DWORD PTR _x$[rbp]
  00022	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  00026	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0002a	f3 0f 10 45 60	 movss	 xmm0, DWORD PTR _y$[rbp]
  0002f	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  00034	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00038	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
??0ImVec2@@QEAA@MM@Z ENDP				; ImVec2::ImVec2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\github\framework\tool\imgui\imgui.h
;	COMDAT ??0ImVec2@@QEAA@XZ
_TEXT	SEGMENT
this$ = 80
??0ImVec2@@QEAA@XZ PROC					; ImVec2::ImVec2, COMDAT

; 256  :     constexpr ImVec2()                      : x(0.0f), y(0.0f) { }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b ec	 mov	 rbp, rsp
  0000d	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00011	0f 57 c0	 xorps	 xmm0, xmm0
  00014	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  00018	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0001c	0f 57 c0	 xorps	 xmm0, xmm0
  0001f	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  00024	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00028	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
??0ImVec2@@QEAA@XZ ENDP					; ImVec2::ImVec2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_memory.h
;	COMDAT ?memchr@@YAPEAXPEAXH_K@Z
_TEXT	SEGMENT
_Pvc$ = 8
_Pv$ = 256
_C$ = 264
_N$ = 272
?memchr@@YAPEAXPEAXH_K@Z PROC				; memchr, COMDAT

; 102  :     {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 103  :         void const* const _Pvc = _Pv;

  00033	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Pv$[rbp]
  0003a	48 89 45 08	 mov	 QWORD PTR _Pvc$[rbp], rax

; 104  :         return const_cast<void*>(memchr(_Pvc, _C, _N));

  0003e	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR _N$[rbp]
  00045	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR _C$[rbp]
  0004b	48 8b 4d 08	 mov	 rcx, QWORD PTR _Pvc$[rbp]
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr

; 105  :     }

  00055	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
?memchr@@YAPEAXPEAXH_K@Z ENDP				; memchr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 192
tv67 = 200
__t$ = 240
__s$ = 248
__n$ = 256
__f$ = 264
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN7:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
$LN2@vector:
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR __n$[rbp]
  00040	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv66[rbp], rax
  00047	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR __n$[rbp]
  0004e	48 ff c8	 dec	 rax
  00051	48 89 85 00 01
	00 00		 mov	 QWORD PTR __n$[rbp], rax
  00058	48 83 bd c0 00
	00 00 00	 cmp	 QWORD PTR tv66[rbp], 0
  00060	76 0c		 jbe	 SHORT $LN5@vector
  00062	c7 85 c8 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv67[rbp], 1
  0006c	eb 0a		 jmp	 SHORT $LN6@vector
$LN5@vector:
  0006e	c7 85 c8 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv67[rbp], 0
$LN6@vector:
  00078	83 bd c8 00 00
	00 00		 cmp	 DWORD PTR tv67[rbp], 0
  0007f	74 2a		 je	 SHORT $LN3@vector
  00081	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR __t$[rbp]
  00088	ff 95 08 01 00
	00		 call	 QWORD PTR __f$[rbp]
  0008e	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR __s$[rbp]
  00095	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR __t$[rbp]
  0009c	48 03 c8	 add	 rcx, rax
  0009f	48 8b c1	 mov	 rax, rcx
  000a2	48 89 85 f0 00
	00 00		 mov	 QWORD PTR __t$[rbp], rax
  000a9	eb 8e		 jmp	 SHORT $LN2@vector
$LN3@vector:
  000ab	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000b2	5f		 pop	 rdi
  000b3	5d		 pop	 rbp
  000b4	c3		 ret	 0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
