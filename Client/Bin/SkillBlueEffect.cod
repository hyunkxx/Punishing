; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24245.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?AliceBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::AliceBlue
PUBLIC	?AntiqueWhite@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::AntiqueWhite
PUBLIC	?Aqua@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Aqua
PUBLIC	?Aquamarine@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Aquamarine
PUBLIC	?Azure@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Azure
PUBLIC	?Beige@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Beige
PUBLIC	?Bisque@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Bisque
PUBLIC	?Black@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Black
PUBLIC	?BlanchedAlmond@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::BlanchedAlmond
PUBLIC	?Blue@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Blue
PUBLIC	?BlueViolet@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::BlueViolet
PUBLIC	?Brown@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Brown
PUBLIC	?BurlyWood@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::BurlyWood
PUBLIC	?CadetBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::CadetBlue
PUBLIC	?Chartreuse@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Chartreuse
PUBLIC	?Chocolate@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Chocolate
PUBLIC	?Coral@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Coral
PUBLIC	?CornflowerBlue@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::CornflowerBlue
PUBLIC	?Cornsilk@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Cornsilk
PUBLIC	?Crimson@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Crimson
PUBLIC	?Cyan@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Cyan
PUBLIC	?DarkBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkBlue
PUBLIC	?DarkCyan@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkCyan
PUBLIC	?DarkGoldenrod@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::DarkGoldenrod
PUBLIC	?DarkGray@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkGray
PUBLIC	?DarkGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkGreen
PUBLIC	?DarkKhaki@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkKhaki
PUBLIC	?DarkMagenta@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkMagenta
PUBLIC	?DarkOliveGreen@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::DarkOliveGreen
PUBLIC	?DarkOrange@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkOrange
PUBLIC	?DarkOrchid@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkOrchid
PUBLIC	?DarkRed@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkRed
PUBLIC	?DarkSalmon@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkSalmon
PUBLIC	?DarkSeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkSeaGreen
PUBLIC	?DarkSlateBlue@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::DarkSlateBlue
PUBLIC	?DarkSlateGray@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::DarkSlateGray
PUBLIC	?DarkTurquoise@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::DarkTurquoise
PUBLIC	?DarkViolet@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkViolet
PUBLIC	?DeepPink@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DeepPink
PUBLIC	?DeepSkyBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DeepSkyBlue
PUBLIC	?DimGray@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DimGray
PUBLIC	?DodgerBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DodgerBlue
PUBLIC	?Firebrick@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Firebrick
PUBLIC	?FloralWhite@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::FloralWhite
PUBLIC	?ForestGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::ForestGreen
PUBLIC	?Fuchsia@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Fuchsia
PUBLIC	?Gainsboro@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Gainsboro
PUBLIC	?GhostWhite@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::GhostWhite
PUBLIC	?Gold@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Gold
PUBLIC	?Goldenrod@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Goldenrod
PUBLIC	?Gray@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Gray
PUBLIC	?Green@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Green
PUBLIC	?GreenYellow@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::GreenYellow
PUBLIC	?Honeydew@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Honeydew
PUBLIC	?HotPink@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::HotPink
PUBLIC	?IndianRed@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::IndianRed
PUBLIC	?Indigo@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Indigo
PUBLIC	?Ivory@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Ivory
PUBLIC	?Khaki@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Khaki
PUBLIC	?Lavender@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Lavender
PUBLIC	?LavenderBlush@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::LavenderBlush
PUBLIC	?LawnGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LawnGreen
PUBLIC	?LemonChiffon@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LemonChiffon
PUBLIC	?LightBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LightBlue
PUBLIC	?LightCoral@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LightCoral
PUBLIC	?LightCyan@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LightCyan
PUBLIC	?LightGoldenrodYellow@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::LightGoldenrodYellow
PUBLIC	?LightGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LightGreen
PUBLIC	?LightGray@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LightGray
PUBLIC	?LightPink@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LightPink
PUBLIC	?LightSalmon@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LightSalmon
PUBLIC	?LightSeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::LightSeaGreen
PUBLIC	?LightSkyBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LightSkyBlue
PUBLIC	?LightSlateGray@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::LightSlateGray
PUBLIC	?LightSteelBlue@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::LightSteelBlue
PUBLIC	?LightYellow@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LightYellow
PUBLIC	?Lime@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Lime
PUBLIC	?LimeGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LimeGreen
PUBLIC	?Linen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Linen
PUBLIC	?Magenta@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Magenta
PUBLIC	?Maroon@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Maroon
PUBLIC	?MediumAquamarine@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::MediumAquamarine
PUBLIC	?MediumBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::MediumBlue
PUBLIC	?MediumOrchid@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::MediumOrchid
PUBLIC	?MediumPurple@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::MediumPurple
PUBLIC	?MediumSeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::MediumSeaGreen
PUBLIC	?MediumSlateBlue@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::MediumSlateBlue
PUBLIC	?MediumSpringGreen@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::MediumSpringGreen
PUBLIC	?MediumTurquoise@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::MediumTurquoise
PUBLIC	?MediumVioletRed@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::MediumVioletRed
PUBLIC	?MidnightBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::MidnightBlue
PUBLIC	?MintCream@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::MintCream
PUBLIC	?MistyRose@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::MistyRose
PUBLIC	?Moccasin@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Moccasin
PUBLIC	?NavajoWhite@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::NavajoWhite
PUBLIC	?Navy@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Navy
PUBLIC	?OldLace@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::OldLace
PUBLIC	?Olive@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Olive
PUBLIC	?OliveDrab@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::OliveDrab
PUBLIC	?Orange@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Orange
PUBLIC	?OrangeRed@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::OrangeRed
PUBLIC	?Orchid@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Orchid
PUBLIC	?PaleGoldenrod@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::PaleGoldenrod
PUBLIC	?PaleGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::PaleGreen
PUBLIC	?PaleTurquoise@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::PaleTurquoise
PUBLIC	?PaleVioletRed@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::PaleVioletRed
PUBLIC	?PapayaWhip@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::PapayaWhip
PUBLIC	?PeachPuff@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::PeachPuff
PUBLIC	?Peru@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Peru
PUBLIC	?Pink@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Pink
PUBLIC	?Plum@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Plum
PUBLIC	?PowderBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::PowderBlue
PUBLIC	?Purple@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Purple
PUBLIC	?Red@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Red
PUBLIC	?RosyBrown@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::RosyBrown
PUBLIC	?RoyalBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::RoyalBlue
PUBLIC	?SaddleBrown@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::SaddleBrown
PUBLIC	?Salmon@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Salmon
PUBLIC	?SandyBrown@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::SandyBrown
PUBLIC	?SeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::SeaGreen
PUBLIC	?SeaShell@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::SeaShell
PUBLIC	?Sienna@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Sienna
PUBLIC	?g_BoxOffset@DirectX@@3QBUXMVECTORF32@1@B	; DirectX::g_BoxOffset
PUBLIC	?Silver@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Silver
PUBLIC	?g_RayEpsilon@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_RayEpsilon
PUBLIC	?SkyBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::SkyBlue
PUBLIC	?g_RayNegEpsilon@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_RayNegEpsilon
PUBLIC	?SlateBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::SlateBlue
PUBLIC	?g_FltMin@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_FltMin
PUBLIC	?SlateGray@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::SlateGray
PUBLIC	?g_FltMax@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_FltMax
PUBLIC	?Snow@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Snow
PUBLIC	?SpringGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::SpringGreen
PUBLIC	?SteelBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::SteelBlue
PUBLIC	?Tan@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Tan
PUBLIC	?Teal@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Teal
PUBLIC	?Thistle@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Thistle
PUBLIC	?Tomato@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Tomato
PUBLIC	?Transparent@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Transparent
PUBLIC	?Turquoise@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Turquoise
PUBLIC	?Violet@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Violet
PUBLIC	?Wheat@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Wheat
PUBLIC	?White@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::White
PUBLIC	?WhiteSmoke@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::WhiteSmoke
PUBLIC	?Yellow@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Yellow
PUBLIC	?YellowGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::YellowGreen
PUBLIC	?g_UnitVectorEpsilon@Internal@DirectX@@3UXMVECTORF32@2@B ; DirectX::Internal::g_UnitVectorEpsilon
PUBLIC	?g_UnitQuaternionEpsilon@Internal@DirectX@@3UXMVECTORF32@2@B ; DirectX::Internal::g_UnitQuaternionEpsilon
PUBLIC	?g_UnitPlaneEpsilon@Internal@DirectX@@3UXMVECTORF32@2@B ; DirectX::Internal::g_UnitPlaneEpsilon
PUBLIC	?g_XMSinCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMSinCoefficients0
PUBLIC	?g_XMSinCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMSinCoefficients1
PUBLIC	?g_XMCosCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMCosCoefficients0
PUBLIC	?g_XMCosCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMCosCoefficients1
PUBLIC	?g_XMTanCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMTanCoefficients0
PUBLIC	?g_XMTanCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMTanCoefficients1
PUBLIC	?g_XMTanCoefficients2@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMTanCoefficients2
PUBLIC	?g_XMArcCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMArcCoefficients0
PUBLIC	?g_XMArcCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMArcCoefficients1
PUBLIC	?g_XMATanCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMATanCoefficients0
PUBLIC	?g_XMATanCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMATanCoefficients1
PUBLIC	?g_XMATanEstCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMATanEstCoefficients0
PUBLIC	?g_XMATanEstCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMATanEstCoefficients1
PUBLIC	?g_XMTanEstCoefficients@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMTanEstCoefficients
PUBLIC	?g_XMArcEstCoefficients@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMArcEstCoefficients
PUBLIC	?g_XMPiConstants0@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMPiConstants0
PUBLIC	?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR0
PUBLIC	?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR1
PUBLIC	?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR2
PUBLIC	?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR3
PUBLIC	?g_XMNegIdentityR0@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegIdentityR0
PUBLIC	?g_XMNegIdentityR1@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegIdentityR1
PUBLIC	?g_XMNegIdentityR2@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegIdentityR2
PUBLIC	?g_XMNegIdentityR3@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegIdentityR3
PUBLIC	?g_XMNegativeZero@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMNegativeZero
PUBLIC	?g_XMNegate3@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMNegate3
PUBLIC	?g_XMMask3@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMMask3
PUBLIC	?g_XMMaskX@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMMaskX
PUBLIC	?g_XMMaskY@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMMaskY
PUBLIC	?g_XMMaskZ@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMMaskZ
PUBLIC	?g_XMMaskW@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMMaskW
PUBLIC	?g_XMOne@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMOne
PUBLIC	?g_XMOne3@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMOne3
PUBLIC	?g_XMZero@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMZero
PUBLIC	?g_XMTwo@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMTwo
PUBLIC	?g_XMFour@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMFour
PUBLIC	?g_XMSix@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMSix
PUBLIC	?g_XMNegativeOne@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegativeOne
PUBLIC	?g_XMOneHalf@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMOneHalf
PUBLIC	?g_XMNegativeOneHalf@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegativeOneHalf
PUBLIC	?g_XMNegativeTwoPi@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegativeTwoPi
PUBLIC	?g_XMNegativePi@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegativePi
PUBLIC	?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMHalfPi
PUBLIC	?g_XMPi@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMPi
PUBLIC	?g_XMReciprocalPi@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMReciprocalPi
PUBLIC	?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMTwoPi
PUBLIC	?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMReciprocalTwoPi
PUBLIC	?g_XMEpsilon@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMEpsilon
PUBLIC	?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMInfinity
PUBLIC	?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMQNaN
PUBLIC	?g_XMQNaNTest@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMQNaNTest
PUBLIC	?g_XMAbsMask@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMAbsMask
PUBLIC	?g_XMFltMin@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMFltMin
PUBLIC	?g_XMFltMax@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMFltMax
PUBLIC	?g_XMNegOneMask@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMNegOneMask
PUBLIC	?g_XMMaskA8R8G8B8@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMMaskA8R8G8B8
PUBLIC	?g_XMFlipA8R8G8B8@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMFlipA8R8G8B8
PUBLIC	?g_XMFixAA8R8G8B8@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixAA8R8G8B8
PUBLIC	?g_XMNormalizeA8R8G8B8@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMNormalizeA8R8G8B8
PUBLIC	?g_XMMaskA2B10G10R10@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMMaskA2B10G10R10
PUBLIC	?g_XMFlipA2B10G10R10@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMFlipA2B10G10R10
PUBLIC	?g_XMFixAA2B10G10R10@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixAA2B10G10R10
PUBLIC	?g_XMNormalizeA2B10G10R10@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMNormalizeA2B10G10R10
PUBLIC	?g_XMMaskX16Y16@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMMaskX16Y16
PUBLIC	?g_XMFlipX16Y16@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMFlipX16Y16
PUBLIC	?g_XMFixX16Y16@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixX16Y16
PUBLIC	?g_XMNormalizeX16Y16@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNormalizeX16Y16
PUBLIC	?g_XMMaskX16Y16Z16W16@DirectX@@3UXMVECTORU32@1@B ; DirectX::g_XMMaskX16Y16Z16W16
PUBLIC	?g_XMFlipX16Y16Z16W16@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMFlipX16Y16Z16W16
PUBLIC	?g_XMFixX16Y16Z16W16@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixX16Y16Z16W16
PUBLIC	?g_XMNormalizeX16Y16Z16W16@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMNormalizeX16Y16Z16W16
PUBLIC	?g_XMNoFraction@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNoFraction
PUBLIC	?g_XMMaskByte@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMMaskByte
PUBLIC	?g_XMNegateX@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMNegateX
PUBLIC	?g_XMNegateY@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMNegateY
PUBLIC	?g_XMNegateZ@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMNegateZ
PUBLIC	?g_XMNegateW@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMNegateW
PUBLIC	?g_XMSelect0101@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMSelect0101
PUBLIC	?g_XMSelect1010@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMSelect1010
PUBLIC	?g_XMOneHalfMinusEpsilon@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMOneHalfMinusEpsilon
PUBLIC	?g_XMSelect1000@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMSelect1000
PUBLIC	?g_XMSelect1100@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMSelect1100
PUBLIC	?g_XMSelect1110@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMSelect1110
PUBLIC	?g_XMSelect1011@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMSelect1011
PUBLIC	?g_XMFixupY16@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixupY16
PUBLIC	?g_XMFixupY16W16@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixupY16W16
PUBLIC	?g_XMFlipY@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMFlipY
PUBLIC	?g_XMFlipZ@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMFlipZ
PUBLIC	?g_XMFlipW@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMFlipW
PUBLIC	?g_XMFlipYZ@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMFlipYZ
PUBLIC	?g_XMFlipZW@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMFlipZW
PUBLIC	?g_XMFlipYW@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMFlipYW
PUBLIC	?g_XMMaskDec4@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMMaskDec4
PUBLIC	?g_XMXorDec4@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMXorDec4
PUBLIC	?g_XMAddUDec4@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMAddUDec4
PUBLIC	?g_XMAddDec4@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMAddDec4
PUBLIC	?g_XMMulDec4@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMMulDec4
PUBLIC	?g_XMMaskByte4@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMMaskByte4
PUBLIC	?g_XMXorByte4@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMXorByte4
PUBLIC	?g_XMAddByte4@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMAddByte4
PUBLIC	?g_XMFixUnsigned@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixUnsigned
PUBLIC	?g_XMMaxInt@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMMaxInt
PUBLIC	?g_XMMaxUInt@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMMaxUInt
PUBLIC	?g_XMUnsignedFix@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMUnsignedFix
PUBLIC	?g_XMsrgbScale@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMsrgbScale
PUBLIC	?g_XMsrgbA@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMsrgbA
PUBLIC	?g_XMsrgbA1@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMsrgbA1
PUBLIC	?g_XMExponentBias@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMExponentBias
PUBLIC	?g_XMSubnormalExponent@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSubnormalExponent
PUBLIC	?g_XMNumTrailing@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMNumTrailing
PUBLIC	?g_XMMinNormal@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMMinNormal
PUBLIC	?g_XMNegInfinity@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMNegInfinity
PUBLIC	?g_XMNegQNaN@DirectX@@3UXMVECTORU32@1@B		; DirectX::g_XMNegQNaN
PUBLIC	?g_XMBin128@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMBin128
PUBLIC	?g_XMBinNeg150@DirectX@@3UXMVECTORU32@1@B	; DirectX::g_XMBinNeg150
PUBLIC	?g_XM253@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XM253
PUBLIC	?g_XMExpEst1@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst1
PUBLIC	?g_XMExpEst2@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst2
PUBLIC	?g_XMExpEst3@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst3
PUBLIC	?g_XMExpEst4@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst4
PUBLIC	?g_XMExpEst5@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst5
PUBLIC	?g_XMExpEst6@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst6
PUBLIC	?g_XMExpEst7@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst7
PUBLIC	?g_XMLogEst0@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst0
PUBLIC	?g_XMLogEst1@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst1
PUBLIC	?g_XMLogEst2@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst2
PUBLIC	?g_XMLogEst3@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst3
PUBLIC	?g_XMLogEst4@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst4
PUBLIC	?g_XMLogEst5@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst5
PUBLIC	?g_XMLogEst6@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst6
PUBLIC	?g_XMLogEst7@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst7
PUBLIC	?g_XMLgE@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLgE
PUBLIC	?g_XMInvLgE@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMInvLgE
;	COMDAT ?g_XMInvLgE@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMInvLgE@DirectX@@3UXMVECTORF32@1@B DD 03f317218r ; 0.693147 ; DirectX::g_XMInvLgE
	DD	03f317218r			; 0.693147
	DD	03f317218r			; 0.693147
	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?g_XMLgE@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLgE@DirectX@@3UXMVECTORF32@1@B DD 03fb8aa3br ; 1.4427 ; DirectX::g_XMLgE
	DD	03fb8aa3br			; 1.4427
	DD	03fb8aa3br			; 1.4427
	DD	03fb8aa3br			; 1.4427
CONST	ENDS
;	COMDAT ?g_XMLogEst7@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst7@DirectX@@3UXMVECTORF32@1@B DD 0bc2d4f59r ; -0.010578 ; DirectX::g_XMLogEst7
	DD	0bc2d4f59r			; -0.010578
	DD	0bc2d4f59r			; -0.010578
	DD	0bc2d4f59r			; -0.010578
CONST	ENDS
;	COMDAT ?g_XMLogEst6@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst6@DirectX@@3UXMVECTORF32@1@B DD 03d6a1405r ; 0.057148 ; DirectX::g_XMLogEst6
	DD	03d6a1405r			; 0.057148
	DD	03d6a1405r			; 0.057148
	DD	03d6a1405r			; 0.057148
CONST	ENDS
;	COMDAT ?g_XMLogEst5@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst5@DirectX@@3UXMVECTORF32@1@B DD 0be153261r ; -0.1457 ; DirectX::g_XMLogEst5
	DD	0be153261r			; -0.1457
	DD	0be153261r			; -0.1457
	DD	0be153261r			; -0.1457
CONST	ENDS
;	COMDAT ?g_XMLogEst4@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst4@DirectX@@3UXMVECTORF32@1@B DD 03e7e8e61r ; 0.24859 ; DirectX::g_XMLogEst4
	DD	03e7e8e61r			; 0.24859
	DD	03e7e8e61r			; 0.24859
	DD	03e7e8e61r			; 0.24859
CONST	ENDS
;	COMDAT ?g_XMLogEst3@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst3@DirectX@@3UXMVECTORF32@1@B DD 0beb359der ; -0.350295 ; DirectX::g_XMLogEst3
	DD	0beb359der			; -0.350295
	DD	0beb359der			; -0.350295
	DD	0beb359der			; -0.350295
CONST	ENDS
;	COMDAT ?g_XMLogEst2@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst2@DirectX@@3UXMVECTORF32@1@B DD 03ef571d2r ; 0.479384 ; DirectX::g_XMLogEst2
	DD	03ef571d2r			; 0.479384
	DD	03ef571d2r			; 0.479384
	DD	03ef571d2r			; 0.479384
CONST	ENDS
;	COMDAT ?g_XMLogEst1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst1@DirectX@@3UXMVECTORF32@1@B DD 0bf38a351r ; -0.721242 ; DirectX::g_XMLogEst1
	DD	0bf38a351r			; -0.721242
	DD	0bf38a351r			; -0.721242
	DD	0bf38a351r			; -0.721242
CONST	ENDS
;	COMDAT ?g_XMLogEst0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst0@DirectX@@3UXMVECTORF32@1@B DD 03fb8aa2ar ; 1.44269 ; DirectX::g_XMLogEst0
	DD	03fb8aa2ar			; 1.44269
	DD	03fb8aa2ar			; 1.44269
	DD	03fb8aa2ar			; 1.44269
CONST	ENDS
;	COMDAT ?g_XMExpEst7@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst7@DirectX@@3UXMVECTORF32@1@B DD 0b7364261r ; -1.08635e-05 ; DirectX::g_XMExpEst7
	DD	0b7364261r			; -1.08635e-05
	DD	0b7364261r			; -1.08635e-05
	DD	0b7364261r			; -1.08635e-05
CONST	ENDS
;	COMDAT ?g_XMExpEst6@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst6@DirectX@@3UXMVECTORF32@1@B DD 0391aa7d7r ; 0.000147491 ; DirectX::g_XMExpEst6
	DD	0391aa7d7r			; 0.000147491
	DD	0391aa7d7r			; 0.000147491
	DD	0391aa7d7r			; 0.000147491
CONST	ENDS
;	COMDAT ?g_XMExpEst5@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst5@DirectX@@3UXMVECTORF32@1@B DD 0baae1854r ; -0.00132824 ; DirectX::g_XMExpEst5
	DD	0baae1854r			; -0.00132824
	DD	0baae1854r			; -0.00132824
	DD	0baae1854r			; -0.00132824
CONST	ENDS
;	COMDAT ?g_XMExpEst4@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst4@DirectX@@3UXMVECTORF32@1@B DD 03c1d8c54r ; 0.00961598 ; DirectX::g_XMExpEst4
	DD	03c1d8c54r			; 0.00961598
	DD	03c1d8c54r			; 0.00961598
	DD	03c1d8c54r			; 0.00961598
CONST	ENDS
;	COMDAT ?g_XMExpEst3@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst3@DirectX@@3UXMVECTORF32@1@B DD 0bd6357car ; -0.0555036 ; DirectX::g_XMExpEst3
	DD	0bd6357car			; -0.0555036
	DD	0bd6357car			; -0.0555036
	DD	0bd6357car			; -0.0555036
CONST	ENDS
;	COMDAT ?g_XMExpEst2@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst2@DirectX@@3UXMVECTORF32@1@B DD 03e75fdedr ; 0.240226 ; DirectX::g_XMExpEst2
	DD	03e75fdedr			; 0.240226
	DD	03e75fdedr			; 0.240226
	DD	03e75fdedr			; 0.240226
CONST	ENDS
;	COMDAT ?g_XMExpEst1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst1@DirectX@@3UXMVECTORF32@1@B DD 0bf317218r ; -0.693147 ; DirectX::g_XMExpEst1
	DD	0bf317218r			; -0.693147
	DD	0bf317218r			; -0.693147
	DD	0bf317218r			; -0.693147
CONST	ENDS
;	COMDAT ?g_XM253@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XM253@DirectX@@3UXMVECTORI32@1@B DD 0fdH		; DirectX::g_XM253
	DD	0fdH
	DD	0fdH
	DD	0fdH
CONST	ENDS
;	COMDAT ?g_XMBinNeg150@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMBinNeg150@DirectX@@3UXMVECTORU32@1@B DD 0c3160000H	; DirectX::g_XMBinNeg150
	DD	0c3160000H
	DD	0c3160000H
	DD	0c3160000H
CONST	ENDS
;	COMDAT ?g_XMBin128@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMBin128@DirectX@@3UXMVECTORI32@1@B DD 043000000H	; DirectX::g_XMBin128
	DD	043000000H
	DD	043000000H
	DD	043000000H
CONST	ENDS
;	COMDAT ?g_XMNegQNaN@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMNegQNaN@DirectX@@3UXMVECTORU32@1@B DD 0ffc00000H	; DirectX::g_XMNegQNaN
	DD	0ffc00000H
	DD	0ffc00000H
	DD	0ffc00000H
CONST	ENDS
;	COMDAT ?g_XMNegInfinity@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMNegInfinity@DirectX@@3UXMVECTORU32@1@B DD 0ff800000H ; DirectX::g_XMNegInfinity
	DD	0ff800000H
	DD	0ff800000H
	DD	0ff800000H
CONST	ENDS
;	COMDAT ?g_XMMinNormal@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMinNormal@DirectX@@3UXMVECTORI32@1@B DD 0800000H	; DirectX::g_XMMinNormal
	DD	0800000H
	DD	0800000H
	DD	0800000H
CONST	ENDS
;	COMDAT ?g_XMNumTrailing@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMNumTrailing@DirectX@@3UXMVECTORI32@1@B DD 017H	; DirectX::g_XMNumTrailing
	DD	017H
	DD	017H
	DD	017H
CONST	ENDS
;	COMDAT ?g_XMSubnormalExponent@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMSubnormalExponent@DirectX@@3UXMVECTORI32@1@B DD 0ffffff82H ; DirectX::g_XMSubnormalExponent
	DD	0ffffff82H
	DD	0ffffff82H
	DD	0ffffff82H
CONST	ENDS
;	COMDAT ?g_XMExponentBias@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMExponentBias@DirectX@@3UXMVECTORI32@1@B DD 07fH	; DirectX::g_XMExponentBias
	DD	07fH
	DD	07fH
	DD	07fH
CONST	ENDS
;	COMDAT ?g_XMsrgbA1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMsrgbA1@DirectX@@3UXMVECTORF32@1@B DD 03f870a3dr ; 1.055 ; DirectX::g_XMsrgbA1
	DD	03f870a3dr			; 1.055
	DD	03f870a3dr			; 1.055
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMsrgbA@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMsrgbA@DirectX@@3UXMVECTORF32@1@B DD 03d6147aer ; 0.055 ; DirectX::g_XMsrgbA
	DD	03d6147aer			; 0.055
	DD	03d6147aer			; 0.055
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMsrgbScale@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMsrgbScale@DirectX@@3UXMVECTORF32@1@B DD 0414eb852r ; 12.92 ; DirectX::g_XMsrgbScale
	DD	0414eb852r			; 12.92
	DD	0414eb852r			; 12.92
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMUnsignedFix@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMUnsignedFix@DirectX@@3UXMVECTORF32@1@B DD 04f000000r ; 2.14748e+09 ; DirectX::g_XMUnsignedFix
	DD	04f000000r			; 2.14748e+09
	DD	04f000000r			; 2.14748e+09
	DD	04f000000r			; 2.14748e+09
CONST	ENDS
;	COMDAT ?g_XMMaxUInt@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMMaxUInt@DirectX@@3UXMVECTORF32@1@B DD 04f7fffffr ; 4.29497e+09 ; DirectX::g_XMMaxUInt
	DD	04f7fffffr			; 4.29497e+09
	DD	04f7fffffr			; 4.29497e+09
	DD	04f7fffffr			; 4.29497e+09
CONST	ENDS
;	COMDAT ?g_XMMaxInt@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMMaxInt@DirectX@@3UXMVECTORF32@1@B DD 04effffffr ; 2.14748e+09 ; DirectX::g_XMMaxInt
	DD	04effffffr			; 2.14748e+09
	DD	04effffffr			; 2.14748e+09
	DD	04effffffr			; 2.14748e+09
CONST	ENDS
;	COMDAT ?g_XMFixUnsigned@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixUnsigned@DirectX@@3UXMVECTORF32@1@B DD 04f000000r ; 2.14748e+09 ; DirectX::g_XMFixUnsigned
	DD	04f000000r			; 2.14748e+09
	DD	04f000000r			; 2.14748e+09
	DD	04f000000r			; 2.14748e+09
CONST	ENDS
;	COMDAT ?g_XMAddByte4@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMAddByte4@DirectX@@3UXMVECTORF32@1@B DD 0c3000000r ; -128 ; DirectX::g_XMAddByte4
	DD	0c7000000r			; -32768
	DD	0cb000000r			; -8.38861e+06
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMXorByte4@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMXorByte4@DirectX@@3UXMVECTORI32@1@B DD 080H	; DirectX::g_XMXorByte4
	DD	08000H
	DD	0800000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskByte4@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMaskByte4@DirectX@@3UXMVECTORU32@1@B DD 0ffH	; DirectX::g_XMMaskByte4
	DD	0ff00H
	DD	0ff0000H
	DD	0ff000000H
CONST	ENDS
;	COMDAT ?g_XMMulDec4@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMMulDec4@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMMulDec4
	DD	03a800000r			; 0.000976563
	DD	035800000r			; 9.53674e-07
	DD	030800000r			; 9.31323e-10
CONST	ENDS
;	COMDAT ?g_XMAddDec4@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMAddDec4@DirectX@@3UXMVECTORF32@1@B DD 0c4000000r ; -512 ; DirectX::g_XMAddDec4
	DD	0c9000000r			; -524288
	DD	0ce000000r			; -5.36871e+08
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMAddUDec4@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMAddUDec4@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMAddUDec4
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	04f000000r			; 2.14748e+09
CONST	ENDS
;	COMDAT ?g_XMXorDec4@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMXorDec4@DirectX@@3UXMVECTORI32@1@B DD 0200H	; DirectX::g_XMXorDec4
	DD	080000H
	DD	020000000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskDec4@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMaskDec4@DirectX@@3UXMVECTORI32@1@B DD 03ffH	; DirectX::g_XMMaskDec4
	DD	0ffc00H
	DD	03ff00000H
	DD	0c0000000H
CONST	ENDS
;	COMDAT ?g_XMFlipYW@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMFlipYW@DirectX@@3UXMVECTORU32@1@B DD 00H		; DirectX::g_XMFlipYW
	DD	080000000H
	DD	00H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMFlipZW@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMFlipZW@DirectX@@3UXMVECTORU32@1@B DD 00H		; DirectX::g_XMFlipZW
	DD	00H
	DD	080000000H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMFlipYZ@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMFlipYZ@DirectX@@3UXMVECTORU32@1@B DD 00H		; DirectX::g_XMFlipYZ
	DD	080000000H
	DD	080000000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMFlipW@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMFlipW@DirectX@@3UXMVECTORU32@1@B DD 00H		; DirectX::g_XMFlipW
	DD	00H
	DD	00H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMFlipZ@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMFlipZ@DirectX@@3UXMVECTORU32@1@B DD 00H		; DirectX::g_XMFlipZ
	DD	00H
	DD	080000000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMFlipY@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMFlipY@DirectX@@3UXMVECTORU32@1@B DD 00H		; DirectX::g_XMFlipY
	DD	080000000H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMFixupY16W16@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixupY16W16@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMFixupY16W16
	DD	03f800000r			; 1
	DD	037800000r			; 1.52588e-05
	DD	037800000r			; 1.52588e-05
CONST	ENDS
;	COMDAT ?g_XMFixupY16@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixupY16@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMFixupY16
	DD	037800000r			; 1.52588e-05
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMSelect1011@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMSelect1011@DirectX@@3UXMVECTORU32@1@B DD 0ffffffffH ; DirectX::g_XMSelect1011
	DD	00H
	DD	0ffffffffH
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?g_XMSelect1110@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMSelect1110@DirectX@@3UXMVECTORU32@1@B DD 0ffffffffH ; DirectX::g_XMSelect1110
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMSelect1100@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMSelect1100@DirectX@@3UXMVECTORU32@1@B DD 0ffffffffH ; DirectX::g_XMSelect1100
	DD	0ffffffffH
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMSelect1000@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMSelect1000@DirectX@@3UXMVECTORU32@1@B DD 0ffffffffH ; DirectX::g_XMSelect1000
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMOneHalfMinusEpsilon@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMOneHalfMinusEpsilon@DirectX@@3UXMVECTORI32@1@B DD 03efffffdH ; DirectX::g_XMOneHalfMinusEpsilon
	DD	03efffffdH
	DD	03efffffdH
	DD	03efffffdH
CONST	ENDS
;	COMDAT ?g_XMSelect1010@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMSelect1010@DirectX@@3UXMVECTORU32@1@B DD 0ffffffffH ; DirectX::g_XMSelect1010
	DD	00H
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMSelect0101@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMSelect0101@DirectX@@3UXMVECTORU32@1@B DD 00H	; DirectX::g_XMSelect0101
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?g_XMNegateW@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegateW@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMNegateW
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ?g_XMNegateZ@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegateZ@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMNegateZ
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMNegateY@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegateY@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMNegateY
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMNegateX@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegateX@DirectX@@3UXMVECTORF32@1@B DD 0bf800000r ; -1 ; DirectX::g_XMNegateX
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMMaskByte@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMaskByte@DirectX@@3UXMVECTORI32@1@B DD 0ffH	; DirectX::g_XMMaskByte
	DD	0ffH
	DD	0ffH
	DD	0ffH
CONST	ENDS
;	COMDAT ?g_XMNoFraction@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNoFraction@DirectX@@3UXMVECTORF32@1@B DD 04b000000r ; 8.38861e+06 ; DirectX::g_XMNoFraction
	DD	04b000000r			; 8.38861e+06
	DD	04b000000r			; 8.38861e+06
	DD	04b000000r			; 8.38861e+06
CONST	ENDS
;	COMDAT ?g_XMNormalizeX16Y16Z16W16@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNormalizeX16Y16Z16W16@DirectX@@3UXMVECTORF32@1@B DD 038000100r ; 3.05185e-05 ; DirectX::g_XMNormalizeX16Y16Z16W16
	DD	038000100r			; 3.05185e-05
	DD	030000100r			; 4.65675e-10
	DD	030000100r			; 4.65675e-10
CONST	ENDS
;	COMDAT ?g_XMFixX16Y16Z16W16@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixX16Y16Z16W16@DirectX@@3UXMVECTORF32@1@B DD 0c7000000r ; -32768 ; DirectX::g_XMFixX16Y16Z16W16
	DD	0c7000000r			; -32768
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMFlipX16Y16Z16W16@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFlipX16Y16Z16W16@DirectX@@3UXMVECTORI32@1@B DD 08000H ; DirectX::g_XMFlipX16Y16Z16W16
	DD	08000H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskX16Y16Z16W16@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMaskX16Y16Z16W16@DirectX@@3UXMVECTORU32@1@B DD 0ffffH ; DirectX::g_XMMaskX16Y16Z16W16
	DD	0ffffH
	DD	0ffff0000H
	DD	0ffff0000H
CONST	ENDS
;	COMDAT ?g_XMNormalizeX16Y16@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNormalizeX16Y16@DirectX@@3UXMVECTORF32@1@B DD 038000100r ; 3.05185e-05 ; DirectX::g_XMNormalizeX16Y16
	DD	030000100r			; 4.65675e-10
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMFixX16Y16@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixX16Y16@DirectX@@3UXMVECTORF32@1@B DD 0c7000000r ; -32768 ; DirectX::g_XMFixX16Y16
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMFlipX16Y16@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFlipX16Y16@DirectX@@3UXMVECTORI32@1@B DD 08000H	; DirectX::g_XMFlipX16Y16
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskX16Y16@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMaskX16Y16@DirectX@@3UXMVECTORU32@1@B DD 0ffffH	; DirectX::g_XMMaskX16Y16
	DD	0ffff0000H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMNormalizeA2B10G10R10@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNormalizeA2B10G10R10@DirectX@@3UXMVECTORF32@1@B DD 03b004020r ; 0.00195695 ; DirectX::g_XMNormalizeA2B10G10R10
	DD	036004020r			; 1.91108e-06
	DD	031004020r			; 1.86629e-09
	DD	02faaaaabr			; 3.10441e-10
CONST	ENDS
;	COMDAT ?g_XMFixAA2B10G10R10@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixAA2B10G10R10@DirectX@@3UXMVECTORF32@1@B DD 0c4000000r ; -512 ; DirectX::g_XMFixAA2B10G10R10
	DD	0c9000000r			; -524288
	DD	0ce000000r			; -5.36871e+08
	DD	04f000000r			; 2.14748e+09
CONST	ENDS
;	COMDAT ?g_XMFlipA2B10G10R10@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMFlipA2B10G10R10@DirectX@@3UXMVECTORU32@1@B DD 0200H ; DirectX::g_XMFlipA2B10G10R10
	DD	080000H
	DD	020000000H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMMaskA2B10G10R10@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMaskA2B10G10R10@DirectX@@3UXMVECTORU32@1@B DD 03ffH ; DirectX::g_XMMaskA2B10G10R10
	DD	0ffc00H
	DD	03ff00000H
	DD	0c0000000H
CONST	ENDS
;	COMDAT ?g_XMNormalizeA8R8G8B8@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNormalizeA8R8G8B8@DirectX@@3UXMVECTORF32@1@B DD 033808081r ; 5.98384e-08 ; DirectX::g_XMNormalizeA8R8G8B8
	DD	037808081r			; 1.53186e-05
	DD	03b808081r			; 0.00392157
	DD	02f808081r			; 2.33744e-10
CONST	ENDS
;	COMDAT ?g_XMFixAA8R8G8B8@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixAA8R8G8B8@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMFixAA8R8G8B8
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	04f000000r			; 2.14748e+09
CONST	ENDS
;	COMDAT ?g_XMFlipA8R8G8B8@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMFlipA8R8G8B8@DirectX@@3UXMVECTORU32@1@B DD 00H	; DirectX::g_XMFlipA8R8G8B8
	DD	00H
	DD	00H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMMaskA8R8G8B8@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMaskA8R8G8B8@DirectX@@3UXMVECTORU32@1@B DD 0ff0000H ; DirectX::g_XMMaskA8R8G8B8
	DD	0ff00H
	DD	0ffH
	DD	0ff000000H
CONST	ENDS
;	COMDAT ?g_XMNegOneMask@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMNegOneMask@DirectX@@3UXMVECTORU32@1@B DD 0ffffffffH ; DirectX::g_XMNegOneMask
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?g_XMFltMax@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFltMax@DirectX@@3UXMVECTORI32@1@B DD 07f7fffffH	; DirectX::g_XMFltMax
	DD	07f7fffffH
	DD	07f7fffffH
	DD	07f7fffffH
CONST	ENDS
;	COMDAT ?g_XMFltMin@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFltMin@DirectX@@3UXMVECTORI32@1@B DD 0800000H	; DirectX::g_XMFltMin
	DD	0800000H
	DD	0800000H
	DD	0800000H
CONST	ENDS
;	COMDAT ?g_XMAbsMask@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMAbsMask@DirectX@@3UXMVECTORI32@1@B DD 07fffffffH	; DirectX::g_XMAbsMask
	DD	07fffffffH
	DD	07fffffffH
	DD	07fffffffH
CONST	ENDS
;	COMDAT ?g_XMQNaNTest@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMQNaNTest@DirectX@@3UXMVECTORI32@1@B DD 07fffffH	; DirectX::g_XMQNaNTest
	DD	07fffffH
	DD	07fffffH
	DD	07fffffH
CONST	ENDS
;	COMDAT ?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B DD 07fc00000H	; DirectX::g_XMQNaN
	DD	07fc00000H
	DD	07fc00000H
	DD	07fc00000H
CONST	ENDS
;	COMDAT ?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B DD 07f800000H	; DirectX::g_XMInfinity
	DD	07f800000H
	DD	07f800000H
	DD	07f800000H
CONST	ENDS
;	COMDAT ?g_XMEpsilon@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMEpsilon@DirectX@@3UXMVECTORF32@1@B DD 034000000r ; 1.19209e-07 ; DirectX::g_XMEpsilon
	DD	034000000r			; 1.19209e-07
	DD	034000000r			; 1.19209e-07
	DD	034000000r			; 1.19209e-07
CONST	ENDS
;	COMDAT ?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B DD 03e22f983r ; 0.159155 ; DirectX::g_XMReciprocalTwoPi
	DD	03e22f983r			; 0.159155
	DD	03e22f983r			; 0.159155
	DD	03e22f983r			; 0.159155
CONST	ENDS
;	COMDAT ?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B DD 040c90fdbr ; 6.28319 ; DirectX::g_XMTwoPi
	DD	040c90fdbr			; 6.28319
	DD	040c90fdbr			; 6.28319
	DD	040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT ?g_XMReciprocalPi@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMReciprocalPi@DirectX@@3UXMVECTORF32@1@B DD 03ea2f983r ; 0.31831 ; DirectX::g_XMReciprocalPi
	DD	03ea2f983r			; 0.31831
	DD	03ea2f983r			; 0.31831
	DD	03ea2f983r			; 0.31831
CONST	ENDS
;	COMDAT ?g_XMPi@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMPi@DirectX@@3UXMVECTORF32@1@B DD 040490fdbr ; 3.14159 ; DirectX::g_XMPi
	DD	040490fdbr			; 3.14159
	DD	040490fdbr			; 3.14159
	DD	040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT ?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B DD 03fc90fdbr ; 1.5708 ; DirectX::g_XMHalfPi
	DD	03fc90fdbr			; 1.5708
	DD	03fc90fdbr			; 1.5708
	DD	03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT ?g_XMNegativePi@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegativePi@DirectX@@3UXMVECTORF32@1@B DD 0c0490fdbr ; -3.14159 ; DirectX::g_XMNegativePi
	DD	0c0490fdbr			; -3.14159
	DD	0c0490fdbr			; -3.14159
	DD	0c0490fdbr			; -3.14159
CONST	ENDS
;	COMDAT ?g_XMNegativeTwoPi@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegativeTwoPi@DirectX@@3UXMVECTORF32@1@B DD 0c0c90fdbr ; -6.28319 ; DirectX::g_XMNegativeTwoPi
	DD	0c0c90fdbr			; -6.28319
	DD	0c0c90fdbr			; -6.28319
	DD	0c0c90fdbr			; -6.28319
CONST	ENDS
;	COMDAT ?g_XMNegativeOneHalf@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegativeOneHalf@DirectX@@3UXMVECTORF32@1@B DD 0bf000000r ; -0.5 ; DirectX::g_XMNegativeOneHalf
	DD	0bf000000r			; -0.5
	DD	0bf000000r			; -0.5
	DD	0bf000000r			; -0.5
CONST	ENDS
;	COMDAT ?g_XMOneHalf@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMOneHalf@DirectX@@3UXMVECTORF32@1@B DD 03f000000r ; 0.5 ; DirectX::g_XMOneHalf
	DD	03f000000r			; 0.5
	DD	03f000000r			; 0.5
	DD	03f000000r			; 0.5
CONST	ENDS
;	COMDAT ?g_XMNegativeOne@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegativeOne@DirectX@@3UXMVECTORF32@1@B DD 0bf800000r ; -1 ; DirectX::g_XMNegativeOne
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ?g_XMSix@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMSix@DirectX@@3UXMVECTORF32@1@B DD 040c00000r ; 6	; DirectX::g_XMSix
	DD	040c00000r			; 6
	DD	040c00000r			; 6
	DD	040c00000r			; 6
CONST	ENDS
;	COMDAT ?g_XMFour@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFour@DirectX@@3UXMVECTORF32@1@B DD 040800000r ; 4	; DirectX::g_XMFour
	DD	040800000r			; 4
	DD	040800000r			; 4
	DD	040800000r			; 4
CONST	ENDS
;	COMDAT ?g_XMTwo@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMTwo@DirectX@@3UXMVECTORF32@1@B DD 040000000r ; 2	; DirectX::g_XMTwo
	DD	040000000r			; 2
	DD	040000000r			; 2
	DD	040000000r			; 2
CONST	ENDS
;	COMDAT ?g_XMZero@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMZero@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0	; DirectX::g_XMZero
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMOne3@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMOne3@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1	; DirectX::g_XMOne3
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMOne@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMOne@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1	; DirectX::g_XMOne
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMMaskW@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMaskW@DirectX@@3UXMVECTORU32@1@B DD 00H		; DirectX::g_XMMaskW
	DD	00H
	DD	00H
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?g_XMMaskZ@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMaskZ@DirectX@@3UXMVECTORU32@1@B DD 00H		; DirectX::g_XMMaskZ
	DD	00H
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskY@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMaskY@DirectX@@3UXMVECTORU32@1@B DD 00H		; DirectX::g_XMMaskY
	DD	0ffffffffH
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskX@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMaskX@DirectX@@3UXMVECTORU32@1@B DD 0ffffffffH	; DirectX::g_XMMaskX
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMask3@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMMask3@DirectX@@3UXMVECTORU32@1@B DD 0ffffffffH	; DirectX::g_XMMask3
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMNegate3@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMNegate3@DirectX@@3UXMVECTORU32@1@B DD 080000000H	; DirectX::g_XMNegate3
	DD	080000000H
	DD	080000000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMNegativeZero@DirectX@@3UXMVECTORU32@1@B
CONST	SEGMENT
?g_XMNegativeZero@DirectX@@3UXMVECTORU32@1@B DD 080000000H ; DirectX::g_XMNegativeZero
	DD	080000000H
	DD	080000000H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMNegIdentityR3@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegIdentityR3@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMNegIdentityR3
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ?g_XMNegIdentityR2@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegIdentityR2@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMNegIdentityR2
	DD	000000000r			; 0
	DD	0bf800000r			; -1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMNegIdentityR1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegIdentityR1@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMNegIdentityR1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMNegIdentityR0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegIdentityR0@DirectX@@3UXMVECTORF32@1@B DD 0bf800000r ; -1 ; DirectX::g_XMNegIdentityR0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR3
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR2
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMIdentityR0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMPiConstants0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMPiConstants0@DirectX@@3UXMVECTORF32@1@B DD 040490fdbr ; 3.14159 ; DirectX::g_XMPiConstants0
	DD	040c90fdbr			; 6.28319
	DD	03ea2f983r			; 0.31831
	DD	03e22f983r			; 0.159155
CONST	ENDS
;	COMDAT ?g_XMArcEstCoefficients@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMArcEstCoefficients@DirectX@@3UXMVECTORF32@1@B DD 03fc90da4r ; 1.57073 ; DirectX::g_XMArcEstCoefficients
	DD	0be593484r			; -0.212114
	DD	03d981627r			; 0.074261
	DD	0bc996e30r			; -0.0187293
CONST	ENDS
;	COMDAT ?g_XMTanEstCoefficients@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMTanEstCoefficients@DirectX@@3UXMVECTORF32@1@B DD 0401ef9dbr ; 2.484 ; DirectX::g_XMTanEstCoefficients
	DD	0be482f23r			; -0.195492
	DD	0401de9e6r			; 2.4674
	DD	03ea2f983r			; 0.31831
CONST	ENDS
;	COMDAT ?g_XMATanEstCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMATanEstCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 0bea91d04r ; -0.330299 ; DirectX::g_XMATanEstCoefficients1
	DD	03e3876e2r			; 0.180141
	DD	0bdae5a36r			; -0.085133
	DD	03caaae5fr			; 0.0208351
CONST	ENDS
;	COMDAT ?g_XMATanEstCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMATanEstCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 03f7ff738r ; 0.999866 ; DirectX::g_XMATanEstCoefficients0
	DD	03f7ff738r			; 0.999866
	DD	03f7ff738r			; 0.999866
	DD	03f7ff738r			; 0.999866
CONST	ENDS
;	COMDAT ?g_XMATanCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMATanCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 0bd9a3174r ; -0.0752896 ; DirectX::g_XMATanCoefficients1
	DD	03d2fc1fer			; 0.0429096
	DD	0bc846e02r			; -0.0161657
	DD	03b3bd74ar			; 0.00286623
CONST	ENDS
;	COMDAT ?g_XMATanCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMATanCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 0beaaaa6cr ; -0.333331 ; DirectX::g_XMATanCoefficients0
	DD	03e4cbbe5r			; 0.199936
	DD	0be117fc7r			; -0.142089
	DD	03dda3d83r			; 0.106563
CONST	ENDS
;	COMDAT ?g_XMArcCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMArcCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 03cfd10f8r ; 0.0308919 ; DirectX::g_XMArcCoefficients1
	DD	0bc8bfc66r			; -0.0170881
	DD	03bda90c5r			; 0.00667009
	DD	0baa57a2cr			; -0.00126249
CONST	ENDS
;	COMDAT ?g_XMArcCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMArcCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 03fc90fdar ; 1.5708 ; DirectX::g_XMArcCoefficients0
	DD	0be5bbfcar			; -0.214599
	DD	03db63a9er			; 0.088979
	DD	0bd4d8392r			; -0.0501743
CONST	ENDS
;	COMDAT ?g_XMTanCoefficients2@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMTanCoefficients2@DirectX@@3UXMVECTORF32@1@B DD 03a1aac12r ; 0.000590027 ; DirectX::g_XMTanCoefficients2
	DD	0397abeb9r			; 0.000239129
	DD	038cb3f0cr			; 9.69154e-05
	DD	03824bec9r			; 3.92783e-05
CONST	ENDS
;	COMDAT ?g_XMTanCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMTanCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 03cb327a4r ; 0.0218695 ; DirectX::g_XMTanCoefficients1
	DD	03c11371br			; 0.00886324
	DD	03b6b69e9r			; 0.00359213
	DD	03abed1b3r			; 0.00145583
CONST	ENDS
;	COMDAT ?g_XMTanCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMTanCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMTanCoefficients0
	DD	03eaaaaabr			; 0.333333
	DD	03e088889r			; 0.133333
	DD	03d5d0dd1r			; 0.0539683
CONST	ENDS
;	COMDAT ?g_XMCosCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMCosCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 0b48bdd11r ; -2.60516e-07 ; DirectX::g_XMCosCoefficients1
	DD	0befff67er			; -0.499927
	DD	03d29f587r			; 0.0414939
	DD	0baa69fdbr			; -0.00127124
CONST	ENDS
;	COMDAT ?g_XMCosCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMCosCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 0bf000000r ; -0.5 ; DirectX::g_XMCosCoefficients0
	DD	03d2aaaa3r			; 0.0416666
	DD	0bab609aar			; -0.00138884
	DD	037cfb4c2r			; 2.47605e-05
CONST	ENDS
;	COMDAT ?g_XMSinCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMSinCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 0b2cd365br ; -2.38899e-08 ; DirectX::g_XMSinCoefficients1
	DD	0be2aa888r			; -0.166659
	DD	03c08373cr			; 0.00831395
	DD	0b9423ec8r			; -0.000185247
CONST	ENDS
;	COMDAT ?g_XMSinCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMSinCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 0be2aaaabr ; -0.166667 ; DirectX::g_XMSinCoefficients0
	DD	03c088886r			; 0.00833333
	DD	0b9500bf1r			; -0.000198409
	DD	03638b88er			; 2.75256e-06
CONST	ENDS
;	COMDAT ?g_UnitPlaneEpsilon@Internal@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?g_UnitPlaneEpsilon@Internal@DirectX@@3UXMVECTORF32@2@B DD 038d1b717r ; 0.0001 ; DirectX::Internal::g_UnitPlaneEpsilon
	DD	038d1b717r			; 0.0001
	DD	038d1b717r			; 0.0001
	DD	038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT ?g_UnitQuaternionEpsilon@Internal@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?g_UnitQuaternionEpsilon@Internal@DirectX@@3UXMVECTORF32@2@B DD 038d1b717r ; 0.0001 ; DirectX::Internal::g_UnitQuaternionEpsilon
	DD	038d1b717r			; 0.0001
	DD	038d1b717r			; 0.0001
	DD	038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT ?g_UnitVectorEpsilon@Internal@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?g_UnitVectorEpsilon@Internal@DirectX@@3UXMVECTORF32@2@B DD 038d1b717r ; 0.0001 ; DirectX::Internal::g_UnitVectorEpsilon
	DD	038d1b717r			; 0.0001
	DD	038d1b717r			; 0.0001
	DD	038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT ?YellowGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?YellowGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f1a9a9br ; 0.603922 ; DirectX::Colors::YellowGreen
	DD	03f4dcdcfr			; 0.803922
	DD	03e48c8car			; 0.196078
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Yellow@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Yellow@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Yellow
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?WhiteSmoke@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?WhiteSmoke@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f75f5f7r ; 0.960784 ; DirectX::Colors::WhiteSmoke
	DD	03f75f5f7r			; 0.960784
	DD	03f75f5f7r			; 0.960784
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?White@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?White@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::White
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Wheat@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Wheat@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f75f5f7r ; 0.960784 ; DirectX::Colors::Wheat
	DD	03f5edee0r			; 0.870588
	DD	03f33b3b4r			; 0.701961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Violet@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Violet@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f6eeef0r ; 0.933333 ; DirectX::Colors::Violet
	DD	03f028283r			; 0.509804
	DD	03f6eeef0r			; 0.933333
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Turquoise@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Turquoise@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e808081r ; 0.25098 ; DirectX::Colors::Turquoise
	DD	03f60e0e2r			; 0.878431
	DD	03f50d0d2r			; 0.815686
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Transparent@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Transparent@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::Transparent
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?Tomato@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Tomato@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Tomato
	DD	03ec6c6c8r			; 0.388235
	DD	03e8e8e8fr			; 0.278431
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Thistle@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Thistle@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f58d8dar ; 0.847059 ; DirectX::Colors::Thistle
	DD	03f3fbfc0r			; 0.74902
	DD	03f58d8dar			; 0.847059
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Teal@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Teal@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::Teal
	DD	03f008081r			; 0.501961
	DD	03f008081r			; 0.501961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Tan@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Tan@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f52d2d4r ; 0.823529 ; DirectX::Colors::Tan
	DD	03f34b4b5r			; 0.705882
	DD	03f0c8c8dr			; 0.54902
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?SteelBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?SteelBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e8c8c8dr ; 0.27451 ; DirectX::Colors::SteelBlue
	DD	03f028283r			; 0.509804
	DD	03f34b4b5r			; 0.705882
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?SpringGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?SpringGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::SpringGreen
	DD	03f800000r			; 1
	DD	03efeff00r			; 0.498039
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Snow@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Snow@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Snow
	DD	03f7afafcr			; 0.980392
	DD	03f7afafcr			; 0.980392
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_FltMax@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_FltMax@DirectX@@3UXMVECTORF32@1@B DD 07f7fffffr ; 3.40282e+38 ; DirectX::g_FltMax
	DD	07f7fffffr			; 3.40282e+38
	DD	07f7fffffr			; 3.40282e+38
	DD	07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT ?SlateGray@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?SlateGray@Colors@DirectX@@3UXMVECTORF32@2@B DD 03ee0e0e2r ; 0.439216 ; DirectX::Colors::SlateGray
	DD	03f008081r			; 0.501961
	DD	03f109091r			; 0.564706
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_FltMin@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_FltMin@DirectX@@3UXMVECTORF32@1@B DD 0ff7fffffr ; -3.40282e+38 ; DirectX::g_FltMin
	DD	0ff7fffffr			; -3.40282e+38
	DD	0ff7fffffr			; -3.40282e+38
	DD	0ff7fffffr			; -3.40282e+38
CONST	ENDS
;	COMDAT ?SlateBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?SlateBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03ed4d4d6r ; 0.415686 ; DirectX::Colors::SlateBlue
	DD	03eb4b4b5r			; 0.352941
	DD	03f4dcdcfr			; 0.803922
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_RayNegEpsilon@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_RayNegEpsilon@DirectX@@3UXMVECTORF32@1@B DD 09e3ce508r ; -1e-20 ; DirectX::g_RayNegEpsilon
	DD	09e3ce508r			; -1e-20
	DD	09e3ce508r			; -1e-20
	DD	09e3ce508r			; -1e-20
CONST	ENDS
;	COMDAT ?SkyBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?SkyBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f078788r ; 0.529412 ; DirectX::Colors::SkyBlue
	DD	03f4eced0r			; 0.807843
	DD	03f6bebedr			; 0.921569
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_RayEpsilon@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_RayEpsilon@DirectX@@3UXMVECTORF32@1@B DD 01e3ce508r ; 1e-20 ; DirectX::g_RayEpsilon
	DD	01e3ce508r			; 1e-20
	DD	01e3ce508r			; 1e-20
	DD	01e3ce508r			; 1e-20
CONST	ENDS
;	COMDAT ?Silver@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Silver@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f40c0c2r ; 0.752941 ; DirectX::Colors::Silver
	DD	03f40c0c2r			; 0.752941
	DD	03f40c0c2r			; 0.752941
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_BoxOffset@DirectX@@3QBUXMVECTORF32@1@B
CONST	SEGMENT
?g_BoxOffset@DirectX@@3QBUXMVECTORF32@1@B DD 0bf800000r ; -1 ; DirectX::g_BoxOffset
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?Sienna@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Sienna@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f20a0a1r ; 0.627451 ; DirectX::Colors::Sienna
	DD	03ea4a4a5r			; 0.321569
	DD	03e34b4b5r			; 0.176471
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?SeaShell@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?SeaShell@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::SeaShell
	DD	03f75f5f7r			; 0.960784
	DD	03f6eeef0r			; 0.933333
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?SeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?SeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e38b8b9r ; 0.180392 ; DirectX::Colors::SeaGreen
	DD	03f0b8b8cr			; 0.545098
	DD	03eaeaeafr			; 0.341176
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?SandyBrown@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?SandyBrown@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f74f4f6r ; 0.956863 ; DirectX::Colors::SandyBrown
	DD	03f24a4a5r			; 0.643137
	DD	03ec0c0c2r			; 0.376471
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Salmon@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Salmon@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f7afafcr ; 0.980392 ; DirectX::Colors::Salmon
	DD	03f008081r			; 0.501961
	DD	03ee4e4e6r			; 0.447059
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?SaddleBrown@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?SaddleBrown@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f0b8b8cr ; 0.545098 ; DirectX::Colors::SaddleBrown
	DD	03e8a8a8br			; 0.270588
	DD	03d989899r			; 0.0745098
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?RoyalBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?RoyalBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e828283r ; 0.254902 ; DirectX::Colors::RoyalBlue
	DD	03ed2d2d4r			; 0.411765
	DD	03f61e1e3r			; 0.882353
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?RosyBrown@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?RosyBrown@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f3cbcbdr ; 0.737255 ; DirectX::Colors::RosyBrown
	DD	03f0f8f90r			; 0.560784
	DD	03f0f8f90r			; 0.560784
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Red@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Red@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Red
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Purple@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Purple@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f008081r ; 0.501961 ; DirectX::Colors::Purple
	DD	000000000r			; 0
	DD	03f008081r			; 0.501961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?PowderBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?PowderBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f30b0b1r ; 0.690196 ; DirectX::Colors::PowderBlue
	DD	03f60e0e2r			; 0.878431
	DD	03f66e6e8r			; 0.901961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Plum@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Plum@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f5ddddfr ; 0.866667 ; DirectX::Colors::Plum
	DD	03f20a0a1r			; 0.627451
	DD	03f5ddddfr			; 0.866667
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Pink@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Pink@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Pink
	DD	03f40c0c2r			; 0.752941
	DD	03f4bcbcdr			; 0.796079
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Peru@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Peru@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f4dcdcfr ; 0.803922 ; DirectX::Colors::Peru
	DD	03f058586r			; 0.521569
	DD	03e7cfcfer			; 0.247059
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?PeachPuff@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?PeachPuff@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::PeachPuff
	DD	03f5adadcr			; 0.854902
	DD	03f39b9bar			; 0.72549
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?PapayaWhip@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?PapayaWhip@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::PapayaWhip
	DD	03f6feff1r			; 0.937255
	DD	03f55d5d7r			; 0.835294
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?PaleVioletRed@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?PaleVioletRed@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f5bdbddr ; 0.858824 ; DirectX::Colors::PaleVioletRed
	DD	03ee0e0e2r			; 0.439216
	DD	03f139394r			; 0.576471
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?PaleTurquoise@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?PaleTurquoise@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f2fafb0r ; 0.686275 ; DirectX::Colors::PaleTurquoise
	DD	03f6eeef0r			; 0.933333
	DD	03f6eeef0r			; 0.933333
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?PaleGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?PaleGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f189899r ; 0.596078 ; DirectX::Colors::PaleGreen
	DD	03f7bfbfdr			; 0.984314
	DD	03f189899r			; 0.596078
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?PaleGoldenrod@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?PaleGoldenrod@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f6eeef0r ; 0.933333 ; DirectX::Colors::PaleGoldenrod
	DD	03f68e8ear			; 0.909804
	DD	03f2aaaabr			; 0.666667
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Orchid@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Orchid@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f5adadcr ; 0.854902 ; DirectX::Colors::Orchid
	DD	03ee0e0e2r			; 0.439216
	DD	03f56d6d8r			; 0.839216
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?OrangeRed@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?OrangeRed@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::OrangeRed
	DD	03e8a8a8br			; 0.270588
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Orange@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Orange@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Orange
	DD	03f25a5a6r			; 0.647059
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?OliveDrab@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?OliveDrab@Colors@DirectX@@3UXMVECTORF32@2@B DD 03ed6d6d8r ; 0.419608 ; DirectX::Colors::OliveDrab
	DD	03f0e8e8fr			; 0.556863
	DD	03e0c8c8dr			; 0.137255
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Olive@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Olive@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f008081r ; 0.501961 ; DirectX::Colors::Olive
	DD	03f008081r			; 0.501961
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?OldLace@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?OldLace@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f7dfdffr ; 0.992157 ; DirectX::Colors::OldLace
	DD	03f75f5f7r			; 0.960784
	DD	03f66e6e8r			; 0.901961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Navy@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Navy@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::Navy
	DD	000000000r			; 0
	DD	03f008081r			; 0.501961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?NavajoWhite@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?NavajoWhite@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::NavajoWhite
	DD	03f5edee0r			; 0.870588
	DD	03f2dadaer			; 0.678431
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Moccasin@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Moccasin@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Moccasin
	DD	03f64e4e6r			; 0.894118
	DD	03f35b5b6r			; 0.709804
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MistyRose@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MistyRose@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::MistyRose
	DD	03f64e4e6r			; 0.894118
	DD	03f61e1e3r			; 0.882353
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MintCream@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MintCream@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f75f5f7r ; 0.960784 ; DirectX::Colors::MintCream
	DD	03f800000r			; 1
	DD	03f7afafcr			; 0.980392
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MidnightBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MidnightBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03dc8c8car ; 0.0980392 ; DirectX::Colors::MidnightBlue
	DD	03dc8c8car			; 0.0980392
	DD	03ee0e0e2r			; 0.439216
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MediumVioletRed@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MediumVioletRed@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f47c7c9r ; 0.780392 ; DirectX::Colors::MediumVioletRed
	DD	03da8a8a9r			; 0.0823529
	DD	03f058586r			; 0.521569
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MediumTurquoise@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MediumTurquoise@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e909091r ; 0.282353 ; DirectX::Colors::MediumTurquoise
	DD	03f51d1d3r			; 0.819608
	DD	03f4ccccer			; 0.8
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MediumSpringGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MediumSpringGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::MediumSpringGreen
	DD	03f7afafcr			; 0.980392
	DD	03f1a9a9br			; 0.603922
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MediumSlateBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MediumSlateBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03ef6f6f8r ; 0.482353 ; DirectX::Colors::MediumSlateBlue
	DD	03ed0d0d2r			; 0.407843
	DD	03f6eeef0r			; 0.933333
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MediumSeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MediumSeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e70f0f2r ; 0.235294 ; DirectX::Colors::MediumSeaGreen
	DD	03f33b3b4r			; 0.701961
	DD	03ee2e2e4r			; 0.443137
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MediumPurple@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MediumPurple@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f139394r ; 0.576471 ; DirectX::Colors::MediumPurple
	DD	03ee0e0e2r			; 0.439216
	DD	03f5bdbddr			; 0.858824
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MediumOrchid@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MediumOrchid@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f3ababbr ; 0.729412 ; DirectX::Colors::MediumOrchid
	DD	03eaaaaabr			; 0.333333
	DD	03f53d3d5r			; 0.827451
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MediumBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MediumBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::MediumBlue
	DD	000000000r			; 0
	DD	03f4dcdcfr			; 0.803922
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MediumAquamarine@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MediumAquamarine@Colors@DirectX@@3UXMVECTORF32@2@B DD 03ecccccer ; 0.4 ; DirectX::Colors::MediumAquamarine
	DD	03f4dcdcfr			; 0.803922
	DD	03f2aaaabr			; 0.666667
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Maroon@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Maroon@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f008081r ; 0.501961 ; DirectX::Colors::Maroon
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Magenta@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Magenta@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Magenta
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Linen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Linen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f7afafcr ; 0.980392 ; DirectX::Colors::Linen
	DD	03f70f0f2r			; 0.941177
	DD	03f66e6e8r			; 0.901961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LimeGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LimeGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e48c8car ; 0.196078 ; DirectX::Colors::LimeGreen
	DD	03f4dcdcfr			; 0.803922
	DD	03e48c8car			; 0.196078
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Lime@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Lime@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::Lime
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightYellow@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightYellow@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::LightYellow
	DD	03f800000r			; 1
	DD	03f60e0e2r			; 0.878431
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightSteelBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightSteelBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f30b0b1r ; 0.690196 ; DirectX::Colors::LightSteelBlue
	DD	03f44c4c6r			; 0.768628
	DD	03f5edee0r			; 0.870588
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightSlateGray@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightSlateGray@Colors@DirectX@@3UXMVECTORF32@2@B DD 03eeeeef0r ; 0.466667 ; DirectX::Colors::LightSlateGray
	DD	03f088889r			; 0.533333
	DD	03f19999ar			; 0.6
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightSkyBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightSkyBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f078788r ; 0.529412 ; DirectX::Colors::LightSkyBlue
	DD	03f4eced0r			; 0.807843
	DD	03f7afafcr			; 0.980392
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightSeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightSeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e008081r ; 0.12549 ; DirectX::Colors::LightSeaGreen
	DD	03f32b2b3r			; 0.698039
	DD	03f2aaaabr			; 0.666667
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightSalmon@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightSalmon@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::LightSalmon
	DD	03f20a0a1r			; 0.627451
	DD	03ef4f4f6r			; 0.478431
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightPink@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightPink@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::LightPink
	DD	03f36b6b7r			; 0.713726
	DD	03f41c1c3r			; 0.756863
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightGray@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightGray@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f53d3d5r ; 0.827451 ; DirectX::Colors::LightGray
	DD	03f53d3d5r			; 0.827451
	DD	03f53d3d5r			; 0.827451
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f109091r ; 0.564706 ; DirectX::Colors::LightGreen
	DD	03f6eeef0r			; 0.933333
	DD	03f109091r			; 0.564706
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightGoldenrodYellow@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightGoldenrodYellow@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f7afafcr ; 0.980392 ; DirectX::Colors::LightGoldenrodYellow
	DD	03f7afafcr			; 0.980392
	DD	03f52d2d4r			; 0.823529
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightCyan@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightCyan@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f60e0e2r ; 0.878431 ; DirectX::Colors::LightCyan
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightCoral@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightCoral@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f70f0f2r ; 0.941177 ; DirectX::Colors::LightCoral
	DD	03f008081r			; 0.501961
	DD	03f008081r			; 0.501961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f2dadaer ; 0.678431 ; DirectX::Colors::LightBlue
	DD	03f58d8dar			; 0.847059
	DD	03f66e6e8r			; 0.901961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LemonChiffon@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LemonChiffon@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::LemonChiffon
	DD	03f7afafcr			; 0.980392
	DD	03f4dcdcfr			; 0.803922
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LawnGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LawnGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03ef8f8far ; 0.486275 ; DirectX::Colors::LawnGreen
	DD	03f7cfcfer			; 0.988235
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LavenderBlush@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LavenderBlush@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::LavenderBlush
	DD	03f70f0f2r			; 0.941177
	DD	03f75f5f7r			; 0.960784
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Lavender@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Lavender@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f66e6e8r ; 0.901961 ; DirectX::Colors::Lavender
	DD	03f66e6e8r			; 0.901961
	DD	03f7afafcr			; 0.980392
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Khaki@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Khaki@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f70f0f2r ; 0.941177 ; DirectX::Colors::Khaki
	DD	03f66e6e8r			; 0.901961
	DD	03f0c8c8dr			; 0.54902
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Ivory@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Ivory@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Ivory
	DD	03f800000r			; 1
	DD	03f70f0f2r			; 0.941177
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Indigo@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Indigo@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e969697r ; 0.294118 ; DirectX::Colors::Indigo
	DD	000000000r			; 0
	DD	03f028283r			; 0.509804
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?IndianRed@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?IndianRed@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f4dcdcfr ; 0.803922 ; DirectX::Colors::IndianRed
	DD	03eb8b8b9r			; 0.360784
	DD	03eb8b8b9r			; 0.360784
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?HotPink@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?HotPink@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::HotPink
	DD	03ed2d2d4r			; 0.411765
	DD	03f34b4b5r			; 0.705882
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Honeydew@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Honeydew@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f70f0f2r ; 0.941177 ; DirectX::Colors::Honeydew
	DD	03f800000r			; 1
	DD	03f70f0f2r			; 0.941177
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?GreenYellow@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?GreenYellow@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f2dadaer ; 0.678431 ; DirectX::Colors::GreenYellow
	DD	03f800000r			; 1
	DD	03e3cbcbdr			; 0.184314
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Green@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Green@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::Green
	DD	03f008081r			; 0.501961
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Gray@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Gray@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f008081r ; 0.501961 ; DirectX::Colors::Gray
	DD	03f008081r			; 0.501961
	DD	03f008081r			; 0.501961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Goldenrod@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Goldenrod@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f5adadcr ; 0.854902 ; DirectX::Colors::Goldenrod
	DD	03f25a5a6r			; 0.647059
	DD	03e008081r			; 0.12549
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Gold@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Gold@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Gold
	DD	03f57d7d9r			; 0.843137
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?GhostWhite@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?GhostWhite@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f78f8far ; 0.972549 ; DirectX::Colors::GhostWhite
	DD	03f78f8far			; 0.972549
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Gainsboro@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Gainsboro@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f5cdcder ; 0.862745 ; DirectX::Colors::Gainsboro
	DD	03f5cdcder			; 0.862745
	DD	03f5cdcder			; 0.862745
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Fuchsia@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Fuchsia@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Fuchsia
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?ForestGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?ForestGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e088889r ; 0.133333 ; DirectX::Colors::ForestGreen
	DD	03f0b8b8cr			; 0.545098
	DD	03e088889r			; 0.133333
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?FloralWhite@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?FloralWhite@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::FloralWhite
	DD	03f7afafcr			; 0.980392
	DD	03f70f0f2r			; 0.941177
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Firebrick@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Firebrick@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f32b2b3r ; 0.698039 ; DirectX::Colors::Firebrick
	DD	03e088889r			; 0.133333
	DD	03e088889r			; 0.133333
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DodgerBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DodgerBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03df0f0f2r ; 0.117647 ; DirectX::Colors::DodgerBlue
	DD	03f109091r			; 0.564706
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DimGray@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DimGray@Colors@DirectX@@3UXMVECTORF32@2@B DD 03ed2d2d4r ; 0.411765 ; DirectX::Colors::DimGray
	DD	03ed2d2d4r			; 0.411765
	DD	03ed2d2d4r			; 0.411765
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DeepSkyBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DeepSkyBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::DeepSkyBlue
	DD	03f3fbfc0r			; 0.74902
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DeepPink@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DeepPink@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::DeepPink
	DD	03da0a0a1r			; 0.0784314
	DD	03f139394r			; 0.576471
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkViolet@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkViolet@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f149495r ; 0.580392 ; DirectX::Colors::DarkViolet
	DD	000000000r			; 0
	DD	03f53d3d5r			; 0.827451
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkTurquoise@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkTurquoise@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::DarkTurquoise
	DD	03f4eced0r			; 0.807843
	DD	03f51d1d3r			; 0.819608
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkSlateGray@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkSlateGray@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e3cbcbdr ; 0.184314 ; DirectX::Colors::DarkSlateGray
	DD	03e9e9e9fr			; 0.309804
	DD	03e9e9e9fr			; 0.309804
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkSlateBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkSlateBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e909091r ; 0.282353 ; DirectX::Colors::DarkSlateBlue
	DD	03e74f4f6r			; 0.239216
	DD	03f0b8b8cr			; 0.545098
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkSeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkSeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f0f8f90r ; 0.560784 ; DirectX::Colors::DarkSeaGreen
	DD	03f3cbcbdr			; 0.737255
	DD	03f0b8b8cr			; 0.545098
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkSalmon@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkSalmon@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f69e9ebr ; 0.913726 ; DirectX::Colors::DarkSalmon
	DD	03f169697r			; 0.588235
	DD	03ef4f4f6r			; 0.478431
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkRed@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkRed@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f0b8b8cr ; 0.545098 ; DirectX::Colors::DarkRed
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkOrchid@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkOrchid@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f19999ar ; 0.6 ; DirectX::Colors::DarkOrchid
	DD	03e48c8car			; 0.196078
	DD	03f4ccccer			; 0.8
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkOrange@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkOrange@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::DarkOrange
	DD	03f0c8c8dr			; 0.54902
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkOliveGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkOliveGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03eaaaaabr ; 0.333333 ; DirectX::Colors::DarkOliveGreen
	DD	03ed6d6d8r			; 0.419608
	DD	03e3cbcbdr			; 0.184314
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkMagenta@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkMagenta@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f0b8b8cr ; 0.545098 ; DirectX::Colors::DarkMagenta
	DD	000000000r			; 0
	DD	03f0b8b8cr			; 0.545098
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkKhaki@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkKhaki@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f3dbdber ; 0.741176 ; DirectX::Colors::DarkKhaki
	DD	03f37b7b8r			; 0.717647
	DD	03ed6d6d8r			; 0.419608
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::DarkGreen
	DD	03ec8c8car			; 0.392157
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkGray@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkGray@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f29a9aar ; 0.662745 ; DirectX::Colors::DarkGray
	DD	03f29a9aar			; 0.662745
	DD	03f29a9aar			; 0.662745
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkGoldenrod@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkGoldenrod@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f38b8b9r ; 0.721569 ; DirectX::Colors::DarkGoldenrod
	DD	03f068687r			; 0.52549
	DD	03d30b0b1r			; 0.0431373
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkCyan@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkCyan@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::DarkCyan
	DD	03f0b8b8cr			; 0.545098
	DD	03f0b8b8cr			; 0.545098
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::DarkBlue
	DD	000000000r			; 0
	DD	03f0b8b8cr			; 0.545098
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Cyan@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Cyan@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::Cyan
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Crimson@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Crimson@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f5cdcder ; 0.862745 ; DirectX::Colors::Crimson
	DD	03da0a0a1r			; 0.0784314
	DD	03e70f0f2r			; 0.235294
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Cornsilk@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Cornsilk@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Cornsilk
	DD	03f78f8far			; 0.972549
	DD	03f5cdcder			; 0.862745
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?CornflowerBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?CornflowerBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03ec8c8car ; 0.392157 ; DirectX::Colors::CornflowerBlue
	DD	03f159596r			; 0.584314
	DD	03f6dedefr			; 0.929412
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Coral@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Coral@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Coral
	DD	03efeff00r			; 0.498039
	DD	03ea0a0a1r			; 0.313726
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Chocolate@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Chocolate@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f52d2d4r ; 0.823529 ; DirectX::Colors::Chocolate
	DD	03ed2d2d4r			; 0.411765
	DD	03df0f0f2r			; 0.117647
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Chartreuse@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Chartreuse@Colors@DirectX@@3UXMVECTORF32@2@B DD 03efeff00r ; 0.498039 ; DirectX::Colors::Chartreuse
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?CadetBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?CadetBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03ebebebfr ; 0.372549 ; DirectX::Colors::CadetBlue
	DD	03f1e9e9fr			; 0.619608
	DD	03f20a0a1r			; 0.627451
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?BurlyWood@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?BurlyWood@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f5edee0r ; 0.870588 ; DirectX::Colors::BurlyWood
	DD	03f38b8b9r			; 0.721569
	DD	03f078788r			; 0.529412
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Brown@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Brown@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f25a5a6r ; 0.647059 ; DirectX::Colors::Brown
	DD	03e28a8a9r			; 0.164706
	DD	03e28a8a9r			; 0.164706
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?BlueViolet@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?BlueViolet@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f0a8a8br ; 0.541176 ; DirectX::Colors::BlueViolet
	DD	03e2cacadr			; 0.168627
	DD	03f62e2e4r			; 0.886275
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Blue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Blue@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::Blue
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?BlanchedAlmond@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?BlanchedAlmond@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::BlanchedAlmond
	DD	03f6bebedr			; 0.921569
	DD	03f4dcdcfr			; 0.803922
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Black@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Black@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::Black
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Bisque@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Bisque@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Bisque
	DD	03f64e4e6r			; 0.894118
	DD	03f44c4c6r			; 0.768628
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Beige@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Beige@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f75f5f7r ; 0.960784 ; DirectX::Colors::Beige
	DD	03f75f5f7r			; 0.960784
	DD	03f5cdcder			; 0.862745
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Azure@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Azure@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f70f0f2r ; 0.941177 ; DirectX::Colors::Azure
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Aquamarine@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Aquamarine@Colors@DirectX@@3UXMVECTORF32@2@B DD 03efeff00r ; 0.498039 ; DirectX::Colors::Aquamarine
	DD	03f800000r			; 1
	DD	03f54d4d6r			; 0.831373
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Aqua@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Aqua@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::Aqua
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?AntiqueWhite@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?AntiqueWhite@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f7afafcr ; 0.980392 ; DirectX::Colors::AntiqueWhite
	DD	03f6bebedr			; 0.921569
	DD	03f57d7d9r			; 0.843137
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?AliceBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?AliceBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f70f0f2r ; 0.941177 ; DirectX::Colors::AliceBlue
	DD	03f78f8far			; 0.972549
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	wmemcpy
PUBLIC	wmemmove
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	?length@?$char_traits@_W@std@@SA_KPEB_W@Z	; std::char_traits<wchar_t>::length
PUBLIC	?copy@?$char_traits@_W@std@@SAPEA_WPEA_WPEB_W_K@Z ; std::char_traits<wchar_t>::copy
PUBLIC	?move@?$char_traits@_W@std@@SAPEA_WPEA_WPEB_W_K@Z ; std::char_traits<wchar_t>::move
PUBLIC	?assign@?$char_traits@_W@std@@SAXAEA_WAEB_W@Z	; std::char_traits<wchar_t>::assign
PUBLIC	??0_Container_proxy@std@@QEAA@XZ		; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	??1_Container_base12@std@@QEAA@XZ		; std::_Container_base12::~_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Allocate@std@@YAPEAX_K0_N@Z			; std::_Allocate
PUBLIC	?_Deallocate@std@@YAXPEAX_K1@Z			; std::_Deallocate
PUBLIC	??0?$allocator@_W@std@@QEAA@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
PUBLIC	?deallocate@?$allocator@_W@std@@QEAAXPEA_W_K@Z	; std::allocator<wchar_t>::deallocate
PUBLIC	?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z	; std::allocator<wchar_t>::allocate
PUBLIC	?max_size@?$allocator@_W@std@@QEBA_KXZ		; std::allocator<wchar_t>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAPEA_W_K@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEA_W_K@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEBA_KU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
PUBLIC	?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAPEA_WXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
PUBLIC	?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAPEB_WXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
PUBLIC	??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
PUBLIC	??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
PUBLIC	?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy
PUBLIC	?_Myproxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Orphan_all
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
PUBLIC	?_Bx@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Bx
PUBLIC	?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
PUBLIC	?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEB_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
PUBLIC	?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
PUBLIC	??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@PEB_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@PEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@_K0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
PUBLIC	?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_K_K0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Clamp_suffix_size
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
PUBLIC	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
PUBLIC	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA_N_K_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
PUBLIC	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA_NPEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
PUBLIC	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_N_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
PUBLIC	?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAX_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Check_offset
PUBLIC	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
PUBLIC	?XMConvertToRadians@DirectX@@YAMM@Z		; DirectX::XMConvertToRadians
PUBLIC	??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ	; DirectX::XMVECTORF32::operator __m128
PUBLIC	??BXMVECTORI32@DirectX@@QEBA?AT__m128@@XZ	; DirectX::XMVECTORI32::operator __m128
PUBLIC	??HDirectX@@YQ?AT__m128@@T1@0@Z			; DirectX::operator+
PUBLIC	??GDirectX@@YQ?AT__m128@@T1@0@Z			; DirectX::operator-
PUBLIC	??DDirectX@@YQ?AT__m128@@T1@M@Z			; DirectX::operator*
PUBLIC	??0XMMATRIX@DirectX@@QEAA@XZ			; DirectX::XMMATRIX::XMMATRIX
PUBLIC	??DXMMATRIX@DirectX@@QEBQ?AU01@U01@@Z		; DirectX::XMMATRIX::operator*
PUBLIC	??0XMFLOAT3@DirectX@@QEAA@MMM@Z			; DirectX::XMFLOAT3::XMFLOAT3
PUBLIC	??0XMFLOAT4X4@DirectX@@QEAA@XZ			; DirectX::XMFLOAT4X4::XMFLOAT4X4
PUBLIC	?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PEBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
PUBLIC	?XMStoreFloat4x4@DirectX@@YQXPEAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
PUBLIC	?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z	; DirectX::XMVectorSet
PUBLIC	?XMVectorGetX@DirectX@@YQMT__m128@@@Z		; DirectX::XMVectorGetX
PUBLIC	?XMVectorGetZ@DirectX@@YQMT__m128@@@Z		; DirectX::XMVectorGetZ
PUBLIC	?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVectorAdd
PUBLIC	?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVectorSubtract
PUBLIC	?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z	; DirectX::XMVectorScale
PUBLIC	?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVector3Normalize
PUBLIC	?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z ; DirectX::XMMatrixMultiply
PUBLIC	?XMMatrixScaling@DirectX@@YQ?AUXMMATRIX@1@MMM@Z	; DirectX::XMMatrixScaling
PUBLIC	?XMMatrixRotationX@DirectX@@YQ?AUXMMATRIX@1@M@Z	; DirectX::XMMatrixRotationX
PUBLIC	?XMScalarSinCos@DirectX@@YAXPEAM0M@Z		; DirectX::XMScalarSinCos
PUBLIC	??0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z ; Client::CSkillBlueEffect::CSkillBlueEffect
PUBLIC	??0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z	; Client::CSkillBlueEffect::CSkillBlueEffect
PUBLIC	??1CSkillBlueEffect@Client@@UEAA@XZ		; Client::CSkillBlueEffect::~CSkillBlueEffect
PUBLIC	?Initialize_Prototype@CSkillBlueEffect@Client@@UEAAJXZ ; Client::CSkillBlueEffect::Initialize_Prototype
PUBLIC	?Initialize@CSkillBlueEffect@Client@@UEAAJPEAX@Z ; Client::CSkillBlueEffect::Initialize
PUBLIC	?Tick@CSkillBlueEffect@Client@@UEAAXN@Z		; Client::CSkillBlueEffect::Tick
PUBLIC	?LateTick@CSkillBlueEffect@Client@@UEAAXN@Z	; Client::CSkillBlueEffect::LateTick
PUBLIC	?Render@CSkillBlueEffect@Client@@UEAAJXZ	; Client::CSkillBlueEffect::Render
PUBLIC	?RenderGUI@CSkillBlueEffect@Client@@UEAAXXZ	; Client::CSkillBlueEffect::RenderGUI
PUBLIC	?SetupPosition@CSkillBlueEffect@Client@@QEAAXXZ	; Client::CSkillBlueEffect::SetupPosition
PUBLIC	?Add_Components@CSkillBlueEffect@Client@@AEAAJXZ ; Client::CSkillBlueEffect::Add_Components
PUBLIC	?Setup_ShaderResources@CSkillBlueEffect@Client@@AEAAJXZ ; Client::CSkillBlueEffect::Setup_ShaderResources
PUBLIC	?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z ; Client::CSkillBlueEffect::Create
PUBLIC	?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z ; Client::CSkillBlueEffect::Clone
PUBLIC	?Free@CSkillBlueEffect@Client@@UEAAXXZ		; Client::CSkillBlueEffect::Free
PUBLIC	??_GCSkillBlueEffect@Client@@UEAAPEAXI@Z	; Client::CSkillBlueEffect::`scalar deleting destructor'
PUBLIC	?IsLevelFinish@CApplicationManager@Client@@QEAA_NW4LEVEL@12@@Z ; Client::CApplicationManager::IsLevelFinish
PUBLIC	?SetTimeDelta@CThorn@Client@@QEAAXN@Z		; Client::CThorn::SetTimeDelta
PUBLIC	?SetType@CThorn@Client@@QEAAXW4TYPE@12@@Z	; Client::CThorn::SetType
PUBLIC	?StartDessolve@CThorn@Client@@QEAAXXZ		; Client::CThorn::StartDessolve
PUBLIC	?IsScaleFinish@CThorn@Client@@QEAA_NXZ		; Client::CThorn::IsScaleFinish
PUBLIC	??$Safe_Release@PEAVCSkillBlueEffect@Client@@@Engine@@YAKAEAPEAVCSkillBlueEffect@Client@@@Z ; Engine::Safe_Release<Client::CSkillBlueEffect * __ptr64>
PUBLIC	??$Safe_Release@PEAVCRenderer@Engine@@@Engine@@YAKAEAPEAVCRenderer@0@@Z ; Engine::Safe_Release<Engine::CRenderer * __ptr64>
PUBLIC	??$Safe_Release@PEAVCShader@Engine@@@Engine@@YAKAEAPEAVCShader@0@@Z ; Engine::Safe_Release<Engine::CShader * __ptr64>
PUBLIC	??$Safe_Release@PEAVCTexture@Engine@@@Engine@@YAKAEAPEAVCTexture@0@@Z ; Engine::Safe_Release<Engine::CTexture * __ptr64>
PUBLIC	??$Safe_Release@PEAVCTransform@Engine@@@Engine@@YAKAEAPEAVCTransform@0@@Z ; Engine::Safe_Release<Engine::CTransform * __ptr64>
PUBLIC	??$Safe_Release@PEAVCVIBuffer_Rect@Engine@@@Engine@@YAKAEAPEAVCVIBuffer_Rect@0@@Z ; Engine::Safe_Release<Engine::CVIBuffer_Rect * __ptr64>
PUBLIC	??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><>
PUBLIC	??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z	; std::addressof<wchar_t * __ptr64>
PUBLIC	??$destroy@PEA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEAPEA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t * __ptr64>
PUBLIC	??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z		; std::_Unfancy<wchar_t>
PUBLIC	??$_Debug_pointer@$$CB_W@std@@YAXPEB_W0I@Z	; std::_Debug_pointer<wchar_t const >
PUBLIC	??$_Debug_pointer_if@$$CB_W@std@@YAX_NPEB_W1I@Z	; std::_Debug_pointer_if<wchar_t const >
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	?address@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEBAPEAU_Container_proxy@2@AEAU32@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::address
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@2@_K@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@1@$$QEAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$?0AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<wchar_t> > & __ptr64>
PUBLIC	??$construct@PEA_WAEAPEA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEAPEA_WAEAPEA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t * __ptr64,wchar_t * __ptr64 & __ptr64>
PUBLIC	?pointer_to@?$pointer_traits@PEAU_Container_proxy@std@@@std@@SAPEAU_Container_proxy@2@AEAU32@@Z ; std::pointer_traits<std::_Container_proxy * __ptr64>::pointer_to
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$destroy@PEA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAEAV?$allocator@_W@1@PEAPEA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t * __ptr64>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@PEAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@PEAU_Container_proxy@1@$$QEAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$forward@AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AEAU10@@Z ; std::forward<std::_Wrap_alloc<std::allocator<wchar_t> > & __ptr64>
PUBLIC	??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_W@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>
PUBLIC	??$forward@AEAPEA_W@std@@YAAEAPEA_WAEAPEA_W@Z	; std::forward<wchar_t * __ptr64 & __ptr64>
PUBLIC	??$construct@PEA_WAEAPEA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAEAV?$allocator@_W@1@PEAPEA_WAEAPEA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t * __ptr64,wchar_t * __ptr64 & __ptr64>
PUBLIC	??$destroy@PEA_W@?$allocator@_W@std@@QEAAXPEAPEA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t * __ptr64>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@1@$$QEAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$construct@PEA_WAEAPEA_W@?$allocator@_W@std@@QEAAXPEAPEA_WAEAPEA_W@Z ; std::allocator<wchar_t>::construct<wchar_t * __ptr64,wchar_t * __ptr64 & __ptr64>
PUBLIC	?__LINE__Var@?0??_Allocate@std@@YAPEAX_K0_N@Z@4JA ; `std::_Allocate'::`1'::__LINE__Var
PUBLIC	??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_1JA@DKOIEICI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@		; `string'
PUBLIC	??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??_Deallocate@std@@YAXPEAX_K1@Z@4JA ; `std::_Deallocate'::`1'::__LINE__Var
PUBLIC	??_C@_0BN@HMCJOMKN@_Count?5?$DM?$DN?5?$CIsize_t?$CJ?$CI?91?$CJ?5?1?5_Sz?$AA@ ; `string'
PUBLIC	??_C@_1EI@MLOBABC@?$AA?$CC?$AA_?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AA?9?$AA1?$AA?$CJ?$AA?5?$AA?1?$AA?5?$AA_?$AAS?$AAz?$AA?$CC?$AA?5?$AA?$CG@ ; `string'
PUBLIC	??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DD@GBGGGKGG@?$CI_Ptr_user?5?$CG?5?$CI_BIG_ALLOCATION_AL@ ; `string'
PUBLIC	??_C@_1HE@CDMBFOKC@?$AA?$CC?$AA?$CI?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAB?$AAI?$AAG?$AA_?$AAA?$AAL?$AAL?$AAO?$AAC?$AAA?$AAT?$AAI?$AAO?$AAN?$AA_?$AAA@ ; `string'
PUBLIC	??_C@_0EI@NOJHEJCJ@reinterpret_cast?$DMuintptr_t?5?$CK?$DO?$CI_P@ ; `string'
PUBLIC	??_C@_1JO@EKLKIEHP@?$AA?$CC?$AAr?$AAe?$AAi?$AAn?$AAt?$AAe?$AAr?$AAp?$AAr?$AAe?$AAt?$AA_?$AAc?$AAa?$AAs?$AAt?$AA?$DM?$AAu?$AAi?$AAn?$AAt?$AAp?$AAt?$AAr?$AA_?$AAt?$AA?5?$AA?$CK?$AA?$DO?$AA?$CI?$AA_@ ; `string'
PUBLIC	??_C@_0BL@OCKMEJON@_Ptr_container?5?$DM?5_Ptr_user?$AA@ ; `string'
PUBLIC	??_C@_1EE@PDHAHDDC@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$DM?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5@ ; `string'
PUBLIC	??_C@_0DB@GLFJLNCE@2?5?$CK?5sizeof?$CIvoid?5?$CK?$CJ?5?$DM?$DN?5_Ptr_user?5@ ; `string'
PUBLIC	??_C@_1HA@NAPGMHAO@?$AA?$CC?$AA2?$AA?5?$AA?$CK?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0CN@BLHJCAL@_Ptr_user?5?9?5_Ptr_container?5?$DM?$DN?5_N@ ; `string'
PUBLIC	??_C@_1GI@DHJGPFNI@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA_@ ; `string'
PUBLIC	??_C@_1JE@DMOBBMDE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ ; `string'
PUBLIC	??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@2@PEBUXMFLOAT4X4@2@@Z@4JA ; `DirectX::XMLoadFloat4x4'::`1'::__LINE__Var
PUBLIC	??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??XMStoreFloat4x4@DirectX@@YQXPEAUXMFLOAT4X4@2@UXMMATRIX@2@@Z@4JA ; `DirectX::XMStoreFloat4x4'::`1'::__LINE__Var
PUBLIC	??_C@_1IO@CGGKMODJ@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ ; `string'
PUBLIC	?__LINE__Var@?0??XMScalarSinCos@DirectX@@YAXPEAM0M@Z@4JA ; `DirectX::XMScalarSinCos'::`1'::__LINE__Var
PUBLIC	??_C@_19MFJHDIJG@?$AAp?$AAS?$AAi?$AAn?$AA?$AA@	; `string'
PUBLIC	??_C@_19MNAGGFOC@?$AAp?$AAC?$AAo?$AAs?$AA?$AA@	; `string'
PUBLIC	??_7CSkillBlueEffect@Client@@6B@		; Client::CSkillBlueEffect::`vftable'
PUBLIC	??_C@_1BM@CJMPMHDD@?$AAc?$AAo?$AAm?$AA_?$AAt?$AAr?$AAa?$AAn?$AAs?$AAf?$AAo?$AAr?$AAm?$AA?$AA@ ; `string'
PUBLIC	??_C@_09HCHKCCII@g_Texture?$AA@			; `string'
PUBLIC	??_C@_0O@OFKPLLDO@g_MaskTexture?$AA@		; `string'
PUBLIC	??_C@_09IPLGGENB@g_TimeAcc?$AA@			; `string'
PUBLIC	??_C@_1BK@GIOMOCNE@?$AAc?$AAo?$AAm?$AA_?$AAr?$AAe?$AAn?$AAd?$AAe?$AAr?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@COFFFCLL@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAr?$AAe?$AAn?$AAd?$AAe?$AAr?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@MLEFGO@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAt?$AAr?$AAa?$AAn?$AAs?$AAf?$AAo?$AAr?$AAm?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@GGOMMBBL@?$AAc?$AAo?$AAm?$AA_?$AAs?$AAh?$AAa?$AAd?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@NCILMLLP@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAs?$AAh?$AAa?$AAd?$AAe?$AAr?$AA_?$AAv?$AAt?$AAx?$AAt?$AAe?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@IPGKEMA@?$AAc?$AAo?$AAm?$AA_?$AAd?$AAi?$AAf?$AAf?$AAu?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DK@IPHCAFNL@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA_?$AAs?$AAk?$AAi?$AAl?$AAl?$AAf?$AAl?$AAo?$AAo?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@OADNFLK@?$AAc?$AAo?$AAm?$AA_?$AAm?$AAa?$AAs?$AAk?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EC@CFNKOOOM@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA_?$AAs?$AAk?$AAi?$AAl?$AAl?$AAf?$AAl?$AAo?$AAo?$AAr?$AAm?$AAa?$AAs?$AAk@ ; `string'
PUBLIC	??_C@_1BK@GKOIFCHG@?$AAc?$AAo?$AAm?$AA_?$AAv?$AAi?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@BAIPNHMH@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAv?$AAi?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA_?$AAr?$AAe?$AAc?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_11LOCGONAA@?$AA?$AA@			; `string'
PUBLIC	??_C@_1BO@CKAFLFHC@?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AA_?$AAt?$AAh?$AAo?$AAr?$AAn?$AA?$CF?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@BHJMDNLM@?$AAl?$AAa?$AAy?$AAe?$AAr?$AA_?$AAe?$AAf?$AAf?$AAe?$AAc?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@CEJBEGPA@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAo?$AAb?$AAj?$AA_?$AAt?$AAh?$AAo?$AAr?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_0O@PFNLPMLD@g_WorldMatrix?$AA@		; `string'
PUBLIC	??_C@_0N@ELIMCBLG@g_ViewMatrix?$AA@		; `string'
PUBLIC	??_C@_0N@OOHDPIO@g_ProjMatrix?$AA@		; `string'
PUBLIC	?__LINE__Var@?0??Create@CSkillBlueEffect@Client@@SAPEAV23@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4JA ; `Client::CSkillBlueEffect::Create'::`1'::__LINE__Var
PUBLIC	??_C@_0EN@KBOPONAD@c?3?2users?2arcco?2documents?2github?2@ ; `string'
PUBLIC	??_C@_1BA@HHOMBECE@?$AAM?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EI@LPBMELNI@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AA?3?$AA?5?$AAC?$AAS?$AAk?$AAi?$AAl?$AAl?$AAB?$AAl?$AAu?$AAe?$AAE?$AAf?$AAf@ ; `string'
PUBLIC	?__LINE__Var@?0??Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z@4JA ; `Client::CSkillBlueEffect::Clone'::`1'::__LINE__Var
PUBLIC	??_C@_1EG@NHFJMAGK@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAl?$AAo?$AAn?$AAe?$AA?5?$AA?3?$AA?5?$AAC?$AAS?$AAk?$AAi?$AAl?$AAl?$AAB?$AAl?$AAu?$AAe?$AAE?$AAf?$AAf?$AAe@ ; `string'
PUBLIC	??_C@_1IO@EADHKMNI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_R4CSkillBlueEffect@Client@@6B@		; Client::CSkillBlueEffect::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSkillBlueEffect@Client@@@8		; Client::CSkillBlueEffect `RTTI Type Descriptor'
PUBLIC	??_R3CSkillBlueEffect@Client@@8			; Client::CSkillBlueEffect::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSkillBlueEffect@Client@@8			; Client::CSkillBlueEffect::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSkillBlueEffect@Client@@8	; Client::CSkillBlueEffect::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGameObject@Engine@@8		; Engine::CGameObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGameObject@Engine@@@8			; Engine::CGameObject `RTTI Type Descriptor'
PUBLIC	??_R3CGameObject@Engine@@8			; Engine::CGameObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGameObject@Engine@@8			; Engine::CGameObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBase@Engine@@8			; Engine::CBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCBase@Engine@@@8			; Engine::CBase `RTTI Type Descriptor'
PUBLIC	??_R3CBase@Engine@@8				; Engine::CBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBase@Engine@@8				; Engine::CBase::`RTTI Base Class Array'
PUBLIC	__real@00000000
PUBLIC	__real@3638b88e
PUBLIC	__real@37cfb4c2
PUBLIC	__real@39500bf1
PUBLIC	__real@3ab609aa
PUBLIC	__real@3c088886
PUBLIC	__real@3c8efa35
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3cf5c28f
PUBLIC	__real@3d2aaaa3
PUBLIC	__real@3e22f983
PUBLIC	__real@3e2aaaab
PUBLIC	__real@3f000000
PUBLIC	__real@3f333333
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3fc00000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3ff33333
PUBLIC	__real@3ffe666666666666
PUBLIC	__real@40000000
PUBLIC	__real@40066666
PUBLIC	__real@40200000
PUBLIC	__real@40400000
PUBLIC	__real@40466666
PUBLIC	__real@40490fdb
PUBLIC	__real@404ccccd
PUBLIC	__real@40800000
PUBLIC	__real@40c90fdb
PUBLIC	__real@41000000
PUBLIC	__real@42b40000
PUBLIC	__real@b2cd365b
PUBLIC	__real@b48bdd11
PUBLIC	__real@bf800000
PUBLIC	__real@bfc90fdb
PUBLIC	__real@c0490fdb
PUBLIC	__xmm@00000000000000000000000000000000
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX@Z:PROC				; operator delete
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__invalid_parameter:PROC
EXTRN	memcpy:PROC
EXTRN	__imp_memmove:PROC
EXTRN	memset:PROC
EXTRN	__imp_wcslen:PROC
EXTRN	__imp_wsprintfW:PROC
EXTRN	__imp_MessageBoxW:PROC
EXTRN	__imp_rand:PROC
EXTRN	__imp__wassert:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	??2@YAPEAX_KHPEBDH@Z:PROC			; operator new
EXTRN	??3@YAXPEAXHPEBDH@Z:PROC			; operator delete
EXTRN	__imp__CrtDbgReportW:PROC
EXTRN	__imp_?_Debug_message@std@@YAXPEB_W0I@Z:PROC
EXTRN	__imp_?_Xbad_alloc@std@@YAXXZ:PROC
EXTRN	__imp_?_Xlength_error@std@@YAXPEBD@Z:PROC
EXTRN	__imp_?_Xout_of_range@std@@YAXPEBD@Z:PROC
EXTRN	__imp_?Release@CBase@Engine@@QEAAKXZ:PROC
EXTRN	__imp_??0CGameObject@Engine@@IEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z:PROC
EXTRN	__imp_??0CGameObject@Engine@@IEAA@AEBV01@@Z:PROC
EXTRN	__imp_??1CGameObject@Engine@@MEAA@XZ:PROC
EXTRN	__imp_?Initialize_Prototype@CGameObject@Engine@@UEAAJXZ:PROC
EXTRN	__imp_?Initialize@CGameObject@Engine@@UEAAJPEAX@Z:PROC
EXTRN	__imp_?Tick@CGameObject@Engine@@UEAAXN@Z:PROC
EXTRN	__imp_?LateTick@CGameObject@Engine@@UEAAXN@Z:PROC
EXTRN	__imp_?Find_Component@CGameObject@Engine@@QEAAPEAVCComponent@2@PEB_W@Z:PROC
EXTRN	__imp_?Add_Component@CGameObject@Engine@@IEAAJIPEB_W0PEAPEAVCComponent@2@PEAX@Z:PROC
EXTRN	__imp_?Free@CGameObject@Engine@@UEAAXXZ:PROC
EXTRN	??_ECSkillBlueEffect@Client@@UEAAPEAXI@Z:PROC	; Client::CSkillBlueEffect::`vector deleting destructor'
EXTRN	?GetInstance@CApplicationManager@Client@@SAPEAV12@XZ:PROC ; Client::CApplicationManager::GetInstance
EXTRN	__imp_?Render@CVIBuffer@Engine@@UEAAJXZ:PROC
EXTRN	__imp_?Get_State@CTransform@Engine@@QEAA?AT__m128@@W4STATE@12@@Z:PROC
EXTRN	__imp_?Get_WorldMatrix@CTransform@Engine@@QEAA?AUXMFLOAT4X4@DirectX@@XZ:PROC
EXTRN	__imp_?Set_WorldMatrix@CTransform@Engine@@QEAAXUXMFLOAT4X4@DirectX@@@Z:PROC
EXTRN	__imp_?SetRotation@CTransform@Engine@@QEAAXT__m128@@M@Z:PROC
EXTRN	__imp_?Setup_ShaderResource@CTransform@Engine@@QEAAJPEAVCShader@2@PEBD@Z:PROC
EXTRN	__imp_?Add_RenderGroup@CRenderer@Engine@@QEAAJW4RENDER_GROUP@12@PEAVCGameObject@2@@Z:PROC
EXTRN	__imp_?Setup_ShaderResource@CTexture@Engine@@QEAAJPEAVCShader@2@PEBDI@Z:PROC
EXTRN	__imp_?Begin@CShader@Engine@@QEAAJI@Z:PROC
EXTRN	__imp_?SetMatrix@CShader@Engine@@QEAAJPEBDPEBUXMFLOAT4X4@DirectX@@@Z:PROC
EXTRN	__imp_?SetRawValue@CShader@Engine@@QEAAJPEBDPEBXI@Z:PROC
EXTRN	__imp_?GetInstance@CGameInstance@Engine@@SAPEAV12@XZ:PROC
EXTRN	__imp_?Add_GameObject@CGameInstance@Engine@@QEAAPEAVCGameObject@2@IPEB_W0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@Z:PROC
EXTRN	__imp_?Get_Transform_float4x4@CGameInstance@Engine@@QEAA?AUXMFLOAT4X4@DirectX@@W4TRANSFORM_STATE@CPipeLine@2@@Z:PROC
EXTRN	?SetPosition@CThorn@Client@@QEAAXT__m128@@@Z:PROC ; Client::CThorn::SetPosition
EXTRN	?SetRotationXYZ@CThorn@Client@@QEAAXUXMFLOAT3@DirectX@@@Z:PROC ; Client::CThorn::SetRotationXYZ
EXTRN	?SetupScaleUpStart@CThorn@Client@@QEAAXM@Z:PROC	; Client::CThorn::SetupScaleUpStart
EXTRN	?GetLengthFromCamera@CGameObject@Engine@@UEAAMXZ:PROC ; Engine::CGameObject::GetLengthFromCamera
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN7
	DD	imagerel $LN7+181
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wmemcpy DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$wmemcpy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wmemmove DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$wmemmove
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$char_traits@_W@std@@SA_KPEB_W@Z DD imagerel $LN5
	DD	imagerel $LN5+106
	DD	imagerel $unwind$?length@?$char_traits@_W@std@@SA_KPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?copy@?$char_traits@_W@std@@SAPEA_WPEA_WPEB_W_K@Z DD imagerel $LN5
	DD	imagerel $LN5+128
	DD	imagerel $unwind$?copy@?$char_traits@_W@std@@SAPEA_WPEA_WPEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?move@?$char_traits@_W@std@@SAPEA_WPEA_WPEB_W_K@Z DD imagerel $LN5
	DD	imagerel $LN5+128
	DD	imagerel $unwind$?move@?$char_traits@_W@std@@SAPEA_WPEA_WPEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$char_traits@_W@std@@SAXAEA_WAEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$?assign@?$char_traits@_W@std@@SAXAEA_WAEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??1_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN8
	DD	imagerel $LN8+220
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@std@@YAPEAX_K0_N@Z DD imagerel $LN14
	DD	imagerel $LN14+579
	DD	imagerel $unwind$?_Allocate@std@@YAPEAX_K0_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Deallocate@std@@YAXPEAX_K1@Z DD imagerel $LN22
	DD	imagerel $LN22+1079
	DD	imagerel $unwind$?_Deallocate@std@@YAXPEAX_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@_W@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??0?$allocator@_W@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@_W@std@@QEAAXPEA_W_K@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$?deallocate@?$allocator@_W@std@@QEAAXPEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$allocator@_W@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?max_size@?$allocator@_W@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAPEA_W_K@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAPEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEA_W_K@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEBA_KU_Nil@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEBA_KU_Nil@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ DD imagerel $LN5
	DD	imagerel $LN5+116
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ DD imagerel $LN5
	DD	imagerel $LN5+116
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAPEA_WXZ DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAPEA_WXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAPEB_WXZ DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAPEB_WXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+272
	DD	imagerel $unwind$?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Free_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+221
	DD	imagerel $unwind$?_Free_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myproxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?_Myproxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Bx@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?_Bx@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEB_KXZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEB_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z DD imagerel $LN4
	DD	imagerel $LN4+125
	DD	imagerel $unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@_K1@Z DD imagerel $LN6
	DD	imagerel $LN6+315
	DD	imagerel $unwind$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@PEB_W_K@Z DD imagerel $LN7
	DD	imagerel $LN7+294
	DD	imagerel $unwind$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@PEB_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@PEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@PEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@_K0@Z DD imagerel $LN6
	DD	imagerel $LN6+275
	DD	imagerel $unwind$?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ DD imagerel $LN5
	DD	imagerel $LN5+124
	DD	imagerel $unwind$?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_K_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_K_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z DD imagerel $LN23
	DD	imagerel $LN23+640
	DD	imagerel $unwind$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA DD imagerel ?catch$1@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA
	DD	imagerel ?catch$1@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA+110
	DD	imagerel $unwind$?catch$1@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA DD imagerel ?catch$0@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA
	DD	imagerel ?catch$0@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA+62
	DD	imagerel $unwind$?catch$0@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+132
	DD	imagerel $unwind$?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA_N_K_N@Z DD imagerel $LN13
	DD	imagerel $LN13+327
	DD	imagerel $unwind$?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA_N_K_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA_NPEB_W@Z DD imagerel $LN6
	DD	imagerel $LN6+150
	DD	imagerel $unwind$?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA_NPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_N_K@Z DD imagerel $LN7
	DD	imagerel $LN7+335
	DD	imagerel $unwind$?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_N_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAXXZ DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+93
	DD	imagerel $unwind$?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAXXZ DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMConvertToRadians@DirectX@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$?XMConvertToRadians@DirectX@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??BXMVECTORI32@DirectX@@QEBA?AT__m128@@XZ DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??BXMVECTORI32@DirectX@@QEBA?AT__m128@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??HDirectX@@YQ?AT__m128@@T1@0@Z DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??HDirectX@@YQ?AT__m128@@T1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??GDirectX@@YQ?AT__m128@@T1@0@Z DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??GDirectX@@YQ?AT__m128@@T1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??DDirectX@@YQ?AT__m128@@T1@M@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??DDirectX@@YQ?AT__m128@@T1@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0XMMATRIX@DirectX@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??0XMMATRIX@DirectX@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??DXMMATRIX@DirectX@@QEBQ?AU01@U01@@Z DD imagerel $LN3
	DD	imagerel $LN3+224
	DD	imagerel $unwind$??DXMMATRIX@DirectX@@QEBQ?AU01@U01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0XMFLOAT3@DirectX@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+134
	DD	imagerel $unwind$??0XMFLOAT3@DirectX@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0XMFLOAT4X4@DirectX@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??0XMFLOAT4X4@DirectX@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PEBUXMFLOAT4X4@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+344
	DD	imagerel $unwind$?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PEBUXMFLOAT4X4@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMStoreFloat4x4@DirectX@@YQXPEAUXMFLOAT4X4@1@UXMMATRIX@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+247
	DD	imagerel $unwind$?XMStoreFloat4x4@DirectX@@YQXPEAUXMFLOAT4X4@1@UXMMATRIX@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+121
	DD	imagerel $unwind$?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMVectorGetX@DirectX@@YQMT__m128@@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$?XMVectorGetX@DirectX@@YQMT__m128@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMVectorGetZ@DirectX@@YQMT__m128@@@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$?XMVectorGetZ@DirectX@@YQMT__m128@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z DD imagerel $LN3
	DD	imagerel $LN3+535
	DD	imagerel $unwind$?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z DD imagerel $LN3
	DD	imagerel $LN3+2098
	DD	imagerel $unwind$?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMMatrixScaling@DirectX@@YQ?AUXMMATRIX@1@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+328
	DD	imagerel $unwind$?XMMatrixScaling@DirectX@@YQ?AUXMMATRIX@1@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMMatrixRotationX@DirectX@@YQ?AUXMMATRIX@1@M@Z DD imagerel $LN3
	DD	imagerel $LN3+480
	DD	imagerel $unwind$?XMMatrixRotationX@DirectX@@YQ?AUXMMATRIX@1@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?XMScalarSinCos@DirectX@@YAXPEAM0M@Z DD imagerel $LN11
	DD	imagerel $LN11+591
	DD	imagerel $unwind$?XMScalarSinCos@DirectX@@YAXPEAM0M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z DD imagerel $LN4
	DD	imagerel $LN4+324
	DD	imagerel $unwind$??0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA DD imagerel ?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA
	DD	imagerel ?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA+40
	DD	imagerel $unwind$?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+312
	DD	imagerel $unwind$??0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z@4HA DD imagerel ?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z@4HA+40
	DD	imagerel $unwind$?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1CSkillBlueEffect@Client@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$??1CSkillBlueEffect@Client@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Initialize_Prototype@CSkillBlueEffect@Client@@UEAAJXZ DD imagerel $LN4
	DD	imagerel $LN4+78
	DD	imagerel $unwind$?Initialize_Prototype@CSkillBlueEffect@Client@@UEAAJXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Initialize@CSkillBlueEffect@Client@@UEAAJPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+277
	DD	imagerel $unwind$?Initialize@CSkillBlueEffect@Client@@UEAAJPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Tick@CSkillBlueEffect@Client@@UEAAXN@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?Tick@CSkillBlueEffect@Client@@UEAAXN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?LateTick@CSkillBlueEffect@Client@@UEAAXN@Z DD imagerel $LN10
	DD	imagerel $LN10+487
	DD	imagerel $unwind$?LateTick@CSkillBlueEffect@Client@@UEAAXN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Render@CSkillBlueEffect@Client@@UEAAJXZ DD imagerel $LN4
	DD	imagerel $LN4+272
	DD	imagerel $unwind$?Render@CSkillBlueEffect@Client@@UEAAJXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderGUI@CSkillBlueEffect@Client@@UEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?RenderGUI@CSkillBlueEffect@Client@@UEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetupPosition@CSkillBlueEffect@Client@@QEAAXXZ DD imagerel $LN30
	DD	imagerel $LN30+3157
	DD	imagerel $unwind$?SetupPosition@CSkillBlueEffect@Client@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Add_Components@CSkillBlueEffect@Client@@AEAAJXZ DD imagerel $LN14
	DD	imagerel $LN14+824
	DD	imagerel $unwind$?Add_Components@CSkillBlueEffect@Client@@AEAAJXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Setup_ShaderResources@CSkillBlueEffect@Client@@AEAAJXZ DD imagerel $LN7
	DD	imagerel $LN7+268
	DD	imagerel $unwind$?Setup_ShaderResources@CSkillBlueEffect@Client@@AEAAJXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z DD imagerel $LN7
	DD	imagerel $LN7+294
	DD	imagerel $unwind$?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA DD imagerel ?dtor$0@?0??Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA
	DD	imagerel ?dtor$0@?0??Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA+61
	DD	imagerel $unwind$?dtor$0@?0??Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z DD imagerel $LN7
	DD	imagerel $LN7+294
	DD	imagerel $unwind$?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z@4HA DD imagerel ?dtor$0@?0??Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z@4HA
	DD	imagerel ?dtor$0@?0??Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z@4HA+61
	DD	imagerel $unwind$?dtor$0@?0??Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Free@CSkillBlueEffect@Client@@UEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+168
	DD	imagerel $unwind$?Free@CSkillBlueEffect@Client@@UEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GCSkillBlueEffect@Client@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_GCSkillBlueEffect@Client@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IsLevelFinish@CApplicationManager@Client@@QEAA_NW4LEVEL@12@@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?IsLevelFinish@CApplicationManager@Client@@QEAA_NW4LEVEL@12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetTimeDelta@CThorn@Client@@QEAAXN@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?SetTimeDelta@CThorn@Client@@QEAAXN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetType@CThorn@Client@@QEAAXW4TYPE@12@@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$?SetType@CThorn@Client@@QEAAXW4TYPE@12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?StartDessolve@CThorn@Client@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?StartDessolve@CThorn@Client@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IsScaleFinish@CThorn@Client@@QEAA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?IsScaleFinish@CThorn@Client@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Safe_Release@PEAVCSkillBlueEffect@Client@@@Engine@@YAKAEAPEAVCSkillBlueEffect@Client@@@Z DD imagerel $LN5
	DD	imagerel $LN5+114
	DD	imagerel $unwind$??$Safe_Release@PEAVCSkillBlueEffect@Client@@@Engine@@YAKAEAPEAVCSkillBlueEffect@Client@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Safe_Release@PEAVCRenderer@Engine@@@Engine@@YAKAEAPEAVCRenderer@0@@Z DD imagerel $LN5
	DD	imagerel $LN5+114
	DD	imagerel $unwind$??$Safe_Release@PEAVCRenderer@Engine@@@Engine@@YAKAEAPEAVCRenderer@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Safe_Release@PEAVCShader@Engine@@@Engine@@YAKAEAPEAVCShader@0@@Z DD imagerel $LN5
	DD	imagerel $LN5+114
	DD	imagerel $unwind$??$Safe_Release@PEAVCShader@Engine@@@Engine@@YAKAEAPEAVCShader@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Safe_Release@PEAVCTexture@Engine@@@Engine@@YAKAEAPEAVCTexture@0@@Z DD imagerel $LN5
	DD	imagerel $LN5+114
	DD	imagerel $unwind$??$Safe_Release@PEAVCTexture@Engine@@@Engine@@YAKAEAPEAVCTexture@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Safe_Release@PEAVCTransform@Engine@@@Engine@@YAKAEAPEAVCTransform@0@@Z DD imagerel $LN5
	DD	imagerel $LN5+114
	DD	imagerel $unwind$??$Safe_Release@PEAVCTransform@Engine@@@Engine@@YAKAEAPEAVCTransform@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Safe_Release@PEAVCVIBuffer_Rect@Engine@@@Engine@@YAKAEAPEAVCVIBuffer_Rect@0@@Z DD imagerel $LN5
	DD	imagerel $LN5+114
	DD	imagerel $unwind$??$Safe_Release@PEAVCVIBuffer_Rect@Engine@@@Engine@@YAKAEAPEAVCVIBuffer_Rect@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+90
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@PEA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEAPEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$destroy@PEA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEAPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Debug_pointer@$$CB_W@std@@YAXPEB_W0I@Z DD imagerel $LN4
	DD	imagerel $LN4+99
	DD	imagerel $unwind$??$_Debug_pointer@$$CB_W@std@@YAXPEB_W0I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Debug_pointer_if@$$CB_W@std@@YAX_NPEB_W1I@Z DD imagerel $LN4
	DD	imagerel $LN4+114
	DD	imagerel $unwind$??$_Debug_pointer_if@$$CB_W@std@@YAX_NPEB_W1I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$?deallocate@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?address@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEBAPEAU_Container_proxy@2@AEAU32@@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$?address@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEBAPEAU_Container_proxy@2@AEAU32@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@1@$$QEAU21@@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@1@$$QEAU21@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@PEA_WAEAPEA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEAPEA_WAEAPEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$construct@PEA_WAEAPEA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEAPEA_WAEAPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pointer_to@?$pointer_traits@PEAU_Container_proxy@std@@@std@@SAPEAU_Container_proxy@2@AEAU32@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?pointer_to@?$pointer_traits@PEAU_Container_proxy@std@@@std@@SAPEAU_Container_proxy@2@AEAU32@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@PEA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAEAV?$allocator@_W@1@PEAPEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$destroy@PEA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAEAV?$allocator@_W@1@PEAPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@PEAU_Container_proxy@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@PEAU_Container_proxy@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@PEAU_Container_proxy@1@$$QEAU31@@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@PEAU_Container_proxy@1@$$QEAU31@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$forward@AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_W@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_W@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEAPEA_W@std@@YAAEAPEA_WAEAPEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$forward@AEAPEA_W@std@@YAAEAPEA_WAEAPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@PEA_WAEAPEA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAEAV?$allocator@_W@1@PEAPEA_WAEAPEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$construct@PEA_WAEAPEA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAEAV?$allocator@_W@1@PEAPEA_WAEAPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@PEA_W@?$allocator@_W@std@@QEAAXPEAPEA_W@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$??$destroy@PEA_W@?$allocator@_W@std@@QEAAXPEAPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@1@$$QEAU21@@Z DD imagerel $LN5
	DD	imagerel $LN5+154
	DD	imagerel $unwind$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@1@$$QEAU21@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@PEA_WAEAPEA_W@?$allocator@_W@std@@QEAAXPEAPEA_WAEAPEA_W@Z DD imagerel $LN5
	DD	imagerel $LN5+148
	DD	imagerel $unwind$??$construct@PEA_WAEAPEA_W@?$allocator@_W@std@@QEAAXPEAPEA_WAEAPEA_W@Z
pdata	ENDS
;	COMDAT __xmm@00000000000000000000000000000000
CONST	SEGMENT
__xmm@00000000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@c0490fdb
CONST	SEGMENT
__real@c0490fdb DD 0c0490fdbr			; -3.14159
CONST	ENDS
;	COMDAT __real@bfc90fdb
CONST	SEGMENT
__real@bfc90fdb DD 0bfc90fdbr			; -1.5708
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@b48bdd11
CONST	SEGMENT
__real@b48bdd11 DD 0b48bdd11r			; -2.60516e-07
CONST	ENDS
;	COMDAT __real@b2cd365b
CONST	SEGMENT
__real@b2cd365b DD 0b2cd365br			; -2.38899e-08
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@404ccccd
CONST	SEGMENT
__real@404ccccd DD 0404ccccdr			; 3.2
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40466666
CONST	SEGMENT
__real@40466666 DD 040466666r			; 3.1
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40200000
CONST	SEGMENT
__real@40200000 DD 040200000r			; 2.5
CONST	ENDS
;	COMDAT __real@40066666
CONST	SEGMENT
__real@40066666 DD 040066666r			; 2.1
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ffe666666666666
CONST	SEGMENT
__real@3ffe666666666666 DQ 03ffe666666666666r	; 1.9
CONST	ENDS
;	COMDAT __real@3ff33333
CONST	SEGMENT
__real@3ff33333 DD 03ff33333r			; 1.9
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e2aaaab
CONST	SEGMENT
__real@3e2aaaab DD 03e2aaaabr			; 0.166667
CONST	ENDS
;	COMDAT __real@3e22f983
CONST	SEGMENT
__real@3e22f983 DD 03e22f983r			; 0.159155
CONST	ENDS
;	COMDAT __real@3d2aaaa3
CONST	SEGMENT
__real@3d2aaaa3 DD 03d2aaaa3r			; 0.0416666
CONST	ENDS
;	COMDAT __real@3cf5c28f
CONST	SEGMENT
__real@3cf5c28f DD 03cf5c28fr			; 0.03
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3c088886
CONST	SEGMENT
__real@3c088886 DD 03c088886r			; 0.00833333
CONST	ENDS
;	COMDAT __real@3ab609aa
CONST	SEGMENT
__real@3ab609aa DD 03ab609aar			; 0.00138884
CONST	ENDS
;	COMDAT __real@39500bf1
CONST	SEGMENT
__real@39500bf1 DD 039500bf1r			; 0.000198409
CONST	ENDS
;	COMDAT __real@37cfb4c2
CONST	SEGMENT
__real@37cfb4c2 DD 037cfb4c2r			; 2.47605e-05
CONST	ENDS
;	COMDAT __real@3638b88e
CONST	SEGMENT
__real@3638b88e DD 03638b88er			; 2.75256e-06
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R2CBase@Engine@@8
rdata$r	SEGMENT
??_R2CBase@Engine@@8 DD imagerel ??_R1A@?0A@EA@CBase@Engine@@8 ; Engine::CBase::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3CBase@Engine@@8
rdata$r	SEGMENT
??_R3CBase@Engine@@8 DD 00H				; Engine::CBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2CBase@Engine@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBase@Engine@@@8
data$r	SEGMENT
??_R0?AVCBase@Engine@@@8 DQ FLAT:??_7type_info@@6B@	; Engine::CBase `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVCBase@Engine@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBase@Engine@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBase@Engine@@8 DD imagerel ??_R0?AVCBase@Engine@@@8 ; Engine::CBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3CBase@Engine@@8
rdata$r	ENDS
;	COMDAT ??_R2CGameObject@Engine@@8
rdata$r	SEGMENT
??_R2CGameObject@Engine@@8 DD imagerel ??_R1A@?0A@EA@CGameObject@Engine@@8 ; Engine::CGameObject::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@CBase@Engine@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3CGameObject@Engine@@8
rdata$r	SEGMENT
??_R3CGameObject@Engine@@8 DD 00H			; Engine::CGameObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2CGameObject@Engine@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGameObject@Engine@@@8
data$r	SEGMENT
??_R0?AVCGameObject@Engine@@@8 DQ FLAT:??_7type_info@@6B@ ; Engine::CGameObject `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVCGameObject@Engine@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGameObject@Engine@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGameObject@Engine@@8 DD imagerel ??_R0?AVCGameObject@Engine@@@8 ; Engine::CGameObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3CGameObject@Engine@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSkillBlueEffect@Client@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSkillBlueEffect@Client@@8 DD imagerel ??_R0?AVCSkillBlueEffect@Client@@@8 ; Client::CSkillBlueEffect::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3CSkillBlueEffect@Client@@8
rdata$r	ENDS
;	COMDAT ??_R2CSkillBlueEffect@Client@@8
rdata$r	SEGMENT
??_R2CSkillBlueEffect@Client@@8 DD imagerel ??_R1A@?0A@EA@CSkillBlueEffect@Client@@8 ; Client::CSkillBlueEffect::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@CGameObject@Engine@@8
	DD	imagerel ??_R1A@?0A@EA@CBase@Engine@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3CSkillBlueEffect@Client@@8
rdata$r	SEGMENT
??_R3CSkillBlueEffect@Client@@8 DD 00H			; Client::CSkillBlueEffect::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2CSkillBlueEffect@Client@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSkillBlueEffect@Client@@@8
data$r	SEGMENT
??_R0?AVCSkillBlueEffect@Client@@@8 DQ FLAT:??_7type_info@@6B@ ; Client::CSkillBlueEffect `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVCSkillBlueEffect@Client@@', 00H
data$r	ENDS
;	COMDAT ??_R4CSkillBlueEffect@Client@@6B@
rdata$r	SEGMENT
??_R4CSkillBlueEffect@Client@@6B@ DD 01H		; Client::CSkillBlueEffect::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVCSkillBlueEffect@Client@@@8
	DD	imagerel ??_R3CSkillBlueEffect@Client@@8
	DD	imagerel ??_R4CSkillBlueEffect@Client@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1IO@EADHKMNI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1IO@EADHKMNI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '4', 00H, '.', 00H, '0', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@NHFJMAGK@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAl?$AAo?$AAn?$AAe?$AA?5?$AA?3?$AA?5?$AAC?$AAS?$AAk?$AAi?$AAl?$AAl?$AAB?$AAl?$AAu?$AAe?$AAE?$AAf?$AAf?$AAe@
CONST	SEGMENT
??_C@_1EG@NHFJMAGK@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAl?$AAo?$AAn?$AAe?$AA?5?$AA?3?$AA?5?$AAC?$AAS?$AAk?$AAi?$AAl?$AAl?$AAB?$AAl?$AAu?$AAe?$AAE?$AAf?$AAf?$AAe@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	't', 00H, 'o', 00H, ' ', 00H, 'C', 00H, 'l', 00H, 'o', 00H, 'n'
	DB	00H, 'e', 00H, ' ', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'S', 00H
	DB	'k', 00H, 'i', 00H, 'l', 00H, 'l', 00H, 'B', 00H, 'l', 00H, 'u'
	DB	00H, 'e', 00H, 'E', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z@4JA DD 0106H ; `Client::CSkillBlueEffect::Clone'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EI@LPBMELNI@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AA?3?$AA?5?$AAC?$AAS?$AAk?$AAi?$AAl?$AAl?$AAB?$AAl?$AAu?$AAe?$AAE?$AAf?$AAf@
CONST	SEGMENT
??_C@_1EI@LPBMELNI@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AA?3?$AA?5?$AAC?$AAS?$AAk?$AAi?$AAl?$AAl?$AAB?$AAl?$AAu?$AAe?$AAE?$AAf?$AAf@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	't', 00H, 'o', 00H, ' ', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, ' ', 00H, ':', 00H, ' ', 00H, 'C', 00H
	DB	'S', 00H, 'k', 00H, 'i', 00H, 'l', 00H, 'l', 00H, 'B', 00H, 'l'
	DB	00H, 'u', 00H, 'e', 00H, 'E', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@HHOMBECE@?$AAM?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@HHOMBECE@?$AAM?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AA?$AA@ DB 'M', 00H
	DB	'e', 00H, 's', 00H, 's', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@KBOPONAD@c?3?2users?2arcco?2documents?2github?2@
CONST	SEGMENT
??_C@_0EN@KBOPONAD@c?3?2users?2arcco?2documents?2github?2@ DB 'c:\users\a'
	DB	'rcco\documents\github\framework\client\private\skillblueeffec'
	DB	't.cpp', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Create@CSkillBlueEffect@Client@@SAPEAV23@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??Create@CSkillBlueEffect@Client@@SAPEAV23@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4JA DD 0faH ; `Client::CSkillBlueEffect::Create'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0N@OOHDPIO@g_ProjMatrix?$AA@
CONST	SEGMENT
??_C@_0N@OOHDPIO@g_ProjMatrix?$AA@ DB 'g_ProjMatrix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ELIMCBLG@g_ViewMatrix?$AA@
CONST	SEGMENT
??_C@_0N@ELIMCBLG@g_ViewMatrix?$AA@ DB 'g_ViewMatrix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PFNLPMLD@g_WorldMatrix?$AA@
CONST	SEGMENT
??_C@_0O@PFNLPMLD@g_WorldMatrix?$AA@ DB 'g_WorldMatrix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@CEJBEGPA@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAo?$AAb?$AAj?$AA_?$AAt?$AAh?$AAo?$AAr?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@CEJBEGPA@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAo?$AAb?$AAj?$AA_?$AAt?$AAh?$AAo?$AAr?$AAn?$AA?$AA@ DB 'p'
	DB	00H, 'r', 00H, 'o', 00H, 't', 00H, 'o', 00H, '_', 00H, 'o', 00H
	DB	'b', 00H, 'j', 00H, '_', 00H, 't', 00H, 'h', 00H, 'o', 00H, 'r'
	DB	00H, 'n', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@BHJMDNLM@?$AAl?$AAa?$AAy?$AAe?$AAr?$AA_?$AAe?$AAf?$AAf?$AAe?$AAc?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@BHJMDNLM@?$AAl?$AAa?$AAy?$AAe?$AAr?$AA_?$AAe?$AAf?$AAf?$AAe?$AAc?$AAt?$AA?$AA@ DB 'l'
	DB	00H, 'a', 00H, 'y', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'e', 00H
	DB	'f', 00H, 'f', 00H, 'e', 00H, 'c', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@CKAFLFHC@?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AA_?$AAt?$AAh?$AAo?$AAr?$AAn?$AA?$CF?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@CKAFLFHC@?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AA_?$AAt?$AAh?$AAo?$AAr?$AAn?$AA?$CF?$AAd?$AA?$AA@ DB 'p'
	DB	00H, 'l', 00H, 'a', 00H, 'y', 00H, 'e', 00H, 'r', 00H, '_', 00H
	DB	't', 00H, 'h', 00H, 'o', 00H, 'r', 00H, 'n', 00H, '%', 00H, 'd'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_11LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@BAIPNHMH@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAv?$AAi?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA_?$AAr?$AAe?$AAc?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@BAIPNHMH@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAv?$AAi?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA_?$AAr?$AAe?$AAc?$AAt?$AA?$AA@ DB 'p'
	DB	00H, 'r', 00H, 'o', 00H, 't', 00H, 'o', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, '_', 00H, 'v', 00H, 'i', 00H, 'b', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@GKOIFCHG@?$AAc?$AAo?$AAm?$AA_?$AAv?$AAi?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@GKOIFCHG@?$AAc?$AAo?$AAm?$AA_?$AAv?$AAi?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'm', 00H, '_', 00H, 'v', 00H, 'i', 00H, 'b', 00H
	DB	'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@CFNKOOOM@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA_?$AAs?$AAk?$AAi?$AAl?$AAl?$AAf?$AAl?$AAo?$AAo?$AAr?$AAm?$AAa?$AAs?$AAk@
CONST	SEGMENT
??_C@_1EC@CFNKOOOM@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA_?$AAs?$AAk?$AAi?$AAl?$AAl?$AAf?$AAl?$AAo?$AAo?$AAr?$AAm?$AAa?$AAs?$AAk@ DB 'p'
	DB	00H, 'r', 00H, 'o', 00H, 't', 00H, 'o', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, '_', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, 'u', 00H, 'r', 00H, 'e', 00H, '_', 00H, 's', 00H, 'k', 00H
	DB	'i', 00H, 'l', 00H, 'l', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'o'
	DB	00H, 'r', 00H, 'm', 00H, 'a', 00H, 's', 00H, 'k', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@OADNFLK@?$AAc?$AAo?$AAm?$AA_?$AAm?$AAa?$AAs?$AAk?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@OADNFLK@?$AAc?$AAo?$AAm?$AA_?$AAm?$AAa?$AAs?$AAk?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'm', 00H, '_', 00H, 'm', 00H, 'a', 00H, 's', 00H
	DB	'k', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@IPHCAFNL@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA_?$AAs?$AAk?$AAi?$AAl?$AAl?$AAf?$AAl?$AAo?$AAo?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@IPHCAFNL@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA_?$AAs?$AAk?$AAi?$AAl?$AAl?$AAf?$AAl?$AAo?$AAo?$AAr?$AA?$AA@ DB 'p'
	DB	00H, 'r', 00H, 'o', 00H, 't', 00H, 'o', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, '_', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, 'u', 00H, 'r', 00H, 'e', 00H, '_', 00H, 's', 00H, 'k', 00H
	DB	'i', 00H, 'l', 00H, 'l', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'o'
	DB	00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@IPGKEMA@?$AAc?$AAo?$AAm?$AA_?$AAd?$AAi?$AAf?$AAf?$AAu?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@IPGKEMA@?$AAc?$AAo?$AAm?$AA_?$AAd?$AAi?$AAf?$AAf?$AAu?$AAs?$AAe?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'm', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'f', 00H
	DB	'f', 00H, 'u', 00H, 's', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@NCILMLLP@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAs?$AAh?$AAa?$AAd?$AAe?$AAr?$AA_?$AAv?$AAt?$AAx?$AAt?$AAe?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@NCILMLLP@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAs?$AAh?$AAa?$AAd?$AAe?$AAr?$AA_?$AAv?$AAt?$AAx?$AAt?$AAe?$AAx?$AA?$AA@ DB 'p'
	DB	00H, 'r', 00H, 'o', 00H, 't', 00H, 'o', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, '_', 00H, 's', 00H, 'h', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, '_', 00H, 'v', 00H, 't', 00H, 'x', 00H
	DB	't', 00H, 'e', 00H, 'x', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@GGOMMBBL@?$AAc?$AAo?$AAm?$AA_?$AAs?$AAh?$AAa?$AAd?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@GGOMMBBL@?$AAc?$AAo?$AAm?$AA_?$AAs?$AAh?$AAa?$AAd?$AAe?$AAr?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'm', 00H, '_', 00H, 's', 00H, 'h', 00H, 'a', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@MLEFGO@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAt?$AAr?$AAa?$AAn?$AAs?$AAf?$AAo?$AAr?$AAm?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@MLEFGO@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAt?$AAr?$AAa?$AAn?$AAs?$AAf?$AAo?$AAr?$AAm?$AA?$AA@ DB 'p'
	DB	00H, 'r', 00H, 'o', 00H, 't', 00H, 'o', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 's', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@COFFFCLL@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAr?$AAe?$AAn?$AAd?$AAe?$AAr?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@COFFFCLL@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAr?$AAe?$AAn?$AAd?$AAe?$AAr?$AAe?$AAr?$AA?$AA@ DB 'p'
	DB	00H, 'r', 00H, 'o', 00H, 't', 00H, 'o', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@GIOMOCNE@?$AAc?$AAo?$AAm?$AA_?$AAr?$AAe?$AAn?$AAd?$AAe?$AAr?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@GIOMOCNE@?$AAc?$AAo?$AAm?$AA_?$AAr?$AAe?$AAn?$AAd?$AAe?$AAr?$AAe?$AAr?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'm', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09IPLGGENB@g_TimeAcc?$AA@
CONST	SEGMENT
??_C@_09IPLGGENB@g_TimeAcc?$AA@ DB 'g_TimeAcc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OFKPLLDO@g_MaskTexture?$AA@
CONST	SEGMENT
??_C@_0O@OFKPLLDO@g_MaskTexture?$AA@ DB 'g_MaskTexture', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HCHKCCII@g_Texture?$AA@
CONST	SEGMENT
??_C@_09HCHKCCII@g_Texture?$AA@ DB 'g_Texture', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@CJMPMHDD@?$AAc?$AAo?$AAm?$AA_?$AAt?$AAr?$AAa?$AAn?$AAs?$AAf?$AAo?$AAr?$AAm?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@CJMPMHDD@?$AAc?$AAo?$AAm?$AA_?$AAt?$AAr?$AAa?$AAn?$AAs?$AAf?$AAo?$AAr?$AAm?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'm', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H
	DB	'n', 00H, 's', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_7CSkillBlueEffect@Client@@6B@
CONST	SEGMENT
??_7CSkillBlueEffect@Client@@6B@ DQ FLAT:??_R4CSkillBlueEffect@Client@@6B@ ; Client::CSkillBlueEffect::`vftable'
	DQ	FLAT:??_ECSkillBlueEffect@Client@@UEAAPEAXI@Z
	DQ	FLAT:?Free@CSkillBlueEffect@Client@@UEAAXXZ
	DQ	FLAT:?Initialize_Prototype@CSkillBlueEffect@Client@@UEAAJXZ
	DQ	FLAT:?Initialize@CSkillBlueEffect@Client@@UEAAJPEAX@Z
	DQ	FLAT:?Tick@CSkillBlueEffect@Client@@UEAAXN@Z
	DQ	FLAT:?LateTick@CSkillBlueEffect@Client@@UEAAXN@Z
	DQ	FLAT:?Render@CSkillBlueEffect@Client@@UEAAJXZ
	DQ	FLAT:?RenderGUI@CSkillBlueEffect@Client@@UEAAXXZ
	DQ	FLAT:?GetLengthFromCamera@CGameObject@Engine@@UEAAMXZ
	DQ	FLAT:?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z
CONST	ENDS
;	COMDAT ??_C@_19MNAGGFOC@?$AAp?$AAC?$AAo?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_19MNAGGFOC@?$AAp?$AAC?$AAo?$AAs?$AA?$AA@ DB 'p', 00H, 'C', 00H, 'o', 00H
	DB	's', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_19MFJHDIJG@?$AAp?$AAS?$AAi?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_19MFJHDIJG@?$AAp?$AAS?$AAi?$AAn?$AA?$AA@ DB 'p', 00H, 'S', 00H, 'i', 00H
	DB	'n', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??XMScalarSinCos@DirectX@@YAXPEAM0M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??XMScalarSinCos@DirectX@@YAXPEAM0M@Z@4JA DD 08e3H ; `DirectX::XMScalarSinCos'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1IO@CGGKMODJ@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
CONST	SEGMENT
??_C@_1IO@CGGKMODJ@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, 'k', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, '\', 00H, '8', 00H, '.', 00H, '1', 00H, '\'
	DB	00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H
	DB	'e', 00H, '\', 00H, 'u', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'x', 00H, 'm', 00H
	DB	'a', 00H, 't', 00H, 'h', 00H, 'm', 00H, 'i', 00H, 's', 00H, 'c'
	DB	00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??XMStoreFloat4x4@DirectX@@YQXPEAUXMFLOAT4X4@2@UXMMATRIX@2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??XMStoreFloat4x4@DirectX@@YQXPEAUXMFLOAT4X4@2@UXMMATRIX@2@@Z@4JA DD 071aH ; `DirectX::XMStoreFloat4x4'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ DB 'p'
	DB	00H, 'D', 00H, 'e', 00H, 's', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@2@PEBUXMFLOAT4X4@2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@2@PEBUXMFLOAT4X4@2@@Z@4JA DD 03f5H ; `DirectX::XMLoadFloat4x4'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@ DB 'p', 00H
	DB	'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1JE@DMOBBMDE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
CONST	SEGMENT
??_C@_1JE@DMOBBMDE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, 'k', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, '\', 00H, '8', 00H, '.', 00H, '1', 00H, '\'
	DB	00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H
	DB	'e', 00H, '\', 00H, 'u', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'x', 00H, 'm', 00H
	DB	'a', 00H, 't', 00H, 'h', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'v'
	DB	00H, 'e', 00H, 'r', 00H, 't', 00H, '.', 00H, 'i', 00H, 'n', 00H
	DB	'l', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@DHJGPFNI@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA_@
CONST	SEGMENT
??_C@_1GI@DHJGPFNI@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA_@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, '_', 00H, 'u', 00H
	DB	's', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '-', 00H, ' ', 00H, '_'
	DB	00H, 'P', 00H, 't', 00H, 'r', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'e', 00H, 'r'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '_', 00H, 'N', 00H
	DB	'O', 00H, 'N', 00H, '_', 00H, 'U', 00H, 'S', 00H, 'E', 00H, 'R'
	DB	00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H, '"', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@BLHJCAL@_Ptr_user?5?9?5_Ptr_container?5?$DM?$DN?5_N@
CONST	SEGMENT
??_C@_0CN@BLHJCAL@_Ptr_user?5?9?5_Ptr_container?5?$DM?$DN?5_N@ DB '_Ptr_u'
	DB	'ser - _Ptr_container <= _NON_USER_SIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@NAPGMHAO@?$AA?$CC?$AA2?$AA?5?$AA?$CK?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr@
CONST	SEGMENT
??_C@_1HA@NAPGMHAO@?$AA?$CC?$AA2?$AA?5?$AA?$CK?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr@ DB '"'
	DB	00H, '2', 00H, ' ', 00H, '*', 00H, ' ', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, 'v', 00H, 'o'
	DB	00H, 'i', 00H, 'd', 00H, ' ', 00H, '*', 00H, ')', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 't', 00H, 'r'
	DB	00H, '_', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'-', 00H, ' ', 00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, '_'
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, 'r', 00H, '"', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@GLFJLNCE@2?5?$CK?5sizeof?$CIvoid?5?$CK?$CJ?5?$DM?$DN?5_Ptr_user?5@
CONST	SEGMENT
??_C@_0DB@GLFJLNCE@2?5?$CK?5sizeof?$CIvoid?5?$CK?$CJ?5?$DM?$DN?5_Ptr_user?5@ DB '2'
	DB	' * sizeof(void *) <= _Ptr_user - _Ptr_container', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@PDHAHDDC@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$DM?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
CONST	SEGMENT
??_C@_1EE@PDHAHDDC@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$DM?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, '<', 00H, ' ', 00H, '_', 00H, 'P', 00H
	DB	't', 00H, 'r', 00H, '_', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OCKMEJON@_Ptr_container?5?$DM?5_Ptr_user?$AA@
CONST	SEGMENT
??_C@_0BL@OCKMEJON@_Ptr_container?5?$DM?5_Ptr_user?$AA@ DB '_Ptr_containe'
	DB	'r < _Ptr_user', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1JO@EKLKIEHP@?$AA?$CC?$AAr?$AAe?$AAi?$AAn?$AAt?$AAe?$AAr?$AAp?$AAr?$AAe?$AAt?$AA_?$AAc?$AAa?$AAs?$AAt?$AA?$DM?$AAu?$AAi?$AAn?$AAt?$AAp?$AAt?$AAr?$AA_?$AAt?$AA?5?$AA?$CK?$AA?$DO?$AA?$CI?$AA_@
CONST	SEGMENT
??_C@_1JO@EKLKIEHP@?$AA?$CC?$AAr?$AAe?$AAi?$AAn?$AAt?$AAe?$AAr?$AAp?$AAr?$AAe?$AAt?$AA_?$AAc?$AAa?$AAs?$AAt?$AA?$DM?$AAu?$AAi?$AAn?$AAt?$AAp?$AAt?$AAr?$AA_?$AAt?$AA?5?$AA?$CK?$AA?$DO?$AA?$CI?$AA_@ DB '"'
	DB	00H, 'r', 00H, 'e', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 't', 00H, '_', 00H, 'c'
	DB	00H, 'a', 00H, 's', 00H, 't', 00H, '<', 00H, 'u', 00H, 'i', 00H
	DB	'n', 00H, 't', 00H, 'p', 00H, 't', 00H, 'r', 00H, '_', 00H, 't'
	DB	00H, ' ', 00H, '*', 00H, '>', 00H, '(', 00H, '_', 00H, 'P', 00H
	DB	't', 00H, 'r', 00H, '_', 00H, 'p', 00H, 't', 00H, 'r', 00H, ')'
	DB	00H, '[', 00H, '-', 00H, '1', 00H, ']', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '_', 00H, 'B', 00H, 'I', 00H, 'G', 00H, '_'
	DB	00H, 'A', 00H, 'L', 00H, 'L', 00H, 'O', 00H, 'C', 00H, 'A', 00H
	DB	'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, '_', 00H, 'S', 00H, 'E'
	DB	00H, 'N', 00H, 'T', 00H, 'I', 00H, 'N', 00H, 'E', 00H, 'L', 00H
	DB	'"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@NOJHEJCJ@reinterpret_cast?$DMuintptr_t?5?$CK?$DO?$CI_P@
CONST	SEGMENT
??_C@_0EI@NOJHEJCJ@reinterpret_cast?$DMuintptr_t?5?$CK?$DO?$CI_P@ DB 'rei'
	DB	'nterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] == _BIG_ALLOCATION_S'
	DB	'ENTINEL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1HE@CDMBFOKC@?$AA?$CC?$AA?$CI?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAB?$AAI?$AAG?$AA_?$AAA?$AAL?$AAL?$AAO?$AAC?$AAA?$AAT?$AAI?$AAO?$AAN?$AA_?$AAA@
CONST	SEGMENT
??_C@_1HE@CDMBFOKC@?$AA?$CC?$AA?$CI?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAB?$AAI?$AAG?$AA_?$AAA?$AAL?$AAL?$AAO?$AAC?$AAA?$AAT?$AAI?$AAO?$AAN?$AA_?$AAA@ DB '"'
	DB	00H, '(', 00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, '_', 00H
	DB	'u', 00H, 's', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '&', 00H, ' '
	DB	00H, '(', 00H, '_', 00H, 'B', 00H, 'I', 00H, 'G', 00H, '_', 00H
	DB	'A', 00H, 'L', 00H, 'L', 00H, 'O', 00H, 'C', 00H, 'A', 00H, 'T'
	DB	00H, 'I', 00H, 'O', 00H, 'N', 00H, '_', 00H, 'A', 00H, 'L', 00H
	DB	'I', 00H, 'G', 00H, 'N', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'T'
	DB	00H, ' ', 00H, '-', 00H, ' ', 00H, '1', 00H, ')', 00H, ')', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, '"', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GBGGGKGG@?$CI_Ptr_user?5?$CG?5?$CI_BIG_ALLOCATION_AL@
CONST	SEGMENT
??_C@_0DD@GBGGGKGG@?$CI_Ptr_user?5?$CG?5?$CI_BIG_ALLOCATION_AL@ DB '(_Ptr'
	DB	'_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H
	DB	'e', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@MLOBABC@?$AA?$CC?$AA_?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AA?9?$AA1?$AA?$CJ?$AA?5?$AA?1?$AA?5?$AA_?$AAS?$AAz?$AA?$CC?$AA?5?$AA?$CG@
CONST	SEGMENT
??_C@_1EI@MLOBABC@?$AA?$CC?$AA_?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AA?9?$AA1?$AA?$CJ?$AA?5?$AA?1?$AA?5?$AA_?$AAS?$AAz?$AA?$CC?$AA?5?$AA?$CG@ DB '"'
	DB	00H, '_', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '(', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, '_', 00H, 't', 00H, ')', 00H, '(', 00H
	DB	'-', 00H, '1', 00H, ')', 00H, ' ', 00H, '/', 00H, ' ', 00H, '_'
	DB	00H, 'S', 00H, 'z', 00H, '"', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HMCJOMKN@_Count?5?$DM?$DN?5?$CIsize_t?$CJ?$CI?91?$CJ?5?1?5_Sz?$AA@
CONST	SEGMENT
??_C@_0BN@HMCJOMKN@_Count?5?$DM?$DN?5?$CIsize_t?$CJ?$CI?91?$CJ?5?1?5_Sz?$AA@ DB '_'
	DB	'Count <= (size_t)(-1) / _Sz', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Deallocate@std@@YAXPEAX_K1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Deallocate@std@@YAXPEAX_K1@Z@4JA DD 05cH ; `std::_Deallocate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, '"', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@ DB '_Ptr != 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1JA@DKOIEICI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1JA@DKOIEICI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '4', 00H, '.', 00H, '0', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H, 'e'
	DB	00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@ DB '%', 00H, 'l', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	'"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ DB '_Ptr_container !='
	DB	' 0', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Allocate@std@@YAPEAX_K0_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Allocate@std@@YAPEAX_K0_N@Z@4JA DD 030H ; `std::_Allocate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@PEA_WAEAPEA_W@?$allocator@_W@std@@QEAAXPEAPEA_WAEAPEA_W@Z DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@1@$$QEAU21@@Z DD 025063501H
	DD	0119231eH
	DD	070120020H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@1@@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@PEA_W@?$allocator@_W@std@@QEAAXPEAPEA_W@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@PEA_WAEAPEA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAEAV?$allocator@_W@1@PEAPEA_WAEAPEA_W@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEAPEA_W@std@@YAAEAPEA_WAEAPEA_W@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_W@1@@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AEAU10@@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@PEAU_Container_proxy@1@$$QEAU31@@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@PEAU_Container_proxy@1@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@PEA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAEAV?$allocator@_W@1@PEAPEA_W@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pointer_to@?$pointer_traits@PEAU_Container_proxy@std@@@std@@SAPEAU_Container_proxy@2@AEAU32@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@PEA_WAEAPEA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEAPEA_WAEAPEA_W@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@1@$$QEAU21@@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@1@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@2@_K@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?address@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEBAPEAU_Container_proxy@2@AEAU32@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@2@_K@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Debug_pointer_if@$$CB_W@std@@YAX_NPEB_W1I@Z DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Debug_pointer@$$CB_W@std@@YAXPEB_W0I@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@PEA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEAPEA_W@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Safe_Release@PEAVCVIBuffer_Rect@Engine@@@Engine@@YAKAEAPEAVCVIBuffer_Rect@0@@Z DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Safe_Release@PEAVCTransform@Engine@@@Engine@@YAKAEAPEAVCTransform@0@@Z DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Safe_Release@PEAVCTexture@Engine@@@Engine@@YAKAEAPEAVCTexture@0@@Z DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Safe_Release@PEAVCShader@Engine@@@Engine@@YAKAEAPEAVCShader@0@@Z DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Safe_Release@PEAVCRenderer@Engine@@@Engine@@YAKAEAPEAVCRenderer@0@@Z DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Safe_Release@PEAVCSkillBlueEffect@Client@@@Engine@@YAKAEAPEAVCSkillBlueEffect@Client@@@Z DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IsScaleFinish@CThorn@Client@@QEAA_NXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?StartDessolve@CThorn@Client@@QEAAXXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetType@CThorn@Client@@QEAAXW4TYPE@12@@Z DD 05052c01H
	DD	01120315H
	DD	0700b0019H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetTimeDelta@CThorn@Client@@QEAAXN@Z DD 05052e01H
	DD	01140317H
	DD	0700d0019H
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IsLevelFinish@CApplicationManager@Client@@QEAA_NW4LEVEL@12@@Z DD 05052c01H
	DD	01120315H
	DD	0700b0019H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GCSkillBlueEffect@Client@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Free@CSkillBlueEffect@Client@@UEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z DD imagerel ?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z
	DD	0ffffffffH
	DD	imagerel ?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z+115
	DD	00H
	DD	imagerel ?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z+178
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z DD 025054b19H
	DD	01132318H
	DD	0700c002fH
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z
	DD	0162H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z$rtcName$0 DB 070H ; Client::CSkillBlueEffect::Clone
	DB	049H
	DB	06eH
	DB	073H
	DB	074H
	DB	061H
	DB	06eH
	DB	063H
	DB	065H
	DB	00H
	ORG $+6
?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z$rtcVarDesc DD 028H ; Client::CSkillBlueEffect::Clone
	DD	08H
	DQ	FLAT:?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z$rtcName$0
	ORG $+48
?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z$rtcFrameData DD 01H ; Client::CSkillBlueEffect::Clone
	DD	00H
	DQ	FLAT:?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z$rtcVarDesc
$cppxdata$?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z
	DD	0148H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z DD imagerel ?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
	DD	0ffffffffH
	DD	imagerel ?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z+115
	DD	00H
	DD	imagerel ?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z+185
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z DD 025054b19H
	DD	01132318H
	DD	0700c002fH
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
	DD	0162H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z$rtcName$0 DB 070H ; Client::CSkillBlueEffect::Create
	DB	049H
	DB	06eH
	DB	073H
	DB	074H
	DB	061H
	DB	06eH
	DB	063H
	DB	065H
	DB	00H
	ORG $+6
?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z$rtcVarDesc DD 028H ; Client::CSkillBlueEffect::Create
	DD	08H
	DQ	FLAT:?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z$rtcName$0
	ORG $+48
?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z$rtcFrameData DD 01H ; Client::CSkillBlueEffect::Create
	DD	00H
	DQ	FLAT:?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z$rtcVarDesc
$cppxdata$?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
	DD	0148H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Setup_ShaderResources@CSkillBlueEffect@Client@@AEAAJXZ DD 025052a01H
	DD	010e2313H
	DD	070070039H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Add_Components@CSkillBlueEffect@Client@@AEAAJXZ DD 035053b19H
	DD	010e3313H
	DD	070070093H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0488H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Add_Components@CSkillBlueEffect@Client@@AEAAJXZ$rtcName$0 DB 073H ; Client::CSkillBlueEffect::Add_Components
	DB	07aH
	DB	054H
	DB	061H
	DB	067H
	DB	00H
	ORG $+10
?Add_Components@CSkillBlueEffect@Client@@AEAAJXZ$rtcVarDesc DD 080H ; Client::CSkillBlueEffect::Add_Components
	DD	0208H
	DQ	FLAT:?Add_Components@CSkillBlueEffect@Client@@AEAAJXZ$rtcName$0
	ORG $+48
?Add_Components@CSkillBlueEffect@Client@@AEAAJXZ$rtcFrameData DD 01H ; Client::CSkillBlueEffect::Add_Components
	DD	00H
	DQ	FLAT:?Add_Components@CSkillBlueEffect@Client@@AEAAJXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetupPosition@CSkillBlueEffect@Client@@QEAAXXZ DD 025064219H
	DD	0115231aH
	DD	070080250H
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	01270H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?SetupPosition@CSkillBlueEffect@Client@@QEAAXXZ$rtcName$0 DB 050H ; Client::CSkillBlueEffect::SetupPosition
	DB	06cH
	DB	061H
	DB	079H
	DB	065H
	DB	072H
	DB	04dH
	DB	061H
	DB	074H
	DB	072H
	DB	069H
	DB	078H
	DB	00H
	ORG $+3
?SetupPosition@CSkillBlueEffect@Client@@QEAAXXZ$rtcName$1 DB 052H ; Client::CSkillBlueEffect::SetupPosition
	DB	06fH
	DB	074H
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	04dH
	DB	061H
	DB	074H
	DB	072H
	DB	069H
	DB	078H
	DB	00H
	ORG $+1
?SetupPosition@CSkillBlueEffect@Client@@QEAAXXZ$rtcVarDesc DD 0140H ; Client::CSkillBlueEffect::SetupPosition
	DD	040H
	DQ	FLAT:?SetupPosition@CSkillBlueEffect@Client@@QEAAXXZ$rtcName$1
	DD	050H
	DD	040H
	DQ	FLAT:?SetupPosition@CSkillBlueEffect@Client@@QEAAXXZ$rtcName$0
	ORG $+96
?SetupPosition@CSkillBlueEffect@Client@@QEAAXXZ$rtcFrameData DD 02H ; Client::CSkillBlueEffect::SetupPosition
	DD	00H
	DQ	FLAT:?SetupPosition@CSkillBlueEffect@Client@@QEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderGUI@CSkillBlueEffect@Client@@UEAAXXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Render@CSkillBlueEffect@Client@@UEAAJXZ DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?LateTick@CSkillBlueEffect@Client@@UEAAXN@Z DD 025063101H
	DD	0115231aH
	DD	0700e0030H
	DD	0500c600dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Tick@CSkillBlueEffect@Client@@UEAAXN@Z DD 025053001H
	DD	01142319H
	DD	0700d001dH
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Initialize@CSkillBlueEffect@Client@@UEAAJPEAX@Z DD 025052f01H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Initialize_Prototype@CSkillBlueEffect@Client@@UEAAJXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1CSkillBlueEffect@Client@@UEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z DD imagerel ??0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z
	DD	0ffffffffH
	DD	imagerel ??0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z+79
	DD	00H
	DD	imagerel ??0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z+295
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z DD 025053a11H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z DD imagerel ??0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
	DD	0ffffffffH
	DD	imagerel ??0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z+91
	DD	00H
	DD	imagerel ??0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z+307
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z DD 025053f11H
	DD	0118231dH
	DD	070110021H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMScalarSinCos@DirectX@@YAXPEAM0M@Z DD 025053501H
	DD	0119231eH
	DD	070120031H
	DD	05011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMMatrixRotationX@DirectX@@YQ?AUXMMATRIX@1@M@Z DD 035053419H
	DD	010f3314H
	DD	070080087H
	DD	05007H
	DD	imagerel __GSHandlerCheck
	DD	0428H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?XMMatrixRotationX@DirectX@@YQ?AUXMMATRIX@1@M@Z$rtcName$0 DB 053H ; DirectX::XMMatrixRotationX
	DB	069H
	DB	06eH
	DB	041H
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+7
?XMMatrixRotationX@DirectX@@YQ?AUXMMATRIX@1@M@Z$rtcName$1 DB 043H ; DirectX::XMMatrixRotationX
	DB	06fH
	DB	073H
	DB	041H
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+3
?XMMatrixRotationX@DirectX@@YQ?AUXMMATRIX@1@M@Z$rtcName$2 DB 04dH ; DirectX::XMMatrixRotationX
	DB	00H
	ORG $+2
?XMMatrixRotationX@DirectX@@YQ?AUXMMATRIX@1@M@Z$rtcVarDesc DD 0e0H ; DirectX::XMMatrixRotationX
	DD	040H
	DQ	FLAT:?XMMatrixRotationX@DirectX@@YQ?AUXMMATRIX@1@M@Z$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:?XMMatrixRotationX@DirectX@@YQ?AUXMMATRIX@1@M@Z$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?XMMatrixRotationX@DirectX@@YQ?AUXMMATRIX@1@M@Z$rtcName$0
	ORG $+144
?XMMatrixRotationX@DirectX@@YQ?AUXMMATRIX@1@M@Z$rtcFrameData DD 03H ; DirectX::XMMatrixRotationX
	DD	00H
	DQ	FLAT:?XMMatrixRotationX@DirectX@@YQ?AUXMMATRIX@1@M@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMMatrixScaling@DirectX@@YQ?AUXMMATRIX@1@MMM@Z DD 035054019H
	DD	011b3320H
	DD	07014003dH
	DD	05013H
	DD	imagerel __GSHandlerCheck
	DD	01d8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?XMMatrixScaling@DirectX@@YQ?AUXMMATRIX@1@MMM@Z$rtcName$0 DB 04dH ; DirectX::XMMatrixScaling
	DB	00H
	ORG $+14
?XMMatrixScaling@DirectX@@YQ?AUXMMATRIX@1@MMM@Z$rtcVarDesc DD 040H ; DirectX::XMMatrixScaling
	DD	040H
	DQ	FLAT:?XMMatrixScaling@DirectX@@YQ?AUXMMATRIX@1@MMM@Z$rtcName$0
	ORG $+48
?XMMatrixScaling@DirectX@@YQ?AUXMMATRIX@1@MMM@Z$rtcFrameData DD 01H ; DirectX::XMMatrixScaling
	DD	00H
	DQ	FLAT:?XMMatrixScaling@DirectX@@YQ?AUXMMATRIX@1@MMM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z DD 035053f19H
	DD	010e3313H
	DD	0700701b7H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0da8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z$rtcName$0 DB 04dH ; DirectX::XMMatrixMultiply
	DB	031H
	DB	00H
	ORG $+5
?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z$rtcName$1 DB 06dH ; DirectX::XMMatrixMultiply
	DB	052H
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z$rtcVarDesc DD 0a0H ; DirectX::XMMatrixMultiply
	DD	040H
	DQ	FLAT:?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z$rtcName$1
	DD	040H
	DD	040H
	DQ	FLAT:?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z$rtcName$0
	ORG $+96
?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z$rtcFrameData DD 02H ; DirectX::XMMatrixMultiply
	DD	00H
	DQ	FLAT:?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z DD 035052a01H
	DD	010a330fH
	DD	0700300dfH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z DD 015052f01H
	DD	010f1314H
	DD	070080033H
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z DD 015053601H
	DD	010a130fH
	DD	07003002dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z DD 015053601H
	DD	010a130fH
	DD	07003002dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMVectorGetZ@DirectX@@YQMT__m128@@@Z DD 015052a01H
	DD	010a130fH
	DD	07003002dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMVectorGetX@DirectX@@YQMT__m128@@@Z DD 015052a01H
	DD	010a130fH
	DD	070030021H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z DD 015053501H
	DD	01211326H
	DD	0701a0021H
	DD	05019H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMStoreFloat4x4@DirectX@@YQXPEAUXMFLOAT4X4@1@UXMMATRIX@1@@Z DD 025053601H
	DD	010e2313H
	DD	070070029H
	DD	05006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?XMStoreFloat4x4@DirectX@@YQXPEAUXMFLOAT4X4@1@UXMMATRIX@1@@Z$rtcName$0 DB 04dH ; DirectX::XMStoreFloat4x4
	DB	00H
	ORG $+14
?XMStoreFloat4x4@DirectX@@YQXPEAUXMFLOAT4X4@1@UXMMATRIX@1@@Z$rtcVarDesc DD 030H ; DirectX::XMStoreFloat4x4
	DD	040H
	DQ	FLAT:?XMStoreFloat4x4@DirectX@@YQXPEAUXMFLOAT4X4@1@UXMMATRIX@1@@Z$rtcName$0
	ORG $+48
?XMStoreFloat4x4@DirectX@@YQXPEAUXMFLOAT4X4@1@UXMMATRIX@1@@Z$rtcFrameData DD 01H ; DirectX::XMStoreFloat4x4
	DD	00H
	DQ	FLAT:?XMStoreFloat4x4@DirectX@@YQXPEAUXMFLOAT4X4@1@UXMMATRIX@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PEBUXMFLOAT4X4@1@@Z DD 035053b19H
	DD	010e3313H
	DD	070070043H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0208H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PEBUXMFLOAT4X4@1@@Z$rtcName$0 DB 04dH ; DirectX::XMLoadFloat4x4
	DB	00H
	ORG $+14
?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PEBUXMFLOAT4X4@1@@Z$rtcVarDesc DD 040H ; DirectX::XMLoadFloat4x4
	DD	040H
	DQ	FLAT:?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PEBUXMFLOAT4X4@1@@Z$rtcName$0
	ORG $+48
?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PEBUXMFLOAT4X4@1@@Z$rtcFrameData DD 01H ; DirectX::XMLoadFloat4x4
	DD	00H
	DQ	FLAT:?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PEBUXMFLOAT4X4@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0XMFLOAT4X4@DirectX@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0XMFLOAT3@DirectX@@QEAA@MMM@Z DD 05053a01H
	DD	01200323H
	DD	070190019H
	DD	05018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??DXMMATRIX@DirectX@@QEBQ?AU01@U01@@Z DD 035063701H
	DD	010f3314H
	DD	070080042H
	DD	050066007H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??DXMMATRIX@DirectX@@QEBQ?AU01@U01@@Z$rtcName$0 DB 04dH	; DirectX::XMMATRIX::operator*
	DB	00H
	ORG $+14
??DXMMATRIX@DirectX@@QEBQ?AU01@U01@@Z$rtcVarDesc DD 040H ; DirectX::XMMATRIX::operator*
	DD	040H
	DQ	FLAT:??DXMMATRIX@DirectX@@QEBQ?AU01@U01@@Z$rtcName$0
	ORG $+48
??DXMMATRIX@DirectX@@QEBQ?AU01@U01@@Z$rtcFrameData DD 01H ; DirectX::XMMATRIX::operator*
	DD	00H
	DQ	FLAT:??DXMMATRIX@DirectX@@QEBQ?AU01@U01@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0XMMATRIX@DirectX@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??DDirectX@@YQ?AT__m128@@T1@M@Z DD 035052f01H
	DD	010f3314H
	DD	07008002bH
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??GDirectX@@YQ?AT__m128@@T1@0@Z DD 035053601H
	DD	010a330fH
	DD	070030031H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??HDirectX@@YQ?AT__m128@@T1@0@Z DD 035053601H
	DD	010a330fH
	DD	070030031H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??BXMVECTORI32@DirectX@@QEBA?AT__m128@@XZ DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?XMConvertToRadians@DirectX@@YAMM@Z DD 015052301H
	DD	010f1314H
	DD	07008001bH
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAX_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_N_K@Z DD 025053301H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA_NPEB_W@Z DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA_N_K_N@Z DD 025053401H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA DD 031019H
	DD	0700c4210H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA DD 031019H
	DD	0700c4210H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z DD imagerel ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z
	DD	0ffffffffH
	DD	imagerel ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z+356
	DD	00H
	DD	imagerel ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z+418
	DD	0ffffffffH
	DD	imagerel ?catch$1@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA
	DD	00H
	DD	imagerel ?catch$1@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA+20
	DD	01H
	DD	imagerel ?catch$1@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA+31
	DD	02H
	DD	imagerel ?catch$1@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA+93
	DD	01H
	DD	imagerel ?catch$1@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA+95
	DD	00H
	DD	imagerel ?catch$0@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA+20
	DD	03H
	DD	imagerel ?catch$0@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA+47
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$1$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$1@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z DD 00H
	DD	00H
	DD	03H
	DD	01H
	DD	imagerel $handlerMap$0$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	imagerel $handlerMap$1$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z DD 025055019H
	DD	0118231dH
	DD	07011002bH
	DD	05010H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z
	DD	014bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z$rtcName$0 DB 05fH ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
	DB	050H
	DB	074H
	DB	072H
	DB	00H
	ORG $+11
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z$rtcVarDesc DD 048H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
	DD	08H
	DQ	FLAT:?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z$rtcName$0
	ORG $+48
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z$rtcFrameData DD 01H ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
	DD	00H
	DQ	FLAT:?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z$rtcVarDesc
$cppxdata$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z DD 019930522H
	DD	04H
	DD	imagerel $stateUnwindMap$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z
	DD	02H
	DD	imagerel $tryMap$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z
	DD	0aH
	DD	imagerel $ip2state$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z
	DD	0128H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_K_K0@Z DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@_K0@Z DD 025053401H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@PEB_W@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@PEB_W_K@Z DD 025053401H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@_K1@Z DD 025053901H
	DD	011d2322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z DD imagerel ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z
	DD	0ffffffffH
	DD	imagerel ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z+71
	DD	00H
	DD	imagerel ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z+108
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z DD 025053a11H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEB_KXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Bx@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@2@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myproxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Free_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ DD 025053b19H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0f8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Free_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ$rtcName$0 DB 05fH ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy
	DB	041H
	DB	06cH
	DB	070H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+7
?_Free_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ$rtcVarDesc DD 024H ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy
	DD	01H
	DQ	FLAT:?_Free_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ$rtcName$0
	ORG $+48
?_Free_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ$rtcFrameData DD 01H ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy
	DD	00H
	DQ	FLAT:?_Free_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ DD 025053b19H
	DD	010e2313H
	DD	070070029H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0130H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ$rtcName$0 DB 05fH ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy
	DB	041H
	DB	06cH
	DB	070H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+7
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ$rtcVarDesc DD 024H ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy
	DD	01H
	DQ	FLAT:?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ$rtcName$0
	ORG $+48
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ$rtcFrameData DD 01H ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy
	DD	00H
	DQ	FLAT:?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ DD imagerel ??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ DD imagerel ??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ+76
	DD	00H
	DD	imagerel ??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ+89
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ
	DD	0108H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ DD 025053511H
	DD	010e2313H
	DD	070070025H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAPEB_WXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAPEA_WXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD imagerel ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ+66
	DD	00H
	DD	imagerel ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ+115
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ DD 025053511H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEBA_KU_Nil@2@@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEA_W_K@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAPEA_W_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$allocator@_W@std@@QEBA_KXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@_W@std@@QEAAXPEA_W_K@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@_W@std@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Deallocate@std@@YAXPEAX_K1@Z DD 035053401H
	DD	0118331dH
	DD	07011002fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@std@@YAPEAX_K0_N@Z DD 035053401H
	DD	0118331dH
	DD	07011002fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 025053b19H
	DD	010e2313H
	DD	070070025H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all
	DD	04H
	DQ	FLAT:?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all
	DD	00H
	DQ	FLAT:?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Container_base12@std@@QEAA@XZ DD imagerel ??1_Container_base12@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1_Container_base12@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1_Container_base12@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Container_base12@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1_Container_base12@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$char_traits@_W@std@@SAXAEA_WAEB_W@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?move@?$char_traits@_W@std@@SAPEA_WPEA_WPEB_W_K@Z DD 025053401H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?copy@?$char_traits@_W@std@@SAPEA_WPEA_WPEB_W_K@Z DD 025053401H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$char_traits@_W@std@@SA_KPEB_W@Z DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wmemmove DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wmemcpy DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 025053901H
	DD	011d2322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PEA_WAEAPEA_W@?$allocator@_W@std@@QEAAXPEAPEA_WAEAPEA_W@Z
_TEXT	SEGMENT
$T1 = 200
tv73 = 216
this$ = 256
_Ptr$ = 264
<_Args_0>$ = 272
??$construct@PEA_WAEAPEA_W@?$allocator@_W@std@@QEAAXPEAPEA_WAEAPEA_W@Z PROC ; std::allocator<wchar_t>::construct<wchar_t * __ptr64,wchar_t * __ptr64 & __ptr64>, COMDAT

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00034	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0003b	b9 08 00 00 00	 mov	 ecx, 8
  00040	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00045	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  0004c	48 83 bd c8 00
	00 00 00	 cmp	 QWORD PTR $T1[rbp], 0
  00054	74 29		 je	 SHORT $LN3@construct
  00056	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  0005d	e8 00 00 00 00	 call	 ??$forward@AEAPEA_W@std@@YAAEAPEA_WAEAPEA_W@Z ; std::forward<wchar_t * __ptr64 & __ptr64>
  00062	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR $T1[rbp]
  00069	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006c	48 89 01	 mov	 QWORD PTR [rcx], rax
  0006f	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]
  00076	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv73[rbp], rax
  0007d	eb 0b		 jmp	 SHORT $LN4@construct
$LN3@construct:
  0007f	48 c7 85 d8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv73[rbp], 0
$LN4@construct:

; 738  : 		}

  0008a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00091	5f		 pop	 rdi
  00092	5d		 pop	 rbp
  00093	c3		 ret	 0
??$construct@PEA_WAEAPEA_W@?$allocator@_W@std@@QEAAXPEAPEA_WAEAPEA_W@Z ENDP ; std::allocator<wchar_t>::construct<wchar_t * __ptr64,wchar_t * __ptr64 & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@1@$$QEAU21@@Z
_TEXT	SEGMENT
$T1 = 200
tv74 = 216
this$ = 256
_Ptr$ = 264
<_Args_0>$ = 272
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@1@$$QEAU21@@Z PROC ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 00 01
	00 00		 sub	 rsp, 256		; 00000100H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8b fc	 mov	 rdi, rsp
  00021	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00035	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0003c	b9 10 00 00 00	 mov	 ecx, 16
  00041	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00046	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  0004d	48 83 bd c8 00
	00 00 00	 cmp	 QWORD PTR $T1[rbp], 0
  00055	74 2d		 je	 SHORT $LN3@construct
  00057	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  0005e	e8 00 00 00 00	 call	 ??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z ; std::forward<std::_Container_proxy>
  00063	48 8b bd c8 00
	00 00		 mov	 rdi, QWORD PTR $T1[rbp]
  0006a	48 8b f0	 mov	 rsi, rax
  0006d	b9 10 00 00 00	 mov	 ecx, 16
  00072	f3 a4		 rep movsb
  00074	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]
  0007b	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv74[rbp], rax
  00082	eb 0b		 jmp	 SHORT $LN4@construct
$LN3@construct:
  00084	48 c7 85 d8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv74[rbp], 0
$LN4@construct:

; 738  : 		}

  0008f	48 8d a5 e0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+224]
  00096	5f		 pop	 rdi
  00097	5e		 pop	 rsi
  00098	5d		 pop	 rbp
  00099	c3		 ret	 0
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@1@$$QEAU21@@Z ENDP ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@1@@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@1@@Z PROC ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>, COMDAT

; 743  : 		{	// destroy object at _Ptr

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 744  : 		_Ptr->~_Uty();
; 745  : 		}

  0002d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00034	5f		 pop	 rdi
  00035	5d		 pop	 rbp
  00036	c3		 ret	 0
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@1@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PEA_W@?$allocator@_W@std@@QEAAXPEAPEA_W@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
??$destroy@PEA_W@?$allocator@_W@std@@QEAAXPEAPEA_W@Z PROC ; std::allocator<wchar_t>::destroy<wchar_t * __ptr64>, COMDAT

; 743  : 		{	// destroy object at _Ptr

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 744  : 		_Ptr->~_Uty();
; 745  : 		}

  0002d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00034	5f		 pop	 rdi
  00035	5d		 pop	 rbp
  00036	c3		 ret	 0
??$destroy@PEA_W@?$allocator@_W@std@@QEAAXPEAPEA_W@Z ENDP ; std::allocator<wchar_t>::destroy<wchar_t * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PEA_WAEAPEA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAEAV?$allocator@_W@1@PEAPEA_WAEAPEA_W@Z
_TEXT	SEGMENT
_Al$ = 224
_Ptr$ = 232
<_Args_0>$ = 240
??$construct@PEA_WAEAPEA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAEAV?$allocator@_W@1@PEAPEA_WAEAPEA_W@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t * __ptr64,wchar_t * __ptr64 & __ptr64>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00034	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  0003b	e8 00 00 00 00	 call	 ??$forward@AEAPEA_W@std@@YAAEAPEA_WAEAPEA_W@Z ; std::forward<wchar_t * __ptr64 & __ptr64>
  00040	4c 8b c0	 mov	 r8, rax
  00043	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0004a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00051	e8 00 00 00 00	 call	 ??$construct@PEA_WAEAPEA_W@?$allocator@_W@std@@QEAAXPEAPEA_WAEAPEA_W@Z ; std::allocator<wchar_t>::construct<wchar_t * __ptr64,wchar_t * __ptr64 & __ptr64>

; 858  : 		}

  00056	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005d	5f		 pop	 rdi
  0005e	5d		 pop	 rbp
  0005f	c3		 ret	 0
??$construct@PEA_WAEAPEA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAEAV?$allocator@_W@1@PEAPEA_WAEAPEA_W@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t * __ptr64,wchar_t * __ptr64 & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AEAPEA_W@std@@YAAEAPEA_WAEAPEA_W@Z
_TEXT	SEGMENT
_Arg$ = 224
??$forward@AEAPEA_W@std@@YAAEAPEA_WAEAPEA_W@Z PROC	; std::forward<wchar_t * __ptr64 & __ptr64>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1277 : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$forward@AEAPEA_W@std@@YAAEAPEA_WAEAPEA_W@Z ENDP	; std::forward<wchar_t * __ptr64 & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_W@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_W@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>, COMDAT

; 709  : 		{	// construct from a related allocator (do nothing)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 710  : 		}

  0002d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003b	5f		 pop	 rdi
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_W@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$forward@AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AEAU10@@Z PROC ; std::forward<std::_Wrap_alloc<std::allocator<wchar_t> > & __ptr64>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1277 : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$forward@AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AEAU10@@Z ENDP ; std::forward<std::_Wrap_alloc<std::allocator<wchar_t> > & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@PEAU_Container_proxy@1@$$QEAU31@@Z
_TEXT	SEGMENT
_Al$ = 224
_Ptr$ = 232
<_Args_0>$ = 240
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@PEAU_Container_proxy@1@$$QEAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00034	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  0003b	e8 00 00 00 00	 call	 ??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z ; std::forward<std::_Container_proxy>
  00040	4c 8b c0	 mov	 r8, rax
  00043	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0004a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00051	e8 00 00 00 00	 call	 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@1@$$QEAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>

; 858  : 		}

  00056	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005d	5f		 pop	 rdi
  0005e	5d		 pop	 rbp
  0005f	c3		 ret	 0
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@PEAU_Container_proxy@1@$$QEAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1277 : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@PEAU_Container_proxy@1@@Z
_TEXT	SEGMENT
_Al$ = 224
_Ptr$ = 232
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@PEAU_Container_proxy@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 863  : 		{	// destroy object at _Ptr

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 864  : 		_Al.destroy(_Ptr);

  0002f	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  0003d	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>

; 865  : 		}

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@PEAU_Container_proxy@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PEA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAEAV?$allocator@_W@1@PEAPEA_W@Z
_TEXT	SEGMENT
_Al$ = 224
_Ptr$ = 232
??$destroy@PEA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAEAV?$allocator@_W@1@PEAPEA_W@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t * __ptr64>, COMDAT

; 863  : 		{	// destroy object at _Ptr

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 864  : 		_Al.destroy(_Ptr);

  0002f	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  0003d	e8 00 00 00 00	 call	 ??$destroy@PEA_W@?$allocator@_W@std@@QEAAXPEAPEA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t * __ptr64>

; 865  : 		}

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??$destroy@PEA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAEAV?$allocator@_W@1@PEAPEA_W@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 724  : 	{	// return address of _Val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 725  : 	return (__builtin_addressof(_Val));

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 726  : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PEAU_Container_proxy@std@@@std@@SAPEAU_Container_proxy@2@AEAU32@@Z
_TEXT	SEGMENT
_Val$ = 224
?pointer_to@?$pointer_traits@PEAU_Container_proxy@std@@@std@@SAPEAU_Container_proxy@2@AEAU32@@Z PROC ; std::pointer_traits<std::_Container_proxy * __ptr64>::pointer_to, COMDAT

; 279  : 		{	// convert raw reference to pointer

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 280  : 		return (_STD addressof(_Val));

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Val$[rbp]
  00031	e8 00 00 00 00	 call	 ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>

; 281  : 		}

  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
?pointer_to@?$pointer_traits@PEAU_Container_proxy@std@@@std@@SAPEAU_Container_proxy@2@AEAU32@@Z ENDP ; std::pointer_traits<std::_Container_proxy * __ptr64>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PEA_WAEAPEA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEAPEA_WAEAPEA_W@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
<_Args_0>$ = 240
??$construct@PEA_WAEAPEA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEAPEA_WAEAPEA_W@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t * __ptr64,wchar_t * __ptr64 & __ptr64>, COMDAT

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00034	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  0003b	e8 00 00 00 00	 call	 ??$forward@AEAPEA_W@std@@YAAEAPEA_WAEAPEA_W@Z ; std::forward<wchar_t * __ptr64 & __ptr64>
  00040	4c 8b c0	 mov	 r8, rax
  00043	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0004a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00051	e8 00 00 00 00	 call	 ??$construct@PEA_WAEAPEA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAEAV?$allocator@_W@1@PEAPEA_WAEAPEA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t * __ptr64,wchar_t * __ptr64 & __ptr64>

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  00056	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005d	5f		 pop	 rdi
  0005e	5d		 pop	 rbp
  0005f	c3		 ret	 0
??$construct@PEA_WAEAPEA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEAPEA_WAEAPEA_W@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t * __ptr64,wchar_t * __ptr64 & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z
_TEXT	SEGMENT
this$ = 224
_Right$ = 232
??$?0AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<wchar_t> > & __ptr64>, COMDAT

; 952  : 		{	// construct from a related allocator

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 951  : 		: _Mybase(_STD forward<_Other>(_Right))

  0002f	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00036	e8 00 00 00 00	 call	 ??$forward@AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AEAU10@@Z ; std::forward<std::_Wrap_alloc<std::allocator<wchar_t> > & __ptr64>
  0003b	48 8b d0	 mov	 rdx, rax
  0003e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00045	e8 00 00 00 00	 call	 ??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_W@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>

; 953  : 		}

  0004a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00051	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
??$?0AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<wchar_t> > & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@1@$$QEAU21@@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
<_Args_0>$ = 240
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@1@$$QEAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00034	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  0003b	e8 00 00 00 00	 call	 ??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z ; std::forward<std::_Container_proxy>
  00040	4c 8b c0	 mov	 r8, rax
  00043	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0004a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00051	e8 00 00 00 00	 call	 ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@PEAU_Container_proxy@1@$$QEAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  00056	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005d	5f		 pop	 rdi
  0005e	5d		 pop	 rbp
  0005f	c3		 ret	 0
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@1@$$QEAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 739  : 	{	// do nothing for plain pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 740  : 	return (_Ptr);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]

; 741  : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@1@@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 1002 : 		{	// destroy object at _Ptr

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1003 : 		_Mytraits::destroy(*this, _Ptr);

  0002f	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@PEAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>

; 1004 : 		}

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
_Count$ = 240
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@2@_K@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 986  : 		{	// deallocate object at _Ptr, ignore size

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00034	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  0003b	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00042	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::deallocate

; 988  : 		}

  0004e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00055	5f		 pop	 rdi
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@2@_K@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 224
_Count$ = 232
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate, COMDAT

; 975  : 		{	// allocate array of _Count elements

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 976  : 		return (_Mybase::allocate(_Count));

  0002f	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate

; 977  : 		}

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?address@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEBAPEAU_Container_proxy@2@AEAU32@@Z
_TEXT	SEGMENT
this$ = 224
_Val$ = 232
?address@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEBAPEAU_Container_proxy@2@AEAU32@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::address, COMDAT

; 925  : 		{	// return address of mutable _Val

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 926  : 		return (pointer_traits<pointer>::pointer_to(_Val));

  0002f	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Val$[rbp]
  00036	e8 00 00 00 00	 call	 ?pointer_to@?$pointer_traits@PEAU_Container_proxy@std@@@std@@SAPEAU_Container_proxy@2@AEAU32@@Z ; std::pointer_traits<std::_Container_proxy * __ptr64>::pointer_to

; 927  : 		}

  0003b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00042	5f		 pop	 rdi
  00043	5d		 pop	 rbp
  00044	c3		 ret	 0
?address@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEBAPEAU_Container_proxy@2@AEAU32@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::address
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 224
_Count$ = 232
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 724  : 		{	// allocate array of _Count elements

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 10 00 00 00	 mov	 edx, 16
  00037	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0003e	e8 00 00 00 00	 call	 ?_Allocate@std@@YAPEAX_K0_N@Z ; std::_Allocate

; 726  : 		}

  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
_Count$ = 240
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT

; 719  : 		{	// deallocate object at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00034	41 b8 10 00 00
	00		 mov	 r8d, 16
  0003a	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  00041	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00048	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPEAX_K1@Z ; std::_Deallocate

; 721  : 		}

  0004d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00054	5f		 pop	 rdi
  00055	5d		 pop	 rbp
  00056	c3		 ret	 0
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QEAAXPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Debug_pointer_if@$$CB_W@std@@YAX_NPEB_W1I@Z
_TEXT	SEGMENT
_Test$ = 224
_Ptr$ = 232
_File$ = 240
_Line$ = 248
??$_Debug_pointer_if@$$CB_W@std@@YAX_NPEB_W1I@Z PROC	; std::_Debug_pointer_if<wchar_t const >, COMDAT

; 937  : 	{	// conditionally test pointer for non-singularity, pointers

$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]

; 938  : 	if (_Test && _Ptr == 0)

  00038	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR _Test$[rbp]
  0003f	85 c0		 test	 eax, eax
  00041	74 25		 je	 SHORT $LN2@Debug_poin
  00043	48 83 bd e8 00
	00 00 00	 cmp	 QWORD PTR _Ptr$[rbp], 0
  0004b	75 1b		 jne	 SHORT $LN2@Debug_poin

; 939  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

  0004d	44 8b 85 f8 00
	00 00		 mov	 r8d, DWORD PTR _Line$[rbp]
  00054	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR _File$[rbp]
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Debug_message@std@@YAXPEB_W0I@Z
$LN2@Debug_poin:

; 940  : 	}

  00068	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006f	5f		 pop	 rdi
  00070	5d		 pop	 rbp
  00071	c3		 ret	 0
??$_Debug_pointer_if@$$CB_W@std@@YAX_NPEB_W1I@Z ENDP	; std::_Debug_pointer_if<wchar_t const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Debug_pointer@$$CB_W@std@@YAXPEB_W0I@Z
_TEXT	SEGMENT
_Ptr$ = 224
_File$ = 232
_Line$ = 240
??$_Debug_pointer@$$CB_W@std@@YAXPEB_W0I@Z PROC		; std::_Debug_pointer<wchar_t const >, COMDAT

; 923  : 	{	// test pointer for non-singularity, pointers

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 924  : 	if (_Ptr == 0)

  00034	48 83 bd e0 00
	00 00 00	 cmp	 QWORD PTR _Ptr$[rbp], 0
  0003c	75 1b		 jne	 SHORT $LN2@Debug_poin

; 925  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

  0003e	44 8b 85 f0 00
	00 00		 mov	 r8d, DWORD PTR _Line$[rbp]
  00045	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _File$[rbp]
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Debug_message@std@@YAXPEB_W0I@Z
$LN2@Debug_poin:

; 926  : 	}

  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??$_Debug_pointer@$$CB_W@std@@YAXPEB_W0I@Z ENDP		; std::_Debug_pointer<wchar_t const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z PROC			; std::_Unfancy<wchar_t>, COMDAT

; 739  : 	{	// do nothing for plain pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 740  : 	return (_Ptr);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]

; 741  : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ENDP			; std::_Unfancy<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PEA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEAPEA_W@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
??$destroy@PEA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEAPEA_W@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t * __ptr64>, COMDAT

; 1002 : 		{	// destroy object at _Ptr

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1003 : 		_Mytraits::destroy(*this, _Ptr);

  0002f	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ??$destroy@PEA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAEAV?$allocator@_W@1@PEAPEA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t * __ptr64>

; 1004 : 		}

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??$destroy@PEA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEAPEA_W@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z PROC	; std::addressof<wchar_t * __ptr64>, COMDAT

; 724  : 	{	// return address of _Val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 725  : 	return (__builtin_addressof(_Val));

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 726  : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z ENDP	; std::addressof<wchar_t * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><>, COMDAT

; 280  : 		{	// construct from forwarded values

$LN4:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 279  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
  0003a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >

; 281  : 		}

  00049	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00050	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00057	5f		 pop	 rdi
  00058	5d		 pop	 rbp
  00059	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\reference\headers\engine_template.h
;	COMDAT ??$Safe_Release@PEAVCVIBuffer_Rect@Engine@@@Engine@@YAKAEAPEAVCVIBuffer_Rect@0@@Z
_TEXT	SEGMENT
dwRefCnt$ = 4
classType$ = 256
??$Safe_Release@PEAVCVIBuffer_Rect@Engine@@@Engine@@YAKAEAPEAVCVIBuffer_Rect@0@@Z PROC ; Engine::Safe_Release<Engine::CVIBuffer_Rect * __ptr64>, COMDAT

; 18   : 	{

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 19   : 		unsigned long dwRefCnt = 0;

  0002a	c7 45 04 00 00
	00 00		 mov	 DWORD PTR dwRefCnt$[rbp], 0

; 20   : 
; 21   : 		if (nullptr != classType)

  00031	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR classType$[rbp]
  00038	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0003c	74 27		 je	 SHORT $LN2@Safe_Relea

; 22   : 		{
; 23   : 			dwRefCnt = classType->Release();

  0003e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR classType$[rbp]
  00045	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Release@CBase@Engine@@QEAAKXZ
  0004e	89 45 04	 mov	 DWORD PTR dwRefCnt$[rbp], eax

; 24   : 
; 25   : 			if (0 == dwRefCnt)

  00051	83 7d 04 00	 cmp	 DWORD PTR dwRefCnt$[rbp], 0
  00055	75 0e		 jne	 SHORT $LN3@Safe_Relea

; 26   : 			{
; 27   : 				classType = nullptr;

  00057	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR classType$[rbp]
  0005e	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN3@Safe_Relea:
$LN2@Safe_Relea:

; 28   : 			}
; 29   : 		}
; 30   : 
; 31   : 		return dwRefCnt;

  00065	8b 45 04	 mov	 eax, DWORD PTR dwRefCnt$[rbp]

; 32   : 	}

  00068	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006f	5f		 pop	 rdi
  00070	5d		 pop	 rbp
  00071	c3		 ret	 0
??$Safe_Release@PEAVCVIBuffer_Rect@Engine@@@Engine@@YAKAEAPEAVCVIBuffer_Rect@0@@Z ENDP ; Engine::Safe_Release<Engine::CVIBuffer_Rect * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\reference\headers\engine_template.h
;	COMDAT ??$Safe_Release@PEAVCTransform@Engine@@@Engine@@YAKAEAPEAVCTransform@0@@Z
_TEXT	SEGMENT
dwRefCnt$ = 4
classType$ = 256
??$Safe_Release@PEAVCTransform@Engine@@@Engine@@YAKAEAPEAVCTransform@0@@Z PROC ; Engine::Safe_Release<Engine::CTransform * __ptr64>, COMDAT

; 18   : 	{

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 19   : 		unsigned long dwRefCnt = 0;

  0002a	c7 45 04 00 00
	00 00		 mov	 DWORD PTR dwRefCnt$[rbp], 0

; 20   : 
; 21   : 		if (nullptr != classType)

  00031	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR classType$[rbp]
  00038	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0003c	74 27		 je	 SHORT $LN2@Safe_Relea

; 22   : 		{
; 23   : 			dwRefCnt = classType->Release();

  0003e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR classType$[rbp]
  00045	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Release@CBase@Engine@@QEAAKXZ
  0004e	89 45 04	 mov	 DWORD PTR dwRefCnt$[rbp], eax

; 24   : 
; 25   : 			if (0 == dwRefCnt)

  00051	83 7d 04 00	 cmp	 DWORD PTR dwRefCnt$[rbp], 0
  00055	75 0e		 jne	 SHORT $LN3@Safe_Relea

; 26   : 			{
; 27   : 				classType = nullptr;

  00057	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR classType$[rbp]
  0005e	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN3@Safe_Relea:
$LN2@Safe_Relea:

; 28   : 			}
; 29   : 		}
; 30   : 
; 31   : 		return dwRefCnt;

  00065	8b 45 04	 mov	 eax, DWORD PTR dwRefCnt$[rbp]

; 32   : 	}

  00068	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006f	5f		 pop	 rdi
  00070	5d		 pop	 rbp
  00071	c3		 ret	 0
??$Safe_Release@PEAVCTransform@Engine@@@Engine@@YAKAEAPEAVCTransform@0@@Z ENDP ; Engine::Safe_Release<Engine::CTransform * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\reference\headers\engine_template.h
;	COMDAT ??$Safe_Release@PEAVCTexture@Engine@@@Engine@@YAKAEAPEAVCTexture@0@@Z
_TEXT	SEGMENT
dwRefCnt$ = 4
classType$ = 256
??$Safe_Release@PEAVCTexture@Engine@@@Engine@@YAKAEAPEAVCTexture@0@@Z PROC ; Engine::Safe_Release<Engine::CTexture * __ptr64>, COMDAT

; 18   : 	{

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 19   : 		unsigned long dwRefCnt = 0;

  0002a	c7 45 04 00 00
	00 00		 mov	 DWORD PTR dwRefCnt$[rbp], 0

; 20   : 
; 21   : 		if (nullptr != classType)

  00031	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR classType$[rbp]
  00038	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0003c	74 27		 je	 SHORT $LN2@Safe_Relea

; 22   : 		{
; 23   : 			dwRefCnt = classType->Release();

  0003e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR classType$[rbp]
  00045	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Release@CBase@Engine@@QEAAKXZ
  0004e	89 45 04	 mov	 DWORD PTR dwRefCnt$[rbp], eax

; 24   : 
; 25   : 			if (0 == dwRefCnt)

  00051	83 7d 04 00	 cmp	 DWORD PTR dwRefCnt$[rbp], 0
  00055	75 0e		 jne	 SHORT $LN3@Safe_Relea

; 26   : 			{
; 27   : 				classType = nullptr;

  00057	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR classType$[rbp]
  0005e	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN3@Safe_Relea:
$LN2@Safe_Relea:

; 28   : 			}
; 29   : 		}
; 30   : 
; 31   : 		return dwRefCnt;

  00065	8b 45 04	 mov	 eax, DWORD PTR dwRefCnt$[rbp]

; 32   : 	}

  00068	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006f	5f		 pop	 rdi
  00070	5d		 pop	 rbp
  00071	c3		 ret	 0
??$Safe_Release@PEAVCTexture@Engine@@@Engine@@YAKAEAPEAVCTexture@0@@Z ENDP ; Engine::Safe_Release<Engine::CTexture * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\reference\headers\engine_template.h
;	COMDAT ??$Safe_Release@PEAVCShader@Engine@@@Engine@@YAKAEAPEAVCShader@0@@Z
_TEXT	SEGMENT
dwRefCnt$ = 4
classType$ = 256
??$Safe_Release@PEAVCShader@Engine@@@Engine@@YAKAEAPEAVCShader@0@@Z PROC ; Engine::Safe_Release<Engine::CShader * __ptr64>, COMDAT

; 18   : 	{

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 19   : 		unsigned long dwRefCnt = 0;

  0002a	c7 45 04 00 00
	00 00		 mov	 DWORD PTR dwRefCnt$[rbp], 0

; 20   : 
; 21   : 		if (nullptr != classType)

  00031	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR classType$[rbp]
  00038	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0003c	74 27		 je	 SHORT $LN2@Safe_Relea

; 22   : 		{
; 23   : 			dwRefCnt = classType->Release();

  0003e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR classType$[rbp]
  00045	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Release@CBase@Engine@@QEAAKXZ
  0004e	89 45 04	 mov	 DWORD PTR dwRefCnt$[rbp], eax

; 24   : 
; 25   : 			if (0 == dwRefCnt)

  00051	83 7d 04 00	 cmp	 DWORD PTR dwRefCnt$[rbp], 0
  00055	75 0e		 jne	 SHORT $LN3@Safe_Relea

; 26   : 			{
; 27   : 				classType = nullptr;

  00057	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR classType$[rbp]
  0005e	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN3@Safe_Relea:
$LN2@Safe_Relea:

; 28   : 			}
; 29   : 		}
; 30   : 
; 31   : 		return dwRefCnt;

  00065	8b 45 04	 mov	 eax, DWORD PTR dwRefCnt$[rbp]

; 32   : 	}

  00068	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006f	5f		 pop	 rdi
  00070	5d		 pop	 rbp
  00071	c3		 ret	 0
??$Safe_Release@PEAVCShader@Engine@@@Engine@@YAKAEAPEAVCShader@0@@Z ENDP ; Engine::Safe_Release<Engine::CShader * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\reference\headers\engine_template.h
;	COMDAT ??$Safe_Release@PEAVCRenderer@Engine@@@Engine@@YAKAEAPEAVCRenderer@0@@Z
_TEXT	SEGMENT
dwRefCnt$ = 4
classType$ = 256
??$Safe_Release@PEAVCRenderer@Engine@@@Engine@@YAKAEAPEAVCRenderer@0@@Z PROC ; Engine::Safe_Release<Engine::CRenderer * __ptr64>, COMDAT

; 18   : 	{

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 19   : 		unsigned long dwRefCnt = 0;

  0002a	c7 45 04 00 00
	00 00		 mov	 DWORD PTR dwRefCnt$[rbp], 0

; 20   : 
; 21   : 		if (nullptr != classType)

  00031	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR classType$[rbp]
  00038	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0003c	74 27		 je	 SHORT $LN2@Safe_Relea

; 22   : 		{
; 23   : 			dwRefCnt = classType->Release();

  0003e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR classType$[rbp]
  00045	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Release@CBase@Engine@@QEAAKXZ
  0004e	89 45 04	 mov	 DWORD PTR dwRefCnt$[rbp], eax

; 24   : 
; 25   : 			if (0 == dwRefCnt)

  00051	83 7d 04 00	 cmp	 DWORD PTR dwRefCnt$[rbp], 0
  00055	75 0e		 jne	 SHORT $LN3@Safe_Relea

; 26   : 			{
; 27   : 				classType = nullptr;

  00057	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR classType$[rbp]
  0005e	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN3@Safe_Relea:
$LN2@Safe_Relea:

; 28   : 			}
; 29   : 		}
; 30   : 
; 31   : 		return dwRefCnt;

  00065	8b 45 04	 mov	 eax, DWORD PTR dwRefCnt$[rbp]

; 32   : 	}

  00068	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006f	5f		 pop	 rdi
  00070	5d		 pop	 rbp
  00071	c3		 ret	 0
??$Safe_Release@PEAVCRenderer@Engine@@@Engine@@YAKAEAPEAVCRenderer@0@@Z ENDP ; Engine::Safe_Release<Engine::CRenderer * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\reference\headers\engine_template.h
;	COMDAT ??$Safe_Release@PEAVCSkillBlueEffect@Client@@@Engine@@YAKAEAPEAVCSkillBlueEffect@Client@@@Z
_TEXT	SEGMENT
dwRefCnt$ = 4
classType$ = 256
??$Safe_Release@PEAVCSkillBlueEffect@Client@@@Engine@@YAKAEAPEAVCSkillBlueEffect@Client@@@Z PROC ; Engine::Safe_Release<Client::CSkillBlueEffect * __ptr64>, COMDAT

; 18   : 	{

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 19   : 		unsigned long dwRefCnt = 0;

  0002a	c7 45 04 00 00
	00 00		 mov	 DWORD PTR dwRefCnt$[rbp], 0

; 20   : 
; 21   : 		if (nullptr != classType)

  00031	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR classType$[rbp]
  00038	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0003c	74 27		 je	 SHORT $LN2@Safe_Relea

; 22   : 		{
; 23   : 			dwRefCnt = classType->Release();

  0003e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR classType$[rbp]
  00045	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Release@CBase@Engine@@QEAAKXZ
  0004e	89 45 04	 mov	 DWORD PTR dwRefCnt$[rbp], eax

; 24   : 
; 25   : 			if (0 == dwRefCnt)

  00051	83 7d 04 00	 cmp	 DWORD PTR dwRefCnt$[rbp], 0
  00055	75 0e		 jne	 SHORT $LN3@Safe_Relea

; 26   : 			{
; 27   : 				classType = nullptr;

  00057	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR classType$[rbp]
  0005e	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN3@Safe_Relea:
$LN2@Safe_Relea:

; 28   : 			}
; 29   : 		}
; 30   : 
; 31   : 		return dwRefCnt;

  00065	8b 45 04	 mov	 eax, DWORD PTR dwRefCnt$[rbp]

; 32   : 	}

  00068	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006f	5f		 pop	 rdi
  00070	5d		 pop	 rbp
  00071	c3		 ret	 0
??$Safe_Release@PEAVCSkillBlueEffect@Client@@@Engine@@YAKAEAPEAVCSkillBlueEffect@Client@@@Z ENDP ; Engine::Safe_Release<Client::CSkillBlueEffect * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\public\thorn.h
;	COMDAT ?IsScaleFinish@CThorn@Client@@QEAA_NXZ
_TEXT	SEGMENT
this$ = 224
?IsScaleFinish@CThorn@Client@@QEAA_NXZ PROC		; Client::CThorn::IsScaleFinish, COMDAT

; 80   : 	_bool IsScaleFinish() { return m_bScaleFinish; };

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	0f b6 80 e2 00
	00 00		 movzx	 eax, BYTE PTR [rax+226]
  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
?IsScaleFinish@CThorn@Client@@QEAA_NXZ ENDP		; Client::CThorn::IsScaleFinish
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\public\thorn.h
;	COMDAT ?StartDessolve@CThorn@Client@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?StartDessolve@CThorn@Client@@QEAAXXZ PROC		; Client::CThorn::StartDessolve, COMDAT

; 71   : 	void StartDessolve() { m_bDessolve = true; };

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	c6 80 a8 01 00
	00 01		 mov	 BYTE PTR [rax+424], 1
  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
?StartDessolve@CThorn@Client@@QEAAXXZ ENDP		; Client::CThorn::StartDessolve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\public\thorn.h
;	COMDAT ?SetType@CThorn@Client@@QEAAXW4TYPE@12@@Z
_TEXT	SEGMENT
this$ = 224
eType$ = 232
?SetType@CThorn@Client@@QEAAXW4TYPE@12@@Z PROC		; Client::CThorn::SetType, COMDAT

; 61   : 	void SetType(TYPE eType) { m_eThornType = eType; }

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  0002c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR eType$[rbp]
  00039	89 88 a0 00 00
	00		 mov	 DWORD PTR [rax+160], ecx
  0003f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
?SetType@CThorn@Client@@QEAAXW4TYPE@12@@Z ENDP		; Client::CThorn::SetType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\public\thorn.h
;	COMDAT ?SetTimeDelta@CThorn@Client@@QEAAXN@Z
_TEXT	SEGMENT
this$ = 224
TimeDelta$ = 232
?SetTimeDelta@CThorn@Client@@QEAAXN@Z PROC		; Client::CThorn::SetTimeDelta, COMDAT

; 55   : 	void SetTimeDelta(_double TimeDelta) {

$LN3:
  00000	f2 0f 11 4c 24
	10		 movsd	 QWORD PTR [rsp+16], xmm1
  00006	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000b	55		 push	 rbp
  0000c	57		 push	 rdi
  0000d	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00014	48 8b ec	 mov	 rbp, rsp
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 56   : 		m_FixedTimeDelta = TimeDelta;

  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	f2 0f 10 85 e8
	00 00 00	 movsd	 xmm0, QWORD PTR TimeDelta$[rbp]
  0003d	f2 0f 11 80 50
	01 00 00	 movsd	 QWORD PTR [rax+336], xmm0

; 57   : 	}

  00045	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?SetTimeDelta@CThorn@Client@@QEAAXN@Z ENDP		; Client::CThorn::SetTimeDelta
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\public\applicationmanager.h
;	COMDAT ?IsLevelFinish@CApplicationManager@Client@@QEAA_NW4LEVEL@12@@Z
_TEXT	SEGMENT
this$ = 224
eLevel$ = 232
?IsLevelFinish@CApplicationManager@Client@@QEAA_NW4LEVEL@12@@Z PROC ; Client::CApplicationManager::IsLevelFinish, COMDAT

; 34   : 	_bool IsLevelFinish(LEVEL eLevel) { return m_bLevelEnd[(_uint)eLevel]; }

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  0002c	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR eLevel$[rbp]
  00032	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00039	0f b6 44 01 49	 movzx	 eax, BYTE PTR [rcx+rax+73]
  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?IsLevelFinish@CApplicationManager@Client@@QEAA_NW4LEVEL@12@@Z ENDP ; Client::CApplicationManager::IsLevelFinish
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCSkillBlueEffect@Client@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GCSkillBlueEffect@Client@@UEAAPEAXI@Z PROC		; Client::CSkillBlueEffect::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1CSkillBlueEffect@Client@@UEAA@XZ ; Client::CSkillBlueEffect::~CSkillBlueEffect
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba a0 01 00 00	 mov	 edx, 416		; 000001a0H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_GCSkillBlueEffect@Client@@UEAAPEAXI@Z ENDP		; Client::CSkillBlueEffect::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
;	COMDAT ?Free@CSkillBlueEffect@Client@@UEAAXXZ
_TEXT	SEGMENT
this$ = 224
?Free@CSkillBlueEffect@Client@@UEAAXXZ PROC		; Client::CSkillBlueEffect::Free, COMDAT

; 274  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 275  : 	__super::Free();

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Free@CGameObject@Engine@@UEAAXXZ

; 276  : 
; 277  : 	Safe_Release(m_pRenderer);

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	48 83 c0 78	 add	 rax, 120		; 00000078H
  00042	48 8b c8	 mov	 rcx, rax
  00045	e8 00 00 00 00	 call	 ??$Safe_Release@PEAVCRenderer@Engine@@@Engine@@YAKAEAPEAVCRenderer@0@@Z ; Engine::Safe_Release<Engine::CRenderer * __ptr64>

; 278  : 	Safe_Release(m_pShader);

  0004a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00051	48 05 90 00 00
	00		 add	 rax, 144		; 00000090H
  00057	48 8b c8	 mov	 rcx, rax
  0005a	e8 00 00 00 00	 call	 ??$Safe_Release@PEAVCShader@Engine@@@Engine@@YAKAEAPEAVCShader@0@@Z ; Engine::Safe_Release<Engine::CShader * __ptr64>

; 279  : 	Safe_Release(m_pDiffuseTexture);

  0005f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00066	48 05 98 00 00
	00		 add	 rax, 152		; 00000098H
  0006c	48 8b c8	 mov	 rcx, rax
  0006f	e8 00 00 00 00	 call	 ??$Safe_Release@PEAVCTexture@Engine@@@Engine@@YAKAEAPEAVCTexture@0@@Z ; Engine::Safe_Release<Engine::CTexture * __ptr64>

; 280  : 	Safe_Release(m_pTransform);

  00074	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007b	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00081	48 8b c8	 mov	 rcx, rax
  00084	e8 00 00 00 00	 call	 ??$Safe_Release@PEAVCTransform@Engine@@@Engine@@YAKAEAPEAVCTransform@0@@Z ; Engine::Safe_Release<Engine::CTransform * __ptr64>

; 281  : 	Safe_Release(m_pVIBuffer);

  00089	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00090	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00096	48 8b c8	 mov	 rcx, rax
  00099	e8 00 00 00 00	 call	 ??$Safe_Release@PEAVCVIBuffer_Rect@Engine@@@Engine@@YAKAEAPEAVCVIBuffer_Rect@0@@Z ; Engine::Safe_Release<Engine::CVIBuffer_Rect * __ptr64>

; 282  : }

  0009e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000a5	5f		 pop	 rdi
  000a6	5d		 pop	 rbp
  000a7	c3		 ret	 0
?Free@CSkillBlueEffect@Client@@UEAAXXZ ENDP		; Client::CSkillBlueEffect::Free
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
;	COMDAT ?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z
_TEXT	SEGMENT
pInstance$ = 8
$T4 = 232
$T5 = 264
$T6 = 296
tv83 = 312
__$ArrayPad$ = 320
this$ = 368
pArg$ = 376
?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z PROC ; Client::CSkillBlueEffect::Clone, COMDAT

; 262  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 5e 00 00 00	 mov	 ecx, 94			; 0000005eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]
  0002f	48 c7 85 28 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T6[rbp], -2
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 40 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 263  : 	CSkillBlueEffect* pInstance = new CSkillBlueEffect(*this);

  0004b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z@4JA
  00051	ff c0		 inc	 eax
  00053	44 8b c8	 mov	 r9d, eax
  00056	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0EN@KBOPONAD@c?3?2users?2arcco?2documents?2github?2@
  0005d	ba 01 00 00 00	 mov	 edx, 1
  00062	b9 a0 01 00 00	 mov	 ecx, 416		; 000001a0H
  00067	e8 00 00 00 00	 call	 ??2@YAPEAX_KHPEBDH@Z	; operator new
  0006c	48 89 85 08 01
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  00073	48 83 bd 08 01
	00 00 00	 cmp	 QWORD PTR $T5[rbp], 0
  0007b	74 1c		 je	 SHORT $LN4@Clone
  0007d	48 8b 95 70 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00084	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR $T5[rbp]
  0008b	e8 00 00 00 00	 call	 ??0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z ; Client::CSkillBlueEffect::CSkillBlueEffect
  00090	48 89 85 38 01
	00 00		 mov	 QWORD PTR tv83[rbp], rax
  00097	eb 0b		 jmp	 SHORT $LN5@Clone
$LN4@Clone:
  00099	48 c7 85 38 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv83[rbp], 0
$LN5@Clone:
  000a4	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR tv83[rbp]
  000ab	48 89 85 e8 00
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  000b2	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR $T4[rbp]
  000b9	48 89 45 08	 mov	 QWORD PTR pInstance$[rbp], rax

; 264  : 	if (FAILED(pInstance->Initialize(pArg)))

  000bd	48 8b 95 78 01
	00 00		 mov	 rdx, QWORD PTR pArg$[rbp]
  000c4	48 8b 4d 08	 mov	 rcx, QWORD PTR pInstance$[rbp]
  000c8	e8 00 00 00 00	 call	 ?Initialize@CSkillBlueEffect@Client@@UEAAJPEAX@Z ; Client::CSkillBlueEffect::Initialize
  000cd	85 c0		 test	 eax, eax
  000cf	7d 22		 jge	 SHORT $LN2@Clone

; 265  : 	{
; 266  : 		MSG_BOX("Failed to Clone : CSkillBlueEffect");

  000d1	45 33 c9	 xor	 r9d, r9d
  000d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1BA@HHOMBECE@?$AAM?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AA?$AA@
  000db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EG@NHFJMAGK@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAl?$AAo?$AAn?$AAe?$AA?5?$AA?3?$AA?5?$AAC?$AAS?$AAk?$AAi?$AAl?$AAl?$AAB?$AAl?$AAu?$AAe?$AAE?$AAf?$AAf?$AAe@
  000e2	33 c9		 xor	 ecx, ecx
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MessageBoxW

; 267  : 		Safe_Release(pInstance);

  000ea	48 8d 4d 08	 lea	 rcx, QWORD PTR pInstance$[rbp]
  000ee	e8 00 00 00 00	 call	 ??$Safe_Release@PEAVCSkillBlueEffect@Client@@@Engine@@YAKAEAPEAVCSkillBlueEffect@Client@@@Z ; Engine::Safe_Release<Client::CSkillBlueEffect * __ptr64>
$LN2@Clone:

; 268  : 	}
; 269  : 
; 270  : 	return pInstance;

  000f3	48 8b 45 08	 mov	 rax, QWORD PTR pInstance$[rbp]

; 271  : }

  000f7	48 8b f8	 mov	 rdi, rax
  000fa	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z$rtcFrameData
  00105	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0010a	48 8b c7	 mov	 rax, rdi
  0010d	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00114	48 33 cd	 xor	 rcx, rbp
  00117	e8 00 00 00 00	 call	 __security_check_cookie
  0011c	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  00123	5f		 pop	 rdi
  00124	5d		 pop	 rbp
  00125	c3		 ret	 0
?Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z ENDP ; Client::CSkillBlueEffect::Clone
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
pInstance$ = 8
$T4 = 232
$T5 = 264
$T6 = 296
tv83 = 312
__$ArrayPad$ = 320
this$ = 368
pArg$ = 376
?dtor$0@?0??Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z@4HA PROC ; `Client::CSkillBlueEffect::Clone'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR ?__LINE__Var@?0??Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z@4JA
  0001b	41 ff c1	 inc	 r9d
  0001e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0EN@KBOPONAD@c?3?2users?2arcco?2documents?2github?2@
  00025	ba 01 00 00 00	 mov	 edx, 1
  0002a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR $T5[rbp]
  00031	e8 00 00 00 00	 call	 ??3@YAXPEAXHPEBDH@Z	; operator delete
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	5f		 pop	 rdi
  0003b	5d		 pop	 rbp
  0003c	c3		 ret	 0
?dtor$0@?0??Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z@4HA ENDP ; `Client::CSkillBlueEffect::Clone'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
pInstance$ = 8
$T4 = 232
$T5 = 264
$T6 = 296
tv83 = 312
__$ArrayPad$ = 320
this$ = 368
pArg$ = 376
?dtor$0@?0??Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z@4HA PROC ; `Client::CSkillBlueEffect::Clone'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR ?__LINE__Var@?0??Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z@4JA
  0001b	41 ff c1	 inc	 r9d
  0001e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0EN@KBOPONAD@c?3?2users?2arcco?2documents?2github?2@
  00025	ba 01 00 00 00	 mov	 edx, 1
  0002a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR $T5[rbp]
  00031	e8 00 00 00 00	 call	 ??3@YAXPEAXHPEBDH@Z	; operator delete
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	5f		 pop	 rdi
  0003b	5d		 pop	 rbp
  0003c	c3		 ret	 0
?dtor$0@?0??Clone@CSkillBlueEffect@Client@@UEAAPEAVCGameObject@Engine@@PEAX@Z@4HA ENDP ; `Client::CSkillBlueEffect::Clone'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
;	COMDAT ?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
_TEXT	SEGMENT
pInstance$ = 8
$T4 = 232
$T5 = 264
$T6 = 296
tv84 = 312
__$ArrayPad$ = 320
pDevice$ = 368
pContext$ = 376
?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z PROC ; Client::CSkillBlueEffect::Create, COMDAT

; 250  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 5e 00 00 00	 mov	 ecx, 94			; 0000005eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]
  0002f	48 c7 85 28 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T6[rbp], -2
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 40 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 251  : 	CSkillBlueEffect* pInstance = new CSkillBlueEffect(pDevice, pContext);

  0004b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??Create@CSkillBlueEffect@Client@@SAPEAV23@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4JA
  00051	ff c0		 inc	 eax
  00053	44 8b c8	 mov	 r9d, eax
  00056	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0EN@KBOPONAD@c?3?2users?2arcco?2documents?2github?2@
  0005d	ba 01 00 00 00	 mov	 edx, 1
  00062	b9 a0 01 00 00	 mov	 ecx, 416		; 000001a0H
  00067	e8 00 00 00 00	 call	 ??2@YAPEAX_KHPEBDH@Z	; operator new
  0006c	48 89 85 08 01
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  00073	48 83 bd 08 01
	00 00 00	 cmp	 QWORD PTR $T5[rbp], 0
  0007b	74 23		 je	 SHORT $LN4@Create
  0007d	4c 8b 85 78 01
	00 00		 mov	 r8, QWORD PTR pContext$[rbp]
  00084	48 8b 95 70 01
	00 00		 mov	 rdx, QWORD PTR pDevice$[rbp]
  0008b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR $T5[rbp]
  00092	e8 00 00 00 00	 call	 ??0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z ; Client::CSkillBlueEffect::CSkillBlueEffect
  00097	48 89 85 38 01
	00 00		 mov	 QWORD PTR tv84[rbp], rax
  0009e	eb 0b		 jmp	 SHORT $LN5@Create
$LN4@Create:
  000a0	48 c7 85 38 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv84[rbp], 0
$LN5@Create:
  000ab	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR tv84[rbp]
  000b2	48 89 85 e8 00
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  000b9	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR $T4[rbp]
  000c0	48 89 45 08	 mov	 QWORD PTR pInstance$[rbp], rax

; 252  : 	if (FAILED(pInstance->Initialize_Prototype()))

  000c4	48 8b 4d 08	 mov	 rcx, QWORD PTR pInstance$[rbp]
  000c8	e8 00 00 00 00	 call	 ?Initialize_Prototype@CSkillBlueEffect@Client@@UEAAJXZ ; Client::CSkillBlueEffect::Initialize_Prototype
  000cd	85 c0		 test	 eax, eax
  000cf	7d 22		 jge	 SHORT $LN2@Create

; 253  : 	{
; 254  : 		MSG_BOX("Failed to Create : CSkillBlueEffect");

  000d1	45 33 c9	 xor	 r9d, r9d
  000d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1BA@HHOMBECE@?$AAM?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AA?$AA@
  000db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EI@LPBMELNI@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AA?3?$AA?5?$AAC?$AAS?$AAk?$AAi?$AAl?$AAl?$AAB?$AAl?$AAu?$AAe?$AAE?$AAf?$AAf@
  000e2	33 c9		 xor	 ecx, ecx
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MessageBoxW

; 255  : 		Safe_Release(pInstance);

  000ea	48 8d 4d 08	 lea	 rcx, QWORD PTR pInstance$[rbp]
  000ee	e8 00 00 00 00	 call	 ??$Safe_Release@PEAVCSkillBlueEffect@Client@@@Engine@@YAKAEAPEAVCSkillBlueEffect@Client@@@Z ; Engine::Safe_Release<Client::CSkillBlueEffect * __ptr64>
$LN2@Create:

; 256  : 	}
; 257  : 
; 258  : 	return pInstance;

  000f3	48 8b 45 08	 mov	 rax, QWORD PTR pInstance$[rbp]

; 259  : }

  000f7	48 8b f8	 mov	 rdi, rax
  000fa	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z$rtcFrameData
  00105	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0010a	48 8b c7	 mov	 rax, rdi
  0010d	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00114	48 33 cd	 xor	 rcx, rbp
  00117	e8 00 00 00 00	 call	 __security_check_cookie
  0011c	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  00123	5f		 pop	 rdi
  00124	5d		 pop	 rbp
  00125	c3		 ret	 0
?Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z ENDP ; Client::CSkillBlueEffect::Create
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
pInstance$ = 8
$T4 = 232
$T5 = 264
$T6 = 296
tv84 = 312
__$ArrayPad$ = 320
pDevice$ = 368
pContext$ = 376
?dtor$0@?0??Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA PROC ; `Client::CSkillBlueEffect::Create'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR ?__LINE__Var@?0??Create@CSkillBlueEffect@Client@@SAPEAV23@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4JA
  0001b	41 ff c1	 inc	 r9d
  0001e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0EN@KBOPONAD@c?3?2users?2arcco?2documents?2github?2@
  00025	ba 01 00 00 00	 mov	 edx, 1
  0002a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR $T5[rbp]
  00031	e8 00 00 00 00	 call	 ??3@YAXPEAXHPEBDH@Z	; operator delete
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	5f		 pop	 rdi
  0003b	5d		 pop	 rbp
  0003c	c3		 ret	 0
?dtor$0@?0??Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA ENDP ; `Client::CSkillBlueEffect::Create'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
pInstance$ = 8
$T4 = 232
$T5 = 264
$T6 = 296
tv84 = 312
__$ArrayPad$ = 320
pDevice$ = 368
pContext$ = 376
?dtor$0@?0??Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA PROC ; `Client::CSkillBlueEffect::Create'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR ?__LINE__Var@?0??Create@CSkillBlueEffect@Client@@SAPEAV23@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4JA
  0001b	41 ff c1	 inc	 r9d
  0001e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0EN@KBOPONAD@c?3?2users?2arcco?2documents?2github?2@
  00025	ba 01 00 00 00	 mov	 edx, 1
  0002a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR $T5[rbp]
  00031	e8 00 00 00 00	 call	 ??3@YAXPEAXHPEBDH@Z	; operator delete
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	5f		 pop	 rdi
  0003b	5d		 pop	 rbp
  0003c	c3		 ret	 0
?dtor$0@?0??Create@CSkillBlueEffect@Client@@SAPEAV12@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA ENDP ; `Client::CSkillBlueEffect::Create'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
;	COMDAT ?Setup_ShaderResources@CSkillBlueEffect@Client@@AEAAJXZ
_TEXT	SEGMENT
pInstance$ = 8
$T1 = 228
$T2 = 324
this$ = 448
?Setup_ShaderResources@CSkillBlueEffect@Client@@AEAAJXZ PROC ; Client::CSkillBlueEffect::Setup_ShaderResources, COMDAT

; 231  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+488]

; 232  : 	if (nullptr == m_pShader)

  0002a	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  00039	75 0a		 jne	 SHORT $LN2@Setup_Shad

; 233  : 		return E_FAIL;

  0003b	b8 05 40 00 80	 mov	 eax, -2147467259	; ffffffff80004005H
  00040	e9 bd 00 00 00	 jmp	 $LN1@Setup_Shad
$LN2@Setup_Shad:

; 234  : 
; 235  : 	CGameInstance* pInstance = CGameInstance::GetInstance();

  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?GetInstance@CGameInstance@Engine@@SAPEAV12@XZ
  0004b	48 89 45 08	 mov	 QWORD PTR pInstance$[rbp], rax

; 236  : 
; 237  : 	if (FAILED(m_pTransform->Setup_ShaderResource(m_pShader, "g_WorldMatrix")))

  0004f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@PFNLPMLD@g_WorldMatrix?$AA@
  00056	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005d	48 8b 90 90 00
	00 00		 mov	 rdx, QWORD PTR [rax+144]
  00064	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006b	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00072	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Setup_ShaderResource@CTransform@Engine@@QEAAJPEAVCShader@2@PEBD@Z
  00078	85 c0		 test	 eax, eax
  0007a	7d 07		 jge	 SHORT $LN3@Setup_Shad

; 238  : 		return E_FAIL;

  0007c	b8 05 40 00 80	 mov	 eax, -2147467259	; ffffffff80004005H
  00081	eb 7f		 jmp	 SHORT $LN1@Setup_Shad
$LN3@Setup_Shad:

; 239  : 
; 240  : 	if (FAILED(m_pShader->SetMatrix("g_ViewMatrix", &pInstance->Get_Transform_float4x4(CPipeLine::TS_VIEW))))

  00083	45 33 c0	 xor	 r8d, r8d
  00086	48 8d 95 e4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0008d	48 8b 4d 08	 mov	 rcx, QWORD PTR pInstance$[rbp]
  00091	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Get_Transform_float4x4@CGameInstance@Engine@@QEAA?AUXMFLOAT4X4@DirectX@@W4TRANSFORM_STATE@CPipeLine@2@@Z
  00097	4c 8b c0	 mov	 r8, rax
  0009a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@ELIMCBLG@g_ViewMatrix?$AA@
  000a1	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a8	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?SetMatrix@CShader@Engine@@QEAAJPEBDPEBUXMFLOAT4X4@DirectX@@@Z
  000b5	85 c0		 test	 eax, eax
  000b7	7d 07		 jge	 SHORT $LN4@Setup_Shad

; 241  : 		return E_FAIL;

  000b9	b8 05 40 00 80	 mov	 eax, -2147467259	; ffffffff80004005H
  000be	eb 42		 jmp	 SHORT $LN1@Setup_Shad
$LN4@Setup_Shad:

; 242  : 
; 243  : 	if (FAILED(m_pShader->SetMatrix("g_ProjMatrix", &pInstance->Get_Transform_float4x4(CPipeLine::TS_PROJ))))

  000c0	41 b8 01 00 00
	00		 mov	 r8d, 1
  000c6	48 8d 95 44 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  000cd	48 8b 4d 08	 mov	 rcx, QWORD PTR pInstance$[rbp]
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Get_Transform_float4x4@CGameInstance@Engine@@QEAA?AUXMFLOAT4X4@DirectX@@W4TRANSFORM_STATE@CPipeLine@2@@Z
  000d7	4c 8b c0	 mov	 r8, rax
  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@OOHDPIO@g_ProjMatrix?$AA@
  000e1	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e8	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  000ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?SetMatrix@CShader@Engine@@QEAAJPEBDPEBUXMFLOAT4X4@DirectX@@@Z
  000f5	85 c0		 test	 eax, eax
  000f7	7d 07		 jge	 SHORT $LN5@Setup_Shad

; 244  : 		return E_FAIL;

  000f9	b8 05 40 00 80	 mov	 eax, -2147467259	; ffffffff80004005H
  000fe	eb 02		 jmp	 SHORT $LN1@Setup_Shad
$LN5@Setup_Shad:

; 245  : 	
; 246  : 	return S_OK;

  00100	33 c0		 xor	 eax, eax
$LN1@Setup_Shad:

; 247  : }

  00102	48 8d a5 a8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+424]
  00109	5f		 pop	 rdi
  0010a	5d		 pop	 rbp
  0010b	c3		 ret	 0
?Setup_ShaderResources@CSkillBlueEffect@Client@@AEAAJXZ ENDP ; Client::CSkillBlueEffect::Setup_ShaderResources
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
;	COMDAT ?Add_Components@CSkillBlueEffect@Client@@AEAAJXZ
_TEXT	SEGMENT
pGI$ = 8
i$4 = 36
szTag$5 = 80
$T6 = 1016
$T7 = 1080
tv231 = 1096
tv199 = 1104
__$ArrayPad$ = 1112
this$ = 1152
?Add_Components@CSkillBlueEffect@Client@@AEAAJXZ PROC	; Client::CSkillBlueEffect::Add_Components, COMDAT

; 196  : {

$LN14:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 98 04
	00 00		 sub	 rsp, 1176		; 00000498H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 26 01 00 00	 mov	 ecx, 294		; 00000126H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1208]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 58 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 197  : 	if (FAILED(CGameObject::Add_Component(LEVEL_STATIC, TEXT("proto_com_renderer"), TEXT("com_renderer"), (CComponent**)&m_pRenderer)))

  0003b	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 83 c0 78	 add	 rax, 120		; 00000078H
  00046	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0004f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00054	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_1BK@GIOMOCNE@?$AAc?$AAo?$AAm?$AA_?$AAr?$AAe?$AAn?$AAd?$AAe?$AAr?$AAe?$AAr?$AA?$AA@
  0005b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1CG@COFFFCLL@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAr?$AAe?$AAn?$AAd?$AAe?$AAr?$AAe?$AAr?$AA?$AA@
  00062	33 d2		 xor	 edx, edx
  00064	48 8b 8d 80 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Add_Component@CGameObject@Engine@@IEAAJIPEB_W0PEAPEAVCComponent@2@PEAX@Z
  00071	85 c0		 test	 eax, eax
  00073	7d 0a		 jge	 SHORT $LN5@Add_Compon

; 198  : 		return E_FAIL;

  00075	b8 05 40 00 80	 mov	 eax, -2147467259	; ffffffff80004005H
  0007a	e9 8a 02 00 00	 jmp	 $LN1@Add_Compon
$LN5@Add_Compon:

; 199  : 
; 200  : 	if (FAILED(CGameObject::Add_Component(LEVEL_STATIC, TEXT("proto_com_transform"), TEXT("com_transform"), (CComponent**)&m_pTransform)))

  0007f	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00086	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0008c	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00095	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0009a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_1BM@CJMPMHDD@?$AAc?$AAo?$AAm?$AA_?$AAt?$AAr?$AAa?$AAn?$AAs?$AAf?$AAo?$AAr?$AAm?$AA?$AA@
  000a1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1CI@MLEFGO@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAt?$AAr?$AAa?$AAn?$AAs?$AAf?$AAo?$AAr?$AAm?$AA?$AA@
  000a8	33 d2		 xor	 edx, edx
  000aa	48 8b 8d 80 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Add_Component@CGameObject@Engine@@IEAAJIPEB_W0PEAPEAVCComponent@2@PEAX@Z
  000b7	85 c0		 test	 eax, eax
  000b9	7d 0a		 jge	 SHORT $LN6@Add_Compon

; 201  : 		return E_FAIL;

  000bb	b8 05 40 00 80	 mov	 eax, -2147467259	; ffffffff80004005H
  000c0	e9 44 02 00 00	 jmp	 $LN1@Add_Compon
$LN6@Add_Compon:

; 202  : 
; 203  : 	if (FAILED(CGameObject::Add_Component(LEVEL_STATIC, TEXT("proto_com_shader_vtxtex"), TEXT("com_shader"), (CComponent**)&m_pShader)))

  000c5	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000cc	48 05 90 00 00
	00		 add	 rax, 144		; 00000090H
  000d2	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  000db	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_1BG@GGOMMBBL@?$AAc?$AAo?$AAm?$AA_?$AAs?$AAh?$AAa?$AAd?$AAe?$AAr?$AA?$AA@
  000e7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1DA@NCILMLLP@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAs?$AAh?$AAa?$AAd?$AAe?$AAr?$AA_?$AAv?$AAt?$AAx?$AAt?$AAe?$AAx?$AA?$AA@
  000ee	33 d2		 xor	 edx, edx
  000f0	48 8b 8d 80 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Add_Component@CGameObject@Engine@@IEAAJIPEB_W0PEAPEAVCComponent@2@PEAX@Z
  000fd	85 c0		 test	 eax, eax
  000ff	7d 0a		 jge	 SHORT $LN7@Add_Compon

; 204  : 		return E_FAIL;

  00101	b8 05 40 00 80	 mov	 eax, -2147467259	; ffffffff80004005H
  00106	e9 fe 01 00 00	 jmp	 $LN1@Add_Compon
$LN7@Add_Compon:

; 205  : 
; 206  : 	if (FAILED(CGameObject::Add_Component(LEVEL_STATIC, TEXT("proto_com_texture_skillfloor"), TEXT("com_diffuse"), (CComponent**)&m_pDiffuseTexture)))

  0010b	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00112	48 05 98 00 00
	00		 add	 rax, 152		; 00000098H
  00118	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00121	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00126	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_1BI@IPGKEMA@?$AAc?$AAo?$AAm?$AA_?$AAd?$AAi?$AAf?$AAf?$AAu?$AAs?$AAe?$AA?$AA@
  0012d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1DK@IPHCAFNL@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA_?$AAs?$AAk?$AAi?$AAl?$AAl?$AAf?$AAl?$AAo?$AAo?$AAr?$AA?$AA@
  00134	33 d2		 xor	 edx, edx
  00136	48 8b 8d 80 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0013d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Add_Component@CGameObject@Engine@@IEAAJIPEB_W0PEAPEAVCComponent@2@PEAX@Z
  00143	85 c0		 test	 eax, eax
  00145	7d 0a		 jge	 SHORT $LN8@Add_Compon

; 207  : 		return E_FAIL;

  00147	b8 05 40 00 80	 mov	 eax, -2147467259	; ffffffff80004005H
  0014c	e9 b8 01 00 00	 jmp	 $LN1@Add_Compon
$LN8@Add_Compon:

; 208  : 	if (FAILED(CGameObject::Add_Component(LEVEL_STATIC, TEXT("proto_com_texture_skillfloormask"), TEXT("com_mask"), (CComponent**)&m_pMaskTexture)))

  00151	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00158	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0015e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00167	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0016c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_1BC@OADNFLK@?$AAc?$AAo?$AAm?$AA_?$AAm?$AAa?$AAs?$AAk?$AA?$AA@
  00173	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EC@CFNKOOOM@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA_?$AAs?$AAk?$AAi?$AAl?$AAl?$AAf?$AAl?$AAo?$AAo?$AAr?$AAm?$AAa?$AAs?$AAk@
  0017a	33 d2		 xor	 edx, edx
  0017c	48 8b 8d 80 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00183	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Add_Component@CGameObject@Engine@@IEAAJIPEB_W0PEAPEAVCComponent@2@PEAX@Z
  00189	85 c0		 test	 eax, eax
  0018b	7d 0a		 jge	 SHORT $LN9@Add_Compon

; 209  : 		return E_FAIL;

  0018d	b8 05 40 00 80	 mov	 eax, -2147467259	; ffffffff80004005H
  00192	e9 72 01 00 00	 jmp	 $LN1@Add_Compon
$LN9@Add_Compon:

; 210  : 
; 211  : 	if (FAILED(CGameObject::Add_Component(LEVEL_STATIC, TEXT("proto_com_vibuffer_rect"), TEXT("com_vibuffer"), (CComponent**)&m_pVIBuffer)))

  00197	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0019e	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  001a4	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  001ad	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_1BK@GKOIFCHG@?$AAc?$AAo?$AAm?$AA_?$AAv?$AAi?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
  001b9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1DA@BAIPNHMH@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAc?$AAo?$AAm?$AA_?$AAv?$AAi?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA_?$AAr?$AAe?$AAc?$AAt?$AA?$AA@
  001c0	33 d2		 xor	 edx, edx
  001c2	48 8b 8d 80 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Add_Component@CGameObject@Engine@@IEAAJIPEB_W0PEAPEAVCComponent@2@PEAX@Z
  001cf	85 c0		 test	 eax, eax
  001d1	7d 0a		 jge	 SHORT $LN10@Add_Compon

; 212  : 		return E_FAIL;

  001d3	b8 05 40 00 80	 mov	 eax, -2147467259	; ffffffff80004005H
  001d8	e9 2c 01 00 00	 jmp	 $LN1@Add_Compon
$LN10@Add_Compon:

; 213  : 
; 214  : 	CGameInstance* pGI = CGameInstance::GetInstance();

  001dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?GetInstance@CGameInstance@Engine@@SAPEAV12@XZ
  001e3	48 89 45 08	 mov	 QWORD PTR pGI$[rbp], rax

; 215  : 	for (int i = 0; i < THORN_COUNT; ++i)

  001e7	c7 45 24 00 00
	00 00		 mov	 DWORD PTR i$4[rbp], 0
  001ee	eb 08		 jmp	 SHORT $LN4@Add_Compon
$LN2@Add_Compon:
  001f0	8b 45 24	 mov	 eax, DWORD PTR i$4[rbp]
  001f3	ff c0		 inc	 eax
  001f5	89 45 24	 mov	 DWORD PTR i$4[rbp], eax
$LN4@Add_Compon:
  001f8	83 7d 24 0c	 cmp	 DWORD PTR i$4[rbp], 12
  001fc	0f 8d 05 01 00
	00		 jge	 $LN3@Add_Compon

; 216  : 	{
; 217  : 		_tchar szTag[MAX_PATH] = L"";

  00202	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_11LOCGONAA@?$AA?$AA@
  00209	66 89 45 50	 mov	 WORD PTR szTag$5[rbp], ax
  0020d	48 8d 45 52	 lea	 rax, QWORD PTR szTag$5[rbp+2]
  00211	48 8b f8	 mov	 rdi, rax
  00214	33 c0		 xor	 eax, eax
  00216	b9 06 02 00 00	 mov	 ecx, 518		; 00000206H
  0021b	f3 aa		 rep stosb

; 218  : 		wsprintfW(szTag, L"player_thorn%d", i);

  0021d	44 8b 45 24	 mov	 r8d, DWORD PTR i$4[rbp]
  00221	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BO@CKAFLFHC@?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AA_?$AAt?$AAh?$AAo?$AAr?$AAn?$AA?$CF?$AAd?$AA?$AA@
  00228	48 8d 4d 50	 lea	 rcx, QWORD PTR szTag$5[rbp]
  0022c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wsprintfW

; 219  : 		if (nullptr == (m_pThorn[i] = (CThorn*)pGI->Add_GameObject(LEVEL_GAMEPLAY, TEXT("proto_obj_thorn"), TEXT("layer_effect"), szTag)))

  00232	48 8d 85 f8 03
	00 00		 lea	 rax, QWORD PTR $T6[rbp]
  00239	48 89 85 38 04
	00 00		 mov	 QWORD PTR $T7[rbp], rax
  00240	48 8d 55 50	 lea	 rdx, QWORD PTR szTag$5[rbp]
  00244	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR $T7[rbp]
  0024b	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00250	48 89 85 48 04
	00 00		 mov	 QWORD PTR tv231[rbp], rax
  00257	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00260	48 8b 85 48 04
	00 00		 mov	 rax, QWORD PTR tv231[rbp]
  00267	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0026c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_1BK@BHJMDNLM@?$AAl?$AAa?$AAy?$AAe?$AAr?$AA_?$AAe?$AAf?$AAf?$AAe?$AAc?$AAt?$AA?$AA@
  00273	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1CA@CEJBEGPA@?$AAp?$AAr?$AAo?$AAt?$AAo?$AA_?$AAo?$AAb?$AAj?$AA_?$AAt?$AAh?$AAo?$AAr?$AAn?$AA?$AA@
  0027a	ba 03 00 00 00	 mov	 edx, 3
  0027f	48 8b 4d 08	 mov	 rcx, QWORD PTR pGI$[rbp]
  00283	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Add_GameObject@CGameInstance@Engine@@QEAAPEAVCGameObject@2@IPEB_W0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@Z
  00289	48 89 85 50 04
	00 00		 mov	 QWORD PTR tv199[rbp], rax
  00290	48 63 45 24	 movsxd	 rax, DWORD PTR i$4[rbp]
  00294	48 8b 8d 80 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0029b	48 8b 95 50 04
	00 00		 mov	 rdx, QWORD PTR tv199[rbp]
  002a2	48 89 94 c1 00
	01 00 00	 mov	 QWORD PTR [rcx+rax*8+256], rdx
  002aa	48 83 bd 50 04
	00 00 00	 cmp	 QWORD PTR tv199[rbp], 0
  002b2	75 07		 jne	 SHORT $LN11@Add_Compon

; 220  : 			return E_FAIL;

  002b4	b8 05 40 00 80	 mov	 eax, -2147467259	; ffffffff80004005H
  002b9	eb 4e		 jmp	 SHORT $LN1@Add_Compon
$LN11@Add_Compon:

; 221  : 		m_pThorn[i]->SetType(CThorn::TYPE::PLAYER_THORN);

  002bb	48 63 45 24	 movsxd	 rax, DWORD PTR i$4[rbp]
  002bf	ba 01 00 00 00	 mov	 edx, 1
  002c4	48 8b 8d 80 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002cb	48 8b 8c c1 00
	01 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+256]
  002d3	e8 00 00 00 00	 call	 ?SetType@CThorn@Client@@QEAAXW4TYPE@12@@Z ; Client::CThorn::SetType

; 222  : 
; 223  : 		m_bScaleDown[i] = false;

  002d8	48 63 45 24	 movsxd	 rax, DWORD PTR i$4[rbp]
  002dc	48 8b 8d 80 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e3	c6 84 01 60 01
	00 00 00	 mov	 BYTE PTR [rcx+rax+352], 0

; 224  : 		m_fScaleDownWait[i] = 0.f;

  002eb	48 63 45 24	 movsxd	 rax, DWORD PTR i$4[rbp]
  002ef	48 8b 8d 80 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f6	0f 57 c0	 xorps	 xmm0, xmm0
  002f9	f3 0f 11 84 81
	6c 01 00 00	 movss	 DWORD PTR [rcx+rax*4+364], xmm0

; 225  : 	}

  00302	e9 e9 fe ff ff	 jmp	 $LN2@Add_Compon
$LN3@Add_Compon:

; 226  : 
; 227  : 	return S_OK;

  00307	33 c0		 xor	 eax, eax
$LN1@Add_Compon:

; 228  : }

  00309	48 8b f8	 mov	 rdi, rax
  0030c	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00310	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?Add_Components@CSkillBlueEffect@Client@@AEAAJXZ$rtcFrameData
  00317	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0031c	48 8b c7	 mov	 rax, rdi
  0031f	48 8b 8d 58 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00326	48 33 cd	 xor	 rcx, rbp
  00329	e8 00 00 00 00	 call	 __security_check_cookie
  0032e	48 8d a5 68 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1128]
  00335	5f		 pop	 rdi
  00336	5d		 pop	 rbp
  00337	c3		 ret	 0
?Add_Components@CSkillBlueEffect@Client@@AEAAJXZ ENDP	; Client::CSkillBlueEffect::Add_Components
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
;	COMDAT ?SetupPosition@CSkillBlueEffect@Client@@QEAAXXZ
_TEXT	SEGMENT
pGameInstance$ = 8
PlayerMatrix$ = 48
vEffectPos$ = 144
vEffectPos2$ = 192
vEffectPos3$ = 240
RotationMatrix$ = 288
vLook$ = 384
vRight$ = 432
i$5 = 468
iRand$6 = 500
$T7 = 1888
$T8 = 1936
$T9 = 1984
$T10 = 2032
$T11 = 2080
$T12 = 2128
$T13 = 2176
$T14 = 2224
$T15 = 2272
$T16 = 2320
$T17 = 2368
$T18 = 2416
$T19 = 2464
$T20 = 2512
$T21 = 2560
$T22 = 2608
$T23 = 2704
$T24 = 2800
$T25 = 2896
$T26 = 2992
$T27 = 3088
$T28 = 3184
$T29 = 3280
$T30 = 3376
$T31 = 3472
$T32 = 3568
$T33 = 3616
$T34 = 3664
$T35 = 3712
$T36 = 3748
$T37 = 3792
$T38 = 3840
$T39 = 3888
$T40 = 3936
$T41 = 3984
$T42 = 4032
$T43 = 4080
$T44 = 4128
$T45 = 4176
$T46 = 4224
$T47 = 4272
$T48 = 4320
$T49 = 4368
$T50 = 4416
$T51 = 4464
$T52 = 4512
$T53 = 4560
$T54 = 4608
$T55 = 4656
tv440 = 4676
tv410 = 4676
tv345 = 4676
tv312 = 4676
tv285 = 4676
tv377 = 4680
__$ArrayPad$ = 4688
this$ = 4736
?SetupPosition@CSkillBlueEffect@Client@@QEAAXXZ PROC	; Client::CSkillBlueEffect::SetupPosition, COMDAT

; 109  : {

$LN30:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	b8 80 12 00 00	 mov	 eax, 4736		; 00001280H
  0000d	e8 00 00 00 00	 call	 __chkstk
  00012	48 2b e0	 sub	 rsp, rax
  00015	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 a0 04 00 00	 mov	 ecx, 1184		; 000004a0H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 a8
	12 00 00	 mov	 rcx, QWORD PTR [rsp+4776]
  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00038	48 33 c5	 xor	 rax, rbp
  0003b	48 89 85 50 12
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 110  : 	m_bRender = true;

  00042	48 8b 85 80 12
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	c6 80 b8 00 00
	00 01		 mov	 BYTE PTR [rax+184], 1

; 111  : 	m_fAlphaAcc = 4.f;

  00050	48 8b 85 80 12
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  0005f	f3 0f 11 80 9c
	01 00 00	 movss	 DWORD PTR [rax+412], xmm0

; 112  : 
; 113  : 	CGameInstance* pGameInstance = CGameInstance::GetInstance();

  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?GetInstance@CGameInstance@Engine@@SAPEAV12@XZ
  0006d	48 89 45 08	 mov	 QWORD PTR pGameInstance$[rbp], rax

; 114  : 
; 115  : 	_float4x4 PlayerMatrix = m_pPlayerTransform->Get_WorldMatrix();

  00071	48 8d 55 30	 lea	 rdx, QWORD PTR PlayerMatrix$[rbp]
  00075	48 8b 85 80 12
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007c	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Get_WorldMatrix@CTransform@Engine@@QEAA?AUXMFLOAT4X4@DirectX@@XZ

; 116  : 	_vector vEffectPos = m_pPlayerTransform->Get_State(CTransform::STATE_POSITION) + XMVector3Normalize(m_pPlayerTransform->Get_State(CTransform::STATE_LOOK)) * 4.f;

  00089	41 b8 02 00 00
	00		 mov	 r8d, 2
  0008f	48 8d 95 f0 07
	00 00		 lea	 rdx, QWORD PTR $T10[rbp]
  00096	48 8b 85 80 12
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009d	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Get_State@CTransform@Engine@@QEAA?AT__m128@@W4STATE@12@@Z
  000aa	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000ad	e8 00 00 00 00	 call	 ?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Normalize
  000b2	0f 29 85 c0 07
	00 00		 movaps	 XMMWORD PTR $T9[rbp], xmm0
  000b9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40800000
  000c1	0f 28 85 c0 07
	00 00		 movaps	 xmm0, XMMWORD PTR $T9[rbp]
  000c8	e8 00 00 00 00	 call	 ??DDirectX@@YQ?AT__m128@@T1@M@Z ; DirectX::operator*
  000cd	0f 29 85 90 07
	00 00		 movaps	 XMMWORD PTR $T8[rbp], xmm0
  000d4	41 b8 03 00 00
	00		 mov	 r8d, 3
  000da	48 8d 95 20 08
	00 00		 lea	 rdx, QWORD PTR $T11[rbp]
  000e1	48 8b 85 80 12
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e8	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  000ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Get_State@CTransform@Engine@@QEAA?AT__m128@@W4STATE@12@@Z
  000f5	0f 28 8d 90 07
	00 00		 movaps	 xmm1, XMMWORD PTR $T8[rbp]
  000fc	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000ff	e8 00 00 00 00	 call	 ??HDirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::operator+
  00104	0f 29 85 60 07
	00 00		 movaps	 XMMWORD PTR $T7[rbp], xmm0
  0010b	0f 28 85 60 07
	00 00		 movaps	 xmm0, XMMWORD PTR $T7[rbp]
  00112	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR vEffectPos$[rbp], xmm0

; 117  : 	_vector vEffectPos2 = m_pPlayerTransform->Get_State(CTransform::STATE_POSITION) + XMVector3Normalize(m_pPlayerTransform->Get_State(CTransform::STATE_LOOK)) * 3.f;

  00119	41 b8 02 00 00
	00		 mov	 r8d, 2
  0011f	48 8d 95 e0 08
	00 00		 lea	 rdx, QWORD PTR $T15[rbp]
  00126	48 8b 85 80 12
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0012d	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  00134	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Get_State@CTransform@Engine@@QEAA?AT__m128@@W4STATE@12@@Z
  0013a	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0013d	e8 00 00 00 00	 call	 ?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Normalize
  00142	0f 29 85 b0 08
	00 00		 movaps	 XMMWORD PTR $T14[rbp], xmm0
  00149	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40400000
  00151	0f 28 85 b0 08
	00 00		 movaps	 xmm0, XMMWORD PTR $T14[rbp]
  00158	e8 00 00 00 00	 call	 ??DDirectX@@YQ?AT__m128@@T1@M@Z ; DirectX::operator*
  0015d	0f 29 85 80 08
	00 00		 movaps	 XMMWORD PTR $T13[rbp], xmm0
  00164	41 b8 03 00 00
	00		 mov	 r8d, 3
  0016a	48 8d 95 10 09
	00 00		 lea	 rdx, QWORD PTR $T16[rbp]
  00171	48 8b 85 80 12
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00178	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  0017f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Get_State@CTransform@Engine@@QEAA?AT__m128@@W4STATE@12@@Z
  00185	0f 28 8d 80 08
	00 00		 movaps	 xmm1, XMMWORD PTR $T13[rbp]
  0018c	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0018f	e8 00 00 00 00	 call	 ??HDirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::operator+
  00194	0f 29 85 50 08
	00 00		 movaps	 XMMWORD PTR $T12[rbp], xmm0
  0019b	0f 28 85 50 08
	00 00		 movaps	 xmm0, XMMWORD PTR $T12[rbp]
  001a2	0f 29 85 c0 00
	00 00		 movaps	 XMMWORD PTR vEffectPos2$[rbp], xmm0

; 118  : 	_vector vEffectPos3 = m_pPlayerTransform->Get_State(CTransform::STATE_POSITION) + XMVector3Normalize(m_pPlayerTransform->Get_State(CTransform::STATE_LOOK)) * 2.f;

  001a9	41 b8 02 00 00
	00		 mov	 r8d, 2
  001af	48 8d 95 d0 09
	00 00		 lea	 rdx, QWORD PTR $T20[rbp]
  001b6	48 8b 85 80 12
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001bd	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  001c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Get_State@CTransform@Engine@@QEAA?AT__m128@@W4STATE@12@@Z
  001ca	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  001cd	e8 00 00 00 00	 call	 ?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Normalize
  001d2	0f 29 85 a0 09
	00 00		 movaps	 XMMWORD PTR $T19[rbp], xmm0
  001d9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  001e1	0f 28 85 a0 09
	00 00		 movaps	 xmm0, XMMWORD PTR $T19[rbp]
  001e8	e8 00 00 00 00	 call	 ??DDirectX@@YQ?AT__m128@@T1@M@Z ; DirectX::operator*
  001ed	0f 29 85 70 09
	00 00		 movaps	 XMMWORD PTR $T18[rbp], xmm0
  001f4	41 b8 03 00 00
	00		 mov	 r8d, 3
  001fa	48 8d 95 00 0a
	00 00		 lea	 rdx, QWORD PTR $T21[rbp]
  00201	48 8b 85 80 12
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00208	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  0020f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Get_State@CTransform@Engine@@QEAA?AT__m128@@W4STATE@12@@Z
  00215	0f 28 8d 70 09
	00 00		 movaps	 xmm1, XMMWORD PTR $T18[rbp]
  0021c	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0021f	e8 00 00 00 00	 call	 ??HDirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::operator+
  00224	0f 29 85 40 09
	00 00		 movaps	 XMMWORD PTR $T17[rbp], xmm0
  0022b	0f 28 85 40 09
	00 00		 movaps	 xmm0, XMMWORD PTR $T17[rbp]
  00232	0f 29 85 f0 00
	00 00		 movaps	 XMMWORD PTR vEffectPos3$[rbp], xmm0

; 119  : 
; 120  : 	PlayerMatrix._41 = XMVectorGetX(vEffectPos);

  00239	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vEffectPos$[rbp]
  00240	e8 00 00 00 00	 call	 ?XMVectorGetX@DirectX@@YQMT__m128@@@Z ; DirectX::XMVectorGetX
  00245	f3 0f 11 45 60	 movss	 DWORD PTR PlayerMatrix$[rbp+48], xmm0

; 121  : 
; 122  : 	//y
; 123  : 	if (!CApplicationManager::GetInstance()->IsLevelFinish(CApplicationManager::LEVEL::GAMEPLAY))

  0024a	e8 00 00 00 00	 call	 ?GetInstance@CApplicationManager@Client@@SAPEAV12@XZ ; Client::CApplicationManager::GetInstance
  0024f	33 d2		 xor	 edx, edx
  00251	48 8b c8	 mov	 rcx, rax
  00254	e8 00 00 00 00	 call	 ?IsLevelFinish@CApplicationManager@Client@@QEAA_NW4LEVEL@12@@Z ; Client::CApplicationManager::IsLevelFinish
  00259	0f b6 c0	 movzx	 eax, al
  0025c	85 c0		 test	 eax, eax
  0025e	75 0f		 jne	 SHORT $LN5@SetupPosit

; 124  : 		PlayerMatrix._42 = 0.02f;

  00260	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ca3d70a
  00268	f3 0f 11 45 64	 movss	 DWORD PTR PlayerMatrix$[rbp+52], xmm0

; 125  : 	else

  0026d	eb 0d		 jmp	 SHORT $LN6@SetupPosit
$LN5@SetupPosit:

; 126  : 		PlayerMatrix._42 = 0.03f;

  0026f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3cf5c28f
  00277	f3 0f 11 45 64	 movss	 DWORD PTR PlayerMatrix$[rbp+52], xmm0
$LN6@SetupPosit:

; 127  : 
; 128  : 	PlayerMatrix._43 = XMVectorGetZ(vEffectPos);

  0027c	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vEffectPos$[rbp]
  00283	e8 00 00 00 00	 call	 ?XMVectorGetZ@DirectX@@YQMT__m128@@@Z ; DirectX::XMVectorGetZ
  00288	f3 0f 11 45 68	 movss	 DWORD PTR PlayerMatrix$[rbp+56], xmm0

; 129  : 	
; 130  : 	_matrix RotationMatrix = XMMatrixRotationX(XMConvertToRadians(90.f));

  0028d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42b40000
  00295	e8 00 00 00 00	 call	 ?XMConvertToRadians@DirectX@@YAMM@Z ; DirectX::XMConvertToRadians
  0029a	e8 00 00 00 00	 call	 ?XMMatrixRotationX@DirectX@@YQ?AUXMMATRIX@1@M@Z ; DirectX::XMMatrixRotationX
  0029f	0f 29 9d 20 0b
	00 00		 movaps	 XMMWORD PTR $T24[rbp+48], xmm3
  002a6	0f 29 95 10 0b
	00 00		 movaps	 XMMWORD PTR $T24[rbp+32], xmm2
  002ad	0f 29 8d 00 0b
	00 00		 movaps	 XMMWORD PTR $T24[rbp+16], xmm1
  002b4	0f 29 85 f0 0a
	00 00		 movaps	 XMMWORD PTR $T24[rbp], xmm0
  002bb	48 8d 85 30 0a
	00 00		 lea	 rax, QWORD PTR $T22[rbp]
  002c2	48 8d 8d f0 0a
	00 00		 lea	 rcx, QWORD PTR $T24[rbp]
  002c9	48 8b f8	 mov	 rdi, rax
  002cc	48 8b f1	 mov	 rsi, rcx
  002cf	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  002d4	f3 a4		 rep movsb
  002d6	48 8d 85 20 01
	00 00		 lea	 rax, QWORD PTR RotationMatrix$[rbp]
  002dd	48 8d 8d 30 0a
	00 00		 lea	 rcx, QWORD PTR $T22[rbp]
  002e4	48 8b f8	 mov	 rdi, rax
  002e7	48 8b f1	 mov	 rsi, rcx
  002ea	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  002ef	f3 a4		 rep movsb

; 131  : 
; 132  : 	ZeroMemory(&m_CalcMatrix, sizeof(_float4x4));

  002f1	48 8b 85 80 12
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002f8	48 05 bc 00 00
	00		 add	 rax, 188		; 000000bcH
  002fe	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00304	33 d2		 xor	 edx, edx
  00306	48 8b c8	 mov	 rcx, rax
  00309	e8 00 00 00 00	 call	 memset

; 133  : 	XMStoreFloat4x4(&m_CalcMatrix, XMMatrixScaling(8.f, 8.f, 1.f) * RotationMatrix * XMLoadFloat4x4(&PlayerMatrix));

  0030e	48 8d 4d 30	 lea	 rcx, QWORD PTR PlayerMatrix$[rbp]
  00312	e8 00 00 00 00	 call	 ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PEBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
  00317	0f 29 9d a0 0c
	00 00		 movaps	 XMMWORD PTR $T28[rbp+48], xmm3
  0031e	0f 29 95 90 0c
	00 00		 movaps	 XMMWORD PTR $T28[rbp+32], xmm2
  00325	0f 29 8d 80 0c
	00 00		 movaps	 XMMWORD PTR $T28[rbp+16], xmm1
  0032c	0f 29 85 70 0c
	00 00		 movaps	 XMMWORD PTR $T28[rbp], xmm0
  00333	48 8d 85 90 0d
	00 00		 lea	 rax, QWORD PTR $T31[rbp]
  0033a	48 8d 8d 70 0c
	00 00		 lea	 rcx, QWORD PTR $T28[rbp]
  00341	48 8b f8	 mov	 rdi, rax
  00344	48 8b f1	 mov	 rsi, rcx
  00347	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0034c	f3 a4		 rep movsb
  0034e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00356	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41000000
  0035e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  00366	e8 00 00 00 00	 call	 ?XMMatrixScaling@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixScaling
  0036b	0f 29 9d 80 0b
	00 00		 movaps	 XMMWORD PTR $T25[rbp+48], xmm3
  00372	0f 29 95 70 0b
	00 00		 movaps	 XMMWORD PTR $T25[rbp+32], xmm2
  00379	0f 29 8d 60 0b
	00 00		 movaps	 XMMWORD PTR $T25[rbp+16], xmm1
  00380	0f 29 85 50 0b
	00 00		 movaps	 XMMWORD PTR $T25[rbp], xmm0
  00387	48 8d 85 30 0d
	00 00		 lea	 rax, QWORD PTR $T30[rbp]
  0038e	48 8d 8d 50 0b
	00 00		 lea	 rcx, QWORD PTR $T25[rbp]
  00395	48 8b f8	 mov	 rdi, rax
  00398	48 8b f1	 mov	 rsi, rcx
  0039b	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  003a0	f3 a4		 rep movsb
  003a2	0f 28 85 20 01
	00 00		 movaps	 xmm0, XMMWORD PTR RotationMatrix$[rbp]
  003a9	0f 28 8d 30 01
	00 00		 movaps	 xmm1, XMMWORD PTR RotationMatrix$[rbp+16]
  003b0	0f 28 95 40 01
	00 00		 movaps	 xmm2, XMMWORD PTR RotationMatrix$[rbp+32]
  003b7	0f 28 9d 50 01
	00 00		 movaps	 xmm3, XMMWORD PTR RotationMatrix$[rbp+48]
  003be	48 8d 8d 30 0d
	00 00		 lea	 rcx, QWORD PTR $T30[rbp]
  003c5	e8 00 00 00 00	 call	 ??DXMMATRIX@DirectX@@QEBQ?AU01@U01@@Z ; DirectX::XMMATRIX::operator*
  003ca	0f 29 9d e0 0b
	00 00		 movaps	 XMMWORD PTR $T26[rbp+48], xmm3
  003d1	0f 29 95 d0 0b
	00 00		 movaps	 XMMWORD PTR $T26[rbp+32], xmm2
  003d8	0f 29 8d c0 0b
	00 00		 movaps	 XMMWORD PTR $T26[rbp+16], xmm1
  003df	0f 29 85 b0 0b
	00 00		 movaps	 XMMWORD PTR $T26[rbp], xmm0
  003e6	48 8d 85 d0 0c
	00 00		 lea	 rax, QWORD PTR $T29[rbp]
  003ed	48 8d 8d b0 0b
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  003f4	48 8b f8	 mov	 rdi, rax
  003f7	48 8b f1	 mov	 rsi, rcx
  003fa	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  003ff	f3 a4		 rep movsb
  00401	0f 28 85 90 0d
	00 00		 movaps	 xmm0, XMMWORD PTR $T31[rbp]
  00408	0f 28 8d a0 0d
	00 00		 movaps	 xmm1, XMMWORD PTR $T31[rbp+16]
  0040f	0f 28 95 b0 0d
	00 00		 movaps	 xmm2, XMMWORD PTR $T31[rbp+32]
  00416	0f 28 9d c0 0d
	00 00		 movaps	 xmm3, XMMWORD PTR $T31[rbp+48]
  0041d	48 8d 8d d0 0c
	00 00		 lea	 rcx, QWORD PTR $T29[rbp]
  00424	e8 00 00 00 00	 call	 ??DXMMATRIX@DirectX@@QEBQ?AU01@U01@@Z ; DirectX::XMMATRIX::operator*
  00429	0f 29 9d 40 0c
	00 00		 movaps	 XMMWORD PTR $T27[rbp+48], xmm3
  00430	0f 29 95 30 0c
	00 00		 movaps	 XMMWORD PTR $T27[rbp+32], xmm2
  00437	0f 29 8d 20 0c
	00 00		 movaps	 XMMWORD PTR $T27[rbp+16], xmm1
  0043e	0f 29 85 10 0c
	00 00		 movaps	 XMMWORD PTR $T27[rbp], xmm0
  00445	48 8d 85 90 0a
	00 00		 lea	 rax, QWORD PTR $T23[rbp]
  0044c	48 8d 8d 10 0c
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  00453	48 8b f8	 mov	 rdi, rax
  00456	48 8b f1	 mov	 rsi, rcx
  00459	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0045e	f3 a4		 rep movsb
  00460	48 8b 85 80 12
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00467	48 05 bc 00 00
	00		 add	 rax, 188		; 000000bcH
  0046d	0f 28 85 90 0a
	00 00		 movaps	 xmm0, XMMWORD PTR $T23[rbp]
  00474	0f 28 8d a0 0a
	00 00		 movaps	 xmm1, XMMWORD PTR $T23[rbp+16]
  0047b	0f 28 95 b0 0a
	00 00		 movaps	 xmm2, XMMWORD PTR $T23[rbp+32]
  00482	0f 28 9d c0 0a
	00 00		 movaps	 xmm3, XMMWORD PTR $T23[rbp+48]
  00489	48 8b c8	 mov	 rcx, rax
  0048c	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPEAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4

; 134  : 	
; 135  : 	_vector vLook = XMVector3Normalize(m_pPlayerTransform->Get_State(CTransform::STATE_LOOK));

  00491	41 b8 02 00 00
	00		 mov	 r8d, 2
  00497	48 8d 95 20 0e
	00 00		 lea	 rdx, QWORD PTR $T33[rbp]
  0049e	48 8b 85 80 12
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  004a5	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  004ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Get_State@CTransform@Engine@@QEAA?AT__m128@@W4STATE@12@@Z
  004b2	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  004b5	e8 00 00 00 00	 call	 ?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Normalize
  004ba	0f 29 85 f0 0d
	00 00		 movaps	 XMMWORD PTR $T32[rbp], xmm0
  004c1	0f 28 85 f0 0d
	00 00		 movaps	 xmm0, XMMWORD PTR $T32[rbp]
  004c8	0f 29 85 80 01
	00 00		 movaps	 XMMWORD PTR vLook$[rbp], xmm0

; 136  : 	_vector vRight = XMVector3Normalize(m_pPlayerTransform->Get_State(CTransform::STATE_RIGHT));

  004cf	45 33 c0	 xor	 r8d, r8d
  004d2	48 8d 95 80 0e
	00 00		 lea	 rdx, QWORD PTR $T35[rbp]
  004d9	48 8b 85 80 12
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  004e0	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  004e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Get_State@CTransform@Engine@@QEAA?AT__m128@@W4STATE@12@@Z
  004ed	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  004f0	e8 00 00 00 00	 call	 ?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Normalize
  004f5	0f 29 85 50 0e
	00 00		 movaps	 XMMWORD PTR $T34[rbp], xmm0
  004fc	0f 28 85 50 0e
	00 00		 movaps	 xmm0, XMMWORD PTR $T34[rbp]
  00503	0f 29 85 b0 01
	00 00		 movaps	 XMMWORD PTR vRight$[rbp], xmm0

; 137  : 
; 138  : 	for (int i = 0; i < THORN_COUNT; ++i)

  0050a	c7 85 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$5[rbp], 0
  00514	eb 0e		 jmp	 SHORT $LN4@SetupPosit
$LN2@SetupPosit:
  00516	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$5[rbp]
  0051c	ff c0		 inc	 eax
  0051e	89 85 d4 01 00
	00		 mov	 DWORD PTR i$5[rbp], eax
$LN4@SetupPosit:
  00524	83 bd d4 01 00
	00 0c		 cmp	 DWORD PTR i$5[rbp], 12
  0052b	0f 8d fa 06 00
	00		 jge	 $LN3@SetupPosit

; 139  : 	{
; 140  : 		int iRand = rand() % 360;

  00531	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  00537	99		 cdq
  00538	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  0053d	f7 f9		 idiv	 ecx
  0053f	8b c2		 mov	 eax, edx
  00541	89 85 f4 01 00
	00		 mov	 DWORD PTR iRand$6[rbp], eax

; 141  : 		XMConvertToRadians(iRand);

  00547	f3 0f 2a 85 f4
	01 00 00	 cvtsi2ss xmm0, DWORD PTR iRand$6[rbp]
  0054f	e8 00 00 00 00	 call	 ?XMConvertToRadians@DirectX@@YAMM@Z ; DirectX::XMConvertToRadians

; 142  : 		m_pThorn[i]->SetRotationXYZ(_float3(0.f, iRand, 0.f));

  00554	f3 0f 2a 85 f4
	01 00 00	 cvtsi2ss xmm0, DWORD PTR iRand$6[rbp]
  0055c	0f 57 db	 xorps	 xmm3, xmm3
  0055f	0f 28 d0	 movaps	 xmm2, xmm0
  00562	0f 57 c9	 xorps	 xmm1, xmm1
  00565	48 8d 8d a4 0e
	00 00		 lea	 rcx, QWORD PTR $T36[rbp]
  0056c	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QEAA@MMM@Z ; DirectX::XMFLOAT3::XMFLOAT3
  00571	48 8d 8d 10 11
	00 00		 lea	 rcx, QWORD PTR $T49[rbp]
  00578	48 8b f9	 mov	 rdi, rcx
  0057b	48 8b f0	 mov	 rsi, rax
  0057e	b9 0c 00 00 00	 mov	 ecx, 12
  00583	f3 a4		 rep movsb
  00585	48 63 85 d4 01
	00 00		 movsxd	 rax, DWORD PTR i$5[rbp]
  0058c	48 8d 95 10 11
	00 00		 lea	 rdx, QWORD PTR $T49[rbp]
  00593	48 8b 8d 80 12
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0059a	48 8b 8c c1 00
	01 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+256]
  005a2	e8 00 00 00 00	 call	 ?SetRotationXYZ@CThorn@Client@@QEAAXUXMFLOAT3@DirectX@@@Z ; Client::CThorn::SetRotationXYZ

; 143  : 
; 144  : 		m_bScaleDown[i] = false;

  005a7	48 63 85 d4 01
	00 00		 movsxd	 rax, DWORD PTR i$5[rbp]
  005ae	48 8b 8d 80 12
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  005b5	c6 84 01 60 01
	00 00 00	 mov	 BYTE PTR [rcx+rax+352], 0

; 145  : 
; 146  : 		if (i < 4)

  005bd	83 bd d4 01 00
	00 04		 cmp	 DWORD PTR i$5[rbp], 4
  005c4	0f 8d 04 02 00
	00		 jge	 $LN7@SetupPosit

; 147  : 		{
; 148  : 			if (i % 2 == 0)

  005ca	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$5[rbp]
  005d0	99		 cdq
  005d1	83 e0 01	 and	 eax, 1
  005d4	33 c2		 xor	 eax, edx
  005d6	2b c2		 sub	 eax, edx
  005d8	85 c0		 test	 eax, eax
  005da	0f 85 f7 00 00
	00		 jne	 $LN9@SetupPosit

; 149  : 			{
; 150  : 				vEffectPos = vEffectPos + vRight * (i * 0.9f);

  005e0	f3 0f 2a 85 d4
	01 00 00	 cvtsi2ss xmm0, DWORD PTR i$5[rbp]
  005e8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f666666
  005f0	0f 28 c8	 movaps	 xmm1, xmm0
  005f3	0f 28 85 b0 01
	00 00		 movaps	 xmm0, XMMWORD PTR vRight$[rbp]
  005fa	e8 00 00 00 00	 call	 ??DDirectX@@YQ?AT__m128@@T1@M@Z ; DirectX::operator*
  005ff	0f 29 85 00 0f
	00 00		 movaps	 XMMWORD PTR $T38[rbp], xmm0
  00606	0f 28 8d 00 0f
	00 00		 movaps	 xmm1, XMMWORD PTR $T38[rbp]
  0060d	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vEffectPos$[rbp]
  00614	e8 00 00 00 00	 call	 ??HDirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::operator+
  00619	0f 29 85 d0 0e
	00 00		 movaps	 XMMWORD PTR $T37[rbp], xmm0
  00620	0f 28 85 d0 0e
	00 00		 movaps	 xmm0, XMMWORD PTR $T37[rbp]
  00627	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR vEffectPos$[rbp], xmm0

; 151  : 				m_pThorn[i]->SetPosition(vEffectPos);

  0062e	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vEffectPos$[rbp]
  00635	0f 29 85 40 11
	00 00		 movaps	 XMMWORD PTR $T50[rbp], xmm0
  0063c	48 63 85 d4 01
	00 00		 movsxd	 rax, DWORD PTR i$5[rbp]
  00643	48 8d 95 40 11
	00 00		 lea	 rdx, QWORD PTR $T50[rbp]
  0064a	48 8b 8d 80 12
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00651	48 8b 8c c1 00
	01 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+256]
  00659	e8 00 00 00 00	 call	 ?SetPosition@CThorn@Client@@QEAAXT__m128@@@Z ; Client::CThorn::SetPosition

; 152  : 				m_pThorn[i]->SetupScaleUpStart(max(3.2f * i, 2.5f));

  0065e	f3 0f 2a 85 d4
	01 00 00	 cvtsi2ss xmm0, DWORD PTR i$5[rbp]
  00666	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@404ccccd
  0066e	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00672	0f 28 c1	 movaps	 xmm0, xmm1
  00675	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@40200000
  0067c	76 21		 jbe	 SHORT $LN18@SetupPosit
  0067e	f3 0f 2a 85 d4
	01 00 00	 cvtsi2ss xmm0, DWORD PTR i$5[rbp]
  00686	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@404ccccd
  0068e	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00692	0f 28 c1	 movaps	 xmm0, xmm1
  00695	f3 0f 11 85 44
	12 00 00	 movss	 DWORD PTR tv285[rbp], xmm0
  0069d	eb 10		 jmp	 SHORT $LN19@SetupPosit
$LN18@SetupPosit:
  0069f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40200000
  006a7	f3 0f 11 85 44
	12 00 00	 movss	 DWORD PTR tv285[rbp], xmm0
$LN19@SetupPosit:
  006af	48 63 85 d4 01
	00 00		 movsxd	 rax, DWORD PTR i$5[rbp]
  006b6	f3 0f 10 8d 44
	12 00 00	 movss	 xmm1, DWORD PTR tv285[rbp]
  006be	48 8b 8d 80 12
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  006c5	48 8b 8c c1 00
	01 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+256]
  006cd	e8 00 00 00 00	 call	 ?SetupScaleUpStart@CThorn@Client@@QEAAXM@Z ; Client::CThorn::SetupScaleUpStart

; 153  : 			}
; 154  : 			else

  006d2	e9 f2 00 00 00	 jmp	 $LN10@SetupPosit
$LN9@SetupPosit:

; 155  : 			{
; 156  : 				vEffectPos = vEffectPos - vRight * (i * 0.7f);

  006d7	f3 0f 2a 85 d4
	01 00 00	 cvtsi2ss xmm0, DWORD PTR i$5[rbp]
  006df	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f333333
  006e7	0f 28 c8	 movaps	 xmm1, xmm0
  006ea	0f 28 85 b0 01
	00 00		 movaps	 xmm0, XMMWORD PTR vRight$[rbp]
  006f1	e8 00 00 00 00	 call	 ??DDirectX@@YQ?AT__m128@@T1@M@Z ; DirectX::operator*
  006f6	0f 29 85 60 0f
	00 00		 movaps	 XMMWORD PTR $T40[rbp], xmm0
  006fd	0f 28 8d 60 0f
	00 00		 movaps	 xmm1, XMMWORD PTR $T40[rbp]
  00704	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vEffectPos$[rbp]
  0070b	e8 00 00 00 00	 call	 ??GDirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::operator-
  00710	0f 29 85 30 0f
	00 00		 movaps	 XMMWORD PTR $T39[rbp], xmm0
  00717	0f 28 85 30 0f
	00 00		 movaps	 xmm0, XMMWORD PTR $T39[rbp]
  0071e	0f 29 85 90 00
	00 00		 movaps	 XMMWORD PTR vEffectPos$[rbp], xmm0

; 157  : 				m_pThorn[i]->SetPosition(vEffectPos);

  00725	0f 28 85 90 00
	00 00		 movaps	 xmm0, XMMWORD PTR vEffectPos$[rbp]
  0072c	0f 29 85 70 11
	00 00		 movaps	 XMMWORD PTR $T51[rbp], xmm0
  00733	48 63 85 d4 01
	00 00		 movsxd	 rax, DWORD PTR i$5[rbp]
  0073a	48 8d 95 70 11
	00 00		 lea	 rdx, QWORD PTR $T51[rbp]
  00741	48 8b 8d 80 12
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00748	48 8b 8c c1 00
	01 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+256]
  00750	e8 00 00 00 00	 call	 ?SetPosition@CThorn@Client@@QEAAXT__m128@@@Z ; Client::CThorn::SetPosition

; 158  : 				m_pThorn[i]->SetupScaleUpStart(max(3.1f * i, 2.5f));

  00755	f3 0f 2a 85 d4
	01 00 00	 cvtsi2ss xmm0, DWORD PTR i$5[rbp]
  0075d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40466666
  00765	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00769	0f 28 c1	 movaps	 xmm0, xmm1
  0076c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@40200000
  00773	76 21		 jbe	 SHORT $LN20@SetupPosit
  00775	f3 0f 2a 85 d4
	01 00 00	 cvtsi2ss xmm0, DWORD PTR i$5[rbp]
  0077d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40466666
  00785	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00789	0f 28 c1	 movaps	 xmm0, xmm1
  0078c	f3 0f 11 85 44
	12 00 00	 movss	 DWORD PTR tv312[rbp], xmm0
  00794	eb 10		 jmp	 SHORT $LN21@SetupPosit
$LN20@SetupPosit:
  00796	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40200000
  0079e	f3 0f 11 85 44
	12 00 00	 movss	 DWORD PTR tv312[rbp], xmm0
$LN21@SetupPosit:
  007a6	48 63 85 d4 01
	00 00		 movsxd	 rax, DWORD PTR i$5[rbp]
  007ad	f3 0f 10 8d 44
	12 00 00	 movss	 xmm1, DWORD PTR tv312[rbp]
  007b5	48 8b 8d 80 12
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  007bc	48 8b 8c c1 00
	01 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+256]
  007c4	e8 00 00 00 00	 call	 ?SetupScaleUpStart@CThorn@Client@@QEAAXM@Z ; Client::CThorn::SetupScaleUpStart
$LN10@SetupPosit:

; 159  : 			}

  007c9	e9 58 04 00 00	 jmp	 $LN8@SetupPosit
$LN7@SetupPosit:

; 160  : 		}
; 161  : 		else if (i < 8)

  007ce	83 bd d4 01 00
	00 08		 cmp	 DWORD PTR i$5[rbp], 8
  007d5	0f 8d 2e 02 00
	00		 jge	 $LN11@SetupPosit

; 162  : 		{
; 163  : 			if (i % 2 == 0)

  007db	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$5[rbp]
  007e1	99		 cdq
  007e2	83 e0 01	 and	 eax, 1
  007e5	33 c2		 xor	 eax, edx
  007e7	2b c2		 sub	 eax, edx
  007e9	85 c0		 test	 eax, eax
  007eb	0f 85 06 01 00
	00		 jne	 $LN13@SetupPosit

; 164  : 			{
; 165  : 				vEffectPos2 = vEffectPos2 + vRight * ((i - 4) * 1.5f);

  007f1	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$5[rbp]
  007f7	83 e8 04	 sub	 eax, 4
  007fa	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  007fe	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3fc00000
  00806	0f 28 c8	 movaps	 xmm1, xmm0
  00809	0f 28 85 b0 01
	00 00		 movaps	 xmm0, XMMWORD PTR vRight$[rbp]
  00810	e8 00 00 00 00	 call	 ??DDirectX@@YQ?AT__m128@@T1@M@Z ; DirectX::operator*
  00815	0f 29 85 c0 0f
	00 00		 movaps	 XMMWORD PTR $T42[rbp], xmm0
  0081c	0f 28 8d c0 0f
	00 00		 movaps	 xmm1, XMMWORD PTR $T42[rbp]
  00823	0f 28 85 c0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vEffectPos2$[rbp]
  0082a	e8 00 00 00 00	 call	 ??HDirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::operator+
  0082f	0f 29 85 90 0f
	00 00		 movaps	 XMMWORD PTR $T41[rbp], xmm0
  00836	0f 28 85 90 0f
	00 00		 movaps	 xmm0, XMMWORD PTR $T41[rbp]
  0083d	0f 29 85 c0 00
	00 00		 movaps	 XMMWORD PTR vEffectPos2$[rbp], xmm0

; 166  : 				m_pThorn[i]->SetPosition(vEffectPos2);

  00844	0f 28 85 c0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vEffectPos2$[rbp]
  0084b	0f 29 85 a0 11
	00 00		 movaps	 XMMWORD PTR $T52[rbp], xmm0
  00852	48 63 85 d4 01
	00 00		 movsxd	 rax, DWORD PTR i$5[rbp]
  00859	48 8d 95 a0 11
	00 00		 lea	 rdx, QWORD PTR $T52[rbp]
  00860	48 8b 8d 80 12
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00867	48 8b 8c c1 00
	01 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+256]
  0086f	e8 00 00 00 00	 call	 ?SetPosition@CThorn@Client@@QEAAXT__m128@@@Z ; Client::CThorn::SetPosition

; 167  : 				m_pThorn[i]->SetupScaleUpStart(max(2.5f * (i - 4), 1.9f));

  00874	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$5[rbp]
  0087a	83 e8 04	 sub	 eax, 4
  0087d	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00881	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40200000
  00889	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0088d	0f 28 c1	 movaps	 xmm0, xmm1
  00890	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3ff33333
  00897	76 26		 jbe	 SHORT $LN22@SetupPosit
  00899	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$5[rbp]
  0089f	83 e8 04	 sub	 eax, 4
  008a2	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  008a6	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40200000
  008ae	f3 0f 59 c8	 mulss	 xmm1, xmm0
  008b2	0f 28 c1	 movaps	 xmm0, xmm1
  008b5	f3 0f 11 85 44
	12 00 00	 movss	 DWORD PTR tv345[rbp], xmm0
  008bd	eb 10		 jmp	 SHORT $LN23@SetupPosit
$LN22@SetupPosit:
  008bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ff33333
  008c7	f3 0f 11 85 44
	12 00 00	 movss	 DWORD PTR tv345[rbp], xmm0
$LN23@SetupPosit:
  008cf	48 63 85 d4 01
	00 00		 movsxd	 rax, DWORD PTR i$5[rbp]
  008d6	f3 0f 10 8d 44
	12 00 00	 movss	 xmm1, DWORD PTR tv345[rbp]
  008de	48 8b 8d 80 12
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  008e5	48 8b 8c c1 00
	01 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+256]
  008ed	e8 00 00 00 00	 call	 ?SetupScaleUpStart@CThorn@Client@@QEAAXM@Z ; Client::CThorn::SetupScaleUpStart

; 168  : 			}
; 169  : 			else

  008f2	e9 0d 01 00 00	 jmp	 $LN14@SetupPosit
$LN13@SetupPosit:

; 170  : 			{
; 171  : 				vEffectPos2 = vEffectPos2 - vRight * ((i - 4) * 1.5f);

  008f7	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$5[rbp]
  008fd	83 e8 04	 sub	 eax, 4
  00900	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00904	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3fc00000
  0090c	0f 28 c8	 movaps	 xmm1, xmm0
  0090f	0f 28 85 b0 01
	00 00		 movaps	 xmm0, XMMWORD PTR vRight$[rbp]
  00916	e8 00 00 00 00	 call	 ??DDirectX@@YQ?AT__m128@@T1@M@Z ; DirectX::operator*
  0091b	0f 29 85 20 10
	00 00		 movaps	 XMMWORD PTR $T44[rbp], xmm0
  00922	0f 28 8d 20 10
	00 00		 movaps	 xmm1, XMMWORD PTR $T44[rbp]
  00929	0f 28 85 c0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vEffectPos2$[rbp]
  00930	e8 00 00 00 00	 call	 ??GDirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::operator-
  00935	0f 29 85 f0 0f
	00 00		 movaps	 XMMWORD PTR $T43[rbp], xmm0
  0093c	0f 28 85 f0 0f
	00 00		 movaps	 xmm0, XMMWORD PTR $T43[rbp]
  00943	0f 29 85 c0 00
	00 00		 movaps	 XMMWORD PTR vEffectPos2$[rbp], xmm0

; 172  : 				m_pThorn[i]->SetPosition(vEffectPos2);

  0094a	0f 28 85 c0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vEffectPos2$[rbp]
  00951	0f 29 85 d0 11
	00 00		 movaps	 XMMWORD PTR $T53[rbp], xmm0
  00958	48 63 85 d4 01
	00 00		 movsxd	 rax, DWORD PTR i$5[rbp]
  0095f	48 8d 95 d0 11
	00 00		 lea	 rdx, QWORD PTR $T53[rbp]
  00966	48 8b 8d 80 12
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0096d	48 8b 8c c1 00
	01 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+256]
  00975	e8 00 00 00 00	 call	 ?SetPosition@CThorn@Client@@QEAAXT__m128@@@Z ; Client::CThorn::SetPosition

; 173  : 				m_pThorn[i]->SetupScaleUpStart(max(2.5f * (i - 4), 1.9));

  0097a	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$5[rbp]
  00980	83 e8 04	 sub	 eax, 4
  00983	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00987	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40200000
  0098f	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00993	0f 28 c1	 movaps	 xmm0, xmm1
  00996	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0099a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ffe666666666666
  009a2	76 2a		 jbe	 SHORT $LN24@SetupPosit
  009a4	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$5[rbp]
  009aa	83 e8 04	 sub	 eax, 4
  009ad	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  009b1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40200000
  009b9	f3 0f 59 c8	 mulss	 xmm1, xmm0
  009bd	0f 28 c1	 movaps	 xmm0, xmm1
  009c0	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  009c4	f2 0f 11 85 48
	12 00 00	 movsd	 QWORD PTR tv377[rbp], xmm0
  009cc	eb 10		 jmp	 SHORT $LN25@SetupPosit
$LN24@SetupPosit:
  009ce	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ffe666666666666
  009d6	f2 0f 11 85 48
	12 00 00	 movsd	 QWORD PTR tv377[rbp], xmm0
$LN25@SetupPosit:
  009de	f2 0f 5a 85 48
	12 00 00	 cvtsd2ss xmm0, QWORD PTR tv377[rbp]
  009e6	48 63 85 d4 01
	00 00		 movsxd	 rax, DWORD PTR i$5[rbp]
  009ed	0f 28 c8	 movaps	 xmm1, xmm0
  009f0	48 8b 8d 80 12
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  009f7	48 8b 8c c1 00
	01 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+256]
  009ff	e8 00 00 00 00	 call	 ?SetupScaleUpStart@CThorn@Client@@QEAAXM@Z ; Client::CThorn::SetupScaleUpStart
$LN14@SetupPosit:

; 174  : 			}
; 175  : 		}
; 176  : 		else

  00a04	e9 1d 02 00 00	 jmp	 $LN12@SetupPosit
$LN11@SetupPosit:

; 177  : 		{
; 178  : 			if (i % 2 == 0)

  00a09	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$5[rbp]
  00a0f	99		 cdq
  00a10	83 e0 01	 and	 eax, 1
  00a13	33 c2		 xor	 eax, edx
  00a15	2b c2		 sub	 eax, edx
  00a17	85 c0		 test	 eax, eax
  00a19	0f 85 06 01 00
	00		 jne	 $LN15@SetupPosit

; 179  : 			{
; 180  : 				vEffectPos3 = vEffectPos3 + vRight * ((i - 8) * 1.1f);

  00a1f	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$5[rbp]
  00a25	83 e8 08	 sub	 eax, 8
  00a28	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00a2c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f8ccccd
  00a34	0f 28 c8	 movaps	 xmm1, xmm0
  00a37	0f 28 85 b0 01
	00 00		 movaps	 xmm0, XMMWORD PTR vRight$[rbp]
  00a3e	e8 00 00 00 00	 call	 ??DDirectX@@YQ?AT__m128@@T1@M@Z ; DirectX::operator*
  00a43	0f 29 85 80 10
	00 00		 movaps	 XMMWORD PTR $T46[rbp], xmm0
  00a4a	0f 28 8d 80 10
	00 00		 movaps	 xmm1, XMMWORD PTR $T46[rbp]
  00a51	0f 28 85 f0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vEffectPos3$[rbp]
  00a58	e8 00 00 00 00	 call	 ??HDirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::operator+
  00a5d	0f 29 85 50 10
	00 00		 movaps	 XMMWORD PTR $T45[rbp], xmm0
  00a64	0f 28 85 50 10
	00 00		 movaps	 xmm0, XMMWORD PTR $T45[rbp]
  00a6b	0f 29 85 f0 00
	00 00		 movaps	 XMMWORD PTR vEffectPos3$[rbp], xmm0

; 181  : 				m_pThorn[i]->SetPosition(vEffectPos3);

  00a72	0f 28 85 f0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vEffectPos3$[rbp]
  00a79	0f 29 85 00 12
	00 00		 movaps	 XMMWORD PTR $T54[rbp], xmm0
  00a80	48 63 85 d4 01
	00 00		 movsxd	 rax, DWORD PTR i$5[rbp]
  00a87	48 8d 95 00 12
	00 00		 lea	 rdx, QWORD PTR $T54[rbp]
  00a8e	48 8b 8d 80 12
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a95	48 8b 8c c1 00
	01 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+256]
  00a9d	e8 00 00 00 00	 call	 ?SetPosition@CThorn@Client@@QEAAXT__m128@@@Z ; Client::CThorn::SetPosition

; 182  : 				m_pThorn[i]->SetupScaleUpStart(max(2.1f * (i - 6), 2.1f));

  00aa2	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$5[rbp]
  00aa8	83 e8 06	 sub	 eax, 6
  00aab	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00aaf	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40066666
  00ab7	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00abb	0f 28 c1	 movaps	 xmm0, xmm1
  00abe	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@40066666
  00ac5	76 26		 jbe	 SHORT $LN26@SetupPosit
  00ac7	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$5[rbp]
  00acd	83 e8 06	 sub	 eax, 6
  00ad0	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00ad4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40066666
  00adc	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00ae0	0f 28 c1	 movaps	 xmm0, xmm1
  00ae3	f3 0f 11 85 44
	12 00 00	 movss	 DWORD PTR tv410[rbp], xmm0
  00aeb	eb 10		 jmp	 SHORT $LN27@SetupPosit
$LN26@SetupPosit:
  00aed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40066666
  00af5	f3 0f 11 85 44
	12 00 00	 movss	 DWORD PTR tv410[rbp], xmm0
$LN27@SetupPosit:
  00afd	48 63 85 d4 01
	00 00		 movsxd	 rax, DWORD PTR i$5[rbp]
  00b04	f3 0f 10 8d 44
	12 00 00	 movss	 xmm1, DWORD PTR tv410[rbp]
  00b0c	48 8b 8d 80 12
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b13	48 8b 8c c1 00
	01 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+256]
  00b1b	e8 00 00 00 00	 call	 ?SetupScaleUpStart@CThorn@Client@@QEAAXM@Z ; Client::CThorn::SetupScaleUpStart

; 183  : 			}
; 184  : 			else

  00b20	e9 01 01 00 00	 jmp	 $LN16@SetupPosit
$LN15@SetupPosit:

; 185  : 			{
; 186  : 				vEffectPos3 = vEffectPos3 - vRight * ((i - 8) * 0.8f);

  00b25	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$5[rbp]
  00b2b	83 e8 08	 sub	 eax, 8
  00b2e	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00b32	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f4ccccd
  00b3a	0f 28 c8	 movaps	 xmm1, xmm0
  00b3d	0f 28 85 b0 01
	00 00		 movaps	 xmm0, XMMWORD PTR vRight$[rbp]
  00b44	e8 00 00 00 00	 call	 ??DDirectX@@YQ?AT__m128@@T1@M@Z ; DirectX::operator*
  00b49	0f 29 85 e0 10
	00 00		 movaps	 XMMWORD PTR $T48[rbp], xmm0
  00b50	0f 28 8d e0 10
	00 00		 movaps	 xmm1, XMMWORD PTR $T48[rbp]
  00b57	0f 28 85 f0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vEffectPos3$[rbp]
  00b5e	e8 00 00 00 00	 call	 ??GDirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::operator-
  00b63	0f 29 85 b0 10
	00 00		 movaps	 XMMWORD PTR $T47[rbp], xmm0
  00b6a	0f 28 85 b0 10
	00 00		 movaps	 xmm0, XMMWORD PTR $T47[rbp]
  00b71	0f 29 85 f0 00
	00 00		 movaps	 XMMWORD PTR vEffectPos3$[rbp], xmm0

; 187  : 				m_pThorn[i]->SetPosition(vEffectPos3);

  00b78	0f 28 85 f0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vEffectPos3$[rbp]
  00b7f	0f 29 85 30 12
	00 00		 movaps	 XMMWORD PTR $T55[rbp], xmm0
  00b86	48 63 85 d4 01
	00 00		 movsxd	 rax, DWORD PTR i$5[rbp]
  00b8d	48 8d 95 30 12
	00 00		 lea	 rdx, QWORD PTR $T55[rbp]
  00b94	48 8b 8d 80 12
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b9b	48 8b 8c c1 00
	01 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+256]
  00ba3	e8 00 00 00 00	 call	 ?SetPosition@CThorn@Client@@QEAAXT__m128@@@Z ; Client::CThorn::SetPosition

; 188  : 				m_pThorn[i]->SetupScaleUpStart(max(2.1f * (i - 6), 2.1f));

  00ba8	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$5[rbp]
  00bae	83 e8 06	 sub	 eax, 6
  00bb1	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00bb5	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40066666
  00bbd	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00bc1	0f 28 c1	 movaps	 xmm0, xmm1
  00bc4	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@40066666
  00bcb	76 26		 jbe	 SHORT $LN28@SetupPosit
  00bcd	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR i$5[rbp]
  00bd3	83 e8 06	 sub	 eax, 6
  00bd6	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00bda	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40066666
  00be2	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00be6	0f 28 c1	 movaps	 xmm0, xmm1
  00be9	f3 0f 11 85 44
	12 00 00	 movss	 DWORD PTR tv440[rbp], xmm0
  00bf1	eb 10		 jmp	 SHORT $LN29@SetupPosit
$LN28@SetupPosit:
  00bf3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40066666
  00bfb	f3 0f 11 85 44
	12 00 00	 movss	 DWORD PTR tv440[rbp], xmm0
$LN29@SetupPosit:
  00c03	48 63 85 d4 01
	00 00		 movsxd	 rax, DWORD PTR i$5[rbp]
  00c0a	f3 0f 10 8d 44
	12 00 00	 movss	 xmm1, DWORD PTR tv440[rbp]
  00c12	48 8b 8d 80 12
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00c19	48 8b 8c c1 00
	01 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+256]
  00c21	e8 00 00 00 00	 call	 ?SetupScaleUpStart@CThorn@Client@@QEAAXM@Z ; Client::CThorn::SetupScaleUpStart
$LN16@SetupPosit:
$LN12@SetupPosit:
$LN8@SetupPosit:

; 189  : 			}
; 190  : 
; 191  : 		}
; 192  : 	}

  00c26	e9 eb f8 ff ff	 jmp	 $LN2@SetupPosit
$LN3@SetupPosit:

; 193  : }

  00c2b	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00c2f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?SetupPosition@CSkillBlueEffect@Client@@QEAAXXZ$rtcFrameData
  00c36	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00c3b	48 8b 8d 50 12
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00c42	48 33 cd	 xor	 rcx, rbp
  00c45	e8 00 00 00 00	 call	 __security_check_cookie
  00c4a	48 8d a5 60 12
	00 00		 lea	 rsp, QWORD PTR [rbp+4704]
  00c51	5f		 pop	 rdi
  00c52	5e		 pop	 rsi
  00c53	5d		 pop	 rbp
  00c54	c3		 ret	 0
?SetupPosition@CSkillBlueEffect@Client@@QEAAXXZ ENDP	; Client::CSkillBlueEffect::SetupPosition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
;	COMDAT ?RenderGUI@CSkillBlueEffect@Client@@UEAAXXZ
_TEXT	SEGMENT
this$ = 224
?RenderGUI@CSkillBlueEffect@Client@@UEAAXXZ PROC	; Client::CSkillBlueEffect::RenderGUI, COMDAT

; 105  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 106  : }

  00028	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002f	5f		 pop	 rdi
  00030	5d		 pop	 rbp
  00031	c3		 ret	 0
?RenderGUI@CSkillBlueEffect@Client@@UEAAXXZ ENDP	; Client::CSkillBlueEffect::RenderGUI
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
;	COMDAT ?Render@CSkillBlueEffect@Client@@UEAAJXZ
_TEXT	SEGMENT
pGameInstance$ = 8
this$ = 256
?Render@CSkillBlueEffect@Client@@UEAAJXZ PROC		; Client::CSkillBlueEffect::Render, COMDAT

; 88   : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 89   : 	CGameInstance* pGameInstance = CGameInstance::GetInstance();

  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?GetInstance@CGameInstance@Engine@@SAPEAV12@XZ
  00030	48 89 45 08	 mov	 QWORD PTR pGameInstance$[rbp], rax

; 90   : 
; 91   : 	if (FAILED(Setup_ShaderResources()))

  00034	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003b	e8 00 00 00 00	 call	 ?Setup_ShaderResources@CSkillBlueEffect@Client@@AEAAJXZ ; Client::CSkillBlueEffect::Setup_ShaderResources
  00040	85 c0		 test	 eax, eax
  00042	7d 0a		 jge	 SHORT $LN2@Render

; 92   : 		return E_FAIL;

  00044	b8 05 40 00 80	 mov	 eax, -2147467259	; ffffffff80004005H
  00049	e9 b8 00 00 00	 jmp	 $LN1@Render
$LN2@Render:

; 93   : 
; 94   : 	m_pDiffuseTexture->Setup_ShaderResource(m_pShader, "g_Texture");

  0004e	45 33 c9	 xor	 r9d, r9d
  00051	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09HCHKCCII@g_Texture?$AA@
  00058	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8b 90 90 00
	00 00		 mov	 rdx, QWORD PTR [rax+144]
  00066	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006d	48 8b 88 98 00
	00 00		 mov	 rcx, QWORD PTR [rax+152]
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Setup_ShaderResource@CTexture@Engine@@QEAAJPEAVCShader@2@PEBDI@Z

; 95   : 	m_pMaskTexture->Setup_ShaderResource(m_pShader, "g_MaskTexture");

  0007a	45 33 c9	 xor	 r9d, r9d
  0007d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@OFKPLLDO@g_MaskTexture?$AA@
  00084	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008b	48 8b 90 90 00
	00 00		 mov	 rdx, QWORD PTR [rax+144]
  00092	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00099	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  000a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Setup_ShaderResource@CTexture@Engine@@QEAAJPEAVCShader@2@PEBDI@Z

; 96   : 	m_pShader->SetRawValue("g_TimeAcc", &m_fAlphaAcc, sizeof(float));

  000a6	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ad	48 05 9c 01 00
	00		 add	 rax, 412		; 0000019cH
  000b3	41 b9 04 00 00
	00		 mov	 r9d, 4
  000b9	4c 8b c0	 mov	 r8, rax
  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09IPLGGENB@g_TimeAcc?$AA@
  000c3	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ca	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?SetRawValue@CShader@Engine@@QEAAJPEBDPEBXI@Z

; 97   : 
; 98   : 	m_pShader->Begin(7);

  000d7	ba 07 00 00 00	 mov	 edx, 7
  000dc	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e3	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  000ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Begin@CShader@Engine@@QEAAJI@Z

; 99   : 	m_pVIBuffer->Render();

  000f0	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f7	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Render@CVIBuffer@Engine@@UEAAJXZ

; 100  : 
; 101  : 	return S_OK;

  00104	33 c0		 xor	 eax, eax
$LN1@Render:

; 102  : }

  00106	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0010d	5f		 pop	 rdi
  0010e	5d		 pop	 rbp
  0010f	c3		 ret	 0
?Render@CSkillBlueEffect@Client@@UEAAJXZ ENDP		; Client::CSkillBlueEffect::Render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
;	COMDAT ?LateTick@CSkillBlueEffect@Client@@UEAAXN@Z
_TEXT	SEGMENT
pGameInstance$ = 8
i$1 = 36
$T2 = 272
this$ = 384
TimeDelta$ = 392
?LateTick@CSkillBlueEffect@Client@@UEAAXN@Z PROC	; Client::CSkillBlueEffect::LateTick, COMDAT

; 54   : {

$LN10:
  00000	f2 0f 11 4c 24
	10		 movsd	 QWORD PTR [rsp+16], xmm1
  00006	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000b	55		 push	 rbp
  0000c	56		 push	 rsi
  0000d	57		 push	 rdi
  0000e	48 81 ec 80 01
	00 00		 sub	 rsp, 384		; 00000180H
  00015	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]

; 55   : 	__super::LateTick(TimeDelta);

  00031	f2 0f 10 8d 88
	01 00 00	 movsd	 xmm1, QWORD PTR TimeDelta$[rbp]
  00039	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?LateTick@CGameObject@Engine@@UEAAXN@Z

; 56   : 
; 57   : 	CGameInstance* pGameInstance = CGameInstance::GetInstance();

  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?GetInstance@CGameInstance@Engine@@SAPEAV12@XZ
  0004c	48 89 45 08	 mov	 QWORD PTR pGameInstance$[rbp], rax

; 58   : 	m_pTransform->Set_WorldMatrix(m_CalcMatrix);

  00050	48 8d 85 10 01
	00 00		 lea	 rax, QWORD PTR $T2[rbp]
  00057	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005e	48 8b f8	 mov	 rdi, rax
  00061	48 8d b1 bc 00
	00 00		 lea	 rsi, QWORD PTR [rcx+188]
  00068	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0006d	f3 a4		 rep movsb
  0006f	48 8d 95 10 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  00076	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007d	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Set_WorldMatrix@CTransform@Engine@@QEAAXUXMFLOAT4X4@DirectX@@@Z

; 59   : 
; 60   : 	for (int i = 0; i < THORN_COUNT; ++i)

  0008a	c7 45 24 00 00
	00 00		 mov	 DWORD PTR i$1[rbp], 0
  00091	eb 08		 jmp	 SHORT $LN4@LateTick
$LN2@LateTick:
  00093	8b 45 24	 mov	 eax, DWORD PTR i$1[rbp]
  00096	ff c0		 inc	 eax
  00098	89 45 24	 mov	 DWORD PTR i$1[rbp], eax
$LN4@LateTick:
  0009b	83 7d 24 0c	 cmp	 DWORD PTR i$1[rbp], 12
  0009f	0f 8d 86 00 00
	00		 jge	 $LN3@LateTick

; 61   : 	{
; 62   : 		m_pThorn[i]->SetTimeDelta(TimeDelta);

  000a5	48 63 45 24	 movsxd	 rax, DWORD PTR i$1[rbp]
  000a9	f2 0f 10 8d 88
	01 00 00	 movsd	 xmm1, QWORD PTR TimeDelta$[rbp]
  000b1	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b8	48 8b 8c c1 00
	01 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+256]
  000c0	e8 00 00 00 00	 call	 ?SetTimeDelta@CThorn@Client@@QEAAXN@Z ; Client::CThorn::SetTimeDelta

; 63   : 
; 64   : 		if (m_pThorn[i]->IsScaleFinish() && !m_bScaleDown[i])

  000c5	48 63 45 24	 movsxd	 rax, DWORD PTR i$1[rbp]
  000c9	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d0	48 8b 8c c1 00
	01 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+256]
  000d8	e8 00 00 00 00	 call	 ?IsScaleFinish@CThorn@Client@@QEAA_NXZ ; Client::CThorn::IsScaleFinish
  000dd	0f b6 c0	 movzx	 eax, al
  000e0	85 c0		 test	 eax, eax
  000e2	74 42		 je	 SHORT $LN5@LateTick
  000e4	48 63 45 24	 movsxd	 rax, DWORD PTR i$1[rbp]
  000e8	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ef	0f b6 84 01 60
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+352]
  000f7	85 c0		 test	 eax, eax
  000f9	75 2b		 jne	 SHORT $LN5@LateTick

; 65   : 		{
; 66   : 			m_bScaleDown[i] = true;

  000fb	48 63 45 24	 movsxd	 rax, DWORD PTR i$1[rbp]
  000ff	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00106	c6 84 01 60 01
	00 00 01	 mov	 BYTE PTR [rcx+rax+352], 1

; 67   : 			m_pThorn[i]->StartDessolve();

  0010e	48 63 45 24	 movsxd	 rax, DWORD PTR i$1[rbp]
  00112	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00119	48 8b 8c c1 00
	01 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+256]
  00121	e8 00 00 00 00	 call	 ?StartDessolve@CThorn@Client@@QEAAXXZ ; Client::CThorn::StartDessolve
$LN5@LateTick:

; 68   : 		}
; 69   : 	}

  00126	e9 68 ff ff ff	 jmp	 $LN2@LateTick
$LN3@LateTick:

; 70   : 
; 71   : 	if (m_bRender)

  0012b	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00132	0f b6 80 b8 00
	00 00		 movzx	 eax, BYTE PTR [rax+184]
  00139	85 c0		 test	 eax, eax
  0013b	74 62		 je	 SHORT $LN6@LateTick

; 72   : 	{
; 73   : 		m_fAlphaAcc -= TimeDelta;

  0013d	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00144	f3 0f 5a 80 9c
	01 00 00	 cvtss2sd xmm0, DWORD PTR [rax+412]
  0014c	f2 0f 5c 85 88
	01 00 00	 subsd	 xmm0, QWORD PTR TimeDelta$[rbp]
  00154	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00158	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0015f	f3 0f 11 80 9c
	01 00 00	 movss	 DWORD PTR [rax+412], xmm0

; 74   : 		if (m_fAlphaAcc <= 0.f)

  00167	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0016e	0f 57 c0	 xorps	 xmm0, xmm0
  00171	0f 2f 80 9c 01
	00 00		 comiss	 xmm0, DWORD PTR [rax+412]
  00178	72 25		 jb	 SHORT $LN7@LateTick

; 75   : 		{
; 76   : 			m_fAlphaAcc = 2.f;

  0017a	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00181	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00189	f3 0f 11 80 9c
	01 00 00	 movss	 DWORD PTR [rax+412], xmm0

; 77   : 			m_bRender = false;

  00191	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00198	c6 80 b8 00 00
	00 00		 mov	 BYTE PTR [rax+184], 0
$LN7@LateTick:
$LN6@LateTick:

; 78   : 		}
; 79   : 	}
; 80   : 
; 81   : 	if (nullptr != m_pRenderer && m_bRender)

  0019f	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001a6	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  001ab	74 2f		 je	 SHORT $LN8@LateTick
  001ad	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001b4	0f b6 80 b8 00
	00 00		 movzx	 eax, BYTE PTR [rax+184]
  001bb	85 c0		 test	 eax, eax
  001bd	74 1d		 je	 SHORT $LN8@LateTick

; 82   : 		m_pRenderer->Add_RenderGroup(CRenderer::RENDER_ALPHABLEND, this);

  001bf	4c 8b 85 80 01
	00 00		 mov	 r8, QWORD PTR this$[rbp]
  001c6	ba 03 00 00 00	 mov	 edx, 3
  001cb	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001d2	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  001d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Add_RenderGroup@CRenderer@Engine@@QEAAJW4RENDER_GROUP@12@PEAVCGameObject@2@@Z
$LN8@LateTick:

; 83   : 
; 84   : 	return;
; 85   : }

  001dc	48 8d a5 60 01
	00 00		 lea	 rsp, QWORD PTR [rbp+352]
  001e3	5f		 pop	 rdi
  001e4	5e		 pop	 rsi
  001e5	5d		 pop	 rbp
  001e6	c3		 ret	 0
?LateTick@CSkillBlueEffect@Client@@UEAAXN@Z ENDP	; Client::CSkillBlueEffect::LateTick
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
;	COMDAT ?Tick@CSkillBlueEffect@Client@@UEAAXN@Z
_TEXT	SEGMENT
this$ = 224
TimeDelta$ = 232
?Tick@CSkillBlueEffect@Client@@UEAAXN@Z PROC		; Client::CSkillBlueEffect::Tick, COMDAT

; 47   : {

$LN3:
  00000	f2 0f 11 4c 24
	10		 movsd	 QWORD PTR [rsp+16], xmm1
  00006	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000b	55		 push	 rbp
  0000c	57		 push	 rdi
  0000d	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00014	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 48   : 	__super::Tick(TimeDelta);

  00030	f2 0f 10 8d e8
	00 00 00	 movsd	 xmm1, QWORD PTR TimeDelta$[rbp]
  00038	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Tick@CGameObject@Engine@@UEAAXN@Z

; 49   : 
; 50   : 	return;
; 51   : }

  00045	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?Tick@CSkillBlueEffect@Client@@UEAAXN@Z ENDP		; Client::CSkillBlueEffect::Tick
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
;	COMDAT ?Initialize@CSkillBlueEffect@Client@@UEAAJPEAX@Z
_TEXT	SEGMENT
$T1 = 208
$T2 = 256
this$ = 320
pArg$ = 328
?Initialize@CSkillBlueEffect@Client@@UEAAJPEAX@Z PROC	; Client::CSkillBlueEffect::Initialize, COMDAT

; 28   : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]

; 29   : 	if (FAILED(__super::Initialize(pArg)))

  0002f	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR pArg$[rbp]
  00036	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Initialize@CGameObject@Engine@@UEAAJPEAX@Z
  00043	85 c0		 test	 eax, eax
  00045	7d 0a		 jge	 SHORT $LN2@Initialize

; 30   : 		return E_FAIL;

  00047	b8 05 40 00 80	 mov	 eax, -2147467259	; ffffffff80004005H
  0004c	e9 ba 00 00 00	 jmp	 $LN1@Initialize
$LN2@Initialize:

; 31   : 
; 32   : 	if (FAILED(Add_Components()))

  00051	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?Add_Components@CSkillBlueEffect@Client@@AEAAJXZ ; Client::CSkillBlueEffect::Add_Components
  0005d	85 c0		 test	 eax, eax
  0005f	7d 0a		 jge	 SHORT $LN3@Initialize

; 33   : 		return E_FAIL;

  00061	b8 05 40 00 80	 mov	 eax, -2147467259	; ffffffff80004005H
  00066	e9 a0 00 00 00	 jmp	 $LN1@Initialize
$LN3@Initialize:

; 34   : 
; 35   : 	if (pArg != nullptr)

  0006b	48 83 bd 48 01
	00 00 00	 cmp	 QWORD PTR pArg$[rbp], 0
  00073	74 3e		 je	 SHORT $LN4@Initialize

; 36   : 	{
; 37   : 		m_pOwner = (CCharacter*)pArg;

  00075	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007c	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR pArg$[rbp]
  00083	48 89 88 a8 00
	00 00		 mov	 QWORD PTR [rax+168], rcx

; 38   : 		m_pPlayerTransform = (CTransform*)m_pOwner->Find_Component(L"com_transform");

  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@CJMPMHDD@?$AAc?$AAo?$AAm?$AA_?$AAt?$AAr?$AAa?$AAn?$AAs?$AAf?$AAo?$AAr?$AAm?$AA?$AA@
  00091	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00098	48 8b 88 a8 00
	00 00		 mov	 rcx, QWORD PTR [rax+168]
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Find_Component@CGameObject@Engine@@QEAAPEAVCComponent@2@PEB_W@Z
  000a5	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ac	48 89 81 b0 00
	00 00		 mov	 QWORD PTR [rcx+176], rax
$LN4@Initialize:

; 39   : 	}
; 40   : 
; 41   : 	m_pTransform->SetRotation(VECTOR_RIGHT, XMConvertToRadians(90.f));

  000b3	0f 57 db	 xorps	 xmm3, xmm3
  000b6	0f 57 d2	 xorps	 xmm2, xmm2
  000b9	0f 57 c9	 xorps	 xmm1, xmm1
  000bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000c4	e8 00 00 00 00	 call	 ?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ; DirectX::XMVectorSet
  000c9	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  000d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42b40000
  000d8	e8 00 00 00 00	 call	 ?XMConvertToRadians@DirectX@@YAMM@Z ; DirectX::XMConvertToRadians
  000dd	0f 28 8d d0 00
	00 00		 movaps	 xmm1, XMMWORD PTR $T1[rbp]
  000e4	0f 29 8d 00 01
	00 00		 movaps	 XMMWORD PTR $T2[rbp], xmm1
  000eb	0f 28 d0	 movaps	 xmm2, xmm0
  000ee	48 8d 95 00 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  000f5	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fc	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00103	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?SetRotation@CTransform@Engine@@QEAAXT__m128@@M@Z

; 42   : 
; 43   : 	return S_OK;

  00109	33 c0		 xor	 eax, eax
$LN1@Initialize:

; 44   : }

  0010b	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00112	5f		 pop	 rdi
  00113	5d		 pop	 rbp
  00114	c3		 ret	 0
?Initialize@CSkillBlueEffect@Client@@UEAAJPEAX@Z ENDP	; Client::CSkillBlueEffect::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
;	COMDAT ?Initialize_Prototype@CSkillBlueEffect@Client@@UEAAJXZ
_TEXT	SEGMENT
this$ = 224
?Initialize_Prototype@CSkillBlueEffect@Client@@UEAAJXZ PROC ; Client::CSkillBlueEffect::Initialize_Prototype, COMDAT

; 20   : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 21   : 	if (FAILED(__super::Initialize_Prototype()))

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?Initialize_Prototype@CGameObject@Engine@@UEAAJXZ
  00037	85 c0		 test	 eax, eax
  00039	7d 07		 jge	 SHORT $LN2@Initialize

; 22   : 		return E_FAIL;

  0003b	b8 05 40 00 80	 mov	 eax, -2147467259	; ffffffff80004005H
  00040	eb 02		 jmp	 SHORT $LN1@Initialize
$LN2@Initialize:

; 23   : 
; 24   : 	return S_OK;

  00042	33 c0		 xor	 eax, eax
$LN1@Initialize:

; 25   : }

  00044	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?Initialize_Prototype@CSkillBlueEffect@Client@@UEAAJXZ ENDP ; Client::CSkillBlueEffect::Initialize_Prototype
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
;	COMDAT ??1CSkillBlueEffect@Client@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1CSkillBlueEffect@Client@@UEAA@XZ PROC		; Client::CSkillBlueEffect::~CSkillBlueEffect, COMDAT

; 12   : }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1CGameObject@Engine@@MEAA@XZ
  00037	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003e	5f		 pop	 rdi
  0003f	5d		 pop	 rbp
  00040	c3		 ret	 0
??1CSkillBlueEffect@Client@@UEAA@XZ ENDP		; Client::CSkillBlueEffect::~CSkillBlueEffect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
; File c:\users\arcco\documents\github\framework\client\public\skillblueeffect.h
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
; File c:\users\arcco\documents\github\framework\client\public\skillblueeffect.h
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
;	COMDAT ??0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
rhs$ = 264
??0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z PROC		; Client::CSkillBlueEffect::CSkillBlueEffect, COMDAT

; 16   : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 15   : 	: CGameObject(rhs)

  0003a	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR rhs$[rbp]
  00041	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0CGameObject@Engine@@IEAA@AEBV01@@Z
  0004e	90		 npad	 1

; 16   : {

  0004f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00056	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7CSkillBlueEffect@Client@@6B@
  0005d	48 89 08	 mov	 QWORD PTR [rax], rcx
; File c:\users\arcco\documents\github\framework\client\public\skillblueeffect.h

; 43   : 	CRenderer* m_pRenderer = nullptr;

  00060	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0

; 44   : 	CTransform* m_pTransform = nullptr;

  0006f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00076	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 45   : 	CVIBuffer_Rect* m_pVIBuffer = nullptr;

  00081	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00088	48 c7 80 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+136], 0

; 46   : 	CShader* m_pShader = nullptr;

  00093	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009a	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0

; 47   : 	CTexture* m_pDiffuseTexture = nullptr;

  000a5	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ac	48 c7 80 98 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+152], 0

; 48   : 	CTexture* m_pMaskTexture = nullptr;

  000b7	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000be	48 c7 80 a0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+160], 0

; 49   : private:
; 50   : 	class CCharacter* m_pOwner = nullptr;

  000c9	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d0	48 c7 80 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+168], 0

; 51   : 	CTransform* m_pPlayerTransform = nullptr;

  000db	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e2	48 c7 80 b0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+176], 0

; 52   : 
; 53   : 	_bool m_bRender = false;

  000ed	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f4	c6 80 b8 00 00
	00 00		 mov	 BYTE PTR [rax+184], 0
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp

; 16   : {

  000fb	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00102	48 05 bc 00 00
	00		 add	 rax, 188		; 000000bcH
  00108	48 8b c8	 mov	 rcx, rax
  0010b	e8 00 00 00 00	 call	 ??0XMFLOAT4X4@DirectX@@QEAA@XZ ; DirectX::XMFLOAT4X4::XMFLOAT4X4
; File c:\users\arcco\documents\github\framework\client\public\skillblueeffect.h

; 62   : 	_float m_fAlphaAcc = 2.f;

  00110	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00117	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0011f	f3 0f 11 80 9c
	01 00 00	 movss	 DWORD PTR [rax+412], xmm0
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp

; 17   : }

  00127	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0012e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00135	5f		 pop	 rdi
  00136	5d		 pop	 rbp
  00137	c3		 ret	 0
??0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z ENDP		; Client::CSkillBlueEffect::CSkillBlueEffect
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
rhs$ = 264
?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z@4HA PROC ; `Client::CSkillBlueEffect::CSkillBlueEffect'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1CGameObject@Engine@@MEAA@XZ
  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	5f		 pop	 rdi
  00026	5d		 pop	 rbp
  00027	c3		 ret	 0
?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z@4HA ENDP ; `Client::CSkillBlueEffect::CSkillBlueEffect'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
rhs$ = 264
?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z@4HA PROC ; `Client::CSkillBlueEffect::CSkillBlueEffect'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1CGameObject@Engine@@MEAA@XZ
  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	5f		 pop	 rdi
  00026	5d		 pop	 rbp
  00027	c3		 ret	 0
?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@AEBV01@@Z@4HA ENDP ; `Client::CSkillBlueEffect::CSkillBlueEffect'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
; File c:\users\arcco\documents\github\framework\client\public\skillblueeffect.h
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
; File c:\users\arcco\documents\github\framework\client\public\skillblueeffect.h
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
;	COMDAT ??0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
pDevice$ = 264
pContext$ = 272
??0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z PROC ; Client::CSkillBlueEffect::CSkillBlueEffect, COMDAT

; 11   : {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 10   : 	: CGameObject(pDevice, pContext)

  0003f	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR pContext$[rbp]
  00046	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR pDevice$[rbp]
  0004d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0CGameObject@Engine@@IEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
  0005a	90		 npad	 1

; 11   : {

  0005b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7CSkillBlueEffect@Client@@6B@
  00069	48 89 08	 mov	 QWORD PTR [rax], rcx
; File c:\users\arcco\documents\github\framework\client\public\skillblueeffect.h

; 43   : 	CRenderer* m_pRenderer = nullptr;

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0

; 44   : 	CTransform* m_pTransform = nullptr;

  0007b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00082	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 45   : 	CVIBuffer_Rect* m_pVIBuffer = nullptr;

  0008d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00094	48 c7 80 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+136], 0

; 46   : 	CShader* m_pShader = nullptr;

  0009f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a6	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0

; 47   : 	CTexture* m_pDiffuseTexture = nullptr;

  000b1	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b8	48 c7 80 98 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+152], 0

; 48   : 	CTexture* m_pMaskTexture = nullptr;

  000c3	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ca	48 c7 80 a0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+160], 0

; 49   : private:
; 50   : 	class CCharacter* m_pOwner = nullptr;

  000d5	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000dc	48 c7 80 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+168], 0

; 51   : 	CTransform* m_pPlayerTransform = nullptr;

  000e7	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ee	48 c7 80 b0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+176], 0

; 52   : 
; 53   : 	_bool m_bRender = false;

  000f9	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00100	c6 80 b8 00 00
	00 00		 mov	 BYTE PTR [rax+184], 0
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp

; 11   : {

  00107	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0010e	48 05 bc 00 00
	00		 add	 rax, 188		; 000000bcH
  00114	48 8b c8	 mov	 rcx, rax
  00117	e8 00 00 00 00	 call	 ??0XMFLOAT4X4@DirectX@@QEAA@XZ ; DirectX::XMFLOAT4X4::XMFLOAT4X4
; File c:\users\arcco\documents\github\framework\client\public\skillblueeffect.h

; 62   : 	_float m_fAlphaAcc = 2.f;

  0011c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00123	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0012b	f3 0f 11 80 9c
	01 00 00	 movss	 DWORD PTR [rax+412], xmm0
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp

; 12   : }

  00133	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0013a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00141	5f		 pop	 rdi
  00142	5d		 pop	 rbp
  00143	c3		 ret	 0
??0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z ENDP ; Client::CSkillBlueEffect::CSkillBlueEffect
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
pDevice$ = 264
pContext$ = 272
?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA PROC ; `Client::CSkillBlueEffect::CSkillBlueEffect'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1CGameObject@Engine@@MEAA@XZ
  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	5f		 pop	 rdi
  00026	5d		 pop	 rbp
  00027	c3		 ret	 0
?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA ENDP ; `Client::CSkillBlueEffect::CSkillBlueEffect'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
pDevice$ = 264
pContext$ = 272
?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA PROC ; `Client::CSkillBlueEffect::CSkillBlueEffect'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1CGameObject@Engine@@MEAA@XZ
  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	5f		 pop	 rdi
  00026	5d		 pop	 rbp
  00027	c3		 ret	 0
?dtor$0@?0???0CSkillBlueEffect@Client@@QEAA@PEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA ENDP ; `Client::CSkillBlueEffect::CSkillBlueEffect'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
;	COMDAT ?XMScalarSinCos@DirectX@@YAXPEAM0M@Z
_TEXT	SEGMENT
quotient$ = 4
y$ = 36
sign$ = 68
y2$ = 100
p$ = 132
pSin$ = 384
pCos$ = 392
Value$ = 400
?XMScalarSinCos@DirectX@@YAXPEAM0M@Z PROC		; DirectX::XMScalarSinCos, COMDAT

; 2275 : {

$LN11:
  00000	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  00006	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00010	55		 push	 rbp
  00011	57		 push	 rdi
  00012	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8b fc	 mov	 rdi, rsp
  00021	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]

; 2276 :     assert(pSin);

  00035	48 83 bd 80 01
	00 00 00	 cmp	 QWORD PTR pSin$[rbp], 0
  0003d	75 21		 jne	 SHORT $LN9@XMScalarSi
  0003f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??XMScalarSinCos@DirectX@@YAXPEAM0M@Z@4JA
  00045	ff c0		 inc	 eax
  00047	44 8b c0	 mov	 r8d, eax
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1IO@CGGKMODJ@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_19MFJHDIJG@?$AAp?$AAS?$AAi?$AAn?$AA?$AA@
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005e	33 c0		 xor	 eax, eax
$LN9@XMScalarSi:

; 2277 :     assert(pCos);

  00060	48 83 bd 88 01
	00 00 00	 cmp	 QWORD PTR pCos$[rbp], 0
  00068	75 22		 jne	 SHORT $LN10@XMScalarSi
  0006a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??XMScalarSinCos@DirectX@@YAXPEAM0M@Z@4JA
  00070	83 c0 02	 add	 eax, 2
  00073	44 8b c0	 mov	 r8d, eax
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1IO@CGGKMODJ@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_19MNAGGFOC@?$AAp?$AAC?$AAo?$AAs?$AA?$AA@
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0008a	33 c0		 xor	 eax, eax
$LN10@XMScalarSi:

; 2278 : 
; 2279 :     // Map Value to y in [-pi,pi], x = 2*pi*quotient + remainder.
; 2280 :     float quotient = XM_1DIV2PI*Value;

  0008c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e22f983
  00094	f3 0f 59 85 90
	01 00 00	 mulss	 xmm0, DWORD PTR Value$[rbp]
  0009c	f3 0f 11 45 04	 movss	 DWORD PTR quotient$[rbp], xmm0

; 2281 :     if (Value >= 0.0f)

  000a1	f3 0f 10 85 90
	01 00 00	 movss	 xmm0, DWORD PTR Value$[rbp]
  000a9	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  000b0	72 1c		 jb	 SHORT $LN2@XMScalarSi

; 2282 :     {
; 2283 :         quotient = (float)((int)(quotient + 0.5f));

  000b2	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR quotient$[rbp]
  000b7	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000bf	f3 0f 2c c0	 cvttss2si eax, xmm0
  000c3	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000c7	f3 0f 11 45 04	 movss	 DWORD PTR quotient$[rbp], xmm0

; 2284 :     }
; 2285 :     else

  000cc	eb 1a		 jmp	 SHORT $LN3@XMScalarSi
$LN2@XMScalarSi:

; 2286 :     {
; 2287 :         quotient = (float)((int)(quotient - 0.5f));

  000ce	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR quotient$[rbp]
  000d3	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  000db	f3 0f 2c c0	 cvttss2si eax, xmm0
  000df	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000e3	f3 0f 11 45 04	 movss	 DWORD PTR quotient$[rbp], xmm0
$LN3@XMScalarSi:

; 2288 :     }
; 2289 :     float y = Value - XM_2PI*quotient;

  000e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c90fdb
  000f0	f3 0f 59 45 04	 mulss	 xmm0, DWORD PTR quotient$[rbp]
  000f5	f3 0f 10 8d 90
	01 00 00	 movss	 xmm1, DWORD PTR Value$[rbp]
  000fd	f3 0f 5c c8	 subss	 xmm1, xmm0
  00101	0f 28 c1	 movaps	 xmm0, xmm1
  00104	f3 0f 11 45 24	 movss	 DWORD PTR y$[rbp], xmm0

; 2290 : 
; 2291 :     // Map y to [-pi/2,pi/2] with sin(y) = sin(Value).
; 2292 :     float sign;
; 2293 :     if (y > XM_PIDIV2)

  00109	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR y$[rbp]
  0010e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3fc90fdb
  00115	76 21		 jbe	 SHORT $LN4@XMScalarSi

; 2294 :     {
; 2295 :         y = XM_PI - y;

  00117	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40490fdb
  0011f	f3 0f 5c 45 24	 subss	 xmm0, DWORD PTR y$[rbp]
  00124	f3 0f 11 45 24	 movss	 DWORD PTR y$[rbp], xmm0

; 2296 :         sign = -1.0f;

  00129	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00131	f3 0f 11 45 44	 movss	 DWORD PTR sign$[rbp], xmm0
  00136	eb 3c		 jmp	 SHORT $LN5@XMScalarSi
$LN4@XMScalarSi:

; 2297 :     }
; 2298 :     else if (y < -XM_PIDIV2)

  00138	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  00140	0f 2f 45 24	 comiss	 xmm0, DWORD PTR y$[rbp]
  00144	76 21		 jbe	 SHORT $LN6@XMScalarSi

; 2299 :     {
; 2300 :         y = -XM_PI - y;

  00146	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0490fdb
  0014e	f3 0f 5c 45 24	 subss	 xmm0, DWORD PTR y$[rbp]
  00153	f3 0f 11 45 24	 movss	 DWORD PTR y$[rbp], xmm0

; 2301 :         sign = -1.0f;

  00158	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00160	f3 0f 11 45 44	 movss	 DWORD PTR sign$[rbp], xmm0

; 2302 :     }
; 2303 :     else

  00165	eb 0d		 jmp	 SHORT $LN7@XMScalarSi
$LN6@XMScalarSi:

; 2304 :     {
; 2305 :         sign = +1.0f;

  00167	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0016f	f3 0f 11 45 44	 movss	 DWORD PTR sign$[rbp], xmm0
$LN7@XMScalarSi:
$LN5@XMScalarSi:

; 2306 :     }
; 2307 : 
; 2308 :     float y2 = y * y;

  00174	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR y$[rbp]
  00179	f3 0f 59 45 24	 mulss	 xmm0, DWORD PTR y$[rbp]
  0017e	f3 0f 11 45 64	 movss	 DWORD PTR y2$[rbp], xmm0

; 2309 : 
; 2310 :     // 11-degree minimax approximation
; 2311 :     *pSin = ( ( ( ( (-2.3889859e-08f * y2 + 2.7525562e-06f) * y2 - 0.00019840874f ) * y2 + 0.0083333310f ) * y2 - 0.16666667f ) * y2 + 1.0f ) * y;

  00183	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@b2cd365b
  0018b	f3 0f 59 45 64	 mulss	 xmm0, DWORD PTR y2$[rbp]
  00190	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3638b88e
  00198	f3 0f 59 45 64	 mulss	 xmm0, DWORD PTR y2$[rbp]
  0019d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@39500bf1
  001a5	f3 0f 59 45 64	 mulss	 xmm0, DWORD PTR y2$[rbp]
  001aa	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3c088886
  001b2	f3 0f 59 45 64	 mulss	 xmm0, DWORD PTR y2$[rbp]
  001b7	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3e2aaaab
  001bf	f3 0f 59 45 64	 mulss	 xmm0, DWORD PTR y2$[rbp]
  001c4	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  001cc	f3 0f 59 45 24	 mulss	 xmm0, DWORD PTR y$[rbp]
  001d1	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR pSin$[rbp]
  001d8	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 2312 : 
; 2313 :     // 10-degree minimax approximation
; 2314 :     float p = ( ( ( ( -2.6051615e-07f * y2 + 2.4760495e-05f ) * y2 - 0.0013888378f ) * y2 + 0.041666638f ) * y2 - 0.5f ) * y2 + 1.0f;

  001dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@b48bdd11
  001e4	f3 0f 59 45 64	 mulss	 xmm0, DWORD PTR y2$[rbp]
  001e9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@37cfb4c2
  001f1	f3 0f 59 45 64	 mulss	 xmm0, DWORD PTR y2$[rbp]
  001f6	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3ab609aa
  001fe	f3 0f 59 45 64	 mulss	 xmm0, DWORD PTR y2$[rbp]
  00203	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3d2aaaa3
  0020b	f3 0f 59 45 64	 mulss	 xmm0, DWORD PTR y2$[rbp]
  00210	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  00218	f3 0f 59 45 64	 mulss	 xmm0, DWORD PTR y2$[rbp]
  0021d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00225	f3 0f 11 85 84
	00 00 00	 movss	 DWORD PTR p$[rbp], xmm0

; 2315 :     *pCos = sign*p;

  0022d	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR sign$[rbp]
  00232	f3 0f 59 85 84
	00 00 00	 mulss	 xmm0, DWORD PTR p$[rbp]
  0023a	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR pCos$[rbp]
  00241	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 2316 : }

  00245	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  0024c	5f		 pop	 rdi
  0024d	5d		 pop	 rbp
  0024e	c3		 ret	 0
?XMScalarSinCos@DirectX@@YAXPEAM0M@Z ENDP		; DirectX::XMScalarSinCos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
;	COMDAT ?XMMatrixRotationX@DirectX@@YQ?AUXMMATRIX@1@M@Z
_TEXT	SEGMENT
SinAngle$ = 4
CosAngle$ = 36
vSin$ = 80
vCos$ = 128
M$ = 176
$T6 = 656
$T7 = 704
$T8 = 752
$T9 = 800
$T10 = 848
$T11 = 896
$T12 = 944
$T13 = 992
__$ArrayPad$ = 1016
Angle$ = 1056
?XMMatrixRotationX@DirectX@@YQ?AUXMMATRIX@1@M@Z PROC	; DirectX::XMMatrixRotationX, COMDAT

; 1245 : {

$LN3:
  00000	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  00006	55		 push	 rbp
  00007	57		 push	 rdi
  00008	48 81 ec 38 04
	00 00		 sub	 rsp, 1080		; 00000438H
  0000f	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 0e 01 00 00	 mov	 ecx, 270		; 0000010eH
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002a	48 33 c5	 xor	 rax, rbp
  0002d	48 89 85 f8 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1246 : #if defined(_XM_NO_INTRINSICS_)
; 1247 :  
; 1248 :     float    fSinAngle;
; 1249 :     float    fCosAngle;
; 1250 :     XMScalarSinCos(&fSinAngle, &fCosAngle, Angle);
; 1251 : 
; 1252 :     XMMATRIX M;
; 1253 :     M.m[0][0] = 1.0f;
; 1254 :     M.m[0][1] = 0.0f;
; 1255 :     M.m[0][2] = 0.0f;
; 1256 :     M.m[0][3] = 0.0f;
; 1257 : 
; 1258 :     M.m[1][0] = 0.0f;
; 1259 :     M.m[1][1] = fCosAngle;
; 1260 :     M.m[1][2] = fSinAngle;
; 1261 :     M.m[1][3] = 0.0f;
; 1262 : 
; 1263 :     M.m[2][0] = 0.0f;
; 1264 :     M.m[2][1] = -fSinAngle;
; 1265 :     M.m[2][2] = fCosAngle;
; 1266 :     M.m[2][3] = 0.0f;
; 1267 : 
; 1268 :     M.m[3][0] = 0.0f;
; 1269 :     M.m[3][1] = 0.0f;
; 1270 :     M.m[3][2] = 0.0f;
; 1271 :     M.m[3][3] = 1.0f;
; 1272 :     return M;
; 1273 : 
; 1274 : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 1275 :     float    fSinAngle;
; 1276 :     float    fCosAngle;
; 1277 :     XMScalarSinCos(&fSinAngle, &fCosAngle, Angle);
; 1278 : 
; 1279 :     const XMVECTOR Zero = vdupq_n_f32(0);
; 1280 : 
; 1281 :     XMVECTOR T1 = vsetq_lane_f32( fCosAngle, Zero, 1 );
; 1282 :     T1 = vsetq_lane_f32( fSinAngle, T1, 2 );
; 1283 : 
; 1284 :     XMVECTOR T2 = vsetq_lane_f32( -fSinAngle, Zero, 1 );
; 1285 :     T2 = vsetq_lane_f32( fCosAngle, T2, 2 );
; 1286 : 
; 1287 :     XMMATRIX M;
; 1288 :     M.r[0] = g_XMIdentityR0.v;
; 1289 :     M.r[1] = T1;
; 1290 :     M.r[2] = T2;
; 1291 :     M.r[3] = g_XMIdentityR3.v;
; 1292 :     return M;
; 1293 : #elif defined(_XM_SSE_INTRINSICS_)
; 1294 :     float    SinAngle;
; 1295 :     float    CosAngle;
; 1296 :     XMScalarSinCos(&SinAngle, &CosAngle, Angle);

  00034	f3 0f 10 95 20
	04 00 00	 movss	 xmm2, DWORD PTR Angle$[rbp]
  0003c	48 8d 55 24	 lea	 rdx, QWORD PTR CosAngle$[rbp]
  00040	48 8d 4d 04	 lea	 rcx, QWORD PTR SinAngle$[rbp]
  00044	e8 00 00 00 00	 call	 ?XMScalarSinCos@DirectX@@YAXPEAM0M@Z ; DirectX::XMScalarSinCos

; 1297 : 
; 1298 :     XMVECTOR vSin = _mm_set_ss(SinAngle);

  00049	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR SinAngle$[rbp]
  0004e	0f 57 c9	 xorps	 xmm1, xmm1
  00051	f3 0f 10 c8	 movss	 xmm1, xmm0
  00055	0f 28 c1	 movaps	 xmm0, xmm1
  00058	0f 29 85 90 02
	00 00		 movaps	 XMMWORD PTR $T6[rbp], xmm0
  0005f	0f 28 85 90 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T6[rbp]
  00066	0f 29 45 50	 movaps	 XMMWORD PTR vSin$[rbp], xmm0

; 1299 :     XMVECTOR vCos = _mm_set_ss(CosAngle);

  0006a	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR CosAngle$[rbp]
  0006f	0f 57 c9	 xorps	 xmm1, xmm1
  00072	f3 0f 10 c8	 movss	 xmm1, xmm0
  00076	0f 28 c1	 movaps	 xmm0, xmm1
  00079	0f 29 85 c0 02
	00 00		 movaps	 XMMWORD PTR $T7[rbp], xmm0
  00080	0f 28 85 c0 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T7[rbp]
  00087	0f 29 85 80 00
	00 00		 movaps	 XMMWORD PTR vCos$[rbp], xmm0

; 1300 :     // x = 0,y = cos,z = sin, w = 0
; 1301 :     vCos = _mm_shuffle_ps(vCos,vSin,_MM_SHUFFLE(3,0,0,3));

  0008e	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vCos$[rbp]
  00095	0f c6 45 50 c3	 shufps	 xmm0, XMMWORD PTR vSin$[rbp], 195 ; 000000c3H
  0009a	0f 29 85 f0 02
	00 00		 movaps	 XMMWORD PTR $T8[rbp], xmm0
  000a1	0f 28 85 f0 02
	00 00		 movaps	 xmm0, XMMWORD PTR $T8[rbp]
  000a8	0f 29 85 80 00
	00 00		 movaps	 XMMWORD PTR vCos$[rbp], xmm0

; 1302 :     XMMATRIX M;

  000af	48 8d 8d b0 00
	00 00		 lea	 rcx, QWORD PTR M$[rbp]
  000b6	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QEAA@XZ ; DirectX::XMMATRIX::XMMATRIX

; 1303 :     M.r[0] = g_XMIdentityR0;

  000bb	48 8d 95 20 03
	00 00		 lea	 rdx, QWORD PTR $T9[rbp]
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR0
  000c9	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  000ce	b9 10 00 00 00	 mov	 ecx, 16
  000d3	48 6b c9 00	 imul	 rcx, rcx, 0
  000d7	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000da	0f 11 84 0d b0
	00 00 00	 movups	 XMMWORD PTR M$[rbp+rcx], xmm0

; 1304 :     M.r[1] = vCos;

  000e2	b8 10 00 00 00	 mov	 eax, 16
  000e7	48 6b c0 01	 imul	 rax, rax, 1
  000eb	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vCos$[rbp]
  000f2	0f 11 84 05 b0
	00 00 00	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1305 :     // x = 0,y = sin,z = cos, w = 0
; 1306 :     vCos = XM_PERMUTE_PS(vCos,_MM_SHUFFLE(3,1,2,0));

  000fa	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vCos$[rbp]
  00101	0f c6 85 80 00
	00 00 d8	 shufps	 xmm0, XMMWORD PTR vCos$[rbp], 216 ; 000000d8H
  00109	0f 29 85 50 03
	00 00		 movaps	 XMMWORD PTR $T10[rbp], xmm0
  00110	0f 28 85 50 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T10[rbp]
  00117	0f 29 85 80 00
	00 00		 movaps	 XMMWORD PTR vCos$[rbp], xmm0

; 1307 :     // x = 0,y = -sin,z = cos, w = 0
; 1308 :     vCos = _mm_mul_ps(vCos,g_XMNegateY);

  0011e	48 8d 95 b0 03
	00 00		 lea	 rdx, QWORD PTR $T12[rbp]
  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMNegateY@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMNegateY
  0012c	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00131	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vCos$[rbp]
  00138	0f 59 00	 mulps	 xmm0, XMMWORD PTR [rax]
  0013b	0f 29 85 80 03
	00 00		 movaps	 XMMWORD PTR $T11[rbp], xmm0
  00142	0f 28 85 80 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T11[rbp]
  00149	0f 29 85 80 00
	00 00		 movaps	 XMMWORD PTR vCos$[rbp], xmm0

; 1309 :     M.r[2] = vCos;

  00150	b8 10 00 00 00	 mov	 eax, 16
  00155	48 6b c0 02	 imul	 rax, rax, 2
  00159	0f 28 85 80 00
	00 00		 movaps	 xmm0, XMMWORD PTR vCos$[rbp]
  00160	0f 11 84 05 b0
	00 00 00	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1310 :     M.r[3] = g_XMIdentityR3;

  00168	48 8d 95 e0 03
	00 00		 lea	 rdx, QWORD PTR $T13[rbp]
  0016f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR3
  00176	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  0017b	b9 10 00 00 00	 mov	 ecx, 16
  00180	48 6b c9 03	 imul	 rcx, rcx, 3
  00184	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00187	0f 11 84 0d b0
	00 00 00	 movups	 XMMWORD PTR M$[rbp+rcx], xmm0

; 1311 :     return M;

  0018f	0f 28 9d e0 00
	00 00		 movaps	 xmm3, XMMWORD PTR M$[rbp+48]
  00196	0f 28 95 d0 00
	00 00		 movaps	 xmm2, XMMWORD PTR M$[rbp+32]
  0019d	0f 28 8d c0 00
	00 00		 movaps	 xmm1, XMMWORD PTR M$[rbp+16]
  001a4	0f 28 85 b0 00
	00 00		 movaps	 xmm0, XMMWORD PTR M$[rbp]

; 1312 : #endif
; 1313 : }

  001ab	f3 0f 7f 44 24
	20		 movdqu	 XMMWORD PTR [rsp+32], xmm0
  001b1	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  001b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?XMMatrixRotationX@DirectX@@YQ?AUXMMATRIX@1@M@Z$rtcFrameData
  001bc	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001c1	f3 0f 6f 44 24
	20		 movdqu	 xmm0, XMMWORD PTR [rsp+32]
  001c7	48 8b 8d f8 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001ce	48 33 cd	 xor	 rcx, rbp
  001d1	e8 00 00 00 00	 call	 __security_check_cookie
  001d6	48 8d a5 08 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1032]
  001dd	5f		 pop	 rdi
  001de	5d		 pop	 rbp
  001df	c3		 ret	 0
?XMMatrixRotationX@DirectX@@YQ?AUXMMATRIX@1@M@Z ENDP	; DirectX::XMMatrixRotationX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
;	COMDAT ?XMMatrixScaling@DirectX@@YQ?AUXMMATRIX@1@MMM@Z
_TEXT	SEGMENT
M$ = 16
$T4 = 304
$T5 = 352
$T6 = 400
__$ArrayPad$ = 424
ScaleX$ = 464
ScaleY$ = 472
ScaleZ$ = 480
?XMMatrixScaling@DirectX@@YQ?AUXMMATRIX@1@MMM@Z PROC	; DirectX::XMMatrixScaling, COMDAT

; 1148 : {

$LN3:
  00000	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  00006	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  0000c	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  00012	55		 push	 rbp
  00013	57		 push	 rdi
  00014	48 81 ec e8 01
	00 00		 sub	 rsp, 488		; 000001e8H
  0001b	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00020	48 8b fc	 mov	 rdi, rsp
  00023	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00036	48 33 c5	 xor	 rax, rbp
  00039	48 89 85 a8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1149 : #if defined(_XM_NO_INTRINSICS_)
; 1150 : 
; 1151 :     XMMATRIX M;
; 1152 :     M.m[0][0] = ScaleX;
; 1153 :     M.m[0][1] = 0.0f;
; 1154 :     M.m[0][2] = 0.0f;
; 1155 :     M.m[0][3] = 0.0f;
; 1156 : 
; 1157 :     M.m[1][0] = 0.0f;
; 1158 :     M.m[1][1] = ScaleY;
; 1159 :     M.m[1][2] = 0.0f;
; 1160 :     M.m[1][3] = 0.0f;
; 1161 : 
; 1162 :     M.m[2][0] = 0.0f;
; 1163 :     M.m[2][1] = 0.0f;
; 1164 :     M.m[2][2] = ScaleZ;
; 1165 :     M.m[2][3] = 0.0f;
; 1166 : 
; 1167 :     M.m[3][0] = 0.0f;
; 1168 :     M.m[3][1] = 0.0f;
; 1169 :     M.m[3][2] = 0.0f;
; 1170 :     M.m[3][3] = 1.0f;
; 1171 :     return M;
; 1172 : 
; 1173 : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 1174 :     const XMVECTOR Zero = vdupq_n_f32(0);
; 1175 :     XMMATRIX M;
; 1176 :     M.r[0] = vsetq_lane_f32( ScaleX, Zero, 0 );
; 1177 :     M.r[1] = vsetq_lane_f32( ScaleY, Zero, 1 );
; 1178 :     M.r[2] = vsetq_lane_f32( ScaleZ, Zero, 2 );
; 1179 :     M.r[3] = g_XMIdentityR3.v;
; 1180 :     return M;
; 1181 : #elif defined(_XM_SSE_INTRINSICS_)
; 1182 :     XMMATRIX M;

  00040	48 8d 4d 10	 lea	 rcx, QWORD PTR M$[rbp]
  00044	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QEAA@XZ ; DirectX::XMMATRIX::XMMATRIX

; 1183 :     M.r[0] = _mm_set_ps( 0, 0, 0, ScaleX );

  00049	0f 57 c0	 xorps	 xmm0, xmm0
  0004c	f3 0f 10 8d d0
	01 00 00	 movss	 xmm1, DWORD PTR ScaleX$[rbp]
  00054	0f 14 c8	 unpcklps xmm1, xmm0
  00057	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000000000000000000000000000000
  0005e	0f 14 c8	 unpcklps xmm1, xmm0
  00061	0f 28 c1	 movaps	 xmm0, xmm1
  00064	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR $T4[rbp], xmm0
  0006b	b8 10 00 00 00	 mov	 eax, 16
  00070	48 6b c0 00	 imul	 rax, rax, 0
  00074	0f 28 85 30 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T4[rbp]
  0007b	0f 11 44 05 10	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1184 :     M.r[1] = _mm_set_ps( 0, 0, ScaleY, 0 );

  00080	0f 57 c0	 xorps	 xmm0, xmm0
  00083	f3 0f 10 8d d8
	01 00 00	 movss	 xmm1, DWORD PTR ScaleY$[rbp]
  0008b	0f 28 15 00 00
	00 00		 movaps	 xmm2, XMMWORD PTR __xmm@00000000000000000000000000000000
  00092	0f 14 c8	 unpcklps xmm1, xmm0
  00095	0f 28 c2	 movaps	 xmm0, xmm2
  00098	0f 14 c1	 unpcklps xmm0, xmm1
  0009b	0f 29 85 60 01
	00 00		 movaps	 XMMWORD PTR $T5[rbp], xmm0
  000a2	b8 10 00 00 00	 mov	 eax, 16
  000a7	48 6b c0 01	 imul	 rax, rax, 1
  000ab	0f 28 85 60 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T5[rbp]
  000b2	0f 11 44 05 10	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1185 :     M.r[2] = _mm_set_ps( 0, ScaleZ, 0, 0 );

  000b7	f3 0f 10 85 e0
	01 00 00	 movss	 xmm0, DWORD PTR ScaleZ$[rbp]
  000bf	0f 57 c9	 xorps	 xmm1, xmm1
  000c2	0f 14 c8	 unpcklps xmm1, xmm0
  000c5	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000000000000000000000000000000
  000cc	0f 14 c8	 unpcklps xmm1, xmm0
  000cf	0f 28 c1	 movaps	 xmm0, xmm1
  000d2	0f 29 85 90 01
	00 00		 movaps	 XMMWORD PTR $T6[rbp], xmm0
  000d9	b8 10 00 00 00	 mov	 eax, 16
  000de	48 6b c0 02	 imul	 rax, rax, 2
  000e2	0f 28 85 90 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T6[rbp]
  000e9	0f 11 44 05 10	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1186 :     M.r[3] = g_XMIdentityR3.v;

  000ee	b8 10 00 00 00	 mov	 eax, 16
  000f3	48 6b c0 03	 imul	 rax, rax, 3
  000f7	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B
  000fe	0f 11 44 05 10	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1187 :     return M;

  00103	0f 28 5d 40	 movaps	 xmm3, XMMWORD PTR M$[rbp+48]
  00107	0f 28 55 30	 movaps	 xmm2, XMMWORD PTR M$[rbp+32]
  0010b	0f 28 4d 20	 movaps	 xmm1, XMMWORD PTR M$[rbp+16]
  0010f	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR M$[rbp]

; 1188 : #endif
; 1189 : }

  00113	f3 0f 7f 44 24
	20		 movdqu	 XMMWORD PTR [rsp+32], xmm0
  00119	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  0011d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?XMMatrixScaling@DirectX@@YQ?AUXMMATRIX@1@MMM@Z$rtcFrameData
  00124	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00129	f3 0f 6f 44 24
	20		 movdqu	 xmm0, XMMWORD PTR [rsp+32]
  0012f	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00136	48 33 cd	 xor	 rcx, rbp
  00139	e8 00 00 00 00	 call	 __security_check_cookie
  0013e	48 8d a5 b8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+440]
  00145	5f		 pop	 rdi
  00146	5d		 pop	 rbp
  00147	c3		 ret	 0
?XMMatrixScaling@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ENDP	; DirectX::XMMatrixScaling
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
;	COMDAT ?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z
_TEXT	SEGMENT
M1$ = 16
mResult$ = 112
vW$ = 208
vX$ = 256
vY$ = 304
vZ$ = 352
$T5 = 1360
$T6 = 1408
$T7 = 1456
$T8 = 1504
$T9 = 1552
$T10 = 1600
$T11 = 1648
$T12 = 1696
$T13 = 1744
$T14 = 1792
$T15 = 1840
$T16 = 1888
$T17 = 1936
$T18 = 1984
$T19 = 2032
$T20 = 2080
$T21 = 2128
$T22 = 2176
$T23 = 2224
$T24 = 2272
$T25 = 2320
$T26 = 2368
$T27 = 2416
$T28 = 2464
$T29 = 2512
$T30 = 2560
$T31 = 2608
$T32 = 2656
$T33 = 2704
$T34 = 2752
$T35 = 2800
$T36 = 2848
$T37 = 2896
$T38 = 2944
$T39 = 2992
$T40 = 3040
$T41 = 3088
$T42 = 3136
$T43 = 3184
$T44 = 3232
$T45 = 3280
$T46 = 3328
$T47 = 3376
$T48 = 3424
__$ArrayPad$ = 3448
M2$ = 3496
?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z PROC ; DirectX::XMMatrixMultiply, COMDAT

; 226  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec b8 0d
	00 00		 sub	 rsp, 3512		; 00000db8H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 6e 03 00 00	 mov	 ecx, 878		; 0000036eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00029	48 33 c5	 xor	 rax, rbp
  0002c	48 89 85 78 0d
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00033	48 8d 45 10	 lea	 rax, QWORD PTR M1$[rbp]
  00037	48 89 84 24 d0
	0d 00 00	 mov	 QWORD PTR [rsp+3536], rax
  0003f	0f 29 5d 40	 movaps	 XMMWORD PTR M1$[rbp+48], xmm3
  00043	0f 29 55 30	 movaps	 XMMWORD PTR M1$[rbp+32], xmm2
  00047	0f 29 4d 20	 movaps	 XMMWORD PTR M1$[rbp+16], xmm1
  0004b	0f 29 45 10	 movaps	 XMMWORD PTR M1$[rbp], xmm0

; 227  : #if defined(_XM_NO_INTRINSICS_)
; 228  :     XMMATRIX mResult;
; 229  :     // Cache the invariants in registers
; 230  :     float x = M1.m[0][0];
; 231  :     float y = M1.m[0][1];
; 232  :     float z = M1.m[0][2];
; 233  :     float w = M1.m[0][3];
; 234  :     // Perform the operation on the first row
; 235  :     mResult.m[0][0] = (M2.m[0][0]*x)+(M2.m[1][0]*y)+(M2.m[2][0]*z)+(M2.m[3][0]*w);
; 236  :     mResult.m[0][1] = (M2.m[0][1]*x)+(M2.m[1][1]*y)+(M2.m[2][1]*z)+(M2.m[3][1]*w);
; 237  :     mResult.m[0][2] = (M2.m[0][2]*x)+(M2.m[1][2]*y)+(M2.m[2][2]*z)+(M2.m[3][2]*w);
; 238  :     mResult.m[0][3] = (M2.m[0][3]*x)+(M2.m[1][3]*y)+(M2.m[2][3]*z)+(M2.m[3][3]*w);
; 239  :     // Repeat for all the other rows
; 240  :     x = M1.m[1][0];
; 241  :     y = M1.m[1][1];
; 242  :     z = M1.m[1][2];
; 243  :     w = M1.m[1][3];
; 244  :     mResult.m[1][0] = (M2.m[0][0]*x)+(M2.m[1][0]*y)+(M2.m[2][0]*z)+(M2.m[3][0]*w);
; 245  :     mResult.m[1][1] = (M2.m[0][1]*x)+(M2.m[1][1]*y)+(M2.m[2][1]*z)+(M2.m[3][1]*w);
; 246  :     mResult.m[1][2] = (M2.m[0][2]*x)+(M2.m[1][2]*y)+(M2.m[2][2]*z)+(M2.m[3][2]*w);
; 247  :     mResult.m[1][3] = (M2.m[0][3]*x)+(M2.m[1][3]*y)+(M2.m[2][3]*z)+(M2.m[3][3]*w);
; 248  :     x = M1.m[2][0];
; 249  :     y = M1.m[2][1];
; 250  :     z = M1.m[2][2];
; 251  :     w = M1.m[2][3];
; 252  :     mResult.m[2][0] = (M2.m[0][0]*x)+(M2.m[1][0]*y)+(M2.m[2][0]*z)+(M2.m[3][0]*w);
; 253  :     mResult.m[2][1] = (M2.m[0][1]*x)+(M2.m[1][1]*y)+(M2.m[2][1]*z)+(M2.m[3][1]*w);
; 254  :     mResult.m[2][2] = (M2.m[0][2]*x)+(M2.m[1][2]*y)+(M2.m[2][2]*z)+(M2.m[3][2]*w);
; 255  :     mResult.m[2][3] = (M2.m[0][3]*x)+(M2.m[1][3]*y)+(M2.m[2][3]*z)+(M2.m[3][3]*w);
; 256  :     x = M1.m[3][0];
; 257  :     y = M1.m[3][1];
; 258  :     z = M1.m[3][2];
; 259  :     w = M1.m[3][3];
; 260  :     mResult.m[3][0] = (M2.m[0][0]*x)+(M2.m[1][0]*y)+(M2.m[2][0]*z)+(M2.m[3][0]*w);
; 261  :     mResult.m[3][1] = (M2.m[0][1]*x)+(M2.m[1][1]*y)+(M2.m[2][1]*z)+(M2.m[3][1]*w);
; 262  :     mResult.m[3][2] = (M2.m[0][2]*x)+(M2.m[1][2]*y)+(M2.m[2][2]*z)+(M2.m[3][2]*w);
; 263  :     mResult.m[3][3] = (M2.m[0][3]*x)+(M2.m[1][3]*y)+(M2.m[2][3]*z)+(M2.m[3][3]*w);
; 264  :     return mResult;
; 265  : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 266  :     XMMATRIX mResult;
; 267  :     float32x2_t VL = vget_low_f32( M1.r[0] );
; 268  :     float32x2_t VH = vget_high_f32( M1.r[0] );
; 269  :     // Perform the operation on the first row
; 270  :     XMVECTOR vX = XM_VMULQ_LANE_F32(M2.r[0], VL, 0);
; 271  :     XMVECTOR vY = XM_VMULQ_LANE_F32(M2.r[1], VL, 1);
; 272  :     XMVECTOR vZ = XM_VMLAQ_LANE_F32(vX, M2.r[2], VH, 0);
; 273  :     XMVECTOR vW = XM_VMLAQ_LANE_F32(vY, M2.r[3], VH, 1);
; 274  :     mResult.r[0] = vaddq_f32( vZ, vW );
; 275  :     // Repeat for the other 3 rows
; 276  :     VL = vget_low_f32( M1.r[1] );
; 277  :     VH = vget_high_f32( M1.r[1] );
; 278  :     vX = XM_VMULQ_LANE_F32(M2.r[0], VL, 0);
; 279  :     vY = XM_VMULQ_LANE_F32(M2.r[1], VL, 1);
; 280  :     vZ = XM_VMLAQ_LANE_F32(vX, M2.r[2], VH, 0);
; 281  :     vW = XM_VMLAQ_LANE_F32(vY, M2.r[3], VH, 1);
; 282  :     mResult.r[1] = vaddq_f32( vZ, vW );
; 283  :     VL = vget_low_f32( M1.r[2] );
; 284  :     VH = vget_high_f32( M1.r[2] );
; 285  :     vX = XM_VMULQ_LANE_F32(M2.r[0], VL, 0);
; 286  :     vY = XM_VMULQ_LANE_F32(M2.r[1], VL, 1);
; 287  :     vZ = XM_VMLAQ_LANE_F32(vX, M2.r[2], VH, 0);
; 288  :     vW = XM_VMLAQ_LANE_F32(vY, M2.r[3], VH, 1);
; 289  :     mResult.r[2] = vaddq_f32( vZ, vW );
; 290  :     VL = vget_low_f32( M1.r[3] );
; 291  :     VH = vget_high_f32( M1.r[3] );
; 292  :     vX = XM_VMULQ_LANE_F32(M2.r[0], VL, 0);
; 293  :     vY = XM_VMULQ_LANE_F32(M2.r[1], VL, 1);
; 294  :     vZ = XM_VMLAQ_LANE_F32(vX, M2.r[2], VH, 0);
; 295  :     vW = XM_VMLAQ_LANE_F32(vY, M2.r[3], VH, 1);
; 296  :     mResult.r[3] = vaddq_f32( vZ, vW );
; 297  :     return mResult;
; 298  : #elif defined(_XM_SSE_INTRINSICS_)
; 299  :     XMMATRIX mResult;

  0004f	48 8d 4d 70	 lea	 rcx, QWORD PTR mResult$[rbp]
  00053	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QEAA@XZ ; DirectX::XMMATRIX::XMMATRIX

; 300  :     // Use vW to hold the original row
; 301  :     XMVECTOR vW = M1.r[0];

  00058	b8 10 00 00 00	 mov	 eax, 16
  0005d	48 6b c0 00	 imul	 rax, rax, 0
  00061	0f 10 44 05 10	 movups	 xmm0, XMMWORD PTR M1$[rbp+rax]
  00066	0f 11 85 d0 00
	00 00		 movups	 XMMWORD PTR vW$[rbp], xmm0

; 302  :     // Splat the component X,Y,Z then W
; 303  :     XMVECTOR vX = XM_PERMUTE_PS(vW,_MM_SHUFFLE(0,0,0,0));

  0006d	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  00074	0f c6 85 d0 00
	00 00 00	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 0
  0007c	0f 29 85 50 05
	00 00		 movaps	 XMMWORD PTR $T5[rbp], xmm0
  00083	0f 28 85 50 05
	00 00		 movaps	 xmm0, XMMWORD PTR $T5[rbp]
  0008a	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 304  :     XMVECTOR vY = XM_PERMUTE_PS(vW,_MM_SHUFFLE(1,1,1,1));

  00091	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  00098	0f c6 85 d0 00
	00 00 55	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 85 ; 00000055H
  000a0	0f 29 85 80 05
	00 00		 movaps	 XMMWORD PTR $T6[rbp], xmm0
  000a7	0f 28 85 80 05
	00 00		 movaps	 xmm0, XMMWORD PTR $T6[rbp]
  000ae	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 305  :     XMVECTOR vZ = XM_PERMUTE_PS(vW,_MM_SHUFFLE(2,2,2,2));

  000b5	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  000bc	0f c6 85 d0 00
	00 00 aa	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 170 ; 000000aaH
  000c4	0f 29 85 b0 05
	00 00		 movaps	 XMMWORD PTR $T7[rbp], xmm0
  000cb	0f 28 85 b0 05
	00 00		 movaps	 xmm0, XMMWORD PTR $T7[rbp]
  000d2	0f 29 85 60 01
	00 00		 movaps	 XMMWORD PTR vZ$[rbp], xmm0

; 306  :     vW = XM_PERMUTE_PS(vW,_MM_SHUFFLE(3,3,3,3));

  000d9	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  000e0	0f c6 85 d0 00
	00 00 ff	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 255 ; 000000ffH
  000e8	0f 29 85 e0 05
	00 00		 movaps	 XMMWORD PTR $T8[rbp], xmm0
  000ef	0f 28 85 e0 05
	00 00		 movaps	 xmm0, XMMWORD PTR $T8[rbp]
  000f6	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR vW$[rbp], xmm0

; 307  :     // Perform the operation on the first row
; 308  :     vX = _mm_mul_ps(vX,M2.r[0]);

  000fd	b8 10 00 00 00	 mov	 eax, 16
  00102	48 6b c0 00	 imul	 rax, rax, 0
  00106	48 8b 8d a8 0d
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  0010d	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  00114	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  00118	0f 29 85 10 06
	00 00		 movaps	 XMMWORD PTR $T9[rbp], xmm0
  0011f	0f 28 85 10 06
	00 00		 movaps	 xmm0, XMMWORD PTR $T9[rbp]
  00126	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 309  :     vY = _mm_mul_ps(vY,M2.r[1]);

  0012d	b8 10 00 00 00	 mov	 eax, 16
  00132	48 6b c0 01	 imul	 rax, rax, 1
  00136	48 8b 8d a8 0d
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  0013d	0f 28 85 30 01
	00 00		 movaps	 xmm0, XMMWORD PTR vY$[rbp]
  00144	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  00148	0f 29 85 40 06
	00 00		 movaps	 XMMWORD PTR $T10[rbp], xmm0
  0014f	0f 28 85 40 06
	00 00		 movaps	 xmm0, XMMWORD PTR $T10[rbp]
  00156	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 310  :     vZ = _mm_mul_ps(vZ,M2.r[2]);

  0015d	b8 10 00 00 00	 mov	 eax, 16
  00162	48 6b c0 02	 imul	 rax, rax, 2
  00166	48 8b 8d a8 0d
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  0016d	0f 28 85 60 01
	00 00		 movaps	 xmm0, XMMWORD PTR vZ$[rbp]
  00174	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  00178	0f 29 85 70 06
	00 00		 movaps	 XMMWORD PTR $T11[rbp], xmm0
  0017f	0f 28 85 70 06
	00 00		 movaps	 xmm0, XMMWORD PTR $T11[rbp]
  00186	0f 29 85 60 01
	00 00		 movaps	 XMMWORD PTR vZ$[rbp], xmm0

; 311  :     vW = _mm_mul_ps(vW,M2.r[3]);

  0018d	b8 10 00 00 00	 mov	 eax, 16
  00192	48 6b c0 03	 imul	 rax, rax, 3
  00196	48 8b 8d a8 0d
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  0019d	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  001a4	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  001a8	0f 29 85 a0 06
	00 00		 movaps	 XMMWORD PTR $T12[rbp], xmm0
  001af	0f 28 85 a0 06
	00 00		 movaps	 xmm0, XMMWORD PTR $T12[rbp]
  001b6	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR vW$[rbp], xmm0

; 312  :     // Perform a binary add to reduce cumulative errors
; 313  :     vX = _mm_add_ps(vX,vZ);

  001bd	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  001c4	0f 58 85 60 01
	00 00		 addps	 xmm0, XMMWORD PTR vZ$[rbp]
  001cb	0f 29 85 d0 06
	00 00		 movaps	 XMMWORD PTR $T13[rbp], xmm0
  001d2	0f 28 85 d0 06
	00 00		 movaps	 xmm0, XMMWORD PTR $T13[rbp]
  001d9	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 314  :     vY = _mm_add_ps(vY,vW);

  001e0	0f 28 85 30 01
	00 00		 movaps	 xmm0, XMMWORD PTR vY$[rbp]
  001e7	0f 58 85 d0 00
	00 00		 addps	 xmm0, XMMWORD PTR vW$[rbp]
  001ee	0f 29 85 00 07
	00 00		 movaps	 XMMWORD PTR $T14[rbp], xmm0
  001f5	0f 28 85 00 07
	00 00		 movaps	 xmm0, XMMWORD PTR $T14[rbp]
  001fc	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 315  :     vX = _mm_add_ps(vX,vY);

  00203	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  0020a	0f 58 85 30 01
	00 00		 addps	 xmm0, XMMWORD PTR vY$[rbp]
  00211	0f 29 85 30 07
	00 00		 movaps	 XMMWORD PTR $T15[rbp], xmm0
  00218	0f 28 85 30 07
	00 00		 movaps	 xmm0, XMMWORD PTR $T15[rbp]
  0021f	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 316  :     mResult.r[0] = vX;

  00226	b8 10 00 00 00	 mov	 eax, 16
  0022b	48 6b c0 00	 imul	 rax, rax, 0
  0022f	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  00236	0f 11 44 05 70	 movups	 XMMWORD PTR mResult$[rbp+rax], xmm0

; 317  :     // Repeat for the other 3 rows
; 318  :     vW = M1.r[1];

  0023b	b8 10 00 00 00	 mov	 eax, 16
  00240	48 6b c0 01	 imul	 rax, rax, 1
  00244	0f 10 44 05 10	 movups	 xmm0, XMMWORD PTR M1$[rbp+rax]
  00249	0f 11 85 d0 00
	00 00		 movups	 XMMWORD PTR vW$[rbp], xmm0

; 319  :     vX = XM_PERMUTE_PS(vW,_MM_SHUFFLE(0,0,0,0));

  00250	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  00257	0f c6 85 d0 00
	00 00 00	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 0
  0025f	0f 29 85 60 07
	00 00		 movaps	 XMMWORD PTR $T16[rbp], xmm0
  00266	0f 28 85 60 07
	00 00		 movaps	 xmm0, XMMWORD PTR $T16[rbp]
  0026d	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 320  :     vY = XM_PERMUTE_PS(vW,_MM_SHUFFLE(1,1,1,1));

  00274	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  0027b	0f c6 85 d0 00
	00 00 55	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 85 ; 00000055H
  00283	0f 29 85 90 07
	00 00		 movaps	 XMMWORD PTR $T17[rbp], xmm0
  0028a	0f 28 85 90 07
	00 00		 movaps	 xmm0, XMMWORD PTR $T17[rbp]
  00291	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 321  :     vZ = XM_PERMUTE_PS(vW,_MM_SHUFFLE(2,2,2,2));

  00298	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  0029f	0f c6 85 d0 00
	00 00 aa	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 170 ; 000000aaH
  002a7	0f 29 85 c0 07
	00 00		 movaps	 XMMWORD PTR $T18[rbp], xmm0
  002ae	0f 28 85 c0 07
	00 00		 movaps	 xmm0, XMMWORD PTR $T18[rbp]
  002b5	0f 29 85 60 01
	00 00		 movaps	 XMMWORD PTR vZ$[rbp], xmm0

; 322  :     vW = XM_PERMUTE_PS(vW,_MM_SHUFFLE(3,3,3,3));

  002bc	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  002c3	0f c6 85 d0 00
	00 00 ff	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 255 ; 000000ffH
  002cb	0f 29 85 f0 07
	00 00		 movaps	 XMMWORD PTR $T19[rbp], xmm0
  002d2	0f 28 85 f0 07
	00 00		 movaps	 xmm0, XMMWORD PTR $T19[rbp]
  002d9	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR vW$[rbp], xmm0

; 323  :     vX = _mm_mul_ps(vX,M2.r[0]);

  002e0	b8 10 00 00 00	 mov	 eax, 16
  002e5	48 6b c0 00	 imul	 rax, rax, 0
  002e9	48 8b 8d a8 0d
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  002f0	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  002f7	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  002fb	0f 29 85 20 08
	00 00		 movaps	 XMMWORD PTR $T20[rbp], xmm0
  00302	0f 28 85 20 08
	00 00		 movaps	 xmm0, XMMWORD PTR $T20[rbp]
  00309	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 324  :     vY = _mm_mul_ps(vY,M2.r[1]);

  00310	b8 10 00 00 00	 mov	 eax, 16
  00315	48 6b c0 01	 imul	 rax, rax, 1
  00319	48 8b 8d a8 0d
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  00320	0f 28 85 30 01
	00 00		 movaps	 xmm0, XMMWORD PTR vY$[rbp]
  00327	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  0032b	0f 29 85 50 08
	00 00		 movaps	 XMMWORD PTR $T21[rbp], xmm0
  00332	0f 28 85 50 08
	00 00		 movaps	 xmm0, XMMWORD PTR $T21[rbp]
  00339	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 325  :     vZ = _mm_mul_ps(vZ,M2.r[2]);

  00340	b8 10 00 00 00	 mov	 eax, 16
  00345	48 6b c0 02	 imul	 rax, rax, 2
  00349	48 8b 8d a8 0d
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  00350	0f 28 85 60 01
	00 00		 movaps	 xmm0, XMMWORD PTR vZ$[rbp]
  00357	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  0035b	0f 29 85 80 08
	00 00		 movaps	 XMMWORD PTR $T22[rbp], xmm0
  00362	0f 28 85 80 08
	00 00		 movaps	 xmm0, XMMWORD PTR $T22[rbp]
  00369	0f 29 85 60 01
	00 00		 movaps	 XMMWORD PTR vZ$[rbp], xmm0

; 326  :     vW = _mm_mul_ps(vW,M2.r[3]);

  00370	b8 10 00 00 00	 mov	 eax, 16
  00375	48 6b c0 03	 imul	 rax, rax, 3
  00379	48 8b 8d a8 0d
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  00380	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  00387	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  0038b	0f 29 85 b0 08
	00 00		 movaps	 XMMWORD PTR $T23[rbp], xmm0
  00392	0f 28 85 b0 08
	00 00		 movaps	 xmm0, XMMWORD PTR $T23[rbp]
  00399	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR vW$[rbp], xmm0

; 327  :     vX = _mm_add_ps(vX,vZ);

  003a0	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  003a7	0f 58 85 60 01
	00 00		 addps	 xmm0, XMMWORD PTR vZ$[rbp]
  003ae	0f 29 85 e0 08
	00 00		 movaps	 XMMWORD PTR $T24[rbp], xmm0
  003b5	0f 28 85 e0 08
	00 00		 movaps	 xmm0, XMMWORD PTR $T24[rbp]
  003bc	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 328  :     vY = _mm_add_ps(vY,vW);

  003c3	0f 28 85 30 01
	00 00		 movaps	 xmm0, XMMWORD PTR vY$[rbp]
  003ca	0f 58 85 d0 00
	00 00		 addps	 xmm0, XMMWORD PTR vW$[rbp]
  003d1	0f 29 85 10 09
	00 00		 movaps	 XMMWORD PTR $T25[rbp], xmm0
  003d8	0f 28 85 10 09
	00 00		 movaps	 xmm0, XMMWORD PTR $T25[rbp]
  003df	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 329  :     vX = _mm_add_ps(vX,vY);

  003e6	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  003ed	0f 58 85 30 01
	00 00		 addps	 xmm0, XMMWORD PTR vY$[rbp]
  003f4	0f 29 85 40 09
	00 00		 movaps	 XMMWORD PTR $T26[rbp], xmm0
  003fb	0f 28 85 40 09
	00 00		 movaps	 xmm0, XMMWORD PTR $T26[rbp]
  00402	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 330  :     mResult.r[1] = vX;

  00409	b8 10 00 00 00	 mov	 eax, 16
  0040e	48 6b c0 01	 imul	 rax, rax, 1
  00412	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  00419	0f 11 44 05 70	 movups	 XMMWORD PTR mResult$[rbp+rax], xmm0

; 331  :     vW = M1.r[2];

  0041e	b8 10 00 00 00	 mov	 eax, 16
  00423	48 6b c0 02	 imul	 rax, rax, 2
  00427	0f 10 44 05 10	 movups	 xmm0, XMMWORD PTR M1$[rbp+rax]
  0042c	0f 11 85 d0 00
	00 00		 movups	 XMMWORD PTR vW$[rbp], xmm0

; 332  :     vX = XM_PERMUTE_PS(vW,_MM_SHUFFLE(0,0,0,0));

  00433	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  0043a	0f c6 85 d0 00
	00 00 00	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 0
  00442	0f 29 85 70 09
	00 00		 movaps	 XMMWORD PTR $T27[rbp], xmm0
  00449	0f 28 85 70 09
	00 00		 movaps	 xmm0, XMMWORD PTR $T27[rbp]
  00450	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 333  :     vY = XM_PERMUTE_PS(vW,_MM_SHUFFLE(1,1,1,1));

  00457	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  0045e	0f c6 85 d0 00
	00 00 55	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 85 ; 00000055H
  00466	0f 29 85 a0 09
	00 00		 movaps	 XMMWORD PTR $T28[rbp], xmm0
  0046d	0f 28 85 a0 09
	00 00		 movaps	 xmm0, XMMWORD PTR $T28[rbp]
  00474	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 334  :     vZ = XM_PERMUTE_PS(vW,_MM_SHUFFLE(2,2,2,2));

  0047b	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  00482	0f c6 85 d0 00
	00 00 aa	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 170 ; 000000aaH
  0048a	0f 29 85 d0 09
	00 00		 movaps	 XMMWORD PTR $T29[rbp], xmm0
  00491	0f 28 85 d0 09
	00 00		 movaps	 xmm0, XMMWORD PTR $T29[rbp]
  00498	0f 29 85 60 01
	00 00		 movaps	 XMMWORD PTR vZ$[rbp], xmm0

; 335  :     vW = XM_PERMUTE_PS(vW,_MM_SHUFFLE(3,3,3,3));

  0049f	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  004a6	0f c6 85 d0 00
	00 00 ff	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 255 ; 000000ffH
  004ae	0f 29 85 00 0a
	00 00		 movaps	 XMMWORD PTR $T30[rbp], xmm0
  004b5	0f 28 85 00 0a
	00 00		 movaps	 xmm0, XMMWORD PTR $T30[rbp]
  004bc	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR vW$[rbp], xmm0

; 336  :     vX = _mm_mul_ps(vX,M2.r[0]);

  004c3	b8 10 00 00 00	 mov	 eax, 16
  004c8	48 6b c0 00	 imul	 rax, rax, 0
  004cc	48 8b 8d a8 0d
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  004d3	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  004da	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  004de	0f 29 85 30 0a
	00 00		 movaps	 XMMWORD PTR $T31[rbp], xmm0
  004e5	0f 28 85 30 0a
	00 00		 movaps	 xmm0, XMMWORD PTR $T31[rbp]
  004ec	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 337  :     vY = _mm_mul_ps(vY,M2.r[1]);

  004f3	b8 10 00 00 00	 mov	 eax, 16
  004f8	48 6b c0 01	 imul	 rax, rax, 1
  004fc	48 8b 8d a8 0d
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  00503	0f 28 85 30 01
	00 00		 movaps	 xmm0, XMMWORD PTR vY$[rbp]
  0050a	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  0050e	0f 29 85 60 0a
	00 00		 movaps	 XMMWORD PTR $T32[rbp], xmm0
  00515	0f 28 85 60 0a
	00 00		 movaps	 xmm0, XMMWORD PTR $T32[rbp]
  0051c	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 338  :     vZ = _mm_mul_ps(vZ,M2.r[2]);

  00523	b8 10 00 00 00	 mov	 eax, 16
  00528	48 6b c0 02	 imul	 rax, rax, 2
  0052c	48 8b 8d a8 0d
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  00533	0f 28 85 60 01
	00 00		 movaps	 xmm0, XMMWORD PTR vZ$[rbp]
  0053a	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  0053e	0f 29 85 90 0a
	00 00		 movaps	 XMMWORD PTR $T33[rbp], xmm0
  00545	0f 28 85 90 0a
	00 00		 movaps	 xmm0, XMMWORD PTR $T33[rbp]
  0054c	0f 29 85 60 01
	00 00		 movaps	 XMMWORD PTR vZ$[rbp], xmm0

; 339  :     vW = _mm_mul_ps(vW,M2.r[3]);

  00553	b8 10 00 00 00	 mov	 eax, 16
  00558	48 6b c0 03	 imul	 rax, rax, 3
  0055c	48 8b 8d a8 0d
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  00563	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  0056a	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  0056e	0f 29 85 c0 0a
	00 00		 movaps	 XMMWORD PTR $T34[rbp], xmm0
  00575	0f 28 85 c0 0a
	00 00		 movaps	 xmm0, XMMWORD PTR $T34[rbp]
  0057c	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR vW$[rbp], xmm0

; 340  :     vX = _mm_add_ps(vX,vZ);

  00583	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  0058a	0f 58 85 60 01
	00 00		 addps	 xmm0, XMMWORD PTR vZ$[rbp]
  00591	0f 29 85 f0 0a
	00 00		 movaps	 XMMWORD PTR $T35[rbp], xmm0
  00598	0f 28 85 f0 0a
	00 00		 movaps	 xmm0, XMMWORD PTR $T35[rbp]
  0059f	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 341  :     vY = _mm_add_ps(vY,vW);

  005a6	0f 28 85 30 01
	00 00		 movaps	 xmm0, XMMWORD PTR vY$[rbp]
  005ad	0f 58 85 d0 00
	00 00		 addps	 xmm0, XMMWORD PTR vW$[rbp]
  005b4	0f 29 85 20 0b
	00 00		 movaps	 XMMWORD PTR $T36[rbp], xmm0
  005bb	0f 28 85 20 0b
	00 00		 movaps	 xmm0, XMMWORD PTR $T36[rbp]
  005c2	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 342  :     vX = _mm_add_ps(vX,vY);

  005c9	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  005d0	0f 58 85 30 01
	00 00		 addps	 xmm0, XMMWORD PTR vY$[rbp]
  005d7	0f 29 85 50 0b
	00 00		 movaps	 XMMWORD PTR $T37[rbp], xmm0
  005de	0f 28 85 50 0b
	00 00		 movaps	 xmm0, XMMWORD PTR $T37[rbp]
  005e5	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 343  :     mResult.r[2] = vX;

  005ec	b8 10 00 00 00	 mov	 eax, 16
  005f1	48 6b c0 02	 imul	 rax, rax, 2
  005f5	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  005fc	0f 11 44 05 70	 movups	 XMMWORD PTR mResult$[rbp+rax], xmm0

; 344  :     vW = M1.r[3];

  00601	b8 10 00 00 00	 mov	 eax, 16
  00606	48 6b c0 03	 imul	 rax, rax, 3
  0060a	0f 10 44 05 10	 movups	 xmm0, XMMWORD PTR M1$[rbp+rax]
  0060f	0f 11 85 d0 00
	00 00		 movups	 XMMWORD PTR vW$[rbp], xmm0

; 345  :     vX = XM_PERMUTE_PS(vW,_MM_SHUFFLE(0,0,0,0));

  00616	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  0061d	0f c6 85 d0 00
	00 00 00	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 0
  00625	0f 29 85 80 0b
	00 00		 movaps	 XMMWORD PTR $T38[rbp], xmm0
  0062c	0f 28 85 80 0b
	00 00		 movaps	 xmm0, XMMWORD PTR $T38[rbp]
  00633	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 346  :     vY = XM_PERMUTE_PS(vW,_MM_SHUFFLE(1,1,1,1));

  0063a	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  00641	0f c6 85 d0 00
	00 00 55	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 85 ; 00000055H
  00649	0f 29 85 b0 0b
	00 00		 movaps	 XMMWORD PTR $T39[rbp], xmm0
  00650	0f 28 85 b0 0b
	00 00		 movaps	 xmm0, XMMWORD PTR $T39[rbp]
  00657	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 347  :     vZ = XM_PERMUTE_PS(vW,_MM_SHUFFLE(2,2,2,2));

  0065e	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  00665	0f c6 85 d0 00
	00 00 aa	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 170 ; 000000aaH
  0066d	0f 29 85 e0 0b
	00 00		 movaps	 XMMWORD PTR $T40[rbp], xmm0
  00674	0f 28 85 e0 0b
	00 00		 movaps	 xmm0, XMMWORD PTR $T40[rbp]
  0067b	0f 29 85 60 01
	00 00		 movaps	 XMMWORD PTR vZ$[rbp], xmm0

; 348  :     vW = XM_PERMUTE_PS(vW,_MM_SHUFFLE(3,3,3,3));

  00682	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  00689	0f c6 85 d0 00
	00 00 ff	 shufps	 xmm0, XMMWORD PTR vW$[rbp], 255 ; 000000ffH
  00691	0f 29 85 10 0c
	00 00		 movaps	 XMMWORD PTR $T41[rbp], xmm0
  00698	0f 28 85 10 0c
	00 00		 movaps	 xmm0, XMMWORD PTR $T41[rbp]
  0069f	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR vW$[rbp], xmm0

; 349  :     vX = _mm_mul_ps(vX,M2.r[0]);

  006a6	b8 10 00 00 00	 mov	 eax, 16
  006ab	48 6b c0 00	 imul	 rax, rax, 0
  006af	48 8b 8d a8 0d
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  006b6	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  006bd	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  006c1	0f 29 85 40 0c
	00 00		 movaps	 XMMWORD PTR $T42[rbp], xmm0
  006c8	0f 28 85 40 0c
	00 00		 movaps	 xmm0, XMMWORD PTR $T42[rbp]
  006cf	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 350  :     vY = _mm_mul_ps(vY,M2.r[1]);

  006d6	b8 10 00 00 00	 mov	 eax, 16
  006db	48 6b c0 01	 imul	 rax, rax, 1
  006df	48 8b 8d a8 0d
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  006e6	0f 28 85 30 01
	00 00		 movaps	 xmm0, XMMWORD PTR vY$[rbp]
  006ed	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  006f1	0f 29 85 70 0c
	00 00		 movaps	 XMMWORD PTR $T43[rbp], xmm0
  006f8	0f 28 85 70 0c
	00 00		 movaps	 xmm0, XMMWORD PTR $T43[rbp]
  006ff	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 351  :     vZ = _mm_mul_ps(vZ,M2.r[2]);

  00706	b8 10 00 00 00	 mov	 eax, 16
  0070b	48 6b c0 02	 imul	 rax, rax, 2
  0070f	48 8b 8d a8 0d
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  00716	0f 28 85 60 01
	00 00		 movaps	 xmm0, XMMWORD PTR vZ$[rbp]
  0071d	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  00721	0f 29 85 a0 0c
	00 00		 movaps	 XMMWORD PTR $T44[rbp], xmm0
  00728	0f 28 85 a0 0c
	00 00		 movaps	 xmm0, XMMWORD PTR $T44[rbp]
  0072f	0f 29 85 60 01
	00 00		 movaps	 XMMWORD PTR vZ$[rbp], xmm0

; 352  :     vW = _mm_mul_ps(vW,M2.r[3]);

  00736	b8 10 00 00 00	 mov	 eax, 16
  0073b	48 6b c0 03	 imul	 rax, rax, 3
  0073f	48 8b 8d a8 0d
	00 00		 mov	 rcx, QWORD PTR M2$[rbp]
  00746	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vW$[rbp]
  0074d	0f 59 04 01	 mulps	 xmm0, XMMWORD PTR [rcx+rax]
  00751	0f 29 85 d0 0c
	00 00		 movaps	 XMMWORD PTR $T45[rbp], xmm0
  00758	0f 28 85 d0 0c
	00 00		 movaps	 xmm0, XMMWORD PTR $T45[rbp]
  0075f	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR vW$[rbp], xmm0

; 353  :     vX = _mm_add_ps(vX,vZ);

  00766	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  0076d	0f 58 85 60 01
	00 00		 addps	 xmm0, XMMWORD PTR vZ$[rbp]
  00774	0f 29 85 00 0d
	00 00		 movaps	 XMMWORD PTR $T46[rbp], xmm0
  0077b	0f 28 85 00 0d
	00 00		 movaps	 xmm0, XMMWORD PTR $T46[rbp]
  00782	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 354  :     vY = _mm_add_ps(vY,vW);

  00789	0f 28 85 30 01
	00 00		 movaps	 xmm0, XMMWORD PTR vY$[rbp]
  00790	0f 58 85 d0 00
	00 00		 addps	 xmm0, XMMWORD PTR vW$[rbp]
  00797	0f 29 85 30 0d
	00 00		 movaps	 XMMWORD PTR $T47[rbp], xmm0
  0079e	0f 28 85 30 0d
	00 00		 movaps	 xmm0, XMMWORD PTR $T47[rbp]
  007a5	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR vY$[rbp], xmm0

; 355  :     vX = _mm_add_ps(vX,vY);

  007ac	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  007b3	0f 58 85 30 01
	00 00		 addps	 xmm0, XMMWORD PTR vY$[rbp]
  007ba	0f 29 85 60 0d
	00 00		 movaps	 XMMWORD PTR $T48[rbp], xmm0
  007c1	0f 28 85 60 0d
	00 00		 movaps	 xmm0, XMMWORD PTR $T48[rbp]
  007c8	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR vX$[rbp], xmm0

; 356  :     mResult.r[3] = vX;

  007cf	b8 10 00 00 00	 mov	 eax, 16
  007d4	48 6b c0 03	 imul	 rax, rax, 3
  007d8	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR vX$[rbp]
  007df	0f 11 44 05 70	 movups	 XMMWORD PTR mResult$[rbp+rax], xmm0

; 357  :     return mResult;

  007e4	0f 28 9d a0 00
	00 00		 movaps	 xmm3, XMMWORD PTR mResult$[rbp+48]
  007eb	0f 28 95 90 00
	00 00		 movaps	 xmm2, XMMWORD PTR mResult$[rbp+32]
  007f2	0f 28 8d 80 00
	00 00		 movaps	 xmm1, XMMWORD PTR mResult$[rbp+16]
  007f9	0f 28 45 70	 movaps	 xmm0, XMMWORD PTR mResult$[rbp]

; 358  : #endif
; 359  : }

  007fd	f3 0f 7f 44 24
	20		 movdqu	 XMMWORD PTR [rsp+32], xmm0
  00803	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00807	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z$rtcFrameData
  0080e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00813	f3 0f 6f 44 24
	20		 movdqu	 xmm0, XMMWORD PTR [rsp+32]
  00819	48 8b 8d 78 0d
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00820	48 33 cd	 xor	 rcx, rbp
  00823	e8 00 00 00 00	 call	 __security_check_cookie
  00828	48 8d a5 88 0d
	00 00		 lea	 rsp, QWORD PTR [rbp+3464]
  0082f	5f		 pop	 rdi
  00830	5d		 pop	 rbp
  00831	c3		 ret	 0
?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z ENDP ; DirectX::XMMatrixMultiply
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
;	COMDAT ?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
V$ = 16
vLengthSq$ = 64
vTemp$ = 112
vResult$ = 160
vZeroMask$ = 208
vTemp1$ = 256
vTemp2$ = 304
$T1 = 928
$T2 = 976
$T3 = 1024
$T4 = 1072
$T5 = 1120
$T6 = 1168
$T7 = 1216
$T8 = 1264
$T9 = 1312
$T10 = 1360
$T11 = 1408
$T12 = 1456
$T13 = 1504
$T14 = 1552
$T15 = 1600
$T16 = 1648
$T17 = 1696
?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVector3Normalize, COMDAT

; 9238 : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec f8 06
	00 00		 sub	 rsp, 1784		; 000006f8H
  0000a	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 be 01 00 00	 mov	 ecx, 446		; 000001beH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 45 10	 lea	 rax, QWORD PTR V$[rbp]
  00022	48 89 84 24 10
	07 00 00	 mov	 QWORD PTR [rsp+1808], rax
  0002a	0f 29 45 10	 movaps	 XMMWORD PTR V$[rbp], xmm0

; 9239 : #if defined(_XM_NO_INTRINSICS_)
; 9240 :     float fLength;
; 9241 :     XMVECTOR vResult;
; 9242 : 
; 9243 :     vResult = XMVector3Length( V );
; 9244 :     fLength = vResult.vector4_f32[0];
; 9245 : 
; 9246 :     // Prevent divide by zero
; 9247 :     if (fLength > 0) {
; 9248 :         fLength = 1.0f/fLength;
; 9249 :     }
; 9250 :     
; 9251 :     vResult.vector4_f32[0] = V.vector4_f32[0]*fLength;
; 9252 :     vResult.vector4_f32[1] = V.vector4_f32[1]*fLength;
; 9253 :     vResult.vector4_f32[2] = V.vector4_f32[2]*fLength;
; 9254 :     vResult.vector4_f32[3] = V.vector4_f32[3]*fLength;
; 9255 :     return vResult;
; 9256 : 
; 9257 : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 9258 :     // Dot3
; 9259 :     float32x4_t vTemp = vmulq_f32( V, V );
; 9260 :     float32x2_t v1 = vget_low_f32( vTemp );
; 9261 :     float32x2_t v2 = vget_high_f32( vTemp );
; 9262 :     v1 = vpadd_f32( v1, v1 );
; 9263 :     v2 = vdup_lane_f32( v2, 0 );
; 9264 :     v1 = vadd_f32( v1, v2 );
; 9265 :     uint32x2_t VEqualsZero = vceq_f32( v1, vdup_n_f32(0) );
; 9266 :     uint32x2_t VEqualsInf = vceq_f32( v1, vget_low_f32(g_XMInfinity) );
; 9267 :     // Reciprocal sqrt (2 iterations of Newton-Raphson)
; 9268 :     float32x2_t S0 = vrsqrte_f32( v1 );
; 9269 :     float32x2_t P0 = vmul_f32( v1, S0 );
; 9270 :     float32x2_t R0 = vrsqrts_f32( P0, S0 );
; 9271 :     float32x2_t S1 = vmul_f32( S0, R0 );
; 9272 :     float32x2_t P1 = vmul_f32( v1, S1 );
; 9273 :     float32x2_t R1 = vrsqrts_f32( P1, S1 );
; 9274 :     v2 = vmul_f32( S1, R1 );
; 9275 :     // Normalize
; 9276 :     XMVECTOR vResult = vmulq_f32( V, vcombine_f32(v2,v2) );
; 9277 :     vResult = vbslq_f32( vcombine_f32(VEqualsZero,VEqualsZero), vdupq_n_f32(0), vResult );
; 9278 :     return vbslq_f32( vcombine_f32(VEqualsInf,VEqualsInf), g_XMQNaN, vResult );
; 9279 : #elif defined(_XM_SSE_INTRINSICS_)
; 9280 :     // Perform the dot product on x,y and z only
; 9281 :     XMVECTOR vLengthSq = _mm_mul_ps(V,V);

  0002e	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR V$[rbp]
  00032	0f 59 45 10	 mulps	 xmm0, XMMWORD PTR V$[rbp]
  00036	0f 29 85 a0 03
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  0003d	0f 28 85 a0 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  00044	0f 29 45 40	 movaps	 XMMWORD PTR vLengthSq$[rbp], xmm0

; 9282 :     XMVECTOR vTemp = XM_PERMUTE_PS(vLengthSq,_MM_SHUFFLE(2,1,2,1));

  00048	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR vLengthSq$[rbp]
  0004c	0f c6 45 40 99	 shufps	 xmm0, XMMWORD PTR vLengthSq$[rbp], 153 ; 00000099H
  00051	0f 29 85 d0 03
	00 00		 movaps	 XMMWORD PTR $T2[rbp], xmm0
  00058	0f 28 85 d0 03
	00 00		 movaps	 xmm0, XMMWORD PTR $T2[rbp]
  0005f	0f 29 45 70	 movaps	 XMMWORD PTR vTemp$[rbp], xmm0

; 9283 :     vLengthSq = _mm_add_ss(vLengthSq,vTemp);

  00063	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR vLengthSq$[rbp]
  00067	f3 0f 58 45 70	 addss	 xmm0, DWORD PTR vTemp$[rbp]
  0006c	0f 29 85 00 04
	00 00		 movaps	 XMMWORD PTR $T3[rbp], xmm0
  00073	0f 28 85 00 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T3[rbp]
  0007a	0f 29 45 40	 movaps	 XMMWORD PTR vLengthSq$[rbp], xmm0

; 9284 :     vTemp = XM_PERMUTE_PS(vTemp,_MM_SHUFFLE(1,1,1,1));

  0007e	0f 28 45 70	 movaps	 xmm0, XMMWORD PTR vTemp$[rbp]
  00082	0f c6 45 70 55	 shufps	 xmm0, XMMWORD PTR vTemp$[rbp], 85 ; 00000055H
  00087	0f 29 85 30 04
	00 00		 movaps	 XMMWORD PTR $T4[rbp], xmm0
  0008e	0f 28 85 30 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T4[rbp]
  00095	0f 29 45 70	 movaps	 XMMWORD PTR vTemp$[rbp], xmm0

; 9285 :     vLengthSq = _mm_add_ss(vLengthSq,vTemp);

  00099	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR vLengthSq$[rbp]
  0009d	f3 0f 58 45 70	 addss	 xmm0, DWORD PTR vTemp$[rbp]
  000a2	0f 29 85 60 04
	00 00		 movaps	 XMMWORD PTR $T5[rbp], xmm0
  000a9	0f 28 85 60 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T5[rbp]
  000b0	0f 29 45 40	 movaps	 XMMWORD PTR vLengthSq$[rbp], xmm0

; 9286 :     vLengthSq = XM_PERMUTE_PS(vLengthSq,_MM_SHUFFLE(0,0,0,0));

  000b4	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR vLengthSq$[rbp]
  000b8	0f c6 45 40 00	 shufps	 xmm0, XMMWORD PTR vLengthSq$[rbp], 0
  000bd	0f 29 85 90 04
	00 00		 movaps	 XMMWORD PTR $T6[rbp], xmm0
  000c4	0f 28 85 90 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T6[rbp]
  000cb	0f 29 45 40	 movaps	 XMMWORD PTR vLengthSq$[rbp], xmm0

; 9287 :     // Prepare for the division
; 9288 :     XMVECTOR vResult = _mm_sqrt_ps(vLengthSq);

  000cf	0f 51 45 40	 sqrtps	 xmm0, XMMWORD PTR vLengthSq$[rbp]
  000d3	0f 29 85 c0 04
	00 00		 movaps	 XMMWORD PTR $T7[rbp], xmm0
  000da	0f 28 85 c0 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T7[rbp]
  000e1	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR vResult$[rbp], xmm0

; 9289 :     // Create zero with a single instruction
; 9290 :     XMVECTOR vZeroMask = _mm_setzero_ps();

  000e8	0f 57 c0	 xorps	 xmm0, xmm0
  000eb	0f 29 85 f0 04
	00 00		 movaps	 XMMWORD PTR $T8[rbp], xmm0
  000f2	0f 28 85 f0 04
	00 00		 movaps	 xmm0, XMMWORD PTR $T8[rbp]
  000f9	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR vZeroMask$[rbp], xmm0

; 9291 :     // Test for a divide by zero (Must be FP to detect -0.0)
; 9292 :     vZeroMask = _mm_cmpneq_ps(vZeroMask,vResult);

  00100	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vZeroMask$[rbp]
  00107	0f c2 85 a0 00
	00 00 04	 cmpneqps xmm0, XMMWORD PTR vResult$[rbp]
  0010f	0f 29 85 20 05
	00 00		 movaps	 XMMWORD PTR $T9[rbp], xmm0
  00116	0f 28 85 20 05
	00 00		 movaps	 xmm0, XMMWORD PTR $T9[rbp]
  0011d	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR vZeroMask$[rbp], xmm0

; 9293 :     // Failsafe on zero (Or epsilon) length planes
; 9294 :     // If the length is infinity, set the elements to zero
; 9295 :     vLengthSq = _mm_cmpneq_ps(vLengthSq,g_XMInfinity);

  00124	48 8d 95 80 05
	00 00		 lea	 rdx, QWORD PTR $T11[rbp]
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMInfinity
  00132	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  00137	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR vLengthSq$[rbp]
  0013b	0f c2 00 04	 cmpneqps xmm0, XMMWORD PTR [rax]
  0013f	0f 29 85 50 05
	00 00		 movaps	 XMMWORD PTR $T10[rbp], xmm0
  00146	0f 28 85 50 05
	00 00		 movaps	 xmm0, XMMWORD PTR $T10[rbp]
  0014d	0f 29 45 40	 movaps	 XMMWORD PTR vLengthSq$[rbp], xmm0

; 9296 :     // Divide to perform the normalization
; 9297 :     vResult = _mm_div_ps(V,vResult);

  00151	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR V$[rbp]
  00155	0f 5e 85 a0 00
	00 00		 divps	 xmm0, XMMWORD PTR vResult$[rbp]
  0015c	0f 29 85 b0 05
	00 00		 movaps	 XMMWORD PTR $T12[rbp], xmm0
  00163	0f 28 85 b0 05
	00 00		 movaps	 xmm0, XMMWORD PTR $T12[rbp]
  0016a	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR vResult$[rbp], xmm0

; 9298 :     // Any that are infinity, set to zero
; 9299 :     vResult = _mm_and_ps(vResult,vZeroMask);

  00171	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vResult$[rbp]
  00178	0f 54 85 d0 00
	00 00		 andps	 xmm0, XMMWORD PTR vZeroMask$[rbp]
  0017f	0f 29 85 e0 05
	00 00		 movaps	 XMMWORD PTR $T13[rbp], xmm0
  00186	0f 28 85 e0 05
	00 00		 movaps	 xmm0, XMMWORD PTR $T13[rbp]
  0018d	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR vResult$[rbp], xmm0

; 9300 :     // Select qnan or result based on infinite length
; 9301 :     XMVECTOR vTemp1 = _mm_andnot_ps(vLengthSq,g_XMQNaN);

  00194	48 8d 95 40 06
	00 00		 lea	 rdx, QWORD PTR $T15[rbp]
  0019b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMQNaN
  001a2	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QEBA?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  001a7	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR vLengthSq$[rbp]
  001ab	0f 55 00	 andnps	 xmm0, XMMWORD PTR [rax]
  001ae	0f 29 85 10 06
	00 00		 movaps	 XMMWORD PTR $T14[rbp], xmm0
  001b5	0f 28 85 10 06
	00 00		 movaps	 xmm0, XMMWORD PTR $T14[rbp]
  001bc	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR vTemp1$[rbp], xmm0

; 9302 :     XMVECTOR vTemp2 = _mm_and_ps(vResult,vLengthSq);

  001c3	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vResult$[rbp]
  001ca	0f 54 45 40	 andps	 xmm0, XMMWORD PTR vLengthSq$[rbp]
  001ce	0f 29 85 70 06
	00 00		 movaps	 XMMWORD PTR $T16[rbp], xmm0
  001d5	0f 28 85 70 06
	00 00		 movaps	 xmm0, XMMWORD PTR $T16[rbp]
  001dc	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR vTemp2$[rbp], xmm0

; 9303 :     vResult = _mm_or_ps(vTemp1,vTemp2);

  001e3	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR vTemp1$[rbp]
  001ea	0f 56 85 30 01
	00 00		 orps	 xmm0, XMMWORD PTR vTemp2$[rbp]
  001f1	0f 29 85 a0 06
	00 00		 movaps	 XMMWORD PTR $T17[rbp], xmm0
  001f8	0f 28 85 a0 06
	00 00		 movaps	 xmm0, XMMWORD PTR $T17[rbp]
  001ff	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR vResult$[rbp], xmm0

; 9304 :     return vResult;

  00206	0f 28 85 a0 00
	00 00		 movaps	 xmm0, XMMWORD PTR vResult$[rbp]

; 9305 : #endif
; 9306 : }

  0020d	48 8d a5 c8 06
	00 00		 lea	 rsp, QWORD PTR [rbp+1736]
  00214	5f		 pop	 rdi
  00215	5d		 pop	 rbp
  00216	c3		 ret	 0
?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVector3Normalize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
;	COMDAT ?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z
_TEXT	SEGMENT
V$ = 16
vResult$ = 64
$T1 = 304
$T2 = 352
ScaleFactor$ = 424
?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z PROC	; DirectX::XMVectorScale, COMDAT

; 2965 : {

$LN3:
  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	55		 push	 rbp
  00007	57		 push	 rdi
  00008	48 81 ec 98 01
	00 00		 sub	 rsp, 408		; 00000198H
  0000f	48 8d 6c 24 10	 lea	 rbp, QWORD PTR [rsp+16]
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 66 00 00 00	 mov	 ecx, 102		; 00000066H
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8d 45 10	 lea	 rax, QWORD PTR V$[rbp]
  00027	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR [rsp+432], rax
  0002f	0f 29 45 10	 movaps	 XMMWORD PTR V$[rbp], xmm0

; 2966 : #if defined(_XM_NO_INTRINSICS_)
; 2967 :     XMVECTOR Result;
; 2968 :     Result.vector4_f32[0] = V.vector4_f32[0] * ScaleFactor;
; 2969 :     Result.vector4_f32[1] = V.vector4_f32[1] * ScaleFactor;
; 2970 :     Result.vector4_f32[2] = V.vector4_f32[2] * ScaleFactor;
; 2971 :     Result.vector4_f32[3] = V.vector4_f32[3] * ScaleFactor;
; 2972 :     return Result;
; 2973 : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 2974 :     return XM_VMULQ_N_F32( V, ScaleFactor );
; 2975 : #elif defined(_XM_SSE_INTRINSICS_)
; 2976 :    XMVECTOR vResult = _mm_set_ps1(ScaleFactor);

  00033	f3 0f 10 85 a8
	01 00 00	 movss	 xmm0, DWORD PTR ScaleFactor$[rbp]
  0003b	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  0003f	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00046	0f 28 85 30 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  0004d	0f 29 45 40	 movaps	 XMMWORD PTR vResult$[rbp], xmm0

; 2977 :    return _mm_mul_ps(vResult,V);

  00051	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR vResult$[rbp]
  00055	0f 59 45 10	 mulps	 xmm0, XMMWORD PTR V$[rbp]
  00059	0f 29 85 60 01
	00 00		 movaps	 XMMWORD PTR $T2[rbp], xmm0
  00060	0f 28 85 60 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T2[rbp]

; 2978 : #endif
; 2979 : }

  00067	48 8d a5 88 01
	00 00		 lea	 rsp, QWORD PTR [rbp+392]
  0006e	5f		 pop	 rdi
  0006f	5d		 pop	 rbp
  00070	c3		 ret	 0
?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z ENDP	; DirectX::XMVectorScale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
;	COMDAT ?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
V1$ = 16
V2$ = 64
$T1 = 304
?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z PROC	; DirectX::XMVectorSubtract, COMDAT

; 2784 : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0000a	48 8d 6c 24 10	 lea	 rbp, QWORD PTR [rsp+16]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 45 10	 lea	 rax, QWORD PTR V1$[rbp]
  00022	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR [rsp+384], rax
  0002a	48 8d 45 40	 lea	 rax, QWORD PTR V2$[rbp]
  0002e	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR [rsp+392], rax
  00036	0f 29 4d 40	 movaps	 XMMWORD PTR V2$[rbp], xmm1
  0003a	0f 29 45 10	 movaps	 XMMWORD PTR V1$[rbp], xmm0

; 2785 : #if defined(_XM_NO_INTRINSICS_)
; 2786 : 
; 2787 :     XMVECTOR Result;
; 2788 :     Result.vector4_f32[0] = V1.vector4_f32[0] - V2.vector4_f32[0];
; 2789 :     Result.vector4_f32[1] = V1.vector4_f32[1] - V2.vector4_f32[1];
; 2790 :     Result.vector4_f32[2] = V1.vector4_f32[2] - V2.vector4_f32[2];
; 2791 :     Result.vector4_f32[3] = V1.vector4_f32[3] - V2.vector4_f32[3];
; 2792 :     return Result;
; 2793 : 
; 2794 : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 2795 :     return vsubq_f32( V1, V2 );
; 2796 : #elif defined(_XM_SSE_INTRINSICS_)
; 2797 :     return _mm_sub_ps( V1, V2 );

  0003e	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR V1$[rbp]
  00042	0f 5c 45 40	 subps	 xmm0, XMMWORD PTR V2$[rbp]
  00046	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  0004d	0f 28 85 30 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]

; 2798 : #endif
; 2799 : }

  00054	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z ENDP	; DirectX::XMVectorSubtract
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
;	COMDAT ?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
V1$ = 16
V2$ = 64
$T1 = 304
?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z PROC		; DirectX::XMVectorAdd, COMDAT

; 2701 : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0000a	48 8d 6c 24 10	 lea	 rbp, QWORD PTR [rsp+16]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 45 10	 lea	 rax, QWORD PTR V1$[rbp]
  00022	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR [rsp+384], rax
  0002a	48 8d 45 40	 lea	 rax, QWORD PTR V2$[rbp]
  0002e	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR [rsp+392], rax
  00036	0f 29 4d 40	 movaps	 XMMWORD PTR V2$[rbp], xmm1
  0003a	0f 29 45 10	 movaps	 XMMWORD PTR V1$[rbp], xmm0

; 2702 : #if defined(_XM_NO_INTRINSICS_)
; 2703 : 
; 2704 :     XMVECTOR Result;
; 2705 :     Result.vector4_f32[0] = V1.vector4_f32[0] + V2.vector4_f32[0];
; 2706 :     Result.vector4_f32[1] = V1.vector4_f32[1] + V2.vector4_f32[1];
; 2707 :     Result.vector4_f32[2] = V1.vector4_f32[2] + V2.vector4_f32[2];
; 2708 :     Result.vector4_f32[3] = V1.vector4_f32[3] + V2.vector4_f32[3];
; 2709 :     return Result;
; 2710 : 
; 2711 : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 2712 :     return vaddq_f32( V1, V2 );
; 2713 : #elif defined(_XM_SSE_INTRINSICS_)
; 2714 :     return _mm_add_ps( V1, V2 );

  0003e	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR V1$[rbp]
  00042	0f 58 45 40	 addps	 xmm0, XMMWORD PTR V2$[rbp]
  00046	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  0004d	0f 28 85 30 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]

; 2715 : #endif
; 2716 : }

  00054	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z ENDP		; DirectX::XMVectorAdd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
;	COMDAT ?XMVectorGetZ@DirectX@@YQMT__m128@@@Z
_TEXT	SEGMENT
V$ = 16
vTemp$ = 64
$T1 = 304
tv70 = 324
?XMVectorGetZ@DirectX@@YQMT__m128@@@Z PROC		; DirectX::XMVectorGetZ, COMDAT

; 444  : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0000a	48 8d 6c 24 10	 lea	 rbp, QWORD PTR [rsp+16]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 45 10	 lea	 rax, QWORD PTR V$[rbp]
  00022	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR [rsp+384], rax
  0002a	0f 29 45 10	 movaps	 XMMWORD PTR V$[rbp], xmm0

; 445  : #if defined(_XM_NO_INTRINSICS_)
; 446  :     return V.vector4_f32[2];
; 447  : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 448  :     return vgetq_lane_f32(V, 2);
; 449  : #elif defined(_XM_SSE_INTRINSICS_)
; 450  :     XMVECTOR vTemp = XM_PERMUTE_PS(V,_MM_SHUFFLE(2,2,2,2));

  0002e	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR V$[rbp]
  00032	0f c6 45 10 aa	 shufps	 xmm0, XMMWORD PTR V$[rbp], 170 ; 000000aaH
  00037	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  0003e	0f 28 85 30 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]
  00045	0f 29 45 40	 movaps	 XMMWORD PTR vTemp$[rbp], xmm0

; 451  :     return _mm_cvtss_f32(vTemp);

  00049	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR vTemp$[rbp]
  0004d	f3 0f 11 85 44
	01 00 00	 movss	 DWORD PTR tv70[rbp], xmm0
  00055	f3 0f 10 85 44
	01 00 00	 movss	 xmm0, DWORD PTR tv70[rbp]

; 452  : #endif
; 453  : }

  0005d	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
?XMVectorGetZ@DirectX@@YQMT__m128@@@Z ENDP		; DirectX::XMVectorGetZ
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
;	COMDAT ?XMVectorGetX@DirectX@@YQMT__m128@@@Z
_TEXT	SEGMENT
V$ = 16
tv66 = 228
?XMVectorGetX@DirectX@@YQMT__m128@@@Z PROC		; DirectX::XMVectorGetX, COMDAT

; 419  : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000a	48 8d 6c 24 10	 lea	 rbp, QWORD PTR [rsp+16]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 45 10	 lea	 rax, QWORD PTR V$[rbp]
  00022	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR [rsp+288], rax
  0002a	0f 29 45 10	 movaps	 XMMWORD PTR V$[rbp], xmm0

; 420  : #if defined(_XM_NO_INTRINSICS_)
; 421  :     return V.vector4_f32[0];
; 422  : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 423  :     return vgetq_lane_f32(V, 0);
; 424  : #elif defined(_XM_SSE_INTRINSICS_)
; 425  :     return _mm_cvtss_f32(V);

  0002e	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR V$[rbp]
  00032	f3 0f 11 85 e4
	00 00 00	 movss	 DWORD PTR tv66[rbp], xmm0
  0003a	f3 0f 10 85 e4
	00 00 00	 movss	 xmm0, DWORD PTR tv66[rbp]

; 426  : #endif
; 427  : }

  00042	48 8d a5 f8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+248]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
?XMVectorGetX@DirectX@@YQMT__m128@@@Z ENDP		; DirectX::XMVectorGetX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
;	COMDAT ?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z
_TEXT	SEGMENT
$T1 = 208
x$ = 272
y$ = 280
z$ = 288
w$ = 296
?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z PROC		; DirectX::XMVectorSet, COMDAT

; 71   : {

$LN3:
  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00012	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  00018	55		 push	 rbp
  00019	57		 push	 rdi
  0001a	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00021	48 8d 6c 24 10	 lea	 rbp, QWORD PTR [rsp+16]
  00026	48 8b fc	 mov	 rdi, rsp
  00029	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0002e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00033	f3 ab		 rep stosd

; 72   : #if defined(_XM_NO_INTRINSICS_)
; 73   :     XMVECTORF32 vResult = {x,y,z,w};
; 74   :     return vResult.v;
; 75   : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 76   :     float32x2_t V0 = vcreate_f32(((uint64_t)*(const uint32_t *)&x) | ((uint64_t)(*(const uint32_t *)&y) << 32));
; 77   :     float32x2_t V1 = vcreate_f32(((uint64_t)*(const uint32_t *)&z) | ((uint64_t)(*(const uint32_t *)&w) << 32));
; 78   :     return vcombine_f32(V0, V1);
; 79   : #elif defined(_XM_SSE_INTRINSICS_)
; 80   :     return _mm_set_ps( w, z, y, x );

  00035	f3 0f 10 85 28
	01 00 00	 movss	 xmm0, DWORD PTR w$[rbp]
  0003d	f3 0f 10 8d 20
	01 00 00	 movss	 xmm1, DWORD PTR z$[rbp]
  00045	f3 0f 10 95 18
	01 00 00	 movss	 xmm2, DWORD PTR y$[rbp]
  0004d	f3 0f 10 9d 10
	01 00 00	 movss	 xmm3, DWORD PTR x$[rbp]
  00055	0f 14 d9	 unpcklps xmm3, xmm1
  00058	0f 14 d0	 unpcklps xmm2, xmm0
  0005b	0f 28 c3	 movaps	 xmm0, xmm3
  0005e	0f 14 c2	 unpcklps xmm0, xmm2
  00061	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00068	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]

; 81   : #endif
; 82   : }

  0006f	48 8d a5 f8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+248]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ENDP		; DirectX::XMVectorSet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
;	COMDAT ?XMStoreFloat4x4@DirectX@@YQXPEAUXMFLOAT4X4@1@UXMMATRIX@1@@Z
_TEXT	SEGMENT
M$ = 16
pDestination$ = 320
?XMStoreFloat4x4@DirectX@@YQXPEAUXMFLOAT4X4@1@UXMMATRIX@1@@Z PROC ; DirectX::XMStoreFloat4x4, COMDAT

; 1818 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  0002a	48 8d 45 10	 lea	 rax, QWORD PTR M$[rbp]
  0002e	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR [rsp+360], rax
  00036	0f 29 5d 40	 movaps	 XMMWORD PTR M$[rbp+48], xmm3
  0003a	0f 29 55 30	 movaps	 XMMWORD PTR M$[rbp+32], xmm2
  0003e	0f 29 4d 20	 movaps	 XMMWORD PTR M$[rbp+16], xmm1
  00042	0f 29 45 10	 movaps	 XMMWORD PTR M$[rbp], xmm0

; 1819 :     assert(pDestination);

  00046	48 83 bd 40 01
	00 00 00	 cmp	 QWORD PTR pDestination$[rbp], 0
  0004e	75 21		 jne	 SHORT $LN3@XMStoreFlo
  00050	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??XMStoreFloat4x4@DirectX@@YQXPEAUXMFLOAT4X4@2@UXMMATRIX@2@@Z@4JA
  00056	ff c0		 inc	 eax
  00058	44 8b c0	 mov	 r8d, eax
  0005b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1JE@DMOBBMDE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
  00069	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0006f	33 c0		 xor	 eax, eax
$LN3@XMStoreFlo:

; 1820 : #if defined(_XM_NO_INTRINSICS_)
; 1821 : 
; 1822 :     pDestination->m[0][0] = M.r[0].vector4_f32[0];
; 1823 :     pDestination->m[0][1] = M.r[0].vector4_f32[1];
; 1824 :     pDestination->m[0][2] = M.r[0].vector4_f32[2];
; 1825 :     pDestination->m[0][3] = M.r[0].vector4_f32[3];
; 1826 : 
; 1827 :     pDestination->m[1][0] = M.r[1].vector4_f32[0];
; 1828 :     pDestination->m[1][1] = M.r[1].vector4_f32[1];
; 1829 :     pDestination->m[1][2] = M.r[1].vector4_f32[2];
; 1830 :     pDestination->m[1][3] = M.r[1].vector4_f32[3];
; 1831 : 
; 1832 :     pDestination->m[2][0] = M.r[2].vector4_f32[0];
; 1833 :     pDestination->m[2][1] = M.r[2].vector4_f32[1];
; 1834 :     pDestination->m[2][2] = M.r[2].vector4_f32[2];
; 1835 :     pDestination->m[2][3] = M.r[2].vector4_f32[3];
; 1836 : 
; 1837 :     pDestination->m[3][0] = M.r[3].vector4_f32[0];
; 1838 :     pDestination->m[3][1] = M.r[3].vector4_f32[1];
; 1839 :     pDestination->m[3][2] = M.r[3].vector4_f32[2];
; 1840 :     pDestination->m[3][3] = M.r[3].vector4_f32[3];
; 1841 : 
; 1842 : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 1843 :     vst1q_f32( reinterpret_cast<float*>(&pDestination->_11), M.r[0] );
; 1844 :     vst1q_f32( reinterpret_cast<float*>(&pDestination->_21), M.r[1] );
; 1845 :     vst1q_f32( reinterpret_cast<float*>(&pDestination->_31), M.r[2] );
; 1846 :     vst1q_f32( reinterpret_cast<float*>(&pDestination->_41), M.r[3] );
; 1847 : #elif defined(_XM_SSE_INTRINSICS_)
; 1848 :     _mm_storeu_ps( &pDestination->_11, M.r[0] );

  00071	b8 10 00 00 00	 mov	 eax, 16
  00076	48 6b c0 00	 imul	 rax, rax, 0
  0007a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR pDestination$[rbp]
  00081	0f 10 44 05 10	 movups	 xmm0, XMMWORD PTR M$[rbp+rax]
  00086	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0

; 1849 :     _mm_storeu_ps( &pDestination->_21, M.r[1] );

  00089	b8 10 00 00 00	 mov	 eax, 16
  0008e	48 6b c0 01	 imul	 rax, rax, 1
  00092	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR pDestination$[rbp]
  00099	48 83 c1 10	 add	 rcx, 16
  0009d	0f 10 44 05 10	 movups	 xmm0, XMMWORD PTR M$[rbp+rax]
  000a2	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0

; 1850 :     _mm_storeu_ps( &pDestination->_31, M.r[2] );

  000a5	b8 10 00 00 00	 mov	 eax, 16
  000aa	48 6b c0 02	 imul	 rax, rax, 2
  000ae	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR pDestination$[rbp]
  000b5	48 83 c1 20	 add	 rcx, 32			; 00000020H
  000b9	0f 10 44 05 10	 movups	 xmm0, XMMWORD PTR M$[rbp+rax]
  000be	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0

; 1851 :     _mm_storeu_ps( &pDestination->_41, M.r[3] );

  000c1	b8 10 00 00 00	 mov	 eax, 16
  000c6	48 6b c0 03	 imul	 rax, rax, 3
  000ca	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR pDestination$[rbp]
  000d1	48 83 c1 30	 add	 rcx, 48			; 00000030H
  000d5	0f 10 44 05 10	 movups	 xmm0, XMMWORD PTR M$[rbp+rax]
  000da	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0

; 1852 : #endif
; 1853 : }

  000dd	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?XMStoreFloat4x4@DirectX@@YQXPEAUXMFLOAT4X4@1@UXMMATRIX@1@@Z$rtcFrameData
  000e8	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000ed	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000f4	5f		 pop	 rdi
  000f5	5d		 pop	 rbp
  000f6	c3		 ret	 0
?XMStoreFloat4x4@DirectX@@YQXPEAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ENDP ; DirectX::XMStoreFloat4x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
;	COMDAT ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PEBUXMFLOAT4X4@1@@Z
_TEXT	SEGMENT
M$ = 16
$T4 = 304
$T5 = 352
$T6 = 400
$T7 = 448
__$ArrayPad$ = 472
pSource$ = 512
?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PEBUXMFLOAT4X4@1@@Z PROC ; DirectX::XMLoadFloat4x4, COMDAT

; 1013 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 86 00 00 00	 mov	 ecx, 134		; 00000086H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR [rsp+568]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 d8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1014 :     assert(pSource);

  0003b	48 83 bd 00 02
	00 00 00	 cmp	 QWORD PTR pSource$[rbp], 0
  00043	75 21		 jne	 SHORT $LN3@XMLoadFloa
  00045	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@2@PEBUXMFLOAT4X4@2@@Z@4JA
  0004b	ff c0		 inc	 eax
  0004d	44 8b c0	 mov	 r8d, eax
  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1JE@DMOBBMDE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00064	33 c0		 xor	 eax, eax
$LN3@XMLoadFloa:

; 1015 : #if defined(_XM_NO_INTRINSICS_)
; 1016 : 
; 1017 :     XMMATRIX M;
; 1018 :     M.r[0].vector4_f32[0] = pSource->m[0][0];
; 1019 :     M.r[0].vector4_f32[1] = pSource->m[0][1];
; 1020 :     M.r[0].vector4_f32[2] = pSource->m[0][2];
; 1021 :     M.r[0].vector4_f32[3] = pSource->m[0][3];
; 1022 : 
; 1023 :     M.r[1].vector4_f32[0] = pSource->m[1][0];
; 1024 :     M.r[1].vector4_f32[1] = pSource->m[1][1];
; 1025 :     M.r[1].vector4_f32[2] = pSource->m[1][2];
; 1026 :     M.r[1].vector4_f32[3] = pSource->m[1][3];
; 1027 : 
; 1028 :     M.r[2].vector4_f32[0] = pSource->m[2][0];
; 1029 :     M.r[2].vector4_f32[1] = pSource->m[2][1];
; 1030 :     M.r[2].vector4_f32[2] = pSource->m[2][2];
; 1031 :     M.r[2].vector4_f32[3] = pSource->m[2][3];
; 1032 : 
; 1033 :     M.r[3].vector4_f32[0] = pSource->m[3][0];
; 1034 :     M.r[3].vector4_f32[1] = pSource->m[3][1];
; 1035 :     M.r[3].vector4_f32[2] = pSource->m[3][2];
; 1036 :     M.r[3].vector4_f32[3] = pSource->m[3][3];
; 1037 :     return M;
; 1038 : 
; 1039 : #elif defined(_XM_ARM_NEON_INTRINSICS_)
; 1040 :     XMMATRIX M;
; 1041 :     M.r[0] = vld1q_f32( reinterpret_cast<const float*>(&pSource->_11) );
; 1042 :     M.r[1] = vld1q_f32( reinterpret_cast<const float*>(&pSource->_21) );
; 1043 :     M.r[2] = vld1q_f32( reinterpret_cast<const float*>(&pSource->_31) );
; 1044 :     M.r[3] = vld1q_f32( reinterpret_cast<const float*>(&pSource->_41) );
; 1045 :     return M;
; 1046 : #elif defined(_XM_SSE_INTRINSICS_)
; 1047 :     XMMATRIX M;

  00066	48 8d 4d 10	 lea	 rcx, QWORD PTR M$[rbp]
  0006a	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QEAA@XZ ; DirectX::XMMATRIX::XMMATRIX

; 1048 :     M.r[0] = _mm_loadu_ps( &pSource->_11 );

  0006f	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR pSource$[rbp]
  00076	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00079	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR $T4[rbp], xmm0
  00080	b8 10 00 00 00	 mov	 eax, 16
  00085	48 6b c0 00	 imul	 rax, rax, 0
  00089	0f 28 85 30 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T4[rbp]
  00090	0f 11 44 05 10	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1049 :     M.r[1] = _mm_loadu_ps( &pSource->_21 );

  00095	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR pSource$[rbp]
  0009c	48 83 c0 10	 add	 rax, 16
  000a0	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000a3	0f 29 85 60 01
	00 00		 movaps	 XMMWORD PTR $T5[rbp], xmm0
  000aa	b8 10 00 00 00	 mov	 eax, 16
  000af	48 6b c0 01	 imul	 rax, rax, 1
  000b3	0f 28 85 60 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T5[rbp]
  000ba	0f 11 44 05 10	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1050 :     M.r[2] = _mm_loadu_ps( &pSource->_31 );

  000bf	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR pSource$[rbp]
  000c6	48 83 c0 20	 add	 rax, 32			; 00000020H
  000ca	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000cd	0f 29 85 90 01
	00 00		 movaps	 XMMWORD PTR $T6[rbp], xmm0
  000d4	b8 10 00 00 00	 mov	 eax, 16
  000d9	48 6b c0 02	 imul	 rax, rax, 2
  000dd	0f 28 85 90 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T6[rbp]
  000e4	0f 11 44 05 10	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1051 :     M.r[3] = _mm_loadu_ps( &pSource->_41 );

  000e9	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR pSource$[rbp]
  000f0	48 83 c0 30	 add	 rax, 48			; 00000030H
  000f4	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000f7	0f 29 85 c0 01
	00 00		 movaps	 XMMWORD PTR $T7[rbp], xmm0
  000fe	b8 10 00 00 00	 mov	 eax, 16
  00103	48 6b c0 03	 imul	 rax, rax, 3
  00107	0f 28 85 c0 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T7[rbp]
  0010e	0f 11 44 05 10	 movups	 XMMWORD PTR M$[rbp+rax], xmm0

; 1052 :     return M;

  00113	0f 28 5d 40	 movaps	 xmm3, XMMWORD PTR M$[rbp+48]
  00117	0f 28 55 30	 movaps	 xmm2, XMMWORD PTR M$[rbp+32]
  0011b	0f 28 4d 20	 movaps	 xmm1, XMMWORD PTR M$[rbp+16]
  0011f	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR M$[rbp]

; 1053 : #endif
; 1054 : }

  00123	f3 0f 7f 44 24
	20		 movdqu	 XMMWORD PTR [rsp+32], xmm0
  00129	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  0012d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PEBUXMFLOAT4X4@1@@Z$rtcFrameData
  00134	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00139	f3 0f 6f 44 24
	20		 movdqu	 xmm0, XMMWORD PTR [rsp+32]
  0013f	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00146	48 33 cd	 xor	 rcx, rbp
  00149	e8 00 00 00 00	 call	 __security_check_cookie
  0014e	48 8d a5 e8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+488]
  00155	5f		 pop	 rdi
  00156	5d		 pop	 rbp
  00157	c3		 ret	 0
?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PEBUXMFLOAT4X4@1@@Z ENDP ; DirectX::XMLoadFloat4x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
;	COMDAT ??0XMFLOAT4X4@DirectX@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0XMFLOAT4X4@DirectX@@QEAA@XZ PROC			; DirectX::XMFLOAT4X4::XMFLOAT4X4, COMDAT

; 698  :     XMFLOAT4X4() {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??0XMFLOAT4X4@DirectX@@QEAA@XZ ENDP			; DirectX::XMFLOAT4X4::XMFLOAT4X4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
;	COMDAT ??0XMFLOAT3@DirectX@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 224
_x$ = 232
_y$ = 240
_z$ = 248
??0XMFLOAT3@DirectX@@QEAA@MMM@Z PROC			; DirectX::XMFLOAT3::XMFLOAT3, COMDAT

; 506  :     XMFLOAT3(float _x, float _y, float _z) : x(_x), y(_y), z(_z) {}

$LN3:
  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00012	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00017	55		 push	 rbp
  00018	57		 push	 rdi
  00019	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00020	48 8b ec	 mov	 rbp, rsp
  00023	48 8b fc	 mov	 rdi, rsp
  00026	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0002b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00030	f3 ab		 rep stosd
  00032	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  0003a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	f3 0f 10 85 e8
	00 00 00	 movss	 xmm0, DWORD PTR _x$[rbp]
  00049	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  0004d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00054	f3 0f 10 85 f0
	00 00 00	 movss	 xmm0, DWORD PTR _y$[rbp]
  0005c	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  00061	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00068	f3 0f 10 85 f8
	00 00 00	 movss	 xmm0, DWORD PTR _z$[rbp]
  00070	f3 0f 11 40 08	 movss	 DWORD PTR [rax+8], xmm0
  00075	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00083	5f		 pop	 rdi
  00084	5d		 pop	 rbp
  00085	c3		 ret	 0
??0XMFLOAT3@DirectX@@QEAA@MMM@Z ENDP			; DirectX::XMFLOAT3::XMFLOAT3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
;	COMDAT ??DXMMATRIX@DirectX@@QEBQ?AU01@U01@@Z
_TEXT	SEGMENT
M$ = 16
$T4 = 304
$T5 = 400
this$ = 512
??DXMMATRIX@DirectX@@QEBQ?AU01@U01@@Z PROC		; DirectX::XMMATRIX::operator*, COMDAT

; 3044 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec 10 02
	00 00		 sub	 rsp, 528		; 00000210H
  0000f	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 84 00 00 00	 mov	 ecx, 132		; 00000084H
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR [rsp+568]
  0002b	48 8d 45 10	 lea	 rax, QWORD PTR M$[rbp]
  0002f	48 89 84 24 38
	02 00 00	 mov	 QWORD PTR [rsp+568], rax
  00037	0f 29 5d 40	 movaps	 XMMWORD PTR M$[rbp+48], xmm3
  0003b	0f 29 55 30	 movaps	 XMMWORD PTR M$[rbp+32], xmm2
  0003f	0f 29 4d 20	 movaps	 XMMWORD PTR M$[rbp+16], xmm1
  00043	0f 29 45 10	 movaps	 XMMWORD PTR M$[rbp], xmm0

; 3045 :     return XMMatrixMultiply(*this, M);

  00047	48 8d 55 10	 lea	 rdx, QWORD PTR M$[rbp]
  0004b	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00052	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00055	0f 10 48 10	 movups	 xmm1, XMMWORD PTR [rax+16]
  00059	0f 10 50 20	 movups	 xmm2, XMMWORD PTR [rax+32]
  0005d	0f 10 58 30	 movups	 xmm3, XMMWORD PTR [rax+48]
  00061	e8 00 00 00 00	 call	 ?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@AEBU21@@Z ; DirectX::XMMatrixMultiply
  00066	0f 29 9d c0 01
	00 00		 movaps	 XMMWORD PTR $T5[rbp+48], xmm3
  0006d	0f 29 95 b0 01
	00 00		 movaps	 XMMWORD PTR $T5[rbp+32], xmm2
  00074	0f 29 8d a0 01
	00 00		 movaps	 XMMWORD PTR $T5[rbp+16], xmm1
  0007b	0f 29 85 90 01
	00 00		 movaps	 XMMWORD PTR $T5[rbp], xmm0
  00082	48 8d 85 30 01
	00 00		 lea	 rax, QWORD PTR $T4[rbp]
  00089	48 8d 8d 90 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00090	48 8b f8	 mov	 rdi, rax
  00093	48 8b f1	 mov	 rsi, rcx
  00096	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0009b	f3 a4		 rep movsb
  0009d	0f 28 9d 60 01
	00 00		 movaps	 xmm3, XMMWORD PTR $T4[rbp+48]
  000a4	0f 28 95 50 01
	00 00		 movaps	 xmm2, XMMWORD PTR $T4[rbp+32]
  000ab	0f 28 8d 40 01
	00 00		 movaps	 xmm1, XMMWORD PTR $T4[rbp+16]
  000b2	0f 28 85 30 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T4[rbp]

; 3046 : }

  000b9	f3 0f 7f 44 24
	20		 movdqu	 XMMWORD PTR [rsp+32], xmm0
  000bf	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  000c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??DXMMATRIX@DirectX@@QEBQ?AU01@U01@@Z$rtcFrameData
  000ca	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000cf	f3 0f 6f 44 24
	20		 movdqu	 xmm0, XMMWORD PTR [rsp+32]
  000d5	48 8d a5 e0 01
	00 00		 lea	 rsp, QWORD PTR [rbp+480]
  000dc	5f		 pop	 rdi
  000dd	5e		 pop	 rsi
  000de	5d		 pop	 rbp
  000df	c3		 ret	 0
??DXMMATRIX@DirectX@@QEBQ?AU01@U01@@Z ENDP		; DirectX::XMMATRIX::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
;	COMDAT ??0XMMATRIX@DirectX@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0XMMATRIX@DirectX@@QEAA@XZ PROC			; DirectX::XMMATRIX::XMMATRIX, COMDAT

; 413  :     XMMATRIX() {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??0XMMATRIX@DirectX@@QEAA@XZ ENDP			; DirectX::XMMATRIX::XMMATRIX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
;	COMDAT ??DDirectX@@YQ?AT__m128@@T1@M@Z
_TEXT	SEGMENT
V$ = 16
$T1 = 256
S$ = 328
??DDirectX@@YQ?AT__m128@@T1@M@Z PROC			; DirectX::operator*, COMDAT

; 13994: {

$LN3:
  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	55		 push	 rbp
  00007	57		 push	 rdi
  00008	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000f	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8d 45 10	 lea	 rax, QWORD PTR V$[rbp]
  00027	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR [rsp+368], rax
  0002f	0f 29 45 10	 movaps	 XMMWORD PTR V$[rbp], xmm0

; 13995:     return XMVectorScale(V, S);

  00033	f3 0f 10 8d 48
	01 00 00	 movss	 xmm1, DWORD PTR S$[rbp]
  0003b	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR V$[rbp]
  0003f	e8 00 00 00 00	 call	 ?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z ; DirectX::XMVectorScale
  00044	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  0004b	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]

; 13996: }

  00052	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00059	5f		 pop	 rdi
  0005a	5d		 pop	 rbp
  0005b	c3		 ret	 0
??DDirectX@@YQ?AT__m128@@T1@M@Z ENDP			; DirectX::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
;	COMDAT ??GDirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
V1$ = 16
V2$ = 64
$T1 = 304
??GDirectX@@YQ?AT__m128@@T1@0@Z PROC			; DirectX::operator-, COMDAT

; 13961: {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0000a	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 45 10	 lea	 rax, QWORD PTR V1$[rbp]
  00022	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR [rsp+416], rax
  0002a	48 8d 45 40	 lea	 rax, QWORD PTR V2$[rbp]
  0002e	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR [rsp+424], rax
  00036	0f 29 4d 40	 movaps	 XMMWORD PTR V2$[rbp], xmm1
  0003a	0f 29 45 10	 movaps	 XMMWORD PTR V1$[rbp], xmm0

; 13962:     return XMVectorSubtract(V1, V2);

  0003e	0f 28 4d 40	 movaps	 xmm1, XMMWORD PTR V2$[rbp]
  00042	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR V1$[rbp]
  00046	e8 00 00 00 00	 call	 ?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorSubtract
  0004b	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00052	0f 28 85 30 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]

; 13963: }

  00059	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??GDirectX@@YQ?AT__m128@@T1@0@Z ENDP			; DirectX::operator-
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
;	COMDAT ??HDirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
V1$ = 16
V2$ = 64
$T1 = 304
??HDirectX@@YQ?AT__m128@@T1@0@Z PROC			; DirectX::operator+, COMDAT

; 13950: {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0000a	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 45 10	 lea	 rax, QWORD PTR V1$[rbp]
  00022	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR [rsp+416], rax
  0002a	48 8d 45 40	 lea	 rax, QWORD PTR V2$[rbp]
  0002e	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR [rsp+424], rax
  00036	0f 29 4d 40	 movaps	 XMMWORD PTR V2$[rbp], xmm1
  0003a	0f 29 45 10	 movaps	 XMMWORD PTR V1$[rbp], xmm0

; 13951:     return XMVectorAdd(V1, V2);

  0003e	0f 28 4d 40	 movaps	 xmm1, XMMWORD PTR V2$[rbp]
  00042	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR V1$[rbp]
  00046	e8 00 00 00 00	 call	 ?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorAdd
  0004b	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR $T1[rbp], xmm0
  00052	0f 28 85 30 01
	00 00		 movaps	 xmm0, XMMWORD PTR $T1[rbp]

; 13952: }

  00059	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??HDirectX@@YQ?AT__m128@@T1@0@Z ENDP			; DirectX::operator+
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
;	COMDAT ??BXMVECTORI32@DirectX@@QEBA?AT__m128@@XZ
_TEXT	SEGMENT
this$ = 224
__$ReturnUdt$ = 232
??BXMVECTORI32@DirectX@@QEBA?AT__m128@@XZ PROC		; DirectX::XMVECTORI32::operator __m128, COMDAT

; 316  :     inline operator XMVECTOR() const { return v; }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  0002d	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00034	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003b	0f 10 01	 movups	 xmm0, XMMWORD PTR [rcx]
  0003e	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0
  00041	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??BXMVECTORI32@DirectX@@QEBA?AT__m128@@XZ ENDP		; DirectX::XMVECTORI32::operator __m128
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
;	COMDAT ??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ
_TEXT	SEGMENT
this$ = 224
__$ReturnUdt$ = 232
??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ PROC		; DirectX::XMVECTORF32::operator __m128, COMDAT

; 300  :     inline operator XMVECTOR() const { return v; }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  0002d	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00034	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003b	0f 10 01	 movups	 xmm0, XMMWORD PTR [rcx]
  0003e	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0
  00041	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??BXMVECTORF32@DirectX@@QEBA?AT__m128@@XZ ENDP		; DirectX::XMVECTORF32::operator __m128
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
;	COMDAT ?XMConvertToRadians@DirectX@@YAMM@Z
_TEXT	SEGMENT
fDegrees$ = 224
?XMConvertToRadians@DirectX@@YAMM@Z PROC		; DirectX::XMConvertToRadians, COMDAT

; 208  : inline float XMConvertToRadians(float fDegrees) { return fDegrees * (XM_PI / 180.0f); }

$LN3:
  00000	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  00006	55		 push	 rbp
  00007	57		 push	 rdi
  00008	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000f	48 8d 6c 24 10	 lea	 rbp, QWORD PTR [rsp+16]
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	f3 0f 10 85 e0
	00 00 00	 movss	 xmm0, DWORD PTR fDegrees$[rbp]
  0002b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00033	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003a	5f		 pop	 rdi
  0003b	5d		 pop	 rbp
  0003c	c3		 ret	 0
?XMConvertToRadians@DirectX@@YAMM@Z ENDP		; DirectX::XMConvertToRadians
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAXXZ
_TEXT	SEGMENT
this$ = 224
?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran, COMDAT

; 2282 : 		{	// report an out_of_range error

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2283 : 		_Xout_of_range("invalid string position");

  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Xout_of_range@std@@YAXPEBD@Z
$LN2@Xran:

; 2284 : 		}

  00037	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003e	5f		 pop	 rdi
  0003f	5d		 pop	 rbp
  00040	c3		 ret	 0
?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAX_K@Z
_TEXT	SEGMENT
this$ = 224
_Off$ = 232
?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAX_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Check_offset, COMDAT

; 2270 : 		{	// checks whether _Off is in the bounds of [0, this->size()]

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2271 : 		if (this->_Mysize() < _Off)

  0002f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00036	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEB_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
  0003b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  00042	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00045	73 0c		 jae	 SHORT $LN2@Check_offs

; 2272 : 			_Xran();

  00047	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	e8 00 00 00 00	 call	 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN2@Check_offs:
$LN3@Check_offs:

; 2273 : 		}

  00053	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005a	5f		 pop	 rdi
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAX_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAXXZ
_TEXT	SEGMENT
this$ = 224
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen, COMDAT

; 2265 : 		{	// report a length_error

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2266 : 		_Xlength_error("string too long");

  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Xlength_error@std@@YAXPEBD@Z
$LN2@Xlen:

; 2267 : 		}

  00037	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003e	5f		 pop	 rdi
  0003f	5d		 pop	 rbp
  00040	c3		 ret	 0
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_N_K@Z
_TEXT	SEGMENT
_Ptr$1 = 8
tv155 = 216
tv132 = 216
tv87 = 216
this$ = 256
_Built$ = 264
_Newsize$ = 272
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_N_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy, COMDAT

; 2248 : 		{	// initialize buffer, deallocating any storage

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 2249 : 		if (!_Built)

  00033	0f b6 85 08 01
	00 00		 movzx	 eax, BYTE PTR _Built$[rbp]
  0003a	85 c0		 test	 eax, eax
  0003c	75 05		 jne	 SHORT $LN2@Tidy
  0003e	e9 dc 00 00 00	 jmp	 $LN3@Tidy
$LN2@Tidy:

; 2250 : 			;
; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00043	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004a	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres
  0004f	48 83 38 08	 cmp	 QWORD PTR [rax], 8
  00053	0f 82 c6 00 00
	00		 jb	 $LN4@Tidy

; 2252 : 			{	// copy any leftovers to small buffer and deallocate
; 2253 : 			pointer _Ptr = this->_Bx()._Ptr;

  00059	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00060	e8 00 00 00 00	 call	 ?_Bx@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Bx
  00065	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00068	48 89 45 08	 mov	 QWORD PTR _Ptr$1[rbp], rax

; 2254 : 			this->_Getal().destroy(_STD addressof(this->_Bx()._Ptr));

  0006c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?_Bx@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Bx
  00078	48 8b c8	 mov	 rcx, rax
  0007b	e8 00 00 00 00	 call	 ??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z ; std::addressof<wchar_t * __ptr64>
  00080	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv87[rbp], rax
  00087	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008e	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
  00093	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv87[rbp]
  0009a	48 8b d1	 mov	 rdx, rcx
  0009d	48 8b c8	 mov	 rcx, rax
  000a0	e8 00 00 00 00	 call	 ??$destroy@PEA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEAPEA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t * __ptr64>

; 2255 : 			if (0 < _Newsize)

  000a5	48 83 bd 10 01
	00 00 00	 cmp	 QWORD PTR _Newsize$[rbp], 0
  000ad	76 35		 jbe	 SHORT $LN5@Tidy

; 2256 : 				_Traits::copy(this->_Bx()._Buf,

  000af	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr$1[rbp]
  000b3	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ; std::_Unfancy<wchar_t>
  000b8	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv132[rbp], rax
  000bf	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c6	e8 00 00 00 00	 call	 ?_Bx@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Bx
  000cb	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR _Newsize$[rbp]
  000d2	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv132[rbp]
  000d9	48 8b d1	 mov	 rdx, rcx
  000dc	48 8b c8	 mov	 rcx, rax
  000df	e8 00 00 00 00	 call	 ?copy@?$char_traits@_W@std@@SAPEA_WPEA_WPEB_W_K@Z ; std::char_traits<wchar_t>::copy
$LN5@Tidy:

; 2257 : 					_Unfancy(_Ptr), _Newsize);
; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  000e4	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000eb	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres
  000f0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f3	48 ff c0	 inc	 rax
  000f6	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv155[rbp], rax
  000fd	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00104	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
  00109	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv155[rbp]
  00110	4c 8b c1	 mov	 r8, rcx
  00113	48 8b 55 08	 mov	 rdx, QWORD PTR _Ptr$1[rbp]
  00117	48 8b c8	 mov	 rcx, rax
  0011a	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEA_W_K@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
$LN4@Tidy:
$LN3@Tidy:

; 2259 : 			}
; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

  0011f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00126	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres
  0012b	48 c7 00 07 00
	00 00		 mov	 QWORD PTR [rax], 7

; 2261 : 		_Eos(_Newsize);

  00132	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR _Newsize$[rbp]
  00139	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00140	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos

; 2262 : 		}

  00145	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0014c	5f		 pop	 rdi
  0014d	5d		 pop	 rbp
  0014e	c3		 ret	 0
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_N_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA_NPEB_W@Z
_TEXT	SEGMENT
tv77 = 192
this$ = 240
_Ptr$ = 248
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA_NPEB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside, COMDAT

; 2238 : 		{	// test if _Ptr points inside string

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 2239 : 		if (_Ptr == nullptr_t{} || _Ptr < this->_Myptr()
; 2240 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

  0002f	48 83 bd f8 00
	00 00 00	 cmp	 QWORD PTR _Ptr$[rbp], 0
  00037	74 4b		 je	 SHORT $LN4@Inside
  00039	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00040	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAPEA_WXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
  00045	48 39 85 f8 00
	00 00		 cmp	 QWORD PTR _Ptr$[rbp], rax
  0004c	72 36		 jb	 SHORT $LN4@Inside
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAPEA_WXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
  0005a	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv77[rbp], rax
  00061	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00068	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
  0006d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00070	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv77[rbp]
  00077	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0007b	48 3b 85 f8 00
	00 00		 cmp	 rax, QWORD PTR _Ptr$[rbp]
  00082	77 06		 ja	 SHORT $LN2@Inside
$LN4@Inside:

; 2241 : 			return (false);	// don't ask

  00084	32 c0		 xor	 al, al
  00086	eb 04		 jmp	 SHORT $LN1@Inside

; 2242 : 		else

  00088	eb 02		 jmp	 SHORT $LN3@Inside
$LN2@Inside:

; 2243 : 			return (true);

  0008a	b0 01		 mov	 al, 1
$LN3@Inside:
$LN1@Inside:

; 2244 : 		}

  0008c	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00093	5f		 pop	 rdi
  00094	5d		 pop	 rbp
  00095	c3		 ret	 0
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA_NPEB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA_N_K_N@Z
_TEXT	SEGMENT
tv140 = 192
tv133 = 192
this$ = 240
_Newsize$ = 248
_Trim$ = 256
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA_N_K_N@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow, COMDAT

; 2224 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

$LN13:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 2225 : 		if (max_size() < _Newsize)

  00034	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003b	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  00040	48 3b 85 f8 00
	00 00		 cmp	 rax, QWORD PTR _Newsize$[rbp]
  00047	73 0c		 jae	 SHORT $LN2@Grow

; 2226 : 			_Xlen();	// result too long

  00049	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00050	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN2@Grow:

; 2227 : 		if (this->_Myres() < _Newsize)

  00055	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005c	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres
  00061	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Newsize$[rbp]
  00068	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0006b	73 27		 jae	 SHORT $LN3@Grow

; 2228 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow

  0006d	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00074	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
  00079	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  0007c	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR _Newsize$[rbp]
  00083	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008a	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
  0008f	e9 82 00 00 00	 jmp	 $LN4@Grow
$LN3@Grow:

; 2229 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00094	0f b6 85 00 01
	00 00		 movzx	 eax, BYTE PTR _Trim$[rbp]
  0009b	85 c0		 test	 eax, eax
  0009d	74 5f		 je	 SHORT $LN5@Grow
  0009f	48 83 bd f8 00
	00 00 08	 cmp	 QWORD PTR _Newsize$[rbp], 8
  000a7	73 55		 jae	 SHORT $LN5@Grow

; 2230 : 			_Tidy(true,	// copy and deallocate if trimming to small string

  000a9	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b0	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
  000b5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b8	48 39 85 f8 00
	00 00		 cmp	 QWORD PTR _Newsize$[rbp], rax
  000bf	73 10		 jae	 SHORT $LN9@Grow
  000c1	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR _Newsize$[rbp]
  000c8	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv133[rbp], rax
  000cf	eb 16		 jmp	 SHORT $LN10@Grow
$LN9@Grow:
  000d1	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d8	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
  000dd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e0	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv133[rbp], rax
$LN10@Grow:
  000e7	4c 8b 85 c0 00
	00 00		 mov	 r8, QWORD PTR tv133[rbp]
  000ee	b2 01		 mov	 dl, 1
  000f0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f7	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_N_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy
  000fc	eb 18		 jmp	 SHORT $LN6@Grow
$LN5@Grow:

; 2231 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2232 : 		else if (_Newsize == 0)

  000fe	48 83 bd f8 00
	00 00 00	 cmp	 QWORD PTR _Newsize$[rbp], 0
  00106	75 0e		 jne	 SHORT $LN7@Grow

; 2233 : 			_Eos(0);	// new size is zero, just null terminate

  00108	33 d2		 xor	 edx, edx
  0010a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00111	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN7@Grow:
$LN6@Grow:
$LN4@Grow:

; 2234 : 		return (0 < _Newsize);	// return true only if more work to do

  00116	48 83 bd f8 00
	00 00 00	 cmp	 QWORD PTR _Newsize$[rbp], 0
  0011e	76 0c		 jbe	 SHORT $LN11@Grow
  00120	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv140[rbp], 1
  0012a	eb 0a		 jmp	 SHORT $LN12@Grow
$LN11@Grow:
  0012c	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv140[rbp], 0
$LN12@Grow:
  00136	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv140[rbp]
$LN8@Grow:

; 2235 : 		}

  0013d	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00144	5f		 pop	 rdi
  00145	5d		 pop	 rbp
  00146	c3		 ret	 0
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA_N_K_N@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K@Z
_TEXT	SEGMENT
_Dx$ = 8
$T1 = 228
this$ = 288
_Newsize$ = 296
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos, COMDAT

; 2217 : 		{	// set new length and null terminator

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 2218 : 		auto& _Dx = this->_Get_data();

  0002f	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00036	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
  0003b	48 89 45 08	 mov	 QWORD PTR _Dx$[rbp], rax

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  0003f	33 c0		 xor	 eax, eax
  00041	66 89 85 e4 00
	00 00		 mov	 WORD PTR $T1[rbp], ax
  00048	48 8b 45 08	 mov	 rax, QWORD PTR _Dx$[rbp]
  0004c	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Newsize$[rbp]
  00053	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx
  00057	48 8b 4d 08	 mov	 rcx, QWORD PTR _Dx$[rbp]
  0005b	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  00060	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Newsize$[rbp]
  00067	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0006b	48 8d 95 e4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00072	48 8b c8	 mov	 rcx, rax
  00075	e8 00 00 00 00	 call	 ?assign@?$char_traits@_W@std@@SAXAEA_WAEB_W@Z ; std::char_traits<wchar_t>::assign

; 2220 : 		}

  0007a	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z
_TEXT	SEGMENT
_Newres$ = 8
_Ptr$ = 40
$T4 = 264
tv196 = 280
tv181 = 280
tv165 = 280
tv152 = 280
tv138 = 280
tv91 = 280
tv75 = 280
tv217 = 288
tv216 = 288
tv92 = 288
__$ArrayPad$ = 296
this$ = 336
_Newsize$ = 344
_Oldlen$ = 352
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy, COMDAT

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

$LN23:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]
  00034	48 c7 85 08 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T4[rbp], -2
  0003f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00046	48 33 c5	 xor	 rax, rbp
  00049	48 89 85 28 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00050	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR _Newsize$[rbp]
  00057	48 83 c8 07	 or	 rax, 7
  0005b	48 89 45 08	 mov	 QWORD PTR _Newres$[rbp], rax

; 2184 : 		if (max_size() < _Newres)

  0005f	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  0006b	48 3b 45 08	 cmp	 rax, QWORD PTR _Newres$[rbp]
  0006f	73 10		 jae	 SHORT $LN2@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

  00071	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR _Newsize$[rbp]
  00078	48 89 45 08	 mov	 QWORD PTR _Newres$[rbp], rax
  0007c	e9 e3 00 00 00	 jmp	 $LN3@Copy
$LN2@Copy:

; 2186 : 		else if (this->_Myres() / 2 <= _Newres / 3)

  00081	33 d2		 xor	 edx, edx
  00083	48 8b 45 08	 mov	 rax, QWORD PTR _Newres$[rbp]
  00087	b9 03 00 00 00	 mov	 ecx, 3
  0008c	48 f7 f1	 div	 rcx
  0008f	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv75[rbp], rax
  00096	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009d	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres
  000a2	33 d2		 xor	 edx, edx
  000a4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a7	b9 02 00 00 00	 mov	 ecx, 2
  000ac	48 f7 f1	 div	 rcx
  000af	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR tv75[rbp]
  000b6	48 3b c1	 cmp	 rax, rcx
  000b9	77 05		 ja	 SHORT $LN4@Copy
  000bb	e9 a4 00 00 00	 jmp	 $LN3@Copy
$LN4@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)

  000c0	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c7	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres
  000cc	33 d2		 xor	 edx, edx
  000ce	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d1	b9 02 00 00 00	 mov	 ecx, 2
  000d6	48 f7 f1	 div	 rcx
  000d9	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv91[rbp], rax
  000e0	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e7	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  000ec	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR tv91[rbp]
  000f3	48 2b c1	 sub	 rax, rcx
  000f6	48 89 85 20 01
	00 00		 mov	 QWORD PTR tv92[rbp], rax
  000fd	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00104	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres
  00109	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR tv92[rbp]
  00110	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00113	77 3f		 ja	 SHORT $LN6@Copy

; 2189 : 			_Newres = this->_Myres()

  00115	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011c	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres
  00121	33 d2		 xor	 edx, edx
  00123	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00126	b9 02 00 00 00	 mov	 ecx, 2
  0012b	48 f7 f1	 div	 rcx
  0012e	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv138[rbp], rax
  00135	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0013c	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres
  00141	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR tv138[rbp]
  00148	48 03 08	 add	 rcx, QWORD PTR [rax]
  0014b	48 8b c1	 mov	 rax, rcx
  0014e	48 89 45 08	 mov	 QWORD PTR _Newres$[rbp], rax

; 2190 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2191 : 		else

  00152	eb 10		 jmp	 SHORT $LN3@Copy
$LN6@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

  00154	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0015b	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  00160	48 89 45 08	 mov	 QWORD PTR _Newres$[rbp], rax
$LN3@Copy:

; 2193 : 
; 2194 : 		pointer _Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

  00164	48 8b 45 08	 mov	 rax, QWORD PTR _Newres$[rbp]
  00168	48 ff c0	 inc	 rax
  0016b	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv152[rbp], rax
  00172	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00179	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
  0017e	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR tv152[rbp]
  00185	48 8b d1	 mov	 rdx, rcx
  00188	48 8b c8	 mov	 rcx, rax
  0018b	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAPEA_W_K@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
  00190	48 89 85 20 01
	00 00		 mov	 QWORD PTR tv216[rbp], rax
  00197	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR tv216[rbp]
  0019e	48 89 45 28	 mov	 QWORD PTR _Ptr$[rbp], rax
  001a2	eb 00		 jmp	 SHORT $LN18@Copy
$LN19@Copy:
$LN18@Copy:

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)

  001a4	48 83 bd 60 01
	00 00 00	 cmp	 QWORD PTR _Oldlen$[rbp], 0
  001ac	76 35		 jbe	 SHORT $LN10@Copy

; 2208 : 			_Traits::copy(_Unfancy(_Ptr), this->_Myptr(),

  001ae	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001b5	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAPEA_WXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
  001ba	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv181[rbp], rax
  001c1	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  001c5	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ; std::_Unfancy<wchar_t>
  001ca	4c 8b 85 60 01
	00 00		 mov	 r8, QWORD PTR _Oldlen$[rbp]
  001d1	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR tv181[rbp]
  001d8	48 8b d1	 mov	 rdx, rcx
  001db	48 8b c8	 mov	 rcx, rax
  001de	e8 00 00 00 00	 call	 ?copy@?$char_traits@_W@std@@SAPEA_WPEA_WPEB_W_K@Z ; std::char_traits<wchar_t>::copy
$LN10@Copy:

; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);

  001e3	45 33 c0	 xor	 r8d, r8d
  001e6	b2 01		 mov	 dl, 1
  001e8	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ef	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_N_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy

; 2211 : 		this->_Getal().construct(_STD addressof(this->_Bx()._Ptr), _Ptr);

  001f4	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001fb	e8 00 00 00 00	 call	 ?_Bx@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Bx
  00200	48 8b c8	 mov	 rcx, rax
  00203	e8 00 00 00 00	 call	 ??$addressof@PEA_W@std@@YAPEAPEA_WAEAPEA_W@Z ; std::addressof<wchar_t * __ptr64>
  00208	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv196[rbp], rax
  0020f	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00216	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
  0021b	4c 8d 45 28	 lea	 r8, QWORD PTR _Ptr$[rbp]
  0021f	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR tv196[rbp]
  00226	48 8b d1	 mov	 rdx, rcx
  00229	48 8b c8	 mov	 rcx, rax
  0022c	e8 00 00 00 00	 call	 ??$construct@PEA_WAEAPEA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEAPEA_WAEAPEA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t * __ptr64,wchar_t * __ptr64 & __ptr64>

; 2212 : 		this->_Myres() = _Newres;

  00231	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00238	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres
  0023d	48 8b 4d 08	 mov	 rcx, QWORD PTR _Newres$[rbp]
  00241	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2213 : 		_Eos(_Oldlen);

  00244	48 8b 95 60 01
	00 00		 mov	 rdx, QWORD PTR _Oldlen$[rbp]
  0024b	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00252	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos

; 2214 : 		}

  00257	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0025b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z$rtcFrameData
  00262	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00267	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0026e	48 33 cd	 xor	 rcx, rbp
  00271	e8 00 00 00 00	 call	 __security_check_cookie
  00276	48 8d a5 38 01
	00 00		 lea	 rsp, QWORD PTR [rbp+312]
  0027d	5f		 pop	 rdi
  0027e	5d		 pop	 rbp
  0027f	c3		 ret	 0
$LN20@Copy:
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Newres$ = 8
_Ptr$ = 40
$T4 = 264
tv196 = 280
tv181 = 280
tv165 = 280
tv152 = 280
tv138 = 280
tv91 = 280
tv75 = 280
tv217 = 288
tv216 = 288
tv92 = 288
__$ArrayPad$ = 296
this$ = 336
_Newsize$ = 344
_Oldlen$ = 352
?catch$1@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA PROC ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy'::`1'::catch$1

; 2197 : 		_CATCH_ALL

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z$0:

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00014	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR _Newsize$[rbp]
  0001b	48 89 45 08	 mov	 QWORD PTR _Newres$[rbp], rax

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

  0001f	48 8b 45 08	 mov	 rax, QWORD PTR _Newres$[rbp]
  00023	48 ff c0	 inc	 rax
  00026	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv165[rbp], rax
  0002d	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00034	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
  00039	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR tv165[rbp]
  00040	48 8b d1	 mov	 rdx, rcx
  00043	48 8b c8	 mov	 rcx, rax
  00046	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAPEA_W_K@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
  0004b	48 89 85 20 01
	00 00		 mov	 QWORD PTR tv217[rbp], rax
  00052	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR tv217[rbp]
  00059	48 89 45 28	 mov	 QWORD PTR _Ptr$[rbp], rax
  0005d	eb 00		 jmp	 SHORT $LN16@catch$1
$LN17@catch$1:
$LN16@catch$1:

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END

  0005f	48 8d 05 00 00
	00 00		 lea	 rax, $LN19@catch$1
  00066	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006a	5f		 pop	 rdi
  0006b	5d		 pop	 rbp
  0006c	c3		 ret	 0
  0006d	cc		 int	 3
?catch$1@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA ENDP ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy'::`1'::catch$1
_Newres$ = 8
_Ptr$ = 40
$T4 = 264
tv196 = 280
tv181 = 280
tv165 = 280
tv152 = 280
tv138 = 280
tv91 = 280
tv75 = 280
tv217 = 288
tv216 = 288
tv92 = 288
__$ArrayPad$ = 296
this$ = 336
_Newsize$ = 344
_Oldlen$ = 352
?catch$0@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA PROC ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy'::`1'::catch$0

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL

  0006e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00073	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00078	55		 push	 rbp
  00079	57		 push	 rdi
  0007a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0007e	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z$1:

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

  00082	45 33 c0	 xor	 r8d, r8d
  00085	b2 01		 mov	 dl, 1
  00087	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008e	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_N_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;

  00093	33 d2		 xor	 edx, edx
  00095	33 c9		 xor	 ecx, ecx
  00097	e8 00 00 00 00	 call	 _CxxThrowException
  0009c	90		 npad	 1

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END

  0009d	48 8d 05 00 00
	00 00		 lea	 rax, $LN17@catch$0
  000a4	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000a8	5f		 pop	 rdi
  000a9	5d		 pop	 rbp
  000aa	c3		 ret	 0
  000ab	cc		 int	 3
?catch$0@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA ENDP ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Newres$ = 8
_Ptr$ = 40
$T4 = 264
tv196 = 280
tv181 = 280
tv165 = 280
tv152 = 280
tv138 = 280
tv91 = 280
tv75 = 280
tv217 = 288
tv216 = 288
tv92 = 288
__$ArrayPad$ = 296
this$ = 336
_Newsize$ = 344
_Oldlen$ = 352
?catch$1@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA PROC ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy'::`1'::catch$1

; 2197 : 		_CATCH_ALL

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z$0:

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00014	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR _Newsize$[rbp]
  0001b	48 89 45 08	 mov	 QWORD PTR _Newres$[rbp], rax

; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

  0001f	48 8b 45 08	 mov	 rax, QWORD PTR _Newres$[rbp]
  00023	48 ff c0	 inc	 rax
  00026	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv165[rbp], rax
  0002d	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00034	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
  00039	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR tv165[rbp]
  00040	48 8b d1	 mov	 rdx, rcx
  00043	48 8b c8	 mov	 rcx, rax
  00046	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAPEA_W_K@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
  0004b	48 89 85 20 01
	00 00		 mov	 QWORD PTR tv217[rbp], rax
  00052	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR tv217[rbp]
  00059	48 89 45 28	 mov	 QWORD PTR _Ptr$[rbp], rax
  0005d	eb 00		 jmp	 SHORT $LN16@catch$1
$LN17@catch$1:
$LN16@catch$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END

  0005f	48 8d 05 00 00
	00 00		 lea	 rax, $LN19@catch$1
  00066	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006a	5f		 pop	 rdi
  0006b	5d		 pop	 rbp
  0006c	c3		 ret	 0
  0006d	cc		 int	 3
?catch$1@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA ENDP ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Newres$ = 8
_Ptr$ = 40
$T4 = 264
tv196 = 280
tv181 = 280
tv165 = 280
tv152 = 280
tv138 = 280
tv91 = 280
tv75 = 280
tv217 = 288
tv216 = 288
tv92 = 288
__$ArrayPad$ = 296
this$ = 336
_Newsize$ = 344
_Oldlen$ = 352
?catch$0@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA PROC ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy'::`1'::catch$0

; 2201 : 			_CATCH_ALL

  0006e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00073	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00078	55		 push	 rbp
  00079	57		 push	 rdi
  0007a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0007e	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z$1:

; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

  00082	45 33 c0	 xor	 r8d, r8d
  00085	b2 01		 mov	 dl, 1
  00087	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008e	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_N_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy

; 2203 : 			_RERAISE;

  00093	33 d2		 xor	 edx, edx
  00095	33 c9		 xor	 ecx, ecx
  00097	e8 00 00 00 00	 call	 _CxxThrowException
  0009c	90		 npad	 1

; 2204 : 			_CATCH_END

  0009d	48 8d 05 00 00
	00 00		 lea	 rax, $LN17@catch$0
  000a4	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000a8	5f		 pop	 rdi
  000a9	5d		 pop	 rbp
  000aa	c3		 ret	 0
  000ab	cc		 int	 3
?catch$0@?0??_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K0@Z@4HA ENDP ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_K_K0@Z
_TEXT	SEGMENT
_Max_effective_size$ = 8
this$ = 256
_Off$ = 264
_Size$ = 272
?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_K_K0@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Clamp_suffix_size, COMDAT

; 2111 : 		{	// trims _Size to the longest it can be assuming a string starting at _Off

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 2112 : 		const size_type _Max_effective_size = this->_Mysize() - _Off;

  00034	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003b	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEB_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
  00040	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  00047	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004a	48 2b c1	 sub	 rax, rcx
  0004d	48 89 45 08	 mov	 QWORD PTR _Max_effective_size$[rbp], rax

; 2113 : 		if (_Size <= _Max_effective_size)

  00051	48 8b 45 08	 mov	 rax, QWORD PTR _Max_effective_size$[rbp]
  00055	48 39 85 10 01
	00 00		 cmp	 QWORD PTR _Size$[rbp], rax
  0005c	77 0b		 ja	 SHORT $LN2@Clamp_suff

; 2114 : 			return (_Size);

  0005e	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR _Size$[rbp]
  00065	eb 06		 jmp	 SHORT $LN1@Clamp_suff

; 2115 : 		else

  00067	eb 04		 jmp	 SHORT $LN3@Clamp_suff
$LN2@Clamp_suff:

; 2116 : 			return (_Max_effective_size);

  00069	48 8b 45 08	 mov	 rax, QWORD PTR _Max_effective_size$[rbp]
$LN3@Clamp_suff:
$LN1@Clamp_suff:

; 2117 : 		}

  0006d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_K_K0@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
_Num$ = 8
$T1 = 228
tv75 = 248
this$ = 288
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT

; 1769 : 		{	// return maximum possible length of sequence

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 1770 : 		const size_type _Num = this->_Getal().max_size();

  0002a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
  00036	0f b6 95 e4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  0003d	48 8b c8	 mov	 rcx, rax
  00040	e8 00 00 00 00	 call	 ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEBA_KU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size
  00045	48 89 45 08	 mov	 QWORD PTR _Num$[rbp], rax

; 1771 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00049	48 83 7d 08 01	 cmp	 QWORD PTR _Num$[rbp], 1
  0004e	77 0d		 ja	 SHORT $LN3@max_size
  00050	48 c7 85 f8 00
	00 00 01 00 00
	00		 mov	 QWORD PTR tv75[rbp], 1
  0005b	eb 0e		 jmp	 SHORT $LN4@max_size
$LN3@max_size:
  0005d	48 8b 45 08	 mov	 rax, QWORD PTR _Num$[rbp]
  00061	48 ff c8	 dec	 rax
  00064	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv75[rbp], rax
$LN4@max_size:
  0006b	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR tv75[rbp]

; 1772 : 		}

  00072	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_KXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@_K0@Z
_TEXT	SEGMENT
_Ptr$1 = 8
_Newsize$2 = 40
this$ = 288
_Off$ = 296
_Count$ = 304
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@_K0@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT

; 1347 : 		{	// erase elements [_Off, _Off + _Count)

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 1348 : 		_Check_offset(_Off);

  00034	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  0003b	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	e8 00 00 00 00	 call	 ?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAX_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Check_offset

; 1349 : 		if (this->_Mysize() - _Off <= _Count)

  00047	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
  00053	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  0005a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005d	48 2b c1	 sub	 rax, rcx
  00060	48 3b 85 30 01
	00 00		 cmp	 rax, QWORD PTR _Count$[rbp]
  00067	77 18		 ja	 SHORT $LN2@erase

; 1350 : 			_Eos(_Off);	// erase elements [_Off, ...)

  00069	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  00070	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00077	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
  0007c	e9 81 00 00 00	 jmp	 $LN3@erase
$LN2@erase:

; 1351 : 		else if (0 < _Count)

  00081	48 83 bd 30 01
	00 00 00	 cmp	 QWORD PTR _Count$[rbp], 0
  00089	76 77		 jbe	 SHORT $LN4@erase

; 1352 : 			{	// move elements down
; 1353 : 			value_type *_Ptr = this->_Myptr() + _Off;

  0008b	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00092	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAPEA_WXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
  00097	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  0009e	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  000a2	48 89 45 08	 mov	 QWORD PTR _Ptr$1[rbp], rax

; 1354 : 			size_type _Newsize = this->_Mysize() - _Count;

  000a6	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ad	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
  000b2	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  000b9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000bc	48 2b c1	 sub	 rax, rcx
  000bf	48 89 45 28	 mov	 QWORD PTR _Newsize$2[rbp], rax

; 1355 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

  000c3	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Off$[rbp]
  000ca	48 8b 4d 28	 mov	 rcx, QWORD PTR _Newsize$2[rbp]
  000ce	48 2b c8	 sub	 rcx, rax
  000d1	48 8b c1	 mov	 rax, rcx
  000d4	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr$1[rbp]
  000d8	48 8b 95 30 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  000df	48 8d 0c 51	 lea	 rcx, QWORD PTR [rcx+rdx*2]
  000e3	4c 8b c0	 mov	 r8, rax
  000e6	48 8b d1	 mov	 rdx, rcx
  000e9	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr$1[rbp]
  000ed	e8 00 00 00 00	 call	 ?move@?$char_traits@_W@std@@SAPEA_WPEA_WPEB_W_K@Z ; std::char_traits<wchar_t>::move

; 1356 : 			_Eos(_Newsize);

  000f2	48 8b 55 28	 mov	 rdx, QWORD PTR _Newsize$2[rbp]
  000f6	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN4@erase:
$LN3@erase:

; 1357 : 			}
; 1358 : 		return (*this);

  00102	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 1359 : 		}

  00109	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00110	5f		 pop	 rdi
  00111	5d		 pop	 rbp
  00112	c3		 ret	 0
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@_K0@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@_K@Z
_TEXT	SEGMENT
this$ = 224
_Off$ = 232
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT

; 1340 : 		{	// erase elements [_Off, ...)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1341 : 		_Check_offset(_Off);

  0002f	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAX_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Check_offset

; 1342 : 		_Eos(_Off);

  00042	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  00049	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00050	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos

; 1343 : 		return (*this);

  00055	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 1344 : 		}

  0005c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00063	5f		 pop	 rdi
  00064	5d		 pop	 rbp
  00065	c3		 ret	 0
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@PEB_W@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@PEB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT

; 1180 : 		{	// assign [_Ptr, <null>)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1181 : 		_DEBUG_POINTER(_Ptr);

  0002f	41 b8 9d 04 00
	00		 mov	 r8d, 1181		; 0000049dH
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1IO@EADHKMNI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0003c	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00043	e8 00 00 00 00	 call	 ??$_Debug_pointer@$$CB_W@std@@YAXPEB_W0I@Z ; std::_Debug_pointer<wchar_t const >

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00048	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  0004f	e8 00 00 00 00	 call	 ?length@?$char_traits@_W@std@@SA_KPEB_W@Z ; std::char_traits<wchar_t>::length
  00054	4c 8b c0	 mov	 r8, rax
  00057	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0005e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00065	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@PEB_W_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 1183 : 		}

  0006a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00071	5f		 pop	 rdi
  00072	5d		 pop	 rbp
  00073	c3		 ret	 0
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@PEB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@PEB_W_K@Z
_TEXT	SEGMENT
tv68 = 192
this$ = 240
_Ptr$ = 248
_Count$ = 256
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@PEB_W_K@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT

; 1165 : 		{	// assign [_Ptr, _Ptr + _Count)

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 1166 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);

  00034	48 83 bd 00 01
	00 00 00	 cmp	 QWORD PTR _Count$[rbp], 0
  0003c	74 09		 je	 SHORT $LN5@assign
  0003e	c6 85 c0 00 00
	00 01		 mov	 BYTE PTR tv68[rbp], 1
  00045	eb 07		 jmp	 SHORT $LN6@assign
$LN5@assign:
  00047	c6 85 c0 00 00
	00 00		 mov	 BYTE PTR tv68[rbp], 0
$LN6@assign:
  0004e	41 b9 8e 04 00
	00		 mov	 r9d, 1166		; 0000048eH
  00054	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1IO@EADHKMNI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0005b	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00062	0f b6 8d c0 00
	00 00		 movzx	 ecx, BYTE PTR tv68[rbp]
  00069	e8 00 00 00 00	 call	 ??$_Debug_pointer_if@$$CB_W@std@@YAX_NPEB_W1I@Z ; std::_Debug_pointer_if<wchar_t const >

; 1167 : 		if (_Inside(_Ptr))

  0006e	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00075	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007c	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA_NPEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
  00081	0f b6 c0	 movzx	 eax, al
  00084	85 c0		 test	 eax, eax
  00086	74 3b		 je	 SHORT $LN2@assign

; 1168 : 			return (assign(*this,

  00088	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008f	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAPEA_WXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
  00094	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  0009b	48 2b c8	 sub	 rcx, rax
  0009e	48 8b c1	 mov	 rax, rcx
  000a1	48 d1 f8	 sar	 rax, 1
  000a4	4c 8b 8d 00 01
	00 00		 mov	 r9, QWORD PTR _Count$[rbp]
  000ab	4c 8b c0	 mov	 r8, rax
  000ae	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  000b5	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000bc	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  000c1	eb 59		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

  000c3	45 33 c0	 xor	 r8d, r8d
  000c6	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  000cd	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d4	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA_N_K_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
  000d9	0f b6 c0	 movzx	 eax, al
  000dc	85 c0		 test	 eax, eax
  000de	74 35		 je	 SHORT $LN3@assign

; 1172 : 			{	// make room and assign new stuff
; 1173 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

  000e0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e7	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAPEA_WXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
  000ec	4c 8b 85 00 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  000f3	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  000fa	48 8b c8	 mov	 rcx, rax
  000fd	e8 00 00 00 00	 call	 ?copy@?$char_traits@_W@std@@SAPEA_WPEA_WPEB_W_K@Z ; std::char_traits<wchar_t>::copy

; 1174 : 			_Eos(_Count);

  00102	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  00109	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00110	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN3@assign:

; 1175 : 			}
; 1176 : 		return (*this);

  00115	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN1@assign:

; 1177 : 		}

  0011c	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00123	5f		 pop	 rdi
  00124	5d		 pop	 rbp
  00125	c3		 ret	 0
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@PEB_W_K@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@_K1@Z
_TEXT	SEGMENT
tv92 = 192
this$ = 240
_Right$ = 248
_Roff$ = 256
_Count$ = 264
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@_K1@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT

; 1149 : 		{	// assign _Right [_Roff, _Roff + _Count)

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 1150 : 		_Right._Check_offset(_Roff);

  00039	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR _Roff$[rbp]
  00040	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00047	e8 00 00 00 00	 call	 ?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBAX_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Check_offset

; 1151 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);

  0004c	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00053	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR _Roff$[rbp]
  0005a	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00061	e8 00 00 00 00	 call	 ?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEBA_K_K0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Clamp_suffix_size
  00066	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Count$[rbp], rax

; 1152 : 
; 1153 : 		if (this == &_Right)

  0006d	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00074	48 39 85 f0 00
	00 00		 cmp	 QWORD PTR this$[rbp], rax
  0007b	75 3a		 jne	 SHORT $LN2@assign

; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring

  0007d	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00084	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Roff$[rbp]
  0008b	48 03 c8	 add	 rcx, rax
  0008e	48 8b c1	 mov	 rax, rcx
  00091	48 8b d0	 mov	 rdx, rax
  00094	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009b	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  000a0	4c 8b 85 00 01
	00 00		 mov	 r8, QWORD PTR _Roff$[rbp]
  000a7	33 d2		 xor	 edx, edx
  000a9	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b0	e8 00 00 00 00	 call	 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@_K0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
  000b5	eb 73		 jmp	 SHORT $LN3@assign
$LN2@assign:

; 1155 : 		else if (_Grow(_Count))

  000b7	45 33 c0	 xor	 r8d, r8d
  000ba	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  000c1	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c8	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA_N_K_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
  000cd	0f b6 c0	 movzx	 eax, al
  000d0	85 c0		 test	 eax, eax
  000d2	74 56		 je	 SHORT $LN4@assign

; 1156 : 			{	// make room and assign new stuff
; 1157 : 			_Traits::copy(this->_Myptr(),

  000d4	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  000db	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAPEB_WXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
  000e0	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Roff$[rbp]
  000e7	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  000eb	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv92[rbp], rax
  000f2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f9	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAPEA_WXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
  000fe	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00105	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv92[rbp]
  0010c	48 8b d1	 mov	 rdx, rcx
  0010f	48 8b c8	 mov	 rcx, rax
  00112	e8 00 00 00 00	 call	 ?copy@?$char_traits@_W@std@@SAPEA_WPEA_WPEB_W_K@Z ; std::char_traits<wchar_t>::copy

; 1158 : 				_Right._Myptr() + _Roff, _Count);
; 1159 : 			_Eos(_Count);

  00117	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  0011e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00125	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
$LN4@assign:
$LN3@assign:

; 1160 : 			}
; 1161 : 		return (*this);

  0012a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 1162 : 		}

  00131	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00138	5f		 pop	 rdi
  00139	5d		 pop	 rbp
  0013a	c3		 ret	 0
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_Ptr$ = 264
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 836  : 		{	// construct from [_Ptr, <null>)

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 835  : 		: _Mybase()

  0003a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00041	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
  00046	90		 npad	 1

; 837  : 		_Tidy();

  00047	45 33 c0	 xor	 r8d, r8d
  0004a	33 d2		 xor	 edx, edx
  0004c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX_N_K@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy

; 838  : 		assign(_Ptr);

  00058	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0005f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@PEB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0006b	90		 npad	 1

; 839  : 		}

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Ptr$ = 264
?dtor$0@?0???0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z@4HA PROC ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z@4HA ENDP ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Ptr$ = 264
?dtor$0@?0???0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z@4HA PROC ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@PEB_W@Z@4HA ENDP ; `std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second, COMDAT

; 319  : 		{	// return const reference to second

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 320  : 		return (_Myval2);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 321  : 		}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second, COMDAT

; 314  : 		{	// return reference to second

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 315  : 		return (_Myval2);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 316  : 		}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT

; 299  : 		{	// return const reference to first

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 300  : 		return (*this);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 301  : 		}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT

; 294  : 		{	// return reference to first

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 295  : 		return (*this);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 296  : 		}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ
_TEXT	SEGMENT
this$ = 224
?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres, COMDAT

; 733  : 		{	// return reference to _Myres

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 734  : 		return (_Get_data()._Myres);

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
  00036	48 83 c0 20	 add	 rax, 32			; 00000020H

; 735  : 		}

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEB_KXZ
_TEXT	SEGMENT
this$ = 224
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEB_KXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize, COMDAT

; 728  : 		{	// return const reference to _Mysize

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 729  : 		return (_Get_data()._Mysize);

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
  00036	48 83 c0 18	 add	 rax, 24

; 730  : 		}

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEB_KXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ
_TEXT	SEGMENT
this$ = 224
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize, COMDAT

; 723  : 		{	// return reference to _Mysize

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 724  : 		return (_Get_data()._Mysize);

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
  00036	48 83 c0 18	 add	 rax, 24

; 725  : 		}

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEA_KXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Bx@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Bx@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Bx, COMDAT

; 713  : 		{	// return reference to _Bx

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 714  : 		return (_Get_data()._Bx);

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
  00036	48 83 c0 08	 add	 rax, 8

; 715  : 		}

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?_Bx@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Bx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data, COMDAT

; 706  : 		{	// return const reference to _String_val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 707  : 		return (_Mypair._Get_second());

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second

; 708  : 		}

  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data, COMDAT

; 701  : 		{	// return reference to _String_val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 702  : 		return (_Mypair._Get_second());

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second

; 703  : 		}

  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal, COMDAT

; 696  : 		{	// return const reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 697  : 		return (_Mypair._Get_first());

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first

; 698  : 		}

  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal, COMDAT

; 691  : 		{	// return reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 692  : 		return (_Mypair._Get_first());

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first

; 693  : 		}

  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Orphan_all, COMDAT

; 681  : 		{	// orphan all iterators

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 682  : 		_Get_data()._Orphan_all();

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 683  : 		}

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myproxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Myproxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myproxy, COMDAT

; 670  : 		{	// return reference to _Myproxy

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 671  : 		return (_Get_data()._Myproxy);

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data

; 672  : 		}

  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
?_Myproxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Free_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
_Alproxy$ = 4
__$ArrayPad$ = 216
this$ = 256
?_Free_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy, COMDAT

; 655  : 		{	// destroy proxy

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 d8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 656  : 		typename _Alty::template rebind<_Container_proxy>::other
; 657  : 			_Alproxy(_Getal());

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
  00047	48 8b d0	 mov	 rdx, rax
  0004a	48 8d 4d 04	 lea	 rcx, QWORD PTR _Alproxy$[rbp]
  0004e	e8 00 00 00 00	 call	 ??$?0AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<wchar_t> > & __ptr64>

; 658  : 		_Orphan_all();

  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Orphan_all

; 659  : 		_Alproxy.destroy(_Myproxy());

  0005f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myproxy
  0006b	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0006e	48 8d 4d 04	 lea	 rcx, QWORD PTR _Alproxy$[rbp]
  00072	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>

; 660  : 		_Alproxy.deallocate(_Alproxy.address(*_Myproxy()), 1);

  00077	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007e	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myproxy
  00083	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00086	48 8d 4d 04	 lea	 rcx, QWORD PTR _Alproxy$[rbp]
  0008a	e8 00 00 00 00	 call	 ?address@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEBAPEAU_Container_proxy@2@AEAU32@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::address
  0008f	41 b8 01 00 00
	00		 mov	 r8d, 1
  00095	48 8b d0	 mov	 rdx, rax
  00098	48 8d 4d 04	 lea	 rcx, QWORD PTR _Alproxy$[rbp]
  0009c	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@2@_K@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate

; 661  : 		_Myproxy() = 0;

  000a1	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a8	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myproxy
  000ad	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 662  : 		}

  000b4	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Free_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ$rtcFrameData
  000bf	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c4	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000cb	48 33 cd	 xor	 rcx, rbp
  000ce	e8 00 00 00 00	 call	 __security_check_cookie
  000d3	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000da	5f		 pop	 rdi
  000db	5d		 pop	 rbp
  000dc	c3		 ret	 0
?_Free_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
_Alproxy$ = 4
$T4 = 232
tv92 = 264
tv80 = 264
tv70 = 264
__$ArrayPad$ = 272
this$ = 320
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy, COMDAT

; 646  : 		{	// construct proxy

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 10 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 647  : 		typename _Alty::template rebind<_Container_proxy>::other
; 648  : 			_Alproxy(_Getal());

  0003b	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
  00047	48 8b d0	 mov	 rdx, rax
  0004a	48 8d 4d 04	 lea	 rcx, QWORD PTR _Alproxy$[rbp]
  0004e	e8 00 00 00 00	 call	 ??$?0AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<wchar_t> > & __ptr64>

; 649  : 		_Myproxy() = _Unfancy(_Alproxy.allocate(1));

  00053	ba 01 00 00 00	 mov	 edx, 1
  00058	48 8d 4d 04	 lea	 rcx, QWORD PTR _Alproxy$[rbp]
  0005c	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
  00061	48 8b c8	 mov	 rcx, rax
  00064	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  00069	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv70[rbp], rax
  00070	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00077	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myproxy
  0007c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv70[rbp]
  00083	48 89 08	 mov	 QWORD PTR [rax], rcx

; 650  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());

  00086	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  0008d	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QEAA@XZ ; std::_Container_proxy::_Container_proxy
  00092	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv80[rbp], rax
  00099	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a0	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myproxy
  000a5	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv80[rbp]
  000ac	4c 8b c1	 mov	 r8, rcx
  000af	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000b2	48 8d 4d 04	 lea	 rcx, QWORD PTR _Alproxy$[rbp]
  000b6	e8 00 00 00 00	 call	 ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@1@$$QEAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>

; 651  : 		_Myproxy()->_Mycont = &_Get_data();

  000bb	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c2	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
  000c7	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv92[rbp], rax
  000ce	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d5	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myproxy
  000da	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000dd	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv92[rbp]
  000e4	48 89 08	 mov	 QWORD PTR [rax], rcx

; 652  : 		}

  000e7	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ$rtcFrameData
  000f2	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000f7	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000fe	48 33 cd	 xor	 rcx, rbp
  00101	e8 00 00 00 00	 call	 __security_check_cookie
  00106	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  0010d	5f		 pop	 rdi
  0010e	5d		 pop	 rbp
  0010f	c3		 ret	 0
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT

; 627  : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 628  : 		_Free_proxy();

  00035	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ?_Free_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Free_proxy
  00041	90		 npad	 1

; 629  : 		}

  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b c8	 mov	 rcx, rax
  0004c	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ
  00051	90		 npad	 1
  00052	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00059	5f		 pop	 rdi
  0005a	5d		 pop	 rbp
  0005b	c3		 ret	 0
??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT

; 613  : 		{	// default construct allocator

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002a	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2

; 612  : 		: _Mypair(_Zero_then_variadic_args_t())

  00035	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  00043	48 8b c8	 mov	 rcx, rax
  00046	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><>
  0004b	90		 npad	 1

; 614  : 		_Alloc_proxy();

  0004c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Alloc_proxy
  00058	90		 npad	 1

; 615  : 		}

  00059	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ@4HA PROC ; `std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ@4HA PROC ; `std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAPEB_WXZ
_TEXT	SEGMENT
this$ = 224
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAPEB_WXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr, COMDAT

; 582  : 		{	// determine current pointer to buffer for nonmutable string

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 583  : 		return (_Get_data()._Myptr());

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr

; 584  : 		}

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEBAPEB_WXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAPEA_WXZ
_TEXT	SEGMENT
this$ = 224
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAPEA_WXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr, COMDAT

; 577  : 		{	// determine current pointer to buffer for mutable string

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 578  : 		return (_Get_data()._Myptr());

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr

; 579  : 		}

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QEAAPEA_WXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 c0 08	 add	 rax, 8
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
  0003d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00044	e8 00 00 00 00	 call	 ??1_Container_base12@std@@QEAA@XZ ; std::_Container_base12::~_Container_base12
  00049	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty, COMDAT

; 533  : 			{	// user-provided, for fancy pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 534  : 			}

  00028	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002f	5f		 pop	 rdi
  00030	5d		 pop	 rbp
  00031	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty, COMDAT

; 528  : 		_Bxty()

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 529  : 			{	// user-provided, for fancy pointers
; 530  : 			}

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ
_TEXT	SEGMENT
tv72 = 192
this$ = 240
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT

; 520  : 		{	// determine current pointer to buffer for nonmutable string

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 521  : 		return (this->_BUF_SIZE <= _Myres

  0002a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 20 08	 cmp	 QWORD PTR [rax+32], 8
  00036	72 19		 jb	 SHORT $LN3@Myptr
  00038	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00043	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ; std::_Unfancy<wchar_t>
  00048	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  0004f	eb 12		 jmp	 SHORT $LN4@Myptr
$LN3@Myptr:
  00051	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00058	48 83 c0 08	 add	 rax, 8
  0005c	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
$LN4@Myptr:
  00063	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv72[rbp]

; 522  : 			? _Unfancy(_Bx._Ptr)
; 523  : 			: _Bx._Buf);
; 524  : 		}

  0006a	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00071	5f		 pop	 rdi
  00072	5d		 pop	 rbp
  00073	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEBAPEB_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ
_TEXT	SEGMENT
tv72 = 192
this$ = 240
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT

; 513  : 		{	// determine current pointer to buffer for mutable string

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0002a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 20 08	 cmp	 QWORD PTR [rax+32], 8
  00036	72 19		 jb	 SHORT $LN3@Myptr
  00038	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00043	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPEA_WPEA_W@Z ; std::_Unfancy<wchar_t>
  00048	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  0004f	eb 12		 jmp	 SHORT $LN4@Myptr
$LN3@Myptr:
  00051	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00058	48 83 c0 08	 add	 rax, 8
  0005c	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
$LN4@Myptr:
  00063	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv72[rbp]

; 515  : 			? _Unfancy(_Bx._Ptr)
; 516  : 			: _Bx._Buf);
; 517  : 		}

  0006a	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00071	5f		 pop	 rdi
  00072	5d		 pop	 rbp
  00073	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAAPEA_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >, COMDAT

; 498  : 		{	// initialize values

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QEAA@XZ ; std::_Container_base12::_Container_base12
  00041	90		 npad	 1

; 495  : 		: _Bx(),

  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 83 c0 08	 add	 rax, 8
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty

; 496  : 		_Mysize(0),

  00055	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005c	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 497  : 		_Myres(0)

  00064	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006b	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 499  : 		}

  00073	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ@4HA PROC ; `std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Container_base12@std@@QEAA@XZ ; std::_Container_base12::~_Container_base12
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ@4HA PROC ; `std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Container_base12@std@@QEAA@XZ ; std::_Container_base12::~_Container_base12
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$_String_val@U?$_Simple_types@_W@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEBA_KU_Nil@2@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEBA_KU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size, COMDAT

; 1007 : 		{	// get maximum size

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1008 : 		return (_Mytraits::max_size(*this));

  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t> >::max_size

; 1009 : 		}

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEBA_KU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEA_W_K@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
_Count$ = 240
?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEA_W_K@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate, COMDAT

; 986  : 		{	// deallocate object at _Ptr, ignore size

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00034	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  0003b	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00042	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?deallocate@?$allocator@_W@std@@QEAAXPEA_W_K@Z ; std::allocator<wchar_t>::deallocate

; 988  : 		}

  0004e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00055	5f		 pop	 rdi
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAXPEA_W_K@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAPEA_W_K@Z
_TEXT	SEGMENT
this$ = 224
_Count$ = 232
?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAPEA_W_K@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate, COMDAT

; 975  : 		{	// allocate array of _Count elements

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 976  : 		return (_Mybase::allocate(_Count));

  0002f	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z ; std::allocator<wchar_t>::allocate

; 977  : 		}

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAAPEA_W_K@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAA@XZ PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >, COMDAT

; 936  : 		{	// construct default allocator (do nothing)

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 935  : 		: _Mybase()

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ??0?$allocator@_W@std@@QEAA@XZ ; std::allocator<wchar_t>::allocator<wchar_t>

; 937  : 		}

  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QEAA@XZ ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z
_TEXT	SEGMENT
_Al$ = 224
?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::max_size, COMDAT

; 868  : 		{	// get maximum size

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 869  : 		return (_Al.max_size());

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00031	e8 00 00 00 00	 call	 ?max_size@?$allocator@_W@std@@QEBA_KXZ ; std::allocator<wchar_t>::max_size

; 870  : 		}

  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SA_KAEBV?$allocator@_W@2@@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@_W@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 224
?max_size@?$allocator@_W@std@@QEBA_KXZ PROC		; std::allocator<wchar_t>::max_size, COMDAT

; 748  : 		{	// estimate maximum array size

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

  00028	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH

; 750  : 		}

  00032	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00039	5f		 pop	 rdi
  0003a	5d		 pop	 rbp
  0003b	c3		 ret	 0
?max_size@?$allocator@_W@std@@QEBA_KXZ ENDP		; std::allocator<wchar_t>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z
_TEXT	SEGMENT
this$ = 224
_Count$ = 232
?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z PROC	; std::allocator<wchar_t>::allocate, COMDAT

; 724  : 		{	// allocate array of _Count elements

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 02 00 00 00	 mov	 edx, 2
  00037	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0003e	e8 00 00 00 00	 call	 ?_Allocate@std@@YAPEAX_K0_N@Z ; std::_Allocate

; 726  : 		}

  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
?allocate@?$allocator@_W@std@@QEAAPEA_W_K@Z ENDP	; std::allocator<wchar_t>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@_W@std@@QEAAXPEA_W_K@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
_Count$ = 240
?deallocate@?$allocator@_W@std@@QEAAXPEA_W_K@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT

; 719  : 		{	// deallocate object at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00034	41 b8 02 00 00
	00		 mov	 r8d, 2
  0003a	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  00041	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00048	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPEAX_K1@Z ; std::_Deallocate

; 721  : 		}

  0004d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00054	5f		 pop	 rdi
  00055	5d		 pop	 rbp
  00056	c3		 ret	 0
?deallocate@?$allocator@_W@std@@QEAAXPEA_W_K@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@_W@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$allocator@_W@std@@QEAA@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT

; 699  : 	allocator() _THROW0()

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??0?$allocator@_W@std@@QEAA@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPEAX_K1@Z
_TEXT	SEGMENT
_User_size$ = 8
_Ptr_user$1 = 40
_Ptr_ptr$2 = 72
_Ptr_container$3 = 104
_Ptr$ = 352
_Count$ = 360
_Sz$ = 368
?_Deallocate@std@@YAXPEAX_K1@Z PROC			; std::_Deallocate, COMDAT

; 92   : 	{	// deallocate storage for _Count elements of size _Sz

$LN22:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 5e 00 00 00	 mov	 ecx, 94			; 0000005eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]

; 93   :  #if defined(_M_IX86) || defined(_M_X64)
; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00034	33 d2		 xor	 edx, edx
  00036	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0003d	48 f7 b5 70 01
	00 00		 div	 QWORD PTR _Sz$[rbp]
  00044	48 39 85 68 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  0004b	0f 86 83 00 00
	00		 jbe	 $LN2@Deallocate
  00051	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BN@HMCJOMKN@_Count?5?$DM?$DN?5?$CIsize_t?$CJ?$CI?91?$CJ?5?1?5_Sz?$AA@
  00058	48 85 c0	 test	 rax, rax
  0005b	74 06		 je	 SHORT $LN10@Deallocate
  0005d	33 c0		 xor	 eax, eax
  0005f	85 c0		 test	 eax, eax
  00061	75 41		 jne	 SHORT $LN11@Deallocate
$LN10@Deallocate:
  00063	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Deallocate@std@@YAXPEAX_K1@Z@4JA
  00069	83 c0 02	 add	 eax, 2
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@MLOBABC@?$AA?$CC?$AA_?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AA?9?$AA1?$AA?$CJ?$AA?5?$AA?1?$AA?5?$AA_?$AAS?$AAz?$AA?$CC?$AA?5?$AA?$CG@
  00073	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00078	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  0007f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00084	45 33 c9	 xor	 r9d, r9d
  00087	44 8b c0	 mov	 r8d, eax
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1JA@DKOIEICI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00091	b9 02 00 00 00	 mov	 ecx, 2
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReportW
  0009c	83 f8 01	 cmp	 eax, 1
  0009f	75 03		 jne	 SHORT $LN11@Deallocate
  000a1	cc		 int	 3
  000a2	33 c0		 xor	 eax, eax
$LN11@Deallocate:
  000a4	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Deallocate@std@@YAXPEAX_K1@Z@4JA
  000aa	83 c0 02	 add	 eax, 2
  000ad	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000b6	44 8b c8	 mov	 r9d, eax
  000b9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1JA@DKOIEICI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  000c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
$LN2@Deallocate:

; 95   : 	const size_t _User_size = _Count * _Sz;

  000d4	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  000db	48 0f af 85 70
	01 00 00	 imul	 rax, QWORD PTR _Sz$[rbp]
  000e3	48 89 45 08	 mov	 QWORD PTR _User_size$[rbp], rax

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  000e7	48 81 7d 08 00
	10 00 00	 cmp	 QWORD PTR _User_size$[rbp], 4096 ; 00001000H
  000ef	0f 82 2c 03 00
	00		 jb	 $LN3@Deallocate

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);

  000f5	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  000fc	48 89 45 28	 mov	 QWORD PTR _Ptr_user$1[rbp], rax

; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00100	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr_user$1[rbp]
  00104	48 83 e0 1f	 and	 rax, 31
  00108	48 85 c0	 test	 rax, rax
  0010b	0f 84 83 00 00
	00		 je	 $LN4@Deallocate
  00111	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DD@GBGGGKGG@?$CI_Ptr_user?5?$CG?5?$CI_BIG_ALLOCATION_AL@
  00118	48 85 c0	 test	 rax, rax
  0011b	74 06		 je	 SHORT $LN12@Deallocate
  0011d	33 c0		 xor	 eax, eax
  0011f	85 c0		 test	 eax, eax
  00121	75 41		 jne	 SHORT $LN13@Deallocate
$LN12@Deallocate:
  00123	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Deallocate@std@@YAXPEAX_K1@Z@4JA
  00129	83 c0 08	 add	 eax, 8
  0012c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HE@CDMBFOKC@?$AA?$CC?$AA?$CI?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAB?$AAI?$AAG?$AA_?$AAA?$AAL?$AAL?$AAO?$AAC?$AAA?$AAT?$AAI?$AAO?$AAN?$AA_?$AAA@
  00133	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00138	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  0013f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00144	45 33 c9	 xor	 r9d, r9d
  00147	44 8b c0	 mov	 r8d, eax
  0014a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1JA@DKOIEICI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00151	b9 02 00 00 00	 mov	 ecx, 2
  00156	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReportW
  0015c	83 f8 01	 cmp	 eax, 1
  0015f	75 03		 jne	 SHORT $LN13@Deallocate
  00161	cc		 int	 3
  00162	33 c0		 xor	 eax, eax
$LN13@Deallocate:
  00164	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Deallocate@std@@YAXPEAX_K1@Z@4JA
  0016a	83 c0 08	 add	 eax, 8
  0016d	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00176	44 8b c8	 mov	 r9d, eax
  00179	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1JA@DKOIEICI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00180	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  00187	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  0018e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
$LN4@Deallocate:

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);

  00194	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr_user$1[rbp]
  00198	48 83 e8 08	 sub	 rax, 8
  0019c	48 89 45 48	 mov	 QWORD PTR _Ptr_ptr$2[rbp], rax

; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  001a0	48 8b 45 48	 mov	 rax, QWORD PTR _Ptr_ptr$2[rbp]
  001a4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001a7	48 89 45 68	 mov	 QWORD PTR _Ptr_container$3[rbp], rax

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  001ab	b8 08 00 00 00	 mov	 eax, 8
  001b0	48 6b c0 ff	 imul	 rax, rax, -1
  001b4	48 8b 4d 48	 mov	 rcx, QWORD PTR _Ptr_ptr$2[rbp]
  001b8	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  001c2	48 39 14 01	 cmp	 QWORD PTR [rcx+rax], rdx
  001c6	0f 84 83 00 00
	00		 je	 $LN5@Deallocate
  001cc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0EI@NOJHEJCJ@reinterpret_cast?$DMuintptr_t?5?$CK?$DO?$CI_P@
  001d3	48 85 c0	 test	 rax, rax
  001d6	74 06		 je	 SHORT $LN14@Deallocate
  001d8	33 c0		 xor	 eax, eax
  001da	85 c0		 test	 eax, eax
  001dc	75 41		 jne	 SHORT $LN15@Deallocate
$LN14@Deallocate:
  001de	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Deallocate@std@@YAXPEAX_K1@Z@4JA
  001e4	83 c0 12	 add	 eax, 18
  001e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1JO@EKLKIEHP@?$AA?$CC?$AAr?$AAe?$AAi?$AAn?$AAt?$AAe?$AAr?$AAp?$AAr?$AAe?$AAt?$AA_?$AAc?$AAa?$AAs?$AAt?$AA?$DM?$AAu?$AAi?$AAn?$AAt?$AAp?$AAt?$AAr?$AA_?$AAt?$AA?5?$AA?$CK?$AA?$DO?$AA?$CI?$AA_@
  001ee	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  001fa	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  001ff	45 33 c9	 xor	 r9d, r9d
  00202	44 8b c0	 mov	 r8d, eax
  00205	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1JA@DKOIEICI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0020c	b9 02 00 00 00	 mov	 ecx, 2
  00211	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReportW
  00217	83 f8 01	 cmp	 eax, 1
  0021a	75 03		 jne	 SHORT $LN15@Deallocate
  0021c	cc		 int	 3
  0021d	33 c0		 xor	 eax, eax
$LN15@Deallocate:
  0021f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Deallocate@std@@YAXPEAX_K1@Z@4JA
  00225	83 c0 12	 add	 eax, 18
  00228	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00231	44 8b c8	 mov	 r9d, eax
  00234	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1JA@DKOIEICI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0023b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  00242	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  00249	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
$LN5@Deallocate:

; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0024f	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr_user$1[rbp]
  00253	48 39 45 68	 cmp	 QWORD PTR _Ptr_container$3[rbp], rax
  00257	0f 82 83 00 00
	00		 jb	 $LN6@Deallocate
  0025d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BL@OCKMEJON@_Ptr_container?5?$DM?5_Ptr_user?$AA@
  00264	48 85 c0	 test	 rax, rax
  00267	74 06		 je	 SHORT $LN16@Deallocate
  00269	33 c0		 xor	 eax, eax
  0026b	85 c0		 test	 eax, eax
  0026d	75 41		 jne	 SHORT $LN17@Deallocate
$LN16@Deallocate:
  0026f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Deallocate@std@@YAXPEAX_K1@Z@4JA
  00275	83 c0 16	 add	 eax, 22
  00278	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@PDHAHDDC@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$DM?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
  0027f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00284	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  0028b	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00290	45 33 c9	 xor	 r9d, r9d
  00293	44 8b c0	 mov	 r8d, eax
  00296	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1JA@DKOIEICI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0029d	b9 02 00 00 00	 mov	 ecx, 2
  002a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReportW
  002a8	83 f8 01	 cmp	 eax, 1
  002ab	75 03		 jne	 SHORT $LN17@Deallocate
  002ad	cc		 int	 3
  002ae	33 c0		 xor	 eax, eax
$LN17@Deallocate:
  002b0	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Deallocate@std@@YAXPEAX_K1@Z@4JA
  002b6	83 c0 16	 add	 eax, 22
  002b9	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  002c2	44 8b c8	 mov	 r9d, eax
  002c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1JA@DKOIEICI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  002cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  002d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  002da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
$LN6@Deallocate:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)

  002e0	48 8b 45 68	 mov	 rax, QWORD PTR _Ptr_container$3[rbp]
  002e4	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr_user$1[rbp]
  002e8	48 2b c8	 sub	 rcx, rax
  002eb	48 8b c1	 mov	 rax, rcx
  002ee	48 83 f8 10	 cmp	 rax, 16
  002f2	0f 83 83 00 00
	00		 jae	 $LN7@Deallocate
  002f8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DB@GLFJLNCE@2?5?$CK?5sizeof?$CIvoid?5?$CK?$CJ?5?$DM?$DN?5_Ptr_user?5@
  002ff	48 85 c0	 test	 rax, rax
  00302	74 06		 je	 SHORT $LN18@Deallocate
  00304	33 c0		 xor	 eax, eax
  00306	85 c0		 test	 eax, eax
  00308	75 41		 jne	 SHORT $LN19@Deallocate
$LN18@Deallocate:
  0030a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Deallocate@std@@YAXPEAX_K1@Z@4JA
  00310	83 c0 1a	 add	 eax, 26
  00313	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HA@NAPGMHAO@?$AA?$CC?$AA2?$AA?5?$AA?$CK?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr@
  0031a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0031f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  00326	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0032b	45 33 c9	 xor	 r9d, r9d
  0032e	44 8b c0	 mov	 r8d, eax
  00331	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1JA@DKOIEICI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00338	b9 02 00 00 00	 mov	 ecx, 2
  0033d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReportW
  00343	83 f8 01	 cmp	 eax, 1
  00346	75 03		 jne	 SHORT $LN19@Deallocate
  00348	cc		 int	 3
  00349	33 c0		 xor	 eax, eax
$LN19@Deallocate:
  0034b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Deallocate@std@@YAXPEAX_K1@Z@4JA
  00351	83 c0 1a	 add	 eax, 26
  00354	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0035d	44 8b c8	 mov	 r9d, eax
  00360	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1JA@DKOIEICI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00367	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  0036e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  00375	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
$LN7@Deallocate:

; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)
; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0037b	48 8b 45 68	 mov	 rax, QWORD PTR _Ptr_container$3[rbp]
  0037f	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr_user$1[rbp]
  00383	48 2b c8	 sub	 rcx, rax
  00386	48 8b c1	 mov	 rax, rcx
  00389	48 83 f8 2f	 cmp	 rax, 47			; 0000002fH
  0038d	0f 86 83 00 00
	00		 jbe	 $LN8@Deallocate
  00393	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CN@BLHJCAL@_Ptr_user?5?9?5_Ptr_container?5?$DM?$DN?5_N@
  0039a	48 85 c0	 test	 rax, rax
  0039d	74 06		 je	 SHORT $LN20@Deallocate
  0039f	33 c0		 xor	 eax, eax
  003a1	85 c0		 test	 eax, eax
  003a3	75 41		 jne	 SHORT $LN21@Deallocate
$LN20@Deallocate:
  003a5	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Deallocate@std@@YAXPEAX_K1@Z@4JA
  003ab	83 c0 22	 add	 eax, 34			; 00000022H
  003ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GI@DHJGPFNI@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAu?$AAs?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA_@
  003b5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  003c1	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  003c6	45 33 c9	 xor	 r9d, r9d
  003c9	44 8b c0	 mov	 r8d, eax
  003cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1JA@DKOIEICI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  003d3	b9 02 00 00 00	 mov	 ecx, 2
  003d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReportW
  003de	83 f8 01	 cmp	 eax, 1
  003e1	75 03		 jne	 SHORT $LN21@Deallocate
  003e3	cc		 int	 3
  003e4	33 c0		 xor	 eax, eax
$LN21@Deallocate:
  003e6	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Deallocate@std@@YAXPEAX_K1@Z@4JA
  003ec	83 c0 22	 add	 eax, 34			; 00000022H
  003ef	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  003f8	44 8b c8	 mov	 r9d, eax
  003fb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1JA@DKOIEICI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00402	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  00409	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  00410	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
$LN8@Deallocate:

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00416	48 8b 45 68	 mov	 rax, QWORD PTR _Ptr_container$3[rbp]
  0041a	48 89 85 60 01
	00 00		 mov	 QWORD PTR _Ptr$[rbp], rax
$LN3@Deallocate:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  00421	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00428	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 133  : 	}

  0042d	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  00434	5f		 pop	 rdi
  00435	5d		 pop	 rbp
  00436	c3		 ret	 0
?_Deallocate@std@@YAXPEAX_K1@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPEAX_K0_N@Z
_TEXT	SEGMENT
_Ptr$ = 8
_User_size$ = 40
_Block_size$1 = 72
_Ptr_container$2 = 104
_Count$ = 352
_Sz$ = 360
_Try_aligned_allocation$ = 368
?_Allocate@std@@YAPEAX_K0_N@Z PROC			; std::_Allocate, COMDAT

; 48   : 	{	// allocate storage for _Count elements of size _Sz

$LN14:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 5e 00 00 00	 mov	 ecx, 94			; 0000005eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]

; 49   : 	void *_Ptr = 0;

  00034	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR _Ptr$[rbp], 0

; 50   : 
; 51   : 	if (_Count == 0)

  0003c	48 83 bd 60 01
	00 00 00	 cmp	 QWORD PTR _Count$[rbp], 0
  00044	75 09		 jne	 SHORT $LN2@Allocate

; 52   : 		return (_Ptr);

  00046	48 8b 45 08	 mov	 rax, QWORD PTR _Ptr$[rbp]
  0004a	e9 ea 01 00 00	 jmp	 $LN1@Allocate
$LN2@Allocate:

; 53   : 
; 54   : 	// check overflow of multiply
; 55   : 	if ((size_t)(-1) / _Sz < _Count)

  0004f	33 d2		 xor	 edx, edx
  00051	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00058	48 f7 b5 68 01
	00 00		 div	 QWORD PTR _Sz$[rbp]
  0005f	48 3b 85 60 01
	00 00		 cmp	 rax, QWORD PTR _Count$[rbp]
  00066	73 06		 jae	 SHORT $LN3@Allocate

; 56   : 		_Xbad_alloc();	// report no memory

  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN3@Allocate:

; 57   : 	const size_t _User_size = _Count * _Sz;

  0006e	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00075	48 0f af 85 68
	01 00 00	 imul	 rax, QWORD PTR _Sz$[rbp]
  0007d	48 89 45 28	 mov	 QWORD PTR _User_size$[rbp], rax

; 58   : 
; 59   :  #if defined(_M_IX86) || defined(_M_X64)
; 60   : 	if (_Try_aligned_allocation
; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00081	0f b6 85 70 01
	00 00		 movzx	 eax, BYTE PTR _Try_aligned_allocation$[rbp]
  00088	85 c0		 test	 eax, eax
  0008a	0f 84 0a 01 00
	00		 je	 $LN4@Allocate
  00090	48 81 7d 28 00
	10 00 00	 cmp	 QWORD PTR _User_size$[rbp], 4096 ; 00001000H
  00098	0f 82 fc 00 00
	00		 jb	 $LN4@Allocate

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0009e	48 8b 45 28	 mov	 rax, QWORD PTR _User_size$[rbp]
  000a2	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  000a6	48 89 45 48	 mov	 QWORD PTR _Block_size$1[rbp], rax

; 66   : 		if (_Block_size <= _User_size)

  000aa	48 8b 45 28	 mov	 rax, QWORD PTR _User_size$[rbp]
  000ae	48 39 45 48	 cmp	 QWORD PTR _Block_size$1[rbp], rax
  000b2	77 06		 ja	 SHORT $LN6@Allocate

; 67   : 			_Xbad_alloc();	// report no memory

  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN6@Allocate:

; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  000ba	48 8b 4d 48	 mov	 rcx, QWORD PTR _Block_size$1[rbp]
  000be	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  000c3	48 89 45 68	 mov	 QWORD PTR _Ptr_container$2[rbp], rax

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  000c7	48 83 7d 68 00	 cmp	 QWORD PTR _Ptr_container$2[rbp], 0
  000cc	0f 85 83 00 00
	00		 jne	 $LN7@Allocate
  000d2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
  000d9	48 85 c0	 test	 rax, rax
  000dc	74 06		 je	 SHORT $LN10@Allocate
  000de	33 c0		 xor	 eax, eax
  000e0	85 c0		 test	 eax, eax
  000e2	75 41		 jne	 SHORT $LN11@Allocate
$LN10@Allocate:
  000e4	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Allocate@std@@YAPEAX_K0_N@Z@4JA
  000ea	83 c0 16	 add	 eax, 22
  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
  000f4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  00100	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00105	45 33 c9	 xor	 r9d, r9d
  00108	44 8b c0	 mov	 r8d, eax
  0010b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1JA@DKOIEICI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00112	b9 02 00 00 00	 mov	 ecx, 2
  00117	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReportW
  0011d	83 f8 01	 cmp	 eax, 1
  00120	75 03		 jne	 SHORT $LN11@Allocate
  00122	cc		 int	 3
  00123	33 c0		 xor	 eax, eax
$LN11@Allocate:
  00125	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Allocate@std@@YAPEAX_K0_N@Z@4JA
  0012b	83 c0 16	 add	 eax, 22
  0012e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00137	44 8b c8	 mov	 r9d, eax
  0013a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1JA@DKOIEICI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00141	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  00148	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  0014f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
$LN7@Allocate:

; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00155	48 8b 45 68	 mov	 rax, QWORD PTR _Ptr_container$2[rbp]
  00159	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  0015d	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H
  00161	48 89 45 08	 mov	 QWORD PTR _Ptr$[rbp], rax

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00165	b8 08 00 00 00	 mov	 eax, 8
  0016a	48 6b c0 ff	 imul	 rax, rax, -1
  0016e	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00172	48 8b 55 68	 mov	 rdx, QWORD PTR _Ptr_container$2[rbp]
  00176	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 74   : 
; 75   :  #ifdef _DEBUG
; 76   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;

  0017a	b8 08 00 00 00	 mov	 eax, 8
  0017f	48 6b c0 fe	 imul	 rax, rax, -2
  00183	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00187	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  00191	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 77   :  #endif /* _DEBUG */
; 78   : 		}
; 79   : 	else

  00195	e9 9b 00 00 00	 jmp	 $LN5@Allocate
$LN4@Allocate:

; 80   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 81   : 
; 82   : 		{	// allocate normal block
; 83   : 		_Ptr = ::operator new(_User_size);

  0019a	48 8b 4d 28	 mov	 rcx, QWORD PTR _User_size$[rbp]
  0019e	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  001a3	48 89 45 08	 mov	 QWORD PTR _Ptr$[rbp], rax

; 84   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  001a7	48 83 7d 08 00	 cmp	 QWORD PTR _Ptr$[rbp], 0
  001ac	0f 85 83 00 00
	00		 jne	 $LN8@Allocate
  001b2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@
  001b9	48 85 c0	 test	 rax, rax
  001bc	74 06		 je	 SHORT $LN12@Allocate
  001be	33 c0		 xor	 eax, eax
  001c0	85 c0		 test	 eax, eax
  001c2	75 41		 jne	 SHORT $LN13@Allocate
$LN12@Allocate:
  001c4	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Allocate@std@@YAPEAX_K0_N@Z@4JA
  001ca	83 c0 24	 add	 eax, 36			; 00000024H
  001cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
  001d4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  001e0	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  001e5	45 33 c9	 xor	 r9d, r9d
  001e8	44 8b c0	 mov	 r8d, eax
  001eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1JA@DKOIEICI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  001f2	b9 02 00 00 00	 mov	 ecx, 2
  001f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReportW
  001fd	83 f8 01	 cmp	 eax, 1
  00200	75 03		 jne	 SHORT $LN13@Allocate
  00202	cc		 int	 3
  00203	33 c0		 xor	 eax, eax
$LN13@Allocate:
  00205	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Allocate@std@@YAPEAX_K0_N@Z@4JA
  0020b	83 c0 24	 add	 eax, 36			; 00000024H
  0020e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00217	44 8b c8	 mov	 r9d, eax
  0021a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1JA@DKOIEICI@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00221	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  00228	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  0022f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
$LN8@Allocate:
$LN5@Allocate:

; 85   : 		}
; 86   : 	return (_Ptr);

  00235	48 8b 45 08	 mov	 rax, QWORD PTR _Ptr$[rbp]
$LN1@Allocate:
$LN9@Allocate:

; 87   : 	}

  00239	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  00240	5f		 pop	 rdi
  00241	5d		 pop	 rbp
  00242	c3		 ret	 0
?_Allocate@std@@YAPEAX_K0_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
_Lock$4 = 4
_Pnext$5 = 40
__$ArrayPad$ = 248
this$ = 288
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 215  : 	{	// orphan all iterators

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 f8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 216  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 217  : 	if (_Myproxy != 0)

  0003b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00046	74 6b		 je	 SHORT $LN5@Orphan_all

; 218  : 		{	// proxy allocated, drain it
; 219  : 		_Lockit _Lock(_LOCK_DEBUG);

  00048	ba 03 00 00 00	 mov	 edx, 3
  0004d	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$4[rbp]
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z

; 220  : 
; 221  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

  00057	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00061	48 83 c0 08	 add	 rax, 8
  00065	48 89 45 28	 mov	 QWORD PTR _Pnext$5[rbp], rax
  00069	eb 12		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:

; 222  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)

  0006b	48 8b 45 28	 mov	 rax, QWORD PTR _Pnext$5[rbp]
  0006f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00072	48 8b 4d 28	 mov	 rcx, QWORD PTR _Pnext$5[rbp]
  00076	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0007a	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN4@Orphan_all:
  0007d	48 8b 45 28	 mov	 rax, QWORD PTR _Pnext$5[rbp]
  00081	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00085	74 10		 je	 SHORT $LN3@Orphan_all

; 223  : 			(*_Pnext)->_Myproxy = 0;

  00087	48 8b 45 28	 mov	 rax, QWORD PTR _Pnext$5[rbp]
  0008b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008e	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00095	eb d4		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 224  : 		_Myproxy->_Myfirstiter = 0;

  00097	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a1	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 225  : 		}

  000a9	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$4[rbp]
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
$LN5@Orphan_all:

; 226  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 227  : 	}

  000b3	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcFrameData
  000be	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000ca	48 33 cd	 xor	 rcx, rbp
  000cd	e8 00 00 00 00	 call	 __security_check_cookie
  000d2	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000d9	5f		 pop	 rdi
  000da	5d		 pop	 rbp
  000db	c3		 ret	 0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??1_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::~_Container_base12, COMDAT

; 94   : 		{	// destroy the container

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 95   : 		_Orphan_all();

  00035	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all
  00041	90		 npad	 1

; 96   : 		}

  00042	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??1_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::~_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 80   : 		{	// construct childless container

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 79   : 		: _Myproxy(0)

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 81   : 		}

  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??0_Container_proxy@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Container_proxy@std@@QEAA@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT

; 68   : 		{	// construct from pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 67   : 		: _Mycont(0), _Myfirstiter(0)

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 69   : 		}

  00045	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00053	5f		 pop	 rdi
  00054	5d		 pop	 rbp
  00055	c3		 ret	 0
??0_Container_proxy@std@@QEAA@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@_W@std@@SAXAEA_WAEB_W@Z
_TEXT	SEGMENT
_Left$ = 224
_Right$ = 232
?assign@?$char_traits@_W@std@@SAXAEA_WAEB_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT

; 344  : 		{	// assign an element

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 345  : 		_Left = _Right;

  0002d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00034	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0003b	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  0003e	66 89 08	 mov	 WORD PTR [rax], cx

; 346  : 		}

  00041	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
?assign@?$char_traits@_W@std@@SAXAEA_WAEB_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@_W@std@@SAPEA_WPEA_WPEB_W_K@Z
_TEXT	SEGMENT
tv69 = 192
_First1$ = 240
_First2$ = 248
_Count$ = 256
?move@?$char_traits@_W@std@@SAPEA_WPEA_WPEB_W_K@Z PROC	; std::char_traits<wchar_t>::move, COMDAT

; 332  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 333  : 		return (_Count == 0 ? _First1

  00034	48 83 bd 00 01
	00 00 00	 cmp	 QWORD PTR _Count$[rbp], 0
  0003c	75 10		 jne	 SHORT $LN3@move
  0003e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _First1$[rbp]
  00045	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  0004c	eb 21		 jmp	 SHORT $LN4@move
$LN3@move:
  0004e	4c 8b 85 00 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00055	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR _First2$[rbp]
  0005c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _First1$[rbp]
  00063	e8 00 00 00 00	 call	 wmemmove
  00068	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
$LN4@move:
  0006f	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv69[rbp]

; 334  : 			: (_Elem *)_CSTD wmemmove(_First1, _First2, _Count));
; 335  : 		}

  00076	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0007d	5f		 pop	 rdi
  0007e	5d		 pop	 rbp
  0007f	c3		 ret	 0
?move@?$char_traits@_W@std@@SAPEA_WPEA_WPEB_W_K@Z ENDP	; std::char_traits<wchar_t>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@_W@std@@SAPEA_WPEA_WPEB_W_K@Z
_TEXT	SEGMENT
tv69 = 192
_First1$ = 240
_First2$ = 248
_Count$ = 256
?copy@?$char_traits@_W@std@@SAPEA_WPEA_WPEB_W_K@Z PROC	; std::char_traits<wchar_t>::copy, COMDAT

; 309  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 310  : 		return (_Count == 0 ? _First1

  00034	48 83 bd 00 01
	00 00 00	 cmp	 QWORD PTR _Count$[rbp], 0
  0003c	75 10		 jne	 SHORT $LN3@copy
  0003e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _First1$[rbp]
  00045	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  0004c	eb 21		 jmp	 SHORT $LN4@copy
$LN3@copy:
  0004e	4c 8b 85 00 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00055	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR _First2$[rbp]
  0005c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _First1$[rbp]
  00063	e8 00 00 00 00	 call	 wmemcpy
  00068	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
$LN4@copy:
  0006f	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv69[rbp]

; 311  : 			: (_Elem *)_CSTD wmemcpy(_First1, _First2, _Count));
; 312  : 		}

  00076	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0007d	5f		 pop	 rdi
  0007e	5d		 pop	 rbp
  0007f	c3		 ret	 0
?copy@?$char_traits@_W@std@@SAPEA_WPEA_WPEB_W_K@Z ENDP	; std::char_traits<wchar_t>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@_W@std@@SA_KPEB_W@Z
_TEXT	SEGMENT
tv68 = 192
_First$ = 240
?length@?$char_traits@_W@std@@SA_KPEB_W@Z PROC		; std::char_traits<wchar_t>::length, COMDAT

; 302  : 		{	// find length of null-terminated sequence

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 303  : 		return (*_First == 0 ? 0

  0002a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _First$[rbp]
  00031	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00034	85 c0		 test	 eax, eax
  00036	75 0d		 jne	 SHORT $LN3@length
  00038	48 c7 85 c0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv68[rbp], 0
  00043	eb 14		 jmp	 SHORT $LN4@length
$LN3@length:
  00045	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _First$[rbp]
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcslen
  00052	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv68[rbp], rax
$LN4@length:
  00059	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv68[rbp]

; 304  : 			: _CSTD wcslen(_First));
; 305  : 		}

  00060	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
?length@?$char_traits@_W@std@@SA_KPEB_W@Z ENDP		; std::char_traits<wchar_t>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 224
_Where$ = 232
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 87   :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 88   :         (void)_Size;
; 89   :         return _Where;

  0002d	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Where$[rbp]

; 90   :     }

  00034	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003b	5f		 pop	 rdi
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
;	COMDAT wmemmove
_TEXT	SEGMENT
_S1$ = 224
_S2$ = 232
_N$ = 240
wmemmove PROC						; COMDAT

; 244  :     {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 245  :         #pragma warning(push)
; 246  :         #pragma warning(disable : 4996 6386)
; 247  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  00034	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _N$[rbp]
  0003b	48 d1 e0	 shl	 rax, 1
  0003e	4c 8b c0	 mov	 r8, rax
  00041	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _S2$[rbp]
  00048	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _S1$[rbp]
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memmove

; 248  :         #pragma warning(pop)
; 249  :     }

  00055	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
wmemmove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
;	COMDAT wmemcpy
_TEXT	SEGMENT
_S1$ = 224
_S2$ = 232
_N$ = 240
wmemcpy	PROC						; COMDAT

; 231  :     {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 232  :         #pragma warning(push)
; 233  :         #pragma warning(disable : 4995 4996 6386)
; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00034	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _N$[rbp]
  0003b	48 d1 e0	 shl	 rax, 1
  0003e	4c 8b c0	 mov	 r8, rax
  00041	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _S2$[rbp]
  00048	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _S1$[rbp]
  0004f	e8 00 00 00 00	 call	 memcpy

; 235  :         #pragma warning(pop)
; 236  :     }

  00054	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
wmemcpy	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  0002d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00034	5f		 pop	 rdi
  00035	5d		 pop	 rbp
  00036	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\client\private\skillblueeffect.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 224
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002f	5f		 pop	 rdi
  00030	5d		 pop	 rbp
  00031	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 192
tv67 = 200
__t$ = 240
__s$ = 248
__n$ = 256
__f$ = 264
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN7:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
$LN2@vector:
  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR __n$[rbp]
  00040	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv66[rbp], rax
  00047	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR __n$[rbp]
  0004e	48 ff c8	 dec	 rax
  00051	48 89 85 00 01
	00 00		 mov	 QWORD PTR __n$[rbp], rax
  00058	48 83 bd c0 00
	00 00 00	 cmp	 QWORD PTR tv66[rbp], 0
  00060	76 0c		 jbe	 SHORT $LN5@vector
  00062	c7 85 c8 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv67[rbp], 1
  0006c	eb 0a		 jmp	 SHORT $LN6@vector
$LN5@vector:
  0006e	c7 85 c8 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv67[rbp], 0
$LN6@vector:
  00078	83 bd c8 00 00
	00 00		 cmp	 DWORD PTR tv67[rbp], 0
  0007f	74 2a		 je	 SHORT $LN3@vector
  00081	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR __t$[rbp]
  00088	ff 95 08 01 00
	00		 call	 QWORD PTR __f$[rbp]
  0008e	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR __s$[rbp]
  00095	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR __t$[rbp]
  0009c	48 03 c8	 add	 rcx, rax
  0009f	48 8b c1	 mov	 rax, rcx
  000a2	48 89 85 f0 00
	00 00		 mov	 QWORD PTR __t$[rbp], rax
  000a9	eb 8e		 jmp	 SHORT $LN2@vector
$LN3@vector:
  000ab	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000b2	5f		 pop	 rdi
  000b3	5d		 pop	 rbp
  000b4	c3		 ret	 0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
