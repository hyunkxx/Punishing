; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24245.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CNO@BDFPHIBE@cbuffer?5vertexBuffer?5?3?5register?$CI@ ; `string'
PUBLIC	??_C@_0BJC@PEIKANGF@struct?5PS_INPUT?5?5?5?5?5?5?5?5?5?5?5?5?$HL?5?5?5?5@ ; `string'
;	COMDAT ??_C@_0BJC@PEIKANGF@struct?5PS_INPUT?5?5?5?5?5?5?5?5?5?5?5?5?$HL?5?5?5?5@
CONST	SEGMENT
??_C@_0BJC@PEIKANGF@struct?5PS_INPUT?5?5?5?5?5?5?5?5?5?5?5?5?$HL?5?5?5?5@ DB 's'
	DB	'truct PS_INPUT            {            float4 pos : SV_POSITI'
	DB	'ON;            float4 col : COLOR0;            float2 uv  : T'
	DB	'EXCOORD0;            };            sampler sampler0;         '
	DB	'   Texture2D texture0;                        float4 main(PS_'
	DB	'INPUT input) : SV_Target            {            float4 out_c'
	DB	'ol = input.col * texture0.Sample(sampler0, input.uv);        '
	DB	'     return out_col;             }', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CNO@BDFPHIBE@cbuffer?5vertexBuffer?5?3?5register?$CI@
CONST	SEGMENT
??_C@_0CNO@BDFPHIBE@cbuffer?5vertexBuffer?5?3?5register?$CI@ DB 'cbuffer '
	DB	'vertexBuffer : register(b0)             {              float4'
	DB	'x4 ProjectionMatrix;             };            struct VS_INPU'
	DB	'T            {              float2 pos : POSITION;           '
	DB	'   float4 col : COLOR0;              float2 uv  : TEXCOORD0; '
	DB	'           };                        struct PS_INPUT         '
	DB	'   {              float4 pos : SV_POSITION;              floa'
	DB	't4 col : COLOR0;              float2 uv  : TEXCOORD0;        '
	DB	'    };                        PS_INPUT main(VS_INPUT input)  '
	DB	'          {              PS_INPUT output;              output'
	DB	'.pos = mul( ProjectionMatrix, float4(input.pos.xy, 0.f, 1.f))'
	DB	';              output.col = input.col;              output.uv'
	DB	'  = input.uv;              return output;            }', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?vertexShader@?6??ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ@4PEBDEB DQ FLAT:??_C@_0CNO@BDFPHIBE@cbuffer?5vertexBuffer?5?3?5register?$CI@ ; `ImGui_ImplDX11_CreateDeviceObjects'::`7'::vertexShader
?pixelShader@?BB@??ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ@4PEBDEB DQ FLAT:??_C@_0BJC@PEIKANGF@struct?5PS_INPUT?5?5?5?5?5?5?5?5?5?5?5?5?$HL?5?5?5?5@ ; `ImGui_ImplDX11_CreateDeviceObjects'::`17'::pixelShader
_DATA	ENDS
PUBLIC	??0ImVec2@@QEAA@MM@Z				; ImVec2::ImVec2
PUBLIC	??2@YAPEAX_KUImNewWrapper@@PEAX@Z		; operator new
PUBLIC	??3@YAXPEAXUImNewWrapper@@0@Z			; operator delete
PUBLIC	?GetTexID@ImDrawCmd@@QEBAPEAXXZ			; ImDrawCmd::GetTexID
PUBLIC	??A?$ImVector@UImDrawCmd@@@@QEBAAEBUImDrawCmd@@H@Z ; ImVector<ImDrawCmd>::operator[]
PUBLIC	?SetTexID@ImFontAtlas@@QEAAXPEAX@Z		; ImFontAtlas::SetTexID
PUBLIC	?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z ; ImGui_ImplDX11_Init
PUBLIC	?ImGui_ImplDX11_Shutdown@@YAXXZ			; ImGui_ImplDX11_Shutdown
PUBLIC	?ImGui_ImplDX11_NewFrame@@YAXXZ			; ImGui_ImplDX11_NewFrame
PUBLIC	?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z ; ImGui_ImplDX11_RenderDrawData
PUBLIC	?ImGui_ImplDX11_InvalidateDeviceObjects@@YAXXZ	; ImGui_ImplDX11_InvalidateDeviceObjects
PUBLIC	?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ	; ImGui_ImplDX11_CreateDeviceObjects
PUBLIC	??0ImGui_ImplDX11_Data@@QEAA@XZ			; ImGui_ImplDX11_Data::ImGui_ImplDX11_Data
PUBLIC	??$IID_PPV_ARGS_Helper@UIDXGIDevice@@@@YAPEAPEAXPEAPEAUIDXGIDevice@@@Z ; IID_PPV_ARGS_Helper<IDXGIDevice>
PUBLIC	??$IID_PPV_ARGS_Helper@UIDXGIAdapter@@@@YAPEAPEAXPEAPEAUIDXGIAdapter@@@Z ; IID_PPV_ARGS_Helper<IDXGIAdapter>
PUBLIC	??$IID_PPV_ARGS_Helper@UIDXGIFactory@@@@YAPEAPEAXPEAPEAUIDXGIFactory@@@Z ; IID_PPV_ARGS_Helper<IDXGIFactory>
PUBLIC	??$IM_DELETE@UImGui_ImplDX11_Data@@@@YAXPEAUImGui_ImplDX11_Data@@@Z ; IM_DELETE<ImGui_ImplDX11_Data>
PUBLIC	??_C@_1HK@CCADOJHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAa?$AAr?$AAc?$AAc?$AAo?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2@ ; `string'
PUBLIC	?__LINE__Var@?0??ImGui_ImplDX11_CreateFontsTexture@@YAXXZ@4JA ; `ImGui_ImplDX11_CreateFontsTexture'::`1'::__LINE__Var
PUBLIC	??_C@_1JC@KDJDKOBM@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAa?$AAr?$AAc?$AAc?$AAo?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2@ ; `string'
PUBLIC	??_C@_1CI@NOEPHNFN@?$AAp?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_06BNDBNCGN@vs_4_0?$AA@			; `string'
PUBLIC	??_C@_04GHJNJNPO@main?$AA@			; `string'
PUBLIC	??_C@_08JPMAAECC@POSITION?$AA@			; `string'
PUBLIC	??_C@_08CMDKBPJM@TEXCOORD?$AA@			; `string'
PUBLIC	??_C@_05DPNLPLKI@COLOR?$AA@			; `string'
PUBLIC	??_C@_06HOOBOHFH@ps_4_0?$AA@			; `string'
PUBLIC	?__LINE__Var@?0??ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4JA ; `ImGui_ImplDX11_Init'::`1'::__LINE__Var
PUBLIC	_GUID_54ec77fa_1377_44e6_8c32_88fd5f44c84c
PUBLIC	_GUID_2411e7e1_12ac_4ccf_bd14_9798e8534dc0
PUBLIC	_GUID_7b7166ec_21c7_44ae_b21a_c9ae321ae369
PUBLIC	??_C@_0CI@KPONPGNP@Already?5initialized?5a?5renderer?5b@ ; `string'
PUBLIC	??_C@_1KG@KAGFNFPJ@?$AAi?$AAo?$AA?4?$AAB?$AAa?$AAc?$AAk?$AAe?$AAn?$AAd?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAe?$AAr?$AAU?$AAs?$AAe?$AAr?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAu@ ; `string'
PUBLIC	??_C@_0BA@OFLFAAJI@imgui_impl_dx11?$AA@		; `string'
PUBLIC	?__LINE__Var@?0??ImGui_ImplDX11_Shutdown@@YAXXZ@4JA ; `ImGui_ImplDX11_Shutdown'::`1'::__LINE__Var
PUBLIC	??_C@_0DG@PGEIMAGB@No?5renderer?5backend?5to?5shutdown?0@ ; `string'
PUBLIC	??_C@_1JC@MCIBIMON@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAN?$AAo?$AA?5?$AAr?$AAe?$AAn?$AAd?$AAe?$AAr?$AAe?$AAr?$AA?5?$AAb?$AAa@ ; `string'
PUBLIC	?__LINE__Var@?0??ImGui_ImplDX11_NewFrame@@YAXXZ@4JA ; `ImGui_ImplDX11_NewFrame'::`1'::__LINE__Var
PUBLIC	??_C@_0CE@BBLPMFDA@Did?5you?5call?5ImGui_ImplDX11_Init@ ; `string'
PUBLIC	??_C@_1GO@JAOHHKNM@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAD?$AAi?$AAd?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAI@ ; `string'
PUBLIC	??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
EXTRN	memcpy:PROC
EXTRN	memset:PROC
EXTRN	strlen:PROC
EXTRN	__imp__wassert:PROC
EXTRN	?GetCurrentContext@ImGui@@YAPEAUImGuiContext@@XZ:PROC ; ImGui::GetCurrentContext
EXTRN	?GetIO@ImGui@@YAAEAUImGuiIO@@XZ:PROC		; ImGui::GetIO
EXTRN	?MemAlloc@ImGui@@YAPEAX_K@Z:PROC		; ImGui::MemAlloc
EXTRN	?MemFree@ImGui@@YAXPEAX@Z:PROC			; ImGui::MemFree
EXTRN	?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z:PROC ; ImFontAtlas::GetTexDataAsRGBA32
EXTRN	D3DCompile:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec2@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0ImVec2@@QEAA@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KUImNewWrapper@@PEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??2@YAPEAX_KUImNewWrapper@@PEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??3@YAXPEAXUImNewWrapper@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??3@YAXPEAXUImNewWrapper@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetTexID@ImDrawCmd@@QEBAPEAXXZ DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$?GetTexID@ImDrawCmd@@QEBAPEAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImDrawCmd@@@@QEBAAEBUImDrawCmd@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??A?$ImVector@UImDrawCmd@@@@QEBAAEBUImDrawCmd@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetTexID@ImFontAtlas@@QEAAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$?SetTexID@ImFontAtlas@@QEAAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z DD imagerel $LN13
	DD	imagerel $LN13+695
	DD	imagerel $unwind$?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA DD imagerel ?dtor$0@?0??ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA
	DD	imagerel ?dtor$0@?0??ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA+56
	DD	imagerel $unwind$?dtor$0@?0??ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplDX11_Shutdown@@YAXXZ DD imagerel $LN8
	DD	imagerel $LN8+251
	DD	imagerel $unwind$?ImGui_ImplDX11_Shutdown@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplDX11_NewFrame@@YAXXZ DD imagerel $LN6
	DD	imagerel $LN6+118
	DD	imagerel $unwind$?ImGui_ImplDX11_NewFrame@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD imagerel $LN51
	DD	imagerel $LN51+3926
	DD	imagerel $unwind$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplDX11_InvalidateDeviceObjects@@YAXXZ DD imagerel $LN15
	DD	imagerel $LN15+575
	DD	imagerel $unwind$?ImGui_ImplDX11_InvalidateDeviceObjects@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ DD imagerel $LN10
	DD	imagerel $LN10+1879
	DD	imagerel $unwind$?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGui_ImplDX11_Data@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+107
	DD	imagerel $unwind$??0ImGui_ImplDX11_Data@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplDX11_GetBackendData@@YAPEAUImGui_ImplDX11_Data@@XZ DD imagerel ?ImGui_ImplDX11_GetBackendData@@YAPEAUImGui_ImplDX11_Data@@XZ
	DD	imagerel ?ImGui_ImplDX11_GetBackendData@@YAPEAUImGui_ImplDX11_Data@@XZ+89
	DD	imagerel $unwind$?ImGui_ImplDX11_GetBackendData@@YAPEAUImGui_ImplDX11_Data@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z DD imagerel ?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z
	DD	imagerel ?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z+874
	DD	imagerel $unwind$?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ DD imagerel ?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ
	DD	imagerel ?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ+740
	DD	imagerel $unwind$?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$IID_PPV_ARGS_Helper@UIDXGIDevice@@@@YAPEAPEAXPEAPEAUIDXGIDevice@@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$IID_PPV_ARGS_Helper@UIDXGIDevice@@@@YAPEAPEAXPEAPEAUIDXGIDevice@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$IID_PPV_ARGS_Helper@UIDXGIAdapter@@@@YAPEAPEAXPEAPEAUIDXGIAdapter@@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$IID_PPV_ARGS_Helper@UIDXGIAdapter@@@@YAPEAPEAXPEAPEAUIDXGIAdapter@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$IID_PPV_ARGS_Helper@UIDXGIFactory@@@@YAPEAPEAXPEAPEAUIDXGIFactory@@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$IID_PPV_ARGS_Helper@UIDXGIFactory@@@@YAPEAPEAXPEAPEAUIDXGIFactory@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$IM_DELETE@UImGui_ImplDX11_Data@@@@YAXPEAUImGui_ImplDX11_Data@@@Z DD imagerel $LN4
	DD	imagerel $LN4+74
	DD	imagerel $unwind$??$IM_DELETE@UImGui_ImplDX11_Data@@@@YAXPEAUImGui_ImplDX11_Data@@@Z
pdata	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@JAOHHKNM@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAD?$AAi?$AAd?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAI@
CONST	SEGMENT
??_C@_1GO@JAOHHKNM@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAD?$AAi?$AAd?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAI@ DB 'b'
	DB	00H, 'd', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'n', 00H
	DB	'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't', 00H, 'r', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'D', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'c'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'I', 00H, 'm', 00H
	DB	'G', 00H, 'u', 00H, 'i', 00H, '_', 00H, 'I', 00H, 'm', 00H, 'p'
	DB	00H, 'l', 00H, 'D', 00H, 'X', 00H, '1', 00H, '1', 00H, '_', 00H
	DB	'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, '(', 00H, ')', 00H, '?'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BBLPMFDA@Did?5you?5call?5ImGui_ImplDX11_Init@
CONST	SEGMENT
??_C@_0CE@BBLPMFDA@Did?5you?5call?5ImGui_ImplDX11_Init@ DB 'Did you call '
	DB	'ImGui_ImplDX11_Init()?', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImGui_ImplDX11_NewFrame@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImGui_ImplDX11_NewFrame@@YAXXZ@4JA DD 024eH ; `ImGui_ImplDX11_NewFrame'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1JC@MCIBIMON@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAN?$AAo?$AA?5?$AAr?$AAe?$AAn?$AAd?$AAe?$AAr?$AAe?$AAr?$AA?5?$AAb?$AAa@
CONST	SEGMENT
??_C@_1JC@MCIBIMON@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAN?$AAo?$AA?5?$AAr?$AAe?$AAn?$AAd?$AAe?$AAr?$AAe?$AAr?$AA?5?$AAb?$AAa@ DB 'b'
	DB	00H, 'd', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'n', 00H
	DB	'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't', 00H, 'r', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'N', 00H, 'o', 00H
	DB	' ', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'r', 00H, ' ', 00H, 'b', 00H, 'a', 00H, 'c', 00H
	DB	'k', 00H, 'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 't', 00H, 'o'
	DB	00H, ' ', 00H, 's', 00H, 'h', 00H, 'u', 00H, 't', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, 'n', 00H, ',', 00H, ' ', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, 'a', 00H, 'l', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	'd', 00H, 'y', 00H, ' ', 00H, 's', 00H, 'h', 00H, 'u', 00H, 't'
	DB	00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, '?', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@PGEIMAGB@No?5renderer?5backend?5to?5shutdown?0@
CONST	SEGMENT
??_C@_0DG@PGEIMAGB@No?5renderer?5backend?5to?5shutdown?0@ DB 'No renderer'
	DB	' backend to shutdown, or already shutdown?', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImGui_ImplDX11_Shutdown@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImGui_ImplDX11_Shutdown@@YAXXZ@4JA DD 023fH ; `ImGui_ImplDX11_Shutdown'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BA@OFLFAAJI@imgui_impl_dx11?$AA@
CONST	SEGMENT
??_C@_0BA@OFLFAAJI@imgui_impl_dx11?$AA@ DB 'imgui_impl_dx11', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1KG@KAGFNFPJ@?$AAi?$AAo?$AA?4?$AAB?$AAa?$AAc?$AAk?$AAe?$AAn?$AAd?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAe?$AAr?$AAU?$AAs?$AAe?$AAr?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAu@
CONST	SEGMENT
??_C@_1KG@KAGFNFPJ@?$AAi?$AAo?$AA?4?$AAB?$AAa?$AAc?$AAk?$AAe?$AAn?$AAd?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAe?$AAr?$AAU?$AAs?$AAe?$AAr?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAu@ DB 'i'
	DB	00H, 'o', 00H, '.', 00H, 'B', 00H, 'a', 00H, 'c', 00H, 'k', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'r', 00H, 'U', 00H, 's', 00H
	DB	'e', 00H, 'r', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H
	DB	'l', 00H, 'p', 00H, 't', 00H, 'r', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '"', 00H, 'A', 00H, 'l', 00H, 'r', 00H, 'e', 00H
	DB	'a', 00H, 'd', 00H, 'y', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'r', 00H, 'e'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 'n'
	DB	00H, 'd', 00H, '!', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KPONPGNP@Already?5initialized?5a?5renderer?5b@
CONST	SEGMENT
??_C@_0CI@KPONPGNP@Already?5initialized?5a?5renderer?5b@ DB 'Already init'
	DB	'ialized a renderer backend!', 00H		; `string'
CONST	ENDS
;	COMDAT _GUID_7b7166ec_21c7_44ae_b21a_c9ae321ae369
CONST	SEGMENT
_GUID_7b7166ec_21c7_44ae_b21a_c9ae321ae369 DD 07b7166ecH
	DW	021c7H
	DW	044aeH
	DB	0b2H
	DB	01aH
	DB	0c9H
	DB	0aeH
	DB	032H
	DB	01aH
	DB	0e3H
	DB	069H
CONST	ENDS
;	COMDAT _GUID_2411e7e1_12ac_4ccf_bd14_9798e8534dc0
CONST	SEGMENT
_GUID_2411e7e1_12ac_4ccf_bd14_9798e8534dc0 DD 02411e7e1H
	DW	012acH
	DW	04ccfH
	DB	0bdH
	DB	014H
	DB	097H
	DB	098H
	DB	0e8H
	DB	053H
	DB	04dH
	DB	0c0H
CONST	ENDS
;	COMDAT _GUID_54ec77fa_1377_44e6_8c32_88fd5f44c84c
CONST	SEGMENT
_GUID_54ec77fa_1377_44e6_8c32_88fd5f44c84c DD 054ec77faH
	DW	01377H
	DW	044e6H
	DB	08cH
	DB	032H
	DB	088H
	DB	0fdH
	DB	05fH
	DB	044H
	DB	0c8H
	DB	04cH
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4JA DD 021fH ; `ImGui_ImplDX11_Init'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06HOOBOHFH@ps_4_0?$AA@
CONST	SEGMENT
??_C@_06HOOBOHFH@ps_4_0?$AA@ DB 'ps_4_0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DPNLPLKI@COLOR?$AA@
CONST	SEGMENT
??_C@_05DPNLPLKI@COLOR?$AA@ DB 'COLOR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CMDKBPJM@TEXCOORD?$AA@
CONST	SEGMENT
??_C@_08CMDKBPJM@TEXCOORD?$AA@ DB 'TEXCOORD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JPMAAECC@POSITION?$AA@
CONST	SEGMENT
??_C@_08JPMAAECC@POSITION?$AA@ DB 'POSITION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHJNJNPO@main?$AA@
CONST	SEGMENT
??_C@_04GHJNJNPO@main?$AA@ DB 'main', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BNDBNCGN@vs_4_0?$AA@
CONST	SEGMENT
??_C@_06BNDBNCGN@vs_4_0?$AA@ DB 'vs_4_0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@NOEPHNFN@?$AAp?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@NOEPHNFN@?$AAp?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@ DB 'p'
	DB	00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'n', 00H, 'u'
	DB	00H, 'l', 00H, 'l', 00H, 'p', 00H, 't', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JC@KDJDKOBM@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAa?$AAr?$AAc?$AAc?$AAo?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2@
CONST	SEGMENT
??_C@_1JC@KDJDKOBM@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAa?$AAr?$AAc?$AAc?$AAo?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'a', 00H, 'r', 00H, 'c', 00H, 'c', 00H, 'o'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'c', 00H, 'u', 00H, 'm', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, 's', 00H, '\', 00H, 'g', 00H, 'i'
	DB	00H, 't', 00H, 'h', 00H, 'u', 00H, 'b', 00H, '\', 00H, 'f', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'w', 00H, 'o', 00H, 'r'
	DB	00H, 'k', 00H, '\', 00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H
	DB	'\', 00H, 'i', 00H, 'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '\'
	DB	00H, 'i', 00H, 'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, '_', 00H, 'd', 00H, 'x'
	DB	00H, '1', 00H, '1', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImGui_ImplDX11_CreateFontsTexture@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImGui_ImplDX11_CreateFontsTexture@@YAXXZ@4JA DD 0134H ; `ImGui_ImplDX11_CreateFontsTexture'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1HK@CCADOJHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAa?$AAr?$AAc?$AAc?$AAo?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2@
CONST	SEGMENT
??_C@_1HK@CCADOJHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAa?$AAr?$AAc?$AAc?$AAo?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'a', 00H, 'r', 00H, 'c', 00H, 'c', 00H, 'o'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'c', 00H, 'u', 00H, 'm', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, 's', 00H, '\', 00H, 'g', 00H, 'i'
	DB	00H, 't', 00H, 'h', 00H, 'u', 00H, 'b', 00H, '\', 00H, 'f', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'w', 00H, 'o', 00H, 'r'
	DB	00H, 'k', 00H, '\', 00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H
	DB	'\', 00H, 'i', 00H, 'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '\'
	DB	00H, 'i', 00H, 'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$IM_DELETE@UImGui_ImplDX11_Data@@@@YAXPEAUImGui_ImplDX11_Data@@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$IID_PPV_ARGS_Helper@UIDXGIFactory@@@@YAPEAPEAXPEAPEAUIDXGIFactory@@@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$IID_PPV_ARGS_Helper@UIDXGIAdapter@@@@YAPEAPEAXPEAPEAUIDXGIAdapter@@@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$IID_PPV_ARGS_Helper@UIDXGIDevice@@@@YAPEAPEAXPEAPEAUIDXGIDevice@@@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ DD 035052f19H
	DD	010a330fH
	DD	070030059H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	02b8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcName$0 DB 070H ; ImGui_ImplDX11_CreateFontsTexture
	DB	069H
	DB	078H
	DB	065H
	DB	06cH
	DB	073H
	DB	00H
	ORG $+1
?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcName$1 DB 077H ; ImGui_ImplDX11_CreateFontsTexture
	DB	069H
	DB	064H
	DB	074H
	DB	068H
	DB	00H
	ORG $+2
?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcName$2 DB 068H ; ImGui_ImplDX11_CreateFontsTexture
	DB	065H
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	00H
	ORG $+1
?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcName$3 DB 064H ; ImGui_ImplDX11_CreateFontsTexture
	DB	065H
	DB	073H
	DB	063H
	DB	00H
	ORG $+3
?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcName$4 DB 070H ; ImGui_ImplDX11_CreateFontsTexture
	DB	054H
	DB	065H
	DB	078H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	00H
	ORG $+7
?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcName$5 DB 073H ; ImGui_ImplDX11_CreateFontsTexture
	DB	075H
	DB	062H
	DB	052H
	DB	065H
	DB	073H
	DB	06fH
	DB	075H
	DB	072H
	DB	063H
	DB	065H
	DB	00H
	ORG $+4
?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcName$6 DB 073H ; ImGui_ImplDX11_CreateFontsTexture
	DB	072H
	DB	076H
	DB	044H
	DB	065H
	DB	073H
	DB	063H
	DB	00H
?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcName$7 DB 064H ; ImGui_ImplDX11_CreateFontsTexture
	DB	065H
	DB	073H
	DB	063H
	DB	00H
	ORG $+3
?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcVarDesc DD 01a8H ; ImGui_ImplDX11_CreateFontsTexture
	DD	034H
	DQ	FLAT:?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcName$7
	DD	0178H
	DD	018H
	DQ	FLAT:?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcName$6
	DD	0148H
	DD	010H
	DQ	FLAT:?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcName$5
	DD	0128H
	DD	08H
	DQ	FLAT:?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcName$4
	DD	0d8H
	DD	02cH
	DQ	FLAT:?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcName$3
	DD	0b4H
	DD	04H
	DQ	FLAT:?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcName$2
	DD	094H
	DD	04H
	DQ	FLAT:?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcName$1
	DD	078H
	DD	08H
	DQ	FLAT:?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcName$0
	ORG $+384
?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcFrameData DD 08H ; ImGui_ImplDX11_CreateFontsTexture
	DD	00H
	DQ	FLAT:?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z DD 035054019H
	DD	01133318H
	DD	0700c0039H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	01b0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z$rtcName$0 DB 076H ; ImGui_ImplDX11_SetupRenderState
	DB	070H
	DB	00H
	ORG $+1
?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z$rtcName$1 DB 073H ; ImGui_ImplDX11_SetupRenderState
	DB	074H
	DB	072H
	DB	069H
	DB	064H
	DB	065H
	DB	00H
	ORG $+1
?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z$rtcName$2 DB 06fH ; ImGui_ImplDX11_SetupRenderState
	DB	066H
	DB	066H
	DB	073H
	DB	065H
	DB	074H
	DB	00H
	ORG $+5
?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z$rtcName$3 DB 062H ; ImGui_ImplDX11_SetupRenderState
	DB	06cH
	DB	065H
	DB	06eH
	DB	064H
	DB	05fH
	DB	066H
	DB	061H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+3
?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z$rtcFrameData DD 04H ; ImGui_ImplDX11_SetupRenderState
	DD	00H
	DQ	FLAT:?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z$rtcVarDesc
	ORG $+8
?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z$rtcVarDesc DD 0c8H ; ImGui_ImplDX11_SetupRenderState
	DD	010H
	DQ	FLAT:?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z$rtcName$3
	DD	0a4H
	DD	04H
	DQ	FLAT:?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z$rtcName$2
	DD	084H
	DD	04H
	DQ	FLAT:?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z$rtcName$1
	DD	058H
	DD	018H
	DQ	FLAT:?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplDX11_GetBackendData@@YAPEAUImGui_ImplDX11_Data@@XZ DD 025051e01H
	DD	010a230fH
	DD	07003001fH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGui_ImplDX11_Data@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ DD 065063019H
	DD	010b6310H
	DD	07004009cH
	DD	050026003H
	DD	imagerel __GSHandlerCheck
	DD	04d8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ$rtcName$0 DB 076H ; ImGui_ImplDX11_CreateDeviceObjects
	DB	065H
	DB	072H
	DB	074H
	DB	065H
	DB	078H
	DB	053H
	DB	068H
	DB	061H
	DB	064H
	DB	065H
	DB	072H
	DB	042H
	DB	06cH
	DB	06fH
	DB	062H
	DB	00H
	ORG $+7
?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ$rtcName$1 DB 06cH ; ImGui_ImplDX11_CreateDeviceObjects
	DB	06fH
	DB	063H
	DB	061H
	DB	06cH
	DB	05fH
	DB	06cH
	DB	061H
	DB	079H
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+3
?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ$rtcName$2 DB 064H ; ImGui_ImplDX11_CreateDeviceObjects
	DB	065H
	DB	073H
	DB	063H
	DB	00H
	ORG $+3
?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ$rtcName$3 DB 070H ; ImGui_ImplDX11_CreateDeviceObjects
	DB	069H
	DB	078H
	DB	065H
	DB	06cH
	DB	053H
	DB	068H
	DB	061H
	DB	064H
	DB	065H
	DB	072H
	DB	042H
	DB	06cH
	DB	06fH
	DB	062H
	DB	00H
?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ$rtcName$4 DB 064H ; ImGui_ImplDX11_CreateDeviceObjects
	DB	065H
	DB	073H
	DB	063H
	DB	00H
	ORG $+3
?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ$rtcName$5 DB 064H ; ImGui_ImplDX11_CreateDeviceObjects
	DB	065H
	DB	073H
	DB	063H
	DB	00H
	ORG $+3
?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ$rtcName$6 DB 064H ; ImGui_ImplDX11_CreateDeviceObjects
	DB	065H
	DB	073H
	DB	063H
	DB	00H
	ORG $+3
?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ$rtcFrameData DD 07H ; ImGui_ImplDX11_CreateDeviceObjects
	DD	00H
	DQ	FLAT:?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ$rtcVarDesc
	ORG $+8
?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ$rtcVarDesc DD 02e8H ; ImGui_ImplDX11_CreateDeviceObjects
	DD	034H
	DQ	FLAT:?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ$rtcName$6
	DD	02a8H
	DD	028H
	DQ	FLAT:?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ$rtcName$5
	DD	0180H
	DD	0108H
	DQ	FLAT:?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ$rtcName$4
	DD	0158H
	DD	08H
	DQ	FLAT:?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ$rtcName$3
	DD	0128H
	DD	018H
	DQ	FLAT:?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ$rtcName$2
	DD	0b0H
	DD	060H
	DQ	FLAT:?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ$rtcName$1
	DD	088H
	DD	08H
	DQ	FLAT:?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplDX11_InvalidateDeviceObjects@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	070030021H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z DD 035054119H
	DD	01143319H
	DD	0700704bfH
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	025e8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$0 DB 064H ; ImGui_ImplDX11_RenderDrawData
	DB	065H
	DB	073H
	DB	063H
	DB	00H
	ORG $+3
?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$1 DB 064H ; ImGui_ImplDX11_RenderDrawData
	DB	065H
	DB	073H
	DB	063H
	DB	00H
	ORG $+3
?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$2 DB 076H ; ImGui_ImplDX11_RenderDrawData
	DB	074H
	DB	078H
	DB	05fH
	DB	072H
	DB	065H
	DB	073H
	DB	06fH
	DB	075H
	DB	072H
	DB	063H
	DB	065H
	DB	00H
	ORG $+3
?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$3 DB 069H ; ImGui_ImplDX11_RenderDrawData
	DB	064H
	DB	078H
	DB	05fH
	DB	072H
	DB	065H
	DB	073H
	DB	06fH
	DB	075H
	DB	072H
	DB	063H
	DB	065H
	DB	00H
	ORG $+3
?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$4 DB 06dH ; ImGui_ImplDX11_RenderDrawData
	DB	061H
	DB	070H
	DB	070H
	DB	065H
	DB	064H
	DB	05fH
	DB	072H
	DB	065H
	DB	073H
	DB	06fH
	DB	075H
	DB	072H
	DB	063H
	DB	065H
	DB	00H
?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$5 DB 06dH ; ImGui_ImplDX11_RenderDrawData
	DB	076H
	DB	070H
	DB	00H
?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$6 DB 06fH ; ImGui_ImplDX11_RenderDrawData
	DB	06cH
	DB	064H
	DB	00H
?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$7 DB 063H ; ImGui_ImplDX11_RenderDrawData
	DB	06cH
	DB	069H
	DB	070H
	DB	05fH
	DB	06fH
	DB	066H
	DB	066H
	DB	00H
	ORG $+3
?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$10 DB 072H ; ImGui_ImplDX11_RenderDrawData
	DB	00H
	ORG $+2
?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$8 DB 063H ; ImGui_ImplDX11_RenderDrawData
	DB	06cH
	DB	069H
	DB	070H
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	00H
	ORG $+7
?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$9 DB 063H ; ImGui_ImplDX11_RenderDrawData
	DB	06cH
	DB	069H
	DB	070H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+7
?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$11 DB 074H ; ImGui_ImplDX11_RenderDrawData
	DB	065H
	DB	078H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	05fH
	DB	073H
	DB	072H
	DB	076H
	DB	00H
	ORG $+12
?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcVarDesc DD 01f88H ; ImGui_ImplDX11_RenderDrawData
	DD	08H
	DQ	FLAT:?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$11
	DD	01f58H
	DD	010H
	DQ	FLAT:?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$10
	DD	01f38H
	DD	08H
	DQ	FLAT:?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$9
	DD	01f18H
	DD	08H
	DQ	FLAT:?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$8
	DD	01e78H
	DD	08H
	DQ	FLAT:?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$7
	DD	02f0H
	DD	01b28H
	DQ	FLAT:?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$6
	DD	0290H
	DD	040H
	DQ	FLAT:?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$5
	DD	01b8H
	DD	010H
	DQ	FLAT:?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$4
	DD	0108H
	DD	010H
	DQ	FLAT:?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$3
	DD	0d8H
	DD	010H
	DQ	FLAT:?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$2
	DD	0a8H
	DD	018H
	DQ	FLAT:?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$1
	DD	078H
	DD	018H
	DQ	FLAT:?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcName$0
	ORG $+576
?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcFrameData DD 0cH ; ImGui_ImplDX11_RenderDrawData
	DD	00H
	DQ	FLAT:?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplDX11_NewFrame@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	070030021H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplDX11_Shutdown@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	070030025H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z DD imagerel ?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
	DD	0ffffffffH
	DD	imagerel ?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z+209
	DD	00H
	DD	imagerel ?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z+265
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z DD 025054b19H
	DD	01132318H
	DD	0700c004bH
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
	DD	0242H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z$rtcName$0 DB 070H ; ImGui_ImplDX11_Init
	DB	044H
	DB	058H
	DB	047H
	DB	049H
	DB	044H
	DB	065H
	DB	076H
	DB	069H
	DB	063H
	DB	065H
	DB	00H
	ORG $+4
?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z$rtcName$1 DB 070H ; ImGui_ImplDX11_Init
	DB	044H
	DB	058H
	DB	047H
	DB	049H
	DB	041H
	DB	064H
	DB	061H
	DB	070H
	DB	074H
	DB	065H
	DB	072H
	DB	00H
	ORG $+3
?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z$rtcName$2 DB 070H ; ImGui_ImplDX11_Init
	DB	046H
	DB	061H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	079H
	DB	00H
	ORG $+7
?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z$rtcVarDesc DD 0a8H ; ImGui_ImplDX11_Init
	DD	08H
	DQ	FLAT:?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z$rtcName$2
	DD	088H
	DD	08H
	DQ	FLAT:?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z$rtcName$1
	DD	068H
	DD	08H
	DQ	FLAT:?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z$rtcName$0
	ORG $+144
?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z$rtcFrameData DD 03H ; ImGui_ImplDX11_Init
	DD	00H
	DQ	FLAT:?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z$rtcVarDesc
$cppxdata$?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
	DD	0228H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetTexID@ImFontAtlas@@QEAAXPEAX@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImDrawCmd@@@@QEBAAEBUImDrawCmd@@H@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetTexID@ImDrawCmd@@QEBAPEAXXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??3@YAXPEAXUImNewWrapper@@0@Z DD 05053101H
	DD	0117031aH
	DD	070100019H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KUImNewWrapper@@PEAX@Z DD 05053101H
	DD	0117031aH
	DD	070100019H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec2@@QEAA@MM@Z DD 05031901H
	DD	072160319H
	DD	05012H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\tool\imgui\imgui.h
;	COMDAT ??$IM_DELETE@UImGui_ImplDX11_Data@@@@YAXPEAUImGui_ImplDX11_Data@@@Z
_TEXT	SEGMENT
p$ = 224
??$IM_DELETE@UImGui_ImplDX11_Data@@@@YAXPEAUImGui_ImplDX11_Data@@@Z PROC ; IM_DELETE<ImGui_ImplDX11_Data>, COMDAT

; 1745 : template<typename T> void IM_DELETE(T* p)   { if (p) { p->~T(); ImGui::MemFree(p); } }

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 83 bd e0 00
	00 00 00	 cmp	 QWORD PTR p$[rbp], 0
  00032	74 0c		 je	 SHORT $LN2@IM_DELETE
  00034	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  0003b	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPEAX@Z ; ImGui::MemFree
$LN2@IM_DELETE:
  00040	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00047	5f		 pop	 rdi
  00048	5d		 pop	 rbp
  00049	c3		 ret	 0
??$IM_DELETE@UImGui_ImplDX11_Data@@@@YAXPEAUImGui_ImplDX11_Data@@@Z ENDP ; IM_DELETE<ImGui_ImplDX11_Data>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\combaseapi.h
;	COMDAT ??$IID_PPV_ARGS_Helper@UIDXGIFactory@@@@YAPEAPEAXPEAPEAUIDXGIFactory@@@Z
_TEXT	SEGMENT
pp$ = 224
??$IID_PPV_ARGS_Helper@UIDXGIFactory@@@@YAPEAPEAXPEAPEAUIDXGIFactory@@@Z PROC ; IID_PPV_ARGS_Helper<IDXGIFactory>, COMDAT

; 227  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 228  : #pragma prefast(suppress: 6269, "Tool issue with unused static_cast")
; 229  :         static_cast<IUnknown*>(*pp);    // make sure everyone derives from IUnknown
; 230  :         return reinterpret_cast<void**>(pp);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR pp$[rbp]

; 231  :     }    

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$IID_PPV_ARGS_Helper@UIDXGIFactory@@@@YAPEAPEAXPEAPEAUIDXGIFactory@@@Z ENDP ; IID_PPV_ARGS_Helper<IDXGIFactory>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\combaseapi.h
;	COMDAT ??$IID_PPV_ARGS_Helper@UIDXGIAdapter@@@@YAPEAPEAXPEAPEAUIDXGIAdapter@@@Z
_TEXT	SEGMENT
pp$ = 224
??$IID_PPV_ARGS_Helper@UIDXGIAdapter@@@@YAPEAPEAXPEAPEAUIDXGIAdapter@@@Z PROC ; IID_PPV_ARGS_Helper<IDXGIAdapter>, COMDAT

; 227  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 228  : #pragma prefast(suppress: 6269, "Tool issue with unused static_cast")
; 229  :         static_cast<IUnknown*>(*pp);    // make sure everyone derives from IUnknown
; 230  :         return reinterpret_cast<void**>(pp);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR pp$[rbp]

; 231  :     }    

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$IID_PPV_ARGS_Helper@UIDXGIAdapter@@@@YAPEAPEAXPEAPEAUIDXGIAdapter@@@Z ENDP ; IID_PPV_ARGS_Helper<IDXGIAdapter>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\um\combaseapi.h
;	COMDAT ??$IID_PPV_ARGS_Helper@UIDXGIDevice@@@@YAPEAPEAXPEAPEAUIDXGIDevice@@@Z
_TEXT	SEGMENT
pp$ = 224
??$IID_PPV_ARGS_Helper@UIDXGIDevice@@@@YAPEAPEAXPEAPEAUIDXGIDevice@@@Z PROC ; IID_PPV_ARGS_Helper<IDXGIDevice>, COMDAT

; 227  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 228  : #pragma prefast(suppress: 6269, "Tool issue with unused static_cast")
; 229  :         static_cast<IUnknown*>(*pp);    // make sure everyone derives from IUnknown
; 230  :         return reinterpret_cast<void**>(pp);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR pp$[rbp]

; 231  :     }    

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$IID_PPV_ARGS_Helper@UIDXGIDevice@@@@YAPEAPEAXPEAPEAUIDXGIDevice@@@Z ENDP ; IID_PPV_ARGS_Helper<IDXGIDevice>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\tool\imgui\imgui_impl_dx11.cpp
;	COMDAT ?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ
_TEXT	SEGMENT
io$ = 8
bd$ = 40
pixels$ = 72
width$ = 100
height$ = 132
desc$11 = 168
pTexture$12 = 248
subResource$13 = 280
srvDesc$14 = 328
desc$15 = 376
tv192 = 632
tv163 = 632
tv200 = 640
tv195 = 640
__$ArrayPad$ = 648
?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ PROC		; ImGui_ImplDX11_CreateFontsTexture, COMDAT

; 308  : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec c8 02
	00 00		 sub	 rsp, 712		; 000002c8H
  0000a	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 b2 00 00 00	 mov	 ecx, 178		; 000000b2H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00025	48 33 c5	 xor	 rax, rbp
  00028	48 89 85 88 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 309  :     // Build texture atlas
; 310  :     ImGuiIO& io = ImGui::GetIO();

  0002f	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  00034	48 89 45 08	 mov	 QWORD PTR io$[rbp], rax

; 311  :     ImGui_ImplDX11_Data* bd = ImGui_ImplDX11_GetBackendData();

  00038	e8 00 00 00 00	 call	 ?ImGui_ImplDX11_GetBackendData@@YAPEAUImGui_ImplDX11_Data@@XZ ; ImGui_ImplDX11_GetBackendData
  0003d	48 89 45 28	 mov	 QWORD PTR bd$[rbp], rax

; 312  :     unsigned char* pixels;
; 313  :     int width, height;
; 314  :     io.Fonts->GetTexDataAsRGBA32(&pixels, &width, &height);

  00041	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0004a	4c 8d 8d 84 00
	00 00		 lea	 r9, QWORD PTR height$[rbp]
  00051	4c 8d 45 64	 lea	 r8, QWORD PTR width$[rbp]
  00055	48 8d 55 48	 lea	 rdx, QWORD PTR pixels$[rbp]
  00059	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  0005d	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  00061	e8 00 00 00 00	 call	 ?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z ; ImFontAtlas::GetTexDataAsRGBA32

; 315  : 
; 316  :     // Upload texture to graphics system
; 317  :     {
; 318  :         D3D11_TEXTURE2D_DESC desc;
; 319  :         ZeroMemory(&desc, sizeof(desc));

  00066	41 b8 2c 00 00
	00		 mov	 r8d, 44			; 0000002cH
  0006c	33 d2		 xor	 edx, edx
  0006e	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR desc$11[rbp]
  00075	e8 00 00 00 00	 call	 memset

; 320  :         desc.Width = width;

  0007a	8b 45 64	 mov	 eax, DWORD PTR width$[rbp]
  0007d	89 85 a8 00 00
	00		 mov	 DWORD PTR desc$11[rbp], eax

; 321  :         desc.Height = height;

  00083	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR height$[rbp]
  00089	89 85 ac 00 00
	00		 mov	 DWORD PTR desc$11[rbp+4], eax

; 322  :         desc.MipLevels = 1;

  0008f	c7 85 b0 00 00
	00 01 00 00 00	 mov	 DWORD PTR desc$11[rbp+8], 1

; 323  :         desc.ArraySize = 1;

  00099	c7 85 b4 00 00
	00 01 00 00 00	 mov	 DWORD PTR desc$11[rbp+12], 1

; 324  :         desc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;

  000a3	c7 85 b8 00 00
	00 1c 00 00 00	 mov	 DWORD PTR desc$11[rbp+16], 28

; 325  :         desc.SampleDesc.Count = 1;

  000ad	c7 85 bc 00 00
	00 01 00 00 00	 mov	 DWORD PTR desc$11[rbp+20], 1

; 326  :         desc.Usage = D3D11_USAGE_DEFAULT;

  000b7	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR desc$11[rbp+28], 0

; 327  :         desc.BindFlags = D3D11_BIND_SHADER_RESOURCE;

  000c1	c7 85 c8 00 00
	00 08 00 00 00	 mov	 DWORD PTR desc$11[rbp+32], 8

; 328  :         desc.CPUAccessFlags = 0;

  000cb	c7 85 cc 00 00
	00 00 00 00 00	 mov	 DWORD PTR desc$11[rbp+36], 0

; 329  : 
; 330  :         ID3D11Texture2D* pTexture = nullptr;

  000d5	48 c7 85 f8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR pTexture$12[rbp], 0

; 331  :         D3D11_SUBRESOURCE_DATA subResource;
; 332  :         subResource.pSysMem = pixels;

  000e0	48 8b 45 48	 mov	 rax, QWORD PTR pixels$[rbp]
  000e4	48 89 85 18 01
	00 00		 mov	 QWORD PTR subResource$13[rbp], rax

; 333  :         subResource.SysMemPitch = desc.Width * 4;

  000eb	8b 85 a8 00 00
	00		 mov	 eax, DWORD PTR desc$11[rbp]
  000f1	c1 e0 02	 shl	 eax, 2
  000f4	89 85 20 01 00
	00		 mov	 DWORD PTR subResource$13[rbp+8], eax

; 334  :         subResource.SysMemSlicePitch = 0;

  000fa	c7 85 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR subResource$13[rbp+12], 0

; 335  :         bd->pd3dDevice->CreateTexture2D(&desc, &subResource, &pTexture);

  00104	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  00108	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0010b	48 8b 4d 28	 mov	 rcx, QWORD PTR bd$[rbp]
  0010f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00112	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00115	4c 8d 8d f8 00
	00 00		 lea	 r9, QWORD PTR pTexture$12[rbp]
  0011c	4c 8d 85 18 01
	00 00		 lea	 r8, QWORD PTR subResource$13[rbp]
  00123	48 8d 95 a8 00
	00 00		 lea	 rdx, QWORD PTR desc$11[rbp]
  0012a	ff 50 28	 call	 QWORD PTR [rax+40]

; 336  :         IM_ASSERT(pTexture != nullptr);

  0012d	48 83 bd f8 00
	00 00 00	 cmp	 QWORD PTR pTexture$12[rbp], 0
  00135	75 22		 jne	 SHORT $LN3@ImGui_Impl
  00137	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImGui_ImplDX11_CreateFontsTexture@@YAXXZ@4JA
  0013d	83 c0 1c	 add	 eax, 28
  00140	44 8b c0	 mov	 r8d, eax
  00143	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1JC@KDJDKOBM@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAa?$AAr?$AAc?$AAc?$AAo?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2@
  0014a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@NOEPHNFN@?$AAp?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@
  00151	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00157	33 c0		 xor	 eax, eax
$LN3@ImGui_Impl:

; 337  : 
; 338  :         // Create texture view
; 339  :         D3D11_SHADER_RESOURCE_VIEW_DESC srvDesc;
; 340  :         ZeroMemory(&srvDesc, sizeof(srvDesc));

  00159	41 b8 18 00 00
	00		 mov	 r8d, 24
  0015f	33 d2		 xor	 edx, edx
  00161	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR srvDesc$14[rbp]
  00168	e8 00 00 00 00	 call	 memset

; 341  :         srvDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;

  0016d	c7 85 48 01 00
	00 1c 00 00 00	 mov	 DWORD PTR srvDesc$14[rbp], 28

; 342  :         srvDesc.ViewDimension = D3D11_SRV_DIMENSION_TEXTURE2D;

  00177	c7 85 4c 01 00
	00 04 00 00 00	 mov	 DWORD PTR srvDesc$14[rbp+4], 4

; 343  :         srvDesc.Texture2D.MipLevels = desc.MipLevels;

  00181	8b 85 b0 00 00
	00		 mov	 eax, DWORD PTR desc$11[rbp+8]
  00187	89 85 54 01 00
	00		 mov	 DWORD PTR srvDesc$14[rbp+12], eax

; 344  :         srvDesc.Texture2D.MostDetailedMip = 0;

  0018d	c7 85 50 01 00
	00 00 00 00 00	 mov	 DWORD PTR srvDesc$14[rbp+8], 0

; 345  :         bd->pd3dDevice->CreateShaderResourceView(pTexture, &srvDesc, &bd->pFontTextureView);

  00197	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  0019b	48 83 c0 50	 add	 rax, 80			; 00000050H
  0019f	48 8b 4d 28	 mov	 rcx, QWORD PTR bd$[rbp]
  001a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001a6	48 8b 55 28	 mov	 rdx, QWORD PTR bd$[rbp]
  001aa	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  001ad	48 89 95 78 02
	00 00		 mov	 QWORD PTR tv163[rbp], rdx
  001b4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001b7	48 89 8d 80 02
	00 00		 mov	 QWORD PTR tv200[rbp], rcx
  001be	4c 8b c8	 mov	 r9, rax
  001c1	4c 8d 85 48 01
	00 00		 lea	 r8, QWORD PTR srvDesc$14[rbp]
  001c8	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR pTexture$12[rbp]
  001cf	48 8b 85 78 02
	00 00		 mov	 rax, QWORD PTR tv163[rbp]
  001d6	48 8b c8	 mov	 rcx, rax
  001d9	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR tv200[rbp]
  001e0	ff 50 38	 call	 QWORD PTR [rax+56]

; 346  :         pTexture->Release();

  001e3	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR pTexture$12[rbp]
  001ea	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ed	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR pTexture$12[rbp]
  001f4	ff 50 10	 call	 QWORD PTR [rax+16]

; 347  :     }
; 348  : 
; 349  :     // Store our identifier
; 350  :     io.Fonts->SetTexID((ImTextureID)bd->pFontTextureView);

  001f7	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  001fb	48 8b 50 50	 mov	 rdx, QWORD PTR [rax+80]
  001ff	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  00203	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  00207	e8 00 00 00 00	 call	 ?SetTexID@ImFontAtlas@@QEAAXPEAX@Z ; ImFontAtlas::SetTexID

; 351  : 
; 352  :     // Create texture sampler
; 353  :     // (Bilinear sampling is required by default. Set 'io.Fonts->Flags |= ImFontAtlasFlags_NoBakedLines' or 'style.AntiAliasedLinesUseTex = false' to allow point/nearest sampling)
; 354  :     {
; 355  :         D3D11_SAMPLER_DESC desc;
; 356  :         ZeroMemory(&desc, sizeof(desc));

  0020c	41 b8 34 00 00
	00		 mov	 r8d, 52			; 00000034H
  00212	33 d2		 xor	 edx, edx
  00214	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR desc$15[rbp]
  0021b	e8 00 00 00 00	 call	 memset

; 357  :         desc.Filter = D3D11_FILTER_MIN_MAG_MIP_LINEAR;

  00220	c7 85 78 01 00
	00 15 00 00 00	 mov	 DWORD PTR desc$15[rbp], 21

; 358  :         desc.AddressU = D3D11_TEXTURE_ADDRESS_WRAP;

  0022a	c7 85 7c 01 00
	00 01 00 00 00	 mov	 DWORD PTR desc$15[rbp+4], 1

; 359  :         desc.AddressV = D3D11_TEXTURE_ADDRESS_WRAP;

  00234	c7 85 80 01 00
	00 01 00 00 00	 mov	 DWORD PTR desc$15[rbp+8], 1

; 360  :         desc.AddressW = D3D11_TEXTURE_ADDRESS_WRAP;

  0023e	c7 85 84 01 00
	00 01 00 00 00	 mov	 DWORD PTR desc$15[rbp+12], 1

; 361  :         desc.MipLODBias = 0.f;

  00248	0f 57 c0	 xorps	 xmm0, xmm0
  0024b	f3 0f 11 85 88
	01 00 00	 movss	 DWORD PTR desc$15[rbp+16], xmm0

; 362  :         desc.ComparisonFunc = D3D11_COMPARISON_ALWAYS;

  00253	c7 85 90 01 00
	00 08 00 00 00	 mov	 DWORD PTR desc$15[rbp+24], 8

; 363  :         desc.MinLOD = 0.f;

  0025d	0f 57 c0	 xorps	 xmm0, xmm0
  00260	f3 0f 11 85 a4
	01 00 00	 movss	 DWORD PTR desc$15[rbp+44], xmm0

; 364  :         desc.MaxLOD = 0.f;

  00268	0f 57 c0	 xorps	 xmm0, xmm0
  0026b	f3 0f 11 85 a8
	01 00 00	 movss	 DWORD PTR desc$15[rbp+48], xmm0

; 365  :         bd->pd3dDevice->CreateSamplerState(&desc, &bd->pFontSampler);

  00273	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  00277	48 83 c0 48	 add	 rax, 72			; 00000048H
  0027b	48 8b 4d 28	 mov	 rcx, QWORD PTR bd$[rbp]
  0027f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00282	48 8b 55 28	 mov	 rdx, QWORD PTR bd$[rbp]
  00286	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00289	48 89 95 78 02
	00 00		 mov	 QWORD PTR tv192[rbp], rdx
  00290	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00293	48 89 8d 80 02
	00 00		 mov	 QWORD PTR tv195[rbp], rcx
  0029a	4c 8b c0	 mov	 r8, rax
  0029d	48 8d 95 78 01
	00 00		 lea	 rdx, QWORD PTR desc$15[rbp]
  002a4	48 8b 85 78 02
	00 00		 mov	 rax, QWORD PTR tv192[rbp]
  002ab	48 8b c8	 mov	 rcx, rax
  002ae	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR tv195[rbp]
  002b5	ff 90 b8 00 00
	00		 call	 QWORD PTR [rax+184]

; 366  :     }
; 367  : }

  002bb	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  002bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ$rtcFrameData
  002c6	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002cb	48 8b 8d 88 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  002d2	48 33 cd	 xor	 rcx, rbp
  002d5	e8 00 00 00 00	 call	 __security_check_cookie
  002da	48 8d a5 98 02
	00 00		 lea	 rsp, QWORD PTR [rbp+664]
  002e1	5f		 pop	 rdi
  002e2	5d		 pop	 rbp
  002e3	c3		 ret	 0
?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ ENDP		; ImGui_ImplDX11_CreateFontsTexture
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\tool\imgui\imgui_impl_dx11.cpp
;	COMDAT ?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z
_TEXT	SEGMENT
bd$ = 8
vp$ = 40
stride$ = 84
offset$ = 116
blend_factor$ = 152
tv217 = 376
tv213 = 376
tv211 = 376
__$ArrayPad$ = 384
draw_data$ = 432
ctx$ = 440
?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z PROC ; ImGui_ImplDX11_SetupRenderState, COMDAT

; 81   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  00013	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+488]
  0002f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00036	48 33 c5	 xor	 rax, rbp
  00039	48 89 85 80 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 82   :     ImGui_ImplDX11_Data* bd = ImGui_ImplDX11_GetBackendData();

  00040	e8 00 00 00 00	 call	 ?ImGui_ImplDX11_GetBackendData@@YAPEAUImGui_ImplDX11_Data@@XZ ; ImGui_ImplDX11_GetBackendData
  00045	48 89 45 08	 mov	 QWORD PTR bd$[rbp], rax

; 83   : 
; 84   :     // Setup viewport
; 85   :     D3D11_VIEWPORT vp;
; 86   :     memset(&vp, 0, sizeof(D3D11_VIEWPORT));

  00049	41 b8 18 00 00
	00		 mov	 r8d, 24
  0004f	33 d2		 xor	 edx, edx
  00051	48 8d 4d 28	 lea	 rcx, QWORD PTR vp$[rbp]
  00055	e8 00 00 00 00	 call	 memset

; 87   :     vp.Width = draw_data->DisplaySize.x;

  0005a	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR draw_data$[rbp]
  00061	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [rax+32]
  00066	f3 0f 11 45 30	 movss	 DWORD PTR vp$[rbp+8], xmm0

; 88   :     vp.Height = draw_data->DisplaySize.y;

  0006b	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR draw_data$[rbp]
  00072	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [rax+36]
  00077	f3 0f 11 45 34	 movss	 DWORD PTR vp$[rbp+12], xmm0

; 89   :     vp.MinDepth = 0.0f;

  0007c	0f 57 c0	 xorps	 xmm0, xmm0
  0007f	f3 0f 11 45 38	 movss	 DWORD PTR vp$[rbp+16], xmm0

; 90   :     vp.MaxDepth = 1.0f;

  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0008c	f3 0f 11 45 3c	 movss	 DWORD PTR vp$[rbp+20], xmm0

; 91   :     vp.TopLeftX = vp.TopLeftY = 0;

  00091	0f 57 c0	 xorps	 xmm0, xmm0
  00094	f3 0f 11 45 2c	 movss	 DWORD PTR vp$[rbp+4], xmm0
  00099	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR vp$[rbp+4]
  0009e	f3 0f 11 45 28	 movss	 DWORD PTR vp$[rbp], xmm0

; 92   :     ctx->RSSetViewports(1, &vp);

  000a3	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  000aa	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ad	4c 8d 45 28	 lea	 r8, QWORD PTR vp$[rbp]
  000b1	ba 01 00 00 00	 mov	 edx, 1
  000b6	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  000bd	ff 90 60 01 00
	00		 call	 QWORD PTR [rax+352]

; 93   : 
; 94   :     // Setup shader and vertex buffers
; 95   :     unsigned int stride = sizeof(ImDrawVert);

  000c3	c7 45 54 14 00
	00 00		 mov	 DWORD PTR stride$[rbp], 20

; 96   :     unsigned int offset = 0;

  000ca	c7 45 74 00 00
	00 00		 mov	 DWORD PTR offset$[rbp], 0

; 97   :     ctx->IASetInputLayout(bd->pInputLayout);

  000d1	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  000d8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000db	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  000df	48 8b 51 30	 mov	 rdx, QWORD PTR [rcx+48]
  000e3	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  000ea	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 98   :     ctx->IASetVertexBuffers(0, 1, &bd->pVB, &stride, &offset);

  000f0	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  000f4	48 83 c0 18	 add	 rax, 24
  000f8	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  000ff	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00102	48 89 8d 78 01
	00 00		 mov	 QWORD PTR tv217[rbp], rcx
  00109	48 8d 55 74	 lea	 rdx, QWORD PTR offset$[rbp]
  0010d	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  00112	48 8d 55 54	 lea	 rdx, QWORD PTR stride$[rbp]
  00116	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0011b	4c 8b c8	 mov	 r9, rax
  0011e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00124	33 d2		 xor	 edx, edx
  00126	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  0012d	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR tv217[rbp]
  00134	ff 90 90 00 00
	00		 call	 QWORD PTR [rax+144]

; 99   :     ctx->IASetIndexBuffer(bd->pIB, sizeof(ImDrawIdx) == 2 ? DXGI_FORMAT_R16_UINT : DXGI_FORMAT_R32_UINT, 0);

  0013a	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  00141	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00144	45 33 c9	 xor	 r9d, r9d
  00147	41 b8 39 00 00
	00		 mov	 r8d, 57			; 00000039H
  0014d	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  00151	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  00155	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  0015c	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]

; 100  :     ctx->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);

  00162	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  00169	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0016c	ba 04 00 00 00	 mov	 edx, 4
  00171	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  00178	ff 90 c0 00 00
	00		 call	 QWORD PTR [rax+192]

; 101  :     ctx->VSSetShader(bd->pVertexShader, nullptr, 0);

  0017e	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  00185	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00188	45 33 c9	 xor	 r9d, r9d
  0018b	45 33 c0	 xor	 r8d, r8d
  0018e	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  00192	48 8b 51 28	 mov	 rdx, QWORD PTR [rcx+40]
  00196	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  0019d	ff 50 58	 call	 QWORD PTR [rax+88]

; 102  :     ctx->VSSetConstantBuffers(0, 1, &bd->pVertexConstantBuffer);

  001a0	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  001a4	48 83 c0 38	 add	 rax, 56			; 00000038H
  001a8	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  001af	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001b2	48 89 8d 78 01
	00 00		 mov	 QWORD PTR tv213[rbp], rcx
  001b9	4c 8b c8	 mov	 r9, rax
  001bc	41 b8 01 00 00
	00		 mov	 r8d, 1
  001c2	33 d2		 xor	 edx, edx
  001c4	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  001cb	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR tv213[rbp]
  001d2	ff 50 38	 call	 QWORD PTR [rax+56]

; 103  :     ctx->PSSetShader(bd->pPixelShader, nullptr, 0);

  001d5	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  001dc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001df	45 33 c9	 xor	 r9d, r9d
  001e2	45 33 c0	 xor	 r8d, r8d
  001e5	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  001e9	48 8b 51 40	 mov	 rdx, QWORD PTR [rcx+64]
  001ed	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  001f4	ff 50 48	 call	 QWORD PTR [rax+72]

; 104  :     ctx->PSSetSamplers(0, 1, &bd->pFontSampler);

  001f7	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  001fb	48 83 c0 48	 add	 rax, 72			; 00000048H
  001ff	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  00206	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00209	48 89 8d 78 01
	00 00		 mov	 QWORD PTR tv211[rbp], rcx
  00210	4c 8b c8	 mov	 r9, rax
  00213	41 b8 01 00 00
	00		 mov	 r8d, 1
  00219	33 d2		 xor	 edx, edx
  0021b	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  00222	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR tv211[rbp]
  00229	ff 50 50	 call	 QWORD PTR [rax+80]

; 105  :     ctx->GSSetShader(nullptr, nullptr, 0);

  0022c	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  00233	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00236	45 33 c9	 xor	 r9d, r9d
  00239	45 33 c0	 xor	 r8d, r8d
  0023c	33 d2		 xor	 edx, edx
  0023e	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  00245	ff 90 b8 00 00
	00		 call	 QWORD PTR [rax+184]

; 106  :     ctx->HSSetShader(nullptr, nullptr, 0); // In theory we should backup and restore this as well.. very infrequently used..

  0024b	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  00252	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00255	45 33 c9	 xor	 r9d, r9d
  00258	45 33 c0	 xor	 r8d, r8d
  0025b	33 d2		 xor	 edx, edx
  0025d	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  00264	ff 90 e0 01 00
	00		 call	 QWORD PTR [rax+480]

; 107  :     ctx->DSSetShader(nullptr, nullptr, 0); // In theory we should backup and restore this as well.. very infrequently used..

  0026a	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  00271	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00274	45 33 c9	 xor	 r9d, r9d
  00277	45 33 c0	 xor	 r8d, r8d
  0027a	33 d2		 xor	 edx, edx
  0027c	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  00283	ff 90 00 02 00
	00		 call	 QWORD PTR [rax+512]

; 108  :     ctx->CSSetShader(nullptr, nullptr, 0); // In theory we should backup and restore this as well.. very infrequently used..

  00289	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  00290	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00293	45 33 c9	 xor	 r9d, r9d
  00296	45 33 c0	 xor	 r8d, r8d
  00299	33 d2		 xor	 edx, edx
  0029b	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  002a2	ff 90 28 02 00
	00		 call	 QWORD PTR [rax+552]

; 109  : 
; 110  :     // Setup blend state
; 111  :     const float blend_factor[4] = { 0.f, 0.f, 0.f, 0.f };

  002a8	0f 57 c0	 xorps	 xmm0, xmm0
  002ab	f3 0f 11 85 98
	00 00 00	 movss	 DWORD PTR blend_factor$[rbp], xmm0
  002b3	0f 57 c0	 xorps	 xmm0, xmm0
  002b6	f3 0f 11 85 9c
	00 00 00	 movss	 DWORD PTR blend_factor$[rbp+4], xmm0
  002be	0f 57 c0	 xorps	 xmm0, xmm0
  002c1	f3 0f 11 85 a0
	00 00 00	 movss	 DWORD PTR blend_factor$[rbp+8], xmm0
  002c9	0f 57 c0	 xorps	 xmm0, xmm0
  002cc	f3 0f 11 85 a4
	00 00 00	 movss	 DWORD PTR blend_factor$[rbp+12], xmm0

; 112  :     ctx->OMSetBlendState(bd->pBlendState, blend_factor, 0xffffffff);

  002d4	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  002db	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002de	41 b9 ff ff ff
	ff		 mov	 r9d, -1			; ffffffffH
  002e4	4c 8d 85 98 00
	00 00		 lea	 r8, QWORD PTR blend_factor$[rbp]
  002eb	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  002ef	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  002f3	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  002fa	ff 90 18 01 00
	00		 call	 QWORD PTR [rax+280]

; 113  :     ctx->OMSetDepthStencilState(bd->pDepthStencilState, 0);

  00300	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  00307	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0030a	45 33 c0	 xor	 r8d, r8d
  0030d	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  00311	48 8b 51 68	 mov	 rdx, QWORD PTR [rcx+104]
  00315	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  0031c	ff 90 20 01 00
	00		 call	 QWORD PTR [rax+288]

; 114  :     ctx->RSSetState(bd->pRasterizerState);

  00322	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR ctx$[rbp]
  00329	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0032c	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  00330	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00334	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR ctx$[rbp]
  0033b	ff 90 58 01 00
	00		 call	 QWORD PTR [rax+344]

; 115  : }

  00341	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00345	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z$rtcFrameData
  0034c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00351	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00358	48 33 cd	 xor	 rcx, rbp
  0035b	e8 00 00 00 00	 call	 __security_check_cookie
  00360	48 8d a5 98 01
	00 00		 lea	 rsp, QWORD PTR [rbp+408]
  00367	5f		 pop	 rdi
  00368	5d		 pop	 rbp
  00369	c3		 ret	 0
?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z ENDP ; ImGui_ImplDX11_SetupRenderState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\tool\imgui\imgui_impl_dx11.cpp
;	COMDAT ?ImGui_ImplDX11_GetBackendData@@YAPEAUImGui_ImplDX11_Data@@XZ
_TEXT	SEGMENT
tv68 = 192
?ImGui_ImplDX11_GetBackendData@@YAPEAUImGui_ImplDX11_Data@@XZ PROC ; ImGui_ImplDX11_GetBackendData, COMDAT

; 75   : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 76   :     return ImGui::GetCurrentContext() ? (ImGui_ImplDX11_Data*)ImGui::GetIO().BackendRendererUserData : nullptr;

  0001e	e8 00 00 00 00	 call	 ?GetCurrentContext@ImGui@@YAPEAUImGuiContext@@XZ ; ImGui::GetCurrentContext
  00023	48 85 c0	 test	 rax, rax
  00026	74 15		 je	 SHORT $LN3@ImGui_Impl
  00028	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  0002d	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00034	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv68[rbp], rax
  0003b	eb 0b		 jmp	 SHORT $LN4@ImGui_Impl
$LN3@ImGui_Impl:
  0003d	48 c7 85 c0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv68[rbp], 0
$LN4@ImGui_Impl:
  00048	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv68[rbp]

; 77   : }

  0004f	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00056	5f		 pop	 rdi
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
?ImGui_ImplDX11_GetBackendData@@YAPEAUImGui_ImplDX11_Data@@XZ ENDP ; ImGui_ImplDX11_GetBackendData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\tool\imgui\imgui_impl_dx11.cpp
;	COMDAT ??0ImGui_ImplDX11_Data@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGui_ImplDX11_Data@@QEAA@XZ PROC			; ImGui_ImplDX11_Data::ImGui_ImplDX11_Data, COMDAT

; 64   :     ImGui_ImplDX11_Data()       { memset((void*)this, 0, sizeof(*this)); VertexBufferSize = 5000; IndexBufferSize = 10000; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	41 b8 78 00 00
	00		 mov	 r8d, 120		; 00000078H
  00030	33 d2		 xor	 edx, edx
  00032	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00039	e8 00 00 00 00	 call	 memset
  0003e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00045	c7 40 70 88 13
	00 00		 mov	 DWORD PTR [rax+112], 5000 ; 00001388H
  0004c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	c7 40 74 10 27
	00 00		 mov	 DWORD PTR [rax+116], 10000 ; 00002710H
  0005a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00061	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00068	5f		 pop	 rdi
  00069	5d		 pop	 rbp
  0006a	c3		 ret	 0
??0ImGui_ImplDX11_Data@@QEAA@XZ ENDP			; ImGui_ImplDX11_Data::ImGui_ImplDX11_Data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\tool\imgui\imgui_impl_dx11.cpp
;	COMDAT ?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ
_TEXT	SEGMENT
bd$ = 8
vertexShaderBlob$10 = 40
local_layout$11 = 80
desc$12 = 200
pixelShaderBlob$13 = 248
desc$14 = 288
desc$15 = 584
desc$16 = 648
tv365 = 1096
tv352 = 1096
tv307 = 1096
tv248 = 1096
tv218 = 1096
tv153 = 1096
tv92 = 1096
tv388 = 1104
tv384 = 1104
tv379 = 1104
tv378 = 1104
tv373 = 1104
tv372 = 1104
tv368 = 1104
tv254 = 1112
tv158 = 1112
tv130 = 1112
tv387 = 1120
tv383 = 1120
tv377 = 1120
tv244 = 1128
tv149 = 1128
tv88 = 1128
tv386 = 1136
tv382 = 1136
tv376 = 1136
__$ArrayPad$ = 1144
?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ PROC	; ImGui_ImplDX11_CreateDeviceObjects, COMDAT

; 370  : {

$LN10:
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 81 ec e0 04
	00 00		 sub	 rsp, 1248		; 000004e0H
  0000b	48 8d 6c 24 60	 lea	 rbp, QWORD PTR [rsp+96]
  00010	48 8b fc	 mov	 rdi, rsp
  00013	b9 38 01 00 00	 mov	 ecx, 312		; 00000138H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00026	48 33 c5	 xor	 rax, rbp
  00029	48 89 85 78 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 371  :     ImGui_ImplDX11_Data* bd = ImGui_ImplDX11_GetBackendData();

  00030	e8 00 00 00 00	 call	 ?ImGui_ImplDX11_GetBackendData@@YAPEAUImGui_ImplDX11_Data@@XZ ; ImGui_ImplDX11_GetBackendData
  00035	48 89 45 08	 mov	 QWORD PTR bd$[rbp], rax

; 372  :     if (!bd->pd3dDevice)

  00039	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  0003d	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00041	75 07		 jne	 SHORT $LN2@ImGui_Impl

; 373  :         return false;

  00043	32 c0		 xor	 al, al
  00045	e9 dd 06 00 00	 jmp	 $LN1@ImGui_Impl
$LN2@ImGui_Impl:

; 374  :     if (bd->pFontSampler)

  0004a	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  0004e	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00053	74 05		 je	 SHORT $LN3@ImGui_Impl

; 375  :         ImGui_ImplDX11_InvalidateDeviceObjects();

  00055	e8 00 00 00 00	 call	 ?ImGui_ImplDX11_InvalidateDeviceObjects@@YAXXZ ; ImGui_ImplDX11_InvalidateDeviceObjects
$LN3@ImGui_Impl:

; 376  : 
; 377  :     // By using D3DCompile() from <d3dcompiler.h> / d3dcompiler.lib, we introduce a dependency to a given version of d3dcompiler_XX.dll (see D3DCOMPILER_DLL_A)
; 378  :     // If you would like to use this DX11 sample code but remove this dependency you can:
; 379  :     //  1) compile once, save the compiled shader blobs into a file or source code and pass them to CreateVertexShader()/CreatePixelShader() [preferred solution]
; 380  :     //  2) use code to detect any version of the DLL and grab a pointer to D3DCompile from the DLL.
; 381  :     // See https://github.com/ocornut/imgui/pull/638 for sources and details.
; 382  : 
; 383  :     // Create the vertex shader
; 384  :     {
; 385  :         static const char* vertexShader =
; 386  :             "cbuffer vertexBuffer : register(b0) \
; 387  :             {\
; 388  :               float4x4 ProjectionMatrix; \
; 389  :             };\
; 390  :             struct VS_INPUT\
; 391  :             {\
; 392  :               float2 pos : POSITION;\
; 393  :               float4 col : COLOR0;\
; 394  :               float2 uv  : TEXCOORD0;\
; 395  :             };\
; 396  :             \
; 397  :             struct PS_INPUT\
; 398  :             {\
; 399  :               float4 pos : SV_POSITION;\
; 400  :               float4 col : COLOR0;\
; 401  :               float2 uv  : TEXCOORD0;\
; 402  :             };\
; 403  :             \
; 404  :             PS_INPUT main(VS_INPUT input)\
; 405  :             {\
; 406  :               PS_INPUT output;\
; 407  :               output.pos = mul( ProjectionMatrix, float4(input.pos.xy, 0.f, 1.f));\
; 408  :               output.col = input.col;\
; 409  :               output.uv  = input.uv;\
; 410  :               return output;\
; 411  :             }";
; 412  : 
; 413  :         ID3DBlob* vertexShaderBlob;
; 414  :         if (FAILED(D3DCompile(vertexShader, strlen(vertexShader), nullptr, nullptr, nullptr, "main", "vs_4_0", 0, 0, &vertexShaderBlob, nullptr)))

  0005a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?vertexShader@?6??ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ@4PEBDEB
  00061	e8 00 00 00 00	 call	 strlen
  00066	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR [rsp+80], 0
  0006f	48 8d 4d 28	 lea	 rcx, QWORD PTR vertexShaderBlob$10[rbp]
  00073	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00078	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR [rsp+64], 0
  00080	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06BNDBNCGN@vs_4_0?$AA@
  0008f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHJNJNPO@main?$AA@
  0009b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000a0	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000a9	45 33 c9	 xor	 r9d, r9d
  000ac	45 33 c0	 xor	 r8d, r8d
  000af	48 8b d0	 mov	 rdx, rax
  000b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?vertexShader@?6??ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ@4PEBDEB
  000b9	e8 00 00 00 00	 call	 D3DCompile
  000be	85 c0		 test	 eax, eax
  000c0	7d 07		 jge	 SHORT $LN4@ImGui_Impl

; 415  :             return false; // NB: Pass ID3DBlob* pErrorBlob to D3DCompile() to get error showing in (const char*)pErrorBlob->GetBufferPointer(). Make sure to Release() the blob!

  000c2	32 c0		 xor	 al, al
  000c4	e9 5e 06 00 00	 jmp	 $LN1@ImGui_Impl
$LN4@ImGui_Impl:

; 416  :         if (bd->pd3dDevice->CreateVertexShader(vertexShaderBlob->GetBufferPointer(), vertexShaderBlob->GetBufferSize(), nullptr, &bd->pVertexShader) != S_OK)

  000c9	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  000cd	48 83 c0 28	 add	 rax, 40			; 00000028H
  000d1	48 89 85 48 04
	00 00		 mov	 QWORD PTR tv92[rbp], rax
  000d8	48 8b 4d 28	 mov	 rcx, QWORD PTR vertexShaderBlob$10[rbp]
  000dc	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000df	48 89 8d 50 04
	00 00		 mov	 QWORD PTR tv388[rbp], rcx
  000e6	48 8b 4d 28	 mov	 rcx, QWORD PTR vertexShaderBlob$10[rbp]
  000ea	48 8b 95 50 04
	00 00		 mov	 rdx, QWORD PTR tv388[rbp]
  000f1	ff 52 20	 call	 QWORD PTR [rdx+32]
  000f4	48 89 85 58 04
	00 00		 mov	 QWORD PTR tv130[rbp], rax
  000fb	48 8b 4d 28	 mov	 rcx, QWORD PTR vertexShaderBlob$10[rbp]
  000ff	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00102	48 89 8d 60 04
	00 00		 mov	 QWORD PTR tv387[rbp], rcx
  00109	48 8b 4d 28	 mov	 rcx, QWORD PTR vertexShaderBlob$10[rbp]
  0010d	48 8b 95 60 04
	00 00		 mov	 rdx, QWORD PTR tv387[rbp]
  00114	ff 52 18	 call	 QWORD PTR [rdx+24]
  00117	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  0011b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0011e	48 8b 55 08	 mov	 rdx, QWORD PTR bd$[rbp]
  00122	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00125	48 89 95 68 04
	00 00		 mov	 QWORD PTR tv88[rbp], rdx
  0012c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0012f	48 89 8d 70 04
	00 00		 mov	 QWORD PTR tv386[rbp], rcx
  00136	4c 8b 85 48 04
	00 00		 mov	 r8, QWORD PTR tv92[rbp]
  0013d	4c 89 44 24 20	 mov	 QWORD PTR [rsp+32], r8
  00142	45 33 c9	 xor	 r9d, r9d
  00145	4c 8b 85 58 04
	00 00		 mov	 r8, QWORD PTR tv130[rbp]
  0014c	48 8b d0	 mov	 rdx, rax
  0014f	48 8b 85 68 04
	00 00		 mov	 rax, QWORD PTR tv88[rbp]
  00156	48 8b c8	 mov	 rcx, rax
  00159	48 8b 85 70 04
	00 00		 mov	 rax, QWORD PTR tv386[rbp]
  00160	ff 50 60	 call	 QWORD PTR [rax+96]
  00163	85 c0		 test	 eax, eax
  00165	74 15		 je	 SHORT $LN5@ImGui_Impl

; 417  :         {
; 418  :             vertexShaderBlob->Release();

  00167	48 8b 45 28	 mov	 rax, QWORD PTR vertexShaderBlob$10[rbp]
  0016b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0016e	48 8b 4d 28	 mov	 rcx, QWORD PTR vertexShaderBlob$10[rbp]
  00172	ff 50 10	 call	 QWORD PTR [rax+16]

; 419  :             return false;

  00175	32 c0		 xor	 al, al
  00177	e9 ab 05 00 00	 jmp	 $LN1@ImGui_Impl
$LN5@ImGui_Impl:

; 420  :         }
; 421  : 
; 422  :         // Create the input layout
; 423  :         D3D11_INPUT_ELEMENT_DESC local_layout[] =
; 424  :         {
; 425  :             { "POSITION", 0, DXGI_FORMAT_R32G32_FLOAT,   0, (UINT)IM_OFFSETOF(ImDrawVert, pos), D3D11_INPUT_PER_VERTEX_DATA, 0 },

  0017c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08JPMAAECC@POSITION?$AA@
  00183	48 89 45 50	 mov	 QWORD PTR local_layout$11[rbp], rax
  00187	c7 45 58 00 00
	00 00		 mov	 DWORD PTR local_layout$11[rbp+8], 0
  0018e	c7 45 5c 10 00
	00 00		 mov	 DWORD PTR local_layout$11[rbp+12], 16
  00195	c7 45 60 00 00
	00 00		 mov	 DWORD PTR local_layout$11[rbp+16], 0
  0019c	c7 45 64 00 00
	00 00		 mov	 DWORD PTR local_layout$11[rbp+20], 0
  001a3	c7 45 68 00 00
	00 00		 mov	 DWORD PTR local_layout$11[rbp+24], 0
  001aa	c7 45 6c 00 00
	00 00		 mov	 DWORD PTR local_layout$11[rbp+28], 0

; 426  :             { "TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT,   0, (UINT)IM_OFFSETOF(ImDrawVert, uv),  D3D11_INPUT_PER_VERTEX_DATA, 0 },

  001b1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08CMDKBPJM@TEXCOORD?$AA@
  001b8	48 89 45 70	 mov	 QWORD PTR local_layout$11[rbp+32], rax
  001bc	c7 45 78 00 00
	00 00		 mov	 DWORD PTR local_layout$11[rbp+40], 0
  001c3	c7 45 7c 10 00
	00 00		 mov	 DWORD PTR local_layout$11[rbp+44], 16
  001ca	c7 85 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR local_layout$11[rbp+48], 0
  001d4	c7 85 84 00 00
	00 08 00 00 00	 mov	 DWORD PTR local_layout$11[rbp+52], 8
  001de	c7 85 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR local_layout$11[rbp+56], 0
  001e8	c7 85 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR local_layout$11[rbp+60], 0

; 427  :             { "COLOR",    0, DXGI_FORMAT_R8G8B8A8_UNORM, 0, (UINT)IM_OFFSETOF(ImDrawVert, col), D3D11_INPUT_PER_VERTEX_DATA, 0 },

  001f2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05DPNLPLKI@COLOR?$AA@
  001f9	48 89 85 90 00
	00 00		 mov	 QWORD PTR local_layout$11[rbp+64], rax
  00200	c7 85 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR local_layout$11[rbp+72], 0
  0020a	c7 85 9c 00 00
	00 1c 00 00 00	 mov	 DWORD PTR local_layout$11[rbp+76], 28
  00214	c7 85 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR local_layout$11[rbp+80], 0
  0021e	c7 85 a4 00 00
	00 10 00 00 00	 mov	 DWORD PTR local_layout$11[rbp+84], 16
  00228	c7 85 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR local_layout$11[rbp+88], 0
  00232	c7 85 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR local_layout$11[rbp+92], 0

; 428  :         };
; 429  :         if (bd->pd3dDevice->CreateInputLayout(local_layout, 3, vertexShaderBlob->GetBufferPointer(), vertexShaderBlob->GetBufferSize(), &bd->pInputLayout) != S_OK)

  0023c	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00240	48 83 c0 30	 add	 rax, 48			; 00000030H
  00244	48 89 85 48 04
	00 00		 mov	 QWORD PTR tv153[rbp], rax
  0024b	48 8b 4d 28	 mov	 rcx, QWORD PTR vertexShaderBlob$10[rbp]
  0024f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00252	48 89 8d 50 04
	00 00		 mov	 QWORD PTR tv384[rbp], rcx
  00259	48 8b 4d 28	 mov	 rcx, QWORD PTR vertexShaderBlob$10[rbp]
  0025d	48 8b 95 50 04
	00 00		 mov	 rdx, QWORD PTR tv384[rbp]
  00264	ff 52 20	 call	 QWORD PTR [rdx+32]
  00267	48 89 85 58 04
	00 00		 mov	 QWORD PTR tv158[rbp], rax
  0026e	48 8b 4d 28	 mov	 rcx, QWORD PTR vertexShaderBlob$10[rbp]
  00272	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00275	48 89 8d 60 04
	00 00		 mov	 QWORD PTR tv383[rbp], rcx
  0027c	48 8b 4d 28	 mov	 rcx, QWORD PTR vertexShaderBlob$10[rbp]
  00280	48 8b 95 60 04
	00 00		 mov	 rdx, QWORD PTR tv383[rbp]
  00287	ff 52 18	 call	 QWORD PTR [rdx+24]
  0028a	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  0028e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00291	48 8b 55 08	 mov	 rdx, QWORD PTR bd$[rbp]
  00295	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00298	48 89 95 68 04
	00 00		 mov	 QWORD PTR tv149[rbp], rdx
  0029f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002a2	48 89 8d 70 04
	00 00		 mov	 QWORD PTR tv382[rbp], rcx
  002a9	4c 8b 85 48 04
	00 00		 mov	 r8, QWORD PTR tv153[rbp]
  002b0	4c 89 44 24 28	 mov	 QWORD PTR [rsp+40], r8
  002b5	4c 8b 85 58 04
	00 00		 mov	 r8, QWORD PTR tv158[rbp]
  002bc	4c 89 44 24 20	 mov	 QWORD PTR [rsp+32], r8
  002c1	4c 8b c8	 mov	 r9, rax
  002c4	41 b8 03 00 00
	00		 mov	 r8d, 3
  002ca	48 8d 55 50	 lea	 rdx, QWORD PTR local_layout$11[rbp]
  002ce	48 8b 85 68 04
	00 00		 mov	 rax, QWORD PTR tv149[rbp]
  002d5	48 8b c8	 mov	 rcx, rax
  002d8	48 8b 85 70 04
	00 00		 mov	 rax, QWORD PTR tv382[rbp]
  002df	ff 50 58	 call	 QWORD PTR [rax+88]
  002e2	85 c0		 test	 eax, eax
  002e4	74 15		 je	 SHORT $LN6@ImGui_Impl

; 430  :         {
; 431  :             vertexShaderBlob->Release();

  002e6	48 8b 45 28	 mov	 rax, QWORD PTR vertexShaderBlob$10[rbp]
  002ea	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002ed	48 8b 4d 28	 mov	 rcx, QWORD PTR vertexShaderBlob$10[rbp]
  002f1	ff 50 10	 call	 QWORD PTR [rax+16]

; 432  :             return false;

  002f4	32 c0		 xor	 al, al
  002f6	e9 2c 04 00 00	 jmp	 $LN1@ImGui_Impl
$LN6@ImGui_Impl:

; 433  :         }
; 434  :         vertexShaderBlob->Release();

  002fb	48 8b 45 28	 mov	 rax, QWORD PTR vertexShaderBlob$10[rbp]
  002ff	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00302	48 8b 4d 28	 mov	 rcx, QWORD PTR vertexShaderBlob$10[rbp]
  00306	ff 50 10	 call	 QWORD PTR [rax+16]

; 435  : 
; 436  :         // Create the constant buffer
; 437  :         {
; 438  :             D3D11_BUFFER_DESC desc;
; 439  :             desc.ByteWidth = sizeof(VERTEX_CONSTANT_BUFFER_DX11);

  00309	c7 85 c8 00 00
	00 40 00 00 00	 mov	 DWORD PTR desc$12[rbp], 64 ; 00000040H

; 440  :             desc.Usage = D3D11_USAGE_DYNAMIC;

  00313	c7 85 cc 00 00
	00 02 00 00 00	 mov	 DWORD PTR desc$12[rbp+4], 2

; 441  :             desc.BindFlags = D3D11_BIND_CONSTANT_BUFFER;

  0031d	c7 85 d0 00 00
	00 04 00 00 00	 mov	 DWORD PTR desc$12[rbp+8], 4

; 442  :             desc.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;

  00327	c7 85 d4 00 00
	00 00 00 01 00	 mov	 DWORD PTR desc$12[rbp+12], 65536 ; 00010000H

; 443  :             desc.MiscFlags = 0;

  00331	c7 85 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR desc$12[rbp+16], 0

; 444  :             bd->pd3dDevice->CreateBuffer(&desc, nullptr, &bd->pVertexConstantBuffer);

  0033b	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  0033f	48 83 c0 38	 add	 rax, 56			; 00000038H
  00343	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  00347	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0034a	48 8b 55 08	 mov	 rdx, QWORD PTR bd$[rbp]
  0034e	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00351	48 89 95 48 04
	00 00		 mov	 QWORD PTR tv218[rbp], rdx
  00358	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0035b	48 89 8d 50 04
	00 00		 mov	 QWORD PTR tv379[rbp], rcx
  00362	4c 8b c8	 mov	 r9, rax
  00365	45 33 c0	 xor	 r8d, r8d
  00368	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR desc$12[rbp]
  0036f	48 8b 85 48 04
	00 00		 mov	 rax, QWORD PTR tv218[rbp]
  00376	48 8b c8	 mov	 rcx, rax
  00379	48 8b 85 50 04
	00 00		 mov	 rax, QWORD PTR tv379[rbp]
  00380	ff 50 18	 call	 QWORD PTR [rax+24]

; 445  :         }
; 446  :     }
; 447  : 
; 448  :     // Create the pixel shader
; 449  :     {
; 450  :         static const char* pixelShader =
; 451  :             "struct PS_INPUT\
; 452  :             {\
; 453  :             float4 pos : SV_POSITION;\
; 454  :             float4 col : COLOR0;\
; 455  :             float2 uv  : TEXCOORD0;\
; 456  :             };\
; 457  :             sampler sampler0;\
; 458  :             Texture2D texture0;\
; 459  :             \
; 460  :             float4 main(PS_INPUT input) : SV_Target\
; 461  :             {\
; 462  :             float4 out_col = input.col * texture0.Sample(sampler0, input.uv); \
; 463  :             return out_col; \
; 464  :             }";
; 465  : 
; 466  :         ID3DBlob* pixelShaderBlob;
; 467  :         if (FAILED(D3DCompile(pixelShader, strlen(pixelShader), nullptr, nullptr, nullptr, "main", "ps_4_0", 0, 0, &pixelShaderBlob, nullptr)))

  00383	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?pixelShader@?BB@??ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ@4PEBDEB
  0038a	e8 00 00 00 00	 call	 strlen
  0038f	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR [rsp+80], 0
  00398	48 8d 8d f8 00
	00 00		 lea	 rcx, QWORD PTR pixelShaderBlob$13[rbp]
  0039f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  003a4	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR [rsp+64], 0
  003ac	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  003b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06HOOBOHFH@ps_4_0?$AA@
  003bb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GHJNJNPO@main?$AA@
  003c7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003cc	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  003d5	45 33 c9	 xor	 r9d, r9d
  003d8	45 33 c0	 xor	 r8d, r8d
  003db	48 8b d0	 mov	 rdx, rax
  003de	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?pixelShader@?BB@??ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ@4PEBDEB
  003e5	e8 00 00 00 00	 call	 D3DCompile
  003ea	85 c0		 test	 eax, eax
  003ec	7d 07		 jge	 SHORT $LN7@ImGui_Impl

; 468  :             return false; // NB: Pass ID3DBlob* pErrorBlob to D3DCompile() to get error showing in (const char*)pErrorBlob->GetBufferPointer(). Make sure to Release() the blob!

  003ee	32 c0		 xor	 al, al
  003f0	e9 32 03 00 00	 jmp	 $LN1@ImGui_Impl
$LN7@ImGui_Impl:

; 469  :         if (bd->pd3dDevice->CreatePixelShader(pixelShaderBlob->GetBufferPointer(), pixelShaderBlob->GetBufferSize(), nullptr, &bd->pPixelShader) != S_OK)

  003f5	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  003f9	48 83 c0 40	 add	 rax, 64			; 00000040H
  003fd	48 89 85 48 04
	00 00		 mov	 QWORD PTR tv248[rbp], rax
  00404	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR pixelShaderBlob$13[rbp]
  0040b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0040e	48 89 8d 50 04
	00 00		 mov	 QWORD PTR tv378[rbp], rcx
  00415	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR pixelShaderBlob$13[rbp]
  0041c	48 8b 95 50 04
	00 00		 mov	 rdx, QWORD PTR tv378[rbp]
  00423	ff 52 20	 call	 QWORD PTR [rdx+32]
  00426	48 89 85 58 04
	00 00		 mov	 QWORD PTR tv254[rbp], rax
  0042d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR pixelShaderBlob$13[rbp]
  00434	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00437	48 89 8d 60 04
	00 00		 mov	 QWORD PTR tv377[rbp], rcx
  0043e	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR pixelShaderBlob$13[rbp]
  00445	48 8b 95 60 04
	00 00		 mov	 rdx, QWORD PTR tv377[rbp]
  0044c	ff 52 18	 call	 QWORD PTR [rdx+24]
  0044f	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  00453	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00456	48 8b 55 08	 mov	 rdx, QWORD PTR bd$[rbp]
  0045a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0045d	48 89 95 68 04
	00 00		 mov	 QWORD PTR tv244[rbp], rdx
  00464	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00467	48 89 8d 70 04
	00 00		 mov	 QWORD PTR tv376[rbp], rcx
  0046e	4c 8b 85 48 04
	00 00		 mov	 r8, QWORD PTR tv248[rbp]
  00475	4c 89 44 24 20	 mov	 QWORD PTR [rsp+32], r8
  0047a	45 33 c9	 xor	 r9d, r9d
  0047d	4c 8b 85 58 04
	00 00		 mov	 r8, QWORD PTR tv254[rbp]
  00484	48 8b d0	 mov	 rdx, rax
  00487	48 8b 85 68 04
	00 00		 mov	 rax, QWORD PTR tv244[rbp]
  0048e	48 8b c8	 mov	 rcx, rax
  00491	48 8b 85 70 04
	00 00		 mov	 rax, QWORD PTR tv376[rbp]
  00498	ff 50 78	 call	 QWORD PTR [rax+120]
  0049b	85 c0		 test	 eax, eax
  0049d	74 1b		 je	 SHORT $LN8@ImGui_Impl

; 470  :         {
; 471  :             pixelShaderBlob->Release();

  0049f	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR pixelShaderBlob$13[rbp]
  004a6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  004a9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR pixelShaderBlob$13[rbp]
  004b0	ff 50 10	 call	 QWORD PTR [rax+16]

; 472  :             return false;

  004b3	32 c0		 xor	 al, al
  004b5	e9 6d 02 00 00	 jmp	 $LN1@ImGui_Impl
$LN8@ImGui_Impl:

; 473  :         }
; 474  :         pixelShaderBlob->Release();

  004ba	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR pixelShaderBlob$13[rbp]
  004c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  004c4	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR pixelShaderBlob$13[rbp]
  004cb	ff 50 10	 call	 QWORD PTR [rax+16]

; 475  :     }
; 476  : 
; 477  :     // Create the blending setup
; 478  :     {
; 479  :         D3D11_BLEND_DESC desc;
; 480  :         ZeroMemory(&desc, sizeof(desc));

  004ce	41 b8 08 01 00
	00		 mov	 r8d, 264		; 00000108H
  004d4	33 d2		 xor	 edx, edx
  004d6	48 8d 8d 20 01
	00 00		 lea	 rcx, QWORD PTR desc$14[rbp]
  004dd	e8 00 00 00 00	 call	 memset

; 481  :         desc.AlphaToCoverageEnable = false;

  004e2	c7 85 20 01 00
	00 00 00 00 00	 mov	 DWORD PTR desc$14[rbp], 0

; 482  :         desc.RenderTarget[0].BlendEnable = true;

  004ec	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  004f1	48 6b c0 00	 imul	 rax, rax, 0
  004f5	c7 84 05 28 01
	00 00 01 00 00
	00		 mov	 DWORD PTR desc$14[rbp+rax+8], 1

; 483  :         desc.RenderTarget[0].SrcBlend = D3D11_BLEND_SRC_ALPHA;

  00500	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00505	48 6b c0 00	 imul	 rax, rax, 0
  00509	c7 84 05 2c 01
	00 00 05 00 00
	00		 mov	 DWORD PTR desc$14[rbp+rax+12], 5

; 484  :         desc.RenderTarget[0].DestBlend = D3D11_BLEND_INV_SRC_ALPHA;

  00514	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00519	48 6b c0 00	 imul	 rax, rax, 0
  0051d	c7 84 05 30 01
	00 00 06 00 00
	00		 mov	 DWORD PTR desc$14[rbp+rax+16], 6

; 485  :         desc.RenderTarget[0].BlendOp = D3D11_BLEND_OP_ADD;

  00528	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0052d	48 6b c0 00	 imul	 rax, rax, 0
  00531	c7 84 05 34 01
	00 00 01 00 00
	00		 mov	 DWORD PTR desc$14[rbp+rax+20], 1

; 486  :         desc.RenderTarget[0].SrcBlendAlpha = D3D11_BLEND_ONE;

  0053c	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00541	48 6b c0 00	 imul	 rax, rax, 0
  00545	c7 84 05 38 01
	00 00 02 00 00
	00		 mov	 DWORD PTR desc$14[rbp+rax+24], 2

; 487  :         desc.RenderTarget[0].DestBlendAlpha = D3D11_BLEND_INV_SRC_ALPHA;

  00550	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00555	48 6b c0 00	 imul	 rax, rax, 0
  00559	c7 84 05 3c 01
	00 00 06 00 00
	00		 mov	 DWORD PTR desc$14[rbp+rax+28], 6

; 488  :         desc.RenderTarget[0].BlendOpAlpha = D3D11_BLEND_OP_ADD;

  00564	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00569	48 6b c0 00	 imul	 rax, rax, 0
  0056d	c7 84 05 40 01
	00 00 01 00 00
	00		 mov	 DWORD PTR desc$14[rbp+rax+32], 1

; 489  :         desc.RenderTarget[0].RenderTargetWriteMask = D3D11_COLOR_WRITE_ENABLE_ALL;

  00578	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0057d	48 6b c0 00	 imul	 rax, rax, 0
  00581	c6 84 05 44 01
	00 00 0f	 mov	 BYTE PTR desc$14[rbp+rax+36], 15

; 490  :         bd->pd3dDevice->CreateBlendState(&desc, &bd->pBlendState);

  00589	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  0058d	48 83 c0 60	 add	 rax, 96			; 00000060H
  00591	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  00595	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00598	48 8b 55 08	 mov	 rdx, QWORD PTR bd$[rbp]
  0059c	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0059f	48 89 95 48 04
	00 00		 mov	 QWORD PTR tv307[rbp], rdx
  005a6	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  005a9	48 89 8d 50 04
	00 00		 mov	 QWORD PTR tv373[rbp], rcx
  005b0	4c 8b c0	 mov	 r8, rax
  005b3	48 8d 95 20 01
	00 00		 lea	 rdx, QWORD PTR desc$14[rbp]
  005ba	48 8b 85 48 04
	00 00		 mov	 rax, QWORD PTR tv307[rbp]
  005c1	48 8b c8	 mov	 rcx, rax
  005c4	48 8b 85 50 04
	00 00		 mov	 rax, QWORD PTR tv373[rbp]
  005cb	ff 90 a0 00 00
	00		 call	 QWORD PTR [rax+160]

; 491  :     }
; 492  : 
; 493  :     // Create the rasterizer state
; 494  :     {
; 495  :         D3D11_RASTERIZER_DESC desc;
; 496  :         ZeroMemory(&desc, sizeof(desc));

  005d1	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  005d7	33 d2		 xor	 edx, edx
  005d9	48 8d 8d 48 02
	00 00		 lea	 rcx, QWORD PTR desc$15[rbp]
  005e0	e8 00 00 00 00	 call	 memset

; 497  :         desc.FillMode = D3D11_FILL_SOLID;

  005e5	c7 85 48 02 00
	00 03 00 00 00	 mov	 DWORD PTR desc$15[rbp], 3

; 498  :         desc.CullMode = D3D11_CULL_NONE;

  005ef	c7 85 4c 02 00
	00 01 00 00 00	 mov	 DWORD PTR desc$15[rbp+4], 1

; 499  :         desc.ScissorEnable = true;

  005f9	c7 85 64 02 00
	00 01 00 00 00	 mov	 DWORD PTR desc$15[rbp+28], 1

; 500  :         desc.DepthClipEnable = true;

  00603	c7 85 60 02 00
	00 01 00 00 00	 mov	 DWORD PTR desc$15[rbp+24], 1

; 501  :         bd->pd3dDevice->CreateRasterizerState(&desc, &bd->pRasterizerState);

  0060d	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00611	48 83 c0 58	 add	 rax, 88			; 00000058H
  00615	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  00619	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0061c	48 8b 55 08	 mov	 rdx, QWORD PTR bd$[rbp]
  00620	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00623	48 89 95 48 04
	00 00		 mov	 QWORD PTR tv352[rbp], rdx
  0062a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0062d	48 89 8d 50 04
	00 00		 mov	 QWORD PTR tv372[rbp], rcx
  00634	4c 8b c0	 mov	 r8, rax
  00637	48 8d 95 48 02
	00 00		 lea	 rdx, QWORD PTR desc$15[rbp]
  0063e	48 8b 85 48 04
	00 00		 mov	 rax, QWORD PTR tv352[rbp]
  00645	48 8b c8	 mov	 rcx, rax
  00648	48 8b 85 50 04
	00 00		 mov	 rax, QWORD PTR tv372[rbp]
  0064f	ff 90 b0 00 00
	00		 call	 QWORD PTR [rax+176]

; 502  :     }
; 503  : 
; 504  :     // Create depth-stencil State
; 505  :     {
; 506  :         D3D11_DEPTH_STENCIL_DESC desc;
; 507  :         ZeroMemory(&desc, sizeof(desc));

  00655	41 b8 34 00 00
	00		 mov	 r8d, 52			; 00000034H
  0065b	33 d2		 xor	 edx, edx
  0065d	48 8d 8d 88 02
	00 00		 lea	 rcx, QWORD PTR desc$16[rbp]
  00664	e8 00 00 00 00	 call	 memset

; 508  :         desc.DepthEnable = false;

  00669	c7 85 88 02 00
	00 00 00 00 00	 mov	 DWORD PTR desc$16[rbp], 0

; 509  :         desc.DepthWriteMask = D3D11_DEPTH_WRITE_MASK_ALL;

  00673	c7 85 8c 02 00
	00 01 00 00 00	 mov	 DWORD PTR desc$16[rbp+4], 1

; 510  :         desc.DepthFunc = D3D11_COMPARISON_ALWAYS;

  0067d	c7 85 90 02 00
	00 08 00 00 00	 mov	 DWORD PTR desc$16[rbp+8], 8

; 511  :         desc.StencilEnable = false;

  00687	c7 85 94 02 00
	00 00 00 00 00	 mov	 DWORD PTR desc$16[rbp+12], 0

; 512  :         desc.FrontFace.StencilFailOp = desc.FrontFace.StencilDepthFailOp = desc.FrontFace.StencilPassOp = D3D11_STENCIL_OP_KEEP;

  00691	c7 85 a4 02 00
	00 01 00 00 00	 mov	 DWORD PTR desc$16[rbp+28], 1
  0069b	8b 85 a4 02 00
	00		 mov	 eax, DWORD PTR desc$16[rbp+28]
  006a1	89 85 a0 02 00
	00		 mov	 DWORD PTR desc$16[rbp+24], eax
  006a7	8b 85 a0 02 00
	00		 mov	 eax, DWORD PTR desc$16[rbp+24]
  006ad	89 85 9c 02 00
	00		 mov	 DWORD PTR desc$16[rbp+20], eax

; 513  :         desc.FrontFace.StencilFunc = D3D11_COMPARISON_ALWAYS;

  006b3	c7 85 a8 02 00
	00 08 00 00 00	 mov	 DWORD PTR desc$16[rbp+32], 8

; 514  :         desc.BackFace = desc.FrontFace;

  006bd	48 8d 85 ac 02
	00 00		 lea	 rax, QWORD PTR desc$16[rbp+36]
  006c4	48 8d 8d 9c 02
	00 00		 lea	 rcx, QWORD PTR desc$16[rbp+20]
  006cb	48 8b f8	 mov	 rdi, rax
  006ce	48 8b f1	 mov	 rsi, rcx
  006d1	b9 10 00 00 00	 mov	 ecx, 16
  006d6	f3 a4		 rep movsb

; 515  :         bd->pd3dDevice->CreateDepthStencilState(&desc, &bd->pDepthStencilState);

  006d8	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  006dc	48 83 c0 68	 add	 rax, 104		; 00000068H
  006e0	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  006e4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  006e7	48 8b 55 08	 mov	 rdx, QWORD PTR bd$[rbp]
  006eb	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  006ee	48 89 95 48 04
	00 00		 mov	 QWORD PTR tv365[rbp], rdx
  006f5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  006f8	48 89 8d 50 04
	00 00		 mov	 QWORD PTR tv368[rbp], rcx
  006ff	4c 8b c0	 mov	 r8, rax
  00702	48 8d 95 88 02
	00 00		 lea	 rdx, QWORD PTR desc$16[rbp]
  00709	48 8b 85 48 04
	00 00		 mov	 rax, QWORD PTR tv365[rbp]
  00710	48 8b c8	 mov	 rcx, rax
  00713	48 8b 85 50 04
	00 00		 mov	 rax, QWORD PTR tv368[rbp]
  0071a	ff 90 a8 00 00
	00		 call	 QWORD PTR [rax+168]

; 516  :     }
; 517  : 
; 518  :     ImGui_ImplDX11_CreateFontsTexture();

  00720	e8 00 00 00 00	 call	 ?ImGui_ImplDX11_CreateFontsTexture@@YAXXZ ; ImGui_ImplDX11_CreateFontsTexture

; 519  : 
; 520  :     return true;

  00725	b0 01		 mov	 al, 1
$LN1@ImGui_Impl:

; 521  : }

  00727	48 8b f8	 mov	 rdi, rax
  0072a	48 8d 4d a0	 lea	 rcx, QWORD PTR [rbp-96]
  0072e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ$rtcFrameData
  00735	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0073a	48 8b c7	 mov	 rax, rdi
  0073d	48 8b 8d 78 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00744	48 33 cd	 xor	 rcx, rbp
  00747	e8 00 00 00 00	 call	 __security_check_cookie
  0074c	48 8d a5 80 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1152]
  00753	5f		 pop	 rdi
  00754	5e		 pop	 rsi
  00755	5d		 pop	 rbp
  00756	c3		 ret	 0
?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ ENDP	; ImGui_ImplDX11_CreateDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\tool\imgui\imgui_impl_dx11.cpp
;	COMDAT ?ImGui_ImplDX11_InvalidateDeviceObjects@@YAXXZ
_TEXT	SEGMENT
bd$ = 8
?ImGui_ImplDX11_InvalidateDeviceObjects@@YAXXZ PROC	; ImGui_ImplDX11_InvalidateDeviceObjects, COMDAT

; 524  : {

$LN15:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 525  :     ImGui_ImplDX11_Data* bd = ImGui_ImplDX11_GetBackendData();

  0001e	e8 00 00 00 00	 call	 ?ImGui_ImplDX11_GetBackendData@@YAPEAUImGui_ImplDX11_Data@@XZ ; ImGui_ImplDX11_GetBackendData
  00023	48 89 45 08	 mov	 QWORD PTR bd$[rbp], rax

; 526  :     if (!bd->pd3dDevice)

  00027	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  0002b	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0002f	75 05		 jne	 SHORT $LN2@ImGui_Impl

; 527  :         return;

  00031	e9 ff 01 00 00	 jmp	 $LN1@ImGui_Impl
$LN2@ImGui_Impl:

; 528  : 
; 529  :     if (bd->pFontSampler)           { bd->pFontSampler->Release(); bd->pFontSampler = nullptr; }

  00036	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  0003a	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  0003f	74 22		 je	 SHORT $LN3@ImGui_Impl
  00041	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00045	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00049	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  0004d	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00051	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00054	ff 50 10	 call	 QWORD PTR [rax+16]
  00057	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  0005b	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0
$LN3@ImGui_Impl:

; 530  :     if (bd->pFontTextureView)       { bd->pFontTextureView->Release(); bd->pFontTextureView = nullptr; ImGui::GetIO().Fonts->SetTexID(nullptr); } // We copied data->pFontTextureView to io.Fonts->TexID so let's clear that as well.

  00063	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00067	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0006c	74 32		 je	 SHORT $LN4@ImGui_Impl
  0006e	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00072	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00076	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  0007a	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  0007e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00081	ff 50 10	 call	 QWORD PTR [rax+16]
  00084	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00088	48 c7 40 50 00
	00 00 00	 mov	 QWORD PTR [rax+80], 0
  00090	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  00095	33 d2		 xor	 edx, edx
  00097	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  0009b	e8 00 00 00 00	 call	 ?SetTexID@ImFontAtlas@@QEAAXPEAX@Z ; ImFontAtlas::SetTexID
$LN4@ImGui_Impl:

; 531  :     if (bd->pIB)                    { bd->pIB->Release(); bd->pIB = nullptr; }

  000a0	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  000a4	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  000a9	74 22		 je	 SHORT $LN5@ImGui_Impl
  000ab	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  000af	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000b3	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  000b7	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  000bb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000be	ff 50 10	 call	 QWORD PTR [rax+16]
  000c1	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  000c5	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0
$LN5@ImGui_Impl:

; 532  :     if (bd->pVB)                    { bd->pVB->Release(); bd->pVB = nullptr; }

  000cd	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  000d1	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  000d6	74 22		 je	 SHORT $LN6@ImGui_Impl
  000d8	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  000dc	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  000e0	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  000e4	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  000e8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000eb	ff 50 10	 call	 QWORD PTR [rax+16]
  000ee	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  000f2	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
$LN6@ImGui_Impl:

; 533  :     if (bd->pBlendState)            { bd->pBlendState->Release(); bd->pBlendState = nullptr; }

  000fa	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  000fe	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00103	74 22		 je	 SHORT $LN7@ImGui_Impl
  00105	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00109	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0010d	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  00111	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00115	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00118	ff 50 10	 call	 QWORD PTR [rax+16]
  0011b	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  0011f	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
$LN7@ImGui_Impl:

; 534  :     if (bd->pDepthStencilState)     { bd->pDepthStencilState->Release(); bd->pDepthStencilState = nullptr; }

  00127	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  0012b	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00130	74 22		 je	 SHORT $LN8@ImGui_Impl
  00132	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00136	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0013a	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  0013e	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00142	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00145	ff 50 10	 call	 QWORD PTR [rax+16]
  00148	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  0014c	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
$LN8@ImGui_Impl:

; 535  :     if (bd->pRasterizerState)       { bd->pRasterizerState->Release(); bd->pRasterizerState = nullptr; }

  00154	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00158	48 83 78 58 00	 cmp	 QWORD PTR [rax+88], 0
  0015d	74 22		 je	 SHORT $LN9@ImGui_Impl
  0015f	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00163	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00167	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  0016b	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0016f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00172	ff 50 10	 call	 QWORD PTR [rax+16]
  00175	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00179	48 c7 40 58 00
	00 00 00	 mov	 QWORD PTR [rax+88], 0
$LN9@ImGui_Impl:

; 536  :     if (bd->pPixelShader)           { bd->pPixelShader->Release(); bd->pPixelShader = nullptr; }

  00181	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00185	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  0018a	74 22		 je	 SHORT $LN10@ImGui_Impl
  0018c	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00190	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00194	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  00198	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  0019c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0019f	ff 50 10	 call	 QWORD PTR [rax+16]
  001a2	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  001a6	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0
$LN10@ImGui_Impl:

; 537  :     if (bd->pVertexConstantBuffer)  { bd->pVertexConstantBuffer->Release(); bd->pVertexConstantBuffer = nullptr; }

  001ae	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  001b2	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  001b7	74 22		 je	 SHORT $LN11@ImGui_Impl
  001b9	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  001bd	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  001c1	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  001c5	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  001c9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001cc	ff 50 10	 call	 QWORD PTR [rax+16]
  001cf	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  001d3	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0
$LN11@ImGui_Impl:

; 538  :     if (bd->pInputLayout)           { bd->pInputLayout->Release(); bd->pInputLayout = nullptr; }

  001db	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  001df	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  001e4	74 22		 je	 SHORT $LN12@ImGui_Impl
  001e6	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  001ea	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  001ee	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  001f2	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  001f6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001f9	ff 50 10	 call	 QWORD PTR [rax+16]
  001fc	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00200	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0
$LN12@ImGui_Impl:

; 539  :     if (bd->pVertexShader)          { bd->pVertexShader->Release(); bd->pVertexShader = nullptr; }

  00208	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  0020c	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  00211	74 22		 je	 SHORT $LN13@ImGui_Impl
  00213	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00217	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0021b	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  0021f	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  00223	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00226	ff 50 10	 call	 QWORD PTR [rax+16]
  00229	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  0022d	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0
$LN13@ImGui_Impl:
$LN1@ImGui_Impl:

; 540  : }

  00235	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0023c	5f		 pop	 rdi
  0023d	5d		 pop	 rbp
  0023e	c3		 ret	 0
?ImGui_ImplDX11_InvalidateDeviceObjects@@YAXXZ ENDP	; ImGui_ImplDX11_InvalidateDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\tool\imgui\imgui_impl_dx11.cpp
;	COMDAT ?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z
_TEXT	SEGMENT
bd$ = 8
ctx$ = 40
desc$15 = 72
desc$16 = 120
vtx_resource$ = 168
idx_resource$ = 216
vtx_dst$ = 264
idx_dst$ = 296
n$17 = 324
cmd_list$18 = 360
mapped_resource$19 = 392
constant_buffer$20 = 440
L$21 = 468
R$22 = 500
T$23 = 532
B$24 = 564
mvp$25 = 608
old$ = 704
global_idx_offset$ = 7684
global_vtx_offset$ = 7716
clip_off$ = 7752
n$26 = 7780
cmd_list$27 = 7816
cmd_i$28 = 7844
pcmd$29 = 7880
clip_min$30 = 7912
clip_max$31 = 7944
r$32 = 7976
texture_srv$33 = 8024
i$34 = 8052
i$35 = 8084
tv875 = 9640
tv179 = 9640
tv137 = 9640
tv906 = 9648
tv903 = 9648
__$ArrayPad$ = 9656
draw_data$ = 9696
?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z PROC ; ImGui_ImplDX11_RenderDrawData, COMDAT

; 119  : {

$LN51:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	b8 f8 25 00 00	 mov	 eax, 9720		; 000025f8H
  0000c	e8 00 00 00 00	 call	 __chkstk
  00011	48 2b e0	 sub	 rsp, rax
  00014	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 7e 09 00 00	 mov	 ecx, 2430		; 0000097eH
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 18
	26 00 00	 mov	 rcx, QWORD PTR [rsp+9752]
  00030	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00037	48 33 c5	 xor	 rax, rbp
  0003a	48 89 85 b8 25
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 120  :     // Avoid rendering when minimized
; 121  :     if (draw_data->DisplaySize.x <= 0.0f || draw_data->DisplaySize.y <= 0.0f)

  00041	48 8b 85 e0 25
	00 00		 mov	 rax, QWORD PTR draw_data$[rbp]
  00048	0f 57 c0	 xorps	 xmm0, xmm0
  0004b	0f 2f 40 20	 comiss	 xmm0, DWORD PTR [rax+32]
  0004f	73 10		 jae	 SHORT $LN18@ImGui_Impl
  00051	48 8b 85 e0 25
	00 00		 mov	 rax, QWORD PTR draw_data$[rbp]
  00058	0f 57 c0	 xorps	 xmm0, xmm0
  0005b	0f 2f 40 24	 comiss	 xmm0, DWORD PTR [rax+36]
  0005f	72 05		 jb	 SHORT $LN17@ImGui_Impl
$LN18@ImGui_Impl:

; 122  :         return;

  00061	e9 c7 0e 00 00	 jmp	 $LN1@ImGui_Impl
$LN17@ImGui_Impl:

; 123  : 
; 124  :     ImGui_ImplDX11_Data* bd = ImGui_ImplDX11_GetBackendData();

  00066	e8 00 00 00 00	 call	 ?ImGui_ImplDX11_GetBackendData@@YAPEAUImGui_ImplDX11_Data@@XZ ; ImGui_ImplDX11_GetBackendData
  0006b	48 89 45 08	 mov	 QWORD PTR bd$[rbp], rax

; 125  :     ID3D11DeviceContext* ctx = bd->pd3dDeviceContext;

  0006f	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00073	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00077	48 89 45 28	 mov	 QWORD PTR ctx$[rbp], rax

; 126  : 
; 127  :     // Create and grow vertex/index buffers if needed
; 128  :     if (!bd->pVB || bd->VertexBufferSize < draw_data->TotalVtxCount)

  0007b	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  0007f	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00084	74 17		 je	 SHORT $LN20@ImGui_Impl
  00086	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  0008a	48 8b 8d e0 25
	00 00		 mov	 rcx, QWORD PTR draw_data$[rbp]
  00091	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00094	39 48 70	 cmp	 DWORD PTR [rax+112], ecx
  00097	0f 8d cd 00 00
	00		 jge	 $LN19@ImGui_Impl
$LN20@ImGui_Impl:

; 129  :     {
; 130  :         if (bd->pVB) { bd->pVB->Release(); bd->pVB = nullptr; }

  0009d	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  000a1	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  000a6	74 22		 je	 SHORT $LN21@ImGui_Impl
  000a8	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  000ac	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  000b0	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  000b4	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  000b8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000bb	ff 50 10	 call	 QWORD PTR [rax+16]
  000be	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  000c2	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
$LN21@ImGui_Impl:

; 131  :         bd->VertexBufferSize = draw_data->TotalVtxCount + 5000;

  000ca	48 8b 85 e0 25
	00 00		 mov	 rax, QWORD PTR draw_data$[rbp]
  000d1	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  000d4	05 88 13 00 00	 add	 eax, 5000		; 00001388H
  000d9	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  000dd	89 41 70	 mov	 DWORD PTR [rcx+112], eax

; 132  :         D3D11_BUFFER_DESC desc;
; 133  :         memset(&desc, 0, sizeof(D3D11_BUFFER_DESC));

  000e0	41 b8 18 00 00
	00		 mov	 r8d, 24
  000e6	33 d2		 xor	 edx, edx
  000e8	48 8d 4d 48	 lea	 rcx, QWORD PTR desc$15[rbp]
  000ec	e8 00 00 00 00	 call	 memset

; 134  :         desc.Usage = D3D11_USAGE_DYNAMIC;

  000f1	c7 45 4c 02 00
	00 00		 mov	 DWORD PTR desc$15[rbp+4], 2

; 135  :         desc.ByteWidth = bd->VertexBufferSize * sizeof(ImDrawVert);

  000f8	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  000fc	48 63 40 70	 movsxd	 rax, DWORD PTR [rax+112]
  00100	48 6b c0 14	 imul	 rax, rax, 20
  00104	89 45 48	 mov	 DWORD PTR desc$15[rbp], eax

; 136  :         desc.BindFlags = D3D11_BIND_VERTEX_BUFFER;

  00107	c7 45 50 01 00
	00 00		 mov	 DWORD PTR desc$15[rbp+8], 1

; 137  :         desc.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;

  0010e	c7 45 54 00 00
	01 00		 mov	 DWORD PTR desc$15[rbp+12], 65536 ; 00010000H

; 138  :         desc.MiscFlags = 0;

  00115	c7 45 58 00 00
	00 00		 mov	 DWORD PTR desc$15[rbp+16], 0

; 139  :         if (bd->pd3dDevice->CreateBuffer(&desc, nullptr, &bd->pVB) < 0)

  0011c	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00120	48 83 c0 18	 add	 rax, 24
  00124	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  00128	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0012b	48 8b 55 08	 mov	 rdx, QWORD PTR bd$[rbp]
  0012f	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00132	48 89 95 a8 25
	00 00		 mov	 QWORD PTR tv137[rbp], rdx
  00139	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0013c	48 89 8d b0 25
	00 00		 mov	 QWORD PTR tv906[rbp], rcx
  00143	4c 8b c8	 mov	 r9, rax
  00146	45 33 c0	 xor	 r8d, r8d
  00149	48 8d 55 48	 lea	 rdx, QWORD PTR desc$15[rbp]
  0014d	48 8b 85 a8 25
	00 00		 mov	 rax, QWORD PTR tv137[rbp]
  00154	48 8b c8	 mov	 rcx, rax
  00157	48 8b 85 b0 25
	00 00		 mov	 rax, QWORD PTR tv906[rbp]
  0015e	ff 50 18	 call	 QWORD PTR [rax+24]
  00161	85 c0		 test	 eax, eax
  00163	7d 05		 jge	 SHORT $LN22@ImGui_Impl

; 140  :             return;

  00165	e9 c3 0d 00 00	 jmp	 $LN1@ImGui_Impl
$LN22@ImGui_Impl:
$LN19@ImGui_Impl:

; 141  :     }
; 142  :     if (!bd->pIB || bd->IndexBufferSize < draw_data->TotalIdxCount)

  0016a	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  0016e	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00173	74 17		 je	 SHORT $LN24@ImGui_Impl
  00175	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00179	48 8b 8d e0 25
	00 00		 mov	 rcx, QWORD PTR draw_data$[rbp]
  00180	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00183	39 48 74	 cmp	 DWORD PTR [rax+116], ecx
  00186	0f 8d cb 00 00
	00		 jge	 $LN23@ImGui_Impl
$LN24@ImGui_Impl:

; 143  :     {
; 144  :         if (bd->pIB) { bd->pIB->Release(); bd->pIB = nullptr; }

  0018c	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00190	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00195	74 22		 je	 SHORT $LN25@ImGui_Impl
  00197	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  0019b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0019f	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  001a3	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  001a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001aa	ff 50 10	 call	 QWORD PTR [rax+16]
  001ad	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  001b1	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0
$LN25@ImGui_Impl:

; 145  :         bd->IndexBufferSize = draw_data->TotalIdxCount + 10000;

  001b9	48 8b 85 e0 25
	00 00		 mov	 rax, QWORD PTR draw_data$[rbp]
  001c0	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  001c3	05 10 27 00 00	 add	 eax, 10000		; 00002710H
  001c8	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  001cc	89 41 74	 mov	 DWORD PTR [rcx+116], eax

; 146  :         D3D11_BUFFER_DESC desc;
; 147  :         memset(&desc, 0, sizeof(D3D11_BUFFER_DESC));

  001cf	41 b8 18 00 00
	00		 mov	 r8d, 24
  001d5	33 d2		 xor	 edx, edx
  001d7	48 8d 4d 78	 lea	 rcx, QWORD PTR desc$16[rbp]
  001db	e8 00 00 00 00	 call	 memset

; 148  :         desc.Usage = D3D11_USAGE_DYNAMIC;

  001e0	c7 45 7c 02 00
	00 00		 mov	 DWORD PTR desc$16[rbp+4], 2

; 149  :         desc.ByteWidth = bd->IndexBufferSize * sizeof(ImDrawIdx);

  001e7	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  001eb	48 63 40 74	 movsxd	 rax, DWORD PTR [rax+116]
  001ef	48 d1 e0	 shl	 rax, 1
  001f2	89 45 78	 mov	 DWORD PTR desc$16[rbp], eax

; 150  :         desc.BindFlags = D3D11_BIND_INDEX_BUFFER;

  001f5	c7 85 80 00 00
	00 02 00 00 00	 mov	 DWORD PTR desc$16[rbp+8], 2

; 151  :         desc.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;

  001ff	c7 85 84 00 00
	00 00 00 01 00	 mov	 DWORD PTR desc$16[rbp+12], 65536 ; 00010000H

; 152  :         if (bd->pd3dDevice->CreateBuffer(&desc, nullptr, &bd->pIB) < 0)

  00209	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  0020d	48 83 c0 20	 add	 rax, 32			; 00000020H
  00211	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  00215	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00218	48 8b 55 08	 mov	 rdx, QWORD PTR bd$[rbp]
  0021c	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0021f	48 89 95 a8 25
	00 00		 mov	 QWORD PTR tv179[rbp], rdx
  00226	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00229	48 89 8d b0 25
	00 00		 mov	 QWORD PTR tv903[rbp], rcx
  00230	4c 8b c8	 mov	 r9, rax
  00233	45 33 c0	 xor	 r8d, r8d
  00236	48 8d 55 78	 lea	 rdx, QWORD PTR desc$16[rbp]
  0023a	48 8b 85 a8 25
	00 00		 mov	 rax, QWORD PTR tv179[rbp]
  00241	48 8b c8	 mov	 rcx, rax
  00244	48 8b 85 b0 25
	00 00		 mov	 rax, QWORD PTR tv903[rbp]
  0024b	ff 50 18	 call	 QWORD PTR [rax+24]
  0024e	85 c0		 test	 eax, eax
  00250	7d 05		 jge	 SHORT $LN26@ImGui_Impl

; 153  :             return;

  00252	e9 d6 0c 00 00	 jmp	 $LN1@ImGui_Impl
$LN26@ImGui_Impl:
$LN23@ImGui_Impl:

; 154  :     }
; 155  : 
; 156  :     // Upload vertex/index data into a single contiguous GPU buffer
; 157  :     D3D11_MAPPED_SUBRESOURCE vtx_resource, idx_resource;
; 158  :     if (ctx->Map(bd->pVB, 0, D3D11_MAP_WRITE_DISCARD, 0, &vtx_resource) != S_OK)

  00257	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  0025b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0025e	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR vtx_resource$[rbp]
  00265	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0026a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00272	41 b9 04 00 00
	00		 mov	 r9d, 4
  00278	45 33 c0	 xor	 r8d, r8d
  0027b	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  0027f	48 8b 51 18	 mov	 rdx, QWORD PTR [rcx+24]
  00283	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00287	ff 50 70	 call	 QWORD PTR [rax+112]
  0028a	85 c0		 test	 eax, eax
  0028c	74 05		 je	 SHORT $LN27@ImGui_Impl

; 159  :         return;

  0028e	e9 9a 0c 00 00	 jmp	 $LN1@ImGui_Impl
$LN27@ImGui_Impl:

; 160  :     if (ctx->Map(bd->pIB, 0, D3D11_MAP_WRITE_DISCARD, 0, &idx_resource) != S_OK)

  00293	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00297	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0029a	48 8d 8d d8 00
	00 00		 lea	 rcx, QWORD PTR idx_resource$[rbp]
  002a1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002a6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  002ae	41 b9 04 00 00
	00		 mov	 r9d, 4
  002b4	45 33 c0	 xor	 r8d, r8d
  002b7	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  002bb	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  002bf	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  002c3	ff 50 70	 call	 QWORD PTR [rax+112]
  002c6	85 c0		 test	 eax, eax
  002c8	74 05		 je	 SHORT $LN28@ImGui_Impl

; 161  :         return;

  002ca	e9 5e 0c 00 00	 jmp	 $LN1@ImGui_Impl
$LN28@ImGui_Impl:

; 162  :     ImDrawVert* vtx_dst = (ImDrawVert*)vtx_resource.pData;

  002cf	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR vtx_resource$[rbp]
  002d6	48 89 85 08 01
	00 00		 mov	 QWORD PTR vtx_dst$[rbp], rax

; 163  :     ImDrawIdx* idx_dst = (ImDrawIdx*)idx_resource.pData;

  002dd	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR idx_resource$[rbp]
  002e4	48 89 85 28 01
	00 00		 mov	 QWORD PTR idx_dst$[rbp], rax

; 164  :     for (int n = 0; n < draw_data->CmdListsCount; n++)

  002eb	c7 85 44 01 00
	00 00 00 00 00	 mov	 DWORD PTR n$17[rbp], 0
  002f5	eb 0e		 jmp	 SHORT $LN4@ImGui_Impl
$LN2@ImGui_Impl:
  002f7	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR n$17[rbp]
  002fd	ff c0		 inc	 eax
  002ff	89 85 44 01 00
	00		 mov	 DWORD PTR n$17[rbp], eax
$LN4@ImGui_Impl:
  00305	48 8b 85 e0 25
	00 00		 mov	 rax, QWORD PTR draw_data$[rbp]
  0030c	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0030f	39 85 44 01 00
	00		 cmp	 DWORD PTR n$17[rbp], eax
  00315	0f 8d b3 00 00
	00		 jge	 $LN3@ImGui_Impl

; 165  :     {
; 166  :         const ImDrawList* cmd_list = draw_data->CmdLists[n];

  0031b	48 63 85 44 01
	00 00		 movsxd	 rax, DWORD PTR n$17[rbp]
  00322	48 8b 8d e0 25
	00 00		 mov	 rcx, QWORD PTR draw_data$[rbp]
  00329	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0032d	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00331	48 89 85 68 01
	00 00		 mov	 QWORD PTR cmd_list$18[rbp], rax

; 167  :         memcpy(vtx_dst, cmd_list->VtxBuffer.Data, cmd_list->VtxBuffer.Size * sizeof(ImDrawVert));

  00338	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR cmd_list$18[rbp]
  0033f	48 63 40 20	 movsxd	 rax, DWORD PTR [rax+32]
  00343	48 6b c0 14	 imul	 rax, rax, 20
  00347	4c 8b c0	 mov	 r8, rax
  0034a	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR cmd_list$18[rbp]
  00351	48 8b 50 28	 mov	 rdx, QWORD PTR [rax+40]
  00355	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR vtx_dst$[rbp]
  0035c	e8 00 00 00 00	 call	 memcpy

; 168  :         memcpy(idx_dst, cmd_list->IdxBuffer.Data, cmd_list->IdxBuffer.Size * sizeof(ImDrawIdx));

  00361	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR cmd_list$18[rbp]
  00368	48 63 40 10	 movsxd	 rax, DWORD PTR [rax+16]
  0036c	48 d1 e0	 shl	 rax, 1
  0036f	4c 8b c0	 mov	 r8, rax
  00372	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR cmd_list$18[rbp]
  00379	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  0037d	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR idx_dst$[rbp]
  00384	e8 00 00 00 00	 call	 memcpy

; 169  :         vtx_dst += cmd_list->VtxBuffer.Size;

  00389	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR cmd_list$18[rbp]
  00390	48 63 40 20	 movsxd	 rax, DWORD PTR [rax+32]
  00394	48 6b c0 14	 imul	 rax, rax, 20
  00398	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR vtx_dst$[rbp]
  0039f	48 03 c8	 add	 rcx, rax
  003a2	48 8b c1	 mov	 rax, rcx
  003a5	48 89 85 08 01
	00 00		 mov	 QWORD PTR vtx_dst$[rbp], rax

; 170  :         idx_dst += cmd_list->IdxBuffer.Size;

  003ac	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR cmd_list$18[rbp]
  003b3	48 63 40 10	 movsxd	 rax, DWORD PTR [rax+16]
  003b7	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR idx_dst$[rbp]
  003be	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  003c2	48 89 85 28 01
	00 00		 mov	 QWORD PTR idx_dst$[rbp], rax

; 171  :     }

  003c9	e9 29 ff ff ff	 jmp	 $LN2@ImGui_Impl
$LN3@ImGui_Impl:

; 172  :     ctx->Unmap(bd->pVB, 0);

  003ce	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  003d2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003d5	45 33 c0	 xor	 r8d, r8d
  003d8	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  003dc	48 8b 51 18	 mov	 rdx, QWORD PTR [rcx+24]
  003e0	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  003e4	ff 50 78	 call	 QWORD PTR [rax+120]

; 173  :     ctx->Unmap(bd->pIB, 0);

  003e7	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  003eb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003ee	45 33 c0	 xor	 r8d, r8d
  003f1	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  003f5	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  003f9	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  003fd	ff 50 78	 call	 QWORD PTR [rax+120]

; 174  : 
; 175  :     // Setup orthographic projection matrix into our constant buffer
; 176  :     // Our visible imgui space lies from draw_data->DisplayPos (top left) to draw_data->DisplayPos+data_data->DisplaySize (bottom right). DisplayPos is (0,0) for single viewport apps.
; 177  :     {
; 178  :         D3D11_MAPPED_SUBRESOURCE mapped_resource;
; 179  :         if (ctx->Map(bd->pVertexConstantBuffer, 0, D3D11_MAP_WRITE_DISCARD, 0, &mapped_resource) != S_OK)

  00400	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00404	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00407	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR mapped_resource$19[rbp]
  0040e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00413	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  0041b	41 b9 04 00 00
	00		 mov	 r9d, 4
  00421	45 33 c0	 xor	 r8d, r8d
  00424	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  00428	48 8b 51 38	 mov	 rdx, QWORD PTR [rcx+56]
  0042c	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00430	ff 50 70	 call	 QWORD PTR [rax+112]
  00433	85 c0		 test	 eax, eax
  00435	74 05		 je	 SHORT $LN29@ImGui_Impl

; 180  :             return;

  00437	e9 f1 0a 00 00	 jmp	 $LN1@ImGui_Impl
$LN29@ImGui_Impl:

; 181  :         VERTEX_CONSTANT_BUFFER_DX11* constant_buffer = (VERTEX_CONSTANT_BUFFER_DX11*)mapped_resource.pData;

  0043c	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR mapped_resource$19[rbp]
  00443	48 89 85 b8 01
	00 00		 mov	 QWORD PTR constant_buffer$20[rbp], rax

; 182  :         float L = draw_data->DisplayPos.x;

  0044a	48 8b 85 e0 25
	00 00		 mov	 rax, QWORD PTR draw_data$[rbp]
  00451	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [rax+24]
  00456	f3 0f 11 85 d4
	01 00 00	 movss	 DWORD PTR L$21[rbp], xmm0

; 183  :         float R = draw_data->DisplayPos.x + draw_data->DisplaySize.x;

  0045e	48 8b 85 e0 25
	00 00		 mov	 rax, QWORD PTR draw_data$[rbp]
  00465	48 8b 8d e0 25
	00 00		 mov	 rcx, QWORD PTR draw_data$[rbp]
  0046c	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [rax+24]
  00471	f3 0f 58 41 20	 addss	 xmm0, DWORD PTR [rcx+32]
  00476	f3 0f 11 85 f4
	01 00 00	 movss	 DWORD PTR R$22[rbp], xmm0

; 184  :         float T = draw_data->DisplayPos.y;

  0047e	48 8b 85 e0 25
	00 00		 mov	 rax, QWORD PTR draw_data$[rbp]
  00485	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [rax+28]
  0048a	f3 0f 11 85 14
	02 00 00	 movss	 DWORD PTR T$23[rbp], xmm0

; 185  :         float B = draw_data->DisplayPos.y + draw_data->DisplaySize.y;

  00492	48 8b 85 e0 25
	00 00		 mov	 rax, QWORD PTR draw_data$[rbp]
  00499	48 8b 8d e0 25
	00 00		 mov	 rcx, QWORD PTR draw_data$[rbp]
  004a0	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [rax+28]
  004a5	f3 0f 58 41 24	 addss	 xmm0, DWORD PTR [rcx+36]
  004aa	f3 0f 11 85 34
	02 00 00	 movss	 DWORD PTR B$24[rbp], xmm0

; 186  :         float mvp[4][4] =
; 187  :         {
; 188  :             { 2.0f/(R-L),   0.0f,           0.0f,       0.0f },

  004b2	f3 0f 10 85 f4
	01 00 00	 movss	 xmm0, DWORD PTR R$22[rbp]
  004ba	f3 0f 5c 85 d4
	01 00 00	 subss	 xmm0, DWORD PTR L$21[rbp]
  004c2	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  004ca	f3 0f 5e c8	 divss	 xmm1, xmm0
  004ce	0f 28 c1	 movaps	 xmm0, xmm1
  004d1	f3 0f 11 85 60
	02 00 00	 movss	 DWORD PTR mvp$25[rbp], xmm0
  004d9	0f 57 c0	 xorps	 xmm0, xmm0
  004dc	f3 0f 11 85 64
	02 00 00	 movss	 DWORD PTR mvp$25[rbp+4], xmm0
  004e4	0f 57 c0	 xorps	 xmm0, xmm0
  004e7	f3 0f 11 85 68
	02 00 00	 movss	 DWORD PTR mvp$25[rbp+8], xmm0
  004ef	0f 57 c0	 xorps	 xmm0, xmm0
  004f2	f3 0f 11 85 6c
	02 00 00	 movss	 DWORD PTR mvp$25[rbp+12], xmm0

; 189  :             { 0.0f,         2.0f/(T-B),     0.0f,       0.0f },

  004fa	0f 57 c0	 xorps	 xmm0, xmm0
  004fd	f3 0f 11 85 70
	02 00 00	 movss	 DWORD PTR mvp$25[rbp+16], xmm0
  00505	f3 0f 10 85 14
	02 00 00	 movss	 xmm0, DWORD PTR T$23[rbp]
  0050d	f3 0f 5c 85 34
	02 00 00	 subss	 xmm0, DWORD PTR B$24[rbp]
  00515	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  0051d	f3 0f 5e c8	 divss	 xmm1, xmm0
  00521	0f 28 c1	 movaps	 xmm0, xmm1
  00524	f3 0f 11 85 74
	02 00 00	 movss	 DWORD PTR mvp$25[rbp+20], xmm0
  0052c	0f 57 c0	 xorps	 xmm0, xmm0
  0052f	f3 0f 11 85 78
	02 00 00	 movss	 DWORD PTR mvp$25[rbp+24], xmm0
  00537	0f 57 c0	 xorps	 xmm0, xmm0
  0053a	f3 0f 11 85 7c
	02 00 00	 movss	 DWORD PTR mvp$25[rbp+28], xmm0

; 190  :             { 0.0f,         0.0f,           0.5f,       0.0f },

  00542	0f 57 c0	 xorps	 xmm0, xmm0
  00545	f3 0f 11 85 80
	02 00 00	 movss	 DWORD PTR mvp$25[rbp+32], xmm0
  0054d	0f 57 c0	 xorps	 xmm0, xmm0
  00550	f3 0f 11 85 84
	02 00 00	 movss	 DWORD PTR mvp$25[rbp+36], xmm0
  00558	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00560	f3 0f 11 85 88
	02 00 00	 movss	 DWORD PTR mvp$25[rbp+40], xmm0
  00568	0f 57 c0	 xorps	 xmm0, xmm0
  0056b	f3 0f 11 85 8c
	02 00 00	 movss	 DWORD PTR mvp$25[rbp+44], xmm0

; 191  :             { (R+L)/(L-R),  (T+B)/(B-T),    0.5f,       1.0f },

  00573	f3 0f 10 85 f4
	01 00 00	 movss	 xmm0, DWORD PTR R$22[rbp]
  0057b	f3 0f 58 85 d4
	01 00 00	 addss	 xmm0, DWORD PTR L$21[rbp]
  00583	f3 0f 10 8d d4
	01 00 00	 movss	 xmm1, DWORD PTR L$21[rbp]
  0058b	f3 0f 5c 8d f4
	01 00 00	 subss	 xmm1, DWORD PTR R$22[rbp]
  00593	f3 0f 5e c1	 divss	 xmm0, xmm1
  00597	f3 0f 11 85 90
	02 00 00	 movss	 DWORD PTR mvp$25[rbp+48], xmm0
  0059f	f3 0f 10 85 14
	02 00 00	 movss	 xmm0, DWORD PTR T$23[rbp]
  005a7	f3 0f 58 85 34
	02 00 00	 addss	 xmm0, DWORD PTR B$24[rbp]
  005af	f3 0f 10 8d 34
	02 00 00	 movss	 xmm1, DWORD PTR B$24[rbp]
  005b7	f3 0f 5c 8d 14
	02 00 00	 subss	 xmm1, DWORD PTR T$23[rbp]
  005bf	f3 0f 5e c1	 divss	 xmm0, xmm1
  005c3	f3 0f 11 85 94
	02 00 00	 movss	 DWORD PTR mvp$25[rbp+52], xmm0
  005cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  005d3	f3 0f 11 85 98
	02 00 00	 movss	 DWORD PTR mvp$25[rbp+56], xmm0
  005db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005e3	f3 0f 11 85 9c
	02 00 00	 movss	 DWORD PTR mvp$25[rbp+60], xmm0

; 192  :         };
; 193  :         memcpy(&constant_buffer->mvp, mvp, sizeof(mvp));

  005eb	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR constant_buffer$20[rbp]
  005f2	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  005f8	48 8d 95 60 02
	00 00		 lea	 rdx, QWORD PTR mvp$25[rbp]
  005ff	48 8b c8	 mov	 rcx, rax
  00602	e8 00 00 00 00	 call	 memcpy

; 194  :         ctx->Unmap(bd->pVertexConstantBuffer, 0);

  00607	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  0060b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0060e	45 33 c0	 xor	 r8d, r8d
  00611	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  00615	48 8b 51 38	 mov	 rdx, QWORD PTR [rcx+56]
  00619	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  0061d	ff 50 78	 call	 QWORD PTR [rax+120]

; 195  :     }
; 196  : 
; 197  :     // Backup DX state that will be modified to restore it afterwards (unfortunately this is very ugly looking and verbose. Close your eyes!)
; 198  :     struct BACKUP_DX11_STATE
; 199  :     {
; 200  :         UINT                        ScissorRectsCount, ViewportsCount;
; 201  :         D3D11_RECT                  ScissorRects[D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE];
; 202  :         D3D11_VIEWPORT              Viewports[D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE];
; 203  :         ID3D11RasterizerState*      RS;
; 204  :         ID3D11BlendState*           BlendState;
; 205  :         FLOAT                       BlendFactor[4];
; 206  :         UINT                        SampleMask;
; 207  :         UINT                        StencilRef;
; 208  :         ID3D11DepthStencilState*    DepthStencilState;
; 209  :         ID3D11ShaderResourceView*   PSShaderResource;
; 210  :         ID3D11SamplerState*         PSSampler;
; 211  :         ID3D11PixelShader*          PS;
; 212  :         ID3D11VertexShader*         VS;
; 213  :         ID3D11GeometryShader*       GS;
; 214  :         UINT                        PSInstancesCount, VSInstancesCount, GSInstancesCount;
; 215  :         ID3D11ClassInstance         *PSInstances[256], *VSInstances[256], *GSInstances[256];   // 256 is max according to PSSetShader documentation
; 216  :         D3D11_PRIMITIVE_TOPOLOGY    PrimitiveTopology;
; 217  :         ID3D11Buffer*               IndexBuffer, *VertexBuffer, *VSConstantBuffer;
; 218  :         UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;
; 219  :         DXGI_FORMAT                 IndexBufferFormat;
; 220  :         ID3D11InputLayout*          InputLayout;
; 221  :     };
; 222  :     BACKUP_DX11_STATE old = {};

  00620	48 8d 85 c0 02
	00 00		 lea	 rax, QWORD PTR old$[rbp]
  00627	48 8b f8	 mov	 rdi, rax
  0062a	33 c0		 xor	 eax, eax
  0062c	b9 28 1b 00 00	 mov	 ecx, 6952		; 00001b28H
  00631	f3 aa		 rep stosb

; 223  :     old.ScissorRectsCount = old.ViewportsCount = D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE;

  00633	c7 85 c4 02 00
	00 10 00 00 00	 mov	 DWORD PTR old$[rbp+4], 16
  0063d	8b 85 c4 02 00
	00		 mov	 eax, DWORD PTR old$[rbp+4]
  00643	89 85 c0 02 00
	00		 mov	 DWORD PTR old$[rbp], eax

; 224  :     ctx->RSGetScissorRects(&old.ScissorRectsCount, old.ScissorRects);

  00649	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  0064d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00650	4c 8d 85 c8 02
	00 00		 lea	 r8, QWORD PTR old$[rbp+8]
  00657	48 8d 95 c0 02
	00 00		 lea	 rdx, QWORD PTR old$[rbp]
  0065e	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00662	ff 90 00 03 00
	00		 call	 QWORD PTR [rax+768]

; 225  :     ctx->RSGetViewports(&old.ViewportsCount, old.Viewports);

  00668	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  0066c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0066f	4c 8d 85 c8 03
	00 00		 lea	 r8, QWORD PTR old$[rbp+264]
  00676	48 8d 95 c4 02
	00 00		 lea	 rdx, QWORD PTR old$[rbp+4]
  0067d	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00681	ff 90 f8 02 00
	00		 call	 QWORD PTR [rax+760]

; 226  :     ctx->RSGetState(&old.RS);

  00687	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  0068b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0068e	48 8d 95 48 05
	00 00		 lea	 rdx, QWORD PTR old$[rbp+648]
  00695	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00699	ff 90 f0 02 00
	00		 call	 QWORD PTR [rax+752]

; 227  :     ctx->OMGetBlendState(&old.BlendState, old.BlendFactor, &old.SampleMask);

  0069f	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  006a3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006a6	4c 8d 8d 68 05
	00 00		 lea	 r9, QWORD PTR old$[rbp+680]
  006ad	4c 8d 85 58 05
	00 00		 lea	 r8, QWORD PTR old$[rbp+664]
  006b4	48 8d 95 50 05
	00 00		 lea	 rdx, QWORD PTR old$[rbp+656]
  006bb	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  006bf	ff 90 d8 02 00
	00		 call	 QWORD PTR [rax+728]

; 228  :     ctx->OMGetDepthStencilState(&old.DepthStencilState, &old.StencilRef);

  006c5	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  006c9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006cc	4c 8d 85 6c 05
	00 00		 lea	 r8, QWORD PTR old$[rbp+684]
  006d3	48 8d 95 70 05
	00 00		 lea	 rdx, QWORD PTR old$[rbp+688]
  006da	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  006de	ff 90 e0 02 00
	00		 call	 QWORD PTR [rax+736]

; 229  :     ctx->PSGetShaderResources(0, 1, &old.PSShaderResource);

  006e4	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  006e8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006eb	4c 8d 8d 78 05
	00 00		 lea	 r9, QWORD PTR old$[rbp+696]
  006f2	41 b8 01 00 00
	00		 mov	 r8d, 1
  006f8	33 d2		 xor	 edx, edx
  006fa	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  006fe	ff 90 48 02 00
	00		 call	 QWORD PTR [rax+584]

; 230  :     ctx->PSGetSamplers(0, 1, &old.PSSampler);

  00704	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00708	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0070b	4c 8d 8d 80 05
	00 00		 lea	 r9, QWORD PTR old$[rbp+704]
  00712	41 b8 01 00 00
	00		 mov	 r8d, 1
  00718	33 d2		 xor	 edx, edx
  0071a	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  0071e	ff 90 58 02 00
	00		 call	 QWORD PTR [rax+600]

; 231  :     old.PSInstancesCount = old.VSInstancesCount = old.GSInstancesCount = 256;

  00724	c7 85 a8 05 00
	00 00 01 00 00	 mov	 DWORD PTR old$[rbp+744], 256 ; 00000100H
  0072e	8b 85 a8 05 00
	00		 mov	 eax, DWORD PTR old$[rbp+744]
  00734	89 85 a4 05 00
	00		 mov	 DWORD PTR old$[rbp+740], eax
  0073a	8b 85 a4 05 00
	00		 mov	 eax, DWORD PTR old$[rbp+740]
  00740	89 85 a0 05 00
	00		 mov	 DWORD PTR old$[rbp+736], eax

; 232  :     ctx->PSGetShader(&old.PS, old.PSInstances, &old.PSInstancesCount);

  00746	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  0074a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0074d	4c 8d 8d a0 05
	00 00		 lea	 r9, QWORD PTR old$[rbp+736]
  00754	4c 8d 85 b0 05
	00 00		 lea	 r8, QWORD PTR old$[rbp+752]
  0075b	48 8d 95 88 05
	00 00		 lea	 rdx, QWORD PTR old$[rbp+712]
  00762	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00766	ff 90 50 02 00
	00		 call	 QWORD PTR [rax+592]

; 233  :     ctx->VSGetShader(&old.VS, old.VSInstances, &old.VSInstancesCount);

  0076c	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00770	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00773	4c 8d 8d a4 05
	00 00		 lea	 r9, QWORD PTR old$[rbp+740]
  0077a	4c 8d 85 b0 0d
	00 00		 lea	 r8, QWORD PTR old$[rbp+2800]
  00781	48 8d 95 90 05
	00 00		 lea	 rdx, QWORD PTR old$[rbp+720]
  00788	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  0078c	ff 90 60 02 00
	00		 call	 QWORD PTR [rax+608]

; 234  :     ctx->VSGetConstantBuffers(0, 1, &old.VSConstantBuffer);

  00792	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00796	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00799	4c 8d 8d c8 1d
	00 00		 lea	 r9, QWORD PTR old$[rbp+6920]
  007a0	41 b8 01 00 00
	00		 mov	 r8d, 1
  007a6	33 d2		 xor	 edx, edx
  007a8	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  007ac	ff 90 40 02 00
	00		 call	 QWORD PTR [rax+576]

; 235  :     ctx->GSGetShader(&old.GS, old.GSInstances, &old.GSInstancesCount);

  007b2	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  007b6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  007b9	4c 8d 8d a8 05
	00 00		 lea	 r9, QWORD PTR old$[rbp+744]
  007c0	4c 8d 85 b0 15
	00 00		 lea	 r8, QWORD PTR old$[rbp+4848]
  007c7	48 8d 95 98 05
	00 00		 lea	 rdx, QWORD PTR old$[rbp+728]
  007ce	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  007d2	ff 90 90 02 00
	00		 call	 QWORD PTR [rax+656]

; 236  : 
; 237  :     ctx->IAGetPrimitiveTopology(&old.PrimitiveTopology);

  007d8	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  007dc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  007df	48 8d 95 b0 1d
	00 00		 lea	 rdx, QWORD PTR old$[rbp+6896]
  007e6	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  007ea	ff 90 98 02 00
	00		 call	 QWORD PTR [rax+664]

; 238  :     ctx->IAGetIndexBuffer(&old.IndexBuffer, &old.IndexBufferFormat, &old.IndexBufferOffset);

  007f0	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  007f4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  007f7	4c 8d 8d d0 1d
	00 00		 lea	 r9, QWORD PTR old$[rbp+6928]
  007fe	4c 8d 85 dc 1d
	00 00		 lea	 r8, QWORD PTR old$[rbp+6940]
  00805	48 8d 95 b8 1d
	00 00		 lea	 rdx, QWORD PTR old$[rbp+6904]
  0080c	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00810	ff 90 80 02 00
	00		 call	 QWORD PTR [rax+640]

; 239  :     ctx->IAGetVertexBuffers(0, 1, &old.VertexBuffer, &old.VertexBufferStride, &old.VertexBufferOffset);

  00816	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  0081a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0081d	48 8d 8d d8 1d
	00 00		 lea	 rcx, QWORD PTR old$[rbp+6936]
  00824	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00829	48 8d 8d d4 1d
	00 00		 lea	 rcx, QWORD PTR old$[rbp+6932]
  00830	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00835	4c 8d 8d c0 1d
	00 00		 lea	 r9, QWORD PTR old$[rbp+6912]
  0083c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00842	33 d2		 xor	 edx, edx
  00844	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00848	ff 90 78 02 00
	00		 call	 QWORD PTR [rax+632]

; 240  :     ctx->IAGetInputLayout(&old.InputLayout);

  0084e	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00852	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00855	48 8d 95 e0 1d
	00 00		 lea	 rdx, QWORD PTR old$[rbp+6944]
  0085c	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00860	ff 90 70 02 00
	00		 call	 QWORD PTR [rax+624]

; 241  : 
; 242  :     // Setup desired DX state
; 243  :     ImGui_ImplDX11_SetupRenderState(draw_data, ctx);

  00866	48 8b 55 28	 mov	 rdx, QWORD PTR ctx$[rbp]
  0086a	48 8b 8d e0 25
	00 00		 mov	 rcx, QWORD PTR draw_data$[rbp]
  00871	e8 00 00 00 00	 call	 ?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z ; ImGui_ImplDX11_SetupRenderState

; 244  : 
; 245  :     // Render command lists
; 246  :     // (Because we merged all buffers into a single one, we maintain our own offset into them)
; 247  :     int global_idx_offset = 0;

  00876	c7 85 04 1e 00
	00 00 00 00 00	 mov	 DWORD PTR global_idx_offset$[rbp], 0

; 248  :     int global_vtx_offset = 0;

  00880	c7 85 24 1e 00
	00 00 00 00 00	 mov	 DWORD PTR global_vtx_offset$[rbp], 0

; 249  :     ImVec2 clip_off = draw_data->DisplayPos;

  0088a	48 8b 85 e0 25
	00 00		 mov	 rax, QWORD PTR draw_data$[rbp]
  00891	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00895	48 89 85 48 1e
	00 00		 mov	 QWORD PTR clip_off$[rbp], rax

; 250  :     for (int n = 0; n < draw_data->CmdListsCount; n++)

  0089c	c7 85 64 1e 00
	00 00 00 00 00	 mov	 DWORD PTR n$26[rbp], 0
  008a6	eb 0e		 jmp	 SHORT $LN7@ImGui_Impl
$LN5@ImGui_Impl:
  008a8	8b 85 64 1e 00
	00		 mov	 eax, DWORD PTR n$26[rbp]
  008ae	ff c0		 inc	 eax
  008b0	89 85 64 1e 00
	00		 mov	 DWORD PTR n$26[rbp], eax
$LN7@ImGui_Impl:
  008b6	48 8b 85 e0 25
	00 00		 mov	 rax, QWORD PTR draw_data$[rbp]
  008bd	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  008c0	39 85 64 1e 00
	00		 cmp	 DWORD PTR n$26[rbp], eax
  008c6	0f 8d 56 02 00
	00		 jge	 $LN6@ImGui_Impl

; 251  :     {
; 252  :         const ImDrawList* cmd_list = draw_data->CmdLists[n];

  008cc	48 63 85 64 1e
	00 00		 movsxd	 rax, DWORD PTR n$26[rbp]
  008d3	48 8b 8d e0 25
	00 00		 mov	 rcx, QWORD PTR draw_data$[rbp]
  008da	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  008de	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  008e2	48 89 85 88 1e
	00 00		 mov	 QWORD PTR cmd_list$27[rbp], rax

; 253  :         for (int cmd_i = 0; cmd_i < cmd_list->CmdBuffer.Size; cmd_i++)

  008e9	c7 85 a4 1e 00
	00 00 00 00 00	 mov	 DWORD PTR cmd_i$28[rbp], 0
  008f3	eb 0e		 jmp	 SHORT $LN10@ImGui_Impl
$LN8@ImGui_Impl:
  008f5	8b 85 a4 1e 00
	00		 mov	 eax, DWORD PTR cmd_i$28[rbp]
  008fb	ff c0		 inc	 eax
  008fd	89 85 a4 1e 00
	00		 mov	 DWORD PTR cmd_i$28[rbp], eax
$LN10@ImGui_Impl:
  00903	48 8b 85 88 1e
	00 00		 mov	 rax, QWORD PTR cmd_list$27[rbp]
  0090a	8b 00		 mov	 eax, DWORD PTR [rax]
  0090c	39 85 a4 1e 00
	00		 cmp	 DWORD PTR cmd_i$28[rbp], eax
  00912	0f 8d d1 01 00
	00		 jge	 $LN9@ImGui_Impl

; 254  :         {
; 255  :             const ImDrawCmd* pcmd = &cmd_list->CmdBuffer[cmd_i];

  00918	48 8b 85 88 1e
	00 00		 mov	 rax, QWORD PTR cmd_list$27[rbp]
  0091f	8b 95 a4 1e 00
	00		 mov	 edx, DWORD PTR cmd_i$28[rbp]
  00925	48 8b c8	 mov	 rcx, rax
  00928	e8 00 00 00 00	 call	 ??A?$ImVector@UImDrawCmd@@@@QEBAAEBUImDrawCmd@@H@Z ; ImVector<ImDrawCmd>::operator[]
  0092d	48 89 85 c8 1e
	00 00		 mov	 QWORD PTR pcmd$29[rbp], rax

; 256  :             if (pcmd->UserCallback != nullptr)

  00934	48 8b 85 c8 1e
	00 00		 mov	 rax, QWORD PTR pcmd$29[rbp]
  0093b	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  00940	74 3d		 je	 SHORT $LN30@ImGui_Impl

; 257  :             {
; 258  :                 // User callback, registered via ImDrawList::AddCallback()
; 259  :                 // (ImDrawCallback_ResetRenderState is a special callback value used by the user to request the renderer to reset render state.)
; 260  :                 if (pcmd->UserCallback == ImDrawCallback_ResetRenderState)

  00942	48 8b 85 c8 1e
	00 00		 mov	 rax, QWORD PTR pcmd$29[rbp]
  00949	48 83 78 28 ff	 cmp	 QWORD PTR [rax+40], -1
  0094e	75 12		 jne	 SHORT $LN32@ImGui_Impl

; 261  :                     ImGui_ImplDX11_SetupRenderState(draw_data, ctx);

  00950	48 8b 55 28	 mov	 rdx, QWORD PTR ctx$[rbp]
  00954	48 8b 8d e0 25
	00 00		 mov	 rcx, QWORD PTR draw_data$[rbp]
  0095b	e8 00 00 00 00	 call	 ?ImGui_ImplDX11_SetupRenderState@@YAXPEAUImDrawData@@PEAUID3D11DeviceContext@@@Z ; ImGui_ImplDX11_SetupRenderState

; 262  :                 else

  00960	eb 18		 jmp	 SHORT $LN33@ImGui_Impl
$LN32@ImGui_Impl:

; 263  :                     pcmd->UserCallback(cmd_list, pcmd);

  00962	48 8b 95 c8 1e
	00 00		 mov	 rdx, QWORD PTR pcmd$29[rbp]
  00969	48 8b 8d 88 1e
	00 00		 mov	 rcx, QWORD PTR cmd_list$27[rbp]
  00970	48 8b 85 c8 1e
	00 00		 mov	 rax, QWORD PTR pcmd$29[rbp]
  00977	ff 50 28	 call	 QWORD PTR [rax+40]
$LN33@ImGui_Impl:

; 264  :             }
; 265  :             else

  0097a	e9 65 01 00 00	 jmp	 $LN31@ImGui_Impl
$LN30@ImGui_Impl:

; 266  :             {
; 267  :                 // Project scissor/clipping rectangles into framebuffer space
; 268  :                 ImVec2 clip_min(pcmd->ClipRect.x - clip_off.x, pcmd->ClipRect.y - clip_off.y);

  0097f	48 8b 85 c8 1e
	00 00		 mov	 rax, QWORD PTR pcmd$29[rbp]
  00986	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  0098b	f3 0f 5c 85 4c
	1e 00 00	 subss	 xmm0, DWORD PTR clip_off$[rbp+4]
  00993	48 8b 85 c8 1e
	00 00		 mov	 rax, QWORD PTR pcmd$29[rbp]
  0099a	f3 0f 10 08	 movss	 xmm1, DWORD PTR [rax]
  0099e	f3 0f 5c 8d 48
	1e 00 00	 subss	 xmm1, DWORD PTR clip_off$[rbp]
  009a6	0f 28 d0	 movaps	 xmm2, xmm0
  009a9	48 8d 8d e8 1e
	00 00		 lea	 rcx, QWORD PTR clip_min$30[rbp]
  009b0	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 269  :                 ImVec2 clip_max(pcmd->ClipRect.z - clip_off.x, pcmd->ClipRect.w - clip_off.y);

  009b5	48 8b 85 c8 1e
	00 00		 mov	 rax, QWORD PTR pcmd$29[rbp]
  009bc	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [rax+12]
  009c1	f3 0f 5c 85 4c
	1e 00 00	 subss	 xmm0, DWORD PTR clip_off$[rbp+4]
  009c9	48 8b 85 c8 1e
	00 00		 mov	 rax, QWORD PTR pcmd$29[rbp]
  009d0	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [rax+8]
  009d5	f3 0f 5c 8d 48
	1e 00 00	 subss	 xmm1, DWORD PTR clip_off$[rbp]
  009dd	0f 28 d0	 movaps	 xmm2, xmm0
  009e0	48 8d 8d 08 1f
	00 00		 lea	 rcx, QWORD PTR clip_max$31[rbp]
  009e7	e8 00 00 00 00	 call	 ??0ImVec2@@QEAA@MM@Z	; ImVec2::ImVec2

; 270  :                 if (clip_max.x <= clip_min.x || clip_max.y <= clip_min.y)

  009ec	f3 0f 10 85 e8
	1e 00 00	 movss	 xmm0, DWORD PTR clip_min$30[rbp]
  009f4	0f 2f 85 08 1f
	00 00		 comiss	 xmm0, DWORD PTR clip_max$31[rbp]
  009fb	73 11		 jae	 SHORT $LN35@ImGui_Impl
  009fd	f3 0f 10 85 ec
	1e 00 00	 movss	 xmm0, DWORD PTR clip_min$30[rbp+4]
  00a05	0f 2f 85 0c 1f
	00 00		 comiss	 xmm0, DWORD PTR clip_max$31[rbp+4]
  00a0c	72 05		 jb	 SHORT $LN34@ImGui_Impl
$LN35@ImGui_Impl:

; 271  :                     continue;

  00a0e	e9 e2 fe ff ff	 jmp	 $LN8@ImGui_Impl
$LN34@ImGui_Impl:

; 272  : 
; 273  :                 // Apply scissor/clipping rectangle
; 274  :                 const D3D11_RECT r = { (LONG)clip_min.x, (LONG)clip_min.y, (LONG)clip_max.x, (LONG)clip_max.y };

  00a13	f3 0f 2c 85 e8
	1e 00 00	 cvttss2si eax, DWORD PTR clip_min$30[rbp]
  00a1b	89 85 28 1f 00
	00		 mov	 DWORD PTR r$32[rbp], eax
  00a21	f3 0f 2c 85 ec
	1e 00 00	 cvttss2si eax, DWORD PTR clip_min$30[rbp+4]
  00a29	89 85 2c 1f 00
	00		 mov	 DWORD PTR r$32[rbp+4], eax
  00a2f	f3 0f 2c 85 08
	1f 00 00	 cvttss2si eax, DWORD PTR clip_max$31[rbp]
  00a37	89 85 30 1f 00
	00		 mov	 DWORD PTR r$32[rbp+8], eax
  00a3d	f3 0f 2c 85 0c
	1f 00 00	 cvttss2si eax, DWORD PTR clip_max$31[rbp+4]
  00a45	89 85 34 1f 00
	00		 mov	 DWORD PTR r$32[rbp+12], eax

; 275  :                 ctx->RSSetScissorRects(1, &r);

  00a4b	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00a4f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00a52	4c 8d 85 28 1f
	00 00		 lea	 r8, QWORD PTR r$32[rbp]
  00a59	ba 01 00 00 00	 mov	 edx, 1
  00a5e	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00a62	ff 90 68 01 00
	00		 call	 QWORD PTR [rax+360]

; 276  : 
; 277  :                 // Bind texture, Draw
; 278  :                 ID3D11ShaderResourceView* texture_srv = (ID3D11ShaderResourceView*)pcmd->GetTexID();

  00a68	48 8b 8d c8 1e
	00 00		 mov	 rcx, QWORD PTR pcmd$29[rbp]
  00a6f	e8 00 00 00 00	 call	 ?GetTexID@ImDrawCmd@@QEBAPEAXXZ ; ImDrawCmd::GetTexID
  00a74	48 89 85 58 1f
	00 00		 mov	 QWORD PTR texture_srv$33[rbp], rax

; 279  :                 ctx->PSSetShaderResources(0, 1, &texture_srv);

  00a7b	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00a7f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00a82	4c 8d 8d 58 1f
	00 00		 lea	 r9, QWORD PTR texture_srv$33[rbp]
  00a89	41 b8 01 00 00
	00		 mov	 r8d, 1
  00a8f	33 d2		 xor	 edx, edx
  00a91	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00a95	ff 50 40	 call	 QWORD PTR [rax+64]

; 280  :                 ctx->DrawIndexed(pcmd->ElemCount, pcmd->IdxOffset + global_idx_offset, pcmd->VtxOffset + global_vtx_offset);

  00a98	48 8b 85 c8 1e
	00 00		 mov	 rax, QWORD PTR pcmd$29[rbp]
  00a9f	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00aa2	03 85 24 1e 00
	00		 add	 eax, DWORD PTR global_vtx_offset$[rbp]
  00aa8	48 8b 8d c8 1e
	00 00		 mov	 rcx, QWORD PTR pcmd$29[rbp]
  00aaf	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  00ab2	03 8d 04 1e 00
	00		 add	 ecx, DWORD PTR global_idx_offset$[rbp]
  00ab8	48 8b 55 28	 mov	 rdx, QWORD PTR ctx$[rbp]
  00abc	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00abf	48 89 95 a8 25
	00 00		 mov	 QWORD PTR tv875[rbp], rdx
  00ac6	44 8b c8	 mov	 r9d, eax
  00ac9	44 8b c1	 mov	 r8d, ecx
  00acc	48 8b 85 c8 1e
	00 00		 mov	 rax, QWORD PTR pcmd$29[rbp]
  00ad3	8b 50 20	 mov	 edx, DWORD PTR [rax+32]
  00ad6	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00ada	48 8b 85 a8 25
	00 00		 mov	 rax, QWORD PTR tv875[rbp]
  00ae1	ff 50 60	 call	 QWORD PTR [rax+96]
$LN31@ImGui_Impl:

; 281  :             }
; 282  :         }

  00ae4	e9 0c fe ff ff	 jmp	 $LN8@ImGui_Impl
$LN9@ImGui_Impl:

; 283  :         global_idx_offset += cmd_list->IdxBuffer.Size;

  00ae9	48 8b 85 88 1e
	00 00		 mov	 rax, QWORD PTR cmd_list$27[rbp]
  00af0	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00af3	8b 8d 04 1e 00
	00		 mov	 ecx, DWORD PTR global_idx_offset$[rbp]
  00af9	03 c8		 add	 ecx, eax
  00afb	8b c1		 mov	 eax, ecx
  00afd	89 85 04 1e 00
	00		 mov	 DWORD PTR global_idx_offset$[rbp], eax

; 284  :         global_vtx_offset += cmd_list->VtxBuffer.Size;

  00b03	48 8b 85 88 1e
	00 00		 mov	 rax, QWORD PTR cmd_list$27[rbp]
  00b0a	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  00b0d	8b 8d 24 1e 00
	00		 mov	 ecx, DWORD PTR global_vtx_offset$[rbp]
  00b13	03 c8		 add	 ecx, eax
  00b15	8b c1		 mov	 eax, ecx
  00b17	89 85 24 1e 00
	00		 mov	 DWORD PTR global_vtx_offset$[rbp], eax

; 285  :     }

  00b1d	e9 86 fd ff ff	 jmp	 $LN5@ImGui_Impl
$LN6@ImGui_Impl:

; 286  : 
; 287  :     // Restore modified DX state
; 288  :     ctx->RSSetScissorRects(old.ScissorRectsCount, old.ScissorRects);

  00b22	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00b26	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00b29	4c 8d 85 c8 02
	00 00		 lea	 r8, QWORD PTR old$[rbp+8]
  00b30	8b 95 c0 02 00
	00		 mov	 edx, DWORD PTR old$[rbp]
  00b36	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00b3a	ff 90 68 01 00
	00		 call	 QWORD PTR [rax+360]

; 289  :     ctx->RSSetViewports(old.ViewportsCount, old.Viewports);

  00b40	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00b44	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00b47	4c 8d 85 c8 03
	00 00		 lea	 r8, QWORD PTR old$[rbp+264]
  00b4e	8b 95 c4 02 00
	00		 mov	 edx, DWORD PTR old$[rbp+4]
  00b54	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00b58	ff 90 60 01 00
	00		 call	 QWORD PTR [rax+352]

; 290  :     ctx->RSSetState(old.RS); if (old.RS) old.RS->Release();

  00b5e	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00b62	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00b65	48 8b 95 48 05
	00 00		 mov	 rdx, QWORD PTR old$[rbp+648]
  00b6c	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00b70	ff 90 58 01 00
	00		 call	 QWORD PTR [rax+344]
  00b76	48 83 bd 48 05
	00 00 00	 cmp	 QWORD PTR old$[rbp+648], 0
  00b7e	74 14		 je	 SHORT $LN36@ImGui_Impl
  00b80	48 8b 85 48 05
	00 00		 mov	 rax, QWORD PTR old$[rbp+648]
  00b87	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00b8a	48 8b 8d 48 05
	00 00		 mov	 rcx, QWORD PTR old$[rbp+648]
  00b91	ff 50 10	 call	 QWORD PTR [rax+16]
$LN36@ImGui_Impl:

; 291  :     ctx->OMSetBlendState(old.BlendState, old.BlendFactor, old.SampleMask); if (old.BlendState) old.BlendState->Release();

  00b94	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00b98	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00b9b	44 8b 8d 68 05
	00 00		 mov	 r9d, DWORD PTR old$[rbp+680]
  00ba2	4c 8d 85 58 05
	00 00		 lea	 r8, QWORD PTR old$[rbp+664]
  00ba9	48 8b 95 50 05
	00 00		 mov	 rdx, QWORD PTR old$[rbp+656]
  00bb0	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00bb4	ff 90 18 01 00
	00		 call	 QWORD PTR [rax+280]
  00bba	48 83 bd 50 05
	00 00 00	 cmp	 QWORD PTR old$[rbp+656], 0
  00bc2	74 14		 je	 SHORT $LN37@ImGui_Impl
  00bc4	48 8b 85 50 05
	00 00		 mov	 rax, QWORD PTR old$[rbp+656]
  00bcb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00bce	48 8b 8d 50 05
	00 00		 mov	 rcx, QWORD PTR old$[rbp+656]
  00bd5	ff 50 10	 call	 QWORD PTR [rax+16]
$LN37@ImGui_Impl:

; 292  :     ctx->OMSetDepthStencilState(old.DepthStencilState, old.StencilRef); if (old.DepthStencilState) old.DepthStencilState->Release();

  00bd8	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00bdc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00bdf	44 8b 85 6c 05
	00 00		 mov	 r8d, DWORD PTR old$[rbp+684]
  00be6	48 8b 95 70 05
	00 00		 mov	 rdx, QWORD PTR old$[rbp+688]
  00bed	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00bf1	ff 90 20 01 00
	00		 call	 QWORD PTR [rax+288]
  00bf7	48 83 bd 70 05
	00 00 00	 cmp	 QWORD PTR old$[rbp+688], 0
  00bff	74 14		 je	 SHORT $LN38@ImGui_Impl
  00c01	48 8b 85 70 05
	00 00		 mov	 rax, QWORD PTR old$[rbp+688]
  00c08	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00c0b	48 8b 8d 70 05
	00 00		 mov	 rcx, QWORD PTR old$[rbp+688]
  00c12	ff 50 10	 call	 QWORD PTR [rax+16]
$LN38@ImGui_Impl:

; 293  :     ctx->PSSetShaderResources(0, 1, &old.PSShaderResource); if (old.PSShaderResource) old.PSShaderResource->Release();

  00c15	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00c19	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00c1c	4c 8d 8d 78 05
	00 00		 lea	 r9, QWORD PTR old$[rbp+696]
  00c23	41 b8 01 00 00
	00		 mov	 r8d, 1
  00c29	33 d2		 xor	 edx, edx
  00c2b	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00c2f	ff 50 40	 call	 QWORD PTR [rax+64]
  00c32	48 83 bd 78 05
	00 00 00	 cmp	 QWORD PTR old$[rbp+696], 0
  00c3a	74 14		 je	 SHORT $LN39@ImGui_Impl
  00c3c	48 8b 85 78 05
	00 00		 mov	 rax, QWORD PTR old$[rbp+696]
  00c43	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00c46	48 8b 8d 78 05
	00 00		 mov	 rcx, QWORD PTR old$[rbp+696]
  00c4d	ff 50 10	 call	 QWORD PTR [rax+16]
$LN39@ImGui_Impl:

; 294  :     ctx->PSSetSamplers(0, 1, &old.PSSampler); if (old.PSSampler) old.PSSampler->Release();

  00c50	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00c54	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00c57	4c 8d 8d 80 05
	00 00		 lea	 r9, QWORD PTR old$[rbp+704]
  00c5e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00c64	33 d2		 xor	 edx, edx
  00c66	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00c6a	ff 50 50	 call	 QWORD PTR [rax+80]
  00c6d	48 83 bd 80 05
	00 00 00	 cmp	 QWORD PTR old$[rbp+704], 0
  00c75	74 14		 je	 SHORT $LN40@ImGui_Impl
  00c77	48 8b 85 80 05
	00 00		 mov	 rax, QWORD PTR old$[rbp+704]
  00c7e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00c81	48 8b 8d 80 05
	00 00		 mov	 rcx, QWORD PTR old$[rbp+704]
  00c88	ff 50 10	 call	 QWORD PTR [rax+16]
$LN40@ImGui_Impl:

; 295  :     ctx->PSSetShader(old.PS, old.PSInstances, old.PSInstancesCount); if (old.PS) old.PS->Release();

  00c8b	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00c8f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00c92	44 8b 8d a0 05
	00 00		 mov	 r9d, DWORD PTR old$[rbp+736]
  00c99	4c 8d 85 b0 05
	00 00		 lea	 r8, QWORD PTR old$[rbp+752]
  00ca0	48 8b 95 88 05
	00 00		 mov	 rdx, QWORD PTR old$[rbp+712]
  00ca7	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00cab	ff 50 48	 call	 QWORD PTR [rax+72]
  00cae	48 83 bd 88 05
	00 00 00	 cmp	 QWORD PTR old$[rbp+712], 0
  00cb6	74 14		 je	 SHORT $LN41@ImGui_Impl
  00cb8	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR old$[rbp+712]
  00cbf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00cc2	48 8b 8d 88 05
	00 00		 mov	 rcx, QWORD PTR old$[rbp+712]
  00cc9	ff 50 10	 call	 QWORD PTR [rax+16]
$LN41@ImGui_Impl:

; 296  :     for (UINT i = 0; i < old.PSInstancesCount; i++) if (old.PSInstances[i]) old.PSInstances[i]->Release();

  00ccc	c7 85 74 1f 00
	00 00 00 00 00	 mov	 DWORD PTR i$34[rbp], 0
  00cd6	eb 0e		 jmp	 SHORT $LN13@ImGui_Impl
$LN11@ImGui_Impl:
  00cd8	8b 85 74 1f 00
	00		 mov	 eax, DWORD PTR i$34[rbp]
  00cde	ff c0		 inc	 eax
  00ce0	89 85 74 1f 00
	00		 mov	 DWORD PTR i$34[rbp], eax
$LN13@ImGui_Impl:
  00ce6	8b 85 a0 05 00
	00		 mov	 eax, DWORD PTR old$[rbp+736]
  00cec	39 85 74 1f 00
	00		 cmp	 DWORD PTR i$34[rbp], eax
  00cf2	73 35		 jae	 SHORT $LN12@ImGui_Impl
  00cf4	8b 85 74 1f 00
	00		 mov	 eax, DWORD PTR i$34[rbp]
  00cfa	48 83 bc c5 b0
	05 00 00 00	 cmp	 QWORD PTR old$[rbp+rax*8+752], 0
  00d03	74 22		 je	 SHORT $LN42@ImGui_Impl
  00d05	8b 85 74 1f 00
	00		 mov	 eax, DWORD PTR i$34[rbp]
  00d0b	48 8b 84 c5 b0
	05 00 00	 mov	 rax, QWORD PTR old$[rbp+rax*8+752]
  00d13	8b 8d 74 1f 00
	00		 mov	 ecx, DWORD PTR i$34[rbp]
  00d19	48 8b 8c cd b0
	05 00 00	 mov	 rcx, QWORD PTR old$[rbp+rcx*8+752]
  00d21	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00d24	ff 50 10	 call	 QWORD PTR [rax+16]
$LN42@ImGui_Impl:

; 297  :     ctx->VSSetShader(old.VS, old.VSInstances, old.VSInstancesCount); if (old.VS) old.VS->Release();

  00d27	eb af		 jmp	 SHORT $LN11@ImGui_Impl
$LN12@ImGui_Impl:
  00d29	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00d2d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00d30	44 8b 8d a4 05
	00 00		 mov	 r9d, DWORD PTR old$[rbp+740]
  00d37	4c 8d 85 b0 0d
	00 00		 lea	 r8, QWORD PTR old$[rbp+2800]
  00d3e	48 8b 95 90 05
	00 00		 mov	 rdx, QWORD PTR old$[rbp+720]
  00d45	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00d49	ff 50 58	 call	 QWORD PTR [rax+88]
  00d4c	48 83 bd 90 05
	00 00 00	 cmp	 QWORD PTR old$[rbp+720], 0
  00d54	74 14		 je	 SHORT $LN43@ImGui_Impl
  00d56	48 8b 85 90 05
	00 00		 mov	 rax, QWORD PTR old$[rbp+720]
  00d5d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00d60	48 8b 8d 90 05
	00 00		 mov	 rcx, QWORD PTR old$[rbp+720]
  00d67	ff 50 10	 call	 QWORD PTR [rax+16]
$LN43@ImGui_Impl:

; 298  :     ctx->VSSetConstantBuffers(0, 1, &old.VSConstantBuffer); if (old.VSConstantBuffer) old.VSConstantBuffer->Release();

  00d6a	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00d6e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00d71	4c 8d 8d c8 1d
	00 00		 lea	 r9, QWORD PTR old$[rbp+6920]
  00d78	41 b8 01 00 00
	00		 mov	 r8d, 1
  00d7e	33 d2		 xor	 edx, edx
  00d80	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00d84	ff 50 38	 call	 QWORD PTR [rax+56]
  00d87	48 83 bd c8 1d
	00 00 00	 cmp	 QWORD PTR old$[rbp+6920], 0
  00d8f	74 14		 je	 SHORT $LN44@ImGui_Impl
  00d91	48 8b 85 c8 1d
	00 00		 mov	 rax, QWORD PTR old$[rbp+6920]
  00d98	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00d9b	48 8b 8d c8 1d
	00 00		 mov	 rcx, QWORD PTR old$[rbp+6920]
  00da2	ff 50 10	 call	 QWORD PTR [rax+16]
$LN44@ImGui_Impl:

; 299  :     ctx->GSSetShader(old.GS, old.GSInstances, old.GSInstancesCount); if (old.GS) old.GS->Release();

  00da5	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00da9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00dac	44 8b 8d a8 05
	00 00		 mov	 r9d, DWORD PTR old$[rbp+744]
  00db3	4c 8d 85 b0 15
	00 00		 lea	 r8, QWORD PTR old$[rbp+4848]
  00dba	48 8b 95 98 05
	00 00		 mov	 rdx, QWORD PTR old$[rbp+728]
  00dc1	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00dc5	ff 90 b8 00 00
	00		 call	 QWORD PTR [rax+184]
  00dcb	48 83 bd 98 05
	00 00 00	 cmp	 QWORD PTR old$[rbp+728], 0
  00dd3	74 14		 je	 SHORT $LN45@ImGui_Impl
  00dd5	48 8b 85 98 05
	00 00		 mov	 rax, QWORD PTR old$[rbp+728]
  00ddc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00ddf	48 8b 8d 98 05
	00 00		 mov	 rcx, QWORD PTR old$[rbp+728]
  00de6	ff 50 10	 call	 QWORD PTR [rax+16]
$LN45@ImGui_Impl:

; 300  :     for (UINT i = 0; i < old.VSInstancesCount; i++) if (old.VSInstances[i]) old.VSInstances[i]->Release();

  00de9	c7 85 94 1f 00
	00 00 00 00 00	 mov	 DWORD PTR i$35[rbp], 0
  00df3	eb 0e		 jmp	 SHORT $LN16@ImGui_Impl
$LN14@ImGui_Impl:
  00df5	8b 85 94 1f 00
	00		 mov	 eax, DWORD PTR i$35[rbp]
  00dfb	ff c0		 inc	 eax
  00dfd	89 85 94 1f 00
	00		 mov	 DWORD PTR i$35[rbp], eax
$LN16@ImGui_Impl:
  00e03	8b 85 a4 05 00
	00		 mov	 eax, DWORD PTR old$[rbp+740]
  00e09	39 85 94 1f 00
	00		 cmp	 DWORD PTR i$35[rbp], eax
  00e0f	73 35		 jae	 SHORT $LN15@ImGui_Impl
  00e11	8b 85 94 1f 00
	00		 mov	 eax, DWORD PTR i$35[rbp]
  00e17	48 83 bc c5 b0
	0d 00 00 00	 cmp	 QWORD PTR old$[rbp+rax*8+2800], 0
  00e20	74 22		 je	 SHORT $LN46@ImGui_Impl
  00e22	8b 85 94 1f 00
	00		 mov	 eax, DWORD PTR i$35[rbp]
  00e28	48 8b 84 c5 b0
	0d 00 00	 mov	 rax, QWORD PTR old$[rbp+rax*8+2800]
  00e30	8b 8d 94 1f 00
	00		 mov	 ecx, DWORD PTR i$35[rbp]
  00e36	48 8b 8c cd b0
	0d 00 00	 mov	 rcx, QWORD PTR old$[rbp+rcx*8+2800]
  00e3e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00e41	ff 50 10	 call	 QWORD PTR [rax+16]
$LN46@ImGui_Impl:

; 301  :     ctx->IASetPrimitiveTopology(old.PrimitiveTopology);

  00e44	eb af		 jmp	 SHORT $LN14@ImGui_Impl
$LN15@ImGui_Impl:
  00e46	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00e4a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00e4d	8b 95 b0 1d 00
	00		 mov	 edx, DWORD PTR old$[rbp+6896]
  00e53	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00e57	ff 90 c0 00 00
	00		 call	 QWORD PTR [rax+192]

; 302  :     ctx->IASetIndexBuffer(old.IndexBuffer, old.IndexBufferFormat, old.IndexBufferOffset); if (old.IndexBuffer) old.IndexBuffer->Release();

  00e5d	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00e61	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00e64	44 8b 8d d0 1d
	00 00		 mov	 r9d, DWORD PTR old$[rbp+6928]
  00e6b	44 8b 85 dc 1d
	00 00		 mov	 r8d, DWORD PTR old$[rbp+6940]
  00e72	48 8b 95 b8 1d
	00 00		 mov	 rdx, QWORD PTR old$[rbp+6904]
  00e79	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00e7d	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]
  00e83	48 83 bd b8 1d
	00 00 00	 cmp	 QWORD PTR old$[rbp+6904], 0
  00e8b	74 14		 je	 SHORT $LN47@ImGui_Impl
  00e8d	48 8b 85 b8 1d
	00 00		 mov	 rax, QWORD PTR old$[rbp+6904]
  00e94	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00e97	48 8b 8d b8 1d
	00 00		 mov	 rcx, QWORD PTR old$[rbp+6904]
  00e9e	ff 50 10	 call	 QWORD PTR [rax+16]
$LN47@ImGui_Impl:

; 303  :     ctx->IASetVertexBuffers(0, 1, &old.VertexBuffer, &old.VertexBufferStride, &old.VertexBufferOffset); if (old.VertexBuffer) old.VertexBuffer->Release();

  00ea1	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00ea5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00ea8	48 8d 8d d8 1d
	00 00		 lea	 rcx, QWORD PTR old$[rbp+6936]
  00eaf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00eb4	48 8d 8d d4 1d
	00 00		 lea	 rcx, QWORD PTR old$[rbp+6932]
  00ebb	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00ec0	4c 8d 8d c0 1d
	00 00		 lea	 r9, QWORD PTR old$[rbp+6912]
  00ec7	41 b8 01 00 00
	00		 mov	 r8d, 1
  00ecd	33 d2		 xor	 edx, edx
  00ecf	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00ed3	ff 90 90 00 00
	00		 call	 QWORD PTR [rax+144]
  00ed9	48 83 bd c0 1d
	00 00 00	 cmp	 QWORD PTR old$[rbp+6912], 0
  00ee1	74 14		 je	 SHORT $LN48@ImGui_Impl
  00ee3	48 8b 85 c0 1d
	00 00		 mov	 rax, QWORD PTR old$[rbp+6912]
  00eea	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00eed	48 8b 8d c0 1d
	00 00		 mov	 rcx, QWORD PTR old$[rbp+6912]
  00ef4	ff 50 10	 call	 QWORD PTR [rax+16]
$LN48@ImGui_Impl:

; 304  :     ctx->IASetInputLayout(old.InputLayout); if (old.InputLayout) old.InputLayout->Release();

  00ef7	48 8b 45 28	 mov	 rax, QWORD PTR ctx$[rbp]
  00efb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00efe	48 8b 95 e0 1d
	00 00		 mov	 rdx, QWORD PTR old$[rbp+6944]
  00f05	48 8b 4d 28	 mov	 rcx, QWORD PTR ctx$[rbp]
  00f09	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00f0f	48 83 bd e0 1d
	00 00 00	 cmp	 QWORD PTR old$[rbp+6944], 0
  00f17	74 14		 je	 SHORT $LN49@ImGui_Impl
  00f19	48 8b 85 e0 1d
	00 00		 mov	 rax, QWORD PTR old$[rbp+6944]
  00f20	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00f23	48 8b 8d e0 1d
	00 00		 mov	 rcx, QWORD PTR old$[rbp+6944]
  00f2a	ff 50 10	 call	 QWORD PTR [rax+16]
$LN49@ImGui_Impl:
$LN1@ImGui_Impl:

; 305  : }

  00f2d	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00f31	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z$rtcFrameData
  00f38	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00f3d	48 8b 8d b8 25
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00f44	48 33 cd	 xor	 rcx, rbp
  00f47	e8 00 00 00 00	 call	 __security_check_cookie
  00f4c	48 8d a5 c8 25
	00 00		 lea	 rsp, QWORD PTR [rbp+9672]
  00f53	5f		 pop	 rdi
  00f54	5d		 pop	 rbp
  00f55	c3		 ret	 0
?ImGui_ImplDX11_RenderDrawData@@YAXPEAUImDrawData@@@Z ENDP ; ImGui_ImplDX11_RenderDrawData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\tool\imgui\imgui_impl_dx11.cpp
;	COMDAT ?ImGui_ImplDX11_NewFrame@@YAXXZ
_TEXT	SEGMENT
bd$ = 8
?ImGui_ImplDX11_NewFrame@@YAXXZ PROC			; ImGui_ImplDX11_NewFrame, COMDAT

; 590  : {

$LN6:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 591  :     ImGui_ImplDX11_Data* bd = ImGui_ImplDX11_GetBackendData();

  0001e	e8 00 00 00 00	 call	 ?ImGui_ImplDX11_GetBackendData@@YAPEAUImGui_ImplDX11_Data@@XZ ; ImGui_ImplDX11_GetBackendData
  00023	48 89 45 08	 mov	 QWORD PTR bd$[rbp], rax

; 592  :     IM_ASSERT(bd != nullptr && "Did you call ImGui_ImplDX11_Init()?");

  00027	48 83 7d 08 00	 cmp	 QWORD PTR bd$[rbp], 0
  0002c	74 0c		 je	 SHORT $LN4@ImGui_Impl
  0002e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CE@BBLPMFDA@Did?5you?5call?5ImGui_ImplDX11_Init@
  00035	48 85 c0	 test	 rax, rax
  00038	75 22		 jne	 SHORT $LN5@ImGui_Impl
$LN4@ImGui_Impl:
  0003a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImGui_ImplDX11_NewFrame@@YAXXZ@4JA
  00040	83 c0 02	 add	 eax, 2
  00043	44 8b c0	 mov	 r8d, eax
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1JC@KDJDKOBM@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAa?$AAr?$AAc?$AAc?$AAo?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2@
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GO@JAOHHKNM@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAD?$AAi?$AAd?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAI@
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005a	33 c0		 xor	 eax, eax
$LN5@ImGui_Impl:

; 593  : 
; 594  :     if (!bd->pFontSampler)

  0005c	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00060	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00065	75 05		 jne	 SHORT $LN2@ImGui_Impl

; 595  :         ImGui_ImplDX11_CreateDeviceObjects();

  00067	e8 00 00 00 00	 call	 ?ImGui_ImplDX11_CreateDeviceObjects@@YA_NXZ ; ImGui_ImplDX11_CreateDeviceObjects
$LN2@ImGui_Impl:

; 596  : }

  0006c	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00073	5f		 pop	 rdi
  00074	5d		 pop	 rbp
  00075	c3		 ret	 0
?ImGui_ImplDX11_NewFrame@@YAXXZ ENDP			; ImGui_ImplDX11_NewFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\tool\imgui\imgui_impl_dx11.cpp
;	COMDAT ?ImGui_ImplDX11_Shutdown@@YAXXZ
_TEXT	SEGMENT
bd$ = 8
io$ = 40
?ImGui_ImplDX11_Shutdown@@YAXXZ PROC			; ImGui_ImplDX11_Shutdown, COMDAT

; 575  : {

$LN8:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 576  :     ImGui_ImplDX11_Data* bd = ImGui_ImplDX11_GetBackendData();

  0001e	e8 00 00 00 00	 call	 ?ImGui_ImplDX11_GetBackendData@@YAPEAUImGui_ImplDX11_Data@@XZ ; ImGui_ImplDX11_GetBackendData
  00023	48 89 45 08	 mov	 QWORD PTR bd$[rbp], rax

; 577  :     IM_ASSERT(bd != nullptr && "No renderer backend to shutdown, or already shutdown?");

  00027	48 83 7d 08 00	 cmp	 QWORD PTR bd$[rbp], 0
  0002c	74 0c		 je	 SHORT $LN6@ImGui_Impl
  0002e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DG@PGEIMAGB@No?5renderer?5backend?5to?5shutdown?0@
  00035	48 85 c0	 test	 rax, rax
  00038	75 22		 jne	 SHORT $LN7@ImGui_Impl
$LN6@ImGui_Impl:
  0003a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImGui_ImplDX11_Shutdown@@YAXXZ@4JA
  00040	83 c0 02	 add	 eax, 2
  00043	44 8b c0	 mov	 r8d, eax
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1JC@KDJDKOBM@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAa?$AAr?$AAc?$AAc?$AAo?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2@
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1JC@MCIBIMON@?$AAb?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAN?$AAo?$AA?5?$AAr?$AAe?$AAn?$AAd?$AAe?$AAr?$AAe?$AAr?$AA?5?$AAb?$AAa@
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005a	33 c0		 xor	 eax, eax
$LN7@ImGui_Impl:

; 578  :     ImGuiIO& io = ImGui::GetIO();

  0005c	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  00061	48 89 45 28	 mov	 QWORD PTR io$[rbp], rax

; 579  : 
; 580  :     ImGui_ImplDX11_InvalidateDeviceObjects();

  00065	e8 00 00 00 00	 call	 ?ImGui_ImplDX11_InvalidateDeviceObjects@@YAXXZ ; ImGui_ImplDX11_InvalidateDeviceObjects

; 581  :     if (bd->pFactory)             { bd->pFactory->Release(); }

  0006a	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  0006e	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00073	74 16		 je	 SHORT $LN2@ImGui_Impl
  00075	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00079	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0007d	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  00081	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00085	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00088	ff 50 10	 call	 QWORD PTR [rax+16]
$LN2@ImGui_Impl:

; 582  :     if (bd->pd3dDevice)           { bd->pd3dDevice->Release(); }

  0008b	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  0008f	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00093	74 14		 je	 SHORT $LN3@ImGui_Impl
  00095	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  000a0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a6	ff 50 10	 call	 QWORD PTR [rax+16]
$LN3@ImGui_Impl:

; 583  :     if (bd->pd3dDeviceContext)    { bd->pd3dDeviceContext->Release(); }

  000a9	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  000ad	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  000b2	74 16		 je	 SHORT $LN4@ImGui_Impl
  000b4	48 8b 45 08	 mov	 rax, QWORD PTR bd$[rbp]
  000b8	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000bc	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  000c0	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000c4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c7	ff 50 10	 call	 QWORD PTR [rax+16]
$LN4@ImGui_Impl:

; 584  :     io.BackendRendererName = nullptr;

  000ca	48 8b 45 28	 mov	 rax, QWORD PTR io$[rbp]
  000ce	48 c7 80 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+136], 0

; 585  :     io.BackendRendererUserData = nullptr;

  000d9	48 8b 45 28	 mov	 rax, QWORD PTR io$[rbp]
  000dd	48 c7 80 98 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+152], 0

; 586  :     IM_DELETE(bd);

  000e8	48 8b 4d 08	 mov	 rcx, QWORD PTR bd$[rbp]
  000ec	e8 00 00 00 00	 call	 ??$IM_DELETE@UImGui_ImplDX11_Data@@@@YAXPEAUImGui_ImplDX11_Data@@@Z ; IM_DELETE<ImGui_ImplDX11_Data>

; 587  : }

  000f1	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000f8	5f		 pop	 rdi
  000f9	5d		 pop	 rbp
  000fa	c3		 ret	 0
?ImGui_ImplDX11_Shutdown@@YAXXZ ENDP			; ImGui_ImplDX11_Shutdown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\tool\imgui\imgui_impl_dx11.cpp
;	COMDAT ?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z
_TEXT	SEGMENT
io$ = 8
bd$ = 40
pDXGIDevice$ = 72
pDXGIAdapter$ = 104
pFactory$ = 136
$T6 = 360
$T7 = 392
$T8 = 424
$T9 = 456
$T10 = 484
$T11 = 520
tv217 = 536
tv216 = 536
tv131 = 536
tv89 = 536
__$ArrayPad$ = 544
device$ = 592
device_context$ = 600
?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z PROC ; ImGui_ImplDX11_Init, COMDAT

; 543  : {

$LN13:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 58 02
	00 00		 sub	 rsp, 600		; 00000258H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 96 00 00 00	 mov	 ecx, 150		; 00000096H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR [rsp+632]
  0002f	48 c7 85 08 02
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T11[rbp], -2
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 20 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 544  :     ImGuiIO& io = ImGui::GetIO();

  0004b	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAEAUImGuiIO@@XZ ; ImGui::GetIO
  00050	48 89 45 08	 mov	 QWORD PTR io$[rbp], rax

; 545  :     IM_ASSERT(io.BackendRendererUserData == nullptr && "Already initialized a renderer backend!");

  00054	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  00058	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  00060	75 0c		 jne	 SHORT $LN8@ImGui_Impl
  00062	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CI@KPONPGNP@Already?5initialized?5a?5renderer?5b@
  00069	48 85 c0	 test	 rax, rax
  0006c	75 22		 jne	 SHORT $LN9@ImGui_Impl
$LN8@ImGui_Impl:
  0006e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4JA
  00074	83 c0 02	 add	 eax, 2
  00077	44 8b c0	 mov	 r8d, eax
  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1JC@KDJDKOBM@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAa?$AAr?$AAc?$AAc?$AAo?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2@
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1KG@KAGFNFPJ@?$AAi?$AAo?$AA?4?$AAB?$AAa?$AAc?$AAk?$AAe?$AAn?$AAd?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAe?$AAr?$AAU?$AAs?$AAe?$AAr?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAu@
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0008e	33 c0		 xor	 eax, eax
$LN9@ImGui_Impl:

; 546  : 
; 547  :     // Setup backend capabilities flags
; 548  :     ImGui_ImplDX11_Data* bd = IM_NEW(ImGui_ImplDX11_Data)();

  00090	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  00095	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPEAX_K@Z ; ImGui::MemAlloc
  0009a	48 89 85 a8 01
	00 00		 mov	 QWORD PTR $T8[rbp], rax
  000a1	48 8d 85 e4 01
	00 00		 lea	 rax, QWORD PTR $T10[rbp]
  000a8	48 89 85 c8 01
	00 00		 mov	 QWORD PTR $T9[rbp], rax
  000af	4c 8b 85 a8 01
	00 00		 mov	 r8, QWORD PTR $T8[rbp]
  000b6	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR $T9[rbp]
  000bd	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  000c0	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  000c5	e8 00 00 00 00	 call	 ??2@YAPEAX_KUImNewWrapper@@PEAX@Z ; operator new
  000ca	48 89 85 88 01
	00 00		 mov	 QWORD PTR $T7[rbp], rax
  000d1	48 83 bd 88 01
	00 00 00	 cmp	 QWORD PTR $T7[rbp], 0
  000d9	74 15		 je	 SHORT $LN10@ImGui_Impl
  000db	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR $T7[rbp]
  000e2	e8 00 00 00 00	 call	 ??0ImGui_ImplDX11_Data@@QEAA@XZ ; ImGui_ImplDX11_Data::ImGui_ImplDX11_Data
  000e7	48 89 85 18 02
	00 00		 mov	 QWORD PTR tv89[rbp], rax
  000ee	eb 0b		 jmp	 SHORT $LN11@ImGui_Impl
$LN10@ImGui_Impl:
  000f0	48 c7 85 18 02
	00 00 00 00 00
	00		 mov	 QWORD PTR tv89[rbp], 0
$LN11@ImGui_Impl:
  000fb	48 8b 85 18 02
	00 00		 mov	 rax, QWORD PTR tv89[rbp]
  00102	48 89 85 68 01
	00 00		 mov	 QWORD PTR $T6[rbp], rax
  00109	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR $T6[rbp]
  00110	48 89 45 28	 mov	 QWORD PTR bd$[rbp], rax

; 549  :     io.BackendRendererUserData = (void*)bd;

  00114	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  00118	48 8b 4d 28	 mov	 rcx, QWORD PTR bd$[rbp]
  0011c	48 89 88 98 00
	00 00		 mov	 QWORD PTR [rax+152], rcx

; 550  :     io.BackendRendererName = "imgui_impl_dx11";

  00123	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  00127	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@OFLFAAJI@imgui_impl_dx11?$AA@
  0012e	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx

; 551  :     io.BackendFlags |= ImGuiBackendFlags_RendererHasVtxOffset;  // We can honor the ImDrawCmd::VtxOffset field, allowing for large meshes.

  00135	48 8b 45 08	 mov	 rax, QWORD PTR io$[rbp]
  00139	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0013c	83 c8 08	 or	 eax, 8
  0013f	48 8b 4d 08	 mov	 rcx, QWORD PTR io$[rbp]
  00143	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 552  : 
; 553  :     // Get factory from device
; 554  :     IDXGIDevice* pDXGIDevice = nullptr;

  00146	48 c7 45 48 00
	00 00 00	 mov	 QWORD PTR pDXGIDevice$[rbp], 0

; 555  :     IDXGIAdapter* pDXGIAdapter = nullptr;

  0014e	48 c7 45 68 00
	00 00 00	 mov	 QWORD PTR pDXGIAdapter$[rbp], 0

; 556  :     IDXGIFactory* pFactory = nullptr;

  00156	48 c7 85 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR pFactory$[rbp], 0

; 557  : 
; 558  :     if (device->QueryInterface(IID_PPV_ARGS(&pDXGIDevice)) == S_OK)

  00161	48 8d 4d 48	 lea	 rcx, QWORD PTR pDXGIDevice$[rbp]
  00165	e8 00 00 00 00	 call	 ??$IID_PPV_ARGS_Helper@UIDXGIDevice@@@@YAPEAPEAXPEAPEAUIDXGIDevice@@@Z ; IID_PPV_ARGS_Helper<IDXGIDevice>
  0016a	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR device$[rbp]
  00171	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00174	48 89 8d 18 02
	00 00		 mov	 QWORD PTR tv131[rbp], rcx
  0017b	4c 8b c0	 mov	 r8, rax
  0017e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_GUID_54ec77fa_1377_44e6_8c32_88fd5f44c84c
  00185	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR device$[rbp]
  0018c	48 8b 85 18 02
	00 00		 mov	 rax, QWORD PTR tv131[rbp]
  00193	ff 10		 call	 QWORD PTR [rax]
  00195	85 c0		 test	 eax, eax
  00197	0f 85 95 00 00
	00		 jne	 $LN2@ImGui_Impl

; 559  :         if (pDXGIDevice->GetParent(IID_PPV_ARGS(&pDXGIAdapter)) == S_OK)

  0019d	48 8d 4d 68	 lea	 rcx, QWORD PTR pDXGIAdapter$[rbp]
  001a1	e8 00 00 00 00	 call	 ??$IID_PPV_ARGS_Helper@UIDXGIAdapter@@@@YAPEAPEAXPEAPEAUIDXGIAdapter@@@Z ; IID_PPV_ARGS_Helper<IDXGIAdapter>
  001a6	48 8b 4d 48	 mov	 rcx, QWORD PTR pDXGIDevice$[rbp]
  001aa	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001ad	48 89 8d 18 02
	00 00		 mov	 QWORD PTR tv217[rbp], rcx
  001b4	4c 8b c0	 mov	 r8, rax
  001b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_GUID_2411e7e1_12ac_4ccf_bd14_9798e8534dc0
  001be	48 8b 4d 48	 mov	 rcx, QWORD PTR pDXGIDevice$[rbp]
  001c2	48 8b 85 18 02
	00 00		 mov	 rax, QWORD PTR tv217[rbp]
  001c9	ff 50 30	 call	 QWORD PTR [rax+48]
  001cc	85 c0		 test	 eax, eax
  001ce	75 62		 jne	 SHORT $LN2@ImGui_Impl

; 560  :             if (pDXGIAdapter->GetParent(IID_PPV_ARGS(&pFactory)) == S_OK)

  001d0	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR pFactory$[rbp]
  001d7	e8 00 00 00 00	 call	 ??$IID_PPV_ARGS_Helper@UIDXGIFactory@@@@YAPEAPEAXPEAPEAUIDXGIFactory@@@Z ; IID_PPV_ARGS_Helper<IDXGIFactory>
  001dc	48 8b 4d 68	 mov	 rcx, QWORD PTR pDXGIAdapter$[rbp]
  001e0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001e3	48 89 8d 18 02
	00 00		 mov	 QWORD PTR tv216[rbp], rcx
  001ea	4c 8b c0	 mov	 r8, rax
  001ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_GUID_7b7166ec_21c7_44ae_b21a_c9ae321ae369
  001f4	48 8b 4d 68	 mov	 rcx, QWORD PTR pDXGIAdapter$[rbp]
  001f8	48 8b 85 18 02
	00 00		 mov	 rax, QWORD PTR tv216[rbp]
  001ff	ff 50 30	 call	 QWORD PTR [rax+48]
  00202	85 c0		 test	 eax, eax
  00204	75 2c		 jne	 SHORT $LN2@ImGui_Impl

; 561  :             {
; 562  :                 bd->pd3dDevice = device;

  00206	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  0020a	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR device$[rbp]
  00211	48 89 08	 mov	 QWORD PTR [rax], rcx

; 563  :                 bd->pd3dDeviceContext = device_context;

  00214	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  00218	48 8b 8d 58 02
	00 00		 mov	 rcx, QWORD PTR device_context$[rbp]
  0021f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 564  :                 bd->pFactory = pFactory;

  00223	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  00227	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR pFactory$[rbp]
  0022e	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN2@ImGui_Impl:

; 565  :             }
; 566  :     if (pDXGIDevice) pDXGIDevice->Release();

  00232	48 83 7d 48 00	 cmp	 QWORD PTR pDXGIDevice$[rbp], 0
  00237	74 0e		 je	 SHORT $LN5@ImGui_Impl
  00239	48 8b 45 48	 mov	 rax, QWORD PTR pDXGIDevice$[rbp]
  0023d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00240	48 8b 4d 48	 mov	 rcx, QWORD PTR pDXGIDevice$[rbp]
  00244	ff 50 10	 call	 QWORD PTR [rax+16]
$LN5@ImGui_Impl:

; 567  :     if (pDXGIAdapter) pDXGIAdapter->Release();

  00247	48 83 7d 68 00	 cmp	 QWORD PTR pDXGIAdapter$[rbp], 0
  0024c	74 0e		 je	 SHORT $LN6@ImGui_Impl
  0024e	48 8b 45 68	 mov	 rax, QWORD PTR pDXGIAdapter$[rbp]
  00252	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00255	48 8b 4d 68	 mov	 rcx, QWORD PTR pDXGIAdapter$[rbp]
  00259	ff 50 10	 call	 QWORD PTR [rax+16]
$LN6@ImGui_Impl:

; 568  :     bd->pd3dDevice->AddRef();

  0025c	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  00260	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00263	48 8b 4d 28	 mov	 rcx, QWORD PTR bd$[rbp]
  00267	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0026a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0026d	ff 50 08	 call	 QWORD PTR [rax+8]

; 569  :     bd->pd3dDeviceContext->AddRef();

  00270	48 8b 45 28	 mov	 rax, QWORD PTR bd$[rbp]
  00274	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00278	48 8b 4d 28	 mov	 rcx, QWORD PTR bd$[rbp]
  0027c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00280	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00283	ff 50 08	 call	 QWORD PTR [rax+8]

; 570  : 
; 571  :     return true;

  00286	b0 01		 mov	 al, 1

; 572  : }

  00288	48 8b f8	 mov	 rdi, rax
  0028b	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0028f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z$rtcFrameData
  00296	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0029b	48 8b c7	 mov	 rax, rdi
  0029e	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  002a5	48 33 cd	 xor	 rcx, rbp
  002a8	e8 00 00 00 00	 call	 __security_check_cookie
  002ad	48 8d a5 38 02
	00 00		 lea	 rsp, QWORD PTR [rbp+568]
  002b4	5f		 pop	 rdi
  002b5	5d		 pop	 rbp
  002b6	c3		 ret	 0
?ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z ENDP ; ImGui_ImplDX11_Init
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
io$ = 8
bd$ = 40
pDXGIDevice$ = 72
pDXGIAdapter$ = 104
pFactory$ = 136
$T6 = 360
$T7 = 392
$T8 = 424
$T9 = 456
$T10 = 484
$T11 = 520
tv217 = 536
tv216 = 536
tv131 = 536
tv89 = 536
__$ArrayPad$ = 544
device$ = 592
device_context$ = 600
?dtor$0@?0??ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA PROC ; `ImGui_ImplDX11_Init'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	4c 8b 85 a8 01
	00 00		 mov	 r8, QWORD PTR $T8[rbp]
  0001b	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR $T9[rbp]
  00022	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00025	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR $T7[rbp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAXUImNewWrapper@@0@Z ; operator delete
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?dtor$0@?0??ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA ENDP ; `ImGui_ImplDX11_Init'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
io$ = 8
bd$ = 40
pDXGIDevice$ = 72
pDXGIAdapter$ = 104
pFactory$ = 136
$T6 = 360
$T7 = 392
$T8 = 424
$T9 = 456
$T10 = 484
$T11 = 520
tv217 = 536
tv216 = 536
tv131 = 536
tv89 = 536
__$ArrayPad$ = 544
device$ = 592
device_context$ = 600
?dtor$0@?0??ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA PROC ; `ImGui_ImplDX11_Init'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	4c 8b 85 a8 01
	00 00		 mov	 r8, QWORD PTR $T8[rbp]
  0001b	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR $T9[rbp]
  00022	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00025	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR $T7[rbp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAXUImNewWrapper@@0@Z ; operator delete
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?dtor$0@?0??ImGui_ImplDX11_Init@@YA_NPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z@4HA ENDP ; `ImGui_ImplDX11_Init'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\tool\imgui\imgui.h
;	COMDAT ?SetTexID@ImFontAtlas@@QEAAXPEAX@Z
_TEXT	SEGMENT
this$ = 224
id$ = 232
?SetTexID@ImFontAtlas@@QEAAXPEAX@Z PROC			; ImFontAtlas::SetTexID, COMDAT

; 2766 :     void                        SetTexID(ImTextureID id)    { TexID = id; }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  0002d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR id$[rbp]
  0003b	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0003f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
?SetTexID@ImFontAtlas@@QEAAXPEAX@Z ENDP			; ImFontAtlas::SetTexID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\tool\imgui\imgui.h
;	COMDAT ??A?$ImVector@UImDrawCmd@@@@QEBAAEBUImDrawCmd@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImDrawCmd@@@@QEBAAEBUImDrawCmd@@H@Z PROC	; ImVector<ImDrawCmd>::operator[], COMDAT

; 1787 :     inline const T&     operator[](int i) const             { IM_ASSERT(i >= 0 && i < Size); return Data[i]; }

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	83 bd e8 00 00
	00 00		 cmp	 DWORD PTR i$[rbp], 0
  00035	7c 11		 jl	 SHORT $LN3@operator
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	39 85 e8 00 00
	00		 cmp	 DWORD PTR i$[rbp], eax
  00046	7c 1c		 jl	 SHORT $LN4@operator
$LN3@operator:
  00048	41 b8 fb 06 00
	00		 mov	 r8d, 1787		; 000006fbH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1HK@CCADOJHB@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAa?$AAr?$AAc?$AAc?$AAo?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAg?$AAi?$AAt?$AAh?$AAu?$AAb?$AA?2@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN4@operator:
  00064	48 63 85 e8 00
	00 00		 movsxd	 rax, DWORD PTR i$[rbp]
  0006b	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  0006f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0007a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??A?$ImVector@UImDrawCmd@@@@QEBAAEBUImDrawCmd@@H@Z ENDP	; ImVector<ImDrawCmd>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\tool\imgui\imgui.h
;	COMDAT ?GetTexID@ImDrawCmd@@QEBAPEAXXZ
_TEXT	SEGMENT
this$ = 224
?GetTexID@ImDrawCmd@@QEBAPEAXXZ PROC			; ImDrawCmd::GetTexID, COMDAT

; 2406 :     inline ImTextureID GetTexID() const { return TextureId; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00033	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003a	5f		 pop	 rdi
  0003b	5d		 pop	 rbp
  0003c	c3		 ret	 0
?GetTexID@ImDrawCmd@@QEBAPEAXXZ ENDP			; ImDrawCmd::GetTexID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\tool\imgui\imgui.h
;	COMDAT ??3@YAXPEAXUImNewWrapper@@0@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
__formal$ = 240
??3@YAXPEAXUImNewWrapper@@0@Z PROC			; operator delete, COMDAT

; 1740 : inline void  operator delete(void*, ImNewWrapper, void*)   {} // This is only required so we can use the symmetrical new()

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00017	48 8b ec	 mov	 rbp, rsp
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00031	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00038	5f		 pop	 rdi
  00039	5d		 pop	 rbp
  0003a	c3		 ret	 0
??3@YAXPEAXUImNewWrapper@@0@Z ENDP			; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\arcco\documents\github\framework\tool\imgui\imgui.h
;	COMDAT ??2@YAPEAX_KUImNewWrapper@@PEAX@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
ptr$ = 240
??2@YAPEAX_KUImNewWrapper@@PEAX@Z PROC			; operator new, COMDAT

; 1739 : inline void* operator new(size_t, ImNewWrapper, void* ptr) { return ptr; }

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00017	48 8b ec	 mov	 rbp, rsp
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00031	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR ptr$[rbp]
  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
??2@YAPEAX_KUImNewWrapper@@PEAX@Z ENDP			; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\arcco\documents\github\framework\tool\imgui\imgui.h
;	COMDAT ??0ImVec2@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 80
_x$ = 88
_y$ = 96
??0ImVec2@@QEAA@MM@Z PROC				; ImVec2::ImVec2, COMDAT

; 257  :     constexpr ImVec2(float _x, float _y)    : x(_x), y(_y) { }

$LN3:
  00000	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  00006	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  0000c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00011	55		 push	 rbp
  00012	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00016	48 8b ec	 mov	 rbp, rsp
  00019	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0001d	f3 0f 10 45 58	 movss	 xmm0, DWORD PTR _x$[rbp]
  00022	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  00026	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  0002a	f3 0f 10 45 60	 movss	 xmm0, DWORD PTR _y$[rbp]
  0002f	f3 0f 11 40 04	 movss	 DWORD PTR [rax+4], xmm0
  00034	48 8b 45 50	 mov	 rax, QWORD PTR this$[rbp]
  00038	48 8d 65 40	 lea	 rsp, QWORD PTR [rbp+64]
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
??0ImVec2@@QEAA@MM@Z ENDP				; ImVec2::ImVec2
_TEXT	ENDS
END
